
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ac  08012688  08012688  00022688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014734  08014734  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014734  08014734  00024734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801473c  0801473c  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801473c  0801473c  0002473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014744  08014744  00024744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014748  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200006d8  08014e20  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  08014e20  00030f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b94  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ab  00000000  00000000  0004a2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0004dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e9  00000000  00000000  0004f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217de  00000000  00000000  00050799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e67d  00000000  00000000  00071f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae2f  00000000  00000000  000905f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007240  00000000  00000000  0015b424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00162664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801266c 	.word	0x0801266c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	0801266c 	.word	0x0801266c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080141d0 	.word	0x080141d0
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46c6      	mov	lr, r8
 80025ac:	b500      	push	{lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f001 fbc5 	bl	8003d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 fa45 	bl	8002a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ba:	f000 fcd7 	bl	8002f6c <MX_GPIO_Init>
  MX_RTC_Init();
 80025be:	f000 fa97 	bl	8002af0 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c2:	f000 fb77 	bl	8002cb4 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c6:	f000 fb37 	bl	8002c38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025ca:	f000 fbb1 	bl	8002d30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ce:	f000 fbfd 	bl	8002dcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d2:	f000 fc49 	bl	8002e68 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d6:	f000 fc95 	bl	8002f04 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <main+0x258>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fdd0 	bl	8003184 <send_debug_logs>

  my_sys_init () ;
 80025e4:	f000 fdfe 	bl	80031e4 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u\0" , sys_mode ) ;
 80025e8:	4b86      	ldr	r3, [pc, #536]	; (8002804 <main+0x25c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	4986      	ldr	r1, [pc, #536]	; (8002808 <main+0x260>)
 80025f0:	4b86      	ldr	r3, [pc, #536]	; (800280c <main+0x264>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f009 fa22 	bl	800ba3c <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025f8:	4b84      	ldr	r3, [pc, #528]	; (800280c <main+0x264>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fdc2 	bl	8003184 <send_debug_logs>

  my_tim_init () ;
 8002600:	f000 ff88 	bl	8003514 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002604:	2002      	movs	r0, #2
 8002606:	f000 fe75 	bl	80032f4 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260a:	f000 fea5 	bl	8003358 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800260e:	4b80      	ldr	r3, [pc, #512]	; (8002810 <main+0x268>)
 8002610:	0018      	movs	r0, r3
 8002612:	f006 ff8f 	bl	8009534 <my_gnss_acq_coordinates>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	4b7e      	ldr	r3, [pc, #504]	; (8002814 <main+0x26c>)
 800261c:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 800261e:	f000 feb5 	bl	800338c <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002622:	4b7d      	ldr	r3, [pc, #500]	; (8002818 <main+0x270>)
 8002624:	0018      	movs	r0, r3
 8002626:	f007 f90b 	bl	8009840 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262a:	4b79      	ldr	r3, [pc, #484]	; (8002810 <main+0x268>)
 800262c:	7c1b      	ldrb	r3, [r3, #16]
 800262e:	001e      	movs	r6, r3
 8002630:	4b77      	ldr	r3, [pc, #476]	; (8002810 <main+0x268>)
 8002632:	689c      	ldr	r4, [r3, #8]
 8002634:	68dd      	ldr	r5, [r3, #12]
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <main+0x268>)
 8002638:	8a5b      	ldrh	r3, [r3, #18]
 800263a:	4698      	mov	r8, r3
 800263c:	4b74      	ldr	r3, [pc, #464]	; (8002810 <main+0x268>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	213c      	movs	r1, #60	; 0x3c
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd7a 	bl	800013c <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	4a74      	ldr	r2, [pc, #464]	; (800281c <main+0x274>)
 800264c:	4974      	ldr	r1, [pc, #464]	; (8002820 <main+0x278>)
 800264e:	486f      	ldr	r0, [pc, #444]	; (800280c <main+0x264>)
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	4643      	mov	r3, r8
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	9402      	str	r4, [sp, #8]
 8002658:	9503      	str	r5, [sp, #12]
 800265a:	9601      	str	r6, [sp, #4]
 800265c:	4b6e      	ldr	r3, [pc, #440]	; (8002818 <main+0x270>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23b2      	movs	r3, #178	; 0xb2
 8002662:	f009 f9eb 	bl	800ba3c <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <main+0x264>)
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fd8b 	bl	8003184 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 800266e:	4b69      	ldr	r3, [pc, #420]	; (8002814 <main+0x26c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4053      	eors	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d027      	beq.n	80026cc <main+0x124>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267c:	4b69      	ldr	r3, [pc, #420]	; (8002824 <main+0x27c>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f007 f91f 	bl	80098c4 <my_rtc_set_alarm>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d020      	beq.n	80026cc <main+0x124>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode\0" , __FILE__ , __LINE__ ) ;
 800268a:	4a64      	ldr	r2, [pc, #400]	; (800281c <main+0x274>)
 800268c:	4966      	ldr	r1, [pc, #408]	; (8002828 <main+0x280>)
 800268e:	485f      	ldr	r0, [pc, #380]	; (800280c <main+0x264>)
 8002690:	23b8      	movs	r3, #184	; 0xb8
 8002692:	f009 f9d3 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <main+0x264>)
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fd73 	bl	8003184 <send_debug_logs>
		  my_tim_stop () ;
 800269e:	f000 ff55 	bl	800354c <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a2:	4b62      	ldr	r3, [pc, #392]	; (800282c <main+0x284>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026a8:	f002 f812 	bl	80046d0 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <main+0x270>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f007 f8c6 	bl	8009840 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b4:	4a59      	ldr	r2, [pc, #356]	; (800281c <main+0x274>)
 80026b6:	495e      	ldr	r1, [pc, #376]	; (8002830 <main+0x288>)
 80026b8:	4854      	ldr	r0, [pc, #336]	; (800280c <main+0x264>)
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <main+0x270>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	23be      	movs	r3, #190	; 0xbe
 80026c0:	f009 f9bc 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c4:	4b51      	ldr	r3, [pc, #324]	; (800280c <main+0x264>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fd5c 	bl	8003184 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026cc:	f006 fe80 	bl	80093d0 <my_astro_init>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4053      	eors	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01e      	beq.n	800271c <main+0x174>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026de:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <main+0x270>)
 80026e0:	0018      	movs	r0, r3
 80026e2:	f007 f8ad 	bl	8009840 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026e6:	4a4d      	ldr	r2, [pc, #308]	; (800281c <main+0x274>)
 80026e8:	4952      	ldr	r1, [pc, #328]	; (8002834 <main+0x28c>)
 80026ea:	4848      	ldr	r0, [pc, #288]	; (800280c <main+0x264>)
 80026ec:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <main+0x270>)
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	23c6      	movs	r3, #198	; 0xc6
 80026f2:	f009 f9a3 	bl	800ba3c <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80026f6:	4b45      	ldr	r3, [pc, #276]	; (800280c <main+0x264>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 fd43 	bl	8003184 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 80026fe:	f001 fcde 	bl	80040be <HAL_NVIC_SystemReset>
 8002702:	e0b5      	b.n	8002870 <main+0x2c8>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 8002704:	4a45      	ldr	r2, [pc, #276]	; (800281c <main+0x274>)
 8002706:	494c      	ldr	r1, [pc, #304]	; (8002838 <main+0x290>)
 8002708:	4840      	ldr	r0, [pc, #256]	; (800280c <main+0x264>)
 800270a:	23ce      	movs	r3, #206	; 0xce
 800270c:	f009 f996 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <main+0x264>)
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fd36 	bl	8003184 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002718:	f006 feba 	bl	8009490 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800271c:	f000 fee8 	bl	80034f0 <my_astro_evt_pin>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d1ef      	bne.n	8002704 <main+0x15c>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <main+0x294>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	4698      	mov	r8, r3
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <main+0x268>)
 800272c:	689c      	ldr	r4, [r3, #8]
 800272e:	68dd      	ldr	r5, [r3, #12]
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <main+0x268>)
 8002732:	8a5b      	ldrh	r3, [r3, #18]
 8002734:	001e      	movs	r6, r3
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <main+0x268>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	213c      	movs	r1, #60	; 0x3c
 800273c:	0018      	movs	r0, r3
 800273e:	f7fd fcfd 	bl	800013c <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	001a      	movs	r2, r3
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <main+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	493e      	ldr	r1, [pc, #248]	; (8002844 <main+0x29c>)
 800274c:	483e      	ldr	r0, [pc, #248]	; (8002848 <main+0x2a0>)
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	9203      	str	r2, [sp, #12]
 8002752:	9602      	str	r6, [sp, #8]
 8002754:	9400      	str	r4, [sp, #0]
 8002756:	9501      	str	r5, [sp, #4]
 8002758:	4642      	mov	r2, r8
 800275a:	f009 f96f 	bl	800ba3c <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <main+0x274>)
 8002760:	493a      	ldr	r1, [pc, #232]	; (800284c <main+0x2a4>)
 8002762:	482a      	ldr	r0, [pc, #168]	; (800280c <main+0x264>)
 8002764:	4b38      	ldr	r3, [pc, #224]	; (8002848 <main+0x2a0>)
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	23d3      	movs	r3, #211	; 0xd3
 800276a:	f009 f967 	bl	800ba3c <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <main+0x264>)
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fd07 	bl	8003184 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <main+0x268>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <main+0x268>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f006 fec7 	bl	8009514 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <main+0x294>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	b291      	uxth	r1, r2
 800278e:	4a2b      	ldr	r2, [pc, #172]	; (800283c <main+0x294>)
 8002790:	8011      	strh	r1, [r2, #0]
 8002792:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <main+0x2a0>)
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f006 fe52 	bl	8009440 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <main+0x27c>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f007 f88f 	bl	80098c4 <my_rtc_set_alarm>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d062      	beq.n	8002870 <main+0x2c8>
	  {
		  sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ ) ;
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <main+0x274>)
 80027ac:	4928      	ldr	r1, [pc, #160]	; (8002850 <main+0x2a8>)
 80027ae:	4817      	ldr	r0, [pc, #92]	; (800280c <main+0x264>)
 80027b0:	23d9      	movs	r3, #217	; 0xd9
 80027b2:	f009 f943 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <main+0x264>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fce3 	bl	8003184 <send_debug_logs>
		  my_tim_stop () ;
 80027be:	f000 fec5 	bl	800354c <my_tim_stop>
		  HAL_SuspendTick () ;
 80027c2:	f001 fb67 	bl	8003e94 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <main+0x284>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	01db      	lsls	r3, r3, #7
 80027d0:	2102      	movs	r1, #2
 80027d2:	0018      	movs	r0, r3
 80027d4:	f001 ff44 	bl	8004660 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80027d8:	f001 fb6a 	bl	8003eb0 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <main+0x270>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f007 f82e 	bl	8009840 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s, Wake-up\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <main+0x274>)
 80027e6:	491b      	ldr	r1, [pc, #108]	; (8002854 <main+0x2ac>)
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <main+0x264>)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <main+0x270>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	23e1      	movs	r3, #225	; 0xe1
 80027f0:	f009 f924 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <main+0x264>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fcc4 	bl	8003184 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027fc:	e038      	b.n	8002870 <main+0x2c8>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000000 	.word	0x20000000
 8002804:	20000b1c 	.word	0x20000b1c
 8002808:	080126b4 	.word	0x080126b4
 800280c:	20000a20 	.word	0x20000a20
 8002810:	20000bd8 	.word	0x20000bd8
 8002814:	20000bf1 	.word	0x20000bf1
 8002818:	20000b20 	.word	0x20000b20
 800281c:	080126c8 	.word	0x080126c8
 8002820:	080126dc 	.word	0x080126dc
 8002824:	20000008 	.word	0x20000008
 8002828:	0801271c 	.word	0x0801271c
 800282c:	20000bf0 	.word	0x20000bf0
 8002830:	0801273c 	.word	0x0801273c
 8002834:	08012748 	.word	0x08012748
 8002838:	08012768 	.word	0x08012768
 800283c:	20000b34 	.word	0x20000b34
 8002840:	20000004 	.word	0x20000004
 8002844:	08012780 	.word	0x08012780
 8002848:	20000b38 	.word	0x20000b38
 800284c:	08012794 	.word	0x08012794
 8002850:	080127a8 	.word	0x080127a8
 8002854:	080127dc 	.word	0x080127dc
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <main+0x45c>)
 800285a:	496b      	ldr	r1, [pc, #428]	; (8002a08 <main+0x460>)
 800285c:	486b      	ldr	r0, [pc, #428]	; (8002a0c <main+0x464>)
 800285e:	23ee      	movs	r3, #238	; 0xee
 8002860:	f009 f8ec 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002864:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <main+0x464>)
 8002866:	0018      	movs	r0, r3
 8002868:	f000 fc8c 	bl	8003184 <send_debug_logs>
		  my_astro_handle_evt () ;
 800286c:	f006 fe10 	bl	8009490 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002870:	f000 fe3e 	bl	80034f0 <my_astro_evt_pin>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d1ef      	bne.n	8002858 <main+0x2b0>
	  }
	  if ( astro_rcv_cmd_flag )
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <main+0x468>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <main+0x2de>
	  {
		  astro_rcv_cmd_flag = false ;
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <main+0x468>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <main+0x46c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <main+0x2e8>
 800288e:	e07a      	b.n	8002986 <main+0x3de>
	  {
		  my_rtc_alarm_flag = false ;
 8002890:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <main+0x46c>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002896:	f000 fd5f 	bl	8003358 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <main+0x470>)
 800289c:	0018      	movs	r0, r3
 800289e:	f006 fe49 	bl	8009534 <my_gnss_acq_coordinates>
 80028a2:	0003      	movs	r3, r0
 80028a4:	001a      	movs	r2, r3
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <main+0x474>)
 80028a8:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 80028aa:	f000 fd6f 	bl	800338c <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028ae:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <main+0x478>)
 80028b0:	0018      	movs	r0, r3
 80028b2:	f006 ffc5 	bl	8009840 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <main+0x470>)
 80028b8:	7c1b      	ldrb	r3, [r3, #16]
 80028ba:	001e      	movs	r6, r3
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <main+0x470>)
 80028be:	689c      	ldr	r4, [r3, #8]
 80028c0:	68dd      	ldr	r5, [r3, #12]
 80028c2:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <main+0x470>)
 80028c4:	8a5b      	ldrh	r3, [r3, #18]
 80028c6:	4698      	mov	r8, r3
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <main+0x470>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	213c      	movs	r1, #60	; 0x3c
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7fd fc34 	bl	800013c <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <main+0x45c>)
 80028d8:	4952      	ldr	r1, [pc, #328]	; (8002a24 <main+0x47c>)
 80028da:	484c      	ldr	r0, [pc, #304]	; (8002a0c <main+0x464>)
 80028dc:	9305      	str	r3, [sp, #20]
 80028de:	4643      	mov	r3, r8
 80028e0:	9304      	str	r3, [sp, #16]
 80028e2:	9402      	str	r4, [sp, #8]
 80028e4:	9503      	str	r5, [sp, #12]
 80028e6:	9601      	str	r6, [sp, #4]
 80028e8:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <main+0x478>)
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	23fd      	movs	r3, #253	; 0xfd
 80028ee:	f009 f8a5 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <main+0x464>)
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fc45 	bl	8003184 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028fa:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <main+0x474>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d041      	beq.n	8002986 <main+0x3de>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <main+0x470>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <main+0x470>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0019      	movs	r1, r3
 800290c:	0010      	movs	r0, r2
 800290e:	f006 fe01 	bl	8009514 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002912:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <main+0x480>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	4698      	mov	r8, r3
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <main+0x470>)
 800291a:	689c      	ldr	r4, [r3, #8]
 800291c:	68dd      	ldr	r5, [r3, #12]
 800291e:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <main+0x470>)
 8002920:	8a5b      	ldrh	r3, [r3, #18]
 8002922:	001e      	movs	r6, r3
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <main+0x470>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	213c      	movs	r1, #60	; 0x3c
 800292a:	0018      	movs	r0, r3
 800292c:	f7fd fc06 	bl	800013c <__udivsi3>
 8002930:	0003      	movs	r3, r0
 8002932:	469c      	mov	ip, r3
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <main+0x470>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <main+0x470>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	493b      	ldr	r1, [pc, #236]	; (8002a2c <main+0x484>)
 800293e:	483c      	ldr	r0, [pc, #240]	; (8002a30 <main+0x488>)
 8002940:	9305      	str	r3, [sp, #20]
 8002942:	9204      	str	r2, [sp, #16]
 8002944:	4663      	mov	r3, ip
 8002946:	9303      	str	r3, [sp, #12]
 8002948:	9602      	str	r6, [sp, #8]
 800294a:	9400      	str	r4, [sp, #0]
 800294c:	9501      	str	r5, [sp, #4]
 800294e:	4642      	mov	r2, r8
 8002950:	f009 f874 	bl	800ba3c <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <main+0x480>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	b291      	uxth	r1, r2
 800295c:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <main+0x480>)
 800295e:	8011      	strh	r1, [r2, #0]
 8002960:	4a33      	ldr	r2, [pc, #204]	; (8002a30 <main+0x488>)
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f006 fd6b 	bl	8009440 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ;
 800296a:	2382      	movs	r3, #130	; 0x82
 800296c:	005c      	lsls	r4, r3, #1
 800296e:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <main+0x45c>)
 8002970:	4930      	ldr	r1, [pc, #192]	; (8002a34 <main+0x48c>)
 8002972:	4826      	ldr	r0, [pc, #152]	; (8002a0c <main+0x464>)
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <main+0x488>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	0023      	movs	r3, r4
 800297a:	f009 f85f 	bl	800ba3c <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <main+0x464>)
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fbff 	bl	8003184 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <main+0x490>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	f006 ff9a 	bl	80098c4 <my_rtc_set_alarm>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d100      	bne.n	8002996 <main+0x3ee>
 8002994:	e76c      	b.n	8002870 <main+0x2c8>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <main+0x478>)
 8002998:	0018      	movs	r0, r3
 800299a:	f006 ff51 	bl	8009840 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800299e:	230c      	movs	r3, #12
 80029a0:	33ff      	adds	r3, #255	; 0xff
 80029a2:	001c      	movs	r4, r3
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <main+0x45c>)
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <main+0x494>)
 80029a8:	4818      	ldr	r0, [pc, #96]	; (8002a0c <main+0x464>)
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <main+0x478>)
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	0023      	movs	r3, r4
 80029b0:	f009 f844 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <main+0x464>)
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fbe4 	bl	8003184 <send_debug_logs>
		  my_tim_stop () ;
 80029bc:	f000 fdc6 	bl	800354c <my_tim_stop>
		  HAL_SuspendTick () ;
 80029c0:	f001 fa68 	bl	8003e94 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <main+0x46c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	2102      	movs	r1, #2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f001 fe45 	bl	8004660 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80029d6:	f001 fa6b 	bl	8003eb0 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <main+0x478>)
 80029dc:	0018      	movs	r0, r3
 80029de:	f006 ff2f 	bl	8009840 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80029e2:	2314      	movs	r3, #20
 80029e4:	33ff      	adds	r3, #255	; 0xff
 80029e6:	001c      	movs	r4, r3
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <main+0x45c>)
 80029ea:	4915      	ldr	r1, [pc, #84]	; (8002a40 <main+0x498>)
 80029ec:	4807      	ldr	r0, [pc, #28]	; (8002a0c <main+0x464>)
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <main+0x478>)
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	0023      	movs	r3, r4
 80029f4:	f009 f822 	bl	800ba3c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <main+0x464>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fbc2 	bl	8003184 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 8002a00:	e736      	b.n	8002870 <main+0x2c8>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	080126c8 	.word	0x080126c8
 8002a08:	08012768 	.word	0x08012768
 8002a0c:	20000a20 	.word	0x20000a20
 8002a10:	20000c00 	.word	0x20000c00
 8002a14:	20000bf0 	.word	0x20000bf0
 8002a18:	20000bd8 	.word	0x20000bd8
 8002a1c:	20000bf1 	.word	0x20000bf1
 8002a20:	20000b20 	.word	0x20000b20
 8002a24:	080126dc 	.word	0x080126dc
 8002a28:	20000b34 	.word	0x20000b34
 8002a2c:	080127f0 	.word	0x080127f0
 8002a30:	20000b38 	.word	0x20000b38
 8002a34:	08012794 	.word	0x08012794
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	08012808 	.word	0x08012808
 8002a40:	08012840 	.word	0x08012840

08002a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b095      	sub	sp, #84	; 0x54
 8002a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4a:	2414      	movs	r4, #20
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	0018      	movs	r0, r3
 8002a50:	233c      	movs	r3, #60	; 0x3c
 8002a52:	001a      	movs	r2, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	f009 f887 	bl	800bb68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	001a      	movs	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f009 f880 	bl	800bb68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 fe49 	bl	8004704 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a72:	f001 fde7 	bl	8004644 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <SystemClock_Config+0xa8>)
 8002a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <SystemClock_Config+0xa8>)
 8002a7c:	2118      	movs	r1, #24
 8002a7e:	438a      	bics	r2, r1
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2206      	movs	r2, #6
 8002a86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 fe76 	bl	800479c <HAL_RCC_OscConfig>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002ab4:	f000 fda8 	bl	8003608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2207      	movs	r2, #7
 8002abc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f002 f9c1 	bl	8004e5c <HAL_RCC_ClockConfig>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ade:	f000 fd93 	bl	8003608 <Error_Handler>
  }
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b015      	add	sp, #84	; 0x54
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40021000 	.word	0x40021000

08002af0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b090      	sub	sp, #64	; 0x40
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002af6:	232c      	movs	r3, #44	; 0x2c
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	0018      	movs	r0, r3
 8002afc:	2314      	movs	r3, #20
 8002afe:	001a      	movs	r2, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	f009 f831 	bl	800bb68 <memset>
  RTC_DateTypeDef sDate = {0};
 8002b06:	2328      	movs	r3, #40	; 0x28
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002b0e:	003b      	movs	r3, r7
 8002b10:	0018      	movs	r0, r3
 8002b12:	2328      	movs	r3, #40	; 0x28
 8002b14:	001a      	movs	r2, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	f009 f826 	bl	800bb68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b1c:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b1e:	4a45      	ldr	r2, [pc, #276]	; (8002c34 <MX_RTC_Init+0x144>)
 8002b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b2a:	227f      	movs	r2, #127	; 0x7f
 8002b2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b34:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	05d2      	lsls	r2, r2, #23
 8002b4c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f002 fd66 	bl	8005628 <HAL_RTC_Init>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b60:	f000 fd52 	bl	8003608 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b8a:	1879      	adds	r1, r7, r1
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	0018      	movs	r0, r3
 8002b92:	f002 fdeb 	bl	800576c <HAL_RTC_SetTime>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d001      	beq.n	8002b9e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b9a:	f000 fd35 	bl	8003608 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b9e:	2128      	movs	r1, #40	; 0x28
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2206      	movs	r2, #6
 8002ba4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2201      	movs	r2, #1
 8002bb0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002bb8:	1879      	adds	r1, r7, r1
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <MX_RTC_Init+0x140>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f002 fed8 	bl	8005974 <HAL_RTC_SetDate>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002bc8:	f000 fd1e 	bl	8003608 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002bcc:	003b      	movs	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002bde:	003b      	movs	r3, r7
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002be4:	003b      	movs	r3, r7
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bea:	003b      	movs	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002bfc:	003b      	movs	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c02:	003b      	movs	r3, r7
 8002c04:	2220      	movs	r2, #32
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c0a:	003b      	movs	r3, r7
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c12:	0039      	movs	r1, r7
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_RTC_Init+0x140>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f002 ff8b 	bl	8005b34 <HAL_RTC_SetAlarm_IT>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d001      	beq.n	8002c26 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002c22:	f000 fcf1 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b010      	add	sp, #64	; 0x40
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	200006f4 	.word	0x200006f4
 8002c34:	40002800 	.word	0x40002800

08002c38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <MX_SPI1_Init+0x78>)
 8002c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c44:	2282      	movs	r2, #130	; 0x82
 8002c46:	0052      	lsls	r2, r2, #1
 8002c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c52:	22e0      	movs	r2, #224	; 0xe0
 8002c54:	00d2      	lsls	r2, r2, #3
 8002c56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c86:	2207      	movs	r2, #7
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c92:	2208      	movs	r2, #8
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 fa2b 	bl	80060f4 <HAL_SPI_Init>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ca2:	f000 fcb1 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000720 	.word	0x20000720
 8002cb0:	40013000 	.word	0x40013000

08002cb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f008 ff50 	bl	800bb68 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <MX_TIM6_Init+0x70>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <MX_TIM6_Init+0x74>)
 8002cd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <MX_TIM6_Init+0x78>)
 8002cde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f003 fabb 	bl	8006264 <HAL_TIM_Base_Init>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cf2:	f000 fc89 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f003 fd53 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002d12:	f000 fc79 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000784 	.word	0x20000784
 8002d24:	40001000 	.word	0x40001000
 8002d28:	00003e7f 	.word	0x00003e7f
 8002d2c:	000003e7 	.word	0x000003e7

08002d30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <MX_USART1_UART_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d3c:	22e1      	movs	r2, #225	; 0xe1
 8002d3e:	0252      	lsls	r2, r2, #9
 8002d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f003 fda8 	bl	80068d0 <HAL_UART_Init>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d84:	f000 fc40 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f004 fd83 	bl	8007898 <HAL_UARTEx_SetTxFifoThreshold>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f000 fc37 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f004 fdba 	bl	8007918 <HAL_UARTEx_SetRxFifoThreshold>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002da8:	f000 fc2e 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f004 fd38 	bl	8007824 <HAL_UARTEx_DisableFifoMode>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002db8:	f000 fc26 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	200007d0 	.word	0x200007d0
 8002dc8:	40013800 	.word	0x40013800

08002dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <MX_USART2_UART_Init+0x98>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dd8:	22e1      	movs	r2, #225	; 0xe1
 8002dda:	0252      	lsls	r2, r2, #9
 8002ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 fd5a 	bl	80068d0 <HAL_UART_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e20:	f000 fbf2 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f004 fd35 	bl	8007898 <HAL_UARTEx_SetTxFifoThreshold>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e32:	f000 fbe9 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f004 fd6c 	bl	8007918 <HAL_UARTEx_SetRxFifoThreshold>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002e44:	f000 fbe0 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 fcea 	bl	8007824 <HAL_UARTEx_DisableFifoMode>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 fbd8 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000864 	.word	0x20000864
 8002e64:	40004400 	.word	0x40004400

08002e68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <MX_USART3_UART_Init+0x98>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e74:	2296      	movs	r2, #150	; 0x96
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f003 fd0c 	bl	80068d0 <HAL_UART_Init>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ebc:	f000 fba4 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f004 fce7 	bl	8007898 <HAL_UARTEx_SetTxFifoThreshold>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ece:	f000 fb9b 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f004 fd1e 	bl	8007918 <HAL_UARTEx_SetRxFifoThreshold>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ee0:	f000 fb92 	bl	8003608 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f004 fc9c 	bl	8007824 <HAL_UARTEx_DisableFifoMode>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ef0:	f000 fb8a 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200008f8 	.word	0x200008f8
 8002f00:	40004800 	.word	0x40004800

08002f04 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <MX_USART5_UART_Init+0x64>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f10:	2296      	movs	r2, #150	; 0x96
 8002f12:	0192      	lsls	r2, r2, #6
 8002f14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f003 fcbe 	bl	80068d0 <HAL_UART_Init>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002f58:	f000 fb56 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	2000098c 	.word	0x2000098c
 8002f68:	40005000 	.word	0x40005000

08002f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08b      	sub	sp, #44	; 0x2c
 8002f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	2414      	movs	r4, #20
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	0018      	movs	r0, r3
 8002f78:	2314      	movs	r3, #20
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f008 fdf3 	bl	800bb68 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f82:	4b7a      	ldr	r3, [pc, #488]	; (800316c <MX_GPIO_Init+0x200>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	4b79      	ldr	r3, [pc, #484]	; (800316c <MX_GPIO_Init+0x200>)
 8002f88:	2104      	movs	r1, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8e:	4b77      	ldr	r3, [pc, #476]	; (800316c <MX_GPIO_Init+0x200>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b74      	ldr	r3, [pc, #464]	; (800316c <MX_GPIO_Init+0x200>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <MX_GPIO_Init+0x200>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <MX_GPIO_Init+0x200>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	4b6e      	ldr	r3, [pc, #440]	; (800316c <MX_GPIO_Init+0x200>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <MX_GPIO_Init+0x200>)
 8002fb8:	2102      	movs	r1, #2
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbe:	4b6b      	ldr	r3, [pc, #428]	; (800316c <MX_GPIO_Init+0x200>)
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fca:	4b68      	ldr	r3, [pc, #416]	; (800316c <MX_GPIO_Init+0x200>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <MX_GPIO_Init+0x200>)
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <MX_GPIO_Init+0x200>)
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4013      	ands	r3, r2
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2110      	movs	r1, #16
 8002fea:	0018      	movs	r0, r3
 8002fec:	f001 fad9 	bl	80045a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002ff0:	495f      	ldr	r1, [pc, #380]	; (8003170 <MX_GPIO_Init+0x204>)
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <MX_GPIO_Init+0x208>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 fad3 	bl	80045a2 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	485c      	ldr	r0, [pc, #368]	; (8003174 <MX_GPIO_Init+0x208>)
 8003002:	2201      	movs	r2, #1
 8003004:	0019      	movs	r1, r3
 8003006:	f001 facc 	bl	80045a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <MX_GPIO_Init+0x20c>)
 800300c:	2200      	movs	r2, #0
 800300e:	2103      	movs	r1, #3
 8003010:	0018      	movs	r0, r3
 8003012:	f001 fac6 	bl	80045a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301c:	193b      	adds	r3, r7, r4
 800301e:	2288      	movs	r2, #136	; 0x88
 8003020:	0352      	lsls	r2, r2, #13
 8003022:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	193b      	adds	r3, r7, r4
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 800302a:	193a      	adds	r2, r7, r4
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f001 f854 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303e:	193b      	adds	r3, r7, r4
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 800304a:	193a      	adds	r2, r7, r4
 800304c:	23a0      	movs	r3, #160	; 0xa0
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f001 f844 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8003058:	193b      	adds	r3, r7, r4
 800305a:	2210      	movs	r2, #16
 800305c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	193b      	adds	r3, r7, r4
 8003060:	2201      	movs	r2, #1
 8003062:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	193b      	adds	r3, r7, r4
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003070:	193a      	adds	r2, r7, r4
 8003072:	23a0      	movs	r3, #160	; 0xa0
 8003074:	05db      	lsls	r3, r3, #23
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f001 f831 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 800307e:	193b      	adds	r3, r7, r4
 8003080:	4a3e      	ldr	r2, [pc, #248]	; (800317c <MX_GPIO_Init+0x210>)
 8003082:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2201      	movs	r2, #1
 8003088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	193b      	adds	r3, r7, r4
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <MX_GPIO_Init+0x208>)
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f001 f81f 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 80030a2:	0021      	movs	r1, r4
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2288      	movs	r2, #136	; 0x88
 80030ae:	0352      	lsls	r2, r2, #13
 80030b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	000c      	movs	r4, r1
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <MX_GPIO_Init+0x208>)
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f001 f80d 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80030c6:	0021      	movs	r1, r4
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	0192      	lsls	r2, r2, #6
 80030ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030d0:	000c      	movs	r4, r1
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2211      	movs	r2, #17
 80030d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <MX_GPIO_Init+0x208>)
 80030e8:	0019      	movs	r1, r3
 80030ea:	0010      	movs	r0, r2
 80030ec:	f000 fff8 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	4a23      	ldr	r2, [pc, #140]	; (8003180 <MX_GPIO_Init+0x214>)
 80030f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003102:	193b      	adds	r3, r7, r4
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <MX_GPIO_Init+0x208>)
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f000 ffe9 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2203      	movs	r2, #3
 8003112:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003114:	193b      	adds	r3, r7, r4
 8003116:	2201      	movs	r2, #1
 8003118:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	193b      	adds	r3, r7, r4
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	193b      	adds	r3, r7, r4
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003126:	193b      	adds	r3, r7, r4
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <MX_GPIO_Init+0x20c>)
 800312a:	0019      	movs	r1, r3
 800312c:	0010      	movs	r0, r2
 800312e:	f000 ffd7 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003132:	0021      	movs	r1, r4
 8003134:	187b      	adds	r3, r7, r1
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2201      	movs	r2, #1
 8003144:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003146:	187b      	adds	r3, r7, r1
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <MX_GPIO_Init+0x20c>)
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f000 ffc7 	bl	80040e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	2006      	movs	r0, #6
 8003158:	f000 ff8c 	bl	8004074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800315c:	2006      	movs	r0, #6
 800315e:	f000 ff9e 	bl	800409e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b00b      	add	sp, #44	; 0x2c
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40021000 	.word	0x40021000
 8003170:	0000a403 	.word	0x0000a403
 8003174:	50000400 	.word	0x50000400
 8003178:	50000c00 	.word	0x50000c00
 800317c:	00008c03 	.word	0x00008c03
 8003180:	00004040 	.word	0x00004040

08003184 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0018      	movs	r0, r3
 8003190:	f7fc ffb8 	bl	8000104 <strlen>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2bfa      	cmp	r3, #250	; 0xfa
 800319c:	d908      	bls.n	80031b0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800319e:	23fa      	movs	r3, #250	; 0xfa
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	490d      	ldr	r1, [pc, #52]	; (80031d8 <send_debug_logs+0x54>)
 80031a4:	480d      	ldr	r0, [pc, #52]	; (80031dc <send_debug_logs+0x58>)
 80031a6:	222a      	movs	r2, #42	; 0x2a
 80031a8:	f003 fc28 	bl	80069fc <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80031ac:	23fa      	movs	r3, #250	; 0xfa
 80031ae:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	23fa      	movs	r3, #250	; 0xfa
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4808      	ldr	r0, [pc, #32]	; (80031dc <send_debug_logs+0x58>)
 80031bc:	f003 fc1e 	bl	80069fc <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80031c0:	23fa      	movs	r3, #250	; 0xfa
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4906      	ldr	r1, [pc, #24]	; (80031e0 <send_debug_logs+0x5c>)
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <send_debug_logs+0x58>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	f003 fc17 	bl	80069fc <HAL_UART_Transmit>
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	0801284c 	.word	0x0801284c
 80031dc:	20000864 	.word	0x20000864
 80031e0:	08012878 	.word	0x08012878

080031e4 <my_sys_init>:
// System functions
void my_sys_init ( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <my_sys_init+0xf0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <my_sys_init+0xf0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 80031f4:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <my_sys_init+0xf4>)
 80031f6:	2104      	movs	r1, #4
 80031f8:	0018      	movs	r0, r3
 80031fa:	f001 f9b5 	bl	8004568 <HAL_GPIO_ReadPin>
 80031fe:	0003      	movs	r3, r0
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	4193      	sbcs	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <my_sys_init+0xf8>)
 8003208:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800320a:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <my_sys_init+0xf4>)
 800320c:	2108      	movs	r1, #8
 800320e:	0018      	movs	r0, r3
 8003210:	f001 f9aa 	bl	8004568 <HAL_GPIO_ReadPin>
 8003214:	0003      	movs	r3, r0
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	4193      	sbcs	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <my_sys_init+0xfc>)
 800321e:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <my_sys_init+0xf8>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4053      	eors	r3, r2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <my_sys_init+0x72>
 800322e:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <my_sys_init+0xfc>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4053      	eors	r3, r2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <my_sys_init+0x100>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <my_sys_init+0x104>)
 8003244:	22e1      	movs	r2, #225	; 0xe1
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <my_sys_init+0x108>)
 800324c:	2278      	movs	r2, #120	; 0x78
 800324e:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <my_sys_init+0x10c>)
 8003252:	221e      	movs	r2, #30
 8003254:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <my_sys_init+0xf8>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <my_sys_init+0xa2>
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <my_sys_init+0xfc>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	4053      	eors	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <my_sys_init+0x100>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <my_sys_init+0x104>)
 8003274:	22e1      	movs	r2, #225	; 0xe1
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <my_sys_init+0x108>)
 800327c:	2278      	movs	r2, #120	; 0x78
 800327e:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <my_sys_init+0x10c>)
 8003282:	221e      	movs	r2, #30
 8003284:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <my_sys_init+0xf8>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	4053      	eors	r3, r2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d011      	beq.n	80032b8 <my_sys_init+0xd4>
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <my_sys_init+0xfc>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <my_sys_init+0x100>)
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <my_sys_init+0x104>)
 80032a4:	2296      	movs	r2, #150	; 0x96
 80032a6:	0052      	lsls	r2, r2, #1
 80032a8:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <my_sys_init+0x108>)
 80032ac:	2296      	movs	r2, #150	; 0x96
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <my_sys_init+0x10c>)
 80032b4:	223c      	movs	r2, #60	; 0x3c
 80032b6:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <my_sys_init+0xf8>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <my_sys_init+0xea>
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <my_sys_init+0xfc>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <my_sys_init+0x100>)
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
	}
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000bd8 	.word	0x20000bd8
 80032d8:	50000c00 	.word	0x50000c00
 80032dc:	20000b1a 	.word	0x20000b1a
 80032e0:	20000b1b 	.word	0x20000b1b
 80032e4:	20000b1c 	.word	0x20000b1c
 80032e8:	20000008 	.word	0x20000008
 80032ec:	20000016 	.word	0x20000016
 80032f0:	20000018 	.word	0x20000018

080032f4 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	0002      	movs	r2, r0
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10e      	bne.n	8003326 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4811      	ldr	r0, [pc, #68]	; (8003354 <my_ant_sw_pos+0x60>)
 800330e:	2200      	movs	r2, #0
 8003310:	0019      	movs	r1, r3
 8003312:	f001 f946 	bl	80045a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	480e      	ldr	r0, [pc, #56]	; (8003354 <my_ant_sw_pos+0x60>)
 800331c:	2201      	movs	r2, #1
 800331e:	0019      	movs	r1, r3
 8003320:	f001 f93f 	bl	80045a2 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003324:	e011      	b.n	800334a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d10d      	bne.n	800334a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	4808      	ldr	r0, [pc, #32]	; (8003354 <my_ant_sw_pos+0x60>)
 8003334:	2201      	movs	r2, #1
 8003336:	0019      	movs	r1, r3
 8003338:	f001 f933 	bl	80045a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4804      	ldr	r0, [pc, #16]	; (8003354 <my_ant_sw_pos+0x60>)
 8003342:	2200      	movs	r2, #0
 8003344:	0019      	movs	r1, r3
 8003346:	f001 f92c 	bl	80045a2 <HAL_GPIO_WritePin>
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	50000400 	.word	0x50000400

08003358 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff ffc9 	bl	80032f4 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	4808      	ldr	r0, [pc, #32]	; (8003388 <my_gnss_sw_on+0x30>)
 8003368:	2201      	movs	r2, #1
 800336a:	0019      	movs	r1, r3
 800336c:	f001 f919 	bl	80045a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	019b      	lsls	r3, r3, #6
 8003374:	4804      	ldr	r0, [pc, #16]	; (8003388 <my_gnss_sw_on+0x30>)
 8003376:	2201      	movs	r2, #1
 8003378:	0019      	movs	r1, r3
 800337a:	f001 f912 	bl	80045a2 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800337e:	f7ff fdc1 	bl	8002f04 <MX_USART5_UART_Init>
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	50000400 	.word	0x50000400

0800338c <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003390:	2002      	movs	r0, #2
 8003392:	f7ff ffaf 	bl	80032f4 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <my_gnss_sw_off+0x3c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d811      	bhi.n	80033c2 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	480a      	ldr	r0, [pc, #40]	; (80033cc <my_gnss_sw_off+0x40>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	0019      	movs	r1, r3
 80033a8:	f001 f8fb 	bl	80045a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	019b      	lsls	r3, r3, #6
 80033b0:	4806      	ldr	r0, [pc, #24]	; (80033cc <my_gnss_sw_off+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	0019      	movs	r1, r3
 80033b6:	f001 f8f4 	bl	80045a2 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <my_gnss_sw_off+0x44>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f003 fadd 	bl	800697c <HAL_UART_DeInit>
	}
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000b1c 	.word	0x20000b1c
 80033cc:	50000400 	.word	0x50000400
 80033d0:	2000098c 	.word	0x2000098c

080033d4 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	000a      	movs	r2, r1
 80033de:	1cfb      	adds	r3, r7, #3
 80033e0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80033e2:	23fa      	movs	r3, #250	; 0xfa
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <my_gnss_receive_byte+0x3c>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	f003 fbaa 	bl	8006b44 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <my_gnss_receive_byte+0x40>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80033f8:	23fa      	movs	r3, #250	; 0xfa
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <my_gnss_receive_byte+0x44>)
 8003400:	2201      	movs	r2, #1
 8003402:	f003 fafb 	bl	80069fc <HAL_UART_Transmit>
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	2000098c 	.word	0x2000098c
 8003414:	20000b1c 	.word	0x20000b1c
 8003418:	20000864 	.word	0x20000864

0800341c <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <my_astronode_reset+0x30>)
 8003422:	2201      	movs	r2, #1
 8003424:	2102      	movs	r1, #2
 8003426:	0018      	movs	r0, r3
 8003428:	f001 f8bb 	bl	80045a2 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 800342c:	2001      	movs	r0, #1
 800342e:	f000 fd0d 	bl	8003e4c <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <my_astronode_reset+0x30>)
 8003434:	2200      	movs	r2, #0
 8003436:	2102      	movs	r1, #2
 8003438:	0018      	movs	r0, r3
 800343a:	f001 f8b2 	bl	80045a2 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800343e:	20fa      	movs	r0, #250	; 0xfa
 8003440:	f000 fd04 	bl	8003e4c <HAL_Delay>
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	50000400 	.word	0x50000400

08003450 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <send_astronode_request+0x34>)
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fe91 	bl	8003184 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff fe8d 	bl	8003184 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b29a      	uxth	r2, r3
 800346e:	23fa      	movs	r3, #250	; 0xfa
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4804      	ldr	r0, [pc, #16]	; (8003488 <send_astronode_request+0x38>)
 8003476:	f003 fac1 	bl	80069fc <HAL_UART_Transmit>
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b002      	add	sp, #8
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	08012884 	.word	0x08012884
 8003488:	200008f8 	.word	0x200008f8

0800348c <get_systick>:
uint32_t get_systick ( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003490:	f000 fcd2 	bl	8003e38 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	000a      	movs	r2, r1
 80034a6:	1cbb      	adds	r3, r7, #2
 80034a8:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80034aa:	f7ff ffef 	bl	800348c <get_systick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	1cba      	adds	r2, r7, #2
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	419b      	sbcs	r3, r3
 80034bc:	425b      	negs	r3, r3
 80034be:	b2db      	uxtb	r3, r3
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4806      	ldr	r0, [pc, #24]	; (80034ec <is_astronode_character_received+0x24>)
 80034d4:	2364      	movs	r3, #100	; 0x64
 80034d6:	2201      	movs	r2, #1
 80034d8:	f003 fb34 	bl	8006b44 <HAL_UART_Receive>
 80034dc:	0003      	movs	r3, r0
 80034de:	425a      	negs	r2, r3
 80034e0:	4153      	adcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200008f8 	.word	0x200008f8

080034f0 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <my_astro_evt_pin+0x20>)
 80034f6:	2104      	movs	r1, #4
 80034f8:	0018      	movs	r0, r3
 80034fa:	f001 f835 	bl	8004568 <HAL_GPIO_ReadPin>
 80034fe:	0003      	movs	r3, r0
 8003500:	3b01      	subs	r3, #1
 8003502:	425a      	negs	r2, r3
 8003504:	4153      	adcs	r3, r2
 8003506:	b2db      	uxtb	r3, r3
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	50000400 	.word	0x50000400

08003514 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <my_tim_init+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2202      	movs	r2, #2
 800351e:	4252      	negs	r2, r2
 8003520:	611a      	str	r2, [r3, #16]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000784 	.word	0x20000784

0800352c <my_tim_start>:

void my_tim_start ()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <my_tim_start+0x18>)
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <my_tim_start+0x1c>)
 8003538:	0018      	movs	r0, r3
 800353a:	f002 feeb 	bl	8006314 <HAL_TIM_Base_Start_IT>
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000c2c 	.word	0x20000c2c
 8003548:	20000784 	.word	0x20000784

0800354c <my_tim_stop>:

void my_tim_stop ()
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <my_tim_stop+0x14>)
 8003552:	0018      	movs	r0, r3
 8003554:	f002 ff40 	bl	80063d8 <HAL_TIM_Base_Stop_IT>
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000784 	.word	0x20000784

08003564 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d11f      	bne.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim_seconds++ ;
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003580:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIME_THS_15_MIN )
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	23e1      	movs	r3, #225	; 0xe1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	429a      	cmp	r2, r3
 800358c:	d913      	bls.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003590:	0018      	movs	r0, r3
 8003592:	f006 f955 	bl	8009840 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003596:	23f8      	movs	r3, #248	; 0xf8
 8003598:	009c      	lsls	r4, r3, #2
 800359a:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800359c:	490c      	ldr	r1, [pc, #48]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800359e:	480d      	ldr	r0, [pc, #52]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	0023      	movs	r3, r4
 80035a6:	f008 fa49 	bl	800ba3c <sprintf>
			send_debug_logs ( dbg_payload ) ;
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff fde9 	bl	8003184 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 80035b2:	f000 fd84 	bl	80040be <HAL_NVIC_SystemReset>
		}
	}
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b003      	add	sp, #12
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40001000 	.word	0x40001000
 80035c4:	20000c2c 	.word	0x20000c2c
 80035c8:	20000b20 	.word	0x20000b20
 80035cc:	080126c8 	.word	0x080126c8
 80035d0:	080128a8 	.word	0x080128a8
 80035d4:	20000a20 	.word	0x20000a20

080035d8 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RTC_AlarmAEventCallback+0x18>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20000bf0 	.word	0x20000bf0

080035f4 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	0002      	movs	r2, r0
 80035fc:	1dbb      	adds	r3, r7, #6
 80035fe:	801a      	strh	r2, [r3, #0]

}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800360c:	b672      	cpsid	i
}
 800360e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003610:	e7fe      	b.n	8003610 <Error_Handler+0x8>
	...

08003614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_MspInit+0x4c>)
 800361c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_MspInit+0x4c>)
 8003620:	2101      	movs	r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_MspInit+0x4c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2201      	movs	r2, #1
 800362c:	4013      	ands	r3, r2
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_MspInit+0x4c>)
 8003634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_MspInit+0x4c>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0549      	lsls	r1, r1, #21
 800363c:	430a      	orrs	r2, r1
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <HAL_MspInit+0x4c>)
 8003642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	055b      	lsls	r3, r3, #21
 8003648:	4013      	ands	r3, r2
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fc3a 	bl	8003ecc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b097      	sub	sp, #92	; 0x5c
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366c:	240c      	movs	r4, #12
 800366e:	193b      	adds	r3, r7, r4
 8003670:	0018      	movs	r0, r3
 8003672:	234c      	movs	r3, #76	; 0x4c
 8003674:	001a      	movs	r2, r3
 8003676:	2100      	movs	r1, #0
 8003678:	f008 fa76 	bl	800bb68 <memset>
  if(hrtc->Instance==RTC)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_RTC_MspInit+0x84>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d12c      	bne.n	80036e0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003686:	193b      	adds	r3, r7, r4
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	0292      	lsls	r2, r2, #10
 800368c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800368e:	193b      	adds	r3, r7, r4
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	0052      	lsls	r2, r2, #1
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003696:	193b      	adds	r3, r7, r4
 8003698:	0018      	movs	r0, r3
 800369a:	f001 fd89 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80036a2:	f7ff ffb1 	bl	8003608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RTC_MspInit+0x88>)
 80036a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RTC_MspInit+0x88>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0209      	lsls	r1, r1, #8
 80036b0:	430a      	orrs	r2, r1
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_RTC_MspInit+0x88>)
 80036b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RTC_MspInit+0x88>)
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	00c9      	lsls	r1, r1, #3
 80036be:	430a      	orrs	r2, r1
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RTC_MspInit+0x88>)
 80036c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4013      	ands	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2103      	movs	r1, #3
 80036d4:	2002      	movs	r0, #2
 80036d6:	f000 fccd 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80036da:	2002      	movs	r0, #2
 80036dc:	f000 fcdf 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b017      	add	sp, #92	; 0x5c
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	40002800 	.word	0x40002800
 80036ec:	40021000 	.word	0x40021000

080036f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b08b      	sub	sp, #44	; 0x2c
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	2414      	movs	r4, #20
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	0018      	movs	r0, r3
 80036fe:	2314      	movs	r3, #20
 8003700:	001a      	movs	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	f008 fa30 	bl	800bb68 <memset>
  if(hspi->Instance==SPI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_SPI_MspInit+0x8c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d130      	bne.n	8003774 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_SPI_MspInit+0x90>)
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_SPI_MspInit+0x90>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0149      	lsls	r1, r1, #5
 800371c:	430a      	orrs	r2, r1
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_SPI_MspInit+0x90>)
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_SPI_MspInit+0x90>)
 8003730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_SPI_MspInit+0x90>)
 8003734:	2101      	movs	r1, #1
 8003736:	430a      	orrs	r2, r1
 8003738:	635a      	str	r2, [r3, #52]	; 0x34
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_SPI_MspInit+0x90>)
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	2201      	movs	r2, #1
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003746:	0021      	movs	r1, r4
 8003748:	187b      	adds	r3, r7, r1
 800374a:	22e0      	movs	r2, #224	; 0xe0
 800374c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2202      	movs	r2, #2
 8003752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003760:	187b      	adds	r3, r7, r1
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	187a      	adds	r2, r7, r1
 8003768:	23a0      	movs	r3, #160	; 0xa0
 800376a:	05db      	lsls	r3, r3, #23
 800376c:	0011      	movs	r1, r2
 800376e:	0018      	movs	r0, r3
 8003770:	f000 fcb6 	bl	80040e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b00b      	add	sp, #44	; 0x2c
 800377a:	bd90      	pop	{r4, r7, pc}
 800377c:	40013000 	.word	0x40013000
 8003780:	40021000 	.word	0x40021000

08003784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_TIM_Base_MspInit+0x44>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_Base_MspInit+0x48>)
 8003798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_TIM_Base_MspInit+0x48>)
 800379c:	2110      	movs	r1, #16
 800379e:	430a      	orrs	r2, r1
 80037a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_TIM_Base_MspInit+0x48>)
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2210      	movs	r2, #16
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2102      	movs	r1, #2
 80037b2:	2011      	movs	r0, #17
 80037b4:	f000 fc5e 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80037b8:	2011      	movs	r0, #17
 80037ba:	f000 fc70 	bl	800409e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	40001000 	.word	0x40001000
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b0a3      	sub	sp, #140	; 0x8c
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	2374      	movs	r3, #116	; 0x74
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	0018      	movs	r0, r3
 80037de:	2314      	movs	r3, #20
 80037e0:	001a      	movs	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f008 f9c0 	bl	800bb68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037e8:	2428      	movs	r4, #40	; 0x28
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	0018      	movs	r0, r3
 80037ee:	234c      	movs	r3, #76	; 0x4c
 80037f0:	001a      	movs	r2, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	f008 f9b8 	bl	800bb68 <memset>
  if(huart->Instance==USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a84      	ldr	r2, [pc, #528]	; (8003a10 <HAL_UART_MspInit+0x240>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d140      	bne.n	8003884 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800380e:	193b      	adds	r3, r7, r4
 8003810:	0018      	movs	r0, r3
 8003812:	f001 fccd 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800381a:	f7ff fef5 	bl	8003608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800381e:	4b7d      	ldr	r3, [pc, #500]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	01c9      	lsls	r1, r1, #7
 8003828:	430a      	orrs	r2, r1
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
 800382c:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <HAL_UART_MspInit+0x244>)
 800382e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	01db      	lsls	r3, r3, #7
 8003834:	4013      	ands	r3, r2
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_UART_MspInit+0x244>)
 800383c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383e:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003840:	2101      	movs	r1, #1
 8003842:	430a      	orrs	r2, r1
 8003844:	635a      	str	r2, [r3, #52]	; 0x34
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003852:	2174      	movs	r1, #116	; 0x74
 8003854:	187b      	adds	r3, r7, r1
 8003856:	22c0      	movs	r2, #192	; 0xc0
 8003858:	00d2      	lsls	r2, r2, #3
 800385a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385c:	187b      	adds	r3, r7, r1
 800385e:	2202      	movs	r2, #2
 8003860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003868:	187b      	adds	r3, r7, r1
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2201      	movs	r2, #1
 8003872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	187a      	adds	r2, r7, r1
 8003876:	23a0      	movs	r3, #160	; 0xa0
 8003878:	05db      	lsls	r3, r3, #23
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fc2f 	bl	80040e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003882:	e0c0      	b.n	8003a06 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_UART_MspInit+0x248>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d140      	bne.n	8003910 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800388e:	2128      	movs	r1, #40	; 0x28
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2202      	movs	r2, #2
 8003894:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003896:	187b      	adds	r3, r7, r1
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800389c:	187b      	adds	r3, r7, r1
 800389e:	0018      	movs	r0, r3
 80038a0:	f001 fc86 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80038a8:	f7ff feae 	bl	8003608 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b0:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	0289      	lsls	r1, r1, #10
 80038b6:	430a      	orrs	r2, r1
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80038ba:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	029b      	lsls	r3, r3, #10
 80038c2:	4013      	ands	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038cc:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	430a      	orrs	r2, r1
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
 80038d4:	4b4f      	ldr	r3, [pc, #316]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80038e0:	2174      	movs	r1, #116	; 0x74
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	220c      	movs	r2, #12
 80038e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2202      	movs	r2, #2
 80038ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2201      	movs	r2, #1
 80038fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003900:	187a      	adds	r2, r7, r1
 8003902:	23a0      	movs	r3, #160	; 0xa0
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f000 fbe9 	bl	80040e0 <HAL_GPIO_Init>
}
 800390e:	e07a      	b.n	8003a06 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <HAL_UART_MspInit+0x24c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d140      	bne.n	800399c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800391a:	2128      	movs	r1, #40	; 0x28
 800391c:	187b      	adds	r3, r7, r1
 800391e:	2204      	movs	r2, #4
 8003920:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003922:	187b      	adds	r3, r7, r1
 8003924:	2200      	movs	r2, #0
 8003926:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003928:	187b      	adds	r3, r7, r1
 800392a:	0018      	movs	r0, r3
 800392c:	f001 fc40 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003934:	f7ff fe68 	bl	8003608 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_UART_MspInit+0x244>)
 800393a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_UART_MspInit+0x244>)
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	02c9      	lsls	r1, r1, #11
 8003942:	430a      	orrs	r2, r1
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	02db      	lsls	r3, r3, #11
 800394e:	4013      	ands	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003958:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_UART_MspInit+0x244>)
 800395a:	2102      	movs	r1, #2
 800395c:	430a      	orrs	r2, r1
 800395e:	635a      	str	r2, [r3, #52]	; 0x34
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_UART_MspInit+0x244>)
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 800396c:	2174      	movs	r1, #116	; 0x74
 800396e:	187b      	adds	r3, r7, r1
 8003970:	22c0      	movs	r2, #192	; 0xc0
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2202      	movs	r2, #2
 800397a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2200      	movs	r2, #0
 8003986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2204      	movs	r2, #4
 800398c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	187b      	adds	r3, r7, r1
 8003990:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <HAL_UART_MspInit+0x250>)
 8003992:	0019      	movs	r1, r3
 8003994:	0010      	movs	r0, r2
 8003996:	f000 fba3 	bl	80040e0 <HAL_GPIO_Init>
}
 800399a:	e034      	b.n	8003a06 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_UART_MspInit+0x254>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d12f      	bne.n	8003a06 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0049      	lsls	r1, r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039c8:	2102      	movs	r1, #2
 80039ca:	430a      	orrs	r2, r1
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_UART_MspInit+0x244>)
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	2202      	movs	r2, #2
 80039d4:	4013      	ands	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80039da:	2174      	movs	r1, #116	; 0x74
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2218      	movs	r2, #24
 80039e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2202      	movs	r2, #2
 80039e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2203      	movs	r2, #3
 80039f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <HAL_UART_MspInit+0x250>)
 80039fe:	0019      	movs	r1, r3
 8003a00:	0010      	movs	r0, r2
 8003a02:	f000 fb6d 	bl	80040e0 <HAL_GPIO_Init>
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b023      	add	sp, #140	; 0x8c
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	40013800 	.word	0x40013800
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40004400 	.word	0x40004400
 8003a1c:	40004800 	.word	0x40004800
 8003a20:	50000400 	.word	0x50000400
 8003a24:	40005000 	.word	0x40005000

08003a28 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_UART_MspDeInit+0xa4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10e      	bne.n	8003a58 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a3a:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a40:	4924      	ldr	r1, [pc, #144]	; (8003ad4 <HAL_UART_MspDeInit+0xac>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003a46:	23c0      	movs	r3, #192	; 0xc0
 8003a48:	00da      	lsls	r2, r3, #3
 8003a4a:	23a0      	movs	r3, #160	; 0xa0
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fcb1 	bl	80043b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003a56:	e034      	b.n	8003ac2 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_UART_MspDeInit+0xb0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10c      	bne.n	8003a7c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a68:	491c      	ldr	r1, [pc, #112]	; (8003adc <HAL_UART_MspDeInit+0xb4>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003a6e:	23a0      	movs	r3, #160	; 0xa0
 8003a70:	05db      	lsls	r3, r3, #23
 8003a72:	210c      	movs	r1, #12
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fc9f 	bl	80043b8 <HAL_GPIO_DeInit>
}
 8003a7a:	e022      	b.n	8003ac2 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_UART_MspDeInit+0xb8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10d      	bne.n	8003aa2 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003a8c:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <HAL_UART_MspDeInit+0xbc>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003a92:	23c0      	movs	r3, #192	; 0xc0
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_UART_MspDeInit+0xc0>)
 8003a98:	0019      	movs	r1, r3
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	f000 fc8c 	bl	80043b8 <HAL_GPIO_DeInit>
}
 8003aa0:	e00f      	b.n	8003ac2 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a11      	ldr	r2, [pc, #68]	; (8003aec <HAL_UART_MspDeInit+0xc4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10a      	bne.n	8003ac2 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_UART_MspDeInit+0xa8>)
 8003ab2:	490f      	ldr	r1, [pc, #60]	; (8003af0 <HAL_UART_MspDeInit+0xc8>)
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_UART_MspDeInit+0xc0>)
 8003aba:	2118      	movs	r1, #24
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 fc7b 	bl	80043b8 <HAL_GPIO_DeInit>
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	ffffbfff 	.word	0xffffbfff
 8003ad8:	40004400 	.word	0x40004400
 8003adc:	fffdffff 	.word	0xfffdffff
 8003ae0:	40004800 	.word	0x40004800
 8003ae4:	fffbffff 	.word	0xfffbffff
 8003ae8:	50000400 	.word	0x50000400
 8003aec:	40005000 	.word	0x40005000
 8003af0:	fffffeff 	.word	0xfffffeff

08003af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003af8:	e7fe      	b.n	8003af8 <NMI_Handler+0x4>

08003afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afe:	e7fe      	b.n	8003afe <HardFault_Handler+0x4>

08003b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b18:	f000 f97c 	bl	8003e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <RTC_TAMP_IRQHandler+0x14>)
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f002 f942 	bl	8005db4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	200006f4 	.word	0x200006f4

08003b3c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003b40:	2004      	movs	r0, #4
 8003b42:	f000 fd4b 	bl	80045dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003b52:	0018      	movs	r0, r3
 8003b54:	f002 fc6e 	bl	8006434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20000784 	.word	0x20000784

08003b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  return 1;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_kill>:

int _kill(int pid, int sig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b7a:	f008 f8a1 	bl	800bcc0 <__errno>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	2216      	movs	r2, #22
 8003b82:	601a      	str	r2, [r3, #0]
  return -1;
 8003b84:	2301      	movs	r3, #1
 8003b86:	425b      	negs	r3, r3
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_exit>:

void _exit (int status)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b98:	2301      	movs	r3, #1
 8003b9a:	425a      	negs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7ff ffe5 	bl	8003b70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ba6:	e7fe      	b.n	8003ba6 <_exit+0x16>

08003ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e00a      	b.n	8003bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bba:	e000      	b.n	8003bbe <_read+0x16>
 8003bbc:	bf00      	nop
 8003bbe:	0001      	movs	r1, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	60ba      	str	r2, [r7, #8]
 8003bc6:	b2ca      	uxtb	r2, r1
 8003bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dbf0      	blt.n	8003bba <_read+0x12>
  }

  return len;
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b006      	add	sp, #24
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e009      	b.n	8003c08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	60ba      	str	r2, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	e000      	b.n	8003c02 <_write+0x20>
 8003c00:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dbf1      	blt.n	8003bf4 <_write+0x12>
  }
  return len;
 8003c10:	687b      	ldr	r3, [r7, #4]
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b006      	add	sp, #24
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_close>:

int _close(int file)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	425b      	negs	r3, r3
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	0192      	lsls	r2, r2, #6
 8003c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_isatty>:

int _isatty(int file)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	18d3      	adds	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca4:	f008 f80c 	bl	800bcc0 <__errno>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	18d2      	adds	r2, r2, r3
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <_sbrk+0x64>)
 8003cc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b006      	add	sp, #24
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20024000 	.word	0x20024000
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	20000bf4 	.word	0x20000bf4
 8003cdc:	20000f40 	.word	0x20000f40

08003ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cf0:	f7ff fff6 	bl	8003ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cf4:	480c      	ldr	r0, [pc, #48]	; (8003d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cf6:	490d      	ldr	r1, [pc, #52]	; (8003d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <LoopForever+0xe>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cfc:	e002      	b.n	8003d04 <LoopCopyDataInit>

08003cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d02:	3304      	adds	r3, #4

08003d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d08:	d3f9      	bcc.n	8003cfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <LoopForever+0x16>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d10:	e001      	b.n	8003d16 <LoopFillZerobss>

08003d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d14:	3204      	adds	r2, #4

08003d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d18:	d3fb      	bcc.n	8003d12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d1a:	f007 ffd7 	bl	800bccc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003d1e:	f7fe fc43 	bl	80025a8 <main>

08003d22 <LoopForever>:

LoopForever:
  b LoopForever
 8003d22:	e7fe      	b.n	8003d22 <LoopForever>
  ldr   r0, =_estack
 8003d24:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d2c:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8003d30:	08014748 	.word	0x08014748
  ldr r2, =_sbss
 8003d34:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8003d38:	20000f3c 	.word	0x20000f3c

08003d3c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d3c:	e7fe      	b.n	8003d3c <ADC1_COMP_IRQHandler>
	...

08003d40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_Init+0x3c>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_Init+0x3c>)
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	0049      	lsls	r1, r1, #1
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	f000 f810 	bl	8003d80 <HAL_InitTick>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e001      	b.n	8003d70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d6c:	f7ff fc52 	bl	8003614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	781b      	ldrb	r3, [r3, #0]
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40022000 	.word	0x40022000

08003d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d88:	230f      	movs	r3, #15
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_InitTick+0x88>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02b      	beq.n	8003df0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_InitTick+0x8c>)
 8003d9a:	681c      	ldr	r4, [r3, #0]
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_InitTick+0x88>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0019      	movs	r1, r3
 8003da2:	23fa      	movs	r3, #250	; 0xfa
 8003da4:	0098      	lsls	r0, r3, #2
 8003da6:	f7fc f9c9 	bl	800013c <__udivsi3>
 8003daa:	0003      	movs	r3, r0
 8003dac:	0019      	movs	r1, r3
 8003dae:	0020      	movs	r0, r4
 8003db0:	f7fc f9c4 	bl	800013c <__udivsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f985 	bl	80040c6 <HAL_SYSTICK_Config>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d112      	bne.n	8003de6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d80a      	bhi.n	8003ddc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	425b      	negs	r3, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f950 	bl	8004074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <HAL_InitTick+0x90>)
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e00d      	b.n	8003df8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ddc:	230f      	movs	r3, #15
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e008      	b.n	8003df8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003de6:	230f      	movs	r3, #15
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e003      	b.n	8003df8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003df0:	230f      	movs	r3, #15
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003df8:	230f      	movs	r3, #15
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	781b      	ldrb	r3, [r3, #0]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b005      	add	sp, #20
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	20000014 	.word	0x20000014
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	20000010 	.word	0x20000010

08003e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_IncTick+0x1c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_IncTick+0x20>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	18d2      	adds	r2, r2, r3
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_IncTick+0x20>)
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	20000014 	.word	0x20000014
 8003e34:	20000bf8 	.word	0x20000bf8

08003e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_GetTick+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	20000bf8 	.word	0x20000bf8

08003e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_GetTick>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	d005      	beq.n	8003e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_Delay+0x44>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	f7ff ffe0 	bl	8003e38 <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d8f7      	bhi.n	8003e74 <HAL_Delay+0x28>
  {
  }
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000014 	.word	0x20000014

08003e94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <HAL_SuspendTick+0x18>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_SuspendTick+0x18>)
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <HAL_ResumeTick+0x18>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_ResumeTick+0x18>)
 8003eba:	2102      	movs	r1, #2
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	fffff9ff 	.word	0xfffff9ff

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	0002      	movs	r2, r0
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b7f      	cmp	r3, #127	; 0x7f
 8003f0a:	d809      	bhi.n	8003f20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	231f      	movs	r3, #31
 8003f14:	401a      	ands	r2, r3
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <__NVIC_EnableIRQ+0x30>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4091      	lsls	r1, r2
 8003f1c:	000a      	movs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0002      	movs	r2, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f40:	d828      	bhi.n	8003f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <__NVIC_SetPriority+0xd4>)
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	33c0      	adds	r3, #192	; 0xc0
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	589b      	ldr	r3, [r3, r2]
 8003f52:	1dfa      	adds	r2, r7, #7
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	0011      	movs	r1, r2
 8003f58:	2203      	movs	r2, #3
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	00d2      	lsls	r2, r2, #3
 8003f5e:	21ff      	movs	r1, #255	; 0xff
 8003f60:	4091      	lsls	r1, r2
 8003f62:	000a      	movs	r2, r1
 8003f64:	43d2      	mvns	r2, r2
 8003f66:	401a      	ands	r2, r3
 8003f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	019b      	lsls	r3, r3, #6
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	401a      	ands	r2, r3
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	0018      	movs	r0, r3
 8003f78:	2303      	movs	r3, #3
 8003f7a:	4003      	ands	r3, r0
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f80:	481f      	ldr	r0, [pc, #124]	; (8004000 <__NVIC_SetPriority+0xd4>)
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	33c0      	adds	r3, #192	; 0xc0
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f92:	e031      	b.n	8003ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <__NVIC_SetPriority+0xd8>)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	3b08      	subs	r3, #8
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3306      	adds	r3, #6
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1dfa      	adds	r2, r7, #7
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	00d2      	lsls	r2, r2, #3
 8003fba:	21ff      	movs	r1, #255	; 0xff
 8003fbc:	4091      	lsls	r1, r2
 8003fbe:	000a      	movs	r2, r1
 8003fc0:	43d2      	mvns	r2, r2
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	401a      	ands	r2, r3
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	4003      	ands	r3, r0
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	4809      	ldr	r0, [pc, #36]	; (8004004 <__NVIC_SetPriority+0xd8>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	001c      	movs	r4, r3
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	4023      	ands	r3, r4
 8003fe8:	3b08      	subs	r3, #8
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	430a      	orrs	r2, r1
 8003fee:	3306      	adds	r3, #6
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	18c3      	adds	r3, r0, r3
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b003      	add	sp, #12
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	e000e100 	.word	0xe000e100
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800400c:	f3bf 8f4f 	dsb	sy
}
 8004010:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <__NVIC_SystemReset+0x1c>)
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <__NVIC_SystemReset+0x20>)
 8004016:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004018:	f3bf 8f4f 	dsb	sy
}
 800401c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	e7fd      	b.n	800401e <__NVIC_SystemReset+0x16>
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	05fa0004 	.word	0x05fa0004

0800402c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1e5a      	subs	r2, r3, #1
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	045b      	lsls	r3, r3, #17
 800403c:	429a      	cmp	r2, r3
 800403e:	d301      	bcc.n	8004044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004040:	2301      	movs	r3, #1
 8004042:	e010      	b.n	8004066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <SysTick_Config+0x44>)
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	3a01      	subs	r2, #1
 800404a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800404c:	2301      	movs	r3, #1
 800404e:	425b      	negs	r3, r3
 8004050:	2103      	movs	r1, #3
 8004052:	0018      	movs	r0, r3
 8004054:	f7ff ff6a 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <SysTick_Config+0x44>)
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <SysTick_Config+0x44>)
 8004060:	2207      	movs	r2, #7
 8004062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b002      	add	sp, #8
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	e000e010 	.word	0xe000e010

08004074 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	210f      	movs	r1, #15
 8004080:	187b      	adds	r3, r7, r1
 8004082:	1c02      	adds	r2, r0, #0
 8004084:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	187b      	adds	r3, r7, r1
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b25b      	sxtb	r3, r3
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f7ff ff4b 	bl	8003f2c <__NVIC_SetPriority>
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	0002      	movs	r2, r0
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff ff21 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b002      	add	sp, #8
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80040c2:	f7ff ffa1 	bl	8004008 <__NVIC_SystemReset>

080040c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff ffab 	bl	800402c <SysTick_Config>
 80040d6:	0003      	movs	r3, r0
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ee:	e14d      	b.n	800438c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4091      	lsls	r1, r2
 80040fa:	000a      	movs	r2, r1
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d100      	bne.n	8004108 <HAL_GPIO_Init+0x28>
 8004106:	e13e      	b.n	8004386 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2203      	movs	r2, #3
 800410e:	4013      	ands	r3, r2
 8004110:	2b01      	cmp	r3, #1
 8004112:	d005      	beq.n	8004120 <HAL_GPIO_Init+0x40>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	4013      	ands	r3, r2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d130      	bne.n	8004182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	409a      	lsls	r2, r3
 800412e:	0013      	movs	r3, r2
 8004130:	43da      	mvns	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	409a      	lsls	r2, r3
 8004142:	0013      	movs	r3, r2
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004156:	2201      	movs	r2, #1
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	43da      	mvns	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	2201      	movs	r2, #1
 800416e:	401a      	ands	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	4013      	ands	r3, r2
 800418a:	2b03      	cmp	r3, #3
 800418c:	d017      	beq.n	80041be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	2203      	movs	r2, #3
 800419a:	409a      	lsls	r2, r3
 800419c:	0013      	movs	r3, r2
 800419e:	43da      	mvns	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2203      	movs	r2, #3
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d123      	bne.n	8004212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	08da      	lsrs	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3208      	adds	r2, #8
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	58d3      	ldr	r3, [r2, r3]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2207      	movs	r2, #7
 80041dc:	4013      	ands	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	220f      	movs	r2, #15
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2107      	movs	r1, #7
 80041f6:	400b      	ands	r3, r1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	409a      	lsls	r2, r3
 8004220:	0013      	movs	r3, r2
 8004222:	43da      	mvns	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2203      	movs	r2, #3
 8004230:	401a      	ands	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	23c0      	movs	r3, #192	; 0xc0
 800424c:	029b      	lsls	r3, r3, #10
 800424e:	4013      	ands	r3, r2
 8004250:	d100      	bne.n	8004254 <HAL_GPIO_Init+0x174>
 8004252:	e098      	b.n	8004386 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004254:	4a53      	ldr	r2, [pc, #332]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	3318      	adds	r3, #24
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	589b      	ldr	r3, [r3, r2]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2203      	movs	r2, #3
 8004266:	4013      	ands	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	220f      	movs	r2, #15
 800426c:	409a      	lsls	r2, r3
 800426e:	0013      	movs	r3, r2
 8004270:	43da      	mvns	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	23a0      	movs	r3, #160	; 0xa0
 800427c:	05db      	lsls	r3, r3, #23
 800427e:	429a      	cmp	r2, r3
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x1d6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a48      	ldr	r2, [pc, #288]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x1d2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a47      	ldr	r2, [pc, #284]	; (80043ac <HAL_GPIO_Init+0x2cc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x1ce>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a46      	ldr	r2, [pc, #280]	; (80043b0 <HAL_GPIO_Init+0x2d0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x1ca>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a45      	ldr	r2, [pc, #276]	; (80043b4 <HAL_GPIO_Init+0x2d4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x1c6>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e008      	b.n	80042b8 <HAL_GPIO_Init+0x1d8>
 80042a6:	2305      	movs	r3, #5
 80042a8:	e006      	b.n	80042b8 <HAL_GPIO_Init+0x1d8>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e004      	b.n	80042b8 <HAL_GPIO_Init+0x1d8>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_Init+0x1d8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_GPIO_Init+0x1d8>
 80042b6:	2300      	movs	r3, #0
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	2103      	movs	r1, #3
 80042bc:	400a      	ands	r2, r1
 80042be:	00d2      	lsls	r2, r2, #3
 80042c0:	4093      	lsls	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80042c8:	4936      	ldr	r1, [pc, #216]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	3318      	adds	r3, #24
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d6:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43da      	mvns	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	035b      	lsls	r3, r3, #13
 80042ee:	4013      	ands	r3, r2
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042fa:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43da      	mvns	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	039b      	lsls	r3, r3, #14
 8004318:	4013      	ands	r3, r2
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 800432c:	2384      	movs	r3, #132	; 0x84
 800432e:	58d3      	ldr	r3, [r2, r3]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	43da      	mvns	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	4013      	ands	r3, r2
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004350:	4914      	ldr	r1, [pc, #80]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 8004352:	2284      	movs	r2, #132	; 0x84
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004358:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	58d3      	ldr	r3, [r2, r3]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43da      	mvns	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	4013      	ands	r3, r2
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800437e:	4909      	ldr	r1, [pc, #36]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3301      	adds	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	40da      	lsrs	r2, r3
 8004394:	1e13      	subs	r3, r2, #0
 8004396:	d000      	beq.n	800439a <HAL_GPIO_Init+0x2ba>
 8004398:	e6aa      	b.n	80040f0 <HAL_GPIO_Init+0x10>
  }
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b006      	add	sp, #24
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021800 	.word	0x40021800
 80043a8:	50000400 	.word	0x50000400
 80043ac:	50000800 	.word	0x50000800
 80043b0:	50000c00 	.word	0x50000c00
 80043b4:	50001000 	.word	0x50001000

080043b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80043c6:	e0ba      	b.n	800453e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80043c8:	2201      	movs	r2, #1
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	409a      	lsls	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d100      	bne.n	80043dc <HAL_GPIO_DeInit+0x24>
 80043da:	e0ad      	b.n	8004538 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80043dc:	4a5d      	ldr	r2, [pc, #372]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3318      	adds	r3, #24
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	589b      	ldr	r3, [r3, r2]
 80043e8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	220f      	movs	r2, #15
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	23a0      	movs	r3, #160	; 0xa0
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d019      	beq.n	800443a <HAL_GPIO_DeInit+0x82>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a53      	ldr	r2, [pc, #332]	; (8004558 <HAL_GPIO_DeInit+0x1a0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_DeInit+0x7e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_GPIO_DeInit+0x1a4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_DeInit+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_GPIO_DeInit+0x1a8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_DeInit+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a50      	ldr	r2, [pc, #320]	; (8004564 <HAL_GPIO_DeInit+0x1ac>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_DeInit+0x72>
 8004426:	2304      	movs	r3, #4
 8004428:	e008      	b.n	800443c <HAL_GPIO_DeInit+0x84>
 800442a:	2305      	movs	r3, #5
 800442c:	e006      	b.n	800443c <HAL_GPIO_DeInit+0x84>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <HAL_GPIO_DeInit+0x84>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <HAL_GPIO_DeInit+0x84>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_GPIO_DeInit+0x84>
 800443a:	2300      	movs	r3, #0
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	2103      	movs	r1, #3
 8004440:	400a      	ands	r2, r1
 8004442:	00d2      	lsls	r2, r2, #3
 8004444:	4093      	lsls	r3, r2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d136      	bne.n	80044ba <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800444c:	4a41      	ldr	r2, [pc, #260]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	58d3      	ldr	r3, [r2, r3]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	43d2      	mvns	r2, r2
 8004456:	493f      	ldr	r1, [pc, #252]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 8004458:	4013      	ands	r3, r2
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800445e:	4a3d      	ldr	r2, [pc, #244]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 8004460:	2384      	movs	r3, #132	; 0x84
 8004462:	58d3      	ldr	r3, [r2, r3]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	43d2      	mvns	r2, r2
 8004468:	493a      	ldr	r1, [pc, #232]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 800446a:	4013      	ands	r3, r2
 800446c:	2284      	movs	r2, #132	; 0x84
 800446e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004470:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43d9      	mvns	r1, r3
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 800447a:	400a      	ands	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43d9      	mvns	r1, r3
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	220f      	movs	r2, #15
 8004496:	409a      	lsls	r2, r3
 8004498:	0013      	movs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3318      	adds	r3, #24
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	589a      	ldr	r2, [r3, r2]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	4829      	ldr	r0, [pc, #164]	; (8004554 <HAL_GPIO_DeInit+0x19c>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	400a      	ands	r2, r1
 80044b4:	3318      	adds	r3, #24
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2103      	movs	r1, #3
 80044c4:	4099      	lsls	r1, r3
 80044c6:	000b      	movs	r3, r1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	08da      	lsrs	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3208      	adds	r2, #8
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	58d3      	ldr	r3, [r2, r3]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	2107      	movs	r1, #7
 80044de:	400a      	ands	r2, r1
 80044e0:	0092      	lsls	r2, r2, #2
 80044e2:	210f      	movs	r1, #15
 80044e4:	4091      	lsls	r1, r2
 80044e6:	000a      	movs	r2, r1
 80044e8:	43d1      	mvns	r1, r2
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	08d2      	lsrs	r2, r2, #3
 80044ee:	4019      	ands	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	0052      	lsls	r2, r2, #1
 8004500:	2103      	movs	r1, #3
 8004502:	4091      	lsls	r1, r2
 8004504:	000a      	movs	r2, r1
 8004506:	43d2      	mvns	r2, r2
 8004508:	401a      	ands	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2101      	movs	r1, #1
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4091      	lsls	r1, r2
 8004518:	000a      	movs	r2, r1
 800451a:	43d2      	mvns	r2, r2
 800451c:	401a      	ands	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	0052      	lsls	r2, r2, #1
 800452a:	2103      	movs	r1, #3
 800452c:	4091      	lsls	r1, r2
 800452e:	000a      	movs	r2, r1
 8004530:	43d2      	mvns	r2, r2
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3301      	adds	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	40da      	lsrs	r2, r3
 8004544:	1e13      	subs	r3, r2, #0
 8004546:	d000      	beq.n	800454a <HAL_GPIO_DeInit+0x192>
 8004548:	e73e      	b.n	80043c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b006      	add	sp, #24
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021800 	.word	0x40021800
 8004558:	50000400 	.word	0x50000400
 800455c:	50000800 	.word	0x50000800
 8004560:	50000c00 	.word	0x50000c00
 8004564:	50001000 	.word	0x50001000

08004568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	000a      	movs	r2, r1
 8004572:	1cbb      	adds	r3, r7, #2
 8004574:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	1cba      	adds	r2, r7, #2
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	4013      	ands	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004582:	230f      	movs	r3, #15
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e003      	b.n	8004594 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800458c:	230f      	movs	r3, #15
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004594:	230f      	movs	r3, #15
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	0008      	movs	r0, r1
 80045ac:	0011      	movs	r1, r2
 80045ae:	1cbb      	adds	r3, r7, #2
 80045b0:	1c02      	adds	r2, r0, #0
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	1c7b      	adds	r3, r7, #1
 80045b6:	1c0a      	adds	r2, r1, #0
 80045b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ba:	1c7b      	adds	r3, r7, #1
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045c2:	1cbb      	adds	r3, r7, #2
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045ca:	e003      	b.n	80045d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045cc:	1cbb      	adds	r3, r7, #2
 80045ce:	881a      	ldrh	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	0002      	movs	r2, r0
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	1dba      	adds	r2, r7, #6
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	d008      	beq.n	8004606 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80045f6:	1dba      	adds	r2, r7, #6
 80045f8:	8812      	ldrh	r2, [r2, #0]
 80045fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80045fc:	1dbb      	adds	r3, r7, #6
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	0018      	movs	r0, r3
 8004602:	f7fe fff7 	bl	80035f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	1dba      	adds	r2, r7, #6
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	4013      	ands	r3, r2
 8004610:	d008      	beq.n	8004624 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004614:	1dba      	adds	r2, r7, #6
 8004616:	8812      	ldrh	r2, [r2, #0]
 8004618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	0018      	movs	r0, r3
 8004620:	f000 f806 	bl	8004630 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021800 	.word	0x40021800

08004630 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	0002      	movs	r2, r0
 8004638:	1dbb      	adds	r3, r7, #6
 800463a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <HAL_PWR_EnableBkUpAccess+0x18>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_PWR_EnableBkUpAccess+0x18>)
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0049      	lsls	r1, r1, #1
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40007000 	.word	0x40007000

08004660 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	000a      	movs	r2, r1
 800466a:	1cfb      	adds	r3, r7, #3
 800466c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2207      	movs	r2, #7
 800467a:	4393      	bics	r3, r2
 800467c:	001a      	movs	r2, r3
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004680:	2101      	movs	r1, #1
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e005      	b.n	8004694 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_PWR_EnterSTOPMode+0x68>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_PWR_EnterSTOPMode+0x68>)
 800468e:	2107      	movs	r1, #7
 8004690:	438a      	bics	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_PWR_EnterSTOPMode+0x6c>)
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_PWR_EnterSTOPMode+0x6c>)
 800469a:	2104      	movs	r1, #4
 800469c:	430a      	orrs	r2, r1
 800469e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80046a0:	1cfb      	adds	r3, r7, #3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80046a8:	bf30      	wfi
 80046aa:	e002      	b.n	80046b2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80046ac:	bf40      	sev
    __WFE();
 80046ae:	bf20      	wfe
    __WFE();
 80046b0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_PWR_EnterSTOPMode+0x6c>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_PWR_EnterSTOPMode+0x6c>)
 80046b8:	2104      	movs	r1, #4
 80046ba:	438a      	bics	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	40007000 	.word	0x40007000
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2207      	movs	r2, #7
 80046da:	4393      	bics	r3, r2
 80046dc:	001a      	movs	r2, r3
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046e0:	2103      	movs	r1, #3
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80046ec:	2104      	movs	r1, #4
 80046ee:	430a      	orrs	r2, r1
 80046f0:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80046f2:	bf30      	wfi
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	40007000 	.word	0x40007000
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	4b17      	ldr	r3, [pc, #92]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d11f      	bne.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	0013      	movs	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	189b      	adds	r3, r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4912      	ldr	r1, [pc, #72]	; (8004780 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004736:	0018      	movs	r0, r3
 8004738:	f7fb fd00 	bl	800013c <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004742:	e008      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e009      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	401a      	ands	r2, r3
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	429a      	cmp	r2, r3
 8004766:	d0ed      	beq.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	40007000 	.word	0x40007000
 8004778:	fffff9ff 	.word	0xfffff9ff
 800477c:	2000000c 	.word	0x2000000c
 8004780:	000f4240 	.word	0x000f4240

08004784 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <LL_RCC_GetAPB1Prescaler+0x14>)
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	23e0      	movs	r3, #224	; 0xe0
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4013      	ands	r3, r2
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f000 fb50 	bl	8004e50 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	d100      	bne.n	80047bc <HAL_RCC_OscConfig+0x20>
 80047ba:	e07c      	b.n	80048b6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047bc:	4bc3      	ldr	r3, [pc, #780]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2238      	movs	r2, #56	; 0x38
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c6:	4bc1      	ldr	r3, [pc, #772]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4013      	ands	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_OscConfig+0x40>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d002      	beq.n	80047e2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d10b      	bne.n	80047fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e2:	4bba      	ldr	r3, [pc, #744]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	029b      	lsls	r3, r3, #10
 80047ea:	4013      	ands	r3, r2
 80047ec:	d062      	beq.n	80048b4 <HAL_RCC_OscConfig+0x118>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d15e      	bne.n	80048b4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e32a      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	429a      	cmp	r2, r3
 8004804:	d107      	bne.n	8004816 <HAL_RCC_OscConfig+0x7a>
 8004806:	4bb1      	ldr	r3, [pc, #708]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4bb0      	ldr	r3, [pc, #704]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	0249      	lsls	r1, r1, #9
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e020      	b.n	8004858 <HAL_RCC_OscConfig+0xbc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	23a0      	movs	r3, #160	; 0xa0
 800481c:	02db      	lsls	r3, r3, #11
 800481e:	429a      	cmp	r2, r3
 8004820:	d10e      	bne.n	8004840 <HAL_RCC_OscConfig+0xa4>
 8004822:	4baa      	ldr	r3, [pc, #680]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4ba9      	ldr	r3, [pc, #676]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	02c9      	lsls	r1, r1, #11
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	4ba6      	ldr	r3, [pc, #664]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4ba5      	ldr	r3, [pc, #660]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	0249      	lsls	r1, r1, #9
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xbc>
 8004840:	4ba2      	ldr	r3, [pc, #648]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4ba1      	ldr	r3, [pc, #644]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004846:	49a2      	ldr	r1, [pc, #648]	; (8004ad0 <HAL_RCC_OscConfig+0x334>)
 8004848:	400a      	ands	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	4b9f      	ldr	r3, [pc, #636]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b9e      	ldr	r3, [pc, #632]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004852:	49a0      	ldr	r1, [pc, #640]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d014      	beq.n	800488a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7ff faea 	bl	8003e38 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486a:	f7ff fae5 	bl	8003e38 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b64      	cmp	r3, #100	; 0x64
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e2e9      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487c:	4b93      	ldr	r3, [pc, #588]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	029b      	lsls	r3, r3, #10
 8004884:	4013      	ands	r3, r2
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0xce>
 8004888:	e015      	b.n	80048b6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7ff fad5 	bl	8003e38 <HAL_GetTick>
 800488e:	0003      	movs	r3, r0
 8004890:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7ff fad0 	bl	8003e38 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e2d4      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a6:	4b89      	ldr	r3, [pc, #548]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	4013      	ands	r3, r2
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0xf8>
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2202      	movs	r2, #2
 80048bc:	4013      	ands	r3, r2
 80048be:	d100      	bne.n	80048c2 <HAL_RCC_OscConfig+0x126>
 80048c0:	e099      	b.n	80049f6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c2:	4b82      	ldr	r3, [pc, #520]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2238      	movs	r2, #56	; 0x38
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048cc:	4b7f      	ldr	r3, [pc, #508]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2203      	movs	r2, #3
 80048d2:	4013      	ands	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_OscConfig+0x146>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d002      	beq.n	80048e8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d135      	bne.n	8004954 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	4b78      	ldr	r3, [pc, #480]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4013      	ands	r3, r2
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_OscConfig+0x164>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e2a7      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b72      	ldr	r3, [pc, #456]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a74      	ldr	r2, [pc, #464]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	4b6e      	ldr	r3, [pc, #440]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800491c:	4b6b      	ldr	r3, [pc, #428]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6e      	ldr	r2, [pc, #440]	; (8004adc <HAL_RCC_OscConfig+0x340>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004930:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0adb      	lsrs	r3, r3, #11
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	4a69      	ldr	r2, [pc, #420]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 800493c:	40da      	lsrs	r2, r3
 800493e:	4b69      	ldr	r3, [pc, #420]	; (8004ae4 <HAL_RCC_OscConfig+0x348>)
 8004940:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004942:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <HAL_RCC_OscConfig+0x34c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff fa1a 	bl	8003d80 <HAL_InitTick>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d051      	beq.n	80049f4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e27d      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d030      	beq.n	80049be <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800495c:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_RCC_OscConfig+0x340>)
 8004962:	4013      	ands	r3, r2
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004970:	4b56      	ldr	r3, [pc, #344]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b55      	ldr	r3, [pc, #340]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	0049      	lsls	r1, r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7ff fa5b 	bl	8003e38 <HAL_GetTick>
 8004982:	0003      	movs	r3, r0
 8004984:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7ff fa56 	bl	8003e38 <HAL_GetTick>
 800498c:	0002      	movs	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e25a      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800499a:	4b4c      	ldr	r3, [pc, #304]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4013      	ands	r3, r2
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b49      	ldr	r3, [pc, #292]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	021a      	lsls	r2, r3, #8
 80049b6:	4b45      	ldr	r3, [pc, #276]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e01b      	b.n	80049f6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b42      	ldr	r3, [pc, #264]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80049c4:	4949      	ldr	r1, [pc, #292]	; (8004aec <HAL_RCC_OscConfig+0x350>)
 80049c6:	400a      	ands	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7ff fa35 	bl	8003e38 <HAL_GetTick>
 80049ce:	0003      	movs	r3, r0
 80049d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d4:	f7ff fa30 	bl	8003e38 <HAL_GetTick>
 80049d8:	0002      	movs	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e234      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4013      	ands	r3, r2
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x238>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2208      	movs	r2, #8
 80049fc:	4013      	ands	r3, r2
 80049fe:	d047      	beq.n	8004a90 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a00:	4b32      	ldr	r3, [pc, #200]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2238      	movs	r2, #56	; 0x38
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b18      	cmp	r3, #24
 8004a0a:	d10a      	bne.n	8004a22 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	2202      	movs	r2, #2
 8004a12:	4013      	ands	r3, r2
 8004a14:	d03c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x2f4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d138      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e216      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d019      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a2e:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	430a      	orrs	r2, r1
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7ff f9ff 	bl	8003e38 <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7ff f9fa 	bl	8003e38 <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1fe      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d0f1      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2a4>
 8004a5c:	e018      	b.n	8004a90 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a64:	2101      	movs	r1, #1
 8004a66:	438a      	bics	r2, r1
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7ff f9e5 	bl	8003e38 <HAL_GetTick>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a74:	f7ff f9e0 	bl	8003e38 <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e1e4      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d1f1      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2204      	movs	r2, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	d100      	bne.n	8004a9c <HAL_RCC_OscConfig+0x300>
 8004a9a:	e0c7      	b.n	8004c2c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9c:	231f      	movs	r3, #31
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2238      	movs	r2, #56	; 0x38
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d11f      	bne.n	8004af0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x330>)
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d100      	bne.n	8004abc <HAL_RCC_OscConfig+0x320>
 8004aba:	e0b7      	b.n	8004c2c <HAL_RCC_OscConfig+0x490>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d000      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x32a>
 8004ac4:	e0b2      	b.n	8004c2c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e1c2      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	fffeffff 	.word	0xfffeffff
 8004ad4:	fffbffff 	.word	0xfffbffff
 8004ad8:	ffff80ff 	.word	0xffff80ff
 8004adc:	ffffc7ff 	.word	0xffffc7ff
 8004ae0:	00f42400 	.word	0x00f42400
 8004ae4:	2000000c 	.word	0x2000000c
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004af0:	4bb5      	ldr	r3, [pc, #724]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	055b      	lsls	r3, r3, #21
 8004af8:	4013      	ands	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_OscConfig+0x364>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x366>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d011      	beq.n	8004b2a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	4bb0      	ldr	r3, [pc, #704]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0a:	4baf      	ldr	r3, [pc, #700]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	0549      	lsls	r1, r1, #21
 8004b10:	430a      	orrs	r2, r1
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b14:	4bac      	ldr	r3, [pc, #688]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	055b      	lsls	r3, r3, #21
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b22:	231f      	movs	r3, #31
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2a:	4ba8      	ldr	r3, [pc, #672]	; (8004dcc <HAL_RCC_OscConfig+0x630>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	d11a      	bne.n	8004b6c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b36:	4ba5      	ldr	r3, [pc, #660]	; (8004dcc <HAL_RCC_OscConfig+0x630>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4ba4      	ldr	r3, [pc, #656]	; (8004dcc <HAL_RCC_OscConfig+0x630>)
 8004b3c:	2180      	movs	r1, #128	; 0x80
 8004b3e:	0049      	lsls	r1, r1, #1
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b44:	f7ff f978 	bl	8003e38 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7ff f973 	bl	8003e38 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e177      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <HAL_RCC_OscConfig+0x630>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x3e6>
 8004b74:	4b94      	ldr	r3, [pc, #592]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b78:	4b93      	ldr	r3, [pc, #588]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b80:	e01c      	b.n	8004bbc <HAL_RCC_OscConfig+0x420>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x408>
 8004b8a:	4b8f      	ldr	r3, [pc, #572]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b8e:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b90:	2104      	movs	r1, #4
 8004b92:	430a      	orrs	r2, r1
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b96:	4b8c      	ldr	r3, [pc, #560]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0x420>
 8004ba4:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba8:	4b87      	ldr	r3, [pc, #540]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004baa:	2101      	movs	r1, #1
 8004bac:	438a      	bics	r2, r1
 8004bae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bb0:	4b85      	ldr	r3, [pc, #532]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bb4:	4b84      	ldr	r3, [pc, #528]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	438a      	bics	r2, r1
 8004bba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d014      	beq.n	8004bee <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7ff f938 	bl	8003e38 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bcc:	e009      	b.n	8004be2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7ff f933 	bl	8003e38 <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	4a7d      	ldr	r2, [pc, #500]	; (8004dd0 <HAL_RCC_OscConfig+0x634>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e136      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	4b79      	ldr	r3, [pc, #484]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x432>
 8004bec:	e013      	b.n	8004c16 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7ff f923 	bl	8003e38 <HAL_GetTick>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bf6:	e009      	b.n	8004c0c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7ff f91e 	bl	8003e38 <HAL_GetTick>
 8004bfc:	0002      	movs	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	4a73      	ldr	r2, [pc, #460]	; (8004dd0 <HAL_RCC_OscConfig+0x634>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e121      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c0c:	4b6e      	ldr	r3, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c16:	231f      	movs	r3, #31
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c20:	4b69      	ldr	r3, [pc, #420]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c26:	496b      	ldr	r1, [pc, #428]	; (8004dd4 <HAL_RCC_OscConfig+0x638>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2220      	movs	r2, #32
 8004c32:	4013      	ands	r3, r2
 8004c34:	d039      	beq.n	8004caa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01b      	beq.n	8004c76 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c3e:	4b62      	ldr	r3, [pc, #392]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	03c9      	lsls	r1, r1, #15
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7ff f8f4 	bl	8003e38 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c56:	f7ff f8ef 	bl	8003e38 <HAL_GetTick>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e0f3      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c68:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	4013      	ands	r3, r2
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x4ba>
 8004c74:	e019      	b.n	8004caa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c76:	4b54      	ldr	r3, [pc, #336]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004c7c:	4956      	ldr	r1, [pc, #344]	; (8004dd8 <HAL_RCC_OscConfig+0x63c>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7ff f8d9 	bl	8003e38 <HAL_GetTick>
 8004c86:	0003      	movs	r3, r0
 8004c88:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c8c:	f7ff f8d4 	bl	8003e38 <HAL_GetTick>
 8004c90:	0002      	movs	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e0d8      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x518>
 8004cb2:	e0cc      	b.n	8004e4e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb4:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2238      	movs	r2, #56	; 0x38
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d100      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x526>
 8004cc0:	e07b      	b.n	8004dba <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d156      	bne.n	8004d78 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004cd0:	4942      	ldr	r1, [pc, #264]	; (8004ddc <HAL_RCC_OscConfig+0x640>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7ff f8af 	bl	8003e38 <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7ff f8aa 	bl	8003e38 <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0ae      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf2:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	049b      	lsls	r3, r3, #18
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cfe:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4a37      	ldr	r2, [pc, #220]	; (8004de0 <HAL_RCC_OscConfig+0x644>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d32:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0449      	lsls	r1, r1, #17
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d40:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	0549      	lsls	r1, r1, #21
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7ff f873 	bl	8003e38 <HAL_GetTick>
 8004d52:	0003      	movs	r3, r0
 8004d54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7ff f86e 	bl	8003e38 <HAL_GetTick>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e072      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	049b      	lsls	r3, r3, #18
 8004d72:	4013      	ands	r3, r2
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x5bc>
 8004d76:	e06a      	b.n	8004e4e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d7e:	4917      	ldr	r1, [pc, #92]	; (8004ddc <HAL_RCC_OscConfig+0x640>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7ff f858 	bl	8003e38 <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7ff f853 	bl	8003e38 <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e057      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	049b      	lsls	r3, r3, #18
 8004da8:	4013      	ands	r3, r2
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004db2:	490c      	ldr	r1, [pc, #48]	; (8004de4 <HAL_RCC_OscConfig+0x648>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e049      	b.n	8004e4e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d112      	bne.n	8004de8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e044      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	00001388 	.word	0x00001388
 8004dd4:	efffffff 	.word	0xefffffff
 8004dd8:	ffbfffff 	.word	0xffbfffff
 8004ddc:	feffffff 	.word	0xfeffffff
 8004de0:	11c1808c 	.word	0x11c1808c
 8004de4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x6bc>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2203      	movs	r2, #3
 8004df2:	401a      	ands	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d126      	bne.n	8004e4a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2270      	movs	r2, #112	; 0x70
 8004e00:	401a      	ands	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d11f      	bne.n	8004e4a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	23fe      	movs	r3, #254	; 0xfe
 8004e0e:	01db      	lsls	r3, r3, #7
 8004e10:	401a      	ands	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d116      	bne.n	8004e4a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	23f8      	movs	r3, #248	; 0xf8
 8004e20:	039b      	lsls	r3, r3, #14
 8004e22:	401a      	ands	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d10e      	bne.n	8004e4a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	23e0      	movs	r3, #224	; 0xe0
 8004e30:	051b      	lsls	r3, r3, #20
 8004e32:	401a      	ands	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	0f5b      	lsrs	r3, r3, #29
 8004e40:	075a      	lsls	r2, r3, #29
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d001      	beq.n	8004e4e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b008      	add	sp, #32
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000

08004e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0e9      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e70:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2207      	movs	r2, #7
 8004e76:	4013      	ands	r3, r2
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d91e      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b73      	ldr	r3, [pc, #460]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2207      	movs	r2, #7
 8004e84:	4393      	bics	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	4b70      	ldr	r3, [pc, #448]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e90:	f7fe ffd2 	bl	8003e38 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e98:	e009      	b.n	8004eae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9a:	f7fe ffcd 	bl	8003e38 <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	4a6a      	ldr	r2, [pc, #424]	; (8005050 <HAL_RCC_ClockConfig+0x1f4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0ca      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004eae:	4b67      	ldr	r3, [pc, #412]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1ee      	bne.n	8004e9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d015      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d006      	beq.n	8004ede <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ed0:	4b60      	ldr	r3, [pc, #384]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004ed6:	21e0      	movs	r1, #224	; 0xe0
 8004ed8:	01c9      	lsls	r1, r1, #7
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <HAL_RCC_ClockConfig+0x1fc>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b59      	ldr	r3, [pc, #356]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d057      	beq.n	8004fac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f04:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	029b      	lsls	r3, r3, #10
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d12b      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e097      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	049b      	lsls	r3, r3, #18
 8004f24:	4013      	ands	r3, r2
 8004f26:	d11f      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e08b      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f34:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e07f      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4c:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f50:	2202      	movs	r2, #2
 8004f52:	4013      	ands	r3, r2
 8004f54:	d108      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e074      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	2202      	movs	r2, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e06d      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	4393      	bics	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fe ff5c 	bl	8003e38 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f84:	e009      	b.n	8004f9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f86:	f7fe ff57 	bl	8003e38 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <HAL_RCC_ClockConfig+0x1f4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e054      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2238      	movs	r2, #56	; 0x38
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1ec      	bne.n	8004f86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b27      	ldr	r3, [pc, #156]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d21e      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	4393      	bics	r3, r2
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	4b21      	ldr	r3, [pc, #132]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fcc:	f7fe ff34 	bl	8003e38 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fd4:	e009      	b.n	8004fea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd6:	f7fe ff2f 	bl	8003e38 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_RCC_ClockConfig+0x1f4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e02c      	b.n	8005044 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <HAL_RCC_ClockConfig+0x1f0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2207      	movs	r2, #7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	4013      	ands	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_RCC_ClockConfig+0x200>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005016:	f000 f829 	bl	800506c <HAL_RCC_GetSysClockFreq>
 800501a:	0001      	movs	r1, r0
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCC_ClockConfig+0x1f8>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	220f      	movs	r2, #15
 8005024:	401a      	ands	r2, r3
 8005026:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x204>)
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	58d3      	ldr	r3, [r2, r3]
 800502c:	221f      	movs	r2, #31
 800502e:	4013      	ands	r3, r2
 8005030:	000a      	movs	r2, r1
 8005032:	40da      	lsrs	r2, r3
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_ClockConfig+0x208>)
 8005036:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_ClockConfig+0x20c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0018      	movs	r0, r3
 800503e:	f7fe fe9f 	bl	8003d80 <HAL_InitTick>
 8005042:	0003      	movs	r3, r0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40022000 	.word	0x40022000
 8005050:	00001388 	.word	0x00001388
 8005054:	40021000 	.word	0x40021000
 8005058:	fffff0ff 	.word	0xfffff0ff
 800505c:	ffff8fff 	.word	0xffff8fff
 8005060:	08014210 	.word	0x08014210
 8005064:	2000000c 	.word	0x2000000c
 8005068:	20000010 	.word	0x20000010

0800506c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005072:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2238      	movs	r2, #56	; 0x38
 8005078:	4013      	ands	r3, r2
 800507a:	d10f      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800507c:	4b39      	ldr	r3, [pc, #228]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	0adb      	lsrs	r3, r3, #11
 8005082:	2207      	movs	r2, #7
 8005084:	4013      	ands	r3, r2
 8005086:	2201      	movs	r2, #1
 8005088:	409a      	lsls	r2, r3
 800508a:	0013      	movs	r3, r2
 800508c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	4835      	ldr	r0, [pc, #212]	; (8005168 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005092:	f7fb f853 	bl	800013c <__udivsi3>
 8005096:	0003      	movs	r3, r0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e05d      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800509c:	4b31      	ldr	r3, [pc, #196]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2238      	movs	r2, #56	; 0x38
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <HAL_RCC_GetSysClockFreq+0x100>)
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e054      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ae:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2238      	movs	r2, #56	; 0x38
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d138      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2203      	movs	r2, #3
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	2207      	movs	r2, #7
 80050cc:	4013      	ands	r3, r2
 80050ce:	3301      	adds	r3, #1
 80050d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d10d      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4824      	ldr	r0, [pc, #144]	; (800516c <HAL_RCC_GetSysClockFreq+0x100>)
 80050dc:	f7fb f82e 	bl	800013c <__udivsi3>
 80050e0:	0003      	movs	r3, r0
 80050e2:	0019      	movs	r1, r3
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	227f      	movs	r2, #127	; 0x7f
 80050ec:	4013      	ands	r3, r2
 80050ee:	434b      	muls	r3, r1
 80050f0:	617b      	str	r3, [r7, #20]
        break;
 80050f2:	e00d      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	481c      	ldr	r0, [pc, #112]	; (8005168 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050f8:	f7fb f820 	bl	800013c <__udivsi3>
 80050fc:	0003      	movs	r3, r0
 80050fe:	0019      	movs	r1, r3
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	227f      	movs	r2, #127	; 0x7f
 8005108:	4013      	ands	r3, r2
 800510a:	434b      	muls	r3, r1
 800510c:	617b      	str	r3, [r7, #20]
        break;
 800510e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	0f5b      	lsrs	r3, r3, #29
 8005116:	2207      	movs	r2, #7
 8005118:	4013      	ands	r3, r2
 800511a:	3301      	adds	r3, #1
 800511c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7fb f80b 	bl	800013c <__udivsi3>
 8005126:	0003      	movs	r3, r0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e015      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2238      	movs	r2, #56	; 0x38
 8005132:	4013      	ands	r3, r2
 8005134:	2b20      	cmp	r3, #32
 8005136:	d103      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e00b      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2238      	movs	r2, #56	; 0x38
 8005146:	4013      	ands	r3, r2
 8005148:	2b18      	cmp	r3, #24
 800514a:	d103      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800514c:	23fa      	movs	r3, #250	; 0xfa
 800514e:	01db      	lsls	r3, r3, #7
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e001      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005158:	693b      	ldr	r3, [r7, #16]
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b006      	add	sp, #24
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	40021000 	.word	0x40021000
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <HAL_RCC_GetHCLKFreq+0x10>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	2000000c 	.word	0x2000000c

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005184:	b5b0      	push	{r4, r5, r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005188:	f7ff fff2 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 800518c:	0004      	movs	r4, r0
 800518e:	f7ff faf9 	bl	8004784 <LL_RCC_GetAPB1Prescaler>
 8005192:	0003      	movs	r3, r0
 8005194:	0b1a      	lsrs	r2, r3, #12
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005198:	0092      	lsls	r2, r2, #2
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	221f      	movs	r2, #31
 800519e:	4013      	ands	r3, r2
 80051a0:	40dc      	lsrs	r4, r3
 80051a2:	0023      	movs	r3, r4
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bdb0      	pop	{r4, r5, r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	08014250 	.word	0x08014250

080051b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80051b8:	2313      	movs	r3, #19
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c0:	2312      	movs	r3, #18
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	4013      	ands	r3, r2
 80051d2:	d100      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051d4:	e0ad      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d6:	2011      	movs	r0, #17
 80051d8:	183b      	adds	r3, r7, r0
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051de:	4b47      	ldr	r3, [pc, #284]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	055b      	lsls	r3, r3, #21
 80051e6:	4013      	ands	r3, r2
 80051e8:	d110      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	4b44      	ldr	r3, [pc, #272]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ee:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	0549      	lsls	r1, r1, #21
 80051f4:	430a      	orrs	r2, r1
 80051f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80051f8:	4b40      	ldr	r3, [pc, #256]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	055b      	lsls	r3, r3, #21
 8005200:	4013      	ands	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005206:	183b      	adds	r3, r7, r0
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520c:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	0049      	lsls	r1, r1, #1
 8005216:	430a      	orrs	r2, r1
 8005218:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800521a:	f7fe fe0d 	bl	8003e38 <HAL_GetTick>
 800521e:	0003      	movs	r3, r0
 8005220:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005222:	e00b      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005224:	f7fe fe08 	bl	8003e38 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d904      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005232:	2313      	movs	r3, #19
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2203      	movs	r2, #3
 8005238:	701a      	strb	r2, [r3, #0]
        break;
 800523a:	e005      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523c:	4b30      	ldr	r3, [pc, #192]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4013      	ands	r3, r2
 8005246:	d0ed      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005248:	2313      	movs	r3, #19
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d15e      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005252:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005256:	23c0      	movs	r3, #192	; 0xc0
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4013      	ands	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	429a      	cmp	r2, r3
 800526c:	d014      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005274:	4013      	ands	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800527a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800527c:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	0249      	lsls	r1, r1, #9
 8005282:	430a      	orrs	r2, r1
 8005284:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800528a:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800528c:	491e      	ldr	r1, [pc, #120]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800528e:	400a      	ands	r2, r1
 8005290:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2201      	movs	r2, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d016      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fe fdca 	bl	8003e38 <HAL_GetTick>
 80052a4:	0003      	movs	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a8:	e00c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fe fdc5 	bl	8003e38 <HAL_GetTick>
 80052ae:	0002      	movs	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d904      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80052ba:	2313      	movs	r3, #19
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	2203      	movs	r2, #3
 80052c0:	701a      	strb	r2, [r3, #0]
            break;
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	2202      	movs	r2, #2
 80052ca:	4013      	ands	r3, r2
 80052cc:	d0ed      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80052ce:	2313      	movs	r3, #19
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d8:	4b08      	ldr	r3, [pc, #32]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ec:	e016      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ee:	2312      	movs	r3, #18
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2213      	movs	r2, #19
 80052f4:	18ba      	adds	r2, r7, r2
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e00f      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052fc:	40021000 	.word	0x40021000
 8005300:	40007000 	.word	0x40007000
 8005304:	fffffcff 	.word	0xfffffcff
 8005308:	fffeffff 	.word	0xfffeffff
 800530c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	2312      	movs	r3, #18
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2213      	movs	r2, #19
 8005316:	18ba      	adds	r2, r7, r2
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800531c:	2311      	movs	r3, #17
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005326:	4bb6      	ldr	r3, [pc, #728]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532a:	4bb5      	ldr	r3, [pc, #724]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800532c:	49b5      	ldr	r1, [pc, #724]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800532e:	400a      	ands	r2, r1
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	4013      	ands	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533c:	4bb0      	ldr	r3, [pc, #704]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	2203      	movs	r2, #3
 8005342:	4393      	bics	r3, r2
 8005344:	0019      	movs	r1, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	4bad      	ldr	r3, [pc, #692]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800534c:	430a      	orrs	r2, r1
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2202      	movs	r2, #2
 8005356:	4013      	ands	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535a:	4ba9      	ldr	r3, [pc, #676]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	220c      	movs	r2, #12
 8005360:	4393      	bics	r3, r2
 8005362:	0019      	movs	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	4ba5      	ldr	r3, [pc, #660]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800536a:	430a      	orrs	r2, r1
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2204      	movs	r2, #4
 8005374:	4013      	ands	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005378:	4ba1      	ldr	r3, [pc, #644]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	2230      	movs	r2, #48	; 0x30
 800537e:	4393      	bics	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	4b9e      	ldr	r3, [pc, #632]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005388:	430a      	orrs	r2, r1
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2210      	movs	r2, #16
 8005392:	4013      	ands	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005396:	4b9a      	ldr	r3, [pc, #616]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	4a9b      	ldr	r2, [pc, #620]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800539c:	4013      	ands	r3, r2
 800539e:	0019      	movs	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	4b96      	ldr	r3, [pc, #600]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053a6:	430a      	orrs	r2, r1
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	015b      	lsls	r3, r3, #5
 80053b2:	4013      	ands	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80053b6:	4b92      	ldr	r3, [pc, #584]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	4a94      	ldr	r2, [pc, #592]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053bc:	4013      	ands	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	4b8e      	ldr	r3, [pc, #568]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c6:	430a      	orrs	r2, r1
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4013      	ands	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053d6:	4b8a      	ldr	r3, [pc, #552]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	4a8d      	ldr	r2, [pc, #564]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e4:	4b86      	ldr	r3, [pc, #536]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4013      	ands	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053f6:	4b82      	ldr	r3, [pc, #520]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	4a86      	ldr	r2, [pc, #536]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b7e      	ldr	r3, [pc, #504]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005406:	430a      	orrs	r2, r1
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2220      	movs	r2, #32
 8005410:	4013      	ands	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005414:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005418:	4a7f      	ldr	r2, [pc, #508]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800541a:	4013      	ands	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	4b77      	ldr	r3, [pc, #476]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2240      	movs	r2, #64	; 0x40
 800542e:	4013      	ands	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005432:	4b73      	ldr	r3, [pc, #460]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	4a79      	ldr	r2, [pc, #484]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005442:	430a      	orrs	r2, r1
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	01db      	lsls	r3, r3, #7
 800544e:	4013      	ands	r3, r2
 8005450:	d015      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005452:	4b6b      	ldr	r3, [pc, #428]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	0899      	lsrs	r1, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545e:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005460:	430a      	orrs	r2, r1
 8005462:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	429a      	cmp	r2, r3
 800546e:	d106      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005470:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	0249      	lsls	r1, r1, #9
 800547a:	430a      	orrs	r2, r1
 800547c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	4013      	ands	r3, r2
 8005488:	d009      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800548a:	4b5d      	ldr	r3, [pc, #372]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	2240      	movs	r2, #64	; 0x40
 8005490:	4393      	bics	r3, r2
 8005492:	0019      	movs	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005498:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800549a:	430a      	orrs	r2, r1
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	039b      	lsls	r3, r3, #14
 80054a6:	4013      	ands	r3, r2
 80054a8:	d016      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054aa:	4b55      	ldr	r3, [pc, #340]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	4a5c      	ldr	r2, [pc, #368]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	0019      	movs	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b8:	4b51      	ldr	r3, [pc, #324]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ba:	430a      	orrs	r2, r1
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	03db      	lsls	r3, r3, #15
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d106      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054ca:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	0449      	lsls	r1, r1, #17
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	03db      	lsls	r3, r3, #15
 80054e0:	4013      	ands	r3, r2
 80054e2:	d016      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80054e4:	4b46      	ldr	r3, [pc, #280]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	4a4e      	ldr	r2, [pc, #312]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	0019      	movs	r1, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f2:	4b43      	ldr	r3, [pc, #268]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	045b      	lsls	r3, r3, #17
 8005500:	429a      	cmp	r2, r3
 8005502:	d106      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005504:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b3d      	ldr	r3, [pc, #244]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	0449      	lsls	r1, r1, #17
 800550e:	430a      	orrs	r2, r1
 8005510:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4013      	ands	r3, r2
 800551c:	d014      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800551e:	4b38      	ldr	r3, [pc, #224]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005522:	2203      	movs	r2, #3
 8005524:	4393      	bics	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800552e:	430a      	orrs	r2, r1
 8005530:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800553a:	4b31      	ldr	r3, [pc, #196]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	0249      	lsls	r1, r1, #9
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	019b      	lsls	r3, r3, #6
 8005550:	4013      	ands	r3, r2
 8005552:	d014      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005554:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	220c      	movs	r2, #12
 800555a:	4393      	bics	r3, r2
 800555c:	0019      	movs	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005562:	4b27      	ldr	r3, [pc, #156]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005564:	430a      	orrs	r2, r1
 8005566:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b04      	cmp	r3, #4
 800556e:	d106      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005570:	4b23      	ldr	r3, [pc, #140]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	0249      	lsls	r1, r1, #9
 800557a:	430a      	orrs	r2, r1
 800557c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	045b      	lsls	r3, r3, #17
 8005586:	4013      	ands	r3, r2
 8005588:	d016      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558a:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	4a22      	ldr	r2, [pc, #136]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005590:	4013      	ands	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	4b19      	ldr	r3, [pc, #100]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800559a:	430a      	orrs	r2, r1
 800559c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	0449      	lsls	r1, r1, #17
 80055b4:	430a      	orrs	r2, r1
 80055b6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	049b      	lsls	r3, r3, #18
 80055c0:	4013      	ands	r3, r2
 80055c2:	d016      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	4a10      	ldr	r2, [pc, #64]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055d4:	430a      	orrs	r2, r1
 80055d6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	0449      	lsls	r1, r1, #17
 80055ee:	430a      	orrs	r2, r1
 80055f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055f2:	2312      	movs	r3, #18
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	781b      	ldrb	r3, [r3, #0]
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b006      	add	sp, #24
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	efffffff 	.word	0xefffffff
 8005608:	fffff3ff 	.word	0xfffff3ff
 800560c:	fffffcff 	.word	0xfffffcff
 8005610:	fff3ffff 	.word	0xfff3ffff
 8005614:	ffcfffff 	.word	0xffcfffff
 8005618:	ffffcfff 	.word	0xffffcfff
 800561c:	ffff3fff 	.word	0xffff3fff
 8005620:	ffbfffff 	.word	0xffbfffff
 8005624:	feffffff 	.word	0xfeffffff

08005628 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005628:	b5b0      	push	{r4, r5, r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005630:	230f      	movs	r3, #15
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d100      	bne.n	8005640 <HAL_RTC_Init+0x18>
 800563e:	e08c      	b.n	800575a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2229      	movs	r2, #41	; 0x29
 8005644:	5c9b      	ldrb	r3, [r3, r2]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2228      	movs	r2, #40	; 0x28
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2288      	movs	r2, #136	; 0x88
 8005658:	0212      	lsls	r2, r2, #8
 800565a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	0018      	movs	r0, r3
 8005660:	f7fe f800 	bl	8003664 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2229      	movs	r2, #41	; 0x29
 8005668:	2102      	movs	r1, #2
 800566a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2210      	movs	r2, #16
 8005674:	4013      	ands	r3, r2
 8005676:	2b10      	cmp	r3, #16
 8005678:	d062      	beq.n	8005740 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	22ca      	movs	r2, #202	; 0xca
 8005680:	625a      	str	r2, [r3, #36]	; 0x24
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2253      	movs	r2, #83	; 0x53
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800568a:	250f      	movs	r5, #15
 800568c:	197c      	adds	r4, r7, r5
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 fbf3 	bl	8005e7c <RTC_EnterInitMode>
 8005696:	0003      	movs	r3, r0
 8005698:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800569a:	0028      	movs	r0, r5
 800569c:	183b      	adds	r3, r7, r0
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d12c      	bne.n	80056fe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	492e      	ldr	r1, [pc, #184]	; (8005768 <HAL_RTC_Init+0x140>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6912      	ldr	r2, [r2, #16]
 80056da:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6919      	ldr	r1, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	041a      	lsls	r2, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80056f0:	183c      	adds	r4, r7, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 fc03 	bl	8005f00 <RTC_ExitInitMode>
 80056fa:	0003      	movs	r3, r0
 80056fc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80056fe:	230f      	movs	r3, #15
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d116      	bne.n	8005736 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	00d2      	lsls	r2, r2, #3
 8005714:	08d2      	lsrs	r2, r2, #3
 8005716:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	22ff      	movs	r2, #255	; 0xff
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
 800573e:	e003      	b.n	8005748 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005740:	230f      	movs	r3, #15
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005748:	230f      	movs	r3, #15
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2229      	movs	r2, #41	; 0x29
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800575a:	230f      	movs	r3, #15
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	781b      	ldrb	r3, [r3, #0]
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b004      	add	sp, #16
 8005766:	bdb0      	pop	{r4, r5, r7, pc}
 8005768:	fb8fffbf 	.word	0xfb8fffbf

0800576c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800576c:	b5b0      	push	{r4, r5, r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2228      	movs	r2, #40	; 0x28
 800577c:	5c9b      	ldrb	r3, [r3, r2]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_RTC_SetTime+0x1a>
 8005782:	2302      	movs	r3, #2
 8005784:	e092      	b.n	80058ac <HAL_RTC_SetTime+0x140>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2229      	movs	r2, #41	; 0x29
 8005792:	2102      	movs	r1, #2
 8005794:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	22ca      	movs	r2, #202	; 0xca
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2253      	movs	r2, #83	; 0x53
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057a6:	2513      	movs	r5, #19
 80057a8:	197c      	adds	r4, r7, r5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f000 fb65 	bl	8005e7c <RTC_EnterInitMode>
 80057b2:	0003      	movs	r3, r0
 80057b4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80057b6:	197b      	adds	r3, r7, r5
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d162      	bne.n	8005884 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d125      	bne.n	8005810 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	4013      	ands	r3, r2
 80057ce:	d102      	bne.n	80057d6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 fbd4 	bl	8005f88 <RTC_ByteToBcd2>
 80057e0:	0003      	movs	r3, r0
 80057e2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 fbcd 	bl	8005f88 <RTC_ByteToBcd2>
 80057ee:	0003      	movs	r3, r0
 80057f0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057f2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	789b      	ldrb	r3, [r3, #2]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 fbc5 	bl	8005f88 <RTC_ByteToBcd2>
 80057fe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005800:	0022      	movs	r2, r4
 8005802:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e017      	b.n	8005840 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2240      	movs	r2, #64	; 0x40
 8005818:	4013      	ands	r3, r2
 800581a:	d102      	bne.n	8005822 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800582e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005834:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	491b      	ldr	r1, [pc, #108]	; (80058b4 <HAL_RTC_SetTime+0x148>)
 8005848:	400a      	ands	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4918      	ldr	r1, [pc, #96]	; (80058b8 <HAL_RTC_SetTime+0x14c>)
 8005858:	400a      	ands	r2, r1
 800585a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6999      	ldr	r1, [r3, #24]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	431a      	orrs	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005874:	2313      	movs	r3, #19
 8005876:	18fc      	adds	r4, r7, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fb40 	bl	8005f00 <RTC_ExitInitMode>
 8005880:	0003      	movs	r3, r0
 8005882:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800588c:	2313      	movs	r3, #19
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2229      	movs	r2, #41	; 0x29
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2228      	movs	r2, #40	; 0x28
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return status;
 80058a6:	2313      	movs	r3, #19
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781b      	ldrb	r3, [r3, #0]
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b006      	add	sp, #24
 80058b2:	bdb0      	pop	{r4, r5, r7, pc}
 80058b4:	007f7f7f 	.word	0x007f7f7f
 80058b8:	fffbffff 	.word	0xfffbffff

080058bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	045b      	lsls	r3, r3, #17
 80058da:	0c5a      	lsrs	r2, r3, #17
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a22      	ldr	r2, [pc, #136]	; (8005970 <HAL_RTC_GetTime+0xb4>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	223f      	movs	r2, #63	; 0x3f
 80058f4:	4013      	ands	r3, r2
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	b2db      	uxtb	r3, r3
 8005902:	227f      	movs	r2, #127	; 0x7f
 8005904:	4013      	ands	r3, r2
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	227f      	movs	r2, #127	; 0x7f
 8005912:	4013      	ands	r3, r2
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	0d9b      	lsrs	r3, r3, #22
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11a      	bne.n	8005966 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fb4f 	bl	8005fd8 <RTC_Bcd2ToByte>
 800593a:	0003      	movs	r3, r0
 800593c:	001a      	movs	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fb46 	bl	8005fd8 <RTC_Bcd2ToByte>
 800594c:	0003      	movs	r3, r0
 800594e:	001a      	movs	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	0018      	movs	r0, r3
 800595a:	f000 fb3d 	bl	8005fd8 <RTC_Bcd2ToByte>
 800595e:	0003      	movs	r3, r0
 8005960:	001a      	movs	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b006      	add	sp, #24
 800596e:	bd80      	pop	{r7, pc}
 8005970:	007f7f7f 	.word	0x007f7f7f

08005974 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005974:	b5b0      	push	{r4, r5, r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2228      	movs	r2, #40	; 0x28
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_RTC_SetDate+0x1a>
 800598a:	2302      	movs	r3, #2
 800598c:	e07e      	b.n	8005a8c <HAL_RTC_SetDate+0x118>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2228      	movs	r2, #40	; 0x28
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2229      	movs	r2, #41	; 0x29
 800599a:	2102      	movs	r1, #2
 800599c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10e      	bne.n	80059c2 <HAL_RTC_SetDate+0x4e>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	001a      	movs	r2, r3
 80059aa:	2310      	movs	r3, #16
 80059ac:	4013      	ands	r3, r2
 80059ae:	d008      	beq.n	80059c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2210      	movs	r2, #16
 80059b6:	4393      	bics	r3, r2
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	330a      	adds	r3, #10
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11c      	bne.n	8005a02 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	78db      	ldrb	r3, [r3, #3]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 fadb 	bl	8005f88 <RTC_ByteToBcd2>
 80059d2:	0003      	movs	r3, r0
 80059d4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	0018      	movs	r0, r3
 80059dc:	f000 fad4 	bl	8005f88 <RTC_ByteToBcd2>
 80059e0:	0003      	movs	r3, r0
 80059e2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059e4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	789b      	ldrb	r3, [r3, #2]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 facc 	bl	8005f88 <RTC_ByteToBcd2>
 80059f0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059f2:	0022      	movs	r2, r4
 80059f4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e00e      	b.n	8005a20 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a0e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	22ca      	movs	r2, #202	; 0xca
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2253      	movs	r2, #83	; 0x53
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a30:	2513      	movs	r5, #19
 8005a32:	197c      	adds	r4, r7, r5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 fa20 	bl	8005e7c <RTC_EnterInitMode>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005a40:	0028      	movs	r0, r5
 8005a42:	183b      	adds	r3, r7, r0
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4910      	ldr	r1, [pc, #64]	; (8005a94 <HAL_RTC_SetDate+0x120>)
 8005a52:	400a      	ands	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a56:	183c      	adds	r4, r7, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 fa50 	bl	8005f00 <RTC_ExitInitMode>
 8005a60:	0003      	movs	r3, r0
 8005a62:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a6c:	2313      	movs	r3, #19
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2229      	movs	r2, #41	; 0x29
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2228      	movs	r2, #40	; 0x28
 8005a82:	2100      	movs	r1, #0
 8005a84:	5499      	strb	r1, [r3, r2]

  return status;
 8005a86:	2313      	movs	r3, #19
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	781b      	ldrb	r3, [r3, #0]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b006      	add	sp, #24
 8005a92:	bdb0      	pop	{r4, r5, r7, pc}
 8005a94:	00ffff3f 	.word	0x00ffff3f

08005a98 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <HAL_RTC_GetDate+0x98>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	221f      	movs	r2, #31
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	223f      	movs	r2, #63	; 0x3f
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	0b5b      	lsrs	r3, r3, #13
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2207      	movs	r2, #7
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11a      	bne.n	8005b24 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 fa70 	bl	8005fd8 <RTC_Bcd2ToByte>
 8005af8:	0003      	movs	r3, r0
 8005afa:	001a      	movs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fa67 	bl	8005fd8 <RTC_Bcd2ToByte>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	789b      	ldrb	r3, [r3, #2]
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 fa5e 	bl	8005fd8 <RTC_Bcd2ToByte>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	001a      	movs	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	0018      	movs	r0, r3
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b006      	add	sp, #24
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	00ffff3f 	.word	0x00ffff3f

08005b34 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2228      	movs	r2, #40	; 0x28
 8005b44:	5c9b      	ldrb	r3, [r3, r2]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_RTC_SetAlarm_IT+0x1a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e127      	b.n	8005d9e <HAL_RTC_SetAlarm_IT+0x26a>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2228      	movs	r2, #40	; 0x28
 8005b52:	2101      	movs	r1, #1
 8005b54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2229      	movs	r2, #41	; 0x29
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d136      	bne.n	8005bd2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d102      	bne.n	8005b76 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 fa04 	bl	8005f88 <RTC_ByteToBcd2>
 8005b80:	0003      	movs	r3, r0
 8005b82:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 f9fd 	bl	8005f88 <RTC_ByteToBcd2>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b92:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	789b      	ldrb	r3, [r3, #2]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 f9f5 	bl	8005f88 <RTC_ByteToBcd2>
 8005b9e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ba0:	0022      	movs	r2, r4
 8005ba2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005baa:	431a      	orrs	r2, r3
 8005bac:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	5c9b      	ldrb	r3, [r3, r2]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f9e7 	bl	8005f88 <RTC_ByteToBcd2>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bbe:	0022      	movs	r2, r4
 8005bc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005bc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e022      	b.n	8005c18 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d102      	bne.n	8005be4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005bf0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bf6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005bfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2120      	movs	r1, #32
 8005c04:	5c5b      	ldrb	r3, [r3, r1]
 8005c06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	22ca      	movs	r2, #202	; 0xca
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2253      	movs	r2, #83	; 0x53
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d14c      	bne.n	8005cda <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4957      	ldr	r1, [pc, #348]	; (8005da8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005c60:	f7fe f8ea 	bl	8003e38 <HAL_GetTick>
 8005c64:	0003      	movs	r3, r0
 8005c66:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c68:	e016      	b.n	8005c98 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c6a:	f7fe f8e5 	bl	8003e38 <HAL_GetTick>
 8005c6e:	0002      	movs	r2, r0
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	23fa      	movs	r3, #250	; 0xfa
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d90d      	bls.n	8005c98 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	22ff      	movs	r2, #255	; 0xff
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2229      	movs	r2, #41	; 0x29
 8005c88:	2103      	movs	r1, #3
 8005c8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2228      	movs	r2, #40	; 0x28
 8005c90:	2100      	movs	r1, #0
 8005c92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e082      	b.n	8005d9e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d0e2      	beq.n	8005c6a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	0049      	lsls	r1, r1, #1
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	0149      	lsls	r1, r1, #5
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]
 8005cd8:	e04b      	b.n	8005d72 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4931      	ldr	r1, [pc, #196]	; (8005dac <HAL_RTC_SetAlarm_IT+0x278>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005cfa:	f7fe f89d 	bl	8003e38 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d02:	e016      	b.n	8005d32 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d04:	f7fe f898 	bl	8003e38 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	23fa      	movs	r3, #250	; 0xfa
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d90d      	bls.n	8005d32 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	22ff      	movs	r2, #255	; 0xff
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2229      	movs	r2, #41	; 0x29
 8005d22:	2103      	movs	r1, #3
 8005d24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2228      	movs	r2, #40	; 0x28
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e035      	b.n	8005d9e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d0e2      	beq.n	8005d04 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	0089      	lsls	r1, r1, #2
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0189      	lsls	r1, r1, #6
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d72:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	58d3      	ldr	r3, [r2, r3]
 8005d78:	490d      	ldr	r1, [pc, #52]	; (8005db0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	0312      	lsls	r2, r2, #12
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	2280      	movs	r2, #128	; 0x80
 8005d82:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	22ff      	movs	r2, #255	; 0xff
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2229      	movs	r2, #41	; 0x29
 8005d90:	2101      	movs	r1, #1
 8005d92:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2228      	movs	r2, #40	; 0x28
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b009      	add	sp, #36	; 0x24
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	fffffeff 	.word	0xfffffeff
 8005dac:	fffffdff 	.word	0xfffffdff
 8005db0:	40021800 	.word	0x40021800

08005db4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	015b      	lsls	r3, r3, #5
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d011      	beq.n	8005dee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	430a      	orrs	r2, r1
 8005de4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fd fbf5 	bl	80035d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	019b      	lsls	r3, r3, #6
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d011      	beq.n	8005e20 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	2202      	movs	r2, #2
 8005e04:	4013      	ands	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2102      	movs	r1, #2
 8005e14:	430a      	orrs	r2, r1
 8005e16:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 f961 	bl	80060e2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2229      	movs	r2, #41	; 0x29
 8005e24:	2101      	movs	r1, #1
 8005e26:	5499      	strb	r1, [r3, r2]
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <HAL_RTC_WaitForSynchro+0x48>)
 8005e3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e40:	f7fd fffa 	bl	8003e38 <HAL_GetTick>
 8005e44:	0003      	movs	r3, r0
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e48:	e00a      	b.n	8005e60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e4a:	f7fd fff5 	bl	8003e38 <HAL_GetTick>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	23fa      	movs	r3, #250	; 0xfa
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d901      	bls.n	8005e60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d0ee      	beq.n	8005e4a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b004      	add	sp, #16
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	0001005f 	.word	0x0001005f

08005e7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005e84:	230f      	movs	r3, #15
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	4013      	ands	r3, r2
 8005e96:	d12c      	bne.n	8005ef2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ea8:	f7fd ffc6 	bl	8003e38 <HAL_GetTick>
 8005eac:	0003      	movs	r3, r0
 8005eae:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005eb0:	e014      	b.n	8005edc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005eb2:	f7fd ffc1 	bl	8003e38 <HAL_GetTick>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	200f      	movs	r0, #15
 8005ebe:	183b      	adds	r3, r7, r0
 8005ec0:	1839      	adds	r1, r7, r0
 8005ec2:	7809      	ldrb	r1, [r1, #0]
 8005ec4:	7019      	strb	r1, [r3, #0]
 8005ec6:	23fa      	movs	r3, #250	; 0xfa
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d906      	bls.n	8005edc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005ece:	183b      	adds	r3, r7, r0
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2229      	movs	r2, #41	; 0x29
 8005ed8:	2103      	movs	r1, #3
 8005eda:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2240      	movs	r2, #64	; 0x40
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d104      	bne.n	8005ef2 <RTC_EnterInitMode+0x76>
 8005ee8:	230f      	movs	r3, #15
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d1df      	bne.n	8005eb2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ef2:	230f      	movs	r3, #15
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	240f      	movs	r4, #15
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	438a      	bics	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2220      	movs	r2, #32
 8005f22:	4013      	ands	r3, r2
 8005f24:	d10d      	bne.n	8005f42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f7ff ff81 	bl	8005e30 <HAL_RTC_WaitForSynchro>
 8005f2e:	1e03      	subs	r3, r0, #0
 8005f30:	d021      	beq.n	8005f76 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2229      	movs	r2, #41	; 0x29
 8005f36:	2103      	movs	r1, #3
 8005f38:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e019      	b.n	8005f76 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f48:	2120      	movs	r1, #32
 8005f4a:	438a      	bics	r2, r1
 8005f4c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7ff ff6d 	bl	8005e30 <HAL_RTC_WaitForSynchro>
 8005f56:	1e03      	subs	r3, r0, #0
 8005f58:	d007      	beq.n	8005f6a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2229      	movs	r2, #41	; 0x29
 8005f5e:	2103      	movs	r1, #3
 8005f60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f62:	230f      	movs	r3, #15
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	2203      	movs	r2, #3
 8005f68:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <RTC_ExitInitMode+0x84>)
 8005f70:	2120      	movs	r1, #32
 8005f72:	430a      	orrs	r2, r1
 8005f74:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005f76:	230f      	movs	r3, #15
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
}
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b005      	add	sp, #20
 8005f82:	bd90      	pop	{r4, r7, pc}
 8005f84:	40002800 	.word	0x40002800

08005f88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	0002      	movs	r2, r0
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005f98:	230b      	movs	r3, #11
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	1dfa      	adds	r2, r7, #7
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005fa2:	e008      	b.n	8005fb6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005faa:	220b      	movs	r2, #11
 8005fac:	18bb      	adds	r3, r7, r2
 8005fae:	18ba      	adds	r2, r7, r2
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	3a0a      	subs	r2, #10
 8005fb4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005fb6:	210b      	movs	r1, #11
 8005fb8:	187b      	adds	r3, r7, r1
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d8f1      	bhi.n	8005fa4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b2db      	uxtb	r3, r3
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	0002      	movs	r2, r0
 8005fe0:	1dfb      	adds	r3, r7, #7
 8005fe2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005fe4:	1dfb      	adds	r3, r7, #7
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	001a      	movs	r2, r3
 8005fee:	0013      	movs	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	189b      	adds	r3, r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	210f      	movs	r1, #15
 8006002:	400b      	ands	r3, r1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	b2db      	uxtb	r3, r3
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2228      	movs	r2, #40	; 0x28
 800601e:	5c9b      	ldrb	r3, [r3, r2]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006024:	2302      	movs	r3, #2
 8006026:	e024      	b.n	8006072 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2228      	movs	r2, #40	; 0x28
 800602c:	2101      	movs	r1, #1
 800602e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2229      	movs	r2, #41	; 0x29
 8006034:	2102      	movs	r1, #2
 8006036:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	22ca      	movs	r2, #202	; 0xca
 800603e:	625a      	str	r2, [r3, #36]	; 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2253      	movs	r2, #83	; 0x53
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2120      	movs	r1, #32
 8006054:	430a      	orrs	r2, r1
 8006056:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22ff      	movs	r2, #255	; 0xff
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2229      	movs	r2, #41	; 0x29
 8006064:	2101      	movs	r1, #1
 8006066:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2228      	movs	r2, #40	; 0x28
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b002      	add	sp, #8
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2228      	movs	r2, #40	; 0x28
 8006086:	5c9b      	ldrb	r3, [r3, r2]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_RTCEx_DisableBypassShadow+0x16>
 800608c:	2302      	movs	r3, #2
 800608e:	e024      	b.n	80060da <HAL_RTCEx_DisableBypassShadow+0x60>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2228      	movs	r2, #40	; 0x28
 8006094:	2101      	movs	r1, #1
 8006096:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2229      	movs	r2, #41	; 0x29
 800609c:	2102      	movs	r1, #2
 800609e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	22ca      	movs	r2, #202	; 0xca
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2253      	movs	r2, #83	; 0x53
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	21df      	movs	r1, #223	; 0xdf
 80060bc:	400a      	ands	r2, r1
 80060be:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2229      	movs	r2, #41	; 0x29
 80060cc:	2101      	movs	r1, #1
 80060ce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2228      	movs	r2, #40	; 0x28
 80060d4:	2100      	movs	r1, #0
 80060d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	0018      	movs	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	b002      	add	sp, #8
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b002      	add	sp, #8
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e0a8      	b.n	8006258 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	2382      	movs	r3, #130	; 0x82
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	429a      	cmp	r2, r3
 8006118:	d009      	beq.n	800612e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	61da      	str	r2, [r3, #28]
 8006120:	e005      	b.n	800612e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	225d      	movs	r2, #93	; 0x5d
 8006138:	5c9b      	ldrb	r3, [r3, r2]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	225c      	movs	r2, #92	; 0x5c
 8006144:	2100      	movs	r1, #0
 8006146:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	0018      	movs	r0, r3
 800614c:	f7fd fad0 	bl	80036f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	225d      	movs	r2, #93	; 0x5d
 8006154:	2102      	movs	r1, #2
 8006156:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2140      	movs	r1, #64	; 0x40
 8006164:	438a      	bics	r2, r1
 8006166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	23e0      	movs	r3, #224	; 0xe0
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	429a      	cmp	r2, r3
 8006172:	d902      	bls.n	800617a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e002      	b.n	8006180 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	015b      	lsls	r3, r3, #5
 800617e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	23f0      	movs	r3, #240	; 0xf0
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	429a      	cmp	r2, r3
 800618a:	d008      	beq.n	800619e <HAL_SPI_Init+0xaa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	23e0      	movs	r3, #224	; 0xe0
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	429a      	cmp	r2, r3
 8006196:	d002      	beq.n	800619e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	2382      	movs	r3, #130	; 0x82
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	401a      	ands	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6899      	ldr	r1, [r3, #8]
 80061ac:	2384      	movs	r3, #132	; 0x84
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	400b      	ands	r3, r1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2102      	movs	r1, #2
 80061ba:	400b      	ands	r3, r1
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2101      	movs	r1, #1
 80061c4:	400b      	ands	r3, r1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6999      	ldr	r1, [r3, #24]
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	400b      	ands	r3, r1
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2138      	movs	r1, #56	; 0x38
 80061da:	400b      	ands	r3, r1
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	400b      	ands	r3, r1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	0011      	movs	r1, r2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	019b      	lsls	r3, r3, #6
 80061f2:	401a      	ands	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	2204      	movs	r2, #4
 8006204:	401a      	ands	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2110      	movs	r1, #16
 800620c:	400b      	ands	r3, r1
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	2108      	movs	r1, #8
 8006216:	400b      	ands	r3, r1
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	23f0      	movs	r3, #240	; 0xf0
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	400b      	ands	r3, r1
 8006224:	431a      	orrs	r2, r3
 8006226:	0011      	movs	r1, r2
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	015b      	lsls	r3, r3, #5
 800622e:	401a      	ands	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4907      	ldr	r1, [pc, #28]	; (8006260 <HAL_SPI_Init+0x16c>)
 8006244:	400a      	ands	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	225d      	movs	r2, #93	; 0x5d
 8006252:	2101      	movs	r1, #1
 8006254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	b004      	add	sp, #16
 800625e:	bd80      	pop	{r7, pc}
 8006260:	fffff7ff 	.word	0xfffff7ff

08006264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e04a      	b.n	800630c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	223d      	movs	r2, #61	; 0x3d
 800627a:	5c9b      	ldrb	r3, [r3, r2]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	223c      	movs	r2, #60	; 0x3c
 8006286:	2100      	movs	r1, #0
 8006288:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0018      	movs	r0, r3
 800628e:	f7fd fa79 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	223d      	movs	r2, #61	; 0x3d
 8006296:	2102      	movs	r1, #2
 8006298:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	0019      	movs	r1, r3
 80062a4:	0010      	movs	r0, r2
 80062a6:	f000 f9ed 	bl	8006684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2248      	movs	r2, #72	; 0x48
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	223e      	movs	r2, #62	; 0x3e
 80062b6:	2101      	movs	r1, #1
 80062b8:	5499      	strb	r1, [r3, r2]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	223f      	movs	r2, #63	; 0x3f
 80062be:	2101      	movs	r1, #1
 80062c0:	5499      	strb	r1, [r3, r2]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2240      	movs	r2, #64	; 0x40
 80062c6:	2101      	movs	r1, #1
 80062c8:	5499      	strb	r1, [r3, r2]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2241      	movs	r2, #65	; 0x41
 80062ce:	2101      	movs	r1, #1
 80062d0:	5499      	strb	r1, [r3, r2]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2242      	movs	r2, #66	; 0x42
 80062d6:	2101      	movs	r1, #1
 80062d8:	5499      	strb	r1, [r3, r2]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2243      	movs	r2, #67	; 0x43
 80062de:	2101      	movs	r1, #1
 80062e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2244      	movs	r2, #68	; 0x44
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2245      	movs	r2, #69	; 0x45
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2246      	movs	r2, #70	; 0x46
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2247      	movs	r2, #71	; 0x47
 80062fe:	2101      	movs	r1, #1
 8006300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	223d      	movs	r2, #61	; 0x3d
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b002      	add	sp, #8
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	223d      	movs	r2, #61	; 0x3d
 8006320:	5c9b      	ldrb	r3, [r3, r2]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e047      	b.n	80063bc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	223d      	movs	r2, #61	; 0x3d
 8006330:	2102      	movs	r1, #2
 8006332:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	430a      	orrs	r2, r1
 8006342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d014      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x64>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	05db      	lsls	r3, r3, #23
 8006356:	429a      	cmp	r2, r3
 8006358:	d00e      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x64>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1a      	ldr	r2, [pc, #104]	; (80063c8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x64>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_TIM_Base_Start_IT+0xb8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x64>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d116      	bne.n	80063a6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b06      	cmp	r3, #6
 8006388:	d016      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0xa4>
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	025b      	lsls	r3, r3, #9
 8006390:	429a      	cmp	r2, r3
 8006392:	d011      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2101      	movs	r1, #1
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	e008      	b.n	80063b8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e000      	b.n	80063ba <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	0018      	movs	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	b004      	add	sp, #16
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40014000 	.word	0x40014000
 80063d4:	00010007 	.word	0x00010007

080063d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	4a0d      	ldr	r2, [pc, #52]	; (800642c <HAL_TIM_Base_Stop_IT+0x54>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	d10d      	bne.n	8006418 <HAL_TIM_Base_Stop_IT+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	4a0b      	ldr	r2, [pc, #44]	; (8006430 <HAL_TIM_Base_Stop_IT+0x58>)
 8006404:	4013      	ands	r3, r2
 8006406:	d107      	bne.n	8006418 <HAL_TIM_Base_Stop_IT+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2101      	movs	r1, #1
 8006414:	438a      	bics	r2, r1
 8006416:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	223d      	movs	r2, #61	; 0x3d
 800641c:	2101      	movs	r1, #1
 800641e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	0018      	movs	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	b002      	add	sp, #8
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	00001111 	.word	0x00001111
 8006430:	00000444 	.word	0x00000444

08006434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2202      	movs	r2, #2
 8006450:	4013      	ands	r3, r2
 8006452:	d021      	beq.n	8006498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2202      	movs	r2, #2
 8006458:	4013      	ands	r3, r2
 800645a:	d01d      	beq.n	8006498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2203      	movs	r2, #3
 8006462:	4252      	negs	r2, r2
 8006464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2203      	movs	r2, #3
 8006474:	4013      	ands	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	0018      	movs	r0, r3
 800647c:	f000 f8ea 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8006480:	e007      	b.n	8006492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f8dd 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	0018      	movs	r0, r3
 800648e:	f000 f8e9 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2204      	movs	r2, #4
 800649c:	4013      	ands	r3, r2
 800649e:	d022      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2204      	movs	r2, #4
 80064a4:	4013      	ands	r3, r2
 80064a6:	d01e      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2205      	movs	r2, #5
 80064ae:	4252      	negs	r2, r2
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	23c0      	movs	r3, #192	; 0xc0
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4013      	ands	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 f8c3 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 80064ce:	e007      	b.n	80064e0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f8b6 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 f8c2 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2208      	movs	r2, #8
 80064ea:	4013      	ands	r3, r2
 80064ec:	d021      	beq.n	8006532 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2208      	movs	r2, #8
 80064f2:	4013      	ands	r3, r2
 80064f4:	d01d      	beq.n	8006532 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2209      	movs	r2, #9
 80064fc:	4252      	negs	r2, r2
 80064fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2204      	movs	r2, #4
 8006504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	2203      	movs	r2, #3
 800650e:	4013      	ands	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0018      	movs	r0, r3
 8006516:	f000 f89d 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 800651a:	e007      	b.n	800652c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f000 f890 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	0018      	movs	r0, r3
 8006528:	f000 f89c 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2210      	movs	r2, #16
 8006536:	4013      	ands	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	d01e      	beq.n	8006580 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2211      	movs	r2, #17
 8006548:	4252      	negs	r2, r2
 800654a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2208      	movs	r2, #8
 8006550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	23c0      	movs	r3, #192	; 0xc0
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4013      	ands	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	0018      	movs	r0, r3
 8006564:	f000 f876 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8006568:	e007      	b.n	800657a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	0018      	movs	r0, r3
 800656e:	f000 f869 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0018      	movs	r0, r3
 8006576:	f000 f875 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2201      	movs	r2, #1
 8006584:	4013      	ands	r3, r2
 8006586:	d00c      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	4013      	ands	r3, r2
 800658e:	d008      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2202      	movs	r2, #2
 8006596:	4252      	negs	r2, r2
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0018      	movs	r0, r3
 800659e:	f7fc ffe1 	bl	8003564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2280      	movs	r2, #128	; 0x80
 80065a6:	4013      	ands	r3, r2
 80065a8:	d104      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	019b      	lsls	r3, r3, #6
 80065b0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065b2:	d00b      	beq.n	80065cc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2280      	movs	r2, #128	; 0x80
 80065b8:	4013      	ands	r3, r2
 80065ba:	d007      	beq.n	80065cc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_TIM_IRQHandler+0x208>)
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f972 	bl	80068b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	2380      	movs	r3, #128	; 0x80
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4013      	ands	r3, r2
 80065d4:	d00b      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	4013      	ands	r3, r2
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a17      	ldr	r2, [pc, #92]	; (8006640 <HAL_TIM_IRQHandler+0x20c>)
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f969 	bl	80068c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	4013      	ands	r3, r2
 80065f4:	d00c      	beq.n	8006610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2240      	movs	r2, #64	; 0x40
 80065fa:	4013      	ands	r3, r2
 80065fc:	d008      	beq.n	8006610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2241      	movs	r2, #65	; 0x41
 8006604:	4252      	negs	r2, r2
 8006606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	0018      	movs	r0, r3
 800660c:	f000 f832 	bl	8006674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2220      	movs	r2, #32
 8006614:	4013      	ands	r3, r2
 8006616:	d00c      	beq.n	8006632 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	4013      	ands	r3, r2
 800661e:	d008      	beq.n	8006632 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2221      	movs	r2, #33	; 0x21
 8006626:	4252      	negs	r2, r2
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0018      	movs	r0, r3
 800662e:	f000 f937 	bl	80068a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b004      	add	sp, #16
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	ffffdf7f 	.word	0xffffdf7f
 8006640:	fffffeff 	.word	0xfffffeff

08006644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b002      	add	sp, #8
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b002      	add	sp, #8
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b002      	add	sp, #8
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	46bd      	mov	sp, r7
 8006680:	b002      	add	sp, #8
 8006682:	bd80      	pop	{r7, pc}

08006684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3f      	ldr	r2, [pc, #252]	; (8006794 <TIM_Base_SetConfig+0x110>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00c      	beq.n	80066b6 <TIM_Base_SetConfig+0x32>
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	05db      	lsls	r3, r3, #23
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d007      	beq.n	80066b6 <TIM_Base_SetConfig+0x32>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <TIM_Base_SetConfig+0x114>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_Base_SetConfig+0x32>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a3a      	ldr	r2, [pc, #232]	; (800679c <TIM_Base_SetConfig+0x118>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d108      	bne.n	80066c8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2270      	movs	r2, #112	; 0x70
 80066ba:	4393      	bics	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a32      	ldr	r2, [pc, #200]	; (8006794 <TIM_Base_SetConfig+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01c      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	05db      	lsls	r3, r3, #23
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d017      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <TIM_Base_SetConfig+0x114>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2d      	ldr	r2, [pc, #180]	; (800679c <TIM_Base_SetConfig+0x118>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00f      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <TIM_Base_SetConfig+0x11c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00b      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a2b      	ldr	r2, [pc, #172]	; (80067a4 <TIM_Base_SetConfig+0x120>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a2a      	ldr	r2, [pc, #168]	; (80067a8 <TIM_Base_SetConfig+0x124>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <TIM_Base_SetConfig+0x86>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a29      	ldr	r2, [pc, #164]	; (80067ac <TIM_Base_SetConfig+0x128>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d108      	bne.n	800671c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a28      	ldr	r2, [pc, #160]	; (80067b0 <TIM_Base_SetConfig+0x12c>)
 800670e:	4013      	ands	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2280      	movs	r2, #128	; 0x80
 8006720:	4393      	bics	r3, r2
 8006722:	001a      	movs	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <TIM_Base_SetConfig+0x110>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_Base_SetConfig+0xde>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <TIM_Base_SetConfig+0x120>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <TIM_Base_SetConfig+0xde>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <TIM_Base_SetConfig+0x124>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_Base_SetConfig+0xde>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <TIM_Base_SetConfig+0x128>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d103      	bne.n	800676a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2201      	movs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2201      	movs	r2, #1
 8006782:	4393      	bics	r3, r2
 8006784:	001a      	movs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	611a      	str	r2, [r3, #16]
  }
}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	b004      	add	sp, #16
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40002000 	.word	0x40002000
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800
 80067b0:	fffffcff 	.word	0xfffffcff

080067b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	223c      	movs	r2, #60	; 0x3c
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e05a      	b.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	223c      	movs	r2, #60	; 0x3c
 80067d0:	2101      	movs	r1, #1
 80067d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	223d      	movs	r2, #61	; 0x3d
 80067d8:	2102      	movs	r1, #2
 80067da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a26      	ldr	r2, [pc, #152]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4a25      	ldr	r2, [pc, #148]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2270      	movs	r2, #112	; 0x70
 800680c:	4393      	bics	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d014      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	05db      	lsls	r3, r3, #23
 8006834:	429a      	cmp	r2, r3
 8006836:	d00e      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a15      	ldr	r2, [pc, #84]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a14      	ldr	r2, [pc, #80]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10c      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	4393      	bics	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	223d      	movs	r2, #61	; 0x3d
 8006874:	2101      	movs	r1, #1
 8006876:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	223c      	movs	r2, #60	; 0x3c
 800687c:	2100      	movs	r1, #0
 800687e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	b004      	add	sp, #16
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	40012c00 	.word	0x40012c00
 8006890:	ff0fffff 	.word	0xff0fffff
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40014000 	.word	0x40014000

080068a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a8:	46c0      	nop			; (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e046      	b.n	8006970 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2288      	movs	r2, #136	; 0x88
 80068e6:	589b      	ldr	r3, [r3, r2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d107      	bne.n	80068fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2284      	movs	r2, #132	; 0x84
 80068f0:	2100      	movs	r1, #0
 80068f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7fc ff6a 	bl	80037d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2288      	movs	r2, #136	; 0x88
 8006900:	2124      	movs	r1, #36	; 0x24
 8006902:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2101      	movs	r1, #1
 8006910:	438a      	bics	r2, r1
 8006912:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 fd4c 	bl	80073bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 f9f2 	bl	8006d10 <UART_SetConfig>
 800692c:	0003      	movs	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e01c      	b.n	8006970 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	490d      	ldr	r1, [pc, #52]	; (8006978 <HAL_UART_Init+0xa8>)
 8006942:	400a      	ands	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	212a      	movs	r1, #42	; 0x2a
 8006952:	438a      	bics	r2, r1
 8006954:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2101      	movs	r1, #1
 8006962:	430a      	orrs	r2, r1
 8006964:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 fddb 	bl	8007524 <UART_CheckIdleState>
 800696e:	0003      	movs	r3, r0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b002      	add	sp, #8
 8006976:	bd80      	pop	{r7, pc}
 8006978:	ffffb7ff 	.word	0xffffb7ff

0800697c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e032      	b.n	80069f4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2288      	movs	r2, #136	; 0x88
 8006992:	2124      	movs	r1, #36	; 0x24
 8006994:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2101      	movs	r1, #1
 80069a2:	438a      	bics	r2, r1
 80069a4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fd f831 	bl	8003a28 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2290      	movs	r2, #144	; 0x90
 80069ca:	2100      	movs	r1, #0
 80069cc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2288      	movs	r2, #136	; 0x88
 80069d2:	2100      	movs	r1, #0
 80069d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	228c      	movs	r2, #140	; 0x8c
 80069da:	2100      	movs	r1, #0
 80069dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2284      	movs	r2, #132	; 0x84
 80069ee:	2100      	movs	r1, #0
 80069f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	1dbb      	adds	r3, r7, #6
 8006a0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2288      	movs	r2, #136	; 0x88
 8006a10:	589b      	ldr	r3, [r3, r2]
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d000      	beq.n	8006a18 <HAL_UART_Transmit+0x1c>
 8006a16:	e090      	b.n	8006b3a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_UART_Transmit+0x2a>
 8006a1e:	1dbb      	adds	r3, r7, #6
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e088      	b.n	8006b3c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	015b      	lsls	r3, r3, #5
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d109      	bne.n	8006a4a <HAL_UART_Transmit+0x4e>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2201      	movs	r2, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d001      	beq.n	8006a4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e078      	b.n	8006b3c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2290      	movs	r2, #144	; 0x90
 8006a4e:	2100      	movs	r1, #0
 8006a50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2288      	movs	r2, #136	; 0x88
 8006a56:	2121      	movs	r1, #33	; 0x21
 8006a58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a5a:	f7fd f9ed 	bl	8003e38 <HAL_GetTick>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1dba      	adds	r2, r7, #6
 8006a66:	2154      	movs	r1, #84	; 0x54
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	1dba      	adds	r2, r7, #6
 8006a70:	2156      	movs	r1, #86	; 0x56
 8006a72:	8812      	ldrh	r2, [r2, #0]
 8006a74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	015b      	lsls	r3, r3, #5
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d108      	bne.n	8006a94 <HAL_UART_Transmit+0x98>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e003      	b.n	8006a9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a9c:	e030      	b.n	8006b00 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0013      	movs	r3, r2
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	f000 fde4 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 8006ab0:	1e03      	subs	r3, r0, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2288      	movs	r2, #136	; 0x88
 8006ab8:	2120      	movs	r1, #32
 8006aba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e03d      	b.n	8006b3c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	001a      	movs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	05d2      	lsls	r2, r2, #23
 8006ad2:	0dd2      	lsrs	r2, r2, #23
 8006ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	3302      	adds	r3, #2
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e007      	b.n	8006aee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2256      	movs	r2, #86	; 0x56
 8006af2:	5a9b      	ldrh	r3, [r3, r2]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b299      	uxth	r1, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2256      	movs	r2, #86	; 0x56
 8006afe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2256      	movs	r2, #86	; 0x56
 8006b04:	5a9b      	ldrh	r3, [r3, r2]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1c8      	bne.n	8006a9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	0013      	movs	r3, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	2140      	movs	r1, #64	; 0x40
 8006b1a:	f000 fdad 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2288      	movs	r2, #136	; 0x88
 8006b26:	2120      	movs	r1, #32
 8006b28:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e006      	b.n	8006b3c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2288      	movs	r2, #136	; 0x88
 8006b32:	2120      	movs	r1, #32
 8006b34:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e000      	b.n	8006b3c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
  }
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b008      	add	sp, #32
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	; 0x28
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	1dbb      	adds	r3, r7, #6
 8006b52:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	228c      	movs	r2, #140	; 0x8c
 8006b58:	589b      	ldr	r3, [r3, r2]
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d000      	beq.n	8006b60 <HAL_UART_Receive+0x1c>
 8006b5e:	e0d0      	b.n	8006d02 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_UART_Receive+0x2a>
 8006b66:	1dbb      	adds	r3, r7, #6
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0c8      	b.n	8006d04 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	2380      	movs	r3, #128	; 0x80
 8006b78:	015b      	lsls	r3, r3, #5
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d109      	bne.n	8006b92 <HAL_UART_Receive+0x4e>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d001      	beq.n	8006b92 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e0b8      	b.n	8006d04 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2290      	movs	r2, #144	; 0x90
 8006b96:	2100      	movs	r1, #0
 8006b98:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	228c      	movs	r2, #140	; 0x8c
 8006b9e:	2122      	movs	r1, #34	; 0x22
 8006ba0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ba8:	f7fd f946 	bl	8003e38 <HAL_GetTick>
 8006bac:	0003      	movs	r3, r0
 8006bae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1dba      	adds	r2, r7, #6
 8006bb4:	215c      	movs	r1, #92	; 0x5c
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1dba      	adds	r2, r7, #6
 8006bbe:	215e      	movs	r1, #94	; 0x5e
 8006bc0:	8812      	ldrh	r2, [r2, #0]
 8006bc2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	015b      	lsls	r3, r3, #5
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d10d      	bne.n	8006bec <HAL_UART_Receive+0xa8>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_UART_Receive+0x9e>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2260      	movs	r2, #96	; 0x60
 8006bdc:	494b      	ldr	r1, [pc, #300]	; (8006d0c <HAL_UART_Receive+0x1c8>)
 8006bde:	5299      	strh	r1, [r3, r2]
 8006be0:	e02e      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2260      	movs	r2, #96	; 0x60
 8006be6:	21ff      	movs	r1, #255	; 0xff
 8006be8:	5299      	strh	r1, [r3, r2]
 8006bea:	e029      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <HAL_UART_Receive+0xcc>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_UART_Receive+0xc2>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2260      	movs	r2, #96	; 0x60
 8006c00:	21ff      	movs	r1, #255	; 0xff
 8006c02:	5299      	strh	r1, [r3, r2]
 8006c04:	e01c      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2260      	movs	r2, #96	; 0x60
 8006c0a:	217f      	movs	r1, #127	; 0x7f
 8006c0c:	5299      	strh	r1, [r3, r2]
 8006c0e:	e017      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	055b      	lsls	r3, r3, #21
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d10d      	bne.n	8006c38 <HAL_UART_Receive+0xf4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <HAL_UART_Receive+0xea>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2260      	movs	r2, #96	; 0x60
 8006c28:	217f      	movs	r1, #127	; 0x7f
 8006c2a:	5299      	strh	r1, [r3, r2]
 8006c2c:	e008      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2260      	movs	r2, #96	; 0x60
 8006c32:	213f      	movs	r1, #63	; 0x3f
 8006c34:	5299      	strh	r1, [r3, r2]
 8006c36:	e003      	b.n	8006c40 <HAL_UART_Receive+0xfc>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2260      	movs	r2, #96	; 0x60
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006c40:	2312      	movs	r3, #18
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	2160      	movs	r1, #96	; 0x60
 8006c48:	5a52      	ldrh	r2, [r2, r1]
 8006c4a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	015b      	lsls	r3, r3, #5
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d108      	bne.n	8006c6a <HAL_UART_Receive+0x126>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e003      	b.n	8006c72 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c72:	e03a      	b.n	8006cea <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	0013      	movs	r3, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2120      	movs	r1, #32
 8006c82:	f000 fcf9 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	228c      	movs	r2, #140	; 0x8c
 8006c8e:	2120      	movs	r1, #32
 8006c90:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e036      	b.n	8006d04 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10e      	bne.n	8006cba <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2212      	movs	r2, #18
 8006ca6:	18ba      	adds	r2, r7, r2
 8006ca8:	8812      	ldrh	r2, [r2, #0]
 8006caa:	4013      	ands	r3, r2
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e00e      	b.n	8006cd8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2212      	movs	r2, #18
 8006cc4:	18ba      	adds	r2, r7, r2
 8006cc6:	8812      	ldrh	r2, [r2, #0]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	4013      	ands	r3, r2
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	225e      	movs	r2, #94	; 0x5e
 8006cdc:	5a9b      	ldrh	r3, [r3, r2]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b299      	uxth	r1, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	225e      	movs	r2, #94	; 0x5e
 8006ce8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	225e      	movs	r2, #94	; 0x5e
 8006cee:	5a9b      	ldrh	r3, [r3, r2]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1be      	bne.n	8006c74 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	228c      	movs	r2, #140	; 0x8c
 8006cfa:	2120      	movs	r1, #32
 8006cfc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e000      	b.n	8006d04 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
  }
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b008      	add	sp, #32
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	000001ff 	.word	0x000001ff

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b5b0      	push	{r4, r5, r7, lr}
 8006d12:	b090      	sub	sp, #64	; 0x40
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d18:	231a      	movs	r3, #26
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	19db      	adds	r3, r3, r7
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4ac1      	ldr	r2, [pc, #772]	; (8007048 <UART_SetConfig+0x338>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	0019      	movs	r1, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4abc      	ldr	r2, [pc, #752]	; (800704c <UART_SetConfig+0x33c>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	68d9      	ldr	r1, [r3, #12]
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	0003      	movs	r3, r0
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4ab6      	ldr	r2, [pc, #728]	; (8007050 <UART_SetConfig+0x340>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <UART_SetConfig+0x80>
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4ab4      	ldr	r2, [pc, #720]	; (8007054 <UART_SetConfig+0x344>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4ab0      	ldr	r2, [pc, #704]	; (8007058 <UART_SetConfig+0x348>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	220f      	movs	r2, #15
 8006dae:	4393      	bics	r3, r2
 8006db0:	0018      	movs	r0, r3
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	0003      	movs	r3, r0
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4aa5      	ldr	r2, [pc, #660]	; (800705c <UART_SetConfig+0x34c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d131      	bne.n	8006e2e <UART_SetConfig+0x11e>
 8006dca:	4ba5      	ldr	r3, [pc, #660]	; (8007060 <UART_SetConfig+0x350>)
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	2203      	movs	r2, #3
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d01d      	beq.n	8006e12 <UART_SetConfig+0x102>
 8006dd6:	d823      	bhi.n	8006e20 <UART_SetConfig+0x110>
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d00c      	beq.n	8006df6 <UART_SetConfig+0xe6>
 8006ddc:	d820      	bhi.n	8006e20 <UART_SetConfig+0x110>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <UART_SetConfig+0xd8>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d00e      	beq.n	8006e04 <UART_SetConfig+0xf4>
 8006de6:	e01b      	b.n	8006e20 <UART_SetConfig+0x110>
 8006de8:	231b      	movs	r3, #27
 8006dea:	2220      	movs	r2, #32
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	19db      	adds	r3, r3, r7
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	e154      	b.n	80070a0 <UART_SetConfig+0x390>
 8006df6:	231b      	movs	r3, #27
 8006df8:	2220      	movs	r2, #32
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	19db      	adds	r3, r3, r7
 8006dfe:	2202      	movs	r2, #2
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e14d      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e04:	231b      	movs	r3, #27
 8006e06:	2220      	movs	r2, #32
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	19db      	adds	r3, r3, r7
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e146      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e12:	231b      	movs	r3, #27
 8006e14:	2220      	movs	r2, #32
 8006e16:	189b      	adds	r3, r3, r2
 8006e18:	19db      	adds	r3, r3, r7
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e13f      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e20:	231b      	movs	r3, #27
 8006e22:	2220      	movs	r2, #32
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	19db      	adds	r3, r3, r7
 8006e28:	2210      	movs	r2, #16
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e138      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a8c      	ldr	r2, [pc, #560]	; (8007064 <UART_SetConfig+0x354>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d131      	bne.n	8006e9c <UART_SetConfig+0x18c>
 8006e38:	4b89      	ldr	r3, [pc, #548]	; (8007060 <UART_SetConfig+0x350>)
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	220c      	movs	r2, #12
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	d01d      	beq.n	8006e80 <UART_SetConfig+0x170>
 8006e44:	d823      	bhi.n	8006e8e <UART_SetConfig+0x17e>
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d00c      	beq.n	8006e64 <UART_SetConfig+0x154>
 8006e4a:	d820      	bhi.n	8006e8e <UART_SetConfig+0x17e>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <UART_SetConfig+0x146>
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d00e      	beq.n	8006e72 <UART_SetConfig+0x162>
 8006e54:	e01b      	b.n	8006e8e <UART_SetConfig+0x17e>
 8006e56:	231b      	movs	r3, #27
 8006e58:	2220      	movs	r2, #32
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	19db      	adds	r3, r3, r7
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	e11d      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e64:	231b      	movs	r3, #27
 8006e66:	2220      	movs	r2, #32
 8006e68:	189b      	adds	r3, r3, r2
 8006e6a:	19db      	adds	r3, r3, r7
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e116      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e72:	231b      	movs	r3, #27
 8006e74:	2220      	movs	r2, #32
 8006e76:	189b      	adds	r3, r3, r2
 8006e78:	19db      	adds	r3, r3, r7
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	e10f      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e80:	231b      	movs	r3, #27
 8006e82:	2220      	movs	r2, #32
 8006e84:	189b      	adds	r3, r3, r2
 8006e86:	19db      	adds	r3, r3, r7
 8006e88:	2208      	movs	r2, #8
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e108      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e8e:	231b      	movs	r3, #27
 8006e90:	2220      	movs	r2, #32
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	19db      	adds	r3, r3, r7
 8006e96:	2210      	movs	r2, #16
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	e101      	b.n	80070a0 <UART_SetConfig+0x390>
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a71      	ldr	r2, [pc, #452]	; (8007068 <UART_SetConfig+0x358>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d131      	bne.n	8006f0a <UART_SetConfig+0x1fa>
 8006ea6:	4b6e      	ldr	r3, [pc, #440]	; (8007060 <UART_SetConfig+0x350>)
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	2230      	movs	r2, #48	; 0x30
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b30      	cmp	r3, #48	; 0x30
 8006eb0:	d01d      	beq.n	8006eee <UART_SetConfig+0x1de>
 8006eb2:	d823      	bhi.n	8006efc <UART_SetConfig+0x1ec>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d00c      	beq.n	8006ed2 <UART_SetConfig+0x1c2>
 8006eb8:	d820      	bhi.n	8006efc <UART_SetConfig+0x1ec>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <UART_SetConfig+0x1b4>
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d00e      	beq.n	8006ee0 <UART_SetConfig+0x1d0>
 8006ec2:	e01b      	b.n	8006efc <UART_SetConfig+0x1ec>
 8006ec4:	231b      	movs	r3, #27
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	189b      	adds	r3, r3, r2
 8006eca:	19db      	adds	r3, r3, r7
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e0e6      	b.n	80070a0 <UART_SetConfig+0x390>
 8006ed2:	231b      	movs	r3, #27
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	19db      	adds	r3, r3, r7
 8006eda:	2202      	movs	r2, #2
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	e0df      	b.n	80070a0 <UART_SetConfig+0x390>
 8006ee0:	231b      	movs	r3, #27
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	189b      	adds	r3, r3, r2
 8006ee6:	19db      	adds	r3, r3, r7
 8006ee8:	2204      	movs	r2, #4
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e0d8      	b.n	80070a0 <UART_SetConfig+0x390>
 8006eee:	231b      	movs	r3, #27
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	19db      	adds	r3, r3, r7
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e0d1      	b.n	80070a0 <UART_SetConfig+0x390>
 8006efc:	231b      	movs	r3, #27
 8006efe:	2220      	movs	r2, #32
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	2210      	movs	r2, #16
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e0ca      	b.n	80070a0 <UART_SetConfig+0x390>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a57      	ldr	r2, [pc, #348]	; (800706c <UART_SetConfig+0x35c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d106      	bne.n	8006f22 <UART_SetConfig+0x212>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2220      	movs	r2, #32
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e0be      	b.n	80070a0 <UART_SetConfig+0x390>
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a52      	ldr	r2, [pc, #328]	; (8007070 <UART_SetConfig+0x360>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d106      	bne.n	8006f3a <UART_SetConfig+0x22a>
 8006f2c:	231b      	movs	r3, #27
 8006f2e:	2220      	movs	r2, #32
 8006f30:	189b      	adds	r3, r3, r2
 8006f32:	19db      	adds	r3, r3, r7
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e0b2      	b.n	80070a0 <UART_SetConfig+0x390>
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a4d      	ldr	r2, [pc, #308]	; (8007074 <UART_SetConfig+0x364>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d106      	bne.n	8006f52 <UART_SetConfig+0x242>
 8006f44:	231b      	movs	r3, #27
 8006f46:	2220      	movs	r2, #32
 8006f48:	189b      	adds	r3, r3, r2
 8006f4a:	19db      	adds	r3, r3, r7
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	e0a6      	b.n	80070a0 <UART_SetConfig+0x390>
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <UART_SetConfig+0x340>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d13e      	bne.n	8006fda <UART_SetConfig+0x2ca>
 8006f5c:	4b40      	ldr	r3, [pc, #256]	; (8007060 <UART_SetConfig+0x350>)
 8006f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f60:	23c0      	movs	r3, #192	; 0xc0
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	4013      	ands	r3, r2
 8006f66:	22c0      	movs	r2, #192	; 0xc0
 8006f68:	0112      	lsls	r2, r2, #4
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d027      	beq.n	8006fbe <UART_SetConfig+0x2ae>
 8006f6e:	22c0      	movs	r2, #192	; 0xc0
 8006f70:	0112      	lsls	r2, r2, #4
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d82a      	bhi.n	8006fcc <UART_SetConfig+0x2bc>
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	0112      	lsls	r2, r2, #4
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d011      	beq.n	8006fa2 <UART_SetConfig+0x292>
 8006f7e:	2280      	movs	r2, #128	; 0x80
 8006f80:	0112      	lsls	r2, r2, #4
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d822      	bhi.n	8006fcc <UART_SetConfig+0x2bc>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <UART_SetConfig+0x284>
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	00d2      	lsls	r2, r2, #3
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <UART_SetConfig+0x2a0>
 8006f92:	e01b      	b.n	8006fcc <UART_SetConfig+0x2bc>
 8006f94:	231b      	movs	r3, #27
 8006f96:	2220      	movs	r2, #32
 8006f98:	189b      	adds	r3, r3, r2
 8006f9a:	19db      	adds	r3, r3, r7
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e07e      	b.n	80070a0 <UART_SetConfig+0x390>
 8006fa2:	231b      	movs	r3, #27
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	19db      	adds	r3, r3, r7
 8006faa:	2202      	movs	r2, #2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e077      	b.n	80070a0 <UART_SetConfig+0x390>
 8006fb0:	231b      	movs	r3, #27
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	189b      	adds	r3, r3, r2
 8006fb6:	19db      	adds	r3, r3, r7
 8006fb8:	2204      	movs	r2, #4
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e070      	b.n	80070a0 <UART_SetConfig+0x390>
 8006fbe:	231b      	movs	r3, #27
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	19db      	adds	r3, r3, r7
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e069      	b.n	80070a0 <UART_SetConfig+0x390>
 8006fcc:	231b      	movs	r3, #27
 8006fce:	2220      	movs	r2, #32
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	19db      	adds	r3, r3, r7
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e062      	b.n	80070a0 <UART_SetConfig+0x390>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <UART_SetConfig+0x344>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d157      	bne.n	8007094 <UART_SetConfig+0x384>
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <UART_SetConfig+0x350>)
 8006fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe8:	23c0      	movs	r3, #192	; 0xc0
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4013      	ands	r3, r2
 8006fee:	22c0      	movs	r2, #192	; 0xc0
 8006ff0:	0092      	lsls	r2, r2, #2
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d040      	beq.n	8007078 <UART_SetConfig+0x368>
 8006ff6:	22c0      	movs	r2, #192	; 0xc0
 8006ff8:	0092      	lsls	r2, r2, #2
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d843      	bhi.n	8007086 <UART_SetConfig+0x376>
 8006ffe:	2280      	movs	r2, #128	; 0x80
 8007000:	0092      	lsls	r2, r2, #2
 8007002:	4293      	cmp	r3, r2
 8007004:	d011      	beq.n	800702a <UART_SetConfig+0x31a>
 8007006:	2280      	movs	r2, #128	; 0x80
 8007008:	0092      	lsls	r2, r2, #2
 800700a:	4293      	cmp	r3, r2
 800700c:	d83b      	bhi.n	8007086 <UART_SetConfig+0x376>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <UART_SetConfig+0x30c>
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	0052      	lsls	r2, r2, #1
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <UART_SetConfig+0x328>
 800701a:	e034      	b.n	8007086 <UART_SetConfig+0x376>
 800701c:	231b      	movs	r3, #27
 800701e:	2220      	movs	r2, #32
 8007020:	189b      	adds	r3, r3, r2
 8007022:	19db      	adds	r3, r3, r7
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e03a      	b.n	80070a0 <UART_SetConfig+0x390>
 800702a:	231b      	movs	r3, #27
 800702c:	2220      	movs	r2, #32
 800702e:	189b      	adds	r3, r3, r2
 8007030:	19db      	adds	r3, r3, r7
 8007032:	2202      	movs	r2, #2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e033      	b.n	80070a0 <UART_SetConfig+0x390>
 8007038:	231b      	movs	r3, #27
 800703a:	2220      	movs	r2, #32
 800703c:	189b      	adds	r3, r3, r2
 800703e:	19db      	adds	r3, r3, r7
 8007040:	2204      	movs	r2, #4
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e02c      	b.n	80070a0 <UART_SetConfig+0x390>
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	cfff69f3 	.word	0xcfff69f3
 800704c:	ffffcfff 	.word	0xffffcfff
 8007050:	40008000 	.word	0x40008000
 8007054:	40008400 	.word	0x40008400
 8007058:	11fff4ff 	.word	0x11fff4ff
 800705c:	40013800 	.word	0x40013800
 8007060:	40021000 	.word	0x40021000
 8007064:	40004400 	.word	0x40004400
 8007068:	40004800 	.word	0x40004800
 800706c:	40004c00 	.word	0x40004c00
 8007070:	40005000 	.word	0x40005000
 8007074:	40013c00 	.word	0x40013c00
 8007078:	231b      	movs	r3, #27
 800707a:	2220      	movs	r2, #32
 800707c:	189b      	adds	r3, r3, r2
 800707e:	19db      	adds	r3, r3, r7
 8007080:	2208      	movs	r2, #8
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e00c      	b.n	80070a0 <UART_SetConfig+0x390>
 8007086:	231b      	movs	r3, #27
 8007088:	2220      	movs	r2, #32
 800708a:	189b      	adds	r3, r3, r2
 800708c:	19db      	adds	r3, r3, r7
 800708e:	2210      	movs	r2, #16
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e005      	b.n	80070a0 <UART_SetConfig+0x390>
 8007094:	231b      	movs	r3, #27
 8007096:	2220      	movs	r2, #32
 8007098:	189b      	adds	r3, r3, r2
 800709a:	19db      	adds	r3, r3, r7
 800709c:	2210      	movs	r2, #16
 800709e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4ac1      	ldr	r2, [pc, #772]	; (80073ac <UART_SetConfig+0x69c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d005      	beq.n	80070b6 <UART_SetConfig+0x3a6>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4ac0      	ldr	r2, [pc, #768]	; (80073b0 <UART_SetConfig+0x6a0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d000      	beq.n	80070b6 <UART_SetConfig+0x3a6>
 80070b4:	e093      	b.n	80071de <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070b6:	231b      	movs	r3, #27
 80070b8:	2220      	movs	r2, #32
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	19db      	adds	r3, r3, r7
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d015      	beq.n	80070f0 <UART_SetConfig+0x3e0>
 80070c4:	dc18      	bgt.n	80070f8 <UART_SetConfig+0x3e8>
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d00d      	beq.n	80070e6 <UART_SetConfig+0x3d6>
 80070ca:	dc15      	bgt.n	80070f8 <UART_SetConfig+0x3e8>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <UART_SetConfig+0x3c6>
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d005      	beq.n	80070e0 <UART_SetConfig+0x3d0>
 80070d4:	e010      	b.n	80070f8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d6:	f7fe f855 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80070da:	0003      	movs	r3, r0
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070de:	e014      	b.n	800710a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e0:	4bb4      	ldr	r3, [pc, #720]	; (80073b4 <UART_SetConfig+0x6a4>)
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070e4:	e011      	b.n	800710a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e6:	f7fd ffc1 	bl	800506c <HAL_RCC_GetSysClockFreq>
 80070ea:	0003      	movs	r3, r0
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ee:	e00c      	b.n	800710a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f6:	e008      	b.n	800710a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80070fc:	231a      	movs	r3, #26
 80070fe:	2220      	movs	r2, #32
 8007100:	189b      	adds	r3, r3, r2
 8007102:	19db      	adds	r3, r3, r7
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
        break;
 8007108:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	2b00      	cmp	r3, #0
 800710e:	d100      	bne.n	8007112 <UART_SetConfig+0x402>
 8007110:	e135      	b.n	800737e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007116:	4ba8      	ldr	r3, [pc, #672]	; (80073b8 <UART_SetConfig+0x6a8>)
 8007118:	0052      	lsls	r2, r2, #1
 800711a:	5ad3      	ldrh	r3, [r2, r3]
 800711c:	0019      	movs	r1, r3
 800711e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007120:	f7f9 f80c 	bl	800013c <__udivsi3>
 8007124:	0003      	movs	r3, r0
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	0013      	movs	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	189b      	adds	r3, r3, r2
 8007132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007134:	429a      	cmp	r2, r3
 8007136:	d305      	bcc.n	8007144 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800713e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007140:	429a      	cmp	r2, r3
 8007142:	d906      	bls.n	8007152 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007144:	231a      	movs	r3, #26
 8007146:	2220      	movs	r2, #32
 8007148:	189b      	adds	r3, r3, r2
 800714a:	19db      	adds	r3, r3, r7
 800714c:	2201      	movs	r2, #1
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	e044      	b.n	80071dc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800715e:	4b96      	ldr	r3, [pc, #600]	; (80073b8 <UART_SetConfig+0x6a8>)
 8007160:	0052      	lsls	r2, r2, #1
 8007162:	5ad3      	ldrh	r3, [r2, r3]
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	69b8      	ldr	r0, [r7, #24]
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	f7f9 f997 	bl	80004a4 <__aeabi_uldivmod>
 8007176:	0002      	movs	r2, r0
 8007178:	000b      	movs	r3, r1
 800717a:	0e11      	lsrs	r1, r2, #24
 800717c:	021d      	lsls	r5, r3, #8
 800717e:	430d      	orrs	r5, r1
 8007180:	0214      	lsls	r4, r2, #8
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	68b8      	ldr	r0, [r7, #8]
 8007190:	68f9      	ldr	r1, [r7, #12]
 8007192:	1900      	adds	r0, r0, r4
 8007194:	4169      	adcs	r1, r5
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	2300      	movs	r3, #0
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f7f9 f97e 	bl	80004a4 <__aeabi_uldivmod>
 80071a8:	0002      	movs	r2, r0
 80071aa:	000b      	movs	r3, r1
 80071ac:	0013      	movs	r3, r2
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b2:	23c0      	movs	r3, #192	; 0xc0
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d309      	bcc.n	80071ce <UART_SetConfig+0x4be>
 80071ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071bc:	2380      	movs	r3, #128	; 0x80
 80071be:	035b      	lsls	r3, r3, #13
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d204      	bcs.n	80071ce <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ca:	60da      	str	r2, [r3, #12]
 80071cc:	e006      	b.n	80071dc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80071ce:	231a      	movs	r3, #26
 80071d0:	2220      	movs	r2, #32
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	19db      	adds	r3, r3, r7
 80071d6:	2201      	movs	r2, #1
 80071d8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80071da:	e0d0      	b.n	800737e <UART_SetConfig+0x66e>
 80071dc:	e0cf      	b.n	800737e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	69da      	ldr	r2, [r3, #28]
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d000      	beq.n	80071ec <UART_SetConfig+0x4dc>
 80071ea:	e070      	b.n	80072ce <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80071ec:	231b      	movs	r3, #27
 80071ee:	2220      	movs	r2, #32
 80071f0:	189b      	adds	r3, r3, r2
 80071f2:	19db      	adds	r3, r3, r7
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d015      	beq.n	8007226 <UART_SetConfig+0x516>
 80071fa:	dc18      	bgt.n	800722e <UART_SetConfig+0x51e>
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d00d      	beq.n	800721c <UART_SetConfig+0x50c>
 8007200:	dc15      	bgt.n	800722e <UART_SetConfig+0x51e>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <UART_SetConfig+0x4fc>
 8007206:	2b02      	cmp	r3, #2
 8007208:	d005      	beq.n	8007216 <UART_SetConfig+0x506>
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800720c:	f7fd ffba 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8007210:	0003      	movs	r3, r0
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007214:	e014      	b.n	8007240 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007216:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <UART_SetConfig+0x6a4>)
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800721a:	e011      	b.n	8007240 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800721c:	f7fd ff26 	bl	800506c <HAL_RCC_GetSysClockFreq>
 8007220:	0003      	movs	r3, r0
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007224:	e00c      	b.n	8007240 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722c:	e008      	b.n	8007240 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007232:	231a      	movs	r3, #26
 8007234:	2220      	movs	r2, #32
 8007236:	189b      	adds	r3, r3, r2
 8007238:	19db      	adds	r3, r3, r7
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
        break;
 800723e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007242:	2b00      	cmp	r3, #0
 8007244:	d100      	bne.n	8007248 <UART_SetConfig+0x538>
 8007246:	e09a      	b.n	800737e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800724c:	4b5a      	ldr	r3, [pc, #360]	; (80073b8 <UART_SetConfig+0x6a8>)
 800724e:	0052      	lsls	r2, r2, #1
 8007250:	5ad3      	ldrh	r3, [r2, r3]
 8007252:	0019      	movs	r1, r3
 8007254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007256:	f7f8 ff71 	bl	800013c <__udivsi3>
 800725a:	0003      	movs	r3, r0
 800725c:	005a      	lsls	r2, r3, #1
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	18d2      	adds	r2, r2, r3
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	0019      	movs	r1, r3
 800726c:	0010      	movs	r0, r2
 800726e:	f7f8 ff65 	bl	800013c <__udivsi3>
 8007272:	0003      	movs	r3, r0
 8007274:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	2b0f      	cmp	r3, #15
 800727a:	d921      	bls.n	80072c0 <UART_SetConfig+0x5b0>
 800727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	025b      	lsls	r3, r3, #9
 8007282:	429a      	cmp	r2, r3
 8007284:	d21c      	bcs.n	80072c0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	b29a      	uxth	r2, r3
 800728a:	200e      	movs	r0, #14
 800728c:	2420      	movs	r4, #32
 800728e:	1903      	adds	r3, r0, r4
 8007290:	19db      	adds	r3, r3, r7
 8007292:	210f      	movs	r1, #15
 8007294:	438a      	bics	r2, r1
 8007296:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	2207      	movs	r2, #7
 80072a0:	4013      	ands	r3, r2
 80072a2:	b299      	uxth	r1, r3
 80072a4:	1903      	adds	r3, r0, r4
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	1902      	adds	r2, r0, r4
 80072aa:	19d2      	adds	r2, r2, r7
 80072ac:	8812      	ldrh	r2, [r2, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	1902      	adds	r2, r0, r4
 80072b8:	19d2      	adds	r2, r2, r7
 80072ba:	8812      	ldrh	r2, [r2, #0]
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	e05e      	b.n	800737e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80072c0:	231a      	movs	r3, #26
 80072c2:	2220      	movs	r2, #32
 80072c4:	189b      	adds	r3, r3, r2
 80072c6:	19db      	adds	r3, r3, r7
 80072c8:	2201      	movs	r2, #1
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	e057      	b.n	800737e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ce:	231b      	movs	r3, #27
 80072d0:	2220      	movs	r2, #32
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	19db      	adds	r3, r3, r7
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d015      	beq.n	8007308 <UART_SetConfig+0x5f8>
 80072dc:	dc18      	bgt.n	8007310 <UART_SetConfig+0x600>
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00d      	beq.n	80072fe <UART_SetConfig+0x5ee>
 80072e2:	dc15      	bgt.n	8007310 <UART_SetConfig+0x600>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <UART_SetConfig+0x5de>
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d005      	beq.n	80072f8 <UART_SetConfig+0x5e8>
 80072ec:	e010      	b.n	8007310 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ee:	f7fd ff49 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80072f2:	0003      	movs	r3, r0
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f6:	e014      	b.n	8007322 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f8:	4b2e      	ldr	r3, [pc, #184]	; (80073b4 <UART_SetConfig+0x6a4>)
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fc:	e011      	b.n	8007322 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fe:	f7fd feb5 	bl	800506c <HAL_RCC_GetSysClockFreq>
 8007302:	0003      	movs	r3, r0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007306:	e00c      	b.n	8007322 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730e:	e008      	b.n	8007322 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007314:	231a      	movs	r3, #26
 8007316:	2220      	movs	r2, #32
 8007318:	189b      	adds	r3, r3, r2
 800731a:	19db      	adds	r3, r3, r7
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
        break;
 8007320:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d02a      	beq.n	800737e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <UART_SetConfig+0x6a8>)
 800732e:	0052      	lsls	r2, r2, #1
 8007330:	5ad3      	ldrh	r3, [r2, r3]
 8007332:	0019      	movs	r1, r3
 8007334:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007336:	f7f8 ff01 	bl	800013c <__udivsi3>
 800733a:	0003      	movs	r3, r0
 800733c:	001a      	movs	r2, r3
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	18d2      	adds	r2, r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	0019      	movs	r1, r3
 800734c:	0010      	movs	r0, r2
 800734e:	f7f8 fef5 	bl	800013c <__udivsi3>
 8007352:	0003      	movs	r3, r0
 8007354:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2b0f      	cmp	r3, #15
 800735a:	d90a      	bls.n	8007372 <UART_SetConfig+0x662>
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	2380      	movs	r3, #128	; 0x80
 8007360:	025b      	lsls	r3, r3, #9
 8007362:	429a      	cmp	r2, r3
 8007364:	d205      	bcs.n	8007372 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	b29a      	uxth	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	231a      	movs	r3, #26
 8007374:	2220      	movs	r2, #32
 8007376:	189b      	adds	r3, r3, r2
 8007378:	19db      	adds	r3, r3, r7
 800737a:	2201      	movs	r2, #1
 800737c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	226a      	movs	r2, #106	; 0x6a
 8007382:	2101      	movs	r1, #1
 8007384:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2268      	movs	r2, #104	; 0x68
 800738a:	2101      	movs	r1, #1
 800738c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	2200      	movs	r2, #0
 8007392:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	2200      	movs	r2, #0
 8007398:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800739a:	231a      	movs	r3, #26
 800739c:	2220      	movs	r2, #32
 800739e:	189b      	adds	r3, r3, r2
 80073a0:	19db      	adds	r3, r3, r7
 80073a2:	781b      	ldrb	r3, [r3, #0]
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b010      	add	sp, #64	; 0x40
 80073aa:	bdb0      	pop	{r4, r5, r7, pc}
 80073ac:	40008000 	.word	0x40008000
 80073b0:	40008400 	.word	0x40008400
 80073b4:	00f42400 	.word	0x00f42400
 80073b8:	08014270 	.word	0x08014270

080073bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	2208      	movs	r2, #8
 80073ca:	4013      	ands	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	4a4a      	ldr	r2, [pc, #296]	; (8007500 <UART_AdvFeatureConfig+0x144>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	0019      	movs	r1, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	2201      	movs	r2, #1
 80073ec:	4013      	ands	r3, r2
 80073ee:	d00b      	beq.n	8007408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	4a43      	ldr	r2, [pc, #268]	; (8007504 <UART_AdvFeatureConfig+0x148>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	0019      	movs	r1, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	2202      	movs	r2, #2
 800740e:	4013      	ands	r3, r2
 8007410:	d00b      	beq.n	800742a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4a3b      	ldr	r2, [pc, #236]	; (8007508 <UART_AdvFeatureConfig+0x14c>)
 800741a:	4013      	ands	r3, r2
 800741c:	0019      	movs	r1, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	2204      	movs	r2, #4
 8007430:	4013      	ands	r3, r2
 8007432:	d00b      	beq.n	800744c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <UART_AdvFeatureConfig+0x150>)
 800743c:	4013      	ands	r3, r2
 800743e:	0019      	movs	r1, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	2210      	movs	r2, #16
 8007452:	4013      	ands	r3, r2
 8007454:	d00b      	beq.n	800746e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4a2c      	ldr	r2, [pc, #176]	; (8007510 <UART_AdvFeatureConfig+0x154>)
 800745e:	4013      	ands	r3, r2
 8007460:	0019      	movs	r1, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	2220      	movs	r2, #32
 8007474:	4013      	ands	r3, r2
 8007476:	d00b      	beq.n	8007490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	4a25      	ldr	r2, [pc, #148]	; (8007514 <UART_AdvFeatureConfig+0x158>)
 8007480:	4013      	ands	r3, r2
 8007482:	0019      	movs	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	4013      	ands	r3, r2
 8007498:	d01d      	beq.n	80074d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <UART_AdvFeatureConfig+0x15c>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	035b      	lsls	r3, r3, #13
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d10b      	bne.n	80074d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <UART_AdvFeatureConfig+0x160>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	0019      	movs	r1, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	4013      	ands	r3, r2
 80074de:	d00b      	beq.n	80074f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <UART_AdvFeatureConfig+0x164>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	0019      	movs	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b002      	add	sp, #8
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	ffff7fff 	.word	0xffff7fff
 8007504:	fffdffff 	.word	0xfffdffff
 8007508:	fffeffff 	.word	0xfffeffff
 800750c:	fffbffff 	.word	0xfffbffff
 8007510:	ffffefff 	.word	0xffffefff
 8007514:	ffffdfff 	.word	0xffffdfff
 8007518:	ffefffff 	.word	0xffefffff
 800751c:	ff9fffff 	.word	0xff9fffff
 8007520:	fff7ffff 	.word	0xfff7ffff

08007524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b092      	sub	sp, #72	; 0x48
 8007528:	af02      	add	r7, sp, #8
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2290      	movs	r2, #144	; 0x90
 8007530:	2100      	movs	r1, #0
 8007532:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007534:	f7fc fc80 	bl	8003e38 <HAL_GetTick>
 8007538:	0003      	movs	r3, r0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2208      	movs	r2, #8
 8007544:	4013      	ands	r3, r2
 8007546:	2b08      	cmp	r3, #8
 8007548:	d12d      	bne.n	80075a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	2280      	movs	r2, #128	; 0x80
 800754e:	0391      	lsls	r1, r2, #14
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4a47      	ldr	r2, [pc, #284]	; (8007670 <UART_CheckIdleState+0x14c>)
 8007554:	9200      	str	r2, [sp, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	f000 f88e 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 800755c:	1e03      	subs	r3, r0, #0
 800755e:	d022      	beq.n	80075a6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007560:	f3ef 8310 	mrs	r3, PRIMASK
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
 800756a:	2301      	movs	r3, #1
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	f383 8810 	msr	PRIMASK, r3
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2180      	movs	r1, #128	; 0x80
 8007582:	438a      	bics	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2288      	movs	r2, #136	; 0x88
 8007596:	2120      	movs	r1, #32
 8007598:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2284      	movs	r2, #132	; 0x84
 800759e:	2100      	movs	r1, #0
 80075a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e060      	b.n	8007668 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2204      	movs	r2, #4
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d146      	bne.n	8007642 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b6:	2280      	movs	r2, #128	; 0x80
 80075b8:	03d1      	lsls	r1, r2, #15
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <UART_CheckIdleState+0x14c>)
 80075be:	9200      	str	r2, [sp, #0]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f000 f859 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 80075c6:	1e03      	subs	r3, r0, #0
 80075c8:	d03b      	beq.n	8007642 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	2301      	movs	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f383 8810 	msr	PRIMASK, r3
}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4922      	ldr	r1, [pc, #136]	; (8007674 <UART_CheckIdleState+0x150>)
 80075ec:	400a      	ands	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007600:	61bb      	str	r3, [r7, #24]
  return(result);
 8007602:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
 8007606:	2301      	movs	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f383 8810 	msr	PRIMASK, r3
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2101      	movs	r1, #1
 800761e:	438a      	bics	r2, r1
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	228c      	movs	r2, #140	; 0x8c
 8007632:	2120      	movs	r1, #32
 8007634:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2284      	movs	r2, #132	; 0x84
 800763a:	2100      	movs	r1, #0
 800763c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e012      	b.n	8007668 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2288      	movs	r2, #136	; 0x88
 8007646:	2120      	movs	r1, #32
 8007648:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	228c      	movs	r2, #140	; 0x8c
 800764e:	2120      	movs	r1, #32
 8007650:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2284      	movs	r2, #132	; 0x84
 8007662:	2100      	movs	r1, #0
 8007664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	b010      	add	sp, #64	; 0x40
 800766e:	bd80      	pop	{r7, pc}
 8007670:	01ffffff 	.word	0x01ffffff
 8007674:	fffffedf 	.word	0xfffffedf

08007678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	1dfb      	adds	r3, r7, #7
 8007686:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007688:	e051      	b.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3301      	adds	r3, #1
 800768e:	d04e      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007690:	f7fc fbd2 	bl	8003e38 <HAL_GetTick>
 8007694:	0002      	movs	r2, r0
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	429a      	cmp	r2, r3
 800769e:	d302      	bcc.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e051      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2204      	movs	r2, #4
 80076b2:	4013      	ands	r3, r2
 80076b4:	d03b      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d038      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d035      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	2208      	movs	r2, #8
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d111      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2208      	movs	r2, #8
 80076d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0018      	movs	r0, r3
 80076dc:	f000 f83c 	bl	8007758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2290      	movs	r2, #144	; 0x90
 80076e4:	2108      	movs	r1, #8
 80076e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2284      	movs	r2, #132	; 0x84
 80076ec:	2100      	movs	r1, #0
 80076ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e02c      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	2380      	movs	r3, #128	; 0x80
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	401a      	ands	r2, r3
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	429a      	cmp	r2, r3
 8007706:	d112      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	0112      	lsls	r2, r2, #4
 8007710:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	0018      	movs	r0, r3
 8007716:	f000 f81f 	bl	8007758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2290      	movs	r2, #144	; 0x90
 800771e:	2120      	movs	r1, #32
 8007720:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2284      	movs	r2, #132	; 0x84
 8007726:	2100      	movs	r1, #0
 8007728:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	425a      	negs	r2, r3
 800773e:	4153      	adcs	r3, r2
 8007740:	b2db      	uxtb	r3, r3
 8007742:	001a      	movs	r2, r3
 8007744:	1dfb      	adds	r3, r7, #7
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d09e      	beq.n	800768a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	0018      	movs	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	b004      	add	sp, #16
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007760:	f3ef 8310 	mrs	r3, PRIMASK
 8007764:	617b      	str	r3, [r7, #20]
  return(result);
 8007766:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
 800776a:	2301      	movs	r3, #1
 800776c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f383 8810 	msr	PRIMASK, r3
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4926      	ldr	r1, [pc, #152]	; (800781c <UART_EndRxTransfer+0xc4>)
 8007782:	400a      	ands	r2, r1
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f383 8810 	msr	PRIMASK, r3
}
 8007790:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007792:	f3ef 8310 	mrs	r3, PRIMASK
 8007796:	623b      	str	r3, [r7, #32]
  return(result);
 8007798:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800779a:	633b      	str	r3, [r7, #48]	; 0x30
 800779c:	2301      	movs	r3, #1
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	f383 8810 	msr	PRIMASK, r3
}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	491b      	ldr	r1, [pc, #108]	; (8007820 <UART_EndRxTransfer+0xc8>)
 80077b4:	400a      	ands	r2, r1
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	f383 8810 	msr	PRIMASK, r3
}
 80077c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d118      	bne.n	80077fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d6:	2301      	movs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f383 8810 	msr	PRIMASK, r3
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2110      	movs	r1, #16
 80077ee:	438a      	bics	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	228c      	movs	r2, #140	; 0x8c
 8007802:	2120      	movs	r1, #32
 8007804:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	46bd      	mov	sp, r7
 8007816:	b00e      	add	sp, #56	; 0x38
 8007818:	bd80      	pop	{r7, pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	fffffedf 	.word	0xfffffedf
 8007820:	effffffe 	.word	0xeffffffe

08007824 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2284      	movs	r2, #132	; 0x84
 8007830:	5c9b      	ldrb	r3, [r3, r2]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UARTEx_DisableFifoMode+0x16>
 8007836:	2302      	movs	r3, #2
 8007838:	e027      	b.n	800788a <HAL_UARTEx_DisableFifoMode+0x66>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2284      	movs	r2, #132	; 0x84
 800783e:	2101      	movs	r1, #1
 8007840:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2288      	movs	r2, #136	; 0x88
 8007846:	2124      	movs	r1, #36	; 0x24
 8007848:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2101      	movs	r1, #1
 800785e:	438a      	bics	r2, r1
 8007860:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a0b      	ldr	r2, [pc, #44]	; (8007894 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007866:	4013      	ands	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2288      	movs	r2, #136	; 0x88
 800787c:	2120      	movs	r1, #32
 800787e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2284      	movs	r2, #132	; 0x84
 8007884:	2100      	movs	r1, #0
 8007886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	0018      	movs	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	b004      	add	sp, #16
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	dfffffff 	.word	0xdfffffff

08007898 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2284      	movs	r2, #132	; 0x84
 80078a6:	5c9b      	ldrb	r3, [r3, r2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e02e      	b.n	800790e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2284      	movs	r2, #132	; 0x84
 80078b4:	2101      	movs	r1, #1
 80078b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2288      	movs	r2, #136	; 0x88
 80078bc:	2124      	movs	r1, #36	; 0x24
 80078be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2101      	movs	r1, #1
 80078d4:	438a      	bics	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	08d9      	lsrs	r1, r3, #3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 f854 	bl	800799c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2288      	movs	r2, #136	; 0x88
 8007900:	2120      	movs	r1, #32
 8007902:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2284      	movs	r2, #132	; 0x84
 8007908:	2100      	movs	r1, #0
 800790a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	0018      	movs	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	b004      	add	sp, #16
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2284      	movs	r2, #132	; 0x84
 8007926:	5c9b      	ldrb	r3, [r3, r2]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800792c:	2302      	movs	r3, #2
 800792e:	e02f      	b.n	8007990 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2284      	movs	r2, #132	; 0x84
 8007934:	2101      	movs	r1, #1
 8007936:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2288      	movs	r2, #136	; 0x88
 800793c:	2124      	movs	r1, #36	; 0x24
 800793e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2101      	movs	r1, #1
 8007954:	438a      	bics	r2, r1
 8007956:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007960:	4013      	ands	r3, r2
 8007962:	0019      	movs	r1, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	0018      	movs	r0, r3
 8007972:	f000 f813 	bl	800799c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2288      	movs	r2, #136	; 0x88
 8007982:	2120      	movs	r1, #32
 8007984:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2284      	movs	r2, #132	; 0x84
 800798a:	2100      	movs	r1, #0
 800798c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}
 8007998:	f1ffffff 	.word	0xf1ffffff

0800799c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800799c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d108      	bne.n	80079be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	226a      	movs	r2, #106	; 0x6a
 80079b0:	2101      	movs	r1, #1
 80079b2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2268      	movs	r2, #104	; 0x68
 80079b8:	2101      	movs	r1, #1
 80079ba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079bc:	e043      	b.n	8007a46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079be:	260f      	movs	r6, #15
 80079c0:	19bb      	adds	r3, r7, r6
 80079c2:	2208      	movs	r2, #8
 80079c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079c6:	200e      	movs	r0, #14
 80079c8:	183b      	adds	r3, r7, r0
 80079ca:	2208      	movs	r2, #8
 80079cc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	0e5b      	lsrs	r3, r3, #25
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	240d      	movs	r4, #13
 80079da:	193b      	adds	r3, r7, r4
 80079dc:	2107      	movs	r1, #7
 80079de:	400a      	ands	r2, r1
 80079e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0f5b      	lsrs	r3, r3, #29
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	250c      	movs	r5, #12
 80079ee:	197b      	adds	r3, r7, r5
 80079f0:	2107      	movs	r1, #7
 80079f2:	400a      	ands	r2, r1
 80079f4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f6:	183b      	adds	r3, r7, r0
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	197a      	adds	r2, r7, r5
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	4914      	ldr	r1, [pc, #80]	; (8007a50 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a00:	5c8a      	ldrb	r2, [r1, r2]
 8007a02:	435a      	muls	r2, r3
 8007a04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a06:	197b      	adds	r3, r7, r5
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4a12      	ldr	r2, [pc, #72]	; (8007a54 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a0e:	0019      	movs	r1, r3
 8007a10:	f7f8 fc1e 	bl	8000250 <__divsi3>
 8007a14:	0003      	movs	r3, r0
 8007a16:	b299      	uxth	r1, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	226a      	movs	r2, #106	; 0x6a
 8007a1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a1e:	19bb      	adds	r3, r7, r6
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	193a      	adds	r2, r7, r4
 8007a24:	7812      	ldrb	r2, [r2, #0]
 8007a26:	490a      	ldr	r1, [pc, #40]	; (8007a50 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a28:	5c8a      	ldrb	r2, [r1, r2]
 8007a2a:	435a      	muls	r2, r3
 8007a2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a2e:	193b      	adds	r3, r7, r4
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a36:	0019      	movs	r1, r3
 8007a38:	f7f8 fc0a 	bl	8000250 <__divsi3>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	b299      	uxth	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2268      	movs	r2, #104	; 0x68
 8007a44:	5299      	strh	r1, [r3, r2]
}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b005      	add	sp, #20
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	08014288 	.word	0x08014288
 8007a54:	08014290 	.word	0x08014290

08007a58 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007a58:	b5b0      	push	{r4, r5, r7, lr}
 8007a5a:	b0e4      	sub	sp, #400	; 0x190
 8007a5c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a5e:	24c8      	movs	r4, #200	; 0xc8
 8007a60:	193b      	adds	r3, r7, r4
 8007a62:	0018      	movs	r0, r3
 8007a64:	23c6      	movs	r3, #198	; 0xc6
 8007a66:	001a      	movs	r2, r3
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f004 f87d 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <astronode_send_cfg_sr+0x64>)
 8007a70:	25c8      	movs	r5, #200	; 0xc8
 8007a72:	006d      	lsls	r5, r5, #1
 8007a74:	195b      	adds	r3, r3, r5
 8007a76:	19db      	adds	r3, r3, r7
 8007a78:	0018      	movs	r0, r3
 8007a7a:	23c6      	movs	r3, #198	; 0xc6
 8007a7c:	001a      	movs	r2, r3
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f004 f872 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007a84:	193b      	adds	r3, r7, r4
 8007a86:	2210      	movs	r2, #16
 8007a88:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007a8a:	003a      	movs	r2, r7
 8007a8c:	193b      	adds	r3, r7, r4
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f001 fa87 	bl	8008fa4 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007a96:	4b09      	ldr	r3, [pc, #36]	; (8007abc <astronode_send_cfg_sr+0x64>)
 8007a98:	195b      	adds	r3, r3, r5
 8007a9a:	19db      	adds	r3, r3, r7
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b90      	cmp	r3, #144	; 0x90
 8007aa0:	d104      	bne.n	8007aac <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <astronode_send_cfg_sr+0x68>)
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7fb fb6d 	bl	8003184 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007aaa:	e003      	b.n	8007ab4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <astronode_send_cfg_sr+0x6c>)
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7fb fb68 	bl	8003184 <send_debug_logs>
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b064      	add	sp, #400	; 0x190
 8007aba:	bdb0      	pop	{r4, r5, r7, pc}
 8007abc:	fffffe70 	.word	0xfffffe70
 8007ac0:	08012cd8 	.word	0x08012cd8
 8007ac4:	08012d0c 	.word	0x08012d0c

08007ac8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aca:	b0e7      	sub	sp, #412	; 0x19c
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	0005      	movs	r5, r0
 8007ad0:	000c      	movs	r4, r1
 8007ad2:	0010      	movs	r0, r2
 8007ad4:	0019      	movs	r1, r3
 8007ad6:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <astronode_send_cfg_wr+0x13c>)
 8007ad8:	26cc      	movs	r6, #204	; 0xcc
 8007ada:	0076      	lsls	r6, r6, #1
 8007adc:	199b      	adds	r3, r3, r6
 8007ade:	19db      	adds	r3, r3, r7
 8007ae0:	1c2a      	adds	r2, r5, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	4b48      	ldr	r3, [pc, #288]	; (8007c08 <astronode_send_cfg_wr+0x140>)
 8007ae6:	0035      	movs	r5, r6
 8007ae8:	195b      	adds	r3, r3, r5
 8007aea:	19db      	adds	r3, r3, r7
 8007aec:	1c22      	adds	r2, r4, #0
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	4b46      	ldr	r3, [pc, #280]	; (8007c0c <astronode_send_cfg_wr+0x144>)
 8007af2:	002c      	movs	r4, r5
 8007af4:	191b      	adds	r3, r3, r4
 8007af6:	19db      	adds	r3, r3, r7
 8007af8:	1c02      	adds	r2, r0, #0
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	4b44      	ldr	r3, [pc, #272]	; (8007c10 <astronode_send_cfg_wr+0x148>)
 8007afe:	191b      	adds	r3, r3, r4
 8007b00:	19db      	adds	r3, r3, r7
 8007b02:	1c0a      	adds	r2, r1, #0
 8007b04:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007b06:	25d0      	movs	r5, #208	; 0xd0
 8007b08:	197b      	adds	r3, r7, r5
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	23c6      	movs	r3, #198	; 0xc6
 8007b0e:	001a      	movs	r2, r3
 8007b10:	2100      	movs	r1, #0
 8007b12:	f004 f829 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007b16:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <astronode_send_cfg_wr+0x14c>)
 8007b18:	191b      	adds	r3, r3, r4
 8007b1a:	19db      	adds	r3, r3, r7
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	23c6      	movs	r3, #198	; 0xc6
 8007b20:	001a      	movs	r2, r3
 8007b22:	2100      	movs	r1, #0
 8007b24:	f004 f820 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007b28:	0029      	movs	r1, r5
 8007b2a:	187b      	adds	r3, r7, r1
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007b30:	4b34      	ldr	r3, [pc, #208]	; (8007c04 <astronode_send_cfg_wr+0x13c>)
 8007b32:	191b      	adds	r3, r3, r4
 8007b34:	19db      	adds	r3, r3, r7
 8007b36:	2200      	movs	r2, #0
 8007b38:	569a      	ldrsb	r2, [r3, r2]
 8007b3a:	4b33      	ldr	r3, [pc, #204]	; (8007c08 <astronode_send_cfg_wr+0x140>)
 8007b3c:	191b      	adds	r3, r3, r4
 8007b3e:	19db      	adds	r3, r3, r7
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007b4a:	4b30      	ldr	r3, [pc, #192]	; (8007c0c <astronode_send_cfg_wr+0x144>)
 8007b4c:	191b      	adds	r3, r3, r4
 8007b4e:	19db      	adds	r3, r3, r7
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	b25b      	sxtb	r3, r3
 8007b56:	4313      	orrs	r3, r2
 8007b58:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007b5a:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <astronode_send_cfg_wr+0x148>)
 8007b5c:	191b      	adds	r3, r3, r4
 8007b5e:	19db      	adds	r3, r3, r7
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	b25b      	sxtb	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007b70:	23d4      	movs	r3, #212	; 0xd4
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	2508      	movs	r5, #8
 8007b76:	195b      	adds	r3, r3, r5
 8007b78:	19db      	adds	r3, r3, r7
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	569a      	ldrsb	r2, [r3, r2]
 8007b7e:	23d6      	movs	r3, #214	; 0xd6
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	195b      	adds	r3, r3, r5
 8007b84:	19db      	adds	r3, r3, r7
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007b90:	23d8      	movs	r3, #216	; 0xd8
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	195b      	adds	r3, r3, r5
 8007b96:	19db      	adds	r3, r3, r7
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007ba2:	23da      	movs	r3, #218	; 0xda
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	195b      	adds	r3, r3, r5
 8007ba8:	19db      	adds	r3, r3, r7
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007bba:	0008      	movs	r0, r1
 8007bbc:	187b      	adds	r3, r7, r1
 8007bbe:	22c4      	movs	r2, #196	; 0xc4
 8007bc0:	2103      	movs	r1, #3
 8007bc2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bc4:	002b      	movs	r3, r5
 8007bc6:	18fa      	adds	r2, r7, r3
 8007bc8:	183b      	adds	r3, r7, r0
 8007bca:	0011      	movs	r1, r2
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f001 f9e9 	bl	8008fa4 <astronode_transport_send_receive>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10f      	bne.n	8007bf8 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <astronode_send_cfg_wr+0x14c>)
 8007bda:	191b      	adds	r3, r3, r4
 8007bdc:	19db      	adds	r3, r3, r7
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b85      	cmp	r3, #133	; 0x85
 8007be2:	d105      	bne.n	8007bf0 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <astronode_send_cfg_wr+0x150>)
 8007be6:	0018      	movs	r0, r3
 8007be8:	f7fb facc 	bl	8003184 <send_debug_logs>
            return true ;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e004      	b.n	8007bfa <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <astronode_send_cfg_wr+0x154>)
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7fb fac6 	bl	8003184 <send_debug_logs>
        }
    }
    return false ;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b067      	add	sp, #412	; 0x19c
 8007c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	fffffe6f 	.word	0xfffffe6f
 8007c08:	fffffe6e 	.word	0xfffffe6e
 8007c0c:	fffffe6d 	.word	0xfffffe6d
 8007c10:	fffffe6c 	.word	0xfffffe6c
 8007c14:	fffffe70 	.word	0xfffffe70
 8007c18:	08012d40 	.word	0x08012d40
 8007c1c:	08012d6c 	.word	0x08012d6c

08007c20 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c22:	b0ed      	sub	sp, #436	; 0x1b4
 8007c24:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c26:	21c8      	movs	r1, #200	; 0xc8
 8007c28:	2318      	movs	r3, #24
 8007c2a:	18cb      	adds	r3, r1, r3
 8007c2c:	19db      	adds	r3, r3, r7
 8007c2e:	0018      	movs	r0, r3
 8007c30:	23c6      	movs	r3, #198	; 0xc6
 8007c32:	001a      	movs	r2, r3
 8007c34:	2100      	movs	r1, #0
 8007c36:	f003 ff97 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007c3a:	4b4a      	ldr	r3, [pc, #296]	; (8007d64 <astronode_send_mgi_rr+0x144>)
 8007c3c:	26cc      	movs	r6, #204	; 0xcc
 8007c3e:	0076      	lsls	r6, r6, #1
 8007c40:	199b      	adds	r3, r3, r6
 8007c42:	2218      	movs	r2, #24
 8007c44:	4694      	mov	ip, r2
 8007c46:	44bc      	add	ip, r7
 8007c48:	4463      	add	r3, ip
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	23c6      	movs	r3, #198	; 0xc6
 8007c4e:	001a      	movs	r2, r3
 8007c50:	2100      	movs	r1, #0
 8007c52:	f003 ff89 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007c56:	21c8      	movs	r1, #200	; 0xc8
 8007c58:	2318      	movs	r3, #24
 8007c5a:	18cb      	adds	r3, r1, r3
 8007c5c:	19db      	adds	r3, r3, r7
 8007c5e:	2219      	movs	r2, #25
 8007c60:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c62:	2318      	movs	r3, #24
 8007c64:	18fa      	adds	r2, r7, r3
 8007c66:	2318      	movs	r3, #24
 8007c68:	18cb      	adds	r3, r1, r3
 8007c6a:	19db      	adds	r3, r3, r7
 8007c6c:	0011      	movs	r1, r2
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f001 f998 	bl	8008fa4 <astronode_transport_send_receive>
 8007c74:	0003      	movs	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d16f      	bne.n	8007d5a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007c7a:	4b3a      	ldr	r3, [pc, #232]	; (8007d64 <astronode_send_mgi_rr+0x144>)
 8007c7c:	0032      	movs	r2, r6
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	2118      	movs	r1, #24
 8007c82:	468c      	mov	ip, r1
 8007c84:	44bc      	add	ip, r7
 8007c86:	4463      	add	r3, ip
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b99      	cmp	r3, #153	; 0x99
 8007c8c:	d161      	bne.n	8007d52 <astronode_send_mgi_rr+0x132>
        {
 8007c8e:	466b      	mov	r3, sp
 8007c90:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007c92:	4b34      	ldr	r3, [pc, #208]	; (8007d64 <astronode_send_mgi_rr+0x144>)
 8007c94:	189b      	adds	r3, r3, r2
 8007c96:	2218      	movs	r2, #24
 8007c98:	4694      	mov	ip, r2
 8007c9a:	44bc      	add	ip, r7
 8007c9c:	4463      	add	r3, ip
 8007c9e:	22c4      	movs	r2, #196	; 0xc4
 8007ca0:	5a9b      	ldrh	r3, [r3, r2]
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	3a01      	subs	r2, #1
 8007ca6:	21ca      	movs	r1, #202	; 0xca
 8007ca8:	0049      	lsls	r1, r1, #1
 8007caa:	2018      	movs	r0, #24
 8007cac:	1809      	adds	r1, r1, r0
 8007cae:	19c9      	adds	r1, r1, r7
 8007cb0:	600a      	str	r2, [r1, #0]
 8007cb2:	001c      	movs	r4, r3
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	0015      	movs	r5, r2
 8007cb8:	0020      	movs	r0, r4
 8007cba:	0029      	movs	r1, r5
 8007cbc:	0004      	movs	r4, r0
 8007cbe:	0f62      	lsrs	r2, r4, #29
 8007cc0:	000c      	movs	r4, r1
 8007cc2:	00e4      	lsls	r4, r4, #3
 8007cc4:	617c      	str	r4, [r7, #20]
 8007cc6:	697c      	ldr	r4, [r7, #20]
 8007cc8:	4314      	orrs	r4, r2
 8007cca:	617c      	str	r4, [r7, #20]
 8007ccc:	0001      	movs	r1, r0
 8007cce:	00c9      	lsls	r1, r1, #3
 8007cd0:	6139      	str	r1, [r7, #16]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	6838      	ldr	r0, [r7, #0]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	0004      	movs	r4, r0
 8007cde:	0f62      	lsrs	r2, r4, #29
 8007ce0:	000c      	movs	r4, r1
 8007ce2:	00e4      	lsls	r4, r4, #3
 8007ce4:	60fc      	str	r4, [r7, #12]
 8007ce6:	68fc      	ldr	r4, [r7, #12]
 8007ce8:	4314      	orrs	r4, r2
 8007cea:	60fc      	str	r4, [r7, #12]
 8007cec:	0001      	movs	r1, r0
 8007cee:	00ca      	lsls	r2, r1, #3
 8007cf0:	60ba      	str	r2, [r7, #8]
 8007cf2:	3307      	adds	r3, #7
 8007cf4:	08db      	lsrs	r3, r3, #3
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4669      	mov	r1, sp
 8007cfa:	1acb      	subs	r3, r1, r3
 8007cfc:	469d      	mov	sp, r3
 8007cfe:	466b      	mov	r3, sp
 8007d00:	3300      	adds	r3, #0
 8007d02:	24c8      	movs	r4, #200	; 0xc8
 8007d04:	0064      	lsls	r4, r4, #1
 8007d06:	2218      	movs	r2, #24
 8007d08:	18a2      	adds	r2, r4, r2
 8007d0a:	19d1      	adds	r1, r2, r7
 8007d0c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007d0e:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <astronode_send_mgi_rr+0x148>)
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7fb fa37 	bl	8003184 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <astronode_send_mgi_rr+0x144>)
 8007d18:	22cc      	movs	r2, #204	; 0xcc
 8007d1a:	0052      	lsls	r2, r2, #1
 8007d1c:	189b      	adds	r3, r3, r2
 8007d1e:	2218      	movs	r2, #24
 8007d20:	4694      	mov	ip, r2
 8007d22:	44bc      	add	ip, r7
 8007d24:	4463      	add	r3, ip
 8007d26:	22c4      	movs	r2, #196	; 0xc4
 8007d28:	5a9b      	ldrh	r3, [r3, r2]
 8007d2a:	0019      	movs	r1, r3
 8007d2c:	2318      	movs	r3, #24
 8007d2e:	18fb      	adds	r3, r7, r3
 8007d30:	3301      	adds	r3, #1
 8007d32:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <astronode_send_mgi_rr+0x14c>)
 8007d34:	2018      	movs	r0, #24
 8007d36:	1820      	adds	r0, r4, r0
 8007d38:	19c0      	adds	r0, r0, r7
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	f003 fe4a 	bl	800b9d4 <snprintf>
            send_debug_logs(guid);
 8007d40:	2318      	movs	r3, #24
 8007d42:	18e3      	adds	r3, r4, r3
 8007d44:	19db      	adds	r3, r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7fb fa1b 	bl	8003184 <send_debug_logs>
 8007d4e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007d50:	e003      	b.n	8007d5a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <astronode_send_mgi_rr+0x150>)
 8007d54:	0018      	movs	r0, r3
 8007d56:	f7fb fa15 	bl	8003184 <send_debug_logs>
}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b06d      	add	sp, #436	; 0x1b4
 8007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	fffffe68 	.word	0xfffffe68
 8007d68:	08012df8 	.word	0x08012df8
 8007d6c:	08012e08 	.word	0x08012e08
 8007d70:	08012e0c 	.word	0x08012e0c

08007d74 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	b0ed      	sub	sp, #436	; 0x1b4
 8007d78:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d7a:	21c8      	movs	r1, #200	; 0xc8
 8007d7c:	2318      	movs	r3, #24
 8007d7e:	18cb      	adds	r3, r1, r3
 8007d80:	19db      	adds	r3, r3, r7
 8007d82:	0018      	movs	r0, r3
 8007d84:	23c6      	movs	r3, #198	; 0xc6
 8007d86:	001a      	movs	r2, r3
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f003 feed 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <astronode_send_msn_rr+0x144>)
 8007d90:	26cc      	movs	r6, #204	; 0xcc
 8007d92:	0076      	lsls	r6, r6, #1
 8007d94:	199b      	adds	r3, r3, r6
 8007d96:	2218      	movs	r2, #24
 8007d98:	4694      	mov	ip, r2
 8007d9a:	44bc      	add	ip, r7
 8007d9c:	4463      	add	r3, ip
 8007d9e:	0018      	movs	r0, r3
 8007da0:	23c6      	movs	r3, #198	; 0xc6
 8007da2:	001a      	movs	r2, r3
 8007da4:	2100      	movs	r1, #0
 8007da6:	f003 fedf 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007daa:	21c8      	movs	r1, #200	; 0xc8
 8007dac:	2318      	movs	r3, #24
 8007dae:	18cb      	adds	r3, r1, r3
 8007db0:	19db      	adds	r3, r3, r7
 8007db2:	221a      	movs	r2, #26
 8007db4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007db6:	2318      	movs	r3, #24
 8007db8:	18fa      	adds	r2, r7, r3
 8007dba:	2318      	movs	r3, #24
 8007dbc:	18cb      	adds	r3, r1, r3
 8007dbe:	19db      	adds	r3, r3, r7
 8007dc0:	0011      	movs	r1, r2
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f001 f8ee 	bl	8008fa4 <astronode_transport_send_receive>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d16f      	bne.n	8007eae <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007dce:	4b3a      	ldr	r3, [pc, #232]	; (8007eb8 <astronode_send_msn_rr+0x144>)
 8007dd0:	0032      	movs	r2, r6
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	2118      	movs	r1, #24
 8007dd6:	468c      	mov	ip, r1
 8007dd8:	44bc      	add	ip, r7
 8007dda:	4463      	add	r3, ip
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b9a      	cmp	r3, #154	; 0x9a
 8007de0:	d161      	bne.n	8007ea6 <astronode_send_msn_rr+0x132>
        {
 8007de2:	466b      	mov	r3, sp
 8007de4:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007de6:	4b34      	ldr	r3, [pc, #208]	; (8007eb8 <astronode_send_msn_rr+0x144>)
 8007de8:	189b      	adds	r3, r3, r2
 8007dea:	2218      	movs	r2, #24
 8007dec:	4694      	mov	ip, r2
 8007dee:	44bc      	add	ip, r7
 8007df0:	4463      	add	r3, ip
 8007df2:	22c4      	movs	r2, #196	; 0xc4
 8007df4:	5a9b      	ldrh	r3, [r3, r2]
 8007df6:	001a      	movs	r2, r3
 8007df8:	3a01      	subs	r2, #1
 8007dfa:	21ca      	movs	r1, #202	; 0xca
 8007dfc:	0049      	lsls	r1, r1, #1
 8007dfe:	2018      	movs	r0, #24
 8007e00:	1809      	adds	r1, r1, r0
 8007e02:	19c9      	adds	r1, r1, r7
 8007e04:	600a      	str	r2, [r1, #0]
 8007e06:	001c      	movs	r4, r3
 8007e08:	2200      	movs	r2, #0
 8007e0a:	0015      	movs	r5, r2
 8007e0c:	0020      	movs	r0, r4
 8007e0e:	0029      	movs	r1, r5
 8007e10:	0004      	movs	r4, r0
 8007e12:	0f62      	lsrs	r2, r4, #29
 8007e14:	000c      	movs	r4, r1
 8007e16:	00e4      	lsls	r4, r4, #3
 8007e18:	617c      	str	r4, [r7, #20]
 8007e1a:	697c      	ldr	r4, [r7, #20]
 8007e1c:	4314      	orrs	r4, r2
 8007e1e:	617c      	str	r4, [r7, #20]
 8007e20:	0001      	movs	r1, r0
 8007e22:	00c9      	lsls	r1, r1, #3
 8007e24:	6139      	str	r1, [r7, #16]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	6838      	ldr	r0, [r7, #0]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	0004      	movs	r4, r0
 8007e32:	0f62      	lsrs	r2, r4, #29
 8007e34:	000c      	movs	r4, r1
 8007e36:	00e4      	lsls	r4, r4, #3
 8007e38:	60fc      	str	r4, [r7, #12]
 8007e3a:	68fc      	ldr	r4, [r7, #12]
 8007e3c:	4314      	orrs	r4, r2
 8007e3e:	60fc      	str	r4, [r7, #12]
 8007e40:	0001      	movs	r1, r0
 8007e42:	00ca      	lsls	r2, r1, #3
 8007e44:	60ba      	str	r2, [r7, #8]
 8007e46:	3307      	adds	r3, #7
 8007e48:	08db      	lsrs	r3, r3, #3
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4669      	mov	r1, sp
 8007e4e:	1acb      	subs	r3, r1, r3
 8007e50:	469d      	mov	sp, r3
 8007e52:	466b      	mov	r3, sp
 8007e54:	3300      	adds	r3, #0
 8007e56:	24c8      	movs	r4, #200	; 0xc8
 8007e58:	0064      	lsls	r4, r4, #1
 8007e5a:	2218      	movs	r2, #24
 8007e5c:	18a2      	adds	r2, r4, r2
 8007e5e:	19d1      	adds	r1, r2, r7
 8007e60:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007e62:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <astronode_send_msn_rr+0x148>)
 8007e64:	0018      	movs	r0, r3
 8007e66:	f7fb f98d 	bl	8003184 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <astronode_send_msn_rr+0x144>)
 8007e6c:	22cc      	movs	r2, #204	; 0xcc
 8007e6e:	0052      	lsls	r2, r2, #1
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	2218      	movs	r2, #24
 8007e74:	4694      	mov	ip, r2
 8007e76:	44bc      	add	ip, r7
 8007e78:	4463      	add	r3, ip
 8007e7a:	22c4      	movs	r2, #196	; 0xc4
 8007e7c:	5a9b      	ldrh	r3, [r3, r2]
 8007e7e:	0019      	movs	r1, r3
 8007e80:	2318      	movs	r3, #24
 8007e82:	18fb      	adds	r3, r7, r3
 8007e84:	3301      	adds	r3, #1
 8007e86:	4a0e      	ldr	r2, [pc, #56]	; (8007ec0 <astronode_send_msn_rr+0x14c>)
 8007e88:	2018      	movs	r0, #24
 8007e8a:	1820      	adds	r0, r4, r0
 8007e8c:	19c0      	adds	r0, r0, r7
 8007e8e:	6800      	ldr	r0, [r0, #0]
 8007e90:	f003 fda0 	bl	800b9d4 <snprintf>
            send_debug_logs(serial_number);
 8007e94:	2318      	movs	r3, #24
 8007e96:	18e3      	adds	r3, r4, r3
 8007e98:	19db      	adds	r3, r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f7fb f971 	bl	8003184 <send_debug_logs>
 8007ea2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007ea4:	e003      	b.n	8007eae <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <astronode_send_msn_rr+0x150>)
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7fb f96b 	bl	8003184 <send_debug_logs>
}
 8007eae:	46c0      	nop			; (mov r8, r8)
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	b06d      	add	sp, #436	; 0x1b4
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	fffffe68 	.word	0xfffffe68
 8007ebc:	08012e28 	.word	0x08012e28
 8007ec0:	08012e08 	.word	0x08012e08
 8007ec4:	08012e44 	.word	0x08012e44

08007ec8 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007ec8:	b5b0      	push	{r4, r5, r7, lr}
 8007eca:	b0e4      	sub	sp, #400	; 0x190
 8007ecc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ece:	24c8      	movs	r4, #200	; 0xc8
 8007ed0:	193b      	adds	r3, r7, r4
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	23c6      	movs	r3, #198	; 0xc6
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	2100      	movs	r1, #0
 8007eda:	f003 fe45 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007ee0:	25c8      	movs	r5, #200	; 0xc8
 8007ee2:	006d      	lsls	r5, r5, #1
 8007ee4:	195b      	adds	r3, r3, r5
 8007ee6:	19db      	adds	r3, r3, r7
 8007ee8:	0018      	movs	r0, r3
 8007eea:	23c6      	movs	r3, #198	; 0xc6
 8007eec:	001a      	movs	r2, r3
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f003 fe3a 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007ef4:	193b      	adds	r3, r7, r4
 8007ef6:	2265      	movs	r2, #101	; 0x65
 8007ef8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007efa:	003a      	movs	r2, r7
 8007efc:	193b      	adds	r3, r7, r4
 8007efe:	0011      	movs	r1, r2
 8007f00:	0018      	movs	r0, r3
 8007f02:	f001 f84f 	bl	8008fa4 <astronode_transport_send_receive>
 8007f06:	0003      	movs	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d147      	bne.n	8007f9c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007f0e:	195b      	adds	r3, r3, r5
 8007f10:	19db      	adds	r3, r3, r7
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2be5      	cmp	r3, #229	; 0xe5
 8007f16:	d141      	bne.n	8007f9c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007f1a:	195b      	adds	r3, r3, r5
 8007f1c:	19db      	adds	r3, r3, r7
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	001a      	movs	r2, r3
 8007f22:	2301      	movs	r3, #1
 8007f24:	4013      	ands	r3, r2
 8007f26:	d006      	beq.n	8007f36 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007f28:	4b1f      	ldr	r3, [pc, #124]	; (8007fa8 <astronode_send_evt_rr+0xe0>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007f2e:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <astronode_send_evt_rr+0xe4>)
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fb f927 	bl	8003184 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007f36:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007f38:	22c8      	movs	r2, #200	; 0xc8
 8007f3a:	0052      	lsls	r2, r2, #1
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	19db      	adds	r3, r3, r7
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	001a      	movs	r2, r3
 8007f44:	2302      	movs	r3, #2
 8007f46:	4013      	ands	r3, r2
 8007f48:	d006      	beq.n	8007f58 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007f4a:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <astronode_send_evt_rr+0xe8>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <astronode_send_evt_rr+0xec>)
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7fb f916 	bl	8003184 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007f5a:	22c8      	movs	r2, #200	; 0xc8
 8007f5c:	0052      	lsls	r2, r2, #1
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	19db      	adds	r3, r3, r7
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	001a      	movs	r2, r3
 8007f66:	2304      	movs	r3, #4
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d006      	beq.n	8007f7a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007f6c:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <astronode_send_evt_rr+0xf0>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <astronode_send_evt_rr+0xf4>)
 8007f74:	0018      	movs	r0, r3
 8007f76:	f7fb f905 	bl	8003184 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <astronode_send_evt_rr+0xdc>)
 8007f7c:	22c8      	movs	r2, #200	; 0xc8
 8007f7e:	0052      	lsls	r2, r2, #1
 8007f80:	189b      	adds	r3, r3, r2
 8007f82:	19db      	adds	r3, r3, r7
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	001a      	movs	r2, r3
 8007f88:	2308      	movs	r3, #8
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d006      	beq.n	8007f9c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <astronode_send_evt_rr+0xf8>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <astronode_send_evt_rr+0xfc>)
 8007f96:	0018      	movs	r0, r3
 8007f98:	f7fb f8f4 	bl	8003184 <send_debug_logs>
            }

        }
    }
}
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b064      	add	sp, #400	; 0x190
 8007fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa4:	fffffe70 	.word	0xfffffe70
 8007fa8:	20000bfc 	.word	0x20000bfc
 8007fac:	08012eec 	.word	0x08012eec
 8007fb0:	20000bfd 	.word	0x20000bfd
 8007fb4:	08012f10 	.word	0x08012f10
 8007fb8:	20000bfe 	.word	0x20000bfe
 8007fbc:	08012f28 	.word	0x08012f28
 8007fc0:	20000bff 	.word	0x20000bff
 8007fc4:	08012f3c 	.word	0x08012f3c

08007fc8 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b0e7      	sub	sp, #412	; 0x19c
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007fd2:	24d0      	movs	r4, #208	; 0xd0
 8007fd4:	193b      	adds	r3, r7, r4
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	23c6      	movs	r3, #198	; 0xc6
 8007fda:	001a      	movs	r2, r3
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f003 fdc3 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8007fe2:	4b56      	ldr	r3, [pc, #344]	; (800813c <astronode_send_geo_wr+0x174>)
 8007fe4:	26cc      	movs	r6, #204	; 0xcc
 8007fe6:	0076      	lsls	r6, r6, #1
 8007fe8:	199b      	adds	r3, r3, r6
 8007fea:	19db      	adds	r3, r3, r7
 8007fec:	0018      	movs	r0, r3
 8007fee:	23c6      	movs	r3, #198	; 0xc6
 8007ff0:	001a      	movs	r2, r3
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	f003 fdb8 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	2235      	movs	r2, #53	; 0x35
 8007ffc:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007ffe:	193b      	adds	r3, r7, r4
 8008000:	22c4      	movs	r2, #196	; 0xc4
 8008002:	5a9b      	ldrh	r3, [r3, r2]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	b290      	uxth	r0, r2
 8008008:	193a      	adds	r2, r7, r4
 800800a:	21c4      	movs	r1, #196	; 0xc4
 800800c:	5250      	strh	r0, [r2, r1]
 800800e:	0019      	movs	r1, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	193b      	adds	r3, r7, r4
 8008016:	185b      	adds	r3, r3, r1
 8008018:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	1218      	asrs	r0, r3, #8
 800801e:	0025      	movs	r5, r4
 8008020:	197b      	adds	r3, r7, r5
 8008022:	22c4      	movs	r2, #196	; 0xc4
 8008024:	5a9b      	ldrh	r3, [r3, r2]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	b294      	uxth	r4, r2
 800802a:	197a      	adds	r2, r7, r5
 800802c:	21c4      	movs	r1, #196	; 0xc4
 800802e:	5254      	strh	r4, [r2, r1]
 8008030:	0019      	movs	r1, r3
 8008032:	b2c2      	uxtb	r2, r0
 8008034:	002c      	movs	r4, r5
 8008036:	193b      	adds	r3, r7, r4
 8008038:	185b      	adds	r3, r3, r1
 800803a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1418      	asrs	r0, r3, #16
 8008040:	0025      	movs	r5, r4
 8008042:	197b      	adds	r3, r7, r5
 8008044:	22c4      	movs	r2, #196	; 0xc4
 8008046:	5a9b      	ldrh	r3, [r3, r2]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	b294      	uxth	r4, r2
 800804c:	197a      	adds	r2, r7, r5
 800804e:	21c4      	movs	r1, #196	; 0xc4
 8008050:	5254      	strh	r4, [r2, r1]
 8008052:	0019      	movs	r1, r3
 8008054:	b2c2      	uxtb	r2, r0
 8008056:	002c      	movs	r4, r5
 8008058:	193b      	adds	r3, r7, r4
 800805a:	185b      	adds	r3, r3, r1
 800805c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	1618      	asrs	r0, r3, #24
 8008062:	0025      	movs	r5, r4
 8008064:	197b      	adds	r3, r7, r5
 8008066:	22c4      	movs	r2, #196	; 0xc4
 8008068:	5a9b      	ldrh	r3, [r3, r2]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	b294      	uxth	r4, r2
 800806e:	197a      	adds	r2, r7, r5
 8008070:	21c4      	movs	r1, #196	; 0xc4
 8008072:	5254      	strh	r4, [r2, r1]
 8008074:	0019      	movs	r1, r3
 8008076:	b2c2      	uxtb	r2, r0
 8008078:	002c      	movs	r4, r5
 800807a:	193b      	adds	r3, r7, r4
 800807c:	185b      	adds	r3, r3, r1
 800807e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008080:	193b      	adds	r3, r7, r4
 8008082:	22c4      	movs	r2, #196	; 0xc4
 8008084:	5a9b      	ldrh	r3, [r3, r2]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	b290      	uxth	r0, r2
 800808a:	193a      	adds	r2, r7, r4
 800808c:	21c4      	movs	r1, #196	; 0xc4
 800808e:	5250      	strh	r0, [r2, r1]
 8008090:	0019      	movs	r1, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	b2da      	uxtb	r2, r3
 8008096:	193b      	adds	r3, r7, r4
 8008098:	185b      	adds	r3, r3, r1
 800809a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1218      	asrs	r0, r3, #8
 80080a0:	0025      	movs	r5, r4
 80080a2:	197b      	adds	r3, r7, r5
 80080a4:	22c4      	movs	r2, #196	; 0xc4
 80080a6:	5a9b      	ldrh	r3, [r3, r2]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	b294      	uxth	r4, r2
 80080ac:	197a      	adds	r2, r7, r5
 80080ae:	21c4      	movs	r1, #196	; 0xc4
 80080b0:	5254      	strh	r4, [r2, r1]
 80080b2:	0019      	movs	r1, r3
 80080b4:	b2c2      	uxtb	r2, r0
 80080b6:	002c      	movs	r4, r5
 80080b8:	193b      	adds	r3, r7, r4
 80080ba:	185b      	adds	r3, r3, r1
 80080bc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	1418      	asrs	r0, r3, #16
 80080c2:	0025      	movs	r5, r4
 80080c4:	197b      	adds	r3, r7, r5
 80080c6:	22c4      	movs	r2, #196	; 0xc4
 80080c8:	5a9b      	ldrh	r3, [r3, r2]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	b294      	uxth	r4, r2
 80080ce:	197a      	adds	r2, r7, r5
 80080d0:	21c4      	movs	r1, #196	; 0xc4
 80080d2:	5254      	strh	r4, [r2, r1]
 80080d4:	0019      	movs	r1, r3
 80080d6:	b2c2      	uxtb	r2, r0
 80080d8:	002c      	movs	r4, r5
 80080da:	193b      	adds	r3, r7, r4
 80080dc:	185b      	adds	r3, r3, r1
 80080de:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	1618      	asrs	r0, r3, #24
 80080e4:	0025      	movs	r5, r4
 80080e6:	197b      	adds	r3, r7, r5
 80080e8:	22c4      	movs	r2, #196	; 0xc4
 80080ea:	5a9b      	ldrh	r3, [r3, r2]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	b294      	uxth	r4, r2
 80080f0:	197a      	adds	r2, r7, r5
 80080f2:	21c4      	movs	r1, #196	; 0xc4
 80080f4:	5254      	strh	r4, [r2, r1]
 80080f6:	0019      	movs	r1, r3
 80080f8:	b2c2      	uxtb	r2, r0
 80080fa:	0028      	movs	r0, r5
 80080fc:	183b      	adds	r3, r7, r0
 80080fe:	185b      	adds	r3, r3, r1
 8008100:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008102:	2308      	movs	r3, #8
 8008104:	18fa      	adds	r2, r7, r3
 8008106:	183b      	adds	r3, r7, r0
 8008108:	0011      	movs	r1, r2
 800810a:	0018      	movs	r0, r3
 800810c:	f000 ff4a 	bl	8008fa4 <astronode_transport_send_receive>
 8008110:	0003      	movs	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10e      	bne.n	8008134 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <astronode_send_geo_wr+0x174>)
 8008118:	199b      	adds	r3, r3, r6
 800811a:	19db      	adds	r3, r3, r7
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2bb5      	cmp	r3, #181	; 0xb5
 8008120:	d104      	bne.n	800812c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <astronode_send_geo_wr+0x178>)
 8008124:	0018      	movs	r0, r3
 8008126:	f7fb f82d 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800812a:	e003      	b.n	8008134 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <astronode_send_geo_wr+0x17c>)
 800812e:	0018      	movs	r0, r3
 8008130:	f7fb f828 	bl	8003184 <send_debug_logs>
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	46bd      	mov	sp, r7
 8008138:	b067      	add	sp, #412	; 0x19c
 800813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813c:	fffffe70 	.word	0xfffffe70
 8008140:	08012f50 	.word	0x08012f50
 8008144:	08012f7c 	.word	0x08012f7c

08008148 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	b0fd      	sub	sp, #500	; 0x1f4
 800814c:	af02      	add	r7, sp, #8
 800814e:	6039      	str	r1, [r7, #0]
 8008150:	0011      	movs	r1, r2
 8008152:	4b4c      	ldr	r3, [pc, #304]	; (8008284 <astronode_send_pld_er+0x13c>)
 8008154:	26f4      	movs	r6, #244	; 0xf4
 8008156:	0076      	lsls	r6, r6, #1
 8008158:	199b      	adds	r3, r3, r6
 800815a:	19db      	adds	r3, r3, r7
 800815c:	1c02      	adds	r2, r0, #0
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	4b49      	ldr	r3, [pc, #292]	; (8008288 <astronode_send_pld_er+0x140>)
 8008162:	199b      	adds	r3, r3, r6
 8008164:	19db      	adds	r3, r3, r7
 8008166:	1c0a      	adds	r2, r1, #0
 8008168:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800816a:	2490      	movs	r4, #144	; 0x90
 800816c:	0064      	lsls	r4, r4, #1
 800816e:	193b      	adds	r3, r7, r4
 8008170:	0018      	movs	r0, r3
 8008172:	23c6      	movs	r3, #198	; 0xc6
 8008174:	001a      	movs	r2, r3
 8008176:	2100      	movs	r1, #0
 8008178:	f003 fcf6 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 800817c:	4b43      	ldr	r3, [pc, #268]	; (800828c <astronode_send_pld_er+0x144>)
 800817e:	199b      	adds	r3, r3, r6
 8008180:	19db      	adds	r3, r3, r7
 8008182:	0018      	movs	r0, r3
 8008184:	23c6      	movs	r3, #198	; 0xc6
 8008186:	001a      	movs	r2, r3
 8008188:	2100      	movs	r1, #0
 800818a:	f003 fced 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800818e:	193b      	adds	r3, r7, r4
 8008190:	2225      	movs	r2, #37	; 0x25
 8008192:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008194:	193b      	adds	r3, r7, r4
 8008196:	22c4      	movs	r2, #196	; 0xc4
 8008198:	5a9b      	ldrh	r3, [r3, r2]
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	b290      	uxth	r0, r2
 800819e:	193a      	adds	r2, r7, r4
 80081a0:	21c4      	movs	r1, #196	; 0xc4
 80081a2:	5250      	strh	r0, [r2, r1]
 80081a4:	0019      	movs	r1, r3
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <astronode_send_pld_er+0x13c>)
 80081a8:	199b      	adds	r3, r3, r6
 80081aa:	19db      	adds	r3, r3, r7
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	193b      	adds	r3, r7, r4
 80081b2:	185b      	adds	r3, r3, r1
 80081b4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80081b6:	4b33      	ldr	r3, [pc, #204]	; (8008284 <astronode_send_pld_er+0x13c>)
 80081b8:	199b      	adds	r3, r3, r6
 80081ba:	19db      	adds	r3, r3, r7
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b298      	uxth	r0, r3
 80081c2:	0025      	movs	r5, r4
 80081c4:	197b      	adds	r3, r7, r5
 80081c6:	22c4      	movs	r2, #196	; 0xc4
 80081c8:	5a9b      	ldrh	r3, [r3, r2]
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	b294      	uxth	r4, r2
 80081ce:	197a      	adds	r2, r7, r5
 80081d0:	21c4      	movs	r1, #196	; 0xc4
 80081d2:	5254      	strh	r4, [r2, r1]
 80081d4:	0019      	movs	r1, r3
 80081d6:	b2c2      	uxtb	r2, r0
 80081d8:	002c      	movs	r4, r5
 80081da:	193b      	adds	r3, r7, r4
 80081dc:	185b      	adds	r3, r3, r1
 80081de:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80081e0:	193b      	adds	r3, r7, r4
 80081e2:	22c4      	movs	r2, #196	; 0xc4
 80081e4:	5a9b      	ldrh	r3, [r3, r2]
 80081e6:	001a      	movs	r2, r3
 80081e8:	193b      	adds	r3, r7, r4
 80081ea:	189b      	adds	r3, r3, r2
 80081ec:	1c58      	adds	r0, r3, #1
 80081ee:	4b26      	ldr	r3, [pc, #152]	; (8008288 <astronode_send_pld_er+0x140>)
 80081f0:	199b      	adds	r3, r3, r6
 80081f2:	19db      	adds	r3, r3, r7
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	0019      	movs	r1, r3
 80081fa:	f003 fd9a 	bl	800bd32 <memcpy>
    request.payload_len = 2 + payload_length;
 80081fe:	4b22      	ldr	r3, [pc, #136]	; (8008288 <astronode_send_pld_er+0x140>)
 8008200:	199b      	adds	r3, r3, r6
 8008202:	19db      	adds	r3, r3, r7
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	3302      	adds	r3, #2
 8008208:	b299      	uxth	r1, r3
 800820a:	193b      	adds	r3, r7, r4
 800820c:	22c4      	movs	r2, #196	; 0xc4
 800820e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008210:	2358      	movs	r3, #88	; 0x58
 8008212:	18fa      	adds	r2, r7, r3
 8008214:	193b      	adds	r3, r7, r4
 8008216:	0011      	movs	r1, r2
 8008218:	0018      	movs	r0, r3
 800821a:	f000 fec3 	bl	8008fa4 <astronode_transport_send_receive>
 800821e:	0003      	movs	r3, r0
 8008220:	2b01      	cmp	r3, #1
 8008222:	d12a      	bne.n	800827a <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008224:	4b19      	ldr	r3, [pc, #100]	; (800828c <astronode_send_pld_er+0x144>)
 8008226:	199b      	adds	r3, r3, r6
 8008228:	19db      	adds	r3, r3, r7
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2ba5      	cmp	r3, #165	; 0xa5
 800822e:	d114      	bne.n	800825a <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8008230:	4b14      	ldr	r3, [pc, #80]	; (8008284 <astronode_send_pld_er+0x13c>)
 8008232:	199b      	adds	r3, r3, r6
 8008234:	19db      	adds	r3, r3, r7
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	22ea      	movs	r2, #234	; 0xea
 800823a:	32ff      	adds	r2, #255	; 0xff
 800823c:	0014      	movs	r4, r2
 800823e:	4a14      	ldr	r2, [pc, #80]	; (8008290 <astronode_send_pld_er+0x148>)
 8008240:	4914      	ldr	r1, [pc, #80]	; (8008294 <astronode_send_pld_er+0x14c>)
 8008242:	2508      	movs	r5, #8
 8008244:	1978      	adds	r0, r7, r5
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	0023      	movs	r3, r4
 800824a:	f003 fbf7 	bl	800ba3c <sprintf>
            send_debug_logs ( s ) ;
 800824e:	197b      	adds	r3, r7, r5
 8008250:	0018      	movs	r0, r3
 8008252:	f7fa ff97 	bl	8003184 <send_debug_logs>
            return true ;
 8008256:	2301      	movs	r3, #1
 8008258:	e010      	b.n	800827c <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800825a:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <astronode_send_pld_er+0x13c>)
 800825c:	22f4      	movs	r2, #244	; 0xf4
 800825e:	0052      	lsls	r2, r2, #1
 8008260:	189b      	adds	r3, r3, r2
 8008262:	19db      	adds	r3, r3, r7
 8008264:	881a      	ldrh	r2, [r3, #0]
 8008266:	490c      	ldr	r1, [pc, #48]	; (8008298 <astronode_send_pld_er+0x150>)
 8008268:	2408      	movs	r4, #8
 800826a:	193b      	adds	r3, r7, r4
 800826c:	0018      	movs	r0, r3
 800826e:	f003 fbe5 	bl	800ba3c <sprintf>
            send_debug_logs ( s ) ;
 8008272:	193b      	adds	r3, r7, r4
 8008274:	0018      	movs	r0, r3
 8008276:	f7fa ff85 	bl	8003184 <send_debug_logs>
        }
    }
    return false ;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b07b      	add	sp, #492	; 0x1ec
 8008282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008284:	fffffe1e 	.word	0xfffffe1e
 8008288:	fffffe1c 	.word	0xfffffe1c
 800828c:	fffffe70 	.word	0xfffffe70
 8008290:	08012ff4 	.word	0x08012ff4
 8008294:	08013020 	.word	0x08013020
 8008298:	0801303c 	.word	0x0801303c

0800829c <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 800829c:	b5b0      	push	{r4, r5, r7, lr}
 800829e:	b0e4      	sub	sp, #400	; 0x190
 80082a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80082a2:	24c8      	movs	r4, #200	; 0xc8
 80082a4:	193b      	adds	r3, r7, r4
 80082a6:	0018      	movs	r0, r3
 80082a8:	23c6      	movs	r3, #198	; 0xc6
 80082aa:	001a      	movs	r2, r3
 80082ac:	2100      	movs	r1, #0
 80082ae:	f003 fc5b 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 80082b2:	4b15      	ldr	r3, [pc, #84]	; (8008308 <astronode_send_pld_fr+0x6c>)
 80082b4:	25c8      	movs	r5, #200	; 0xc8
 80082b6:	006d      	lsls	r5, r5, #1
 80082b8:	195b      	adds	r3, r3, r5
 80082ba:	19db      	adds	r3, r3, r7
 80082bc:	0018      	movs	r0, r3
 80082be:	23c6      	movs	r3, #198	; 0xc6
 80082c0:	001a      	movs	r2, r3
 80082c2:	2100      	movs	r1, #0
 80082c4:	f003 fc50 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80082c8:	193b      	adds	r3, r7, r4
 80082ca:	2227      	movs	r2, #39	; 0x27
 80082cc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082ce:	003a      	movs	r2, r7
 80082d0:	193b      	adds	r3, r7, r4
 80082d2:	0011      	movs	r1, r2
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fe65 	bl	8008fa4 <astronode_transport_send_receive>
 80082da:	0003      	movs	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10e      	bne.n	80082fe <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80082e0:	4b09      	ldr	r3, [pc, #36]	; (8008308 <astronode_send_pld_fr+0x6c>)
 80082e2:	195b      	adds	r3, r3, r5
 80082e4:	19db      	adds	r3, r3, r7
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2ba7      	cmp	r3, #167	; 0xa7
 80082ea:	d104      	bne.n	80082f6 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80082ec:	4b07      	ldr	r3, [pc, #28]	; (800830c <astronode_send_pld_fr+0x70>)
 80082ee:	0018      	movs	r0, r3
 80082f0:	f7fa ff48 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80082f4:	e003      	b.n	80082fe <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <astronode_send_pld_fr+0x74>)
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7fa ff43 	bl	8003184 <send_debug_logs>
}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	46bd      	mov	sp, r7
 8008302:	b064      	add	sp, #400	; 0x190
 8008304:	bdb0      	pop	{r4, r5, r7, pc}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	fffffe70 	.word	0xfffffe70
 800830c:	0801306c 	.word	0x0801306c
 8008310:	080130a4 	.word	0x080130a4

08008314 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008314:	b5b0      	push	{r4, r5, r7, lr}
 8008316:	b0e4      	sub	sp, #400	; 0x190
 8008318:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800831a:	24c8      	movs	r4, #200	; 0xc8
 800831c:	193b      	adds	r3, r7, r4
 800831e:	0018      	movs	r0, r3
 8008320:	23c6      	movs	r3, #198	; 0xc6
 8008322:	001a      	movs	r2, r3
 8008324:	2100      	movs	r1, #0
 8008326:	f003 fc1f 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 800832a:	4b16      	ldr	r3, [pc, #88]	; (8008384 <astronode_send_res_cr+0x70>)
 800832c:	25c8      	movs	r5, #200	; 0xc8
 800832e:	006d      	lsls	r5, r5, #1
 8008330:	195b      	adds	r3, r3, r5
 8008332:	19db      	adds	r3, r3, r7
 8008334:	0018      	movs	r0, r3
 8008336:	23c6      	movs	r3, #198	; 0xc6
 8008338:	001a      	movs	r2, r3
 800833a:	2100      	movs	r1, #0
 800833c:	f003 fc14 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008340:	193b      	adds	r3, r7, r4
 8008342:	2255      	movs	r2, #85	; 0x55
 8008344:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008346:	003a      	movs	r2, r7
 8008348:	193b      	adds	r3, r7, r4
 800834a:	0011      	movs	r1, r2
 800834c:	0018      	movs	r0, r3
 800834e:	f000 fe29 	bl	8008fa4 <astronode_transport_send_receive>
 8008352:	0003      	movs	r3, r0
 8008354:	2b01      	cmp	r3, #1
 8008356:	d111      	bne.n	800837c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008358:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <astronode_send_res_cr+0x70>)
 800835a:	195b      	adds	r3, r3, r5
 800835c:	19db      	adds	r3, r3, r7
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2bd5      	cmp	r3, #213	; 0xd5
 8008362:	d107      	bne.n	8008374 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008364:	4b08      	ldr	r3, [pc, #32]	; (8008388 <astronode_send_res_cr+0x74>)
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800836a:	4b08      	ldr	r3, [pc, #32]	; (800838c <astronode_send_res_cr+0x78>)
 800836c:	0018      	movs	r0, r3
 800836e:	f7fa ff09 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008372:	e003      	b.n	800837c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <astronode_send_res_cr+0x7c>)
 8008376:	0018      	movs	r0, r3
 8008378:	f7fa ff04 	bl	8003184 <send_debug_logs>
}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b064      	add	sp, #400	; 0x190
 8008382:	bdb0      	pop	{r4, r5, r7, pc}
 8008384:	fffffe70 	.word	0xfffffe70
 8008388:	20000bfd 	.word	0x20000bfd
 800838c:	080130e0 	.word	0x080130e0
 8008390:	08013114 	.word	0x08013114

08008394 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008394:	b5b0      	push	{r4, r5, r7, lr}
 8008396:	b0fa      	sub	sp, #488	; 0x1e8
 8008398:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800839a:	258e      	movs	r5, #142	; 0x8e
 800839c:	006d      	lsls	r5, r5, #1
 800839e:	197b      	adds	r3, r7, r5
 80083a0:	0018      	movs	r0, r3
 80083a2:	23c6      	movs	r3, #198	; 0xc6
 80083a4:	001a      	movs	r2, r3
 80083a6:	2100      	movs	r1, #0
 80083a8:	f003 fbde 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0} ;
 80083ac:	4b28      	ldr	r3, [pc, #160]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 80083ae:	24f4      	movs	r4, #244	; 0xf4
 80083b0:	0064      	lsls	r4, r4, #1
 80083b2:	191b      	adds	r3, r3, r4
 80083b4:	19db      	adds	r3, r3, r7
 80083b6:	0018      	movs	r0, r3
 80083b8:	23c6      	movs	r3, #198	; 0xc6
 80083ba:	001a      	movs	r2, r3
 80083bc:	2100      	movs	r1, #0
 80083be:	f003 fbd3 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80083c2:	197b      	adds	r3, r7, r5
 80083c4:	2217      	movs	r2, #23
 80083c6:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083c8:	2354      	movs	r3, #84	; 0x54
 80083ca:	18fa      	adds	r2, r7, r3
 80083cc:	197b      	adds	r3, r7, r5
 80083ce:	0011      	movs	r1, r2
 80083d0:	0018      	movs	r0, r3
 80083d2:	f000 fde7 	bl	8008fa4 <astronode_transport_send_receive>
 80083d6:	0003      	movs	r3, r0
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d133      	bne.n	8008444 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80083dc:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 80083de:	0021      	movs	r1, r4
 80083e0:	185b      	adds	r3, r3, r1
 80083e2:	19db      	adds	r3, r3, r7
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b97      	cmp	r3, #151	; 0x97
 80083e8:	d128      	bne.n	800843c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80083ea:	4b19      	ldr	r3, [pc, #100]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 80083ec:	185b      	adds	r3, r3, r1
 80083ee:	19db      	adds	r3, r3, r7
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 80083f6:	185b      	adds	r3, r3, r1
 80083f8:	19db      	adds	r3, r3, r7
 80083fa:	789b      	ldrb	r3, [r3, #2]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008400:	4b13      	ldr	r3, [pc, #76]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 8008402:	185b      	adds	r3, r3, r1
 8008404:	19db      	adds	r3, r3, r7
 8008406:	78db      	ldrb	r3, [r3, #3]
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800840c:	4b10      	ldr	r3, [pc, #64]	; (8008450 <astronode_send_rtc_rr+0xbc>)
 800840e:	185b      	adds	r3, r3, r1
 8008410:	19db      	adds	r3, r3, r7
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	061b      	lsls	r3, r3, #24
 8008416:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008418:	24f2      	movs	r4, #242	; 0xf2
 800841a:	0064      	lsls	r4, r4, #1
 800841c:	193a      	adds	r2, r7, r4
 800841e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008420:	193b      	adds	r3, r7, r4
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	490b      	ldr	r1, [pc, #44]	; (8008454 <astronode_send_rtc_rr+0xc0>)
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	0018      	movs	r0, r3
 800842a:	f003 fb07 	bl	800ba3c <sprintf>
            send_debug_logs ( str ) ;
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	0018      	movs	r0, r3
 8008432:	f7fa fea7 	bl	8003184 <send_debug_logs>
            return rtc_time ;
 8008436:	193b      	adds	r3, r7, r4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	e004      	b.n	8008446 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <astronode_send_rtc_rr+0xc4>)
 800843e:	0018      	movs	r0, r3
 8008440:	f7fa fea0 	bl	8003184 <send_debug_logs>
        }
    }
    return 0 ;
 8008444:	2300      	movs	r3, #0
}
 8008446:	0018      	movs	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	b07a      	add	sp, #488	; 0x1e8
 800844c:	bdb0      	pop	{r4, r5, r7, pc}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	fffffe6c 	.word	0xfffffe6c
 8008454:	08013140 	.word	0x08013140
 8008458:	08013180 	.word	0x08013180

0800845c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 800845c:	b5b0      	push	{r4, r5, r7, lr}
 800845e:	b0f8      	sub	sp, #480	; 0x1e0
 8008460:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008462:	258c      	movs	r5, #140	; 0x8c
 8008464:	006d      	lsls	r5, r5, #1
 8008466:	197b      	adds	r3, r7, r5
 8008468:	0018      	movs	r0, r3
 800846a:	23c6      	movs	r3, #198	; 0xc6
 800846c:	001a      	movs	r2, r3
 800846e:	2100      	movs	r1, #0
 8008470:	f003 fb7a 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 8008474:	4b21      	ldr	r3, [pc, #132]	; (80084fc <astronode_send_sak_rr+0xa0>)
 8008476:	24f0      	movs	r4, #240	; 0xf0
 8008478:	0064      	lsls	r4, r4, #1
 800847a:	191b      	adds	r3, r3, r4
 800847c:	19db      	adds	r3, r3, r7
 800847e:	0018      	movs	r0, r3
 8008480:	23c6      	movs	r3, #198	; 0xc6
 8008482:	001a      	movs	r2, r3
 8008484:	2100      	movs	r1, #0
 8008486:	f003 fb6f 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800848a:	197b      	adds	r3, r7, r5
 800848c:	2245      	movs	r2, #69	; 0x45
 800848e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008490:	2350      	movs	r3, #80	; 0x50
 8008492:	18fa      	adds	r2, r7, r3
 8008494:	197b      	adds	r3, r7, r5
 8008496:	0011      	movs	r1, r2
 8008498:	0018      	movs	r0, r3
 800849a:	f000 fd83 	bl	8008fa4 <astronode_transport_send_receive>
 800849e:	0003      	movs	r3, r0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d126      	bne.n	80084f2 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80084a4:	4b15      	ldr	r3, [pc, #84]	; (80084fc <astronode_send_sak_rr+0xa0>)
 80084a6:	191b      	adds	r3, r3, r4
 80084a8:	19db      	adds	r3, r3, r7
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2bc5      	cmp	r3, #197	; 0xc5
 80084ae:	d11c      	bne.n	80084ea <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80084b0:	4b12      	ldr	r3, [pc, #72]	; (80084fc <astronode_send_sak_rr+0xa0>)
 80084b2:	191b      	adds	r3, r3, r4
 80084b4:	19db      	adds	r3, r3, r7
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	b299      	uxth	r1, r3
 80084ba:	4b10      	ldr	r3, [pc, #64]	; (80084fc <astronode_send_sak_rr+0xa0>)
 80084bc:	191b      	adds	r3, r3, r4
 80084be:	19db      	adds	r3, r3, r7
 80084c0:	789b      	ldrb	r3, [r3, #2]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	20ef      	movs	r0, #239	; 0xef
 80084ca:	0040      	lsls	r0, r0, #1
 80084cc:	183b      	adds	r3, r7, r0
 80084ce:	188a      	adds	r2, r1, r2
 80084d0:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80084d2:	183b      	adds	r3, r7, r0
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	490a      	ldr	r1, [pc, #40]	; (8008500 <astronode_send_sak_rr+0xa4>)
 80084d8:	003b      	movs	r3, r7
 80084da:	0018      	movs	r0, r3
 80084dc:	f003 faae 	bl	800ba3c <sprintf>
            send_debug_logs(str);
 80084e0:	003b      	movs	r3, r7
 80084e2:	0018      	movs	r0, r3
 80084e4:	f7fa fe4e 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80084e8:	e003      	b.n	80084f2 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80084ea:	4b06      	ldr	r3, [pc, #24]	; (8008504 <astronode_send_sak_rr+0xa8>)
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7fa fe49 	bl	8003184 <send_debug_logs>
}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b078      	add	sp, #480	; 0x1e0
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	fffffe70 	.word	0xfffffe70
 8008500:	0801319c 	.word	0x0801319c
 8008504:	080131c8 	.word	0x080131c8

08008508 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008508:	b5b0      	push	{r4, r5, r7, lr}
 800850a:	b0e4      	sub	sp, #400	; 0x190
 800850c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800850e:	24c8      	movs	r4, #200	; 0xc8
 8008510:	193b      	adds	r3, r7, r4
 8008512:	0018      	movs	r0, r3
 8008514:	23c6      	movs	r3, #198	; 0xc6
 8008516:	001a      	movs	r2, r3
 8008518:	2100      	movs	r1, #0
 800851a:	f003 fb25 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <astronode_send_sak_cr+0x70>)
 8008520:	25c8      	movs	r5, #200	; 0xc8
 8008522:	006d      	lsls	r5, r5, #1
 8008524:	195b      	adds	r3, r3, r5
 8008526:	19db      	adds	r3, r3, r7
 8008528:	0018      	movs	r0, r3
 800852a:	23c6      	movs	r3, #198	; 0xc6
 800852c:	001a      	movs	r2, r3
 800852e:	2100      	movs	r1, #0
 8008530:	f003 fb1a 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008534:	193b      	adds	r3, r7, r4
 8008536:	2246      	movs	r2, #70	; 0x46
 8008538:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800853a:	003a      	movs	r2, r7
 800853c:	193b      	adds	r3, r7, r4
 800853e:	0011      	movs	r1, r2
 8008540:	0018      	movs	r0, r3
 8008542:	f000 fd2f 	bl	8008fa4 <astronode_transport_send_receive>
 8008546:	0003      	movs	r3, r0
 8008548:	2b01      	cmp	r3, #1
 800854a:	d111      	bne.n	8008570 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <astronode_send_sak_cr+0x70>)
 800854e:	195b      	adds	r3, r3, r5
 8008550:	19db      	adds	r3, r3, r7
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2bc6      	cmp	r3, #198	; 0xc6
 8008556:	d107      	bne.n	8008568 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008558:	4b08      	ldr	r3, [pc, #32]	; (800857c <astronode_send_sak_cr+0x74>)
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800855e:	4b08      	ldr	r3, [pc, #32]	; (8008580 <astronode_send_sak_cr+0x78>)
 8008560:	0018      	movs	r0, r3
 8008562:	f7fa fe0f 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008566:	e003      	b.n	8008570 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <astronode_send_sak_cr+0x7c>)
 800856a:	0018      	movs	r0, r3
 800856c:	f7fa fe0a 	bl	8003184 <send_debug_logs>
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b064      	add	sp, #400	; 0x190
 8008576:	bdb0      	pop	{r4, r5, r7, pc}
 8008578:	fffffe70 	.word	0xfffffe70
 800857c:	20000bfc 	.word	0x20000bfc
 8008580:	080131fc 	.word	0x080131fc
 8008584:	08013224 	.word	0x08013224

08008588 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800858a:	b0ed      	sub	sp, #436	; 0x1b4
 800858c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800858e:	21c8      	movs	r1, #200	; 0xc8
 8008590:	2318      	movs	r3, #24
 8008592:	18cb      	adds	r3, r1, r3
 8008594:	19db      	adds	r3, r3, r7
 8008596:	0018      	movs	r0, r3
 8008598:	23c6      	movs	r3, #198	; 0xc6
 800859a:	001a      	movs	r2, r3
 800859c:	2100      	movs	r1, #0
 800859e:	f003 fae3 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 80085a2:	4b4a      	ldr	r3, [pc, #296]	; (80086cc <astronode_send_mpn_rr+0x144>)
 80085a4:	26cc      	movs	r6, #204	; 0xcc
 80085a6:	0076      	lsls	r6, r6, #1
 80085a8:	199b      	adds	r3, r3, r6
 80085aa:	2218      	movs	r2, #24
 80085ac:	4694      	mov	ip, r2
 80085ae:	44bc      	add	ip, r7
 80085b0:	4463      	add	r3, ip
 80085b2:	0018      	movs	r0, r3
 80085b4:	23c6      	movs	r3, #198	; 0xc6
 80085b6:	001a      	movs	r2, r3
 80085b8:	2100      	movs	r1, #0
 80085ba:	f003 fad5 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80085be:	21c8      	movs	r1, #200	; 0xc8
 80085c0:	2318      	movs	r3, #24
 80085c2:	18cb      	adds	r3, r1, r3
 80085c4:	19db      	adds	r3, r3, r7
 80085c6:	221b      	movs	r2, #27
 80085c8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085ca:	2318      	movs	r3, #24
 80085cc:	18fa      	adds	r2, r7, r3
 80085ce:	2318      	movs	r3, #24
 80085d0:	18cb      	adds	r3, r1, r3
 80085d2:	19db      	adds	r3, r3, r7
 80085d4:	0011      	movs	r1, r2
 80085d6:	0018      	movs	r0, r3
 80085d8:	f000 fce4 	bl	8008fa4 <astronode_transport_send_receive>
 80085dc:	0003      	movs	r3, r0
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d16f      	bne.n	80086c2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80085e2:	4b3a      	ldr	r3, [pc, #232]	; (80086cc <astronode_send_mpn_rr+0x144>)
 80085e4:	0032      	movs	r2, r6
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	2118      	movs	r1, #24
 80085ea:	468c      	mov	ip, r1
 80085ec:	44bc      	add	ip, r7
 80085ee:	4463      	add	r3, ip
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b9b      	cmp	r3, #155	; 0x9b
 80085f4:	d161      	bne.n	80086ba <astronode_send_mpn_rr+0x132>
        {
 80085f6:	466b      	mov	r3, sp
 80085f8:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 80085fa:	4b34      	ldr	r3, [pc, #208]	; (80086cc <astronode_send_mpn_rr+0x144>)
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	2218      	movs	r2, #24
 8008600:	4694      	mov	ip, r2
 8008602:	44bc      	add	ip, r7
 8008604:	4463      	add	r3, ip
 8008606:	22c4      	movs	r2, #196	; 0xc4
 8008608:	5a9b      	ldrh	r3, [r3, r2]
 800860a:	001a      	movs	r2, r3
 800860c:	3a01      	subs	r2, #1
 800860e:	21ca      	movs	r1, #202	; 0xca
 8008610:	0049      	lsls	r1, r1, #1
 8008612:	2018      	movs	r0, #24
 8008614:	1809      	adds	r1, r1, r0
 8008616:	19c9      	adds	r1, r1, r7
 8008618:	600a      	str	r2, [r1, #0]
 800861a:	001c      	movs	r4, r3
 800861c:	2200      	movs	r2, #0
 800861e:	0015      	movs	r5, r2
 8008620:	0020      	movs	r0, r4
 8008622:	0029      	movs	r1, r5
 8008624:	0004      	movs	r4, r0
 8008626:	0f62      	lsrs	r2, r4, #29
 8008628:	000c      	movs	r4, r1
 800862a:	00e4      	lsls	r4, r4, #3
 800862c:	617c      	str	r4, [r7, #20]
 800862e:	697c      	ldr	r4, [r7, #20]
 8008630:	4314      	orrs	r4, r2
 8008632:	617c      	str	r4, [r7, #20]
 8008634:	0001      	movs	r1, r0
 8008636:	00c9      	lsls	r1, r1, #3
 8008638:	6139      	str	r1, [r7, #16]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	2200      	movs	r2, #0
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	6838      	ldr	r0, [r7, #0]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	0004      	movs	r4, r0
 8008646:	0f62      	lsrs	r2, r4, #29
 8008648:	000c      	movs	r4, r1
 800864a:	00e4      	lsls	r4, r4, #3
 800864c:	60fc      	str	r4, [r7, #12]
 800864e:	68fc      	ldr	r4, [r7, #12]
 8008650:	4314      	orrs	r4, r2
 8008652:	60fc      	str	r4, [r7, #12]
 8008654:	0001      	movs	r1, r0
 8008656:	00ca      	lsls	r2, r1, #3
 8008658:	60ba      	str	r2, [r7, #8]
 800865a:	3307      	adds	r3, #7
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	4669      	mov	r1, sp
 8008662:	1acb      	subs	r3, r1, r3
 8008664:	469d      	mov	sp, r3
 8008666:	466b      	mov	r3, sp
 8008668:	3300      	adds	r3, #0
 800866a:	24c8      	movs	r4, #200	; 0xc8
 800866c:	0064      	lsls	r4, r4, #1
 800866e:	2218      	movs	r2, #24
 8008670:	18a2      	adds	r2, r4, r2
 8008672:	19d1      	adds	r1, r2, r7
 8008674:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <astronode_send_mpn_rr+0x148>)
 8008678:	0018      	movs	r0, r3
 800867a:	f7fa fd83 	bl	8003184 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <astronode_send_mpn_rr+0x144>)
 8008680:	22cc      	movs	r2, #204	; 0xcc
 8008682:	0052      	lsls	r2, r2, #1
 8008684:	189b      	adds	r3, r3, r2
 8008686:	2218      	movs	r2, #24
 8008688:	4694      	mov	ip, r2
 800868a:	44bc      	add	ip, r7
 800868c:	4463      	add	r3, ip
 800868e:	22c4      	movs	r2, #196	; 0xc4
 8008690:	5a9b      	ldrh	r3, [r3, r2]
 8008692:	0019      	movs	r1, r3
 8008694:	2318      	movs	r3, #24
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	3301      	adds	r3, #1
 800869a:	4a0e      	ldr	r2, [pc, #56]	; (80086d4 <astronode_send_mpn_rr+0x14c>)
 800869c:	2018      	movs	r0, #24
 800869e:	1820      	adds	r0, r4, r0
 80086a0:	19c0      	adds	r0, r0, r7
 80086a2:	6800      	ldr	r0, [r0, #0]
 80086a4:	f003 f996 	bl	800b9d4 <snprintf>
            send_debug_logs(product_number);
 80086a8:	2318      	movs	r3, #24
 80086aa:	18e3      	adds	r3, r4, r3
 80086ac:	19db      	adds	r3, r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7fa fd67 	bl	8003184 <send_debug_logs>
 80086b6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80086b8:	e003      	b.n	80086c2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <astronode_send_mpn_rr+0x150>)
 80086bc:	0018      	movs	r0, r3
 80086be:	f7fa fd61 	bl	8003184 <send_debug_logs>
}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b06d      	add	sp, #436	; 0x1b4
 80086c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	fffffe68 	.word	0xfffffe68
 80086d0:	080132ec 	.word	0x080132ec
 80086d4:	08012e08 	.word	0x08012e08
 80086d8:	08012e44 	.word	0x08012e44

080086dc <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80086dc:	b5b0      	push	{r4, r5, r7, lr}
 80086de:	b0e4      	sub	sp, #400	; 0x190
 80086e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80086e2:	24c8      	movs	r4, #200	; 0xc8
 80086e4:	193b      	adds	r3, r7, r4
 80086e6:	0018      	movs	r0, r3
 80086e8:	23c6      	movs	r3, #198	; 0xc6
 80086ea:	001a      	movs	r2, r3
 80086ec:	2100      	movs	r1, #0
 80086ee:	f003 fa3b 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <astronode_send_cmd_cr+0x70>)
 80086f4:	25c8      	movs	r5, #200	; 0xc8
 80086f6:	006d      	lsls	r5, r5, #1
 80086f8:	195b      	adds	r3, r3, r5
 80086fa:	19db      	adds	r3, r3, r7
 80086fc:	0018      	movs	r0, r3
 80086fe:	23c6      	movs	r3, #198	; 0xc6
 8008700:	001a      	movs	r2, r3
 8008702:	2100      	movs	r1, #0
 8008704:	f003 fa30 	bl	800bb68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008708:	193b      	adds	r3, r7, r4
 800870a:	2248      	movs	r2, #72	; 0x48
 800870c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800870e:	003a      	movs	r2, r7
 8008710:	193b      	adds	r3, r7, r4
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f000 fc45 	bl	8008fa4 <astronode_transport_send_receive>
 800871a:	0003      	movs	r3, r0
 800871c:	2b01      	cmp	r3, #1
 800871e:	d111      	bne.n	8008744 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <astronode_send_cmd_cr+0x70>)
 8008722:	195b      	adds	r3, r3, r5
 8008724:	19db      	adds	r3, r3, r7
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2bc8      	cmp	r3, #200	; 0xc8
 800872a:	d107      	bne.n	800873c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <astronode_send_cmd_cr+0x74>)
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <astronode_send_cmd_cr+0x78>)
 8008734:	0018      	movs	r0, r3
 8008736:	f7fa fd25 	bl	8003184 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800873a:	e003      	b.n	8008744 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <astronode_send_cmd_cr+0x7c>)
 800873e:	0018      	movs	r0, r3
 8008740:	f7fa fd20 	bl	8003184 <send_debug_logs>
}
 8008744:	46c0      	nop			; (mov r8, r8)
 8008746:	46bd      	mov	sp, r7
 8008748:	b064      	add	sp, #400	; 0x190
 800874a:	bdb0      	pop	{r4, r5, r7, pc}
 800874c:	fffffe70 	.word	0xfffffe70
 8008750:	20000bfe 	.word	0x20000bfe
 8008754:	0801373c 	.word	0x0801373c
 8008758:	08013760 	.word	0x08013760

0800875c <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875e:	4cc6      	ldr	r4, [pc, #792]	; (8008a78 <astronode_send_cmd_rr+0x31c>)
 8008760:	44a5      	add	sp, r4
 8008762:	af00      	add	r7, sp, #0
 8008764:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008766:	2190      	movs	r1, #144	; 0x90
 8008768:	0049      	lsls	r1, r1, #1
 800876a:	2318      	movs	r3, #24
 800876c:	18cb      	adds	r3, r1, r3
 800876e:	19db      	adds	r3, r3, r7
 8008770:	0018      	movs	r0, r3
 8008772:	23c6      	movs	r3, #198	; 0xc6
 8008774:	001a      	movs	r2, r3
 8008776:	2100      	movs	r1, #0
 8008778:	f003 f9f6 	bl	800bb68 <memset>
    astronode_app_msg_t answer = {0};
 800877c:	4bbf      	ldr	r3, [pc, #764]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 800877e:	26fc      	movs	r6, #252	; 0xfc
 8008780:	0076      	lsls	r6, r6, #1
 8008782:	199b      	adds	r3, r3, r6
 8008784:	2218      	movs	r2, #24
 8008786:	4694      	mov	ip, r2
 8008788:	44bc      	add	ip, r7
 800878a:	4463      	add	r3, ip
 800878c:	0018      	movs	r0, r3
 800878e:	23c6      	movs	r3, #198	; 0xc6
 8008790:	001a      	movs	r2, r3
 8008792:	2100      	movs	r1, #0
 8008794:	f003 f9e8 	bl	800bb68 <memset>
    bool result = false ;
 8008798:	23f8      	movs	r3, #248	; 0xf8
 800879a:	33ff      	adds	r3, #255	; 0xff
 800879c:	2218      	movs	r2, #24
 800879e:	189b      	adds	r3, r3, r2
 80087a0:	19db      	adds	r3, r3, r7
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80087a6:	2190      	movs	r1, #144	; 0x90
 80087a8:	0049      	lsls	r1, r1, #1
 80087aa:	2318      	movs	r3, #24
 80087ac:	18cb      	adds	r3, r1, r3
 80087ae:	19db      	adds	r3, r3, r7
 80087b0:	2247      	movs	r2, #71	; 0x47
 80087b2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087b4:	2358      	movs	r3, #88	; 0x58
 80087b6:	2218      	movs	r2, #24
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	19da      	adds	r2, r3, r7
 80087bc:	2318      	movs	r3, #24
 80087be:	18cb      	adds	r3, r1, r3
 80087c0:	19db      	adds	r3, r3, r7
 80087c2:	0011      	movs	r1, r2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 fbed 	bl	8008fa4 <astronode_transport_send_receive>
 80087ca:	0003      	movs	r3, r0
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d000      	beq.n	80087d2 <astronode_send_cmd_rr+0x76>
 80087d0:	e146      	b.n	8008a60 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80087d2:	4baa      	ldr	r3, [pc, #680]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 80087d4:	199b      	adds	r3, r3, r6
 80087d6:	2218      	movs	r2, #24
 80087d8:	4694      	mov	ip, r2
 80087da:	44bc      	add	ip, r7
 80087dc:	4463      	add	r3, ip
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2bc7      	cmp	r3, #199	; 0xc7
 80087e2:	d000      	beq.n	80087e6 <astronode_send_cmd_rr+0x8a>
 80087e4:	e138      	b.n	8008a58 <astronode_send_cmd_rr+0x2fc>
        {
 80087e6:	466b      	mov	r3, sp
 80087e8:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80087ea:	4ba5      	ldr	r3, [pc, #660]	; (8008a80 <astronode_send_cmd_rr+0x324>)
 80087ec:	0018      	movs	r0, r3
 80087ee:	f7fa fcc9 	bl	8003184 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 80087f2:	4ba2      	ldr	r3, [pc, #648]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 80087f4:	21fc      	movs	r1, #252	; 0xfc
 80087f6:	0049      	lsls	r1, r1, #1
 80087f8:	185b      	adds	r3, r3, r1
 80087fa:	2218      	movs	r2, #24
 80087fc:	4694      	mov	ip, r2
 80087fe:	44bc      	add	ip, r7
 8008800:	4463      	add	r3, ip
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008806:	4b9d      	ldr	r3, [pc, #628]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 8008808:	185b      	adds	r3, r3, r1
 800880a:	2018      	movs	r0, #24
 800880c:	4684      	mov	ip, r0
 800880e:	44bc      	add	ip, r7
 8008810:	4463      	add	r3, ip
 8008812:	789b      	ldrb	r3, [r3, #2]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008818:	4b98      	ldr	r3, [pc, #608]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 800881a:	185b      	adds	r3, r3, r1
 800881c:	2018      	movs	r0, #24
 800881e:	4684      	mov	ip, r0
 8008820:	44bc      	add	ip, r7
 8008822:	4463      	add	r3, ip
 8008824:	78db      	ldrb	r3, [r3, #3]
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800882a:	4b94      	ldr	r3, [pc, #592]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 800882c:	185b      	adds	r3, r3, r1
 800882e:	2118      	movs	r1, #24
 8008830:	468c      	mov	ip, r1
 8008832:	44bc      	add	ip, r7
 8008834:	4463      	add	r3, ip
 8008836:	791b      	ldrb	r3, [r3, #4]
 8008838:	061b      	lsls	r3, r3, #24
 800883a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800883c:	22f8      	movs	r2, #248	; 0xf8
 800883e:	0052      	lsls	r2, r2, #1
 8008840:	2118      	movs	r1, #24
 8008842:	1851      	adds	r1, r2, r1
 8008844:	19c8      	adds	r0, r1, r7
 8008846:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008848:	2318      	movs	r3, #24
 800884a:	18d3      	adds	r3, r2, r3
 800884c:	19db      	adds	r3, r3, r7
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	498c      	ldr	r1, [pc, #560]	; (8008a84 <astronode_send_cmd_rr+0x328>)
 8008852:	2308      	movs	r3, #8
 8008854:	2018      	movs	r0, #24
 8008856:	181b      	adds	r3, r3, r0
 8008858:	19db      	adds	r3, r3, r7
 800885a:	0018      	movs	r0, r3
 800885c:	f003 f8ee 	bl	800ba3c <sprintf>
            send_debug_logs(str);
 8008860:	2308      	movs	r3, #8
 8008862:	2218      	movs	r2, #24
 8008864:	189b      	adds	r3, r3, r2
 8008866:	19db      	adds	r3, r3, r7
 8008868:	0018      	movs	r0, r3
 800886a:	f7fa fc8b 	bl	8003184 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 800886e:	4b83      	ldr	r3, [pc, #524]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 8008870:	21fc      	movs	r1, #252	; 0xfc
 8008872:	0049      	lsls	r1, r1, #1
 8008874:	185b      	adds	r3, r3, r1
 8008876:	2218      	movs	r2, #24
 8008878:	4694      	mov	ip, r2
 800887a:	44bc      	add	ip, r7
 800887c:	4463      	add	r3, ip
 800887e:	22c4      	movs	r2, #196	; 0xc4
 8008880:	5a9b      	ldrh	r3, [r3, r2]
 8008882:	2b2c      	cmp	r3, #44	; 0x2c
 8008884:	d00e      	beq.n	80088a4 <astronode_send_cmd_rr+0x148>
 8008886:	4b7d      	ldr	r3, [pc, #500]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 8008888:	185b      	adds	r3, r3, r1
 800888a:	2218      	movs	r2, #24
 800888c:	4694      	mov	ip, r2
 800888e:	44bc      	add	ip, r7
 8008890:	4463      	add	r3, ip
 8008892:	22c4      	movs	r2, #196	; 0xc4
 8008894:	5a9b      	ldrh	r3, [r3, r2]
 8008896:	2b0c      	cmp	r3, #12
 8008898:	d004      	beq.n	80088a4 <astronode_send_cmd_rr+0x148>
            {
                send_debug_logs("Command size error");
 800889a:	4b7b      	ldr	r3, [pc, #492]	; (8008a88 <astronode_send_cmd_rr+0x32c>)
 800889c:	0018      	movs	r0, r3
 800889e:	f7fa fc71 	bl	8003184 <send_debug_logs>
                return;
 80088a2:	e0d7      	b.n	8008a54 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 80088a4:	4b75      	ldr	r3, [pc, #468]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 80088a6:	22fc      	movs	r2, #252	; 0xfc
 80088a8:	0052      	lsls	r2, r2, #1
 80088aa:	189b      	adds	r3, r3, r2
 80088ac:	2218      	movs	r2, #24
 80088ae:	4694      	mov	ip, r2
 80088b0:	44bc      	add	ip, r7
 80088b2:	4463      	add	r3, ip
 80088b4:	22c4      	movs	r2, #196	; 0xc4
 80088b6:	5a9b      	ldrh	r3, [r3, r2]
 80088b8:	001a      	movs	r2, r3
 80088ba:	3a01      	subs	r2, #1
 80088bc:	21f6      	movs	r1, #246	; 0xf6
 80088be:	0049      	lsls	r1, r1, #1
 80088c0:	2018      	movs	r0, #24
 80088c2:	1809      	adds	r1, r1, r0
 80088c4:	19c9      	adds	r1, r1, r7
 80088c6:	600a      	str	r2, [r1, #0]
 80088c8:	001c      	movs	r4, r3
 80088ca:	2200      	movs	r2, #0
 80088cc:	0015      	movs	r5, r2
 80088ce:	0020      	movs	r0, r4
 80088d0:	0029      	movs	r1, r5
 80088d2:	0004      	movs	r4, r0
 80088d4:	0f62      	lsrs	r2, r4, #29
 80088d6:	000c      	movs	r4, r1
 80088d8:	00e4      	lsls	r4, r4, #3
 80088da:	617c      	str	r4, [r7, #20]
 80088dc:	697c      	ldr	r4, [r7, #20]
 80088de:	4314      	orrs	r4, r2
 80088e0:	617c      	str	r4, [r7, #20]
 80088e2:	0001      	movs	r1, r0
 80088e4:	00c9      	lsls	r1, r1, #3
 80088e6:	6139      	str	r1, [r7, #16]
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	607a      	str	r2, [r7, #4]
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	0004      	movs	r4, r0
 80088f4:	0f62      	lsrs	r2, r4, #29
 80088f6:	000c      	movs	r4, r1
 80088f8:	00e4      	lsls	r4, r4, #3
 80088fa:	60fc      	str	r4, [r7, #12]
 80088fc:	68fc      	ldr	r4, [r7, #12]
 80088fe:	4314      	orrs	r4, r2
 8008900:	60fc      	str	r4, [r7, #12]
 8008902:	0001      	movs	r1, r0
 8008904:	00ca      	lsls	r2, r1, #3
 8008906:	60ba      	str	r2, [r7, #8]
 8008908:	3307      	adds	r3, #7
 800890a:	08db      	lsrs	r3, r3, #3
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	4669      	mov	r1, sp
 8008910:	1acb      	subs	r3, r1, r3
 8008912:	469d      	mov	sp, r3
 8008914:	466b      	mov	r3, sp
 8008916:	3300      	adds	r3, #0
 8008918:	20f4      	movs	r0, #244	; 0xf4
 800891a:	0040      	lsls	r0, r0, #1
 800891c:	2218      	movs	r2, #24
 800891e:	1882      	adds	r2, r0, r2
 8008920:	19d1      	adds	r1, r2, r7
 8008922:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008924:	4b55      	ldr	r3, [pc, #340]	; (8008a7c <astronode_send_cmd_rr+0x320>)
 8008926:	22fc      	movs	r2, #252	; 0xfc
 8008928:	0052      	lsls	r2, r2, #1
 800892a:	189b      	adds	r3, r3, r2
 800892c:	2218      	movs	r2, #24
 800892e:	4694      	mov	ip, r2
 8008930:	44bc      	add	ip, r7
 8008932:	4463      	add	r3, ip
 8008934:	22c4      	movs	r2, #196	; 0xc4
 8008936:	5a9b      	ldrh	r3, [r3, r2]
 8008938:	3b03      	subs	r3, #3
 800893a:	0019      	movs	r1, r3
 800893c:	2358      	movs	r3, #88	; 0x58
 800893e:	2218      	movs	r2, #24
 8008940:	189b      	adds	r3, r3, r2
 8008942:	19db      	adds	r3, r3, r7
 8008944:	3305      	adds	r3, #5
 8008946:	4a51      	ldr	r2, [pc, #324]	; (8008a8c <astronode_send_cmd_rr+0x330>)
 8008948:	2418      	movs	r4, #24
 800894a:	1900      	adds	r0, r0, r4
 800894c:	19c0      	adds	r0, r0, r7
 800894e:	6800      	ldr	r0, [r0, #0]
 8008950:	f003 f840 	bl	800b9d4 <snprintf>
 8008954:	0002      	movs	r2, r0
 8008956:	23f3      	movs	r3, #243	; 0xf3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	2118      	movs	r1, #24
 800895c:	185b      	adds	r3, r3, r1
 800895e:	19db      	adds	r3, r3, r7
 8008960:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008962:	23fb      	movs	r3, #251	; 0xfb
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	2218      	movs	r2, #24
 8008968:	189b      	adds	r3, r3, r2
 800896a:	19db      	adds	r3, r3, r7
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	e036      	b.n	80089e0 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008972:	23fb      	movs	r3, #251	; 0xfb
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	2218      	movs	r2, #24
 8008978:	189b      	adds	r3, r3, r2
 800897a:	19db      	adds	r3, r3, r7
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	22f4      	movs	r2, #244	; 0xf4
 8008980:	0052      	lsls	r2, r2, #1
 8008982:	2118      	movs	r1, #24
 8008984:	1852      	adds	r2, r2, r1
 8008986:	19d2      	adds	r2, r2, r7
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	5cd3      	ldrb	r3, [r2, r3]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	4b40      	ldr	r3, [pc, #256]	; (8008a90 <astronode_send_cmd_rr+0x334>)
 8008990:	18d3      	adds	r3, r2, r3
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	001a      	movs	r2, r3
 8008996:	2397      	movs	r3, #151	; 0x97
 8008998:	4013      	ands	r3, r2
 800899a:	d104      	bne.n	80089a6 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 800899c:	4b3d      	ldr	r3, [pc, #244]	; (8008a94 <astronode_send_cmd_rr+0x338>)
 800899e:	0018      	movs	r0, r3
 80089a0:	f7fa fbf0 	bl	8003184 <send_debug_logs>
                    return;
 80089a4:	e056      	b.n	8008a54 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 80089a6:	20fb      	movs	r0, #251	; 0xfb
 80089a8:	0040      	lsls	r0, r0, #1
 80089aa:	2318      	movs	r3, #24
 80089ac:	18c3      	adds	r3, r0, r3
 80089ae:	19db      	adds	r3, r3, r7
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	2318      	movs	r3, #24
 80089b4:	18c3      	adds	r3, r0, r3
 80089b6:	19db      	adds	r3, r3, r7
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	69f9      	ldr	r1, [r7, #28]
 80089bc:	18cb      	adds	r3, r1, r3
 80089be:	21f4      	movs	r1, #244	; 0xf4
 80089c0:	0049      	lsls	r1, r1, #1
 80089c2:	2418      	movs	r4, #24
 80089c4:	1909      	adds	r1, r1, r4
 80089c6:	19c9      	adds	r1, r1, r7
 80089c8:	6809      	ldr	r1, [r1, #0]
 80089ca:	5c8a      	ldrb	r2, [r1, r2]
 80089cc:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 80089ce:	2318      	movs	r3, #24
 80089d0:	18c3      	adds	r3, r0, r3
 80089d2:	19db      	adds	r3, r3, r7
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	2318      	movs	r3, #24
 80089d8:	18c3      	adds	r3, r0, r3
 80089da:	19db      	adds	r3, r3, r7
 80089dc:	3201      	adds	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	23fb      	movs	r3, #251	; 0xfb
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	2218      	movs	r2, #24
 80089e6:	189b      	adds	r3, r3, r2
 80089e8:	19db      	adds	r3, r3, r7
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	21f3      	movs	r1, #243	; 0xf3
 80089f0:	0049      	lsls	r1, r1, #1
 80089f2:	2218      	movs	r2, #24
 80089f4:	188a      	adds	r2, r1, r2
 80089f6:	19d2      	adds	r2, r2, r7
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d8b9      	bhi.n	8008972 <astronode_send_cmd_rr+0x216>
            }
            result = true ;
 80089fe:	23f8      	movs	r3, #248	; 0xf8
 8008a00:	33ff      	adds	r3, #255	; 0xff
 8008a02:	2218      	movs	r2, #24
 8008a04:	189b      	adds	r3, r3, r2
 8008a06:	19db      	adds	r3, r3, r7
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008a0c:	2318      	movs	r3, #24
 8008a0e:	18cb      	adds	r3, r1, r3
 8008a10:	19db      	adds	r3, r3, r7
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	18d3      	adds	r3, r2, r3
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008a1c:	4b1e      	ldr	r3, [pc, #120]	; (8008a98 <astronode_send_cmd_rr+0x33c>)
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f7fa fbb0 	bl	8003184 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008a24:	2358      	movs	r3, #88	; 0x58
 8008a26:	2218      	movs	r2, #24
 8008a28:	189b      	adds	r3, r3, r2
 8008a2a:	19db      	adds	r3, r3, r7
 8008a2c:	1d5a      	adds	r2, r3, #5
 8008a2e:	491b      	ldr	r1, [pc, #108]	; (8008a9c <astronode_send_cmd_rr+0x340>)
 8008a30:	24f4      	movs	r4, #244	; 0xf4
 8008a32:	0064      	lsls	r4, r4, #1
 8008a34:	2318      	movs	r3, #24
 8008a36:	18e3      	adds	r3, r4, r3
 8008a38:	19db      	adds	r3, r3, r7
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f002 fffd 	bl	800ba3c <sprintf>
            send_debug_logs(command_content);
 8008a42:	2318      	movs	r3, #24
 8008a44:	18e3      	adds	r3, r4, r3
 8008a46:	19db      	adds	r3, r3, r7
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f7fa fb9a 	bl	8003184 <send_debug_logs>
 8008a50:	46b5      	mov	sp, r6
 8008a52:	e005      	b.n	8008a60 <astronode_send_cmd_rr+0x304>
                return;
 8008a54:	46b5      	mov	sp, r6
 8008a56:	e009      	b.n	8008a6c <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008a58:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <astronode_send_cmd_rr+0x344>)
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7fa fb92 	bl	8003184 <send_debug_logs>
        }
    }
    return result ;
 8008a60:	23f8      	movs	r3, #248	; 0xf8
 8008a62:	33ff      	adds	r3, #255	; 0xff
 8008a64:	2218      	movs	r2, #24
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	19db      	adds	r3, r3, r7
 8008a6a:	781b      	ldrb	r3, [r3, #0]
}
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	2385      	movs	r3, #133	; 0x85
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	449d      	add	sp, r3
 8008a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a78:	fffffdec 	.word	0xfffffdec
 8008a7c:	fffffe60 	.word	0xfffffe60
 8008a80:	08013778 	.word	0x08013778
 8008a84:	08013794 	.word	0x08013794
 8008a88:	080137e4 	.word	0x080137e4
 8008a8c:	08012e08 	.word	0x08012e08
 8008a90:	08014320 	.word	0x08014320
 8008a94:	080137f8 	.word	0x080137f8
 8008a98:	08013824 	.word	0x08013824
 8008a9c:	0801383c 	.word	0x0801383c
 8008aa0:	08013840 	.word	0x08013840

08008aa4 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <is_sak_available+0x10>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
}
 8008aac:	0018      	movs	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	20000bfc 	.word	0x20000bfc

08008ab8 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <is_astronode_reset+0x10>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	20000bfd 	.word	0x20000bfd

08008acc <is_command_available>:

bool is_command_available()
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <is_command_available+0x10>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
}
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	20000bfe 	.word	0x20000bfe

08008ae0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	0002      	movs	r2, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008aee:	1dfb      	adds	r3, r7, #7
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b2f      	cmp	r3, #47	; 0x2f
 8008af4:	d90b      	bls.n	8008b0e <ascii_to_value+0x2e>
 8008af6:	1dfb      	adds	r3, r7, #7
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b39      	cmp	r3, #57	; 0x39
 8008afc:	d807      	bhi.n	8008b0e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008afe:	1dfb      	adds	r3, r7, #7
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	3b30      	subs	r3, #48	; 0x30
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
        return true;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e010      	b.n	8008b30 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008b0e:	1dfb      	adds	r3, r7, #7
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	d90b      	bls.n	8008b2e <ascii_to_value+0x4e>
 8008b16:	1dfb      	adds	r3, r7, #7
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b46      	cmp	r3, #70	; 0x46
 8008b1c:	d807      	bhi.n	8008b2e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008b1e:	1dfb      	adds	r3, r7, #7
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	3b37      	subs	r3, #55	; 0x37
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	701a      	strb	r2, [r3, #0]
        return true;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008b2e:	2300      	movs	r3, #0
    }
}
 8008b30:	0018      	movs	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008b42:	250e      	movs	r5, #14
 8008b44:	197b      	adds	r3, r7, r5
 8008b46:	2200      	movs	r2, #0
 8008b48:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008b4a:	197b      	adds	r3, r7, r5
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	197a      	adds	r2, r7, r5
 8008b50:	1c59      	adds	r1, r3, #1
 8008b52:	8011      	strh	r1, [r2, #0]
 8008b54:	001a      	movs	r2, r3
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	189b      	adds	r3, r3, r2
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	260a      	movs	r6, #10
 8008b62:	19bc      	adds	r4, r7, r6
 8008b64:	4a44      	ldr	r2, [pc, #272]	; (8008c78 <astronode_create_request_transport+0x140>)
 8008b66:	2101      	movs	r1, #1
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f000 fa7d 	bl	8009068 <calculate_crc>
 8008b6e:	0003      	movs	r3, r0
 8008b70:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	1c58      	adds	r0, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	22c4      	movs	r2, #196	; 0xc4
 8008b7a:	5a99      	ldrh	r1, [r3, r2]
 8008b7c:	19bc      	adds	r4, r7, r6
 8008b7e:	19bb      	adds	r3, r7, r6
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	001a      	movs	r2, r3
 8008b84:	f000 fa70 	bl	8009068 <calculate_crc>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008b8c:	19bb      	adds	r3, r7, r6
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	b21a      	sxth	r2, r3
 8008b94:	0031      	movs	r1, r6
 8008b96:	19bb      	adds	r3, r7, r6
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b21a      	sxth	r2, r3
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7818      	ldrb	r0, [r3, #0]
 8008bac:	197b      	adds	r3, r7, r5
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	18d3      	adds	r3, r2, r3
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	f000 fbeb 	bl	8009390 <uint8_to_ascii_buffer>
    index += 2;
 8008bba:	197b      	adds	r3, r7, r5
 8008bbc:	197a      	adds	r2, r7, r5
 8008bbe:	8812      	ldrh	r2, [r2, #0]
 8008bc0:	3202      	adds	r2, #2
 8008bc2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	2200      	movs	r2, #0
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e017      	b.n	8008bfe <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008bce:	240c      	movs	r4, #12
 8008bd0:	193b      	adds	r3, r7, r4
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	7858      	ldrb	r0, [r3, #1]
 8008bda:	250e      	movs	r5, #14
 8008bdc:	197b      	adds	r3, r7, r5
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	18d3      	adds	r3, r2, r3
 8008be4:	0019      	movs	r1, r3
 8008be6:	f000 fbd3 	bl	8009390 <uint8_to_ascii_buffer>
        index += 2;
 8008bea:	197b      	adds	r3, r7, r5
 8008bec:	197a      	adds	r2, r7, r5
 8008bee:	8812      	ldrh	r2, [r2, #0]
 8008bf0:	3202      	adds	r2, #2
 8008bf2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008bf4:	193b      	adds	r3, r7, r4
 8008bf6:	881a      	ldrh	r2, [r3, #0]
 8008bf8:	193b      	adds	r3, r7, r4
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	22c4      	movs	r2, #196	; 0xc4
 8008c02:	5a9b      	ldrh	r3, [r3, r2]
 8008c04:	220c      	movs	r2, #12
 8008c06:	18ba      	adds	r2, r7, r2
 8008c08:	8812      	ldrh	r2, [r2, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d3df      	bcc.n	8008bce <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008c0e:	250a      	movs	r5, #10
 8008c10:	197b      	adds	r3, r7, r5
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	0a1b      	lsrs	r3, r3, #8
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	b2d8      	uxtb	r0, r3
 8008c1a:	240e      	movs	r4, #14
 8008c1c:	193b      	adds	r3, r7, r4
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	18d3      	adds	r3, r2, r3
 8008c24:	0019      	movs	r1, r3
 8008c26:	f000 fbb3 	bl	8009390 <uint8_to_ascii_buffer>
    index += 2;
 8008c2a:	0021      	movs	r1, r4
 8008c2c:	187b      	adds	r3, r7, r1
 8008c2e:	187a      	adds	r2, r7, r1
 8008c30:	8812      	ldrh	r2, [r2, #0]
 8008c32:	3202      	adds	r2, #2
 8008c34:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008c36:	197b      	adds	r3, r7, r5
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	b2d8      	uxtb	r0, r3
 8008c3c:	000c      	movs	r4, r1
 8008c3e:	187b      	adds	r3, r7, r1
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	18d3      	adds	r3, r2, r3
 8008c46:	0019      	movs	r1, r3
 8008c48:	f000 fba2 	bl	8009390 <uint8_to_ascii_buffer>
    index += 2;
 8008c4c:	0020      	movs	r0, r4
 8008c4e:	183b      	adds	r3, r7, r0
 8008c50:	183a      	adds	r2, r7, r0
 8008c52:	8812      	ldrh	r2, [r2, #0]
 8008c54:	3202      	adds	r2, #2
 8008c56:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008c58:	183b      	adds	r3, r7, r0
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	183a      	adds	r2, r7, r0
 8008c5e:	1c59      	adds	r1, r3, #1
 8008c60:	8011      	strh	r1, [r2, #0]
 8008c62:	001a      	movs	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	189b      	adds	r3, r3, r2
 8008c68:	2203      	movs	r2, #3
 8008c6a:	701a      	strb	r2, [r3, #0]

    return index;
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	881b      	ldrh	r3, [r3, #0]
}
 8008c70:	0018      	movs	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	b005      	add	sp, #20
 8008c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c78:	0000ffff 	.word	0x0000ffff

08008c7c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7e:	b089      	sub	sp, #36	; 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	607a      	str	r2, [r7, #4]
 8008c86:	230a      	movs	r3, #10
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	1c0a      	adds	r2, r1, #0
 8008c8c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d005      	beq.n	8008ca2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008c96:	4bbd      	ldr	r3, [pc, #756]	; (8008f8c <astronode_decode_answer_transport+0x310>)
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f7fa fa73 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e170      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008ca2:	210a      	movs	r1, #10
 8008ca4:	187b      	adds	r3, r7, r1
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4013      	ands	r3, r2
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d103      	bne.n	8008cba <astronode_decode_answer_transport+0x3e>
 8008cb2:	187b      	adds	r3, r7, r1
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	2b07      	cmp	r3, #7
 8008cb8:	d805      	bhi.n	8008cc6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008cba:	4bb5      	ldr	r3, [pc, #724]	; (8008f90 <astronode_decode_answer_transport+0x314>)
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f7fa fa61 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e15e      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008cc6:	230a      	movs	r3, #10
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	3b08      	subs	r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	da00      	bge.n	8008cd4 <astronode_decode_answer_transport+0x58>
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	105b      	asrs	r3, r3, #1
 8008cd6:	b299      	uxth	r1, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	22c4      	movs	r2, #196	; 0xc4
 8008cdc:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	18d3      	adds	r3, r2, r3
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d005      	beq.n	8008cfc <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008cf0:	4ba8      	ldr	r3, [pc, #672]	; (8008f94 <astronode_decode_answer_transport+0x318>)
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f7fa fa46 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e143      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008cfc:	2117      	movs	r1, #23
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008d04:	2416      	movs	r4, #22
 8008d06:	193b      	adds	r3, r7, r4
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	187a      	adds	r2, r7, r1
 8008d14:	0011      	movs	r1, r2
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7ff fee2 	bl	8008ae0 <ascii_to_value>
 8008d1c:	0003      	movs	r3, r0
 8008d1e:	001a      	movs	r2, r3
 8008d20:	2301      	movs	r3, #1
 8008d22:	4053      	eors	r3, r2
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10e      	bne.n	8008d48 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	193a      	adds	r2, r7, r4
 8008d32:	0011      	movs	r1, r2
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7ff fed3 	bl	8008ae0 <ascii_to_value>
 8008d3a:	0003      	movs	r3, r0
 8008d3c:	001a      	movs	r2, r3
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4053      	eors	r3, r2
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008d48:	4b93      	ldr	r3, [pc, #588]	; (8008f98 <astronode_decode_answer_transport+0x31c>)
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f7fa fa1a 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e117      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008d54:	2317      	movs	r3, #23
 8008d56:	18fb      	adds	r3, r7, r3
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	2316      	movs	r3, #22
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008d6c:	231e      	movs	r3, #30
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	2203      	movs	r2, #3
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	231c      	movs	r3, #28
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	801a      	strh	r2, [r3, #0]
 8008d7c:	e045      	b.n	8008e0a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008d7e:	241e      	movs	r4, #30
 8008d80:	193b      	adds	r3, r7, r4
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2217      	movs	r2, #23
 8008d8c:	18ba      	adds	r2, r7, r2
 8008d8e:	0011      	movs	r1, r2
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7ff fea5 	bl	8008ae0 <ascii_to_value>
 8008d96:	0003      	movs	r3, r0
 8008d98:	001a      	movs	r2, r3
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4053      	eors	r3, r2
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d112      	bne.n	8008dca <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008da4:	193b      	adds	r3, r7, r4
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	18d3      	adds	r3, r2, r3
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2216      	movs	r2, #22
 8008db2:	18ba      	adds	r2, r7, r2
 8008db4:	0011      	movs	r1, r2
 8008db6:	0018      	movs	r0, r3
 8008db8:	f7ff fe92 	bl	8008ae0 <ascii_to_value>
 8008dbc:	0003      	movs	r3, r0
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4053      	eors	r3, r2
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008dca:	4b73      	ldr	r3, [pc, #460]	; (8008f98 <astronode_decode_answer_transport+0x31c>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7fa f9d9 	bl	8003184 <send_debug_logs>
            return RS_FAILURE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e0d6      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008dd6:	2317      	movs	r3, #23
 8008dd8:	18fb      	adds	r3, r7, r3
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	b2d9      	uxtb	r1, r3
 8008de0:	2316      	movs	r3, #22
 8008de2:	18fb      	adds	r3, r7, r3
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	201c      	movs	r0, #28
 8008de8:	183b      	adds	r3, r7, r0
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	1838      	adds	r0, r7, r0
 8008dee:	1c5c      	adds	r4, r3, #1
 8008df0:	8004      	strh	r4, [r0, #0]
 8008df2:	0018      	movs	r0, r3
 8008df4:	188b      	adds	r3, r1, r2
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	181b      	adds	r3, r3, r0
 8008dfc:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008dfe:	221e      	movs	r2, #30
 8008e00:	18bb      	adds	r3, r7, r2
 8008e02:	18ba      	adds	r2, r7, r2
 8008e04:	8812      	ldrh	r2, [r2, #0]
 8008e06:	3202      	adds	r2, #2
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	231e      	movs	r3, #30
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	881a      	ldrh	r2, [r3, #0]
 8008e10:	260a      	movs	r6, #10
 8008e12:	19bb      	adds	r3, r7, r6
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	3b05      	subs	r3, #5
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	dbb0      	blt.n	8008d7e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	251a      	movs	r5, #26
 8008e20:	197c      	adds	r4, r7, r5
 8008e22:	4a5e      	ldr	r2, [pc, #376]	; (8008f9c <astronode_decode_answer_transport+0x320>)
 8008e24:	2101      	movs	r1, #1
 8008e26:	0018      	movs	r0, r3
 8008e28:	f000 f91e 	bl	8009068 <calculate_crc>
 8008e2c:	0003      	movs	r3, r0
 8008e2e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	1c58      	adds	r0, r3, #1
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	22c4      	movs	r2, #196	; 0xc4
 8008e38:	5a99      	ldrh	r1, [r3, r2]
 8008e3a:	197c      	adds	r4, r7, r5
 8008e3c:	197b      	adds	r3, r7, r5
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	001a      	movs	r2, r3
 8008e42:	f000 f911 	bl	8009068 <calculate_crc>
 8008e46:	0003      	movs	r3, r0
 8008e48:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008e4a:	197b      	adds	r3, r7, r5
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	b21a      	sxth	r2, r3
 8008e52:	0029      	movs	r1, r5
 8008e54:	197b      	adds	r3, r7, r5
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	0a1b      	lsrs	r3, r3, #8
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	b21b      	sxth	r3, r3
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	b21a      	sxth	r2, r3
 8008e62:	187b      	adds	r3, r7, r1
 8008e64:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008e66:	19bb      	adds	r3, r7, r6
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	3b05      	subs	r3, #5
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	18d3      	adds	r3, r2, r3
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2217      	movs	r2, #23
 8008e74:	18ba      	adds	r2, r7, r2
 8008e76:	0011      	movs	r1, r2
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff fe31 	bl	8008ae0 <ascii_to_value>
 8008e7e:	0003      	movs	r3, r0
 8008e80:	001a      	movs	r2, r3
 8008e82:	2301      	movs	r3, #1
 8008e84:	4053      	eors	r3, r2
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d112      	bne.n	8008eb2 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008e8c:	19bb      	adds	r3, r7, r6
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	18d3      	adds	r3, r2, r3
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2216      	movs	r2, #22
 8008e9a:	18ba      	adds	r2, r7, r2
 8008e9c:	0011      	movs	r1, r2
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f7ff fe1e 	bl	8008ae0 <ascii_to_value>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	001a      	movs	r2, r3
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4053      	eors	r3, r2
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008eb2:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <astronode_decode_answer_transport+0x31c>)
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fa f965 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e062      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008ebe:	2017      	movs	r0, #23
 8008ec0:	183b      	adds	r3, r7, r0
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	031b      	lsls	r3, r3, #12
 8008ec8:	b299      	uxth	r1, r3
 8008eca:	2416      	movs	r4, #22
 8008ecc:	193b      	adds	r3, r7, r4
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	2318      	movs	r3, #24
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	188a      	adds	r2, r1, r2
 8008edc:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008ede:	250a      	movs	r5, #10
 8008ee0:	197b      	adds	r3, r7, r5
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	3b03      	subs	r3, #3
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	18d3      	adds	r3, r2, r3
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	183a      	adds	r2, r7, r0
 8008eee:	0011      	movs	r1, r2
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7ff fdf5 	bl	8008ae0 <ascii_to_value>
 8008ef6:	0003      	movs	r3, r0
 8008ef8:	001a      	movs	r2, r3
 8008efa:	2301      	movs	r3, #1
 8008efc:	4053      	eors	r3, r2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d111      	bne.n	8008f28 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008f04:	197b      	adds	r3, r7, r5
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	3b02      	subs	r3, #2
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	18d3      	adds	r3, r2, r3
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	193a      	adds	r2, r7, r4
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff fde3 	bl	8008ae0 <ascii_to_value>
 8008f1a:	0003      	movs	r3, r0
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4053      	eors	r3, r2
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008f28:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <astronode_decode_answer_transport+0x31c>)
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f7fa f92a 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	e027      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008f34:	2317      	movs	r3, #23
 8008f36:	18fb      	adds	r3, r7, r3
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	2316      	movs	r3, #22
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	18d3      	adds	r3, r2, r3
 8008f4a:	b299      	uxth	r1, r3
 8008f4c:	2018      	movs	r0, #24
 8008f4e:	183b      	adds	r3, r7, r0
 8008f50:	183a      	adds	r2, r7, r0
 8008f52:	8812      	ldrh	r2, [r2, #0]
 8008f54:	188a      	adds	r2, r1, r2
 8008f56:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008f58:	183a      	adds	r2, r7, r0
 8008f5a:	231a      	movs	r3, #26
 8008f5c:	18fb      	adds	r3, r7, r3
 8008f5e:	8812      	ldrh	r2, [r2, #0]
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d005      	beq.n	8008f72 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008f66:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <astronode_decode_answer_transport+0x324>)
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7fa f90b 	bl	8003184 <send_debug_logs>
        return RS_FAILURE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e008      	b.n	8008f84 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2bff      	cmp	r3, #255	; 0xff
 8008f78:	d103      	bne.n	8008f82 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f000 f8c3 	bl	8009108 <check_for_error>
    }

    return RS_SUCCESS;
 8008f82:	2301      	movs	r3, #1
}
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b009      	add	sp, #36	; 0x24
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	080138d0 	.word	0x080138d0
 8008f90:	08013920 	.word	0x08013920
 8008f94:	08013970 	.word	0x08013970
 8008f98:	080139c0 	.word	0x080139c0
 8008f9c:	0000ffff 	.word	0x0000ffff
 8008fa0:	08013a0c 	.word	0x08013a0c

08008fa4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa6:	4c2b      	ldr	r4, [pc, #172]	; (8009054 <astronode_transport_send_receive+0xb0>)
 8008fa8:	44a5      	add	sp, r4
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fb0:	4b29      	ldr	r3, [pc, #164]	; (8009058 <astronode_transport_send_receive+0xb4>)
 8008fb2:	25ca      	movs	r5, #202	; 0xca
 8008fb4:	00ad      	lsls	r5, r5, #2
 8008fb6:	195b      	adds	r3, r3, r5
 8008fb8:	19db      	adds	r3, r3, r7
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	22c4      	movs	r2, #196	; 0xc4
 8008fc2:	0052      	lsls	r2, r2, #1
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f002 fdce 	bl	800bb68 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fcc:	4b23      	ldr	r3, [pc, #140]	; (800905c <astronode_transport_send_receive+0xb8>)
 8008fce:	195b      	adds	r3, r3, r5
 8008fd0:	19db      	adds	r3, r3, r7
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	22c4      	movs	r2, #196	; 0xc4
 8008fda:	0052      	lsls	r2, r2, #1
 8008fdc:	2100      	movs	r1, #0
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f002 fdc2 	bl	800bb68 <memset>
    uint16_t answer_length =  0;
 8008fe4:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <astronode_transport_send_receive+0xbc>)
 8008fe6:	195b      	adds	r3, r3, r5
 8008fe8:	19db      	adds	r3, r3, r7
 8008fea:	2200      	movs	r2, #0
 8008fec:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008fee:	4e1d      	ldr	r6, [pc, #116]	; (8009064 <astronode_transport_send_receive+0xc0>)
 8008ff0:	19bc      	adds	r4, r7, r6
 8008ff2:	23cc      	movs	r3, #204	; 0xcc
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	18fa      	adds	r2, r7, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	0011      	movs	r1, r2
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f7ff fd9b 	bl	8008b38 <astronode_create_request_transport>
 8009002:	0003      	movs	r3, r0
 8009004:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009006:	19bb      	adds	r3, r7, r6
 8009008:	881a      	ldrh	r2, [r3, #0]
 800900a:	23cc      	movs	r3, #204	; 0xcc
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	0011      	movs	r1, r2
 8009012:	0018      	movs	r0, r3
 8009014:	f7fa fa1c 	bl	8003450 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009018:	230a      	movs	r3, #10
 800901a:	18fa      	adds	r2, r7, r3
 800901c:	240c      	movs	r4, #12
 800901e:	193b      	adds	r3, r7, r4
 8009020:	0011      	movs	r1, r2
 8009022:	0018      	movs	r0, r3
 8009024:	f000 f92c 	bl	8009280 <receive_astronode_answer>
 8009028:	0003      	movs	r3, r0
 800902a:	2b01      	cmp	r3, #1
 800902c:	d10a      	bne.n	8009044 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <astronode_transport_send_receive+0xbc>)
 8009030:	195b      	adds	r3, r3, r5
 8009032:	19db      	adds	r3, r3, r7
 8009034:	8819      	ldrh	r1, [r3, #0]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	193b      	adds	r3, r7, r4
 800903a:	0018      	movs	r0, r3
 800903c:	f7ff fe1e 	bl	8008c7c <astronode_decode_answer_transport>
 8009040:	0003      	movs	r3, r0
 8009042:	e000      	b.n	8009046 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009044:	2300      	movs	r3, #0
    }
}
 8009046:	0018      	movs	r0, r3
 8009048:	46bd      	mov	sp, r7
 800904a:	23cb      	movs	r3, #203	; 0xcb
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	449d      	add	sp, r3
 8009050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	fffffcd4 	.word	0xfffffcd4
 8009058:	fffffe70 	.word	0xfffffe70
 800905c:	fffffce4 	.word	0xfffffce4
 8009060:	fffffce2 	.word	0xfffffce2
 8009064:	00000326 	.word	0x00000326

08009068 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	0008      	movs	r0, r1
 8009072:	0011      	movs	r1, r2
 8009074:	1cbb      	adds	r3, r7, #2
 8009076:	1c02      	adds	r2, r0, #0
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	003b      	movs	r3, r7
 800907c:	1c0a      	adds	r2, r1, #0
 800907e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009080:	230e      	movs	r3, #14
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	003a      	movs	r2, r7
 8009086:	8812      	ldrh	r2, [r2, #0]
 8009088:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800908a:	e02e      	b.n	80090ea <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800908c:	240e      	movs	r4, #14
 800908e:	193b      	adds	r3, r7, r4
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b299      	uxth	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	200c      	movs	r0, #12
 80090a2:	183b      	adds	r3, r7, r0
 80090a4:	404a      	eors	r2, r1
 80090a6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	091b      	lsrs	r3, r3, #4
 80090ae:	b299      	uxth	r1, r3
 80090b0:	183b      	adds	r3, r7, r0
 80090b2:	183a      	adds	r2, r7, r0
 80090b4:	8812      	ldrh	r2, [r2, #0]
 80090b6:	404a      	eors	r2, r1
 80090b8:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80090ba:	0021      	movs	r1, r4
 80090bc:	187b      	adds	r3, r7, r1
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	b21a      	sxth	r2, r3
 80090c4:	183b      	adds	r3, r7, r0
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	b21b      	sxth	r3, r3
 80090cc:	4053      	eors	r3, r2
 80090ce:	b21a      	sxth	r2, r3
 80090d0:	183b      	adds	r3, r7, r0
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	015b      	lsls	r3, r3, #5
 80090d6:	b21b      	sxth	r3, r3
 80090d8:	4053      	eors	r3, r2
 80090da:	b21a      	sxth	r2, r3
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	2000      	movs	r0, #0
 80090e0:	5e1b      	ldrsh	r3, [r3, r0]
 80090e2:	4053      	eors	r3, r2
 80090e4:	b21a      	sxth	r2, r3
 80090e6:	187b      	adds	r3, r7, r1
 80090e8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80090ea:	1cbb      	adds	r3, r7, #2
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	1cba      	adds	r2, r7, #2
 80090f0:	1e59      	subs	r1, r3, #1
 80090f2:	8011      	strh	r1, [r2, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1c9      	bne.n	800908c <calculate_crc+0x24>
    }
    return crc;
 80090f8:	230e      	movs	r3, #14
 80090fa:	18fb      	adds	r3, r7, r3
 80090fc:	881b      	ldrh	r3, [r3, #0]
}
 80090fe:	0018      	movs	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	b005      	add	sp, #20
 8009104:	bd90      	pop	{r4, r7, pc}
	...

08009108 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	b299      	uxth	r1, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	b29b      	uxth	r3, r3
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	b29a      	uxth	r2, r3
 8009120:	200e      	movs	r0, #14
 8009122:	183b      	adds	r3, r7, r0
 8009124:	188a      	adds	r2, r1, r2
 8009126:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009128:	183b      	adds	r3, r7, r0
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	4a40      	ldr	r2, [pc, #256]	; (8009230 <check_for_error+0x128>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d100      	bne.n	8009134 <check_for_error+0x2c>
 8009132:	e06f      	b.n	8009214 <check_for_error+0x10c>
 8009134:	4a3e      	ldr	r2, [pc, #248]	; (8009230 <check_for_error+0x128>)
 8009136:	4293      	cmp	r3, r2
 8009138:	dd00      	ble.n	800913c <check_for_error+0x34>
 800913a:	e070      	b.n	800921e <check_for_error+0x116>
 800913c:	4a3d      	ldr	r2, [pc, #244]	; (8009234 <check_for_error+0x12c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d100      	bne.n	8009144 <check_for_error+0x3c>
 8009142:	e062      	b.n	800920a <check_for_error+0x102>
 8009144:	4a3b      	ldr	r2, [pc, #236]	; (8009234 <check_for_error+0x12c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	dd00      	ble.n	800914c <check_for_error+0x44>
 800914a:	e068      	b.n	800921e <check_for_error+0x116>
 800914c:	4a3a      	ldr	r2, [pc, #232]	; (8009238 <check_for_error+0x130>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d056      	beq.n	8009200 <check_for_error+0xf8>
 8009152:	4a39      	ldr	r2, [pc, #228]	; (8009238 <check_for_error+0x130>)
 8009154:	4293      	cmp	r3, r2
 8009156:	dd00      	ble.n	800915a <check_for_error+0x52>
 8009158:	e061      	b.n	800921e <check_for_error+0x116>
 800915a:	4a38      	ldr	r2, [pc, #224]	; (800923c <check_for_error+0x134>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d04a      	beq.n	80091f6 <check_for_error+0xee>
 8009160:	4a36      	ldr	r2, [pc, #216]	; (800923c <check_for_error+0x134>)
 8009162:	4293      	cmp	r3, r2
 8009164:	dc5b      	bgt.n	800921e <check_for_error+0x116>
 8009166:	4a36      	ldr	r2, [pc, #216]	; (8009240 <check_for_error+0x138>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d03f      	beq.n	80091ec <check_for_error+0xe4>
 800916c:	4a34      	ldr	r2, [pc, #208]	; (8009240 <check_for_error+0x138>)
 800916e:	4293      	cmp	r3, r2
 8009170:	dc55      	bgt.n	800921e <check_for_error+0x116>
 8009172:	4a34      	ldr	r2, [pc, #208]	; (8009244 <check_for_error+0x13c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d034      	beq.n	80091e2 <check_for_error+0xda>
 8009178:	4a32      	ldr	r2, [pc, #200]	; (8009244 <check_for_error+0x13c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	dc4f      	bgt.n	800921e <check_for_error+0x116>
 800917e:	4a32      	ldr	r2, [pc, #200]	; (8009248 <check_for_error+0x140>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d029      	beq.n	80091d8 <check_for_error+0xd0>
 8009184:	4a30      	ldr	r2, [pc, #192]	; (8009248 <check_for_error+0x140>)
 8009186:	4293      	cmp	r3, r2
 8009188:	dc49      	bgt.n	800921e <check_for_error+0x116>
 800918a:	4a30      	ldr	r2, [pc, #192]	; (800924c <check_for_error+0x144>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d01e      	beq.n	80091ce <check_for_error+0xc6>
 8009190:	4a2e      	ldr	r2, [pc, #184]	; (800924c <check_for_error+0x144>)
 8009192:	4293      	cmp	r3, r2
 8009194:	dc43      	bgt.n	800921e <check_for_error+0x116>
 8009196:	2222      	movs	r2, #34	; 0x22
 8009198:	32ff      	adds	r2, #255	; 0xff
 800919a:	4293      	cmp	r3, r2
 800919c:	d012      	beq.n	80091c4 <check_for_error+0xbc>
 800919e:	2291      	movs	r2, #145	; 0x91
 80091a0:	0052      	lsls	r2, r2, #1
 80091a2:	4293      	cmp	r3, r2
 80091a4:	da3b      	bge.n	800921e <check_for_error+0x116>
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d002      	beq.n	80091b0 <check_for_error+0xa8>
 80091aa:	2b11      	cmp	r3, #17
 80091ac:	d005      	beq.n	80091ba <check_for_error+0xb2>
 80091ae:	e036      	b.n	800921e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80091b0:	4b27      	ldr	r3, [pc, #156]	; (8009250 <check_for_error+0x148>)
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7f9 ffe6 	bl	8003184 <send_debug_logs>
            break;
 80091b8:	e036      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80091ba:	4b26      	ldr	r3, [pc, #152]	; (8009254 <check_for_error+0x14c>)
 80091bc:	0018      	movs	r0, r3
 80091be:	f7f9 ffe1 	bl	8003184 <send_debug_logs>
            break;
 80091c2:	e031      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80091c4:	4b24      	ldr	r3, [pc, #144]	; (8009258 <check_for_error+0x150>)
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7f9 ffdc 	bl	8003184 <send_debug_logs>
            break;
 80091cc:	e02c      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80091ce:	4b23      	ldr	r3, [pc, #140]	; (800925c <check_for_error+0x154>)
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7f9 ffd7 	bl	8003184 <send_debug_logs>
            break;
 80091d6:	e027      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80091d8:	4b21      	ldr	r3, [pc, #132]	; (8009260 <check_for_error+0x158>)
 80091da:	0018      	movs	r0, r3
 80091dc:	f7f9 ffd2 	bl	8003184 <send_debug_logs>
            break;
 80091e0:	e022      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80091e2:	4b20      	ldr	r3, [pc, #128]	; (8009264 <check_for_error+0x15c>)
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7f9 ffcd 	bl	8003184 <send_debug_logs>
            break;
 80091ea:	e01d      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <check_for_error+0x160>)
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f9 ffc8 	bl	8003184 <send_debug_logs>
            break;
 80091f4:	e018      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80091f6:	4b1d      	ldr	r3, [pc, #116]	; (800926c <check_for_error+0x164>)
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7f9 ffc3 	bl	8003184 <send_debug_logs>
            break;
 80091fe:	e013      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009200:	4b1b      	ldr	r3, [pc, #108]	; (8009270 <check_for_error+0x168>)
 8009202:	0018      	movs	r0, r3
 8009204:	f7f9 ffbe 	bl	8003184 <send_debug_logs>
            break;
 8009208:	e00e      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <check_for_error+0x16c>)
 800920c:	0018      	movs	r0, r3
 800920e:	f7f9 ffb9 	bl	8003184 <send_debug_logs>
            break;
 8009212:	e009      	b.n	8009228 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009214:	4b18      	ldr	r3, [pc, #96]	; (8009278 <check_for_error+0x170>)
 8009216:	0018      	movs	r0, r3
 8009218:	f7f9 ffb4 	bl	8003184 <send_debug_logs>
            break;
 800921c:	e004      	b.n	8009228 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800921e:	4b17      	ldr	r3, [pc, #92]	; (800927c <check_for_error+0x174>)
 8009220:	0018      	movs	r0, r3
 8009222:	f7f9 ffaf 	bl	8003184 <send_debug_logs>
            break;
 8009226:	46c0      	nop			; (mov r8, r8)
    }
}
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	46bd      	mov	sp, r7
 800922c:	b004      	add	sp, #16
 800922e:	bd80      	pop	{r7, pc}
 8009230:	00004601 	.word	0x00004601
 8009234:	00004501 	.word	0x00004501
 8009238:	00003501 	.word	0x00003501
 800923c:	00002601 	.word	0x00002601
 8009240:	00002511 	.word	0x00002511
 8009244:	00002501 	.word	0x00002501
 8009248:	00000611 	.word	0x00000611
 800924c:	00000601 	.word	0x00000601
 8009250:	08013a50 	.word	0x08013a50
 8009254:	08013a9c 	.word	0x08013a9c
 8009258:	08013b00 	.word	0x08013b00
 800925c:	08013b38 	.word	0x08013b38
 8009260:	08013bdc 	.word	0x08013bdc
 8009264:	08013c44 	.word	0x08013c44
 8009268:	08013ca4 	.word	0x08013ca4
 800926c:	08013d30 	.word	0x08013d30
 8009270:	08013d90 	.word	0x08013d90
 8009274:	08013e3c 	.word	0x08013e3c
 8009278:	08013e88 	.word	0x08013e88
 800927c:	08013ed0 	.word	0x08013ed0

08009280 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009280:	b5b0      	push	{r4, r5, r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800928a:	230f      	movs	r3, #15
 800928c:	18fb      	adds	r3, r7, r3
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009292:	2316      	movs	r3, #22
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	2200      	movs	r2, #0
 8009298:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800929a:	f7fa f8f7 	bl	800348c <get_systick>
 800929e:	0003      	movs	r3, r0
 80092a0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80092a2:	2315      	movs	r3, #21
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80092aa:	e054      	b.n	8009356 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80092ac:	4a34      	ldr	r2, [pc, #208]	; (8009380 <receive_astronode_answer+0x100>)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f7fa f8f2 	bl	800349c <is_systick_timeout_over>
 80092b8:	1e03      	subs	r3, r0, #0
 80092ba:	d005      	beq.n	80092c8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80092bc:	4b31      	ldr	r3, [pc, #196]	; (8009384 <receive_astronode_answer+0x104>)
 80092be:	0018      	movs	r0, r3
 80092c0:	f7f9 ff60 	bl	8003184 <send_debug_logs>
            return RS_FAILURE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e057      	b.n	8009378 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80092c8:	250f      	movs	r5, #15
 80092ca:	197b      	adds	r3, r7, r5
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7fa f8fb 	bl	80034c8 <is_astronode_character_received>
 80092d2:	0003      	movs	r3, r0
 80092d4:	0019      	movs	r1, r3
 80092d6:	2016      	movs	r0, #22
 80092d8:	183b      	adds	r3, r7, r0
 80092da:	183a      	adds	r2, r7, r0
 80092dc:	8812      	ldrh	r2, [r2, #0]
 80092de:	801a      	strh	r2, [r3, #0]
 80092e0:	2415      	movs	r4, #21
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	193a      	adds	r2, r7, r4
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	2900      	cmp	r1, #0
 80092ec:	d033      	beq.n	8009356 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80092ee:	197b      	adds	r3, r7, r5
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d105      	bne.n	8009302 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80092f6:	193b      	adds	r3, r7, r4
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]
                length = 0;
 80092fc:	183b      	adds	r3, r7, r0
 80092fe:	2200      	movs	r2, #0
 8009300:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009302:	2116      	movs	r1, #22
 8009304:	187b      	adds	r3, r7, r1
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	18d3      	adds	r3, r2, r3
 800930c:	220f      	movs	r2, #15
 800930e:	18ba      	adds	r2, r7, r2
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	701a      	strb	r2, [r3, #0]
            length++;
 8009314:	187b      	adds	r3, r7, r1
 8009316:	881a      	ldrh	r2, [r3, #0]
 8009318:	187b      	adds	r3, r7, r1
 800931a:	3201      	adds	r2, #1
 800931c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800931e:	187b      	adds	r3, r7, r1
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	2bb2      	cmp	r3, #178	; 0xb2
 8009324:	d905      	bls.n	8009332 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <receive_astronode_answer+0x108>)
 8009328:	0018      	movs	r0, r3
 800932a:	f7f9 ff2b 	bl	8003184 <send_debug_logs>
                return RS_FAILURE;
 800932e:	2300      	movs	r3, #0
 8009330:	e022      	b.n	8009378 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009332:	230f      	movs	r3, #15
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d10c      	bne.n	8009356 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800933c:	2216      	movs	r2, #22
 800933e:	18bb      	adds	r3, r7, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d907      	bls.n	8009356 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	18ba      	adds	r2, r7, r2
 800934a:	8812      	ldrh	r2, [r2, #0]
 800934c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800934e:	2315      	movs	r3, #21
 8009350:	18fb      	adds	r3, r7, r3
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009356:	2315      	movs	r3, #21
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	4053      	eors	r3, r2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1a2      	bne.n	80092ac <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <receive_astronode_answer+0x10c>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7f9 ff0b 	bl	8003184 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0018      	movs	r0, r3
 8009372:	f7f9 ff07 	bl	8003184 <send_debug_logs>

    return RS_SUCCESS;
 8009376:	2301      	movs	r3, #1
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	b006      	add	sp, #24
 800937e:	bdb0      	pop	{r4, r5, r7, pc}
 8009380:	000005dc 	.word	0x000005dc
 8009384:	08013ef4 	.word	0x08013ef4
 8009388:	08013f18 	.word	0x08013f18
 800938c:	08013f64 	.word	0x08013f64

08009390 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	0002      	movs	r2, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	1dfb      	adds	r3, r7, #7
 800939c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800939e:	1dfb      	adds	r3, r7, #7
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	091b      	lsrs	r3, r3, #4
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	001a      	movs	r2, r3
 80093a8:	4b08      	ldr	r3, [pc, #32]	; (80093cc <uint8_to_ascii_buffer+0x3c>)
 80093aa:	5c9a      	ldrb	r2, [r3, r2]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80093b0:	1dfb      	adds	r3, r7, #7
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	220f      	movs	r2, #15
 80093b6:	401a      	ands	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	4903      	ldr	r1, [pc, #12]	; (80093cc <uint8_to_ascii_buffer+0x3c>)
 80093be:	5c8a      	ldrb	r2, [r1, r2]
 80093c0:	701a      	strb	r2, [r3, #0]
}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b002      	add	sp, #8
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	08014298 	.word	0x08014298

080093d0 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 80093d0:	b590      	push	{r4, r7, lr}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80093d6:	1dfb      	adds	r3, r7, #7
 80093d8:	2200      	movs	r2, #0
 80093da:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80093dc:	e012      	b.n	8009404 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80093de:	f7fa f81d 	bl	800341c <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80093e2:	1dfc      	adds	r4, r7, #7
 80093e4:	2300      	movs	r3, #0
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	2301      	movs	r3, #1
 80093ea:	9302      	str	r3, [sp, #8]
 80093ec:	2301      	movs	r3, #1
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	2301      	movs	r3, #1
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	2201      	movs	r2, #1
 80093f8:	2101      	movs	r1, #1
 80093fa:	2001      	movs	r0, #1
 80093fc:	f7fe fb64 	bl	8007ac8 <astronode_send_cfg_wr>
 8009400:	0003      	movs	r3, r0
 8009402:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8009404:	1dfb      	adds	r3, r7, #7
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	4053      	eors	r3, r2
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e5      	bne.n	80093de <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8009412:	1dfb      	adds	r3, r7, #7
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00d      	beq.n	8009436 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800941a:	f7fe ffbb 	bl	8008394 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800941e:	f7fe fb1b 	bl	8007a58 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009422:	f7ff f8b1 	bl	8008588 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009426:	f7fe fca5 	bl	8007d74 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800942a:	f7fe fbf9 	bl	8007c20 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800942e:	f7fe ff35 	bl	800829c <astronode_send_pld_fr>
		return true ;
 8009432:	2301      	movs	r3, #1
 8009434:	e000      	b.n	8009438 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 8009436:	2300      	movs	r3, #0
	}
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	b003      	add	sp, #12
 800943e:	bd90      	pop	{r4, r7, pc}

08009440 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	0002      	movs	r2, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	1dbb      	adds	r3, r7, #6
 800944c:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	0018      	movs	r0, r3
 8009452:	f7f6 fe57 	bl	8000104 <strlen>
 8009456:	0003      	movs	r3, r0
 8009458:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2ba0      	cmp	r3, #160	; 0xa0
 800945e:	d80b      	bhi.n	8009478 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	b29a      	uxth	r2, r3
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	1dbb      	adds	r3, r7, #6
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	0018      	movs	r0, r3
 800946c:	f7fe fe6c 	bl	8008148 <astronode_send_pld_er>
 8009470:	1e03      	subs	r3, r0, #0
 8009472:	d005      	beq.n	8009480 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009474:	2301      	movs	r3, #1
 8009476:	e004      	b.n	8009482 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009478:	4b04      	ldr	r3, [pc, #16]	; (800948c <my_astro_add_payload_2_queue+0x4c>)
 800947a:	0018      	movs	r0, r3
 800947c:	f7f9 fe82 	bl	8003184 <send_debug_logs>
	}
	return false ;
 8009480:	2300      	movs	r3, #0
}
 8009482:	0018      	movs	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	b004      	add	sp, #16
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	08013f90 	.word	0x08013f90

08009490 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009494:	4b19      	ldr	r3, [pc, #100]	; (80094fc <my_astro_handle_evt+0x6c>)
 8009496:	0018      	movs	r0, r3
 8009498:	f7f9 fe74 	bl	8003184 <send_debug_logs>
	astronode_send_evt_rr () ;
 800949c:	f7fe fd14 	bl	8007ec8 <astronode_send_evt_rr>
	if (is_sak_available () )
 80094a0:	f7ff fb00 	bl	8008aa4 <is_sak_available>
 80094a4:	1e03      	subs	r3, r0, #0
 80094a6:	d007      	beq.n	80094b8 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 80094a8:	f7fe ffd8 	bl	800845c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80094ac:	f7ff f82c 	bl	8008508 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 80094b0:	4b13      	ldr	r3, [pc, #76]	; (8009500 <my_astro_handle_evt+0x70>)
 80094b2:	0018      	movs	r0, r3
 80094b4:	f7f9 fe66 	bl	8003184 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80094b8:	f7ff fafe 	bl	8008ab8 <is_astronode_reset>
 80094bc:	1e03      	subs	r3, r0, #0
 80094be:	d005      	beq.n	80094cc <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 80094c0:	4b10      	ldr	r3, [pc, #64]	; (8009504 <my_astro_handle_evt+0x74>)
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7f9 fe5e 	bl	8003184 <send_debug_logs>
	  astronode_send_res_cr () ;
 80094c8:	f7fe ff24 	bl	8008314 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80094cc:	f7ff fafe 	bl	8008acc <is_command_available>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d00e      	beq.n	80094f2 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <my_astro_handle_evt+0x78>)
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7f9 fe54 	bl	8003184 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 80094dc:	4b0b      	ldr	r3, [pc, #44]	; (800950c <my_astro_handle_evt+0x7c>)
 80094de:	0018      	movs	r0, r3
 80094e0:	f7ff f93c 	bl	800875c <astronode_send_cmd_rr>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d002      	beq.n	80094ee <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 80094e8:	4b09      	ldr	r3, [pc, #36]	; (8009510 <my_astro_handle_evt+0x80>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 80094ee:	f7ff f8f5 	bl	80086dc <astronode_send_cmd_cr>
	}
	return true ;
 80094f2:	2301      	movs	r3, #1
}
 80094f4:	0018      	movs	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	08013ff8 	.word	0x08013ff8
 8009500:	0801402c 	.word	0x0801402c
 8009504:	08014070 	.word	0x08014070
 8009508:	080140ac 	.word	0x080140ac
 800950c:	20000c04 	.word	0x20000c04
 8009510:	20000c00 	.word	0x20000c00

08009514 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	0011      	movs	r1, r2
 8009524:	0018      	movs	r0, r3
 8009526:	f7fe fd4f 	bl	8007fc8 <astronode_send_geo_wr>
}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b002      	add	sp, #8
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8009534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009536:	4ca5      	ldr	r4, [pc, #660]	; (80097cc <my_gnss_acq_coordinates+0x298>)
 8009538:	44a5      	add	sp, r4
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800953e:	4ba4      	ldr	r3, [pc, #656]	; (80097d0 <my_gnss_acq_coordinates+0x29c>)
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8009546:	4ba3      	ldr	r3, [pc, #652]	; (80097d4 <my_gnss_acq_coordinates+0x2a0>)
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	2200      	movs	r2, #0
 800954c:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800954e:	4ba2      	ldr	r3, [pc, #648]	; (80097d8 <my_gnss_acq_coordinates+0x2a4>)
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8009556:	4ba1      	ldr	r3, [pc, #644]	; (80097dc <my_gnss_acq_coordinates+0x2a8>)
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800955e:	4ba0      	ldr	r3, [pc, #640]	; (80097e0 <my_gnss_acq_coordinates+0x2ac>)
 8009560:	18fb      	adds	r3, r7, r3
 8009562:	2200      	movs	r2, #0
 8009564:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009566:	4b9f      	ldr	r3, [pc, #636]	; (80097e4 <my_gnss_acq_coordinates+0x2b0>)
 8009568:	2486      	movs	r4, #134	; 0x86
 800956a:	00a4      	lsls	r4, r4, #2
 800956c:	191b      	adds	r3, r3, r4
 800956e:	19db      	adds	r3, r3, r7
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	3304      	adds	r3, #4
 8009576:	22f6      	movs	r2, #246	; 0xf6
 8009578:	2100      	movs	r1, #0
 800957a:	0018      	movs	r0, r3
 800957c:	f002 faf4 	bl	800bb68 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009580:	4b99      	ldr	r3, [pc, #612]	; (80097e8 <my_gnss_acq_coordinates+0x2b4>)
 8009582:	191b      	adds	r3, r3, r4
 8009584:	19db      	adds	r3, r3, r7
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	3304      	adds	r3, #4
 800958c:	22f6      	movs	r2, #246	; 0xf6
 800958e:	2100      	movs	r1, #0
 8009590:	0018      	movs	r0, r3
 8009592:	f002 fae9 	bl	800bb68 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009596:	4b95      	ldr	r3, [pc, #596]	; (80097ec <my_gnss_acq_coordinates+0x2b8>)
 8009598:	2284      	movs	r2, #132	; 0x84
 800959a:	0092      	lsls	r2, r2, #2
 800959c:	18ba      	adds	r2, r7, r2
 800959e:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 80095a0:	4b93      	ldr	r3, [pc, #588]	; (80097f0 <my_gnss_acq_coordinates+0x2bc>)
 80095a2:	2283      	movs	r2, #131	; 0x83
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	18ba      	adds	r2, r7, r2
 80095a8:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 80095aa:	4b92      	ldr	r3, [pc, #584]	; (80097f4 <my_gnss_acq_coordinates+0x2c0>)
 80095ac:	2282      	movs	r2, #130	; 0x82
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	18ba      	adds	r2, r7, r2
 80095b2:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 80095b4:	4b90      	ldr	r3, [pc, #576]	; (80097f8 <my_gnss_acq_coordinates+0x2c4>)
 80095b6:	2281      	movs	r2, #129	; 0x81
 80095b8:	0092      	lsls	r2, r2, #2
 80095ba:	18ba      	adds	r2, r7, r2
 80095bc:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2230      	movs	r2, #48	; 0x30
 80095c2:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	4b8c      	ldr	r3, [pc, #560]	; (80097fc <my_gnss_acq_coordinates+0x2c8>)
 80095ca:	608a      	str	r2, [r1, #8]
 80095cc:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 80095ce:	f7f9 ffad 	bl	800352c <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 80095d2:	e0c4      	b.n	800975e <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 80095d4:	4c80      	ldr	r4, [pc, #512]	; (80097d8 <my_gnss_acq_coordinates+0x2a4>)
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	2101      	movs	r1, #1
 80095da:	0018      	movs	r0, r3
 80095dc:	f7f9 fefa 	bl	80033d4 <my_gnss_receive_byte>
		if ( rx_byte )
 80095e0:	0020      	movs	r0, r4
 80095e2:	183b      	adds	r3, r7, r0
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	4c7b      	ldr	r4, [pc, #492]	; (80097d4 <my_gnss_acq_coordinates+0x2a0>)
 80095e8:	193a      	adds	r2, r7, r4
 80095ea:	1939      	adds	r1, r7, r4
 80095ec:	7809      	ldrb	r1, [r1, #0]
 80095ee:	7011      	strb	r1, [r2, #0]
 80095f0:	4d7b      	ldr	r5, [pc, #492]	; (80097e0 <my_gnss_acq_coordinates+0x2ac>)
 80095f2:	197a      	adds	r2, r7, r5
 80095f4:	1979      	adds	r1, r7, r5
 80095f6:	7809      	ldrb	r1, [r1, #0]
 80095f8:	7011      	strb	r1, [r2, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d100      	bne.n	8009600 <my_gnss_acq_coordinates+0xcc>
 80095fe:	e0ae      	b.n	800975e <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009600:	4b76      	ldr	r3, [pc, #472]	; (80097dc <my_gnss_acq_coordinates+0x2a8>)
 8009602:	18fa      	adds	r2, r7, r3
 8009604:	2684      	movs	r6, #132	; 0x84
 8009606:	0076      	lsls	r6, r6, #1
 8009608:	19b9      	adds	r1, r7, r6
 800960a:	183b      	adds	r3, r7, r0
 800960c:	0018      	movs	r0, r3
 800960e:	f000 fbe9 	bl	8009de4 <my_nmea_message>
 8009612:	0001      	movs	r1, r0
 8009614:	193b      	adds	r3, r7, r4
 8009616:	193a      	adds	r2, r7, r4
 8009618:	7812      	ldrb	r2, [r2, #0]
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	197b      	adds	r3, r7, r5
 800961e:	197a      	adds	r2, r7, r5
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	2902      	cmp	r1, #2
 8009626:	d000      	beq.n	800962a <my_gnss_acq_coordinates+0xf6>
 8009628:	e099      	b.n	800975e <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800962a:	19bb      	adds	r3, r7, r6
 800962c:	0018      	movs	r0, r3
 800962e:	f000 fc99 	bl	8009f64 <is_my_nmea_checksum_ok>
 8009632:	0003      	movs	r3, r0
 8009634:	0019      	movs	r1, r3
 8009636:	193b      	adds	r3, r7, r4
 8009638:	193a      	adds	r2, r7, r4
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	197b      	adds	r3, r7, r5
 8009640:	197a      	adds	r2, r7, r5
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	2900      	cmp	r1, #0
 8009648:	d100      	bne.n	800964c <my_gnss_acq_coordinates+0x118>
 800964a:	e088      	b.n	800975e <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800964c:	193b      	adds	r3, r7, r4
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2201      	movs	r2, #1
 8009652:	4053      	eors	r3, r2
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d015      	beq.n	8009686 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7c1b      	ldrb	r3, [r3, #16]
 800965e:	2b33      	cmp	r3, #51	; 0x33
 8009660:	d111      	bne.n	8009686 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009662:	2383      	movs	r3, #131	; 0x83
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	19bb      	adds	r3, r7, r6
 800966c:	0011      	movs	r1, r2
 800966e:	0018      	movs	r0, r3
 8009670:	f002 faa7 	bl	800bbc2 <strstr>
 8009674:	1e03      	subs	r3, r0, #0
 8009676:	d006      	beq.n	8009686 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009678:	19bb      	adds	r3, r7, r6
 800967a:	0018      	movs	r0, r3
 800967c:	f000 f9a6 	bl	80099cc <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009680:	193b      	adds	r3, r7, r4
 8009682:	2201      	movs	r2, #1
 8009684:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009686:	2384      	movs	r3, #132	; 0x84
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	2484      	movs	r4, #132	; 0x84
 8009690:	0064      	lsls	r4, r4, #1
 8009692:	193b      	adds	r3, r7, r4
 8009694:	0011      	movs	r1, r2
 8009696:	0018      	movs	r0, r3
 8009698:	f002 fa93 	bl	800bbc2 <strstr>
 800969c:	1e03      	subs	r3, r0, #0
 800969e:	d012      	beq.n	80096c6 <my_gnss_acq_coordinates+0x192>
 80096a0:	4d4f      	ldr	r5, [pc, #316]	; (80097e0 <my_gnss_acq_coordinates+0x2ac>)
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d80d      	bhi.n	80096c6 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 80096aa:	4b55      	ldr	r3, [pc, #340]	; (8009800 <my_gnss_acq_coordinates+0x2cc>)
 80096ac:	881a      	ldrh	r2, [r3, #0]
 80096ae:	4b55      	ldr	r3, [pc, #340]	; (8009804 <my_gnss_acq_coordinates+0x2d0>)
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d85b      	bhi.n	800976e <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 80096b6:	193b      	adds	r3, r7, r4
 80096b8:	0018      	movs	r0, r3
 80096ba:	f000 fdf9 	bl	800a2b0 <my_nmea_get_gsv_tns>
 80096be:	0003      	movs	r3, r0
 80096c0:	001a      	movs	r2, r3
 80096c2:	197b      	adds	r3, r7, r5
 80096c4:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 80096c6:	2382      	movs	r3, #130	; 0x82
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	2484      	movs	r4, #132	; 0x84
 80096d0:	0064      	lsls	r4, r4, #1
 80096d2:	193b      	adds	r3, r7, r4
 80096d4:	0011      	movs	r1, r2
 80096d6:	0018      	movs	r0, r3
 80096d8:	f002 fa73 	bl	800bbc2 <strstr>
 80096dc:	1e03      	subs	r3, r0, #0
 80096de:	d010      	beq.n	8009702 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80096e0:	193b      	adds	r3, r7, r4
 80096e2:	0018      	movs	r0, r3
 80096e4:	f000 fbea 	bl	8009ebc <get_my_nmea_gngsa_fixed_mode_s>
 80096e8:	0003      	movs	r3, r0
 80096ea:	001a      	movs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 80096f0:	193b      	adds	r3, r7, r4
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 fbed 	bl	8009ed2 <get_my_nmea_gngsa_pdop_d>
 80096f8:	0002      	movs	r2, r0
 80096fa:	000b      	movs	r3, r1
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	608a      	str	r2, [r1, #8]
 8009700:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009702:	2381      	movs	r3, #129	; 0x81
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	2384      	movs	r3, #132	; 0x84
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	0011      	movs	r1, r2
 8009712:	0018      	movs	r0, r3
 8009714:	f002 fa55 	bl	800bbc2 <strstr>
 8009718:	1e03      	subs	r3, r0, #0
 800971a:	d020      	beq.n	800975e <my_gnss_acq_coordinates+0x22a>
 800971c:	4b2d      	ldr	r3, [pc, #180]	; (80097d4 <my_gnss_acq_coordinates+0x2a0>)
 800971e:	18fb      	adds	r3, r7, r3
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d01b      	beq.n	800975e <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7c1b      	ldrb	r3, [r3, #16]
 800972a:	2b33      	cmp	r3, #51	; 0x33
 800972c:	d121      	bne.n	8009772 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800972e:	4b2e      	ldr	r3, [pc, #184]	; (80097e8 <my_gnss_acq_coordinates+0x2b4>)
 8009730:	2186      	movs	r1, #134	; 0x86
 8009732:	0089      	lsls	r1, r1, #2
 8009734:	185b      	adds	r3, r3, r1
 8009736:	19da      	adds	r2, r3, r7
 8009738:	4b2a      	ldr	r3, [pc, #168]	; (80097e4 <my_gnss_acq_coordinates+0x2b0>)
 800973a:	185b      	adds	r3, r3, r1
 800973c:	19db      	adds	r3, r3, r7
 800973e:	0010      	movs	r0, r2
 8009740:	0019      	movs	r1, r3
 8009742:	23fa      	movs	r3, #250	; 0xfa
 8009744:	001a      	movs	r2, r3
 8009746:	f002 faf4 	bl	800bd32 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6898      	ldr	r0, [r3, #8]
 800974e:	68d9      	ldr	r1, [r3, #12]
 8009750:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <my_gnss_acq_coordinates+0x2d4>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f7f6 fe87 	bl	8000468 <__aeabi_dcmple>
 800975a:	1e03      	subs	r3, r0, #0
 800975c:	d10b      	bne.n	8009776 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800975e:	4b28      	ldr	r3, [pc, #160]	; (8009800 <my_gnss_acq_coordinates+0x2cc>)
 8009760:	881a      	ldrh	r2, [r3, #0]
 8009762:	4b2a      	ldr	r3, [pc, #168]	; (800980c <my_gnss_acq_coordinates+0x2d8>)
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d200      	bcs.n	800976c <my_gnss_acq_coordinates+0x238>
 800976a:	e733      	b.n	80095d4 <my_gnss_acq_coordinates+0xa0>
 800976c:	e004      	b.n	8009778 <my_gnss_acq_coordinates+0x244>
							break ;
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	e002      	b.n	8009778 <my_gnss_acq_coordinates+0x244>
							break ;
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	e000      	b.n	8009778 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009776:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009778:	f7f9 fee8 	bl	800354c <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800977c:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <my_gnss_acq_coordinates+0x2b4>)
 800977e:	2286      	movs	r2, #134	; 0x86
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	189b      	adds	r3, r3, r2
 8009784:	19db      	adds	r3, r3, r7
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	230c      	movs	r3, #12
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	0011      	movs	r1, r2
 8009794:	0018      	movs	r0, r3
 8009796:	f000 fca1 	bl	800a0dc <my_nmea_get_gngll_coordinates>
		r = true ;
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <my_gnss_acq_coordinates+0x29c>)
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2201      	movs	r2, #1
 80097a0:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 80097a2:	4b17      	ldr	r3, [pc, #92]	; (8009800 <my_gnss_acq_coordinates+0x2cc>)
 80097a4:	881a      	ldrh	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	4a14      	ldr	r2, [pc, #80]	; (8009800 <my_gnss_acq_coordinates+0x2cc>)
 80097b0:	8812      	ldrh	r2, [r2, #0]
 80097b2:	189a      	adds	r2, r3, r2
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	615a      	str	r2, [r3, #20]
	return r ;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <my_gnss_acq_coordinates+0x29c>)
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	781b      	ldrb	r3, [r3, #0]
}
 80097be:	0018      	movs	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	2387      	movs	r3, #135	; 0x87
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	449d      	add	sp, r3
 80097c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	fffffde4 	.word	0xfffffde4
 80097d0:	00000217 	.word	0x00000217
 80097d4:	00000216 	.word	0x00000216
 80097d8:	00000203 	.word	0x00000203
 80097dc:	00000202 	.word	0x00000202
 80097e0:	00000215 	.word	0x00000215
 80097e4:	fffffef0 	.word	0xfffffef0
 80097e8:	fffffdf4 	.word	0xfffffdf4
 80097ec:	080140ec 	.word	0x080140ec
 80097f0:	080140f4 	.word	0x080140f4
 80097f4:	080140fc 	.word	0x080140fc
 80097f8:	08014104 	.word	0x08014104
 80097fc:	408f4000 	.word	0x408f4000
 8009800:	20000c2c 	.word	0x20000c2c
 8009804:	20000018 	.word	0x20000018
 8009808:	20000020 	.word	0x20000020
 800980c:	20000016 	.word	0x20000016

08009810 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4b07      	ldr	r3, [pc, #28]	; (800983c <my_rtc_get_dt+0x2c>)
 800981e:	2200      	movs	r2, #0
 8009820:	0018      	movs	r0, r3
 8009822:	f7fc f939 	bl	8005a98 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <my_rtc_get_dt+0x2c>)
 800982a:	2200      	movs	r2, #0
 800982c:	0018      	movs	r0, r3
 800982e:	f7fc f845 	bl	80058bc <HAL_RTC_GetTime>
}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	46bd      	mov	sp, r7
 8009836:	b002      	add	sp, #8
 8009838:	bd80      	pop	{r7, pc}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	200006f4 	.word	0x200006f4

08009840 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009842:	b08d      	sub	sp, #52	; 0x34
 8009844:	af04      	add	r7, sp, #16
 8009846:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009848:	2508      	movs	r5, #8
 800984a:	1979      	adds	r1, r7, r5
 800984c:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <my_rtc_get_dt_s+0x7c>)
 800984e:	2200      	movs	r2, #0
 8009850:	0018      	movs	r0, r3
 8009852:	f7fc f833 	bl	80058bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009856:	241c      	movs	r4, #28
 8009858:	1939      	adds	r1, r7, r4
 800985a:	4b18      	ldr	r3, [pc, #96]	; (80098bc <my_rtc_get_dt_s+0x7c>)
 800985c:	2200      	movs	r2, #0
 800985e:	0018      	movs	r0, r3
 8009860:	f7fc f91a 	bl	8005a98 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009864:	0021      	movs	r1, r4
 8009866:	187b      	adds	r3, r7, r1
 8009868:	78db      	ldrb	r3, [r3, #3]
 800986a:	22fa      	movs	r2, #250	; 0xfa
 800986c:	00d2      	lsls	r2, r2, #3
 800986e:	189a      	adds	r2, r3, r2
 8009870:	187b      	adds	r3, r7, r1
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	469c      	mov	ip, r3
 8009876:	187b      	adds	r3, r7, r1
 8009878:	789b      	ldrb	r3, [r3, #2]
 800987a:	001c      	movs	r4, r3
 800987c:	0028      	movs	r0, r5
 800987e:	183b      	adds	r3, r7, r0
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	001d      	movs	r5, r3
 8009884:	183b      	adds	r3, r7, r0
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	001e      	movs	r6, r3
 800988a:	183b      	adds	r3, r7, r0
 800988c:	789b      	ldrb	r3, [r3, #2]
 800988e:	490c      	ldr	r1, [pc, #48]	; (80098c0 <my_rtc_get_dt_s+0x80>)
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	9602      	str	r6, [sp, #8]
 8009896:	9501      	str	r5, [sp, #4]
 8009898:	9400      	str	r4, [sp, #0]
 800989a:	4663      	mov	r3, ip
 800989c:	f002 f8ce 	bl	800ba3c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 80098a0:	211c      	movs	r1, #28
 80098a2:	187b      	adds	r3, r7, r1
 80098a4:	78db      	ldrb	r3, [r3, #3]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	22fa      	movs	r2, #250	; 0xfa
 80098aa:	00d2      	lsls	r2, r2, #3
 80098ac:	4694      	mov	ip, r2
 80098ae:	4463      	add	r3, ip
 80098b0:	b29b      	uxth	r3, r3
}
 80098b2:	0018      	movs	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b009      	add	sp, #36	; 0x24
 80098b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	200006f4 	.word	0x200006f4
 80098c0:	08014154 	.word	0x08014154

080098c4 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	b0a9      	sub	sp, #164	; 0xa4
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 80098cc:	2434      	movs	r4, #52	; 0x34
 80098ce:	193a      	adds	r2, r7, r4
 80098d0:	2548      	movs	r5, #72	; 0x48
 80098d2:	197b      	adds	r3, r7, r5
 80098d4:	0011      	movs	r1, r2
 80098d6:	0018      	movs	r0, r3
 80098d8:	f7ff ff9a 	bl	8009810 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 80098dc:	2680      	movs	r6, #128	; 0x80
 80098de:	19bb      	adds	r3, r7, r6
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7ff ffad 	bl	8009840 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80098e6:	4a36      	ldr	r2, [pc, #216]	; (80099c0 <my_rtc_set_alarm+0xfc>)
 80098e8:	4936      	ldr	r1, [pc, #216]	; (80099c4 <my_rtc_set_alarm+0x100>)
 80098ea:	234c      	movs	r3, #76	; 0x4c
 80098ec:	18f8      	adds	r0, r7, r3
 80098ee:	19bb      	adds	r3, r7, r6
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	232d      	movs	r3, #45	; 0x2d
 80098f4:	f002 f8a2 	bl	800ba3c <sprintf>
	send_debug_logs ( m ) ;
 80098f8:	234c      	movs	r3, #76	; 0x4c
 80098fa:	18fb      	adds	r3, r7, r3
 80098fc:	0018      	movs	r0, r3
 80098fe:	f7f9 fc41 	bl	8003184 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009902:	193a      	adds	r2, r7, r4
 8009904:	197b      	adds	r3, r7, r5
 8009906:	0011      	movs	r1, r2
 8009908:	0018      	movs	r0, r3
 800990a:	f000 f90d 	bl	8009b28 <my_conv_rtc2timestamp>
 800990e:	0002      	movs	r2, r0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	189b      	adds	r3, r3, r2
 8009914:	2094      	movs	r0, #148	; 0x94
 8009916:	183a      	adds	r2, r7, r0
 8009918:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800991a:	193a      	adds	r2, r7, r4
 800991c:	1979      	adds	r1, r7, r5
 800991e:	1838      	adds	r0, r7, r0
 8009920:	6803      	ldr	r3, [r0, #0]
 8009922:	0018      	movs	r0, r3
 8009924:	f000 f974 	bl	8009c10 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009928:	193b      	adds	r3, r7, r4
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	210c      	movs	r1, #12
 800992e:	187b      	adds	r3, r7, r1
 8009930:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009932:	193b      	adds	r3, r7, r4
 8009934:	785a      	ldrb	r2, [r3, #1]
 8009936:	187b      	adds	r3, r7, r1
 8009938:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800993a:	193b      	adds	r3, r7, r4
 800993c:	789a      	ldrb	r2, [r3, #2]
 800993e:	187b      	adds	r3, r7, r1
 8009940:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009942:	0008      	movs	r0, r1
 8009944:	183b      	adds	r3, r7, r0
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800994a:	183b      	adds	r3, r7, r0
 800994c:	2200      	movs	r2, #0
 800994e:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009950:	183b      	adds	r3, r7, r0
 8009952:	2200      	movs	r2, #0
 8009954:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009956:	183b      	adds	r3, r7, r0
 8009958:	2200      	movs	r2, #0
 800995a:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800995c:	183b      	adds	r3, r7, r0
 800995e:	2200      	movs	r2, #0
 8009960:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009962:	183b      	adds	r3, r7, r0
 8009964:	2200      	movs	r2, #0
 8009966:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009968:	197b      	adds	r3, r7, r5
 800996a:	7899      	ldrb	r1, [r3, #2]
 800996c:	183b      	adds	r3, r7, r0
 800996e:	2220      	movs	r2, #32
 8009970:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009972:	183b      	adds	r3, r7, r0
 8009974:	2280      	movs	r2, #128	; 0x80
 8009976:	0052      	lsls	r2, r2, #1
 8009978:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800997a:	1839      	adds	r1, r7, r0
 800997c:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <my_rtc_set_alarm+0x104>)
 800997e:	2200      	movs	r2, #0
 8009980:	0018      	movs	r0, r3
 8009982:	f7fc f8d7 	bl	8005b34 <HAL_RTC_SetAlarm_IT>
 8009986:	1e03      	subs	r3, r0, #0
 8009988:	d114      	bne.n	80099b4 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800998a:	19ba      	adds	r2, r7, r6
 800998c:	1939      	adds	r1, r7, r4
 800998e:	197b      	adds	r3, r7, r5
 8009990:	0018      	movs	r0, r3
 8009992:	f000 f9ff 	bl	8009d94 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009996:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <my_rtc_set_alarm+0xfc>)
 8009998:	490a      	ldr	r1, [pc, #40]	; (80099c4 <my_rtc_set_alarm+0x100>)
 800999a:	244c      	movs	r4, #76	; 0x4c
 800999c:	1938      	adds	r0, r7, r4
 800999e:	19bb      	adds	r3, r7, r6
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2341      	movs	r3, #65	; 0x41
 80099a4:	f002 f84a 	bl	800ba3c <sprintf>
		send_debug_logs ( m ) ;
 80099a8:	193b      	adds	r3, r7, r4
 80099aa:	0018      	movs	r0, r3
 80099ac:	f7f9 fbea 	bl	8003184 <send_debug_logs>
		return true ;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e000      	b.n	80099b6 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b027      	add	sp, #156	; 0x9c
 80099bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	08014174 	.word	0x08014174
 80099c4:	08014190 	.word	0x08014190
 80099c8:	200006f4 	.word	0x200006f4

080099cc <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 80099cc:	b5b0      	push	{r4, r5, r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 80099d4:	2508      	movs	r5, #8
 80099d6:	197b      	adds	r3, r7, r5
 80099d8:	1cda      	adds	r2, r3, #3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	0011      	movs	r1, r2
 80099de:	0018      	movs	r0, r3
 80099e0:	f000 fc9e 	bl	800a320 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 80099e4:	197b      	adds	r3, r7, r5
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	0011      	movs	r1, r2
 80099ec:	0018      	movs	r0, r3
 80099ee:	f000 fcd1 	bl	800a394 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 80099f2:	197b      	adds	r3, r7, r5
 80099f4:	1c9a      	adds	r2, r3, #2
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	0011      	movs	r1, r2
 80099fa:	0018      	movs	r0, r3
 80099fc:	f000 fd04 	bl	800a408 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009a00:	240c      	movs	r4, #12
 8009a02:	193a      	adds	r2, r7, r4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	0011      	movs	r1, r2
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f000 fd37 	bl	800a47c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009a0e:	193b      	adds	r3, r7, r4
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	0011      	movs	r1, r2
 8009a16:	0018      	movs	r0, r3
 8009a18:	f000 fd6a 	bl	800a4f0 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009a1c:	193b      	adds	r3, r7, r4
 8009a1e:	1c9a      	adds	r2, r3, #2
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	0011      	movs	r1, r2
 8009a24:	0018      	movs	r0, r3
 8009a26:	f000 fd9d 	bl	800a564 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009a2a:	193b      	adds	r3, r7, r4
 8009a2c:	1d1a      	adds	r2, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	0011      	movs	r1, r2
 8009a32:	0018      	movs	r0, r3
 8009a34:	f000 fdd0 	bl	800a5d8 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a38:	193b      	adds	r3, r7, r4
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a3e:	193b      	adds	r3, r7, r4
 8009a40:	2200      	movs	r2, #0
 8009a42:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009a44:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7fc fae3 	bl	8006012 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009a4c:	1939      	adds	r1, r7, r4
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	0018      	movs	r0, r3
 8009a54:	f7fb fe8a 	bl	800576c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009a58:	1979      	adds	r1, r7, r5
 8009a5a:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7fb ff88 	bl	8005974 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009a64:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a66:	0018      	movs	r0, r3
 8009a68:	f7fc fb07 	bl	800607a <HAL_RTCEx_DisableBypassShadow>
}
 8009a6c:	46c0      	nop			; (mov r8, r8)
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b008      	add	sp, #32
 8009a72:	bdb0      	pop	{r4, r5, r7, pc}
 8009a74:	200006f4 	.word	0x200006f4

08009a78 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2100      	movs	r1, #0
 8009a84:	0018      	movs	r0, r3
 8009a86:	f001 fe3d 	bl	800b704 <strtod>
 8009a8a:	0002      	movs	r2, r0
 8009a8c:	000b      	movs	r3, r1
 8009a8e:	60ba      	str	r2, [r7, #8]
 8009a90:	60fb      	str	r3, [r7, #12]
    return d ;
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	68fb      	ldr	r3, [r7, #12]
}
 8009a96:	0010      	movs	r0, r2
 8009a98:	0019      	movs	r1, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b004      	add	sp, #16
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	0008      	movs	r0, r1
 8009aaa:	0011      	movs	r1, r2
 8009aac:	1cfb      	adds	r3, r7, #3
 8009aae:	1c02      	adds	r2, r0, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	1cbb      	adds	r3, r7, #2
 8009ab4:	1c0a      	adds	r2, r1, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009ab8:	230f      	movs	r3, #15
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009ac0:	230e      	movs	r3, #14
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009ac8:	e01c      	b.n	8009b04 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009aca:	230f      	movs	r3, #15
 8009acc:	18fb      	adds	r3, r7, r3
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	1cfa      	adds	r2, r7, #3
 8009ad8:	7812      	ldrb	r2, [r2, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d105      	bne.n	8009aea <my_find_char_position+0x4a>
			p++ ;
 8009ade:	210e      	movs	r1, #14
 8009ae0:	187b      	adds	r3, r7, r1
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	187b      	adds	r3, r7, r1
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009aea:	230e      	movs	r3, #14
 8009aec:	18fa      	adds	r2, r7, r3
 8009aee:	1cbb      	adds	r3, r7, #2
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d00e      	beq.n	8009b16 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009af8:	210f      	movs	r1, #15
 8009afa:	187b      	adds	r3, r7, r1
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	187b      	adds	r3, r7, r1
 8009b00:	3201      	adds	r2, #1
 8009b02:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009b04:	230f      	movs	r3, #15
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	18d3      	adds	r3, r2, r3
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1da      	bne.n	8009aca <my_find_char_position+0x2a>
 8009b14:	e000      	b.n	8009b18 <my_find_char_position+0x78>
			break ;
 8009b16:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009b18:	230f      	movs	r3, #15
 8009b1a:	18fb      	adds	r3, r7, r3
 8009b1c:	781b      	ldrb	r3, [r3, #0]
}
 8009b1e:	0018      	movs	r0, r3
 8009b20:	46bd      	mov	sp, r7
 8009b22:	b004      	add	sp, #16
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	78db      	ldrb	r3, [r3, #3]
 8009b36:	22fa      	movs	r2, #250	; 0xfa
 8009b38:	00d2      	lsls	r2, r2, #3
 8009b3a:	4694      	mov	ip, r2
 8009b3c:	4463      	add	r3, ip
 8009b3e:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	0013      	movs	r3, r2
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	189b      	adds	r3, r3, r2
 8009b4c:	009a      	lsls	r2, r3, #2
 8009b4e:	189a      	adds	r2, r3, r2
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	492c      	ldr	r1, [pc, #176]	; (8009c04 <my_conv_rtc2timestamp+0xdc>)
 8009b54:	468c      	mov	ip, r1
 8009b56:	4463      	add	r3, ip
 8009b58:	089b      	lsrs	r3, r3, #2
 8009b5a:	18d3      	adds	r3, r2, r3
 8009b5c:	4a2a      	ldr	r2, [pc, #168]	; (8009c08 <my_conv_rtc2timestamp+0xe0>)
 8009b5e:	4694      	mov	ip, r2
 8009b60:	4463      	add	r3, ip
 8009b62:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009b64:	2300      	movs	r3, #0
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	e00a      	b.n	8009b80 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009b6a:	4a28      	ldr	r2, [pc, #160]	; (8009c0c <my_conv_rtc2timestamp+0xe4>)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	18d3      	adds	r3, r2, r3
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	001a      	movs	r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	189b      	adds	r3, r3, r2
 8009b78:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	dbee      	blt.n	8009b6a <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d908      	bls.n	8009ba6 <my_conv_rtc2timestamp+0x7e>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	0018      	movs	r0, r3
 8009b98:	f000 f8de 	bl	8009d58 <my_conv_is_leap_year>
 8009b9c:	1e03      	subs	r3, r0, #0
 8009b9e:	d002      	beq.n	8009ba6 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	789b      	ldrb	r3, [r3, #2]
 8009baa:	001a      	movs	r2, r3
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	18d3      	adds	r3, r2, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	0013      	movs	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	189b      	adds	r3, r3, r2
 8009bbc:	011a      	lsls	r2, r3, #4
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	0113      	lsls	r3, r2, #4
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	01db      	lsls	r3, r3, #7
 8009bc6:	0019      	movs	r1, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	001a      	movs	r2, r3
 8009bce:	0013      	movs	r3, r2
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	011a      	lsls	r2, r3, #4
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	0113      	lsls	r3, r2, #4
 8009bda:	001a      	movs	r2, r3
 8009bdc:	0013      	movs	r3, r2
 8009bde:	18ca      	adds	r2, r1, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	0019      	movs	r1, r3
 8009be6:	000b      	movs	r3, r1
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	1a5b      	subs	r3, r3, r1
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	18d3      	adds	r3, r2, r3
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	7892      	ldrb	r2, [r2, #2]
 8009bf4:	189b      	adds	r3, r3, r2
 8009bf6:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
}
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	b006      	add	sp, #24
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	fffff84f 	.word	0xfffff84f
 8009c08:	fff50736 	.word	0xfff50736
 8009c0c:	080142a8 	.word	0x080142a8

08009c10 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b08b      	sub	sp, #44	; 0x2c
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	213c      	movs	r1, #60	; 0x3c
 8009c20:	0018      	movs	r0, r3
 8009c22:	f7f6 fb11 	bl	8000248 <__aeabi_uidivmod>
 8009c26:	000b      	movs	r3, r1
 8009c28:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	213c      	movs	r1, #60	; 0x3c
 8009c2e:	0018      	movs	r0, r3
 8009c30:	f7f6 fa84 	bl	800013c <__udivsi3>
 8009c34:	0003      	movs	r3, r0
 8009c36:	213c      	movs	r1, #60	; 0x3c
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f7f6 fb05 	bl	8000248 <__aeabi_uidivmod>
 8009c3e:	000b      	movs	r3, r1
 8009c40:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	22e1      	movs	r2, #225	; 0xe1
 8009c46:	0111      	lsls	r1, r2, #4
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f7f6 fa77 	bl	800013c <__udivsi3>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	2118      	movs	r1, #24
 8009c52:	0018      	movs	r0, r3
 8009c54:	f7f6 faf8 	bl	8000248 <__aeabi_uidivmod>
 8009c58:	000b      	movs	r3, r1
 8009c5a:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	493b      	ldr	r1, [pc, #236]	; (8009d4c <my_conv_timestamp2rtc+0x13c>)
 8009c60:	0018      	movs	r0, r3
 8009c62:	f7f6 fa6b 	bl	800013c <__udivsi3>
 8009c66:	0003      	movs	r3, r0
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009c6a:	4b39      	ldr	r3, [pc, #228]	; (8009d50 <my_conv_timestamp2rtc+0x140>)
 8009c6c:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009c6e:	e00d      	b.n	8009c8c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f000 f870 	bl	8009d58 <my_conv_is_leap_year>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	336e      	adds	r3, #110	; 0x6e
 8009c7c:	33ff      	adds	r3, #255	; 0xff
 8009c7e:	001a      	movs	r2, r3
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f000 f862 	bl	8009d58 <my_conv_is_leap_year>
 8009c94:	0003      	movs	r3, r0
 8009c96:	336e      	adds	r3, #110	; 0x6e
 8009c98:	33ff      	adds	r3, #255	; 0xff
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d2e6      	bcs.n	8009c70 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009ca6:	e018      	b.n	8009cda <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009ca8:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <my_conv_timestamp2rtc+0x144>)
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	0052      	lsls	r2, r2, #1
 8009cae:	5ad3      	ldrh	r3, [r2, r3]
 8009cb0:	001c      	movs	r4, r3
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d107      	bne.n	8009cc8 <my_conv_timestamp2rtc+0xb8>
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f000 f84c 	bl	8009d58 <my_conv_is_leap_year>
 8009cc0:	1e03      	subs	r3, r0, #0
 8009cc2:	d001      	beq.n	8009cc8 <my_conv_timestamp2rtc+0xb8>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e000      	b.n	8009cca <my_conv_timestamp2rtc+0xba>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	191b      	adds	r3, r3, r4
 8009ccc:	001a      	movs	r2, r3
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009cda:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <my_conv_timestamp2rtc+0x144>)
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	0052      	lsls	r2, r2, #1
 8009ce0:	5ad3      	ldrh	r3, [r2, r3]
 8009ce2:	001c      	movs	r4, r3
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d107      	bne.n	8009cfa <my_conv_timestamp2rtc+0xea>
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	0018      	movs	r0, r3
 8009cee:	f000 f833 	bl	8009d58 <my_conv_is_leap_year>
 8009cf2:	1e03      	subs	r3, r0, #0
 8009cf4:	d001      	beq.n	8009cfa <my_conv_timestamp2rtc+0xea>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <my_conv_timestamp2rtc+0xec>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	191b      	adds	r3, r3, r4
 8009cfe:	001a      	movs	r2, r3
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d2d0      	bcs.n	8009ca8 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	3330      	adds	r3, #48	; 0x30
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	3301      	adds	r3, #1
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	3301      	adds	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	709a      	strb	r2, [r3, #2]
}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	46bd      	mov	sp, r7
 8009d46:	b00b      	add	sp, #44	; 0x2c
 8009d48:	bd90      	pop	{r4, r7, pc}
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	00015180 	.word	0x00015180
 8009d50:	000007b2 	.word	0x000007b2
 8009d54:	080142b4 	.word	0x080142b4

08009d58 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2203      	movs	r2, #3
 8009d64:	4013      	ands	r3, r2
 8009d66:	d106      	bne.n	8009d76 <my_conv_is_leap_year+0x1e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2164      	movs	r1, #100	; 0x64
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7f6 fb55 	bl	800041c <__aeabi_idivmod>
 8009d72:	1e0b      	subs	r3, r1, #0
 8009d74:	d107      	bne.n	8009d86 <my_conv_is_leap_year+0x2e>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	22c8      	movs	r2, #200	; 0xc8
 8009d7a:	0051      	lsls	r1, r2, #1
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f7f6 fb4d 	bl	800041c <__aeabi_idivmod>
 8009d82:	1e0b      	subs	r3, r1, #0
 8009d84:	d101      	bne.n	8009d8a <my_conv_is_leap_year+0x32>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <my_conv_is_leap_year+0x34>
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b002      	add	sp, #8
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d96:	b089      	sub	sp, #36	; 0x24
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	78db      	ldrb	r3, [r3, #3]
 8009da4:	22fa      	movs	r2, #250	; 0xfa
 8009da6:	00d2      	lsls	r2, r2, #3
 8009da8:	189a      	adds	r2, r3, r2
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	469c      	mov	ip, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	789b      	ldrb	r3, [r3, #2]
 8009db4:	001c      	movs	r4, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	001d      	movs	r5, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	001e      	movs	r6, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	789b      	ldrb	r3, [r3, #2]
 8009dc6:	4906      	ldr	r1, [pc, #24]	; (8009de0 <my_conv_dt_2_dts+0x4c>)
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	9303      	str	r3, [sp, #12]
 8009dcc:	9602      	str	r6, [sp, #8]
 8009dce:	9501      	str	r5, [sp, #4]
 8009dd0:	9400      	str	r4, [sp, #0]
 8009dd2:	4663      	mov	r3, ip
 8009dd4:	f001 fe32 	bl	800ba3c <sprintf>
}
 8009dd8:	46c0      	nop			; (mov r8, r8)
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b005      	add	sp, #20
 8009dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de0:	0801419c 	.word	0x0801419c

08009de4 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b24      	cmp	r3, #36	; 0x24
 8009df6:	d117      	bne.n	8009e28 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	b2d1      	uxtb	r1, r2
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	7011      	strb	r1, [r2, #0]
 8009e0a:	001a      	movs	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	7812      	ldrb	r2, [r2, #0]
 8009e14:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e045      	b.n	8009eb4 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b1f      	cmp	r3, #31
 8009e2e:	d907      	bls.n	8009e40 <my_nmea_message+0x5c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b7e      	cmp	r3, #126	; 0x7e
 8009e36:	d803      	bhi.n	8009e40 <my_nmea_message+0x5c>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d103      	bne.n	8009e48 <my_nmea_message+0x64>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b0d      	cmp	r3, #13
 8009e46:	d114      	bne.n	8009e72 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	b2d1      	uxtb	r1, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	7011      	strb	r1, [r2, #0]
 8009e54:	001a      	movs	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	189b      	adds	r3, r3, r2
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	001a      	movs	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	189b      	adds	r3, r3, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e020      	b.n	8009eb4 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	d11a      	bne.n	8009eb0 <my_nmea_message+0xcc>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d916      	bls.n	8009eb0 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	001a      	movs	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	189b      	adds	r3, r3, r2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b0d      	cmp	r3, #13
 8009e9c:	d108      	bne.n	8009eb0 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	001a      	movs	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	189b      	adds	r3, r3, r2
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009eac:	2302      	movs	r3, #2
 8009eae:	e001      	b.n	8009eb4 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	425b      	negs	r3, r3
}
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b004      	add	sp, #16
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3309      	adds	r3, #9
 8009ec8:	781b      	ldrb	r3, [r3, #0]
}
 8009eca:	0018      	movs	r0, r3
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	b002      	add	sp, #8
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009ed2:	b5b0      	push	{r4, r5, r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	220f      	movs	r2, #15
 8009ede:	212c      	movs	r1, #44	; 0x2c
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f7ff fddd 	bl	8009aa0 <my_find_char_position>
 8009ee6:	0003      	movs	r3, r0
 8009ee8:	001a      	movs	r2, r3
 8009eea:	2517      	movs	r5, #23
 8009eec:	197b      	adds	r3, r7, r5
 8009eee:	3201      	adds	r2, #1
 8009ef0:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	212c      	movs	r1, #44	; 0x2c
 8009ef8:	0018      	movs	r0, r3
 8009efa:	f7ff fdd1 	bl	8009aa0 <my_find_char_position>
 8009efe:	0003      	movs	r3, r0
 8009f00:	0019      	movs	r1, r3
 8009f02:	2416      	movs	r4, #22
 8009f04:	193b      	adds	r3, r7, r4
 8009f06:	197a      	adds	r2, r7, r5
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	1a8a      	subs	r2, r1, r2
 8009f0c:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009f0e:	193b      	adds	r3, r7, r4
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 fb93 	bl	800a640 <malloc>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009f1e:	197b      	adds	r3, r7, r5
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	18d1      	adds	r1, r2, r3
 8009f26:	193b      	adds	r3, r7, r4
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f001 fe34 	bl	800bb9a <strncpy>
	pdop_s[pdop_length] = '\0';
 8009f32:	193b      	adds	r3, r7, r4
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	18d3      	adds	r3, r2, r3
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	0018      	movs	r0, r3
 8009f42:	f7ff fd99 	bl	8009a78 <my_string2double_conv>
 8009f46:	0002      	movs	r2, r0
 8009f48:	000b      	movs	r3, r1
 8009f4a:	60ba      	str	r2, [r7, #8]
 8009f4c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	0018      	movs	r0, r3
 8009f52:	f000 fb7f 	bl	800a654 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
}
 8009f5a:	0010      	movs	r0, r2
 8009f5c:	0019      	movs	r1, r3
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b006      	add	sp, #24
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}

08009f64 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009f64:	b590      	push	{r4, r7, lr}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009f6c:	230f      	movs	r3, #15
 8009f6e:	18fb      	adds	r3, r7, r3
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009f74:	230e      	movs	r3, #14
 8009f76:	18fb      	adds	r3, r7, r3
 8009f78:	2201      	movs	r2, #1
 8009f7a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009f7c:	e00f      	b.n	8009f9e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009f7e:	220e      	movs	r2, #14
 8009f80:	18bb      	adds	r3, r7, r2
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	18ba      	adds	r2, r7, r2
 8009f86:	1c59      	adds	r1, r3, #1
 8009f88:	7011      	strb	r1, [r2, #0]
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	189b      	adds	r3, r3, r2
 8009f90:	7819      	ldrb	r1, [r3, #0]
 8009f92:	220f      	movs	r2, #15
 8009f94:	18bb      	adds	r3, r7, r2
 8009f96:	18ba      	adds	r2, r7, r2
 8009f98:	7812      	ldrb	r2, [r2, #0]
 8009f9a:	404a      	eors	r2, r1
 8009f9c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009f9e:	210e      	movs	r1, #14
 8009fa0:	187b      	adds	r3, r7, r1
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	18d3      	adds	r3, r2, r3
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b2a      	cmp	r3, #42	; 0x2a
 8009fac:	d00a      	beq.n	8009fc4 <is_my_nmea_checksum_ok+0x60>
 8009fae:	187b      	adds	r3, r7, r1
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	18d3      	adds	r3, r2, r3
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <is_my_nmea_checksum_ok+0x60>
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1dc      	bne.n	8009f7e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009fc4:	230f      	movs	r3, #15
 8009fc6:	18fb      	adds	r3, r7, r3
 8009fc8:	781c      	ldrb	r4, [r3, #0]
 8009fca:	210e      	movs	r1, #14
 8009fcc:	187b      	adds	r3, r7, r1
 8009fce:	187a      	adds	r2, r7, r1
 8009fd0:	7812      	ldrb	r2, [r2, #0]
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	187b      	adds	r3, r7, r1
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	18d3      	adds	r3, r2, r3
 8009fde:	2210      	movs	r2, #16
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f001 fc26 	bl	800b834 <strtol>
 8009fe8:	0003      	movs	r3, r0
 8009fea:	1ae3      	subs	r3, r4, r3
 8009fec:	425a      	negs	r2, r3
 8009fee:	4153      	adcs	r3, r2
 8009ff0:	b2db      	uxtb	r3, r3
}
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b005      	add	sp, #20
 8009ff8:	bd90      	pop	{r4, r7, pc}
	...

08009ffc <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009ffc:	b5b0      	push	{r4, r5, r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	000a      	movs	r2, r1
 800a006:	1cfb      	adds	r3, r7, #3
 800a008:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a00a:	2308      	movs	r3, #8
 800a00c:	18fa      	adds	r2, r7, r3
 800a00e:	492f      	ldr	r1, [pc, #188]	; (800a0cc <nmea2decimal+0xd0>)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	0018      	movs	r0, r3
 800a014:	f001 fd32 	bl	800ba7c <sscanf>
    min = deg / 100 ;
 800a018:	68b8      	ldr	r0, [r7, #8]
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	4b2c      	ldr	r3, [pc, #176]	; (800a0d0 <nmea2decimal+0xd4>)
 800a020:	f7f6 ff2a 	bl	8000e78 <__aeabi_ddiv>
 800a024:	0002      	movs	r2, r0
 800a026:	000b      	movs	r3, r1
 800a028:	613a      	str	r2, [r7, #16]
 800a02a:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a02c:	6938      	ldr	r0, [r7, #16]
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	f7f8 f97e 	bl	8002330 <__aeabi_d2iz>
 800a034:	0003      	movs	r3, r0
 800a036:	0018      	movs	r0, r3
 800a038:	f7f8 f9b0 	bl	800239c <__aeabi_i2d>
 800a03c:	0002      	movs	r2, r0
 800a03e:	000b      	movs	r3, r1
 800a040:	60ba      	str	r2, [r7, #8]
 800a042:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6938      	ldr	r0, [r7, #16]
 800a04a:	6979      	ldr	r1, [r7, #20]
 800a04c:	f7f7 fdd0 	bl	8001bf0 <__aeabi_dsub>
 800a050:	0002      	movs	r2, r0
 800a052:	000b      	movs	r3, r1
 800a054:	0010      	movs	r0, r2
 800a056:	0019      	movs	r1, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <nmea2decimal+0xd8>)
 800a05c:	f7f7 fb06 	bl	800166c <__aeabi_dmul>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	613a      	str	r2, [r7, #16]
 800a066:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a068:	2200      	movs	r2, #0
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <nmea2decimal+0xdc>)
 800a06c:	6938      	ldr	r0, [r7, #16]
 800a06e:	6979      	ldr	r1, [r7, #20]
 800a070:	f7f6 ff02 	bl	8000e78 <__aeabi_ddiv>
 800a074:	0002      	movs	r2, r0
 800a076:	000b      	movs	r3, r1
 800a078:	613a      	str	r2, [r7, #16]
 800a07a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a07c:	1cfb      	adds	r3, r7, #3
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b53      	cmp	r3, #83	; 0x53
 800a082:	d003      	beq.n	800a08c <nmea2decimal+0x90>
 800a084:	1cfb      	adds	r3, r7, #3
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	2b57      	cmp	r3, #87	; 0x57
 800a08a:	d10e      	bne.n	800a0aa <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a08c:	68b8      	ldr	r0, [r7, #8]
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f7f6 fb90 	bl	80007b8 <__aeabi_dadd>
 800a098:	0002      	movs	r2, r0
 800a09a:	000b      	movs	r3, r1
 800a09c:	0011      	movs	r1, r2
 800a09e:	000c      	movs	r4, r1
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	0609      	lsls	r1, r1, #24
 800a0a4:	4059      	eors	r1, r3
 800a0a6:	000d      	movs	r5, r1
 800a0a8:	e009      	b.n	800a0be <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a0aa:	68b8      	ldr	r0, [r7, #8]
 800a0ac:	68f9      	ldr	r1, [r7, #12]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f7f6 fb81 	bl	80007b8 <__aeabi_dadd>
 800a0b6:	0002      	movs	r2, r0
 800a0b8:	000b      	movs	r3, r1
 800a0ba:	0014      	movs	r4, r2
 800a0bc:	001d      	movs	r5, r3
}
 800a0be:	0022      	movs	r2, r4
 800a0c0:	002b      	movs	r3, r5
 800a0c2:	0010      	movs	r0, r2
 800a0c4:	0019      	movs	r1, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b006      	add	sp, #24
 800a0ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a0cc:	080141bc 	.word	0x080141bc
 800a0d0:	40590000 	.word	0x40590000
 800a0d4:	40240000 	.word	0x40240000
 800a0d8:	40180000 	.word	0x40180000

0800a0dc <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	b08d      	sub	sp, #52	; 0x34
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	212c      	movs	r1, #44	; 0x2c
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f7ff fcd7 	bl	8009aa0 <my_find_char_position>
 800a0f2:	0003      	movs	r3, r0
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	252f      	movs	r5, #47	; 0x2f
 800a0f8:	197b      	adds	r3, r7, r5
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2202      	movs	r2, #2
 800a102:	212c      	movs	r1, #44	; 0x2c
 800a104:	0018      	movs	r0, r3
 800a106:	f7ff fccb 	bl	8009aa0 <my_find_char_position>
 800a10a:	0003      	movs	r3, r0
 800a10c:	0019      	movs	r1, r3
 800a10e:	242e      	movs	r4, #46	; 0x2e
 800a110:	193b      	adds	r3, r7, r4
 800a112:	197a      	adds	r2, r7, r5
 800a114:	7812      	ldrb	r2, [r2, #0]
 800a116:	1a8a      	subs	r2, r1, r2
 800a118:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a11a:	193b      	adds	r3, r7, r4
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	3301      	adds	r3, #1
 800a120:	0018      	movs	r0, r3
 800a122:	f000 fa8d 	bl	800a640 <malloc>
 800a126:	0003      	movs	r3, r0
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a12a:	197b      	adds	r3, r7, r5
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	18d1      	adds	r1, r2, r3
 800a132:	193b      	adds	r3, r7, r4
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	0018      	movs	r0, r3
 800a13a:	f001 fd2e 	bl	800bb9a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a13e:	193b      	adds	r3, r7, r4
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a144:	18d3      	adds	r3, r2, r3
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a14a:	197b      	adds	r3, r7, r5
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	193b      	adds	r3, r7, r4
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	18d3      	adds	r3, r2, r3
 800a154:	3301      	adds	r3, #1
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	18d2      	adds	r2, r2, r3
 800a15a:	2627      	movs	r6, #39	; 0x27
 800a15c:	19bb      	adds	r3, r7, r6
 800a15e:	7812      	ldrb	r2, [r2, #0]
 800a160:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a162:	19bb      	adds	r3, r7, r6
 800a164:	781a      	ldrb	r2, [r3, #0]
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	0011      	movs	r1, r2
 800a16a:	0018      	movs	r0, r3
 800a16c:	f7ff ff46 	bl	8009ffc <nmea2decimal>
 800a170:	0002      	movs	r2, r0
 800a172:	000b      	movs	r3, r1
 800a174:	61ba      	str	r2, [r7, #24]
 800a176:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	0018      	movs	r0, r3
 800a17c:	f000 fa6a 	bl	800a654 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a180:	2200      	movs	r2, #0
 800a182:	4b49      	ldr	r3, [pc, #292]	; (800a2a8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a184:	69b8      	ldr	r0, [r7, #24]
 800a186:	69f9      	ldr	r1, [r7, #28]
 800a188:	f7f7 fa70 	bl	800166c <__aeabi_dmul>
 800a18c:	0002      	movs	r2, r0
 800a18e:	000b      	movs	r3, r1
 800a190:	0010      	movs	r0, r2
 800a192:	0019      	movs	r1, r3
 800a194:	f008 fa1e 	bl	80125d4 <round>
 800a198:	2200      	movs	r2, #0
 800a19a:	4b43      	ldr	r3, [pc, #268]	; (800a2a8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a19c:	f7f6 fe6c 	bl	8000e78 <__aeabi_ddiv>
 800a1a0:	0002      	movs	r2, r0
 800a1a2:	000b      	movs	r3, r1
 800a1a4:	61ba      	str	r2, [r7, #24]
 800a1a6:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4b40      	ldr	r3, [pc, #256]	; (800a2ac <my_nmea_get_gngll_coordinates+0x1d0>)
 800a1ac:	69b8      	ldr	r0, [r7, #24]
 800a1ae:	69f9      	ldr	r1, [r7, #28]
 800a1b0:	f7f7 fa5c 	bl	800166c <__aeabi_dmul>
 800a1b4:	0002      	movs	r2, r0
 800a1b6:	000b      	movs	r3, r1
 800a1b8:	0010      	movs	r0, r2
 800a1ba:	0019      	movs	r1, r3
 800a1bc:	f7f8 f8b8 	bl	8002330 <__aeabi_d2iz>
 800a1c0:	0002      	movs	r2, r0
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	212c      	movs	r1, #44	; 0x2c
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7ff fc67 	bl	8009aa0 <my_find_char_position>
 800a1d2:	0003      	movs	r3, r0
 800a1d4:	001a      	movs	r2, r3
 800a1d6:	197b      	adds	r3, r7, r5
 800a1d8:	3201      	adds	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2204      	movs	r2, #4
 800a1e0:	212c      	movs	r1, #44	; 0x2c
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f7ff fc5c 	bl	8009aa0 <my_find_char_position>
 800a1e8:	0003      	movs	r3, r0
 800a1ea:	0019      	movs	r1, r3
 800a1ec:	193b      	adds	r3, r7, r4
 800a1ee:	197a      	adds	r2, r7, r5
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	1a8a      	subs	r2, r1, r2
 800a1f4:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a1f6:	193b      	adds	r3, r7, r4
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 fa1f 	bl	800a640 <malloc>
 800a202:	0003      	movs	r3, r0
 800a204:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a206:	197b      	adds	r3, r7, r5
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	18d1      	adds	r1, r2, r3
 800a20e:	193b      	adds	r3, r7, r4
 800a210:	781a      	ldrb	r2, [r3, #0]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	0018      	movs	r0, r3
 800a216:	f001 fcc0 	bl	800bb9a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a21a:	193b      	adds	r3, r7, r4
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a226:	197b      	adds	r3, r7, r5
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	193b      	adds	r3, r7, r4
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	18d3      	adds	r3, r2, r3
 800a230:	3301      	adds	r3, #1
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	18d2      	adds	r2, r2, r3
 800a236:	19bb      	adds	r3, r7, r6
 800a238:	7812      	ldrb	r2, [r2, #0]
 800a23a:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a23c:	19bb      	adds	r3, r7, r6
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	0011      	movs	r1, r2
 800a244:	0018      	movs	r0, r3
 800a246:	f7ff fed9 	bl	8009ffc <nmea2decimal>
 800a24a:	0002      	movs	r2, r0
 800a24c:	000b      	movs	r3, r1
 800a24e:	60ba      	str	r2, [r7, #8]
 800a250:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	0018      	movs	r0, r3
 800a256:	f000 f9fd 	bl	800a654 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a25a:	2200      	movs	r2, #0
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	68f9      	ldr	r1, [r7, #12]
 800a262:	f7f7 fa03 	bl	800166c <__aeabi_dmul>
 800a266:	0002      	movs	r2, r0
 800a268:	000b      	movs	r3, r1
 800a26a:	0010      	movs	r0, r2
 800a26c:	0019      	movs	r1, r3
 800a26e:	f008 f9b1 	bl	80125d4 <round>
 800a272:	2200      	movs	r2, #0
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a276:	f7f6 fdff 	bl	8000e78 <__aeabi_ddiv>
 800a27a:	0002      	movs	r2, r0
 800a27c:	000b      	movs	r3, r1
 800a27e:	60ba      	str	r2, [r7, #8]
 800a280:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a282:	2200      	movs	r2, #0
 800a284:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <my_nmea_get_gngll_coordinates+0x1d0>)
 800a286:	68b8      	ldr	r0, [r7, #8]
 800a288:	68f9      	ldr	r1, [r7, #12]
 800a28a:	f7f7 f9ef 	bl	800166c <__aeabi_dmul>
 800a28e:	0002      	movs	r2, r0
 800a290:	000b      	movs	r3, r1
 800a292:	0010      	movs	r0, r2
 800a294:	0019      	movs	r1, r3
 800a296:	f7f8 f84b 	bl	8002330 <__aeabi_d2iz>
 800a29a:	0002      	movs	r2, r0
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	605a      	str	r2, [r3, #4]
}
 800a2a0:	46c0      	nop			; (mov r8, r8)
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b00d      	add	sp, #52	; 0x34
 800a2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a8:	412e8480 	.word	0x412e8480
 800a2ac:	416312d0 	.word	0x416312d0

0800a2b0 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a2b0:	b5b0      	push	{r4, r5, r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a2b8:	240e      	movs	r4, #14
 800a2ba:	193b      	adds	r3, r7, r4
 800a2bc:	2200      	movs	r2, #0
 800a2be:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2203      	movs	r2, #3
 800a2c4:	212c      	movs	r1, #44	; 0x2c
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f7ff fbea 	bl	8009aa0 <my_find_char_position>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	001a      	movs	r2, r3
 800a2d0:	2517      	movs	r5, #23
 800a2d2:	197b      	adds	r3, r7, r5
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a2d8:	2003      	movs	r0, #3
 800a2da:	f000 f9b1 	bl	800a640 <malloc>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2e2:	197b      	adds	r3, r7, r5
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	18d1      	adds	r1, r2, r3
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f001 fc53 	bl	800bb9a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a2fc:	193a      	adds	r2, r7, r4
 800a2fe:	4907      	ldr	r1, [pc, #28]	; (800a31c <my_nmea_get_gsv_tns+0x6c>)
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	0018      	movs	r0, r3
 800a304:	f001 fbba 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	0018      	movs	r0, r3
 800a30c:	f000 f9a2 	bl	800a654 <free>
	return tns ;
 800a310:	193b      	adds	r3, r7, r4
 800a312:	881b      	ldrh	r3, [r3, #0]
}
 800a314:	0018      	movs	r0, r3
 800a316:	46bd      	mov	sp, r7
 800a318:	b006      	add	sp, #24
 800a31a:	bdb0      	pop	{r4, r5, r7, pc}
 800a31c:	080141c8 	.word	0x080141c8

0800a320 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a320:	b590      	push	{r4, r7, lr}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2209      	movs	r2, #9
 800a32e:	212c      	movs	r1, #44	; 0x2c
 800a330:	0018      	movs	r0, r3
 800a332:	f7ff fbb5 	bl	8009aa0 <my_find_char_position>
 800a336:	0003      	movs	r3, r0
 800a338:	001a      	movs	r2, r3
 800a33a:	2417      	movs	r4, #23
 800a33c:	193b      	adds	r3, r7, r4
 800a33e:	3205      	adds	r2, #5
 800a340:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a342:	2003      	movs	r0, #3
 800a344:	f000 f97c 	bl	800a640 <malloc>
 800a348:	0003      	movs	r3, r0
 800a34a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a34c:	193b      	adds	r3, r7, r4
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	18d1      	adds	r1, r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2202      	movs	r2, #2
 800a358:	0018      	movs	r0, r3
 800a35a:	f001 fc1e 	bl	800bb9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	3302      	adds	r3, #2
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a366:	240e      	movs	r4, #14
 800a368:	193a      	adds	r2, r7, r4
 800a36a:	4909      	ldr	r1, [pc, #36]	; (800a390 <my_nmea_get_rmc_date_yy+0x70>)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	0018      	movs	r0, r3
 800a370:	f001 fb84 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	0018      	movs	r0, r3
 800a378:	f000 f96c 	bl	800a654 <free>
	*yy = (uint8_t) temp ;
 800a37c:	193b      	adds	r3, r7, r4
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b2da      	uxtb	r2, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	701a      	strb	r2, [r3, #0]

}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	46bd      	mov	sp, r7
 800a38a:	b007      	add	sp, #28
 800a38c:	bd90      	pop	{r4, r7, pc}
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	080141c8 	.word	0x080141c8

0800a394 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a394:	b590      	push	{r4, r7, lr}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2209      	movs	r2, #9
 800a3a2:	212c      	movs	r1, #44	; 0x2c
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f7ff fb7b 	bl	8009aa0 <my_find_char_position>
 800a3aa:	0003      	movs	r3, r0
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	2417      	movs	r4, #23
 800a3b0:	193b      	adds	r3, r7, r4
 800a3b2:	3203      	adds	r2, #3
 800a3b4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a3b6:	2003      	movs	r0, #3
 800a3b8:	f000 f942 	bl	800a640 <malloc>
 800a3bc:	0003      	movs	r3, r0
 800a3be:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3c0:	193b      	adds	r3, r7, r4
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	18d1      	adds	r1, r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f001 fbe4 	bl	800bb9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a3da:	240e      	movs	r4, #14
 800a3dc:	193a      	adds	r2, r7, r4
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <my_nmea_get_rmc_date_mm+0x70>)
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f001 fb4a 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f000 f932 	bl	800a654 <free>
	*mm = (uint8_t) temp ;
 800a3f0:	193b      	adds	r3, r7, r4
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	701a      	strb	r2, [r3, #0]

}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	b007      	add	sp, #28
 800a400:	bd90      	pop	{r4, r7, pc}
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	080141c8 	.word	0x080141c8

0800a408 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2209      	movs	r2, #9
 800a416:	212c      	movs	r1, #44	; 0x2c
 800a418:	0018      	movs	r0, r3
 800a41a:	f7ff fb41 	bl	8009aa0 <my_find_char_position>
 800a41e:	0003      	movs	r3, r0
 800a420:	001a      	movs	r2, r3
 800a422:	2417      	movs	r4, #23
 800a424:	193b      	adds	r3, r7, r4
 800a426:	3201      	adds	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a42a:	2003      	movs	r0, #3
 800a42c:	f000 f908 	bl	800a640 <malloc>
 800a430:	0003      	movs	r3, r0
 800a432:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a434:	193b      	adds	r3, r7, r4
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	18d1      	adds	r1, r2, r3
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2202      	movs	r2, #2
 800a440:	0018      	movs	r0, r3
 800a442:	f001 fbaa 	bl	800bb9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	3302      	adds	r3, #2
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a44e:	240e      	movs	r4, #14
 800a450:	193a      	adds	r2, r7, r4
 800a452:	4909      	ldr	r1, [pc, #36]	; (800a478 <my_nmea_get_rmc_date_dd+0x70>)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	0018      	movs	r0, r3
 800a458:	f001 fb10 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 f8f8 	bl	800a654 <free>
	*dd = (uint8_t) temp ;
 800a464:	193b      	adds	r3, r7, r4
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	701a      	strb	r2, [r3, #0]

}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	46bd      	mov	sp, r7
 800a472:	b007      	add	sp, #28
 800a474:	bd90      	pop	{r4, r7, pc}
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	080141c8 	.word	0x080141c8

0800a47c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	212c      	movs	r1, #44	; 0x2c
 800a48c:	0018      	movs	r0, r3
 800a48e:	f7ff fb07 	bl	8009aa0 <my_find_char_position>
 800a492:	0003      	movs	r3, r0
 800a494:	001a      	movs	r2, r3
 800a496:	2417      	movs	r4, #23
 800a498:	193b      	adds	r3, r7, r4
 800a49a:	3201      	adds	r2, #1
 800a49c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a49e:	2003      	movs	r0, #3
 800a4a0:	f000 f8ce 	bl	800a640 <malloc>
 800a4a4:	0003      	movs	r3, r0
 800a4a6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4a8:	193b      	adds	r3, r7, r4
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	18d1      	adds	r1, r2, r3
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f001 fb70 	bl	800bb9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3302      	adds	r3, #2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a4c2:	240e      	movs	r4, #14
 800a4c4:	193a      	adds	r2, r7, r4
 800a4c6:	4909      	ldr	r1, [pc, #36]	; (800a4ec <my_nmea_get_rmc_utc_hh+0x70>)
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f001 fad6 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f000 f8be 	bl	800a654 <free>
	*hh = (uint8_t) temp ;
 800a4d8:	193b      	adds	r3, r7, r4
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]

}
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b007      	add	sp, #28
 800a4e8:	bd90      	pop	{r4, r7, pc}
 800a4ea:	46c0      	nop			; (mov r8, r8)
 800a4ec:	080141c8 	.word	0x080141c8

0800a4f0 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	212c      	movs	r1, #44	; 0x2c
 800a500:	0018      	movs	r0, r3
 800a502:	f7ff facd 	bl	8009aa0 <my_find_char_position>
 800a506:	0003      	movs	r3, r0
 800a508:	001a      	movs	r2, r3
 800a50a:	2417      	movs	r4, #23
 800a50c:	193b      	adds	r3, r7, r4
 800a50e:	3203      	adds	r2, #3
 800a510:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a512:	2003      	movs	r0, #3
 800a514:	f000 f894 	bl	800a640 <malloc>
 800a518:	0003      	movs	r3, r0
 800a51a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a51c:	193b      	adds	r3, r7, r4
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	18d1      	adds	r1, r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2202      	movs	r2, #2
 800a528:	0018      	movs	r0, r3
 800a52a:	f001 fb36 	bl	800bb9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3302      	adds	r3, #2
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a536:	240e      	movs	r4, #14
 800a538:	193a      	adds	r2, r7, r4
 800a53a:	4909      	ldr	r1, [pc, #36]	; (800a560 <my_nmea_get_rmc_utc_mm+0x70>)
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	0018      	movs	r0, r3
 800a540:	f001 fa9c 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	0018      	movs	r0, r3
 800a548:	f000 f884 	bl	800a654 <free>
	*mm = (uint8_t) temp ;
 800a54c:	193b      	adds	r3, r7, r4
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	701a      	strb	r2, [r3, #0]

}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	46bd      	mov	sp, r7
 800a55a:	b007      	add	sp, #28
 800a55c:	bd90      	pop	{r4, r7, pc}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	080141c8 	.word	0x080141c8

0800a564 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	212c      	movs	r1, #44	; 0x2c
 800a574:	0018      	movs	r0, r3
 800a576:	f7ff fa93 	bl	8009aa0 <my_find_char_position>
 800a57a:	0003      	movs	r3, r0
 800a57c:	001a      	movs	r2, r3
 800a57e:	2417      	movs	r4, #23
 800a580:	193b      	adds	r3, r7, r4
 800a582:	3205      	adds	r2, #5
 800a584:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a586:	2003      	movs	r0, #3
 800a588:	f000 f85a 	bl	800a640 <malloc>
 800a58c:	0003      	movs	r3, r0
 800a58e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a590:	193b      	adds	r3, r7, r4
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	18d1      	adds	r1, r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2202      	movs	r2, #2
 800a59c:	0018      	movs	r0, r3
 800a59e:	f001 fafc 	bl	800bb9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a5aa:	240e      	movs	r4, #14
 800a5ac:	193a      	adds	r2, r7, r4
 800a5ae:	4909      	ldr	r1, [pc, #36]	; (800a5d4 <my_nmea_get_rmc_utc_ss+0x70>)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f001 fa62 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f000 f84a 	bl	800a654 <free>
	*ss = (uint8_t) temp ;
 800a5c0:	193b      	adds	r3, r7, r4
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	701a      	strb	r2, [r3, #0]

}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b007      	add	sp, #28
 800a5d0:	bd90      	pop	{r4, r7, pc}
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	080141c8 	.word	0x080141c8

0800a5d8 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a5d8:	b590      	push	{r4, r7, lr}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	212c      	movs	r1, #44	; 0x2c
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f7ff fa59 	bl	8009aa0 <my_find_char_position>
 800a5ee:	0003      	movs	r3, r0
 800a5f0:	001a      	movs	r2, r3
 800a5f2:	240f      	movs	r4, #15
 800a5f4:	193b      	adds	r3, r7, r4
 800a5f6:	3208      	adds	r2, #8
 800a5f8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a5fa:	2004      	movs	r0, #4
 800a5fc:	f000 f820 	bl	800a640 <malloc>
 800a600:	0003      	movs	r3, r0
 800a602:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a604:	193b      	adds	r3, r7, r4
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	18d1      	adds	r1, r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2203      	movs	r2, #3
 800a610:	0018      	movs	r0, r3
 800a612:	f001 fac2 	bl	800bb9a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	3303      	adds	r3, #3
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	4906      	ldr	r1, [pc, #24]	; (800a63c <my_nmea_get_rmc_utc_sss+0x64>)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	0018      	movs	r0, r3
 800a626:	f001 fa29 	bl	800ba7c <sscanf>
	free ( s ) ;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	0018      	movs	r0, r3
 800a62e:	f000 f811 	bl	800a654 <free>
}
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	46bd      	mov	sp, r7
 800a636:	b005      	add	sp, #20
 800a638:	bd90      	pop	{r4, r7, pc}
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	080141cc 	.word	0x080141cc

0800a640 <malloc>:
 800a640:	b510      	push	{r4, lr}
 800a642:	4b03      	ldr	r3, [pc, #12]	; (800a650 <malloc+0x10>)
 800a644:	0001      	movs	r1, r0
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	f000 f80e 	bl	800a668 <_malloc_r>
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	200006d0 	.word	0x200006d0

0800a654 <free>:
 800a654:	b510      	push	{r4, lr}
 800a656:	4b03      	ldr	r3, [pc, #12]	; (800a664 <free+0x10>)
 800a658:	0001      	movs	r1, r0
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	f001 fbe4 	bl	800be28 <_free_r>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	200006d0 	.word	0x200006d0

0800a668 <_malloc_r>:
 800a668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a66a:	000d      	movs	r5, r1
 800a66c:	b087      	sub	sp, #28
 800a66e:	350b      	adds	r5, #11
 800a670:	9001      	str	r0, [sp, #4]
 800a672:	2d16      	cmp	r5, #22
 800a674:	d908      	bls.n	800a688 <_malloc_r+0x20>
 800a676:	2207      	movs	r2, #7
 800a678:	4395      	bics	r5, r2
 800a67a:	d506      	bpl.n	800a68a <_malloc_r+0x22>
 800a67c:	230c      	movs	r3, #12
 800a67e:	9a01      	ldr	r2, [sp, #4]
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	2000      	movs	r0, #0
 800a684:	b007      	add	sp, #28
 800a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a688:	2510      	movs	r5, #16
 800a68a:	42a9      	cmp	r1, r5
 800a68c:	d8f6      	bhi.n	800a67c <_malloc_r+0x14>
 800a68e:	9801      	ldr	r0, [sp, #4]
 800a690:	f000 f9fe 	bl	800aa90 <__malloc_lock>
 800a694:	23fc      	movs	r3, #252	; 0xfc
 800a696:	4ebe      	ldr	r6, [pc, #760]	; (800a990 <_malloc_r+0x328>)
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	429d      	cmp	r5, r3
 800a69c:	d219      	bcs.n	800a6d2 <_malloc_r+0x6a>
 800a69e:	002a      	movs	r2, r5
 800a6a0:	3208      	adds	r2, #8
 800a6a2:	18b2      	adds	r2, r6, r2
 800a6a4:	0011      	movs	r1, r2
 800a6a6:	6854      	ldr	r4, [r2, #4]
 800a6a8:	3908      	subs	r1, #8
 800a6aa:	08eb      	lsrs	r3, r5, #3
 800a6ac:	428c      	cmp	r4, r1
 800a6ae:	d103      	bne.n	800a6b8 <_malloc_r+0x50>
 800a6b0:	68d4      	ldr	r4, [r2, #12]
 800a6b2:	3302      	adds	r3, #2
 800a6b4:	42a2      	cmp	r2, r4
 800a6b6:	d022      	beq.n	800a6fe <_malloc_r+0x96>
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	6863      	ldr	r3, [r4, #4]
 800a6bc:	68a1      	ldr	r1, [r4, #8]
 800a6be:	4393      	bics	r3, r2
 800a6c0:	68e2      	ldr	r2, [r4, #12]
 800a6c2:	18e3      	adds	r3, r4, r3
 800a6c4:	60ca      	str	r2, [r1, #12]
 800a6c6:	6091      	str	r1, [r2, #8]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	6859      	ldr	r1, [r3, #4]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
 800a6d0:	e02a      	b.n	800a728 <_malloc_r+0xc0>
 800a6d2:	233f      	movs	r3, #63	; 0x3f
 800a6d4:	0a6a      	lsrs	r2, r5, #9
 800a6d6:	d003      	beq.n	800a6e0 <_malloc_r+0x78>
 800a6d8:	2a04      	cmp	r2, #4
 800a6da:	d82b      	bhi.n	800a734 <_malloc_r+0xcc>
 800a6dc:	09ab      	lsrs	r3, r5, #6
 800a6de:	3338      	adds	r3, #56	; 0x38
 800a6e0:	2203      	movs	r2, #3
 800a6e2:	4694      	mov	ip, r2
 800a6e4:	00d9      	lsls	r1, r3, #3
 800a6e6:	1989      	adds	r1, r1, r6
 800a6e8:	68cc      	ldr	r4, [r1, #12]
 800a6ea:	428c      	cmp	r4, r1
 800a6ec:	d006      	beq.n	800a6fc <_malloc_r+0x94>
 800a6ee:	4660      	mov	r0, ip
 800a6f0:	6862      	ldr	r2, [r4, #4]
 800a6f2:	4382      	bics	r2, r0
 800a6f4:	1b57      	subs	r7, r2, r5
 800a6f6:	2f0f      	cmp	r7, #15
 800a6f8:	dd34      	ble.n	800a764 <_malloc_r+0xfc>
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	6934      	ldr	r4, [r6, #16]
 800a700:	49a4      	ldr	r1, [pc, #656]	; (800a994 <_malloc_r+0x32c>)
 800a702:	428c      	cmp	r4, r1
 800a704:	d055      	beq.n	800a7b2 <_malloc_r+0x14a>
 800a706:	2003      	movs	r0, #3
 800a708:	6862      	ldr	r2, [r4, #4]
 800a70a:	4382      	bics	r2, r0
 800a70c:	1b50      	subs	r0, r2, r5
 800a70e:	280f      	cmp	r0, #15
 800a710:	dd36      	ble.n	800a780 <_malloc_r+0x118>
 800a712:	2301      	movs	r3, #1
 800a714:	1967      	adds	r7, r4, r5
 800a716:	431d      	orrs	r5, r3
 800a718:	4303      	orrs	r3, r0
 800a71a:	6065      	str	r5, [r4, #4]
 800a71c:	6177      	str	r7, [r6, #20]
 800a71e:	6137      	str	r7, [r6, #16]
 800a720:	60f9      	str	r1, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	607b      	str	r3, [r7, #4]
 800a726:	50a0      	str	r0, [r4, r2]
 800a728:	9801      	ldr	r0, [sp, #4]
 800a72a:	f000 f9b9 	bl	800aaa0 <__malloc_unlock>
 800a72e:	0020      	movs	r0, r4
 800a730:	3008      	adds	r0, #8
 800a732:	e7a7      	b.n	800a684 <_malloc_r+0x1c>
 800a734:	2a14      	cmp	r2, #20
 800a736:	d802      	bhi.n	800a73e <_malloc_r+0xd6>
 800a738:	0013      	movs	r3, r2
 800a73a:	335b      	adds	r3, #91	; 0x5b
 800a73c:	e7d0      	b.n	800a6e0 <_malloc_r+0x78>
 800a73e:	2a54      	cmp	r2, #84	; 0x54
 800a740:	d802      	bhi.n	800a748 <_malloc_r+0xe0>
 800a742:	0b2b      	lsrs	r3, r5, #12
 800a744:	336e      	adds	r3, #110	; 0x6e
 800a746:	e7cb      	b.n	800a6e0 <_malloc_r+0x78>
 800a748:	23aa      	movs	r3, #170	; 0xaa
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d802      	bhi.n	800a756 <_malloc_r+0xee>
 800a750:	0beb      	lsrs	r3, r5, #15
 800a752:	3377      	adds	r3, #119	; 0x77
 800a754:	e7c4      	b.n	800a6e0 <_malloc_r+0x78>
 800a756:	4990      	ldr	r1, [pc, #576]	; (800a998 <_malloc_r+0x330>)
 800a758:	237e      	movs	r3, #126	; 0x7e
 800a75a:	428a      	cmp	r2, r1
 800a75c:	d8c0      	bhi.n	800a6e0 <_malloc_r+0x78>
 800a75e:	0cab      	lsrs	r3, r5, #18
 800a760:	337c      	adds	r3, #124	; 0x7c
 800a762:	e7bd      	b.n	800a6e0 <_malloc_r+0x78>
 800a764:	68e0      	ldr	r0, [r4, #12]
 800a766:	2f00      	cmp	r7, #0
 800a768:	db08      	blt.n	800a77c <_malloc_r+0x114>
 800a76a:	68a3      	ldr	r3, [r4, #8]
 800a76c:	60d8      	str	r0, [r3, #12]
 800a76e:	6083      	str	r3, [r0, #8]
 800a770:	2301      	movs	r3, #1
 800a772:	18a2      	adds	r2, r4, r2
 800a774:	6851      	ldr	r1, [r2, #4]
 800a776:	430b      	orrs	r3, r1
 800a778:	6053      	str	r3, [r2, #4]
 800a77a:	e7d5      	b.n	800a728 <_malloc_r+0xc0>
 800a77c:	0004      	movs	r4, r0
 800a77e:	e7b4      	b.n	800a6ea <_malloc_r+0x82>
 800a780:	6171      	str	r1, [r6, #20]
 800a782:	6131      	str	r1, [r6, #16]
 800a784:	2800      	cmp	r0, #0
 800a786:	daf3      	bge.n	800a770 <_malloc_r+0x108>
 800a788:	6871      	ldr	r1, [r6, #4]
 800a78a:	468c      	mov	ip, r1
 800a78c:	2180      	movs	r1, #128	; 0x80
 800a78e:	0089      	lsls	r1, r1, #2
 800a790:	428a      	cmp	r2, r1
 800a792:	d300      	bcc.n	800a796 <_malloc_r+0x12e>
 800a794:	e08c      	b.n	800a8b0 <_malloc_r+0x248>
 800a796:	08d1      	lsrs	r1, r2, #3
 800a798:	0950      	lsrs	r0, r2, #5
 800a79a:	2201      	movs	r2, #1
 800a79c:	4082      	lsls	r2, r0
 800a79e:	4660      	mov	r0, ip
 800a7a0:	4302      	orrs	r2, r0
 800a7a2:	6072      	str	r2, [r6, #4]
 800a7a4:	00ca      	lsls	r2, r1, #3
 800a7a6:	1992      	adds	r2, r2, r6
 800a7a8:	6891      	ldr	r1, [r2, #8]
 800a7aa:	60e2      	str	r2, [r4, #12]
 800a7ac:	60a1      	str	r1, [r4, #8]
 800a7ae:	6094      	str	r4, [r2, #8]
 800a7b0:	60cc      	str	r4, [r1, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	4876      	ldr	r0, [pc, #472]	; (800a990 <_malloc_r+0x328>)
 800a7b6:	1099      	asrs	r1, r3, #2
 800a7b8:	408a      	lsls	r2, r1
 800a7ba:	6841      	ldr	r1, [r0, #4]
 800a7bc:	4291      	cmp	r1, r2
 800a7be:	d328      	bcc.n	800a812 <_malloc_r+0x1aa>
 800a7c0:	420a      	tst	r2, r1
 800a7c2:	d105      	bne.n	800a7d0 <_malloc_r+0x168>
 800a7c4:	2403      	movs	r4, #3
 800a7c6:	43a3      	bics	r3, r4
 800a7c8:	0052      	lsls	r2, r2, #1
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	420a      	tst	r2, r1
 800a7ce:	d0fb      	beq.n	800a7c8 <_malloc_r+0x160>
 800a7d0:	496f      	ldr	r1, [pc, #444]	; (800a990 <_malloc_r+0x328>)
 800a7d2:	9104      	str	r1, [sp, #16]
 800a7d4:	00d9      	lsls	r1, r3, #3
 800a7d6:	1841      	adds	r1, r0, r1
 800a7d8:	468c      	mov	ip, r1
 800a7da:	000f      	movs	r7, r1
 800a7dc:	9302      	str	r3, [sp, #8]
 800a7de:	68fc      	ldr	r4, [r7, #12]
 800a7e0:	42bc      	cmp	r4, r7
 800a7e2:	d000      	beq.n	800a7e6 <_malloc_r+0x17e>
 800a7e4:	e09b      	b.n	800a91e <_malloc_r+0x2b6>
 800a7e6:	2403      	movs	r4, #3
 800a7e8:	9902      	ldr	r1, [sp, #8]
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	3101      	adds	r1, #1
 800a7ee:	9102      	str	r1, [sp, #8]
 800a7f0:	4221      	tst	r1, r4
 800a7f2:	d1f4      	bne.n	800a7de <_malloc_r+0x176>
 800a7f4:	2103      	movs	r1, #3
 800a7f6:	420b      	tst	r3, r1
 800a7f8:	d000      	beq.n	800a7fc <_malloc_r+0x194>
 800a7fa:	e0b7      	b.n	800a96c <_malloc_r+0x304>
 800a7fc:	6843      	ldr	r3, [r0, #4]
 800a7fe:	4393      	bics	r3, r2
 800a800:	6043      	str	r3, [r0, #4]
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	0052      	lsls	r2, r2, #1
 800a806:	6859      	ldr	r1, [r3, #4]
 800a808:	4291      	cmp	r1, r2
 800a80a:	d302      	bcc.n	800a812 <_malloc_r+0x1aa>
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d000      	beq.n	800a812 <_malloc_r+0x1aa>
 800a810:	e0bb      	b.n	800a98a <_malloc_r+0x322>
 800a812:	2203      	movs	r2, #3
 800a814:	6883      	ldr	r3, [r0, #8]
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	4393      	bics	r3, r2
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	42ab      	cmp	r3, r5
 800a820:	d303      	bcc.n	800a82a <_malloc_r+0x1c2>
 800a822:	1b59      	subs	r1, r3, r5
 800a824:	290f      	cmp	r1, #15
 800a826:	dd00      	ble.n	800a82a <_malloc_r+0x1c2>
 800a828:	e123      	b.n	800aa72 <_malloc_r+0x40a>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	9a03      	ldr	r2, [sp, #12]
 800a82e:	2008      	movs	r0, #8
 800a830:	189e      	adds	r6, r3, r2
 800a832:	4b5a      	ldr	r3, [pc, #360]	; (800a99c <_malloc_r+0x334>)
 800a834:	681f      	ldr	r7, [r3, #0]
 800a836:	f001 fa71 	bl	800bd1c <sysconf>
 800a83a:	4b59      	ldr	r3, [pc, #356]	; (800a9a0 <_malloc_r+0x338>)
 800a83c:	3710      	adds	r7, #16
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	197f      	adds	r7, r7, r5
 800a842:	9004      	str	r0, [sp, #16]
 800a844:	3301      	adds	r3, #1
 800a846:	d003      	beq.n	800a850 <_malloc_r+0x1e8>
 800a848:	1e7b      	subs	r3, r7, #1
 800a84a:	181b      	adds	r3, r3, r0
 800a84c:	4247      	negs	r7, r0
 800a84e:	401f      	ands	r7, r3
 800a850:	0039      	movs	r1, r7
 800a852:	9801      	ldr	r0, [sp, #4]
 800a854:	f001 fa0e 	bl	800bc74 <_sbrk_r>
 800a858:	0004      	movs	r4, r0
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d100      	bne.n	800a860 <_malloc_r+0x1f8>
 800a85e:	e0de      	b.n	800aa1e <_malloc_r+0x3b6>
 800a860:	4286      	cmp	r6, r0
 800a862:	d904      	bls.n	800a86e <_malloc_r+0x206>
 800a864:	4b4a      	ldr	r3, [pc, #296]	; (800a990 <_malloc_r+0x328>)
 800a866:	9a02      	ldr	r2, [sp, #8]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d000      	beq.n	800a86e <_malloc_r+0x206>
 800a86c:	e0d7      	b.n	800aa1e <_malloc_r+0x3b6>
 800a86e:	4a4d      	ldr	r2, [pc, #308]	; (800a9a4 <_malloc_r+0x33c>)
 800a870:	6813      	ldr	r3, [r2, #0]
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	9a04      	ldr	r2, [sp, #16]
 800a878:	3a01      	subs	r2, #1
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	d000      	beq.n	800a880 <_malloc_r+0x218>
 800a87e:	e097      	b.n	800a9b0 <_malloc_r+0x348>
 800a880:	4216      	tst	r6, r2
 800a882:	d000      	beq.n	800a886 <_malloc_r+0x21e>
 800a884:	e094      	b.n	800a9b0 <_malloc_r+0x348>
 800a886:	4b42      	ldr	r3, [pc, #264]	; (800a990 <_malloc_r+0x328>)
 800a888:	689a      	ldr	r2, [r3, #8]
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	19df      	adds	r7, r3, r7
 800a88e:	2301      	movs	r3, #1
 800a890:	433b      	orrs	r3, r7
 800a892:	6053      	str	r3, [r2, #4]
 800a894:	4b43      	ldr	r3, [pc, #268]	; (800a9a4 <_malloc_r+0x33c>)
 800a896:	4a44      	ldr	r2, [pc, #272]	; (800a9a8 <_malloc_r+0x340>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6811      	ldr	r1, [r2, #0]
 800a89c:	428b      	cmp	r3, r1
 800a89e:	d900      	bls.n	800a8a2 <_malloc_r+0x23a>
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	4a42      	ldr	r2, [pc, #264]	; (800a9ac <_malloc_r+0x344>)
 800a8a4:	6811      	ldr	r1, [r2, #0]
 800a8a6:	428b      	cmp	r3, r1
 800a8a8:	d800      	bhi.n	800a8ac <_malloc_r+0x244>
 800a8aa:	e0b8      	b.n	800aa1e <_malloc_r+0x3b6>
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	e0b6      	b.n	800aa1e <_malloc_r+0x3b6>
 800a8b0:	0a50      	lsrs	r0, r2, #9
 800a8b2:	2804      	cmp	r0, #4
 800a8b4:	d811      	bhi.n	800a8da <_malloc_r+0x272>
 800a8b6:	0991      	lsrs	r1, r2, #6
 800a8b8:	3138      	adds	r1, #56	; 0x38
 800a8ba:	00cf      	lsls	r7, r1, #3
 800a8bc:	19bf      	adds	r7, r7, r6
 800a8be:	68b8      	ldr	r0, [r7, #8]
 800a8c0:	4287      	cmp	r7, r0
 800a8c2:	d125      	bne.n	800a910 <_malloc_r+0x2a8>
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	1089      	asrs	r1, r1, #2
 800a8c8:	408a      	lsls	r2, r1
 800a8ca:	4661      	mov	r1, ip
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	6072      	str	r2, [r6, #4]
 800a8d0:	60e7      	str	r7, [r4, #12]
 800a8d2:	60a0      	str	r0, [r4, #8]
 800a8d4:	60bc      	str	r4, [r7, #8]
 800a8d6:	60c4      	str	r4, [r0, #12]
 800a8d8:	e76b      	b.n	800a7b2 <_malloc_r+0x14a>
 800a8da:	2814      	cmp	r0, #20
 800a8dc:	d802      	bhi.n	800a8e4 <_malloc_r+0x27c>
 800a8de:	0001      	movs	r1, r0
 800a8e0:	315b      	adds	r1, #91	; 0x5b
 800a8e2:	e7ea      	b.n	800a8ba <_malloc_r+0x252>
 800a8e4:	2854      	cmp	r0, #84	; 0x54
 800a8e6:	d802      	bhi.n	800a8ee <_malloc_r+0x286>
 800a8e8:	0b11      	lsrs	r1, r2, #12
 800a8ea:	316e      	adds	r1, #110	; 0x6e
 800a8ec:	e7e5      	b.n	800a8ba <_malloc_r+0x252>
 800a8ee:	21aa      	movs	r1, #170	; 0xaa
 800a8f0:	0049      	lsls	r1, r1, #1
 800a8f2:	4288      	cmp	r0, r1
 800a8f4:	d802      	bhi.n	800a8fc <_malloc_r+0x294>
 800a8f6:	0bd1      	lsrs	r1, r2, #15
 800a8f8:	3177      	adds	r1, #119	; 0x77
 800a8fa:	e7de      	b.n	800a8ba <_malloc_r+0x252>
 800a8fc:	4f26      	ldr	r7, [pc, #152]	; (800a998 <_malloc_r+0x330>)
 800a8fe:	217e      	movs	r1, #126	; 0x7e
 800a900:	42b8      	cmp	r0, r7
 800a902:	d8da      	bhi.n	800a8ba <_malloc_r+0x252>
 800a904:	0c91      	lsrs	r1, r2, #18
 800a906:	317c      	adds	r1, #124	; 0x7c
 800a908:	e7d7      	b.n	800a8ba <_malloc_r+0x252>
 800a90a:	6880      	ldr	r0, [r0, #8]
 800a90c:	4287      	cmp	r7, r0
 800a90e:	d004      	beq.n	800a91a <_malloc_r+0x2b2>
 800a910:	2603      	movs	r6, #3
 800a912:	6841      	ldr	r1, [r0, #4]
 800a914:	43b1      	bics	r1, r6
 800a916:	4291      	cmp	r1, r2
 800a918:	d8f7      	bhi.n	800a90a <_malloc_r+0x2a2>
 800a91a:	68c7      	ldr	r7, [r0, #12]
 800a91c:	e7d8      	b.n	800a8d0 <_malloc_r+0x268>
 800a91e:	2603      	movs	r6, #3
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	43b1      	bics	r1, r6
 800a924:	9103      	str	r1, [sp, #12]
 800a926:	68e6      	ldr	r6, [r4, #12]
 800a928:	1b49      	subs	r1, r1, r5
 800a92a:	290f      	cmp	r1, #15
 800a92c:	dd10      	ble.n	800a950 <_malloc_r+0x2e8>
 800a92e:	2201      	movs	r2, #1
 800a930:	1963      	adds	r3, r4, r5
 800a932:	4315      	orrs	r5, r2
 800a934:	6065      	str	r5, [r4, #4]
 800a936:	68a5      	ldr	r5, [r4, #8]
 800a938:	430a      	orrs	r2, r1
 800a93a:	60ee      	str	r6, [r5, #12]
 800a93c:	60b5      	str	r5, [r6, #8]
 800a93e:	6143      	str	r3, [r0, #20]
 800a940:	6103      	str	r3, [r0, #16]
 800a942:	4814      	ldr	r0, [pc, #80]	; (800a994 <_malloc_r+0x32c>)
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	60d8      	str	r0, [r3, #12]
 800a948:	6098      	str	r0, [r3, #8]
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	50e1      	str	r1, [r4, r3]
 800a94e:	e6eb      	b.n	800a728 <_malloc_r+0xc0>
 800a950:	2900      	cmp	r1, #0
 800a952:	db09      	blt.n	800a968 <_malloc_r+0x300>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	18e1      	adds	r1, r4, r3
 800a958:	2301      	movs	r3, #1
 800a95a:	684a      	ldr	r2, [r1, #4]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	604b      	str	r3, [r1, #4]
 800a960:	68a3      	ldr	r3, [r4, #8]
 800a962:	60de      	str	r6, [r3, #12]
 800a964:	60b3      	str	r3, [r6, #8]
 800a966:	e6df      	b.n	800a728 <_malloc_r+0xc0>
 800a968:	0034      	movs	r4, r6
 800a96a:	e739      	b.n	800a7e0 <_malloc_r+0x178>
 800a96c:	2108      	movs	r1, #8
 800a96e:	4249      	negs	r1, r1
 800a970:	448c      	add	ip, r1
 800a972:	4661      	mov	r1, ip
 800a974:	6889      	ldr	r1, [r1, #8]
 800a976:	3b01      	subs	r3, #1
 800a978:	4561      	cmp	r1, ip
 800a97a:	d100      	bne.n	800a97e <_malloc_r+0x316>
 800a97c:	e73a      	b.n	800a7f4 <_malloc_r+0x18c>
 800a97e:	e740      	b.n	800a802 <_malloc_r+0x19a>
 800a980:	3304      	adds	r3, #4
 800a982:	0052      	lsls	r2, r2, #1
 800a984:	420a      	tst	r2, r1
 800a986:	d0fb      	beq.n	800a980 <_malloc_r+0x318>
 800a988:	e724      	b.n	800a7d4 <_malloc_r+0x16c>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	e7fa      	b.n	800a984 <_malloc_r+0x31c>
 800a98e:	46c0      	nop			; (mov r8, r8)
 800a990:	20000028 	.word	0x20000028
 800a994:	20000030 	.word	0x20000030
 800a998:	00000554 	.word	0x00000554
 800a99c:	20000c60 	.word	0x20000c60
 800a9a0:	20000430 	.word	0x20000430
 800a9a4:	20000c30 	.word	0x20000c30
 800a9a8:	20000c58 	.word	0x20000c58
 800a9ac:	20000c5c 	.word	0x20000c5c
 800a9b0:	4934      	ldr	r1, [pc, #208]	; (800aa84 <_malloc_r+0x41c>)
 800a9b2:	6808      	ldr	r0, [r1, #0]
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d140      	bne.n	800aa3a <_malloc_r+0x3d2>
 800a9b8:	600c      	str	r4, [r1, #0]
 800a9ba:	2107      	movs	r1, #7
 800a9bc:	0026      	movs	r6, r4
 800a9be:	2300      	movs	r3, #0
 800a9c0:	400e      	ands	r6, r1
 800a9c2:	420c      	tst	r4, r1
 800a9c4:	d002      	beq.n	800a9cc <_malloc_r+0x364>
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	1b9b      	subs	r3, r3, r6
 800a9ca:	18e4      	adds	r4, r4, r3
 800a9cc:	19e1      	adds	r1, r4, r7
 800a9ce:	9105      	str	r1, [sp, #20]
 800a9d0:	9f05      	ldr	r7, [sp, #20]
 800a9d2:	9904      	ldr	r1, [sp, #16]
 800a9d4:	4017      	ands	r7, r2
 800a9d6:	18cb      	adds	r3, r1, r3
 800a9d8:	1bdf      	subs	r7, r3, r7
 800a9da:	4017      	ands	r7, r2
 800a9dc:	0039      	movs	r1, r7
 800a9de:	9801      	ldr	r0, [sp, #4]
 800a9e0:	f001 f948 	bl	800bc74 <_sbrk_r>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d107      	bne.n	800a9f8 <_malloc_r+0x390>
 800a9e8:	1e37      	subs	r7, r6, #0
 800a9ea:	9805      	ldr	r0, [sp, #20]
 800a9ec:	d004      	beq.n	800a9f8 <_malloc_r+0x390>
 800a9ee:	0030      	movs	r0, r6
 800a9f0:	2700      	movs	r7, #0
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	3808      	subs	r0, #8
 800a9f6:	1818      	adds	r0, r3, r0
 800a9f8:	4a23      	ldr	r2, [pc, #140]	; (800aa88 <_malloc_r+0x420>)
 800a9fa:	1b00      	subs	r0, r0, r4
 800a9fc:	6813      	ldr	r3, [r2, #0]
 800a9fe:	19c0      	adds	r0, r0, r7
 800aa00:	19db      	adds	r3, r3, r7
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	2201      	movs	r2, #1
 800aa06:	4b21      	ldr	r3, [pc, #132]	; (800aa8c <_malloc_r+0x424>)
 800aa08:	9902      	ldr	r1, [sp, #8]
 800aa0a:	4310      	orrs	r0, r2
 800aa0c:	609c      	str	r4, [r3, #8]
 800aa0e:	6060      	str	r0, [r4, #4]
 800aa10:	4299      	cmp	r1, r3
 800aa12:	d100      	bne.n	800aa16 <_malloc_r+0x3ae>
 800aa14:	e73e      	b.n	800a894 <_malloc_r+0x22c>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	2b0f      	cmp	r3, #15
 800aa1a:	d813      	bhi.n	800aa44 <_malloc_r+0x3dc>
 800aa1c:	6062      	str	r2, [r4, #4]
 800aa1e:	2203      	movs	r2, #3
 800aa20:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <_malloc_r+0x424>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	4393      	bics	r3, r2
 800aa28:	1b59      	subs	r1, r3, r5
 800aa2a:	42ab      	cmp	r3, r5
 800aa2c:	d301      	bcc.n	800aa32 <_malloc_r+0x3ca>
 800aa2e:	290f      	cmp	r1, #15
 800aa30:	dc1f      	bgt.n	800aa72 <_malloc_r+0x40a>
 800aa32:	9801      	ldr	r0, [sp, #4]
 800aa34:	f000 f834 	bl	800aaa0 <__malloc_unlock>
 800aa38:	e623      	b.n	800a682 <_malloc_r+0x1a>
 800aa3a:	4913      	ldr	r1, [pc, #76]	; (800aa88 <_malloc_r+0x420>)
 800aa3c:	1ba6      	subs	r6, r4, r6
 800aa3e:	18f6      	adds	r6, r6, r3
 800aa40:	600e      	str	r6, [r1, #0]
 800aa42:	e7ba      	b.n	800a9ba <_malloc_r+0x352>
 800aa44:	2107      	movs	r1, #7
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	3b0c      	subs	r3, #12
 800aa4a:	438b      	bics	r3, r1
 800aa4c:	9902      	ldr	r1, [sp, #8]
 800aa4e:	6849      	ldr	r1, [r1, #4]
 800aa50:	400a      	ands	r2, r1
 800aa52:	9902      	ldr	r1, [sp, #8]
 800aa54:	431a      	orrs	r2, r3
 800aa56:	604a      	str	r2, [r1, #4]
 800aa58:	18ca      	adds	r2, r1, r3
 800aa5a:	2105      	movs	r1, #5
 800aa5c:	6051      	str	r1, [r2, #4]
 800aa5e:	6091      	str	r1, [r2, #8]
 800aa60:	2b0f      	cmp	r3, #15
 800aa62:	d800      	bhi.n	800aa66 <_malloc_r+0x3fe>
 800aa64:	e716      	b.n	800a894 <_malloc_r+0x22c>
 800aa66:	9902      	ldr	r1, [sp, #8]
 800aa68:	9801      	ldr	r0, [sp, #4]
 800aa6a:	3108      	adds	r1, #8
 800aa6c:	f001 f9dc 	bl	800be28 <_free_r>
 800aa70:	e710      	b.n	800a894 <_malloc_r+0x22c>
 800aa72:	2201      	movs	r2, #1
 800aa74:	0013      	movs	r3, r2
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <_malloc_r+0x424>)
 800aa78:	432b      	orrs	r3, r5
 800aa7a:	6884      	ldr	r4, [r0, #8]
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	1963      	adds	r3, r4, r5
 800aa80:	6083      	str	r3, [r0, #8]
 800aa82:	e623      	b.n	800a6cc <_malloc_r+0x64>
 800aa84:	20000430 	.word	0x20000430
 800aa88:	20000c30 	.word	0x20000c30
 800aa8c:	20000028 	.word	0x20000028

0800aa90 <__malloc_lock>:
 800aa90:	b510      	push	{r4, lr}
 800aa92:	4802      	ldr	r0, [pc, #8]	; (800aa9c <__malloc_lock+0xc>)
 800aa94:	f001 f940 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	20000da5 	.word	0x20000da5

0800aaa0 <__malloc_unlock>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4802      	ldr	r0, [pc, #8]	; (800aaac <__malloc_unlock+0xc>)
 800aaa4:	f001 f939 	bl	800bd1a <__retarget_lock_release_recursive>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	20000da5 	.word	0x20000da5

0800aab0 <sulp>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	0016      	movs	r6, r2
 800aab4:	000d      	movs	r5, r1
 800aab6:	f002 f90d 	bl	800ccd4 <__ulp>
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	d00d      	beq.n	800aada <sulp+0x2a>
 800aabe:	236b      	movs	r3, #107	; 0x6b
 800aac0:	006a      	lsls	r2, r5, #1
 800aac2:	0d52      	lsrs	r2, r2, #21
 800aac4:	1a9b      	subs	r3, r3, r2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	dd07      	ble.n	800aada <sulp+0x2a>
 800aaca:	2400      	movs	r4, #0
 800aacc:	4a03      	ldr	r2, [pc, #12]	; (800aadc <sulp+0x2c>)
 800aace:	051b      	lsls	r3, r3, #20
 800aad0:	189d      	adds	r5, r3, r2
 800aad2:	002b      	movs	r3, r5
 800aad4:	0022      	movs	r2, r4
 800aad6:	f7f6 fdc9 	bl	800166c <__aeabi_dmul>
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	3ff00000 	.word	0x3ff00000

0800aae0 <_strtod_l>:
 800aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aae2:	b0a1      	sub	sp, #132	; 0x84
 800aae4:	9219      	str	r2, [sp, #100]	; 0x64
 800aae6:	2200      	movs	r2, #0
 800aae8:	2600      	movs	r6, #0
 800aaea:	2700      	movs	r7, #0
 800aaec:	9004      	str	r0, [sp, #16]
 800aaee:	9107      	str	r1, [sp, #28]
 800aaf0:	921c      	str	r2, [sp, #112]	; 0x70
 800aaf2:	911b      	str	r1, [sp, #108]	; 0x6c
 800aaf4:	780a      	ldrb	r2, [r1, #0]
 800aaf6:	2a2b      	cmp	r2, #43	; 0x2b
 800aaf8:	d055      	beq.n	800aba6 <_strtod_l+0xc6>
 800aafa:	d841      	bhi.n	800ab80 <_strtod_l+0xa0>
 800aafc:	2a0d      	cmp	r2, #13
 800aafe:	d83b      	bhi.n	800ab78 <_strtod_l+0x98>
 800ab00:	2a08      	cmp	r2, #8
 800ab02:	d83b      	bhi.n	800ab7c <_strtod_l+0x9c>
 800ab04:	2a00      	cmp	r2, #0
 800ab06:	d044      	beq.n	800ab92 <_strtod_l+0xb2>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ab10:	9109      	str	r1, [sp, #36]	; 0x24
 800ab12:	782a      	ldrb	r2, [r5, #0]
 800ab14:	2a30      	cmp	r2, #48	; 0x30
 800ab16:	d000      	beq.n	800ab1a <_strtod_l+0x3a>
 800ab18:	e085      	b.n	800ac26 <_strtod_l+0x146>
 800ab1a:	786a      	ldrb	r2, [r5, #1]
 800ab1c:	3120      	adds	r1, #32
 800ab1e:	438a      	bics	r2, r1
 800ab20:	2a58      	cmp	r2, #88	; 0x58
 800ab22:	d000      	beq.n	800ab26 <_strtod_l+0x46>
 800ab24:	e075      	b.n	800ac12 <_strtod_l+0x132>
 800ab26:	9302      	str	r3, [sp, #8]
 800ab28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab2a:	4a97      	ldr	r2, [pc, #604]	; (800ad88 <_strtod_l+0x2a8>)
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	ab1c      	add	r3, sp, #112	; 0x70
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	9804      	ldr	r0, [sp, #16]
 800ab34:	ab1d      	add	r3, sp, #116	; 0x74
 800ab36:	a91b      	add	r1, sp, #108	; 0x6c
 800ab38:	f001 fa92 	bl	800c060 <__gethex>
 800ab3c:	230f      	movs	r3, #15
 800ab3e:	0002      	movs	r2, r0
 800ab40:	401a      	ands	r2, r3
 800ab42:	0004      	movs	r4, r0
 800ab44:	9205      	str	r2, [sp, #20]
 800ab46:	4218      	tst	r0, r3
 800ab48:	d005      	beq.n	800ab56 <_strtod_l+0x76>
 800ab4a:	2a06      	cmp	r2, #6
 800ab4c:	d12d      	bne.n	800abaa <_strtod_l+0xca>
 800ab4e:	1c6b      	adds	r3, r5, #1
 800ab50:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab52:	2300      	movs	r3, #0
 800ab54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <_strtod_l+0x82>
 800ab5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01b      	beq.n	800aba0 <_strtod_l+0xc0>
 800ab68:	2380      	movs	r3, #128	; 0x80
 800ab6a:	0032      	movs	r2, r6
 800ab6c:	061b      	lsls	r3, r3, #24
 800ab6e:	18fb      	adds	r3, r7, r3
 800ab70:	0010      	movs	r0, r2
 800ab72:	0019      	movs	r1, r3
 800ab74:	b021      	add	sp, #132	; 0x84
 800ab76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab78:	2a20      	cmp	r2, #32
 800ab7a:	d1c5      	bne.n	800ab08 <_strtod_l+0x28>
 800ab7c:	3101      	adds	r1, #1
 800ab7e:	e7b8      	b.n	800aaf2 <_strtod_l+0x12>
 800ab80:	2a2d      	cmp	r2, #45	; 0x2d
 800ab82:	d1c1      	bne.n	800ab08 <_strtod_l+0x28>
 800ab84:	3a2c      	subs	r2, #44	; 0x2c
 800ab86:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab88:	1c4a      	adds	r2, r1, #1
 800ab8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab8c:	784a      	ldrb	r2, [r1, #1]
 800ab8e:	2a00      	cmp	r2, #0
 800ab90:	d1bc      	bne.n	800ab0c <_strtod_l+0x2c>
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab96:	2300      	movs	r3, #0
 800ab98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1dd      	bne.n	800ab5c <_strtod_l+0x7c>
 800aba0:	0032      	movs	r2, r6
 800aba2:	003b      	movs	r3, r7
 800aba4:	e7e4      	b.n	800ab70 <_strtod_l+0x90>
 800aba6:	2200      	movs	r2, #0
 800aba8:	e7ed      	b.n	800ab86 <_strtod_l+0xa6>
 800abaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abac:	2a00      	cmp	r2, #0
 800abae:	d007      	beq.n	800abc0 <_strtod_l+0xe0>
 800abb0:	2135      	movs	r1, #53	; 0x35
 800abb2:	a81e      	add	r0, sp, #120	; 0x78
 800abb4:	f002 f97f 	bl	800ceb6 <__copybits>
 800abb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abba:	9804      	ldr	r0, [sp, #16]
 800abbc:	f001 fd7c 	bl	800c6b8 <_Bfree>
 800abc0:	9805      	ldr	r0, [sp, #20]
 800abc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abc4:	3801      	subs	r0, #1
 800abc6:	2804      	cmp	r0, #4
 800abc8:	d806      	bhi.n	800abd8 <_strtod_l+0xf8>
 800abca:	f7f5 faa3 	bl	8000114 <__gnu_thumb1_case_uqi>
 800abce:	0312      	.short	0x0312
 800abd0:	1e1c      	.short	0x1e1c
 800abd2:	12          	.byte	0x12
 800abd3:	00          	.byte	0x00
 800abd4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800abd6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800abd8:	05e4      	lsls	r4, r4, #23
 800abda:	d502      	bpl.n	800abe2 <_strtod_l+0x102>
 800abdc:	2380      	movs	r3, #128	; 0x80
 800abde:	061b      	lsls	r3, r3, #24
 800abe0:	431f      	orrs	r7, r3
 800abe2:	4b6a      	ldr	r3, [pc, #424]	; (800ad8c <_strtod_l+0x2ac>)
 800abe4:	423b      	tst	r3, r7
 800abe6:	d1b6      	bne.n	800ab56 <_strtod_l+0x76>
 800abe8:	f001 f86a 	bl	800bcc0 <__errno>
 800abec:	2322      	movs	r3, #34	; 0x22
 800abee:	6003      	str	r3, [r0, #0]
 800abf0:	e7b1      	b.n	800ab56 <_strtod_l+0x76>
 800abf2:	4967      	ldr	r1, [pc, #412]	; (800ad90 <_strtod_l+0x2b0>)
 800abf4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800abf6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800abf8:	400a      	ands	r2, r1
 800abfa:	4966      	ldr	r1, [pc, #408]	; (800ad94 <_strtod_l+0x2b4>)
 800abfc:	185b      	adds	r3, r3, r1
 800abfe:	051b      	lsls	r3, r3, #20
 800ac00:	431a      	orrs	r2, r3
 800ac02:	0017      	movs	r7, r2
 800ac04:	e7e8      	b.n	800abd8 <_strtod_l+0xf8>
 800ac06:	4f61      	ldr	r7, [pc, #388]	; (800ad8c <_strtod_l+0x2ac>)
 800ac08:	e7e6      	b.n	800abd8 <_strtod_l+0xf8>
 800ac0a:	2601      	movs	r6, #1
 800ac0c:	4f62      	ldr	r7, [pc, #392]	; (800ad98 <_strtod_l+0x2b8>)
 800ac0e:	4276      	negs	r6, r6
 800ac10:	e7e2      	b.n	800abd8 <_strtod_l+0xf8>
 800ac12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac18:	785b      	ldrb	r3, [r3, #1]
 800ac1a:	2b30      	cmp	r3, #48	; 0x30
 800ac1c:	d0f9      	beq.n	800ac12 <_strtod_l+0x132>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d099      	beq.n	800ab56 <_strtod_l+0x76>
 800ac22:	2301      	movs	r3, #1
 800ac24:	9309      	str	r3, [sp, #36]	; 0x24
 800ac26:	2500      	movs	r5, #0
 800ac28:	220a      	movs	r2, #10
 800ac2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac2c:	950d      	str	r5, [sp, #52]	; 0x34
 800ac2e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac30:	9508      	str	r5, [sp, #32]
 800ac32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ac34:	7804      	ldrb	r4, [r0, #0]
 800ac36:	0023      	movs	r3, r4
 800ac38:	3b30      	subs	r3, #48	; 0x30
 800ac3a:	b2d9      	uxtb	r1, r3
 800ac3c:	2909      	cmp	r1, #9
 800ac3e:	d927      	bls.n	800ac90 <_strtod_l+0x1b0>
 800ac40:	2201      	movs	r2, #1
 800ac42:	4956      	ldr	r1, [pc, #344]	; (800ad9c <_strtod_l+0x2bc>)
 800ac44:	f000 ff98 	bl	800bb78 <strncmp>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d031      	beq.n	800acb0 <_strtod_l+0x1d0>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	0023      	movs	r3, r4
 800ac50:	4684      	mov	ip, r0
 800ac52:	9a08      	ldr	r2, [sp, #32]
 800ac54:	900c      	str	r0, [sp, #48]	; 0x30
 800ac56:	9205      	str	r2, [sp, #20]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	0019      	movs	r1, r3
 800ac5c:	4391      	bics	r1, r2
 800ac5e:	000a      	movs	r2, r1
 800ac60:	2100      	movs	r1, #0
 800ac62:	9106      	str	r1, [sp, #24]
 800ac64:	2a45      	cmp	r2, #69	; 0x45
 800ac66:	d000      	beq.n	800ac6a <_strtod_l+0x18a>
 800ac68:	e0c2      	b.n	800adf0 <_strtod_l+0x310>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	4313      	orrs	r3, r2
 800ac72:	428b      	cmp	r3, r1
 800ac74:	d08d      	beq.n	800ab92 <_strtod_l+0xb2>
 800ac76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac78:	9307      	str	r3, [sp, #28]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac7e:	9b07      	ldr	r3, [sp, #28]
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	2b2b      	cmp	r3, #43	; 0x2b
 800ac84:	d071      	beq.n	800ad6a <_strtod_l+0x28a>
 800ac86:	000c      	movs	r4, r1
 800ac88:	2b2d      	cmp	r3, #45	; 0x2d
 800ac8a:	d174      	bne.n	800ad76 <_strtod_l+0x296>
 800ac8c:	2401      	movs	r4, #1
 800ac8e:	e06d      	b.n	800ad6c <_strtod_l+0x28c>
 800ac90:	9908      	ldr	r1, [sp, #32]
 800ac92:	2908      	cmp	r1, #8
 800ac94:	dc09      	bgt.n	800acaa <_strtod_l+0x1ca>
 800ac96:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac98:	4351      	muls	r1, r2
 800ac9a:	185b      	adds	r3, r3, r1
 800ac9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac9e:	9b08      	ldr	r3, [sp, #32]
 800aca0:	3001      	adds	r0, #1
 800aca2:	3301      	adds	r3, #1
 800aca4:	9308      	str	r3, [sp, #32]
 800aca6:	901b      	str	r0, [sp, #108]	; 0x6c
 800aca8:	e7c3      	b.n	800ac32 <_strtod_l+0x152>
 800acaa:	4355      	muls	r5, r2
 800acac:	195d      	adds	r5, r3, r5
 800acae:	e7f6      	b.n	800ac9e <_strtod_l+0x1be>
 800acb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	921b      	str	r2, [sp, #108]	; 0x6c
 800acb6:	9a08      	ldr	r2, [sp, #32]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2a00      	cmp	r2, #0
 800acbc:	d03a      	beq.n	800ad34 <_strtod_l+0x254>
 800acbe:	900c      	str	r0, [sp, #48]	; 0x30
 800acc0:	9205      	str	r2, [sp, #20]
 800acc2:	001a      	movs	r2, r3
 800acc4:	3a30      	subs	r2, #48	; 0x30
 800acc6:	2a09      	cmp	r2, #9
 800acc8:	d912      	bls.n	800acf0 <_strtod_l+0x210>
 800acca:	2201      	movs	r2, #1
 800accc:	4694      	mov	ip, r2
 800acce:	e7c3      	b.n	800ac58 <_strtod_l+0x178>
 800acd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acd2:	3001      	adds	r0, #1
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	921b      	str	r2, [sp, #108]	; 0x6c
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b30      	cmp	r3, #48	; 0x30
 800acdc:	d0f8      	beq.n	800acd0 <_strtod_l+0x1f0>
 800acde:	001a      	movs	r2, r3
 800ace0:	3a31      	subs	r2, #49	; 0x31
 800ace2:	2a08      	cmp	r2, #8
 800ace4:	d83c      	bhi.n	800ad60 <_strtod_l+0x280>
 800ace6:	900c      	str	r0, [sp, #48]	; 0x30
 800ace8:	2000      	movs	r0, #0
 800acea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800acec:	9005      	str	r0, [sp, #20]
 800acee:	9210      	str	r2, [sp, #64]	; 0x40
 800acf0:	001a      	movs	r2, r3
 800acf2:	1c41      	adds	r1, r0, #1
 800acf4:	3a30      	subs	r2, #48	; 0x30
 800acf6:	2b30      	cmp	r3, #48	; 0x30
 800acf8:	d016      	beq.n	800ad28 <_strtod_l+0x248>
 800acfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acfc:	185b      	adds	r3, r3, r1
 800acfe:	930c      	str	r3, [sp, #48]	; 0x30
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	210a      	movs	r1, #10
 800ad04:	469c      	mov	ip, r3
 800ad06:	4484      	add	ip, r0
 800ad08:	4563      	cmp	r3, ip
 800ad0a:	d115      	bne.n	800ad38 <_strtod_l+0x258>
 800ad0c:	9905      	ldr	r1, [sp, #20]
 800ad0e:	9b05      	ldr	r3, [sp, #20]
 800ad10:	3101      	adds	r1, #1
 800ad12:	1809      	adds	r1, r1, r0
 800ad14:	181b      	adds	r3, r3, r0
 800ad16:	9105      	str	r1, [sp, #20]
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	dc19      	bgt.n	800ad50 <_strtod_l+0x270>
 800ad1c:	230a      	movs	r3, #10
 800ad1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad20:	434b      	muls	r3, r1
 800ad22:	2100      	movs	r1, #0
 800ad24:	18d3      	adds	r3, r2, r3
 800ad26:	930d      	str	r3, [sp, #52]	; 0x34
 800ad28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad2a:	0008      	movs	r0, r1
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	e7c6      	b.n	800acc2 <_strtod_l+0x1e2>
 800ad34:	9808      	ldr	r0, [sp, #32]
 800ad36:	e7d0      	b.n	800acda <_strtod_l+0x1fa>
 800ad38:	1c5c      	adds	r4, r3, #1
 800ad3a:	2b08      	cmp	r3, #8
 800ad3c:	dc04      	bgt.n	800ad48 <_strtod_l+0x268>
 800ad3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad40:	434b      	muls	r3, r1
 800ad42:	930d      	str	r3, [sp, #52]	; 0x34
 800ad44:	0023      	movs	r3, r4
 800ad46:	e7df      	b.n	800ad08 <_strtod_l+0x228>
 800ad48:	2c10      	cmp	r4, #16
 800ad4a:	dcfb      	bgt.n	800ad44 <_strtod_l+0x264>
 800ad4c:	434d      	muls	r5, r1
 800ad4e:	e7f9      	b.n	800ad44 <_strtod_l+0x264>
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	2100      	movs	r1, #0
 800ad54:	2b10      	cmp	r3, #16
 800ad56:	dce7      	bgt.n	800ad28 <_strtod_l+0x248>
 800ad58:	230a      	movs	r3, #10
 800ad5a:	435d      	muls	r5, r3
 800ad5c:	1955      	adds	r5, r2, r5
 800ad5e:	e7e3      	b.n	800ad28 <_strtod_l+0x248>
 800ad60:	2200      	movs	r2, #0
 800ad62:	920c      	str	r2, [sp, #48]	; 0x30
 800ad64:	9205      	str	r2, [sp, #20]
 800ad66:	3201      	adds	r2, #1
 800ad68:	e7b0      	b.n	800accc <_strtod_l+0x1ec>
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	3302      	adds	r3, #2
 800ad70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad72:	9b07      	ldr	r3, [sp, #28]
 800ad74:	789b      	ldrb	r3, [r3, #2]
 800ad76:	001a      	movs	r2, r3
 800ad78:	3a30      	subs	r2, #48	; 0x30
 800ad7a:	2a09      	cmp	r2, #9
 800ad7c:	d914      	bls.n	800ada8 <_strtod_l+0x2c8>
 800ad7e:	9a07      	ldr	r2, [sp, #28]
 800ad80:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad82:	2200      	movs	r2, #0
 800ad84:	e033      	b.n	800adee <_strtod_l+0x30e>
 800ad86:	46c0      	nop			; (mov r8, r8)
 800ad88:	080142d0 	.word	0x080142d0
 800ad8c:	7ff00000 	.word	0x7ff00000
 800ad90:	ffefffff 	.word	0xffefffff
 800ad94:	00000433 	.word	0x00000433
 800ad98:	7fffffff 	.word	0x7fffffff
 800ad9c:	080142cc 	.word	0x080142cc
 800ada0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	921b      	str	r2, [sp, #108]	; 0x6c
 800ada6:	785b      	ldrb	r3, [r3, #1]
 800ada8:	2b30      	cmp	r3, #48	; 0x30
 800adaa:	d0f9      	beq.n	800ada0 <_strtod_l+0x2c0>
 800adac:	2200      	movs	r2, #0
 800adae:	9206      	str	r2, [sp, #24]
 800adb0:	001a      	movs	r2, r3
 800adb2:	3a31      	subs	r2, #49	; 0x31
 800adb4:	2a08      	cmp	r2, #8
 800adb6:	d81b      	bhi.n	800adf0 <_strtod_l+0x310>
 800adb8:	3b30      	subs	r3, #48	; 0x30
 800adba:	930e      	str	r3, [sp, #56]	; 0x38
 800adbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adbe:	9306      	str	r3, [sp, #24]
 800adc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adc2:	1c59      	adds	r1, r3, #1
 800adc4:	911b      	str	r1, [sp, #108]	; 0x6c
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	001a      	movs	r2, r3
 800adca:	3a30      	subs	r2, #48	; 0x30
 800adcc:	2a09      	cmp	r2, #9
 800adce:	d93a      	bls.n	800ae46 <_strtod_l+0x366>
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	1a8a      	subs	r2, r1, r2
 800add4:	49b2      	ldr	r1, [pc, #712]	; (800b0a0 <_strtod_l+0x5c0>)
 800add6:	9106      	str	r1, [sp, #24]
 800add8:	2a08      	cmp	r2, #8
 800adda:	dc04      	bgt.n	800ade6 <_strtod_l+0x306>
 800addc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adde:	9206      	str	r2, [sp, #24]
 800ade0:	428a      	cmp	r2, r1
 800ade2:	dd00      	ble.n	800ade6 <_strtod_l+0x306>
 800ade4:	9106      	str	r1, [sp, #24]
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	d002      	beq.n	800adf0 <_strtod_l+0x310>
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	4252      	negs	r2, r2
 800adee:	9206      	str	r2, [sp, #24]
 800adf0:	9a05      	ldr	r2, [sp, #20]
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	d14d      	bne.n	800ae92 <_strtod_l+0x3b2>
 800adf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf8:	4310      	orrs	r0, r2
 800adfa:	d000      	beq.n	800adfe <_strtod_l+0x31e>
 800adfc:	e6ab      	b.n	800ab56 <_strtod_l+0x76>
 800adfe:	4662      	mov	r2, ip
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d000      	beq.n	800ae06 <_strtod_l+0x326>
 800ae04:	e6c5      	b.n	800ab92 <_strtod_l+0xb2>
 800ae06:	2b69      	cmp	r3, #105	; 0x69
 800ae08:	d027      	beq.n	800ae5a <_strtod_l+0x37a>
 800ae0a:	dc23      	bgt.n	800ae54 <_strtod_l+0x374>
 800ae0c:	2b49      	cmp	r3, #73	; 0x49
 800ae0e:	d024      	beq.n	800ae5a <_strtod_l+0x37a>
 800ae10:	2b4e      	cmp	r3, #78	; 0x4e
 800ae12:	d000      	beq.n	800ae16 <_strtod_l+0x336>
 800ae14:	e6bd      	b.n	800ab92 <_strtod_l+0xb2>
 800ae16:	49a3      	ldr	r1, [pc, #652]	; (800b0a4 <_strtod_l+0x5c4>)
 800ae18:	a81b      	add	r0, sp, #108	; 0x6c
 800ae1a:	f001 fb57 	bl	800c4cc <__match>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d100      	bne.n	800ae24 <_strtod_l+0x344>
 800ae22:	e6b6      	b.n	800ab92 <_strtod_l+0xb2>
 800ae24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b28      	cmp	r3, #40	; 0x28
 800ae2a:	d12c      	bne.n	800ae86 <_strtod_l+0x3a6>
 800ae2c:	499e      	ldr	r1, [pc, #632]	; (800b0a8 <_strtod_l+0x5c8>)
 800ae2e:	aa1e      	add	r2, sp, #120	; 0x78
 800ae30:	a81b      	add	r0, sp, #108	; 0x6c
 800ae32:	f001 fb5f 	bl	800c4f4 <__hexnan>
 800ae36:	2805      	cmp	r0, #5
 800ae38:	d125      	bne.n	800ae86 <_strtod_l+0x3a6>
 800ae3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae3c:	4a9b      	ldr	r2, [pc, #620]	; (800b0ac <_strtod_l+0x5cc>)
 800ae3e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ae40:	431a      	orrs	r2, r3
 800ae42:	0017      	movs	r7, r2
 800ae44:	e687      	b.n	800ab56 <_strtod_l+0x76>
 800ae46:	220a      	movs	r2, #10
 800ae48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ae4a:	434a      	muls	r2, r1
 800ae4c:	18d2      	adds	r2, r2, r3
 800ae4e:	3a30      	subs	r2, #48	; 0x30
 800ae50:	920e      	str	r2, [sp, #56]	; 0x38
 800ae52:	e7b5      	b.n	800adc0 <_strtod_l+0x2e0>
 800ae54:	2b6e      	cmp	r3, #110	; 0x6e
 800ae56:	d0de      	beq.n	800ae16 <_strtod_l+0x336>
 800ae58:	e69b      	b.n	800ab92 <_strtod_l+0xb2>
 800ae5a:	4995      	ldr	r1, [pc, #596]	; (800b0b0 <_strtod_l+0x5d0>)
 800ae5c:	a81b      	add	r0, sp, #108	; 0x6c
 800ae5e:	f001 fb35 	bl	800c4cc <__match>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d100      	bne.n	800ae68 <_strtod_l+0x388>
 800ae66:	e694      	b.n	800ab92 <_strtod_l+0xb2>
 800ae68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae6a:	4992      	ldr	r1, [pc, #584]	; (800b0b4 <_strtod_l+0x5d4>)
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	a81b      	add	r0, sp, #108	; 0x6c
 800ae70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae72:	f001 fb2b 	bl	800c4cc <__match>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d102      	bne.n	800ae80 <_strtod_l+0x3a0>
 800ae7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae80:	2600      	movs	r6, #0
 800ae82:	4f8a      	ldr	r7, [pc, #552]	; (800b0ac <_strtod_l+0x5cc>)
 800ae84:	e667      	b.n	800ab56 <_strtod_l+0x76>
 800ae86:	488c      	ldr	r0, [pc, #560]	; (800b0b8 <_strtod_l+0x5d8>)
 800ae88:	f000 ff5c 	bl	800bd44 <nan>
 800ae8c:	0006      	movs	r6, r0
 800ae8e:	000f      	movs	r7, r1
 800ae90:	e661      	b.n	800ab56 <_strtod_l+0x76>
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae96:	1a9b      	subs	r3, r3, r2
 800ae98:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <_strtod_l+0x3c4>
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	9308      	str	r3, [sp, #32]
 800aea4:	9c05      	ldr	r4, [sp, #20]
 800aea6:	2c10      	cmp	r4, #16
 800aea8:	dd00      	ble.n	800aeac <_strtod_l+0x3cc>
 800aeaa:	2410      	movs	r4, #16
 800aeac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aeae:	f7f7 faa5 	bl	80023fc <__aeabi_ui2d>
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	0006      	movs	r6, r0
 800aeb6:	000f      	movs	r7, r1
 800aeb8:	2b09      	cmp	r3, #9
 800aeba:	dd15      	ble.n	800aee8 <_strtod_l+0x408>
 800aebc:	0022      	movs	r2, r4
 800aebe:	4b7f      	ldr	r3, [pc, #508]	; (800b0bc <_strtod_l+0x5dc>)
 800aec0:	3a09      	subs	r2, #9
 800aec2:	00d2      	lsls	r2, r2, #3
 800aec4:	189b      	adds	r3, r3, r2
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f7f6 fbcf 	bl	800166c <__aeabi_dmul>
 800aece:	0006      	movs	r6, r0
 800aed0:	0028      	movs	r0, r5
 800aed2:	000f      	movs	r7, r1
 800aed4:	f7f7 fa92 	bl	80023fc <__aeabi_ui2d>
 800aed8:	0002      	movs	r2, r0
 800aeda:	000b      	movs	r3, r1
 800aedc:	0030      	movs	r0, r6
 800aede:	0039      	movs	r1, r7
 800aee0:	f7f5 fc6a 	bl	80007b8 <__aeabi_dadd>
 800aee4:	0006      	movs	r6, r0
 800aee6:	000f      	movs	r7, r1
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	2b0f      	cmp	r3, #15
 800aeec:	dc39      	bgt.n	800af62 <_strtod_l+0x482>
 800aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d100      	bne.n	800aef6 <_strtod_l+0x416>
 800aef4:	e62f      	b.n	800ab56 <_strtod_l+0x76>
 800aef6:	dd24      	ble.n	800af42 <_strtod_l+0x462>
 800aef8:	2b16      	cmp	r3, #22
 800aefa:	dc09      	bgt.n	800af10 <_strtod_l+0x430>
 800aefc:	496f      	ldr	r1, [pc, #444]	; (800b0bc <_strtod_l+0x5dc>)
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	18c9      	adds	r1, r1, r3
 800af02:	0032      	movs	r2, r6
 800af04:	6808      	ldr	r0, [r1, #0]
 800af06:	6849      	ldr	r1, [r1, #4]
 800af08:	003b      	movs	r3, r7
 800af0a:	f7f6 fbaf 	bl	800166c <__aeabi_dmul>
 800af0e:	e7bd      	b.n	800ae8c <_strtod_l+0x3ac>
 800af10:	2325      	movs	r3, #37	; 0x25
 800af12:	9a05      	ldr	r2, [sp, #20]
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af18:	4293      	cmp	r3, r2
 800af1a:	db22      	blt.n	800af62 <_strtod_l+0x482>
 800af1c:	240f      	movs	r4, #15
 800af1e:	9b05      	ldr	r3, [sp, #20]
 800af20:	4d66      	ldr	r5, [pc, #408]	; (800b0bc <_strtod_l+0x5dc>)
 800af22:	1ae4      	subs	r4, r4, r3
 800af24:	00e1      	lsls	r1, r4, #3
 800af26:	1869      	adds	r1, r5, r1
 800af28:	0032      	movs	r2, r6
 800af2a:	6808      	ldr	r0, [r1, #0]
 800af2c:	6849      	ldr	r1, [r1, #4]
 800af2e:	003b      	movs	r3, r7
 800af30:	f7f6 fb9c 	bl	800166c <__aeabi_dmul>
 800af34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af36:	1b1c      	subs	r4, r3, r4
 800af38:	00e4      	lsls	r4, r4, #3
 800af3a:	192d      	adds	r5, r5, r4
 800af3c:	682a      	ldr	r2, [r5, #0]
 800af3e:	686b      	ldr	r3, [r5, #4]
 800af40:	e7e3      	b.n	800af0a <_strtod_l+0x42a>
 800af42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af44:	3316      	adds	r3, #22
 800af46:	db0c      	blt.n	800af62 <_strtod_l+0x482>
 800af48:	9906      	ldr	r1, [sp, #24]
 800af4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af4c:	4b5b      	ldr	r3, [pc, #364]	; (800b0bc <_strtod_l+0x5dc>)
 800af4e:	1a52      	subs	r2, r2, r1
 800af50:	00d2      	lsls	r2, r2, #3
 800af52:	189b      	adds	r3, r3, r2
 800af54:	0030      	movs	r0, r6
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	0039      	movs	r1, r7
 800af5c:	f7f5 ff8c 	bl	8000e78 <__aeabi_ddiv>
 800af60:	e794      	b.n	800ae8c <_strtod_l+0x3ac>
 800af62:	9b05      	ldr	r3, [sp, #20]
 800af64:	1b1c      	subs	r4, r3, r4
 800af66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af68:	18e4      	adds	r4, r4, r3
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	dd72      	ble.n	800b054 <_strtod_l+0x574>
 800af6e:	220f      	movs	r2, #15
 800af70:	0023      	movs	r3, r4
 800af72:	4013      	ands	r3, r2
 800af74:	4214      	tst	r4, r2
 800af76:	d00a      	beq.n	800af8e <_strtod_l+0x4ae>
 800af78:	4950      	ldr	r1, [pc, #320]	; (800b0bc <_strtod_l+0x5dc>)
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	18c9      	adds	r1, r1, r3
 800af7e:	0032      	movs	r2, r6
 800af80:	6808      	ldr	r0, [r1, #0]
 800af82:	6849      	ldr	r1, [r1, #4]
 800af84:	003b      	movs	r3, r7
 800af86:	f7f6 fb71 	bl	800166c <__aeabi_dmul>
 800af8a:	0006      	movs	r6, r0
 800af8c:	000f      	movs	r7, r1
 800af8e:	230f      	movs	r3, #15
 800af90:	439c      	bics	r4, r3
 800af92:	d04a      	beq.n	800b02a <_strtod_l+0x54a>
 800af94:	3326      	adds	r3, #38	; 0x26
 800af96:	33ff      	adds	r3, #255	; 0xff
 800af98:	429c      	cmp	r4, r3
 800af9a:	dd22      	ble.n	800afe2 <_strtod_l+0x502>
 800af9c:	2300      	movs	r3, #0
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	9306      	str	r3, [sp, #24]
 800afa2:	930d      	str	r3, [sp, #52]	; 0x34
 800afa4:	9308      	str	r3, [sp, #32]
 800afa6:	2322      	movs	r3, #34	; 0x22
 800afa8:	2600      	movs	r6, #0
 800afaa:	9a04      	ldr	r2, [sp, #16]
 800afac:	4f3f      	ldr	r7, [pc, #252]	; (800b0ac <_strtod_l+0x5cc>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afb2:	42b3      	cmp	r3, r6
 800afb4:	d100      	bne.n	800afb8 <_strtod_l+0x4d8>
 800afb6:	e5ce      	b.n	800ab56 <_strtod_l+0x76>
 800afb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afba:	9804      	ldr	r0, [sp, #16]
 800afbc:	f001 fb7c 	bl	800c6b8 <_Bfree>
 800afc0:	9908      	ldr	r1, [sp, #32]
 800afc2:	9804      	ldr	r0, [sp, #16]
 800afc4:	f001 fb78 	bl	800c6b8 <_Bfree>
 800afc8:	9906      	ldr	r1, [sp, #24]
 800afca:	9804      	ldr	r0, [sp, #16]
 800afcc:	f001 fb74 	bl	800c6b8 <_Bfree>
 800afd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afd2:	9804      	ldr	r0, [sp, #16]
 800afd4:	f001 fb70 	bl	800c6b8 <_Bfree>
 800afd8:	9905      	ldr	r1, [sp, #20]
 800afda:	9804      	ldr	r0, [sp, #16]
 800afdc:	f001 fb6c 	bl	800c6b8 <_Bfree>
 800afe0:	e5b9      	b.n	800ab56 <_strtod_l+0x76>
 800afe2:	2300      	movs	r3, #0
 800afe4:	0030      	movs	r0, r6
 800afe6:	0039      	movs	r1, r7
 800afe8:	4d35      	ldr	r5, [pc, #212]	; (800b0c0 <_strtod_l+0x5e0>)
 800afea:	1124      	asrs	r4, r4, #4
 800afec:	9307      	str	r3, [sp, #28]
 800afee:	2c01      	cmp	r4, #1
 800aff0:	dc1e      	bgt.n	800b030 <_strtod_l+0x550>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <_strtod_l+0x51a>
 800aff6:	0006      	movs	r6, r0
 800aff8:	000f      	movs	r7, r1
 800affa:	4b32      	ldr	r3, [pc, #200]	; (800b0c4 <_strtod_l+0x5e4>)
 800affc:	9a07      	ldr	r2, [sp, #28]
 800affe:	18ff      	adds	r7, r7, r3
 800b000:	4b2f      	ldr	r3, [pc, #188]	; (800b0c0 <_strtod_l+0x5e0>)
 800b002:	00d2      	lsls	r2, r2, #3
 800b004:	189d      	adds	r5, r3, r2
 800b006:	6828      	ldr	r0, [r5, #0]
 800b008:	6869      	ldr	r1, [r5, #4]
 800b00a:	0032      	movs	r2, r6
 800b00c:	003b      	movs	r3, r7
 800b00e:	f7f6 fb2d 	bl	800166c <__aeabi_dmul>
 800b012:	4b26      	ldr	r3, [pc, #152]	; (800b0ac <_strtod_l+0x5cc>)
 800b014:	4a2c      	ldr	r2, [pc, #176]	; (800b0c8 <_strtod_l+0x5e8>)
 800b016:	0006      	movs	r6, r0
 800b018:	400b      	ands	r3, r1
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d8be      	bhi.n	800af9c <_strtod_l+0x4bc>
 800b01e:	4a2b      	ldr	r2, [pc, #172]	; (800b0cc <_strtod_l+0x5ec>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d913      	bls.n	800b04c <_strtod_l+0x56c>
 800b024:	2601      	movs	r6, #1
 800b026:	4f2a      	ldr	r7, [pc, #168]	; (800b0d0 <_strtod_l+0x5f0>)
 800b028:	4276      	negs	r6, r6
 800b02a:	2300      	movs	r3, #0
 800b02c:	9307      	str	r3, [sp, #28]
 800b02e:	e088      	b.n	800b142 <_strtod_l+0x662>
 800b030:	2201      	movs	r2, #1
 800b032:	4214      	tst	r4, r2
 800b034:	d004      	beq.n	800b040 <_strtod_l+0x560>
 800b036:	682a      	ldr	r2, [r5, #0]
 800b038:	686b      	ldr	r3, [r5, #4]
 800b03a:	f7f6 fb17 	bl	800166c <__aeabi_dmul>
 800b03e:	2301      	movs	r3, #1
 800b040:	9a07      	ldr	r2, [sp, #28]
 800b042:	1064      	asrs	r4, r4, #1
 800b044:	3201      	adds	r2, #1
 800b046:	9207      	str	r2, [sp, #28]
 800b048:	3508      	adds	r5, #8
 800b04a:	e7d0      	b.n	800afee <_strtod_l+0x50e>
 800b04c:	23d4      	movs	r3, #212	; 0xd4
 800b04e:	049b      	lsls	r3, r3, #18
 800b050:	18cf      	adds	r7, r1, r3
 800b052:	e7ea      	b.n	800b02a <_strtod_l+0x54a>
 800b054:	2c00      	cmp	r4, #0
 800b056:	d0e8      	beq.n	800b02a <_strtod_l+0x54a>
 800b058:	4264      	negs	r4, r4
 800b05a:	230f      	movs	r3, #15
 800b05c:	0022      	movs	r2, r4
 800b05e:	401a      	ands	r2, r3
 800b060:	421c      	tst	r4, r3
 800b062:	d00a      	beq.n	800b07a <_strtod_l+0x59a>
 800b064:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <_strtod_l+0x5dc>)
 800b066:	00d2      	lsls	r2, r2, #3
 800b068:	189b      	adds	r3, r3, r2
 800b06a:	0030      	movs	r0, r6
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	0039      	movs	r1, r7
 800b072:	f7f5 ff01 	bl	8000e78 <__aeabi_ddiv>
 800b076:	0006      	movs	r6, r0
 800b078:	000f      	movs	r7, r1
 800b07a:	1124      	asrs	r4, r4, #4
 800b07c:	d0d5      	beq.n	800b02a <_strtod_l+0x54a>
 800b07e:	2c1f      	cmp	r4, #31
 800b080:	dd28      	ble.n	800b0d4 <_strtod_l+0x5f4>
 800b082:	2300      	movs	r3, #0
 800b084:	9305      	str	r3, [sp, #20]
 800b086:	9306      	str	r3, [sp, #24]
 800b088:	930d      	str	r3, [sp, #52]	; 0x34
 800b08a:	9308      	str	r3, [sp, #32]
 800b08c:	2322      	movs	r3, #34	; 0x22
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	2600      	movs	r6, #0
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b096:	2700      	movs	r7, #0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d18d      	bne.n	800afb8 <_strtod_l+0x4d8>
 800b09c:	e55b      	b.n	800ab56 <_strtod_l+0x76>
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	00004e1f 	.word	0x00004e1f
 800b0a4:	08014601 	.word	0x08014601
 800b0a8:	080142e4 	.word	0x080142e4
 800b0ac:	7ff00000 	.word	0x7ff00000
 800b0b0:	080145f9 	.word	0x080145f9
 800b0b4:	080146af 	.word	0x080146af
 800b0b8:	080146ab 	.word	0x080146ab
 800b0bc:	08014520 	.word	0x08014520
 800b0c0:	080144f8 	.word	0x080144f8
 800b0c4:	fcb00000 	.word	0xfcb00000
 800b0c8:	7ca00000 	.word	0x7ca00000
 800b0cc:	7c900000 	.word	0x7c900000
 800b0d0:	7fefffff 	.word	0x7fefffff
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	0022      	movs	r2, r4
 800b0d8:	401a      	ands	r2, r3
 800b0da:	9207      	str	r2, [sp, #28]
 800b0dc:	421c      	tst	r4, r3
 800b0de:	d001      	beq.n	800b0e4 <_strtod_l+0x604>
 800b0e0:	335a      	adds	r3, #90	; 0x5a
 800b0e2:	9307      	str	r3, [sp, #28]
 800b0e4:	0030      	movs	r0, r6
 800b0e6:	0039      	movs	r1, r7
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4dc4      	ldr	r5, [pc, #784]	; (800b3fc <_strtod_l+0x91c>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	4214      	tst	r4, r2
 800b0f0:	d004      	beq.n	800b0fc <_strtod_l+0x61c>
 800b0f2:	682a      	ldr	r2, [r5, #0]
 800b0f4:	686b      	ldr	r3, [r5, #4]
 800b0f6:	f7f6 fab9 	bl	800166c <__aeabi_dmul>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	1064      	asrs	r4, r4, #1
 800b0fe:	3508      	adds	r5, #8
 800b100:	2c00      	cmp	r4, #0
 800b102:	d1f3      	bne.n	800b0ec <_strtod_l+0x60c>
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <_strtod_l+0x62c>
 800b108:	0006      	movs	r6, r0
 800b10a:	000f      	movs	r7, r1
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00f      	beq.n	800b132 <_strtod_l+0x652>
 800b112:	236b      	movs	r3, #107	; 0x6b
 800b114:	007a      	lsls	r2, r7, #1
 800b116:	0d52      	lsrs	r2, r2, #21
 800b118:	0039      	movs	r1, r7
 800b11a:	1a9b      	subs	r3, r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd08      	ble.n	800b132 <_strtod_l+0x652>
 800b120:	2b1f      	cmp	r3, #31
 800b122:	dc00      	bgt.n	800b126 <_strtod_l+0x646>
 800b124:	e121      	b.n	800b36a <_strtod_l+0x88a>
 800b126:	2600      	movs	r6, #0
 800b128:	2b34      	cmp	r3, #52	; 0x34
 800b12a:	dc00      	bgt.n	800b12e <_strtod_l+0x64e>
 800b12c:	e116      	b.n	800b35c <_strtod_l+0x87c>
 800b12e:	27dc      	movs	r7, #220	; 0xdc
 800b130:	04bf      	lsls	r7, r7, #18
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	0030      	movs	r0, r6
 800b138:	0039      	movs	r1, r7
 800b13a:	f7f5 f985 	bl	8000448 <__aeabi_dcmpeq>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d19f      	bne.n	800b082 <_strtod_l+0x5a2>
 800b142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	9804      	ldr	r0, [sp, #16]
 800b14e:	f001 fb01 	bl	800c754 <__s2b>
 800b152:	900d      	str	r0, [sp, #52]	; 0x34
 800b154:	2800      	cmp	r0, #0
 800b156:	d100      	bne.n	800b15a <_strtod_l+0x67a>
 800b158:	e720      	b.n	800af9c <_strtod_l+0x4bc>
 800b15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15c:	9906      	ldr	r1, [sp, #24]
 800b15e:	17da      	asrs	r2, r3, #31
 800b160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b162:	1a5b      	subs	r3, r3, r1
 800b164:	401a      	ands	r2, r3
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	9215      	str	r2, [sp, #84]	; 0x54
 800b16a:	43db      	mvns	r3, r3
 800b16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b16e:	17db      	asrs	r3, r3, #31
 800b170:	401a      	ands	r2, r3
 800b172:	2300      	movs	r3, #0
 800b174:	9218      	str	r2, [sp, #96]	; 0x60
 800b176:	9305      	str	r3, [sp, #20]
 800b178:	9306      	str	r3, [sp, #24]
 800b17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b17c:	9804      	ldr	r0, [sp, #16]
 800b17e:	6859      	ldr	r1, [r3, #4]
 800b180:	f001 fa72 	bl	800c668 <_Balloc>
 800b184:	9008      	str	r0, [sp, #32]
 800b186:	2800      	cmp	r0, #0
 800b188:	d100      	bne.n	800b18c <_strtod_l+0x6ac>
 800b18a:	e70c      	b.n	800afa6 <_strtod_l+0x4c6>
 800b18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b18e:	300c      	adds	r0, #12
 800b190:	0019      	movs	r1, r3
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	310c      	adds	r1, #12
 800b196:	3202      	adds	r2, #2
 800b198:	0092      	lsls	r2, r2, #2
 800b19a:	f000 fdca 	bl	800bd32 <memcpy>
 800b19e:	ab1e      	add	r3, sp, #120	; 0x78
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	ab1d      	add	r3, sp, #116	; 0x74
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	0032      	movs	r2, r6
 800b1a8:	003b      	movs	r3, r7
 800b1aa:	9804      	ldr	r0, [sp, #16]
 800b1ac:	9610      	str	r6, [sp, #64]	; 0x40
 800b1ae:	9711      	str	r7, [sp, #68]	; 0x44
 800b1b0:	f001 fdf8 	bl	800cda4 <__d2b>
 800b1b4:	901c      	str	r0, [sp, #112]	; 0x70
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d100      	bne.n	800b1bc <_strtod_l+0x6dc>
 800b1ba:	e6f4      	b.n	800afa6 <_strtod_l+0x4c6>
 800b1bc:	2101      	movs	r1, #1
 800b1be:	9804      	ldr	r0, [sp, #16]
 800b1c0:	f001 fb5c 	bl	800c87c <__i2b>
 800b1c4:	9006      	str	r0, [sp, #24]
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d100      	bne.n	800b1cc <_strtod_l+0x6ec>
 800b1ca:	e6ec      	b.n	800afa6 <_strtod_l+0x4c6>
 800b1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b1d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b1d2:	1ad4      	subs	r4, r2, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	db01      	blt.n	800b1dc <_strtod_l+0x6fc>
 800b1d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b1da:	195d      	adds	r5, r3, r5
 800b1dc:	9907      	ldr	r1, [sp, #28]
 800b1de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b1e0:	1a5b      	subs	r3, r3, r1
 800b1e2:	2136      	movs	r1, #54	; 0x36
 800b1e4:	189b      	adds	r3, r3, r2
 800b1e6:	1a8a      	subs	r2, r1, r2
 800b1e8:	4985      	ldr	r1, [pc, #532]	; (800b400 <_strtod_l+0x920>)
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	468c      	mov	ip, r1
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	9114      	str	r1, [sp, #80]	; 0x50
 800b1f4:	9012      	str	r0, [sp, #72]	; 0x48
 800b1f6:	4563      	cmp	r3, ip
 800b1f8:	da07      	bge.n	800b20a <_strtod_l+0x72a>
 800b1fa:	4661      	mov	r1, ip
 800b1fc:	1ac9      	subs	r1, r1, r3
 800b1fe:	1a52      	subs	r2, r2, r1
 800b200:	291f      	cmp	r1, #31
 800b202:	dd00      	ble.n	800b206 <_strtod_l+0x726>
 800b204:	e0b6      	b.n	800b374 <_strtod_l+0x894>
 800b206:	4088      	lsls	r0, r1
 800b208:	9012      	str	r0, [sp, #72]	; 0x48
 800b20a:	18ab      	adds	r3, r5, r2
 800b20c:	930c      	str	r3, [sp, #48]	; 0x30
 800b20e:	18a4      	adds	r4, r4, r2
 800b210:	9b07      	ldr	r3, [sp, #28]
 800b212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b214:	191c      	adds	r4, r3, r4
 800b216:	002b      	movs	r3, r5
 800b218:	4295      	cmp	r5, r2
 800b21a:	dd00      	ble.n	800b21e <_strtod_l+0x73e>
 800b21c:	0013      	movs	r3, r2
 800b21e:	42a3      	cmp	r3, r4
 800b220:	dd00      	ble.n	800b224 <_strtod_l+0x744>
 800b222:	0023      	movs	r3, r4
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd04      	ble.n	800b232 <_strtod_l+0x752>
 800b228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b22a:	1ae4      	subs	r4, r4, r3
 800b22c:	1ad2      	subs	r2, r2, r3
 800b22e:	920c      	str	r2, [sp, #48]	; 0x30
 800b230:	1aed      	subs	r5, r5, r3
 800b232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd17      	ble.n	800b268 <_strtod_l+0x788>
 800b238:	001a      	movs	r2, r3
 800b23a:	9906      	ldr	r1, [sp, #24]
 800b23c:	9804      	ldr	r0, [sp, #16]
 800b23e:	f001 fbe5 	bl	800ca0c <__pow5mult>
 800b242:	9006      	str	r0, [sp, #24]
 800b244:	2800      	cmp	r0, #0
 800b246:	d100      	bne.n	800b24a <_strtod_l+0x76a>
 800b248:	e6ad      	b.n	800afa6 <_strtod_l+0x4c6>
 800b24a:	0001      	movs	r1, r0
 800b24c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b24e:	9804      	ldr	r0, [sp, #16]
 800b250:	f001 fb2c 	bl	800c8ac <__multiply>
 800b254:	900e      	str	r0, [sp, #56]	; 0x38
 800b256:	2800      	cmp	r0, #0
 800b258:	d100      	bne.n	800b25c <_strtod_l+0x77c>
 800b25a:	e6a4      	b.n	800afa6 <_strtod_l+0x4c6>
 800b25c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b25e:	9804      	ldr	r0, [sp, #16]
 800b260:	f001 fa2a 	bl	800c6b8 <_Bfree>
 800b264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b266:	931c      	str	r3, [sp, #112]	; 0x70
 800b268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dd00      	ble.n	800b270 <_strtod_l+0x790>
 800b26e:	e087      	b.n	800b380 <_strtod_l+0x8a0>
 800b270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	dd08      	ble.n	800b288 <_strtod_l+0x7a8>
 800b276:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b278:	9908      	ldr	r1, [sp, #32]
 800b27a:	9804      	ldr	r0, [sp, #16]
 800b27c:	f001 fbc6 	bl	800ca0c <__pow5mult>
 800b280:	9008      	str	r0, [sp, #32]
 800b282:	2800      	cmp	r0, #0
 800b284:	d100      	bne.n	800b288 <_strtod_l+0x7a8>
 800b286:	e68e      	b.n	800afa6 <_strtod_l+0x4c6>
 800b288:	2c00      	cmp	r4, #0
 800b28a:	dd08      	ble.n	800b29e <_strtod_l+0x7be>
 800b28c:	0022      	movs	r2, r4
 800b28e:	9908      	ldr	r1, [sp, #32]
 800b290:	9804      	ldr	r0, [sp, #16]
 800b292:	f001 fbfd 	bl	800ca90 <__lshift>
 800b296:	9008      	str	r0, [sp, #32]
 800b298:	2800      	cmp	r0, #0
 800b29a:	d100      	bne.n	800b29e <_strtod_l+0x7be>
 800b29c:	e683      	b.n	800afa6 <_strtod_l+0x4c6>
 800b29e:	2d00      	cmp	r5, #0
 800b2a0:	dd08      	ble.n	800b2b4 <_strtod_l+0x7d4>
 800b2a2:	002a      	movs	r2, r5
 800b2a4:	9906      	ldr	r1, [sp, #24]
 800b2a6:	9804      	ldr	r0, [sp, #16]
 800b2a8:	f001 fbf2 	bl	800ca90 <__lshift>
 800b2ac:	9006      	str	r0, [sp, #24]
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d100      	bne.n	800b2b4 <_strtod_l+0x7d4>
 800b2b2:	e678      	b.n	800afa6 <_strtod_l+0x4c6>
 800b2b4:	9a08      	ldr	r2, [sp, #32]
 800b2b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2b8:	9804      	ldr	r0, [sp, #16]
 800b2ba:	f001 fc73 	bl	800cba4 <__mdiff>
 800b2be:	9005      	str	r0, [sp, #20]
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d100      	bne.n	800b2c6 <_strtod_l+0x7e6>
 800b2c4:	e66f      	b.n	800afa6 <_strtod_l+0x4c6>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	68c3      	ldr	r3, [r0, #12]
 800b2ca:	9906      	ldr	r1, [sp, #24]
 800b2cc:	60c2      	str	r2, [r0, #12]
 800b2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b2d0:	f001 fc4c 	bl	800cb6c <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	da5d      	bge.n	800b394 <_strtod_l+0x8b4>
 800b2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2da:	4333      	orrs	r3, r6
 800b2dc:	d000      	beq.n	800b2e0 <_strtod_l+0x800>
 800b2de:	e088      	b.n	800b3f2 <_strtod_l+0x912>
 800b2e0:	033b      	lsls	r3, r7, #12
 800b2e2:	d000      	beq.n	800b2e6 <_strtod_l+0x806>
 800b2e4:	e085      	b.n	800b3f2 <_strtod_l+0x912>
 800b2e6:	22d6      	movs	r2, #214	; 0xd6
 800b2e8:	4b46      	ldr	r3, [pc, #280]	; (800b404 <_strtod_l+0x924>)
 800b2ea:	04d2      	lsls	r2, r2, #19
 800b2ec:	403b      	ands	r3, r7
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d97f      	bls.n	800b3f2 <_strtod_l+0x912>
 800b2f2:	9b05      	ldr	r3, [sp, #20]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <_strtod_l+0x822>
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	dd77      	ble.n	800b3f2 <_strtod_l+0x912>
 800b302:	9905      	ldr	r1, [sp, #20]
 800b304:	2201      	movs	r2, #1
 800b306:	9804      	ldr	r0, [sp, #16]
 800b308:	f001 fbc2 	bl	800ca90 <__lshift>
 800b30c:	9906      	ldr	r1, [sp, #24]
 800b30e:	9005      	str	r0, [sp, #20]
 800b310:	f001 fc2c 	bl	800cb6c <__mcmp>
 800b314:	2800      	cmp	r0, #0
 800b316:	dd6c      	ble.n	800b3f2 <_strtod_l+0x912>
 800b318:	9907      	ldr	r1, [sp, #28]
 800b31a:	003b      	movs	r3, r7
 800b31c:	4a39      	ldr	r2, [pc, #228]	; (800b404 <_strtod_l+0x924>)
 800b31e:	2900      	cmp	r1, #0
 800b320:	d100      	bne.n	800b324 <_strtod_l+0x844>
 800b322:	e094      	b.n	800b44e <_strtod_l+0x96e>
 800b324:	0011      	movs	r1, r2
 800b326:	20d6      	movs	r0, #214	; 0xd6
 800b328:	4039      	ands	r1, r7
 800b32a:	04c0      	lsls	r0, r0, #19
 800b32c:	4281      	cmp	r1, r0
 800b32e:	dd00      	ble.n	800b332 <_strtod_l+0x852>
 800b330:	e08d      	b.n	800b44e <_strtod_l+0x96e>
 800b332:	23dc      	movs	r3, #220	; 0xdc
 800b334:	049b      	lsls	r3, r3, #18
 800b336:	4299      	cmp	r1, r3
 800b338:	dc00      	bgt.n	800b33c <_strtod_l+0x85c>
 800b33a:	e6a7      	b.n	800b08c <_strtod_l+0x5ac>
 800b33c:	0030      	movs	r0, r6
 800b33e:	0039      	movs	r1, r7
 800b340:	4b31      	ldr	r3, [pc, #196]	; (800b408 <_strtod_l+0x928>)
 800b342:	2200      	movs	r2, #0
 800b344:	f7f6 f992 	bl	800166c <__aeabi_dmul>
 800b348:	4b2e      	ldr	r3, [pc, #184]	; (800b404 <_strtod_l+0x924>)
 800b34a:	0006      	movs	r6, r0
 800b34c:	000f      	movs	r7, r1
 800b34e:	420b      	tst	r3, r1
 800b350:	d000      	beq.n	800b354 <_strtod_l+0x874>
 800b352:	e631      	b.n	800afb8 <_strtod_l+0x4d8>
 800b354:	2322      	movs	r3, #34	; 0x22
 800b356:	9a04      	ldr	r2, [sp, #16]
 800b358:	6013      	str	r3, [r2, #0]
 800b35a:	e62d      	b.n	800afb8 <_strtod_l+0x4d8>
 800b35c:	234b      	movs	r3, #75	; 0x4b
 800b35e:	1a9a      	subs	r2, r3, r2
 800b360:	3b4c      	subs	r3, #76	; 0x4c
 800b362:	4093      	lsls	r3, r2
 800b364:	4019      	ands	r1, r3
 800b366:	000f      	movs	r7, r1
 800b368:	e6e3      	b.n	800b132 <_strtod_l+0x652>
 800b36a:	2201      	movs	r2, #1
 800b36c:	4252      	negs	r2, r2
 800b36e:	409a      	lsls	r2, r3
 800b370:	4016      	ands	r6, r2
 800b372:	e6de      	b.n	800b132 <_strtod_l+0x652>
 800b374:	4925      	ldr	r1, [pc, #148]	; (800b40c <_strtod_l+0x92c>)
 800b376:	1acb      	subs	r3, r1, r3
 800b378:	0001      	movs	r1, r0
 800b37a:	4099      	lsls	r1, r3
 800b37c:	9114      	str	r1, [sp, #80]	; 0x50
 800b37e:	e743      	b.n	800b208 <_strtod_l+0x728>
 800b380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b382:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b384:	9804      	ldr	r0, [sp, #16]
 800b386:	f001 fb83 	bl	800ca90 <__lshift>
 800b38a:	901c      	str	r0, [sp, #112]	; 0x70
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d000      	beq.n	800b392 <_strtod_l+0x8b2>
 800b390:	e76e      	b.n	800b270 <_strtod_l+0x790>
 800b392:	e608      	b.n	800afa6 <_strtod_l+0x4c6>
 800b394:	970e      	str	r7, [sp, #56]	; 0x38
 800b396:	2800      	cmp	r0, #0
 800b398:	d177      	bne.n	800b48a <_strtod_l+0x9aa>
 800b39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b39c:	033b      	lsls	r3, r7, #12
 800b39e:	0b1b      	lsrs	r3, r3, #12
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d039      	beq.n	800b418 <_strtod_l+0x938>
 800b3a4:	4a1a      	ldr	r2, [pc, #104]	; (800b410 <_strtod_l+0x930>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d139      	bne.n	800b41e <_strtod_l+0x93e>
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	4249      	negs	r1, r1
 800b3b0:	0032      	movs	r2, r6
 800b3b2:	0008      	movs	r0, r1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <_strtod_l+0x8f0>
 800b3b8:	24d4      	movs	r4, #212	; 0xd4
 800b3ba:	4b12      	ldr	r3, [pc, #72]	; (800b404 <_strtod_l+0x924>)
 800b3bc:	0008      	movs	r0, r1
 800b3be:	403b      	ands	r3, r7
 800b3c0:	04e4      	lsls	r4, r4, #19
 800b3c2:	42a3      	cmp	r3, r4
 800b3c4:	d804      	bhi.n	800b3d0 <_strtod_l+0x8f0>
 800b3c6:	306c      	adds	r0, #108	; 0x6c
 800b3c8:	0d1b      	lsrs	r3, r3, #20
 800b3ca:	1ac3      	subs	r3, r0, r3
 800b3cc:	4099      	lsls	r1, r3
 800b3ce:	0008      	movs	r0, r1
 800b3d0:	4282      	cmp	r2, r0
 800b3d2:	d124      	bne.n	800b41e <_strtod_l+0x93e>
 800b3d4:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <_strtod_l+0x934>)
 800b3d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	d102      	bne.n	800b3e2 <_strtod_l+0x902>
 800b3dc:	3201      	adds	r2, #1
 800b3de:	d100      	bne.n	800b3e2 <_strtod_l+0x902>
 800b3e0:	e5e1      	b.n	800afa6 <_strtod_l+0x4c6>
 800b3e2:	4b08      	ldr	r3, [pc, #32]	; (800b404 <_strtod_l+0x924>)
 800b3e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e6:	2600      	movs	r6, #0
 800b3e8:	401a      	ands	r2, r3
 800b3ea:	0013      	movs	r3, r2
 800b3ec:	2280      	movs	r2, #128	; 0x80
 800b3ee:	0352      	lsls	r2, r2, #13
 800b3f0:	189f      	adds	r7, r3, r2
 800b3f2:	9b07      	ldr	r3, [sp, #28]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1a1      	bne.n	800b33c <_strtod_l+0x85c>
 800b3f8:	e5de      	b.n	800afb8 <_strtod_l+0x4d8>
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	080142f8 	.word	0x080142f8
 800b400:	fffffc02 	.word	0xfffffc02
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	39500000 	.word	0x39500000
 800b40c:	fffffbe2 	.word	0xfffffbe2
 800b410:	000fffff 	.word	0x000fffff
 800b414:	7fefffff 	.word	0x7fefffff
 800b418:	4333      	orrs	r3, r6
 800b41a:	d100      	bne.n	800b41e <_strtod_l+0x93e>
 800b41c:	e77c      	b.n	800b318 <_strtod_l+0x838>
 800b41e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01d      	beq.n	800b460 <_strtod_l+0x980>
 800b424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b426:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b428:	4213      	tst	r3, r2
 800b42a:	d0e2      	beq.n	800b3f2 <_strtod_l+0x912>
 800b42c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b42e:	0030      	movs	r0, r6
 800b430:	0039      	movs	r1, r7
 800b432:	9a07      	ldr	r2, [sp, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d017      	beq.n	800b468 <_strtod_l+0x988>
 800b438:	f7ff fb3a 	bl	800aab0 <sulp>
 800b43c:	0002      	movs	r2, r0
 800b43e:	000b      	movs	r3, r1
 800b440:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b442:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b444:	f7f5 f9b8 	bl	80007b8 <__aeabi_dadd>
 800b448:	0006      	movs	r6, r0
 800b44a:	000f      	movs	r7, r1
 800b44c:	e7d1      	b.n	800b3f2 <_strtod_l+0x912>
 800b44e:	2601      	movs	r6, #1
 800b450:	4013      	ands	r3, r2
 800b452:	4a98      	ldr	r2, [pc, #608]	; (800b6b4 <_strtod_l+0xbd4>)
 800b454:	4276      	negs	r6, r6
 800b456:	189b      	adds	r3, r3, r2
 800b458:	4a97      	ldr	r2, [pc, #604]	; (800b6b8 <_strtod_l+0xbd8>)
 800b45a:	431a      	orrs	r2, r3
 800b45c:	0017      	movs	r7, r2
 800b45e:	e7c8      	b.n	800b3f2 <_strtod_l+0x912>
 800b460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b462:	4233      	tst	r3, r6
 800b464:	d0c5      	beq.n	800b3f2 <_strtod_l+0x912>
 800b466:	e7e1      	b.n	800b42c <_strtod_l+0x94c>
 800b468:	f7ff fb22 	bl	800aab0 <sulp>
 800b46c:	0002      	movs	r2, r0
 800b46e:	000b      	movs	r3, r1
 800b470:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b472:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b474:	f7f6 fbbc 	bl	8001bf0 <__aeabi_dsub>
 800b478:	2200      	movs	r2, #0
 800b47a:	2300      	movs	r3, #0
 800b47c:	0006      	movs	r6, r0
 800b47e:	000f      	movs	r7, r1
 800b480:	f7f4 ffe2 	bl	8000448 <__aeabi_dcmpeq>
 800b484:	2800      	cmp	r0, #0
 800b486:	d0b4      	beq.n	800b3f2 <_strtod_l+0x912>
 800b488:	e600      	b.n	800b08c <_strtod_l+0x5ac>
 800b48a:	9906      	ldr	r1, [sp, #24]
 800b48c:	9805      	ldr	r0, [sp, #20]
 800b48e:	f001 fce9 	bl	800ce64 <__ratio>
 800b492:	2380      	movs	r3, #128	; 0x80
 800b494:	2200      	movs	r2, #0
 800b496:	05db      	lsls	r3, r3, #23
 800b498:	0004      	movs	r4, r0
 800b49a:	000d      	movs	r5, r1
 800b49c:	f7f4 ffe4 	bl	8000468 <__aeabi_dcmple>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d06d      	beq.n	800b580 <_strtod_l+0xaa0>
 800b4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d000      	beq.n	800b4ac <_strtod_l+0x9cc>
 800b4aa:	e07e      	b.n	800b5aa <_strtod_l+0xaca>
 800b4ac:	2e00      	cmp	r6, #0
 800b4ae:	d158      	bne.n	800b562 <_strtod_l+0xa82>
 800b4b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4b2:	031b      	lsls	r3, r3, #12
 800b4b4:	d000      	beq.n	800b4b8 <_strtod_l+0x9d8>
 800b4b6:	e07f      	b.n	800b5b8 <_strtod_l+0xad8>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	0020      	movs	r0, r4
 800b4bc:	0029      	movs	r1, r5
 800b4be:	4b7f      	ldr	r3, [pc, #508]	; (800b6bc <_strtod_l+0xbdc>)
 800b4c0:	f7f4 ffc8 	bl	8000454 <__aeabi_dcmplt>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d158      	bne.n	800b57a <_strtod_l+0xa9a>
 800b4c8:	0020      	movs	r0, r4
 800b4ca:	0029      	movs	r1, r5
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4b7c      	ldr	r3, [pc, #496]	; (800b6c0 <_strtod_l+0xbe0>)
 800b4d0:	f7f6 f8cc 	bl	800166c <__aeabi_dmul>
 800b4d4:	0004      	movs	r4, r0
 800b4d6:	000d      	movs	r5, r1
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	061b      	lsls	r3, r3, #24
 800b4dc:	940a      	str	r4, [sp, #40]	; 0x28
 800b4de:	18eb      	adds	r3, r5, r3
 800b4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e6:	9212      	str	r2, [sp, #72]	; 0x48
 800b4e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4ea:	4a76      	ldr	r2, [pc, #472]	; (800b6c4 <_strtod_l+0xbe4>)
 800b4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	9314      	str	r3, [sp, #80]	; 0x50
 800b4f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4f4:	4b74      	ldr	r3, [pc, #464]	; (800b6c8 <_strtod_l+0xbe8>)
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d000      	beq.n	800b4fc <_strtod_l+0xa1c>
 800b4fa:	e091      	b.n	800b620 <_strtod_l+0xb40>
 800b4fc:	4a73      	ldr	r2, [pc, #460]	; (800b6cc <_strtod_l+0xbec>)
 800b4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b500:	4694      	mov	ip, r2
 800b502:	4463      	add	r3, ip
 800b504:	001f      	movs	r7, r3
 800b506:	0030      	movs	r0, r6
 800b508:	0019      	movs	r1, r3
 800b50a:	f001 fbe3 	bl	800ccd4 <__ulp>
 800b50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b512:	f7f6 f8ab 	bl	800166c <__aeabi_dmul>
 800b516:	0032      	movs	r2, r6
 800b518:	003b      	movs	r3, r7
 800b51a:	f7f5 f94d 	bl	80007b8 <__aeabi_dadd>
 800b51e:	4a69      	ldr	r2, [pc, #420]	; (800b6c4 <_strtod_l+0xbe4>)
 800b520:	4b6b      	ldr	r3, [pc, #428]	; (800b6d0 <_strtod_l+0xbf0>)
 800b522:	0006      	movs	r6, r0
 800b524:	400a      	ands	r2, r1
 800b526:	429a      	cmp	r2, r3
 800b528:	d949      	bls.n	800b5be <_strtod_l+0xade>
 800b52a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b52c:	4b69      	ldr	r3, [pc, #420]	; (800b6d4 <_strtod_l+0xbf4>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	d103      	bne.n	800b53a <_strtod_l+0xa5a>
 800b532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b534:	3301      	adds	r3, #1
 800b536:	d100      	bne.n	800b53a <_strtod_l+0xa5a>
 800b538:	e535      	b.n	800afa6 <_strtod_l+0x4c6>
 800b53a:	2601      	movs	r6, #1
 800b53c:	4f65      	ldr	r7, [pc, #404]	; (800b6d4 <_strtod_l+0xbf4>)
 800b53e:	4276      	negs	r6, r6
 800b540:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b542:	9804      	ldr	r0, [sp, #16]
 800b544:	f001 f8b8 	bl	800c6b8 <_Bfree>
 800b548:	9908      	ldr	r1, [sp, #32]
 800b54a:	9804      	ldr	r0, [sp, #16]
 800b54c:	f001 f8b4 	bl	800c6b8 <_Bfree>
 800b550:	9906      	ldr	r1, [sp, #24]
 800b552:	9804      	ldr	r0, [sp, #16]
 800b554:	f001 f8b0 	bl	800c6b8 <_Bfree>
 800b558:	9905      	ldr	r1, [sp, #20]
 800b55a:	9804      	ldr	r0, [sp, #16]
 800b55c:	f001 f8ac 	bl	800c6b8 <_Bfree>
 800b560:	e60b      	b.n	800b17a <_strtod_l+0x69a>
 800b562:	2e01      	cmp	r6, #1
 800b564:	d103      	bne.n	800b56e <_strtod_l+0xa8e>
 800b566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d100      	bne.n	800b56e <_strtod_l+0xa8e>
 800b56c:	e58e      	b.n	800b08c <_strtod_l+0x5ac>
 800b56e:	2300      	movs	r3, #0
 800b570:	4c59      	ldr	r4, [pc, #356]	; (800b6d8 <_strtod_l+0xbf8>)
 800b572:	930a      	str	r3, [sp, #40]	; 0x28
 800b574:	940b      	str	r4, [sp, #44]	; 0x2c
 800b576:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b578:	e01c      	b.n	800b5b4 <_strtod_l+0xad4>
 800b57a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b57c:	4d50      	ldr	r5, [pc, #320]	; (800b6c0 <_strtod_l+0xbe0>)
 800b57e:	e7ab      	b.n	800b4d8 <_strtod_l+0x9f8>
 800b580:	2200      	movs	r2, #0
 800b582:	0020      	movs	r0, r4
 800b584:	0029      	movs	r1, r5
 800b586:	4b4e      	ldr	r3, [pc, #312]	; (800b6c0 <_strtod_l+0xbe0>)
 800b588:	f7f6 f870 	bl	800166c <__aeabi_dmul>
 800b58c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b58e:	0004      	movs	r4, r0
 800b590:	000b      	movs	r3, r1
 800b592:	000d      	movs	r5, r1
 800b594:	2a00      	cmp	r2, #0
 800b596:	d104      	bne.n	800b5a2 <_strtod_l+0xac2>
 800b598:	2280      	movs	r2, #128	; 0x80
 800b59a:	0612      	lsls	r2, r2, #24
 800b59c:	900a      	str	r0, [sp, #40]	; 0x28
 800b59e:	188b      	adds	r3, r1, r2
 800b5a0:	e79e      	b.n	800b4e0 <_strtod_l+0xa00>
 800b5a2:	0002      	movs	r2, r0
 800b5a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a8:	e79b      	b.n	800b4e2 <_strtod_l+0xa02>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4c43      	ldr	r4, [pc, #268]	; (800b6bc <_strtod_l+0xbdc>)
 800b5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5b2:	2400      	movs	r4, #0
 800b5b4:	4d41      	ldr	r5, [pc, #260]	; (800b6bc <_strtod_l+0xbdc>)
 800b5b6:	e794      	b.n	800b4e2 <_strtod_l+0xa02>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4c47      	ldr	r4, [pc, #284]	; (800b6d8 <_strtod_l+0xbf8>)
 800b5bc:	e7f7      	b.n	800b5ae <_strtod_l+0xace>
 800b5be:	23d4      	movs	r3, #212	; 0xd4
 800b5c0:	049b      	lsls	r3, r3, #18
 800b5c2:	18cf      	adds	r7, r1, r3
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	970e      	str	r7, [sp, #56]	; 0x38
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1b9      	bne.n	800b540 <_strtod_l+0xa60>
 800b5cc:	4b3d      	ldr	r3, [pc, #244]	; (800b6c4 <_strtod_l+0xbe4>)
 800b5ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5d0:	403b      	ands	r3, r7
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d1b4      	bne.n	800b540 <_strtod_l+0xa60>
 800b5d6:	0020      	movs	r0, r4
 800b5d8:	0029      	movs	r1, r5
 800b5da:	f7f4 ffcf 	bl	800057c <__aeabi_d2lz>
 800b5de:	f7f5 f809 	bl	80005f4 <__aeabi_l2d>
 800b5e2:	0002      	movs	r2, r0
 800b5e4:	000b      	movs	r3, r1
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	0029      	movs	r1, r5
 800b5ea:	f7f6 fb01 	bl	8001bf0 <__aeabi_dsub>
 800b5ee:	033b      	lsls	r3, r7, #12
 800b5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f2:	0b1b      	lsrs	r3, r3, #12
 800b5f4:	4333      	orrs	r3, r6
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	0004      	movs	r4, r0
 800b5fa:	000d      	movs	r5, r1
 800b5fc:	4a37      	ldr	r2, [pc, #220]	; (800b6dc <_strtod_l+0xbfc>)
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d054      	beq.n	800b6ac <_strtod_l+0xbcc>
 800b602:	4b37      	ldr	r3, [pc, #220]	; (800b6e0 <_strtod_l+0xc00>)
 800b604:	f7f4 ff26 	bl	8000454 <__aeabi_dcmplt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d000      	beq.n	800b60e <_strtod_l+0xb2e>
 800b60c:	e4d4      	b.n	800afb8 <_strtod_l+0x4d8>
 800b60e:	0020      	movs	r0, r4
 800b610:	0029      	movs	r1, r5
 800b612:	4a34      	ldr	r2, [pc, #208]	; (800b6e4 <_strtod_l+0xc04>)
 800b614:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <_strtod_l+0xbe0>)
 800b616:	f7f4 ff31 	bl	800047c <__aeabi_dcmpgt>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d090      	beq.n	800b540 <_strtod_l+0xa60>
 800b61e:	e4cb      	b.n	800afb8 <_strtod_l+0x4d8>
 800b620:	9b07      	ldr	r3, [sp, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d02b      	beq.n	800b67e <_strtod_l+0xb9e>
 800b626:	23d4      	movs	r3, #212	; 0xd4
 800b628:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b62a:	04db      	lsls	r3, r3, #19
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d826      	bhi.n	800b67e <_strtod_l+0xb9e>
 800b630:	0020      	movs	r0, r4
 800b632:	0029      	movs	r1, r5
 800b634:	4a2c      	ldr	r2, [pc, #176]	; (800b6e8 <_strtod_l+0xc08>)
 800b636:	4b2d      	ldr	r3, [pc, #180]	; (800b6ec <_strtod_l+0xc0c>)
 800b638:	f7f4 ff16 	bl	8000468 <__aeabi_dcmple>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d017      	beq.n	800b670 <_strtod_l+0xb90>
 800b640:	0020      	movs	r0, r4
 800b642:	0029      	movs	r1, r5
 800b644:	f7f4 ff7c 	bl	8000540 <__aeabi_d2uiz>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d100      	bne.n	800b64e <_strtod_l+0xb6e>
 800b64c:	3001      	adds	r0, #1
 800b64e:	f7f6 fed5 	bl	80023fc <__aeabi_ui2d>
 800b652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b654:	0004      	movs	r4, r0
 800b656:	000b      	movs	r3, r1
 800b658:	000d      	movs	r5, r1
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	d122      	bne.n	800b6a4 <_strtod_l+0xbc4>
 800b65e:	2280      	movs	r2, #128	; 0x80
 800b660:	0612      	lsls	r2, r2, #24
 800b662:	188b      	adds	r3, r1, r2
 800b664:	9016      	str	r0, [sp, #88]	; 0x58
 800b666:	9317      	str	r3, [sp, #92]	; 0x5c
 800b668:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b66a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b66c:	9212      	str	r2, [sp, #72]	; 0x48
 800b66e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b670:	22d6      	movs	r2, #214	; 0xd6
 800b672:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b674:	04d2      	lsls	r2, r2, #19
 800b676:	189b      	adds	r3, r3, r2
 800b678:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b67a:	1a9b      	subs	r3, r3, r2
 800b67c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b67e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b680:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b682:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b684:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b686:	f001 fb25 	bl	800ccd4 <__ulp>
 800b68a:	0002      	movs	r2, r0
 800b68c:	000b      	movs	r3, r1
 800b68e:	0030      	movs	r0, r6
 800b690:	0039      	movs	r1, r7
 800b692:	f7f5 ffeb 	bl	800166c <__aeabi_dmul>
 800b696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b69a:	f7f5 f88d 	bl	80007b8 <__aeabi_dadd>
 800b69e:	0006      	movs	r6, r0
 800b6a0:	000f      	movs	r7, r1
 800b6a2:	e78f      	b.n	800b5c4 <_strtod_l+0xae4>
 800b6a4:	0002      	movs	r2, r0
 800b6a6:	9216      	str	r2, [sp, #88]	; 0x58
 800b6a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6aa:	e7dd      	b.n	800b668 <_strtod_l+0xb88>
 800b6ac:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <_strtod_l+0xc10>)
 800b6ae:	f7f4 fed1 	bl	8000454 <__aeabi_dcmplt>
 800b6b2:	e7b2      	b.n	800b61a <_strtod_l+0xb3a>
 800b6b4:	fff00000 	.word	0xfff00000
 800b6b8:	000fffff 	.word	0x000fffff
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	3fe00000 	.word	0x3fe00000
 800b6c4:	7ff00000 	.word	0x7ff00000
 800b6c8:	7fe00000 	.word	0x7fe00000
 800b6cc:	fcb00000 	.word	0xfcb00000
 800b6d0:	7c9fffff 	.word	0x7c9fffff
 800b6d4:	7fefffff 	.word	0x7fefffff
 800b6d8:	bff00000 	.word	0xbff00000
 800b6dc:	94a03595 	.word	0x94a03595
 800b6e0:	3fdfffff 	.word	0x3fdfffff
 800b6e4:	35afe535 	.word	0x35afe535
 800b6e8:	ffc00000 	.word	0xffc00000
 800b6ec:	41dfffff 	.word	0x41dfffff
 800b6f0:	3fcfffff 	.word	0x3fcfffff

0800b6f4 <_strtod_r>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	4b02      	ldr	r3, [pc, #8]	; (800b700 <_strtod_r+0xc>)
 800b6f8:	f7ff f9f2 	bl	800aae0 <_strtod_l>
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	20000444 	.word	0x20000444

0800b704 <strtod>:
 800b704:	b510      	push	{r4, lr}
 800b706:	4c04      	ldr	r4, [pc, #16]	; (800b718 <strtod+0x14>)
 800b708:	000a      	movs	r2, r1
 800b70a:	0001      	movs	r1, r0
 800b70c:	4b03      	ldr	r3, [pc, #12]	; (800b71c <strtod+0x18>)
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	f7ff f9e6 	bl	800aae0 <_strtod_l>
 800b714:	bd10      	pop	{r4, pc}
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	200006d0 	.word	0x200006d0
 800b71c:	20000444 	.word	0x20000444

0800b720 <_strtol_l.constprop.0>:
 800b720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b722:	b087      	sub	sp, #28
 800b724:	001e      	movs	r6, r3
 800b726:	9005      	str	r0, [sp, #20]
 800b728:	9101      	str	r1, [sp, #4]
 800b72a:	9202      	str	r2, [sp, #8]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d048      	beq.n	800b7c2 <_strtol_l.constprop.0+0xa2>
 800b730:	000b      	movs	r3, r1
 800b732:	2e24      	cmp	r6, #36	; 0x24
 800b734:	d845      	bhi.n	800b7c2 <_strtol_l.constprop.0+0xa2>
 800b736:	4a3b      	ldr	r2, [pc, #236]	; (800b824 <_strtol_l.constprop.0+0x104>)
 800b738:	2108      	movs	r1, #8
 800b73a:	4694      	mov	ip, r2
 800b73c:	001a      	movs	r2, r3
 800b73e:	4660      	mov	r0, ip
 800b740:	7814      	ldrb	r4, [r2, #0]
 800b742:	3301      	adds	r3, #1
 800b744:	5d00      	ldrb	r0, [r0, r4]
 800b746:	001d      	movs	r5, r3
 800b748:	0007      	movs	r7, r0
 800b74a:	400f      	ands	r7, r1
 800b74c:	4208      	tst	r0, r1
 800b74e:	d1f5      	bne.n	800b73c <_strtol_l.constprop.0+0x1c>
 800b750:	2c2d      	cmp	r4, #45	; 0x2d
 800b752:	d13d      	bne.n	800b7d0 <_strtol_l.constprop.0+0xb0>
 800b754:	2701      	movs	r7, #1
 800b756:	781c      	ldrb	r4, [r3, #0]
 800b758:	1c95      	adds	r5, r2, #2
 800b75a:	2e00      	cmp	r6, #0
 800b75c:	d05e      	beq.n	800b81c <_strtol_l.constprop.0+0xfc>
 800b75e:	2e10      	cmp	r6, #16
 800b760:	d109      	bne.n	800b776 <_strtol_l.constprop.0+0x56>
 800b762:	2c30      	cmp	r4, #48	; 0x30
 800b764:	d107      	bne.n	800b776 <_strtol_l.constprop.0+0x56>
 800b766:	2220      	movs	r2, #32
 800b768:	782b      	ldrb	r3, [r5, #0]
 800b76a:	4393      	bics	r3, r2
 800b76c:	2b58      	cmp	r3, #88	; 0x58
 800b76e:	d150      	bne.n	800b812 <_strtol_l.constprop.0+0xf2>
 800b770:	2610      	movs	r6, #16
 800b772:	786c      	ldrb	r4, [r5, #1]
 800b774:	3502      	adds	r5, #2
 800b776:	4b2c      	ldr	r3, [pc, #176]	; (800b828 <_strtol_l.constprop.0+0x108>)
 800b778:	0031      	movs	r1, r6
 800b77a:	18fb      	adds	r3, r7, r3
 800b77c:	0018      	movs	r0, r3
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	f7f4 fd62 	bl	8000248 <__aeabi_uidivmod>
 800b784:	2200      	movs	r2, #0
 800b786:	9104      	str	r1, [sp, #16]
 800b788:	2101      	movs	r1, #1
 800b78a:	4684      	mov	ip, r0
 800b78c:	0010      	movs	r0, r2
 800b78e:	4249      	negs	r1, r1
 800b790:	0023      	movs	r3, r4
 800b792:	3b30      	subs	r3, #48	; 0x30
 800b794:	2b09      	cmp	r3, #9
 800b796:	d903      	bls.n	800b7a0 <_strtol_l.constprop.0+0x80>
 800b798:	3b11      	subs	r3, #17
 800b79a:	2b19      	cmp	r3, #25
 800b79c:	d81d      	bhi.n	800b7da <_strtol_l.constprop.0+0xba>
 800b79e:	330a      	adds	r3, #10
 800b7a0:	429e      	cmp	r6, r3
 800b7a2:	dd1e      	ble.n	800b7e2 <_strtol_l.constprop.0+0xc2>
 800b7a4:	1c54      	adds	r4, r2, #1
 800b7a6:	d009      	beq.n	800b7bc <_strtol_l.constprop.0+0x9c>
 800b7a8:	000a      	movs	r2, r1
 800b7aa:	4584      	cmp	ip, r0
 800b7ac:	d306      	bcc.n	800b7bc <_strtol_l.constprop.0+0x9c>
 800b7ae:	d102      	bne.n	800b7b6 <_strtol_l.constprop.0+0x96>
 800b7b0:	9c04      	ldr	r4, [sp, #16]
 800b7b2:	429c      	cmp	r4, r3
 800b7b4:	db02      	blt.n	800b7bc <_strtol_l.constprop.0+0x9c>
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4370      	muls	r0, r6
 800b7ba:	1818      	adds	r0, r3, r0
 800b7bc:	782c      	ldrb	r4, [r5, #0]
 800b7be:	3501      	adds	r5, #1
 800b7c0:	e7e6      	b.n	800b790 <_strtol_l.constprop.0+0x70>
 800b7c2:	f000 fa7d 	bl	800bcc0 <__errno>
 800b7c6:	2316      	movs	r3, #22
 800b7c8:	6003      	str	r3, [r0, #0]
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	b007      	add	sp, #28
 800b7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d0:	2c2b      	cmp	r4, #43	; 0x2b
 800b7d2:	d1c2      	bne.n	800b75a <_strtol_l.constprop.0+0x3a>
 800b7d4:	781c      	ldrb	r4, [r3, #0]
 800b7d6:	1c95      	adds	r5, r2, #2
 800b7d8:	e7bf      	b.n	800b75a <_strtol_l.constprop.0+0x3a>
 800b7da:	0023      	movs	r3, r4
 800b7dc:	3b61      	subs	r3, #97	; 0x61
 800b7de:	2b19      	cmp	r3, #25
 800b7e0:	d9dd      	bls.n	800b79e <_strtol_l.constprop.0+0x7e>
 800b7e2:	1c53      	adds	r3, r2, #1
 800b7e4:	d109      	bne.n	800b7fa <_strtol_l.constprop.0+0xda>
 800b7e6:	2322      	movs	r3, #34	; 0x22
 800b7e8:	9a05      	ldr	r2, [sp, #20]
 800b7ea:	9803      	ldr	r0, [sp, #12]
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	9b02      	ldr	r3, [sp, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0eb      	beq.n	800b7cc <_strtol_l.constprop.0+0xac>
 800b7f4:	1e6b      	subs	r3, r5, #1
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	e007      	b.n	800b80a <_strtol_l.constprop.0+0xea>
 800b7fa:	2f00      	cmp	r7, #0
 800b7fc:	d000      	beq.n	800b800 <_strtol_l.constprop.0+0xe0>
 800b7fe:	4240      	negs	r0, r0
 800b800:	9b02      	ldr	r3, [sp, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0e2      	beq.n	800b7cc <_strtol_l.constprop.0+0xac>
 800b806:	2a00      	cmp	r2, #0
 800b808:	d1f4      	bne.n	800b7f4 <_strtol_l.constprop.0+0xd4>
 800b80a:	9b02      	ldr	r3, [sp, #8]
 800b80c:	9a01      	ldr	r2, [sp, #4]
 800b80e:	601a      	str	r2, [r3, #0]
 800b810:	e7dc      	b.n	800b7cc <_strtol_l.constprop.0+0xac>
 800b812:	2430      	movs	r4, #48	; 0x30
 800b814:	2e00      	cmp	r6, #0
 800b816:	d1ae      	bne.n	800b776 <_strtol_l.constprop.0+0x56>
 800b818:	3608      	adds	r6, #8
 800b81a:	e7ac      	b.n	800b776 <_strtol_l.constprop.0+0x56>
 800b81c:	2c30      	cmp	r4, #48	; 0x30
 800b81e:	d0a2      	beq.n	800b766 <_strtol_l.constprop.0+0x46>
 800b820:	260a      	movs	r6, #10
 800b822:	e7a8      	b.n	800b776 <_strtol_l.constprop.0+0x56>
 800b824:	08014321 	.word	0x08014321
 800b828:	7fffffff 	.word	0x7fffffff

0800b82c <_strtol_r>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	f7ff ff77 	bl	800b720 <_strtol_l.constprop.0>
 800b832:	bd10      	pop	{r4, pc}

0800b834 <strtol>:
 800b834:	b510      	push	{r4, lr}
 800b836:	4c04      	ldr	r4, [pc, #16]	; (800b848 <strtol+0x14>)
 800b838:	0013      	movs	r3, r2
 800b83a:	000a      	movs	r2, r1
 800b83c:	0001      	movs	r1, r0
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	f7ff ff6e 	bl	800b720 <_strtol_l.constprop.0>
 800b844:	bd10      	pop	{r4, pc}
 800b846:	46c0      	nop			; (mov r8, r8)
 800b848:	200006d0 	.word	0x200006d0

0800b84c <std>:
 800b84c:	2300      	movs	r3, #0
 800b84e:	b510      	push	{r4, lr}
 800b850:	0004      	movs	r4, r0
 800b852:	6003      	str	r3, [r0, #0]
 800b854:	6043      	str	r3, [r0, #4]
 800b856:	6083      	str	r3, [r0, #8]
 800b858:	8181      	strh	r1, [r0, #12]
 800b85a:	6643      	str	r3, [r0, #100]	; 0x64
 800b85c:	81c2      	strh	r2, [r0, #14]
 800b85e:	6103      	str	r3, [r0, #16]
 800b860:	6143      	str	r3, [r0, #20]
 800b862:	6183      	str	r3, [r0, #24]
 800b864:	0019      	movs	r1, r3
 800b866:	2208      	movs	r2, #8
 800b868:	305c      	adds	r0, #92	; 0x5c
 800b86a:	f000 f97d 	bl	800bb68 <memset>
 800b86e:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <std+0x50>)
 800b870:	61e4      	str	r4, [r4, #28]
 800b872:	6223      	str	r3, [r4, #32]
 800b874:	4b0a      	ldr	r3, [pc, #40]	; (800b8a0 <std+0x54>)
 800b876:	6263      	str	r3, [r4, #36]	; 0x24
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <std+0x58>)
 800b87a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <std+0x5c>)
 800b87e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <std+0x60>)
 800b882:	429c      	cmp	r4, r3
 800b884:	d005      	beq.n	800b892 <std+0x46>
 800b886:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <std+0x64>)
 800b888:	429c      	cmp	r4, r3
 800b88a:	d002      	beq.n	800b892 <std+0x46>
 800b88c:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <std+0x68>)
 800b88e:	429c      	cmp	r4, r3
 800b890:	d103      	bne.n	800b89a <std+0x4e>
 800b892:	0020      	movs	r0, r4
 800b894:	3058      	adds	r0, #88	; 0x58
 800b896:	f000 fa3d 	bl	800bd14 <__retarget_lock_init_recursive>
 800b89a:	bd10      	pop	{r4, pc}
 800b89c:	0800bacd 	.word	0x0800bacd
 800b8a0:	0800baf9 	.word	0x0800baf9
 800b8a4:	0800bb31 	.word	0x0800bb31
 800b8a8:	0800bb5d 	.word	0x0800bb5d
 800b8ac:	20000c64 	.word	0x20000c64
 800b8b0:	20000ccc 	.word	0x20000ccc
 800b8b4:	20000d34 	.word	0x20000d34

0800b8b8 <stdio_exit_handler>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4a03      	ldr	r2, [pc, #12]	; (800b8c8 <stdio_exit_handler+0x10>)
 800b8bc:	4903      	ldr	r1, [pc, #12]	; (800b8cc <stdio_exit_handler+0x14>)
 800b8be:	4804      	ldr	r0, [pc, #16]	; (800b8d0 <stdio_exit_handler+0x18>)
 800b8c0:	f000 f86c 	bl	800b99c <_fwalk_sglue>
 800b8c4:	bd10      	pop	{r4, pc}
 800b8c6:	46c0      	nop			; (mov r8, r8)
 800b8c8:	20000438 	.word	0x20000438
 800b8cc:	0800f815 	.word	0x0800f815
 800b8d0:	200005b0 	.word	0x200005b0

0800b8d4 <cleanup_stdio>:
 800b8d4:	6841      	ldr	r1, [r0, #4]
 800b8d6:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <cleanup_stdio+0x30>)
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	0004      	movs	r4, r0
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	d001      	beq.n	800b8e4 <cleanup_stdio+0x10>
 800b8e0:	f003 ff98 	bl	800f814 <_fclose_r>
 800b8e4:	68a1      	ldr	r1, [r4, #8]
 800b8e6:	4b08      	ldr	r3, [pc, #32]	; (800b908 <cleanup_stdio+0x34>)
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	d002      	beq.n	800b8f2 <cleanup_stdio+0x1e>
 800b8ec:	0020      	movs	r0, r4
 800b8ee:	f003 ff91 	bl	800f814 <_fclose_r>
 800b8f2:	68e1      	ldr	r1, [r4, #12]
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <cleanup_stdio+0x38>)
 800b8f6:	4299      	cmp	r1, r3
 800b8f8:	d002      	beq.n	800b900 <cleanup_stdio+0x2c>
 800b8fa:	0020      	movs	r0, r4
 800b8fc:	f003 ff8a 	bl	800f814 <_fclose_r>
 800b900:	bd10      	pop	{r4, pc}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	20000c64 	.word	0x20000c64
 800b908:	20000ccc 	.word	0x20000ccc
 800b90c:	20000d34 	.word	0x20000d34

0800b910 <global_stdio_init.part.0>:
 800b910:	b510      	push	{r4, lr}
 800b912:	4b09      	ldr	r3, [pc, #36]	; (800b938 <global_stdio_init.part.0+0x28>)
 800b914:	4a09      	ldr	r2, [pc, #36]	; (800b93c <global_stdio_init.part.0+0x2c>)
 800b916:	2104      	movs	r1, #4
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	4809      	ldr	r0, [pc, #36]	; (800b940 <global_stdio_init.part.0+0x30>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	f7ff ff95 	bl	800b84c <std>
 800b922:	2201      	movs	r2, #1
 800b924:	2109      	movs	r1, #9
 800b926:	4807      	ldr	r0, [pc, #28]	; (800b944 <global_stdio_init.part.0+0x34>)
 800b928:	f7ff ff90 	bl	800b84c <std>
 800b92c:	2202      	movs	r2, #2
 800b92e:	2112      	movs	r1, #18
 800b930:	4805      	ldr	r0, [pc, #20]	; (800b948 <global_stdio_init.part.0+0x38>)
 800b932:	f7ff ff8b 	bl	800b84c <std>
 800b936:	bd10      	pop	{r4, pc}
 800b938:	20000d9c 	.word	0x20000d9c
 800b93c:	0800b8b9 	.word	0x0800b8b9
 800b940:	20000c64 	.word	0x20000c64
 800b944:	20000ccc 	.word	0x20000ccc
 800b948:	20000d34 	.word	0x20000d34

0800b94c <__sfp_lock_acquire>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	4802      	ldr	r0, [pc, #8]	; (800b958 <__sfp_lock_acquire+0xc>)
 800b950:	f000 f9e2 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800b954:	bd10      	pop	{r4, pc}
 800b956:	46c0      	nop			; (mov r8, r8)
 800b958:	20000da6 	.word	0x20000da6

0800b95c <__sfp_lock_release>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	4802      	ldr	r0, [pc, #8]	; (800b968 <__sfp_lock_release+0xc>)
 800b960:	f000 f9db 	bl	800bd1a <__retarget_lock_release_recursive>
 800b964:	bd10      	pop	{r4, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	20000da6 	.word	0x20000da6

0800b96c <__sinit>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	0004      	movs	r4, r0
 800b970:	f7ff ffec 	bl	800b94c <__sfp_lock_acquire>
 800b974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <__sinit+0x14>
 800b97a:	f7ff ffef 	bl	800b95c <__sfp_lock_release>
 800b97e:	bd10      	pop	{r4, pc}
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <__sinit+0x28>)
 800b982:	6363      	str	r3, [r4, #52]	; 0x34
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <__sinit+0x2c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1f6      	bne.n	800b97a <__sinit+0xe>
 800b98c:	f7ff ffc0 	bl	800b910 <global_stdio_init.part.0>
 800b990:	e7f3      	b.n	800b97a <__sinit+0xe>
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	0800b8d5 	.word	0x0800b8d5
 800b998:	20000d9c 	.word	0x20000d9c

0800b99c <_fwalk_sglue>:
 800b99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b99e:	0014      	movs	r4, r2
 800b9a0:	2600      	movs	r6, #0
 800b9a2:	9000      	str	r0, [sp, #0]
 800b9a4:	9101      	str	r1, [sp, #4]
 800b9a6:	68a5      	ldr	r5, [r4, #8]
 800b9a8:	6867      	ldr	r7, [r4, #4]
 800b9aa:	3f01      	subs	r7, #1
 800b9ac:	d504      	bpl.n	800b9b8 <_fwalk_sglue+0x1c>
 800b9ae:	6824      	ldr	r4, [r4, #0]
 800b9b0:	2c00      	cmp	r4, #0
 800b9b2:	d1f8      	bne.n	800b9a6 <_fwalk_sglue+0xa>
 800b9b4:	0030      	movs	r0, r6
 800b9b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d908      	bls.n	800b9d0 <_fwalk_sglue+0x34>
 800b9be:	220e      	movs	r2, #14
 800b9c0:	5eab      	ldrsh	r3, [r5, r2]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	d004      	beq.n	800b9d0 <_fwalk_sglue+0x34>
 800b9c6:	0029      	movs	r1, r5
 800b9c8:	9800      	ldr	r0, [sp, #0]
 800b9ca:	9b01      	ldr	r3, [sp, #4]
 800b9cc:	4798      	blx	r3
 800b9ce:	4306      	orrs	r6, r0
 800b9d0:	3568      	adds	r5, #104	; 0x68
 800b9d2:	e7ea      	b.n	800b9aa <_fwalk_sglue+0xe>

0800b9d4 <snprintf>:
 800b9d4:	b40c      	push	{r2, r3}
 800b9d6:	b530      	push	{r4, r5, lr}
 800b9d8:	4b17      	ldr	r3, [pc, #92]	; (800ba38 <snprintf+0x64>)
 800b9da:	000c      	movs	r4, r1
 800b9dc:	681d      	ldr	r5, [r3, #0]
 800b9de:	b09d      	sub	sp, #116	; 0x74
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	da08      	bge.n	800b9f6 <snprintf+0x22>
 800b9e4:	238b      	movs	r3, #139	; 0x8b
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	4240      	negs	r0, r0
 800b9ec:	b01d      	add	sp, #116	; 0x74
 800b9ee:	bc30      	pop	{r4, r5}
 800b9f0:	bc08      	pop	{r3}
 800b9f2:	b002      	add	sp, #8
 800b9f4:	4718      	bx	r3
 800b9f6:	2382      	movs	r3, #130	; 0x82
 800b9f8:	466a      	mov	r2, sp
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	8293      	strh	r3, [r2, #20]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9002      	str	r0, [sp, #8]
 800ba02:	9006      	str	r0, [sp, #24]
 800ba04:	4299      	cmp	r1, r3
 800ba06:	d000      	beq.n	800ba0a <snprintf+0x36>
 800ba08:	1e4b      	subs	r3, r1, #1
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	9307      	str	r3, [sp, #28]
 800ba0e:	2301      	movs	r3, #1
 800ba10:	466a      	mov	r2, sp
 800ba12:	425b      	negs	r3, r3
 800ba14:	82d3      	strh	r3, [r2, #22]
 800ba16:	0028      	movs	r0, r5
 800ba18:	ab21      	add	r3, sp, #132	; 0x84
 800ba1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba1c:	a902      	add	r1, sp, #8
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	f001 fa9a 	bl	800cf58 <_svfprintf_r>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	da01      	bge.n	800ba2c <snprintf+0x58>
 800ba28:	238b      	movs	r3, #139	; 0x8b
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	d0dd      	beq.n	800b9ec <snprintf+0x18>
 800ba30:	2200      	movs	r2, #0
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	e7d9      	b.n	800b9ec <snprintf+0x18>
 800ba38:	200006d0 	.word	0x200006d0

0800ba3c <sprintf>:
 800ba3c:	b40e      	push	{r1, r2, r3}
 800ba3e:	b500      	push	{lr}
 800ba40:	490b      	ldr	r1, [pc, #44]	; (800ba70 <sprintf+0x34>)
 800ba42:	b09c      	sub	sp, #112	; 0x70
 800ba44:	ab1d      	add	r3, sp, #116	; 0x74
 800ba46:	9002      	str	r0, [sp, #8]
 800ba48:	9006      	str	r0, [sp, #24]
 800ba4a:	9107      	str	r1, [sp, #28]
 800ba4c:	9104      	str	r1, [sp, #16]
 800ba4e:	4809      	ldr	r0, [pc, #36]	; (800ba74 <sprintf+0x38>)
 800ba50:	4909      	ldr	r1, [pc, #36]	; (800ba78 <sprintf+0x3c>)
 800ba52:	cb04      	ldmia	r3!, {r2}
 800ba54:	9105      	str	r1, [sp, #20]
 800ba56:	6800      	ldr	r0, [r0, #0]
 800ba58:	a902      	add	r1, sp, #8
 800ba5a:	9301      	str	r3, [sp, #4]
 800ba5c:	f001 fa7c 	bl	800cf58 <_svfprintf_r>
 800ba60:	2200      	movs	r2, #0
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	701a      	strb	r2, [r3, #0]
 800ba66:	b01c      	add	sp, #112	; 0x70
 800ba68:	bc08      	pop	{r3}
 800ba6a:	b003      	add	sp, #12
 800ba6c:	4718      	bx	r3
 800ba6e:	46c0      	nop			; (mov r8, r8)
 800ba70:	7fffffff 	.word	0x7fffffff
 800ba74:	200006d0 	.word	0x200006d0
 800ba78:	ffff0208 	.word	0xffff0208

0800ba7c <sscanf>:
 800ba7c:	b40e      	push	{r1, r2, r3}
 800ba7e:	b530      	push	{r4, r5, lr}
 800ba80:	2381      	movs	r3, #129	; 0x81
 800ba82:	b09c      	sub	sp, #112	; 0x70
 800ba84:	466a      	mov	r2, sp
 800ba86:	ac1f      	add	r4, sp, #124	; 0x7c
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	cc20      	ldmia	r4!, {r5}
 800ba8c:	8293      	strh	r3, [r2, #20]
 800ba8e:	9002      	str	r0, [sp, #8]
 800ba90:	9006      	str	r0, [sp, #24]
 800ba92:	f7f4 fb37 	bl	8000104 <strlen>
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <sscanf+0x48>)
 800ba98:	466a      	mov	r2, sp
 800ba9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9003      	str	r0, [sp, #12]
 800baa0:	9007      	str	r0, [sp, #28]
 800baa2:	4809      	ldr	r0, [pc, #36]	; (800bac8 <sscanf+0x4c>)
 800baa4:	930e      	str	r3, [sp, #56]	; 0x38
 800baa6:	9313      	str	r3, [sp, #76]	; 0x4c
 800baa8:	3b01      	subs	r3, #1
 800baaa:	82d3      	strh	r3, [r2, #22]
 800baac:	a902      	add	r1, sp, #8
 800baae:	0023      	movs	r3, r4
 800bab0:	002a      	movs	r2, r5
 800bab2:	6800      	ldr	r0, [r0, #0]
 800bab4:	9401      	str	r4, [sp, #4]
 800bab6:	f002 fc91 	bl	800e3dc <__ssvfscanf_r>
 800baba:	b01c      	add	sp, #112	; 0x70
 800babc:	bc30      	pop	{r4, r5}
 800babe:	bc08      	pop	{r3}
 800bac0:	b003      	add	sp, #12
 800bac2:	4718      	bx	r3
 800bac4:	0800baf5 	.word	0x0800baf5
 800bac8:	200006d0 	.word	0x200006d0

0800bacc <__sread>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	000c      	movs	r4, r1
 800bad0:	250e      	movs	r5, #14
 800bad2:	5f49      	ldrsh	r1, [r1, r5]
 800bad4:	f000 f8ba 	bl	800bc4c <_read_r>
 800bad8:	2800      	cmp	r0, #0
 800bada:	db03      	blt.n	800bae4 <__sread+0x18>
 800badc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bade:	181b      	adds	r3, r3, r0
 800bae0:	6523      	str	r3, [r4, #80]	; 0x50
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	4a02      	ldr	r2, [pc, #8]	; (800baf0 <__sread+0x24>)
 800bae8:	4013      	ands	r3, r2
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	e7f9      	b.n	800bae2 <__sread+0x16>
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	ffffefff 	.word	0xffffefff

0800baf4 <__seofread>:
 800baf4:	2000      	movs	r0, #0
 800baf6:	4770      	bx	lr

0800baf8 <__swrite>:
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	001f      	movs	r7, r3
 800bafc:	898b      	ldrh	r3, [r1, #12]
 800bafe:	0005      	movs	r5, r0
 800bb00:	000c      	movs	r4, r1
 800bb02:	0016      	movs	r6, r2
 800bb04:	05db      	lsls	r3, r3, #23
 800bb06:	d505      	bpl.n	800bb14 <__swrite+0x1c>
 800bb08:	230e      	movs	r3, #14
 800bb0a:	5ec9      	ldrsh	r1, [r1, r3]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2302      	movs	r3, #2
 800bb10:	f000 f888 	bl	800bc24 <_lseek_r>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	4a05      	ldr	r2, [pc, #20]	; (800bb2c <__swrite+0x34>)
 800bb18:	0028      	movs	r0, r5
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	0032      	movs	r2, r6
 800bb20:	230e      	movs	r3, #14
 800bb22:	5ee1      	ldrsh	r1, [r4, r3]
 800bb24:	003b      	movs	r3, r7
 800bb26:	f000 f8b7 	bl	800bc98 <_write_r>
 800bb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2c:	ffffefff 	.word	0xffffefff

0800bb30 <__sseek>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	000c      	movs	r4, r1
 800bb34:	250e      	movs	r5, #14
 800bb36:	5f49      	ldrsh	r1, [r1, r5]
 800bb38:	f000 f874 	bl	800bc24 <_lseek_r>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	1c42      	adds	r2, r0, #1
 800bb40:	d103      	bne.n	800bb4a <__sseek+0x1a>
 800bb42:	4a05      	ldr	r2, [pc, #20]	; (800bb58 <__sseek+0x28>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
 800bb4a:	2280      	movs	r2, #128	; 0x80
 800bb4c:	0152      	lsls	r2, r2, #5
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	6520      	str	r0, [r4, #80]	; 0x50
 800bb54:	e7f8      	b.n	800bb48 <__sseek+0x18>
 800bb56:	46c0      	nop			; (mov r8, r8)
 800bb58:	ffffefff 	.word	0xffffefff

0800bb5c <__sclose>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	230e      	movs	r3, #14
 800bb60:	5ec9      	ldrsh	r1, [r1, r3]
 800bb62:	f000 f84d 	bl	800bc00 <_close_r>
 800bb66:	bd10      	pop	{r4, pc}

0800bb68 <memset>:
 800bb68:	0003      	movs	r3, r0
 800bb6a:	1882      	adds	r2, r0, r2
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d100      	bne.n	800bb72 <memset+0xa>
 800bb70:	4770      	bx	lr
 800bb72:	7019      	strb	r1, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	e7f9      	b.n	800bb6c <memset+0x4>

0800bb78 <strncmp>:
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	0005      	movs	r5, r0
 800bb7c:	1e10      	subs	r0, r2, #0
 800bb7e:	d00b      	beq.n	800bb98 <strncmp+0x20>
 800bb80:	2400      	movs	r4, #0
 800bb82:	3a01      	subs	r2, #1
 800bb84:	5d2b      	ldrb	r3, [r5, r4]
 800bb86:	5d08      	ldrb	r0, [r1, r4]
 800bb88:	4283      	cmp	r3, r0
 800bb8a:	d104      	bne.n	800bb96 <strncmp+0x1e>
 800bb8c:	42a2      	cmp	r2, r4
 800bb8e:	d002      	beq.n	800bb96 <strncmp+0x1e>
 800bb90:	3401      	adds	r4, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1f6      	bne.n	800bb84 <strncmp+0xc>
 800bb96:	1a18      	subs	r0, r3, r0
 800bb98:	bd30      	pop	{r4, r5, pc}

0800bb9a <strncpy>:
 800bb9a:	0003      	movs	r3, r0
 800bb9c:	b530      	push	{r4, r5, lr}
 800bb9e:	001d      	movs	r5, r3
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d006      	beq.n	800bbb2 <strncpy+0x18>
 800bba4:	780c      	ldrb	r4, [r1, #0]
 800bba6:	3a01      	subs	r2, #1
 800bba8:	3301      	adds	r3, #1
 800bbaa:	702c      	strb	r4, [r5, #0]
 800bbac:	3101      	adds	r1, #1
 800bbae:	2c00      	cmp	r4, #0
 800bbb0:	d1f5      	bne.n	800bb9e <strncpy+0x4>
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	189a      	adds	r2, r3, r2
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d100      	bne.n	800bbbc <strncpy+0x22>
 800bbba:	bd30      	pop	{r4, r5, pc}
 800bbbc:	7019      	strb	r1, [r3, #0]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	e7f9      	b.n	800bbb6 <strncpy+0x1c>

0800bbc2 <strstr>:
 800bbc2:	780a      	ldrb	r2, [r1, #0]
 800bbc4:	b530      	push	{r4, r5, lr}
 800bbc6:	2a00      	cmp	r2, #0
 800bbc8:	d10c      	bne.n	800bbe4 <strstr+0x22>
 800bbca:	bd30      	pop	{r4, r5, pc}
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d108      	bne.n	800bbe2 <strstr+0x20>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	5ccc      	ldrb	r4, [r1, r3]
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	d0f8      	beq.n	800bbca <strstr+0x8>
 800bbd8:	5cc5      	ldrb	r5, [r0, r3]
 800bbda:	42a5      	cmp	r5, r4
 800bbdc:	d101      	bne.n	800bbe2 <strstr+0x20>
 800bbde:	3301      	adds	r3, #1
 800bbe0:	e7f7      	b.n	800bbd2 <strstr+0x10>
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	7803      	ldrb	r3, [r0, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1f0      	bne.n	800bbcc <strstr+0xa>
 800bbea:	0018      	movs	r0, r3
 800bbec:	e7ed      	b.n	800bbca <strstr+0x8>
	...

0800bbf0 <__locale_mb_cur_max>:
 800bbf0:	2294      	movs	r2, #148	; 0x94
 800bbf2:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <__locale_mb_cur_max+0xc>)
 800bbf4:	0052      	lsls	r2, r2, #1
 800bbf6:	5c98      	ldrb	r0, [r3, r2]
 800bbf8:	4770      	bx	lr
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	20000444 	.word	0x20000444

0800bc00 <_close_r>:
 800bc00:	2300      	movs	r3, #0
 800bc02:	b570      	push	{r4, r5, r6, lr}
 800bc04:	4d06      	ldr	r5, [pc, #24]	; (800bc20 <_close_r+0x20>)
 800bc06:	0004      	movs	r4, r0
 800bc08:	0008      	movs	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f8 f805 	bl	8003c1a <_close>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d103      	bne.n	800bc1c <_close_r+0x1c>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d000      	beq.n	800bc1c <_close_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd70      	pop	{r4, r5, r6, pc}
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	20000da0 	.word	0x20000da0

0800bc24 <_lseek_r>:
 800bc24:	b570      	push	{r4, r5, r6, lr}
 800bc26:	0004      	movs	r4, r0
 800bc28:	0008      	movs	r0, r1
 800bc2a:	0011      	movs	r1, r2
 800bc2c:	001a      	movs	r2, r3
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4d05      	ldr	r5, [pc, #20]	; (800bc48 <_lseek_r+0x24>)
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	f7f8 f812 	bl	8003c5c <_lseek>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d103      	bne.n	800bc44 <_lseek_r+0x20>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d000      	beq.n	800bc44 <_lseek_r+0x20>
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	bd70      	pop	{r4, r5, r6, pc}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	20000da0 	.word	0x20000da0

0800bc4c <_read_r>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	0004      	movs	r4, r0
 800bc50:	0008      	movs	r0, r1
 800bc52:	0011      	movs	r1, r2
 800bc54:	001a      	movs	r2, r3
 800bc56:	2300      	movs	r3, #0
 800bc58:	4d05      	ldr	r5, [pc, #20]	; (800bc70 <_read_r+0x24>)
 800bc5a:	602b      	str	r3, [r5, #0]
 800bc5c:	f7f7 ffa4 	bl	8003ba8 <_read>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d103      	bne.n	800bc6c <_read_r+0x20>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d000      	beq.n	800bc6c <_read_r+0x20>
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	bd70      	pop	{r4, r5, r6, pc}
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	20000da0 	.word	0x20000da0

0800bc74 <_sbrk_r>:
 800bc74:	2300      	movs	r3, #0
 800bc76:	b570      	push	{r4, r5, r6, lr}
 800bc78:	4d06      	ldr	r5, [pc, #24]	; (800bc94 <_sbrk_r+0x20>)
 800bc7a:	0004      	movs	r4, r0
 800bc7c:	0008      	movs	r0, r1
 800bc7e:	602b      	str	r3, [r5, #0]
 800bc80:	f7f7 fff8 	bl	8003c74 <_sbrk>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d103      	bne.n	800bc90 <_sbrk_r+0x1c>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d000      	beq.n	800bc90 <_sbrk_r+0x1c>
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	bd70      	pop	{r4, r5, r6, pc}
 800bc92:	46c0      	nop			; (mov r8, r8)
 800bc94:	20000da0 	.word	0x20000da0

0800bc98 <_write_r>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	0004      	movs	r4, r0
 800bc9c:	0008      	movs	r0, r1
 800bc9e:	0011      	movs	r1, r2
 800bca0:	001a      	movs	r2, r3
 800bca2:	2300      	movs	r3, #0
 800bca4:	4d05      	ldr	r5, [pc, #20]	; (800bcbc <_write_r+0x24>)
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7f7 ff9b 	bl	8003be2 <_write>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d103      	bne.n	800bcb8 <_write_r+0x20>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d000      	beq.n	800bcb8 <_write_r+0x20>
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	46c0      	nop			; (mov r8, r8)
 800bcbc:	20000da0 	.word	0x20000da0

0800bcc0 <__errno>:
 800bcc0:	4b01      	ldr	r3, [pc, #4]	; (800bcc8 <__errno+0x8>)
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	4770      	bx	lr
 800bcc6:	46c0      	nop			; (mov r8, r8)
 800bcc8:	200006d0 	.word	0x200006d0

0800bccc <__libc_init_array>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	2600      	movs	r6, #0
 800bcd0:	4c0c      	ldr	r4, [pc, #48]	; (800bd04 <__libc_init_array+0x38>)
 800bcd2:	4d0d      	ldr	r5, [pc, #52]	; (800bd08 <__libc_init_array+0x3c>)
 800bcd4:	1b64      	subs	r4, r4, r5
 800bcd6:	10a4      	asrs	r4, r4, #2
 800bcd8:	42a6      	cmp	r6, r4
 800bcda:	d109      	bne.n	800bcf0 <__libc_init_array+0x24>
 800bcdc:	2600      	movs	r6, #0
 800bcde:	f006 fcc5 	bl	801266c <_init>
 800bce2:	4c0a      	ldr	r4, [pc, #40]	; (800bd0c <__libc_init_array+0x40>)
 800bce4:	4d0a      	ldr	r5, [pc, #40]	; (800bd10 <__libc_init_array+0x44>)
 800bce6:	1b64      	subs	r4, r4, r5
 800bce8:	10a4      	asrs	r4, r4, #2
 800bcea:	42a6      	cmp	r6, r4
 800bcec:	d105      	bne.n	800bcfa <__libc_init_array+0x2e>
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	00b3      	lsls	r3, r6, #2
 800bcf2:	58eb      	ldr	r3, [r5, r3]
 800bcf4:	4798      	blx	r3
 800bcf6:	3601      	adds	r6, #1
 800bcf8:	e7ee      	b.n	800bcd8 <__libc_init_array+0xc>
 800bcfa:	00b3      	lsls	r3, r6, #2
 800bcfc:	58eb      	ldr	r3, [r5, r3]
 800bcfe:	4798      	blx	r3
 800bd00:	3601      	adds	r6, #1
 800bd02:	e7f2      	b.n	800bcea <__libc_init_array+0x1e>
 800bd04:	0801473c 	.word	0x0801473c
 800bd08:	0801473c 	.word	0x0801473c
 800bd0c:	08014744 	.word	0x08014744
 800bd10:	0801473c 	.word	0x0801473c

0800bd14 <__retarget_lock_init_recursive>:
 800bd14:	4770      	bx	lr

0800bd16 <__retarget_lock_close_recursive>:
 800bd16:	4770      	bx	lr

0800bd18 <__retarget_lock_acquire_recursive>:
 800bd18:	4770      	bx	lr

0800bd1a <__retarget_lock_release_recursive>:
 800bd1a:	4770      	bx	lr

0800bd1c <sysconf>:
 800bd1c:	2380      	movs	r3, #128	; 0x80
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	2808      	cmp	r0, #8
 800bd22:	d004      	beq.n	800bd2e <sysconf+0x12>
 800bd24:	f7ff ffcc 	bl	800bcc0 <__errno>
 800bd28:	2316      	movs	r3, #22
 800bd2a:	6003      	str	r3, [r0, #0]
 800bd2c:	3b17      	subs	r3, #23
 800bd2e:	0018      	movs	r0, r3
 800bd30:	bd10      	pop	{r4, pc}

0800bd32 <memcpy>:
 800bd32:	2300      	movs	r3, #0
 800bd34:	b510      	push	{r4, lr}
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d100      	bne.n	800bd3c <memcpy+0xa>
 800bd3a:	bd10      	pop	{r4, pc}
 800bd3c:	5ccc      	ldrb	r4, [r1, r3]
 800bd3e:	54c4      	strb	r4, [r0, r3]
 800bd40:	3301      	adds	r3, #1
 800bd42:	e7f8      	b.n	800bd36 <memcpy+0x4>

0800bd44 <nan>:
 800bd44:	2000      	movs	r0, #0
 800bd46:	4901      	ldr	r1, [pc, #4]	; (800bd4c <nan+0x8>)
 800bd48:	4770      	bx	lr
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	7ff80000 	.word	0x7ff80000

0800bd50 <nanf>:
 800bd50:	4800      	ldr	r0, [pc, #0]	; (800bd54 <nanf+0x4>)
 800bd52:	4770      	bx	lr
 800bd54:	7fc00000 	.word	0x7fc00000

0800bd58 <register_fini>:
 800bd58:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <register_fini+0x10>)
 800bd5a:	b510      	push	{r4, lr}
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <register_fini+0xe>
 800bd60:	4802      	ldr	r0, [pc, #8]	; (800bd6c <register_fini+0x14>)
 800bd62:	f000 f805 	bl	800bd70 <atexit>
 800bd66:	bd10      	pop	{r4, pc}
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	0800facd 	.word	0x0800facd

0800bd70 <atexit>:
 800bd70:	2300      	movs	r3, #0
 800bd72:	b510      	push	{r4, lr}
 800bd74:	0001      	movs	r1, r0
 800bd76:	001a      	movs	r2, r3
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f003 fef9 	bl	800fb70 <__register_exitproc>
 800bd7e:	bd10      	pop	{r4, pc}

0800bd80 <_malloc_trim_r>:
 800bd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd82:	0004      	movs	r4, r0
 800bd84:	2008      	movs	r0, #8
 800bd86:	000d      	movs	r5, r1
 800bd88:	f7ff ffc8 	bl	800bd1c <sysconf>
 800bd8c:	0006      	movs	r6, r0
 800bd8e:	0020      	movs	r0, r4
 800bd90:	f7fe fe7e 	bl	800aa90 <__malloc_lock>
 800bd94:	2203      	movs	r2, #3
 800bd96:	4f21      	ldr	r7, [pc, #132]	; (800be1c <_malloc_trim_r+0x9c>)
 800bd98:	0031      	movs	r1, r6
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	4393      	bics	r3, r2
 800bda0:	1b58      	subs	r0, r3, r5
 800bda2:	3811      	subs	r0, #17
 800bda4:	1980      	adds	r0, r0, r6
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f7f4 f9c8 	bl	800013c <__udivsi3>
 800bdac:	1e45      	subs	r5, r0, #1
 800bdae:	4375      	muls	r5, r6
 800bdb0:	42ae      	cmp	r6, r5
 800bdb2:	dd04      	ble.n	800bdbe <_malloc_trim_r+0x3e>
 800bdb4:	0020      	movs	r0, r4
 800bdb6:	f7fe fe73 	bl	800aaa0 <__malloc_unlock>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	0020      	movs	r0, r4
 800bdc2:	f7ff ff57 	bl	800bc74 <_sbrk_r>
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	9a01      	ldr	r2, [sp, #4]
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	4298      	cmp	r0, r3
 800bdce:	d1f1      	bne.n	800bdb4 <_malloc_trim_r+0x34>
 800bdd0:	0020      	movs	r0, r4
 800bdd2:	4269      	negs	r1, r5
 800bdd4:	f7ff ff4e 	bl	800bc74 <_sbrk_r>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d110      	bne.n	800bdfe <_malloc_trim_r+0x7e>
 800bddc:	2100      	movs	r1, #0
 800bdde:	0020      	movs	r0, r4
 800bde0:	f7ff ff48 	bl	800bc74 <_sbrk_r>
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	1a81      	subs	r1, r0, r2
 800bde8:	290f      	cmp	r1, #15
 800bdea:	dde3      	ble.n	800bdb4 <_malloc_trim_r+0x34>
 800bdec:	4d0c      	ldr	r5, [pc, #48]	; (800be20 <_malloc_trim_r+0xa0>)
 800bdee:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <_malloc_trim_r+0xa4>)
 800bdf0:	682d      	ldr	r5, [r5, #0]
 800bdf2:	1b40      	subs	r0, r0, r5
 800bdf4:	6018      	str	r0, [r3, #0]
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	6053      	str	r3, [r2, #4]
 800bdfc:	e7da      	b.n	800bdb4 <_malloc_trim_r+0x34>
 800bdfe:	2601      	movs	r6, #1
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	1b5b      	subs	r3, r3, r5
 800be06:	4333      	orrs	r3, r6
 800be08:	6053      	str	r3, [r2, #4]
 800be0a:	4a06      	ldr	r2, [pc, #24]	; (800be24 <_malloc_trim_r+0xa4>)
 800be0c:	0020      	movs	r0, r4
 800be0e:	6813      	ldr	r3, [r2, #0]
 800be10:	1b5b      	subs	r3, r3, r5
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	f7fe fe44 	bl	800aaa0 <__malloc_unlock>
 800be18:	0030      	movs	r0, r6
 800be1a:	e7cf      	b.n	800bdbc <_malloc_trim_r+0x3c>
 800be1c:	20000028 	.word	0x20000028
 800be20:	20000430 	.word	0x20000430
 800be24:	20000c30 	.word	0x20000c30

0800be28 <_free_r>:
 800be28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be2a:	1e0d      	subs	r5, r1, #0
 800be2c:	9001      	str	r0, [sp, #4]
 800be2e:	d02d      	beq.n	800be8c <_free_r+0x64>
 800be30:	f7fe fe2e 	bl	800aa90 <__malloc_lock>
 800be34:	2301      	movs	r3, #1
 800be36:	0029      	movs	r1, r5
 800be38:	469c      	mov	ip, r3
 800be3a:	3908      	subs	r1, #8
 800be3c:	684f      	ldr	r7, [r1, #4]
 800be3e:	4662      	mov	r2, ip
 800be40:	003b      	movs	r3, r7
 800be42:	4664      	mov	r4, ip
 800be44:	4393      	bics	r3, r2
 800be46:	18c8      	adds	r0, r1, r3
 800be48:	6845      	ldr	r5, [r0, #4]
 800be4a:	3202      	adds	r2, #2
 800be4c:	4395      	bics	r5, r2
 800be4e:	4a4a      	ldr	r2, [pc, #296]	; (800bf78 <_free_r+0x150>)
 800be50:	4027      	ands	r7, r4
 800be52:	6896      	ldr	r6, [r2, #8]
 800be54:	4286      	cmp	r6, r0
 800be56:	d11a      	bne.n	800be8e <_free_r+0x66>
 800be58:	195b      	adds	r3, r3, r5
 800be5a:	2f00      	cmp	r7, #0
 800be5c:	d106      	bne.n	800be6c <_free_r+0x44>
 800be5e:	6808      	ldr	r0, [r1, #0]
 800be60:	1a09      	subs	r1, r1, r0
 800be62:	688d      	ldr	r5, [r1, #8]
 800be64:	181b      	adds	r3, r3, r0
 800be66:	68c8      	ldr	r0, [r1, #12]
 800be68:	60e8      	str	r0, [r5, #12]
 800be6a:	6085      	str	r5, [r0, #8]
 800be6c:	2001      	movs	r0, #1
 800be6e:	4318      	orrs	r0, r3
 800be70:	6048      	str	r0, [r1, #4]
 800be72:	6091      	str	r1, [r2, #8]
 800be74:	4a41      	ldr	r2, [pc, #260]	; (800bf7c <_free_r+0x154>)
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d804      	bhi.n	800be86 <_free_r+0x5e>
 800be7c:	4b40      	ldr	r3, [pc, #256]	; (800bf80 <_free_r+0x158>)
 800be7e:	9801      	ldr	r0, [sp, #4]
 800be80:	6819      	ldr	r1, [r3, #0]
 800be82:	f7ff ff7d 	bl	800bd80 <_malloc_trim_r>
 800be86:	9801      	ldr	r0, [sp, #4]
 800be88:	f7fe fe0a 	bl	800aaa0 <__malloc_unlock>
 800be8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800be8e:	2600      	movs	r6, #0
 800be90:	6045      	str	r5, [r0, #4]
 800be92:	42b7      	cmp	r7, r6
 800be94:	d109      	bne.n	800beaa <_free_r+0x82>
 800be96:	680f      	ldr	r7, [r1, #0]
 800be98:	4c3a      	ldr	r4, [pc, #232]	; (800bf84 <_free_r+0x15c>)
 800be9a:	1bc9      	subs	r1, r1, r7
 800be9c:	19db      	adds	r3, r3, r7
 800be9e:	688f      	ldr	r7, [r1, #8]
 800bea0:	42a7      	cmp	r7, r4
 800bea2:	d02c      	beq.n	800befe <_free_r+0xd6>
 800bea4:	68cc      	ldr	r4, [r1, #12]
 800bea6:	60fc      	str	r4, [r7, #12]
 800bea8:	60a7      	str	r7, [r4, #8]
 800beaa:	1947      	adds	r7, r0, r5
 800beac:	687c      	ldr	r4, [r7, #4]
 800beae:	2701      	movs	r7, #1
 800beb0:	423c      	tst	r4, r7
 800beb2:	d10b      	bne.n	800becc <_free_r+0xa4>
 800beb4:	195b      	adds	r3, r3, r5
 800beb6:	6885      	ldr	r5, [r0, #8]
 800beb8:	2e00      	cmp	r6, #0
 800beba:	d122      	bne.n	800bf02 <_free_r+0xda>
 800bebc:	4c31      	ldr	r4, [pc, #196]	; (800bf84 <_free_r+0x15c>)
 800bebe:	42a5      	cmp	r5, r4
 800bec0:	d11f      	bne.n	800bf02 <_free_r+0xda>
 800bec2:	003e      	movs	r6, r7
 800bec4:	6151      	str	r1, [r2, #20]
 800bec6:	6111      	str	r1, [r2, #16]
 800bec8:	60cd      	str	r5, [r1, #12]
 800beca:	608d      	str	r5, [r1, #8]
 800becc:	2501      	movs	r5, #1
 800bece:	0028      	movs	r0, r5
 800bed0:	4318      	orrs	r0, r3
 800bed2:	6048      	str	r0, [r1, #4]
 800bed4:	50cb      	str	r3, [r1, r3]
 800bed6:	2e00      	cmp	r6, #0
 800bed8:	d1d5      	bne.n	800be86 <_free_r+0x5e>
 800beda:	2080      	movs	r0, #128	; 0x80
 800bedc:	0080      	lsls	r0, r0, #2
 800bede:	4283      	cmp	r3, r0
 800bee0:	d213      	bcs.n	800bf0a <_free_r+0xe2>
 800bee2:	08d8      	lsrs	r0, r3, #3
 800bee4:	095b      	lsrs	r3, r3, #5
 800bee6:	409d      	lsls	r5, r3
 800bee8:	6853      	ldr	r3, [r2, #4]
 800beea:	431d      	orrs	r5, r3
 800beec:	00c3      	lsls	r3, r0, #3
 800beee:	189b      	adds	r3, r3, r2
 800bef0:	6055      	str	r5, [r2, #4]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	60cb      	str	r3, [r1, #12]
 800bef6:	608a      	str	r2, [r1, #8]
 800bef8:	6099      	str	r1, [r3, #8]
 800befa:	60d1      	str	r1, [r2, #12]
 800befc:	e7c3      	b.n	800be86 <_free_r+0x5e>
 800befe:	4666      	mov	r6, ip
 800bf00:	e7d3      	b.n	800beaa <_free_r+0x82>
 800bf02:	68c0      	ldr	r0, [r0, #12]
 800bf04:	60e8      	str	r0, [r5, #12]
 800bf06:	6085      	str	r5, [r0, #8]
 800bf08:	e7e0      	b.n	800becc <_free_r+0xa4>
 800bf0a:	0a5d      	lsrs	r5, r3, #9
 800bf0c:	2d04      	cmp	r5, #4
 800bf0e:	d812      	bhi.n	800bf36 <_free_r+0x10e>
 800bf10:	0998      	lsrs	r0, r3, #6
 800bf12:	3038      	adds	r0, #56	; 0x38
 800bf14:	00c6      	lsls	r6, r0, #3
 800bf16:	18b6      	adds	r6, r6, r2
 800bf18:	68b5      	ldr	r5, [r6, #8]
 800bf1a:	2703      	movs	r7, #3
 800bf1c:	42ae      	cmp	r6, r5
 800bf1e:	d125      	bne.n	800bf6c <_free_r+0x144>
 800bf20:	2301      	movs	r3, #1
 800bf22:	1080      	asrs	r0, r0, #2
 800bf24:	4083      	lsls	r3, r0
 800bf26:	6850      	ldr	r0, [r2, #4]
 800bf28:	4303      	orrs	r3, r0
 800bf2a:	6053      	str	r3, [r2, #4]
 800bf2c:	60ce      	str	r6, [r1, #12]
 800bf2e:	608d      	str	r5, [r1, #8]
 800bf30:	60b1      	str	r1, [r6, #8]
 800bf32:	60e9      	str	r1, [r5, #12]
 800bf34:	e7a7      	b.n	800be86 <_free_r+0x5e>
 800bf36:	2d14      	cmp	r5, #20
 800bf38:	d802      	bhi.n	800bf40 <_free_r+0x118>
 800bf3a:	0028      	movs	r0, r5
 800bf3c:	305b      	adds	r0, #91	; 0x5b
 800bf3e:	e7e9      	b.n	800bf14 <_free_r+0xec>
 800bf40:	2d54      	cmp	r5, #84	; 0x54
 800bf42:	d802      	bhi.n	800bf4a <_free_r+0x122>
 800bf44:	0b18      	lsrs	r0, r3, #12
 800bf46:	306e      	adds	r0, #110	; 0x6e
 800bf48:	e7e4      	b.n	800bf14 <_free_r+0xec>
 800bf4a:	20aa      	movs	r0, #170	; 0xaa
 800bf4c:	0040      	lsls	r0, r0, #1
 800bf4e:	4285      	cmp	r5, r0
 800bf50:	d802      	bhi.n	800bf58 <_free_r+0x130>
 800bf52:	0bd8      	lsrs	r0, r3, #15
 800bf54:	3077      	adds	r0, #119	; 0x77
 800bf56:	e7dd      	b.n	800bf14 <_free_r+0xec>
 800bf58:	4e0b      	ldr	r6, [pc, #44]	; (800bf88 <_free_r+0x160>)
 800bf5a:	207e      	movs	r0, #126	; 0x7e
 800bf5c:	42b5      	cmp	r5, r6
 800bf5e:	d8d9      	bhi.n	800bf14 <_free_r+0xec>
 800bf60:	0c98      	lsrs	r0, r3, #18
 800bf62:	307c      	adds	r0, #124	; 0x7c
 800bf64:	e7d6      	b.n	800bf14 <_free_r+0xec>
 800bf66:	68ad      	ldr	r5, [r5, #8]
 800bf68:	42ae      	cmp	r6, r5
 800bf6a:	d003      	beq.n	800bf74 <_free_r+0x14c>
 800bf6c:	686a      	ldr	r2, [r5, #4]
 800bf6e:	43ba      	bics	r2, r7
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d8f8      	bhi.n	800bf66 <_free_r+0x13e>
 800bf74:	68ee      	ldr	r6, [r5, #12]
 800bf76:	e7d9      	b.n	800bf2c <_free_r+0x104>
 800bf78:	20000028 	.word	0x20000028
 800bf7c:	20000434 	.word	0x20000434
 800bf80:	20000c60 	.word	0x20000c60
 800bf84:	20000030 	.word	0x20000030
 800bf88:	00000554 	.word	0x00000554

0800bf8c <rshift>:
 800bf8c:	0002      	movs	r2, r0
 800bf8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf90:	6904      	ldr	r4, [r0, #16]
 800bf92:	114b      	asrs	r3, r1, #5
 800bf94:	b085      	sub	sp, #20
 800bf96:	3214      	adds	r2, #20
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	114d      	asrs	r5, r1, #5
 800bf9c:	0013      	movs	r3, r2
 800bf9e:	42ac      	cmp	r4, r5
 800bfa0:	dd32      	ble.n	800c008 <rshift+0x7c>
 800bfa2:	261f      	movs	r6, #31
 800bfa4:	000f      	movs	r7, r1
 800bfa6:	114b      	asrs	r3, r1, #5
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	00a5      	lsls	r5, r4, #2
 800bfac:	18d3      	adds	r3, r2, r3
 800bfae:	4037      	ands	r7, r6
 800bfb0:	1955      	adds	r5, r2, r5
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	9701      	str	r7, [sp, #4]
 800bfb6:	4231      	tst	r1, r6
 800bfb8:	d10d      	bne.n	800bfd6 <rshift+0x4a>
 800bfba:	0016      	movs	r6, r2
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	428d      	cmp	r5, r1
 800bfc0:	d836      	bhi.n	800c030 <rshift+0xa4>
 800bfc2:	9900      	ldr	r1, [sp, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	3903      	subs	r1, #3
 800bfc8:	428d      	cmp	r5, r1
 800bfca:	d302      	bcc.n	800bfd2 <rshift+0x46>
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	1ae4      	subs	r4, r4, r3
 800bfd0:	00a3      	lsls	r3, r4, #2
 800bfd2:	18d3      	adds	r3, r2, r3
 800bfd4:	e018      	b.n	800c008 <rshift+0x7c>
 800bfd6:	2120      	movs	r1, #32
 800bfd8:	9e01      	ldr	r6, [sp, #4]
 800bfda:	9f01      	ldr	r7, [sp, #4]
 800bfdc:	1b89      	subs	r1, r1, r6
 800bfde:	9e00      	ldr	r6, [sp, #0]
 800bfe0:	9103      	str	r1, [sp, #12]
 800bfe2:	ce02      	ldmia	r6!, {r1}
 800bfe4:	4694      	mov	ip, r2
 800bfe6:	40f9      	lsrs	r1, r7
 800bfe8:	42b5      	cmp	r5, r6
 800bfea:	d816      	bhi.n	800c01a <rshift+0x8e>
 800bfec:	9e00      	ldr	r6, [sp, #0]
 800bfee:	2300      	movs	r3, #0
 800bff0:	3601      	adds	r6, #1
 800bff2:	42b5      	cmp	r5, r6
 800bff4:	d303      	bcc.n	800bffe <rshift+0x72>
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	1ae3      	subs	r3, r4, r3
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	3b04      	subs	r3, #4
 800bffe:	18d3      	adds	r3, r2, r3
 800c000:	6019      	str	r1, [r3, #0]
 800c002:	2900      	cmp	r1, #0
 800c004:	d000      	beq.n	800c008 <rshift+0x7c>
 800c006:	3304      	adds	r3, #4
 800c008:	1a99      	subs	r1, r3, r2
 800c00a:	1089      	asrs	r1, r1, #2
 800c00c:	6101      	str	r1, [r0, #16]
 800c00e:	4293      	cmp	r3, r2
 800c010:	d101      	bne.n	800c016 <rshift+0x8a>
 800c012:	2300      	movs	r3, #0
 800c014:	6143      	str	r3, [r0, #20]
 800c016:	b005      	add	sp, #20
 800c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01a:	6837      	ldr	r7, [r6, #0]
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	409f      	lsls	r7, r3
 800c020:	430f      	orrs	r7, r1
 800c022:	4661      	mov	r1, ip
 800c024:	c180      	stmia	r1!, {r7}
 800c026:	468c      	mov	ip, r1
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	ce02      	ldmia	r6!, {r1}
 800c02c:	40d9      	lsrs	r1, r3
 800c02e:	e7db      	b.n	800bfe8 <rshift+0x5c>
 800c030:	c980      	ldmia	r1!, {r7}
 800c032:	c680      	stmia	r6!, {r7}
 800c034:	e7c3      	b.n	800bfbe <rshift+0x32>

0800c036 <__hexdig_fun>:
 800c036:	0002      	movs	r2, r0
 800c038:	3a30      	subs	r2, #48	; 0x30
 800c03a:	0003      	movs	r3, r0
 800c03c:	2a09      	cmp	r2, #9
 800c03e:	d802      	bhi.n	800c046 <__hexdig_fun+0x10>
 800c040:	3b20      	subs	r3, #32
 800c042:	b2d8      	uxtb	r0, r3
 800c044:	4770      	bx	lr
 800c046:	0002      	movs	r2, r0
 800c048:	3a61      	subs	r2, #97	; 0x61
 800c04a:	2a05      	cmp	r2, #5
 800c04c:	d801      	bhi.n	800c052 <__hexdig_fun+0x1c>
 800c04e:	3b47      	subs	r3, #71	; 0x47
 800c050:	e7f7      	b.n	800c042 <__hexdig_fun+0xc>
 800c052:	001a      	movs	r2, r3
 800c054:	3a41      	subs	r2, #65	; 0x41
 800c056:	2000      	movs	r0, #0
 800c058:	2a05      	cmp	r2, #5
 800c05a:	d8f3      	bhi.n	800c044 <__hexdig_fun+0xe>
 800c05c:	3b27      	subs	r3, #39	; 0x27
 800c05e:	e7f0      	b.n	800c042 <__hexdig_fun+0xc>

0800c060 <__gethex>:
 800c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c062:	b089      	sub	sp, #36	; 0x24
 800c064:	9307      	str	r3, [sp, #28]
 800c066:	2302      	movs	r3, #2
 800c068:	9201      	str	r2, [sp, #4]
 800c06a:	680a      	ldr	r2, [r1, #0]
 800c06c:	425b      	negs	r3, r3
 800c06e:	9003      	str	r0, [sp, #12]
 800c070:	9106      	str	r1, [sp, #24]
 800c072:	1c96      	adds	r6, r2, #2
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	199a      	adds	r2, r3, r6
 800c078:	9600      	str	r6, [sp, #0]
 800c07a:	9205      	str	r2, [sp, #20]
 800c07c:	9a00      	ldr	r2, [sp, #0]
 800c07e:	3601      	adds	r6, #1
 800c080:	7810      	ldrb	r0, [r2, #0]
 800c082:	2830      	cmp	r0, #48	; 0x30
 800c084:	d0f7      	beq.n	800c076 <__gethex+0x16>
 800c086:	f7ff ffd6 	bl	800c036 <__hexdig_fun>
 800c08a:	2300      	movs	r3, #0
 800c08c:	001d      	movs	r5, r3
 800c08e:	9302      	str	r3, [sp, #8]
 800c090:	4298      	cmp	r0, r3
 800c092:	d11d      	bne.n	800c0d0 <__gethex+0x70>
 800c094:	2201      	movs	r2, #1
 800c096:	49a6      	ldr	r1, [pc, #664]	; (800c330 <__gethex+0x2d0>)
 800c098:	9800      	ldr	r0, [sp, #0]
 800c09a:	f7ff fd6d 	bl	800bb78 <strncmp>
 800c09e:	0007      	movs	r7, r0
 800c0a0:	42a8      	cmp	r0, r5
 800c0a2:	d169      	bne.n	800c178 <__gethex+0x118>
 800c0a4:	9b00      	ldr	r3, [sp, #0]
 800c0a6:	0034      	movs	r4, r6
 800c0a8:	7858      	ldrb	r0, [r3, #1]
 800c0aa:	f7ff ffc4 	bl	800c036 <__hexdig_fun>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	9302      	str	r3, [sp, #8]
 800c0b2:	42a8      	cmp	r0, r5
 800c0b4:	d02f      	beq.n	800c116 <__gethex+0xb6>
 800c0b6:	9600      	str	r6, [sp, #0]
 800c0b8:	9b00      	ldr	r3, [sp, #0]
 800c0ba:	7818      	ldrb	r0, [r3, #0]
 800c0bc:	2830      	cmp	r0, #48	; 0x30
 800c0be:	d009      	beq.n	800c0d4 <__gethex+0x74>
 800c0c0:	f7ff ffb9 	bl	800c036 <__hexdig_fun>
 800c0c4:	4242      	negs	r2, r0
 800c0c6:	4142      	adcs	r2, r0
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	0035      	movs	r5, r6
 800c0cc:	9202      	str	r2, [sp, #8]
 800c0ce:	9305      	str	r3, [sp, #20]
 800c0d0:	9c00      	ldr	r4, [sp, #0]
 800c0d2:	e004      	b.n	800c0de <__gethex+0x7e>
 800c0d4:	9b00      	ldr	r3, [sp, #0]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	e7ed      	b.n	800c0b8 <__gethex+0x58>
 800c0dc:	3401      	adds	r4, #1
 800c0de:	7820      	ldrb	r0, [r4, #0]
 800c0e0:	f7ff ffa9 	bl	800c036 <__hexdig_fun>
 800c0e4:	1e07      	subs	r7, r0, #0
 800c0e6:	d1f9      	bne.n	800c0dc <__gethex+0x7c>
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	0020      	movs	r0, r4
 800c0ec:	4990      	ldr	r1, [pc, #576]	; (800c330 <__gethex+0x2d0>)
 800c0ee:	f7ff fd43 	bl	800bb78 <strncmp>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d10d      	bne.n	800c112 <__gethex+0xb2>
 800c0f6:	2d00      	cmp	r5, #0
 800c0f8:	d106      	bne.n	800c108 <__gethex+0xa8>
 800c0fa:	3401      	adds	r4, #1
 800c0fc:	0025      	movs	r5, r4
 800c0fe:	7820      	ldrb	r0, [r4, #0]
 800c100:	f7ff ff99 	bl	800c036 <__hexdig_fun>
 800c104:	2800      	cmp	r0, #0
 800c106:	d102      	bne.n	800c10e <__gethex+0xae>
 800c108:	1b2d      	subs	r5, r5, r4
 800c10a:	00af      	lsls	r7, r5, #2
 800c10c:	e003      	b.n	800c116 <__gethex+0xb6>
 800c10e:	3401      	adds	r4, #1
 800c110:	e7f5      	b.n	800c0fe <__gethex+0x9e>
 800c112:	2d00      	cmp	r5, #0
 800c114:	d1f8      	bne.n	800c108 <__gethex+0xa8>
 800c116:	2220      	movs	r2, #32
 800c118:	7823      	ldrb	r3, [r4, #0]
 800c11a:	0026      	movs	r6, r4
 800c11c:	4393      	bics	r3, r2
 800c11e:	2b50      	cmp	r3, #80	; 0x50
 800c120:	d11d      	bne.n	800c15e <__gethex+0xfe>
 800c122:	7863      	ldrb	r3, [r4, #1]
 800c124:	2b2b      	cmp	r3, #43	; 0x2b
 800c126:	d02c      	beq.n	800c182 <__gethex+0x122>
 800c128:	2b2d      	cmp	r3, #45	; 0x2d
 800c12a:	d02e      	beq.n	800c18a <__gethex+0x12a>
 800c12c:	2300      	movs	r3, #0
 800c12e:	1c66      	adds	r6, r4, #1
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	7830      	ldrb	r0, [r6, #0]
 800c134:	f7ff ff7f 	bl	800c036 <__hexdig_fun>
 800c138:	1e43      	subs	r3, r0, #1
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b18      	cmp	r3, #24
 800c13e:	d82b      	bhi.n	800c198 <__gethex+0x138>
 800c140:	3810      	subs	r0, #16
 800c142:	0005      	movs	r5, r0
 800c144:	7870      	ldrb	r0, [r6, #1]
 800c146:	f7ff ff76 	bl	800c036 <__hexdig_fun>
 800c14a:	1e43      	subs	r3, r0, #1
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	3601      	adds	r6, #1
 800c150:	2b18      	cmp	r3, #24
 800c152:	d91c      	bls.n	800c18e <__gethex+0x12e>
 800c154:	9b04      	ldr	r3, [sp, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d000      	beq.n	800c15c <__gethex+0xfc>
 800c15a:	426d      	negs	r5, r5
 800c15c:	197f      	adds	r7, r7, r5
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	601e      	str	r6, [r3, #0]
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d019      	beq.n	800c19c <__gethex+0x13c>
 800c168:	2600      	movs	r6, #0
 800c16a:	9b05      	ldr	r3, [sp, #20]
 800c16c:	42b3      	cmp	r3, r6
 800c16e:	d100      	bne.n	800c172 <__gethex+0x112>
 800c170:	3606      	adds	r6, #6
 800c172:	0030      	movs	r0, r6
 800c174:	b009      	add	sp, #36	; 0x24
 800c176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c178:	2301      	movs	r3, #1
 800c17a:	2700      	movs	r7, #0
 800c17c:	9c00      	ldr	r4, [sp, #0]
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	e7c9      	b.n	800c116 <__gethex+0xb6>
 800c182:	2300      	movs	r3, #0
 800c184:	9304      	str	r3, [sp, #16]
 800c186:	1ca6      	adds	r6, r4, #2
 800c188:	e7d3      	b.n	800c132 <__gethex+0xd2>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e7fa      	b.n	800c184 <__gethex+0x124>
 800c18e:	230a      	movs	r3, #10
 800c190:	435d      	muls	r5, r3
 800c192:	182d      	adds	r5, r5, r0
 800c194:	3d10      	subs	r5, #16
 800c196:	e7d5      	b.n	800c144 <__gethex+0xe4>
 800c198:	0026      	movs	r6, r4
 800c19a:	e7e0      	b.n	800c15e <__gethex+0xfe>
 800c19c:	9b00      	ldr	r3, [sp, #0]
 800c19e:	9902      	ldr	r1, [sp, #8]
 800c1a0:	1ae3      	subs	r3, r4, r3
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b07      	cmp	r3, #7
 800c1a6:	dc0a      	bgt.n	800c1be <__gethex+0x15e>
 800c1a8:	9803      	ldr	r0, [sp, #12]
 800c1aa:	f000 fa5d 	bl	800c668 <_Balloc>
 800c1ae:	1e05      	subs	r5, r0, #0
 800c1b0:	d108      	bne.n	800c1c4 <__gethex+0x164>
 800c1b2:	002a      	movs	r2, r5
 800c1b4:	21e4      	movs	r1, #228	; 0xe4
 800c1b6:	4b5f      	ldr	r3, [pc, #380]	; (800c334 <__gethex+0x2d4>)
 800c1b8:	485f      	ldr	r0, [pc, #380]	; (800c338 <__gethex+0x2d8>)
 800c1ba:	f003 fd19 	bl	800fbf0 <__assert_func>
 800c1be:	3101      	adds	r1, #1
 800c1c0:	105b      	asrs	r3, r3, #1
 800c1c2:	e7ef      	b.n	800c1a4 <__gethex+0x144>
 800c1c4:	0003      	movs	r3, r0
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	9302      	str	r3, [sp, #8]
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	001e      	movs	r6, r3
 800c1d0:	9304      	str	r3, [sp, #16]
 800c1d2:	9b00      	ldr	r3, [sp, #0]
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	d33f      	bcc.n	800c258 <__gethex+0x1f8>
 800c1d8:	9c05      	ldr	r4, [sp, #20]
 800c1da:	9b02      	ldr	r3, [sp, #8]
 800c1dc:	c440      	stmia	r4!, {r6}
 800c1de:	1ae4      	subs	r4, r4, r3
 800c1e0:	10a4      	asrs	r4, r4, #2
 800c1e2:	0030      	movs	r0, r6
 800c1e4:	612c      	str	r4, [r5, #16]
 800c1e6:	f000 fb01 	bl	800c7ec <__hi0bits>
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	0164      	lsls	r4, r4, #5
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	1a26      	subs	r6, r4, r0
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	429e      	cmp	r6, r3
 800c1f6:	dd51      	ble.n	800c29c <__gethex+0x23c>
 800c1f8:	1af6      	subs	r6, r6, r3
 800c1fa:	0031      	movs	r1, r6
 800c1fc:	0028      	movs	r0, r5
 800c1fe:	f000 fe7b 	bl	800cef8 <__any_on>
 800c202:	1e04      	subs	r4, r0, #0
 800c204:	d016      	beq.n	800c234 <__gethex+0x1d4>
 800c206:	2401      	movs	r4, #1
 800c208:	231f      	movs	r3, #31
 800c20a:	0020      	movs	r0, r4
 800c20c:	1e72      	subs	r2, r6, #1
 800c20e:	4013      	ands	r3, r2
 800c210:	4098      	lsls	r0, r3
 800c212:	0003      	movs	r3, r0
 800c214:	1151      	asrs	r1, r2, #5
 800c216:	9802      	ldr	r0, [sp, #8]
 800c218:	0089      	lsls	r1, r1, #2
 800c21a:	5809      	ldr	r1, [r1, r0]
 800c21c:	4219      	tst	r1, r3
 800c21e:	d009      	beq.n	800c234 <__gethex+0x1d4>
 800c220:	42a2      	cmp	r2, r4
 800c222:	dd06      	ble.n	800c232 <__gethex+0x1d2>
 800c224:	0028      	movs	r0, r5
 800c226:	1eb1      	subs	r1, r6, #2
 800c228:	f000 fe66 	bl	800cef8 <__any_on>
 800c22c:	3402      	adds	r4, #2
 800c22e:	2800      	cmp	r0, #0
 800c230:	d100      	bne.n	800c234 <__gethex+0x1d4>
 800c232:	2402      	movs	r4, #2
 800c234:	0031      	movs	r1, r6
 800c236:	0028      	movs	r0, r5
 800c238:	f7ff fea8 	bl	800bf8c <rshift>
 800c23c:	19bf      	adds	r7, r7, r6
 800c23e:	9b01      	ldr	r3, [sp, #4]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	42bb      	cmp	r3, r7
 800c244:	da3a      	bge.n	800c2bc <__gethex+0x25c>
 800c246:	0029      	movs	r1, r5
 800c248:	9803      	ldr	r0, [sp, #12]
 800c24a:	f000 fa35 	bl	800c6b8 <_Bfree>
 800c24e:	2300      	movs	r3, #0
 800c250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c252:	26a3      	movs	r6, #163	; 0xa3
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	e78c      	b.n	800c172 <__gethex+0x112>
 800c258:	3c01      	subs	r4, #1
 800c25a:	7823      	ldrb	r3, [r4, #0]
 800c25c:	2b2e      	cmp	r3, #46	; 0x2e
 800c25e:	d012      	beq.n	800c286 <__gethex+0x226>
 800c260:	9b04      	ldr	r3, [sp, #16]
 800c262:	2b20      	cmp	r3, #32
 800c264:	d104      	bne.n	800c270 <__gethex+0x210>
 800c266:	9b05      	ldr	r3, [sp, #20]
 800c268:	c340      	stmia	r3!, {r6}
 800c26a:	2600      	movs	r6, #0
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	9604      	str	r6, [sp, #16]
 800c270:	7820      	ldrb	r0, [r4, #0]
 800c272:	f7ff fee0 	bl	800c036 <__hexdig_fun>
 800c276:	230f      	movs	r3, #15
 800c278:	4018      	ands	r0, r3
 800c27a:	9b04      	ldr	r3, [sp, #16]
 800c27c:	4098      	lsls	r0, r3
 800c27e:	3304      	adds	r3, #4
 800c280:	4306      	orrs	r6, r0
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	e7a5      	b.n	800c1d2 <__gethex+0x172>
 800c286:	9b00      	ldr	r3, [sp, #0]
 800c288:	42a3      	cmp	r3, r4
 800c28a:	d8e9      	bhi.n	800c260 <__gethex+0x200>
 800c28c:	2201      	movs	r2, #1
 800c28e:	0020      	movs	r0, r4
 800c290:	4927      	ldr	r1, [pc, #156]	; (800c330 <__gethex+0x2d0>)
 800c292:	f7ff fc71 	bl	800bb78 <strncmp>
 800c296:	2800      	cmp	r0, #0
 800c298:	d1e2      	bne.n	800c260 <__gethex+0x200>
 800c29a:	e79a      	b.n	800c1d2 <__gethex+0x172>
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	2400      	movs	r4, #0
 800c2a0:	429e      	cmp	r6, r3
 800c2a2:	dacc      	bge.n	800c23e <__gethex+0x1de>
 800c2a4:	1b9e      	subs	r6, r3, r6
 800c2a6:	0029      	movs	r1, r5
 800c2a8:	0032      	movs	r2, r6
 800c2aa:	9803      	ldr	r0, [sp, #12]
 800c2ac:	f000 fbf0 	bl	800ca90 <__lshift>
 800c2b0:	0003      	movs	r3, r0
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	0005      	movs	r5, r0
 800c2b6:	1bbf      	subs	r7, r7, r6
 800c2b8:	9302      	str	r3, [sp, #8]
 800c2ba:	e7c0      	b.n	800c23e <__gethex+0x1de>
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	685e      	ldr	r6, [r3, #4]
 800c2c0:	42be      	cmp	r6, r7
 800c2c2:	dd70      	ble.n	800c3a6 <__gethex+0x346>
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	1bf6      	subs	r6, r6, r7
 800c2c8:	42b3      	cmp	r3, r6
 800c2ca:	dc37      	bgt.n	800c33c <__gethex+0x2dc>
 800c2cc:	9b01      	ldr	r3, [sp, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d024      	beq.n	800c31e <__gethex+0x2be>
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d026      	beq.n	800c326 <__gethex+0x2c6>
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d117      	bne.n	800c30c <__gethex+0x2ac>
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	42b3      	cmp	r3, r6
 800c2e0:	d114      	bne.n	800c30c <__gethex+0x2ac>
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d10b      	bne.n	800c2fe <__gethex+0x29e>
 800c2e6:	9b01      	ldr	r3, [sp, #4]
 800c2e8:	9a07      	ldr	r2, [sp, #28]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	2662      	movs	r6, #98	; 0x62
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	9a02      	ldr	r2, [sp, #8]
 800c2f4:	612b      	str	r3, [r5, #16]
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2fa:	601d      	str	r5, [r3, #0]
 800c2fc:	e739      	b.n	800c172 <__gethex+0x112>
 800c2fe:	9900      	ldr	r1, [sp, #0]
 800c300:	0028      	movs	r0, r5
 800c302:	3901      	subs	r1, #1
 800c304:	f000 fdf8 	bl	800cef8 <__any_on>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1ec      	bne.n	800c2e6 <__gethex+0x286>
 800c30c:	0029      	movs	r1, r5
 800c30e:	9803      	ldr	r0, [sp, #12]
 800c310:	f000 f9d2 	bl	800c6b8 <_Bfree>
 800c314:	2300      	movs	r3, #0
 800c316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c318:	2650      	movs	r6, #80	; 0x50
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	e729      	b.n	800c172 <__gethex+0x112>
 800c31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1f3      	bne.n	800c30c <__gethex+0x2ac>
 800c324:	e7df      	b.n	800c2e6 <__gethex+0x286>
 800c326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1dc      	bne.n	800c2e6 <__gethex+0x286>
 800c32c:	e7ee      	b.n	800c30c <__gethex+0x2ac>
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	080142cc 	.word	0x080142cc
 800c334:	08014429 	.word	0x08014429
 800c338:	0801443a 	.word	0x0801443a
 800c33c:	1e77      	subs	r7, r6, #1
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d12f      	bne.n	800c3a2 <__gethex+0x342>
 800c342:	2f00      	cmp	r7, #0
 800c344:	d004      	beq.n	800c350 <__gethex+0x2f0>
 800c346:	0039      	movs	r1, r7
 800c348:	0028      	movs	r0, r5
 800c34a:	f000 fdd5 	bl	800cef8 <__any_on>
 800c34e:	0004      	movs	r4, r0
 800c350:	231f      	movs	r3, #31
 800c352:	117a      	asrs	r2, r7, #5
 800c354:	401f      	ands	r7, r3
 800c356:	3b1e      	subs	r3, #30
 800c358:	40bb      	lsls	r3, r7
 800c35a:	9902      	ldr	r1, [sp, #8]
 800c35c:	0092      	lsls	r2, r2, #2
 800c35e:	5852      	ldr	r2, [r2, r1]
 800c360:	421a      	tst	r2, r3
 800c362:	d001      	beq.n	800c368 <__gethex+0x308>
 800c364:	2302      	movs	r3, #2
 800c366:	431c      	orrs	r4, r3
 800c368:	9b00      	ldr	r3, [sp, #0]
 800c36a:	0031      	movs	r1, r6
 800c36c:	1b9b      	subs	r3, r3, r6
 800c36e:	2602      	movs	r6, #2
 800c370:	0028      	movs	r0, r5
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	f7ff fe0a 	bl	800bf8c <rshift>
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	685f      	ldr	r7, [r3, #4]
 800c37c:	2c00      	cmp	r4, #0
 800c37e:	d041      	beq.n	800c404 <__gethex+0x3a4>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	2b02      	cmp	r3, #2
 800c386:	d010      	beq.n	800c3aa <__gethex+0x34a>
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d012      	beq.n	800c3b2 <__gethex+0x352>
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d106      	bne.n	800c39e <__gethex+0x33e>
 800c390:	07a2      	lsls	r2, r4, #30
 800c392:	d504      	bpl.n	800c39e <__gethex+0x33e>
 800c394:	9a02      	ldr	r2, [sp, #8]
 800c396:	6812      	ldr	r2, [r2, #0]
 800c398:	4314      	orrs	r4, r2
 800c39a:	421c      	tst	r4, r3
 800c39c:	d10c      	bne.n	800c3b8 <__gethex+0x358>
 800c39e:	2310      	movs	r3, #16
 800c3a0:	e02f      	b.n	800c402 <__gethex+0x3a2>
 800c3a2:	2401      	movs	r4, #1
 800c3a4:	e7d4      	b.n	800c350 <__gethex+0x2f0>
 800c3a6:	2601      	movs	r6, #1
 800c3a8:	e7e8      	b.n	800c37c <__gethex+0x31c>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3ae:	1a9b      	subs	r3, r3, r2
 800c3b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0f2      	beq.n	800c39e <__gethex+0x33e>
 800c3b8:	692b      	ldr	r3, [r5, #16]
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	9302      	str	r3, [sp, #8]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	002b      	movs	r3, r5
 800c3c4:	9a04      	ldr	r2, [sp, #16]
 800c3c6:	3314      	adds	r3, #20
 800c3c8:	1899      	adds	r1, r3, r2
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	1c54      	adds	r4, r2, #1
 800c3ce:	d01e      	beq.n	800c40e <__gethex+0x3ae>
 800c3d0:	3201      	adds	r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	002b      	movs	r3, r5
 800c3d6:	3314      	adds	r3, #20
 800c3d8:	2e02      	cmp	r6, #2
 800c3da:	d141      	bne.n	800c460 <__gethex+0x400>
 800c3dc:	9a01      	ldr	r2, [sp, #4]
 800c3de:	9900      	ldr	r1, [sp, #0]
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	3a01      	subs	r2, #1
 800c3e4:	428a      	cmp	r2, r1
 800c3e6:	d10b      	bne.n	800c400 <__gethex+0x3a0>
 800c3e8:	221f      	movs	r2, #31
 800c3ea:	9800      	ldr	r0, [sp, #0]
 800c3ec:	1149      	asrs	r1, r1, #5
 800c3ee:	4002      	ands	r2, r0
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	0004      	movs	r4, r0
 800c3f4:	4094      	lsls	r4, r2
 800c3f6:	0089      	lsls	r1, r1, #2
 800c3f8:	58cb      	ldr	r3, [r1, r3]
 800c3fa:	4223      	tst	r3, r4
 800c3fc:	d000      	beq.n	800c400 <__gethex+0x3a0>
 800c3fe:	2601      	movs	r6, #1
 800c400:	2320      	movs	r3, #32
 800c402:	431e      	orrs	r6, r3
 800c404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c406:	601d      	str	r5, [r3, #0]
 800c408:	9b07      	ldr	r3, [sp, #28]
 800c40a:	601f      	str	r7, [r3, #0]
 800c40c:	e6b1      	b.n	800c172 <__gethex+0x112>
 800c40e:	c301      	stmia	r3!, {r0}
 800c410:	4299      	cmp	r1, r3
 800c412:	d8da      	bhi.n	800c3ca <__gethex+0x36a>
 800c414:	68ab      	ldr	r3, [r5, #8]
 800c416:	9a02      	ldr	r2, [sp, #8]
 800c418:	429a      	cmp	r2, r3
 800c41a:	db18      	blt.n	800c44e <__gethex+0x3ee>
 800c41c:	6869      	ldr	r1, [r5, #4]
 800c41e:	9803      	ldr	r0, [sp, #12]
 800c420:	3101      	adds	r1, #1
 800c422:	f000 f921 	bl	800c668 <_Balloc>
 800c426:	1e04      	subs	r4, r0, #0
 800c428:	d104      	bne.n	800c434 <__gethex+0x3d4>
 800c42a:	0022      	movs	r2, r4
 800c42c:	2184      	movs	r1, #132	; 0x84
 800c42e:	4b1c      	ldr	r3, [pc, #112]	; (800c4a0 <__gethex+0x440>)
 800c430:	481c      	ldr	r0, [pc, #112]	; (800c4a4 <__gethex+0x444>)
 800c432:	e6c2      	b.n	800c1ba <__gethex+0x15a>
 800c434:	0029      	movs	r1, r5
 800c436:	692a      	ldr	r2, [r5, #16]
 800c438:	310c      	adds	r1, #12
 800c43a:	3202      	adds	r2, #2
 800c43c:	0092      	lsls	r2, r2, #2
 800c43e:	300c      	adds	r0, #12
 800c440:	f7ff fc77 	bl	800bd32 <memcpy>
 800c444:	0029      	movs	r1, r5
 800c446:	9803      	ldr	r0, [sp, #12]
 800c448:	f000 f936 	bl	800c6b8 <_Bfree>
 800c44c:	0025      	movs	r5, r4
 800c44e:	692b      	ldr	r3, [r5, #16]
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	612a      	str	r2, [r5, #16]
 800c454:	2201      	movs	r2, #1
 800c456:	3304      	adds	r3, #4
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	18eb      	adds	r3, r5, r3
 800c45c:	605a      	str	r2, [r3, #4]
 800c45e:	e7b9      	b.n	800c3d4 <__gethex+0x374>
 800c460:	692a      	ldr	r2, [r5, #16]
 800c462:	9902      	ldr	r1, [sp, #8]
 800c464:	428a      	cmp	r2, r1
 800c466:	dd09      	ble.n	800c47c <__gethex+0x41c>
 800c468:	2101      	movs	r1, #1
 800c46a:	0028      	movs	r0, r5
 800c46c:	f7ff fd8e 	bl	800bf8c <rshift>
 800c470:	9b01      	ldr	r3, [sp, #4]
 800c472:	3701      	adds	r7, #1
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	42bb      	cmp	r3, r7
 800c478:	dac1      	bge.n	800c3fe <__gethex+0x39e>
 800c47a:	e6e4      	b.n	800c246 <__gethex+0x1e6>
 800c47c:	221f      	movs	r2, #31
 800c47e:	9c00      	ldr	r4, [sp, #0]
 800c480:	9900      	ldr	r1, [sp, #0]
 800c482:	2601      	movs	r6, #1
 800c484:	4014      	ands	r4, r2
 800c486:	4211      	tst	r1, r2
 800c488:	d0ba      	beq.n	800c400 <__gethex+0x3a0>
 800c48a:	9a04      	ldr	r2, [sp, #16]
 800c48c:	189b      	adds	r3, r3, r2
 800c48e:	3b04      	subs	r3, #4
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f000 f9ab 	bl	800c7ec <__hi0bits>
 800c496:	2320      	movs	r3, #32
 800c498:	1b1b      	subs	r3, r3, r4
 800c49a:	4298      	cmp	r0, r3
 800c49c:	dbe4      	blt.n	800c468 <__gethex+0x408>
 800c49e:	e7af      	b.n	800c400 <__gethex+0x3a0>
 800c4a0:	08014429 	.word	0x08014429
 800c4a4:	0801443a 	.word	0x0801443a

0800c4a8 <L_shift>:
 800c4a8:	2308      	movs	r3, #8
 800c4aa:	b570      	push	{r4, r5, r6, lr}
 800c4ac:	2520      	movs	r5, #32
 800c4ae:	1a9a      	subs	r2, r3, r2
 800c4b0:	0092      	lsls	r2, r2, #2
 800c4b2:	1aad      	subs	r5, r5, r2
 800c4b4:	6843      	ldr	r3, [r0, #4]
 800c4b6:	6804      	ldr	r4, [r0, #0]
 800c4b8:	001e      	movs	r6, r3
 800c4ba:	40ae      	lsls	r6, r5
 800c4bc:	40d3      	lsrs	r3, r2
 800c4be:	4334      	orrs	r4, r6
 800c4c0:	6004      	str	r4, [r0, #0]
 800c4c2:	6043      	str	r3, [r0, #4]
 800c4c4:	3004      	adds	r0, #4
 800c4c6:	4288      	cmp	r0, r1
 800c4c8:	d3f4      	bcc.n	800c4b4 <L_shift+0xc>
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}

0800c4cc <__match>:
 800c4cc:	b530      	push	{r4, r5, lr}
 800c4ce:	6803      	ldr	r3, [r0, #0]
 800c4d0:	780c      	ldrb	r4, [r1, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	d102      	bne.n	800c4de <__match+0x12>
 800c4d8:	6003      	str	r3, [r0, #0]
 800c4da:	2001      	movs	r0, #1
 800c4dc:	bd30      	pop	{r4, r5, pc}
 800c4de:	781a      	ldrb	r2, [r3, #0]
 800c4e0:	0015      	movs	r5, r2
 800c4e2:	3d41      	subs	r5, #65	; 0x41
 800c4e4:	2d19      	cmp	r5, #25
 800c4e6:	d800      	bhi.n	800c4ea <__match+0x1e>
 800c4e8:	3220      	adds	r2, #32
 800c4ea:	3101      	adds	r1, #1
 800c4ec:	42a2      	cmp	r2, r4
 800c4ee:	d0ef      	beq.n	800c4d0 <__match+0x4>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e7f3      	b.n	800c4dc <__match+0x10>

0800c4f4 <__hexnan>:
 800c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f6:	680b      	ldr	r3, [r1, #0]
 800c4f8:	b08b      	sub	sp, #44	; 0x2c
 800c4fa:	9201      	str	r2, [sp, #4]
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	115a      	asrs	r2, r3, #5
 800c500:	0092      	lsls	r2, r2, #2
 800c502:	188a      	adds	r2, r1, r2
 800c504:	9202      	str	r2, [sp, #8]
 800c506:	0019      	movs	r1, r3
 800c508:	221f      	movs	r2, #31
 800c50a:	4011      	ands	r1, r2
 800c50c:	9008      	str	r0, [sp, #32]
 800c50e:	9106      	str	r1, [sp, #24]
 800c510:	4213      	tst	r3, r2
 800c512:	d002      	beq.n	800c51a <__hexnan+0x26>
 800c514:	9b02      	ldr	r3, [sp, #8]
 800c516:	3304      	adds	r3, #4
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	2500      	movs	r5, #0
 800c51e:	1f1f      	subs	r7, r3, #4
 800c520:	003e      	movs	r6, r7
 800c522:	003c      	movs	r4, r7
 800c524:	9b08      	ldr	r3, [sp, #32]
 800c526:	603d      	str	r5, [r7, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	9507      	str	r5, [sp, #28]
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	9503      	str	r5, [sp, #12]
 800c530:	9b05      	ldr	r3, [sp, #20]
 800c532:	3301      	adds	r3, #1
 800c534:	9309      	str	r3, [sp, #36]	; 0x24
 800c536:	9b05      	ldr	r3, [sp, #20]
 800c538:	785b      	ldrb	r3, [r3, #1]
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d028      	beq.n	800c592 <__hexnan+0x9e>
 800c540:	9804      	ldr	r0, [sp, #16]
 800c542:	f7ff fd78 	bl	800c036 <__hexdig_fun>
 800c546:	2800      	cmp	r0, #0
 800c548:	d154      	bne.n	800c5f4 <__hexnan+0x100>
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d819      	bhi.n	800c584 <__hexnan+0x90>
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	4293      	cmp	r3, r2
 800c556:	dd12      	ble.n	800c57e <__hexnan+0x8a>
 800c558:	42b4      	cmp	r4, r6
 800c55a:	d206      	bcs.n	800c56a <__hexnan+0x76>
 800c55c:	2d07      	cmp	r5, #7
 800c55e:	dc04      	bgt.n	800c56a <__hexnan+0x76>
 800c560:	002a      	movs	r2, r5
 800c562:	0031      	movs	r1, r6
 800c564:	0020      	movs	r0, r4
 800c566:	f7ff ff9f 	bl	800c4a8 <L_shift>
 800c56a:	9b01      	ldr	r3, [sp, #4]
 800c56c:	2508      	movs	r5, #8
 800c56e:	429c      	cmp	r4, r3
 800c570:	d905      	bls.n	800c57e <__hexnan+0x8a>
 800c572:	1f26      	subs	r6, r4, #4
 800c574:	2500      	movs	r5, #0
 800c576:	0034      	movs	r4, r6
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	6035      	str	r5, [r6, #0]
 800c57c:	9307      	str	r3, [sp, #28]
 800c57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c580:	9305      	str	r3, [sp, #20]
 800c582:	e7d5      	b.n	800c530 <__hexnan+0x3c>
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	2b29      	cmp	r3, #41	; 0x29
 800c588:	d159      	bne.n	800c63e <__hexnan+0x14a>
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	9a08      	ldr	r2, [sp, #32]
 800c58e:	3302      	adds	r3, #2
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	9b03      	ldr	r3, [sp, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d052      	beq.n	800c63e <__hexnan+0x14a>
 800c598:	42b4      	cmp	r4, r6
 800c59a:	d206      	bcs.n	800c5aa <__hexnan+0xb6>
 800c59c:	2d07      	cmp	r5, #7
 800c59e:	dc04      	bgt.n	800c5aa <__hexnan+0xb6>
 800c5a0:	002a      	movs	r2, r5
 800c5a2:	0031      	movs	r1, r6
 800c5a4:	0020      	movs	r0, r4
 800c5a6:	f7ff ff7f 	bl	800c4a8 <L_shift>
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	d935      	bls.n	800c61c <__hexnan+0x128>
 800c5b0:	001a      	movs	r2, r3
 800c5b2:	0023      	movs	r3, r4
 800c5b4:	cb02      	ldmia	r3!, {r1}
 800c5b6:	c202      	stmia	r2!, {r1}
 800c5b8:	429f      	cmp	r7, r3
 800c5ba:	d2fb      	bcs.n	800c5b4 <__hexnan+0xc0>
 800c5bc:	9b02      	ldr	r3, [sp, #8]
 800c5be:	1c62      	adds	r2, r4, #1
 800c5c0:	1ed9      	subs	r1, r3, #3
 800c5c2:	2304      	movs	r3, #4
 800c5c4:	4291      	cmp	r1, r2
 800c5c6:	d305      	bcc.n	800c5d4 <__hexnan+0xe0>
 800c5c8:	9b02      	ldr	r3, [sp, #8]
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	1b1b      	subs	r3, r3, r4
 800c5ce:	089b      	lsrs	r3, r3, #2
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	9a01      	ldr	r2, [sp, #4]
 800c5d6:	18d3      	adds	r3, r2, r3
 800c5d8:	2200      	movs	r2, #0
 800c5da:	c304      	stmia	r3!, {r2}
 800c5dc:	429f      	cmp	r7, r3
 800c5de:	d2fc      	bcs.n	800c5da <__hexnan+0xe6>
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d104      	bne.n	800c5f0 <__hexnan+0xfc>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	429f      	cmp	r7, r3
 800c5ea:	d126      	bne.n	800c63a <__hexnan+0x146>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	2005      	movs	r0, #5
 800c5f2:	e025      	b.n	800c640 <__hexnan+0x14c>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	3501      	adds	r5, #1
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	9303      	str	r3, [sp, #12]
 800c5fc:	2d08      	cmp	r5, #8
 800c5fe:	dd06      	ble.n	800c60e <__hexnan+0x11a>
 800c600:	9b01      	ldr	r3, [sp, #4]
 800c602:	429c      	cmp	r4, r3
 800c604:	d9bb      	bls.n	800c57e <__hexnan+0x8a>
 800c606:	2300      	movs	r3, #0
 800c608:	2501      	movs	r5, #1
 800c60a:	3c04      	subs	r4, #4
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	220f      	movs	r2, #15
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	4010      	ands	r0, r2
 800c614:	011b      	lsls	r3, r3, #4
 800c616:	4303      	orrs	r3, r0
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	e7b0      	b.n	800c57e <__hexnan+0x8a>
 800c61c:	9b06      	ldr	r3, [sp, #24]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0de      	beq.n	800c5e0 <__hexnan+0xec>
 800c622:	2320      	movs	r3, #32
 800c624:	9a06      	ldr	r2, [sp, #24]
 800c626:	9902      	ldr	r1, [sp, #8]
 800c628:	1a9b      	subs	r3, r3, r2
 800c62a:	2201      	movs	r2, #1
 800c62c:	4252      	negs	r2, r2
 800c62e:	40da      	lsrs	r2, r3
 800c630:	3904      	subs	r1, #4
 800c632:	680b      	ldr	r3, [r1, #0]
 800c634:	4013      	ands	r3, r2
 800c636:	600b      	str	r3, [r1, #0]
 800c638:	e7d2      	b.n	800c5e0 <__hexnan+0xec>
 800c63a:	3f04      	subs	r7, #4
 800c63c:	e7d0      	b.n	800c5e0 <__hexnan+0xec>
 800c63e:	2004      	movs	r0, #4
 800c640:	b00b      	add	sp, #44	; 0x2c
 800c642:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c644 <__ascii_mbtowc>:
 800c644:	b082      	sub	sp, #8
 800c646:	2900      	cmp	r1, #0
 800c648:	d100      	bne.n	800c64c <__ascii_mbtowc+0x8>
 800c64a:	a901      	add	r1, sp, #4
 800c64c:	1e10      	subs	r0, r2, #0
 800c64e:	d006      	beq.n	800c65e <__ascii_mbtowc+0x1a>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d006      	beq.n	800c662 <__ascii_mbtowc+0x1e>
 800c654:	7813      	ldrb	r3, [r2, #0]
 800c656:	600b      	str	r3, [r1, #0]
 800c658:	7810      	ldrb	r0, [r2, #0]
 800c65a:	1e43      	subs	r3, r0, #1
 800c65c:	4198      	sbcs	r0, r3
 800c65e:	b002      	add	sp, #8
 800c660:	4770      	bx	lr
 800c662:	2002      	movs	r0, #2
 800c664:	4240      	negs	r0, r0
 800c666:	e7fa      	b.n	800c65e <__ascii_mbtowc+0x1a>

0800c668 <_Balloc>:
 800c668:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c66a:	b570      	push	{r4, r5, r6, lr}
 800c66c:	0006      	movs	r6, r0
 800c66e:	000c      	movs	r4, r1
 800c670:	2b00      	cmp	r3, #0
 800c672:	d012      	beq.n	800c69a <_Balloc+0x32>
 800c674:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c676:	00a2      	lsls	r2, r4, #2
 800c678:	189b      	adds	r3, r3, r2
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d115      	bne.n	800c6ac <_Balloc+0x44>
 800c680:	2101      	movs	r1, #1
 800c682:	000d      	movs	r5, r1
 800c684:	40a5      	lsls	r5, r4
 800c686:	1d6a      	adds	r2, r5, #5
 800c688:	0030      	movs	r0, r6
 800c68a:	0092      	lsls	r2, r2, #2
 800c68c:	f003 face 	bl	800fc2c <_calloc_r>
 800c690:	2800      	cmp	r0, #0
 800c692:	d009      	beq.n	800c6a8 <_Balloc+0x40>
 800c694:	6044      	str	r4, [r0, #4]
 800c696:	6085      	str	r5, [r0, #8]
 800c698:	e00a      	b.n	800c6b0 <_Balloc+0x48>
 800c69a:	2221      	movs	r2, #33	; 0x21
 800c69c:	2104      	movs	r1, #4
 800c69e:	f003 fac5 	bl	800fc2c <_calloc_r>
 800c6a2:	6470      	str	r0, [r6, #68]	; 0x44
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d1e5      	bne.n	800c674 <_Balloc+0xc>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	6802      	ldr	r2, [r0, #0]
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	6103      	str	r3, [r0, #16]
 800c6b4:	60c3      	str	r3, [r0, #12]
 800c6b6:	e7f8      	b.n	800c6aa <_Balloc+0x42>

0800c6b8 <_Bfree>:
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	d006      	beq.n	800c6ca <_Bfree+0x12>
 800c6bc:	684a      	ldr	r2, [r1, #4]
 800c6be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	189b      	adds	r3, r3, r2
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	600a      	str	r2, [r1, #0]
 800c6c8:	6019      	str	r1, [r3, #0]
 800c6ca:	4770      	bx	lr

0800c6cc <__multadd>:
 800c6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ce:	000e      	movs	r6, r1
 800c6d0:	9001      	str	r0, [sp, #4]
 800c6d2:	000c      	movs	r4, r1
 800c6d4:	001d      	movs	r5, r3
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	690f      	ldr	r7, [r1, #16]
 800c6da:	3614      	adds	r6, #20
 800c6dc:	6833      	ldr	r3, [r6, #0]
 800c6de:	3001      	adds	r0, #1
 800c6e0:	b299      	uxth	r1, r3
 800c6e2:	4351      	muls	r1, r2
 800c6e4:	0c1b      	lsrs	r3, r3, #16
 800c6e6:	4353      	muls	r3, r2
 800c6e8:	1949      	adds	r1, r1, r5
 800c6ea:	0c0d      	lsrs	r5, r1, #16
 800c6ec:	195b      	adds	r3, r3, r5
 800c6ee:	0c1d      	lsrs	r5, r3, #16
 800c6f0:	b289      	uxth	r1, r1
 800c6f2:	041b      	lsls	r3, r3, #16
 800c6f4:	185b      	adds	r3, r3, r1
 800c6f6:	c608      	stmia	r6!, {r3}
 800c6f8:	4287      	cmp	r7, r0
 800c6fa:	dcef      	bgt.n	800c6dc <__multadd+0x10>
 800c6fc:	2d00      	cmp	r5, #0
 800c6fe:	d022      	beq.n	800c746 <__multadd+0x7a>
 800c700:	68a3      	ldr	r3, [r4, #8]
 800c702:	42bb      	cmp	r3, r7
 800c704:	dc19      	bgt.n	800c73a <__multadd+0x6e>
 800c706:	6861      	ldr	r1, [r4, #4]
 800c708:	9801      	ldr	r0, [sp, #4]
 800c70a:	3101      	adds	r1, #1
 800c70c:	f7ff ffac 	bl	800c668 <_Balloc>
 800c710:	1e06      	subs	r6, r0, #0
 800c712:	d105      	bne.n	800c720 <__multadd+0x54>
 800c714:	0032      	movs	r2, r6
 800c716:	21ba      	movs	r1, #186	; 0xba
 800c718:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <__multadd+0x80>)
 800c71a:	480d      	ldr	r0, [pc, #52]	; (800c750 <__multadd+0x84>)
 800c71c:	f003 fa68 	bl	800fbf0 <__assert_func>
 800c720:	0021      	movs	r1, r4
 800c722:	6922      	ldr	r2, [r4, #16]
 800c724:	310c      	adds	r1, #12
 800c726:	3202      	adds	r2, #2
 800c728:	0092      	lsls	r2, r2, #2
 800c72a:	300c      	adds	r0, #12
 800c72c:	f7ff fb01 	bl	800bd32 <memcpy>
 800c730:	0021      	movs	r1, r4
 800c732:	9801      	ldr	r0, [sp, #4]
 800c734:	f7ff ffc0 	bl	800c6b8 <_Bfree>
 800c738:	0034      	movs	r4, r6
 800c73a:	1d3b      	adds	r3, r7, #4
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	18e3      	adds	r3, r4, r3
 800c740:	605d      	str	r5, [r3, #4]
 800c742:	1c7b      	adds	r3, r7, #1
 800c744:	6123      	str	r3, [r4, #16]
 800c746:	0020      	movs	r0, r4
 800c748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	08014429 	.word	0x08014429
 800c750:	0801449a 	.word	0x0801449a

0800c754 <__s2b>:
 800c754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c756:	0006      	movs	r6, r0
 800c758:	0018      	movs	r0, r3
 800c75a:	000c      	movs	r4, r1
 800c75c:	3008      	adds	r0, #8
 800c75e:	2109      	movs	r1, #9
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	0015      	movs	r5, r2
 800c764:	f7f3 fd74 	bl	8000250 <__divsi3>
 800c768:	2301      	movs	r3, #1
 800c76a:	2100      	movs	r1, #0
 800c76c:	4283      	cmp	r3, r0
 800c76e:	db0a      	blt.n	800c786 <__s2b+0x32>
 800c770:	0030      	movs	r0, r6
 800c772:	f7ff ff79 	bl	800c668 <_Balloc>
 800c776:	1e01      	subs	r1, r0, #0
 800c778:	d108      	bne.n	800c78c <__s2b+0x38>
 800c77a:	000a      	movs	r2, r1
 800c77c:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <__s2b+0x90>)
 800c77e:	481a      	ldr	r0, [pc, #104]	; (800c7e8 <__s2b+0x94>)
 800c780:	31d3      	adds	r1, #211	; 0xd3
 800c782:	f003 fa35 	bl	800fbf0 <__assert_func>
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	3101      	adds	r1, #1
 800c78a:	e7ef      	b.n	800c76c <__s2b+0x18>
 800c78c:	9b08      	ldr	r3, [sp, #32]
 800c78e:	6143      	str	r3, [r0, #20]
 800c790:	2301      	movs	r3, #1
 800c792:	6103      	str	r3, [r0, #16]
 800c794:	2d09      	cmp	r5, #9
 800c796:	dd18      	ble.n	800c7ca <__s2b+0x76>
 800c798:	0023      	movs	r3, r4
 800c79a:	3309      	adds	r3, #9
 800c79c:	001f      	movs	r7, r3
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	1964      	adds	r4, r4, r5
 800c7a2:	783b      	ldrb	r3, [r7, #0]
 800c7a4:	220a      	movs	r2, #10
 800c7a6:	0030      	movs	r0, r6
 800c7a8:	3b30      	subs	r3, #48	; 0x30
 800c7aa:	f7ff ff8f 	bl	800c6cc <__multadd>
 800c7ae:	3701      	adds	r7, #1
 800c7b0:	0001      	movs	r1, r0
 800c7b2:	42a7      	cmp	r7, r4
 800c7b4:	d1f5      	bne.n	800c7a2 <__s2b+0x4e>
 800c7b6:	002c      	movs	r4, r5
 800c7b8:	9b00      	ldr	r3, [sp, #0]
 800c7ba:	3c08      	subs	r4, #8
 800c7bc:	191c      	adds	r4, r3, r4
 800c7be:	002f      	movs	r7, r5
 800c7c0:	9b01      	ldr	r3, [sp, #4]
 800c7c2:	429f      	cmp	r7, r3
 800c7c4:	db04      	blt.n	800c7d0 <__s2b+0x7c>
 800c7c6:	0008      	movs	r0, r1
 800c7c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7ca:	2509      	movs	r5, #9
 800c7cc:	340a      	adds	r4, #10
 800c7ce:	e7f6      	b.n	800c7be <__s2b+0x6a>
 800c7d0:	1b63      	subs	r3, r4, r5
 800c7d2:	5ddb      	ldrb	r3, [r3, r7]
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	0030      	movs	r0, r6
 800c7d8:	3b30      	subs	r3, #48	; 0x30
 800c7da:	f7ff ff77 	bl	800c6cc <__multadd>
 800c7de:	3701      	adds	r7, #1
 800c7e0:	0001      	movs	r1, r0
 800c7e2:	e7ed      	b.n	800c7c0 <__s2b+0x6c>
 800c7e4:	08014429 	.word	0x08014429
 800c7e8:	0801449a 	.word	0x0801449a

0800c7ec <__hi0bits>:
 800c7ec:	0003      	movs	r3, r0
 800c7ee:	0c02      	lsrs	r2, r0, #16
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4282      	cmp	r2, r0
 800c7f4:	d101      	bne.n	800c7fa <__hi0bits+0xe>
 800c7f6:	041b      	lsls	r3, r3, #16
 800c7f8:	3010      	adds	r0, #16
 800c7fa:	0e1a      	lsrs	r2, r3, #24
 800c7fc:	d101      	bne.n	800c802 <__hi0bits+0x16>
 800c7fe:	3008      	adds	r0, #8
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	0f1a      	lsrs	r2, r3, #28
 800c804:	d101      	bne.n	800c80a <__hi0bits+0x1e>
 800c806:	3004      	adds	r0, #4
 800c808:	011b      	lsls	r3, r3, #4
 800c80a:	0f9a      	lsrs	r2, r3, #30
 800c80c:	d101      	bne.n	800c812 <__hi0bits+0x26>
 800c80e:	3002      	adds	r0, #2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	2b00      	cmp	r3, #0
 800c814:	db03      	blt.n	800c81e <__hi0bits+0x32>
 800c816:	3001      	adds	r0, #1
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	d400      	bmi.n	800c81e <__hi0bits+0x32>
 800c81c:	2020      	movs	r0, #32
 800c81e:	4770      	bx	lr

0800c820 <__lo0bits>:
 800c820:	6803      	ldr	r3, [r0, #0]
 800c822:	0001      	movs	r1, r0
 800c824:	2207      	movs	r2, #7
 800c826:	0018      	movs	r0, r3
 800c828:	4010      	ands	r0, r2
 800c82a:	4213      	tst	r3, r2
 800c82c:	d00d      	beq.n	800c84a <__lo0bits+0x2a>
 800c82e:	3a06      	subs	r2, #6
 800c830:	2000      	movs	r0, #0
 800c832:	4213      	tst	r3, r2
 800c834:	d105      	bne.n	800c842 <__lo0bits+0x22>
 800c836:	3002      	adds	r0, #2
 800c838:	4203      	tst	r3, r0
 800c83a:	d003      	beq.n	800c844 <__lo0bits+0x24>
 800c83c:	40d3      	lsrs	r3, r2
 800c83e:	0010      	movs	r0, r2
 800c840:	600b      	str	r3, [r1, #0]
 800c842:	4770      	bx	lr
 800c844:	089b      	lsrs	r3, r3, #2
 800c846:	600b      	str	r3, [r1, #0]
 800c848:	e7fb      	b.n	800c842 <__lo0bits+0x22>
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d101      	bne.n	800c854 <__lo0bits+0x34>
 800c850:	2010      	movs	r0, #16
 800c852:	0c1b      	lsrs	r3, r3, #16
 800c854:	b2da      	uxtb	r2, r3
 800c856:	2a00      	cmp	r2, #0
 800c858:	d101      	bne.n	800c85e <__lo0bits+0x3e>
 800c85a:	3008      	adds	r0, #8
 800c85c:	0a1b      	lsrs	r3, r3, #8
 800c85e:	071a      	lsls	r2, r3, #28
 800c860:	d101      	bne.n	800c866 <__lo0bits+0x46>
 800c862:	3004      	adds	r0, #4
 800c864:	091b      	lsrs	r3, r3, #4
 800c866:	079a      	lsls	r2, r3, #30
 800c868:	d101      	bne.n	800c86e <__lo0bits+0x4e>
 800c86a:	3002      	adds	r0, #2
 800c86c:	089b      	lsrs	r3, r3, #2
 800c86e:	07da      	lsls	r2, r3, #31
 800c870:	d4e9      	bmi.n	800c846 <__lo0bits+0x26>
 800c872:	3001      	adds	r0, #1
 800c874:	085b      	lsrs	r3, r3, #1
 800c876:	d1e6      	bne.n	800c846 <__lo0bits+0x26>
 800c878:	2020      	movs	r0, #32
 800c87a:	e7e2      	b.n	800c842 <__lo0bits+0x22>

0800c87c <__i2b>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	000c      	movs	r4, r1
 800c880:	2101      	movs	r1, #1
 800c882:	f7ff fef1 	bl	800c668 <_Balloc>
 800c886:	2800      	cmp	r0, #0
 800c888:	d107      	bne.n	800c89a <__i2b+0x1e>
 800c88a:	2146      	movs	r1, #70	; 0x46
 800c88c:	4c05      	ldr	r4, [pc, #20]	; (800c8a4 <__i2b+0x28>)
 800c88e:	0002      	movs	r2, r0
 800c890:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <__i2b+0x2c>)
 800c892:	0020      	movs	r0, r4
 800c894:	31ff      	adds	r1, #255	; 0xff
 800c896:	f003 f9ab 	bl	800fbf0 <__assert_func>
 800c89a:	2301      	movs	r3, #1
 800c89c:	6144      	str	r4, [r0, #20]
 800c89e:	6103      	str	r3, [r0, #16]
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	0801449a 	.word	0x0801449a
 800c8a8:	08014429 	.word	0x08014429

0800c8ac <__multiply>:
 800c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ae:	0015      	movs	r5, r2
 800c8b0:	690a      	ldr	r2, [r1, #16]
 800c8b2:	692b      	ldr	r3, [r5, #16]
 800c8b4:	000c      	movs	r4, r1
 800c8b6:	b08b      	sub	sp, #44	; 0x2c
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	da01      	bge.n	800c8c0 <__multiply+0x14>
 800c8bc:	002c      	movs	r4, r5
 800c8be:	000d      	movs	r5, r1
 800c8c0:	6927      	ldr	r7, [r4, #16]
 800c8c2:	692e      	ldr	r6, [r5, #16]
 800c8c4:	6861      	ldr	r1, [r4, #4]
 800c8c6:	19bb      	adds	r3, r7, r6
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	19ba      	adds	r2, r7, r6
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	da00      	bge.n	800c8d4 <__multiply+0x28>
 800c8d2:	3101      	adds	r1, #1
 800c8d4:	f7ff fec8 	bl	800c668 <_Balloc>
 800c8d8:	9002      	str	r0, [sp, #8]
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d106      	bne.n	800c8ec <__multiply+0x40>
 800c8de:	21b1      	movs	r1, #177	; 0xb1
 800c8e0:	4b48      	ldr	r3, [pc, #288]	; (800ca04 <__multiply+0x158>)
 800c8e2:	4849      	ldr	r0, [pc, #292]	; (800ca08 <__multiply+0x15c>)
 800c8e4:	9a02      	ldr	r2, [sp, #8]
 800c8e6:	0049      	lsls	r1, r1, #1
 800c8e8:	f003 f982 	bl	800fbf0 <__assert_func>
 800c8ec:	9b02      	ldr	r3, [sp, #8]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	3314      	adds	r3, #20
 800c8f2:	469c      	mov	ip, r3
 800c8f4:	19bb      	adds	r3, r7, r6
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4463      	add	r3, ip
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	4663      	mov	r3, ip
 800c8fe:	9904      	ldr	r1, [sp, #16]
 800c900:	428b      	cmp	r3, r1
 800c902:	d32a      	bcc.n	800c95a <__multiply+0xae>
 800c904:	0023      	movs	r3, r4
 800c906:	00bf      	lsls	r7, r7, #2
 800c908:	3314      	adds	r3, #20
 800c90a:	3514      	adds	r5, #20
 800c90c:	9308      	str	r3, [sp, #32]
 800c90e:	00b6      	lsls	r6, r6, #2
 800c910:	19db      	adds	r3, r3, r7
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	19ab      	adds	r3, r5, r6
 800c916:	9309      	str	r3, [sp, #36]	; 0x24
 800c918:	2304      	movs	r3, #4
 800c91a:	9306      	str	r3, [sp, #24]
 800c91c:	0023      	movs	r3, r4
 800c91e:	9a05      	ldr	r2, [sp, #20]
 800c920:	3315      	adds	r3, #21
 800c922:	9501      	str	r5, [sp, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d305      	bcc.n	800c934 <__multiply+0x88>
 800c928:	1b13      	subs	r3, r2, r4
 800c92a:	3b15      	subs	r3, #21
 800c92c:	089b      	lsrs	r3, r3, #2
 800c92e:	3301      	adds	r3, #1
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	9306      	str	r3, [sp, #24]
 800c934:	9b01      	ldr	r3, [sp, #4]
 800c936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c938:	4293      	cmp	r3, r2
 800c93a:	d310      	bcc.n	800c95e <__multiply+0xb2>
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dd05      	ble.n	800c94e <__multiply+0xa2>
 800c942:	9b04      	ldr	r3, [sp, #16]
 800c944:	3b04      	subs	r3, #4
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d056      	beq.n	800c9fc <__multiply+0x150>
 800c94e:	9b02      	ldr	r3, [sp, #8]
 800c950:	9a03      	ldr	r2, [sp, #12]
 800c952:	0018      	movs	r0, r3
 800c954:	611a      	str	r2, [r3, #16]
 800c956:	b00b      	add	sp, #44	; 0x2c
 800c958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95a:	c304      	stmia	r3!, {r2}
 800c95c:	e7cf      	b.n	800c8fe <__multiply+0x52>
 800c95e:	9b01      	ldr	r3, [sp, #4]
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	b280      	uxth	r0, r0
 800c964:	2800      	cmp	r0, #0
 800c966:	d01e      	beq.n	800c9a6 <__multiply+0xfa>
 800c968:	4667      	mov	r7, ip
 800c96a:	2500      	movs	r5, #0
 800c96c:	9e08      	ldr	r6, [sp, #32]
 800c96e:	ce02      	ldmia	r6!, {r1}
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	9307      	str	r3, [sp, #28]
 800c974:	b28b      	uxth	r3, r1
 800c976:	4343      	muls	r3, r0
 800c978:	001a      	movs	r2, r3
 800c97a:	466b      	mov	r3, sp
 800c97c:	8b9b      	ldrh	r3, [r3, #28]
 800c97e:	18d3      	adds	r3, r2, r3
 800c980:	195b      	adds	r3, r3, r5
 800c982:	0c0d      	lsrs	r5, r1, #16
 800c984:	4345      	muls	r5, r0
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	0c11      	lsrs	r1, r2, #16
 800c98a:	1869      	adds	r1, r5, r1
 800c98c:	0c1a      	lsrs	r2, r3, #16
 800c98e:	188a      	adds	r2, r1, r2
 800c990:	b29b      	uxth	r3, r3
 800c992:	0c15      	lsrs	r5, r2, #16
 800c994:	0412      	lsls	r2, r2, #16
 800c996:	431a      	orrs	r2, r3
 800c998:	9b05      	ldr	r3, [sp, #20]
 800c99a:	c704      	stmia	r7!, {r2}
 800c99c:	42b3      	cmp	r3, r6
 800c99e:	d8e6      	bhi.n	800c96e <__multiply+0xc2>
 800c9a0:	4663      	mov	r3, ip
 800c9a2:	9a06      	ldr	r2, [sp, #24]
 800c9a4:	509d      	str	r5, [r3, r2]
 800c9a6:	9b01      	ldr	r3, [sp, #4]
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	0c00      	lsrs	r0, r0, #16
 800c9ac:	d020      	beq.n	800c9f0 <__multiply+0x144>
 800c9ae:	4663      	mov	r3, ip
 800c9b0:	0025      	movs	r5, r4
 800c9b2:	4661      	mov	r1, ip
 800c9b4:	2700      	movs	r7, #0
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3514      	adds	r5, #20
 800c9ba:	682a      	ldr	r2, [r5, #0]
 800c9bc:	680e      	ldr	r6, [r1, #0]
 800c9be:	b292      	uxth	r2, r2
 800c9c0:	4342      	muls	r2, r0
 800c9c2:	0c36      	lsrs	r6, r6, #16
 800c9c4:	1992      	adds	r2, r2, r6
 800c9c6:	19d2      	adds	r2, r2, r7
 800c9c8:	0416      	lsls	r6, r2, #16
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	431e      	orrs	r6, r3
 800c9ce:	600e      	str	r6, [r1, #0]
 800c9d0:	cd40      	ldmia	r5!, {r6}
 800c9d2:	684b      	ldr	r3, [r1, #4]
 800c9d4:	0c36      	lsrs	r6, r6, #16
 800c9d6:	4346      	muls	r6, r0
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	0c12      	lsrs	r2, r2, #16
 800c9dc:	18f3      	adds	r3, r6, r3
 800c9de:	189b      	adds	r3, r3, r2
 800c9e0:	9a05      	ldr	r2, [sp, #20]
 800c9e2:	0c1f      	lsrs	r7, r3, #16
 800c9e4:	3104      	adds	r1, #4
 800c9e6:	42aa      	cmp	r2, r5
 800c9e8:	d8e7      	bhi.n	800c9ba <__multiply+0x10e>
 800c9ea:	4662      	mov	r2, ip
 800c9ec:	9906      	ldr	r1, [sp, #24]
 800c9ee:	5053      	str	r3, [r2, r1]
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	9301      	str	r3, [sp, #4]
 800c9f6:	2304      	movs	r3, #4
 800c9f8:	449c      	add	ip, r3
 800c9fa:	e79b      	b.n	800c934 <__multiply+0x88>
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	9303      	str	r3, [sp, #12]
 800ca02:	e79b      	b.n	800c93c <__multiply+0x90>
 800ca04:	08014429 	.word	0x08014429
 800ca08:	0801449a 	.word	0x0801449a

0800ca0c <__pow5mult>:
 800ca0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca0e:	2303      	movs	r3, #3
 800ca10:	0015      	movs	r5, r2
 800ca12:	0007      	movs	r7, r0
 800ca14:	000e      	movs	r6, r1
 800ca16:	401a      	ands	r2, r3
 800ca18:	421d      	tst	r5, r3
 800ca1a:	d008      	beq.n	800ca2e <__pow5mult+0x22>
 800ca1c:	491a      	ldr	r1, [pc, #104]	; (800ca88 <__pow5mult+0x7c>)
 800ca1e:	3a01      	subs	r2, #1
 800ca20:	0092      	lsls	r2, r2, #2
 800ca22:	5852      	ldr	r2, [r2, r1]
 800ca24:	2300      	movs	r3, #0
 800ca26:	0031      	movs	r1, r6
 800ca28:	f7ff fe50 	bl	800c6cc <__multadd>
 800ca2c:	0006      	movs	r6, r0
 800ca2e:	10ad      	asrs	r5, r5, #2
 800ca30:	d027      	beq.n	800ca82 <__pow5mult+0x76>
 800ca32:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800ca34:	2c00      	cmp	r4, #0
 800ca36:	d107      	bne.n	800ca48 <__pow5mult+0x3c>
 800ca38:	0038      	movs	r0, r7
 800ca3a:	4914      	ldr	r1, [pc, #80]	; (800ca8c <__pow5mult+0x80>)
 800ca3c:	f7ff ff1e 	bl	800c87c <__i2b>
 800ca40:	2300      	movs	r3, #0
 800ca42:	0004      	movs	r4, r0
 800ca44:	6438      	str	r0, [r7, #64]	; 0x40
 800ca46:	6003      	str	r3, [r0, #0]
 800ca48:	2301      	movs	r3, #1
 800ca4a:	421d      	tst	r5, r3
 800ca4c:	d00a      	beq.n	800ca64 <__pow5mult+0x58>
 800ca4e:	0031      	movs	r1, r6
 800ca50:	0022      	movs	r2, r4
 800ca52:	0038      	movs	r0, r7
 800ca54:	f7ff ff2a 	bl	800c8ac <__multiply>
 800ca58:	0031      	movs	r1, r6
 800ca5a:	9001      	str	r0, [sp, #4]
 800ca5c:	0038      	movs	r0, r7
 800ca5e:	f7ff fe2b 	bl	800c6b8 <_Bfree>
 800ca62:	9e01      	ldr	r6, [sp, #4]
 800ca64:	106d      	asrs	r5, r5, #1
 800ca66:	d00c      	beq.n	800ca82 <__pow5mult+0x76>
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d107      	bne.n	800ca7e <__pow5mult+0x72>
 800ca6e:	0022      	movs	r2, r4
 800ca70:	0021      	movs	r1, r4
 800ca72:	0038      	movs	r0, r7
 800ca74:	f7ff ff1a 	bl	800c8ac <__multiply>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	0004      	movs	r4, r0
 800ca80:	e7e2      	b.n	800ca48 <__pow5mult+0x3c>
 800ca82:	0030      	movs	r0, r6
 800ca84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	080145e8 	.word	0x080145e8
 800ca8c:	00000271 	.word	0x00000271

0800ca90 <__lshift>:
 800ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca92:	000c      	movs	r4, r1
 800ca94:	0017      	movs	r7, r2
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	1155      	asrs	r5, r2, #5
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	18eb      	adds	r3, r5, r3
 800ca9e:	9302      	str	r3, [sp, #8]
 800caa0:	3301      	adds	r3, #1
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	6849      	ldr	r1, [r1, #4]
 800caa6:	68a3      	ldr	r3, [r4, #8]
 800caa8:	9004      	str	r0, [sp, #16]
 800caaa:	9a01      	ldr	r2, [sp, #4]
 800caac:	4293      	cmp	r3, r2
 800caae:	db10      	blt.n	800cad2 <__lshift+0x42>
 800cab0:	9804      	ldr	r0, [sp, #16]
 800cab2:	f7ff fdd9 	bl	800c668 <_Balloc>
 800cab6:	2300      	movs	r3, #0
 800cab8:	0002      	movs	r2, r0
 800caba:	0006      	movs	r6, r0
 800cabc:	0019      	movs	r1, r3
 800cabe:	3214      	adds	r2, #20
 800cac0:	4298      	cmp	r0, r3
 800cac2:	d10c      	bne.n	800cade <__lshift+0x4e>
 800cac4:	31df      	adds	r1, #223	; 0xdf
 800cac6:	0032      	movs	r2, r6
 800cac8:	4b26      	ldr	r3, [pc, #152]	; (800cb64 <__lshift+0xd4>)
 800caca:	4827      	ldr	r0, [pc, #156]	; (800cb68 <__lshift+0xd8>)
 800cacc:	31ff      	adds	r1, #255	; 0xff
 800cace:	f003 f88f 	bl	800fbf0 <__assert_func>
 800cad2:	3101      	adds	r1, #1
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	e7e8      	b.n	800caaa <__lshift+0x1a>
 800cad8:	0098      	lsls	r0, r3, #2
 800cada:	5011      	str	r1, [r2, r0]
 800cadc:	3301      	adds	r3, #1
 800cade:	42ab      	cmp	r3, r5
 800cae0:	dbfa      	blt.n	800cad8 <__lshift+0x48>
 800cae2:	43eb      	mvns	r3, r5
 800cae4:	17db      	asrs	r3, r3, #31
 800cae6:	401d      	ands	r5, r3
 800cae8:	211f      	movs	r1, #31
 800caea:	0023      	movs	r3, r4
 800caec:	0038      	movs	r0, r7
 800caee:	00ad      	lsls	r5, r5, #2
 800caf0:	1955      	adds	r5, r2, r5
 800caf2:	6922      	ldr	r2, [r4, #16]
 800caf4:	3314      	adds	r3, #20
 800caf6:	0092      	lsls	r2, r2, #2
 800caf8:	4008      	ands	r0, r1
 800cafa:	4684      	mov	ip, r0
 800cafc:	189a      	adds	r2, r3, r2
 800cafe:	420f      	tst	r7, r1
 800cb00:	d02a      	beq.n	800cb58 <__lshift+0xc8>
 800cb02:	3101      	adds	r1, #1
 800cb04:	1a09      	subs	r1, r1, r0
 800cb06:	9105      	str	r1, [sp, #20]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	9503      	str	r5, [sp, #12]
 800cb0c:	4667      	mov	r7, ip
 800cb0e:	6818      	ldr	r0, [r3, #0]
 800cb10:	40b8      	lsls	r0, r7
 800cb12:	4308      	orrs	r0, r1
 800cb14:	9903      	ldr	r1, [sp, #12]
 800cb16:	c101      	stmia	r1!, {r0}
 800cb18:	9103      	str	r1, [sp, #12]
 800cb1a:	9805      	ldr	r0, [sp, #20]
 800cb1c:	cb02      	ldmia	r3!, {r1}
 800cb1e:	40c1      	lsrs	r1, r0
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d8f3      	bhi.n	800cb0c <__lshift+0x7c>
 800cb24:	0020      	movs	r0, r4
 800cb26:	3015      	adds	r0, #21
 800cb28:	2304      	movs	r3, #4
 800cb2a:	4282      	cmp	r2, r0
 800cb2c:	d304      	bcc.n	800cb38 <__lshift+0xa8>
 800cb2e:	1b13      	subs	r3, r2, r4
 800cb30:	3b15      	subs	r3, #21
 800cb32:	089b      	lsrs	r3, r3, #2
 800cb34:	3301      	adds	r3, #1
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	50e9      	str	r1, [r5, r3]
 800cb3a:	2900      	cmp	r1, #0
 800cb3c:	d002      	beq.n	800cb44 <__lshift+0xb4>
 800cb3e:	9b02      	ldr	r3, [sp, #8]
 800cb40:	3302      	adds	r3, #2
 800cb42:	9301      	str	r3, [sp, #4]
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	9804      	ldr	r0, [sp, #16]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	0021      	movs	r1, r4
 800cb4c:	6133      	str	r3, [r6, #16]
 800cb4e:	f7ff fdb3 	bl	800c6b8 <_Bfree>
 800cb52:	0030      	movs	r0, r6
 800cb54:	b007      	add	sp, #28
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	cb02      	ldmia	r3!, {r1}
 800cb5a:	c502      	stmia	r5!, {r1}
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d8fb      	bhi.n	800cb58 <__lshift+0xc8>
 800cb60:	e7f0      	b.n	800cb44 <__lshift+0xb4>
 800cb62:	46c0      	nop			; (mov r8, r8)
 800cb64:	08014429 	.word	0x08014429
 800cb68:	0801449a 	.word	0x0801449a

0800cb6c <__mcmp>:
 800cb6c:	b530      	push	{r4, r5, lr}
 800cb6e:	690b      	ldr	r3, [r1, #16]
 800cb70:	6904      	ldr	r4, [r0, #16]
 800cb72:	0002      	movs	r2, r0
 800cb74:	1ae0      	subs	r0, r4, r3
 800cb76:	429c      	cmp	r4, r3
 800cb78:	d10e      	bne.n	800cb98 <__mcmp+0x2c>
 800cb7a:	3214      	adds	r2, #20
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	3114      	adds	r1, #20
 800cb80:	0014      	movs	r4, r2
 800cb82:	18c9      	adds	r1, r1, r3
 800cb84:	18d2      	adds	r2, r2, r3
 800cb86:	3a04      	subs	r2, #4
 800cb88:	3904      	subs	r1, #4
 800cb8a:	6815      	ldr	r5, [r2, #0]
 800cb8c:	680b      	ldr	r3, [r1, #0]
 800cb8e:	429d      	cmp	r5, r3
 800cb90:	d003      	beq.n	800cb9a <__mcmp+0x2e>
 800cb92:	2001      	movs	r0, #1
 800cb94:	429d      	cmp	r5, r3
 800cb96:	d303      	bcc.n	800cba0 <__mcmp+0x34>
 800cb98:	bd30      	pop	{r4, r5, pc}
 800cb9a:	4294      	cmp	r4, r2
 800cb9c:	d3f3      	bcc.n	800cb86 <__mcmp+0x1a>
 800cb9e:	e7fb      	b.n	800cb98 <__mcmp+0x2c>
 800cba0:	4240      	negs	r0, r0
 800cba2:	e7f9      	b.n	800cb98 <__mcmp+0x2c>

0800cba4 <__mdiff>:
 800cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba6:	000e      	movs	r6, r1
 800cba8:	0007      	movs	r7, r0
 800cbaa:	0011      	movs	r1, r2
 800cbac:	0030      	movs	r0, r6
 800cbae:	b087      	sub	sp, #28
 800cbb0:	0014      	movs	r4, r2
 800cbb2:	f7ff ffdb 	bl	800cb6c <__mcmp>
 800cbb6:	1e05      	subs	r5, r0, #0
 800cbb8:	d110      	bne.n	800cbdc <__mdiff+0x38>
 800cbba:	0001      	movs	r1, r0
 800cbbc:	0038      	movs	r0, r7
 800cbbe:	f7ff fd53 	bl	800c668 <_Balloc>
 800cbc2:	1e02      	subs	r2, r0, #0
 800cbc4:	d104      	bne.n	800cbd0 <__mdiff+0x2c>
 800cbc6:	4b3f      	ldr	r3, [pc, #252]	; (800ccc4 <__mdiff+0x120>)
 800cbc8:	483f      	ldr	r0, [pc, #252]	; (800ccc8 <__mdiff+0x124>)
 800cbca:	4940      	ldr	r1, [pc, #256]	; (800cccc <__mdiff+0x128>)
 800cbcc:	f003 f810 	bl	800fbf0 <__assert_func>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	6145      	str	r5, [r0, #20]
 800cbd4:	6103      	str	r3, [r0, #16]
 800cbd6:	0010      	movs	r0, r2
 800cbd8:	b007      	add	sp, #28
 800cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbdc:	2301      	movs	r3, #1
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	db04      	blt.n	800cbee <__mdiff+0x4a>
 800cbe4:	0023      	movs	r3, r4
 800cbe6:	0034      	movs	r4, r6
 800cbe8:	001e      	movs	r6, r3
 800cbea:	2300      	movs	r3, #0
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	0038      	movs	r0, r7
 800cbf0:	6861      	ldr	r1, [r4, #4]
 800cbf2:	f7ff fd39 	bl	800c668 <_Balloc>
 800cbf6:	1e02      	subs	r2, r0, #0
 800cbf8:	d103      	bne.n	800cc02 <__mdiff+0x5e>
 800cbfa:	4b32      	ldr	r3, [pc, #200]	; (800ccc4 <__mdiff+0x120>)
 800cbfc:	4832      	ldr	r0, [pc, #200]	; (800ccc8 <__mdiff+0x124>)
 800cbfe:	4934      	ldr	r1, [pc, #208]	; (800ccd0 <__mdiff+0x12c>)
 800cc00:	e7e4      	b.n	800cbcc <__mdiff+0x28>
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	2700      	movs	r7, #0
 800cc06:	60c3      	str	r3, [r0, #12]
 800cc08:	6920      	ldr	r0, [r4, #16]
 800cc0a:	3414      	adds	r4, #20
 800cc0c:	0083      	lsls	r3, r0, #2
 800cc0e:	18e3      	adds	r3, r4, r3
 800cc10:	0021      	movs	r1, r4
 800cc12:	9401      	str	r4, [sp, #4]
 800cc14:	0034      	movs	r4, r6
 800cc16:	9302      	str	r3, [sp, #8]
 800cc18:	6933      	ldr	r3, [r6, #16]
 800cc1a:	3414      	adds	r4, #20
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	18e3      	adds	r3, r4, r3
 800cc20:	9303      	str	r3, [sp, #12]
 800cc22:	0013      	movs	r3, r2
 800cc24:	3314      	adds	r3, #20
 800cc26:	469c      	mov	ip, r3
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	9104      	str	r1, [sp, #16]
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	cc02      	ldmia	r4!, {r1}
 800cc30:	cb20      	ldmia	r3!, {r5}
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	b2ab      	uxth	r3, r5
 800cc36:	19df      	adds	r7, r3, r7
 800cc38:	b28b      	uxth	r3, r1
 800cc3a:	1afb      	subs	r3, r7, r3
 800cc3c:	0c09      	lsrs	r1, r1, #16
 800cc3e:	0c2d      	lsrs	r5, r5, #16
 800cc40:	1a6d      	subs	r5, r5, r1
 800cc42:	1419      	asrs	r1, r3, #16
 800cc44:	1869      	adds	r1, r5, r1
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	140f      	asrs	r7, r1, #16
 800cc4a:	0409      	lsls	r1, r1, #16
 800cc4c:	4319      	orrs	r1, r3
 800cc4e:	4663      	mov	r3, ip
 800cc50:	c302      	stmia	r3!, {r1}
 800cc52:	469c      	mov	ip, r3
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	42a3      	cmp	r3, r4
 800cc58:	d8e8      	bhi.n	800cc2c <__mdiff+0x88>
 800cc5a:	0031      	movs	r1, r6
 800cc5c:	9c03      	ldr	r4, [sp, #12]
 800cc5e:	3115      	adds	r1, #21
 800cc60:	2304      	movs	r3, #4
 800cc62:	428c      	cmp	r4, r1
 800cc64:	d304      	bcc.n	800cc70 <__mdiff+0xcc>
 800cc66:	1ba3      	subs	r3, r4, r6
 800cc68:	3b15      	subs	r3, #21
 800cc6a:	089b      	lsrs	r3, r3, #2
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	9901      	ldr	r1, [sp, #4]
 800cc72:	18cd      	adds	r5, r1, r3
 800cc74:	9905      	ldr	r1, [sp, #20]
 800cc76:	002e      	movs	r6, r5
 800cc78:	18cb      	adds	r3, r1, r3
 800cc7a:	469c      	mov	ip, r3
 800cc7c:	9902      	ldr	r1, [sp, #8]
 800cc7e:	428e      	cmp	r6, r1
 800cc80:	d310      	bcc.n	800cca4 <__mdiff+0x100>
 800cc82:	9e02      	ldr	r6, [sp, #8]
 800cc84:	1ee9      	subs	r1, r5, #3
 800cc86:	2400      	movs	r4, #0
 800cc88:	428e      	cmp	r6, r1
 800cc8a:	d304      	bcc.n	800cc96 <__mdiff+0xf2>
 800cc8c:	0031      	movs	r1, r6
 800cc8e:	3103      	adds	r1, #3
 800cc90:	1b49      	subs	r1, r1, r5
 800cc92:	0889      	lsrs	r1, r1, #2
 800cc94:	008c      	lsls	r4, r1, #2
 800cc96:	191b      	adds	r3, r3, r4
 800cc98:	3b04      	subs	r3, #4
 800cc9a:	6819      	ldr	r1, [r3, #0]
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d00f      	beq.n	800ccc0 <__mdiff+0x11c>
 800cca0:	6110      	str	r0, [r2, #16]
 800cca2:	e798      	b.n	800cbd6 <__mdiff+0x32>
 800cca4:	ce02      	ldmia	r6!, {r1}
 800cca6:	b28c      	uxth	r4, r1
 800cca8:	19e4      	adds	r4, r4, r7
 800ccaa:	0c0f      	lsrs	r7, r1, #16
 800ccac:	1421      	asrs	r1, r4, #16
 800ccae:	1879      	adds	r1, r7, r1
 800ccb0:	b2a4      	uxth	r4, r4
 800ccb2:	140f      	asrs	r7, r1, #16
 800ccb4:	0409      	lsls	r1, r1, #16
 800ccb6:	4321      	orrs	r1, r4
 800ccb8:	4664      	mov	r4, ip
 800ccba:	c402      	stmia	r4!, {r1}
 800ccbc:	46a4      	mov	ip, r4
 800ccbe:	e7dd      	b.n	800cc7c <__mdiff+0xd8>
 800ccc0:	3801      	subs	r0, #1
 800ccc2:	e7e9      	b.n	800cc98 <__mdiff+0xf4>
 800ccc4:	08014429 	.word	0x08014429
 800ccc8:	0801449a 	.word	0x0801449a
 800cccc:	00000237 	.word	0x00000237
 800ccd0:	00000245 	.word	0x00000245

0800ccd4 <__ulp>:
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <__ulp+0x30>)
 800ccd8:	4019      	ands	r1, r3
 800ccda:	4b0b      	ldr	r3, [pc, #44]	; (800cd08 <__ulp+0x34>)
 800ccdc:	18c9      	adds	r1, r1, r3
 800ccde:	4281      	cmp	r1, r0
 800cce0:	dc06      	bgt.n	800ccf0 <__ulp+0x1c>
 800cce2:	4249      	negs	r1, r1
 800cce4:	150b      	asrs	r3, r1, #20
 800cce6:	2b13      	cmp	r3, #19
 800cce8:	dc03      	bgt.n	800ccf2 <__ulp+0x1e>
 800ccea:	2180      	movs	r1, #128	; 0x80
 800ccec:	0309      	lsls	r1, r1, #12
 800ccee:	4119      	asrs	r1, r3
 800ccf0:	4770      	bx	lr
 800ccf2:	3b14      	subs	r3, #20
 800ccf4:	2001      	movs	r0, #1
 800ccf6:	2b1e      	cmp	r3, #30
 800ccf8:	dc02      	bgt.n	800cd00 <__ulp+0x2c>
 800ccfa:	2080      	movs	r0, #128	; 0x80
 800ccfc:	0600      	lsls	r0, r0, #24
 800ccfe:	40d8      	lsrs	r0, r3
 800cd00:	2100      	movs	r1, #0
 800cd02:	e7f5      	b.n	800ccf0 <__ulp+0x1c>
 800cd04:	7ff00000 	.word	0x7ff00000
 800cd08:	fcc00000 	.word	0xfcc00000

0800cd0c <__b2d>:
 800cd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0e:	0006      	movs	r6, r0
 800cd10:	6903      	ldr	r3, [r0, #16]
 800cd12:	3614      	adds	r6, #20
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	18f3      	adds	r3, r6, r3
 800cd18:	1f1d      	subs	r5, r3, #4
 800cd1a:	682c      	ldr	r4, [r5, #0]
 800cd1c:	000f      	movs	r7, r1
 800cd1e:	0020      	movs	r0, r4
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f7ff fd63 	bl	800c7ec <__hi0bits>
 800cd26:	2220      	movs	r2, #32
 800cd28:	1a12      	subs	r2, r2, r0
 800cd2a:	603a      	str	r2, [r7, #0]
 800cd2c:	0003      	movs	r3, r0
 800cd2e:	4a1c      	ldr	r2, [pc, #112]	; (800cda0 <__b2d+0x94>)
 800cd30:	280a      	cmp	r0, #10
 800cd32:	dc15      	bgt.n	800cd60 <__b2d+0x54>
 800cd34:	210b      	movs	r1, #11
 800cd36:	0027      	movs	r7, r4
 800cd38:	1a09      	subs	r1, r1, r0
 800cd3a:	40cf      	lsrs	r7, r1
 800cd3c:	433a      	orrs	r2, r7
 800cd3e:	468c      	mov	ip, r1
 800cd40:	0011      	movs	r1, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	42ae      	cmp	r6, r5
 800cd46:	d202      	bcs.n	800cd4e <__b2d+0x42>
 800cd48:	9a01      	ldr	r2, [sp, #4]
 800cd4a:	3a08      	subs	r2, #8
 800cd4c:	6812      	ldr	r2, [r2, #0]
 800cd4e:	3315      	adds	r3, #21
 800cd50:	409c      	lsls	r4, r3
 800cd52:	4663      	mov	r3, ip
 800cd54:	0027      	movs	r7, r4
 800cd56:	40da      	lsrs	r2, r3
 800cd58:	4317      	orrs	r7, r2
 800cd5a:	0038      	movs	r0, r7
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd60:	2700      	movs	r7, #0
 800cd62:	42ae      	cmp	r6, r5
 800cd64:	d202      	bcs.n	800cd6c <__b2d+0x60>
 800cd66:	9d01      	ldr	r5, [sp, #4]
 800cd68:	3d08      	subs	r5, #8
 800cd6a:	682f      	ldr	r7, [r5, #0]
 800cd6c:	210b      	movs	r1, #11
 800cd6e:	4249      	negs	r1, r1
 800cd70:	468c      	mov	ip, r1
 800cd72:	449c      	add	ip, r3
 800cd74:	2b0b      	cmp	r3, #11
 800cd76:	d010      	beq.n	800cd9a <__b2d+0x8e>
 800cd78:	4661      	mov	r1, ip
 800cd7a:	2320      	movs	r3, #32
 800cd7c:	408c      	lsls	r4, r1
 800cd7e:	1a5b      	subs	r3, r3, r1
 800cd80:	0039      	movs	r1, r7
 800cd82:	40d9      	lsrs	r1, r3
 800cd84:	430c      	orrs	r4, r1
 800cd86:	4322      	orrs	r2, r4
 800cd88:	0011      	movs	r1, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	42b5      	cmp	r5, r6
 800cd8e:	d901      	bls.n	800cd94 <__b2d+0x88>
 800cd90:	3d04      	subs	r5, #4
 800cd92:	682a      	ldr	r2, [r5, #0]
 800cd94:	4664      	mov	r4, ip
 800cd96:	40a7      	lsls	r7, r4
 800cd98:	e7dd      	b.n	800cd56 <__b2d+0x4a>
 800cd9a:	4322      	orrs	r2, r4
 800cd9c:	0011      	movs	r1, r2
 800cd9e:	e7dc      	b.n	800cd5a <__b2d+0x4e>
 800cda0:	3ff00000 	.word	0x3ff00000

0800cda4 <__d2b>:
 800cda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cda6:	2101      	movs	r1, #1
 800cda8:	0014      	movs	r4, r2
 800cdaa:	001d      	movs	r5, r3
 800cdac:	9f08      	ldr	r7, [sp, #32]
 800cdae:	f7ff fc5b 	bl	800c668 <_Balloc>
 800cdb2:	1e06      	subs	r6, r0, #0
 800cdb4:	d105      	bne.n	800cdc2 <__d2b+0x1e>
 800cdb6:	0032      	movs	r2, r6
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <__d2b+0xa8>)
 800cdba:	4825      	ldr	r0, [pc, #148]	; (800ce50 <__d2b+0xac>)
 800cdbc:	4925      	ldr	r1, [pc, #148]	; (800ce54 <__d2b+0xb0>)
 800cdbe:	f002 ff17 	bl	800fbf0 <__assert_func>
 800cdc2:	032b      	lsls	r3, r5, #12
 800cdc4:	006d      	lsls	r5, r5, #1
 800cdc6:	0b1b      	lsrs	r3, r3, #12
 800cdc8:	0d6d      	lsrs	r5, r5, #21
 800cdca:	d125      	bne.n	800ce18 <__d2b+0x74>
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	d028      	beq.n	800ce24 <__d2b+0x80>
 800cdd2:	4668      	mov	r0, sp
 800cdd4:	9400      	str	r4, [sp, #0]
 800cdd6:	f7ff fd23 	bl	800c820 <__lo0bits>
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	9900      	ldr	r1, [sp, #0]
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d01e      	beq.n	800ce20 <__d2b+0x7c>
 800cde2:	2220      	movs	r2, #32
 800cde4:	001c      	movs	r4, r3
 800cde6:	1a12      	subs	r2, r2, r0
 800cde8:	4094      	lsls	r4, r2
 800cdea:	0022      	movs	r2, r4
 800cdec:	40c3      	lsrs	r3, r0
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	6172      	str	r2, [r6, #20]
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	9c01      	ldr	r4, [sp, #4]
 800cdf6:	61b4      	str	r4, [r6, #24]
 800cdf8:	1e63      	subs	r3, r4, #1
 800cdfa:	419c      	sbcs	r4, r3
 800cdfc:	3401      	adds	r4, #1
 800cdfe:	6134      	str	r4, [r6, #16]
 800ce00:	2d00      	cmp	r5, #0
 800ce02:	d017      	beq.n	800ce34 <__d2b+0x90>
 800ce04:	2435      	movs	r4, #53	; 0x35
 800ce06:	4b14      	ldr	r3, [pc, #80]	; (800ce58 <__d2b+0xb4>)
 800ce08:	18ed      	adds	r5, r5, r3
 800ce0a:	182d      	adds	r5, r5, r0
 800ce0c:	603d      	str	r5, [r7, #0]
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	1a24      	subs	r4, r4, r0
 800ce12:	601c      	str	r4, [r3, #0]
 800ce14:	0030      	movs	r0, r6
 800ce16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce18:	2280      	movs	r2, #128	; 0x80
 800ce1a:	0352      	lsls	r2, r2, #13
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	e7d5      	b.n	800cdcc <__d2b+0x28>
 800ce20:	6171      	str	r1, [r6, #20]
 800ce22:	e7e7      	b.n	800cdf4 <__d2b+0x50>
 800ce24:	a801      	add	r0, sp, #4
 800ce26:	f7ff fcfb 	bl	800c820 <__lo0bits>
 800ce2a:	9b01      	ldr	r3, [sp, #4]
 800ce2c:	2401      	movs	r4, #1
 800ce2e:	6173      	str	r3, [r6, #20]
 800ce30:	3020      	adds	r0, #32
 800ce32:	e7e4      	b.n	800cdfe <__d2b+0x5a>
 800ce34:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <__d2b+0xb8>)
 800ce36:	18c0      	adds	r0, r0, r3
 800ce38:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <__d2b+0xbc>)
 800ce3a:	6038      	str	r0, [r7, #0]
 800ce3c:	18e3      	adds	r3, r4, r3
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	18f3      	adds	r3, r6, r3
 800ce42:	6958      	ldr	r0, [r3, #20]
 800ce44:	f7ff fcd2 	bl	800c7ec <__hi0bits>
 800ce48:	0164      	lsls	r4, r4, #5
 800ce4a:	e7e0      	b.n	800ce0e <__d2b+0x6a>
 800ce4c:	08014429 	.word	0x08014429
 800ce50:	0801449a 	.word	0x0801449a
 800ce54:	0000030f 	.word	0x0000030f
 800ce58:	fffffbcd 	.word	0xfffffbcd
 800ce5c:	fffffbce 	.word	0xfffffbce
 800ce60:	3fffffff 	.word	0x3fffffff

0800ce64 <__ratio>:
 800ce64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce66:	b087      	sub	sp, #28
 800ce68:	000f      	movs	r7, r1
 800ce6a:	a904      	add	r1, sp, #16
 800ce6c:	0006      	movs	r6, r0
 800ce6e:	f7ff ff4d 	bl	800cd0c <__b2d>
 800ce72:	9000      	str	r0, [sp, #0]
 800ce74:	9101      	str	r1, [sp, #4]
 800ce76:	9c00      	ldr	r4, [sp, #0]
 800ce78:	9d01      	ldr	r5, [sp, #4]
 800ce7a:	0038      	movs	r0, r7
 800ce7c:	a905      	add	r1, sp, #20
 800ce7e:	f7ff ff45 	bl	800cd0c <__b2d>
 800ce82:	9002      	str	r0, [sp, #8]
 800ce84:	9103      	str	r1, [sp, #12]
 800ce86:	9a02      	ldr	r2, [sp, #8]
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	6930      	ldr	r0, [r6, #16]
 800ce8c:	6939      	ldr	r1, [r7, #16]
 800ce8e:	9e04      	ldr	r6, [sp, #16]
 800ce90:	1a40      	subs	r0, r0, r1
 800ce92:	9905      	ldr	r1, [sp, #20]
 800ce94:	0140      	lsls	r0, r0, #5
 800ce96:	1a71      	subs	r1, r6, r1
 800ce98:	1841      	adds	r1, r0, r1
 800ce9a:	0508      	lsls	r0, r1, #20
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	dd07      	ble.n	800ceb0 <__ratio+0x4c>
 800cea0:	9901      	ldr	r1, [sp, #4]
 800cea2:	1845      	adds	r5, r0, r1
 800cea4:	0020      	movs	r0, r4
 800cea6:	0029      	movs	r1, r5
 800cea8:	f7f3 ffe6 	bl	8000e78 <__aeabi_ddiv>
 800ceac:	b007      	add	sp, #28
 800ceae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb0:	9903      	ldr	r1, [sp, #12]
 800ceb2:	1a0b      	subs	r3, r1, r0
 800ceb4:	e7f6      	b.n	800cea4 <__ratio+0x40>

0800ceb6 <__copybits>:
 800ceb6:	b570      	push	{r4, r5, r6, lr}
 800ceb8:	0014      	movs	r4, r2
 800ceba:	0005      	movs	r5, r0
 800cebc:	3901      	subs	r1, #1
 800cebe:	6913      	ldr	r3, [r2, #16]
 800cec0:	1149      	asrs	r1, r1, #5
 800cec2:	3101      	adds	r1, #1
 800cec4:	0089      	lsls	r1, r1, #2
 800cec6:	3414      	adds	r4, #20
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	1841      	adds	r1, r0, r1
 800cecc:	18e3      	adds	r3, r4, r3
 800cece:	42a3      	cmp	r3, r4
 800ced0:	d80d      	bhi.n	800ceee <__copybits+0x38>
 800ced2:	0014      	movs	r4, r2
 800ced4:	3411      	adds	r4, #17
 800ced6:	2500      	movs	r5, #0
 800ced8:	429c      	cmp	r4, r3
 800ceda:	d803      	bhi.n	800cee4 <__copybits+0x2e>
 800cedc:	1a9b      	subs	r3, r3, r2
 800cede:	3b11      	subs	r3, #17
 800cee0:	089b      	lsrs	r3, r3, #2
 800cee2:	009d      	lsls	r5, r3, #2
 800cee4:	2300      	movs	r3, #0
 800cee6:	1940      	adds	r0, r0, r5
 800cee8:	4281      	cmp	r1, r0
 800ceea:	d803      	bhi.n	800cef4 <__copybits+0x3e>
 800ceec:	bd70      	pop	{r4, r5, r6, pc}
 800ceee:	cc40      	ldmia	r4!, {r6}
 800cef0:	c540      	stmia	r5!, {r6}
 800cef2:	e7ec      	b.n	800cece <__copybits+0x18>
 800cef4:	c008      	stmia	r0!, {r3}
 800cef6:	e7f7      	b.n	800cee8 <__copybits+0x32>

0800cef8 <__any_on>:
 800cef8:	0002      	movs	r2, r0
 800cefa:	6900      	ldr	r0, [r0, #16]
 800cefc:	b510      	push	{r4, lr}
 800cefe:	3214      	adds	r2, #20
 800cf00:	114b      	asrs	r3, r1, #5
 800cf02:	4298      	cmp	r0, r3
 800cf04:	db13      	blt.n	800cf2e <__any_on+0x36>
 800cf06:	dd0c      	ble.n	800cf22 <__any_on+0x2a>
 800cf08:	241f      	movs	r4, #31
 800cf0a:	0008      	movs	r0, r1
 800cf0c:	4020      	ands	r0, r4
 800cf0e:	4221      	tst	r1, r4
 800cf10:	d007      	beq.n	800cf22 <__any_on+0x2a>
 800cf12:	0099      	lsls	r1, r3, #2
 800cf14:	588c      	ldr	r4, [r1, r2]
 800cf16:	0021      	movs	r1, r4
 800cf18:	40c1      	lsrs	r1, r0
 800cf1a:	4081      	lsls	r1, r0
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	428c      	cmp	r4, r1
 800cf20:	d104      	bne.n	800cf2c <__any_on+0x34>
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	18d3      	adds	r3, r2, r3
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d803      	bhi.n	800cf32 <__any_on+0x3a>
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	bd10      	pop	{r4, pc}
 800cf2e:	0003      	movs	r3, r0
 800cf30:	e7f7      	b.n	800cf22 <__any_on+0x2a>
 800cf32:	3b04      	subs	r3, #4
 800cf34:	6819      	ldr	r1, [r3, #0]
 800cf36:	2900      	cmp	r1, #0
 800cf38:	d0f5      	beq.n	800cf26 <__any_on+0x2e>
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	e7f6      	b.n	800cf2c <__any_on+0x34>

0800cf3e <__ascii_wctomb>:
 800cf3e:	0003      	movs	r3, r0
 800cf40:	1e08      	subs	r0, r1, #0
 800cf42:	d005      	beq.n	800cf50 <__ascii_wctomb+0x12>
 800cf44:	2aff      	cmp	r2, #255	; 0xff
 800cf46:	d904      	bls.n	800cf52 <__ascii_wctomb+0x14>
 800cf48:	228a      	movs	r2, #138	; 0x8a
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	4240      	negs	r0, r0
 800cf50:	4770      	bx	lr
 800cf52:	2001      	movs	r0, #1
 800cf54:	700a      	strb	r2, [r1, #0]
 800cf56:	e7fb      	b.n	800cf50 <__ascii_wctomb+0x12>

0800cf58 <_svfprintf_r>:
 800cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5a:	b0d9      	sub	sp, #356	; 0x164
 800cf5c:	001c      	movs	r4, r3
 800cf5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf60:	9208      	str	r2, [sp, #32]
 800cf62:	900a      	str	r0, [sp, #40]	; 0x28
 800cf64:	f002 fdae 	bl	800fac4 <_localeconv_r>
 800cf68:	6803      	ldr	r3, [r0, #0]
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	931c      	str	r3, [sp, #112]	; 0x70
 800cf6e:	f7f3 f8c9 	bl	8000104 <strlen>
 800cf72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf74:	9016      	str	r0, [sp, #88]	; 0x58
 800cf76:	899b      	ldrh	r3, [r3, #12]
 800cf78:	061b      	lsls	r3, r3, #24
 800cf7a:	d517      	bpl.n	800cfac <_svfprintf_r+0x54>
 800cf7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d113      	bne.n	800cfac <_svfprintf_r+0x54>
 800cf84:	2140      	movs	r1, #64	; 0x40
 800cf86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf88:	f7fd fb6e 	bl	800a668 <_malloc_r>
 800cf8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf8e:	6018      	str	r0, [r3, #0]
 800cf90:	6118      	str	r0, [r3, #16]
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d107      	bne.n	800cfa6 <_svfprintf_r+0x4e>
 800cf96:	230c      	movs	r3, #12
 800cf98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	3b0d      	subs	r3, #13
 800cf9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfa0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cfa2:	b059      	add	sp, #356	; 0x164
 800cfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfa6:	2340      	movs	r3, #64	; 0x40
 800cfa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfaa:	6153      	str	r3, [r2, #20]
 800cfac:	2300      	movs	r3, #0
 800cfae:	2200      	movs	r2, #0
 800cfb0:	932e      	str	r3, [sp, #184]	; 0xb8
 800cfb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	9214      	str	r2, [sp, #80]	; 0x50
 800cfba:	9315      	str	r3, [sp, #84]	; 0x54
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	af2f      	add	r7, sp, #188	; 0xbc
 800cfc0:	972c      	str	r7, [sp, #176]	; 0xb0
 800cfc2:	931f      	str	r3, [sp, #124]	; 0x7c
 800cfc4:	931e      	str	r3, [sp, #120]	; 0x78
 800cfc6:	9312      	str	r3, [sp, #72]	; 0x48
 800cfc8:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfca:	931d      	str	r3, [sp, #116]	; 0x74
 800cfcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfce:	9d08      	ldr	r5, [sp, #32]
 800cfd0:	782b      	ldrb	r3, [r5, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <_svfprintf_r+0x84>
 800cfd6:	2b25      	cmp	r3, #37	; 0x25
 800cfd8:	d000      	beq.n	800cfdc <_svfprintf_r+0x84>
 800cfda:	e091      	b.n	800d100 <_svfprintf_r+0x1a8>
 800cfdc:	9b08      	ldr	r3, [sp, #32]
 800cfde:	1aee      	subs	r6, r5, r3
 800cfe0:	429d      	cmp	r5, r3
 800cfe2:	d016      	beq.n	800d012 <_svfprintf_r+0xba>
 800cfe4:	603b      	str	r3, [r7, #0]
 800cfe6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cfe8:	607e      	str	r6, [r7, #4]
 800cfea:	199b      	adds	r3, r3, r6
 800cfec:	932e      	str	r3, [sp, #184]	; 0xb8
 800cfee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cff0:	3708      	adds	r7, #8
 800cff2:	3301      	adds	r3, #1
 800cff4:	932d      	str	r3, [sp, #180]	; 0xb4
 800cff6:	2b07      	cmp	r3, #7
 800cff8:	dd08      	ble.n	800d00c <_svfprintf_r+0xb4>
 800cffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cffc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cffe:	aa2c      	add	r2, sp, #176	; 0xb0
 800d000:	f004 f8c0 	bl	8011184 <__ssprint_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	d000      	beq.n	800d00a <_svfprintf_r+0xb2>
 800d008:	e1cf      	b.n	800d3aa <_svfprintf_r+0x452>
 800d00a:	af2f      	add	r7, sp, #188	; 0xbc
 800d00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d00e:	199b      	adds	r3, r3, r6
 800d010:	9317      	str	r3, [sp, #92]	; 0x5c
 800d012:	782b      	ldrb	r3, [r5, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <_svfprintf_r+0xc4>
 800d018:	f001 f99e 	bl	800e358 <_svfprintf_r+0x1400>
 800d01c:	221b      	movs	r2, #27
 800d01e:	2300      	movs	r3, #0
 800d020:	a91e      	add	r1, sp, #120	; 0x78
 800d022:	1852      	adds	r2, r2, r1
 800d024:	7013      	strb	r3, [r2, #0]
 800d026:	2201      	movs	r2, #1
 800d028:	001e      	movs	r6, r3
 800d02a:	4252      	negs	r2, r2
 800d02c:	3501      	adds	r5, #1
 800d02e:	9209      	str	r2, [sp, #36]	; 0x24
 800d030:	9318      	str	r3, [sp, #96]	; 0x60
 800d032:	1c6b      	adds	r3, r5, #1
 800d034:	9313      	str	r3, [sp, #76]	; 0x4c
 800d036:	782b      	ldrb	r3, [r5, #0]
 800d038:	930f      	str	r3, [sp, #60]	; 0x3c
 800d03a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d03c:	3820      	subs	r0, #32
 800d03e:	285a      	cmp	r0, #90	; 0x5a
 800d040:	d901      	bls.n	800d046 <_svfprintf_r+0xee>
 800d042:	f000 fe20 	bl	800dc86 <_svfprintf_r+0xd2e>
 800d046:	f7f3 f86f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d04a:	0078      	.short	0x0078
 800d04c:	061e061e 	.word	0x061e061e
 800d050:	061e0082 	.word	0x061e0082
 800d054:	061e061e 	.word	0x061e061e
 800d058:	061e005d 	.word	0x061e005d
 800d05c:	0084061e 	.word	0x0084061e
 800d060:	061e008c 	.word	0x061e008c
 800d064:	0091008a 	.word	0x0091008a
 800d068:	00b2061e 	.word	0x00b2061e
 800d06c:	00b400b4 	.word	0x00b400b4
 800d070:	00b400b4 	.word	0x00b400b4
 800d074:	00b400b4 	.word	0x00b400b4
 800d078:	00b400b4 	.word	0x00b400b4
 800d07c:	061e00b4 	.word	0x061e00b4
 800d080:	061e061e 	.word	0x061e061e
 800d084:	061e061e 	.word	0x061e061e
 800d088:	061e061e 	.word	0x061e061e
 800d08c:	061e013b 	.word	0x061e013b
 800d090:	00f400e0 	.word	0x00f400e0
 800d094:	013b013b 	.word	0x013b013b
 800d098:	061e013b 	.word	0x061e013b
 800d09c:	061e061e 	.word	0x061e061e
 800d0a0:	00c7061e 	.word	0x00c7061e
 800d0a4:	061e061e 	.word	0x061e061e
 800d0a8:	061e04c7 	.word	0x061e04c7
 800d0ac:	061e061e 	.word	0x061e061e
 800d0b0:	061e050a 	.word	0x061e050a
 800d0b4:	061e052a 	.word	0x061e052a
 800d0b8:	055c061e 	.word	0x055c061e
 800d0bc:	061e061e 	.word	0x061e061e
 800d0c0:	061e061e 	.word	0x061e061e
 800d0c4:	061e061e 	.word	0x061e061e
 800d0c8:	061e061e 	.word	0x061e061e
 800d0cc:	061e013b 	.word	0x061e013b
 800d0d0:	00f600e0 	.word	0x00f600e0
 800d0d4:	013b013b 	.word	0x013b013b
 800d0d8:	00c9013b 	.word	0x00c9013b
 800d0dc:	00dc00f6 	.word	0x00dc00f6
 800d0e0:	00d5061e 	.word	0x00d5061e
 800d0e4:	04a7061e 	.word	0x04a7061e
 800d0e8:	04fa04c9 	.word	0x04fa04c9
 800d0ec:	061e00dc 	.word	0x061e00dc
 800d0f0:	0080050a 	.word	0x0080050a
 800d0f4:	061e052c 	.word	0x061e052c
 800d0f8:	057c061e 	.word	0x057c061e
 800d0fc:	0080061e 	.word	0x0080061e
 800d100:	3501      	adds	r5, #1
 800d102:	e765      	b.n	800cfd0 <_svfprintf_r+0x78>
 800d104:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d106:	f002 fcdd 	bl	800fac4 <_localeconv_r>
 800d10a:	6843      	ldr	r3, [r0, #4]
 800d10c:	0018      	movs	r0, r3
 800d10e:	931d      	str	r3, [sp, #116]	; 0x74
 800d110:	f7f2 fff8 	bl	8000104 <strlen>
 800d114:	901b      	str	r0, [sp, #108]	; 0x6c
 800d116:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d118:	f002 fcd4 	bl	800fac4 <_localeconv_r>
 800d11c:	6883      	ldr	r3, [r0, #8]
 800d11e:	9312      	str	r3, [sp, #72]	; 0x48
 800d120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d122:	2b00      	cmp	r3, #0
 800d124:	d011      	beq.n	800d14a <_svfprintf_r+0x1f2>
 800d126:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00e      	beq.n	800d14a <_svfprintf_r+0x1f2>
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00b      	beq.n	800d14a <_svfprintf_r+0x1f2>
 800d132:	2380      	movs	r3, #128	; 0x80
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	431e      	orrs	r6, r3
 800d138:	e007      	b.n	800d14a <_svfprintf_r+0x1f2>
 800d13a:	231b      	movs	r3, #27
 800d13c:	aa1e      	add	r2, sp, #120	; 0x78
 800d13e:	189b      	adds	r3, r3, r2
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	2a00      	cmp	r2, #0
 800d144:	d101      	bne.n	800d14a <_svfprintf_r+0x1f2>
 800d146:	3220      	adds	r2, #32
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d14c:	e771      	b.n	800d032 <_svfprintf_r+0xda>
 800d14e:	2301      	movs	r3, #1
 800d150:	e7f1      	b.n	800d136 <_svfprintf_r+0x1de>
 800d152:	cc08      	ldmia	r4!, {r3}
 800d154:	9318      	str	r3, [sp, #96]	; 0x60
 800d156:	2b00      	cmp	r3, #0
 800d158:	daf7      	bge.n	800d14a <_svfprintf_r+0x1f2>
 800d15a:	425b      	negs	r3, r3
 800d15c:	9318      	str	r3, [sp, #96]	; 0x60
 800d15e:	2304      	movs	r3, #4
 800d160:	e7e9      	b.n	800d136 <_svfprintf_r+0x1de>
 800d162:	231b      	movs	r3, #27
 800d164:	aa1e      	add	r2, sp, #120	; 0x78
 800d166:	189b      	adds	r3, r3, r2
 800d168:	222b      	movs	r2, #43	; 0x2b
 800d16a:	e7ed      	b.n	800d148 <_svfprintf_r+0x1f0>
 800d16c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d170:	7812      	ldrb	r2, [r2, #0]
 800d172:	3301      	adds	r3, #1
 800d174:	920f      	str	r2, [sp, #60]	; 0x3c
 800d176:	2a2a      	cmp	r2, #42	; 0x2a
 800d178:	d010      	beq.n	800d19c <_svfprintf_r+0x244>
 800d17a:	2200      	movs	r2, #0
 800d17c:	9209      	str	r2, [sp, #36]	; 0x24
 800d17e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d180:	9313      	str	r3, [sp, #76]	; 0x4c
 800d182:	3a30      	subs	r2, #48	; 0x30
 800d184:	2a09      	cmp	r2, #9
 800d186:	d900      	bls.n	800d18a <_svfprintf_r+0x232>
 800d188:	e757      	b.n	800d03a <_svfprintf_r+0xe2>
 800d18a:	200a      	movs	r0, #10
 800d18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d18e:	4341      	muls	r1, r0
 800d190:	188a      	adds	r2, r1, r2
 800d192:	9209      	str	r2, [sp, #36]	; 0x24
 800d194:	781a      	ldrb	r2, [r3, #0]
 800d196:	3301      	adds	r3, #1
 800d198:	920f      	str	r2, [sp, #60]	; 0x3c
 800d19a:	e7f0      	b.n	800d17e <_svfprintf_r+0x226>
 800d19c:	cc04      	ldmia	r4!, {r2}
 800d19e:	9209      	str	r2, [sp, #36]	; 0x24
 800d1a0:	2a00      	cmp	r2, #0
 800d1a2:	da02      	bge.n	800d1aa <_svfprintf_r+0x252>
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	4252      	negs	r2, r2
 800d1a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d1aa:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1ac:	e7cd      	b.n	800d14a <_svfprintf_r+0x1f2>
 800d1ae:	2380      	movs	r3, #128	; 0x80
 800d1b0:	e7c1      	b.n	800d136 <_svfprintf_r+0x1de>
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1b6:	9218      	str	r2, [sp, #96]	; 0x60
 800d1b8:	210a      	movs	r1, #10
 800d1ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1bc:	434a      	muls	r2, r1
 800d1be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1c0:	3930      	subs	r1, #48	; 0x30
 800d1c2:	188a      	adds	r2, r1, r2
 800d1c4:	9218      	str	r2, [sp, #96]	; 0x60
 800d1c6:	001a      	movs	r2, r3
 800d1c8:	7812      	ldrb	r2, [r2, #0]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	920f      	str	r2, [sp, #60]	; 0x3c
 800d1ce:	3a30      	subs	r2, #48	; 0x30
 800d1d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1d2:	2a09      	cmp	r2, #9
 800d1d4:	d9f0      	bls.n	800d1b8 <_svfprintf_r+0x260>
 800d1d6:	e730      	b.n	800d03a <_svfprintf_r+0xe2>
 800d1d8:	2308      	movs	r3, #8
 800d1da:	e7ac      	b.n	800d136 <_svfprintf_r+0x1de>
 800d1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b68      	cmp	r3, #104	; 0x68
 800d1e2:	d105      	bne.n	800d1f0 <_svfprintf_r+0x298>
 800d1e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1ea:	2380      	movs	r3, #128	; 0x80
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	e7a2      	b.n	800d136 <_svfprintf_r+0x1de>
 800d1f0:	2340      	movs	r3, #64	; 0x40
 800d1f2:	e7a0      	b.n	800d136 <_svfprintf_r+0x1de>
 800d1f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b6c      	cmp	r3, #108	; 0x6c
 800d1fa:	d104      	bne.n	800d206 <_svfprintf_r+0x2ae>
 800d1fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1fe:	3301      	adds	r3, #1
 800d200:	9313      	str	r3, [sp, #76]	; 0x4c
 800d202:	2320      	movs	r3, #32
 800d204:	e797      	b.n	800d136 <_svfprintf_r+0x1de>
 800d206:	2310      	movs	r3, #16
 800d208:	e795      	b.n	800d136 <_svfprintf_r+0x1de>
 800d20a:	0021      	movs	r1, r4
 800d20c:	c904      	ldmia	r1!, {r2}
 800d20e:	ab3f      	add	r3, sp, #252	; 0xfc
 800d210:	910d      	str	r1, [sp, #52]	; 0x34
 800d212:	211b      	movs	r1, #27
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	2200      	movs	r2, #0
 800d218:	a81e      	add	r0, sp, #120	; 0x78
 800d21a:	1809      	adds	r1, r1, r0
 800d21c:	700a      	strb	r2, [r1, #0]
 800d21e:	920c      	str	r2, [sp, #48]	; 0x30
 800d220:	3201      	adds	r2, #1
 800d222:	9209      	str	r2, [sp, #36]	; 0x24
 800d224:	2200      	movs	r2, #0
 800d226:	9308      	str	r3, [sp, #32]
 800d228:	0015      	movs	r5, r2
 800d22a:	9219      	str	r2, [sp, #100]	; 0x64
 800d22c:	9210      	str	r2, [sp, #64]	; 0x40
 800d22e:	9211      	str	r2, [sp, #68]	; 0x44
 800d230:	e1f1      	b.n	800d616 <_svfprintf_r+0x6be>
 800d232:	2310      	movs	r3, #16
 800d234:	431e      	orrs	r6, r3
 800d236:	06b3      	lsls	r3, r6, #26
 800d238:	d531      	bpl.n	800d29e <_svfprintf_r+0x346>
 800d23a:	2307      	movs	r3, #7
 800d23c:	3407      	adds	r4, #7
 800d23e:	439c      	bics	r4, r3
 800d240:	0022      	movs	r2, r4
 800d242:	ca18      	ldmia	r2!, {r3, r4}
 800d244:	9306      	str	r3, [sp, #24]
 800d246:	9407      	str	r4, [sp, #28]
 800d248:	920d      	str	r2, [sp, #52]	; 0x34
 800d24a:	9a07      	ldr	r2, [sp, #28]
 800d24c:	2301      	movs	r3, #1
 800d24e:	2a00      	cmp	r2, #0
 800d250:	da0b      	bge.n	800d26a <_svfprintf_r+0x312>
 800d252:	9c06      	ldr	r4, [sp, #24]
 800d254:	9d07      	ldr	r5, [sp, #28]
 800d256:	2200      	movs	r2, #0
 800d258:	4261      	negs	r1, r4
 800d25a:	41aa      	sbcs	r2, r5
 800d25c:	9106      	str	r1, [sp, #24]
 800d25e:	9207      	str	r2, [sp, #28]
 800d260:	221b      	movs	r2, #27
 800d262:	a91e      	add	r1, sp, #120	; 0x78
 800d264:	1852      	adds	r2, r2, r1
 800d266:	212d      	movs	r1, #45	; 0x2d
 800d268:	7011      	strb	r1, [r2, #0]
 800d26a:	9907      	ldr	r1, [sp, #28]
 800d26c:	9a06      	ldr	r2, [sp, #24]
 800d26e:	430a      	orrs	r2, r1
 800d270:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d272:	3101      	adds	r1, #1
 800d274:	d101      	bne.n	800d27a <_svfprintf_r+0x322>
 800d276:	f001 f87b 	bl	800e370 <_svfprintf_r+0x1418>
 800d27a:	2180      	movs	r1, #128	; 0x80
 800d27c:	0034      	movs	r4, r6
 800d27e:	438c      	bics	r4, r1
 800d280:	2a00      	cmp	r2, #0
 800d282:	d001      	beq.n	800d288 <_svfprintf_r+0x330>
 800d284:	f001 f879 	bl	800e37a <_svfprintf_r+0x1422>
 800d288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d101      	bne.n	800d292 <_svfprintf_r+0x33a>
 800d28e:	f000 fcef 	bl	800dc70 <_svfprintf_r+0xd18>
 800d292:	2b01      	cmp	r3, #1
 800d294:	d001      	beq.n	800d29a <_svfprintf_r+0x342>
 800d296:	f001 f874 	bl	800e382 <_svfprintf_r+0x142a>
 800d29a:	f000 fc79 	bl	800db90 <_svfprintf_r+0xc38>
 800d29e:	0022      	movs	r2, r4
 800d2a0:	ca08      	ldmia	r2!, {r3}
 800d2a2:	920d      	str	r2, [sp, #52]	; 0x34
 800d2a4:	06f2      	lsls	r2, r6, #27
 800d2a6:	d503      	bpl.n	800d2b0 <_svfprintf_r+0x358>
 800d2a8:	9306      	str	r3, [sp, #24]
 800d2aa:	17db      	asrs	r3, r3, #31
 800d2ac:	9307      	str	r3, [sp, #28]
 800d2ae:	e7cc      	b.n	800d24a <_svfprintf_r+0x2f2>
 800d2b0:	0672      	lsls	r2, r6, #25
 800d2b2:	d501      	bpl.n	800d2b8 <_svfprintf_r+0x360>
 800d2b4:	b21b      	sxth	r3, r3
 800d2b6:	e7f7      	b.n	800d2a8 <_svfprintf_r+0x350>
 800d2b8:	05b2      	lsls	r2, r6, #22
 800d2ba:	d5f5      	bpl.n	800d2a8 <_svfprintf_r+0x350>
 800d2bc:	b25b      	sxtb	r3, r3
 800d2be:	e7f3      	b.n	800d2a8 <_svfprintf_r+0x350>
 800d2c0:	2307      	movs	r3, #7
 800d2c2:	3407      	adds	r4, #7
 800d2c4:	439c      	bics	r4, r3
 800d2c6:	0022      	movs	r2, r4
 800d2c8:	ca18      	ldmia	r2!, {r3, r4}
 800d2ca:	920d      	str	r2, [sp, #52]	; 0x34
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	9314      	str	r3, [sp, #80]	; 0x50
 800d2d0:	9415      	str	r4, [sp, #84]	; 0x54
 800d2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d2d6:	005c      	lsls	r4, r3, #1
 800d2d8:	0864      	lsrs	r4, r4, #1
 800d2da:	0028      	movs	r0, r5
 800d2dc:	0021      	movs	r1, r4
 800d2de:	4b3e      	ldr	r3, [pc, #248]	; (800d3d8 <_svfprintf_r+0x480>)
 800d2e0:	4252      	negs	r2, r2
 800d2e2:	f7f5 f807 	bl	80022f4 <__aeabi_dcmpun>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d126      	bne.n	800d338 <_svfprintf_r+0x3e0>
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	0028      	movs	r0, r5
 800d2ee:	0021      	movs	r1, r4
 800d2f0:	4b39      	ldr	r3, [pc, #228]	; (800d3d8 <_svfprintf_r+0x480>)
 800d2f2:	4252      	negs	r2, r2
 800d2f4:	f7f3 f8b8 	bl	8000468 <__aeabi_dcmple>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d11d      	bne.n	800d338 <_svfprintf_r+0x3e0>
 800d2fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d2fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d300:	2200      	movs	r2, #0
 800d302:	2300      	movs	r3, #0
 800d304:	f7f3 f8a6 	bl	8000454 <__aeabi_dcmplt>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d004      	beq.n	800d316 <_svfprintf_r+0x3be>
 800d30c:	231b      	movs	r3, #27
 800d30e:	aa1e      	add	r2, sp, #120	; 0x78
 800d310:	189b      	adds	r3, r3, r2
 800d312:	222d      	movs	r2, #45	; 0x2d
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	4b31      	ldr	r3, [pc, #196]	; (800d3dc <_svfprintf_r+0x484>)
 800d318:	9308      	str	r3, [sp, #32]
 800d31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d31c:	2b47      	cmp	r3, #71	; 0x47
 800d31e:	dd01      	ble.n	800d324 <_svfprintf_r+0x3cc>
 800d320:	4b2f      	ldr	r3, [pc, #188]	; (800d3e0 <_svfprintf_r+0x488>)
 800d322:	9308      	str	r3, [sp, #32]
 800d324:	2380      	movs	r3, #128	; 0x80
 800d326:	439e      	bics	r6, r3
 800d328:	2300      	movs	r3, #0
 800d32a:	930c      	str	r3, [sp, #48]	; 0x30
 800d32c:	3303      	adds	r3, #3
 800d32e:	9309      	str	r3, [sp, #36]	; 0x24
 800d330:	2300      	movs	r3, #0
 800d332:	9319      	str	r3, [sp, #100]	; 0x64
 800d334:	f000 fc78 	bl	800dc28 <_svfprintf_r+0xcd0>
 800d338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d33c:	0010      	movs	r0, r2
 800d33e:	0019      	movs	r1, r3
 800d340:	f7f4 ffd8 	bl	80022f4 <__aeabi_dcmpun>
 800d344:	2800      	cmp	r0, #0
 800d346:	d00e      	beq.n	800d366 <_svfprintf_r+0x40e>
 800d348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	da04      	bge.n	800d358 <_svfprintf_r+0x400>
 800d34e:	231b      	movs	r3, #27
 800d350:	aa1e      	add	r2, sp, #120	; 0x78
 800d352:	189b      	adds	r3, r3, r2
 800d354:	222d      	movs	r2, #45	; 0x2d
 800d356:	701a      	strb	r2, [r3, #0]
 800d358:	4b22      	ldr	r3, [pc, #136]	; (800d3e4 <_svfprintf_r+0x48c>)
 800d35a:	9308      	str	r3, [sp, #32]
 800d35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d35e:	2b47      	cmp	r3, #71	; 0x47
 800d360:	dde0      	ble.n	800d324 <_svfprintf_r+0x3cc>
 800d362:	4b21      	ldr	r3, [pc, #132]	; (800d3e8 <_svfprintf_r+0x490>)
 800d364:	e7dd      	b.n	800d322 <_svfprintf_r+0x3ca>
 800d366:	2320      	movs	r3, #32
 800d368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d36a:	439a      	bics	r2, r3
 800d36c:	9210      	str	r2, [sp, #64]	; 0x40
 800d36e:	2a41      	cmp	r2, #65	; 0x41
 800d370:	d123      	bne.n	800d3ba <_svfprintf_r+0x462>
 800d372:	2230      	movs	r2, #48	; 0x30
 800d374:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d376:	ab25      	add	r3, sp, #148	; 0x94
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	3248      	adds	r2, #72	; 0x48
 800d37c:	2961      	cmp	r1, #97	; 0x61
 800d37e:	d000      	beq.n	800d382 <_svfprintf_r+0x42a>
 800d380:	3a20      	subs	r2, #32
 800d382:	705a      	strb	r2, [r3, #1]
 800d384:	2302      	movs	r3, #2
 800d386:	431e      	orrs	r6, r3
 800d388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38a:	2b63      	cmp	r3, #99	; 0x63
 800d38c:	dd2e      	ble.n	800d3ec <_svfprintf_r+0x494>
 800d38e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d390:	1c59      	adds	r1, r3, #1
 800d392:	f7fd f969 	bl	800a668 <_malloc_r>
 800d396:	9008      	str	r0, [sp, #32]
 800d398:	2800      	cmp	r0, #0
 800d39a:	d000      	beq.n	800d39e <_svfprintf_r+0x446>
 800d39c:	e216      	b.n	800d7cc <_svfprintf_r+0x874>
 800d39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a0:	899a      	ldrh	r2, [r3, #12]
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3a8:	8193      	strh	r3, [r2, #12]
 800d3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ac:	899b      	ldrh	r3, [r3, #12]
 800d3ae:	065b      	lsls	r3, r3, #25
 800d3b0:	d400      	bmi.n	800d3b4 <_svfprintf_r+0x45c>
 800d3b2:	e5f5      	b.n	800cfa0 <_svfprintf_r+0x48>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	425b      	negs	r3, r3
 800d3b8:	e5f1      	b.n	800cf9e <_svfprintf_r+0x46>
 800d3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3bc:	900c      	str	r0, [sp, #48]	; 0x30
 800d3be:	3301      	adds	r3, #1
 800d3c0:	d100      	bne.n	800d3c4 <_svfprintf_r+0x46c>
 800d3c2:	e206      	b.n	800d7d2 <_svfprintf_r+0x87a>
 800d3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3c6:	2b47      	cmp	r3, #71	; 0x47
 800d3c8:	d114      	bne.n	800d3f4 <_svfprintf_r+0x49c>
 800d3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d111      	bne.n	800d3f4 <_svfprintf_r+0x49c>
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d4:	e00e      	b.n	800d3f4 <_svfprintf_r+0x49c>
 800d3d6:	46c0      	nop			; (mov r8, r8)
 800d3d8:	7fefffff 	.word	0x7fefffff
 800d3dc:	080145f4 	.word	0x080145f4
 800d3e0:	080145f8 	.word	0x080145f8
 800d3e4:	080145fc 	.word	0x080145fc
 800d3e8:	08014600 	.word	0x08014600
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f0:	ab3f      	add	r3, sp, #252	; 0xfc
 800d3f2:	9308      	str	r3, [sp, #32]
 800d3f4:	2380      	movs	r3, #128	; 0x80
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4333      	orrs	r3, r6
 800d3fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d400:	2b00      	cmp	r3, #0
 800d402:	db00      	blt.n	800d406 <_svfprintf_r+0x4ae>
 800d404:	e1e7      	b.n	800d7d6 <_svfprintf_r+0x87e>
 800d406:	2280      	movs	r2, #128	; 0x80
 800d408:	0612      	lsls	r2, r2, #24
 800d40a:	4694      	mov	ip, r2
 800d40c:	4463      	add	r3, ip
 800d40e:	930e      	str	r3, [sp, #56]	; 0x38
 800d410:	232d      	movs	r3, #45	; 0x2d
 800d412:	9322      	str	r3, [sp, #136]	; 0x88
 800d414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d416:	2b41      	cmp	r3, #65	; 0x41
 800d418:	d000      	beq.n	800d41c <_svfprintf_r+0x4c4>
 800d41a:	e1f5      	b.n	800d808 <_svfprintf_r+0x8b0>
 800d41c:	0028      	movs	r0, r5
 800d41e:	aa26      	add	r2, sp, #152	; 0x98
 800d420:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d422:	f002 fb73 	bl	800fb0c <frexp>
 800d426:	23ff      	movs	r3, #255	; 0xff
 800d428:	2200      	movs	r2, #0
 800d42a:	059b      	lsls	r3, r3, #22
 800d42c:	f7f4 f91e 	bl	800166c <__aeabi_dmul>
 800d430:	2200      	movs	r2, #0
 800d432:	2300      	movs	r3, #0
 800d434:	0004      	movs	r4, r0
 800d436:	000d      	movs	r5, r1
 800d438:	f7f3 f806 	bl	8000448 <__aeabi_dcmpeq>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d001      	beq.n	800d444 <_svfprintf_r+0x4ec>
 800d440:	2301      	movs	r3, #1
 800d442:	9326      	str	r3, [sp, #152]	; 0x98
 800d444:	4bda      	ldr	r3, [pc, #872]	; (800d7b0 <_svfprintf_r+0x858>)
 800d446:	9319      	str	r3, [sp, #100]	; 0x64
 800d448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d44a:	2b61      	cmp	r3, #97	; 0x61
 800d44c:	d001      	beq.n	800d452 <_svfprintf_r+0x4fa>
 800d44e:	4bd9      	ldr	r3, [pc, #868]	; (800d7b4 <_svfprintf_r+0x85c>)
 800d450:	9319      	str	r3, [sp, #100]	; 0x64
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	930e      	str	r3, [sp, #56]	; 0x38
 800d456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d458:	3b01      	subs	r3, #1
 800d45a:	9311      	str	r3, [sp, #68]	; 0x44
 800d45c:	2200      	movs	r2, #0
 800d45e:	4bd6      	ldr	r3, [pc, #856]	; (800d7b8 <_svfprintf_r+0x860>)
 800d460:	0020      	movs	r0, r4
 800d462:	0029      	movs	r1, r5
 800d464:	f7f4 f902 	bl	800166c <__aeabi_dmul>
 800d468:	000d      	movs	r5, r1
 800d46a:	0004      	movs	r4, r0
 800d46c:	f7f4 ff60 	bl	8002330 <__aeabi_d2iz>
 800d470:	9021      	str	r0, [sp, #132]	; 0x84
 800d472:	f7f4 ff93 	bl	800239c <__aeabi_i2d>
 800d476:	0002      	movs	r2, r0
 800d478:	000b      	movs	r3, r1
 800d47a:	0020      	movs	r0, r4
 800d47c:	0029      	movs	r1, r5
 800d47e:	f7f4 fbb7 	bl	8001bf0 <__aeabi_dsub>
 800d482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d484:	000d      	movs	r5, r1
 800d486:	001a      	movs	r2, r3
 800d488:	3201      	adds	r2, #1
 800d48a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d48c:	920e      	str	r2, [sp, #56]	; 0x38
 800d48e:	9223      	str	r2, [sp, #140]	; 0x8c
 800d490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d492:	0004      	movs	r4, r0
 800d494:	5c52      	ldrb	r2, [r2, r1]
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d49a:	9320      	str	r3, [sp, #128]	; 0x80
 800d49c:	3301      	adds	r3, #1
 800d49e:	d00a      	beq.n	800d4b6 <_svfprintf_r+0x55e>
 800d4a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	9311      	str	r3, [sp, #68]	; 0x44
 800d4a8:	0020      	movs	r0, r4
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	0029      	movs	r1, r5
 800d4ae:	f7f2 ffcb 	bl	8000448 <__aeabi_dcmpeq>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d0d2      	beq.n	800d45c <_svfprintf_r+0x504>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	0020      	movs	r0, r4
 800d4ba:	0029      	movs	r1, r5
 800d4bc:	4bbf      	ldr	r3, [pc, #764]	; (800d7bc <_svfprintf_r+0x864>)
 800d4be:	f7f2 ffdd 	bl	800047c <__aeabi_dcmpgt>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d10c      	bne.n	800d4e0 <_svfprintf_r+0x588>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	0029      	movs	r1, r5
 800d4cc:	4bbb      	ldr	r3, [pc, #748]	; (800d7bc <_svfprintf_r+0x864>)
 800d4ce:	f7f2 ffbb 	bl	8000448 <__aeabi_dcmpeq>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d100      	bne.n	800d4d8 <_svfprintf_r+0x580>
 800d4d6:	e191      	b.n	800d7fc <_svfprintf_r+0x8a4>
 800d4d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4da:	07db      	lsls	r3, r3, #31
 800d4dc:	d400      	bmi.n	800d4e0 <_svfprintf_r+0x588>
 800d4de:	e18d      	b.n	800d7fc <_svfprintf_r+0x8a4>
 800d4e0:	2030      	movs	r0, #48	; 0x30
 800d4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4e4:	932a      	str	r3, [sp, #168]	; 0xa8
 800d4e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4e8:	7bdb      	ldrb	r3, [r3, #15]
 800d4ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d4ec:	3a01      	subs	r2, #1
 800d4ee:	922a      	str	r2, [sp, #168]	; 0xa8
 800d4f0:	7811      	ldrb	r1, [r2, #0]
 800d4f2:	4299      	cmp	r1, r3
 800d4f4:	d100      	bne.n	800d4f8 <_svfprintf_r+0x5a0>
 800d4f6:	e171      	b.n	800d7dc <_svfprintf_r+0x884>
 800d4f8:	1c4b      	adds	r3, r1, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2939      	cmp	r1, #57	; 0x39
 800d4fe:	d101      	bne.n	800d504 <_svfprintf_r+0x5ac>
 800d500:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d502:	7a9b      	ldrb	r3, [r3, #10]
 800d504:	7013      	strb	r3, [r2, #0]
 800d506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d508:	9a08      	ldr	r2, [sp, #32]
 800d50a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d50c:	1a9b      	subs	r3, r3, r2
 800d50e:	930e      	str	r3, [sp, #56]	; 0x38
 800d510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d512:	2b47      	cmp	r3, #71	; 0x47
 800d514:	d000      	beq.n	800d518 <_svfprintf_r+0x5c0>
 800d516:	e1c4      	b.n	800d8a2 <_svfprintf_r+0x94a>
 800d518:	1ceb      	adds	r3, r5, #3
 800d51a:	db03      	blt.n	800d524 <_svfprintf_r+0x5cc>
 800d51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51e:	42ab      	cmp	r3, r5
 800d520:	db00      	blt.n	800d524 <_svfprintf_r+0x5cc>
 800d522:	e1e6      	b.n	800d8f2 <_svfprintf_r+0x99a>
 800d524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d526:	3b02      	subs	r3, #2
 800d528:	930f      	str	r3, [sp, #60]	; 0x3c
 800d52a:	223c      	movs	r2, #60	; 0x3c
 800d52c:	466b      	mov	r3, sp
 800d52e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d530:	189b      	adds	r3, r3, r2
 800d532:	1e6c      	subs	r4, r5, #1
 800d534:	3a1c      	subs	r2, #28
 800d536:	2000      	movs	r0, #0
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	9426      	str	r4, [sp, #152]	; 0x98
 800d53c:	4391      	bics	r1, r2
 800d53e:	2941      	cmp	r1, #65	; 0x41
 800d540:	d102      	bne.n	800d548 <_svfprintf_r+0x5f0>
 800d542:	330f      	adds	r3, #15
 800d544:	b2db      	uxtb	r3, r3
 800d546:	3001      	adds	r0, #1
 800d548:	a928      	add	r1, sp, #160	; 0xa0
 800d54a:	700b      	strb	r3, [r1, #0]
 800d54c:	232b      	movs	r3, #43	; 0x2b
 800d54e:	2c00      	cmp	r4, #0
 800d550:	da02      	bge.n	800d558 <_svfprintf_r+0x600>
 800d552:	2401      	movs	r4, #1
 800d554:	3302      	adds	r3, #2
 800d556:	1b64      	subs	r4, r4, r5
 800d558:	704b      	strb	r3, [r1, #1]
 800d55a:	2c09      	cmp	r4, #9
 800d55c:	dc00      	bgt.n	800d560 <_svfprintf_r+0x608>
 800d55e:	e1ba      	b.n	800d8d6 <_svfprintf_r+0x97e>
 800d560:	2337      	movs	r3, #55	; 0x37
 800d562:	250a      	movs	r5, #10
 800d564:	aa1e      	add	r2, sp, #120	; 0x78
 800d566:	189b      	adds	r3, r3, r2
 800d568:	9310      	str	r3, [sp, #64]	; 0x40
 800d56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d56c:	0020      	movs	r0, r4
 800d56e:	9309      	str	r3, [sp, #36]	; 0x24
 800d570:	0029      	movs	r1, r5
 800d572:	3b01      	subs	r3, #1
 800d574:	9310      	str	r3, [sp, #64]	; 0x40
 800d576:	f7f2 ff51 	bl	800041c <__aeabi_idivmod>
 800d57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d57c:	3130      	adds	r1, #48	; 0x30
 800d57e:	7019      	strb	r1, [r3, #0]
 800d580:	0020      	movs	r0, r4
 800d582:	0029      	movs	r1, r5
 800d584:	9411      	str	r4, [sp, #68]	; 0x44
 800d586:	f7f2 fe63 	bl	8000250 <__divsi3>
 800d58a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d58c:	0004      	movs	r4, r0
 800d58e:	2b63      	cmp	r3, #99	; 0x63
 800d590:	dceb      	bgt.n	800d56a <_svfprintf_r+0x612>
 800d592:	222a      	movs	r2, #42	; 0x2a
 800d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d596:	a81e      	add	r0, sp, #120	; 0x78
 800d598:	1e99      	subs	r1, r3, #2
 800d59a:	1812      	adds	r2, r2, r0
 800d59c:	2037      	movs	r0, #55	; 0x37
 800d59e:	000b      	movs	r3, r1
 800d5a0:	3430      	adds	r4, #48	; 0x30
 800d5a2:	700c      	strb	r4, [r1, #0]
 800d5a4:	ac1e      	add	r4, sp, #120	; 0x78
 800d5a6:	1900      	adds	r0, r0, r4
 800d5a8:	4283      	cmp	r3, r0
 800d5aa:	d200      	bcs.n	800d5ae <_svfprintf_r+0x656>
 800d5ac:	e18e      	b.n	800d8cc <_svfprintf_r+0x974>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4281      	cmp	r1, r0
 800d5b2:	d804      	bhi.n	800d5be <_svfprintf_r+0x666>
 800d5b4:	aa1e      	add	r2, sp, #120	; 0x78
 800d5b6:	3339      	adds	r3, #57	; 0x39
 800d5b8:	189b      	adds	r3, r3, r2
 800d5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5bc:	1a9b      	subs	r3, r3, r2
 800d5be:	222a      	movs	r2, #42	; 0x2a
 800d5c0:	a91e      	add	r1, sp, #120	; 0x78
 800d5c2:	1852      	adds	r2, r2, r1
 800d5c4:	18d3      	adds	r3, r2, r3
 800d5c6:	aa28      	add	r2, sp, #160	; 0xa0
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	931e      	str	r3, [sp, #120]	; 0x78
 800d5cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5d0:	4694      	mov	ip, r2
 800d5d2:	4463      	add	r3, ip
 800d5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	dc01      	bgt.n	800d5e0 <_svfprintf_r+0x688>
 800d5dc:	07f3      	lsls	r3, r6, #31
 800d5de:	d504      	bpl.n	800d5ea <_svfprintf_r+0x692>
 800d5e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e4:	4694      	mov	ip, r2
 800d5e6:	4463      	add	r3, ip
 800d5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ea:	2280      	movs	r2, #128	; 0x80
 800d5ec:	4b74      	ldr	r3, [pc, #464]	; (800d7c0 <_svfprintf_r+0x868>)
 800d5ee:	0052      	lsls	r2, r2, #1
 800d5f0:	4033      	ands	r3, r6
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	001d      	movs	r5, r3
 800d5f8:	921a      	str	r2, [sp, #104]	; 0x68
 800d5fa:	9310      	str	r3, [sp, #64]	; 0x40
 800d5fc:	9311      	str	r3, [sp, #68]	; 0x44
 800d5fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d600:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d602:	9319      	str	r3, [sp, #100]	; 0x64
 800d604:	2b00      	cmp	r3, #0
 800d606:	d006      	beq.n	800d616 <_svfprintf_r+0x6be>
 800d608:	231b      	movs	r3, #27
 800d60a:	aa1e      	add	r2, sp, #120	; 0x78
 800d60c:	189b      	adds	r3, r3, r2
 800d60e:	222d      	movs	r2, #45	; 0x2d
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	2300      	movs	r3, #0
 800d614:	9319      	str	r3, [sp, #100]	; 0x64
 800d616:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d61a:	931a      	str	r3, [sp, #104]	; 0x68
 800d61c:	4293      	cmp	r3, r2
 800d61e:	da00      	bge.n	800d622 <_svfprintf_r+0x6ca>
 800d620:	921a      	str	r2, [sp, #104]	; 0x68
 800d622:	231b      	movs	r3, #27
 800d624:	aa1e      	add	r2, sp, #120	; 0x78
 800d626:	189b      	adds	r3, r3, r2
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	1e5a      	subs	r2, r3, #1
 800d62c:	4193      	sbcs	r3, r2
 800d62e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d630:	18d3      	adds	r3, r2, r3
 800d632:	931a      	str	r3, [sp, #104]	; 0x68
 800d634:	0032      	movs	r2, r6
 800d636:	2302      	movs	r3, #2
 800d638:	401a      	ands	r2, r3
 800d63a:	9220      	str	r2, [sp, #128]	; 0x80
 800d63c:	421e      	tst	r6, r3
 800d63e:	d002      	beq.n	800d646 <_svfprintf_r+0x6ee>
 800d640:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d642:	3302      	adds	r3, #2
 800d644:	931a      	str	r3, [sp, #104]	; 0x68
 800d646:	2384      	movs	r3, #132	; 0x84
 800d648:	0032      	movs	r2, r6
 800d64a:	401a      	ands	r2, r3
 800d64c:	9221      	str	r2, [sp, #132]	; 0x84
 800d64e:	421e      	tst	r6, r3
 800d650:	d11f      	bne.n	800d692 <_svfprintf_r+0x73a>
 800d652:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d654:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d656:	1a9c      	subs	r4, r3, r2
 800d658:	2c00      	cmp	r4, #0
 800d65a:	dd1a      	ble.n	800d692 <_svfprintf_r+0x73a>
 800d65c:	0039      	movs	r1, r7
 800d65e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d660:	4858      	ldr	r0, [pc, #352]	; (800d7c4 <_svfprintf_r+0x86c>)
 800d662:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d664:	3301      	adds	r3, #1
 800d666:	3108      	adds	r1, #8
 800d668:	6038      	str	r0, [r7, #0]
 800d66a:	2c10      	cmp	r4, #16
 800d66c:	dd00      	ble.n	800d670 <_svfprintf_r+0x718>
 800d66e:	e31c      	b.n	800dcaa <_svfprintf_r+0xd52>
 800d670:	607c      	str	r4, [r7, #4]
 800d672:	18a4      	adds	r4, r4, r2
 800d674:	000f      	movs	r7, r1
 800d676:	942e      	str	r4, [sp, #184]	; 0xb8
 800d678:	932d      	str	r3, [sp, #180]	; 0xb4
 800d67a:	2b07      	cmp	r3, #7
 800d67c:	dd09      	ble.n	800d692 <_svfprintf_r+0x73a>
 800d67e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d680:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d682:	aa2c      	add	r2, sp, #176	; 0xb0
 800d684:	f003 fd7e 	bl	8011184 <__ssprint_r>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d001      	beq.n	800d690 <_svfprintf_r+0x738>
 800d68c:	f000 fe43 	bl	800e316 <_svfprintf_r+0x13be>
 800d690:	af2f      	add	r7, sp, #188	; 0xbc
 800d692:	221b      	movs	r2, #27
 800d694:	a91e      	add	r1, sp, #120	; 0x78
 800d696:	1852      	adds	r2, r2, r1
 800d698:	7811      	ldrb	r1, [r2, #0]
 800d69a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d69c:	2900      	cmp	r1, #0
 800d69e:	d014      	beq.n	800d6ca <_svfprintf_r+0x772>
 800d6a0:	603a      	str	r2, [r7, #0]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	189b      	adds	r3, r3, r2
 800d6a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	189b      	adds	r3, r3, r2
 800d6ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	2b07      	cmp	r3, #7
 800d6b4:	dd09      	ble.n	800d6ca <_svfprintf_r+0x772>
 800d6b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800d6bc:	f003 fd62 	bl	8011184 <__ssprint_r>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d001      	beq.n	800d6c8 <_svfprintf_r+0x770>
 800d6c4:	f000 fe27 	bl	800e316 <_svfprintf_r+0x13be>
 800d6c8:	af2f      	add	r7, sp, #188	; 0xbc
 800d6ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	d015      	beq.n	800d6fe <_svfprintf_r+0x7a6>
 800d6d2:	aa25      	add	r2, sp, #148	; 0x94
 800d6d4:	603a      	str	r2, [r7, #0]
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	189b      	adds	r3, r3, r2
 800d6da:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	2b07      	cmp	r3, #7
 800d6e8:	dd09      	ble.n	800d6fe <_svfprintf_r+0x7a6>
 800d6ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800d6f0:	f003 fd48 	bl	8011184 <__ssprint_r>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d001      	beq.n	800d6fc <_svfprintf_r+0x7a4>
 800d6f8:	f000 fe0d 	bl	800e316 <_svfprintf_r+0x13be>
 800d6fc:	af2f      	add	r7, sp, #188	; 0xbc
 800d6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d700:	2b80      	cmp	r3, #128	; 0x80
 800d702:	d11f      	bne.n	800d744 <_svfprintf_r+0x7ec>
 800d704:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d706:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d708:	1a9c      	subs	r4, r3, r2
 800d70a:	2c00      	cmp	r4, #0
 800d70c:	dd1a      	ble.n	800d744 <_svfprintf_r+0x7ec>
 800d70e:	0039      	movs	r1, r7
 800d710:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d712:	482d      	ldr	r0, [pc, #180]	; (800d7c8 <_svfprintf_r+0x870>)
 800d714:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d716:	3301      	adds	r3, #1
 800d718:	3108      	adds	r1, #8
 800d71a:	6038      	str	r0, [r7, #0]
 800d71c:	2c10      	cmp	r4, #16
 800d71e:	dd00      	ble.n	800d722 <_svfprintf_r+0x7ca>
 800d720:	e2d6      	b.n	800dcd0 <_svfprintf_r+0xd78>
 800d722:	607c      	str	r4, [r7, #4]
 800d724:	18a4      	adds	r4, r4, r2
 800d726:	000f      	movs	r7, r1
 800d728:	942e      	str	r4, [sp, #184]	; 0xb8
 800d72a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d72c:	2b07      	cmp	r3, #7
 800d72e:	dd09      	ble.n	800d744 <_svfprintf_r+0x7ec>
 800d730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d732:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d734:	aa2c      	add	r2, sp, #176	; 0xb0
 800d736:	f003 fd25 	bl	8011184 <__ssprint_r>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d001      	beq.n	800d742 <_svfprintf_r+0x7ea>
 800d73e:	f000 fdea 	bl	800e316 <_svfprintf_r+0x13be>
 800d742:	af2f      	add	r7, sp, #188	; 0xbc
 800d744:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d748:	1a9c      	subs	r4, r3, r2
 800d74a:	2c00      	cmp	r4, #0
 800d74c:	dd1a      	ble.n	800d784 <_svfprintf_r+0x82c>
 800d74e:	0039      	movs	r1, r7
 800d750:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d752:	481d      	ldr	r0, [pc, #116]	; (800d7c8 <_svfprintf_r+0x870>)
 800d754:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d756:	3301      	adds	r3, #1
 800d758:	3108      	adds	r1, #8
 800d75a:	6038      	str	r0, [r7, #0]
 800d75c:	2c10      	cmp	r4, #16
 800d75e:	dd00      	ble.n	800d762 <_svfprintf_r+0x80a>
 800d760:	e2c9      	b.n	800dcf6 <_svfprintf_r+0xd9e>
 800d762:	18a2      	adds	r2, r4, r2
 800d764:	607c      	str	r4, [r7, #4]
 800d766:	922e      	str	r2, [sp, #184]	; 0xb8
 800d768:	000f      	movs	r7, r1
 800d76a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d76c:	2b07      	cmp	r3, #7
 800d76e:	dd09      	ble.n	800d784 <_svfprintf_r+0x82c>
 800d770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d772:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d774:	aa2c      	add	r2, sp, #176	; 0xb0
 800d776:	f003 fd05 	bl	8011184 <__ssprint_r>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d001      	beq.n	800d782 <_svfprintf_r+0x82a>
 800d77e:	f000 fdca 	bl	800e316 <_svfprintf_r+0x13be>
 800d782:	af2f      	add	r7, sp, #188	; 0xbc
 800d784:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d786:	9319      	str	r3, [sp, #100]	; 0x64
 800d788:	05f3      	lsls	r3, r6, #23
 800d78a:	d500      	bpl.n	800d78e <_svfprintf_r+0x836>
 800d78c:	e2ce      	b.n	800dd2c <_svfprintf_r+0xdd4>
 800d78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	4694      	mov	ip, r2
 800d794:	603b      	str	r3, [r7, #0]
 800d796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d798:	607b      	str	r3, [r7, #4]
 800d79a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d79c:	4463      	add	r3, ip
 800d79e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d7a6:	2b07      	cmp	r3, #7
 800d7a8:	dd00      	ble.n	800d7ac <_svfprintf_r+0x854>
 800d7aa:	e3a3      	b.n	800def4 <_svfprintf_r+0xf9c>
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	e301      	b.n	800ddb4 <_svfprintf_r+0xe5c>
 800d7b0:	08014604 	.word	0x08014604
 800d7b4:	08014615 	.word	0x08014615
 800d7b8:	40300000 	.word	0x40300000
 800d7bc:	3fe00000 	.word	0x3fe00000
 800d7c0:	fffffbff 	.word	0xfffffbff
 800d7c4:	08014628 	.word	0x08014628
 800d7c8:	08014638 	.word	0x08014638
 800d7cc:	9b08      	ldr	r3, [sp, #32]
 800d7ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d7d0:	e610      	b.n	800d3f4 <_svfprintf_r+0x49c>
 800d7d2:	2306      	movs	r3, #6
 800d7d4:	e5fd      	b.n	800d3d2 <_svfprintf_r+0x47a>
 800d7d6:	930e      	str	r3, [sp, #56]	; 0x38
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e61a      	b.n	800d412 <_svfprintf_r+0x4ba>
 800d7dc:	7010      	strb	r0, [r2, #0]
 800d7de:	e684      	b.n	800d4ea <_svfprintf_r+0x592>
 800d7e0:	7018      	strb	r0, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	1aca      	subs	r2, r1, r3
 800d7e6:	d5fb      	bpl.n	800d7e0 <_svfprintf_r+0x888>
 800d7e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	3201      	adds	r2, #1
 800d7ee:	db01      	blt.n	800d7f4 <_svfprintf_r+0x89c>
 800d7f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7f6:	18d3      	adds	r3, r2, r3
 800d7f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800d7fa:	e684      	b.n	800d506 <_svfprintf_r+0x5ae>
 800d7fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d800:	2030      	movs	r0, #48	; 0x30
 800d802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d804:	1851      	adds	r1, r2, r1
 800d806:	e7ed      	b.n	800d7e4 <_svfprintf_r+0x88c>
 800d808:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d80a:	2303      	movs	r3, #3
 800d80c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d80e:	2a46      	cmp	r2, #70	; 0x46
 800d810:	d006      	beq.n	800d820 <_svfprintf_r+0x8c8>
 800d812:	0014      	movs	r4, r2
 800d814:	3c45      	subs	r4, #69	; 0x45
 800d816:	4262      	negs	r2, r4
 800d818:	4154      	adcs	r4, r2
 800d81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d81c:	3b01      	subs	r3, #1
 800d81e:	1914      	adds	r4, r2, r4
 800d820:	aa2a      	add	r2, sp, #168	; 0xa8
 800d822:	9204      	str	r2, [sp, #16]
 800d824:	aa27      	add	r2, sp, #156	; 0x9c
 800d826:	9203      	str	r2, [sp, #12]
 800d828:	aa26      	add	r2, sp, #152	; 0x98
 800d82a:	9202      	str	r2, [sp, #8]
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	002a      	movs	r2, r5
 800d830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d832:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d834:	9401      	str	r4, [sp, #4]
 800d836:	f002 fad7 	bl	800fde8 <_dtoa_r>
 800d83a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d83c:	9008      	str	r0, [sp, #32]
 800d83e:	2b47      	cmp	r3, #71	; 0x47
 800d840:	d103      	bne.n	800d84a <_svfprintf_r+0x8f2>
 800d842:	07f3      	lsls	r3, r6, #31
 800d844:	d401      	bmi.n	800d84a <_svfprintf_r+0x8f2>
 800d846:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d848:	e65e      	b.n	800d508 <_svfprintf_r+0x5b0>
 800d84a:	9b08      	ldr	r3, [sp, #32]
 800d84c:	191b      	adds	r3, r3, r4
 800d84e:	9311      	str	r3, [sp, #68]	; 0x44
 800d850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d852:	2b46      	cmp	r3, #70	; 0x46
 800d854:	d112      	bne.n	800d87c <_svfprintf_r+0x924>
 800d856:	9b08      	ldr	r3, [sp, #32]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b30      	cmp	r3, #48	; 0x30
 800d85c:	d10a      	bne.n	800d874 <_svfprintf_r+0x91c>
 800d85e:	2200      	movs	r2, #0
 800d860:	2300      	movs	r3, #0
 800d862:	0028      	movs	r0, r5
 800d864:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d866:	f7f2 fdef 	bl	8000448 <__aeabi_dcmpeq>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d102      	bne.n	800d874 <_svfprintf_r+0x91c>
 800d86e:	2301      	movs	r3, #1
 800d870:	1b1b      	subs	r3, r3, r4
 800d872:	9326      	str	r3, [sp, #152]	; 0x98
 800d874:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d876:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d878:	18d3      	adds	r3, r2, r3
 800d87a:	9311      	str	r3, [sp, #68]	; 0x44
 800d87c:	2200      	movs	r2, #0
 800d87e:	2300      	movs	r3, #0
 800d880:	0028      	movs	r0, r5
 800d882:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d884:	f7f2 fde0 	bl	8000448 <__aeabi_dcmpeq>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d001      	beq.n	800d890 <_svfprintf_r+0x938>
 800d88c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d88e:	932a      	str	r3, [sp, #168]	; 0xa8
 800d890:	2230      	movs	r2, #48	; 0x30
 800d892:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d894:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d896:	4299      	cmp	r1, r3
 800d898:	d9d5      	bls.n	800d846 <_svfprintf_r+0x8ee>
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	912a      	str	r1, [sp, #168]	; 0xa8
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	e7f7      	b.n	800d892 <_svfprintf_r+0x93a>
 800d8a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8a4:	2b46      	cmp	r3, #70	; 0x46
 800d8a6:	d000      	beq.n	800d8aa <_svfprintf_r+0x952>
 800d8a8:	e63f      	b.n	800d52a <_svfprintf_r+0x5d2>
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	0033      	movs	r3, r6
 800d8ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8b0:	4013      	ands	r3, r2
 800d8b2:	430b      	orrs	r3, r1
 800d8b4:	2d00      	cmp	r5, #0
 800d8b6:	dd2c      	ble.n	800d912 <_svfprintf_r+0x9ba>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d046      	beq.n	800d94a <_svfprintf_r+0x9f2>
 800d8bc:	000a      	movs	r2, r1
 800d8be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d8c0:	18eb      	adds	r3, r5, r3
 800d8c2:	18d3      	adds	r3, r2, r3
 800d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c6:	2366      	movs	r3, #102	; 0x66
 800d8c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8ca:	e030      	b.n	800d92e <_svfprintf_r+0x9d6>
 800d8cc:	781c      	ldrb	r4, [r3, #0]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	7014      	strb	r4, [r2, #0]
 800d8d2:	3201      	adds	r2, #1
 800d8d4:	e668      	b.n	800d5a8 <_svfprintf_r+0x650>
 800d8d6:	222a      	movs	r2, #42	; 0x2a
 800d8d8:	ab1e      	add	r3, sp, #120	; 0x78
 800d8da:	18d2      	adds	r2, r2, r3
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d104      	bne.n	800d8ea <_svfprintf_r+0x992>
 800d8e0:	2330      	movs	r3, #48	; 0x30
 800d8e2:	222b      	movs	r2, #43	; 0x2b
 800d8e4:	708b      	strb	r3, [r1, #2]
 800d8e6:	ab1e      	add	r3, sp, #120	; 0x78
 800d8e8:	18d2      	adds	r2, r2, r3
 800d8ea:	3430      	adds	r4, #48	; 0x30
 800d8ec:	1c53      	adds	r3, r2, #1
 800d8ee:	7014      	strb	r4, [r2, #0]
 800d8f0:	e669      	b.n	800d5c6 <_svfprintf_r+0x66e>
 800d8f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8f4:	42ab      	cmp	r3, r5
 800d8f6:	dd12      	ble.n	800d91e <_svfprintf_r+0x9c6>
 800d8f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8fc:	4694      	mov	ip, r2
 800d8fe:	4463      	add	r3, ip
 800d900:	9309      	str	r3, [sp, #36]	; 0x24
 800d902:	2367      	movs	r3, #103	; 0x67
 800d904:	930f      	str	r3, [sp, #60]	; 0x3c
 800d906:	2d00      	cmp	r5, #0
 800d908:	dc11      	bgt.n	800d92e <_svfprintf_r+0x9d6>
 800d90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90c:	1b5b      	subs	r3, r3, r5
 800d90e:	3301      	adds	r3, #1
 800d910:	e00c      	b.n	800d92c <_svfprintf_r+0x9d4>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d01b      	beq.n	800d94e <_svfprintf_r+0x9f6>
 800d916:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d91a:	3301      	adds	r3, #1
 800d91c:	e7d1      	b.n	800d8c2 <_svfprintf_r+0x96a>
 800d91e:	2367      	movs	r3, #103	; 0x67
 800d920:	9509      	str	r5, [sp, #36]	; 0x24
 800d922:	930f      	str	r3, [sp, #60]	; 0x3c
 800d924:	07f3      	lsls	r3, r6, #31
 800d926:	d502      	bpl.n	800d92e <_svfprintf_r+0x9d6>
 800d928:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d92a:	18eb      	adds	r3, r5, r3
 800d92c:	9309      	str	r3, [sp, #36]	; 0x24
 800d92e:	2380      	movs	r3, #128	; 0x80
 800d930:	0032      	movs	r2, r6
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	401a      	ands	r2, r3
 800d936:	9211      	str	r2, [sp, #68]	; 0x44
 800d938:	2200      	movs	r2, #0
 800d93a:	9210      	str	r2, [sp, #64]	; 0x40
 800d93c:	421e      	tst	r6, r3
 800d93e:	d100      	bne.n	800d942 <_svfprintf_r+0x9ea>
 800d940:	e65d      	b.n	800d5fe <_svfprintf_r+0x6a6>
 800d942:	4295      	cmp	r5, r2
 800d944:	dc25      	bgt.n	800d992 <_svfprintf_r+0xa3a>
 800d946:	9211      	str	r2, [sp, #68]	; 0x44
 800d948:	e659      	b.n	800d5fe <_svfprintf_r+0x6a6>
 800d94a:	9509      	str	r5, [sp, #36]	; 0x24
 800d94c:	e7bb      	b.n	800d8c6 <_svfprintf_r+0x96e>
 800d94e:	2366      	movs	r3, #102	; 0x66
 800d950:	9209      	str	r2, [sp, #36]	; 0x24
 800d952:	930f      	str	r3, [sp, #60]	; 0x3c
 800d954:	e7eb      	b.n	800d92e <_svfprintf_r+0x9d6>
 800d956:	42ab      	cmp	r3, r5
 800d958:	da0e      	bge.n	800d978 <_svfprintf_r+0xa20>
 800d95a:	1aed      	subs	r5, r5, r3
 800d95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d012      	beq.n	800d98a <_svfprintf_r+0xa32>
 800d964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d966:	3301      	adds	r3, #1
 800d968:	9311      	str	r3, [sp, #68]	; 0x44
 800d96a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d96c:	3301      	adds	r3, #1
 800d96e:	9312      	str	r3, [sp, #72]	; 0x48
 800d970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2bff      	cmp	r3, #255	; 0xff
 800d976:	d1ee      	bne.n	800d956 <_svfprintf_r+0x9fe>
 800d978:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d97a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d97c:	189b      	adds	r3, r3, r2
 800d97e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d980:	4353      	muls	r3, r2
 800d982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d984:	189b      	adds	r3, r3, r2
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	e639      	b.n	800d5fe <_svfprintf_r+0x6a6>
 800d98a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d98c:	3301      	adds	r3, #1
 800d98e:	9310      	str	r3, [sp, #64]	; 0x40
 800d990:	e7ee      	b.n	800d970 <_svfprintf_r+0xa18>
 800d992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d994:	9311      	str	r3, [sp, #68]	; 0x44
 800d996:	e7eb      	b.n	800d970 <_svfprintf_r+0xa18>
 800d998:	1d23      	adds	r3, r4, #4
 800d99a:	930d      	str	r3, [sp, #52]	; 0x34
 800d99c:	06b3      	lsls	r3, r6, #26
 800d99e:	d509      	bpl.n	800d9b4 <_svfprintf_r+0xa5c>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	17d2      	asrs	r2, r2, #31
 800d9a8:	605a      	str	r2, [r3, #4]
 800d9aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d9ae:	9308      	str	r3, [sp, #32]
 800d9b0:	f7ff fb0d 	bl	800cfce <_svfprintf_r+0x76>
 800d9b4:	06f3      	lsls	r3, r6, #27
 800d9b6:	d503      	bpl.n	800d9c0 <_svfprintf_r+0xa68>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	e7f4      	b.n	800d9aa <_svfprintf_r+0xa52>
 800d9c0:	0673      	lsls	r3, r6, #25
 800d9c2:	d503      	bpl.n	800d9cc <_svfprintf_r+0xa74>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9c8:	801a      	strh	r2, [r3, #0]
 800d9ca:	e7ee      	b.n	800d9aa <_svfprintf_r+0xa52>
 800d9cc:	05b6      	lsls	r6, r6, #22
 800d9ce:	d5f3      	bpl.n	800d9b8 <_svfprintf_r+0xa60>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9d4:	701a      	strb	r2, [r3, #0]
 800d9d6:	e7e8      	b.n	800d9aa <_svfprintf_r+0xa52>
 800d9d8:	2310      	movs	r3, #16
 800d9da:	431e      	orrs	r6, r3
 800d9dc:	2320      	movs	r3, #32
 800d9de:	0030      	movs	r0, r6
 800d9e0:	4018      	ands	r0, r3
 800d9e2:	421e      	tst	r6, r3
 800d9e4:	d00f      	beq.n	800da06 <_svfprintf_r+0xaae>
 800d9e6:	3b19      	subs	r3, #25
 800d9e8:	3407      	adds	r4, #7
 800d9ea:	439c      	bics	r4, r3
 800d9ec:	0022      	movs	r2, r4
 800d9ee:	ca18      	ldmia	r2!, {r3, r4}
 800d9f0:	9306      	str	r3, [sp, #24]
 800d9f2:	9407      	str	r4, [sp, #28]
 800d9f4:	920d      	str	r2, [sp, #52]	; 0x34
 800d9f6:	4bc9      	ldr	r3, [pc, #804]	; (800dd1c <_svfprintf_r+0xdc4>)
 800d9f8:	401e      	ands	r6, r3
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	221b      	movs	r2, #27
 800d9fe:	a91e      	add	r1, sp, #120	; 0x78
 800da00:	1852      	adds	r2, r2, r1
 800da02:	2100      	movs	r1, #0
 800da04:	e430      	b.n	800d268 <_svfprintf_r+0x310>
 800da06:	0022      	movs	r2, r4
 800da08:	ca08      	ldmia	r2!, {r3}
 800da0a:	0031      	movs	r1, r6
 800da0c:	920d      	str	r2, [sp, #52]	; 0x34
 800da0e:	2210      	movs	r2, #16
 800da10:	4011      	ands	r1, r2
 800da12:	4216      	tst	r6, r2
 800da14:	d002      	beq.n	800da1c <_svfprintf_r+0xac4>
 800da16:	9306      	str	r3, [sp, #24]
 800da18:	9007      	str	r0, [sp, #28]
 800da1a:	e7ec      	b.n	800d9f6 <_svfprintf_r+0xa9e>
 800da1c:	2240      	movs	r2, #64	; 0x40
 800da1e:	0030      	movs	r0, r6
 800da20:	4010      	ands	r0, r2
 800da22:	4216      	tst	r6, r2
 800da24:	d003      	beq.n	800da2e <_svfprintf_r+0xad6>
 800da26:	b29b      	uxth	r3, r3
 800da28:	9306      	str	r3, [sp, #24]
 800da2a:	9107      	str	r1, [sp, #28]
 800da2c:	e7e3      	b.n	800d9f6 <_svfprintf_r+0xa9e>
 800da2e:	2280      	movs	r2, #128	; 0x80
 800da30:	0031      	movs	r1, r6
 800da32:	0092      	lsls	r2, r2, #2
 800da34:	4011      	ands	r1, r2
 800da36:	4216      	tst	r6, r2
 800da38:	d0f6      	beq.n	800da28 <_svfprintf_r+0xad0>
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	e7eb      	b.n	800da16 <_svfprintf_r+0xabe>
 800da3e:	0023      	movs	r3, r4
 800da40:	cb04      	ldmia	r3!, {r2}
 800da42:	49b7      	ldr	r1, [pc, #732]	; (800dd20 <_svfprintf_r+0xdc8>)
 800da44:	9206      	str	r2, [sp, #24]
 800da46:	aa25      	add	r2, sp, #148	; 0x94
 800da48:	8011      	strh	r1, [r2, #0]
 800da4a:	4ab6      	ldr	r2, [pc, #728]	; (800dd24 <_svfprintf_r+0xdcc>)
 800da4c:	930d      	str	r3, [sp, #52]	; 0x34
 800da4e:	2300      	movs	r3, #0
 800da50:	921f      	str	r2, [sp, #124]	; 0x7c
 800da52:	2278      	movs	r2, #120	; 0x78
 800da54:	9307      	str	r3, [sp, #28]
 800da56:	3302      	adds	r3, #2
 800da58:	431e      	orrs	r6, r3
 800da5a:	920f      	str	r2, [sp, #60]	; 0x3c
 800da5c:	e7ce      	b.n	800d9fc <_svfprintf_r+0xaa4>
 800da5e:	0023      	movs	r3, r4
 800da60:	cb04      	ldmia	r3!, {r2}
 800da62:	2400      	movs	r4, #0
 800da64:	930d      	str	r3, [sp, #52]	; 0x34
 800da66:	231b      	movs	r3, #27
 800da68:	9208      	str	r2, [sp, #32]
 800da6a:	aa1e      	add	r2, sp, #120	; 0x78
 800da6c:	189b      	adds	r3, r3, r2
 800da6e:	701c      	strb	r4, [r3, #0]
 800da70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da72:	3301      	adds	r3, #1
 800da74:	d00e      	beq.n	800da94 <_svfprintf_r+0xb3c>
 800da76:	0021      	movs	r1, r4
 800da78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da7a:	9808      	ldr	r0, [sp, #32]
 800da7c:	f002 f83a 	bl	800faf4 <memchr>
 800da80:	900c      	str	r0, [sp, #48]	; 0x30
 800da82:	42a0      	cmp	r0, r4
 800da84:	d100      	bne.n	800da88 <_svfprintf_r+0xb30>
 800da86:	e10d      	b.n	800dca4 <_svfprintf_r+0xd4c>
 800da88:	9a08      	ldr	r2, [sp, #32]
 800da8a:	1a83      	subs	r3, r0, r2
 800da8c:	9309      	str	r3, [sp, #36]	; 0x24
 800da8e:	0023      	movs	r3, r4
 800da90:	940c      	str	r4, [sp, #48]	; 0x30
 800da92:	e44e      	b.n	800d332 <_svfprintf_r+0x3da>
 800da94:	9808      	ldr	r0, [sp, #32]
 800da96:	f7f2 fb35 	bl	8000104 <strlen>
 800da9a:	9009      	str	r0, [sp, #36]	; 0x24
 800da9c:	e7f7      	b.n	800da8e <_svfprintf_r+0xb36>
 800da9e:	2310      	movs	r3, #16
 800daa0:	431e      	orrs	r6, r3
 800daa2:	2320      	movs	r3, #32
 800daa4:	0030      	movs	r0, r6
 800daa6:	4018      	ands	r0, r3
 800daa8:	421e      	tst	r6, r3
 800daaa:	d009      	beq.n	800dac0 <_svfprintf_r+0xb68>
 800daac:	3b19      	subs	r3, #25
 800daae:	3407      	adds	r4, #7
 800dab0:	439c      	bics	r4, r3
 800dab2:	0022      	movs	r2, r4
 800dab4:	ca18      	ldmia	r2!, {r3, r4}
 800dab6:	9306      	str	r3, [sp, #24]
 800dab8:	9407      	str	r4, [sp, #28]
 800daba:	920d      	str	r2, [sp, #52]	; 0x34
 800dabc:	2301      	movs	r3, #1
 800dabe:	e79d      	b.n	800d9fc <_svfprintf_r+0xaa4>
 800dac0:	0023      	movs	r3, r4
 800dac2:	cb04      	ldmia	r3!, {r2}
 800dac4:	0031      	movs	r1, r6
 800dac6:	930d      	str	r3, [sp, #52]	; 0x34
 800dac8:	2310      	movs	r3, #16
 800daca:	4019      	ands	r1, r3
 800dacc:	421e      	tst	r6, r3
 800dace:	d003      	beq.n	800dad8 <_svfprintf_r+0xb80>
 800dad0:	9206      	str	r2, [sp, #24]
 800dad2:	9007      	str	r0, [sp, #28]
 800dad4:	3b0f      	subs	r3, #15
 800dad6:	e791      	b.n	800d9fc <_svfprintf_r+0xaa4>
 800dad8:	2340      	movs	r3, #64	; 0x40
 800dada:	0030      	movs	r0, r6
 800dadc:	4018      	ands	r0, r3
 800dade:	421e      	tst	r6, r3
 800dae0:	d003      	beq.n	800daea <_svfprintf_r+0xb92>
 800dae2:	b293      	uxth	r3, r2
 800dae4:	9306      	str	r3, [sp, #24]
 800dae6:	9107      	str	r1, [sp, #28]
 800dae8:	e7e8      	b.n	800dabc <_svfprintf_r+0xb64>
 800daea:	2380      	movs	r3, #128	; 0x80
 800daec:	0031      	movs	r1, r6
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4019      	ands	r1, r3
 800daf2:	421e      	tst	r6, r3
 800daf4:	d003      	beq.n	800dafe <_svfprintf_r+0xba6>
 800daf6:	b2d3      	uxtb	r3, r2
 800daf8:	9306      	str	r3, [sp, #24]
 800dafa:	9007      	str	r0, [sp, #28]
 800dafc:	e7de      	b.n	800dabc <_svfprintf_r+0xb64>
 800dafe:	9206      	str	r2, [sp, #24]
 800db00:	e7f1      	b.n	800dae6 <_svfprintf_r+0xb8e>
 800db02:	4b89      	ldr	r3, [pc, #548]	; (800dd28 <_svfprintf_r+0xdd0>)
 800db04:	0030      	movs	r0, r6
 800db06:	931f      	str	r3, [sp, #124]	; 0x7c
 800db08:	2320      	movs	r3, #32
 800db0a:	4018      	ands	r0, r3
 800db0c:	421e      	tst	r6, r3
 800db0e:	d01a      	beq.n	800db46 <_svfprintf_r+0xbee>
 800db10:	3b19      	subs	r3, #25
 800db12:	3407      	adds	r4, #7
 800db14:	439c      	bics	r4, r3
 800db16:	0022      	movs	r2, r4
 800db18:	ca18      	ldmia	r2!, {r3, r4}
 800db1a:	9306      	str	r3, [sp, #24]
 800db1c:	9407      	str	r4, [sp, #28]
 800db1e:	920d      	str	r2, [sp, #52]	; 0x34
 800db20:	07f3      	lsls	r3, r6, #31
 800db22:	d50a      	bpl.n	800db3a <_svfprintf_r+0xbe2>
 800db24:	9b06      	ldr	r3, [sp, #24]
 800db26:	9a07      	ldr	r2, [sp, #28]
 800db28:	4313      	orrs	r3, r2
 800db2a:	d006      	beq.n	800db3a <_svfprintf_r+0xbe2>
 800db2c:	2230      	movs	r2, #48	; 0x30
 800db2e:	ab25      	add	r3, sp, #148	; 0x94
 800db30:	701a      	strb	r2, [r3, #0]
 800db32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db34:	705a      	strb	r2, [r3, #1]
 800db36:	2302      	movs	r3, #2
 800db38:	431e      	orrs	r6, r3
 800db3a:	4b78      	ldr	r3, [pc, #480]	; (800dd1c <_svfprintf_r+0xdc4>)
 800db3c:	401e      	ands	r6, r3
 800db3e:	2302      	movs	r3, #2
 800db40:	e75c      	b.n	800d9fc <_svfprintf_r+0xaa4>
 800db42:	4b78      	ldr	r3, [pc, #480]	; (800dd24 <_svfprintf_r+0xdcc>)
 800db44:	e7de      	b.n	800db04 <_svfprintf_r+0xbac>
 800db46:	0023      	movs	r3, r4
 800db48:	cb04      	ldmia	r3!, {r2}
 800db4a:	0031      	movs	r1, r6
 800db4c:	930d      	str	r3, [sp, #52]	; 0x34
 800db4e:	2310      	movs	r3, #16
 800db50:	4019      	ands	r1, r3
 800db52:	421e      	tst	r6, r3
 800db54:	d002      	beq.n	800db5c <_svfprintf_r+0xc04>
 800db56:	9206      	str	r2, [sp, #24]
 800db58:	9007      	str	r0, [sp, #28]
 800db5a:	e7e1      	b.n	800db20 <_svfprintf_r+0xbc8>
 800db5c:	2340      	movs	r3, #64	; 0x40
 800db5e:	0030      	movs	r0, r6
 800db60:	4018      	ands	r0, r3
 800db62:	421e      	tst	r6, r3
 800db64:	d003      	beq.n	800db6e <_svfprintf_r+0xc16>
 800db66:	b293      	uxth	r3, r2
 800db68:	9306      	str	r3, [sp, #24]
 800db6a:	9107      	str	r1, [sp, #28]
 800db6c:	e7d8      	b.n	800db20 <_svfprintf_r+0xbc8>
 800db6e:	2380      	movs	r3, #128	; 0x80
 800db70:	0031      	movs	r1, r6
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4019      	ands	r1, r3
 800db76:	421e      	tst	r6, r3
 800db78:	d002      	beq.n	800db80 <_svfprintf_r+0xc28>
 800db7a:	b2d3      	uxtb	r3, r2
 800db7c:	9306      	str	r3, [sp, #24]
 800db7e:	e7eb      	b.n	800db58 <_svfprintf_r+0xc00>
 800db80:	9206      	str	r2, [sp, #24]
 800db82:	e7f2      	b.n	800db6a <_svfprintf_r+0xc12>
 800db84:	9b07      	ldr	r3, [sp, #28]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10a      	bne.n	800dba0 <_svfprintf_r+0xc48>
 800db8a:	9b06      	ldr	r3, [sp, #24]
 800db8c:	2b09      	cmp	r3, #9
 800db8e:	d807      	bhi.n	800dba0 <_svfprintf_r+0xc48>
 800db90:	23e7      	movs	r3, #231	; 0xe7
 800db92:	aa1e      	add	r2, sp, #120	; 0x78
 800db94:	189b      	adds	r3, r3, r2
 800db96:	9a06      	ldr	r2, [sp, #24]
 800db98:	3230      	adds	r2, #48	; 0x30
 800db9a:	701a      	strb	r2, [r3, #0]
 800db9c:	f000 fc18 	bl	800e3d0 <_svfprintf_r+0x1478>
 800dba0:	2680      	movs	r6, #128	; 0x80
 800dba2:	2300      	movs	r3, #0
 800dba4:	00f6      	lsls	r6, r6, #3
 800dba6:	930e      	str	r3, [sp, #56]	; 0x38
 800dba8:	ad58      	add	r5, sp, #352	; 0x160
 800dbaa:	4026      	ands	r6, r4
 800dbac:	220a      	movs	r2, #10
 800dbae:	9806      	ldr	r0, [sp, #24]
 800dbb0:	9907      	ldr	r1, [sp, #28]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f7f2 fc76 	bl	80004a4 <__aeabi_uldivmod>
 800dbb8:	1e6b      	subs	r3, r5, #1
 800dbba:	3230      	adds	r2, #48	; 0x30
 800dbbc:	9308      	str	r3, [sp, #32]
 800dbbe:	701a      	strb	r2, [r3, #0]
 800dbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc2:	900c      	str	r0, [sp, #48]	; 0x30
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	9110      	str	r1, [sp, #64]	; 0x40
 800dbc8:	930e      	str	r3, [sp, #56]	; 0x38
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	d01d      	beq.n	800dc0a <_svfprintf_r+0xcb2>
 800dbce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d118      	bne.n	800dc0a <_svfprintf_r+0xcb2>
 800dbd8:	2aff      	cmp	r2, #255	; 0xff
 800dbda:	d016      	beq.n	800dc0a <_svfprintf_r+0xcb2>
 800dbdc:	9b07      	ldr	r3, [sp, #28]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <_svfprintf_r+0xc90>
 800dbe2:	9b06      	ldr	r3, [sp, #24]
 800dbe4:	2b09      	cmp	r3, #9
 800dbe6:	d910      	bls.n	800dc0a <_svfprintf_r+0xcb2>
 800dbe8:	9b08      	ldr	r3, [sp, #32]
 800dbea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dbec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dbee:	1a9b      	subs	r3, r3, r2
 800dbf0:	0018      	movs	r0, r3
 800dbf2:	9308      	str	r3, [sp, #32]
 800dbf4:	f7fd ffd1 	bl	800bb9a <strncpy>
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbfc:	920e      	str	r2, [sp, #56]	; 0x38
 800dbfe:	785b      	ldrb	r3, [r3, #1]
 800dc00:	1e5a      	subs	r2, r3, #1
 800dc02:	4193      	sbcs	r3, r2
 800dc04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc06:	18d3      	adds	r3, r2, r3
 800dc08:	9312      	str	r3, [sp, #72]	; 0x48
 800dc0a:	9b07      	ldr	r3, [sp, #28]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10f      	bne.n	800dc30 <_svfprintf_r+0xcd8>
 800dc10:	9b06      	ldr	r3, [sp, #24]
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d80c      	bhi.n	800dc30 <_svfprintf_r+0xcd8>
 800dc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc18:	9a08      	ldr	r2, [sp, #32]
 800dc1a:	9319      	str	r3, [sp, #100]	; 0x64
 800dc1c:	ab58      	add	r3, sp, #352	; 0x160
 800dc1e:	1a9b      	subs	r3, r3, r2
 800dc20:	9309      	str	r3, [sp, #36]	; 0x24
 800dc22:	2300      	movs	r3, #0
 800dc24:	0026      	movs	r6, r4
 800dc26:	930c      	str	r3, [sp, #48]	; 0x30
 800dc28:	001d      	movs	r5, r3
 800dc2a:	9310      	str	r3, [sp, #64]	; 0x40
 800dc2c:	9311      	str	r3, [sp, #68]	; 0x44
 800dc2e:	e4f2      	b.n	800d616 <_svfprintf_r+0x6be>
 800dc30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc32:	9d08      	ldr	r5, [sp, #32]
 800dc34:	9306      	str	r3, [sp, #24]
 800dc36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	e7b7      	b.n	800dbac <_svfprintf_r+0xc54>
 800dc3c:	200f      	movs	r0, #15
 800dc3e:	ab58      	add	r3, sp, #352	; 0x160
 800dc40:	9308      	str	r3, [sp, #32]
 800dc42:	9b08      	ldr	r3, [sp, #32]
 800dc44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dc46:	3b01      	subs	r3, #1
 800dc48:	9308      	str	r3, [sp, #32]
 800dc4a:	9b06      	ldr	r3, [sp, #24]
 800dc4c:	4003      	ands	r3, r0
 800dc4e:	5cd3      	ldrb	r3, [r2, r3]
 800dc50:	9a08      	ldr	r2, [sp, #32]
 800dc52:	7013      	strb	r3, [r2, #0]
 800dc54:	9b07      	ldr	r3, [sp, #28]
 800dc56:	0719      	lsls	r1, r3, #28
 800dc58:	9b06      	ldr	r3, [sp, #24]
 800dc5a:	091a      	lsrs	r2, r3, #4
 800dc5c:	9b07      	ldr	r3, [sp, #28]
 800dc5e:	4311      	orrs	r1, r2
 800dc60:	091b      	lsrs	r3, r3, #4
 800dc62:	9307      	str	r3, [sp, #28]
 800dc64:	000b      	movs	r3, r1
 800dc66:	9a07      	ldr	r2, [sp, #28]
 800dc68:	9106      	str	r1, [sp, #24]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	d1e9      	bne.n	800dc42 <_svfprintf_r+0xcea>
 800dc6e:	e7d2      	b.n	800dc16 <_svfprintf_r+0xcbe>
 800dc70:	aa58      	add	r2, sp, #352	; 0x160
 800dc72:	9208      	str	r2, [sp, #32]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1ce      	bne.n	800dc16 <_svfprintf_r+0xcbe>
 800dc78:	07f6      	lsls	r6, r6, #31
 800dc7a:	d5cc      	bpl.n	800dc16 <_svfprintf_r+0xcbe>
 800dc7c:	aa1e      	add	r2, sp, #120	; 0x78
 800dc7e:	33e7      	adds	r3, #231	; 0xe7
 800dc80:	189b      	adds	r3, r3, r2
 800dc82:	2230      	movs	r2, #48	; 0x30
 800dc84:	e789      	b.n	800db9a <_svfprintf_r+0xc42>
 800dc86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d100      	bne.n	800dc8e <_svfprintf_r+0xd36>
 800dc8c:	e364      	b.n	800e358 <_svfprintf_r+0x1400>
 800dc8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc90:	211b      	movs	r1, #27
 800dc92:	ab3f      	add	r3, sp, #252	; 0xfc
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	2200      	movs	r2, #0
 800dc98:	a81e      	add	r0, sp, #120	; 0x78
 800dc9a:	1809      	adds	r1, r1, r0
 800dc9c:	700a      	strb	r2, [r1, #0]
 800dc9e:	940d      	str	r4, [sp, #52]	; 0x34
 800dca0:	f7ff fabd 	bl	800d21e <_svfprintf_r+0x2c6>
 800dca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dca6:	f7ff fb44 	bl	800d332 <_svfprintf_r+0x3da>
 800dcaa:	2010      	movs	r0, #16
 800dcac:	1812      	adds	r2, r2, r0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dcb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcb4:	2b07      	cmp	r3, #7
 800dcb6:	dd08      	ble.n	800dcca <_svfprintf_r+0xd72>
 800dcb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcbe:	f003 fa61 	bl	8011184 <__ssprint_r>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d000      	beq.n	800dcc8 <_svfprintf_r+0xd70>
 800dcc6:	e326      	b.n	800e316 <_svfprintf_r+0x13be>
 800dcc8:	a92f      	add	r1, sp, #188	; 0xbc
 800dcca:	000f      	movs	r7, r1
 800dccc:	3c10      	subs	r4, #16
 800dcce:	e4c5      	b.n	800d65c <_svfprintf_r+0x704>
 800dcd0:	2010      	movs	r0, #16
 800dcd2:	1812      	adds	r2, r2, r0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	922e      	str	r2, [sp, #184]	; 0xb8
 800dcd8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcda:	2b07      	cmp	r3, #7
 800dcdc:	dd08      	ble.n	800dcf0 <_svfprintf_r+0xd98>
 800dcde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dce0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dce2:	aa2c      	add	r2, sp, #176	; 0xb0
 800dce4:	f003 fa4e 	bl	8011184 <__ssprint_r>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d000      	beq.n	800dcee <_svfprintf_r+0xd96>
 800dcec:	e313      	b.n	800e316 <_svfprintf_r+0x13be>
 800dcee:	a92f      	add	r1, sp, #188	; 0xbc
 800dcf0:	000f      	movs	r7, r1
 800dcf2:	3c10      	subs	r4, #16
 800dcf4:	e50b      	b.n	800d70e <_svfprintf_r+0x7b6>
 800dcf6:	2010      	movs	r0, #16
 800dcf8:	1812      	adds	r2, r2, r0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	922e      	str	r2, [sp, #184]	; 0xb8
 800dcfe:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd00:	2b07      	cmp	r3, #7
 800dd02:	dd08      	ble.n	800dd16 <_svfprintf_r+0xdbe>
 800dd04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd08:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd0a:	f003 fa3b 	bl	8011184 <__ssprint_r>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d000      	beq.n	800dd14 <_svfprintf_r+0xdbc>
 800dd12:	e300      	b.n	800e316 <_svfprintf_r+0x13be>
 800dd14:	a92f      	add	r1, sp, #188	; 0xbc
 800dd16:	000f      	movs	r7, r1
 800dd18:	3c10      	subs	r4, #16
 800dd1a:	e518      	b.n	800d74e <_svfprintf_r+0x7f6>
 800dd1c:	fffffbff 	.word	0xfffffbff
 800dd20:	00007830 	.word	0x00007830
 800dd24:	08014604 	.word	0x08014604
 800dd28:	08014615 	.word	0x08014615
 800dd2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd2e:	2b65      	cmp	r3, #101	; 0x65
 800dd30:	dc00      	bgt.n	800dd34 <_svfprintf_r+0xddc>
 800dd32:	e241      	b.n	800e1b8 <_svfprintf_r+0x1260>
 800dd34:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dd36:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dd38:	2200      	movs	r2, #0
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f7f2 fb84 	bl	8000448 <__aeabi_dcmpeq>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d077      	beq.n	800de34 <_svfprintf_r+0xedc>
 800dd44:	4bca      	ldr	r3, [pc, #808]	; (800e070 <_svfprintf_r+0x1118>)
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	2301      	movs	r3, #1
 800dd4a:	607b      	str	r3, [r7, #4]
 800dd4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd4e:	3708      	adds	r7, #8
 800dd50:	3301      	adds	r3, #1
 800dd52:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd56:	3301      	adds	r3, #1
 800dd58:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd5a:	2b07      	cmp	r3, #7
 800dd5c:	dd08      	ble.n	800dd70 <_svfprintf_r+0xe18>
 800dd5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd62:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd64:	f003 fa0e 	bl	8011184 <__ssprint_r>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d000      	beq.n	800dd6e <_svfprintf_r+0xe16>
 800dd6c:	e2d3      	b.n	800e316 <_svfprintf_r+0x13be>
 800dd6e:	af2f      	add	r7, sp, #188	; 0xbc
 800dd70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd74:	4293      	cmp	r3, r2
 800dd76:	db01      	blt.n	800dd7c <_svfprintf_r+0xe24>
 800dd78:	07f3      	lsls	r3, r6, #31
 800dd7a:	d51b      	bpl.n	800ddb4 <_svfprintf_r+0xe5c>
 800dd7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd80:	603b      	str	r3, [r7, #0]
 800dd82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd84:	607b      	str	r3, [r7, #4]
 800dd86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd88:	3708      	adds	r7, #8
 800dd8a:	189b      	adds	r3, r3, r2
 800dd8c:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd90:	3301      	adds	r3, #1
 800dd92:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd94:	2b07      	cmp	r3, #7
 800dd96:	dd08      	ble.n	800ddaa <_svfprintf_r+0xe52>
 800dd98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd9c:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd9e:	f003 f9f1 	bl	8011184 <__ssprint_r>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d000      	beq.n	800dda8 <_svfprintf_r+0xe50>
 800dda6:	e2b6      	b.n	800e316 <_svfprintf_r+0x13be>
 800dda8:	af2f      	add	r7, sp, #188	; 0xbc
 800ddaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddac:	2510      	movs	r5, #16
 800ddae:	1e5c      	subs	r4, r3, #1
 800ddb0:	2c00      	cmp	r4, #0
 800ddb2:	dc2e      	bgt.n	800de12 <_svfprintf_r+0xeba>
 800ddb4:	0776      	lsls	r6, r6, #29
 800ddb6:	d500      	bpl.n	800ddba <_svfprintf_r+0xe62>
 800ddb8:	e290      	b.n	800e2dc <_svfprintf_r+0x1384>
 800ddba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ddbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	da00      	bge.n	800ddc4 <_svfprintf_r+0xe6c>
 800ddc2:	0013      	movs	r3, r2
 800ddc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddc6:	18d3      	adds	r3, r2, r3
 800ddc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d007      	beq.n	800dde0 <_svfprintf_r+0xe88>
 800ddd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddd4:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddd6:	f003 f9d5 	bl	8011184 <__ssprint_r>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d000      	beq.n	800dde0 <_svfprintf_r+0xe88>
 800ddde:	e29a      	b.n	800e316 <_svfprintf_r+0x13be>
 800dde0:	2300      	movs	r3, #0
 800dde2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dde4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d000      	beq.n	800ddec <_svfprintf_r+0xe94>
 800ddea:	e2b0      	b.n	800e34e <_svfprintf_r+0x13f6>
 800ddec:	af2f      	add	r7, sp, #188	; 0xbc
 800ddee:	e5dc      	b.n	800d9aa <_svfprintf_r+0xa52>
 800ddf0:	3210      	adds	r2, #16
 800ddf2:	607d      	str	r5, [r7, #4]
 800ddf4:	922e      	str	r2, [sp, #184]	; 0xb8
 800ddf6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddf8:	2b07      	cmp	r3, #7
 800ddfa:	dd08      	ble.n	800de0e <_svfprintf_r+0xeb6>
 800ddfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de00:	aa2c      	add	r2, sp, #176	; 0xb0
 800de02:	f003 f9bf 	bl	8011184 <__ssprint_r>
 800de06:	2800      	cmp	r0, #0
 800de08:	d000      	beq.n	800de0c <_svfprintf_r+0xeb4>
 800de0a:	e284      	b.n	800e316 <_svfprintf_r+0x13be>
 800de0c:	a92f      	add	r1, sp, #188	; 0xbc
 800de0e:	000f      	movs	r7, r1
 800de10:	3c10      	subs	r4, #16
 800de12:	0039      	movs	r1, r7
 800de14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de16:	4897      	ldr	r0, [pc, #604]	; (800e074 <_svfprintf_r+0x111c>)
 800de18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de1a:	3301      	adds	r3, #1
 800de1c:	3108      	adds	r1, #8
 800de1e:	6038      	str	r0, [r7, #0]
 800de20:	2c10      	cmp	r4, #16
 800de22:	dce5      	bgt.n	800ddf0 <_svfprintf_r+0xe98>
 800de24:	607c      	str	r4, [r7, #4]
 800de26:	18a4      	adds	r4, r4, r2
 800de28:	942e      	str	r4, [sp, #184]	; 0xb8
 800de2a:	000f      	movs	r7, r1
 800de2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800de2e:	2b07      	cmp	r3, #7
 800de30:	ddc0      	ble.n	800ddb4 <_svfprintf_r+0xe5c>
 800de32:	e05f      	b.n	800def4 <_svfprintf_r+0xf9c>
 800de34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de36:	2b00      	cmp	r3, #0
 800de38:	dc78      	bgt.n	800df2c <_svfprintf_r+0xfd4>
 800de3a:	4b8d      	ldr	r3, [pc, #564]	; (800e070 <_svfprintf_r+0x1118>)
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	2301      	movs	r3, #1
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de44:	3708      	adds	r7, #8
 800de46:	3301      	adds	r3, #1
 800de48:	932e      	str	r3, [sp, #184]	; 0xb8
 800de4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de4c:	3301      	adds	r3, #1
 800de4e:	932d      	str	r3, [sp, #180]	; 0xb4
 800de50:	2b07      	cmp	r3, #7
 800de52:	dd08      	ble.n	800de66 <_svfprintf_r+0xf0e>
 800de54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de58:	aa2c      	add	r2, sp, #176	; 0xb0
 800de5a:	f003 f993 	bl	8011184 <__ssprint_r>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d000      	beq.n	800de64 <_svfprintf_r+0xf0c>
 800de62:	e258      	b.n	800e316 <_svfprintf_r+0x13be>
 800de64:	af2f      	add	r7, sp, #188	; 0xbc
 800de66:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de6c:	430b      	orrs	r3, r1
 800de6e:	2101      	movs	r1, #1
 800de70:	4031      	ands	r1, r6
 800de72:	430b      	orrs	r3, r1
 800de74:	d09e      	beq.n	800ddb4 <_svfprintf_r+0xe5c>
 800de76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800de78:	603b      	str	r3, [r7, #0]
 800de7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	189a      	adds	r2, r3, r2
 800de80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de82:	922e      	str	r2, [sp, #184]	; 0xb8
 800de84:	3301      	adds	r3, #1
 800de86:	932d      	str	r3, [sp, #180]	; 0xb4
 800de88:	3708      	adds	r7, #8
 800de8a:	2b07      	cmp	r3, #7
 800de8c:	dd08      	ble.n	800dea0 <_svfprintf_r+0xf48>
 800de8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de92:	aa2c      	add	r2, sp, #176	; 0xb0
 800de94:	f003 f976 	bl	8011184 <__ssprint_r>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d000      	beq.n	800de9e <_svfprintf_r+0xf46>
 800de9c:	e23b      	b.n	800e316 <_svfprintf_r+0x13be>
 800de9e:	af2f      	add	r7, sp, #188	; 0xbc
 800dea0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dea2:	2c00      	cmp	r4, #0
 800dea4:	da19      	bge.n	800deda <_svfprintf_r+0xf82>
 800dea6:	0038      	movs	r0, r7
 800dea8:	2510      	movs	r5, #16
 800deaa:	4264      	negs	r4, r4
 800deac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800deae:	4a71      	ldr	r2, [pc, #452]	; (800e074 <_svfprintf_r+0x111c>)
 800deb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800deb2:	3101      	adds	r1, #1
 800deb4:	3708      	adds	r7, #8
 800deb6:	6002      	str	r2, [r0, #0]
 800deb8:	2c10      	cmp	r4, #16
 800deba:	dc25      	bgt.n	800df08 <_svfprintf_r+0xfb0>
 800debc:	6044      	str	r4, [r0, #4]
 800debe:	18e4      	adds	r4, r4, r3
 800dec0:	942e      	str	r4, [sp, #184]	; 0xb8
 800dec2:	912d      	str	r1, [sp, #180]	; 0xb4
 800dec4:	2907      	cmp	r1, #7
 800dec6:	dd08      	ble.n	800deda <_svfprintf_r+0xf82>
 800dec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800decc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dece:	f003 f959 	bl	8011184 <__ssprint_r>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d000      	beq.n	800ded8 <_svfprintf_r+0xf80>
 800ded6:	e21e      	b.n	800e316 <_svfprintf_r+0x13be>
 800ded8:	af2f      	add	r7, sp, #188	; 0xbc
 800deda:	9b08      	ldr	r3, [sp, #32]
 800dedc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dee2:	18d2      	adds	r2, r2, r3
 800dee4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dee6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dee8:	607b      	str	r3, [r7, #4]
 800deea:	3201      	adds	r2, #1
 800deec:	922d      	str	r2, [sp, #180]	; 0xb4
 800deee:	2a07      	cmp	r2, #7
 800def0:	dc00      	bgt.n	800def4 <_svfprintf_r+0xf9c>
 800def2:	e45b      	b.n	800d7ac <_svfprintf_r+0x854>
 800def4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800def6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800def8:	aa2c      	add	r2, sp, #176	; 0xb0
 800defa:	f003 f943 	bl	8011184 <__ssprint_r>
 800defe:	2800      	cmp	r0, #0
 800df00:	d000      	beq.n	800df04 <_svfprintf_r+0xfac>
 800df02:	e208      	b.n	800e316 <_svfprintf_r+0x13be>
 800df04:	af2f      	add	r7, sp, #188	; 0xbc
 800df06:	e755      	b.n	800ddb4 <_svfprintf_r+0xe5c>
 800df08:	3310      	adds	r3, #16
 800df0a:	6045      	str	r5, [r0, #4]
 800df0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800df0e:	912d      	str	r1, [sp, #180]	; 0xb4
 800df10:	2907      	cmp	r1, #7
 800df12:	dd08      	ble.n	800df26 <_svfprintf_r+0xfce>
 800df14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df18:	aa2c      	add	r2, sp, #176	; 0xb0
 800df1a:	f003 f933 	bl	8011184 <__ssprint_r>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d000      	beq.n	800df24 <_svfprintf_r+0xfcc>
 800df22:	e1f8      	b.n	800e316 <_svfprintf_r+0x13be>
 800df24:	af2f      	add	r7, sp, #188	; 0xbc
 800df26:	0038      	movs	r0, r7
 800df28:	3c10      	subs	r4, #16
 800df2a:	e7bf      	b.n	800deac <_svfprintf_r+0xf54>
 800df2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df2e:	002c      	movs	r4, r5
 800df30:	429d      	cmp	r5, r3
 800df32:	dd00      	ble.n	800df36 <_svfprintf_r+0xfde>
 800df34:	001c      	movs	r4, r3
 800df36:	2c00      	cmp	r4, #0
 800df38:	dd14      	ble.n	800df64 <_svfprintf_r+0x100c>
 800df3a:	9b08      	ldr	r3, [sp, #32]
 800df3c:	607c      	str	r4, [r7, #4]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df42:	3708      	adds	r7, #8
 800df44:	18e3      	adds	r3, r4, r3
 800df46:	932e      	str	r3, [sp, #184]	; 0xb8
 800df48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df4a:	3301      	adds	r3, #1
 800df4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800df4e:	2b07      	cmp	r3, #7
 800df50:	dd08      	ble.n	800df64 <_svfprintf_r+0x100c>
 800df52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df56:	aa2c      	add	r2, sp, #176	; 0xb0
 800df58:	f003 f914 	bl	8011184 <__ssprint_r>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d000      	beq.n	800df62 <_svfprintf_r+0x100a>
 800df60:	e1d9      	b.n	800e316 <_svfprintf_r+0x13be>
 800df62:	af2f      	add	r7, sp, #188	; 0xbc
 800df64:	43e3      	mvns	r3, r4
 800df66:	17db      	asrs	r3, r3, #31
 800df68:	401c      	ands	r4, r3
 800df6a:	1b2c      	subs	r4, r5, r4
 800df6c:	2c00      	cmp	r4, #0
 800df6e:	dd18      	ble.n	800dfa2 <_svfprintf_r+0x104a>
 800df70:	0039      	movs	r1, r7
 800df72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df74:	483f      	ldr	r0, [pc, #252]	; (800e074 <_svfprintf_r+0x111c>)
 800df76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df78:	3301      	adds	r3, #1
 800df7a:	3108      	adds	r1, #8
 800df7c:	6038      	str	r0, [r7, #0]
 800df7e:	2c10      	cmp	r4, #16
 800df80:	dc7a      	bgt.n	800e078 <_svfprintf_r+0x1120>
 800df82:	607c      	str	r4, [r7, #4]
 800df84:	18a4      	adds	r4, r4, r2
 800df86:	000f      	movs	r7, r1
 800df88:	942e      	str	r4, [sp, #184]	; 0xb8
 800df8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800df8c:	2b07      	cmp	r3, #7
 800df8e:	dd08      	ble.n	800dfa2 <_svfprintf_r+0x104a>
 800df90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df94:	aa2c      	add	r2, sp, #176	; 0xb0
 800df96:	f003 f8f5 	bl	8011184 <__ssprint_r>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d000      	beq.n	800dfa0 <_svfprintf_r+0x1048>
 800df9e:	e1ba      	b.n	800e316 <_svfprintf_r+0x13be>
 800dfa0:	af2f      	add	r7, sp, #188	; 0xbc
 800dfa2:	9b08      	ldr	r3, [sp, #32]
 800dfa4:	195d      	adds	r5, r3, r5
 800dfa6:	0573      	lsls	r3, r6, #21
 800dfa8:	d50b      	bpl.n	800dfc2 <_svfprintf_r+0x106a>
 800dfaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d176      	bne.n	800e09e <_svfprintf_r+0x1146>
 800dfb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d176      	bne.n	800e0a4 <_svfprintf_r+0x114c>
 800dfb6:	9b08      	ldr	r3, [sp, #32]
 800dfb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfba:	189b      	adds	r3, r3, r2
 800dfbc:	429d      	cmp	r5, r3
 800dfbe:	d900      	bls.n	800dfc2 <_svfprintf_r+0x106a>
 800dfc0:	001d      	movs	r5, r3
 800dfc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dfc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	db01      	blt.n	800dfce <_svfprintf_r+0x1076>
 800dfca:	07f3      	lsls	r3, r6, #31
 800dfcc:	d516      	bpl.n	800dffc <_svfprintf_r+0x10a4>
 800dfce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dfd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dfd2:	603b      	str	r3, [r7, #0]
 800dfd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfd6:	607b      	str	r3, [r7, #4]
 800dfd8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfda:	3708      	adds	r7, #8
 800dfdc:	189b      	adds	r3, r3, r2
 800dfde:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfe0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfe6:	2b07      	cmp	r3, #7
 800dfe8:	dd08      	ble.n	800dffc <_svfprintf_r+0x10a4>
 800dfea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfee:	aa2c      	add	r2, sp, #176	; 0xb0
 800dff0:	f003 f8c8 	bl	8011184 <__ssprint_r>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d000      	beq.n	800dffa <_svfprintf_r+0x10a2>
 800dff8:	e18d      	b.n	800e316 <_svfprintf_r+0x13be>
 800dffa:	af2f      	add	r7, sp, #188	; 0xbc
 800dffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dffe:	9b08      	ldr	r3, [sp, #32]
 800e000:	4694      	mov	ip, r2
 800e002:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e004:	4463      	add	r3, ip
 800e006:	1b5b      	subs	r3, r3, r5
 800e008:	1b14      	subs	r4, r2, r4
 800e00a:	429c      	cmp	r4, r3
 800e00c:	dd00      	ble.n	800e010 <_svfprintf_r+0x10b8>
 800e00e:	001c      	movs	r4, r3
 800e010:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e012:	2c00      	cmp	r4, #0
 800e014:	dd12      	ble.n	800e03c <_svfprintf_r+0x10e4>
 800e016:	18e3      	adds	r3, r4, r3
 800e018:	932e      	str	r3, [sp, #184]	; 0xb8
 800e01a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e01c:	603d      	str	r5, [r7, #0]
 800e01e:	3301      	adds	r3, #1
 800e020:	607c      	str	r4, [r7, #4]
 800e022:	932d      	str	r3, [sp, #180]	; 0xb4
 800e024:	3708      	adds	r7, #8
 800e026:	2b07      	cmp	r3, #7
 800e028:	dd08      	ble.n	800e03c <_svfprintf_r+0x10e4>
 800e02a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e02c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e02e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e030:	f003 f8a8 	bl	8011184 <__ssprint_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	d000      	beq.n	800e03a <_svfprintf_r+0x10e2>
 800e038:	e16d      	b.n	800e316 <_svfprintf_r+0x13be>
 800e03a:	af2f      	add	r7, sp, #188	; 0xbc
 800e03c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e03e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e040:	2510      	movs	r5, #16
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	43e2      	mvns	r2, r4
 800e046:	17d2      	asrs	r2, r2, #31
 800e048:	4014      	ands	r4, r2
 800e04a:	1b1c      	subs	r4, r3, r4
 800e04c:	2c00      	cmp	r4, #0
 800e04e:	dc00      	bgt.n	800e052 <_svfprintf_r+0x10fa>
 800e050:	e6b0      	b.n	800ddb4 <_svfprintf_r+0xe5c>
 800e052:	0039      	movs	r1, r7
 800e054:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e056:	4807      	ldr	r0, [pc, #28]	; (800e074 <_svfprintf_r+0x111c>)
 800e058:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e05a:	3301      	adds	r3, #1
 800e05c:	3108      	adds	r1, #8
 800e05e:	6038      	str	r0, [r7, #0]
 800e060:	2c10      	cmp	r4, #16
 800e062:	dd00      	ble.n	800e066 <_svfprintf_r+0x110e>
 800e064:	e096      	b.n	800e194 <_svfprintf_r+0x123c>
 800e066:	1912      	adds	r2, r2, r4
 800e068:	607c      	str	r4, [r7, #4]
 800e06a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e06c:	e6dd      	b.n	800de2a <_svfprintf_r+0xed2>
 800e06e:	46c0      	nop			; (mov r8, r8)
 800e070:	08014626 	.word	0x08014626
 800e074:	08014638 	.word	0x08014638
 800e078:	2010      	movs	r0, #16
 800e07a:	1812      	adds	r2, r2, r0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e080:	932d      	str	r3, [sp, #180]	; 0xb4
 800e082:	2b07      	cmp	r3, #7
 800e084:	dd08      	ble.n	800e098 <_svfprintf_r+0x1140>
 800e086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e088:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e08a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e08c:	f003 f87a 	bl	8011184 <__ssprint_r>
 800e090:	2800      	cmp	r0, #0
 800e092:	d000      	beq.n	800e096 <_svfprintf_r+0x113e>
 800e094:	e13f      	b.n	800e316 <_svfprintf_r+0x13be>
 800e096:	a92f      	add	r1, sp, #188	; 0xbc
 800e098:	000f      	movs	r7, r1
 800e09a:	3c10      	subs	r4, #16
 800e09c:	e768      	b.n	800df70 <_svfprintf_r+0x1018>
 800e09e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d05d      	beq.n	800e160 <_svfprintf_r+0x1208>
 800e0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	9310      	str	r3, [sp, #64]	; 0x40
 800e0aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0b2:	607b      	str	r3, [r7, #4]
 800e0b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	189b      	adds	r3, r3, r2
 800e0ba:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0be:	3301      	adds	r3, #1
 800e0c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0c2:	2b07      	cmp	r3, #7
 800e0c4:	dd08      	ble.n	800e0d8 <_svfprintf_r+0x1180>
 800e0c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0cc:	f003 f85a 	bl	8011184 <__ssprint_r>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d000      	beq.n	800e0d6 <_svfprintf_r+0x117e>
 800e0d4:	e11f      	b.n	800e316 <_svfprintf_r+0x13be>
 800e0d6:	af2f      	add	r7, sp, #188	; 0xbc
 800e0d8:	9b08      	ldr	r3, [sp, #32]
 800e0da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0dc:	189c      	adds	r4, r3, r2
 800e0de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e0e0:	1b64      	subs	r4, r4, r5
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	429c      	cmp	r4, r3
 800e0e6:	dd00      	ble.n	800e0ea <_svfprintf_r+0x1192>
 800e0e8:	001c      	movs	r4, r3
 800e0ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	dd12      	ble.n	800e116 <_svfprintf_r+0x11be>
 800e0f0:	18e3      	adds	r3, r4, r3
 800e0f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0f6:	603d      	str	r5, [r7, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	607c      	str	r4, [r7, #4]
 800e0fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0fe:	3708      	adds	r7, #8
 800e100:	2b07      	cmp	r3, #7
 800e102:	dd08      	ble.n	800e116 <_svfprintf_r+0x11be>
 800e104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e106:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e108:	aa2c      	add	r2, sp, #176	; 0xb0
 800e10a:	f003 f83b 	bl	8011184 <__ssprint_r>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d000      	beq.n	800e114 <_svfprintf_r+0x11bc>
 800e112:	e100      	b.n	800e316 <_svfprintf_r+0x13be>
 800e114:	af2f      	add	r7, sp, #188	; 0xbc
 800e116:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e118:	781a      	ldrb	r2, [r3, #0]
 800e11a:	43e3      	mvns	r3, r4
 800e11c:	17db      	asrs	r3, r3, #31
 800e11e:	401c      	ands	r4, r3
 800e120:	1b14      	subs	r4, r2, r4
 800e122:	2c00      	cmp	r4, #0
 800e124:	dd18      	ble.n	800e158 <_svfprintf_r+0x1200>
 800e126:	0039      	movs	r1, r7
 800e128:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e12a:	48aa      	ldr	r0, [pc, #680]	; (800e3d4 <_svfprintf_r+0x147c>)
 800e12c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e12e:	3301      	adds	r3, #1
 800e130:	3108      	adds	r1, #8
 800e132:	6038      	str	r0, [r7, #0]
 800e134:	2c10      	cmp	r4, #16
 800e136:	dc1a      	bgt.n	800e16e <_svfprintf_r+0x1216>
 800e138:	1912      	adds	r2, r2, r4
 800e13a:	607c      	str	r4, [r7, #4]
 800e13c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e13e:	000f      	movs	r7, r1
 800e140:	932d      	str	r3, [sp, #180]	; 0xb4
 800e142:	2b07      	cmp	r3, #7
 800e144:	dd08      	ble.n	800e158 <_svfprintf_r+0x1200>
 800e146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e148:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e14a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e14c:	f003 f81a 	bl	8011184 <__ssprint_r>
 800e150:	2800      	cmp	r0, #0
 800e152:	d000      	beq.n	800e156 <_svfprintf_r+0x11fe>
 800e154:	e0df      	b.n	800e316 <_svfprintf_r+0x13be>
 800e156:	af2f      	add	r7, sp, #188	; 0xbc
 800e158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	18ed      	adds	r5, r5, r3
 800e15e:	e724      	b.n	800dfaa <_svfprintf_r+0x1052>
 800e160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e162:	3b01      	subs	r3, #1
 800e164:	9312      	str	r3, [sp, #72]	; 0x48
 800e166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e168:	3b01      	subs	r3, #1
 800e16a:	9311      	str	r3, [sp, #68]	; 0x44
 800e16c:	e79d      	b.n	800e0aa <_svfprintf_r+0x1152>
 800e16e:	2010      	movs	r0, #16
 800e170:	1812      	adds	r2, r2, r0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	922e      	str	r2, [sp, #184]	; 0xb8
 800e176:	932d      	str	r3, [sp, #180]	; 0xb4
 800e178:	2b07      	cmp	r3, #7
 800e17a:	dd08      	ble.n	800e18e <_svfprintf_r+0x1236>
 800e17c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e17e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e180:	aa2c      	add	r2, sp, #176	; 0xb0
 800e182:	f002 ffff 	bl	8011184 <__ssprint_r>
 800e186:	2800      	cmp	r0, #0
 800e188:	d000      	beq.n	800e18c <_svfprintf_r+0x1234>
 800e18a:	e0c4      	b.n	800e316 <_svfprintf_r+0x13be>
 800e18c:	a92f      	add	r1, sp, #188	; 0xbc
 800e18e:	000f      	movs	r7, r1
 800e190:	3c10      	subs	r4, #16
 800e192:	e7c8      	b.n	800e126 <_svfprintf_r+0x11ce>
 800e194:	3210      	adds	r2, #16
 800e196:	607d      	str	r5, [r7, #4]
 800e198:	922e      	str	r2, [sp, #184]	; 0xb8
 800e19a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e19c:	2b07      	cmp	r3, #7
 800e19e:	dd08      	ble.n	800e1b2 <_svfprintf_r+0x125a>
 800e1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1a6:	f002 ffed 	bl	8011184 <__ssprint_r>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d000      	beq.n	800e1b0 <_svfprintf_r+0x1258>
 800e1ae:	e0b2      	b.n	800e316 <_svfprintf_r+0x13be>
 800e1b0:	a92f      	add	r1, sp, #188	; 0xbc
 800e1b2:	000f      	movs	r7, r1
 800e1b4:	3c10      	subs	r4, #16
 800e1b6:	e74c      	b.n	800e052 <_svfprintf_r+0x10fa>
 800e1b8:	003c      	movs	r4, r7
 800e1ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e1bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1c0:	3101      	adds	r1, #1
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	3408      	adds	r4, #8
 800e1c6:	2a01      	cmp	r2, #1
 800e1c8:	dc03      	bgt.n	800e1d2 <_svfprintf_r+0x127a>
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4216      	tst	r6, r2
 800e1ce:	d100      	bne.n	800e1d2 <_svfprintf_r+0x127a>
 800e1d0:	e07f      	b.n	800e2d2 <_svfprintf_r+0x137a>
 800e1d2:	9a08      	ldr	r2, [sp, #32]
 800e1d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e1d6:	603a      	str	r2, [r7, #0]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	2b07      	cmp	r3, #7
 800e1e0:	dd08      	ble.n	800e1f4 <_svfprintf_r+0x129c>
 800e1e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1e6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1e8:	f002 ffcc 	bl	8011184 <__ssprint_r>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d000      	beq.n	800e1f2 <_svfprintf_r+0x129a>
 800e1f0:	e091      	b.n	800e316 <_svfprintf_r+0x13be>
 800e1f2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e1f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e1f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1f8:	6023      	str	r3, [r4, #0]
 800e1fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1fc:	6063      	str	r3, [r4, #4]
 800e1fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e200:	3408      	adds	r4, #8
 800e202:	189b      	adds	r3, r3, r2
 800e204:	932e      	str	r3, [sp, #184]	; 0xb8
 800e206:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e208:	3301      	adds	r3, #1
 800e20a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e20c:	2b07      	cmp	r3, #7
 800e20e:	dd07      	ble.n	800e220 <_svfprintf_r+0x12c8>
 800e210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e212:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e214:	aa2c      	add	r2, sp, #176	; 0xb0
 800e216:	f002 ffb5 	bl	8011184 <__ssprint_r>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d17b      	bne.n	800e316 <_svfprintf_r+0x13be>
 800e21e:	ac2f      	add	r4, sp, #188	; 0xbc
 800e220:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e222:	2200      	movs	r2, #0
 800e224:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e226:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e228:	9309      	str	r3, [sp, #36]	; 0x24
 800e22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e22c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e22e:	1e5d      	subs	r5, r3, #1
 800e230:	2300      	movs	r3, #0
 800e232:	f7f2 f909 	bl	8000448 <__aeabi_dcmpeq>
 800e236:	2800      	cmp	r0, #0
 800e238:	d126      	bne.n	800e288 <_svfprintf_r+0x1330>
 800e23a:	9b08      	ldr	r3, [sp, #32]
 800e23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e23e:	3301      	adds	r3, #1
 800e240:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	1e7b      	subs	r3, r7, #1
 800e246:	3201      	adds	r2, #1
 800e248:	185b      	adds	r3, r3, r1
 800e24a:	6065      	str	r5, [r4, #4]
 800e24c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e24e:	922d      	str	r2, [sp, #180]	; 0xb4
 800e250:	3408      	adds	r4, #8
 800e252:	2a07      	cmp	r2, #7
 800e254:	dd07      	ble.n	800e266 <_svfprintf_r+0x130e>
 800e256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e258:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e25a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e25c:	f002 ff92 	bl	8011184 <__ssprint_r>
 800e260:	2800      	cmp	r0, #0
 800e262:	d158      	bne.n	800e316 <_svfprintf_r+0x13be>
 800e264:	ac2f      	add	r4, sp, #188	; 0xbc
 800e266:	ab28      	add	r3, sp, #160	; 0xa0
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e26c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e26e:	6063      	str	r3, [r4, #4]
 800e270:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e272:	189b      	adds	r3, r3, r2
 800e274:	932e      	str	r3, [sp, #184]	; 0xb8
 800e276:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e278:	3301      	adds	r3, #1
 800e27a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e27c:	2b07      	cmp	r3, #7
 800e27e:	dd00      	ble.n	800e282 <_svfprintf_r+0x132a>
 800e280:	e638      	b.n	800def4 <_svfprintf_r+0xf9c>
 800e282:	3408      	adds	r4, #8
 800e284:	0027      	movs	r7, r4
 800e286:	e595      	b.n	800ddb4 <_svfprintf_r+0xe5c>
 800e288:	2710      	movs	r7, #16
 800e28a:	2d00      	cmp	r5, #0
 800e28c:	ddeb      	ble.n	800e266 <_svfprintf_r+0x130e>
 800e28e:	0021      	movs	r1, r4
 800e290:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e292:	4850      	ldr	r0, [pc, #320]	; (800e3d4 <_svfprintf_r+0x147c>)
 800e294:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e296:	3301      	adds	r3, #1
 800e298:	3108      	adds	r1, #8
 800e29a:	6020      	str	r0, [r4, #0]
 800e29c:	2d10      	cmp	r5, #16
 800e29e:	dc07      	bgt.n	800e2b0 <_svfprintf_r+0x1358>
 800e2a0:	6065      	str	r5, [r4, #4]
 800e2a2:	000c      	movs	r4, r1
 800e2a4:	18ad      	adds	r5, r5, r2
 800e2a6:	952e      	str	r5, [sp, #184]	; 0xb8
 800e2a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2aa:	2b07      	cmp	r3, #7
 800e2ac:	dddb      	ble.n	800e266 <_svfprintf_r+0x130e>
 800e2ae:	e7d2      	b.n	800e256 <_svfprintf_r+0x12fe>
 800e2b0:	3210      	adds	r2, #16
 800e2b2:	6067      	str	r7, [r4, #4]
 800e2b4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e2b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2b8:	2b07      	cmp	r3, #7
 800e2ba:	dd07      	ble.n	800e2cc <_svfprintf_r+0x1374>
 800e2bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2c2:	f002 ff5f 	bl	8011184 <__ssprint_r>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d125      	bne.n	800e316 <_svfprintf_r+0x13be>
 800e2ca:	a92f      	add	r1, sp, #188	; 0xbc
 800e2cc:	000c      	movs	r4, r1
 800e2ce:	3d10      	subs	r5, #16
 800e2d0:	e7dd      	b.n	800e28e <_svfprintf_r+0x1336>
 800e2d2:	9808      	ldr	r0, [sp, #32]
 800e2d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e2d6:	c705      	stmia	r7!, {r0, r2}
 800e2d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2da:	e7e6      	b.n	800e2aa <_svfprintf_r+0x1352>
 800e2dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e2de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e2e0:	2510      	movs	r5, #16
 800e2e2:	1a9c      	subs	r4, r3, r2
 800e2e4:	2c00      	cmp	r4, #0
 800e2e6:	dc00      	bgt.n	800e2ea <_svfprintf_r+0x1392>
 800e2e8:	e567      	b.n	800ddba <_svfprintf_r+0xe62>
 800e2ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2ec:	493a      	ldr	r1, [pc, #232]	; (800e3d8 <_svfprintf_r+0x1480>)
 800e2ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	6039      	str	r1, [r7, #0]
 800e2f4:	2c10      	cmp	r4, #16
 800e2f6:	dc19      	bgt.n	800e32c <_svfprintf_r+0x13d4>
 800e2f8:	607c      	str	r4, [r7, #4]
 800e2fa:	18a4      	adds	r4, r4, r2
 800e2fc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e2fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800e300:	2b07      	cmp	r3, #7
 800e302:	dc00      	bgt.n	800e306 <_svfprintf_r+0x13ae>
 800e304:	e559      	b.n	800ddba <_svfprintf_r+0xe62>
 800e306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e308:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e30a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e30c:	f002 ff3a 	bl	8011184 <__ssprint_r>
 800e310:	2800      	cmp	r0, #0
 800e312:	d100      	bne.n	800e316 <_svfprintf_r+0x13be>
 800e314:	e551      	b.n	800ddba <_svfprintf_r+0xe62>
 800e316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <_svfprintf_r+0x13c8>
 800e31c:	f7ff f845 	bl	800d3aa <_svfprintf_r+0x452>
 800e320:	0019      	movs	r1, r3
 800e322:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e324:	f7fd fd80 	bl	800be28 <_free_r>
 800e328:	f7ff f83f 	bl	800d3aa <_svfprintf_r+0x452>
 800e32c:	3210      	adds	r2, #16
 800e32e:	607d      	str	r5, [r7, #4]
 800e330:	922e      	str	r2, [sp, #184]	; 0xb8
 800e332:	932d      	str	r3, [sp, #180]	; 0xb4
 800e334:	3708      	adds	r7, #8
 800e336:	2b07      	cmp	r3, #7
 800e338:	dd07      	ble.n	800e34a <_svfprintf_r+0x13f2>
 800e33a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e33c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e33e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e340:	f002 ff20 	bl	8011184 <__ssprint_r>
 800e344:	2800      	cmp	r0, #0
 800e346:	d1e6      	bne.n	800e316 <_svfprintf_r+0x13be>
 800e348:	af2f      	add	r7, sp, #188	; 0xbc
 800e34a:	3c10      	subs	r4, #16
 800e34c:	e7cd      	b.n	800e2ea <_svfprintf_r+0x1392>
 800e34e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e350:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e352:	f7fd fd69 	bl	800be28 <_free_r>
 800e356:	e549      	b.n	800ddec <_svfprintf_r+0xe94>
 800e358:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <_svfprintf_r+0x140a>
 800e35e:	f7ff f824 	bl	800d3aa <_svfprintf_r+0x452>
 800e362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e364:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e366:	aa2c      	add	r2, sp, #176	; 0xb0
 800e368:	f002 ff0c 	bl	8011184 <__ssprint_r>
 800e36c:	f7ff f81d 	bl	800d3aa <_svfprintf_r+0x452>
 800e370:	0034      	movs	r4, r6
 800e372:	2a00      	cmp	r2, #0
 800e374:	d101      	bne.n	800e37a <_svfprintf_r+0x1422>
 800e376:	f7fe ff8c 	bl	800d292 <_svfprintf_r+0x33a>
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d101      	bne.n	800e382 <_svfprintf_r+0x142a>
 800e37e:	f7ff fc01 	bl	800db84 <_svfprintf_r+0xc2c>
 800e382:	2b02      	cmp	r3, #2
 800e384:	d100      	bne.n	800e388 <_svfprintf_r+0x1430>
 800e386:	e459      	b.n	800dc3c <_svfprintf_r+0xce4>
 800e388:	2507      	movs	r5, #7
 800e38a:	ab58      	add	r3, sp, #352	; 0x160
 800e38c:	9308      	str	r3, [sp, #32]
 800e38e:	9a08      	ldr	r2, [sp, #32]
 800e390:	0013      	movs	r3, r2
 800e392:	3b01      	subs	r3, #1
 800e394:	9308      	str	r3, [sp, #32]
 800e396:	9b06      	ldr	r3, [sp, #24]
 800e398:	9908      	ldr	r1, [sp, #32]
 800e39a:	402b      	ands	r3, r5
 800e39c:	3330      	adds	r3, #48	; 0x30
 800e39e:	700b      	strb	r3, [r1, #0]
 800e3a0:	9907      	ldr	r1, [sp, #28]
 800e3a2:	074e      	lsls	r6, r1, #29
 800e3a4:	9906      	ldr	r1, [sp, #24]
 800e3a6:	08c8      	lsrs	r0, r1, #3
 800e3a8:	9907      	ldr	r1, [sp, #28]
 800e3aa:	4306      	orrs	r6, r0
 800e3ac:	08c9      	lsrs	r1, r1, #3
 800e3ae:	9107      	str	r1, [sp, #28]
 800e3b0:	0031      	movs	r1, r6
 800e3b2:	9807      	ldr	r0, [sp, #28]
 800e3b4:	9606      	str	r6, [sp, #24]
 800e3b6:	4301      	orrs	r1, r0
 800e3b8:	d1e9      	bne.n	800e38e <_svfprintf_r+0x1436>
 800e3ba:	07e1      	lsls	r1, r4, #31
 800e3bc:	d400      	bmi.n	800e3c0 <_svfprintf_r+0x1468>
 800e3be:	e42a      	b.n	800dc16 <_svfprintf_r+0xcbe>
 800e3c0:	2b30      	cmp	r3, #48	; 0x30
 800e3c2:	d100      	bne.n	800e3c6 <_svfprintf_r+0x146e>
 800e3c4:	e427      	b.n	800dc16 <_svfprintf_r+0xcbe>
 800e3c6:	2130      	movs	r1, #48	; 0x30
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	7019      	strb	r1, [r3, #0]
 800e3ce:	1e93      	subs	r3, r2, #2
 800e3d0:	9308      	str	r3, [sp, #32]
 800e3d2:	e420      	b.n	800dc16 <_svfprintf_r+0xcbe>
 800e3d4:	08014638 	.word	0x08014638
 800e3d8:	08014628 	.word	0x08014628

0800e3dc <__ssvfscanf_r>:
 800e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3de:	4ca7      	ldr	r4, [pc, #668]	; (800e67c <__ssvfscanf_r+0x2a0>)
 800e3e0:	44a5      	add	sp, r4
 800e3e2:	af02      	add	r7, sp, #8
 800e3e4:	633b      	str	r3, [r7, #48]	; 0x30
 800e3e6:	000b      	movs	r3, r1
 800e3e8:	6378      	str	r0, [r7, #52]	; 0x34
 800e3ea:	6479      	str	r1, [r7, #68]	; 0x44
 800e3ec:	61ba      	str	r2, [r7, #24]
 800e3ee:	220c      	movs	r2, #12
 800e3f0:	5e9a      	ldrsh	r2, [r3, r2]
 800e3f2:	2380      	movs	r3, #128	; 0x80
 800e3f4:	019b      	lsls	r3, r3, #6
 800e3f6:	421a      	tst	r2, r3
 800e3f8:	d105      	bne.n	800e406 <__ssvfscanf_r+0x2a>
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	818b      	strh	r3, [r1, #12]
 800e3fe:	4aa0      	ldr	r2, [pc, #640]	; (800e680 <__ssvfscanf_r+0x2a4>)
 800e400:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e402:	4013      	ands	r3, r2
 800e404:	664b      	str	r3, [r1, #100]	; 0x64
 800e406:	2300      	movs	r3, #0
 800e408:	617b      	str	r3, [r7, #20]
 800e40a:	643b      	str	r3, [r7, #64]	; 0x40
 800e40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e40e:	627b      	str	r3, [r7, #36]	; 0x24
 800e410:	63bb      	str	r3, [r7, #56]	; 0x38
 800e412:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	3201      	adds	r2, #1
 800e41c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e41e:	61ba      	str	r2, [r7, #24]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d100      	bne.n	800e426 <__ssvfscanf_r+0x4a>
 800e424:	e0d7      	b.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e426:	2608      	movs	r6, #8
 800e428:	2108      	movs	r1, #8
 800e42a:	4a96      	ldr	r2, [pc, #600]	; (800e684 <__ssvfscanf_r+0x2a8>)
 800e42c:	5cd2      	ldrb	r2, [r2, r3]
 800e42e:	4016      	ands	r6, r2
 800e430:	420a      	tst	r2, r1
 800e432:	d01d      	beq.n	800e470 <__ssvfscanf_r+0x94>
 800e434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dd12      	ble.n	800e462 <__ssvfscanf_r+0x86>
 800e43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43e:	4991      	ldr	r1, [pc, #580]	; (800e684 <__ssvfscanf_r+0x2a8>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	781a      	ldrb	r2, [r3, #0]
 800e444:	5c8a      	ldrb	r2, [r1, r2]
 800e446:	2108      	movs	r1, #8
 800e448:	420a      	tst	r2, r1
 800e44a:	d0e3      	beq.n	800e414 <__ssvfscanf_r+0x38>
 800e44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e44e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e450:	3201      	adds	r2, #1
 800e452:	63ba      	str	r2, [r7, #56]	; 0x38
 800e454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e456:	3301      	adds	r3, #1
 800e458:	6852      	ldr	r2, [r2, #4]
 800e45a:	600b      	str	r3, [r1, #0]
 800e45c:	3a01      	subs	r2, #1
 800e45e:	604a      	str	r2, [r1, #4]
 800e460:	e7e8      	b.n	800e434 <__ssvfscanf_r+0x58>
 800e462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e464:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e466:	f002 ff4d 	bl	8011304 <__ssrefill_r>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d0e6      	beq.n	800e43c <__ssvfscanf_r+0x60>
 800e46e:	e7d1      	b.n	800e414 <__ssvfscanf_r+0x38>
 800e470:	2b25      	cmp	r3, #37	; 0x25
 800e472:	d165      	bne.n	800e540 <__ssvfscanf_r+0x164>
 800e474:	250a      	movs	r5, #10
 800e476:	2480      	movs	r4, #128	; 0x80
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e47c:	3b16      	subs	r3, #22
 800e47e:	69b9      	ldr	r1, [r7, #24]
 800e480:	3101      	adds	r1, #1
 800e482:	61b9      	str	r1, [r7, #24]
 800e484:	7811      	ldrb	r1, [r2, #0]
 800e486:	0008      	movs	r0, r1
 800e488:	3825      	subs	r0, #37	; 0x25
 800e48a:	2855      	cmp	r0, #85	; 0x55
 800e48c:	d900      	bls.n	800e490 <__ssvfscanf_r+0xb4>
 800e48e:	e170      	b.n	800e772 <__ssvfscanf_r+0x396>
 800e490:	f7f1 fe4a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e494:	016f0056 	.word	0x016f0056
 800e498:	016f016f 	.word	0x016f016f
 800e49c:	0081016f 	.word	0x0081016f
 800e4a0:	016f016f 	.word	0x016f016f
 800e4a4:	016f016f 	.word	0x016f016f
 800e4a8:	00b8016f 	.word	0x00b8016f
 800e4ac:	00b800b8 	.word	0x00b800b8
 800e4b0:	00b800b8 	.word	0x00b800b8
 800e4b4:	00b800b8 	.word	0x00b800b8
 800e4b8:	00b800b8 	.word	0x00b800b8
 800e4bc:	016f00b8 	.word	0x016f00b8
 800e4c0:	016f016f 	.word	0x016f016f
 800e4c4:	016f016f 	.word	0x016f016f
 800e4c8:	016f016f 	.word	0x016f016f
 800e4cc:	016f00d8 	.word	0x016f00d8
 800e4d0:	00c1010a 	.word	0x00c1010a
 800e4d4:	00d800d8 	.word	0x00d800d8
 800e4d8:	016f00d8 	.word	0x016f00d8
 800e4dc:	016f016f 	.word	0x016f016f
 800e4e0:	009f016f 	.word	0x009f016f
 800e4e4:	016f016f 	.word	0x016f016f
 800e4e8:	016f00c9 	.word	0x016f00c9
 800e4ec:	016f016f 	.word	0x016f016f
 800e4f0:	016f00f0 	.word	0x016f00f0
 800e4f4:	016f016f 	.word	0x016f016f
 800e4f8:	00d1016f 	.word	0x00d1016f
 800e4fc:	016f016f 	.word	0x016f016f
 800e500:	016f00fe 	.word	0x016f00fe
 800e504:	016f016f 	.word	0x016f016f
 800e508:	016f016f 	.word	0x016f016f
 800e50c:	016f00d8 	.word	0x016f00d8
 800e510:	00c3010c 	.word	0x00c3010c
 800e514:	00d800d8 	.word	0x00d800d8
 800e518:	009400d8 	.word	0x009400d8
 800e51c:	009f012f 	.word	0x009f012f
 800e520:	0088016f 	.word	0x0088016f
 800e524:	011200a9 	.word	0x011200a9
 800e528:	011000cb 	.word	0x011000cb
 800e52c:	016f016f 	.word	0x016f016f
 800e530:	00a600f2 	.word	0x00a600f2
 800e534:	016f00cf 	.word	0x016f00cf
 800e538:	00d1016f 	.word	0x00d1016f
 800e53c:	00a6016f 	.word	0x00a6016f
 800e540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	dd12      	ble.n	800e56e <__ssvfscanf_r+0x192>
 800e548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3a01      	subs	r2, #1
 800e550:	7819      	ldrb	r1, [r3, #0]
 800e552:	7812      	ldrb	r2, [r2, #0]
 800e554:	4291      	cmp	r1, r2
 800e556:	d13e      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e55a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e55c:	6852      	ldr	r2, [r2, #4]
 800e55e:	3301      	adds	r3, #1
 800e560:	600b      	str	r3, [r1, #0]
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	3a01      	subs	r2, #1
 800e566:	604a      	str	r2, [r1, #4]
 800e568:	3301      	adds	r3, #1
 800e56a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e56c:	e752      	b.n	800e414 <__ssvfscanf_r+0x38>
 800e56e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e572:	f002 fec7 	bl	8011304 <__ssrefill_r>
 800e576:	2800      	cmp	r0, #0
 800e578:	d0e6      	beq.n	800e548 <__ssvfscanf_r+0x16c>
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d003      	beq.n	800e588 <__ssvfscanf_r+0x1ac>
 800e580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e582:	899b      	ldrh	r3, [r3, #12]
 800e584:	065b      	lsls	r3, r3, #25
 800e586:	d526      	bpl.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d000      	beq.n	800e590 <__ssvfscanf_r+0x1b4>
 800e58e:	e0f6      	b.n	800e77e <__ssvfscanf_r+0x3a2>
 800e590:	3b01      	subs	r3, #1
 800e592:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e594:	e104      	b.n	800e7a0 <__ssvfscanf_r+0x3c4>
 800e596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e598:	4332      	orrs	r2, r6
 800e59a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e59c:	d11b      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e59e:	2610      	movs	r6, #16
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	e76c      	b.n	800e47e <__ssvfscanf_r+0xa2>
 800e5a4:	421e      	tst	r6, r3
 800e5a6:	d116      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e5a8:	7851      	ldrb	r1, [r2, #1]
 800e5aa:	296c      	cmp	r1, #108	; 0x6c
 800e5ac:	d103      	bne.n	800e5b6 <__ssvfscanf_r+0x1da>
 800e5ae:	3202      	adds	r2, #2
 800e5b0:	61ba      	str	r2, [r7, #24]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	e000      	b.n	800e5b8 <__ssvfscanf_r+0x1dc>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4316      	orrs	r6, r2
 800e5ba:	e7f1      	b.n	800e5a0 <__ssvfscanf_r+0x1c4>
 800e5bc:	421e      	tst	r6, r3
 800e5be:	d10a      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e5c0:	7851      	ldrb	r1, [r2, #1]
 800e5c2:	2968      	cmp	r1, #104	; 0x68
 800e5c4:	d103      	bne.n	800e5ce <__ssvfscanf_r+0x1f2>
 800e5c6:	3202      	adds	r2, #2
 800e5c8:	61ba      	str	r2, [r7, #24]
 800e5ca:	2208      	movs	r2, #8
 800e5cc:	e7f4      	b.n	800e5b8 <__ssvfscanf_r+0x1dc>
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	e7f2      	b.n	800e5b8 <__ssvfscanf_r+0x1dc>
 800e5d2:	421e      	tst	r6, r3
 800e5d4:	d0ed      	beq.n	800e5b2 <__ssvfscanf_r+0x1d6>
 800e5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d000      	beq.n	800e5de <__ssvfscanf_r+0x202>
 800e5dc:	e0da      	b.n	800e794 <__ssvfscanf_r+0x3b8>
 800e5de:	e0df      	b.n	800e7a0 <__ssvfscanf_r+0x3c4>
 800e5e0:	421e      	tst	r6, r3
 800e5e2:	d0dd      	beq.n	800e5a0 <__ssvfscanf_r+0x1c4>
 800e5e4:	e7f7      	b.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e5e6:	228f      	movs	r2, #143	; 0x8f
 800e5e8:	218f      	movs	r1, #143	; 0x8f
 800e5ea:	4032      	ands	r2, r6
 800e5ec:	420e      	tst	r6, r1
 800e5ee:	d1f2      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e5f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5f2:	2900      	cmp	r1, #0
 800e5f4:	d104      	bne.n	800e600 <__ssvfscanf_r+0x224>
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	a902      	add	r1, sp, #8
 800e5fa:	6439      	str	r1, [r7, #64]	; 0x40
 800e5fc:	600a      	str	r2, [r1, #0]
 800e5fe:	604a      	str	r2, [r1, #4]
 800e600:	4326      	orrs	r6, r4
 800e602:	e7cd      	b.n	800e5a0 <__ssvfscanf_r+0x1c4>
 800e604:	228f      	movs	r2, #143	; 0x8f
 800e606:	4216      	tst	r6, r2
 800e608:	d1e5      	bne.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e60a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e60c:	436a      	muls	r2, r5
 800e60e:	3a30      	subs	r2, #48	; 0x30
 800e610:	188a      	adds	r2, r1, r2
 800e612:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e614:	e7c4      	b.n	800e5a0 <__ssvfscanf_r+0x1c4>
 800e616:	2301      	movs	r3, #1
 800e618:	431e      	orrs	r6, r3
 800e61a:	4b1b      	ldr	r3, [pc, #108]	; (800e688 <__ssvfscanf_r+0x2ac>)
 800e61c:	617b      	str	r3, [r7, #20]
 800e61e:	230a      	movs	r3, #10
 800e620:	2403      	movs	r4, #3
 800e622:	627b      	str	r3, [r7, #36]	; 0x24
 800e624:	e00f      	b.n	800e646 <__ssvfscanf_r+0x26a>
 800e626:	2301      	movs	r3, #1
 800e628:	431e      	orrs	r6, r3
 800e62a:	4b18      	ldr	r3, [pc, #96]	; (800e68c <__ssvfscanf_r+0x2b0>)
 800e62c:	617b      	str	r3, [r7, #20]
 800e62e:	2308      	movs	r3, #8
 800e630:	e7f6      	b.n	800e620 <__ssvfscanf_r+0x244>
 800e632:	4b16      	ldr	r3, [pc, #88]	; (800e68c <__ssvfscanf_r+0x2b0>)
 800e634:	e7f2      	b.n	800e61c <__ssvfscanf_r+0x240>
 800e636:	2380      	movs	r3, #128	; 0x80
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	431e      	orrs	r6, r3
 800e63c:	4b13      	ldr	r3, [pc, #76]	; (800e68c <__ssvfscanf_r+0x2b0>)
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	2310      	movs	r3, #16
 800e642:	e7ed      	b.n	800e620 <__ssvfscanf_r+0x244>
 800e644:	2404      	movs	r4, #4
 800e646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	dd55      	ble.n	800e6fa <__ssvfscanf_r+0x31e>
 800e64e:	0673      	lsls	r3, r6, #25
 800e650:	d407      	bmi.n	800e662 <__ssvfscanf_r+0x286>
 800e652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e654:	490b      	ldr	r1, [pc, #44]	; (800e684 <__ssvfscanf_r+0x2a8>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	781a      	ldrb	r2, [r3, #0]
 800e65a:	5c8a      	ldrb	r2, [r1, r2]
 800e65c:	2108      	movs	r1, #8
 800e65e:	420a      	tst	r2, r1
 800e660:	d152      	bne.n	800e708 <__ssvfscanf_r+0x32c>
 800e662:	1e60      	subs	r0, r4, #1
 800e664:	2803      	cmp	r0, #3
 800e666:	d863      	bhi.n	800e730 <__ssvfscanf_r+0x354>
 800e668:	f7f1 fd5e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e66c:	03bd01da 	.word	0x03bd01da
 800e670:	068a0579 	.word	0x068a0579
 800e674:	2301      	movs	r3, #1
 800e676:	431e      	orrs	r6, r3
 800e678:	2402      	movs	r4, #2
 800e67a:	e7e4      	b.n	800e646 <__ssvfscanf_r+0x26a>
 800e67c:	fffffd34 	.word	0xfffffd34
 800e680:	ffffdfff 	.word	0xffffdfff
 800e684:	08014321 	.word	0x08014321
 800e688:	0800b82d 	.word	0x0800b82d
 800e68c:	08010e35 	.word	0x08010e35
 800e690:	2248      	movs	r2, #72	; 0x48
 800e692:	2318      	movs	r3, #24
 800e694:	189b      	adds	r3, r3, r2
 800e696:	19d8      	adds	r0, r3, r7
 800e698:	69b9      	ldr	r1, [r7, #24]
 800e69a:	f001 f9d7 	bl	800fa4c <__sccl>
 800e69e:	2340      	movs	r3, #64	; 0x40
 800e6a0:	2401      	movs	r4, #1
 800e6a2:	61b8      	str	r0, [r7, #24]
 800e6a4:	431e      	orrs	r6, r3
 800e6a6:	e7ce      	b.n	800e646 <__ssvfscanf_r+0x26a>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	431e      	orrs	r6, r3
 800e6ac:	2340      	movs	r3, #64	; 0x40
 800e6ae:	2400      	movs	r4, #0
 800e6b0:	431e      	orrs	r6, r3
 800e6b2:	e7c8      	b.n	800e646 <__ssvfscanf_r+0x26a>
 800e6b4:	2388      	movs	r3, #136	; 0x88
 800e6b6:	e7bf      	b.n	800e638 <__ssvfscanf_r+0x25c>
 800e6b8:	06f3      	lsls	r3, r6, #27
 800e6ba:	d500      	bpl.n	800e6be <__ssvfscanf_r+0x2e2>
 800e6bc:	e6aa      	b.n	800e414 <__ssvfscanf_r+0x38>
 800e6be:	2108      	movs	r1, #8
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	cb04      	ldmia	r3!, {r2}
 800e6c4:	420e      	tst	r6, r1
 800e6c6:	d003      	beq.n	800e6d0 <__ssvfscanf_r+0x2f4>
 800e6c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6ca:	7011      	strb	r1, [r2, #0]
 800e6cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e6ce:	e6a1      	b.n	800e414 <__ssvfscanf_r+0x38>
 800e6d0:	0771      	lsls	r1, r6, #29
 800e6d2:	d502      	bpl.n	800e6da <__ssvfscanf_r+0x2fe>
 800e6d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6d6:	8011      	strh	r1, [r2, #0]
 800e6d8:	e7f8      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800e6da:	07f1      	lsls	r1, r6, #31
 800e6dc:	d502      	bpl.n	800e6e4 <__ssvfscanf_r+0x308>
 800e6de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6e0:	6011      	str	r1, [r2, #0]
 800e6e2:	e7f3      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800e6e4:	07b6      	lsls	r6, r6, #30
 800e6e6:	d5fa      	bpl.n	800e6de <__ssvfscanf_r+0x302>
 800e6e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6ea:	6011      	str	r1, [r2, #0]
 800e6ec:	17c9      	asrs	r1, r1, #31
 800e6ee:	6051      	str	r1, [r2, #4]
 800e6f0:	e7ec      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800e6f2:	4ba2      	ldr	r3, [pc, #648]	; (800e97c <__ssvfscanf_r+0x5a0>)
 800e6f4:	617b      	str	r3, [r7, #20]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e792      	b.n	800e620 <__ssvfscanf_r+0x244>
 800e6fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6fe:	f002 fe01 	bl	8011304 <__ssrefill_r>
 800e702:	2800      	cmp	r0, #0
 800e704:	d0a3      	beq.n	800e64e <__ssvfscanf_r+0x272>
 800e706:	e738      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e70a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e70c:	3201      	adds	r2, #1
 800e70e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e712:	6852      	ldr	r2, [r2, #4]
 800e714:	3a01      	subs	r2, #1
 800e716:	604a      	str	r2, [r1, #4]
 800e718:	2a00      	cmp	r2, #0
 800e71a:	dd02      	ble.n	800e722 <__ssvfscanf_r+0x346>
 800e71c:	3301      	adds	r3, #1
 800e71e:	600b      	str	r3, [r1, #0]
 800e720:	e797      	b.n	800e652 <__ssvfscanf_r+0x276>
 800e722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e726:	f002 fded 	bl	8011304 <__ssrefill_r>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d091      	beq.n	800e652 <__ssvfscanf_r+0x276>
 800e72e:	e724      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e732:	2301      	movs	r3, #1
 800e734:	2a00      	cmp	r2, #0
 800e736:	d100      	bne.n	800e73a <__ssvfscanf_r+0x35e>
 800e738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e73a:	2210      	movs	r2, #16
 800e73c:	0034      	movs	r4, r6
 800e73e:	4032      	ands	r2, r6
 800e740:	623a      	str	r2, [r7, #32]
 800e742:	401c      	ands	r4, r3
 800e744:	421e      	tst	r6, r3
 800e746:	d100      	bne.n	800e74a <__ssvfscanf_r+0x36e>
 800e748:	e0f3      	b.n	800e932 <__ssvfscanf_r+0x556>
 800e74a:	2a00      	cmp	r2, #0
 800e74c:	d000      	beq.n	800e750 <__ssvfscanf_r+0x374>
 800e74e:	e0b6      	b.n	800e8be <__ssvfscanf_r+0x4e2>
 800e750:	2080      	movs	r0, #128	; 0x80
 800e752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e754:	cb10      	ldmia	r3!, {r4}
 800e756:	613b      	str	r3, [r7, #16]
 800e758:	4206      	tst	r6, r0
 800e75a:	d100      	bne.n	800e75e <__ssvfscanf_r+0x382>
 800e75c:	e0b7      	b.n	800e8ce <__ssvfscanf_r+0x4f2>
 800e75e:	2c00      	cmp	r4, #0
 800e760:	d007      	beq.n	800e772 <__ssvfscanf_r+0x396>
 800e762:	f7fb ff6d 	bl	800a640 <malloc>
 800e766:	6338      	str	r0, [r7, #48]	; 0x30
 800e768:	2800      	cmp	r0, #0
 800e76a:	d11f      	bne.n	800e7ac <__ssvfscanf_r+0x3d0>
 800e76c:	2301      	movs	r3, #1
 800e76e:	425b      	negs	r3, r3
 800e770:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e774:	2b00      	cmp	r3, #0
 800e776:	d013      	beq.n	800e7a0 <__ssvfscanf_r+0x3c4>
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	3301      	adds	r3, #1
 800e77c:	d10a      	bne.n	800e794 <__ssvfscanf_r+0x3b8>
 800e77e:	2400      	movs	r4, #0
 800e780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e782:	681d      	ldr	r5, [r3, #0]
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	42a3      	cmp	r3, r4
 800e788:	dd01      	ble.n	800e78e <__ssvfscanf_r+0x3b2>
 800e78a:	f001 f82a 	bl	800f7e2 <__ssvfscanf_r+0x1406>
 800e78e:	2301      	movs	r3, #1
 800e790:	425b      	negs	r3, r3
 800e792:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	2800      	cmp	r0, #0
 800e79a:	d001      	beq.n	800e7a0 <__ssvfscanf_r+0x3c4>
 800e79c:	f7fb ff5a 	bl	800a654 <free>
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a4:	23b1      	movs	r3, #177	; 0xb1
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	449d      	add	sp, r3
 800e7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ae:	6023      	str	r3, [r4, #0]
 800e7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b2:	88de      	ldrh	r6, [r3, #6]
 800e7b4:	889d      	ldrh	r5, [r3, #4]
 800e7b6:	42ae      	cmp	r6, r5
 800e7b8:	d30e      	bcc.n	800e7d8 <__ssvfscanf_r+0x3fc>
 800e7ba:	4b71      	ldr	r3, [pc, #452]	; (800e980 <__ssvfscanf_r+0x5a4>)
 800e7bc:	429d      	cmp	r5, r3
 800e7be:	d8d5      	bhi.n	800e76c <__ssvfscanf_r+0x390>
 800e7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c2:	3508      	adds	r5, #8
 800e7c4:	b2ad      	uxth	r5, r5
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	00a9      	lsls	r1, r5, #2
 800e7ca:	f002 f901 	bl	80109d0 <realloc>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d0cc      	beq.n	800e76c <__ssvfscanf_r+0x390>
 800e7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7d4:	6018      	str	r0, [r3, #0]
 800e7d6:	809d      	strh	r5, [r3, #4]
 800e7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7da:	1c72      	adds	r2, r6, #1
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	00b6      	lsls	r6, r6, #2
 800e7e0:	50f4      	str	r4, [r6, r3]
 800e7e2:	2320      	movs	r3, #32
 800e7e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7e6:	0026      	movs	r6, r4
 800e7e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e7ea:	80ca      	strh	r2, [r1, #6]
 800e7ec:	61fb      	str	r3, [r7, #28]
 800e7ee:	2500      	movs	r5, #0
 800e7f0:	f7fd f9fe 	bl	800bbf0 <__locale_mb_cur_max>
 800e7f4:	42a8      	cmp	r0, r5
 800e7f6:	d100      	bne.n	800e7fa <__ssvfscanf_r+0x41e>
 800e7f8:	e6bf      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e7fa:	1c6a      	adds	r2, r5, #1
 800e7fc:	60fa      	str	r2, [r7, #12]
 800e7fe:	228c      	movs	r2, #140	; 0x8c
 800e800:	2048      	movs	r0, #72	; 0x48
 800e802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e804:	0052      	lsls	r2, r2, #1
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	1812      	adds	r2, r2, r0
 800e80a:	7819      	ldrb	r1, [r3, #0]
 800e80c:	19d2      	adds	r2, r2, r7
 800e80e:	5551      	strb	r1, [r2, r5]
 800e810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e814:	6852      	ldr	r2, [r2, #4]
 800e816:	3301      	adds	r3, #1
 800e818:	600b      	str	r3, [r1, #0]
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	3a01      	subs	r2, #1
 800e81e:	604a      	str	r2, [r1, #4]
 800e820:	2b03      	cmp	r3, #3
 800e822:	d102      	bne.n	800e82a <__ssvfscanf_r+0x44e>
 800e824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e826:	2b04      	cmp	r3, #4
 800e828:	d007      	beq.n	800e83a <__ssvfscanf_r+0x45e>
 800e82a:	2048      	movs	r0, #72	; 0x48
 800e82c:	2310      	movs	r3, #16
 800e82e:	181b      	adds	r3, r3, r0
 800e830:	2208      	movs	r2, #8
 800e832:	2100      	movs	r1, #0
 800e834:	19d8      	adds	r0, r3, r7
 800e836:	f7fd f997 	bl	800bb68 <memset>
 800e83a:	2148      	movs	r1, #72	; 0x48
 800e83c:	2310      	movs	r3, #16
 800e83e:	228c      	movs	r2, #140	; 0x8c
 800e840:	185b      	adds	r3, r3, r1
 800e842:	0052      	lsls	r2, r2, #1
 800e844:	19db      	adds	r3, r3, r7
 800e846:	1852      	adds	r2, r2, r1
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	0021      	movs	r1, r4
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e850:	19d2      	adds	r2, r2, r7
 800e852:	f002 fc57 	bl	8011104 <_mbrtowc_r>
 800e856:	0003      	movs	r3, r0
 800e858:	62b8      	str	r0, [r7, #40]	; 0x28
 800e85a:	3301      	adds	r3, #1
 800e85c:	d100      	bne.n	800e860 <__ssvfscanf_r+0x484>
 800e85e:	e68c      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e860:	2800      	cmp	r0, #0
 800e862:	d139      	bne.n	800e8d8 <__ssvfscanf_r+0x4fc>
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d100      	bne.n	800e86c <__ssvfscanf_r+0x490>
 800e86a:	6023      	str	r3, [r4, #0]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	4694      	mov	ip, r2
 800e872:	4463      	add	r3, ip
 800e874:	63bb      	str	r3, [r7, #56]	; 0x38
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	2b03      	cmp	r3, #3
 800e87a:	d102      	bne.n	800e882 <__ssvfscanf_r+0x4a6>
 800e87c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e87e:	2b04      	cmp	r3, #4
 800e880:	d002      	beq.n	800e888 <__ssvfscanf_r+0x4ac>
 800e882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e884:	3b01      	subs	r3, #1
 800e886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d115      	bne.n	800e8ba <__ssvfscanf_r+0x4de>
 800e88e:	2e00      	cmp	r6, #0
 800e890:	d012      	beq.n	800e8b8 <__ssvfscanf_r+0x4dc>
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	1ae5      	subs	r5, r4, r3
 800e898:	10ab      	asrs	r3, r5, #2
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d30c      	bcc.n	800e8b8 <__ssvfscanf_r+0x4dc>
 800e89e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8a0:	00d1      	lsls	r1, r2, #3
 800e8a2:	f002 f895 	bl	80109d0 <realloc>
 800e8a6:	6338      	str	r0, [r7, #48]	; 0x30
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d100      	bne.n	800e8ae <__ssvfscanf_r+0x4d2>
 800e8ac:	e75e      	b.n	800e76c <__ssvfscanf_r+0x390>
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	1944      	adds	r4, r0, r5
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	6030      	str	r0, [r6, #0]
 800e8b6:	61fb      	str	r3, [r7, #28]
 800e8b8:	3404      	adds	r4, #4
 800e8ba:	2500      	movs	r5, #0
 800e8bc:	e010      	b.n	800e8e0 <__ssvfscanf_r+0x504>
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	613b      	str	r3, [r7, #16]
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	001e      	movs	r6, r3
 800e8c6:	001c      	movs	r4, r3
 800e8c8:	61fb      	str	r3, [r7, #28]
 800e8ca:	633b      	str	r3, [r7, #48]	; 0x30
 800e8cc:	e78f      	b.n	800e7ee <__ssvfscanf_r+0x412>
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	001e      	movs	r6, r3
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	633b      	str	r3, [r7, #48]	; 0x30
 800e8d6:	e78a      	b.n	800e7ee <__ssvfscanf_r+0x412>
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	68fd      	ldr	r5, [r7, #12]
 800e8dc:	3302      	adds	r3, #2
 800e8de:	d1c5      	bne.n	800e86c <__ssvfscanf_r+0x490>
 800e8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dc12      	bgt.n	800e90e <__ssvfscanf_r+0x532>
 800e8e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8ec:	f002 fd0a 	bl	8011304 <__ssrefill_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d00c      	beq.n	800e90e <__ssvfscanf_r+0x532>
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	d000      	beq.n	800e8fa <__ssvfscanf_r+0x51e>
 800e8f8:	e63f      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e8fa:	2e00      	cmp	r6, #0
 800e8fc:	d10c      	bne.n	800e918 <__ssvfscanf_r+0x53c>
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	425a      	negs	r2, r3
 800e902:	4153      	adcs	r3, r2
 800e904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e906:	18d3      	adds	r3, r2, r3
 800e908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	e6de      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800e90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e910:	2b00      	cmp	r3, #0
 800e912:	d000      	beq.n	800e916 <__ssvfscanf_r+0x53a>
 800e914:	e76c      	b.n	800e7f0 <__ssvfscanf_r+0x414>
 800e916:	e7f0      	b.n	800e8fa <__ssvfscanf_r+0x51e>
 800e918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91a:	69fa      	ldr	r2, [r7, #28]
 800e91c:	1ae1      	subs	r1, r4, r3
 800e91e:	108b      	asrs	r3, r1, #2
 800e920:	429a      	cmp	r2, r3
 800e922:	d9ec      	bls.n	800e8fe <__ssvfscanf_r+0x522>
 800e924:	6830      	ldr	r0, [r6, #0]
 800e926:	f002 f853 	bl	80109d0 <realloc>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	d0e7      	beq.n	800e8fe <__ssvfscanf_r+0x522>
 800e92e:	6030      	str	r0, [r6, #0]
 800e930:	e7e5      	b.n	800e8fe <__ssvfscanf_r+0x522>
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d025      	beq.n	800e984 <__ssvfscanf_r+0x5a8>
 800e938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e93a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e940:	6812      	ldr	r2, [r2, #0]
 800e942:	4299      	cmp	r1, r3
 800e944:	dd11      	ble.n	800e96a <__ssvfscanf_r+0x58e>
 800e946:	1ac9      	subs	r1, r1, r3
 800e948:	18d2      	adds	r2, r2, r3
 800e94a:	18e4      	adds	r4, r4, r3
 800e94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e94e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e950:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e952:	0019      	movs	r1, r3
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f002 fcd5 	bl	8011304 <__ssrefill_r>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0ec      	beq.n	800e938 <__ssvfscanf_r+0x55c>
 800e95e:	2c00      	cmp	r4, #0
 800e960:	d100      	bne.n	800e964 <__ssvfscanf_r+0x588>
 800e962:	e60a      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	191b      	adds	r3, r3, r4
 800e968:	e5ff      	b.n	800e56a <__ssvfscanf_r+0x18e>
 800e96a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e96c:	1a5b      	subs	r3, r3, r1
 800e96e:	1864      	adds	r4, r4, r1
 800e970:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e972:	604b      	str	r3, [r1, #4]
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	18d2      	adds	r2, r2, r3
 800e978:	600a      	str	r2, [r1, #0]
 800e97a:	e7f3      	b.n	800e964 <__ssvfscanf_r+0x588>
 800e97c:	0800b82d 	.word	0x0800b82d
 800e980:	0000fff6 	.word	0x0000fff6
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	0034      	movs	r4, r6
 800e988:	cb20      	ldmia	r3!, {r5}
 800e98a:	633b      	str	r3, [r7, #48]	; 0x30
 800e98c:	2380      	movs	r3, #128	; 0x80
 800e98e:	401c      	ands	r4, r3
 800e990:	421e      	tst	r6, r3
 800e992:	d028      	beq.n	800e9e6 <__ssvfscanf_r+0x60a>
 800e994:	2d00      	cmp	r5, #0
 800e996:	d100      	bne.n	800e99a <__ssvfscanf_r+0x5be>
 800e998:	e61d      	b.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800e99a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e99c:	f7fb fe50 	bl	800a640 <malloc>
 800e9a0:	6238      	str	r0, [r7, #32]
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d100      	bne.n	800e9a8 <__ssvfscanf_r+0x5cc>
 800e9a6:	e5ef      	b.n	800e588 <__ssvfscanf_r+0x1ac>
 800e9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9aa:	6028      	str	r0, [r5, #0]
 800e9ac:	88de      	ldrh	r6, [r3, #6]
 800e9ae:	889c      	ldrh	r4, [r3, #4]
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	42a6      	cmp	r6, r4
 800e9b4:	d30e      	bcc.n	800e9d4 <__ssvfscanf_r+0x5f8>
 800e9b6:	4bbf      	ldr	r3, [pc, #764]	; (800ecb4 <__ssvfscanf_r+0x8d8>)
 800e9b8:	429c      	cmp	r4, r3
 800e9ba:	d900      	bls.n	800e9be <__ssvfscanf_r+0x5e2>
 800e9bc:	e6df      	b.n	800e77e <__ssvfscanf_r+0x3a2>
 800e9be:	3408      	adds	r4, #8
 800e9c0:	b2a4      	uxth	r4, r4
 800e9c2:	00a1      	lsls	r1, r4, #2
 800e9c4:	f002 f804 	bl	80109d0 <realloc>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d100      	bne.n	800e9ce <__ssvfscanf_r+0x5f2>
 800e9cc:	e6d7      	b.n	800e77e <__ssvfscanf_r+0x3a2>
 800e9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d0:	6018      	str	r0, [r3, #0]
 800e9d2:	809c      	strh	r4, [r3, #4]
 800e9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d6:	1c72      	adds	r2, r6, #1
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9dc:	00b6      	lsls	r6, r6, #2
 800e9de:	002c      	movs	r4, r5
 800e9e0:	50f5      	str	r5, [r6, r3]
 800e9e2:	6a3d      	ldr	r5, [r7, #32]
 800e9e4:	80ca      	strh	r2, [r1, #6]
 800e9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e8:	0029      	movs	r1, r5
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9f2:	f002 fca6 	bl	8011342 <_sfread_r>
 800e9f6:	1e05      	subs	r5, r0, #0
 800e9f8:	d100      	bne.n	800e9fc <__ssvfscanf_r+0x620>
 800e9fa:	e5be      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800e9fc:	2c00      	cmp	r4, #0
 800e9fe:	d009      	beq.n	800ea14 <__ssvfscanf_r+0x638>
 800ea00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea02:	4283      	cmp	r3, r0
 800ea04:	d906      	bls.n	800ea14 <__ssvfscanf_r+0x638>
 800ea06:	0001      	movs	r1, r0
 800ea08:	6820      	ldr	r0, [r4, #0]
 800ea0a:	f001 ffe1 	bl	80109d0 <realloc>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d000      	beq.n	800ea14 <__ssvfscanf_r+0x638>
 800ea12:	6020      	str	r0, [r4, #0]
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	195b      	adds	r3, r3, r5
 800ea18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	e4f8      	b.n	800e412 <__ssvfscanf_r+0x36>
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <__ssvfscanf_r+0x64e>
 800ea26:	3b01      	subs	r3, #1
 800ea28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea2a:	2210      	movs	r2, #16
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	0034      	movs	r4, r6
 800ea30:	4032      	ands	r2, r6
 800ea32:	401c      	ands	r4, r3
 800ea34:	623a      	str	r2, [r7, #32]
 800ea36:	421e      	tst	r6, r3
 800ea38:	d100      	bne.n	800ea3c <__ssvfscanf_r+0x660>
 800ea3a:	e116      	b.n	800ec6a <__ssvfscanf_r+0x88e>
 800ea3c:	2a00      	cmp	r2, #0
 800ea3e:	d000      	beq.n	800ea42 <__ssvfscanf_r+0x666>
 800ea40:	e0b0      	b.n	800eba4 <__ssvfscanf_r+0x7c8>
 800ea42:	2080      	movs	r0, #128	; 0x80
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	cb10      	ldmia	r3!, {r4}
 800ea48:	60fb      	str	r3, [r7, #12]
 800ea4a:	4206      	tst	r6, r0
 800ea4c:	d100      	bne.n	800ea50 <__ssvfscanf_r+0x674>
 800ea4e:	e0b2      	b.n	800ebb6 <__ssvfscanf_r+0x7da>
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	d100      	bne.n	800ea56 <__ssvfscanf_r+0x67a>
 800ea54:	e68d      	b.n	800e772 <__ssvfscanf_r+0x396>
 800ea56:	f7fb fdf3 	bl	800a640 <malloc>
 800ea5a:	6338      	str	r0, [r7, #48]	; 0x30
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d100      	bne.n	800ea62 <__ssvfscanf_r+0x686>
 800ea60:	e684      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea68:	88de      	ldrh	r6, [r3, #6]
 800ea6a:	889d      	ldrh	r5, [r3, #4]
 800ea6c:	42ae      	cmp	r6, r5
 800ea6e:	d310      	bcc.n	800ea92 <__ssvfscanf_r+0x6b6>
 800ea70:	4b90      	ldr	r3, [pc, #576]	; (800ecb4 <__ssvfscanf_r+0x8d8>)
 800ea72:	429d      	cmp	r5, r3
 800ea74:	d900      	bls.n	800ea78 <__ssvfscanf_r+0x69c>
 800ea76:	e679      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ea78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea7a:	3508      	adds	r5, #8
 800ea7c:	b2ad      	uxth	r5, r5
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	00a9      	lsls	r1, r5, #2
 800ea82:	f001 ffa5 	bl	80109d0 <realloc>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d100      	bne.n	800ea8c <__ssvfscanf_r+0x6b0>
 800ea8a:	e66f      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ea8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea8e:	6018      	str	r0, [r3, #0]
 800ea90:	809d      	strh	r5, [r3, #4]
 800ea92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea94:	1c72      	adds	r2, r6, #1
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	00b6      	lsls	r6, r6, #2
 800ea9a:	50f4      	str	r4, [r6, r3]
 800ea9c:	2320      	movs	r3, #32
 800ea9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eaa0:	0026      	movs	r6, r4
 800eaa2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eaa4:	80ca      	strh	r2, [r1, #6]
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	2500      	movs	r5, #0
 800eaaa:	f7fd f8a1 	bl	800bbf0 <__locale_mb_cur_max>
 800eaae:	42a8      	cmp	r0, r5
 800eab0:	d100      	bne.n	800eab4 <__ssvfscanf_r+0x6d8>
 800eab2:	e562      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800eab4:	1c6a      	adds	r2, r5, #1
 800eab6:	61fa      	str	r2, [r7, #28]
 800eab8:	228c      	movs	r2, #140	; 0x8c
 800eaba:	2048      	movs	r0, #72	; 0x48
 800eabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eabe:	0052      	lsls	r2, r2, #1
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	1812      	adds	r2, r2, r0
 800eac4:	7819      	ldrb	r1, [r3, #0]
 800eac6:	19d2      	adds	r2, r2, r7
 800eac8:	5551      	strb	r1, [r2, r5]
 800eaca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eacc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eace:	6852      	ldr	r2, [r2, #4]
 800ead0:	3301      	adds	r3, #1
 800ead2:	600b      	str	r3, [r1, #0]
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	3a01      	subs	r2, #1
 800ead8:	604a      	str	r2, [r1, #4]
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d102      	bne.n	800eae4 <__ssvfscanf_r+0x708>
 800eade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae0:	2b04      	cmp	r3, #4
 800eae2:	d006      	beq.n	800eaf2 <__ssvfscanf_r+0x716>
 800eae4:	2048      	movs	r0, #72	; 0x48
 800eae6:	2208      	movs	r2, #8
 800eae8:	1813      	adds	r3, r2, r0
 800eaea:	2100      	movs	r1, #0
 800eaec:	19d8      	adds	r0, r3, r7
 800eaee:	f7fd f83b 	bl	800bb68 <memset>
 800eaf2:	2148      	movs	r1, #72	; 0x48
 800eaf4:	2308      	movs	r3, #8
 800eaf6:	228c      	movs	r2, #140	; 0x8c
 800eaf8:	185b      	adds	r3, r3, r1
 800eafa:	0052      	lsls	r2, r2, #1
 800eafc:	19db      	adds	r3, r3, r7
 800eafe:	1852      	adds	r2, r2, r1
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	0021      	movs	r1, r4
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb08:	19d2      	adds	r2, r2, r7
 800eb0a:	f002 fafb 	bl	8011104 <_mbrtowc_r>
 800eb0e:	0003      	movs	r3, r0
 800eb10:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb12:	3301      	adds	r3, #1
 800eb14:	d100      	bne.n	800eb18 <__ssvfscanf_r+0x73c>
 800eb16:	e530      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	d151      	bne.n	800ebc0 <__ssvfscanf_r+0x7e4>
 800eb1c:	6020      	str	r0, [r4, #0]
 800eb1e:	2301      	movs	r3, #1
 800eb20:	6825      	ldr	r5, [r4, #0]
 800eb22:	425b      	negs	r3, r3
 800eb24:	1c6a      	adds	r2, r5, #1
 800eb26:	d01a      	beq.n	800eb5e <__ssvfscanf_r+0x782>
 800eb28:	2048      	movs	r0, #72	; 0x48
 800eb2a:	3311      	adds	r3, #17
 800eb2c:	181b      	adds	r3, r3, r0
 800eb2e:	2208      	movs	r2, #8
 800eb30:	2100      	movs	r1, #0
 800eb32:	19d8      	adds	r0, r3, r7
 800eb34:	f7fd f818 	bl	800bb68 <memset>
 800eb38:	4b5f      	ldr	r3, [pc, #380]	; (800ecb8 <__ssvfscanf_r+0x8dc>)
 800eb3a:	2148      	movs	r1, #72	; 0x48
 800eb3c:	33e0      	adds	r3, #224	; 0xe0
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	2310      	movs	r3, #16
 800eb42:	4694      	mov	ip, r2
 800eb44:	185b      	adds	r3, r3, r1
 800eb46:	002a      	movs	r2, r5
 800eb48:	19db      	adds	r3, r3, r7
 800eb4a:	4665      	mov	r5, ip
 800eb4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb4e:	1879      	adds	r1, r7, r1
 800eb50:	47a8      	blx	r5
 800eb52:	2300      	movs	r3, #0
 800eb54:	2801      	cmp	r0, #1
 800eb56:	d102      	bne.n	800eb5e <__ssvfscanf_r+0x782>
 800eb58:	3348      	adds	r3, #72	; 0x48
 800eb5a:	18fb      	adds	r3, r7, r3
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2218      	movs	r2, #24
 800eb60:	2148      	movs	r1, #72	; 0x48
 800eb62:	1852      	adds	r2, r2, r1
 800eb64:	19d2      	adds	r2, r2, r7
 800eb66:	5cd3      	ldrb	r3, [r2, r3]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d149      	bne.n	800ec00 <__ssvfscanf_r+0x824>
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d137      	bne.n	800ebe2 <__ssvfscanf_r+0x806>
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d113      	bne.n	800eba0 <__ssvfscanf_r+0x7c4>
 800eb78:	6023      	str	r3, [r4, #0]
 800eb7a:	2e00      	cmp	r6, #0
 800eb7c:	d00d      	beq.n	800eb9a <__ssvfscanf_r+0x7be>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	1ae4      	subs	r4, r4, r3
 800eb84:	10a3      	asrs	r3, r4, #2
 800eb86:	3301      	adds	r3, #1
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d906      	bls.n	800eb9a <__ssvfscanf_r+0x7be>
 800eb8c:	6830      	ldr	r0, [r6, #0]
 800eb8e:	1d21      	adds	r1, r4, #4
 800eb90:	f001 ff1e 	bl	80109d0 <realloc>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d000      	beq.n	800eb9a <__ssvfscanf_r+0x7be>
 800eb98:	6030      	str	r0, [r6, #0]
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	e593      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800eba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	001e      	movs	r6, r3
 800ebac:	613b      	str	r3, [r7, #16]
 800ebae:	633b      	str	r3, [r7, #48]	; 0x30
 800ebb0:	334c      	adds	r3, #76	; 0x4c
 800ebb2:	18fc      	adds	r4, r7, r3
 800ebb4:	e778      	b.n	800eaa8 <__ssvfscanf_r+0x6cc>
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	001e      	movs	r6, r3
 800ebba:	613b      	str	r3, [r7, #16]
 800ebbc:	633b      	str	r3, [r7, #48]	; 0x30
 800ebbe:	e773      	b.n	800eaa8 <__ssvfscanf_r+0x6cc>
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	69fd      	ldr	r5, [r7, #28]
 800ebc4:	3302      	adds	r3, #2
 800ebc6:	d1aa      	bne.n	800eb1e <__ssvfscanf_r+0x742>
 800ebc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dc47      	bgt.n	800ec60 <__ssvfscanf_r+0x884>
 800ebd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebd4:	f002 fb96 	bl	8011304 <__ssrefill_r>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d041      	beq.n	800ec60 <__ssvfscanf_r+0x884>
 800ebdc:	2d00      	cmp	r5, #0
 800ebde:	d0c8      	beq.n	800eb72 <__ssvfscanf_r+0x796>
 800ebe0:	e4cb      	b.n	800e57a <__ssvfscanf_r+0x19e>
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	2248      	movs	r2, #72	; 0x48
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	61fb      	str	r3, [r7, #28]
 800ebea:	238c      	movs	r3, #140	; 0x8c
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	189b      	adds	r3, r3, r2
 800ebf0:	69fa      	ldr	r2, [r7, #28]
 800ebf2:	19db      	adds	r3, r3, r7
 800ebf4:	5cd1      	ldrb	r1, [r2, r3]
 800ebf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebfa:	f002 fb47 	bl	801128c <_sungetc_r>
 800ebfe:	e7b5      	b.n	800eb6c <__ssvfscanf_r+0x790>
 800ec00:	69fa      	ldr	r2, [r7, #28]
 800ec02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec04:	4694      	mov	ip, r2
 800ec06:	4463      	add	r3, ip
 800ec08:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b03      	cmp	r3, #3
 800ec0e:	d102      	bne.n	800ec16 <__ssvfscanf_r+0x83a>
 800ec10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec12:	2b04      	cmp	r3, #4
 800ec14:	d002      	beq.n	800ec1c <__ssvfscanf_r+0x840>
 800ec16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d11a      	bne.n	800ec58 <__ssvfscanf_r+0x87c>
 800ec22:	3404      	adds	r4, #4
 800ec24:	2e00      	cmp	r6, #0
 800ec26:	d019      	beq.n	800ec5c <__ssvfscanf_r+0x880>
 800ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	1ae3      	subs	r3, r4, r3
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	6a3d      	ldr	r5, [r7, #32]
 800ec32:	109b      	asrs	r3, r3, #2
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d3c7      	bcc.n	800ebc8 <__ssvfscanf_r+0x7ec>
 800ec38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec3a:	00d1      	lsls	r1, r2, #3
 800ec3c:	f001 fec8 	bl	80109d0 <realloc>
 800ec40:	6338      	str	r0, [r7, #48]	; 0x30
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d100      	bne.n	800ec48 <__ssvfscanf_r+0x86c>
 800ec46:	e591      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ec48:	4684      	mov	ip, r0
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	69fc      	ldr	r4, [r7, #28]
 800ec4e:	005b      	lsls	r3, r3, #1
 800ec50:	4464      	add	r4, ip
 800ec52:	6030      	str	r0, [r6, #0]
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	e7b7      	b.n	800ebc8 <__ssvfscanf_r+0x7ec>
 800ec58:	2500      	movs	r5, #0
 800ec5a:	e7b5      	b.n	800ebc8 <__ssvfscanf_r+0x7ec>
 800ec5c:	0035      	movs	r5, r6
 800ec5e:	e7b3      	b.n	800ebc8 <__ssvfscanf_r+0x7ec>
 800ec60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d000      	beq.n	800ec68 <__ssvfscanf_r+0x88c>
 800ec66:	e720      	b.n	800eaaa <__ssvfscanf_r+0x6ce>
 800ec68:	e783      	b.n	800eb72 <__ssvfscanf_r+0x796>
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d025      	beq.n	800ecbc <__ssvfscanf_r+0x8e0>
 800ec70:	2118      	movs	r1, #24
 800ec72:	2048      	movs	r0, #72	; 0x48
 800ec74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec76:	1809      	adds	r1, r1, r0
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	19c9      	adds	r1, r1, r7
 800ec7c:	781a      	ldrb	r2, [r3, #0]
 800ec7e:	5c8a      	ldrb	r2, [r1, r2]
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	d103      	bne.n	800ec8c <__ssvfscanf_r+0x8b0>
 800ec84:	2c00      	cmp	r4, #0
 800ec86:	d000      	beq.n	800ec8a <__ssvfscanf_r+0x8ae>
 800ec88:	e66c      	b.n	800e964 <__ssvfscanf_r+0x588>
 800ec8a:	e4a4      	b.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800ec8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec90:	6852      	ldr	r2, [r2, #4]
 800ec92:	3301      	adds	r3, #1
 800ec94:	600b      	str	r3, [r1, #0]
 800ec96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec98:	3a01      	subs	r2, #1
 800ec9a:	3401      	adds	r4, #1
 800ec9c:	604a      	str	r2, [r1, #4]
 800ec9e:	429c      	cmp	r4, r3
 800eca0:	d100      	bne.n	800eca4 <__ssvfscanf_r+0x8c8>
 800eca2:	e65f      	b.n	800e964 <__ssvfscanf_r+0x588>
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	dce3      	bgt.n	800ec70 <__ssvfscanf_r+0x894>
 800eca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecaa:	f002 fb2b 	bl	8011304 <__ssrefill_r>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d0de      	beq.n	800ec70 <__ssvfscanf_r+0x894>
 800ecb2:	e657      	b.n	800e964 <__ssvfscanf_r+0x588>
 800ecb4:	0000fff6 	.word	0x0000fff6
 800ecb8:	20000444 	.word	0x20000444
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	0032      	movs	r2, r6
 800ecc0:	cb20      	ldmia	r3!, {r5}
 800ecc2:	61fb      	str	r3, [r7, #28]
 800ecc4:	2380      	movs	r3, #128	; 0x80
 800ecc6:	401a      	ands	r2, r3
 800ecc8:	421e      	tst	r6, r3
 800ecca:	d100      	bne.n	800ecce <__ssvfscanf_r+0x8f2>
 800eccc:	e086      	b.n	800eddc <__ssvfscanf_r+0xa00>
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	d100      	bne.n	800ecd4 <__ssvfscanf_r+0x8f8>
 800ecd2:	e480      	b.n	800e5d6 <__ssvfscanf_r+0x1fa>
 800ecd4:	2020      	movs	r0, #32
 800ecd6:	f7fb fcb3 	bl	800a640 <malloc>
 800ecda:	6338      	str	r0, [r7, #48]	; 0x30
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d100      	bne.n	800ece2 <__ssvfscanf_r+0x906>
 800ece0:	e452      	b.n	800e588 <__ssvfscanf_r+0x1ac>
 800ece2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece4:	6028      	str	r0, [r5, #0]
 800ece6:	88de      	ldrh	r6, [r3, #6]
 800ece8:	889c      	ldrh	r4, [r3, #4]
 800ecea:	6818      	ldr	r0, [r3, #0]
 800ecec:	42a6      	cmp	r6, r4
 800ecee:	d30e      	bcc.n	800ed0e <__ssvfscanf_r+0x932>
 800ecf0:	4bc3      	ldr	r3, [pc, #780]	; (800f000 <__ssvfscanf_r+0xc24>)
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d900      	bls.n	800ecf8 <__ssvfscanf_r+0x91c>
 800ecf6:	e542      	b.n	800e77e <__ssvfscanf_r+0x3a2>
 800ecf8:	3408      	adds	r4, #8
 800ecfa:	b2a4      	uxth	r4, r4
 800ecfc:	00a1      	lsls	r1, r4, #2
 800ecfe:	f001 fe67 	bl	80109d0 <realloc>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d100      	bne.n	800ed08 <__ssvfscanf_r+0x92c>
 800ed06:	e53a      	b.n	800e77e <__ssvfscanf_r+0x3a2>
 800ed08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed0a:	6018      	str	r0, [r3, #0]
 800ed0c:	809c      	strh	r4, [r3, #4]
 800ed0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed10:	1c72      	adds	r2, r6, #1
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	00b6      	lsls	r6, r6, #2
 800ed16:	50f5      	str	r5, [r6, r3]
 800ed18:	2320      	movs	r3, #32
 800ed1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed1c:	002e      	movs	r6, r5
 800ed1e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ed20:	80ca      	strh	r2, [r1, #6]
 800ed22:	623b      	str	r3, [r7, #32]
 800ed24:	002c      	movs	r4, r5
 800ed26:	2118      	movs	r1, #24
 800ed28:	2048      	movs	r0, #72	; 0x48
 800ed2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed2c:	1809      	adds	r1, r1, r0
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	19c9      	adds	r1, r1, r7
 800ed32:	781a      	ldrb	r2, [r3, #0]
 800ed34:	5c8a      	ldrb	r2, [r1, r2]
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	d101      	bne.n	800ed3e <__ssvfscanf_r+0x962>
 800ed3a:	633d      	str	r5, [r7, #48]	; 0x30
 800ed3c:	e031      	b.n	800eda2 <__ssvfscanf_r+0x9c6>
 800ed3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed42:	6852      	ldr	r2, [r2, #4]
 800ed44:	3a01      	subs	r2, #1
 800ed46:	604a      	str	r2, [r1, #4]
 800ed48:	1c5a      	adds	r2, r3, #1
 800ed4a:	600a      	str	r2, [r1, #0]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	1c6a      	adds	r2, r5, #1
 800ed50:	633a      	str	r2, [r7, #48]	; 0x30
 800ed52:	702b      	strb	r3, [r5, #0]
 800ed54:	2e00      	cmp	r6, #0
 800ed56:	d010      	beq.n	800ed7a <__ssvfscanf_r+0x99e>
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	1b15      	subs	r5, r2, r4
 800ed5c:	429d      	cmp	r5, r3
 800ed5e:	d30c      	bcc.n	800ed7a <__ssvfscanf_r+0x99e>
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	0020      	movs	r0, r4
 800ed64:	0019      	movs	r1, r3
 800ed66:	623b      	str	r3, [r7, #32]
 800ed68:	f001 fe32 	bl	80109d0 <realloc>
 800ed6c:	1e04      	subs	r4, r0, #0
 800ed6e:	d101      	bne.n	800ed74 <__ssvfscanf_r+0x998>
 800ed70:	f7ff fc0a 	bl	800e588 <__ssvfscanf_r+0x1ac>
 800ed74:	1943      	adds	r3, r0, r5
 800ed76:	633b      	str	r3, [r7, #48]	; 0x30
 800ed78:	6030      	str	r0, [r6, #0]
 800ed7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00e      	beq.n	800eda2 <__ssvfscanf_r+0x9c6>
 800ed84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dc2a      	bgt.n	800ede2 <__ssvfscanf_r+0xa06>
 800ed8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed90:	f002 fab8 	bl	8011304 <__ssrefill_r>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d024      	beq.n	800ede2 <__ssvfscanf_r+0xa06>
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	42a3      	cmp	r3, r4
 800ed9c:	d101      	bne.n	800eda2 <__ssvfscanf_r+0x9c6>
 800ed9e:	f7ff fbec 	bl	800e57a <__ssvfscanf_r+0x19e>
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	1b1d      	subs	r5, r3, r4
 800eda6:	42a3      	cmp	r3, r4
 800eda8:	d101      	bne.n	800edae <__ssvfscanf_r+0x9d2>
 800edaa:	f7ff fc14 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800edae:	2300      	movs	r3, #0
 800edb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb2:	7013      	strb	r3, [r2, #0]
 800edb4:	429e      	cmp	r6, r3
 800edb6:	d009      	beq.n	800edcc <__ssvfscanf_r+0x9f0>
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	1c69      	adds	r1, r5, #1
 800edbc:	428b      	cmp	r3, r1
 800edbe:	d905      	bls.n	800edcc <__ssvfscanf_r+0x9f0>
 800edc0:	6830      	ldr	r0, [r6, #0]
 800edc2:	f001 fe05 	bl	80109d0 <realloc>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d000      	beq.n	800edcc <__ssvfscanf_r+0x9f0>
 800edca:	6030      	str	r0, [r6, #0]
 800edcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edce:	3301      	adds	r3, #1
 800edd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd4:	195b      	adds	r3, r3, r5
 800edd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	e477      	b.n	800e6cc <__ssvfscanf_r+0x2f0>
 800eddc:	0016      	movs	r6, r2
 800edde:	623a      	str	r2, [r7, #32]
 800ede0:	e7a0      	b.n	800ed24 <__ssvfscanf_r+0x948>
 800ede2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ede4:	e79f      	b.n	800ed26 <__ssvfscanf_r+0x94a>
 800ede6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <__ssvfscanf_r+0xa14>
 800edec:	3b01      	subs	r3, #1
 800edee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edf0:	2210      	movs	r2, #16
 800edf2:	2301      	movs	r3, #1
 800edf4:	0034      	movs	r4, r6
 800edf6:	4032      	ands	r2, r6
 800edf8:	401c      	ands	r4, r3
 800edfa:	61fa      	str	r2, [r7, #28]
 800edfc:	421e      	tst	r6, r3
 800edfe:	d100      	bne.n	800ee02 <__ssvfscanf_r+0xa26>
 800ee00:	e102      	b.n	800f008 <__ssvfscanf_r+0xc2c>
 800ee02:	2a00      	cmp	r2, #0
 800ee04:	d000      	beq.n	800ee08 <__ssvfscanf_r+0xa2c>
 800ee06:	e09f      	b.n	800ef48 <__ssvfscanf_r+0xb6c>
 800ee08:	2080      	movs	r0, #128	; 0x80
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	cb10      	ldmia	r3!, {r4}
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	4206      	tst	r6, r0
 800ee12:	d100      	bne.n	800ee16 <__ssvfscanf_r+0xa3a>
 800ee14:	e0a1      	b.n	800ef5a <__ssvfscanf_r+0xb7e>
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	d100      	bne.n	800ee1c <__ssvfscanf_r+0xa40>
 800ee1a:	e4aa      	b.n	800e772 <__ssvfscanf_r+0x396>
 800ee1c:	f7fb fc10 	bl	800a640 <malloc>
 800ee20:	6338      	str	r0, [r7, #48]	; 0x30
 800ee22:	2800      	cmp	r0, #0
 800ee24:	d100      	bne.n	800ee28 <__ssvfscanf_r+0xa4c>
 800ee26:	e4a1      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	6023      	str	r3, [r4, #0]
 800ee2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2e:	88de      	ldrh	r6, [r3, #6]
 800ee30:	889d      	ldrh	r5, [r3, #4]
 800ee32:	42ae      	cmp	r6, r5
 800ee34:	d310      	bcc.n	800ee58 <__ssvfscanf_r+0xa7c>
 800ee36:	4b72      	ldr	r3, [pc, #456]	; (800f000 <__ssvfscanf_r+0xc24>)
 800ee38:	429d      	cmp	r5, r3
 800ee3a:	d900      	bls.n	800ee3e <__ssvfscanf_r+0xa62>
 800ee3c:	e496      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ee3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee40:	3508      	adds	r5, #8
 800ee42:	b2ad      	uxth	r5, r5
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	00a9      	lsls	r1, r5, #2
 800ee48:	f001 fdc2 	bl	80109d0 <realloc>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d100      	bne.n	800ee52 <__ssvfscanf_r+0xa76>
 800ee50:	e48c      	b.n	800e76c <__ssvfscanf_r+0x390>
 800ee52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee54:	6018      	str	r0, [r3, #0]
 800ee56:	809d      	strh	r5, [r3, #4]
 800ee58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5a:	1c72      	adds	r2, r6, #1
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	00b6      	lsls	r6, r6, #2
 800ee60:	50f4      	str	r4, [r6, r3]
 800ee62:	2320      	movs	r3, #32
 800ee64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee66:	0025      	movs	r5, r4
 800ee68:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ee6a:	80ca      	strh	r2, [r1, #6]
 800ee6c:	613b      	str	r3, [r7, #16]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	623b      	str	r3, [r7, #32]
 800ee72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee74:	4a63      	ldr	r2, [pc, #396]	; (800f004 <__ssvfscanf_r+0xc28>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	5cd3      	ldrb	r3, [r2, r3]
 800ee7c:	2208      	movs	r2, #8
 800ee7e:	4213      	tst	r3, r2
 800ee80:	d149      	bne.n	800ef16 <__ssvfscanf_r+0xb3a>
 800ee82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d046      	beq.n	800ef16 <__ssvfscanf_r+0xb3a>
 800ee88:	f7fc feb2 	bl	800bbf0 <__locale_mb_cur_max>
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	4298      	cmp	r0, r3
 800ee90:	d101      	bne.n	800ee96 <__ssvfscanf_r+0xaba>
 800ee92:	f7ff fb72 	bl	800e57a <__ssvfscanf_r+0x19e>
 800ee96:	6a3a      	ldr	r2, [r7, #32]
 800ee98:	2048      	movs	r0, #72	; 0x48
 800ee9a:	1c56      	adds	r6, r2, #1
 800ee9c:	228c      	movs	r2, #140	; 0x8c
 800ee9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea0:	0052      	lsls	r2, r2, #1
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	1812      	adds	r2, r2, r0
 800eea6:	7819      	ldrb	r1, [r3, #0]
 800eea8:	6a38      	ldr	r0, [r7, #32]
 800eeaa:	19d2      	adds	r2, r2, r7
 800eeac:	5411      	strb	r1, [r2, r0]
 800eeae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeb2:	6852      	ldr	r2, [r2, #4]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	600b      	str	r3, [r1, #0]
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	3a01      	subs	r2, #1
 800eebc:	604a      	str	r2, [r1, #4]
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	d102      	bne.n	800eec8 <__ssvfscanf_r+0xaec>
 800eec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eec4:	2b04      	cmp	r3, #4
 800eec6:	d007      	beq.n	800eed8 <__ssvfscanf_r+0xafc>
 800eec8:	2048      	movs	r0, #72	; 0x48
 800eeca:	2310      	movs	r3, #16
 800eecc:	181b      	adds	r3, r3, r0
 800eece:	2208      	movs	r2, #8
 800eed0:	2100      	movs	r1, #0
 800eed2:	19d8      	adds	r0, r3, r7
 800eed4:	f7fc fe48 	bl	800bb68 <memset>
 800eed8:	2148      	movs	r1, #72	; 0x48
 800eeda:	2310      	movs	r3, #16
 800eedc:	228c      	movs	r2, #140	; 0x8c
 800eede:	185b      	adds	r3, r3, r1
 800eee0:	0052      	lsls	r2, r2, #1
 800eee2:	19db      	adds	r3, r3, r7
 800eee4:	1852      	adds	r2, r2, r1
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	0021      	movs	r1, r4
 800eeea:	0033      	movs	r3, r6
 800eeec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eeee:	19d2      	adds	r2, r2, r7
 800eef0:	f002 f908 	bl	8011104 <_mbrtowc_r>
 800eef4:	0003      	movs	r3, r0
 800eef6:	62b8      	str	r0, [r7, #40]	; 0x28
 800eef8:	3301      	adds	r3, #1
 800eefa:	d101      	bne.n	800ef00 <__ssvfscanf_r+0xb24>
 800eefc:	f7ff fb3d 	bl	800e57a <__ssvfscanf_r+0x19e>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d12f      	bne.n	800ef64 <__ssvfscanf_r+0xb88>
 800ef04:	6020      	str	r0, [r4, #0]
 800ef06:	6820      	ldr	r0, [r4, #0]
 800ef08:	f002 f91a 	bl	8011140 <iswspace>
 800ef0c:	6238      	str	r0, [r7, #32]
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d04a      	beq.n	800efa8 <__ssvfscanf_r+0xbcc>
 800ef12:	2e00      	cmp	r6, #0
 800ef14:	d13c      	bne.n	800ef90 <__ssvfscanf_r+0xbb4>
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d000      	beq.n	800ef1e <__ssvfscanf_r+0xb42>
 800ef1c:	e640      	b.n	800eba0 <__ssvfscanf_r+0x7c4>
 800ef1e:	6023      	str	r3, [r4, #0]
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	d100      	bne.n	800ef26 <__ssvfscanf_r+0xb4a>
 800ef24:	e639      	b.n	800eb9a <__ssvfscanf_r+0x7be>
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	1ae4      	subs	r4, r4, r3
 800ef2c:	10a3      	asrs	r3, r4, #2
 800ef2e:	3301      	adds	r3, #1
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d800      	bhi.n	800ef36 <__ssvfscanf_r+0xb5a>
 800ef34:	e631      	b.n	800eb9a <__ssvfscanf_r+0x7be>
 800ef36:	6828      	ldr	r0, [r5, #0]
 800ef38:	1d21      	adds	r1, r4, #4
 800ef3a:	f001 fd49 	bl	80109d0 <realloc>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d100      	bne.n	800ef44 <__ssvfscanf_r+0xb68>
 800ef42:	e62a      	b.n	800eb9a <__ssvfscanf_r+0x7be>
 800ef44:	6028      	str	r0, [r5, #0]
 800ef46:	e628      	b.n	800eb9a <__ssvfscanf_r+0x7be>
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	001d      	movs	r5, r3
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	633b      	str	r3, [r7, #48]	; 0x30
 800ef54:	334c      	adds	r3, #76	; 0x4c
 800ef56:	18fc      	adds	r4, r7, r3
 800ef58:	e789      	b.n	800ee6e <__ssvfscanf_r+0xa92>
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	001d      	movs	r5, r3
 800ef5e:	613b      	str	r3, [r7, #16]
 800ef60:	633b      	str	r3, [r7, #48]	; 0x30
 800ef62:	e784      	b.n	800ee6e <__ssvfscanf_r+0xa92>
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	623e      	str	r6, [r7, #32]
 800ef68:	3302      	adds	r3, #2
 800ef6a:	d1cc      	bne.n	800ef06 <__ssvfscanf_r+0xb2a>
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dd00      	ble.n	800ef76 <__ssvfscanf_r+0xb9a>
 800ef74:	e77d      	b.n	800ee72 <__ssvfscanf_r+0xa96>
 800ef76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef7a:	f002 f9c3 	bl	8011304 <__ssrefill_r>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d100      	bne.n	800ef84 <__ssvfscanf_r+0xba8>
 800ef82:	e776      	b.n	800ee72 <__ssvfscanf_r+0xa96>
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <__ssvfscanf_r+0xbb2>
 800ef8a:	f7ff faf6 	bl	800e57a <__ssvfscanf_r+0x19e>
 800ef8e:	e7c2      	b.n	800ef16 <__ssvfscanf_r+0xb3a>
 800ef90:	238c      	movs	r3, #140	; 0x8c
 800ef92:	2248      	movs	r2, #72	; 0x48
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	189b      	adds	r3, r3, r2
 800ef98:	3e01      	subs	r6, #1
 800ef9a:	19db      	adds	r3, r3, r7
 800ef9c:	5cf1      	ldrb	r1, [r6, r3]
 800ef9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efa2:	f002 f973 	bl	801128c <_sungetc_r>
 800efa6:	e7b4      	b.n	800ef12 <__ssvfscanf_r+0xb36>
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	199b      	adds	r3, r3, r6
 800efac:	63bb      	str	r3, [r7, #56]	; 0x38
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	2b03      	cmp	r3, #3
 800efb2:	d102      	bne.n	800efba <__ssvfscanf_r+0xbde>
 800efb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d002      	beq.n	800efc0 <__ssvfscanf_r+0xbe4>
 800efba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbc:	3b01      	subs	r3, #1
 800efbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1d2      	bne.n	800ef6c <__ssvfscanf_r+0xb90>
 800efc6:	3404      	adds	r4, #4
 800efc8:	2d00      	cmp	r5, #0
 800efca:	d016      	beq.n	800effa <__ssvfscanf_r+0xc1e>
 800efcc:	69fa      	ldr	r2, [r7, #28]
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	623a      	str	r2, [r7, #32]
 800efd2:	693a      	ldr	r2, [r7, #16]
 800efd4:	1ae6      	subs	r6, r4, r3
 800efd6:	10b3      	asrs	r3, r6, #2
 800efd8:	4293      	cmp	r3, r2
 800efda:	d3c7      	bcc.n	800ef6c <__ssvfscanf_r+0xb90>
 800efdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efde:	00d1      	lsls	r1, r2, #3
 800efe0:	f001 fcf6 	bl	80109d0 <realloc>
 800efe4:	6338      	str	r0, [r7, #48]	; 0x30
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d101      	bne.n	800efee <__ssvfscanf_r+0xc12>
 800efea:	f7ff fbbf 	bl	800e76c <__ssvfscanf_r+0x390>
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	1984      	adds	r4, r0, r6
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	6028      	str	r0, [r5, #0]
 800eff6:	613b      	str	r3, [r7, #16]
 800eff8:	e7b8      	b.n	800ef6c <__ssvfscanf_r+0xb90>
 800effa:	623d      	str	r5, [r7, #32]
 800effc:	e7b6      	b.n	800ef6c <__ssvfscanf_r+0xb90>
 800effe:	46c0      	nop			; (mov r8, r8)
 800f000:	0000fff6 	.word	0x0000fff6
 800f004:	08014321 	.word	0x08014321
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d01c      	beq.n	800f048 <__ssvfscanf_r+0xc6c>
 800f00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f010:	49bf      	ldr	r1, [pc, #764]	; (800f310 <__ssvfscanf_r+0xf34>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	781a      	ldrb	r2, [r3, #0]
 800f016:	5c8a      	ldrb	r2, [r1, r2]
 800f018:	2108      	movs	r1, #8
 800f01a:	420a      	tst	r2, r1
 800f01c:	d000      	beq.n	800f020 <__ssvfscanf_r+0xc44>
 800f01e:	e4a1      	b.n	800e964 <__ssvfscanf_r+0x588>
 800f020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f024:	6852      	ldr	r2, [r2, #4]
 800f026:	3301      	adds	r3, #1
 800f028:	600b      	str	r3, [r1, #0]
 800f02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02c:	3a01      	subs	r2, #1
 800f02e:	3401      	adds	r4, #1
 800f030:	604a      	str	r2, [r1, #4]
 800f032:	429c      	cmp	r4, r3
 800f034:	d100      	bne.n	800f038 <__ssvfscanf_r+0xc5c>
 800f036:	e495      	b.n	800e964 <__ssvfscanf_r+0x588>
 800f038:	2a00      	cmp	r2, #0
 800f03a:	dce8      	bgt.n	800f00e <__ssvfscanf_r+0xc32>
 800f03c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f03e:	f002 f961 	bl	8011304 <__ssrefill_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	d0e3      	beq.n	800f00e <__ssvfscanf_r+0xc32>
 800f046:	e48d      	b.n	800e964 <__ssvfscanf_r+0x588>
 800f048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04a:	0032      	movs	r2, r6
 800f04c:	cb10      	ldmia	r3!, {r4}
 800f04e:	61fb      	str	r3, [r7, #28]
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	401a      	ands	r2, r3
 800f054:	421e      	tst	r6, r3
 800f056:	d039      	beq.n	800f0cc <__ssvfscanf_r+0xcf0>
 800f058:	2c00      	cmp	r4, #0
 800f05a:	d101      	bne.n	800f060 <__ssvfscanf_r+0xc84>
 800f05c:	f7ff fabb 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800f060:	2020      	movs	r0, #32
 800f062:	f7fb faed 	bl	800a640 <malloc>
 800f066:	6338      	str	r0, [r7, #48]	; 0x30
 800f068:	2800      	cmp	r0, #0
 800f06a:	d101      	bne.n	800f070 <__ssvfscanf_r+0xc94>
 800f06c:	f7ff fa8c 	bl	800e588 <__ssvfscanf_r+0x1ac>
 800f070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f072:	6020      	str	r0, [r4, #0]
 800f074:	88de      	ldrh	r6, [r3, #6]
 800f076:	889d      	ldrh	r5, [r3, #4]
 800f078:	6818      	ldr	r0, [r3, #0]
 800f07a:	42ae      	cmp	r6, r5
 800f07c:	d310      	bcc.n	800f0a0 <__ssvfscanf_r+0xcc4>
 800f07e:	4ba5      	ldr	r3, [pc, #660]	; (800f314 <__ssvfscanf_r+0xf38>)
 800f080:	429d      	cmp	r5, r3
 800f082:	d901      	bls.n	800f088 <__ssvfscanf_r+0xcac>
 800f084:	f7ff fb7b 	bl	800e77e <__ssvfscanf_r+0x3a2>
 800f088:	3508      	adds	r5, #8
 800f08a:	b2ad      	uxth	r5, r5
 800f08c:	00a9      	lsls	r1, r5, #2
 800f08e:	f001 fc9f 	bl	80109d0 <realloc>
 800f092:	2800      	cmp	r0, #0
 800f094:	d101      	bne.n	800f09a <__ssvfscanf_r+0xcbe>
 800f096:	f7ff fb72 	bl	800e77e <__ssvfscanf_r+0x3a2>
 800f09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f09c:	6018      	str	r0, [r3, #0]
 800f09e:	809d      	strh	r5, [r3, #4]
 800f0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a2:	1c72      	adds	r2, r6, #1
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	00b6      	lsls	r6, r6, #2
 800f0a8:	50f4      	str	r4, [r6, r3]
 800f0aa:	2320      	movs	r3, #32
 800f0ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0ae:	0026      	movs	r6, r4
 800f0b0:	80ca      	strh	r2, [r1, #6]
 800f0b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f0b4:	633b      	str	r3, [r7, #48]	; 0x30
 800f0b6:	0025      	movs	r5, r4
 800f0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ba:	4995      	ldr	r1, [pc, #596]	; (800f310 <__ssvfscanf_r+0xf34>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	781a      	ldrb	r2, [r3, #0]
 800f0c0:	5c8a      	ldrb	r2, [r1, r2]
 800f0c2:	2108      	movs	r1, #8
 800f0c4:	420a      	tst	r2, r1
 800f0c6:	d004      	beq.n	800f0d2 <__ssvfscanf_r+0xcf6>
 800f0c8:	623c      	str	r4, [r7, #32]
 800f0ca:	e031      	b.n	800f130 <__ssvfscanf_r+0xd54>
 800f0cc:	0016      	movs	r6, r2
 800f0ce:	633a      	str	r2, [r7, #48]	; 0x30
 800f0d0:	e7f1      	b.n	800f0b6 <__ssvfscanf_r+0xcda>
 800f0d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0d6:	6852      	ldr	r2, [r2, #4]
 800f0d8:	3a01      	subs	r2, #1
 800f0da:	604a      	str	r2, [r1, #4]
 800f0dc:	1c5a      	adds	r2, r3, #1
 800f0de:	600a      	str	r2, [r1, #0]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	1c62      	adds	r2, r4, #1
 800f0e4:	623a      	str	r2, [r7, #32]
 800f0e6:	7023      	strb	r3, [r4, #0]
 800f0e8:	2e00      	cmp	r6, #0
 800f0ea:	d010      	beq.n	800f10e <__ssvfscanf_r+0xd32>
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	1b54      	subs	r4, r2, r5
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	d30c      	bcc.n	800f10e <__ssvfscanf_r+0xd32>
 800f0f4:	005b      	lsls	r3, r3, #1
 800f0f6:	0028      	movs	r0, r5
 800f0f8:	0019      	movs	r1, r3
 800f0fa:	633b      	str	r3, [r7, #48]	; 0x30
 800f0fc:	f001 fc68 	bl	80109d0 <realloc>
 800f100:	1e05      	subs	r5, r0, #0
 800f102:	d101      	bne.n	800f108 <__ssvfscanf_r+0xd2c>
 800f104:	f7ff fa40 	bl	800e588 <__ssvfscanf_r+0x1ac>
 800f108:	1903      	adds	r3, r0, r4
 800f10a:	623b      	str	r3, [r7, #32]
 800f10c:	6030      	str	r0, [r6, #0]
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	3b01      	subs	r3, #1
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00b      	beq.n	800f130 <__ssvfscanf_r+0xd54>
 800f118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	dd01      	ble.n	800f124 <__ssvfscanf_r+0xd48>
 800f120:	6a3c      	ldr	r4, [r7, #32]
 800f122:	e7c9      	b.n	800f0b8 <__ssvfscanf_r+0xcdc>
 800f124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f126:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f128:	f002 f8ec 	bl	8011304 <__ssrefill_r>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d0f7      	beq.n	800f120 <__ssvfscanf_r+0xd44>
 800f130:	2300      	movs	r3, #0
 800f132:	6a3a      	ldr	r2, [r7, #32]
 800f134:	7013      	strb	r3, [r2, #0]
 800f136:	1b55      	subs	r5, r2, r5
 800f138:	2e00      	cmp	r6, #0
 800f13a:	d009      	beq.n	800f150 <__ssvfscanf_r+0xd74>
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	1c69      	adds	r1, r5, #1
 800f140:	428b      	cmp	r3, r1
 800f142:	d905      	bls.n	800f150 <__ssvfscanf_r+0xd74>
 800f144:	6830      	ldr	r0, [r6, #0]
 800f146:	f001 fc43 	bl	80109d0 <realloc>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d000      	beq.n	800f150 <__ssvfscanf_r+0xd74>
 800f14e:	6030      	str	r0, [r6, #0]
 800f150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f152:	195b      	adds	r3, r3, r5
 800f154:	63bb      	str	r3, [r7, #56]	; 0x38
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	3301      	adds	r3, #1
 800f15a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f15c:	e63c      	b.n	800edd8 <__ssvfscanf_r+0x9fc>
 800f15e:	22ae      	movs	r2, #174	; 0xae
 800f160:	2100      	movs	r1, #0
 800f162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f164:	0052      	lsls	r2, r2, #1
 800f166:	3b01      	subs	r3, #1
 800f168:	6239      	str	r1, [r7, #32]
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d906      	bls.n	800f17c <__ssvfscanf_r+0xda0>
 800f16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f170:	3b5e      	subs	r3, #94	; 0x5e
 800f172:	3bff      	subs	r3, #255	; 0xff
 800f174:	623b      	str	r3, [r7, #32]
 800f176:	235e      	movs	r3, #94	; 0x5e
 800f178:	33ff      	adds	r3, #255	; 0xff
 800f17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f17c:	24d8      	movs	r4, #216	; 0xd8
 800f17e:	2300      	movs	r3, #0
 800f180:	2248      	movs	r2, #72	; 0x48
 800f182:	0124      	lsls	r4, r4, #4
 800f184:	4334      	orrs	r4, r6
 800f186:	2680      	movs	r6, #128	; 0x80
 800f188:	61fb      	str	r3, [r7, #28]
 800f18a:	3319      	adds	r3, #25
 800f18c:	33ff      	adds	r3, #255	; 0xff
 800f18e:	189b      	adds	r3, r3, r2
 800f190:	19dd      	adds	r5, r3, r7
 800f192:	00b6      	lsls	r6, r6, #2
 800f194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	7813      	ldrb	r3, [r2, #0]
 800f19a:	2b39      	cmp	r3, #57	; 0x39
 800f19c:	d80f      	bhi.n	800f1be <__ssvfscanf_r+0xde2>
 800f19e:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a0:	d91b      	bls.n	800f1da <__ssvfscanf_r+0xdfe>
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	382b      	subs	r0, #43	; 0x2b
 800f1a6:	280e      	cmp	r0, #14
 800f1a8:	d817      	bhi.n	800f1da <__ssvfscanf_r+0xdfe>
 800f1aa:	f7f0 ffb3 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f1ae:	168f      	.short	0x168f
 800f1b0:	5416168f 	.word	0x5416168f
 800f1b4:	80808080 	.word	0x80808080
 800f1b8:	87808080 	.word	0x87808080
 800f1bc:	87          	.byte	0x87
 800f1bd:	00          	.byte	0x00
 800f1be:	2b66      	cmp	r3, #102	; 0x66
 800f1c0:	d83a      	bhi.n	800f238 <__ssvfscanf_r+0xe5c>
 800f1c2:	2b60      	cmp	r3, #96	; 0x60
 800f1c4:	d803      	bhi.n	800f1ce <__ssvfscanf_r+0xdf2>
 800f1c6:	2b46      	cmp	r3, #70	; 0x46
 800f1c8:	d805      	bhi.n	800f1d6 <__ssvfscanf_r+0xdfa>
 800f1ca:	2b40      	cmp	r3, #64	; 0x40
 800f1cc:	d905      	bls.n	800f1da <__ssvfscanf_r+0xdfe>
 800f1ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1d0:	290a      	cmp	r1, #10
 800f1d2:	dc71      	bgt.n	800f2b8 <__ssvfscanf_r+0xedc>
 800f1d4:	e001      	b.n	800f1da <__ssvfscanf_r+0xdfe>
 800f1d6:	2b58      	cmp	r3, #88	; 0x58
 800f1d8:	d030      	beq.n	800f23c <__ssvfscanf_r+0xe60>
 800f1da:	05e3      	lsls	r3, r4, #23
 800f1dc:	d515      	bpl.n	800f20a <__ssvfscanf_r+0xe2e>
 800f1de:	238c      	movs	r3, #140	; 0x8c
 800f1e0:	2248      	movs	r2, #72	; 0x48
 800f1e2:	005b      	lsls	r3, r3, #1
 800f1e4:	189b      	adds	r3, r3, r2
 800f1e6:	19db      	adds	r3, r3, r7
 800f1e8:	429d      	cmp	r5, r3
 800f1ea:	d905      	bls.n	800f1f8 <__ssvfscanf_r+0xe1c>
 800f1ec:	3d01      	subs	r5, #1
 800f1ee:	7829      	ldrb	r1, [r5, #0]
 800f1f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1f4:	f002 f84a 	bl	801128c <_sungetc_r>
 800f1f8:	238c      	movs	r3, #140	; 0x8c
 800f1fa:	2248      	movs	r2, #72	; 0x48
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	189b      	adds	r3, r3, r2
 800f200:	19db      	adds	r3, r3, r7
 800f202:	429d      	cmp	r5, r3
 800f204:	d101      	bne.n	800f20a <__ssvfscanf_r+0xe2e>
 800f206:	f7ff f9e6 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800f20a:	2310      	movs	r3, #16
 800f20c:	0022      	movs	r2, r4
 800f20e:	401a      	ands	r2, r3
 800f210:	421c      	tst	r4, r3
 800f212:	d171      	bne.n	800f2f8 <__ssvfscanf_r+0xf1c>
 800f214:	218c      	movs	r1, #140	; 0x8c
 800f216:	2048      	movs	r0, #72	; 0x48
 800f218:	0049      	lsls	r1, r1, #1
 800f21a:	1809      	adds	r1, r1, r0
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	697e      	ldr	r6, [r7, #20]
 800f220:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f222:	19c9      	adds	r1, r1, r7
 800f224:	702a      	strb	r2, [r5, #0]
 800f226:	47b0      	blx	r6
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	1d1e      	adds	r6, r3, #4
 800f22c:	06a3      	lsls	r3, r4, #26
 800f22e:	d559      	bpl.n	800f2e4 <__ssvfscanf_r+0xf08>
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	6018      	str	r0, [r3, #0]
 800f236:	e05b      	b.n	800f2f0 <__ssvfscanf_r+0xf14>
 800f238:	2b78      	cmp	r3, #120	; 0x78
 800f23a:	d1ce      	bne.n	800f1da <__ssvfscanf_r+0xdfe>
 800f23c:	21c0      	movs	r1, #192	; 0xc0
 800f23e:	00c9      	lsls	r1, r1, #3
 800f240:	4021      	ands	r1, r4
 800f242:	42b1      	cmp	r1, r6
 800f244:	d1c9      	bne.n	800f1da <__ssvfscanf_r+0xdfe>
 800f246:	4934      	ldr	r1, [pc, #208]	; (800f318 <__ssvfscanf_r+0xf3c>)
 800f248:	4021      	ands	r1, r4
 800f24a:	24a0      	movs	r4, #160	; 0xa0
 800f24c:	00e4      	lsls	r4, r4, #3
 800f24e:	430c      	orrs	r4, r1
 800f250:	2110      	movs	r1, #16
 800f252:	6279      	str	r1, [r7, #36]	; 0x24
 800f254:	e00b      	b.n	800f26e <__ssvfscanf_r+0xe92>
 800f256:	0521      	lsls	r1, r4, #20
 800f258:	d509      	bpl.n	800f26e <__ssvfscanf_r+0xe92>
 800f25a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f25c:	2900      	cmp	r1, #0
 800f25e:	d102      	bne.n	800f266 <__ssvfscanf_r+0xe8a>
 800f260:	3108      	adds	r1, #8
 800f262:	4334      	orrs	r4, r6
 800f264:	6279      	str	r1, [r7, #36]	; 0x24
 800f266:	0561      	lsls	r1, r4, #21
 800f268:	d504      	bpl.n	800f274 <__ssvfscanf_r+0xe98>
 800f26a:	492c      	ldr	r1, [pc, #176]	; (800f31c <__ssvfscanf_r+0xf40>)
 800f26c:	400c      	ands	r4, r1
 800f26e:	702b      	strb	r3, [r5, #0]
 800f270:	3501      	adds	r5, #1
 800f272:	e00c      	b.n	800f28e <__ssvfscanf_r+0xeb2>
 800f274:	4b2a      	ldr	r3, [pc, #168]	; (800f320 <__ssvfscanf_r+0xf44>)
 800f276:	401c      	ands	r4, r3
 800f278:	6a3b      	ldr	r3, [r7, #32]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <__ssvfscanf_r+0xeac>
 800f27e:	3b01      	subs	r3, #1
 800f280:	623b      	str	r3, [r7, #32]
 800f282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f284:	3301      	adds	r3, #1
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	3301      	adds	r3, #1
 800f28c:	61fb      	str	r3, [r7, #28]
 800f28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f290:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	3b01      	subs	r3, #1
 800f296:	604b      	str	r3, [r1, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	dd1c      	ble.n	800f2d6 <__ssvfscanf_r+0xefa>
 800f29c:	3201      	adds	r2, #1
 800f29e:	600a      	str	r2, [r1, #0]
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d000      	beq.n	800f2ac <__ssvfscanf_r+0xed0>
 800f2aa:	e773      	b.n	800f194 <__ssvfscanf_r+0xdb8>
 800f2ac:	e795      	b.n	800f1da <__ssvfscanf_r+0xdfe>
 800f2ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2b0:	491c      	ldr	r1, [pc, #112]	; (800f324 <__ssvfscanf_r+0xf48>)
 800f2b2:	0040      	lsls	r0, r0, #1
 800f2b4:	5e41      	ldrsh	r1, [r0, r1]
 800f2b6:	6279      	str	r1, [r7, #36]	; 0x24
 800f2b8:	491b      	ldr	r1, [pc, #108]	; (800f328 <__ssvfscanf_r+0xf4c>)
 800f2ba:	e7d7      	b.n	800f26c <__ssvfscanf_r+0xe90>
 800f2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2be:	4919      	ldr	r1, [pc, #100]	; (800f324 <__ssvfscanf_r+0xf48>)
 800f2c0:	0040      	lsls	r0, r0, #1
 800f2c2:	5e41      	ldrsh	r1, [r0, r1]
 800f2c4:	6279      	str	r1, [r7, #36]	; 0x24
 800f2c6:	2908      	cmp	r1, #8
 800f2c8:	dcf6      	bgt.n	800f2b8 <__ssvfscanf_r+0xedc>
 800f2ca:	e786      	b.n	800f1da <__ssvfscanf_r+0xdfe>
 800f2cc:	2180      	movs	r1, #128	; 0x80
 800f2ce:	420c      	tst	r4, r1
 800f2d0:	d083      	beq.n	800f1da <__ssvfscanf_r+0xdfe>
 800f2d2:	438c      	bics	r4, r1
 800f2d4:	e7cb      	b.n	800f26e <__ssvfscanf_r+0xe92>
 800f2d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2da:	f002 f813 	bl	8011304 <__ssrefill_r>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d0de      	beq.n	800f2a0 <__ssvfscanf_r+0xec4>
 800f2e2:	e77a      	b.n	800f1da <__ssvfscanf_r+0xdfe>
 800f2e4:	2308      	movs	r3, #8
 800f2e6:	421c      	tst	r4, r3
 800f2e8:	d020      	beq.n	800f32c <__ssvfscanf_r+0xf50>
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	7018      	strb	r0, [r3, #0]
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	633e      	str	r6, [r7, #48]	; 0x30
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2f8:	238c      	movs	r3, #140	; 0x8c
 800f2fa:	2248      	movs	r2, #72	; 0x48
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	189b      	adds	r3, r3, r2
 800f300:	19db      	adds	r3, r3, r7
 800f302:	1aed      	subs	r5, r5, r3
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	18ed      	adds	r5, r5, r3
 800f308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30a:	195b      	adds	r3, r3, r5
 800f30c:	f7ff f92d 	bl	800e56a <__ssvfscanf_r+0x18e>
 800f310:	08014321 	.word	0x08014321
 800f314:	0000fff6 	.word	0x0000fff6
 800f318:	fffffdff 	.word	0xfffffdff
 800f31c:	fffffa7f 	.word	0xfffffa7f
 800f320:	fffffc7f 	.word	0xfffffc7f
 800f324:	0801464e 	.word	0x0801464e
 800f328:	fffff47f 	.word	0xfffff47f
 800f32c:	0763      	lsls	r3, r4, #29
 800f32e:	d503      	bpl.n	800f338 <__ssvfscanf_r+0xf5c>
 800f330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	8018      	strh	r0, [r3, #0]
 800f336:	e7db      	b.n	800f2f0 <__ssvfscanf_r+0xf14>
 800f338:	2301      	movs	r3, #1
 800f33a:	0022      	movs	r2, r4
 800f33c:	401a      	ands	r2, r3
 800f33e:	421c      	tst	r4, r3
 800f340:	d000      	beq.n	800f344 <__ssvfscanf_r+0xf68>
 800f342:	e775      	b.n	800f230 <__ssvfscanf_r+0xe54>
 800f344:	07a4      	lsls	r4, r4, #30
 800f346:	d400      	bmi.n	800f34a <__ssvfscanf_r+0xf6e>
 800f348:	e772      	b.n	800f230 <__ssvfscanf_r+0xe54>
 800f34a:	4ba8      	ldr	r3, [pc, #672]	; (800f5ec <__ssvfscanf_r+0x1210>)
 800f34c:	6979      	ldr	r1, [r7, #20]
 800f34e:	4299      	cmp	r1, r3
 800f350:	d10c      	bne.n	800f36c <__ssvfscanf_r+0xf90>
 800f352:	218c      	movs	r1, #140	; 0x8c
 800f354:	2048      	movs	r0, #72	; 0x48
 800f356:	0049      	lsls	r1, r1, #1
 800f358:	1809      	adds	r1, r1, r0
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f35e:	19c9      	adds	r1, r1, r7
 800f360:	f001 fecc 	bl	80110fc <_strtoull_r>
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	c303      	stmia	r3!, {r0, r1}
 800f36a:	e7c1      	b.n	800f2f0 <__ssvfscanf_r+0xf14>
 800f36c:	218c      	movs	r1, #140	; 0x8c
 800f36e:	2048      	movs	r0, #72	; 0x48
 800f370:	0049      	lsls	r1, r1, #1
 800f372:	1809      	adds	r1, r1, r0
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f378:	19c9      	adds	r1, r1, r7
 800f37a:	f001 fe0d 	bl	8010f98 <_strtoll_r>
 800f37e:	e7f1      	b.n	800f364 <__ssvfscanf_r+0xf88>
 800f380:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f382:	f000 fb9f 	bl	800fac4 <_localeconv_r>
 800f386:	22ae      	movs	r2, #174	; 0xae
 800f388:	2100      	movs	r1, #0
 800f38a:	6803      	ldr	r3, [r0, #0]
 800f38c:	0052      	lsls	r2, r2, #1
 800f38e:	603b      	str	r3, [r7, #0]
 800f390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f392:	60f9      	str	r1, [r7, #12]
 800f394:	3b01      	subs	r3, #1
 800f396:	4293      	cmp	r3, r2
 800f398:	d906      	bls.n	800f3a8 <__ssvfscanf_r+0xfcc>
 800f39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39c:	3b5e      	subs	r3, #94	; 0x5e
 800f39e:	3bff      	subs	r3, #255	; 0xff
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	235e      	movs	r3, #94	; 0x5e
 800f3a4:	33ff      	adds	r3, #255	; 0xff
 800f3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3a8:	23f0      	movs	r3, #240	; 0xf0
 800f3aa:	00db      	lsls	r3, r3, #3
 800f3ac:	431e      	orrs	r6, r3
 800f3ae:	238c      	movs	r3, #140	; 0x8c
 800f3b0:	2248      	movs	r2, #72	; 0x48
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	189b      	adds	r3, r3, r2
 800f3b8:	623c      	str	r4, [r7, #32]
 800f3ba:	607c      	str	r4, [r7, #4]
 800f3bc:	60bc      	str	r4, [r7, #8]
 800f3be:	61fc      	str	r4, [r7, #28]
 800f3c0:	613c      	str	r4, [r7, #16]
 800f3c2:	19dd      	adds	r5, r3, r7
 800f3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	0010      	movs	r0, r2
 800f3cc:	382b      	subs	r0, #43	; 0x2b
 800f3ce:	284e      	cmp	r0, #78	; 0x4e
 800f3d0:	d900      	bls.n	800f3d4 <__ssvfscanf_r+0xff8>
 800f3d2:	e133      	b.n	800f63c <__ssvfscanf_r+0x1260>
 800f3d4:	f7f0 fea8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f3d8:	0132009b 	.word	0x0132009b
 800f3dc:	0132009b 	.word	0x0132009b
 800f3e0:	004f0132 	.word	0x004f0132
 800f3e4:	00720072 	.word	0x00720072
 800f3e8:	00720072 	.word	0x00720072
 800f3ec:	00720072 	.word	0x00720072
 800f3f0:	00720072 	.word	0x00720072
 800f3f4:	01320072 	.word	0x01320072
 800f3f8:	01320132 	.word	0x01320132
 800f3fc:	01320132 	.word	0x01320132
 800f400:	01320132 	.word	0x01320132
 800f404:	007b00bc 	.word	0x007b00bc
 800f408:	007b007b 	.word	0x007b007b
 800f40c:	00f7012f 	.word	0x00f7012f
 800f410:	01320132 	.word	0x01320132
 800f414:	013200e3 	.word	0x013200e3
 800f418:	01320132 	.word	0x01320132
 800f41c:	00a00132 	.word	0x00a00132
 800f420:	01120132 	.word	0x01120132
 800f424:	01320132 	.word	0x01320132
 800f428:	01010132 	.word	0x01010132
 800f42c:	01320132 	.word	0x01320132
 800f430:	00820132 	.word	0x00820132
 800f434:	01320105 	.word	0x01320105
 800f438:	01320132 	.word	0x01320132
 800f43c:	01320132 	.word	0x01320132
 800f440:	01320132 	.word	0x01320132
 800f444:	007b00bc 	.word	0x007b00bc
 800f448:	007b007b 	.word	0x007b007b
 800f44c:	00f7012f 	.word	0x00f7012f
 800f450:	01320132 	.word	0x01320132
 800f454:	013200e3 	.word	0x013200e3
 800f458:	01320132 	.word	0x01320132
 800f45c:	00a00132 	.word	0x00a00132
 800f460:	01120132 	.word	0x01120132
 800f464:	01320132 	.word	0x01320132
 800f468:	01010132 	.word	0x01010132
 800f46c:	01320132 	.word	0x01320132
 800f470:	00820132 	.word	0x00820132
 800f474:	0105      	.short	0x0105
 800f476:	05f1      	lsls	r1, r6, #23
 800f478:	d520      	bpl.n	800f4bc <__ssvfscanf_r+0x10e0>
 800f47a:	2280      	movs	r2, #128	; 0x80
 800f47c:	4396      	bics	r6, r2
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	3201      	adds	r2, #1
 800f482:	61fa      	str	r2, [r7, #28]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	2a00      	cmp	r2, #0
 800f488:	d004      	beq.n	800f494 <__ssvfscanf_r+0x10b8>
 800f48a:	3a01      	subs	r2, #1
 800f48c:	60fa      	str	r2, [r7, #12]
 800f48e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f490:	3201      	adds	r2, #1
 800f492:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f498:	3a01      	subs	r2, #1
 800f49a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f49e:	3201      	adds	r2, #1
 800f4a0:	63ba      	str	r2, [r7, #56]	; 0x38
 800f4a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4a4:	6852      	ldr	r2, [r2, #4]
 800f4a6:	3a01      	subs	r2, #1
 800f4a8:	604a      	str	r2, [r1, #4]
 800f4aa:	2a00      	cmp	r2, #0
 800f4ac:	dc00      	bgt.n	800f4b0 <__ssvfscanf_r+0x10d4>
 800f4ae:	e0d6      	b.n	800f65e <__ssvfscanf_r+0x1282>
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	600b      	str	r3, [r1, #0]
 800f4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d184      	bne.n	800f3c4 <__ssvfscanf_r+0xfe8>
 800f4ba:	e057      	b.n	800f56c <__ssvfscanf_r+0x1190>
 800f4bc:	6a39      	ldr	r1, [r7, #32]
 800f4be:	1909      	adds	r1, r1, r4
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	d153      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f4c4:	494a      	ldr	r1, [pc, #296]	; (800f5f0 <__ssvfscanf_r+0x1214>)
 800f4c6:	400e      	ands	r6, r1
 800f4c8:	702a      	strb	r2, [r5, #0]
 800f4ca:	3501      	adds	r5, #1
 800f4cc:	e7e2      	b.n	800f494 <__ssvfscanf_r+0x10b8>
 800f4ce:	0531      	lsls	r1, r6, #20
 800f4d0:	d54c      	bpl.n	800f56c <__ssvfscanf_r+0x1190>
 800f4d2:	6a39      	ldr	r1, [r7, #32]
 800f4d4:	1909      	adds	r1, r1, r4
 800f4d6:	2900      	cmp	r1, #0
 800f4d8:	d040      	beq.n	800f55c <__ssvfscanf_r+0x1180>
 800f4da:	e047      	b.n	800f56c <__ssvfscanf_r+0x1190>
 800f4dc:	2198      	movs	r1, #152	; 0x98
 800f4de:	2080      	movs	r0, #128	; 0x80
 800f4e0:	0109      	lsls	r1, r1, #4
 800f4e2:	4031      	ands	r1, r6
 800f4e4:	0040      	lsls	r0, r0, #1
 800f4e6:	4281      	cmp	r1, r0
 800f4e8:	d140      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f4ea:	69f9      	ldr	r1, [r7, #28]
 800f4ec:	2901      	cmp	r1, #1
 800f4ee:	d13d      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f4f0:	2080      	movs	r0, #128	; 0x80
 800f4f2:	4940      	ldr	r1, [pc, #256]	; (800f5f4 <__ssvfscanf_r+0x1218>)
 800f4f4:	0100      	lsls	r0, r0, #4
 800f4f6:	400e      	ands	r6, r1
 800f4f8:	3132      	adds	r1, #50	; 0x32
 800f4fa:	31ff      	adds	r1, #255	; 0xff
 800f4fc:	7029      	strb	r1, [r5, #0]
 800f4fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f500:	4306      	orrs	r6, r0
 800f502:	3901      	subs	r1, #1
 800f504:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f506:	3501      	adds	r5, #1
 800f508:	2100      	movs	r1, #0
 800f50a:	61f9      	str	r1, [r7, #28]
 800f50c:	e7dc      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f50e:	2180      	movs	r1, #128	; 0x80
 800f510:	420e      	tst	r6, r1
 800f512:	d02b      	beq.n	800f56c <__ssvfscanf_r+0x1190>
 800f514:	438e      	bics	r6, r1
 800f516:	e7d7      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f518:	6a39      	ldr	r1, [r7, #32]
 800f51a:	2900      	cmp	r1, #0
 800f51c:	d10d      	bne.n	800f53a <__ssvfscanf_r+0x115e>
 800f51e:	69f9      	ldr	r1, [r7, #28]
 800f520:	2900      	cmp	r1, #0
 800f522:	d10e      	bne.n	800f542 <__ssvfscanf_r+0x1166>
 800f524:	21e0      	movs	r1, #224	; 0xe0
 800f526:	0030      	movs	r0, r6
 800f528:	00c9      	lsls	r1, r1, #3
 800f52a:	4008      	ands	r0, r1
 800f52c:	4288      	cmp	r0, r1
 800f52e:	d108      	bne.n	800f542 <__ssvfscanf_r+0x1166>
 800f530:	4931      	ldr	r1, [pc, #196]	; (800f5f8 <__ssvfscanf_r+0x121c>)
 800f532:	400e      	ands	r6, r1
 800f534:	2101      	movs	r1, #1
 800f536:	6239      	str	r1, [r7, #32]
 800f538:	e7c6      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f53a:	6a39      	ldr	r1, [r7, #32]
 800f53c:	2902      	cmp	r1, #2
 800f53e:	d100      	bne.n	800f542 <__ssvfscanf_r+0x1166>
 800f540:	e089      	b.n	800f656 <__ssvfscanf_r+0x127a>
 800f542:	2c01      	cmp	r4, #1
 800f544:	d001      	beq.n	800f54a <__ssvfscanf_r+0x116e>
 800f546:	2c04      	cmp	r4, #4
 800f548:	d110      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f54a:	3401      	adds	r4, #1
 800f54c:	b2e4      	uxtb	r4, r4
 800f54e:	e7bb      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f550:	0531      	lsls	r1, r6, #20
 800f552:	d508      	bpl.n	800f566 <__ssvfscanf_r+0x118a>
 800f554:	6a39      	ldr	r1, [r7, #32]
 800f556:	1909      	adds	r1, r1, r4
 800f558:	2900      	cmp	r1, #0
 800f55a:	d104      	bne.n	800f566 <__ssvfscanf_r+0x118a>
 800f55c:	4824      	ldr	r0, [pc, #144]	; (800f5f0 <__ssvfscanf_r+0x1214>)
 800f55e:	000c      	movs	r4, r1
 800f560:	4006      	ands	r6, r0
 800f562:	6239      	str	r1, [r7, #32]
 800f564:	e7b0      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f566:	6a39      	ldr	r1, [r7, #32]
 800f568:	2901      	cmp	r1, #1
 800f56a:	d076      	beq.n	800f65a <__ssvfscanf_r+0x127e>
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <__ssvfscanf_r+0x119a>
 800f572:	4b20      	ldr	r3, [pc, #128]	; (800f5f4 <__ssvfscanf_r+0x1218>)
 800f574:	401e      	ands	r6, r3
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	3b01      	subs	r3, #1
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d877      	bhi.n	800f66e <__ssvfscanf_r+0x1292>
 800f57e:	238c      	movs	r3, #140	; 0x8c
 800f580:	2248      	movs	r2, #72	; 0x48
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	189b      	adds	r3, r3, r2
 800f586:	19db      	adds	r3, r3, r7
 800f588:	429d      	cmp	r5, r3
 800f58a:	d801      	bhi.n	800f590 <__ssvfscanf_r+0x11b4>
 800f58c:	f7ff f823 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800f590:	3d01      	subs	r5, #1
 800f592:	7829      	ldrb	r1, [r5, #0]
 800f594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f598:	f001 fe78 	bl	801128c <_sungetc_r>
 800f59c:	e7ef      	b.n	800f57e <__ssvfscanf_r+0x11a2>
 800f59e:	2c00      	cmp	r4, #0
 800f5a0:	d10c      	bne.n	800f5bc <__ssvfscanf_r+0x11e0>
 800f5a2:	69f9      	ldr	r1, [r7, #28]
 800f5a4:	2900      	cmp	r1, #0
 800f5a6:	d1e4      	bne.n	800f572 <__ssvfscanf_r+0x1196>
 800f5a8:	21e0      	movs	r1, #224	; 0xe0
 800f5aa:	0030      	movs	r0, r6
 800f5ac:	00c9      	lsls	r1, r1, #3
 800f5ae:	4008      	ands	r0, r1
 800f5b0:	4288      	cmp	r0, r1
 800f5b2:	d1e0      	bne.n	800f576 <__ssvfscanf_r+0x119a>
 800f5b4:	4910      	ldr	r1, [pc, #64]	; (800f5f8 <__ssvfscanf_r+0x121c>)
 800f5b6:	3401      	adds	r4, #1
 800f5b8:	400e      	ands	r6, r1
 800f5ba:	e785      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f5bc:	20fd      	movs	r0, #253	; 0xfd
 800f5be:	1ee1      	subs	r1, r4, #3
 800f5c0:	4201      	tst	r1, r0
 800f5c2:	d1d3      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f5c4:	e7c1      	b.n	800f54a <__ssvfscanf_r+0x116e>
 800f5c6:	0531      	lsls	r1, r6, #20
 800f5c8:	d503      	bpl.n	800f5d2 <__ssvfscanf_r+0x11f6>
 800f5ca:	6a39      	ldr	r1, [r7, #32]
 800f5cc:	1909      	adds	r1, r1, r4
 800f5ce:	2900      	cmp	r1, #0
 800f5d0:	d0c4      	beq.n	800f55c <__ssvfscanf_r+0x1180>
 800f5d2:	2c02      	cmp	r4, #2
 800f5d4:	d1ca      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f5d6:	2403      	movs	r4, #3
 800f5d8:	e776      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f5da:	2c06      	cmp	r4, #6
 800f5dc:	d1c6      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f5de:	2407      	movs	r4, #7
 800f5e0:	e772      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f5e2:	2c07      	cmp	r4, #7
 800f5e4:	d1c2      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f5e6:	2408      	movs	r4, #8
 800f5e8:	e76e      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	08010e35 	.word	0x08010e35
 800f5f0:	fffffe7f 	.word	0xfffffe7f
 800f5f4:	fffffeff 	.word	0xfffffeff
 800f5f8:	fffff87f 	.word	0xfffff87f
 800f5fc:	0531      	lsls	r1, r6, #20
 800f5fe:	d5b5      	bpl.n	800f56c <__ssvfscanf_r+0x1190>
 800f600:	21a0      	movs	r1, #160	; 0xa0
 800f602:	2080      	movs	r0, #128	; 0x80
 800f604:	00c9      	lsls	r1, r1, #3
 800f606:	00c0      	lsls	r0, r0, #3
 800f608:	4031      	ands	r1, r6
 800f60a:	4281      	cmp	r1, r0
 800f60c:	d004      	beq.n	800f618 <__ssvfscanf_r+0x123c>
 800f60e:	4206      	tst	r6, r0
 800f610:	d0ac      	beq.n	800f56c <__ssvfscanf_r+0x1190>
 800f612:	69f9      	ldr	r1, [r7, #28]
 800f614:	2900      	cmp	r1, #0
 800f616:	d0ae      	beq.n	800f576 <__ssvfscanf_r+0x119a>
 800f618:	2180      	movs	r1, #128	; 0x80
 800f61a:	0089      	lsls	r1, r1, #2
 800f61c:	420e      	tst	r6, r1
 800f61e:	d104      	bne.n	800f62a <__ssvfscanf_r+0x124e>
 800f620:	69f9      	ldr	r1, [r7, #28]
 800f622:	6938      	ldr	r0, [r7, #16]
 800f624:	607d      	str	r5, [r7, #4]
 800f626:	1a09      	subs	r1, r1, r0
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	20c0      	movs	r0, #192	; 0xc0
 800f62c:	4973      	ldr	r1, [pc, #460]	; (800f7fc <__ssvfscanf_r+0x1420>)
 800f62e:	0040      	lsls	r0, r0, #1
 800f630:	400e      	ands	r6, r1
 800f632:	4306      	orrs	r6, r0
 800f634:	e768      	b.n	800f508 <__ssvfscanf_r+0x112c>
 800f636:	0531      	lsls	r1, r6, #20
 800f638:	d5e2      	bpl.n	800f600 <__ssvfscanf_r+0x1224>
 800f63a:	e74a      	b.n	800f4d2 <__ssvfscanf_r+0x10f6>
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	7809      	ldrb	r1, [r1, #0]
 800f640:	4291      	cmp	r1, r2
 800f642:	d193      	bne.n	800f56c <__ssvfscanf_r+0x1190>
 800f644:	2180      	movs	r1, #128	; 0x80
 800f646:	0089      	lsls	r1, r1, #2
 800f648:	420e      	tst	r6, r1
 800f64a:	d08f      	beq.n	800f56c <__ssvfscanf_r+0x1190>
 800f64c:	496c      	ldr	r1, [pc, #432]	; (800f800 <__ssvfscanf_r+0x1424>)
 800f64e:	400e      	ands	r6, r1
 800f650:	69f9      	ldr	r1, [r7, #28]
 800f652:	6139      	str	r1, [r7, #16]
 800f654:	e738      	b.n	800f4c8 <__ssvfscanf_r+0x10ec>
 800f656:	2103      	movs	r1, #3
 800f658:	e76d      	b.n	800f536 <__ssvfscanf_r+0x115a>
 800f65a:	2102      	movs	r1, #2
 800f65c:	e76b      	b.n	800f536 <__ssvfscanf_r+0x115a>
 800f65e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f662:	f001 fe4f 	bl	8011304 <__ssrefill_r>
 800f666:	2800      	cmp	r0, #0
 800f668:	d100      	bne.n	800f66c <__ssvfscanf_r+0x1290>
 800f66a:	e723      	b.n	800f4b4 <__ssvfscanf_r+0x10d8>
 800f66c:	e77e      	b.n	800f56c <__ssvfscanf_r+0x1190>
 800f66e:	1e63      	subs	r3, r4, #1
 800f670:	2b06      	cmp	r3, #6
 800f672:	d825      	bhi.n	800f6c0 <__ssvfscanf_r+0x12e4>
 800f674:	2c02      	cmp	r4, #2
 800f676:	d837      	bhi.n	800f6e8 <__ssvfscanf_r+0x130c>
 800f678:	238c      	movs	r3, #140	; 0x8c
 800f67a:	2248      	movs	r2, #72	; 0x48
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	189b      	adds	r3, r3, r2
 800f680:	19db      	adds	r3, r3, r7
 800f682:	429d      	cmp	r5, r3
 800f684:	d801      	bhi.n	800f68a <__ssvfscanf_r+0x12ae>
 800f686:	f7fe ffa6 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800f68a:	3d01      	subs	r5, #1
 800f68c:	7829      	ldrb	r1, [r5, #0]
 800f68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f692:	f001 fdfb 	bl	801128c <_sungetc_r>
 800f696:	e7ef      	b.n	800f678 <__ssvfscanf_r+0x129c>
 800f698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f69c:	3b01      	subs	r3, #1
 800f69e:	7819      	ldrb	r1, [r3, #0]
 800f6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6a4:	f001 fdf2 	bl	801128c <_sungetc_r>
 800f6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6aa:	6a3a      	ldr	r2, [r7, #32]
 800f6ac:	189b      	adds	r3, r3, r2
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b03      	cmp	r3, #3
 800f6b2:	d8f1      	bhi.n	800f698 <__ssvfscanf_r+0x12bc>
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	3c03      	subs	r4, #3
 800f6b8:	b2e4      	uxtb	r4, r4
 800f6ba:	1b1b      	subs	r3, r3, r4
 800f6bc:	1b2d      	subs	r5, r5, r4
 800f6be:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6c0:	05f3      	lsls	r3, r6, #23
 800f6c2:	d52f      	bpl.n	800f724 <__ssvfscanf_r+0x1348>
 800f6c4:	0573      	lsls	r3, r6, #21
 800f6c6:	d514      	bpl.n	800f6f2 <__ssvfscanf_r+0x1316>
 800f6c8:	238c      	movs	r3, #140	; 0x8c
 800f6ca:	2248      	movs	r2, #72	; 0x48
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	189b      	adds	r3, r3, r2
 800f6d0:	19db      	adds	r3, r3, r7
 800f6d2:	429d      	cmp	r5, r3
 800f6d4:	d801      	bhi.n	800f6da <__ssvfscanf_r+0x12fe>
 800f6d6:	f7fe ff7e 	bl	800e5d6 <__ssvfscanf_r+0x1fa>
 800f6da:	3d01      	subs	r5, #1
 800f6dc:	7829      	ldrb	r1, [r5, #0]
 800f6de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6e2:	f001 fdd3 	bl	801128c <_sungetc_r>
 800f6e6:	e7ef      	b.n	800f6c8 <__ssvfscanf_r+0x12ec>
 800f6e8:	1b63      	subs	r3, r4, r5
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f6ee:	623b      	str	r3, [r7, #32]
 800f6f0:	e7da      	b.n	800f6a8 <__ssvfscanf_r+0x12cc>
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f4:	1e6c      	subs	r4, r5, #1
 800f6f6:	7821      	ldrb	r1, [r4, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6fc:	2965      	cmp	r1, #101	; 0x65
 800f6fe:	d00a      	beq.n	800f716 <__ssvfscanf_r+0x133a>
 800f700:	2945      	cmp	r1, #69	; 0x45
 800f702:	d008      	beq.n	800f716 <__ssvfscanf_r+0x133a>
 800f704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f706:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f708:	f001 fdc0 	bl	801128c <_sungetc_r>
 800f70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70e:	1eac      	subs	r4, r5, #2
 800f710:	3b02      	subs	r3, #2
 800f712:	7821      	ldrb	r1, [r4, #0]
 800f714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f716:	0025      	movs	r5, r4
 800f718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f71a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f71c:	f001 fdb6 	bl	801128c <_sungetc_r>
 800f720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f722:	63bb      	str	r3, [r7, #56]	; 0x38
 800f724:	2310      	movs	r3, #16
 800f726:	0032      	movs	r2, r6
 800f728:	401a      	ands	r2, r3
 800f72a:	421e      	tst	r6, r3
 800f72c:	d001      	beq.n	800f732 <__ssvfscanf_r+0x1356>
 800f72e:	f7fe fe71 	bl	800e414 <__ssvfscanf_r+0x38>
 800f732:	23c0      	movs	r3, #192	; 0xc0
 800f734:	2180      	movs	r1, #128	; 0x80
 800f736:	00db      	lsls	r3, r3, #3
 800f738:	702a      	strb	r2, [r5, #0]
 800f73a:	4033      	ands	r3, r6
 800f73c:	00c9      	lsls	r1, r1, #3
 800f73e:	428b      	cmp	r3, r1
 800f740:	d11f      	bne.n	800f782 <__ssvfscanf_r+0x13a6>
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	69fa      	ldr	r2, [r7, #28]
 800f746:	69f9      	ldr	r1, [r7, #28]
 800f748:	1a9a      	subs	r2, r3, r2
 800f74a:	428b      	cmp	r3, r1
 800f74c:	d125      	bne.n	800f79a <__ssvfscanf_r+0x13be>
 800f74e:	238c      	movs	r3, #140	; 0x8c
 800f750:	2148      	movs	r1, #72	; 0x48
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	185b      	adds	r3, r3, r1
 800f756:	19d9      	adds	r1, r3, r7
 800f758:	2200      	movs	r2, #0
 800f75a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f75c:	f7fb ffca 	bl	800b6f4 <_strtod_r>
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	0004      	movs	r4, r0
 800f764:	3304      	adds	r3, #4
 800f766:	000d      	movs	r5, r1
 800f768:	623b      	str	r3, [r7, #32]
 800f76a:	07f3      	lsls	r3, r6, #31
 800f76c:	d523      	bpl.n	800f7b6 <__ssvfscanf_r+0x13da>
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	601c      	str	r4, [r3, #0]
 800f774:	605d      	str	r5, [r3, #4]
 800f776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f778:	3301      	adds	r3, #1
 800f77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f77c:	6a3b      	ldr	r3, [r7, #32]
 800f77e:	f7fe ffa5 	bl	800e6cc <__ssvfscanf_r+0x2f0>
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d0e2      	beq.n	800f74e <__ssvfscanf_r+0x1372>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f78c:	1c59      	adds	r1, r3, #1
 800f78e:	230a      	movs	r3, #10
 800f790:	f7fc f84c 	bl	800b82c <_strtol_r>
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	687d      	ldr	r5, [r7, #4]
 800f798:	1ac2      	subs	r2, r0, r3
 800f79a:	2148      	movs	r1, #72	; 0x48
 800f79c:	4b19      	ldr	r3, [pc, #100]	; (800f804 <__ssvfscanf_r+0x1428>)
 800f79e:	185b      	adds	r3, r3, r1
 800f7a0:	19db      	adds	r3, r3, r7
 800f7a2:	429d      	cmp	r5, r3
 800f7a4:	d302      	bcc.n	800f7ac <__ssvfscanf_r+0x13d0>
 800f7a6:	4b18      	ldr	r3, [pc, #96]	; (800f808 <__ssvfscanf_r+0x142c>)
 800f7a8:	185b      	adds	r3, r3, r1
 800f7aa:	19dd      	adds	r5, r3, r7
 800f7ac:	0028      	movs	r0, r5
 800f7ae:	4917      	ldr	r1, [pc, #92]	; (800f80c <__ssvfscanf_r+0x1430>)
 800f7b0:	f7fc f944 	bl	800ba3c <sprintf>
 800f7b4:	e7cb      	b.n	800f74e <__ssvfscanf_r+0x1372>
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7bc:	07b6      	lsls	r6, r6, #30
 800f7be:	d4d8      	bmi.n	800f772 <__ssvfscanf_r+0x1396>
 800f7c0:	0002      	movs	r2, r0
 800f7c2:	000b      	movs	r3, r1
 800f7c4:	f7f2 fd96 	bl	80022f4 <__aeabi_dcmpun>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d005      	beq.n	800f7d8 <__ssvfscanf_r+0x13fc>
 800f7cc:	4810      	ldr	r0, [pc, #64]	; (800f810 <__ssvfscanf_r+0x1434>)
 800f7ce:	f7fc fabf 	bl	800bd50 <nanf>
 800f7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d4:	6018      	str	r0, [r3, #0]
 800f7d6:	e7ce      	b.n	800f776 <__ssvfscanf_r+0x139a>
 800f7d8:	0020      	movs	r0, r4
 800f7da:	0029      	movs	r1, r5
 800f7dc:	f7f2 fe34 	bl	8002448 <__aeabi_d2f>
 800f7e0:	e7f7      	b.n	800f7d2 <__ssvfscanf_r+0x13f6>
 800f7e2:	00a3      	lsls	r3, r4, #2
 800f7e4:	18ed      	adds	r5, r5, r3
 800f7e6:	682b      	ldr	r3, [r5, #0]
 800f7e8:	3401      	adds	r4, #1
 800f7ea:	6818      	ldr	r0, [r3, #0]
 800f7ec:	f7fa ff32 	bl	800a654 <free>
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	682b      	ldr	r3, [r5, #0]
 800f7f4:	601a      	str	r2, [r3, #0]
 800f7f6:	f7fe ffc3 	bl	800e780 <__ssvfscanf_r+0x3a4>
 800f7fa:	46c0      	nop			; (mov r8, r8)
 800f7fc:	fffff07f 	.word	0xfffff07f
 800f800:	fffffd7f 	.word	0xfffffd7f
 800f804:	0000026b 	.word	0x0000026b
 800f808:	0000026a 	.word	0x0000026a
 800f80c:	08014648 	.word	0x08014648
 800f810:	080146ab 	.word	0x080146ab

0800f814 <_fclose_r>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	0005      	movs	r5, r0
 800f818:	1e0c      	subs	r4, r1, #0
 800f81a:	d102      	bne.n	800f822 <_fclose_r+0xe>
 800f81c:	2600      	movs	r6, #0
 800f81e:	0030      	movs	r0, r6
 800f820:	bd70      	pop	{r4, r5, r6, pc}
 800f822:	2800      	cmp	r0, #0
 800f824:	d004      	beq.n	800f830 <_fclose_r+0x1c>
 800f826:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <_fclose_r+0x1c>
 800f82c:	f7fc f89e 	bl	800b96c <__sinit>
 800f830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f832:	07db      	lsls	r3, r3, #31
 800f834:	d405      	bmi.n	800f842 <_fclose_r+0x2e>
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	059b      	lsls	r3, r3, #22
 800f83a:	d402      	bmi.n	800f842 <_fclose_r+0x2e>
 800f83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f83e:	f7fc fa6b 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800f842:	220c      	movs	r2, #12
 800f844:	5ea3      	ldrsh	r3, [r4, r2]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d109      	bne.n	800f85e <_fclose_r+0x4a>
 800f84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f84c:	3301      	adds	r3, #1
 800f84e:	0016      	movs	r6, r2
 800f850:	401e      	ands	r6, r3
 800f852:	421a      	tst	r2, r3
 800f854:	d1e2      	bne.n	800f81c <_fclose_r+0x8>
 800f856:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f858:	f7fc fa5f 	bl	800bd1a <__retarget_lock_release_recursive>
 800f85c:	e7df      	b.n	800f81e <_fclose_r+0xa>
 800f85e:	0021      	movs	r1, r4
 800f860:	0028      	movs	r0, r5
 800f862:	f000 f837 	bl	800f8d4 <__sflush_r>
 800f866:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f868:	0006      	movs	r6, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d006      	beq.n	800f87c <_fclose_r+0x68>
 800f86e:	0028      	movs	r0, r5
 800f870:	69e1      	ldr	r1, [r4, #28]
 800f872:	4798      	blx	r3
 800f874:	2800      	cmp	r0, #0
 800f876:	da01      	bge.n	800f87c <_fclose_r+0x68>
 800f878:	2601      	movs	r6, #1
 800f87a:	4276      	negs	r6, r6
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	061b      	lsls	r3, r3, #24
 800f880:	d503      	bpl.n	800f88a <_fclose_r+0x76>
 800f882:	0028      	movs	r0, r5
 800f884:	6921      	ldr	r1, [r4, #16]
 800f886:	f7fc facf 	bl	800be28 <_free_r>
 800f88a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f88c:	2900      	cmp	r1, #0
 800f88e:	d008      	beq.n	800f8a2 <_fclose_r+0x8e>
 800f890:	0023      	movs	r3, r4
 800f892:	3340      	adds	r3, #64	; 0x40
 800f894:	4299      	cmp	r1, r3
 800f896:	d002      	beq.n	800f89e <_fclose_r+0x8a>
 800f898:	0028      	movs	r0, r5
 800f89a:	f7fc fac5 	bl	800be28 <_free_r>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	6323      	str	r3, [r4, #48]	; 0x30
 800f8a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	d004      	beq.n	800f8b2 <_fclose_r+0x9e>
 800f8a8:	0028      	movs	r0, r5
 800f8aa:	f7fc fabd 	bl	800be28 <_free_r>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6463      	str	r3, [r4, #68]	; 0x44
 800f8b2:	f7fc f84b 	bl	800b94c <__sfp_lock_acquire>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	81a3      	strh	r3, [r4, #12]
 800f8ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8bc:	07db      	lsls	r3, r3, #31
 800f8be:	d402      	bmi.n	800f8c6 <_fclose_r+0xb2>
 800f8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8c2:	f7fc fa2a 	bl	800bd1a <__retarget_lock_release_recursive>
 800f8c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8c8:	f7fc fa25 	bl	800bd16 <__retarget_lock_close_recursive>
 800f8cc:	f7fc f846 	bl	800b95c <__sfp_lock_release>
 800f8d0:	e7a5      	b.n	800f81e <_fclose_r+0xa>
	...

0800f8d4 <__sflush_r>:
 800f8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8d6:	230c      	movs	r3, #12
 800f8d8:	5eca      	ldrsh	r2, [r1, r3]
 800f8da:	000c      	movs	r4, r1
 800f8dc:	0005      	movs	r5, r0
 800f8de:	b291      	uxth	r1, r2
 800f8e0:	0713      	lsls	r3, r2, #28
 800f8e2:	d464      	bmi.n	800f9ae <__sflush_r+0xda>
 800f8e4:	2380      	movs	r3, #128	; 0x80
 800f8e6:	011b      	lsls	r3, r3, #4
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	6862      	ldr	r2, [r4, #4]
 800f8ec:	81a3      	strh	r3, [r4, #12]
 800f8ee:	2a00      	cmp	r2, #0
 800f8f0:	dc04      	bgt.n	800f8fc <__sflush_r+0x28>
 800f8f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f8f4:	2a00      	cmp	r2, #0
 800f8f6:	dc01      	bgt.n	800f8fc <__sflush_r+0x28>
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f8fe:	2f00      	cmp	r7, #0
 800f900:	d0fa      	beq.n	800f8f8 <__sflush_r+0x24>
 800f902:	2200      	movs	r2, #0
 800f904:	2080      	movs	r0, #128	; 0x80
 800f906:	682e      	ldr	r6, [r5, #0]
 800f908:	602a      	str	r2, [r5, #0]
 800f90a:	001a      	movs	r2, r3
 800f90c:	0140      	lsls	r0, r0, #5
 800f90e:	69e1      	ldr	r1, [r4, #28]
 800f910:	4002      	ands	r2, r0
 800f912:	4203      	tst	r3, r0
 800f914:	d038      	beq.n	800f988 <__sflush_r+0xb4>
 800f916:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f918:	89a3      	ldrh	r3, [r4, #12]
 800f91a:	075b      	lsls	r3, r3, #29
 800f91c:	d506      	bpl.n	800f92c <__sflush_r+0x58>
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	1ac0      	subs	r0, r0, r3
 800f922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <__sflush_r+0x58>
 800f928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f92a:	1ac0      	subs	r0, r0, r3
 800f92c:	0002      	movs	r2, r0
 800f92e:	2300      	movs	r3, #0
 800f930:	0028      	movs	r0, r5
 800f932:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f934:	69e1      	ldr	r1, [r4, #28]
 800f936:	47b8      	blx	r7
 800f938:	89a2      	ldrh	r2, [r4, #12]
 800f93a:	1c43      	adds	r3, r0, #1
 800f93c:	d106      	bne.n	800f94c <__sflush_r+0x78>
 800f93e:	6829      	ldr	r1, [r5, #0]
 800f940:	291d      	cmp	r1, #29
 800f942:	d830      	bhi.n	800f9a6 <__sflush_r+0xd2>
 800f944:	4b2c      	ldr	r3, [pc, #176]	; (800f9f8 <__sflush_r+0x124>)
 800f946:	410b      	asrs	r3, r1
 800f948:	07db      	lsls	r3, r3, #31
 800f94a:	d42c      	bmi.n	800f9a6 <__sflush_r+0xd2>
 800f94c:	4b2b      	ldr	r3, [pc, #172]	; (800f9fc <__sflush_r+0x128>)
 800f94e:	4013      	ands	r3, r2
 800f950:	2200      	movs	r2, #0
 800f952:	6062      	str	r2, [r4, #4]
 800f954:	6922      	ldr	r2, [r4, #16]
 800f956:	b21b      	sxth	r3, r3
 800f958:	81a3      	strh	r3, [r4, #12]
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	04db      	lsls	r3, r3, #19
 800f95e:	d505      	bpl.n	800f96c <__sflush_r+0x98>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <__sflush_r+0x96>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d100      	bne.n	800f96c <__sflush_r+0x98>
 800f96a:	6520      	str	r0, [r4, #80]	; 0x50
 800f96c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f96e:	602e      	str	r6, [r5, #0]
 800f970:	2900      	cmp	r1, #0
 800f972:	d0c1      	beq.n	800f8f8 <__sflush_r+0x24>
 800f974:	0023      	movs	r3, r4
 800f976:	3340      	adds	r3, #64	; 0x40
 800f978:	4299      	cmp	r1, r3
 800f97a:	d002      	beq.n	800f982 <__sflush_r+0xae>
 800f97c:	0028      	movs	r0, r5
 800f97e:	f7fc fa53 	bl	800be28 <_free_r>
 800f982:	2000      	movs	r0, #0
 800f984:	6320      	str	r0, [r4, #48]	; 0x30
 800f986:	e7b8      	b.n	800f8fa <__sflush_r+0x26>
 800f988:	2301      	movs	r3, #1
 800f98a:	0028      	movs	r0, r5
 800f98c:	47b8      	blx	r7
 800f98e:	1c43      	adds	r3, r0, #1
 800f990:	d1c2      	bne.n	800f918 <__sflush_r+0x44>
 800f992:	682b      	ldr	r3, [r5, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0bf      	beq.n	800f918 <__sflush_r+0x44>
 800f998:	2b1d      	cmp	r3, #29
 800f99a:	d001      	beq.n	800f9a0 <__sflush_r+0xcc>
 800f99c:	2b16      	cmp	r3, #22
 800f99e:	d101      	bne.n	800f9a4 <__sflush_r+0xd0>
 800f9a0:	602e      	str	r6, [r5, #0]
 800f9a2:	e7a9      	b.n	800f8f8 <__sflush_r+0x24>
 800f9a4:	89a2      	ldrh	r2, [r4, #12]
 800f9a6:	2340      	movs	r3, #64	; 0x40
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	81a3      	strh	r3, [r4, #12]
 800f9ac:	e7a5      	b.n	800f8fa <__sflush_r+0x26>
 800f9ae:	6926      	ldr	r6, [r4, #16]
 800f9b0:	2e00      	cmp	r6, #0
 800f9b2:	d0a1      	beq.n	800f8f8 <__sflush_r+0x24>
 800f9b4:	6827      	ldr	r7, [r4, #0]
 800f9b6:	6026      	str	r6, [r4, #0]
 800f9b8:	1bbb      	subs	r3, r7, r6
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	2300      	movs	r3, #0
 800f9be:	0789      	lsls	r1, r1, #30
 800f9c0:	d100      	bne.n	800f9c4 <__sflush_r+0xf0>
 800f9c2:	6963      	ldr	r3, [r4, #20]
 800f9c4:	60a3      	str	r3, [r4, #8]
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	dc00      	bgt.n	800f9ce <__sflush_r+0xfa>
 800f9cc:	e794      	b.n	800f8f8 <__sflush_r+0x24>
 800f9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9d0:	0032      	movs	r2, r6
 800f9d2:	001f      	movs	r7, r3
 800f9d4:	0028      	movs	r0, r5
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	69e1      	ldr	r1, [r4, #28]
 800f9da:	47b8      	blx	r7
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	dc06      	bgt.n	800f9ee <__sflush_r+0x11a>
 800f9e0:	2340      	movs	r3, #64	; 0x40
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	89a2      	ldrh	r2, [r4, #12]
 800f9e6:	4240      	negs	r0, r0
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	81a3      	strh	r3, [r4, #12]
 800f9ec:	e785      	b.n	800f8fa <__sflush_r+0x26>
 800f9ee:	9b01      	ldr	r3, [sp, #4]
 800f9f0:	1836      	adds	r6, r6, r0
 800f9f2:	1a1b      	subs	r3, r3, r0
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	e7e6      	b.n	800f9c6 <__sflush_r+0xf2>
 800f9f8:	dfbffffe 	.word	0xdfbffffe
 800f9fc:	fffff7ff 	.word	0xfffff7ff

0800fa00 <_fflush_r>:
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	0005      	movs	r5, r0
 800fa04:	000c      	movs	r4, r1
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d004      	beq.n	800fa14 <_fflush_r+0x14>
 800fa0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <_fflush_r+0x14>
 800fa10:	f7fb ffac 	bl	800b96c <__sinit>
 800fa14:	220c      	movs	r2, #12
 800fa16:	5ea3      	ldrsh	r3, [r4, r2]
 800fa18:	1e1e      	subs	r6, r3, #0
 800fa1a:	d015      	beq.n	800fa48 <_fflush_r+0x48>
 800fa1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa1e:	07d2      	lsls	r2, r2, #31
 800fa20:	d404      	bmi.n	800fa2c <_fflush_r+0x2c>
 800fa22:	059b      	lsls	r3, r3, #22
 800fa24:	d402      	bmi.n	800fa2c <_fflush_r+0x2c>
 800fa26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa28:	f7fc f976 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800fa2c:	0021      	movs	r1, r4
 800fa2e:	0028      	movs	r0, r5
 800fa30:	f7ff ff50 	bl	800f8d4 <__sflush_r>
 800fa34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa36:	0006      	movs	r6, r0
 800fa38:	07db      	lsls	r3, r3, #31
 800fa3a:	d405      	bmi.n	800fa48 <_fflush_r+0x48>
 800fa3c:	89a3      	ldrh	r3, [r4, #12]
 800fa3e:	059b      	lsls	r3, r3, #22
 800fa40:	d402      	bmi.n	800fa48 <_fflush_r+0x48>
 800fa42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa44:	f7fc f969 	bl	800bd1a <__retarget_lock_release_recursive>
 800fa48:	0030      	movs	r0, r6
 800fa4a:	bd70      	pop	{r4, r5, r6, pc}

0800fa4c <__sccl>:
 800fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4e:	780b      	ldrb	r3, [r1, #0]
 800fa50:	0004      	movs	r4, r0
 800fa52:	2b5e      	cmp	r3, #94	; 0x5e
 800fa54:	d019      	beq.n	800fa8a <__sccl+0x3e>
 800fa56:	2200      	movs	r2, #0
 800fa58:	1c4d      	adds	r5, r1, #1
 800fa5a:	0021      	movs	r1, r4
 800fa5c:	1c60      	adds	r0, r4, #1
 800fa5e:	30ff      	adds	r0, #255	; 0xff
 800fa60:	700a      	strb	r2, [r1, #0]
 800fa62:	3101      	adds	r1, #1
 800fa64:	4281      	cmp	r1, r0
 800fa66:	d1fb      	bne.n	800fa60 <__sccl+0x14>
 800fa68:	1e68      	subs	r0, r5, #1
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00c      	beq.n	800fa88 <__sccl+0x3c>
 800fa6e:	2101      	movs	r1, #1
 800fa70:	262d      	movs	r6, #45	; 0x2d
 800fa72:	404a      	eors	r2, r1
 800fa74:	0028      	movs	r0, r5
 800fa76:	54e2      	strb	r2, [r4, r3]
 800fa78:	7801      	ldrb	r1, [r0, #0]
 800fa7a:	1c45      	adds	r5, r0, #1
 800fa7c:	292d      	cmp	r1, #45	; 0x2d
 800fa7e:	d00c      	beq.n	800fa9a <__sccl+0x4e>
 800fa80:	295d      	cmp	r1, #93	; 0x5d
 800fa82:	d01d      	beq.n	800fac0 <__sccl+0x74>
 800fa84:	2900      	cmp	r1, #0
 800fa86:	d104      	bne.n	800fa92 <__sccl+0x46>
 800fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	784b      	ldrb	r3, [r1, #1]
 800fa8e:	1c8d      	adds	r5, r1, #2
 800fa90:	e7e3      	b.n	800fa5a <__sccl+0xe>
 800fa92:	000b      	movs	r3, r1
 800fa94:	e7ee      	b.n	800fa74 <__sccl+0x28>
 800fa96:	0033      	movs	r3, r6
 800fa98:	e7ec      	b.n	800fa74 <__sccl+0x28>
 800fa9a:	7841      	ldrb	r1, [r0, #1]
 800fa9c:	295d      	cmp	r1, #93	; 0x5d
 800fa9e:	d0fa      	beq.n	800fa96 <__sccl+0x4a>
 800faa0:	428b      	cmp	r3, r1
 800faa2:	dcf8      	bgt.n	800fa96 <__sccl+0x4a>
 800faa4:	001d      	movs	r5, r3
 800faa6:	3002      	adds	r0, #2
 800faa8:	3501      	adds	r5, #1
 800faaa:	5562      	strb	r2, [r4, r5]
 800faac:	42a9      	cmp	r1, r5
 800faae:	dcfb      	bgt.n	800faa8 <__sccl+0x5c>
 800fab0:	2500      	movs	r5, #0
 800fab2:	1c5f      	adds	r7, r3, #1
 800fab4:	428b      	cmp	r3, r1
 800fab6:	da01      	bge.n	800fabc <__sccl+0x70>
 800fab8:	1acd      	subs	r5, r1, r3
 800faba:	3d01      	subs	r5, #1
 800fabc:	197b      	adds	r3, r7, r5
 800fabe:	e7db      	b.n	800fa78 <__sccl+0x2c>
 800fac0:	0028      	movs	r0, r5
 800fac2:	e7e1      	b.n	800fa88 <__sccl+0x3c>

0800fac4 <_localeconv_r>:
 800fac4:	4800      	ldr	r0, [pc, #0]	; (800fac8 <_localeconv_r+0x4>)
 800fac6:	4770      	bx	lr
 800fac8:	20000534 	.word	0x20000534

0800facc <__libc_fini_array>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	4c07      	ldr	r4, [pc, #28]	; (800faec <__libc_fini_array+0x20>)
 800fad0:	4d07      	ldr	r5, [pc, #28]	; (800faf0 <__libc_fini_array+0x24>)
 800fad2:	1b64      	subs	r4, r4, r5
 800fad4:	10a4      	asrs	r4, r4, #2
 800fad6:	2c00      	cmp	r4, #0
 800fad8:	d102      	bne.n	800fae0 <__libc_fini_array+0x14>
 800fada:	f002 fdcd 	bl	8012678 <_fini>
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	3c01      	subs	r4, #1
 800fae2:	00a3      	lsls	r3, r4, #2
 800fae4:	58eb      	ldr	r3, [r5, r3]
 800fae6:	4798      	blx	r3
 800fae8:	e7f5      	b.n	800fad6 <__libc_fini_array+0xa>
 800faea:	46c0      	nop			; (mov r8, r8)
 800faec:	08014748 	.word	0x08014748
 800faf0:	08014744 	.word	0x08014744

0800faf4 <memchr>:
 800faf4:	b2c9      	uxtb	r1, r1
 800faf6:	1882      	adds	r2, r0, r2
 800faf8:	4290      	cmp	r0, r2
 800fafa:	d101      	bne.n	800fb00 <memchr+0xc>
 800fafc:	2000      	movs	r0, #0
 800fafe:	4770      	bx	lr
 800fb00:	7803      	ldrb	r3, [r0, #0]
 800fb02:	428b      	cmp	r3, r1
 800fb04:	d0fb      	beq.n	800fafe <memchr+0xa>
 800fb06:	3001      	adds	r0, #1
 800fb08:	e7f6      	b.n	800faf8 <memchr+0x4>
	...

0800fb0c <frexp>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	0014      	movs	r4, r2
 800fb10:	2500      	movs	r5, #0
 800fb12:	6025      	str	r5, [r4, #0]
 800fb14:	4d10      	ldr	r5, [pc, #64]	; (800fb58 <frexp+0x4c>)
 800fb16:	004b      	lsls	r3, r1, #1
 800fb18:	000a      	movs	r2, r1
 800fb1a:	085b      	lsrs	r3, r3, #1
 800fb1c:	42ab      	cmp	r3, r5
 800fb1e:	dc1a      	bgt.n	800fb56 <frexp+0x4a>
 800fb20:	001d      	movs	r5, r3
 800fb22:	4305      	orrs	r5, r0
 800fb24:	d017      	beq.n	800fb56 <frexp+0x4a>
 800fb26:	4d0d      	ldr	r5, [pc, #52]	; (800fb5c <frexp+0x50>)
 800fb28:	4229      	tst	r1, r5
 800fb2a:	d109      	bne.n	800fb40 <frexp+0x34>
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	4b0c      	ldr	r3, [pc, #48]	; (800fb60 <frexp+0x54>)
 800fb30:	f7f1 fd9c 	bl	800166c <__aeabi_dmul>
 800fb34:	2536      	movs	r5, #54	; 0x36
 800fb36:	000a      	movs	r2, r1
 800fb38:	004b      	lsls	r3, r1, #1
 800fb3a:	426d      	negs	r5, r5
 800fb3c:	085b      	lsrs	r3, r3, #1
 800fb3e:	6025      	str	r5, [r4, #0]
 800fb40:	4d08      	ldr	r5, [pc, #32]	; (800fb64 <frexp+0x58>)
 800fb42:	151b      	asrs	r3, r3, #20
 800fb44:	195b      	adds	r3, r3, r5
 800fb46:	6825      	ldr	r5, [r4, #0]
 800fb48:	18eb      	adds	r3, r5, r3
 800fb4a:	6023      	str	r3, [r4, #0]
 800fb4c:	4b06      	ldr	r3, [pc, #24]	; (800fb68 <frexp+0x5c>)
 800fb4e:	401a      	ands	r2, r3
 800fb50:	4b06      	ldr	r3, [pc, #24]	; (800fb6c <frexp+0x60>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	0019      	movs	r1, r3
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	7fefffff 	.word	0x7fefffff
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	43500000 	.word	0x43500000
 800fb64:	fffffc02 	.word	0xfffffc02
 800fb68:	800fffff 	.word	0x800fffff
 800fb6c:	3fe00000 	.word	0x3fe00000

0800fb70 <__register_exitproc>:
 800fb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb72:	4f1c      	ldr	r7, [pc, #112]	; (800fbe4 <__register_exitproc+0x74>)
 800fb74:	0004      	movs	r4, r0
 800fb76:	6838      	ldr	r0, [r7, #0]
 800fb78:	0016      	movs	r6, r2
 800fb7a:	9301      	str	r3, [sp, #4]
 800fb7c:	9100      	str	r1, [sp, #0]
 800fb7e:	f7fc f8cb 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800fb82:	4a19      	ldr	r2, [pc, #100]	; (800fbe8 <__register_exitproc+0x78>)
 800fb84:	6813      	ldr	r3, [r2, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d101      	bne.n	800fb8e <__register_exitproc+0x1e>
 800fb8a:	4b18      	ldr	r3, [pc, #96]	; (800fbec <__register_exitproc+0x7c>)
 800fb8c:	6013      	str	r3, [r2, #0]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	6838      	ldr	r0, [r7, #0]
 800fb92:	2a1f      	cmp	r2, #31
 800fb94:	dd04      	ble.n	800fba0 <__register_exitproc+0x30>
 800fb96:	f7fc f8c0 	bl	800bd1a <__retarget_lock_release_recursive>
 800fb9a:	2001      	movs	r0, #1
 800fb9c:	4240      	negs	r0, r0
 800fb9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	d014      	beq.n	800fbce <__register_exitproc+0x5e>
 800fba4:	0091      	lsls	r1, r2, #2
 800fba6:	1859      	adds	r1, r3, r1
 800fba8:	000f      	movs	r7, r1
 800fbaa:	3788      	adds	r7, #136	; 0x88
 800fbac:	603e      	str	r6, [r7, #0]
 800fbae:	2701      	movs	r7, #1
 800fbb0:	001e      	movs	r6, r3
 800fbb2:	4097      	lsls	r7, r2
 800fbb4:	3685      	adds	r6, #133	; 0x85
 800fbb6:	36ff      	adds	r6, #255	; 0xff
 800fbb8:	6875      	ldr	r5, [r6, #4]
 800fbba:	31fc      	adds	r1, #252	; 0xfc
 800fbbc:	433d      	orrs	r5, r7
 800fbbe:	6075      	str	r5, [r6, #4]
 800fbc0:	9d01      	ldr	r5, [sp, #4]
 800fbc2:	60cd      	str	r5, [r1, #12]
 800fbc4:	2c02      	cmp	r4, #2
 800fbc6:	d102      	bne.n	800fbce <__register_exitproc+0x5e>
 800fbc8:	68b1      	ldr	r1, [r6, #8]
 800fbca:	4339      	orrs	r1, r7
 800fbcc:	60b1      	str	r1, [r6, #8]
 800fbce:	1c51      	adds	r1, r2, #1
 800fbd0:	6059      	str	r1, [r3, #4]
 800fbd2:	3202      	adds	r2, #2
 800fbd4:	9900      	ldr	r1, [sp, #0]
 800fbd6:	0092      	lsls	r2, r2, #2
 800fbd8:	50d1      	str	r1, [r2, r3]
 800fbda:	f7fc f89e 	bl	800bd1a <__retarget_lock_release_recursive>
 800fbde:	2000      	movs	r0, #0
 800fbe0:	e7dd      	b.n	800fb9e <__register_exitproc+0x2e>
 800fbe2:	46c0      	nop			; (mov r8, r8)
 800fbe4:	200006d4 	.word	0x200006d4
 800fbe8:	20000da8 	.word	0x20000da8
 800fbec:	20000dac 	.word	0x20000dac

0800fbf0 <__assert_func>:
 800fbf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fbf2:	0014      	movs	r4, r2
 800fbf4:	001a      	movs	r2, r3
 800fbf6:	4b09      	ldr	r3, [pc, #36]	; (800fc1c <__assert_func+0x2c>)
 800fbf8:	0005      	movs	r5, r0
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	000e      	movs	r6, r1
 800fbfe:	68d8      	ldr	r0, [r3, #12]
 800fc00:	4b07      	ldr	r3, [pc, #28]	; (800fc20 <__assert_func+0x30>)
 800fc02:	2c00      	cmp	r4, #0
 800fc04:	d101      	bne.n	800fc0a <__assert_func+0x1a>
 800fc06:	4b07      	ldr	r3, [pc, #28]	; (800fc24 <__assert_func+0x34>)
 800fc08:	001c      	movs	r4, r3
 800fc0a:	4907      	ldr	r1, [pc, #28]	; (800fc28 <__assert_func+0x38>)
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	9402      	str	r4, [sp, #8]
 800fc10:	002b      	movs	r3, r5
 800fc12:	9600      	str	r6, [sp, #0]
 800fc14:	f001 faa6 	bl	8011164 <fiprintf>
 800fc18:	f002 fb8e 	bl	8012338 <abort>
 800fc1c:	200006d0 	.word	0x200006d0
 800fc20:	08014670 	.word	0x08014670
 800fc24:	080146ab 	.word	0x080146ab
 800fc28:	0801467d 	.word	0x0801467d

0800fc2c <_calloc_r>:
 800fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2e:	2400      	movs	r4, #0
 800fc30:	0c0b      	lsrs	r3, r1, #16
 800fc32:	0c16      	lsrs	r6, r2, #16
 800fc34:	42a3      	cmp	r3, r4
 800fc36:	d133      	bne.n	800fca0 <_calloc_r+0x74>
 800fc38:	42a6      	cmp	r6, r4
 800fc3a:	d121      	bne.n	800fc80 <_calloc_r+0x54>
 800fc3c:	b28b      	uxth	r3, r1
 800fc3e:	b291      	uxth	r1, r2
 800fc40:	4359      	muls	r1, r3
 800fc42:	f7fa fd11 	bl	800a668 <_malloc_r>
 800fc46:	1e05      	subs	r5, r0, #0
 800fc48:	d033      	beq.n	800fcb2 <_calloc_r+0x86>
 800fc4a:	0003      	movs	r3, r0
 800fc4c:	3b08      	subs	r3, #8
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	2303      	movs	r3, #3
 800fc52:	439a      	bics	r2, r3
 800fc54:	3a04      	subs	r2, #4
 800fc56:	2a24      	cmp	r2, #36	; 0x24
 800fc58:	d832      	bhi.n	800fcc0 <_calloc_r+0x94>
 800fc5a:	0003      	movs	r3, r0
 800fc5c:	2a13      	cmp	r2, #19
 800fc5e:	d90a      	bls.n	800fc76 <_calloc_r+0x4a>
 800fc60:	6004      	str	r4, [r0, #0]
 800fc62:	6044      	str	r4, [r0, #4]
 800fc64:	3308      	adds	r3, #8
 800fc66:	2a1b      	cmp	r2, #27
 800fc68:	d905      	bls.n	800fc76 <_calloc_r+0x4a>
 800fc6a:	6084      	str	r4, [r0, #8]
 800fc6c:	60c4      	str	r4, [r0, #12]
 800fc6e:	2a24      	cmp	r2, #36	; 0x24
 800fc70:	d021      	beq.n	800fcb6 <_calloc_r+0x8a>
 800fc72:	0003      	movs	r3, r0
 800fc74:	3310      	adds	r3, #16
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	605a      	str	r2, [r3, #4]
 800fc7c:	609a      	str	r2, [r3, #8]
 800fc7e:	e018      	b.n	800fcb2 <_calloc_r+0x86>
 800fc80:	1c33      	adds	r3, r6, #0
 800fc82:	1c0d      	adds	r5, r1, #0
 800fc84:	b289      	uxth	r1, r1
 800fc86:	b292      	uxth	r2, r2
 800fc88:	434a      	muls	r2, r1
 800fc8a:	b2ad      	uxth	r5, r5
 800fc8c:	b299      	uxth	r1, r3
 800fc8e:	4369      	muls	r1, r5
 800fc90:	0c13      	lsrs	r3, r2, #16
 800fc92:	18c9      	adds	r1, r1, r3
 800fc94:	0c0b      	lsrs	r3, r1, #16
 800fc96:	d107      	bne.n	800fca8 <_calloc_r+0x7c>
 800fc98:	0409      	lsls	r1, r1, #16
 800fc9a:	b292      	uxth	r2, r2
 800fc9c:	4311      	orrs	r1, r2
 800fc9e:	e7d0      	b.n	800fc42 <_calloc_r+0x16>
 800fca0:	2e00      	cmp	r6, #0
 800fca2:	d101      	bne.n	800fca8 <_calloc_r+0x7c>
 800fca4:	1c15      	adds	r5, r2, #0
 800fca6:	e7ed      	b.n	800fc84 <_calloc_r+0x58>
 800fca8:	f7fc f80a 	bl	800bcc0 <__errno>
 800fcac:	230c      	movs	r3, #12
 800fcae:	2500      	movs	r5, #0
 800fcb0:	6003      	str	r3, [r0, #0]
 800fcb2:	0028      	movs	r0, r5
 800fcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb6:	0003      	movs	r3, r0
 800fcb8:	6104      	str	r4, [r0, #16]
 800fcba:	3318      	adds	r3, #24
 800fcbc:	6144      	str	r4, [r0, #20]
 800fcbe:	e7da      	b.n	800fc76 <_calloc_r+0x4a>
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	f7fb ff51 	bl	800bb68 <memset>
 800fcc6:	e7f4      	b.n	800fcb2 <_calloc_r+0x86>

0800fcc8 <quorem>:
 800fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcca:	6902      	ldr	r2, [r0, #16]
 800fccc:	690b      	ldr	r3, [r1, #16]
 800fcce:	b089      	sub	sp, #36	; 0x24
 800fcd0:	0007      	movs	r7, r0
 800fcd2:	9104      	str	r1, [sp, #16]
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	db69      	blt.n	800fdae <quorem+0xe6>
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	009c      	lsls	r4, r3, #2
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	000b      	movs	r3, r1
 800fce2:	3314      	adds	r3, #20
 800fce4:	9306      	str	r3, [sp, #24]
 800fce6:	191b      	adds	r3, r3, r4
 800fce8:	9305      	str	r3, [sp, #20]
 800fcea:	003b      	movs	r3, r7
 800fcec:	3314      	adds	r3, #20
 800fcee:	9303      	str	r3, [sp, #12]
 800fcf0:	191c      	adds	r4, r3, r4
 800fcf2:	9b05      	ldr	r3, [sp, #20]
 800fcf4:	6826      	ldr	r6, [r4, #0]
 800fcf6:	681d      	ldr	r5, [r3, #0]
 800fcf8:	0030      	movs	r0, r6
 800fcfa:	3501      	adds	r5, #1
 800fcfc:	0029      	movs	r1, r5
 800fcfe:	f7f0 fa1d 	bl	800013c <__udivsi3>
 800fd02:	9002      	str	r0, [sp, #8]
 800fd04:	42ae      	cmp	r6, r5
 800fd06:	d329      	bcc.n	800fd5c <quorem+0x94>
 800fd08:	9b06      	ldr	r3, [sp, #24]
 800fd0a:	2600      	movs	r6, #0
 800fd0c:	469c      	mov	ip, r3
 800fd0e:	9d03      	ldr	r5, [sp, #12]
 800fd10:	9606      	str	r6, [sp, #24]
 800fd12:	4662      	mov	r2, ip
 800fd14:	ca08      	ldmia	r2!, {r3}
 800fd16:	6828      	ldr	r0, [r5, #0]
 800fd18:	4694      	mov	ip, r2
 800fd1a:	9a02      	ldr	r2, [sp, #8]
 800fd1c:	b299      	uxth	r1, r3
 800fd1e:	4351      	muls	r1, r2
 800fd20:	0c1b      	lsrs	r3, r3, #16
 800fd22:	4353      	muls	r3, r2
 800fd24:	1989      	adds	r1, r1, r6
 800fd26:	0c0a      	lsrs	r2, r1, #16
 800fd28:	189b      	adds	r3, r3, r2
 800fd2a:	9307      	str	r3, [sp, #28]
 800fd2c:	0c1e      	lsrs	r6, r3, #16
 800fd2e:	9b06      	ldr	r3, [sp, #24]
 800fd30:	b282      	uxth	r2, r0
 800fd32:	18d2      	adds	r2, r2, r3
 800fd34:	466b      	mov	r3, sp
 800fd36:	b289      	uxth	r1, r1
 800fd38:	8b9b      	ldrh	r3, [r3, #28]
 800fd3a:	1a52      	subs	r2, r2, r1
 800fd3c:	0c01      	lsrs	r1, r0, #16
 800fd3e:	1ac9      	subs	r1, r1, r3
 800fd40:	1413      	asrs	r3, r2, #16
 800fd42:	18cb      	adds	r3, r1, r3
 800fd44:	1419      	asrs	r1, r3, #16
 800fd46:	b292      	uxth	r2, r2
 800fd48:	041b      	lsls	r3, r3, #16
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	c508      	stmia	r5!, {r3}
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	9106      	str	r1, [sp, #24]
 800fd52:	4563      	cmp	r3, ip
 800fd54:	d2dd      	bcs.n	800fd12 <quorem+0x4a>
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d030      	beq.n	800fdbe <quorem+0xf6>
 800fd5c:	0038      	movs	r0, r7
 800fd5e:	9904      	ldr	r1, [sp, #16]
 800fd60:	f7fc ff04 	bl	800cb6c <__mcmp>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	db21      	blt.n	800fdac <quorem+0xe4>
 800fd68:	0038      	movs	r0, r7
 800fd6a:	2600      	movs	r6, #0
 800fd6c:	9b02      	ldr	r3, [sp, #8]
 800fd6e:	9c04      	ldr	r4, [sp, #16]
 800fd70:	3301      	adds	r3, #1
 800fd72:	9302      	str	r3, [sp, #8]
 800fd74:	3014      	adds	r0, #20
 800fd76:	3414      	adds	r4, #20
 800fd78:	6803      	ldr	r3, [r0, #0]
 800fd7a:	cc02      	ldmia	r4!, {r1}
 800fd7c:	b29d      	uxth	r5, r3
 800fd7e:	19ad      	adds	r5, r5, r6
 800fd80:	b28a      	uxth	r2, r1
 800fd82:	1aaa      	subs	r2, r5, r2
 800fd84:	0c09      	lsrs	r1, r1, #16
 800fd86:	0c1b      	lsrs	r3, r3, #16
 800fd88:	1a5b      	subs	r3, r3, r1
 800fd8a:	1411      	asrs	r1, r2, #16
 800fd8c:	185b      	adds	r3, r3, r1
 800fd8e:	141e      	asrs	r6, r3, #16
 800fd90:	b292      	uxth	r2, r2
 800fd92:	041b      	lsls	r3, r3, #16
 800fd94:	4313      	orrs	r3, r2
 800fd96:	c008      	stmia	r0!, {r3}
 800fd98:	9b05      	ldr	r3, [sp, #20]
 800fd9a:	42a3      	cmp	r3, r4
 800fd9c:	d2ec      	bcs.n	800fd78 <quorem+0xb0>
 800fd9e:	9b01      	ldr	r3, [sp, #4]
 800fda0:	9a03      	ldr	r2, [sp, #12]
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	18d3      	adds	r3, r2, r3
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	2a00      	cmp	r2, #0
 800fdaa:	d015      	beq.n	800fdd8 <quorem+0x110>
 800fdac:	9802      	ldr	r0, [sp, #8]
 800fdae:	b009      	add	sp, #36	; 0x24
 800fdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d106      	bne.n	800fdc6 <quorem+0xfe>
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	9301      	str	r3, [sp, #4]
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	3c04      	subs	r4, #4
 800fdc2:	42a3      	cmp	r3, r4
 800fdc4:	d3f5      	bcc.n	800fdb2 <quorem+0xea>
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	613b      	str	r3, [r7, #16]
 800fdca:	e7c7      	b.n	800fd5c <quorem+0x94>
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	2a00      	cmp	r2, #0
 800fdd0:	d106      	bne.n	800fde0 <quorem+0x118>
 800fdd2:	9a01      	ldr	r2, [sp, #4]
 800fdd4:	3a01      	subs	r2, #1
 800fdd6:	9201      	str	r2, [sp, #4]
 800fdd8:	9a03      	ldr	r2, [sp, #12]
 800fdda:	3b04      	subs	r3, #4
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d3f5      	bcc.n	800fdcc <quorem+0x104>
 800fde0:	9b01      	ldr	r3, [sp, #4]
 800fde2:	613b      	str	r3, [r7, #16]
 800fde4:	e7e2      	b.n	800fdac <quorem+0xe4>
	...

0800fde8 <_dtoa_r>:
 800fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdea:	0014      	movs	r4, r2
 800fdec:	001d      	movs	r5, r3
 800fdee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fdf0:	b09d      	sub	sp, #116	; 0x74
 800fdf2:	9408      	str	r4, [sp, #32]
 800fdf4:	9509      	str	r5, [sp, #36]	; 0x24
 800fdf6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800fdf8:	9004      	str	r0, [sp, #16]
 800fdfa:	2900      	cmp	r1, #0
 800fdfc:	d009      	beq.n	800fe12 <_dtoa_r+0x2a>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fe02:	4093      	lsls	r3, r2
 800fe04:	604a      	str	r2, [r1, #4]
 800fe06:	608b      	str	r3, [r1, #8]
 800fe08:	f7fc fc56 	bl	800c6b8 <_Bfree>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9a04      	ldr	r2, [sp, #16]
 800fe10:	6393      	str	r3, [r2, #56]	; 0x38
 800fe12:	2d00      	cmp	r5, #0
 800fe14:	da1e      	bge.n	800fe54 <_dtoa_r+0x6c>
 800fe16:	2301      	movs	r3, #1
 800fe18:	6033      	str	r3, [r6, #0]
 800fe1a:	006b      	lsls	r3, r5, #1
 800fe1c:	085b      	lsrs	r3, r3, #1
 800fe1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fe22:	4bb5      	ldr	r3, [pc, #724]	; (80100f8 <_dtoa_r+0x310>)
 800fe24:	4ab4      	ldr	r2, [pc, #720]	; (80100f8 <_dtoa_r+0x310>)
 800fe26:	403b      	ands	r3, r7
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d116      	bne.n	800fe5a <_dtoa_r+0x72>
 800fe2c:	4bb3      	ldr	r3, [pc, #716]	; (80100fc <_dtoa_r+0x314>)
 800fe2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	033b      	lsls	r3, r7, #12
 800fe34:	0b1b      	lsrs	r3, r3, #12
 800fe36:	4323      	orrs	r3, r4
 800fe38:	d101      	bne.n	800fe3e <_dtoa_r+0x56>
 800fe3a:	f000 fdb2 	bl	80109a2 <_dtoa_r+0xbba>
 800fe3e:	4bb0      	ldr	r3, [pc, #704]	; (8010100 <_dtoa_r+0x318>)
 800fe40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe42:	9306      	str	r3, [sp, #24]
 800fe44:	2a00      	cmp	r2, #0
 800fe46:	d002      	beq.n	800fe4e <_dtoa_r+0x66>
 800fe48:	4bae      	ldr	r3, [pc, #696]	; (8010104 <_dtoa_r+0x31c>)
 800fe4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	9806      	ldr	r0, [sp, #24]
 800fe50:	b01d      	add	sp, #116	; 0x74
 800fe52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe54:	2300      	movs	r3, #0
 800fe56:	6033      	str	r3, [r6, #0]
 800fe58:	e7e2      	b.n	800fe20 <_dtoa_r+0x38>
 800fe5a:	9a08      	ldr	r2, [sp, #32]
 800fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5e:	9210      	str	r2, [sp, #64]	; 0x40
 800fe60:	9311      	str	r3, [sp, #68]	; 0x44
 800fe62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe64:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe66:	2200      	movs	r2, #0
 800fe68:	2300      	movs	r3, #0
 800fe6a:	f7f0 faed 	bl	8000448 <__aeabi_dcmpeq>
 800fe6e:	1e06      	subs	r6, r0, #0
 800fe70:	d009      	beq.n	800fe86 <_dtoa_r+0x9e>
 800fe72:	2301      	movs	r3, #1
 800fe74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fe76:	6013      	str	r3, [r2, #0]
 800fe78:	4ba3      	ldr	r3, [pc, #652]	; (8010108 <_dtoa_r+0x320>)
 800fe7a:	9306      	str	r3, [sp, #24]
 800fe7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d0e5      	beq.n	800fe4e <_dtoa_r+0x66>
 800fe82:	4ba2      	ldr	r3, [pc, #648]	; (801010c <_dtoa_r+0x324>)
 800fe84:	e7e1      	b.n	800fe4a <_dtoa_r+0x62>
 800fe86:	ab1a      	add	r3, sp, #104	; 0x68
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	ab1b      	add	r3, sp, #108	; 0x6c
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	9804      	ldr	r0, [sp, #16]
 800fe90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe94:	f7fc ff86 	bl	800cda4 <__d2b>
 800fe98:	007a      	lsls	r2, r7, #1
 800fe9a:	9005      	str	r0, [sp, #20]
 800fe9c:	0d52      	lsrs	r2, r2, #21
 800fe9e:	d100      	bne.n	800fea2 <_dtoa_r+0xba>
 800fea0:	e07b      	b.n	800ff9a <_dtoa_r+0x1b2>
 800fea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fea4:	9617      	str	r6, [sp, #92]	; 0x5c
 800fea6:	0319      	lsls	r1, r3, #12
 800fea8:	4b99      	ldr	r3, [pc, #612]	; (8010110 <_dtoa_r+0x328>)
 800feaa:	0b09      	lsrs	r1, r1, #12
 800feac:	430b      	orrs	r3, r1
 800feae:	4999      	ldr	r1, [pc, #612]	; (8010114 <_dtoa_r+0x32c>)
 800feb0:	1857      	adds	r7, r2, r1
 800feb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800feb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800feb6:	0019      	movs	r1, r3
 800feb8:	2200      	movs	r2, #0
 800feba:	4b97      	ldr	r3, [pc, #604]	; (8010118 <_dtoa_r+0x330>)
 800febc:	f7f1 fe98 	bl	8001bf0 <__aeabi_dsub>
 800fec0:	4a96      	ldr	r2, [pc, #600]	; (801011c <_dtoa_r+0x334>)
 800fec2:	4b97      	ldr	r3, [pc, #604]	; (8010120 <_dtoa_r+0x338>)
 800fec4:	f7f1 fbd2 	bl	800166c <__aeabi_dmul>
 800fec8:	4a96      	ldr	r2, [pc, #600]	; (8010124 <_dtoa_r+0x33c>)
 800feca:	4b97      	ldr	r3, [pc, #604]	; (8010128 <_dtoa_r+0x340>)
 800fecc:	f7f0 fc74 	bl	80007b8 <__aeabi_dadd>
 800fed0:	0004      	movs	r4, r0
 800fed2:	0038      	movs	r0, r7
 800fed4:	000d      	movs	r5, r1
 800fed6:	f7f2 fa61 	bl	800239c <__aeabi_i2d>
 800feda:	4a94      	ldr	r2, [pc, #592]	; (801012c <_dtoa_r+0x344>)
 800fedc:	4b94      	ldr	r3, [pc, #592]	; (8010130 <_dtoa_r+0x348>)
 800fede:	f7f1 fbc5 	bl	800166c <__aeabi_dmul>
 800fee2:	0002      	movs	r2, r0
 800fee4:	000b      	movs	r3, r1
 800fee6:	0020      	movs	r0, r4
 800fee8:	0029      	movs	r1, r5
 800feea:	f7f0 fc65 	bl	80007b8 <__aeabi_dadd>
 800feee:	0004      	movs	r4, r0
 800fef0:	000d      	movs	r5, r1
 800fef2:	f7f2 fa1d 	bl	8002330 <__aeabi_d2iz>
 800fef6:	2200      	movs	r2, #0
 800fef8:	9003      	str	r0, [sp, #12]
 800fefa:	2300      	movs	r3, #0
 800fefc:	0020      	movs	r0, r4
 800fefe:	0029      	movs	r1, r5
 800ff00:	f7f0 faa8 	bl	8000454 <__aeabi_dcmplt>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d00b      	beq.n	800ff20 <_dtoa_r+0x138>
 800ff08:	9803      	ldr	r0, [sp, #12]
 800ff0a:	f7f2 fa47 	bl	800239c <__aeabi_i2d>
 800ff0e:	002b      	movs	r3, r5
 800ff10:	0022      	movs	r2, r4
 800ff12:	f7f0 fa99 	bl	8000448 <__aeabi_dcmpeq>
 800ff16:	4243      	negs	r3, r0
 800ff18:	4158      	adcs	r0, r3
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	1a1b      	subs	r3, r3, r0
 800ff1e:	9303      	str	r3, [sp, #12]
 800ff20:	2301      	movs	r3, #1
 800ff22:	9316      	str	r3, [sp, #88]	; 0x58
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	2b16      	cmp	r3, #22
 800ff28:	d810      	bhi.n	800ff4c <_dtoa_r+0x164>
 800ff2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff2e:	9a03      	ldr	r2, [sp, #12]
 800ff30:	4b80      	ldr	r3, [pc, #512]	; (8010134 <_dtoa_r+0x34c>)
 800ff32:	00d2      	lsls	r2, r2, #3
 800ff34:	189b      	adds	r3, r3, r2
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f7f0 fa8b 	bl	8000454 <__aeabi_dcmplt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d047      	beq.n	800ffd2 <_dtoa_r+0x1ea>
 800ff42:	9b03      	ldr	r3, [sp, #12]
 800ff44:	3b01      	subs	r3, #1
 800ff46:	9303      	str	r3, [sp, #12]
 800ff48:	2300      	movs	r3, #0
 800ff4a:	9316      	str	r3, [sp, #88]	; 0x58
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ff50:	920a      	str	r2, [sp, #40]	; 0x28
 800ff52:	1bdb      	subs	r3, r3, r7
 800ff54:	1e5a      	subs	r2, r3, #1
 800ff56:	d53e      	bpl.n	800ffd6 <_dtoa_r+0x1ee>
 800ff58:	2201      	movs	r2, #1
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ff5e:	2300      	movs	r3, #0
 800ff60:	930c      	str	r3, [sp, #48]	; 0x30
 800ff62:	9b03      	ldr	r3, [sp, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	db38      	blt.n	800ffda <_dtoa_r+0x1f2>
 800ff68:	9a03      	ldr	r2, [sp, #12]
 800ff6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff6c:	4694      	mov	ip, r2
 800ff6e:	4463      	add	r3, ip
 800ff70:	930c      	str	r3, [sp, #48]	; 0x30
 800ff72:	2300      	movs	r3, #0
 800ff74:	9213      	str	r2, [sp, #76]	; 0x4c
 800ff76:	930d      	str	r3, [sp, #52]	; 0x34
 800ff78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff7a:	2401      	movs	r4, #1
 800ff7c:	2b09      	cmp	r3, #9
 800ff7e:	d867      	bhi.n	8010050 <_dtoa_r+0x268>
 800ff80:	2b05      	cmp	r3, #5
 800ff82:	dd02      	ble.n	800ff8a <_dtoa_r+0x1a2>
 800ff84:	2400      	movs	r4, #0
 800ff86:	3b04      	subs	r3, #4
 800ff88:	9322      	str	r3, [sp, #136]	; 0x88
 800ff8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff8c:	1e98      	subs	r0, r3, #2
 800ff8e:	2803      	cmp	r0, #3
 800ff90:	d867      	bhi.n	8010062 <_dtoa_r+0x27a>
 800ff92:	f7f0 f8bf 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ff96:	3a2b      	.short	0x3a2b
 800ff98:	5b38      	.short	0x5b38
 800ff9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ff9c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ff9e:	18f6      	adds	r6, r6, r3
 800ffa0:	4b65      	ldr	r3, [pc, #404]	; (8010138 <_dtoa_r+0x350>)
 800ffa2:	18f2      	adds	r2, r6, r3
 800ffa4:	2a20      	cmp	r2, #32
 800ffa6:	dd0f      	ble.n	800ffc8 <_dtoa_r+0x1e0>
 800ffa8:	2340      	movs	r3, #64	; 0x40
 800ffaa:	1a9b      	subs	r3, r3, r2
 800ffac:	409f      	lsls	r7, r3
 800ffae:	4b63      	ldr	r3, [pc, #396]	; (801013c <_dtoa_r+0x354>)
 800ffb0:	0038      	movs	r0, r7
 800ffb2:	18f3      	adds	r3, r6, r3
 800ffb4:	40dc      	lsrs	r4, r3
 800ffb6:	4320      	orrs	r0, r4
 800ffb8:	f7f2 fa20 	bl	80023fc <__aeabi_ui2d>
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	4b60      	ldr	r3, [pc, #384]	; (8010140 <_dtoa_r+0x358>)
 800ffc0:	1e77      	subs	r7, r6, #1
 800ffc2:	18cb      	adds	r3, r1, r3
 800ffc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ffc6:	e776      	b.n	800feb6 <_dtoa_r+0xce>
 800ffc8:	2320      	movs	r3, #32
 800ffca:	0020      	movs	r0, r4
 800ffcc:	1a9b      	subs	r3, r3, r2
 800ffce:	4098      	lsls	r0, r3
 800ffd0:	e7f2      	b.n	800ffb8 <_dtoa_r+0x1d0>
 800ffd2:	9016      	str	r0, [sp, #88]	; 0x58
 800ffd4:	e7ba      	b.n	800ff4c <_dtoa_r+0x164>
 800ffd6:	920c      	str	r2, [sp, #48]	; 0x30
 800ffd8:	e7c3      	b.n	800ff62 <_dtoa_r+0x17a>
 800ffda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffdc:	9a03      	ldr	r2, [sp, #12]
 800ffde:	1a9b      	subs	r3, r3, r2
 800ffe0:	930a      	str	r3, [sp, #40]	; 0x28
 800ffe2:	4253      	negs	r3, r2
 800ffe4:	930d      	str	r3, [sp, #52]	; 0x34
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ffea:	e7c5      	b.n	800ff78 <_dtoa_r+0x190>
 800ffec:	2300      	movs	r3, #0
 800ffee:	930f      	str	r3, [sp, #60]	; 0x3c
 800fff0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fff2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fff4:	9307      	str	r3, [sp, #28]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	dc13      	bgt.n	8010022 <_dtoa_r+0x23a>
 800fffa:	2301      	movs	r3, #1
 800fffc:	001a      	movs	r2, r3
 800fffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8010000:	9307      	str	r3, [sp, #28]
 8010002:	9223      	str	r2, [sp, #140]	; 0x8c
 8010004:	e00d      	b.n	8010022 <_dtoa_r+0x23a>
 8010006:	2301      	movs	r3, #1
 8010008:	e7f1      	b.n	800ffee <_dtoa_r+0x206>
 801000a:	2300      	movs	r3, #0
 801000c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801000e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010010:	4694      	mov	ip, r2
 8010012:	9b03      	ldr	r3, [sp, #12]
 8010014:	4463      	add	r3, ip
 8010016:	930b      	str	r3, [sp, #44]	; 0x2c
 8010018:	3301      	adds	r3, #1
 801001a:	9307      	str	r3, [sp, #28]
 801001c:	2b00      	cmp	r3, #0
 801001e:	dc00      	bgt.n	8010022 <_dtoa_r+0x23a>
 8010020:	2301      	movs	r3, #1
 8010022:	2100      	movs	r1, #0
 8010024:	2204      	movs	r2, #4
 8010026:	0010      	movs	r0, r2
 8010028:	3014      	adds	r0, #20
 801002a:	4298      	cmp	r0, r3
 801002c:	d91d      	bls.n	801006a <_dtoa_r+0x282>
 801002e:	9b04      	ldr	r3, [sp, #16]
 8010030:	0018      	movs	r0, r3
 8010032:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010034:	f7fc fb18 	bl	800c668 <_Balloc>
 8010038:	9006      	str	r0, [sp, #24]
 801003a:	2800      	cmp	r0, #0
 801003c:	d118      	bne.n	8010070 <_dtoa_r+0x288>
 801003e:	21b0      	movs	r1, #176	; 0xb0
 8010040:	4b40      	ldr	r3, [pc, #256]	; (8010144 <_dtoa_r+0x35c>)
 8010042:	4841      	ldr	r0, [pc, #260]	; (8010148 <_dtoa_r+0x360>)
 8010044:	9a06      	ldr	r2, [sp, #24]
 8010046:	31ff      	adds	r1, #255	; 0xff
 8010048:	f7ff fdd2 	bl	800fbf0 <__assert_func>
 801004c:	2301      	movs	r3, #1
 801004e:	e7dd      	b.n	801000c <_dtoa_r+0x224>
 8010050:	2300      	movs	r3, #0
 8010052:	940f      	str	r4, [sp, #60]	; 0x3c
 8010054:	9322      	str	r3, [sp, #136]	; 0x88
 8010056:	3b01      	subs	r3, #1
 8010058:	930b      	str	r3, [sp, #44]	; 0x2c
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	2200      	movs	r2, #0
 801005e:	3313      	adds	r3, #19
 8010060:	e7cf      	b.n	8010002 <_dtoa_r+0x21a>
 8010062:	2301      	movs	r3, #1
 8010064:	930f      	str	r3, [sp, #60]	; 0x3c
 8010066:	3b02      	subs	r3, #2
 8010068:	e7f6      	b.n	8010058 <_dtoa_r+0x270>
 801006a:	3101      	adds	r1, #1
 801006c:	0052      	lsls	r2, r2, #1
 801006e:	e7da      	b.n	8010026 <_dtoa_r+0x23e>
 8010070:	9b04      	ldr	r3, [sp, #16]
 8010072:	9a06      	ldr	r2, [sp, #24]
 8010074:	639a      	str	r2, [r3, #56]	; 0x38
 8010076:	9b07      	ldr	r3, [sp, #28]
 8010078:	2b0e      	cmp	r3, #14
 801007a:	d900      	bls.n	801007e <_dtoa_r+0x296>
 801007c:	e0e3      	b.n	8010246 <_dtoa_r+0x45e>
 801007e:	2c00      	cmp	r4, #0
 8010080:	d100      	bne.n	8010084 <_dtoa_r+0x29c>
 8010082:	e0e0      	b.n	8010246 <_dtoa_r+0x45e>
 8010084:	9b03      	ldr	r3, [sp, #12]
 8010086:	2b00      	cmp	r3, #0
 8010088:	dd62      	ble.n	8010150 <_dtoa_r+0x368>
 801008a:	210f      	movs	r1, #15
 801008c:	9a03      	ldr	r2, [sp, #12]
 801008e:	4b29      	ldr	r3, [pc, #164]	; (8010134 <_dtoa_r+0x34c>)
 8010090:	400a      	ands	r2, r1
 8010092:	00d2      	lsls	r2, r2, #3
 8010094:	189b      	adds	r3, r3, r2
 8010096:	681e      	ldr	r6, [r3, #0]
 8010098:	685f      	ldr	r7, [r3, #4]
 801009a:	9b03      	ldr	r3, [sp, #12]
 801009c:	2402      	movs	r4, #2
 801009e:	111d      	asrs	r5, r3, #4
 80100a0:	05db      	lsls	r3, r3, #23
 80100a2:	d50a      	bpl.n	80100ba <_dtoa_r+0x2d2>
 80100a4:	4b29      	ldr	r3, [pc, #164]	; (801014c <_dtoa_r+0x364>)
 80100a6:	400d      	ands	r5, r1
 80100a8:	6a1a      	ldr	r2, [r3, #32]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80100ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80100b0:	f7f0 fee2 	bl	8000e78 <__aeabi_ddiv>
 80100b4:	9008      	str	r0, [sp, #32]
 80100b6:	9109      	str	r1, [sp, #36]	; 0x24
 80100b8:	3401      	adds	r4, #1
 80100ba:	4b24      	ldr	r3, [pc, #144]	; (801014c <_dtoa_r+0x364>)
 80100bc:	930e      	str	r3, [sp, #56]	; 0x38
 80100be:	2d00      	cmp	r5, #0
 80100c0:	d108      	bne.n	80100d4 <_dtoa_r+0x2ec>
 80100c2:	9808      	ldr	r0, [sp, #32]
 80100c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100c6:	0032      	movs	r2, r6
 80100c8:	003b      	movs	r3, r7
 80100ca:	f7f0 fed5 	bl	8000e78 <__aeabi_ddiv>
 80100ce:	9008      	str	r0, [sp, #32]
 80100d0:	9109      	str	r1, [sp, #36]	; 0x24
 80100d2:	e058      	b.n	8010186 <_dtoa_r+0x39e>
 80100d4:	2301      	movs	r3, #1
 80100d6:	421d      	tst	r5, r3
 80100d8:	d009      	beq.n	80100ee <_dtoa_r+0x306>
 80100da:	18e4      	adds	r4, r4, r3
 80100dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100de:	0030      	movs	r0, r6
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	0039      	movs	r1, r7
 80100e6:	f7f1 fac1 	bl	800166c <__aeabi_dmul>
 80100ea:	0006      	movs	r6, r0
 80100ec:	000f      	movs	r7, r1
 80100ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100f0:	106d      	asrs	r5, r5, #1
 80100f2:	3308      	adds	r3, #8
 80100f4:	e7e2      	b.n	80100bc <_dtoa_r+0x2d4>
 80100f6:	46c0      	nop			; (mov r8, r8)
 80100f8:	7ff00000 	.word	0x7ff00000
 80100fc:	0000270f 	.word	0x0000270f
 8010100:	080146b5 	.word	0x080146b5
 8010104:	080146b8 	.word	0x080146b8
 8010108:	08014626 	.word	0x08014626
 801010c:	08014627 	.word	0x08014627
 8010110:	3ff00000 	.word	0x3ff00000
 8010114:	fffffc01 	.word	0xfffffc01
 8010118:	3ff80000 	.word	0x3ff80000
 801011c:	636f4361 	.word	0x636f4361
 8010120:	3fd287a7 	.word	0x3fd287a7
 8010124:	8b60c8b3 	.word	0x8b60c8b3
 8010128:	3fc68a28 	.word	0x3fc68a28
 801012c:	509f79fb 	.word	0x509f79fb
 8010130:	3fd34413 	.word	0x3fd34413
 8010134:	08014520 	.word	0x08014520
 8010138:	00000432 	.word	0x00000432
 801013c:	00000412 	.word	0x00000412
 8010140:	fe100000 	.word	0xfe100000
 8010144:	08014429 	.word	0x08014429
 8010148:	080146b9 	.word	0x080146b9
 801014c:	080144f8 	.word	0x080144f8
 8010150:	9b03      	ldr	r3, [sp, #12]
 8010152:	2402      	movs	r4, #2
 8010154:	2b00      	cmp	r3, #0
 8010156:	d016      	beq.n	8010186 <_dtoa_r+0x39e>
 8010158:	9810      	ldr	r0, [sp, #64]	; 0x40
 801015a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801015c:	220f      	movs	r2, #15
 801015e:	425d      	negs	r5, r3
 8010160:	402a      	ands	r2, r5
 8010162:	4bdd      	ldr	r3, [pc, #884]	; (80104d8 <_dtoa_r+0x6f0>)
 8010164:	00d2      	lsls	r2, r2, #3
 8010166:	189b      	adds	r3, r3, r2
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	f7f1 fa7e 	bl	800166c <__aeabi_dmul>
 8010170:	2701      	movs	r7, #1
 8010172:	2300      	movs	r3, #0
 8010174:	9008      	str	r0, [sp, #32]
 8010176:	9109      	str	r1, [sp, #36]	; 0x24
 8010178:	4ed8      	ldr	r6, [pc, #864]	; (80104dc <_dtoa_r+0x6f4>)
 801017a:	112d      	asrs	r5, r5, #4
 801017c:	2d00      	cmp	r5, #0
 801017e:	d000      	beq.n	8010182 <_dtoa_r+0x39a>
 8010180:	e091      	b.n	80102a6 <_dtoa_r+0x4be>
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1a3      	bne.n	80100ce <_dtoa_r+0x2e6>
 8010186:	9e08      	ldr	r6, [sp, #32]
 8010188:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801018a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801018c:	2b00      	cmp	r3, #0
 801018e:	d100      	bne.n	8010192 <_dtoa_r+0x3aa>
 8010190:	e094      	b.n	80102bc <_dtoa_r+0x4d4>
 8010192:	2200      	movs	r2, #0
 8010194:	0030      	movs	r0, r6
 8010196:	0039      	movs	r1, r7
 8010198:	4bd1      	ldr	r3, [pc, #836]	; (80104e0 <_dtoa_r+0x6f8>)
 801019a:	f7f0 f95b 	bl	8000454 <__aeabi_dcmplt>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d100      	bne.n	80101a4 <_dtoa_r+0x3bc>
 80101a2:	e08b      	b.n	80102bc <_dtoa_r+0x4d4>
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d100      	bne.n	80101ac <_dtoa_r+0x3c4>
 80101aa:	e087      	b.n	80102bc <_dtoa_r+0x4d4>
 80101ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	dd45      	ble.n	801023e <_dtoa_r+0x456>
 80101b2:	9b03      	ldr	r3, [sp, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	3b01      	subs	r3, #1
 80101b8:	930e      	str	r3, [sp, #56]	; 0x38
 80101ba:	0030      	movs	r0, r6
 80101bc:	4bc9      	ldr	r3, [pc, #804]	; (80104e4 <_dtoa_r+0x6fc>)
 80101be:	0039      	movs	r1, r7
 80101c0:	f7f1 fa54 	bl	800166c <__aeabi_dmul>
 80101c4:	9008      	str	r0, [sp, #32]
 80101c6:	9109      	str	r1, [sp, #36]	; 0x24
 80101c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ca:	3401      	adds	r4, #1
 80101cc:	0020      	movs	r0, r4
 80101ce:	9e08      	ldr	r6, [sp, #32]
 80101d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101d2:	9312      	str	r3, [sp, #72]	; 0x48
 80101d4:	f7f2 f8e2 	bl	800239c <__aeabi_i2d>
 80101d8:	0032      	movs	r2, r6
 80101da:	003b      	movs	r3, r7
 80101dc:	f7f1 fa46 	bl	800166c <__aeabi_dmul>
 80101e0:	2200      	movs	r2, #0
 80101e2:	4bc1      	ldr	r3, [pc, #772]	; (80104e8 <_dtoa_r+0x700>)
 80101e4:	f7f0 fae8 	bl	80007b8 <__aeabi_dadd>
 80101e8:	4ac0      	ldr	r2, [pc, #768]	; (80104ec <_dtoa_r+0x704>)
 80101ea:	9014      	str	r0, [sp, #80]	; 0x50
 80101ec:	9115      	str	r1, [sp, #84]	; 0x54
 80101ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80101f2:	4694      	mov	ip, r2
 80101f4:	9308      	str	r3, [sp, #32]
 80101f6:	9409      	str	r4, [sp, #36]	; 0x24
 80101f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101fa:	4463      	add	r3, ip
 80101fc:	9318      	str	r3, [sp, #96]	; 0x60
 80101fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010202:	2b00      	cmp	r3, #0
 8010204:	d15e      	bne.n	80102c4 <_dtoa_r+0x4dc>
 8010206:	2200      	movs	r2, #0
 8010208:	4bb9      	ldr	r3, [pc, #740]	; (80104f0 <_dtoa_r+0x708>)
 801020a:	0030      	movs	r0, r6
 801020c:	0039      	movs	r1, r7
 801020e:	f7f1 fcef 	bl	8001bf0 <__aeabi_dsub>
 8010212:	9a08      	ldr	r2, [sp, #32]
 8010214:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010216:	0004      	movs	r4, r0
 8010218:	000d      	movs	r5, r1
 801021a:	f7f0 f92f 	bl	800047c <__aeabi_dcmpgt>
 801021e:	2800      	cmp	r0, #0
 8010220:	d000      	beq.n	8010224 <_dtoa_r+0x43c>
 8010222:	e2b3      	b.n	801078c <_dtoa_r+0x9a4>
 8010224:	48b3      	ldr	r0, [pc, #716]	; (80104f4 <_dtoa_r+0x70c>)
 8010226:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010228:	4684      	mov	ip, r0
 801022a:	4461      	add	r1, ip
 801022c:	000b      	movs	r3, r1
 801022e:	0020      	movs	r0, r4
 8010230:	0029      	movs	r1, r5
 8010232:	9a08      	ldr	r2, [sp, #32]
 8010234:	f7f0 f90e 	bl	8000454 <__aeabi_dcmplt>
 8010238:	2800      	cmp	r0, #0
 801023a:	d000      	beq.n	801023e <_dtoa_r+0x456>
 801023c:	e2a3      	b.n	8010786 <_dtoa_r+0x99e>
 801023e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010240:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010242:	9308      	str	r3, [sp, #32]
 8010244:	9409      	str	r4, [sp, #36]	; 0x24
 8010246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010248:	2b00      	cmp	r3, #0
 801024a:	da00      	bge.n	801024e <_dtoa_r+0x466>
 801024c:	e179      	b.n	8010542 <_dtoa_r+0x75a>
 801024e:	9a03      	ldr	r2, [sp, #12]
 8010250:	2a0e      	cmp	r2, #14
 8010252:	dd00      	ble.n	8010256 <_dtoa_r+0x46e>
 8010254:	e175      	b.n	8010542 <_dtoa_r+0x75a>
 8010256:	4ba0      	ldr	r3, [pc, #640]	; (80104d8 <_dtoa_r+0x6f0>)
 8010258:	00d2      	lsls	r2, r2, #3
 801025a:	189b      	adds	r3, r3, r2
 801025c:	681e      	ldr	r6, [r3, #0]
 801025e:	685f      	ldr	r7, [r3, #4]
 8010260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010262:	2b00      	cmp	r3, #0
 8010264:	db00      	blt.n	8010268 <_dtoa_r+0x480>
 8010266:	e0e5      	b.n	8010434 <_dtoa_r+0x64c>
 8010268:	9b07      	ldr	r3, [sp, #28]
 801026a:	2b00      	cmp	r3, #0
 801026c:	dd00      	ble.n	8010270 <_dtoa_r+0x488>
 801026e:	e0e1      	b.n	8010434 <_dtoa_r+0x64c>
 8010270:	d000      	beq.n	8010274 <_dtoa_r+0x48c>
 8010272:	e288      	b.n	8010786 <_dtoa_r+0x99e>
 8010274:	2200      	movs	r2, #0
 8010276:	0030      	movs	r0, r6
 8010278:	0039      	movs	r1, r7
 801027a:	4b9d      	ldr	r3, [pc, #628]	; (80104f0 <_dtoa_r+0x708>)
 801027c:	f7f1 f9f6 	bl	800166c <__aeabi_dmul>
 8010280:	9a08      	ldr	r2, [sp, #32]
 8010282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010284:	f7f0 f904 	bl	8000490 <__aeabi_dcmpge>
 8010288:	9e07      	ldr	r6, [sp, #28]
 801028a:	0037      	movs	r7, r6
 801028c:	2800      	cmp	r0, #0
 801028e:	d000      	beq.n	8010292 <_dtoa_r+0x4aa>
 8010290:	e25f      	b.n	8010752 <_dtoa_r+0x96a>
 8010292:	9b06      	ldr	r3, [sp, #24]
 8010294:	9a06      	ldr	r2, [sp, #24]
 8010296:	3301      	adds	r3, #1
 8010298:	9308      	str	r3, [sp, #32]
 801029a:	2331      	movs	r3, #49	; 0x31
 801029c:	7013      	strb	r3, [r2, #0]
 801029e:	9b03      	ldr	r3, [sp, #12]
 80102a0:	3301      	adds	r3, #1
 80102a2:	9303      	str	r3, [sp, #12]
 80102a4:	e25a      	b.n	801075c <_dtoa_r+0x974>
 80102a6:	423d      	tst	r5, r7
 80102a8:	d005      	beq.n	80102b6 <_dtoa_r+0x4ce>
 80102aa:	6832      	ldr	r2, [r6, #0]
 80102ac:	6873      	ldr	r3, [r6, #4]
 80102ae:	f7f1 f9dd 	bl	800166c <__aeabi_dmul>
 80102b2:	003b      	movs	r3, r7
 80102b4:	3401      	adds	r4, #1
 80102b6:	106d      	asrs	r5, r5, #1
 80102b8:	3608      	adds	r6, #8
 80102ba:	e75f      	b.n	801017c <_dtoa_r+0x394>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	930e      	str	r3, [sp, #56]	; 0x38
 80102c0:	9b07      	ldr	r3, [sp, #28]
 80102c2:	e783      	b.n	80101cc <_dtoa_r+0x3e4>
 80102c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80102c6:	4b84      	ldr	r3, [pc, #528]	; (80104d8 <_dtoa_r+0x6f0>)
 80102c8:	3a01      	subs	r2, #1
 80102ca:	00d2      	lsls	r2, r2, #3
 80102cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80102ce:	189b      	adds	r3, r3, r2
 80102d0:	9c08      	ldr	r4, [sp, #32]
 80102d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	2900      	cmp	r1, #0
 80102da:	d051      	beq.n	8010380 <_dtoa_r+0x598>
 80102dc:	2000      	movs	r0, #0
 80102de:	4986      	ldr	r1, [pc, #536]	; (80104f8 <_dtoa_r+0x710>)
 80102e0:	f7f0 fdca 	bl	8000e78 <__aeabi_ddiv>
 80102e4:	0022      	movs	r2, r4
 80102e6:	002b      	movs	r3, r5
 80102e8:	f7f1 fc82 	bl	8001bf0 <__aeabi_dsub>
 80102ec:	9a06      	ldr	r2, [sp, #24]
 80102ee:	0004      	movs	r4, r0
 80102f0:	4694      	mov	ip, r2
 80102f2:	000d      	movs	r5, r1
 80102f4:	9b06      	ldr	r3, [sp, #24]
 80102f6:	9314      	str	r3, [sp, #80]	; 0x50
 80102f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102fa:	4463      	add	r3, ip
 80102fc:	9318      	str	r3, [sp, #96]	; 0x60
 80102fe:	0039      	movs	r1, r7
 8010300:	0030      	movs	r0, r6
 8010302:	f7f2 f815 	bl	8002330 <__aeabi_d2iz>
 8010306:	9012      	str	r0, [sp, #72]	; 0x48
 8010308:	f7f2 f848 	bl	800239c <__aeabi_i2d>
 801030c:	0002      	movs	r2, r0
 801030e:	000b      	movs	r3, r1
 8010310:	0030      	movs	r0, r6
 8010312:	0039      	movs	r1, r7
 8010314:	f7f1 fc6c 	bl	8001bf0 <__aeabi_dsub>
 8010318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801031a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801031c:	3301      	adds	r3, #1
 801031e:	9308      	str	r3, [sp, #32]
 8010320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010322:	0006      	movs	r6, r0
 8010324:	3330      	adds	r3, #48	; 0x30
 8010326:	7013      	strb	r3, [r2, #0]
 8010328:	0022      	movs	r2, r4
 801032a:	002b      	movs	r3, r5
 801032c:	000f      	movs	r7, r1
 801032e:	f7f0 f891 	bl	8000454 <__aeabi_dcmplt>
 8010332:	2800      	cmp	r0, #0
 8010334:	d174      	bne.n	8010420 <_dtoa_r+0x638>
 8010336:	0032      	movs	r2, r6
 8010338:	003b      	movs	r3, r7
 801033a:	2000      	movs	r0, #0
 801033c:	4968      	ldr	r1, [pc, #416]	; (80104e0 <_dtoa_r+0x6f8>)
 801033e:	f7f1 fc57 	bl	8001bf0 <__aeabi_dsub>
 8010342:	0022      	movs	r2, r4
 8010344:	002b      	movs	r3, r5
 8010346:	f7f0 f885 	bl	8000454 <__aeabi_dcmplt>
 801034a:	2800      	cmp	r0, #0
 801034c:	d000      	beq.n	8010350 <_dtoa_r+0x568>
 801034e:	e0d7      	b.n	8010500 <_dtoa_r+0x718>
 8010350:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010352:	9a08      	ldr	r2, [sp, #32]
 8010354:	4293      	cmp	r3, r2
 8010356:	d100      	bne.n	801035a <_dtoa_r+0x572>
 8010358:	e771      	b.n	801023e <_dtoa_r+0x456>
 801035a:	2200      	movs	r2, #0
 801035c:	0020      	movs	r0, r4
 801035e:	0029      	movs	r1, r5
 8010360:	4b60      	ldr	r3, [pc, #384]	; (80104e4 <_dtoa_r+0x6fc>)
 8010362:	f7f1 f983 	bl	800166c <__aeabi_dmul>
 8010366:	4b5f      	ldr	r3, [pc, #380]	; (80104e4 <_dtoa_r+0x6fc>)
 8010368:	0004      	movs	r4, r0
 801036a:	000d      	movs	r5, r1
 801036c:	0030      	movs	r0, r6
 801036e:	0039      	movs	r1, r7
 8010370:	2200      	movs	r2, #0
 8010372:	f7f1 f97b 	bl	800166c <__aeabi_dmul>
 8010376:	9b08      	ldr	r3, [sp, #32]
 8010378:	0006      	movs	r6, r0
 801037a:	000f      	movs	r7, r1
 801037c:	9314      	str	r3, [sp, #80]	; 0x50
 801037e:	e7be      	b.n	80102fe <_dtoa_r+0x516>
 8010380:	0020      	movs	r0, r4
 8010382:	0029      	movs	r1, r5
 8010384:	f7f1 f972 	bl	800166c <__aeabi_dmul>
 8010388:	9a06      	ldr	r2, [sp, #24]
 801038a:	9b06      	ldr	r3, [sp, #24]
 801038c:	4694      	mov	ip, r2
 801038e:	9308      	str	r3, [sp, #32]
 8010390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010392:	9014      	str	r0, [sp, #80]	; 0x50
 8010394:	9115      	str	r1, [sp, #84]	; 0x54
 8010396:	4463      	add	r3, ip
 8010398:	9319      	str	r3, [sp, #100]	; 0x64
 801039a:	0030      	movs	r0, r6
 801039c:	0039      	movs	r1, r7
 801039e:	f7f1 ffc7 	bl	8002330 <__aeabi_d2iz>
 80103a2:	9018      	str	r0, [sp, #96]	; 0x60
 80103a4:	f7f1 fffa 	bl	800239c <__aeabi_i2d>
 80103a8:	0002      	movs	r2, r0
 80103aa:	000b      	movs	r3, r1
 80103ac:	0030      	movs	r0, r6
 80103ae:	0039      	movs	r1, r7
 80103b0:	f7f1 fc1e 	bl	8001bf0 <__aeabi_dsub>
 80103b4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80103b6:	9b08      	ldr	r3, [sp, #32]
 80103b8:	3630      	adds	r6, #48	; 0x30
 80103ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80103bc:	701e      	strb	r6, [r3, #0]
 80103be:	3301      	adds	r3, #1
 80103c0:	0004      	movs	r4, r0
 80103c2:	000d      	movs	r5, r1
 80103c4:	9308      	str	r3, [sp, #32]
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d12d      	bne.n	8010426 <_dtoa_r+0x63e>
 80103ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80103cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80103ce:	9a06      	ldr	r2, [sp, #24]
 80103d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80103d2:	4694      	mov	ip, r2
 80103d4:	4463      	add	r3, ip
 80103d6:	2200      	movs	r2, #0
 80103d8:	9308      	str	r3, [sp, #32]
 80103da:	4b47      	ldr	r3, [pc, #284]	; (80104f8 <_dtoa_r+0x710>)
 80103dc:	f7f0 f9ec 	bl	80007b8 <__aeabi_dadd>
 80103e0:	0002      	movs	r2, r0
 80103e2:	000b      	movs	r3, r1
 80103e4:	0020      	movs	r0, r4
 80103e6:	0029      	movs	r1, r5
 80103e8:	f7f0 f848 	bl	800047c <__aeabi_dcmpgt>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d000      	beq.n	80103f2 <_dtoa_r+0x60a>
 80103f0:	e086      	b.n	8010500 <_dtoa_r+0x718>
 80103f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103f6:	2000      	movs	r0, #0
 80103f8:	493f      	ldr	r1, [pc, #252]	; (80104f8 <_dtoa_r+0x710>)
 80103fa:	f7f1 fbf9 	bl	8001bf0 <__aeabi_dsub>
 80103fe:	0002      	movs	r2, r0
 8010400:	000b      	movs	r3, r1
 8010402:	0020      	movs	r0, r4
 8010404:	0029      	movs	r1, r5
 8010406:	f7f0 f825 	bl	8000454 <__aeabi_dcmplt>
 801040a:	2800      	cmp	r0, #0
 801040c:	d100      	bne.n	8010410 <_dtoa_r+0x628>
 801040e:	e716      	b.n	801023e <_dtoa_r+0x456>
 8010410:	9b08      	ldr	r3, [sp, #32]
 8010412:	001a      	movs	r2, r3
 8010414:	3a01      	subs	r2, #1
 8010416:	9208      	str	r2, [sp, #32]
 8010418:	7812      	ldrb	r2, [r2, #0]
 801041a:	2a30      	cmp	r2, #48	; 0x30
 801041c:	d0f8      	beq.n	8010410 <_dtoa_r+0x628>
 801041e:	9308      	str	r3, [sp, #32]
 8010420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	e046      	b.n	80104b4 <_dtoa_r+0x6cc>
 8010426:	2200      	movs	r2, #0
 8010428:	4b2e      	ldr	r3, [pc, #184]	; (80104e4 <_dtoa_r+0x6fc>)
 801042a:	f7f1 f91f 	bl	800166c <__aeabi_dmul>
 801042e:	0006      	movs	r6, r0
 8010430:	000f      	movs	r7, r1
 8010432:	e7b2      	b.n	801039a <_dtoa_r+0x5b2>
 8010434:	9b06      	ldr	r3, [sp, #24]
 8010436:	9a06      	ldr	r2, [sp, #24]
 8010438:	930a      	str	r3, [sp, #40]	; 0x28
 801043a:	9b07      	ldr	r3, [sp, #28]
 801043c:	9c08      	ldr	r4, [sp, #32]
 801043e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010440:	3b01      	subs	r3, #1
 8010442:	189b      	adds	r3, r3, r2
 8010444:	930b      	str	r3, [sp, #44]	; 0x2c
 8010446:	0032      	movs	r2, r6
 8010448:	003b      	movs	r3, r7
 801044a:	0020      	movs	r0, r4
 801044c:	0029      	movs	r1, r5
 801044e:	f7f0 fd13 	bl	8000e78 <__aeabi_ddiv>
 8010452:	f7f1 ff6d 	bl	8002330 <__aeabi_d2iz>
 8010456:	9007      	str	r0, [sp, #28]
 8010458:	f7f1 ffa0 	bl	800239c <__aeabi_i2d>
 801045c:	0032      	movs	r2, r6
 801045e:	003b      	movs	r3, r7
 8010460:	f7f1 f904 	bl	800166c <__aeabi_dmul>
 8010464:	0002      	movs	r2, r0
 8010466:	000b      	movs	r3, r1
 8010468:	0020      	movs	r0, r4
 801046a:	0029      	movs	r1, r5
 801046c:	f7f1 fbc0 	bl	8001bf0 <__aeabi_dsub>
 8010470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010472:	001a      	movs	r2, r3
 8010474:	3201      	adds	r2, #1
 8010476:	920a      	str	r2, [sp, #40]	; 0x28
 8010478:	9208      	str	r2, [sp, #32]
 801047a:	9a07      	ldr	r2, [sp, #28]
 801047c:	3230      	adds	r2, #48	; 0x30
 801047e:	701a      	strb	r2, [r3, #0]
 8010480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010482:	429a      	cmp	r2, r3
 8010484:	d14f      	bne.n	8010526 <_dtoa_r+0x73e>
 8010486:	0002      	movs	r2, r0
 8010488:	000b      	movs	r3, r1
 801048a:	f7f0 f995 	bl	80007b8 <__aeabi_dadd>
 801048e:	0032      	movs	r2, r6
 8010490:	003b      	movs	r3, r7
 8010492:	0004      	movs	r4, r0
 8010494:	000d      	movs	r5, r1
 8010496:	f7ef fff1 	bl	800047c <__aeabi_dcmpgt>
 801049a:	2800      	cmp	r0, #0
 801049c:	d12e      	bne.n	80104fc <_dtoa_r+0x714>
 801049e:	0032      	movs	r2, r6
 80104a0:	003b      	movs	r3, r7
 80104a2:	0020      	movs	r0, r4
 80104a4:	0029      	movs	r1, r5
 80104a6:	f7ef ffcf 	bl	8000448 <__aeabi_dcmpeq>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d002      	beq.n	80104b4 <_dtoa_r+0x6cc>
 80104ae:	9b07      	ldr	r3, [sp, #28]
 80104b0:	07de      	lsls	r6, r3, #31
 80104b2:	d423      	bmi.n	80104fc <_dtoa_r+0x714>
 80104b4:	9905      	ldr	r1, [sp, #20]
 80104b6:	9804      	ldr	r0, [sp, #16]
 80104b8:	f7fc f8fe 	bl	800c6b8 <_Bfree>
 80104bc:	2300      	movs	r3, #0
 80104be:	9a08      	ldr	r2, [sp, #32]
 80104c0:	7013      	strb	r3, [r2, #0]
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80104c6:	3301      	adds	r3, #1
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d100      	bne.n	80104d2 <_dtoa_r+0x6ea>
 80104d0:	e4bd      	b.n	800fe4e <_dtoa_r+0x66>
 80104d2:	9a08      	ldr	r2, [sp, #32]
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	e4ba      	b.n	800fe4e <_dtoa_r+0x66>
 80104d8:	08014520 	.word	0x08014520
 80104dc:	080144f8 	.word	0x080144f8
 80104e0:	3ff00000 	.word	0x3ff00000
 80104e4:	40240000 	.word	0x40240000
 80104e8:	401c0000 	.word	0x401c0000
 80104ec:	fcc00000 	.word	0xfcc00000
 80104f0:	40140000 	.word	0x40140000
 80104f4:	7cc00000 	.word	0x7cc00000
 80104f8:	3fe00000 	.word	0x3fe00000
 80104fc:	9b03      	ldr	r3, [sp, #12]
 80104fe:	930e      	str	r3, [sp, #56]	; 0x38
 8010500:	9b08      	ldr	r3, [sp, #32]
 8010502:	9308      	str	r3, [sp, #32]
 8010504:	3b01      	subs	r3, #1
 8010506:	781a      	ldrb	r2, [r3, #0]
 8010508:	2a39      	cmp	r2, #57	; 0x39
 801050a:	d108      	bne.n	801051e <_dtoa_r+0x736>
 801050c:	9a06      	ldr	r2, [sp, #24]
 801050e:	429a      	cmp	r2, r3
 8010510:	d1f7      	bne.n	8010502 <_dtoa_r+0x71a>
 8010512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010514:	9906      	ldr	r1, [sp, #24]
 8010516:	3201      	adds	r2, #1
 8010518:	920e      	str	r2, [sp, #56]	; 0x38
 801051a:	2230      	movs	r2, #48	; 0x30
 801051c:	700a      	strb	r2, [r1, #0]
 801051e:	781a      	ldrb	r2, [r3, #0]
 8010520:	3201      	adds	r2, #1
 8010522:	701a      	strb	r2, [r3, #0]
 8010524:	e77c      	b.n	8010420 <_dtoa_r+0x638>
 8010526:	2200      	movs	r2, #0
 8010528:	4ba9      	ldr	r3, [pc, #676]	; (80107d0 <_dtoa_r+0x9e8>)
 801052a:	f7f1 f89f 	bl	800166c <__aeabi_dmul>
 801052e:	2200      	movs	r2, #0
 8010530:	2300      	movs	r3, #0
 8010532:	0004      	movs	r4, r0
 8010534:	000d      	movs	r5, r1
 8010536:	f7ef ff87 	bl	8000448 <__aeabi_dcmpeq>
 801053a:	2800      	cmp	r0, #0
 801053c:	d100      	bne.n	8010540 <_dtoa_r+0x758>
 801053e:	e782      	b.n	8010446 <_dtoa_r+0x65e>
 8010540:	e7b8      	b.n	80104b4 <_dtoa_r+0x6cc>
 8010542:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010544:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010546:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010548:	2f00      	cmp	r7, #0
 801054a:	d012      	beq.n	8010572 <_dtoa_r+0x78a>
 801054c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801054e:	2a01      	cmp	r2, #1
 8010550:	dc6e      	bgt.n	8010630 <_dtoa_r+0x848>
 8010552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010554:	2a00      	cmp	r2, #0
 8010556:	d065      	beq.n	8010624 <_dtoa_r+0x83c>
 8010558:	4a9e      	ldr	r2, [pc, #632]	; (80107d4 <_dtoa_r+0x9ec>)
 801055a:	189b      	adds	r3, r3, r2
 801055c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801055e:	2101      	movs	r1, #1
 8010560:	18d2      	adds	r2, r2, r3
 8010562:	920a      	str	r2, [sp, #40]	; 0x28
 8010564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010566:	9804      	ldr	r0, [sp, #16]
 8010568:	18d3      	adds	r3, r2, r3
 801056a:	930c      	str	r3, [sp, #48]	; 0x30
 801056c:	f7fc f986 	bl	800c87c <__i2b>
 8010570:	0007      	movs	r7, r0
 8010572:	2c00      	cmp	r4, #0
 8010574:	d00e      	beq.n	8010594 <_dtoa_r+0x7ac>
 8010576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010578:	2b00      	cmp	r3, #0
 801057a:	dd0b      	ble.n	8010594 <_dtoa_r+0x7ac>
 801057c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801057e:	0023      	movs	r3, r4
 8010580:	4294      	cmp	r4, r2
 8010582:	dd00      	ble.n	8010586 <_dtoa_r+0x79e>
 8010584:	0013      	movs	r3, r2
 8010586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010588:	1ae4      	subs	r4, r4, r3
 801058a:	1ad2      	subs	r2, r2, r3
 801058c:	920a      	str	r2, [sp, #40]	; 0x28
 801058e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	930c      	str	r3, [sp, #48]	; 0x30
 8010594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010596:	2b00      	cmp	r3, #0
 8010598:	d01e      	beq.n	80105d8 <_dtoa_r+0x7f0>
 801059a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801059c:	2b00      	cmp	r3, #0
 801059e:	d05c      	beq.n	801065a <_dtoa_r+0x872>
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	dd10      	ble.n	80105c6 <_dtoa_r+0x7de>
 80105a4:	0039      	movs	r1, r7
 80105a6:	002a      	movs	r2, r5
 80105a8:	9804      	ldr	r0, [sp, #16]
 80105aa:	f7fc fa2f 	bl	800ca0c <__pow5mult>
 80105ae:	9a05      	ldr	r2, [sp, #20]
 80105b0:	0001      	movs	r1, r0
 80105b2:	0007      	movs	r7, r0
 80105b4:	9804      	ldr	r0, [sp, #16]
 80105b6:	f7fc f979 	bl	800c8ac <__multiply>
 80105ba:	0006      	movs	r6, r0
 80105bc:	9905      	ldr	r1, [sp, #20]
 80105be:	9804      	ldr	r0, [sp, #16]
 80105c0:	f7fc f87a 	bl	800c6b8 <_Bfree>
 80105c4:	9605      	str	r6, [sp, #20]
 80105c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105c8:	1b5a      	subs	r2, r3, r5
 80105ca:	42ab      	cmp	r3, r5
 80105cc:	d004      	beq.n	80105d8 <_dtoa_r+0x7f0>
 80105ce:	9905      	ldr	r1, [sp, #20]
 80105d0:	9804      	ldr	r0, [sp, #16]
 80105d2:	f7fc fa1b 	bl	800ca0c <__pow5mult>
 80105d6:	9005      	str	r0, [sp, #20]
 80105d8:	2101      	movs	r1, #1
 80105da:	9804      	ldr	r0, [sp, #16]
 80105dc:	f7fc f94e 	bl	800c87c <__i2b>
 80105e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105e2:	0006      	movs	r6, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dd3a      	ble.n	801065e <_dtoa_r+0x876>
 80105e8:	001a      	movs	r2, r3
 80105ea:	0001      	movs	r1, r0
 80105ec:	9804      	ldr	r0, [sp, #16]
 80105ee:	f7fc fa0d 	bl	800ca0c <__pow5mult>
 80105f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105f4:	0006      	movs	r6, r0
 80105f6:	2500      	movs	r5, #0
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	dc38      	bgt.n	801066e <_dtoa_r+0x886>
 80105fc:	2500      	movs	r5, #0
 80105fe:	9b08      	ldr	r3, [sp, #32]
 8010600:	42ab      	cmp	r3, r5
 8010602:	d130      	bne.n	8010666 <_dtoa_r+0x87e>
 8010604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010606:	031b      	lsls	r3, r3, #12
 8010608:	42ab      	cmp	r3, r5
 801060a:	d12c      	bne.n	8010666 <_dtoa_r+0x87e>
 801060c:	4b72      	ldr	r3, [pc, #456]	; (80107d8 <_dtoa_r+0x9f0>)
 801060e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010610:	4213      	tst	r3, r2
 8010612:	d028      	beq.n	8010666 <_dtoa_r+0x87e>
 8010614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010616:	3501      	adds	r5, #1
 8010618:	3301      	adds	r3, #1
 801061a:	930a      	str	r3, [sp, #40]	; 0x28
 801061c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801061e:	3301      	adds	r3, #1
 8010620:	930c      	str	r3, [sp, #48]	; 0x30
 8010622:	e020      	b.n	8010666 <_dtoa_r+0x87e>
 8010624:	2336      	movs	r3, #54	; 0x36
 8010626:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010628:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801062a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801062c:	1a9b      	subs	r3, r3, r2
 801062e:	e795      	b.n	801055c <_dtoa_r+0x774>
 8010630:	9b07      	ldr	r3, [sp, #28]
 8010632:	1e5d      	subs	r5, r3, #1
 8010634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010636:	42ab      	cmp	r3, r5
 8010638:	db07      	blt.n	801064a <_dtoa_r+0x862>
 801063a:	1b5d      	subs	r5, r3, r5
 801063c:	9b07      	ldr	r3, [sp, #28]
 801063e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010640:	2b00      	cmp	r3, #0
 8010642:	da8b      	bge.n	801055c <_dtoa_r+0x774>
 8010644:	1ae4      	subs	r4, r4, r3
 8010646:	2300      	movs	r3, #0
 8010648:	e788      	b.n	801055c <_dtoa_r+0x774>
 801064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801064c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801064e:	1aeb      	subs	r3, r5, r3
 8010650:	18d3      	adds	r3, r2, r3
 8010652:	950d      	str	r5, [sp, #52]	; 0x34
 8010654:	9313      	str	r3, [sp, #76]	; 0x4c
 8010656:	2500      	movs	r5, #0
 8010658:	e7f0      	b.n	801063c <_dtoa_r+0x854>
 801065a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801065c:	e7b7      	b.n	80105ce <_dtoa_r+0x7e6>
 801065e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010660:	2500      	movs	r5, #0
 8010662:	2b01      	cmp	r3, #1
 8010664:	ddca      	ble.n	80105fc <_dtoa_r+0x814>
 8010666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010668:	2001      	movs	r0, #1
 801066a:	2b00      	cmp	r3, #0
 801066c:	d008      	beq.n	8010680 <_dtoa_r+0x898>
 801066e:	6933      	ldr	r3, [r6, #16]
 8010670:	3303      	adds	r3, #3
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	18f3      	adds	r3, r6, r3
 8010676:	6858      	ldr	r0, [r3, #4]
 8010678:	f7fc f8b8 	bl	800c7ec <__hi0bits>
 801067c:	2320      	movs	r3, #32
 801067e:	1a18      	subs	r0, r3, r0
 8010680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010682:	1818      	adds	r0, r3, r0
 8010684:	0002      	movs	r2, r0
 8010686:	231f      	movs	r3, #31
 8010688:	401a      	ands	r2, r3
 801068a:	4218      	tst	r0, r3
 801068c:	d047      	beq.n	801071e <_dtoa_r+0x936>
 801068e:	3301      	adds	r3, #1
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	2b04      	cmp	r3, #4
 8010694:	dd3f      	ble.n	8010716 <_dtoa_r+0x92e>
 8010696:	231c      	movs	r3, #28
 8010698:	1a9b      	subs	r3, r3, r2
 801069a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801069c:	18e4      	adds	r4, r4, r3
 801069e:	18d2      	adds	r2, r2, r3
 80106a0:	920a      	str	r2, [sp, #40]	; 0x28
 80106a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106a4:	18d3      	adds	r3, r2, r3
 80106a6:	930c      	str	r3, [sp, #48]	; 0x30
 80106a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd05      	ble.n	80106ba <_dtoa_r+0x8d2>
 80106ae:	001a      	movs	r2, r3
 80106b0:	9905      	ldr	r1, [sp, #20]
 80106b2:	9804      	ldr	r0, [sp, #16]
 80106b4:	f7fc f9ec 	bl	800ca90 <__lshift>
 80106b8:	9005      	str	r0, [sp, #20]
 80106ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dd05      	ble.n	80106cc <_dtoa_r+0x8e4>
 80106c0:	0031      	movs	r1, r6
 80106c2:	001a      	movs	r2, r3
 80106c4:	9804      	ldr	r0, [sp, #16]
 80106c6:	f7fc f9e3 	bl	800ca90 <__lshift>
 80106ca:	0006      	movs	r6, r0
 80106cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d027      	beq.n	8010722 <_dtoa_r+0x93a>
 80106d2:	0031      	movs	r1, r6
 80106d4:	9805      	ldr	r0, [sp, #20]
 80106d6:	f7fc fa49 	bl	800cb6c <__mcmp>
 80106da:	2800      	cmp	r0, #0
 80106dc:	da21      	bge.n	8010722 <_dtoa_r+0x93a>
 80106de:	9b03      	ldr	r3, [sp, #12]
 80106e0:	220a      	movs	r2, #10
 80106e2:	3b01      	subs	r3, #1
 80106e4:	9303      	str	r3, [sp, #12]
 80106e6:	9905      	ldr	r1, [sp, #20]
 80106e8:	2300      	movs	r3, #0
 80106ea:	9804      	ldr	r0, [sp, #16]
 80106ec:	f7fb ffee 	bl	800c6cc <__multadd>
 80106f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106f2:	9005      	str	r0, [sp, #20]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d100      	bne.n	80106fa <_dtoa_r+0x912>
 80106f8:	e15d      	b.n	80109b6 <_dtoa_r+0xbce>
 80106fa:	2300      	movs	r3, #0
 80106fc:	0039      	movs	r1, r7
 80106fe:	220a      	movs	r2, #10
 8010700:	9804      	ldr	r0, [sp, #16]
 8010702:	f7fb ffe3 	bl	800c6cc <__multadd>
 8010706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010708:	0007      	movs	r7, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	dc49      	bgt.n	80107a2 <_dtoa_r+0x9ba>
 801070e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010710:	2b02      	cmp	r3, #2
 8010712:	dc0e      	bgt.n	8010732 <_dtoa_r+0x94a>
 8010714:	e045      	b.n	80107a2 <_dtoa_r+0x9ba>
 8010716:	2b04      	cmp	r3, #4
 8010718:	d0c6      	beq.n	80106a8 <_dtoa_r+0x8c0>
 801071a:	331c      	adds	r3, #28
 801071c:	e7bd      	b.n	801069a <_dtoa_r+0x8b2>
 801071e:	0013      	movs	r3, r2
 8010720:	e7fb      	b.n	801071a <_dtoa_r+0x932>
 8010722:	9b07      	ldr	r3, [sp, #28]
 8010724:	2b00      	cmp	r3, #0
 8010726:	dc36      	bgt.n	8010796 <_dtoa_r+0x9ae>
 8010728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801072a:	2b02      	cmp	r3, #2
 801072c:	dd33      	ble.n	8010796 <_dtoa_r+0x9ae>
 801072e:	9b07      	ldr	r3, [sp, #28]
 8010730:	930b      	str	r3, [sp, #44]	; 0x2c
 8010732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10c      	bne.n	8010752 <_dtoa_r+0x96a>
 8010738:	0031      	movs	r1, r6
 801073a:	2205      	movs	r2, #5
 801073c:	9804      	ldr	r0, [sp, #16]
 801073e:	f7fb ffc5 	bl	800c6cc <__multadd>
 8010742:	0006      	movs	r6, r0
 8010744:	0001      	movs	r1, r0
 8010746:	9805      	ldr	r0, [sp, #20]
 8010748:	f7fc fa10 	bl	800cb6c <__mcmp>
 801074c:	2800      	cmp	r0, #0
 801074e:	dd00      	ble.n	8010752 <_dtoa_r+0x96a>
 8010750:	e59f      	b.n	8010292 <_dtoa_r+0x4aa>
 8010752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010754:	43db      	mvns	r3, r3
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	9b06      	ldr	r3, [sp, #24]
 801075a:	9308      	str	r3, [sp, #32]
 801075c:	2500      	movs	r5, #0
 801075e:	0031      	movs	r1, r6
 8010760:	9804      	ldr	r0, [sp, #16]
 8010762:	f7fb ffa9 	bl	800c6b8 <_Bfree>
 8010766:	2f00      	cmp	r7, #0
 8010768:	d100      	bne.n	801076c <_dtoa_r+0x984>
 801076a:	e6a3      	b.n	80104b4 <_dtoa_r+0x6cc>
 801076c:	2d00      	cmp	r5, #0
 801076e:	d005      	beq.n	801077c <_dtoa_r+0x994>
 8010770:	42bd      	cmp	r5, r7
 8010772:	d003      	beq.n	801077c <_dtoa_r+0x994>
 8010774:	0029      	movs	r1, r5
 8010776:	9804      	ldr	r0, [sp, #16]
 8010778:	f7fb ff9e 	bl	800c6b8 <_Bfree>
 801077c:	0039      	movs	r1, r7
 801077e:	9804      	ldr	r0, [sp, #16]
 8010780:	f7fb ff9a 	bl	800c6b8 <_Bfree>
 8010784:	e696      	b.n	80104b4 <_dtoa_r+0x6cc>
 8010786:	2600      	movs	r6, #0
 8010788:	0037      	movs	r7, r6
 801078a:	e7e2      	b.n	8010752 <_dtoa_r+0x96a>
 801078c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801078e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010790:	9303      	str	r3, [sp, #12]
 8010792:	0037      	movs	r7, r6
 8010794:	e57d      	b.n	8010292 <_dtoa_r+0x4aa>
 8010796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010798:	2b00      	cmp	r3, #0
 801079a:	d100      	bne.n	801079e <_dtoa_r+0x9b6>
 801079c:	e0c3      	b.n	8010926 <_dtoa_r+0xb3e>
 801079e:	9b07      	ldr	r3, [sp, #28]
 80107a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80107a2:	2c00      	cmp	r4, #0
 80107a4:	dd05      	ble.n	80107b2 <_dtoa_r+0x9ca>
 80107a6:	0039      	movs	r1, r7
 80107a8:	0022      	movs	r2, r4
 80107aa:	9804      	ldr	r0, [sp, #16]
 80107ac:	f7fc f970 	bl	800ca90 <__lshift>
 80107b0:	0007      	movs	r7, r0
 80107b2:	0038      	movs	r0, r7
 80107b4:	2d00      	cmp	r5, #0
 80107b6:	d024      	beq.n	8010802 <_dtoa_r+0xa1a>
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	9804      	ldr	r0, [sp, #16]
 80107bc:	f7fb ff54 	bl	800c668 <_Balloc>
 80107c0:	1e04      	subs	r4, r0, #0
 80107c2:	d111      	bne.n	80107e8 <_dtoa_r+0xa00>
 80107c4:	0022      	movs	r2, r4
 80107c6:	4b05      	ldr	r3, [pc, #20]	; (80107dc <_dtoa_r+0x9f4>)
 80107c8:	4805      	ldr	r0, [pc, #20]	; (80107e0 <_dtoa_r+0x9f8>)
 80107ca:	4906      	ldr	r1, [pc, #24]	; (80107e4 <_dtoa_r+0x9fc>)
 80107cc:	e43c      	b.n	8010048 <_dtoa_r+0x260>
 80107ce:	46c0      	nop			; (mov r8, r8)
 80107d0:	40240000 	.word	0x40240000
 80107d4:	00000433 	.word	0x00000433
 80107d8:	7ff00000 	.word	0x7ff00000
 80107dc:	08014429 	.word	0x08014429
 80107e0:	080146b9 	.word	0x080146b9
 80107e4:	000002ef 	.word	0x000002ef
 80107e8:	0039      	movs	r1, r7
 80107ea:	693a      	ldr	r2, [r7, #16]
 80107ec:	310c      	adds	r1, #12
 80107ee:	3202      	adds	r2, #2
 80107f0:	0092      	lsls	r2, r2, #2
 80107f2:	300c      	adds	r0, #12
 80107f4:	f7fb fa9d 	bl	800bd32 <memcpy>
 80107f8:	2201      	movs	r2, #1
 80107fa:	0021      	movs	r1, r4
 80107fc:	9804      	ldr	r0, [sp, #16]
 80107fe:	f7fc f947 	bl	800ca90 <__lshift>
 8010802:	9b06      	ldr	r3, [sp, #24]
 8010804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010806:	9307      	str	r3, [sp, #28]
 8010808:	3b01      	subs	r3, #1
 801080a:	189b      	adds	r3, r3, r2
 801080c:	2201      	movs	r2, #1
 801080e:	003d      	movs	r5, r7
 8010810:	0007      	movs	r7, r0
 8010812:	930e      	str	r3, [sp, #56]	; 0x38
 8010814:	9b08      	ldr	r3, [sp, #32]
 8010816:	4013      	ands	r3, r2
 8010818:	930d      	str	r3, [sp, #52]	; 0x34
 801081a:	0031      	movs	r1, r6
 801081c:	9805      	ldr	r0, [sp, #20]
 801081e:	f7ff fa53 	bl	800fcc8 <quorem>
 8010822:	0029      	movs	r1, r5
 8010824:	0004      	movs	r4, r0
 8010826:	900b      	str	r0, [sp, #44]	; 0x2c
 8010828:	9805      	ldr	r0, [sp, #20]
 801082a:	f7fc f99f 	bl	800cb6c <__mcmp>
 801082e:	003a      	movs	r2, r7
 8010830:	900c      	str	r0, [sp, #48]	; 0x30
 8010832:	0031      	movs	r1, r6
 8010834:	9804      	ldr	r0, [sp, #16]
 8010836:	f7fc f9b5 	bl	800cba4 <__mdiff>
 801083a:	2201      	movs	r2, #1
 801083c:	68c3      	ldr	r3, [r0, #12]
 801083e:	3430      	adds	r4, #48	; 0x30
 8010840:	9008      	str	r0, [sp, #32]
 8010842:	920a      	str	r2, [sp, #40]	; 0x28
 8010844:	2b00      	cmp	r3, #0
 8010846:	d104      	bne.n	8010852 <_dtoa_r+0xa6a>
 8010848:	0001      	movs	r1, r0
 801084a:	9805      	ldr	r0, [sp, #20]
 801084c:	f7fc f98e 	bl	800cb6c <__mcmp>
 8010850:	900a      	str	r0, [sp, #40]	; 0x28
 8010852:	9908      	ldr	r1, [sp, #32]
 8010854:	9804      	ldr	r0, [sp, #16]
 8010856:	f7fb ff2f 	bl	800c6b8 <_Bfree>
 801085a:	9b07      	ldr	r3, [sp, #28]
 801085c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801085e:	3301      	adds	r3, #1
 8010860:	9308      	str	r3, [sp, #32]
 8010862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010864:	4313      	orrs	r3, r2
 8010866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010868:	4313      	orrs	r3, r2
 801086a:	d109      	bne.n	8010880 <_dtoa_r+0xa98>
 801086c:	2c39      	cmp	r4, #57	; 0x39
 801086e:	d022      	beq.n	80108b6 <_dtoa_r+0xace>
 8010870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010872:	2b00      	cmp	r3, #0
 8010874:	dd01      	ble.n	801087a <_dtoa_r+0xa92>
 8010876:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010878:	3431      	adds	r4, #49	; 0x31
 801087a:	9b07      	ldr	r3, [sp, #28]
 801087c:	701c      	strb	r4, [r3, #0]
 801087e:	e76e      	b.n	801075e <_dtoa_r+0x976>
 8010880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010882:	2b00      	cmp	r3, #0
 8010884:	db04      	blt.n	8010890 <_dtoa_r+0xaa8>
 8010886:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010888:	4313      	orrs	r3, r2
 801088a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801088c:	4313      	orrs	r3, r2
 801088e:	d11e      	bne.n	80108ce <_dtoa_r+0xae6>
 8010890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010892:	2b00      	cmp	r3, #0
 8010894:	ddf1      	ble.n	801087a <_dtoa_r+0xa92>
 8010896:	9905      	ldr	r1, [sp, #20]
 8010898:	2201      	movs	r2, #1
 801089a:	9804      	ldr	r0, [sp, #16]
 801089c:	f7fc f8f8 	bl	800ca90 <__lshift>
 80108a0:	0031      	movs	r1, r6
 80108a2:	9005      	str	r0, [sp, #20]
 80108a4:	f7fc f962 	bl	800cb6c <__mcmp>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	dc02      	bgt.n	80108b2 <_dtoa_r+0xaca>
 80108ac:	d1e5      	bne.n	801087a <_dtoa_r+0xa92>
 80108ae:	07e3      	lsls	r3, r4, #31
 80108b0:	d5e3      	bpl.n	801087a <_dtoa_r+0xa92>
 80108b2:	2c39      	cmp	r4, #57	; 0x39
 80108b4:	d1df      	bne.n	8010876 <_dtoa_r+0xa8e>
 80108b6:	2339      	movs	r3, #57	; 0x39
 80108b8:	9a07      	ldr	r2, [sp, #28]
 80108ba:	7013      	strb	r3, [r2, #0]
 80108bc:	9b08      	ldr	r3, [sp, #32]
 80108be:	9308      	str	r3, [sp, #32]
 80108c0:	3b01      	subs	r3, #1
 80108c2:	781a      	ldrb	r2, [r3, #0]
 80108c4:	2a39      	cmp	r2, #57	; 0x39
 80108c6:	d063      	beq.n	8010990 <_dtoa_r+0xba8>
 80108c8:	3201      	adds	r2, #1
 80108ca:	701a      	strb	r2, [r3, #0]
 80108cc:	e747      	b.n	801075e <_dtoa_r+0x976>
 80108ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dd03      	ble.n	80108dc <_dtoa_r+0xaf4>
 80108d4:	2c39      	cmp	r4, #57	; 0x39
 80108d6:	d0ee      	beq.n	80108b6 <_dtoa_r+0xace>
 80108d8:	3401      	adds	r4, #1
 80108da:	e7ce      	b.n	801087a <_dtoa_r+0xa92>
 80108dc:	9b07      	ldr	r3, [sp, #28]
 80108de:	9a07      	ldr	r2, [sp, #28]
 80108e0:	701c      	strb	r4, [r3, #0]
 80108e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d03e      	beq.n	8010966 <_dtoa_r+0xb7e>
 80108e8:	2300      	movs	r3, #0
 80108ea:	220a      	movs	r2, #10
 80108ec:	9905      	ldr	r1, [sp, #20]
 80108ee:	9804      	ldr	r0, [sp, #16]
 80108f0:	f7fb feec 	bl	800c6cc <__multadd>
 80108f4:	2300      	movs	r3, #0
 80108f6:	9005      	str	r0, [sp, #20]
 80108f8:	220a      	movs	r2, #10
 80108fa:	0029      	movs	r1, r5
 80108fc:	9804      	ldr	r0, [sp, #16]
 80108fe:	42bd      	cmp	r5, r7
 8010900:	d106      	bne.n	8010910 <_dtoa_r+0xb28>
 8010902:	f7fb fee3 	bl	800c6cc <__multadd>
 8010906:	0005      	movs	r5, r0
 8010908:	0007      	movs	r7, r0
 801090a:	9b08      	ldr	r3, [sp, #32]
 801090c:	9307      	str	r3, [sp, #28]
 801090e:	e784      	b.n	801081a <_dtoa_r+0xa32>
 8010910:	f7fb fedc 	bl	800c6cc <__multadd>
 8010914:	0039      	movs	r1, r7
 8010916:	0005      	movs	r5, r0
 8010918:	2300      	movs	r3, #0
 801091a:	220a      	movs	r2, #10
 801091c:	9804      	ldr	r0, [sp, #16]
 801091e:	f7fb fed5 	bl	800c6cc <__multadd>
 8010922:	0007      	movs	r7, r0
 8010924:	e7f1      	b.n	801090a <_dtoa_r+0xb22>
 8010926:	9b07      	ldr	r3, [sp, #28]
 8010928:	930b      	str	r3, [sp, #44]	; 0x2c
 801092a:	2500      	movs	r5, #0
 801092c:	0031      	movs	r1, r6
 801092e:	9805      	ldr	r0, [sp, #20]
 8010930:	f7ff f9ca 	bl	800fcc8 <quorem>
 8010934:	9b06      	ldr	r3, [sp, #24]
 8010936:	3030      	adds	r0, #48	; 0x30
 8010938:	5558      	strb	r0, [r3, r5]
 801093a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801093c:	3501      	adds	r5, #1
 801093e:	0004      	movs	r4, r0
 8010940:	42ab      	cmp	r3, r5
 8010942:	dd07      	ble.n	8010954 <_dtoa_r+0xb6c>
 8010944:	2300      	movs	r3, #0
 8010946:	220a      	movs	r2, #10
 8010948:	9905      	ldr	r1, [sp, #20]
 801094a:	9804      	ldr	r0, [sp, #16]
 801094c:	f7fb febe 	bl	800c6cc <__multadd>
 8010950:	9005      	str	r0, [sp, #20]
 8010952:	e7eb      	b.n	801092c <_dtoa_r+0xb44>
 8010954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010956:	2301      	movs	r3, #1
 8010958:	2a00      	cmp	r2, #0
 801095a:	dd00      	ble.n	801095e <_dtoa_r+0xb76>
 801095c:	0013      	movs	r3, r2
 801095e:	2500      	movs	r5, #0
 8010960:	9a06      	ldr	r2, [sp, #24]
 8010962:	18d3      	adds	r3, r2, r3
 8010964:	9308      	str	r3, [sp, #32]
 8010966:	9905      	ldr	r1, [sp, #20]
 8010968:	2201      	movs	r2, #1
 801096a:	9804      	ldr	r0, [sp, #16]
 801096c:	f7fc f890 	bl	800ca90 <__lshift>
 8010970:	0031      	movs	r1, r6
 8010972:	9005      	str	r0, [sp, #20]
 8010974:	f7fc f8fa 	bl	800cb6c <__mcmp>
 8010978:	2800      	cmp	r0, #0
 801097a:	dc9f      	bgt.n	80108bc <_dtoa_r+0xad4>
 801097c:	d101      	bne.n	8010982 <_dtoa_r+0xb9a>
 801097e:	07e4      	lsls	r4, r4, #31
 8010980:	d49c      	bmi.n	80108bc <_dtoa_r+0xad4>
 8010982:	9b08      	ldr	r3, [sp, #32]
 8010984:	9308      	str	r3, [sp, #32]
 8010986:	3b01      	subs	r3, #1
 8010988:	781a      	ldrb	r2, [r3, #0]
 801098a:	2a30      	cmp	r2, #48	; 0x30
 801098c:	d0fa      	beq.n	8010984 <_dtoa_r+0xb9c>
 801098e:	e6e6      	b.n	801075e <_dtoa_r+0x976>
 8010990:	9a06      	ldr	r2, [sp, #24]
 8010992:	429a      	cmp	r2, r3
 8010994:	d193      	bne.n	80108be <_dtoa_r+0xad6>
 8010996:	9b03      	ldr	r3, [sp, #12]
 8010998:	3301      	adds	r3, #1
 801099a:	9303      	str	r3, [sp, #12]
 801099c:	2331      	movs	r3, #49	; 0x31
 801099e:	7013      	strb	r3, [r2, #0]
 80109a0:	e6dd      	b.n	801075e <_dtoa_r+0x976>
 80109a2:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <_dtoa_r+0xbe0>)
 80109a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80109a6:	9306      	str	r3, [sp, #24]
 80109a8:	4b08      	ldr	r3, [pc, #32]	; (80109cc <_dtoa_r+0xbe4>)
 80109aa:	2a00      	cmp	r2, #0
 80109ac:	d001      	beq.n	80109b2 <_dtoa_r+0xbca>
 80109ae:	f7ff fa4c 	bl	800fe4a <_dtoa_r+0x62>
 80109b2:	f7ff fa4c 	bl	800fe4e <_dtoa_r+0x66>
 80109b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	dcb6      	bgt.n	801092a <_dtoa_r+0xb42>
 80109bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109be:	2b02      	cmp	r3, #2
 80109c0:	dd00      	ble.n	80109c4 <_dtoa_r+0xbdc>
 80109c2:	e6b6      	b.n	8010732 <_dtoa_r+0x94a>
 80109c4:	e7b1      	b.n	801092a <_dtoa_r+0xb42>
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	080146ac 	.word	0x080146ac
 80109cc:	080146b4 	.word	0x080146b4

080109d0 <realloc>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	4b03      	ldr	r3, [pc, #12]	; (80109e0 <realloc+0x10>)
 80109d4:	000a      	movs	r2, r1
 80109d6:	0001      	movs	r1, r0
 80109d8:	6818      	ldr	r0, [r3, #0]
 80109da:	f000 f803 	bl	80109e4 <_realloc_r>
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	200006d0 	.word	0x200006d0

080109e4 <_realloc_r>:
 80109e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109e6:	b087      	sub	sp, #28
 80109e8:	1e0c      	subs	r4, r1, #0
 80109ea:	9001      	str	r0, [sp, #4]
 80109ec:	9205      	str	r2, [sp, #20]
 80109ee:	d106      	bne.n	80109fe <_realloc_r+0x1a>
 80109f0:	0011      	movs	r1, r2
 80109f2:	f7f9 fe39 	bl	800a668 <_malloc_r>
 80109f6:	0007      	movs	r7, r0
 80109f8:	0038      	movs	r0, r7
 80109fa:	b007      	add	sp, #28
 80109fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109fe:	9801      	ldr	r0, [sp, #4]
 8010a00:	f7fa f846 	bl	800aa90 <__malloc_lock>
 8010a04:	0023      	movs	r3, r4
 8010a06:	3b08      	subs	r3, #8
 8010a08:	685f      	ldr	r7, [r3, #4]
 8010a0a:	9304      	str	r3, [sp, #16]
 8010a0c:	9b05      	ldr	r3, [sp, #20]
 8010a0e:	330b      	adds	r3, #11
 8010a10:	2b16      	cmp	r3, #22
 8010a12:	d908      	bls.n	8010a26 <_realloc_r+0x42>
 8010a14:	2207      	movs	r2, #7
 8010a16:	4393      	bics	r3, r2
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	d506      	bpl.n	8010a2a <_realloc_r+0x46>
 8010a1c:	230c      	movs	r3, #12
 8010a1e:	9a01      	ldr	r2, [sp, #4]
 8010a20:	2700      	movs	r7, #0
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	e7e8      	b.n	80109f8 <_realloc_r+0x14>
 8010a26:	2310      	movs	r3, #16
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	9b00      	ldr	r3, [sp, #0]
 8010a2c:	9a05      	ldr	r2, [sp, #20]
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d3f4      	bcc.n	8010a1c <_realloc_r+0x38>
 8010a32:	9b04      	ldr	r3, [sp, #16]
 8010a34:	003a      	movs	r2, r7
 8010a36:	9302      	str	r3, [sp, #8]
 8010a38:	2303      	movs	r3, #3
 8010a3a:	439a      	bics	r2, r3
 8010a3c:	9b00      	ldr	r3, [sp, #0]
 8010a3e:	9203      	str	r2, [sp, #12]
 8010a40:	4293      	cmp	r3, r2
 8010a42:	dc00      	bgt.n	8010a46 <_realloc_r+0x62>
 8010a44:	e169      	b.n	8010d1a <_realloc_r+0x336>
 8010a46:	9b04      	ldr	r3, [sp, #16]
 8010a48:	48b8      	ldr	r0, [pc, #736]	; (8010d2c <_realloc_r+0x348>)
 8010a4a:	189b      	adds	r3, r3, r2
 8010a4c:	6882      	ldr	r2, [r0, #8]
 8010a4e:	4694      	mov	ip, r2
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	459c      	cmp	ip, r3
 8010a54:	d006      	beq.n	8010a64 <_realloc_r+0x80>
 8010a56:	2501      	movs	r5, #1
 8010a58:	0011      	movs	r1, r2
 8010a5a:	43a9      	bics	r1, r5
 8010a5c:	1859      	adds	r1, r3, r1
 8010a5e:	6849      	ldr	r1, [r1, #4]
 8010a60:	4229      	tst	r1, r5
 8010a62:	d144      	bne.n	8010aee <_realloc_r+0x10a>
 8010a64:	2103      	movs	r1, #3
 8010a66:	438a      	bics	r2, r1
 8010a68:	9903      	ldr	r1, [sp, #12]
 8010a6a:	188e      	adds	r6, r1, r2
 8010a6c:	9900      	ldr	r1, [sp, #0]
 8010a6e:	459c      	cmp	ip, r3
 8010a70:	d117      	bne.n	8010aa2 <_realloc_r+0xbe>
 8010a72:	3110      	adds	r1, #16
 8010a74:	42b1      	cmp	r1, r6
 8010a76:	dc3c      	bgt.n	8010af2 <_realloc_r+0x10e>
 8010a78:	9a00      	ldr	r2, [sp, #0]
 8010a7a:	2101      	movs	r1, #1
 8010a7c:	4694      	mov	ip, r2
 8010a7e:	1ab6      	subs	r6, r6, r2
 8010a80:	0022      	movs	r2, r4
 8010a82:	9b04      	ldr	r3, [sp, #16]
 8010a84:	430e      	orrs	r6, r1
 8010a86:	4463      	add	r3, ip
 8010a88:	6083      	str	r3, [r0, #8]
 8010a8a:	3a08      	subs	r2, #8
 8010a8c:	605e      	str	r6, [r3, #4]
 8010a8e:	6853      	ldr	r3, [r2, #4]
 8010a90:	9801      	ldr	r0, [sp, #4]
 8010a92:	400b      	ands	r3, r1
 8010a94:	4661      	mov	r1, ip
 8010a96:	430b      	orrs	r3, r1
 8010a98:	6053      	str	r3, [r2, #4]
 8010a9a:	f7fa f801 	bl	800aaa0 <__malloc_unlock>
 8010a9e:	0027      	movs	r7, r4
 8010aa0:	e7aa      	b.n	80109f8 <_realloc_r+0x14>
 8010aa2:	42b1      	cmp	r1, r6
 8010aa4:	dc25      	bgt.n	8010af2 <_realloc_r+0x10e>
 8010aa6:	68da      	ldr	r2, [r3, #12]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	60da      	str	r2, [r3, #12]
 8010aac:	6093      	str	r3, [r2, #8]
 8010aae:	9b00      	ldr	r3, [sp, #0]
 8010ab0:	9a02      	ldr	r2, [sp, #8]
 8010ab2:	1af4      	subs	r4, r6, r3
 8010ab4:	9b02      	ldr	r3, [sp, #8]
 8010ab6:	1992      	adds	r2, r2, r6
 8010ab8:	6858      	ldr	r0, [r3, #4]
 8010aba:	2301      	movs	r3, #1
 8010abc:	4018      	ands	r0, r3
 8010abe:	2c0f      	cmp	r4, #15
 8010ac0:	d800      	bhi.n	8010ac4 <_realloc_r+0xe0>
 8010ac2:	e12c      	b.n	8010d1e <_realloc_r+0x33a>
 8010ac4:	9d00      	ldr	r5, [sp, #0]
 8010ac6:	9902      	ldr	r1, [sp, #8]
 8010ac8:	4328      	orrs	r0, r5
 8010aca:	1949      	adds	r1, r1, r5
 8010acc:	9d02      	ldr	r5, [sp, #8]
 8010ace:	431c      	orrs	r4, r3
 8010ad0:	6068      	str	r0, [r5, #4]
 8010ad2:	604c      	str	r4, [r1, #4]
 8010ad4:	6850      	ldr	r0, [r2, #4]
 8010ad6:	3108      	adds	r1, #8
 8010ad8:	4303      	orrs	r3, r0
 8010ada:	6053      	str	r3, [r2, #4]
 8010adc:	9801      	ldr	r0, [sp, #4]
 8010ade:	f7fb f9a3 	bl	800be28 <_free_r>
 8010ae2:	9801      	ldr	r0, [sp, #4]
 8010ae4:	f7f9 ffdc 	bl	800aaa0 <__malloc_unlock>
 8010ae8:	9f02      	ldr	r7, [sp, #8]
 8010aea:	3708      	adds	r7, #8
 8010aec:	e784      	b.n	80109f8 <_realloc_r+0x14>
 8010aee:	2200      	movs	r2, #0
 8010af0:	0013      	movs	r3, r2
 8010af2:	07ff      	lsls	r7, r7, #31
 8010af4:	d500      	bpl.n	8010af8 <_realloc_r+0x114>
 8010af6:	e0c6      	b.n	8010c86 <_realloc_r+0x2a2>
 8010af8:	0021      	movs	r1, r4
 8010afa:	2003      	movs	r0, #3
 8010afc:	3908      	subs	r1, #8
 8010afe:	680d      	ldr	r5, [r1, #0]
 8010b00:	9904      	ldr	r1, [sp, #16]
 8010b02:	1b4d      	subs	r5, r1, r5
 8010b04:	6869      	ldr	r1, [r5, #4]
 8010b06:	4381      	bics	r1, r0
 8010b08:	9803      	ldr	r0, [sp, #12]
 8010b0a:	180f      	adds	r7, r1, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d100      	bne.n	8010b12 <_realloc_r+0x12e>
 8010b10:	e084      	b.n	8010c1c <_realloc_r+0x238>
 8010b12:	19d6      	adds	r6, r2, r7
 8010b14:	459c      	cmp	ip, r3
 8010b16:	d148      	bne.n	8010baa <_realloc_r+0x1c6>
 8010b18:	9b00      	ldr	r3, [sp, #0]
 8010b1a:	3310      	adds	r3, #16
 8010b1c:	42b3      	cmp	r3, r6
 8010b1e:	dc7d      	bgt.n	8010c1c <_realloc_r+0x238>
 8010b20:	68aa      	ldr	r2, [r5, #8]
 8010b22:	68eb      	ldr	r3, [r5, #12]
 8010b24:	002f      	movs	r7, r5
 8010b26:	60d3      	str	r3, [r2, #12]
 8010b28:	609a      	str	r2, [r3, #8]
 8010b2a:	0002      	movs	r2, r0
 8010b2c:	3a04      	subs	r2, #4
 8010b2e:	3708      	adds	r7, #8
 8010b30:	2a24      	cmp	r2, #36	; 0x24
 8010b32:	d835      	bhi.n	8010ba0 <_realloc_r+0x1bc>
 8010b34:	003b      	movs	r3, r7
 8010b36:	2a13      	cmp	r2, #19
 8010b38:	d908      	bls.n	8010b4c <_realloc_r+0x168>
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	60ab      	str	r3, [r5, #8]
 8010b3e:	6863      	ldr	r3, [r4, #4]
 8010b40:	60eb      	str	r3, [r5, #12]
 8010b42:	2a1b      	cmp	r2, #27
 8010b44:	d81a      	bhi.n	8010b7c <_realloc_r+0x198>
 8010b46:	002b      	movs	r3, r5
 8010b48:	3408      	adds	r4, #8
 8010b4a:	3310      	adds	r3, #16
 8010b4c:	6822      	ldr	r2, [r4, #0]
 8010b4e:	601a      	str	r2, [r3, #0]
 8010b50:	6862      	ldr	r2, [r4, #4]
 8010b52:	605a      	str	r2, [r3, #4]
 8010b54:	68a2      	ldr	r2, [r4, #8]
 8010b56:	609a      	str	r2, [r3, #8]
 8010b58:	9b00      	ldr	r3, [sp, #0]
 8010b5a:	4a74      	ldr	r2, [pc, #464]	; (8010d2c <_realloc_r+0x348>)
 8010b5c:	18eb      	adds	r3, r5, r3
 8010b5e:	6093      	str	r3, [r2, #8]
 8010b60:	9a00      	ldr	r2, [sp, #0]
 8010b62:	1ab6      	subs	r6, r6, r2
 8010b64:	2201      	movs	r2, #1
 8010b66:	4316      	orrs	r6, r2
 8010b68:	605e      	str	r6, [r3, #4]
 8010b6a:	686b      	ldr	r3, [r5, #4]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	9a00      	ldr	r2, [sp, #0]
 8010b70:	4313      	orrs	r3, r2
 8010b72:	606b      	str	r3, [r5, #4]
 8010b74:	9801      	ldr	r0, [sp, #4]
 8010b76:	f7f9 ff93 	bl	800aaa0 <__malloc_unlock>
 8010b7a:	e73d      	b.n	80109f8 <_realloc_r+0x14>
 8010b7c:	68a3      	ldr	r3, [r4, #8]
 8010b7e:	612b      	str	r3, [r5, #16]
 8010b80:	68e3      	ldr	r3, [r4, #12]
 8010b82:	616b      	str	r3, [r5, #20]
 8010b84:	2a24      	cmp	r2, #36	; 0x24
 8010b86:	d003      	beq.n	8010b90 <_realloc_r+0x1ac>
 8010b88:	002b      	movs	r3, r5
 8010b8a:	3410      	adds	r4, #16
 8010b8c:	3318      	adds	r3, #24
 8010b8e:	e7dd      	b.n	8010b4c <_realloc_r+0x168>
 8010b90:	6923      	ldr	r3, [r4, #16]
 8010b92:	61ab      	str	r3, [r5, #24]
 8010b94:	002b      	movs	r3, r5
 8010b96:	6962      	ldr	r2, [r4, #20]
 8010b98:	3320      	adds	r3, #32
 8010b9a:	61ea      	str	r2, [r5, #28]
 8010b9c:	3418      	adds	r4, #24
 8010b9e:	e7d5      	b.n	8010b4c <_realloc_r+0x168>
 8010ba0:	0021      	movs	r1, r4
 8010ba2:	0038      	movs	r0, r7
 8010ba4:	f001 fbb5 	bl	8012312 <memmove>
 8010ba8:	e7d6      	b.n	8010b58 <_realloc_r+0x174>
 8010baa:	9a00      	ldr	r2, [sp, #0]
 8010bac:	42b2      	cmp	r2, r6
 8010bae:	dc35      	bgt.n	8010c1c <_realloc_r+0x238>
 8010bb0:	0028      	movs	r0, r5
 8010bb2:	68da      	ldr	r2, [r3, #12]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	3008      	adds	r0, #8
 8010bb8:	60da      	str	r2, [r3, #12]
 8010bba:	6093      	str	r3, [r2, #8]
 8010bbc:	68aa      	ldr	r2, [r5, #8]
 8010bbe:	68eb      	ldr	r3, [r5, #12]
 8010bc0:	60d3      	str	r3, [r2, #12]
 8010bc2:	609a      	str	r2, [r3, #8]
 8010bc4:	9a03      	ldr	r2, [sp, #12]
 8010bc6:	3a04      	subs	r2, #4
 8010bc8:	2a24      	cmp	r2, #36	; 0x24
 8010bca:	d823      	bhi.n	8010c14 <_realloc_r+0x230>
 8010bcc:	2a13      	cmp	r2, #19
 8010bce:	d907      	bls.n	8010be0 <_realloc_r+0x1fc>
 8010bd0:	6823      	ldr	r3, [r4, #0]
 8010bd2:	60ab      	str	r3, [r5, #8]
 8010bd4:	6863      	ldr	r3, [r4, #4]
 8010bd6:	60eb      	str	r3, [r5, #12]
 8010bd8:	2a1b      	cmp	r2, #27
 8010bda:	d809      	bhi.n	8010bf0 <_realloc_r+0x20c>
 8010bdc:	3408      	adds	r4, #8
 8010bde:	3008      	adds	r0, #8
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	6003      	str	r3, [r0, #0]
 8010be4:	6863      	ldr	r3, [r4, #4]
 8010be6:	6043      	str	r3, [r0, #4]
 8010be8:	68a3      	ldr	r3, [r4, #8]
 8010bea:	6083      	str	r3, [r0, #8]
 8010bec:	9502      	str	r5, [sp, #8]
 8010bee:	e75e      	b.n	8010aae <_realloc_r+0xca>
 8010bf0:	68a3      	ldr	r3, [r4, #8]
 8010bf2:	612b      	str	r3, [r5, #16]
 8010bf4:	68e3      	ldr	r3, [r4, #12]
 8010bf6:	616b      	str	r3, [r5, #20]
 8010bf8:	2a24      	cmp	r2, #36	; 0x24
 8010bfa:	d003      	beq.n	8010c04 <_realloc_r+0x220>
 8010bfc:	0028      	movs	r0, r5
 8010bfe:	3410      	adds	r4, #16
 8010c00:	3018      	adds	r0, #24
 8010c02:	e7ed      	b.n	8010be0 <_realloc_r+0x1fc>
 8010c04:	0028      	movs	r0, r5
 8010c06:	6923      	ldr	r3, [r4, #16]
 8010c08:	3020      	adds	r0, #32
 8010c0a:	61ab      	str	r3, [r5, #24]
 8010c0c:	6963      	ldr	r3, [r4, #20]
 8010c0e:	3418      	adds	r4, #24
 8010c10:	61eb      	str	r3, [r5, #28]
 8010c12:	e7e5      	b.n	8010be0 <_realloc_r+0x1fc>
 8010c14:	0021      	movs	r1, r4
 8010c16:	f001 fb7c 	bl	8012312 <memmove>
 8010c1a:	e7e7      	b.n	8010bec <_realloc_r+0x208>
 8010c1c:	9b00      	ldr	r3, [sp, #0]
 8010c1e:	42bb      	cmp	r3, r7
 8010c20:	dc31      	bgt.n	8010c86 <_realloc_r+0x2a2>
 8010c22:	0028      	movs	r0, r5
 8010c24:	68aa      	ldr	r2, [r5, #8]
 8010c26:	68eb      	ldr	r3, [r5, #12]
 8010c28:	3008      	adds	r0, #8
 8010c2a:	60d3      	str	r3, [r2, #12]
 8010c2c:	609a      	str	r2, [r3, #8]
 8010c2e:	9a03      	ldr	r2, [sp, #12]
 8010c30:	3a04      	subs	r2, #4
 8010c32:	2a24      	cmp	r2, #36	; 0x24
 8010c34:	d823      	bhi.n	8010c7e <_realloc_r+0x29a>
 8010c36:	2a13      	cmp	r2, #19
 8010c38:	d907      	bls.n	8010c4a <_realloc_r+0x266>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	60ab      	str	r3, [r5, #8]
 8010c3e:	6863      	ldr	r3, [r4, #4]
 8010c40:	60eb      	str	r3, [r5, #12]
 8010c42:	2a1b      	cmp	r2, #27
 8010c44:	d809      	bhi.n	8010c5a <_realloc_r+0x276>
 8010c46:	3408      	adds	r4, #8
 8010c48:	3008      	adds	r0, #8
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	6003      	str	r3, [r0, #0]
 8010c4e:	6863      	ldr	r3, [r4, #4]
 8010c50:	6043      	str	r3, [r0, #4]
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	6083      	str	r3, [r0, #8]
 8010c56:	003e      	movs	r6, r7
 8010c58:	e7c8      	b.n	8010bec <_realloc_r+0x208>
 8010c5a:	68a3      	ldr	r3, [r4, #8]
 8010c5c:	612b      	str	r3, [r5, #16]
 8010c5e:	68e3      	ldr	r3, [r4, #12]
 8010c60:	616b      	str	r3, [r5, #20]
 8010c62:	2a24      	cmp	r2, #36	; 0x24
 8010c64:	d003      	beq.n	8010c6e <_realloc_r+0x28a>
 8010c66:	0028      	movs	r0, r5
 8010c68:	3410      	adds	r4, #16
 8010c6a:	3018      	adds	r0, #24
 8010c6c:	e7ed      	b.n	8010c4a <_realloc_r+0x266>
 8010c6e:	0028      	movs	r0, r5
 8010c70:	6923      	ldr	r3, [r4, #16]
 8010c72:	3020      	adds	r0, #32
 8010c74:	61ab      	str	r3, [r5, #24]
 8010c76:	6963      	ldr	r3, [r4, #20]
 8010c78:	3418      	adds	r4, #24
 8010c7a:	61eb      	str	r3, [r5, #28]
 8010c7c:	e7e5      	b.n	8010c4a <_realloc_r+0x266>
 8010c7e:	0021      	movs	r1, r4
 8010c80:	f001 fb47 	bl	8012312 <memmove>
 8010c84:	e7e7      	b.n	8010c56 <_realloc_r+0x272>
 8010c86:	9905      	ldr	r1, [sp, #20]
 8010c88:	9801      	ldr	r0, [sp, #4]
 8010c8a:	f7f9 fced 	bl	800a668 <_malloc_r>
 8010c8e:	1e07      	subs	r7, r0, #0
 8010c90:	d100      	bne.n	8010c94 <_realloc_r+0x2b0>
 8010c92:	e76f      	b.n	8010b74 <_realloc_r+0x190>
 8010c94:	0023      	movs	r3, r4
 8010c96:	2201      	movs	r2, #1
 8010c98:	3b08      	subs	r3, #8
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	4393      	bics	r3, r2
 8010c9e:	9a04      	ldr	r2, [sp, #16]
 8010ca0:	18d3      	adds	r3, r2, r3
 8010ca2:	0002      	movs	r2, r0
 8010ca4:	3a08      	subs	r2, #8
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d105      	bne.n	8010cb6 <_realloc_r+0x2d2>
 8010caa:	685e      	ldr	r6, [r3, #4]
 8010cac:	2303      	movs	r3, #3
 8010cae:	439e      	bics	r6, r3
 8010cb0:	9b03      	ldr	r3, [sp, #12]
 8010cb2:	18f6      	adds	r6, r6, r3
 8010cb4:	e6fb      	b.n	8010aae <_realloc_r+0xca>
 8010cb6:	9a03      	ldr	r2, [sp, #12]
 8010cb8:	3a04      	subs	r2, #4
 8010cba:	2a24      	cmp	r2, #36	; 0x24
 8010cbc:	d829      	bhi.n	8010d12 <_realloc_r+0x32e>
 8010cbe:	0003      	movs	r3, r0
 8010cc0:	0021      	movs	r1, r4
 8010cc2:	2a13      	cmp	r2, #19
 8010cc4:	d908      	bls.n	8010cd8 <_realloc_r+0x2f4>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	6003      	str	r3, [r0, #0]
 8010cca:	6863      	ldr	r3, [r4, #4]
 8010ccc:	6043      	str	r3, [r0, #4]
 8010cce:	2a1b      	cmp	r2, #27
 8010cd0:	d80d      	bhi.n	8010cee <_realloc_r+0x30a>
 8010cd2:	0003      	movs	r3, r0
 8010cd4:	3108      	adds	r1, #8
 8010cd6:	3308      	adds	r3, #8
 8010cd8:	680a      	ldr	r2, [r1, #0]
 8010cda:	601a      	str	r2, [r3, #0]
 8010cdc:	684a      	ldr	r2, [r1, #4]
 8010cde:	605a      	str	r2, [r3, #4]
 8010ce0:	688a      	ldr	r2, [r1, #8]
 8010ce2:	609a      	str	r2, [r3, #8]
 8010ce4:	0021      	movs	r1, r4
 8010ce6:	9801      	ldr	r0, [sp, #4]
 8010ce8:	f7fb f89e 	bl	800be28 <_free_r>
 8010cec:	e742      	b.n	8010b74 <_realloc_r+0x190>
 8010cee:	68a3      	ldr	r3, [r4, #8]
 8010cf0:	6083      	str	r3, [r0, #8]
 8010cf2:	68e3      	ldr	r3, [r4, #12]
 8010cf4:	60c3      	str	r3, [r0, #12]
 8010cf6:	2a24      	cmp	r2, #36	; 0x24
 8010cf8:	d003      	beq.n	8010d02 <_realloc_r+0x31e>
 8010cfa:	0003      	movs	r3, r0
 8010cfc:	3110      	adds	r1, #16
 8010cfe:	3310      	adds	r3, #16
 8010d00:	e7ea      	b.n	8010cd8 <_realloc_r+0x2f4>
 8010d02:	6923      	ldr	r3, [r4, #16]
 8010d04:	3118      	adds	r1, #24
 8010d06:	6103      	str	r3, [r0, #16]
 8010d08:	0003      	movs	r3, r0
 8010d0a:	6962      	ldr	r2, [r4, #20]
 8010d0c:	3318      	adds	r3, #24
 8010d0e:	6142      	str	r2, [r0, #20]
 8010d10:	e7e2      	b.n	8010cd8 <_realloc_r+0x2f4>
 8010d12:	0021      	movs	r1, r4
 8010d14:	f001 fafd 	bl	8012312 <memmove>
 8010d18:	e7e4      	b.n	8010ce4 <_realloc_r+0x300>
 8010d1a:	9e03      	ldr	r6, [sp, #12]
 8010d1c:	e6c7      	b.n	8010aae <_realloc_r+0xca>
 8010d1e:	9902      	ldr	r1, [sp, #8]
 8010d20:	4306      	orrs	r6, r0
 8010d22:	604e      	str	r6, [r1, #4]
 8010d24:	6851      	ldr	r1, [r2, #4]
 8010d26:	430b      	orrs	r3, r1
 8010d28:	6053      	str	r3, [r2, #4]
 8010d2a:	e6da      	b.n	8010ae2 <_realloc_r+0xfe>
 8010d2c:	20000028 	.word	0x20000028

08010d30 <_strtoul_l.constprop.0>:
 8010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d32:	b087      	sub	sp, #28
 8010d34:	9202      	str	r2, [sp, #8]
 8010d36:	4a3e      	ldr	r2, [pc, #248]	; (8010e30 <_strtoul_l.constprop.0+0x100>)
 8010d38:	001e      	movs	r6, r3
 8010d3a:	9101      	str	r1, [sp, #4]
 8010d3c:	000b      	movs	r3, r1
 8010d3e:	4694      	mov	ip, r2
 8010d40:	2108      	movs	r1, #8
 8010d42:	9005      	str	r0, [sp, #20]
 8010d44:	001a      	movs	r2, r3
 8010d46:	4660      	mov	r0, ip
 8010d48:	7814      	ldrb	r4, [r2, #0]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	5d00      	ldrb	r0, [r0, r4]
 8010d4e:	001d      	movs	r5, r3
 8010d50:	0007      	movs	r7, r0
 8010d52:	400f      	ands	r7, r1
 8010d54:	4208      	tst	r0, r1
 8010d56:	d1f5      	bne.n	8010d44 <_strtoul_l.constprop.0+0x14>
 8010d58:	2c2d      	cmp	r4, #45	; 0x2d
 8010d5a:	d13d      	bne.n	8010dd8 <_strtoul_l.constprop.0+0xa8>
 8010d5c:	2701      	movs	r7, #1
 8010d5e:	781c      	ldrb	r4, [r3, #0]
 8010d60:	1c95      	adds	r5, r2, #2
 8010d62:	2e00      	cmp	r6, #0
 8010d64:	d05f      	beq.n	8010e26 <_strtoul_l.constprop.0+0xf6>
 8010d66:	2e10      	cmp	r6, #16
 8010d68:	d109      	bne.n	8010d7e <_strtoul_l.constprop.0+0x4e>
 8010d6a:	2c30      	cmp	r4, #48	; 0x30
 8010d6c:	d107      	bne.n	8010d7e <_strtoul_l.constprop.0+0x4e>
 8010d6e:	2220      	movs	r2, #32
 8010d70:	782b      	ldrb	r3, [r5, #0]
 8010d72:	4393      	bics	r3, r2
 8010d74:	2b58      	cmp	r3, #88	; 0x58
 8010d76:	d151      	bne.n	8010e1c <_strtoul_l.constprop.0+0xec>
 8010d78:	2610      	movs	r6, #16
 8010d7a:	786c      	ldrb	r4, [r5, #1]
 8010d7c:	3502      	adds	r5, #2
 8010d7e:	2001      	movs	r0, #1
 8010d80:	0031      	movs	r1, r6
 8010d82:	4240      	negs	r0, r0
 8010d84:	f7ef f9da 	bl	800013c <__udivsi3>
 8010d88:	9003      	str	r0, [sp, #12]
 8010d8a:	2001      	movs	r0, #1
 8010d8c:	0031      	movs	r1, r6
 8010d8e:	4240      	negs	r0, r0
 8010d90:	f7ef fa5a 	bl	8000248 <__aeabi_uidivmod>
 8010d94:	2300      	movs	r3, #0
 8010d96:	2201      	movs	r2, #1
 8010d98:	9104      	str	r1, [sp, #16]
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	0018      	movs	r0, r3
 8010d9e:	4694      	mov	ip, r2
 8010da0:	4249      	negs	r1, r1
 8010da2:	0022      	movs	r2, r4
 8010da4:	3a30      	subs	r2, #48	; 0x30
 8010da6:	2a09      	cmp	r2, #9
 8010da8:	d903      	bls.n	8010db2 <_strtoul_l.constprop.0+0x82>
 8010daa:	3a11      	subs	r2, #17
 8010dac:	2a19      	cmp	r2, #25
 8010dae:	d818      	bhi.n	8010de2 <_strtoul_l.constprop.0+0xb2>
 8010db0:	320a      	adds	r2, #10
 8010db2:	4296      	cmp	r6, r2
 8010db4:	dd19      	ble.n	8010dea <_strtoul_l.constprop.0+0xba>
 8010db6:	1c5c      	adds	r4, r3, #1
 8010db8:	d00b      	beq.n	8010dd2 <_strtoul_l.constprop.0+0xa2>
 8010dba:	9c03      	ldr	r4, [sp, #12]
 8010dbc:	000b      	movs	r3, r1
 8010dbe:	4284      	cmp	r4, r0
 8010dc0:	d307      	bcc.n	8010dd2 <_strtoul_l.constprop.0+0xa2>
 8010dc2:	d103      	bne.n	8010dcc <_strtoul_l.constprop.0+0x9c>
 8010dc4:	9c04      	ldr	r4, [sp, #16]
 8010dc6:	000b      	movs	r3, r1
 8010dc8:	4294      	cmp	r4, r2
 8010dca:	db02      	blt.n	8010dd2 <_strtoul_l.constprop.0+0xa2>
 8010dcc:	4663      	mov	r3, ip
 8010dce:	4370      	muls	r0, r6
 8010dd0:	1810      	adds	r0, r2, r0
 8010dd2:	782c      	ldrb	r4, [r5, #0]
 8010dd4:	3501      	adds	r5, #1
 8010dd6:	e7e4      	b.n	8010da2 <_strtoul_l.constprop.0+0x72>
 8010dd8:	2c2b      	cmp	r4, #43	; 0x2b
 8010dda:	d1c2      	bne.n	8010d62 <_strtoul_l.constprop.0+0x32>
 8010ddc:	781c      	ldrb	r4, [r3, #0]
 8010dde:	1c95      	adds	r5, r2, #2
 8010de0:	e7bf      	b.n	8010d62 <_strtoul_l.constprop.0+0x32>
 8010de2:	0022      	movs	r2, r4
 8010de4:	3a61      	subs	r2, #97	; 0x61
 8010de6:	2a19      	cmp	r2, #25
 8010de8:	d9e2      	bls.n	8010db0 <_strtoul_l.constprop.0+0x80>
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	d108      	bne.n	8010e00 <_strtoul_l.constprop.0+0xd0>
 8010dee:	2222      	movs	r2, #34	; 0x22
 8010df0:	9905      	ldr	r1, [sp, #20]
 8010df2:	0018      	movs	r0, r3
 8010df4:	600a      	str	r2, [r1, #0]
 8010df6:	9a02      	ldr	r2, [sp, #8]
 8010df8:	2a00      	cmp	r2, #0
 8010dfa:	d109      	bne.n	8010e10 <_strtoul_l.constprop.0+0xe0>
 8010dfc:	b007      	add	sp, #28
 8010dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e00:	2f00      	cmp	r7, #0
 8010e02:	d000      	beq.n	8010e06 <_strtoul_l.constprop.0+0xd6>
 8010e04:	4240      	negs	r0, r0
 8010e06:	9a02      	ldr	r2, [sp, #8]
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	d0f7      	beq.n	8010dfc <_strtoul_l.constprop.0+0xcc>
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <_strtoul_l.constprop.0+0xe4>
 8010e10:	1e6b      	subs	r3, r5, #1
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	9b02      	ldr	r3, [sp, #8]
 8010e16:	9a01      	ldr	r2, [sp, #4]
 8010e18:	601a      	str	r2, [r3, #0]
 8010e1a:	e7ef      	b.n	8010dfc <_strtoul_l.constprop.0+0xcc>
 8010e1c:	2430      	movs	r4, #48	; 0x30
 8010e1e:	2e00      	cmp	r6, #0
 8010e20:	d1ad      	bne.n	8010d7e <_strtoul_l.constprop.0+0x4e>
 8010e22:	3608      	adds	r6, #8
 8010e24:	e7ab      	b.n	8010d7e <_strtoul_l.constprop.0+0x4e>
 8010e26:	2c30      	cmp	r4, #48	; 0x30
 8010e28:	d0a1      	beq.n	8010d6e <_strtoul_l.constprop.0+0x3e>
 8010e2a:	260a      	movs	r6, #10
 8010e2c:	e7a7      	b.n	8010d7e <_strtoul_l.constprop.0+0x4e>
 8010e2e:	46c0      	nop			; (mov r8, r8)
 8010e30:	08014321 	.word	0x08014321

08010e34 <_strtoul_r>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	f7ff ff7b 	bl	8010d30 <_strtoul_l.constprop.0>
 8010e3a:	bd10      	pop	{r4, pc}

08010e3c <_strtoll_l.constprop.0>:
 8010e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e3e:	b08d      	sub	sp, #52	; 0x34
 8010e40:	9203      	str	r2, [sp, #12]
 8010e42:	4a53      	ldr	r2, [pc, #332]	; (8010f90 <_strtoll_l.constprop.0+0x154>)
 8010e44:	001e      	movs	r6, r3
 8010e46:	9102      	str	r1, [sp, #8]
 8010e48:	000b      	movs	r3, r1
 8010e4a:	4694      	mov	ip, r2
 8010e4c:	2108      	movs	r1, #8
 8010e4e:	900a      	str	r0, [sp, #40]	; 0x28
 8010e50:	001a      	movs	r2, r3
 8010e52:	4660      	mov	r0, ip
 8010e54:	7814      	ldrb	r4, [r2, #0]
 8010e56:	3301      	adds	r3, #1
 8010e58:	5d00      	ldrb	r0, [r0, r4]
 8010e5a:	001d      	movs	r5, r3
 8010e5c:	0007      	movs	r7, r0
 8010e5e:	400f      	ands	r7, r1
 8010e60:	4208      	tst	r0, r1
 8010e62:	d1f5      	bne.n	8010e50 <_strtoll_l.constprop.0+0x14>
 8010e64:	2c2d      	cmp	r4, #45	; 0x2d
 8010e66:	d153      	bne.n	8010f10 <_strtoll_l.constprop.0+0xd4>
 8010e68:	781c      	ldrb	r4, [r3, #0]
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	1c95      	adds	r5, r2, #2
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	2e00      	cmp	r6, #0
 8010e72:	d100      	bne.n	8010e76 <_strtoll_l.constprop.0+0x3a>
 8010e74:	e086      	b.n	8010f84 <_strtoll_l.constprop.0+0x148>
 8010e76:	2e10      	cmp	r6, #16
 8010e78:	d10a      	bne.n	8010e90 <_strtoll_l.constprop.0+0x54>
 8010e7a:	2c30      	cmp	r4, #48	; 0x30
 8010e7c:	d108      	bne.n	8010e90 <_strtoll_l.constprop.0+0x54>
 8010e7e:	2220      	movs	r2, #32
 8010e80:	782b      	ldrb	r3, [r5, #0]
 8010e82:	4393      	bics	r3, r2
 8010e84:	2b58      	cmp	r3, #88	; 0x58
 8010e86:	d000      	beq.n	8010e8a <_strtoll_l.constprop.0+0x4e>
 8010e88:	e076      	b.n	8010f78 <_strtoll_l.constprop.0+0x13c>
 8010e8a:	2610      	movs	r6, #16
 8010e8c:	786c      	ldrb	r4, [r5, #1]
 8010e8e:	3502      	adds	r5, #2
 8010e90:	2001      	movs	r0, #1
 8010e92:	2300      	movs	r3, #0
 8010e94:	493f      	ldr	r1, [pc, #252]	; (8010f94 <_strtoll_l.constprop.0+0x158>)
 8010e96:	9a01      	ldr	r2, [sp, #4]
 8010e98:	4240      	negs	r0, r0
 8010e9a:	1812      	adds	r2, r2, r0
 8010e9c:	414b      	adcs	r3, r1
 8010e9e:	9204      	str	r2, [sp, #16]
 8010ea0:	9305      	str	r3, [sp, #20]
 8010ea2:	9804      	ldr	r0, [sp, #16]
 8010ea4:	9905      	ldr	r1, [sp, #20]
 8010ea6:	17f3      	asrs	r3, r6, #31
 8010ea8:	0032      	movs	r2, r6
 8010eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eac:	f7ef fafa 	bl	80004a4 <__aeabi_uldivmod>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	000f      	movs	r7, r1
 8010eb4:	9008      	str	r0, [sp, #32]
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	2000      	movs	r0, #0
 8010eba:	9209      	str	r2, [sp, #36]	; 0x24
 8010ebc:	0022      	movs	r2, r4
 8010ebe:	3a30      	subs	r2, #48	; 0x30
 8010ec0:	2a09      	cmp	r2, #9
 8010ec2:	d82b      	bhi.n	8010f1c <_strtoll_l.constprop.0+0xe0>
 8010ec4:	0014      	movs	r4, r2
 8010ec6:	42a6      	cmp	r6, r4
 8010ec8:	dd37      	ble.n	8010f3a <_strtoll_l.constprop.0+0xfe>
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	d01d      	beq.n	8010f0a <_strtoll_l.constprop.0+0xce>
 8010ece:	42b9      	cmp	r1, r7
 8010ed0:	d830      	bhi.n	8010f34 <_strtoll_l.constprop.0+0xf8>
 8010ed2:	d102      	bne.n	8010eda <_strtoll_l.constprop.0+0x9e>
 8010ed4:	9b08      	ldr	r3, [sp, #32]
 8010ed6:	4298      	cmp	r0, r3
 8010ed8:	d82c      	bhi.n	8010f34 <_strtoll_l.constprop.0+0xf8>
 8010eda:	9b08      	ldr	r3, [sp, #32]
 8010edc:	4283      	cmp	r3, r0
 8010ede:	d106      	bne.n	8010eee <_strtoll_l.constprop.0+0xb2>
 8010ee0:	428f      	cmp	r7, r1
 8010ee2:	d104      	bne.n	8010eee <_strtoll_l.constprop.0+0xb2>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ee8:	425b      	negs	r3, r3
 8010eea:	42a2      	cmp	r2, r4
 8010eec:	db0d      	blt.n	8010f0a <_strtoll_l.constprop.0+0xce>
 8010eee:	000b      	movs	r3, r1
 8010ef0:	0002      	movs	r2, r0
 8010ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ef4:	0030      	movs	r0, r6
 8010ef6:	f7ef faf5 	bl	80004e4 <__aeabi_lmul>
 8010efa:	17e3      	asrs	r3, r4, #31
 8010efc:	9406      	str	r4, [sp, #24]
 8010efe:	9307      	str	r3, [sp, #28]
 8010f00:	9b06      	ldr	r3, [sp, #24]
 8010f02:	9c07      	ldr	r4, [sp, #28]
 8010f04:	18c0      	adds	r0, r0, r3
 8010f06:	4161      	adcs	r1, r4
 8010f08:	2301      	movs	r3, #1
 8010f0a:	782c      	ldrb	r4, [r5, #0]
 8010f0c:	3501      	adds	r5, #1
 8010f0e:	e7d5      	b.n	8010ebc <_strtoll_l.constprop.0+0x80>
 8010f10:	9701      	str	r7, [sp, #4]
 8010f12:	2c2b      	cmp	r4, #43	; 0x2b
 8010f14:	d1ac      	bne.n	8010e70 <_strtoll_l.constprop.0+0x34>
 8010f16:	781c      	ldrb	r4, [r3, #0]
 8010f18:	1c95      	adds	r5, r2, #2
 8010f1a:	e7a9      	b.n	8010e70 <_strtoll_l.constprop.0+0x34>
 8010f1c:	0022      	movs	r2, r4
 8010f1e:	3a41      	subs	r2, #65	; 0x41
 8010f20:	2a19      	cmp	r2, #25
 8010f22:	d801      	bhi.n	8010f28 <_strtoll_l.constprop.0+0xec>
 8010f24:	3c37      	subs	r4, #55	; 0x37
 8010f26:	e7ce      	b.n	8010ec6 <_strtoll_l.constprop.0+0x8a>
 8010f28:	0022      	movs	r2, r4
 8010f2a:	3a61      	subs	r2, #97	; 0x61
 8010f2c:	2a19      	cmp	r2, #25
 8010f2e:	d804      	bhi.n	8010f3a <_strtoll_l.constprop.0+0xfe>
 8010f30:	3c57      	subs	r4, #87	; 0x57
 8010f32:	e7c8      	b.n	8010ec6 <_strtoll_l.constprop.0+0x8a>
 8010f34:	2301      	movs	r3, #1
 8010f36:	425b      	negs	r3, r3
 8010f38:	e7e7      	b.n	8010f0a <_strtoll_l.constprop.0+0xce>
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	d109      	bne.n	8010f52 <_strtoll_l.constprop.0+0x116>
 8010f3e:	9804      	ldr	r0, [sp, #16]
 8010f40:	9905      	ldr	r1, [sp, #20]
 8010f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f44:	3323      	adds	r3, #35	; 0x23
 8010f46:	6013      	str	r3, [r2, #0]
 8010f48:	9b03      	ldr	r3, [sp, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10e      	bne.n	8010f6c <_strtoll_l.constprop.0+0x130>
 8010f4e:	b00d      	add	sp, #52	; 0x34
 8010f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f52:	9a01      	ldr	r2, [sp, #4]
 8010f54:	2a00      	cmp	r2, #0
 8010f56:	d004      	beq.n	8010f62 <_strtoll_l.constprop.0+0x126>
 8010f58:	0006      	movs	r6, r0
 8010f5a:	000f      	movs	r7, r1
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	4270      	negs	r0, r6
 8010f60:	41b9      	sbcs	r1, r7
 8010f62:	9a03      	ldr	r2, [sp, #12]
 8010f64:	2a00      	cmp	r2, #0
 8010f66:	d0f2      	beq.n	8010f4e <_strtoll_l.constprop.0+0x112>
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d001      	beq.n	8010f70 <_strtoll_l.constprop.0+0x134>
 8010f6c:	1e6b      	subs	r3, r5, #1
 8010f6e:	9302      	str	r3, [sp, #8]
 8010f70:	9b03      	ldr	r3, [sp, #12]
 8010f72:	9a02      	ldr	r2, [sp, #8]
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	e7ea      	b.n	8010f4e <_strtoll_l.constprop.0+0x112>
 8010f78:	2430      	movs	r4, #48	; 0x30
 8010f7a:	2e00      	cmp	r6, #0
 8010f7c:	d000      	beq.n	8010f80 <_strtoll_l.constprop.0+0x144>
 8010f7e:	e787      	b.n	8010e90 <_strtoll_l.constprop.0+0x54>
 8010f80:	3608      	adds	r6, #8
 8010f82:	e785      	b.n	8010e90 <_strtoll_l.constprop.0+0x54>
 8010f84:	2c30      	cmp	r4, #48	; 0x30
 8010f86:	d100      	bne.n	8010f8a <_strtoll_l.constprop.0+0x14e>
 8010f88:	e779      	b.n	8010e7e <_strtoll_l.constprop.0+0x42>
 8010f8a:	260a      	movs	r6, #10
 8010f8c:	e780      	b.n	8010e90 <_strtoll_l.constprop.0+0x54>
 8010f8e:	46c0      	nop			; (mov r8, r8)
 8010f90:	08014321 	.word	0x08014321
 8010f94:	7fffffff 	.word	0x7fffffff

08010f98 <_strtoll_r>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	f7ff ff4f 	bl	8010e3c <_strtoll_l.constprop.0>
 8010f9e:	bd10      	pop	{r4, pc}

08010fa0 <_strtoull_l.constprop.0>:
 8010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa2:	b08b      	sub	sp, #44	; 0x2c
 8010fa4:	9202      	str	r2, [sp, #8]
 8010fa6:	4a54      	ldr	r2, [pc, #336]	; (80110f8 <_strtoull_l.constprop.0+0x158>)
 8010fa8:	001e      	movs	r6, r3
 8010faa:	9101      	str	r1, [sp, #4]
 8010fac:	000b      	movs	r3, r1
 8010fae:	4694      	mov	ip, r2
 8010fb0:	2108      	movs	r1, #8
 8010fb2:	9009      	str	r0, [sp, #36]	; 0x24
 8010fb4:	001a      	movs	r2, r3
 8010fb6:	4660      	mov	r0, ip
 8010fb8:	7814      	ldrb	r4, [r2, #0]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	5d00      	ldrb	r0, [r0, r4]
 8010fbe:	001d      	movs	r5, r3
 8010fc0:	0007      	movs	r7, r0
 8010fc2:	400f      	ands	r7, r1
 8010fc4:	4208      	tst	r0, r1
 8010fc6:	d1f5      	bne.n	8010fb4 <_strtoull_l.constprop.0+0x14>
 8010fc8:	2c2d      	cmp	r4, #45	; 0x2d
 8010fca:	d154      	bne.n	8011076 <_strtoull_l.constprop.0+0xd6>
 8010fcc:	781c      	ldrb	r4, [r3, #0]
 8010fce:	2301      	movs	r3, #1
 8010fd0:	1c95      	adds	r5, r2, #2
 8010fd2:	9306      	str	r3, [sp, #24]
 8010fd4:	2e00      	cmp	r6, #0
 8010fd6:	d100      	bne.n	8010fda <_strtoull_l.constprop.0+0x3a>
 8010fd8:	e088      	b.n	80110ec <_strtoull_l.constprop.0+0x14c>
 8010fda:	2e10      	cmp	r6, #16
 8010fdc:	d10a      	bne.n	8010ff4 <_strtoull_l.constprop.0+0x54>
 8010fde:	2c30      	cmp	r4, #48	; 0x30
 8010fe0:	d108      	bne.n	8010ff4 <_strtoull_l.constprop.0+0x54>
 8010fe2:	2220      	movs	r2, #32
 8010fe4:	782b      	ldrb	r3, [r5, #0]
 8010fe6:	4393      	bics	r3, r2
 8010fe8:	2b58      	cmp	r3, #88	; 0x58
 8010fea:	d000      	beq.n	8010fee <_strtoull_l.constprop.0+0x4e>
 8010fec:	e078      	b.n	80110e0 <_strtoull_l.constprop.0+0x140>
 8010fee:	2610      	movs	r6, #16
 8010ff0:	786c      	ldrb	r4, [r5, #1]
 8010ff2:	3502      	adds	r5, #2
 8010ff4:	17f7      	asrs	r7, r6, #31
 8010ff6:	0032      	movs	r2, r6
 8010ff8:	003b      	movs	r3, r7
 8010ffa:	2001      	movs	r0, #1
 8010ffc:	4240      	negs	r0, r0
 8010ffe:	17c1      	asrs	r1, r0, #31
 8011000:	f7ef fa50 	bl	80004a4 <__aeabi_uldivmod>
 8011004:	0032      	movs	r2, r6
 8011006:	9007      	str	r0, [sp, #28]
 8011008:	9103      	str	r1, [sp, #12]
 801100a:	003b      	movs	r3, r7
 801100c:	2001      	movs	r0, #1
 801100e:	4240      	negs	r0, r0
 8011010:	17c1      	asrs	r1, r0, #31
 8011012:	f7ef fa47 	bl	80004a4 <__aeabi_uldivmod>
 8011016:	2300      	movs	r3, #0
 8011018:	2000      	movs	r0, #0
 801101a:	2100      	movs	r1, #0
 801101c:	9208      	str	r2, [sp, #32]
 801101e:	0022      	movs	r2, r4
 8011020:	3a30      	subs	r2, #48	; 0x30
 8011022:	2a09      	cmp	r2, #9
 8011024:	d82d      	bhi.n	8011082 <_strtoull_l.constprop.0+0xe2>
 8011026:	0014      	movs	r4, r2
 8011028:	42a6      	cmp	r6, r4
 801102a:	dd39      	ble.n	80110a0 <_strtoull_l.constprop.0+0x100>
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	d01f      	beq.n	8011070 <_strtoull_l.constprop.0+0xd0>
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	4299      	cmp	r1, r3
 8011034:	d831      	bhi.n	801109a <_strtoull_l.constprop.0+0xfa>
 8011036:	d102      	bne.n	801103e <_strtoull_l.constprop.0+0x9e>
 8011038:	9b07      	ldr	r3, [sp, #28]
 801103a:	4298      	cmp	r0, r3
 801103c:	d82d      	bhi.n	801109a <_strtoull_l.constprop.0+0xfa>
 801103e:	9b07      	ldr	r3, [sp, #28]
 8011040:	4283      	cmp	r3, r0
 8011042:	d107      	bne.n	8011054 <_strtoull_l.constprop.0+0xb4>
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	428b      	cmp	r3, r1
 8011048:	d104      	bne.n	8011054 <_strtoull_l.constprop.0+0xb4>
 801104a:	2301      	movs	r3, #1
 801104c:	9a08      	ldr	r2, [sp, #32]
 801104e:	425b      	negs	r3, r3
 8011050:	42a2      	cmp	r2, r4
 8011052:	db0d      	blt.n	8011070 <_strtoull_l.constprop.0+0xd0>
 8011054:	000b      	movs	r3, r1
 8011056:	0002      	movs	r2, r0
 8011058:	0039      	movs	r1, r7
 801105a:	0030      	movs	r0, r6
 801105c:	f7ef fa42 	bl	80004e4 <__aeabi_lmul>
 8011060:	17e3      	asrs	r3, r4, #31
 8011062:	9404      	str	r4, [sp, #16]
 8011064:	9305      	str	r3, [sp, #20]
 8011066:	9b04      	ldr	r3, [sp, #16]
 8011068:	9c05      	ldr	r4, [sp, #20]
 801106a:	18c0      	adds	r0, r0, r3
 801106c:	4161      	adcs	r1, r4
 801106e:	2301      	movs	r3, #1
 8011070:	782c      	ldrb	r4, [r5, #0]
 8011072:	3501      	adds	r5, #1
 8011074:	e7d3      	b.n	801101e <_strtoull_l.constprop.0+0x7e>
 8011076:	9706      	str	r7, [sp, #24]
 8011078:	2c2b      	cmp	r4, #43	; 0x2b
 801107a:	d1ab      	bne.n	8010fd4 <_strtoull_l.constprop.0+0x34>
 801107c:	781c      	ldrb	r4, [r3, #0]
 801107e:	1c95      	adds	r5, r2, #2
 8011080:	e7a8      	b.n	8010fd4 <_strtoull_l.constprop.0+0x34>
 8011082:	0022      	movs	r2, r4
 8011084:	3a41      	subs	r2, #65	; 0x41
 8011086:	2a19      	cmp	r2, #25
 8011088:	d801      	bhi.n	801108e <_strtoull_l.constprop.0+0xee>
 801108a:	3c37      	subs	r4, #55	; 0x37
 801108c:	e7cc      	b.n	8011028 <_strtoull_l.constprop.0+0x88>
 801108e:	0022      	movs	r2, r4
 8011090:	3a61      	subs	r2, #97	; 0x61
 8011092:	2a19      	cmp	r2, #25
 8011094:	d804      	bhi.n	80110a0 <_strtoull_l.constprop.0+0x100>
 8011096:	3c57      	subs	r4, #87	; 0x57
 8011098:	e7c6      	b.n	8011028 <_strtoull_l.constprop.0+0x88>
 801109a:	2301      	movs	r3, #1
 801109c:	425b      	negs	r3, r3
 801109e:	e7e7      	b.n	8011070 <_strtoull_l.constprop.0+0xd0>
 80110a0:	1c5a      	adds	r2, r3, #1
 80110a2:	d10a      	bne.n	80110ba <_strtoull_l.constprop.0+0x11a>
 80110a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110a6:	3323      	adds	r3, #35	; 0x23
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	9b02      	ldr	r3, [sp, #8]
 80110ac:	2001      	movs	r0, #1
 80110ae:	4240      	negs	r0, r0
 80110b0:	17c1      	asrs	r1, r0, #31
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10e      	bne.n	80110d4 <_strtoull_l.constprop.0+0x134>
 80110b6:	b00b      	add	sp, #44	; 0x2c
 80110b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ba:	9a06      	ldr	r2, [sp, #24]
 80110bc:	2a00      	cmp	r2, #0
 80110be:	d004      	beq.n	80110ca <_strtoull_l.constprop.0+0x12a>
 80110c0:	0006      	movs	r6, r0
 80110c2:	000f      	movs	r7, r1
 80110c4:	2100      	movs	r1, #0
 80110c6:	4270      	negs	r0, r6
 80110c8:	41b9      	sbcs	r1, r7
 80110ca:	9a02      	ldr	r2, [sp, #8]
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	d0f2      	beq.n	80110b6 <_strtoull_l.constprop.0+0x116>
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d001      	beq.n	80110d8 <_strtoull_l.constprop.0+0x138>
 80110d4:	1e6b      	subs	r3, r5, #1
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	9a01      	ldr	r2, [sp, #4]
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	e7ea      	b.n	80110b6 <_strtoull_l.constprop.0+0x116>
 80110e0:	2430      	movs	r4, #48	; 0x30
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	d000      	beq.n	80110e8 <_strtoull_l.constprop.0+0x148>
 80110e6:	e785      	b.n	8010ff4 <_strtoull_l.constprop.0+0x54>
 80110e8:	3608      	adds	r6, #8
 80110ea:	e783      	b.n	8010ff4 <_strtoull_l.constprop.0+0x54>
 80110ec:	2c30      	cmp	r4, #48	; 0x30
 80110ee:	d100      	bne.n	80110f2 <_strtoull_l.constprop.0+0x152>
 80110f0:	e777      	b.n	8010fe2 <_strtoull_l.constprop.0+0x42>
 80110f2:	260a      	movs	r6, #10
 80110f4:	e77e      	b.n	8010ff4 <_strtoull_l.constprop.0+0x54>
 80110f6:	46c0      	nop			; (mov r8, r8)
 80110f8:	08014321 	.word	0x08014321

080110fc <_strtoull_r>:
 80110fc:	b510      	push	{r4, lr}
 80110fe:	f7ff ff4f 	bl	8010fa0 <_strtoull_l.constprop.0>
 8011102:	bd10      	pop	{r4, pc}

08011104 <_mbrtowc_r>:
 8011104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011106:	0004      	movs	r4, r0
 8011108:	0010      	movs	r0, r2
 801110a:	4a0b      	ldr	r2, [pc, #44]	; (8011138 <_mbrtowc_r+0x34>)
 801110c:	9d06      	ldr	r5, [sp, #24]
 801110e:	32e4      	adds	r2, #228	; 0xe4
 8011110:	6816      	ldr	r6, [r2, #0]
 8011112:	2800      	cmp	r0, #0
 8011114:	d10c      	bne.n	8011130 <_mbrtowc_r+0x2c>
 8011116:	2301      	movs	r3, #1
 8011118:	0001      	movs	r1, r0
 801111a:	4a08      	ldr	r2, [pc, #32]	; (801113c <_mbrtowc_r+0x38>)
 801111c:	9500      	str	r5, [sp, #0]
 801111e:	0020      	movs	r0, r4
 8011120:	47b0      	blx	r6
 8011122:	1c43      	adds	r3, r0, #1
 8011124:	d103      	bne.n	801112e <_mbrtowc_r+0x2a>
 8011126:	2300      	movs	r3, #0
 8011128:	602b      	str	r3, [r5, #0]
 801112a:	338a      	adds	r3, #138	; 0x8a
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011130:	0002      	movs	r2, r0
 8011132:	9500      	str	r5, [sp, #0]
 8011134:	e7f3      	b.n	801111e <_mbrtowc_r+0x1a>
 8011136:	46c0      	nop			; (mov r8, r8)
 8011138:	20000444 	.word	0x20000444
 801113c:	080146ab 	.word	0x080146ab

08011140 <iswspace>:
 8011140:	b510      	push	{r4, lr}
 8011142:	2100      	movs	r1, #0
 8011144:	f000 f802 	bl	801114c <iswspace_l>
 8011148:	bd10      	pop	{r4, pc}
	...

0801114c <iswspace_l>:
 801114c:	0003      	movs	r3, r0
 801114e:	2000      	movs	r0, #0
 8011150:	2bff      	cmp	r3, #255	; 0xff
 8011152:	d803      	bhi.n	801115c <iswspace_l+0x10>
 8011154:	4a02      	ldr	r2, [pc, #8]	; (8011160 <iswspace_l+0x14>)
 8011156:	5cd0      	ldrb	r0, [r2, r3]
 8011158:	2308      	movs	r3, #8
 801115a:	4018      	ands	r0, r3
 801115c:	4770      	bx	lr
 801115e:	46c0      	nop			; (mov r8, r8)
 8011160:	08014321 	.word	0x08014321

08011164 <fiprintf>:
 8011164:	b40e      	push	{r1, r2, r3}
 8011166:	b517      	push	{r0, r1, r2, r4, lr}
 8011168:	4c05      	ldr	r4, [pc, #20]	; (8011180 <fiprintf+0x1c>)
 801116a:	ab05      	add	r3, sp, #20
 801116c:	cb04      	ldmia	r3!, {r2}
 801116e:	0001      	movs	r1, r0
 8011170:	6820      	ldr	r0, [r4, #0]
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	f000 f954 	bl	8011420 <_vfiprintf_r>
 8011178:	bc1e      	pop	{r1, r2, r3, r4}
 801117a:	bc08      	pop	{r3}
 801117c:	b003      	add	sp, #12
 801117e:	4718      	bx	r3
 8011180:	200006d0 	.word	0x200006d0

08011184 <__ssprint_r>:
 8011184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011186:	6813      	ldr	r3, [r2, #0]
 8011188:	b087      	sub	sp, #28
 801118a:	0017      	movs	r7, r2
 801118c:	9303      	str	r3, [sp, #12]
 801118e:	6893      	ldr	r3, [r2, #8]
 8011190:	2200      	movs	r2, #0
 8011192:	000c      	movs	r4, r1
 8011194:	9005      	str	r0, [sp, #20]
 8011196:	9202      	str	r2, [sp, #8]
 8011198:	9201      	str	r2, [sp, #4]
 801119a:	4293      	cmp	r3, r2
 801119c:	d10d      	bne.n	80111ba <__ssprint_r+0x36>
 801119e:	2000      	movs	r0, #0
 80111a0:	2300      	movs	r3, #0
 80111a2:	607b      	str	r3, [r7, #4]
 80111a4:	b007      	add	sp, #28
 80111a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	9302      	str	r3, [sp, #8]
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	9301      	str	r3, [sp, #4]
 80111b4:	9b03      	ldr	r3, [sp, #12]
 80111b6:	3308      	adds	r3, #8
 80111b8:	9303      	str	r3, [sp, #12]
 80111ba:	9a01      	ldr	r2, [sp, #4]
 80111bc:	68a6      	ldr	r6, [r4, #8]
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	2a00      	cmp	r2, #0
 80111c2:	d0f1      	beq.n	80111a8 <__ssprint_r+0x24>
 80111c4:	42b2      	cmp	r2, r6
 80111c6:	d32e      	bcc.n	8011226 <__ssprint_r+0xa2>
 80111c8:	2190      	movs	r1, #144	; 0x90
 80111ca:	89a2      	ldrh	r2, [r4, #12]
 80111cc:	00c9      	lsls	r1, r1, #3
 80111ce:	420a      	tst	r2, r1
 80111d0:	d029      	beq.n	8011226 <__ssprint_r+0xa2>
 80111d2:	2003      	movs	r0, #3
 80111d4:	6921      	ldr	r1, [r4, #16]
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	9304      	str	r3, [sp, #16]
 80111da:	6963      	ldr	r3, [r4, #20]
 80111dc:	4343      	muls	r3, r0
 80111de:	0fdd      	lsrs	r5, r3, #31
 80111e0:	18ed      	adds	r5, r5, r3
 80111e2:	9b04      	ldr	r3, [sp, #16]
 80111e4:	9801      	ldr	r0, [sp, #4]
 80111e6:	3301      	adds	r3, #1
 80111e8:	181b      	adds	r3, r3, r0
 80111ea:	106d      	asrs	r5, r5, #1
 80111ec:	42ab      	cmp	r3, r5
 80111ee:	d900      	bls.n	80111f2 <__ssprint_r+0x6e>
 80111f0:	001d      	movs	r5, r3
 80111f2:	0552      	lsls	r2, r2, #21
 80111f4:	d532      	bpl.n	801125c <__ssprint_r+0xd8>
 80111f6:	0029      	movs	r1, r5
 80111f8:	9805      	ldr	r0, [sp, #20]
 80111fa:	f7f9 fa35 	bl	800a668 <_malloc_r>
 80111fe:	1e06      	subs	r6, r0, #0
 8011200:	d036      	beq.n	8011270 <__ssprint_r+0xec>
 8011202:	9a04      	ldr	r2, [sp, #16]
 8011204:	6921      	ldr	r1, [r4, #16]
 8011206:	f7fa fd94 	bl	800bd32 <memcpy>
 801120a:	89a2      	ldrh	r2, [r4, #12]
 801120c:	4b1e      	ldr	r3, [pc, #120]	; (8011288 <__ssprint_r+0x104>)
 801120e:	401a      	ands	r2, r3
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	4313      	orrs	r3, r2
 8011214:	81a3      	strh	r3, [r4, #12]
 8011216:	9b04      	ldr	r3, [sp, #16]
 8011218:	6126      	str	r6, [r4, #16]
 801121a:	18f6      	adds	r6, r6, r3
 801121c:	6026      	str	r6, [r4, #0]
 801121e:	6165      	str	r5, [r4, #20]
 8011220:	9e01      	ldr	r6, [sp, #4]
 8011222:	1aed      	subs	r5, r5, r3
 8011224:	60a5      	str	r5, [r4, #8]
 8011226:	9b01      	ldr	r3, [sp, #4]
 8011228:	429e      	cmp	r6, r3
 801122a:	d900      	bls.n	801122e <__ssprint_r+0xaa>
 801122c:	001e      	movs	r6, r3
 801122e:	0032      	movs	r2, r6
 8011230:	9902      	ldr	r1, [sp, #8]
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	f001 f86d 	bl	8012312 <memmove>
 8011238:	9a01      	ldr	r2, [sp, #4]
 801123a:	68a3      	ldr	r3, [r4, #8]
 801123c:	4694      	mov	ip, r2
 801123e:	1b9b      	subs	r3, r3, r6
 8011240:	60a3      	str	r3, [r4, #8]
 8011242:	6823      	ldr	r3, [r4, #0]
 8011244:	199b      	adds	r3, r3, r6
 8011246:	6023      	str	r3, [r4, #0]
 8011248:	9b02      	ldr	r3, [sp, #8]
 801124a:	4463      	add	r3, ip
 801124c:	9302      	str	r3, [sp, #8]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	1a9b      	subs	r3, r3, r2
 8011252:	60bb      	str	r3, [r7, #8]
 8011254:	d0a3      	beq.n	801119e <__ssprint_r+0x1a>
 8011256:	2300      	movs	r3, #0
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	e7ae      	b.n	80111ba <__ssprint_r+0x36>
 801125c:	002a      	movs	r2, r5
 801125e:	9805      	ldr	r0, [sp, #20]
 8011260:	f7ff fbc0 	bl	80109e4 <_realloc_r>
 8011264:	1e06      	subs	r6, r0, #0
 8011266:	d1d6      	bne.n	8011216 <__ssprint_r+0x92>
 8011268:	6921      	ldr	r1, [r4, #16]
 801126a:	9805      	ldr	r0, [sp, #20]
 801126c:	f7fa fddc 	bl	800be28 <_free_r>
 8011270:	230c      	movs	r3, #12
 8011272:	9a05      	ldr	r2, [sp, #20]
 8011274:	2001      	movs	r0, #1
 8011276:	6013      	str	r3, [r2, #0]
 8011278:	89a2      	ldrh	r2, [r4, #12]
 801127a:	3334      	adds	r3, #52	; 0x34
 801127c:	4313      	orrs	r3, r2
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	2300      	movs	r3, #0
 8011282:	4240      	negs	r0, r0
 8011284:	60bb      	str	r3, [r7, #8]
 8011286:	e78b      	b.n	80111a0 <__ssprint_r+0x1c>
 8011288:	fffffb7f 	.word	0xfffffb7f

0801128c <_sungetc_r>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	0014      	movs	r4, r2
 8011290:	1c4b      	adds	r3, r1, #1
 8011292:	d103      	bne.n	801129c <_sungetc_r+0x10>
 8011294:	2501      	movs	r5, #1
 8011296:	426d      	negs	r5, r5
 8011298:	0028      	movs	r0, r5
 801129a:	bd70      	pop	{r4, r5, r6, pc}
 801129c:	8993      	ldrh	r3, [r2, #12]
 801129e:	2220      	movs	r2, #32
 80112a0:	4393      	bics	r3, r2
 80112a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80112a4:	81a3      	strh	r3, [r4, #12]
 80112a6:	b2ce      	uxtb	r6, r1
 80112a8:	6863      	ldr	r3, [r4, #4]
 80112aa:	b2cd      	uxtb	r5, r1
 80112ac:	2a00      	cmp	r2, #0
 80112ae:	d010      	beq.n	80112d2 <_sungetc_r+0x46>
 80112b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80112b2:	429a      	cmp	r2, r3
 80112b4:	dd07      	ble.n	80112c6 <_sungetc_r+0x3a>
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	6023      	str	r3, [r4, #0]
 80112bc:	701e      	strb	r6, [r3, #0]
 80112be:	6863      	ldr	r3, [r4, #4]
 80112c0:	3301      	adds	r3, #1
 80112c2:	6063      	str	r3, [r4, #4]
 80112c4:	e7e8      	b.n	8011298 <_sungetc_r+0xc>
 80112c6:	0021      	movs	r1, r4
 80112c8:	f000 ff1a 	bl	8012100 <__submore>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d0f2      	beq.n	80112b6 <_sungetc_r+0x2a>
 80112d0:	e7e0      	b.n	8011294 <_sungetc_r+0x8>
 80112d2:	6921      	ldr	r1, [r4, #16]
 80112d4:	6822      	ldr	r2, [r4, #0]
 80112d6:	2900      	cmp	r1, #0
 80112d8:	d007      	beq.n	80112ea <_sungetc_r+0x5e>
 80112da:	4291      	cmp	r1, r2
 80112dc:	d205      	bcs.n	80112ea <_sungetc_r+0x5e>
 80112de:	1e51      	subs	r1, r2, #1
 80112e0:	7808      	ldrb	r0, [r1, #0]
 80112e2:	42a8      	cmp	r0, r5
 80112e4:	d101      	bne.n	80112ea <_sungetc_r+0x5e>
 80112e6:	6021      	str	r1, [r4, #0]
 80112e8:	e7ea      	b.n	80112c0 <_sungetc_r+0x34>
 80112ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80112ec:	0023      	movs	r3, r4
 80112ee:	3340      	adds	r3, #64	; 0x40
 80112f0:	6323      	str	r3, [r4, #48]	; 0x30
 80112f2:	2303      	movs	r3, #3
 80112f4:	6363      	str	r3, [r4, #52]	; 0x34
 80112f6:	0023      	movs	r3, r4
 80112f8:	3342      	adds	r3, #66	; 0x42
 80112fa:	63a2      	str	r2, [r4, #56]	; 0x38
 80112fc:	701e      	strb	r6, [r3, #0]
 80112fe:	6023      	str	r3, [r4, #0]
 8011300:	2301      	movs	r3, #1
 8011302:	e7de      	b.n	80112c2 <_sungetc_r+0x36>

08011304 <__ssrefill_r>:
 8011304:	b510      	push	{r4, lr}
 8011306:	000c      	movs	r4, r1
 8011308:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801130a:	2900      	cmp	r1, #0
 801130c:	d00e      	beq.n	801132c <__ssrefill_r+0x28>
 801130e:	0023      	movs	r3, r4
 8011310:	3340      	adds	r3, #64	; 0x40
 8011312:	4299      	cmp	r1, r3
 8011314:	d001      	beq.n	801131a <__ssrefill_r+0x16>
 8011316:	f7fa fd87 	bl	800be28 <_free_r>
 801131a:	2000      	movs	r0, #0
 801131c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801131e:	6320      	str	r0, [r4, #48]	; 0x30
 8011320:	6063      	str	r3, [r4, #4]
 8011322:	4283      	cmp	r3, r0
 8011324:	d002      	beq.n	801132c <__ssrefill_r+0x28>
 8011326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	bd10      	pop	{r4, pc}
 801132c:	6923      	ldr	r3, [r4, #16]
 801132e:	2001      	movs	r0, #1
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	2300      	movs	r3, #0
 8011334:	89a2      	ldrh	r2, [r4, #12]
 8011336:	6063      	str	r3, [r4, #4]
 8011338:	3320      	adds	r3, #32
 801133a:	4313      	orrs	r3, r2
 801133c:	81a3      	strh	r3, [r4, #12]
 801133e:	4240      	negs	r0, r0
 8011340:	e7f3      	b.n	801132a <__ssrefill_r+0x26>

08011342 <_sfread_r>:
 8011342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011344:	0014      	movs	r4, r2
 8011346:	435c      	muls	r4, r3
 8011348:	b087      	sub	sp, #28
 801134a:	1e26      	subs	r6, r4, #0
 801134c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801134e:	9005      	str	r0, [sp, #20]
 8011350:	9101      	str	r1, [sp, #4]
 8011352:	9202      	str	r2, [sp, #8]
 8011354:	9303      	str	r3, [sp, #12]
 8011356:	d11e      	bne.n	8011396 <_sfread_r+0x54>
 8011358:	0020      	movs	r0, r4
 801135a:	b007      	add	sp, #28
 801135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135e:	003a      	movs	r2, r7
 8011360:	9801      	ldr	r0, [sp, #4]
 8011362:	f7fa fce6 	bl	800bd32 <memcpy>
 8011366:	682b      	ldr	r3, [r5, #0]
 8011368:	0029      	movs	r1, r5
 801136a:	19db      	adds	r3, r3, r7
 801136c:	602b      	str	r3, [r5, #0]
 801136e:	2300      	movs	r3, #0
 8011370:	606b      	str	r3, [r5, #4]
 8011372:	9b01      	ldr	r3, [sp, #4]
 8011374:	9805      	ldr	r0, [sp, #20]
 8011376:	19db      	adds	r3, r3, r7
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	1bf3      	subs	r3, r6, r7
 801137c:	9304      	str	r3, [sp, #16]
 801137e:	f7ff ffc1 	bl	8011304 <__ssrefill_r>
 8011382:	2800      	cmp	r0, #0
 8011384:	d006      	beq.n	8011394 <_sfread_r+0x52>
 8011386:	193c      	adds	r4, r7, r4
 8011388:	1ba0      	subs	r0, r4, r6
 801138a:	9902      	ldr	r1, [sp, #8]
 801138c:	f7ee fed6 	bl	800013c <__udivsi3>
 8011390:	0004      	movs	r4, r0
 8011392:	e7e1      	b.n	8011358 <_sfread_r+0x16>
 8011394:	9e04      	ldr	r6, [sp, #16]
 8011396:	686f      	ldr	r7, [r5, #4]
 8011398:	6829      	ldr	r1, [r5, #0]
 801139a:	42b7      	cmp	r7, r6
 801139c:	d3df      	bcc.n	801135e <_sfread_r+0x1c>
 801139e:	0032      	movs	r2, r6
 80113a0:	9801      	ldr	r0, [sp, #4]
 80113a2:	f7fa fcc6 	bl	800bd32 <memcpy>
 80113a6:	686b      	ldr	r3, [r5, #4]
 80113a8:	9c03      	ldr	r4, [sp, #12]
 80113aa:	1b9b      	subs	r3, r3, r6
 80113ac:	606b      	str	r3, [r5, #4]
 80113ae:	682b      	ldr	r3, [r5, #0]
 80113b0:	199b      	adds	r3, r3, r6
 80113b2:	602b      	str	r3, [r5, #0]
 80113b4:	e7d0      	b.n	8011358 <_sfread_r+0x16>

080113b6 <__sprint_r>:
 80113b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113b8:	6893      	ldr	r3, [r2, #8]
 80113ba:	b085      	sub	sp, #20
 80113bc:	9001      	str	r0, [sp, #4]
 80113be:	000d      	movs	r5, r1
 80113c0:	0014      	movs	r4, r2
 80113c2:	1e18      	subs	r0, r3, #0
 80113c4:	d018      	beq.n	80113f8 <__sprint_r+0x42>
 80113c6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80113c8:	049b      	lsls	r3, r3, #18
 80113ca:	d524      	bpl.n	8011416 <__sprint_r+0x60>
 80113cc:	6817      	ldr	r7, [r2, #0]
 80113ce:	2600      	movs	r6, #0
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	9302      	str	r3, [sp, #8]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	089b      	lsrs	r3, r3, #2
 80113da:	9303      	str	r3, [sp, #12]
 80113dc:	9b03      	ldr	r3, [sp, #12]
 80113de:	42b3      	cmp	r3, r6
 80113e0:	dc0e      	bgt.n	8011400 <__sprint_r+0x4a>
 80113e2:	2203      	movs	r2, #3
 80113e4:	9b00      	ldr	r3, [sp, #0]
 80113e6:	68a0      	ldr	r0, [r4, #8]
 80113e8:	4393      	bics	r3, r2
 80113ea:	1ac0      	subs	r0, r0, r3
 80113ec:	60a0      	str	r0, [r4, #8]
 80113ee:	3708      	adds	r7, #8
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d1ec      	bne.n	80113ce <__sprint_r+0x18>
 80113f4:	2300      	movs	r3, #0
 80113f6:	60a3      	str	r3, [r4, #8]
 80113f8:	2300      	movs	r3, #0
 80113fa:	6063      	str	r3, [r4, #4]
 80113fc:	b005      	add	sp, #20
 80113fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011400:	9902      	ldr	r1, [sp, #8]
 8011402:	00b3      	lsls	r3, r6, #2
 8011404:	58c9      	ldr	r1, [r1, r3]
 8011406:	002a      	movs	r2, r5
 8011408:	9801      	ldr	r0, [sp, #4]
 801140a:	f000 ff59 	bl	80122c0 <_fputwc_r>
 801140e:	1c43      	adds	r3, r0, #1
 8011410:	d0f0      	beq.n	80113f4 <__sprint_r+0x3e>
 8011412:	3601      	adds	r6, #1
 8011414:	e7e2      	b.n	80113dc <__sprint_r+0x26>
 8011416:	9801      	ldr	r0, [sp, #4]
 8011418:	f000 fd14 	bl	8011e44 <__sfvwrite_r>
 801141c:	e7ea      	b.n	80113f4 <__sprint_r+0x3e>
	...

08011420 <_vfiprintf_r>:
 8011420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011422:	b0c1      	sub	sp, #260	; 0x104
 8011424:	001c      	movs	r4, r3
 8011426:	001f      	movs	r7, r3
 8011428:	9006      	str	r0, [sp, #24]
 801142a:	9103      	str	r1, [sp, #12]
 801142c:	9207      	str	r2, [sp, #28]
 801142e:	2800      	cmp	r0, #0
 8011430:	d004      	beq.n	801143c <_vfiprintf_r+0x1c>
 8011432:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011434:	2b00      	cmp	r3, #0
 8011436:	d101      	bne.n	801143c <_vfiprintf_r+0x1c>
 8011438:	f7fa fa98 	bl	800b96c <__sinit>
 801143c:	9b03      	ldr	r3, [sp, #12]
 801143e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011440:	07db      	lsls	r3, r3, #31
 8011442:	d407      	bmi.n	8011454 <_vfiprintf_r+0x34>
 8011444:	9b03      	ldr	r3, [sp, #12]
 8011446:	899b      	ldrh	r3, [r3, #12]
 8011448:	059b      	lsls	r3, r3, #22
 801144a:	d403      	bmi.n	8011454 <_vfiprintf_r+0x34>
 801144c:	9b03      	ldr	r3, [sp, #12]
 801144e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011450:	f7fa fc62 	bl	800bd18 <__retarget_lock_acquire_recursive>
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	220c      	movs	r2, #12
 8011458:	5e9a      	ldrsh	r2, [r3, r2]
 801145a:	2380      	movs	r3, #128	; 0x80
 801145c:	019b      	lsls	r3, r3, #6
 801145e:	421a      	tst	r2, r3
 8011460:	d107      	bne.n	8011472 <_vfiprintf_r+0x52>
 8011462:	4313      	orrs	r3, r2
 8011464:	9a03      	ldr	r2, [sp, #12]
 8011466:	8193      	strh	r3, [r2, #12]
 8011468:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801146a:	4aa3      	ldr	r2, [pc, #652]	; (80116f8 <_vfiprintf_r+0x2d8>)
 801146c:	4013      	ands	r3, r2
 801146e:	9a03      	ldr	r2, [sp, #12]
 8011470:	6653      	str	r3, [r2, #100]	; 0x64
 8011472:	9b03      	ldr	r3, [sp, #12]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	071b      	lsls	r3, r3, #28
 8011478:	d503      	bpl.n	8011482 <_vfiprintf_r+0x62>
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d118      	bne.n	80114b4 <_vfiprintf_r+0x94>
 8011482:	9903      	ldr	r1, [sp, #12]
 8011484:	9806      	ldr	r0, [sp, #24]
 8011486:	f000 fe79 	bl	801217c <__swsetup_r>
 801148a:	2800      	cmp	r0, #0
 801148c:	d012      	beq.n	80114b4 <_vfiprintf_r+0x94>
 801148e:	9b03      	ldr	r3, [sp, #12]
 8011490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011492:	07db      	lsls	r3, r3, #31
 8011494:	d505      	bpl.n	80114a2 <_vfiprintf_r+0x82>
 8011496:	2301      	movs	r3, #1
 8011498:	425b      	negs	r3, r3
 801149a:	9308      	str	r3, [sp, #32]
 801149c:	9808      	ldr	r0, [sp, #32]
 801149e:	b041      	add	sp, #260	; 0x104
 80114a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a2:	9b03      	ldr	r3, [sp, #12]
 80114a4:	899b      	ldrh	r3, [r3, #12]
 80114a6:	059b      	lsls	r3, r3, #22
 80114a8:	d4f5      	bmi.n	8011496 <_vfiprintf_r+0x76>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80114ae:	f7fa fc34 	bl	800bd1a <__retarget_lock_release_recursive>
 80114b2:	e7f0      	b.n	8011496 <_vfiprintf_r+0x76>
 80114b4:	221a      	movs	r2, #26
 80114b6:	9b03      	ldr	r3, [sp, #12]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	401a      	ands	r2, r3
 80114bc:	2a0a      	cmp	r2, #10
 80114be:	d116      	bne.n	80114ee <_vfiprintf_r+0xce>
 80114c0:	9a03      	ldr	r2, [sp, #12]
 80114c2:	210e      	movs	r1, #14
 80114c4:	5e52      	ldrsh	r2, [r2, r1]
 80114c6:	2a00      	cmp	r2, #0
 80114c8:	db11      	blt.n	80114ee <_vfiprintf_r+0xce>
 80114ca:	9a03      	ldr	r2, [sp, #12]
 80114cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80114ce:	07d2      	lsls	r2, r2, #31
 80114d0:	d405      	bmi.n	80114de <_vfiprintf_r+0xbe>
 80114d2:	059b      	lsls	r3, r3, #22
 80114d4:	d403      	bmi.n	80114de <_vfiprintf_r+0xbe>
 80114d6:	9b03      	ldr	r3, [sp, #12]
 80114d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80114da:	f7fa fc1e 	bl	800bd1a <__retarget_lock_release_recursive>
 80114de:	0023      	movs	r3, r4
 80114e0:	9a07      	ldr	r2, [sp, #28]
 80114e2:	9903      	ldr	r1, [sp, #12]
 80114e4:	9806      	ldr	r0, [sp, #24]
 80114e6:	f000 fc69 	bl	8011dbc <__sbprintf>
 80114ea:	9008      	str	r0, [sp, #32]
 80114ec:	e7d6      	b.n	801149c <_vfiprintf_r+0x7c>
 80114ee:	2300      	movs	r3, #0
 80114f0:	ad17      	add	r5, sp, #92	; 0x5c
 80114f2:	9514      	str	r5, [sp, #80]	; 0x50
 80114f4:	9316      	str	r3, [sp, #88]	; 0x58
 80114f6:	9315      	str	r3, [sp, #84]	; 0x54
 80114f8:	930c      	str	r3, [sp, #48]	; 0x30
 80114fa:	930d      	str	r3, [sp, #52]	; 0x34
 80114fc:	930e      	str	r3, [sp, #56]	; 0x38
 80114fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011500:	9308      	str	r3, [sp, #32]
 8011502:	9c07      	ldr	r4, [sp, #28]
 8011504:	7823      	ldrb	r3, [r4, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d002      	beq.n	8011510 <_vfiprintf_r+0xf0>
 801150a:	2b25      	cmp	r3, #37	; 0x25
 801150c:	d000      	beq.n	8011510 <_vfiprintf_r+0xf0>
 801150e:	e08d      	b.n	801162c <_vfiprintf_r+0x20c>
 8011510:	9b07      	ldr	r3, [sp, #28]
 8011512:	1ae6      	subs	r6, r4, r3
 8011514:	429c      	cmp	r4, r3
 8011516:	d016      	beq.n	8011546 <_vfiprintf_r+0x126>
 8011518:	602b      	str	r3, [r5, #0]
 801151a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801151c:	606e      	str	r6, [r5, #4]
 801151e:	199b      	adds	r3, r3, r6
 8011520:	9316      	str	r3, [sp, #88]	; 0x58
 8011522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011524:	3508      	adds	r5, #8
 8011526:	3301      	adds	r3, #1
 8011528:	9315      	str	r3, [sp, #84]	; 0x54
 801152a:	2b07      	cmp	r3, #7
 801152c:	dd08      	ble.n	8011540 <_vfiprintf_r+0x120>
 801152e:	9903      	ldr	r1, [sp, #12]
 8011530:	9806      	ldr	r0, [sp, #24]
 8011532:	aa14      	add	r2, sp, #80	; 0x50
 8011534:	f7ff ff3f 	bl	80113b6 <__sprint_r>
 8011538:	2800      	cmp	r0, #0
 801153a:	d000      	beq.n	801153e <_vfiprintf_r+0x11e>
 801153c:	e3d9      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 801153e:	ad17      	add	r5, sp, #92	; 0x5c
 8011540:	9b08      	ldr	r3, [sp, #32]
 8011542:	199b      	adds	r3, r3, r6
 8011544:	9308      	str	r3, [sp, #32]
 8011546:	7823      	ldrb	r3, [r4, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d101      	bne.n	8011550 <_vfiprintf_r+0x130>
 801154c:	f000 fbf6 	bl	8011d3c <_vfiprintf_r+0x91c>
 8011550:	2200      	movs	r2, #0
 8011552:	a912      	add	r1, sp, #72	; 0x48
 8011554:	70ca      	strb	r2, [r1, #3]
 8011556:	2101      	movs	r1, #1
 8011558:	1c63      	adds	r3, r4, #1
 801155a:	0014      	movs	r4, r2
 801155c:	4249      	negs	r1, r1
 801155e:	9105      	str	r1, [sp, #20]
 8011560:	9209      	str	r2, [sp, #36]	; 0x24
 8011562:	1c5a      	adds	r2, r3, #1
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	9207      	str	r2, [sp, #28]
 8011568:	0018      	movs	r0, r3
 801156a:	3820      	subs	r0, #32
 801156c:	285a      	cmp	r0, #90	; 0x5a
 801156e:	d900      	bls.n	8011572 <_vfiprintf_r+0x152>
 8011570:	e362      	b.n	8011c38 <_vfiprintf_r+0x818>
 8011572:	f7ee fdd9 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011576:	0078      	.short	0x0078
 8011578:	03610361 	.word	0x03610361
 801157c:	03610081 	.word	0x03610081
 8011580:	03610361 	.word	0x03610361
 8011584:	0361005d 	.word	0x0361005d
 8011588:	00830361 	.word	0x00830361
 801158c:	0361008b 	.word	0x0361008b
 8011590:	008f0089 	.word	0x008f0089
 8011594:	00ad0361 	.word	0x00ad0361
 8011598:	00af00af 	.word	0x00af00af
 801159c:	00af00af 	.word	0x00af00af
 80115a0:	00af00af 	.word	0x00af00af
 80115a4:	00af00af 	.word	0x00af00af
 80115a8:	036100af 	.word	0x036100af
 80115ac:	03610361 	.word	0x03610361
 80115b0:	03610361 	.word	0x03610361
 80115b4:	03610361 	.word	0x03610361
 80115b8:	03610361 	.word	0x03610361
 80115bc:	00e600da 	.word	0x00e600da
 80115c0:	03610361 	.word	0x03610361
 80115c4:	03610361 	.word	0x03610361
 80115c8:	03610361 	.word	0x03610361
 80115cc:	03610361 	.word	0x03610361
 80115d0:	03610361 	.word	0x03610361
 80115d4:	03610143 	.word	0x03610143
 80115d8:	03610361 	.word	0x03610361
 80115dc:	03610182 	.word	0x03610182
 80115e0:	0361027c 	.word	0x0361027c
 80115e4:	02ae0361 	.word	0x02ae0361
 80115e8:	03610361 	.word	0x03610361
 80115ec:	03610361 	.word	0x03610361
 80115f0:	03610361 	.word	0x03610361
 80115f4:	03610361 	.word	0x03610361
 80115f8:	03610361 	.word	0x03610361
 80115fc:	00e800da 	.word	0x00e800da
 8011600:	03610361 	.word	0x03610361
 8011604:	00c30361 	.word	0x00c30361
 8011608:	00d600e8 	.word	0x00d600e8
 801160c:	00cf0361 	.word	0x00cf0361
 8011610:	01260361 	.word	0x01260361
 8011614:	01740145 	.word	0x01740145
 8011618:	036100d6 	.word	0x036100d6
 801161c:	007f0182 	.word	0x007f0182
 8011620:	0361027e 	.word	0x0361027e
 8011624:	02cd0361 	.word	0x02cd0361
 8011628:	007f0361 	.word	0x007f0361
 801162c:	3401      	adds	r4, #1
 801162e:	e769      	b.n	8011504 <_vfiprintf_r+0xe4>
 8011630:	9806      	ldr	r0, [sp, #24]
 8011632:	f7fe fa47 	bl	800fac4 <_localeconv_r>
 8011636:	6843      	ldr	r3, [r0, #4]
 8011638:	0018      	movs	r0, r3
 801163a:	930f      	str	r3, [sp, #60]	; 0x3c
 801163c:	f7ee fd62 	bl	8000104 <strlen>
 8011640:	900e      	str	r0, [sp, #56]	; 0x38
 8011642:	9806      	ldr	r0, [sp, #24]
 8011644:	f7fe fa3e 	bl	800fac4 <_localeconv_r>
 8011648:	6883      	ldr	r3, [r0, #8]
 801164a:	930d      	str	r3, [sp, #52]	; 0x34
 801164c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801164e:	2b00      	cmp	r3, #0
 8011650:	d010      	beq.n	8011674 <_vfiprintf_r+0x254>
 8011652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011654:	2b00      	cmp	r3, #0
 8011656:	d00d      	beq.n	8011674 <_vfiprintf_r+0x254>
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00a      	beq.n	8011674 <_vfiprintf_r+0x254>
 801165e:	2380      	movs	r3, #128	; 0x80
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	431c      	orrs	r4, r3
 8011664:	e006      	b.n	8011674 <_vfiprintf_r+0x254>
 8011666:	ab12      	add	r3, sp, #72	; 0x48
 8011668:	78da      	ldrb	r2, [r3, #3]
 801166a:	3303      	adds	r3, #3
 801166c:	2a00      	cmp	r2, #0
 801166e:	d101      	bne.n	8011674 <_vfiprintf_r+0x254>
 8011670:	3220      	adds	r2, #32
 8011672:	701a      	strb	r2, [r3, #0]
 8011674:	9b07      	ldr	r3, [sp, #28]
 8011676:	e774      	b.n	8011562 <_vfiprintf_r+0x142>
 8011678:	2301      	movs	r3, #1
 801167a:	e7f2      	b.n	8011662 <_vfiprintf_r+0x242>
 801167c:	cf08      	ldmia	r7!, {r3}
 801167e:	9309      	str	r3, [sp, #36]	; 0x24
 8011680:	2b00      	cmp	r3, #0
 8011682:	daf7      	bge.n	8011674 <_vfiprintf_r+0x254>
 8011684:	425b      	negs	r3, r3
 8011686:	9309      	str	r3, [sp, #36]	; 0x24
 8011688:	2304      	movs	r3, #4
 801168a:	e7ea      	b.n	8011662 <_vfiprintf_r+0x242>
 801168c:	222b      	movs	r2, #43	; 0x2b
 801168e:	ab12      	add	r3, sp, #72	; 0x48
 8011690:	70da      	strb	r2, [r3, #3]
 8011692:	e7ef      	b.n	8011674 <_vfiprintf_r+0x254>
 8011694:	9b07      	ldr	r3, [sp, #28]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	2b2a      	cmp	r3, #42	; 0x2a
 801169c:	d00f      	beq.n	80116be <_vfiprintf_r+0x29e>
 801169e:	2100      	movs	r1, #0
 80116a0:	9105      	str	r1, [sp, #20]
 80116a2:	0019      	movs	r1, r3
 80116a4:	3930      	subs	r1, #48	; 0x30
 80116a6:	9207      	str	r2, [sp, #28]
 80116a8:	2909      	cmp	r1, #9
 80116aa:	d900      	bls.n	80116ae <_vfiprintf_r+0x28e>
 80116ac:	e75c      	b.n	8011568 <_vfiprintf_r+0x148>
 80116ae:	200a      	movs	r0, #10
 80116b0:	9b05      	ldr	r3, [sp, #20]
 80116b2:	4343      	muls	r3, r0
 80116b4:	185b      	adds	r3, r3, r1
 80116b6:	9305      	str	r3, [sp, #20]
 80116b8:	7813      	ldrb	r3, [r2, #0]
 80116ba:	3201      	adds	r2, #1
 80116bc:	e7f1      	b.n	80116a2 <_vfiprintf_r+0x282>
 80116be:	cf08      	ldmia	r7!, {r3}
 80116c0:	9305      	str	r3, [sp, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	da02      	bge.n	80116cc <_vfiprintf_r+0x2ac>
 80116c6:	2301      	movs	r3, #1
 80116c8:	425b      	negs	r3, r3
 80116ca:	9305      	str	r3, [sp, #20]
 80116cc:	9207      	str	r2, [sp, #28]
 80116ce:	e7d1      	b.n	8011674 <_vfiprintf_r+0x254>
 80116d0:	2380      	movs	r3, #128	; 0x80
 80116d2:	e7c6      	b.n	8011662 <_vfiprintf_r+0x242>
 80116d4:	2100      	movs	r1, #0
 80116d6:	9a07      	ldr	r2, [sp, #28]
 80116d8:	9109      	str	r1, [sp, #36]	; 0x24
 80116da:	200a      	movs	r0, #10
 80116dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116de:	3b30      	subs	r3, #48	; 0x30
 80116e0:	4341      	muls	r1, r0
 80116e2:	185b      	adds	r3, r3, r1
 80116e4:	9309      	str	r3, [sp, #36]	; 0x24
 80116e6:	0013      	movs	r3, r2
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	3201      	adds	r2, #1
 80116ec:	0019      	movs	r1, r3
 80116ee:	3930      	subs	r1, #48	; 0x30
 80116f0:	9207      	str	r2, [sp, #28]
 80116f2:	2909      	cmp	r1, #9
 80116f4:	d9f1      	bls.n	80116da <_vfiprintf_r+0x2ba>
 80116f6:	e737      	b.n	8011568 <_vfiprintf_r+0x148>
 80116f8:	ffffdfff 	.word	0xffffdfff
 80116fc:	9b07      	ldr	r3, [sp, #28]
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	2b68      	cmp	r3, #104	; 0x68
 8011702:	d105      	bne.n	8011710 <_vfiprintf_r+0x2f0>
 8011704:	9b07      	ldr	r3, [sp, #28]
 8011706:	3301      	adds	r3, #1
 8011708:	9307      	str	r3, [sp, #28]
 801170a:	2380      	movs	r3, #128	; 0x80
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	e7a8      	b.n	8011662 <_vfiprintf_r+0x242>
 8011710:	2340      	movs	r3, #64	; 0x40
 8011712:	e7a6      	b.n	8011662 <_vfiprintf_r+0x242>
 8011714:	9b07      	ldr	r3, [sp, #28]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	2b6c      	cmp	r3, #108	; 0x6c
 801171a:	d104      	bne.n	8011726 <_vfiprintf_r+0x306>
 801171c:	9b07      	ldr	r3, [sp, #28]
 801171e:	3301      	adds	r3, #1
 8011720:	9307      	str	r3, [sp, #28]
 8011722:	2320      	movs	r3, #32
 8011724:	e79d      	b.n	8011662 <_vfiprintf_r+0x242>
 8011726:	2310      	movs	r3, #16
 8011728:	e79b      	b.n	8011662 <_vfiprintf_r+0x242>
 801172a:	003a      	movs	r2, r7
 801172c:	ca08      	ldmia	r2!, {r3}
 801172e:	ae27      	add	r6, sp, #156	; 0x9c
 8011730:	7033      	strb	r3, [r6, #0]
 8011732:	2300      	movs	r3, #0
 8011734:	9204      	str	r2, [sp, #16]
 8011736:	aa12      	add	r2, sp, #72	; 0x48
 8011738:	70d3      	strb	r3, [r2, #3]
 801173a:	2201      	movs	r2, #1
 801173c:	930b      	str	r3, [sp, #44]	; 0x2c
 801173e:	9205      	str	r2, [sp, #20]
 8011740:	e0b0      	b.n	80118a4 <_vfiprintf_r+0x484>
 8011742:	2310      	movs	r3, #16
 8011744:	431c      	orrs	r4, r3
 8011746:	06a3      	lsls	r3, r4, #26
 8011748:	d52a      	bpl.n	80117a0 <_vfiprintf_r+0x380>
 801174a:	2307      	movs	r3, #7
 801174c:	3707      	adds	r7, #7
 801174e:	439f      	bics	r7, r3
 8011750:	0039      	movs	r1, r7
 8011752:	c90c      	ldmia	r1!, {r2, r3}
 8011754:	9200      	str	r2, [sp, #0]
 8011756:	9301      	str	r3, [sp, #4]
 8011758:	9104      	str	r1, [sp, #16]
 801175a:	9a01      	ldr	r2, [sp, #4]
 801175c:	2301      	movs	r3, #1
 801175e:	2a00      	cmp	r2, #0
 8011760:	da09      	bge.n	8011776 <_vfiprintf_r+0x356>
 8011762:	9e00      	ldr	r6, [sp, #0]
 8011764:	9f01      	ldr	r7, [sp, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	4271      	negs	r1, r6
 801176a:	41ba      	sbcs	r2, r7
 801176c:	9100      	str	r1, [sp, #0]
 801176e:	9201      	str	r2, [sp, #4]
 8011770:	212d      	movs	r1, #45	; 0x2d
 8011772:	aa12      	add	r2, sp, #72	; 0x48
 8011774:	70d1      	strb	r1, [r2, #3]
 8011776:	9901      	ldr	r1, [sp, #4]
 8011778:	9a00      	ldr	r2, [sp, #0]
 801177a:	430a      	orrs	r2, r1
 801177c:	9905      	ldr	r1, [sp, #20]
 801177e:	3101      	adds	r1, #1
 8011780:	d100      	bne.n	8011784 <_vfiprintf_r+0x364>
 8011782:	e2e9      	b.n	8011d58 <_vfiprintf_r+0x938>
 8011784:	2180      	movs	r1, #128	; 0x80
 8011786:	0027      	movs	r7, r4
 8011788:	438f      	bics	r7, r1
 801178a:	2a00      	cmp	r2, #0
 801178c:	d000      	beq.n	8011790 <_vfiprintf_r+0x370>
 801178e:	e2e7      	b.n	8011d60 <_vfiprintf_r+0x940>
 8011790:	9a05      	ldr	r2, [sp, #20]
 8011792:	2a00      	cmp	r2, #0
 8011794:	d100      	bne.n	8011798 <_vfiprintf_r+0x378>
 8011796:	e243      	b.n	8011c20 <_vfiprintf_r+0x800>
 8011798:	2b01      	cmp	r3, #1
 801179a:	d000      	beq.n	801179e <_vfiprintf_r+0x37e>
 801179c:	e2e3      	b.n	8011d66 <_vfiprintf_r+0x946>
 801179e:	e1e7      	b.n	8011b70 <_vfiprintf_r+0x750>
 80117a0:	003a      	movs	r2, r7
 80117a2:	ca08      	ldmia	r2!, {r3}
 80117a4:	9204      	str	r2, [sp, #16]
 80117a6:	06e2      	lsls	r2, r4, #27
 80117a8:	d503      	bpl.n	80117b2 <_vfiprintf_r+0x392>
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	17db      	asrs	r3, r3, #31
 80117ae:	9301      	str	r3, [sp, #4]
 80117b0:	e7d3      	b.n	801175a <_vfiprintf_r+0x33a>
 80117b2:	0662      	lsls	r2, r4, #25
 80117b4:	d501      	bpl.n	80117ba <_vfiprintf_r+0x39a>
 80117b6:	b21b      	sxth	r3, r3
 80117b8:	e7f7      	b.n	80117aa <_vfiprintf_r+0x38a>
 80117ba:	05a2      	lsls	r2, r4, #22
 80117bc:	d5f5      	bpl.n	80117aa <_vfiprintf_r+0x38a>
 80117be:	b25b      	sxtb	r3, r3
 80117c0:	e7f3      	b.n	80117aa <_vfiprintf_r+0x38a>
 80117c2:	1d3b      	adds	r3, r7, #4
 80117c4:	9304      	str	r3, [sp, #16]
 80117c6:	06a3      	lsls	r3, r4, #26
 80117c8:	d506      	bpl.n	80117d8 <_vfiprintf_r+0x3b8>
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	9a08      	ldr	r2, [sp, #32]
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	17d2      	asrs	r2, r2, #31
 80117d2:	605a      	str	r2, [r3, #4]
 80117d4:	9f04      	ldr	r7, [sp, #16]
 80117d6:	e694      	b.n	8011502 <_vfiprintf_r+0xe2>
 80117d8:	06e3      	lsls	r3, r4, #27
 80117da:	d503      	bpl.n	80117e4 <_vfiprintf_r+0x3c4>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	9a08      	ldr	r2, [sp, #32]
 80117e0:	601a      	str	r2, [r3, #0]
 80117e2:	e7f7      	b.n	80117d4 <_vfiprintf_r+0x3b4>
 80117e4:	0663      	lsls	r3, r4, #25
 80117e6:	d503      	bpl.n	80117f0 <_vfiprintf_r+0x3d0>
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	9a08      	ldr	r2, [sp, #32]
 80117ec:	801a      	strh	r2, [r3, #0]
 80117ee:	e7f1      	b.n	80117d4 <_vfiprintf_r+0x3b4>
 80117f0:	05a4      	lsls	r4, r4, #22
 80117f2:	d5f3      	bpl.n	80117dc <_vfiprintf_r+0x3bc>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	9a08      	ldr	r2, [sp, #32]
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	e7eb      	b.n	80117d4 <_vfiprintf_r+0x3b4>
 80117fc:	2310      	movs	r3, #16
 80117fe:	431c      	orrs	r4, r3
 8011800:	2320      	movs	r3, #32
 8011802:	0020      	movs	r0, r4
 8011804:	4018      	ands	r0, r3
 8011806:	421c      	tst	r4, r3
 8011808:	d00d      	beq.n	8011826 <_vfiprintf_r+0x406>
 801180a:	3b19      	subs	r3, #25
 801180c:	3707      	adds	r7, #7
 801180e:	439f      	bics	r7, r3
 8011810:	0039      	movs	r1, r7
 8011812:	c90c      	ldmia	r1!, {r2, r3}
 8011814:	9200      	str	r2, [sp, #0]
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	9104      	str	r1, [sp, #16]
 801181a:	4bcc      	ldr	r3, [pc, #816]	; (8011b4c <_vfiprintf_r+0x72c>)
 801181c:	401c      	ands	r4, r3
 801181e:	2300      	movs	r3, #0
 8011820:	2100      	movs	r1, #0
 8011822:	aa12      	add	r2, sp, #72	; 0x48
 8011824:	e7a6      	b.n	8011774 <_vfiprintf_r+0x354>
 8011826:	003a      	movs	r2, r7
 8011828:	ca08      	ldmia	r2!, {r3}
 801182a:	0021      	movs	r1, r4
 801182c:	9204      	str	r2, [sp, #16]
 801182e:	2210      	movs	r2, #16
 8011830:	4011      	ands	r1, r2
 8011832:	4214      	tst	r4, r2
 8011834:	d002      	beq.n	801183c <_vfiprintf_r+0x41c>
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	9001      	str	r0, [sp, #4]
 801183a:	e7ee      	b.n	801181a <_vfiprintf_r+0x3fa>
 801183c:	2240      	movs	r2, #64	; 0x40
 801183e:	0020      	movs	r0, r4
 8011840:	4010      	ands	r0, r2
 8011842:	4214      	tst	r4, r2
 8011844:	d003      	beq.n	801184e <_vfiprintf_r+0x42e>
 8011846:	b29b      	uxth	r3, r3
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	9101      	str	r1, [sp, #4]
 801184c:	e7e5      	b.n	801181a <_vfiprintf_r+0x3fa>
 801184e:	2280      	movs	r2, #128	; 0x80
 8011850:	0021      	movs	r1, r4
 8011852:	0092      	lsls	r2, r2, #2
 8011854:	4011      	ands	r1, r2
 8011856:	4214      	tst	r4, r2
 8011858:	d0f6      	beq.n	8011848 <_vfiprintf_r+0x428>
 801185a:	b2db      	uxtb	r3, r3
 801185c:	e7eb      	b.n	8011836 <_vfiprintf_r+0x416>
 801185e:	003b      	movs	r3, r7
 8011860:	cb04      	ldmia	r3!, {r2}
 8011862:	49bb      	ldr	r1, [pc, #748]	; (8011b50 <_vfiprintf_r+0x730>)
 8011864:	9304      	str	r3, [sp, #16]
 8011866:	2300      	movs	r3, #0
 8011868:	9200      	str	r2, [sp, #0]
 801186a:	aa13      	add	r2, sp, #76	; 0x4c
 801186c:	8011      	strh	r1, [r2, #0]
 801186e:	4ab9      	ldr	r2, [pc, #740]	; (8011b54 <_vfiprintf_r+0x734>)
 8011870:	9301      	str	r3, [sp, #4]
 8011872:	3302      	adds	r3, #2
 8011874:	431c      	orrs	r4, r3
 8011876:	920c      	str	r2, [sp, #48]	; 0x30
 8011878:	e7d2      	b.n	8011820 <_vfiprintf_r+0x400>
 801187a:	003b      	movs	r3, r7
 801187c:	2700      	movs	r7, #0
 801187e:	cb40      	ldmia	r3!, {r6}
 8011880:	9304      	str	r3, [sp, #16]
 8011882:	ab12      	add	r3, sp, #72	; 0x48
 8011884:	70df      	strb	r7, [r3, #3]
 8011886:	9b05      	ldr	r3, [sp, #20]
 8011888:	3301      	adds	r3, #1
 801188a:	d100      	bne.n	801188e <_vfiprintf_r+0x46e>
 801188c:	e0ea      	b.n	8011a64 <_vfiprintf_r+0x644>
 801188e:	0039      	movs	r1, r7
 8011890:	0030      	movs	r0, r6
 8011892:	9a05      	ldr	r2, [sp, #20]
 8011894:	f7fe f92e 	bl	800faf4 <memchr>
 8011898:	900b      	str	r0, [sp, #44]	; 0x2c
 801189a:	42b8      	cmp	r0, r7
 801189c:	d002      	beq.n	80118a4 <_vfiprintf_r+0x484>
 801189e:	1b83      	subs	r3, r0, r6
 80118a0:	9305      	str	r3, [sp, #20]
 80118a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80118a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118a6:	9a05      	ldr	r2, [sp, #20]
 80118a8:	930a      	str	r3, [sp, #40]	; 0x28
 80118aa:	4293      	cmp	r3, r2
 80118ac:	da00      	bge.n	80118b0 <_vfiprintf_r+0x490>
 80118ae:	920a      	str	r2, [sp, #40]	; 0x28
 80118b0:	ab12      	add	r3, sp, #72	; 0x48
 80118b2:	3303      	adds	r3, #3
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	1e5a      	subs	r2, r3, #1
 80118b8:	4193      	sbcs	r3, r2
 80118ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118bc:	18d3      	adds	r3, r2, r3
 80118be:	930a      	str	r3, [sp, #40]	; 0x28
 80118c0:	0022      	movs	r2, r4
 80118c2:	2302      	movs	r3, #2
 80118c4:	401a      	ands	r2, r3
 80118c6:	9210      	str	r2, [sp, #64]	; 0x40
 80118c8:	421c      	tst	r4, r3
 80118ca:	d002      	beq.n	80118d2 <_vfiprintf_r+0x4b2>
 80118cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ce:	3302      	adds	r3, #2
 80118d0:	930a      	str	r3, [sp, #40]	; 0x28
 80118d2:	2384      	movs	r3, #132	; 0x84
 80118d4:	0022      	movs	r2, r4
 80118d6:	401a      	ands	r2, r3
 80118d8:	9211      	str	r2, [sp, #68]	; 0x44
 80118da:	421c      	tst	r4, r3
 80118dc:	d11e      	bne.n	801191c <_vfiprintf_r+0x4fc>
 80118de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118e2:	1a9f      	subs	r7, r3, r2
 80118e4:	2f00      	cmp	r7, #0
 80118e6:	dd19      	ble.n	801191c <_vfiprintf_r+0x4fc>
 80118e8:	0029      	movs	r1, r5
 80118ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118ec:	489a      	ldr	r0, [pc, #616]	; (8011b58 <_vfiprintf_r+0x738>)
 80118ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118f0:	3301      	adds	r3, #1
 80118f2:	3108      	adds	r1, #8
 80118f4:	6028      	str	r0, [r5, #0]
 80118f6:	2f10      	cmp	r7, #16
 80118f8:	dd00      	ble.n	80118fc <_vfiprintf_r+0x4dc>
 80118fa:	e1a7      	b.n	8011c4c <_vfiprintf_r+0x82c>
 80118fc:	606f      	str	r7, [r5, #4]
 80118fe:	18bf      	adds	r7, r7, r2
 8011900:	000d      	movs	r5, r1
 8011902:	9716      	str	r7, [sp, #88]	; 0x58
 8011904:	9315      	str	r3, [sp, #84]	; 0x54
 8011906:	2b07      	cmp	r3, #7
 8011908:	dd08      	ble.n	801191c <_vfiprintf_r+0x4fc>
 801190a:	9903      	ldr	r1, [sp, #12]
 801190c:	9806      	ldr	r0, [sp, #24]
 801190e:	aa14      	add	r2, sp, #80	; 0x50
 8011910:	f7ff fd51 	bl	80113b6 <__sprint_r>
 8011914:	2800      	cmp	r0, #0
 8011916:	d000      	beq.n	801191a <_vfiprintf_r+0x4fa>
 8011918:	e1eb      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 801191a:	ad17      	add	r5, sp, #92	; 0x5c
 801191c:	a912      	add	r1, sp, #72	; 0x48
 801191e:	78c8      	ldrb	r0, [r1, #3]
 8011920:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011924:	3103      	adds	r1, #3
 8011926:	2800      	cmp	r0, #0
 8011928:	d012      	beq.n	8011950 <_vfiprintf_r+0x530>
 801192a:	6029      	str	r1, [r5, #0]
 801192c:	2101      	movs	r1, #1
 801192e:	3301      	adds	r3, #1
 8011930:	1852      	adds	r2, r2, r1
 8011932:	6069      	str	r1, [r5, #4]
 8011934:	9216      	str	r2, [sp, #88]	; 0x58
 8011936:	9315      	str	r3, [sp, #84]	; 0x54
 8011938:	3508      	adds	r5, #8
 801193a:	2b07      	cmp	r3, #7
 801193c:	dd08      	ble.n	8011950 <_vfiprintf_r+0x530>
 801193e:	9903      	ldr	r1, [sp, #12]
 8011940:	9806      	ldr	r0, [sp, #24]
 8011942:	aa14      	add	r2, sp, #80	; 0x50
 8011944:	f7ff fd37 	bl	80113b6 <__sprint_r>
 8011948:	2800      	cmp	r0, #0
 801194a:	d000      	beq.n	801194e <_vfiprintf_r+0x52e>
 801194c:	e1d1      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 801194e:	ad17      	add	r5, sp, #92	; 0x5c
 8011950:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011952:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011956:	2900      	cmp	r1, #0
 8011958:	d013      	beq.n	8011982 <_vfiprintf_r+0x562>
 801195a:	a913      	add	r1, sp, #76	; 0x4c
 801195c:	6029      	str	r1, [r5, #0]
 801195e:	2102      	movs	r1, #2
 8011960:	3301      	adds	r3, #1
 8011962:	1852      	adds	r2, r2, r1
 8011964:	6069      	str	r1, [r5, #4]
 8011966:	9216      	str	r2, [sp, #88]	; 0x58
 8011968:	9315      	str	r3, [sp, #84]	; 0x54
 801196a:	3508      	adds	r5, #8
 801196c:	2b07      	cmp	r3, #7
 801196e:	dd08      	ble.n	8011982 <_vfiprintf_r+0x562>
 8011970:	9903      	ldr	r1, [sp, #12]
 8011972:	9806      	ldr	r0, [sp, #24]
 8011974:	aa14      	add	r2, sp, #80	; 0x50
 8011976:	f7ff fd1e 	bl	80113b6 <__sprint_r>
 801197a:	2800      	cmp	r0, #0
 801197c:	d000      	beq.n	8011980 <_vfiprintf_r+0x560>
 801197e:	e1b8      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011980:	ad17      	add	r5, sp, #92	; 0x5c
 8011982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011984:	2b80      	cmp	r3, #128	; 0x80
 8011986:	d11e      	bne.n	80119c6 <_vfiprintf_r+0x5a6>
 8011988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801198a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801198c:	1a9f      	subs	r7, r3, r2
 801198e:	2f00      	cmp	r7, #0
 8011990:	dd19      	ble.n	80119c6 <_vfiprintf_r+0x5a6>
 8011992:	0029      	movs	r1, r5
 8011994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011996:	4871      	ldr	r0, [pc, #452]	; (8011b5c <_vfiprintf_r+0x73c>)
 8011998:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801199a:	3301      	adds	r3, #1
 801199c:	3108      	adds	r1, #8
 801199e:	6028      	str	r0, [r5, #0]
 80119a0:	2f10      	cmp	r7, #16
 80119a2:	dd00      	ble.n	80119a6 <_vfiprintf_r+0x586>
 80119a4:	e164      	b.n	8011c70 <_vfiprintf_r+0x850>
 80119a6:	606f      	str	r7, [r5, #4]
 80119a8:	18bf      	adds	r7, r7, r2
 80119aa:	000d      	movs	r5, r1
 80119ac:	9716      	str	r7, [sp, #88]	; 0x58
 80119ae:	9315      	str	r3, [sp, #84]	; 0x54
 80119b0:	2b07      	cmp	r3, #7
 80119b2:	dd08      	ble.n	80119c6 <_vfiprintf_r+0x5a6>
 80119b4:	9903      	ldr	r1, [sp, #12]
 80119b6:	9806      	ldr	r0, [sp, #24]
 80119b8:	aa14      	add	r2, sp, #80	; 0x50
 80119ba:	f7ff fcfc 	bl	80113b6 <__sprint_r>
 80119be:	2800      	cmp	r0, #0
 80119c0:	d000      	beq.n	80119c4 <_vfiprintf_r+0x5a4>
 80119c2:	e196      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 80119c4:	ad17      	add	r5, sp, #92	; 0x5c
 80119c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119c8:	9a05      	ldr	r2, [sp, #20]
 80119ca:	1a9f      	subs	r7, r3, r2
 80119cc:	2f00      	cmp	r7, #0
 80119ce:	dd19      	ble.n	8011a04 <_vfiprintf_r+0x5e4>
 80119d0:	0029      	movs	r1, r5
 80119d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119d4:	4861      	ldr	r0, [pc, #388]	; (8011b5c <_vfiprintf_r+0x73c>)
 80119d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80119d8:	3301      	adds	r3, #1
 80119da:	3108      	adds	r1, #8
 80119dc:	6028      	str	r0, [r5, #0]
 80119de:	2f10      	cmp	r7, #16
 80119e0:	dd00      	ble.n	80119e4 <_vfiprintf_r+0x5c4>
 80119e2:	e157      	b.n	8011c94 <_vfiprintf_r+0x874>
 80119e4:	606f      	str	r7, [r5, #4]
 80119e6:	18bf      	adds	r7, r7, r2
 80119e8:	000d      	movs	r5, r1
 80119ea:	9716      	str	r7, [sp, #88]	; 0x58
 80119ec:	9315      	str	r3, [sp, #84]	; 0x54
 80119ee:	2b07      	cmp	r3, #7
 80119f0:	dd08      	ble.n	8011a04 <_vfiprintf_r+0x5e4>
 80119f2:	9903      	ldr	r1, [sp, #12]
 80119f4:	9806      	ldr	r0, [sp, #24]
 80119f6:	aa14      	add	r2, sp, #80	; 0x50
 80119f8:	f7ff fcdd 	bl	80113b6 <__sprint_r>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d000      	beq.n	8011a02 <_vfiprintf_r+0x5e2>
 8011a00:	e177      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011a02:	ad17      	add	r5, sp, #92	; 0x5c
 8011a04:	9b05      	ldr	r3, [sp, #20]
 8011a06:	9a05      	ldr	r2, [sp, #20]
 8011a08:	606b      	str	r3, [r5, #4]
 8011a0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a0c:	602e      	str	r6, [r5, #0]
 8011a0e:	189b      	adds	r3, r3, r2
 8011a10:	9316      	str	r3, [sp, #88]	; 0x58
 8011a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a14:	3508      	adds	r5, #8
 8011a16:	3301      	adds	r3, #1
 8011a18:	9315      	str	r3, [sp, #84]	; 0x54
 8011a1a:	2b07      	cmp	r3, #7
 8011a1c:	dd08      	ble.n	8011a30 <_vfiprintf_r+0x610>
 8011a1e:	9903      	ldr	r1, [sp, #12]
 8011a20:	9806      	ldr	r0, [sp, #24]
 8011a22:	aa14      	add	r2, sp, #80	; 0x50
 8011a24:	f7ff fcc7 	bl	80113b6 <__sprint_r>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d000      	beq.n	8011a2e <_vfiprintf_r+0x60e>
 8011a2c:	e161      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011a2e:	ad17      	add	r5, sp, #92	; 0x5c
 8011a30:	0764      	lsls	r4, r4, #29
 8011a32:	d500      	bpl.n	8011a36 <_vfiprintf_r+0x616>
 8011a34:	e140      	b.n	8011cb8 <_vfiprintf_r+0x898>
 8011a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	da00      	bge.n	8011a40 <_vfiprintf_r+0x620>
 8011a3e:	0013      	movs	r3, r2
 8011a40:	9a08      	ldr	r2, [sp, #32]
 8011a42:	18d3      	adds	r3, r2, r3
 8011a44:	9308      	str	r3, [sp, #32]
 8011a46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d007      	beq.n	8011a5c <_vfiprintf_r+0x63c>
 8011a4c:	9903      	ldr	r1, [sp, #12]
 8011a4e:	9806      	ldr	r0, [sp, #24]
 8011a50:	aa14      	add	r2, sp, #80	; 0x50
 8011a52:	f7ff fcb0 	bl	80113b6 <__sprint_r>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d000      	beq.n	8011a5c <_vfiprintf_r+0x63c>
 8011a5a:	e14a      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	ad17      	add	r5, sp, #92	; 0x5c
 8011a60:	9315      	str	r3, [sp, #84]	; 0x54
 8011a62:	e6b7      	b.n	80117d4 <_vfiprintf_r+0x3b4>
 8011a64:	0030      	movs	r0, r6
 8011a66:	f7ee fb4d 	bl	8000104 <strlen>
 8011a6a:	9005      	str	r0, [sp, #20]
 8011a6c:	e719      	b.n	80118a2 <_vfiprintf_r+0x482>
 8011a6e:	2310      	movs	r3, #16
 8011a70:	431c      	orrs	r4, r3
 8011a72:	2320      	movs	r3, #32
 8011a74:	0020      	movs	r0, r4
 8011a76:	4018      	ands	r0, r3
 8011a78:	421c      	tst	r4, r3
 8011a7a:	d009      	beq.n	8011a90 <_vfiprintf_r+0x670>
 8011a7c:	3b19      	subs	r3, #25
 8011a7e:	3707      	adds	r7, #7
 8011a80:	439f      	bics	r7, r3
 8011a82:	0039      	movs	r1, r7
 8011a84:	c90c      	ldmia	r1!, {r2, r3}
 8011a86:	9200      	str	r2, [sp, #0]
 8011a88:	9301      	str	r3, [sp, #4]
 8011a8a:	9104      	str	r1, [sp, #16]
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e6c7      	b.n	8011820 <_vfiprintf_r+0x400>
 8011a90:	003b      	movs	r3, r7
 8011a92:	cb04      	ldmia	r3!, {r2}
 8011a94:	0021      	movs	r1, r4
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	2310      	movs	r3, #16
 8011a9a:	4019      	ands	r1, r3
 8011a9c:	421c      	tst	r4, r3
 8011a9e:	d003      	beq.n	8011aa8 <_vfiprintf_r+0x688>
 8011aa0:	9200      	str	r2, [sp, #0]
 8011aa2:	9001      	str	r0, [sp, #4]
 8011aa4:	3b0f      	subs	r3, #15
 8011aa6:	e6bb      	b.n	8011820 <_vfiprintf_r+0x400>
 8011aa8:	2340      	movs	r3, #64	; 0x40
 8011aaa:	0020      	movs	r0, r4
 8011aac:	4018      	ands	r0, r3
 8011aae:	421c      	tst	r4, r3
 8011ab0:	d003      	beq.n	8011aba <_vfiprintf_r+0x69a>
 8011ab2:	b293      	uxth	r3, r2
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	9101      	str	r1, [sp, #4]
 8011ab8:	e7e8      	b.n	8011a8c <_vfiprintf_r+0x66c>
 8011aba:	2380      	movs	r3, #128	; 0x80
 8011abc:	0021      	movs	r1, r4
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4019      	ands	r1, r3
 8011ac2:	421c      	tst	r4, r3
 8011ac4:	d003      	beq.n	8011ace <_vfiprintf_r+0x6ae>
 8011ac6:	b2d3      	uxtb	r3, r2
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	9001      	str	r0, [sp, #4]
 8011acc:	e7de      	b.n	8011a8c <_vfiprintf_r+0x66c>
 8011ace:	9200      	str	r2, [sp, #0]
 8011ad0:	e7f1      	b.n	8011ab6 <_vfiprintf_r+0x696>
 8011ad2:	4a23      	ldr	r2, [pc, #140]	; (8011b60 <_vfiprintf_r+0x740>)
 8011ad4:	0020      	movs	r0, r4
 8011ad6:	920c      	str	r2, [sp, #48]	; 0x30
 8011ad8:	2220      	movs	r2, #32
 8011ada:	4010      	ands	r0, r2
 8011adc:	4214      	tst	r4, r2
 8011ade:	d019      	beq.n	8011b14 <_vfiprintf_r+0x6f4>
 8011ae0:	3a19      	subs	r2, #25
 8011ae2:	3707      	adds	r7, #7
 8011ae4:	4397      	bics	r7, r2
 8011ae6:	0038      	movs	r0, r7
 8011ae8:	c806      	ldmia	r0!, {r1, r2}
 8011aea:	9100      	str	r1, [sp, #0]
 8011aec:	9201      	str	r2, [sp, #4]
 8011aee:	9004      	str	r0, [sp, #16]
 8011af0:	07e2      	lsls	r2, r4, #31
 8011af2:	d509      	bpl.n	8011b08 <_vfiprintf_r+0x6e8>
 8011af4:	9a00      	ldr	r2, [sp, #0]
 8011af6:	9901      	ldr	r1, [sp, #4]
 8011af8:	430a      	orrs	r2, r1
 8011afa:	d005      	beq.n	8011b08 <_vfiprintf_r+0x6e8>
 8011afc:	aa13      	add	r2, sp, #76	; 0x4c
 8011afe:	2130      	movs	r1, #48	; 0x30
 8011b00:	7053      	strb	r3, [r2, #1]
 8011b02:	2302      	movs	r3, #2
 8011b04:	7011      	strb	r1, [r2, #0]
 8011b06:	431c      	orrs	r4, r3
 8011b08:	4b10      	ldr	r3, [pc, #64]	; (8011b4c <_vfiprintf_r+0x72c>)
 8011b0a:	401c      	ands	r4, r3
 8011b0c:	2302      	movs	r3, #2
 8011b0e:	e687      	b.n	8011820 <_vfiprintf_r+0x400>
 8011b10:	4a10      	ldr	r2, [pc, #64]	; (8011b54 <_vfiprintf_r+0x734>)
 8011b12:	e7df      	b.n	8011ad4 <_vfiprintf_r+0x6b4>
 8011b14:	0039      	movs	r1, r7
 8011b16:	c904      	ldmia	r1!, {r2}
 8011b18:	0026      	movs	r6, r4
 8011b1a:	9104      	str	r1, [sp, #16]
 8011b1c:	2110      	movs	r1, #16
 8011b1e:	400e      	ands	r6, r1
 8011b20:	420c      	tst	r4, r1
 8011b22:	d002      	beq.n	8011b2a <_vfiprintf_r+0x70a>
 8011b24:	9200      	str	r2, [sp, #0]
 8011b26:	9001      	str	r0, [sp, #4]
 8011b28:	e7e2      	b.n	8011af0 <_vfiprintf_r+0x6d0>
 8011b2a:	2140      	movs	r1, #64	; 0x40
 8011b2c:	0020      	movs	r0, r4
 8011b2e:	4008      	ands	r0, r1
 8011b30:	420c      	tst	r4, r1
 8011b32:	d003      	beq.n	8011b3c <_vfiprintf_r+0x71c>
 8011b34:	b292      	uxth	r2, r2
 8011b36:	9200      	str	r2, [sp, #0]
 8011b38:	9601      	str	r6, [sp, #4]
 8011b3a:	e7d9      	b.n	8011af0 <_vfiprintf_r+0x6d0>
 8011b3c:	2180      	movs	r1, #128	; 0x80
 8011b3e:	0026      	movs	r6, r4
 8011b40:	0089      	lsls	r1, r1, #2
 8011b42:	400e      	ands	r6, r1
 8011b44:	420c      	tst	r4, r1
 8011b46:	d0f6      	beq.n	8011b36 <_vfiprintf_r+0x716>
 8011b48:	b2d2      	uxtb	r2, r2
 8011b4a:	e7eb      	b.n	8011b24 <_vfiprintf_r+0x704>
 8011b4c:	fffffbff 	.word	0xfffffbff
 8011b50:	00007830 	.word	0x00007830
 8011b54:	08014604 	.word	0x08014604
 8011b58:	08014711 	.word	0x08014711
 8011b5c:	08014721 	.word	0x08014721
 8011b60:	08014615 	.word	0x08014615
 8011b64:	9b01      	ldr	r3, [sp, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d109      	bne.n	8011b7e <_vfiprintf_r+0x75e>
 8011b6a:	9b00      	ldr	r3, [sp, #0]
 8011b6c:	2b09      	cmp	r3, #9
 8011b6e:	d806      	bhi.n	8011b7e <_vfiprintf_r+0x75e>
 8011b70:	26b7      	movs	r6, #183	; 0xb7
 8011b72:	ab12      	add	r3, sp, #72	; 0x48
 8011b74:	18f6      	adds	r6, r6, r3
 8011b76:	9b00      	ldr	r3, [sp, #0]
 8011b78:	3330      	adds	r3, #48	; 0x30
 8011b7a:	7033      	strb	r3, [r6, #0]
 8011b7c:	e115      	b.n	8011daa <_vfiprintf_r+0x98a>
 8011b7e:	2380      	movs	r3, #128	; 0x80
 8011b80:	2400      	movs	r4, #0
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	403b      	ands	r3, r7
 8011b86:	ae40      	add	r6, sp, #256	; 0x100
 8011b88:	930a      	str	r3, [sp, #40]	; 0x28
 8011b8a:	220a      	movs	r2, #10
 8011b8c:	9800      	ldr	r0, [sp, #0]
 8011b8e:	9901      	ldr	r1, [sp, #4]
 8011b90:	2300      	movs	r3, #0
 8011b92:	f7ee fc87 	bl	80004a4 <__aeabi_uldivmod>
 8011b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b98:	3e01      	subs	r6, #1
 8011b9a:	3230      	adds	r2, #48	; 0x30
 8011b9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b9e:	9110      	str	r1, [sp, #64]	; 0x40
 8011ba0:	7032      	strb	r2, [r6, #0]
 8011ba2:	3401      	adds	r4, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d01a      	beq.n	8011bde <_vfiprintf_r+0x7be>
 8011ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	42a3      	cmp	r3, r4
 8011bae:	d116      	bne.n	8011bde <_vfiprintf_r+0x7be>
 8011bb0:	2cff      	cmp	r4, #255	; 0xff
 8011bb2:	d014      	beq.n	8011bde <_vfiprintf_r+0x7be>
 8011bb4:	9b01      	ldr	r3, [sp, #4]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d102      	bne.n	8011bc0 <_vfiprintf_r+0x7a0>
 8011bba:	9b00      	ldr	r3, [sp, #0]
 8011bbc:	2b09      	cmp	r3, #9
 8011bbe:	d90e      	bls.n	8011bde <_vfiprintf_r+0x7be>
 8011bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011bc4:	1af6      	subs	r6, r6, r3
 8011bc6:	001a      	movs	r2, r3
 8011bc8:	0030      	movs	r0, r6
 8011bca:	f7f9 ffe6 	bl	800bb9a <strncpy>
 8011bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bd0:	2400      	movs	r4, #0
 8011bd2:	785b      	ldrb	r3, [r3, #1]
 8011bd4:	1e5a      	subs	r2, r3, #1
 8011bd6:	4193      	sbcs	r3, r2
 8011bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011bda:	18d3      	adds	r3, r2, r3
 8011bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8011bde:	9b01      	ldr	r3, [sp, #4]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d103      	bne.n	8011bec <_vfiprintf_r+0x7cc>
 8011be4:	9b00      	ldr	r3, [sp, #0]
 8011be6:	2b09      	cmp	r3, #9
 8011be8:	d800      	bhi.n	8011bec <_vfiprintf_r+0x7cc>
 8011bea:	e0de      	b.n	8011daa <_vfiprintf_r+0x98a>
 8011bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bf2:	9301      	str	r3, [sp, #4]
 8011bf4:	e7c9      	b.n	8011b8a <_vfiprintf_r+0x76a>
 8011bf6:	200f      	movs	r0, #15
 8011bf8:	9b00      	ldr	r3, [sp, #0]
 8011bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bfc:	4003      	ands	r3, r0
 8011bfe:	5cd3      	ldrb	r3, [r2, r3]
 8011c00:	3e01      	subs	r6, #1
 8011c02:	7033      	strb	r3, [r6, #0]
 8011c04:	9b01      	ldr	r3, [sp, #4]
 8011c06:	0719      	lsls	r1, r3, #28
 8011c08:	9b00      	ldr	r3, [sp, #0]
 8011c0a:	091a      	lsrs	r2, r3, #4
 8011c0c:	9b01      	ldr	r3, [sp, #4]
 8011c0e:	4311      	orrs	r1, r2
 8011c10:	091b      	lsrs	r3, r3, #4
 8011c12:	9301      	str	r3, [sp, #4]
 8011c14:	000b      	movs	r3, r1
 8011c16:	9a01      	ldr	r2, [sp, #4]
 8011c18:	9100      	str	r1, [sp, #0]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	d1ec      	bne.n	8011bf8 <_vfiprintf_r+0x7d8>
 8011c1e:	e0c4      	b.n	8011daa <_vfiprintf_r+0x98a>
 8011c20:	ae40      	add	r6, sp, #256	; 0x100
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d000      	beq.n	8011c28 <_vfiprintf_r+0x808>
 8011c26:	e0c0      	b.n	8011daa <_vfiprintf_r+0x98a>
 8011c28:	07e4      	lsls	r4, r4, #31
 8011c2a:	d400      	bmi.n	8011c2e <_vfiprintf_r+0x80e>
 8011c2c:	e0bd      	b.n	8011daa <_vfiprintf_r+0x98a>
 8011c2e:	26b7      	movs	r6, #183	; 0xb7
 8011c30:	ab12      	add	r3, sp, #72	; 0x48
 8011c32:	18f6      	adds	r6, r6, r3
 8011c34:	2330      	movs	r3, #48	; 0x30
 8011c36:	e7a0      	b.n	8011b7a <_vfiprintf_r+0x75a>
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d100      	bne.n	8011c3e <_vfiprintf_r+0x81e>
 8011c3c:	e07e      	b.n	8011d3c <_vfiprintf_r+0x91c>
 8011c3e:	ae27      	add	r6, sp, #156	; 0x9c
 8011c40:	7033      	strb	r3, [r6, #0]
 8011c42:	2300      	movs	r3, #0
 8011c44:	aa12      	add	r2, sp, #72	; 0x48
 8011c46:	70d3      	strb	r3, [r2, #3]
 8011c48:	9704      	str	r7, [sp, #16]
 8011c4a:	e576      	b.n	801173a <_vfiprintf_r+0x31a>
 8011c4c:	2010      	movs	r0, #16
 8011c4e:	1812      	adds	r2, r2, r0
 8011c50:	6068      	str	r0, [r5, #4]
 8011c52:	9216      	str	r2, [sp, #88]	; 0x58
 8011c54:	9315      	str	r3, [sp, #84]	; 0x54
 8011c56:	2b07      	cmp	r3, #7
 8011c58:	dd07      	ble.n	8011c6a <_vfiprintf_r+0x84a>
 8011c5a:	9903      	ldr	r1, [sp, #12]
 8011c5c:	9806      	ldr	r0, [sp, #24]
 8011c5e:	aa14      	add	r2, sp, #80	; 0x50
 8011c60:	f7ff fba9 	bl	80113b6 <__sprint_r>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d144      	bne.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011c68:	a917      	add	r1, sp, #92	; 0x5c
 8011c6a:	000d      	movs	r5, r1
 8011c6c:	3f10      	subs	r7, #16
 8011c6e:	e63b      	b.n	80118e8 <_vfiprintf_r+0x4c8>
 8011c70:	2010      	movs	r0, #16
 8011c72:	1812      	adds	r2, r2, r0
 8011c74:	6068      	str	r0, [r5, #4]
 8011c76:	9216      	str	r2, [sp, #88]	; 0x58
 8011c78:	9315      	str	r3, [sp, #84]	; 0x54
 8011c7a:	2b07      	cmp	r3, #7
 8011c7c:	dd07      	ble.n	8011c8e <_vfiprintf_r+0x86e>
 8011c7e:	9903      	ldr	r1, [sp, #12]
 8011c80:	9806      	ldr	r0, [sp, #24]
 8011c82:	aa14      	add	r2, sp, #80	; 0x50
 8011c84:	f7ff fb97 	bl	80113b6 <__sprint_r>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d132      	bne.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011c8c:	a917      	add	r1, sp, #92	; 0x5c
 8011c8e:	000d      	movs	r5, r1
 8011c90:	3f10      	subs	r7, #16
 8011c92:	e67e      	b.n	8011992 <_vfiprintf_r+0x572>
 8011c94:	2010      	movs	r0, #16
 8011c96:	1812      	adds	r2, r2, r0
 8011c98:	6068      	str	r0, [r5, #4]
 8011c9a:	9216      	str	r2, [sp, #88]	; 0x58
 8011c9c:	9315      	str	r3, [sp, #84]	; 0x54
 8011c9e:	2b07      	cmp	r3, #7
 8011ca0:	dd07      	ble.n	8011cb2 <_vfiprintf_r+0x892>
 8011ca2:	9903      	ldr	r1, [sp, #12]
 8011ca4:	9806      	ldr	r0, [sp, #24]
 8011ca6:	aa14      	add	r2, sp, #80	; 0x50
 8011ca8:	f7ff fb85 	bl	80113b6 <__sprint_r>
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d120      	bne.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011cb0:	a917      	add	r1, sp, #92	; 0x5c
 8011cb2:	000d      	movs	r5, r1
 8011cb4:	3f10      	subs	r7, #16
 8011cb6:	e68b      	b.n	80119d0 <_vfiprintf_r+0x5b0>
 8011cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cbc:	2610      	movs	r6, #16
 8011cbe:	1a9c      	subs	r4, r3, r2
 8011cc0:	2c00      	cmp	r4, #0
 8011cc2:	dc00      	bgt.n	8011cc6 <_vfiprintf_r+0x8a6>
 8011cc4:	e6b7      	b.n	8011a36 <_vfiprintf_r+0x616>
 8011cc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011cc8:	4a3b      	ldr	r2, [pc, #236]	; (8011db8 <_vfiprintf_r+0x998>)
 8011cca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ccc:	3101      	adds	r1, #1
 8011cce:	602a      	str	r2, [r5, #0]
 8011cd0:	2c10      	cmp	r4, #16
 8011cd2:	dc22      	bgt.n	8011d1a <_vfiprintf_r+0x8fa>
 8011cd4:	606c      	str	r4, [r5, #4]
 8011cd6:	18e4      	adds	r4, r4, r3
 8011cd8:	9416      	str	r4, [sp, #88]	; 0x58
 8011cda:	9115      	str	r1, [sp, #84]	; 0x54
 8011cdc:	2907      	cmp	r1, #7
 8011cde:	dc00      	bgt.n	8011ce2 <_vfiprintf_r+0x8c2>
 8011ce0:	e6a9      	b.n	8011a36 <_vfiprintf_r+0x616>
 8011ce2:	9903      	ldr	r1, [sp, #12]
 8011ce4:	9806      	ldr	r0, [sp, #24]
 8011ce6:	aa14      	add	r2, sp, #80	; 0x50
 8011ce8:	f7ff fb65 	bl	80113b6 <__sprint_r>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d100      	bne.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011cf0:	e6a1      	b.n	8011a36 <_vfiprintf_r+0x616>
 8011cf2:	9b03      	ldr	r3, [sp, #12]
 8011cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cf6:	07db      	lsls	r3, r3, #31
 8011cf8:	d407      	bmi.n	8011d0a <_vfiprintf_r+0x8ea>
 8011cfa:	9b03      	ldr	r3, [sp, #12]
 8011cfc:	899b      	ldrh	r3, [r3, #12]
 8011cfe:	059b      	lsls	r3, r3, #22
 8011d00:	d403      	bmi.n	8011d0a <_vfiprintf_r+0x8ea>
 8011d02:	9b03      	ldr	r3, [sp, #12]
 8011d04:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011d06:	f7fa f808 	bl	800bd1a <__retarget_lock_release_recursive>
 8011d0a:	9b03      	ldr	r3, [sp, #12]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	065b      	lsls	r3, r3, #25
 8011d10:	d401      	bmi.n	8011d16 <_vfiprintf_r+0x8f6>
 8011d12:	f7ff fbc3 	bl	801149c <_vfiprintf_r+0x7c>
 8011d16:	f7ff fbbe 	bl	8011496 <_vfiprintf_r+0x76>
 8011d1a:	3310      	adds	r3, #16
 8011d1c:	606e      	str	r6, [r5, #4]
 8011d1e:	9316      	str	r3, [sp, #88]	; 0x58
 8011d20:	9115      	str	r1, [sp, #84]	; 0x54
 8011d22:	3508      	adds	r5, #8
 8011d24:	2907      	cmp	r1, #7
 8011d26:	dd07      	ble.n	8011d38 <_vfiprintf_r+0x918>
 8011d28:	9903      	ldr	r1, [sp, #12]
 8011d2a:	9806      	ldr	r0, [sp, #24]
 8011d2c:	aa14      	add	r2, sp, #80	; 0x50
 8011d2e:	f7ff fb42 	bl	80113b6 <__sprint_r>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d1dd      	bne.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011d36:	ad17      	add	r5, sp, #92	; 0x5c
 8011d38:	3c10      	subs	r4, #16
 8011d3a:	e7c4      	b.n	8011cc6 <_vfiprintf_r+0x8a6>
 8011d3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d102      	bne.n	8011d48 <_vfiprintf_r+0x928>
 8011d42:	2300      	movs	r3, #0
 8011d44:	9315      	str	r3, [sp, #84]	; 0x54
 8011d46:	e7d4      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011d48:	9903      	ldr	r1, [sp, #12]
 8011d4a:	9806      	ldr	r0, [sp, #24]
 8011d4c:	aa14      	add	r2, sp, #80	; 0x50
 8011d4e:	f7ff fb32 	bl	80113b6 <__sprint_r>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d0f5      	beq.n	8011d42 <_vfiprintf_r+0x922>
 8011d56:	e7cc      	b.n	8011cf2 <_vfiprintf_r+0x8d2>
 8011d58:	0027      	movs	r7, r4
 8011d5a:	2a00      	cmp	r2, #0
 8011d5c:	d100      	bne.n	8011d60 <_vfiprintf_r+0x940>
 8011d5e:	e51b      	b.n	8011798 <_vfiprintf_r+0x378>
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d100      	bne.n	8011d66 <_vfiprintf_r+0x946>
 8011d64:	e6fe      	b.n	8011b64 <_vfiprintf_r+0x744>
 8011d66:	ae40      	add	r6, sp, #256	; 0x100
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d100      	bne.n	8011d6e <_vfiprintf_r+0x94e>
 8011d6c:	e743      	b.n	8011bf6 <_vfiprintf_r+0x7d6>
 8011d6e:	2307      	movs	r3, #7
 8011d70:	469c      	mov	ip, r3
 8011d72:	4663      	mov	r3, ip
 8011d74:	9900      	ldr	r1, [sp, #0]
 8011d76:	0032      	movs	r2, r6
 8011d78:	400b      	ands	r3, r1
 8011d7a:	9901      	ldr	r1, [sp, #4]
 8011d7c:	3e01      	subs	r6, #1
 8011d7e:	074c      	lsls	r4, r1, #29
 8011d80:	9900      	ldr	r1, [sp, #0]
 8011d82:	3330      	adds	r3, #48	; 0x30
 8011d84:	08c8      	lsrs	r0, r1, #3
 8011d86:	9901      	ldr	r1, [sp, #4]
 8011d88:	4304      	orrs	r4, r0
 8011d8a:	08c9      	lsrs	r1, r1, #3
 8011d8c:	9101      	str	r1, [sp, #4]
 8011d8e:	0021      	movs	r1, r4
 8011d90:	9801      	ldr	r0, [sp, #4]
 8011d92:	7033      	strb	r3, [r6, #0]
 8011d94:	9400      	str	r4, [sp, #0]
 8011d96:	4301      	orrs	r1, r0
 8011d98:	d1eb      	bne.n	8011d72 <_vfiprintf_r+0x952>
 8011d9a:	07f9      	lsls	r1, r7, #31
 8011d9c:	d505      	bpl.n	8011daa <_vfiprintf_r+0x98a>
 8011d9e:	2b30      	cmp	r3, #48	; 0x30
 8011da0:	d003      	beq.n	8011daa <_vfiprintf_r+0x98a>
 8011da2:	2330      	movs	r3, #48	; 0x30
 8011da4:	3e01      	subs	r6, #1
 8011da6:	7033      	strb	r3, [r6, #0]
 8011da8:	1e96      	subs	r6, r2, #2
 8011daa:	9b05      	ldr	r3, [sp, #20]
 8011dac:	003c      	movs	r4, r7
 8011dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8011db0:	ab40      	add	r3, sp, #256	; 0x100
 8011db2:	1b9b      	subs	r3, r3, r6
 8011db4:	9305      	str	r3, [sp, #20]
 8011db6:	e575      	b.n	80118a4 <_vfiprintf_r+0x484>
 8011db8:	08014711 	.word	0x08014711

08011dbc <__sbprintf>:
 8011dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dbe:	0015      	movs	r5, r2
 8011dc0:	2202      	movs	r2, #2
 8011dc2:	4c1e      	ldr	r4, [pc, #120]	; (8011e3c <__sbprintf+0x80>)
 8011dc4:	001f      	movs	r7, r3
 8011dc6:	898b      	ldrh	r3, [r1, #12]
 8011dc8:	44a5      	add	sp, r4
 8011dca:	4393      	bics	r3, r2
 8011dcc:	466a      	mov	r2, sp
 8011dce:	8193      	strh	r3, [r2, #12]
 8011dd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011dd2:	0006      	movs	r6, r0
 8011dd4:	9319      	str	r3, [sp, #100]	; 0x64
 8011dd6:	89cb      	ldrh	r3, [r1, #14]
 8011dd8:	a816      	add	r0, sp, #88	; 0x58
 8011dda:	81d3      	strh	r3, [r2, #14]
 8011ddc:	69cb      	ldr	r3, [r1, #28]
 8011dde:	000c      	movs	r4, r1
 8011de0:	9307      	str	r3, [sp, #28]
 8011de2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011de4:	9309      	str	r3, [sp, #36]	; 0x24
 8011de6:	ab1a      	add	r3, sp, #104	; 0x68
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	2380      	movs	r3, #128	; 0x80
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	9302      	str	r3, [sp, #8]
 8011df2:	9305      	str	r3, [sp, #20]
 8011df4:	2300      	movs	r3, #0
 8011df6:	9306      	str	r3, [sp, #24]
 8011df8:	f7f9 ff8c 	bl	800bd14 <__retarget_lock_init_recursive>
 8011dfc:	002a      	movs	r2, r5
 8011dfe:	003b      	movs	r3, r7
 8011e00:	4669      	mov	r1, sp
 8011e02:	0030      	movs	r0, r6
 8011e04:	f7ff fb0c 	bl	8011420 <_vfiprintf_r>
 8011e08:	1e05      	subs	r5, r0, #0
 8011e0a:	db07      	blt.n	8011e1c <__sbprintf+0x60>
 8011e0c:	4669      	mov	r1, sp
 8011e0e:	0030      	movs	r0, r6
 8011e10:	f7fd fdf6 	bl	800fa00 <_fflush_r>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	d001      	beq.n	8011e1c <__sbprintf+0x60>
 8011e18:	2501      	movs	r5, #1
 8011e1a:	426d      	negs	r5, r5
 8011e1c:	466b      	mov	r3, sp
 8011e1e:	899a      	ldrh	r2, [r3, #12]
 8011e20:	2340      	movs	r3, #64	; 0x40
 8011e22:	421a      	tst	r2, r3
 8011e24:	d002      	beq.n	8011e2c <__sbprintf+0x70>
 8011e26:	89a2      	ldrh	r2, [r4, #12]
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	81a3      	strh	r3, [r4, #12]
 8011e2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011e2e:	f7f9 ff72 	bl	800bd16 <__retarget_lock_close_recursive>
 8011e32:	0028      	movs	r0, r5
 8011e34:	4b02      	ldr	r3, [pc, #8]	; (8011e40 <__sbprintf+0x84>)
 8011e36:	449d      	add	sp, r3
 8011e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e3a:	46c0      	nop			; (mov r8, r8)
 8011e3c:	fffffb94 	.word	0xfffffb94
 8011e40:	0000046c 	.word	0x0000046c

08011e44 <__sfvwrite_r>:
 8011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e46:	6893      	ldr	r3, [r2, #8]
 8011e48:	b087      	sub	sp, #28
 8011e4a:	000c      	movs	r4, r1
 8011e4c:	9002      	str	r0, [sp, #8]
 8011e4e:	9204      	str	r2, [sp, #16]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d102      	bne.n	8011e5a <__sfvwrite_r+0x16>
 8011e54:	2000      	movs	r0, #0
 8011e56:	b007      	add	sp, #28
 8011e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e5a:	898b      	ldrh	r3, [r1, #12]
 8011e5c:	071b      	lsls	r3, r3, #28
 8011e5e:	d557      	bpl.n	8011f10 <__sfvwrite_r+0xcc>
 8011e60:	690b      	ldr	r3, [r1, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d054      	beq.n	8011f10 <__sfvwrite_r+0xcc>
 8011e66:	9b04      	ldr	r3, [sp, #16]
 8011e68:	2202      	movs	r2, #2
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	001f      	movs	r7, r3
 8011e72:	4017      	ands	r7, r2
 8011e74:	4213      	tst	r3, r2
 8011e76:	d171      	bne.n	8011f5c <__sfvwrite_r+0x118>
 8011e78:	2201      	movs	r2, #1
 8011e7a:	2101      	movs	r1, #1
 8011e7c:	401a      	ands	r2, r3
 8011e7e:	420b      	tst	r3, r1
 8011e80:	d100      	bne.n	8011e84 <__sfvwrite_r+0x40>
 8011e82:	e0a5      	b.n	8011fd0 <__sfvwrite_r+0x18c>
 8011e84:	0038      	movs	r0, r7
 8011e86:	003e      	movs	r6, r7
 8011e88:	9703      	str	r7, [sp, #12]
 8011e8a:	9b03      	ldr	r3, [sp, #12]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d100      	bne.n	8011e92 <__sfvwrite_r+0x4e>
 8011e90:	e10b      	b.n	80120aa <__sfvwrite_r+0x266>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d10a      	bne.n	8011eac <__sfvwrite_r+0x68>
 8011e96:	001a      	movs	r2, r3
 8011e98:	210a      	movs	r1, #10
 8011e9a:	0030      	movs	r0, r6
 8011e9c:	f7fd fe2a 	bl	800faf4 <memchr>
 8011ea0:	9b03      	ldr	r3, [sp, #12]
 8011ea2:	1c5f      	adds	r7, r3, #1
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d001      	beq.n	8011eac <__sfvwrite_r+0x68>
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	1b87      	subs	r7, r0, r6
 8011eac:	9b03      	ldr	r3, [sp, #12]
 8011eae:	9705      	str	r7, [sp, #20]
 8011eb0:	429f      	cmp	r7, r3
 8011eb2:	d900      	bls.n	8011eb6 <__sfvwrite_r+0x72>
 8011eb4:	9305      	str	r3, [sp, #20]
 8011eb6:	6820      	ldr	r0, [r4, #0]
 8011eb8:	6922      	ldr	r2, [r4, #16]
 8011eba:	68a5      	ldr	r5, [r4, #8]
 8011ebc:	6963      	ldr	r3, [r4, #20]
 8011ebe:	4290      	cmp	r0, r2
 8011ec0:	d800      	bhi.n	8011ec4 <__sfvwrite_r+0x80>
 8011ec2:	e0fb      	b.n	80120bc <__sfvwrite_r+0x278>
 8011ec4:	9a05      	ldr	r2, [sp, #20]
 8011ec6:	18ed      	adds	r5, r5, r3
 8011ec8:	42aa      	cmp	r2, r5
 8011eca:	dc00      	bgt.n	8011ece <__sfvwrite_r+0x8a>
 8011ecc:	e0f6      	b.n	80120bc <__sfvwrite_r+0x278>
 8011ece:	0031      	movs	r1, r6
 8011ed0:	002a      	movs	r2, r5
 8011ed2:	f000 fa1e 	bl	8012312 <memmove>
 8011ed6:	6823      	ldr	r3, [r4, #0]
 8011ed8:	0021      	movs	r1, r4
 8011eda:	195b      	adds	r3, r3, r5
 8011edc:	9802      	ldr	r0, [sp, #8]
 8011ede:	6023      	str	r3, [r4, #0]
 8011ee0:	f7fd fd8e 	bl	800fa00 <_fflush_r>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d16e      	bne.n	8011fc6 <__sfvwrite_r+0x182>
 8011ee8:	2001      	movs	r0, #1
 8011eea:	1b7f      	subs	r7, r7, r5
 8011eec:	d105      	bne.n	8011efa <__sfvwrite_r+0xb6>
 8011eee:	0021      	movs	r1, r4
 8011ef0:	9802      	ldr	r0, [sp, #8]
 8011ef2:	f7fd fd85 	bl	800fa00 <_fflush_r>
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d165      	bne.n	8011fc6 <__sfvwrite_r+0x182>
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	9a04      	ldr	r2, [sp, #16]
 8011efe:	1b5b      	subs	r3, r3, r5
 8011f00:	9303      	str	r3, [sp, #12]
 8011f02:	9b04      	ldr	r3, [sp, #16]
 8011f04:	1976      	adds	r6, r6, r5
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	1b5b      	subs	r3, r3, r5
 8011f0a:	6093      	str	r3, [r2, #8]
 8011f0c:	d1bd      	bne.n	8011e8a <__sfvwrite_r+0x46>
 8011f0e:	e7a1      	b.n	8011e54 <__sfvwrite_r+0x10>
 8011f10:	0021      	movs	r1, r4
 8011f12:	9802      	ldr	r0, [sp, #8]
 8011f14:	f000 f932 	bl	801217c <__swsetup_r>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d0a4      	beq.n	8011e66 <__sfvwrite_r+0x22>
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	4240      	negs	r0, r0
 8011f20:	e799      	b.n	8011e56 <__sfvwrite_r+0x12>
 8011f22:	9b01      	ldr	r3, [sp, #4]
 8011f24:	681e      	ldr	r6, [r3, #0]
 8011f26:	685d      	ldr	r5, [r3, #4]
 8011f28:	3308      	adds	r3, #8
 8011f2a:	9301      	str	r3, [sp, #4]
 8011f2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011f2e:	69e1      	ldr	r1, [r4, #28]
 8011f30:	2d00      	cmp	r5, #0
 8011f32:	d0f6      	beq.n	8011f22 <__sfvwrite_r+0xde>
 8011f34:	4a6e      	ldr	r2, [pc, #440]	; (80120f0 <__sfvwrite_r+0x2ac>)
 8011f36:	002b      	movs	r3, r5
 8011f38:	4295      	cmp	r5, r2
 8011f3a:	d900      	bls.n	8011f3e <__sfvwrite_r+0xfa>
 8011f3c:	0013      	movs	r3, r2
 8011f3e:	0032      	movs	r2, r6
 8011f40:	9802      	ldr	r0, [sp, #8]
 8011f42:	47b8      	blx	r7
 8011f44:	2800      	cmp	r0, #0
 8011f46:	dd3e      	ble.n	8011fc6 <__sfvwrite_r+0x182>
 8011f48:	9b04      	ldr	r3, [sp, #16]
 8011f4a:	9a04      	ldr	r2, [sp, #16]
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	1836      	adds	r6, r6, r0
 8011f50:	1a1b      	subs	r3, r3, r0
 8011f52:	1a2d      	subs	r5, r5, r0
 8011f54:	6093      	str	r3, [r2, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1e8      	bne.n	8011f2c <__sfvwrite_r+0xe8>
 8011f5a:	e77b      	b.n	8011e54 <__sfvwrite_r+0x10>
 8011f5c:	2600      	movs	r6, #0
 8011f5e:	0035      	movs	r5, r6
 8011f60:	e7e4      	b.n	8011f2c <__sfvwrite_r+0xe8>
 8011f62:	9b01      	ldr	r3, [sp, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	9303      	str	r3, [sp, #12]
 8011f68:	9b01      	ldr	r3, [sp, #4]
 8011f6a:	685d      	ldr	r5, [r3, #4]
 8011f6c:	3308      	adds	r3, #8
 8011f6e:	9301      	str	r3, [sp, #4]
 8011f70:	220c      	movs	r2, #12
 8011f72:	5ea3      	ldrsh	r3, [r4, r2]
 8011f74:	6820      	ldr	r0, [r4, #0]
 8011f76:	68a6      	ldr	r6, [r4, #8]
 8011f78:	2d00      	cmp	r5, #0
 8011f7a:	d0f2      	beq.n	8011f62 <__sfvwrite_r+0x11e>
 8011f7c:	2180      	movs	r1, #128	; 0x80
 8011f7e:	0089      	lsls	r1, r1, #2
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	420b      	tst	r3, r1
 8011f84:	d062      	beq.n	801204c <__sfvwrite_r+0x208>
 8011f86:	42ae      	cmp	r6, r5
 8011f88:	d837      	bhi.n	8011ffa <__sfvwrite_r+0x1b6>
 8011f8a:	2390      	movs	r3, #144	; 0x90
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	421a      	tst	r2, r3
 8011f90:	d033      	beq.n	8011ffa <__sfvwrite_r+0x1b6>
 8011f92:	6921      	ldr	r1, [r4, #16]
 8011f94:	1a43      	subs	r3, r0, r1
 8011f96:	2003      	movs	r0, #3
 8011f98:	9305      	str	r3, [sp, #20]
 8011f9a:	6963      	ldr	r3, [r4, #20]
 8011f9c:	4343      	muls	r3, r0
 8011f9e:	0fdf      	lsrs	r7, r3, #31
 8011fa0:	18ff      	adds	r7, r7, r3
 8011fa2:	9b05      	ldr	r3, [sp, #20]
 8011fa4:	107f      	asrs	r7, r7, #1
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	195b      	adds	r3, r3, r5
 8011faa:	42bb      	cmp	r3, r7
 8011fac:	d900      	bls.n	8011fb0 <__sfvwrite_r+0x16c>
 8011fae:	001f      	movs	r7, r3
 8011fb0:	0552      	lsls	r2, r2, #21
 8011fb2:	d53c      	bpl.n	801202e <__sfvwrite_r+0x1ea>
 8011fb4:	0039      	movs	r1, r7
 8011fb6:	9802      	ldr	r0, [sp, #8]
 8011fb8:	f7f8 fb56 	bl	800a668 <_malloc_r>
 8011fbc:	1e06      	subs	r6, r0, #0
 8011fbe:	d10a      	bne.n	8011fd6 <__sfvwrite_r+0x192>
 8011fc0:	230c      	movs	r3, #12
 8011fc2:	9a02      	ldr	r2, [sp, #8]
 8011fc4:	6013      	str	r3, [r2, #0]
 8011fc6:	2340      	movs	r3, #64	; 0x40
 8011fc8:	89a2      	ldrh	r2, [r4, #12]
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	81a3      	strh	r3, [r4, #12]
 8011fce:	e7a5      	b.n	8011f1c <__sfvwrite_r+0xd8>
 8011fd0:	0015      	movs	r5, r2
 8011fd2:	9203      	str	r2, [sp, #12]
 8011fd4:	e7cc      	b.n	8011f70 <__sfvwrite_r+0x12c>
 8011fd6:	9a05      	ldr	r2, [sp, #20]
 8011fd8:	6921      	ldr	r1, [r4, #16]
 8011fda:	f7f9 feaa 	bl	800bd32 <memcpy>
 8011fde:	89a2      	ldrh	r2, [r4, #12]
 8011fe0:	4b44      	ldr	r3, [pc, #272]	; (80120f4 <__sfvwrite_r+0x2b0>)
 8011fe2:	401a      	ands	r2, r3
 8011fe4:	2380      	movs	r3, #128	; 0x80
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	81a3      	strh	r3, [r4, #12]
 8011fea:	9b05      	ldr	r3, [sp, #20]
 8011fec:	6126      	str	r6, [r4, #16]
 8011fee:	18f6      	adds	r6, r6, r3
 8011ff0:	6026      	str	r6, [r4, #0]
 8011ff2:	002e      	movs	r6, r5
 8011ff4:	6167      	str	r7, [r4, #20]
 8011ff6:	1aff      	subs	r7, r7, r3
 8011ff8:	60a7      	str	r7, [r4, #8]
 8011ffa:	002f      	movs	r7, r5
 8011ffc:	42ae      	cmp	r6, r5
 8011ffe:	d900      	bls.n	8012002 <__sfvwrite_r+0x1be>
 8012000:	002e      	movs	r6, r5
 8012002:	0032      	movs	r2, r6
 8012004:	9903      	ldr	r1, [sp, #12]
 8012006:	6820      	ldr	r0, [r4, #0]
 8012008:	f000 f983 	bl	8012312 <memmove>
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	1b9b      	subs	r3, r3, r6
 8012010:	60a3      	str	r3, [r4, #8]
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	199b      	adds	r3, r3, r6
 8012016:	6023      	str	r3, [r4, #0]
 8012018:	9b03      	ldr	r3, [sp, #12]
 801201a:	9a04      	ldr	r2, [sp, #16]
 801201c:	19db      	adds	r3, r3, r7
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	9b04      	ldr	r3, [sp, #16]
 8012022:	1bed      	subs	r5, r5, r7
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	1bdb      	subs	r3, r3, r7
 8012028:	6093      	str	r3, [r2, #8]
 801202a:	d1a1      	bne.n	8011f70 <__sfvwrite_r+0x12c>
 801202c:	e712      	b.n	8011e54 <__sfvwrite_r+0x10>
 801202e:	003a      	movs	r2, r7
 8012030:	9802      	ldr	r0, [sp, #8]
 8012032:	f7fe fcd7 	bl	80109e4 <_realloc_r>
 8012036:	1e06      	subs	r6, r0, #0
 8012038:	d1d7      	bne.n	8011fea <__sfvwrite_r+0x1a6>
 801203a:	6921      	ldr	r1, [r4, #16]
 801203c:	9802      	ldr	r0, [sp, #8]
 801203e:	f7f9 fef3 	bl	800be28 <_free_r>
 8012042:	2280      	movs	r2, #128	; 0x80
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	4393      	bics	r3, r2
 8012048:	81a3      	strh	r3, [r4, #12]
 801204a:	e7b9      	b.n	8011fc0 <__sfvwrite_r+0x17c>
 801204c:	6923      	ldr	r3, [r4, #16]
 801204e:	4283      	cmp	r3, r0
 8012050:	d302      	bcc.n	8012058 <__sfvwrite_r+0x214>
 8012052:	6967      	ldr	r7, [r4, #20]
 8012054:	42af      	cmp	r7, r5
 8012056:	d916      	bls.n	8012086 <__sfvwrite_r+0x242>
 8012058:	42ae      	cmp	r6, r5
 801205a:	d900      	bls.n	801205e <__sfvwrite_r+0x21a>
 801205c:	002e      	movs	r6, r5
 801205e:	0032      	movs	r2, r6
 8012060:	9903      	ldr	r1, [sp, #12]
 8012062:	f000 f956 	bl	8012312 <memmove>
 8012066:	68a3      	ldr	r3, [r4, #8]
 8012068:	6822      	ldr	r2, [r4, #0]
 801206a:	1b9b      	subs	r3, r3, r6
 801206c:	1992      	adds	r2, r2, r6
 801206e:	0037      	movs	r7, r6
 8012070:	60a3      	str	r3, [r4, #8]
 8012072:	6022      	str	r2, [r4, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d1cf      	bne.n	8012018 <__sfvwrite_r+0x1d4>
 8012078:	0021      	movs	r1, r4
 801207a:	9802      	ldr	r0, [sp, #8]
 801207c:	f7fd fcc0 	bl	800fa00 <_fflush_r>
 8012080:	2800      	cmp	r0, #0
 8012082:	d0c9      	beq.n	8012018 <__sfvwrite_r+0x1d4>
 8012084:	e79f      	b.n	8011fc6 <__sfvwrite_r+0x182>
 8012086:	4b1c      	ldr	r3, [pc, #112]	; (80120f8 <__sfvwrite_r+0x2b4>)
 8012088:	0028      	movs	r0, r5
 801208a:	429d      	cmp	r5, r3
 801208c:	d900      	bls.n	8012090 <__sfvwrite_r+0x24c>
 801208e:	481b      	ldr	r0, [pc, #108]	; (80120fc <__sfvwrite_r+0x2b8>)
 8012090:	0039      	movs	r1, r7
 8012092:	f7ee f8dd 	bl	8000250 <__divsi3>
 8012096:	003b      	movs	r3, r7
 8012098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801209a:	4343      	muls	r3, r0
 801209c:	9a03      	ldr	r2, [sp, #12]
 801209e:	69e1      	ldr	r1, [r4, #28]
 80120a0:	9802      	ldr	r0, [sp, #8]
 80120a2:	47b0      	blx	r6
 80120a4:	1e07      	subs	r7, r0, #0
 80120a6:	dcb7      	bgt.n	8012018 <__sfvwrite_r+0x1d4>
 80120a8:	e78d      	b.n	8011fc6 <__sfvwrite_r+0x182>
 80120aa:	9b01      	ldr	r3, [sp, #4]
 80120ac:	2000      	movs	r0, #0
 80120ae:	681e      	ldr	r6, [r3, #0]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	9303      	str	r3, [sp, #12]
 80120b4:	9b01      	ldr	r3, [sp, #4]
 80120b6:	3308      	adds	r3, #8
 80120b8:	9301      	str	r3, [sp, #4]
 80120ba:	e6e6      	b.n	8011e8a <__sfvwrite_r+0x46>
 80120bc:	9a05      	ldr	r2, [sp, #20]
 80120be:	4293      	cmp	r3, r2
 80120c0:	dc08      	bgt.n	80120d4 <__sfvwrite_r+0x290>
 80120c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80120c4:	0032      	movs	r2, r6
 80120c6:	69e1      	ldr	r1, [r4, #28]
 80120c8:	9802      	ldr	r0, [sp, #8]
 80120ca:	47a8      	blx	r5
 80120cc:	1e05      	subs	r5, r0, #0
 80120ce:	dd00      	ble.n	80120d2 <__sfvwrite_r+0x28e>
 80120d0:	e70a      	b.n	8011ee8 <__sfvwrite_r+0xa4>
 80120d2:	e778      	b.n	8011fc6 <__sfvwrite_r+0x182>
 80120d4:	9a05      	ldr	r2, [sp, #20]
 80120d6:	0031      	movs	r1, r6
 80120d8:	f000 f91b 	bl	8012312 <memmove>
 80120dc:	9a05      	ldr	r2, [sp, #20]
 80120de:	68a3      	ldr	r3, [r4, #8]
 80120e0:	0015      	movs	r5, r2
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	60a3      	str	r3, [r4, #8]
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	189b      	adds	r3, r3, r2
 80120ea:	6023      	str	r3, [r4, #0]
 80120ec:	e6fc      	b.n	8011ee8 <__sfvwrite_r+0xa4>
 80120ee:	46c0      	nop			; (mov r8, r8)
 80120f0:	7ffffc00 	.word	0x7ffffc00
 80120f4:	fffffb7f 	.word	0xfffffb7f
 80120f8:	7ffffffe 	.word	0x7ffffffe
 80120fc:	7fffffff 	.word	0x7fffffff

08012100 <__submore>:
 8012100:	000b      	movs	r3, r1
 8012102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012104:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012106:	3340      	adds	r3, #64	; 0x40
 8012108:	000c      	movs	r4, r1
 801210a:	429d      	cmp	r5, r3
 801210c:	d11c      	bne.n	8012148 <__submore+0x48>
 801210e:	2680      	movs	r6, #128	; 0x80
 8012110:	00f6      	lsls	r6, r6, #3
 8012112:	0031      	movs	r1, r6
 8012114:	f7f8 faa8 	bl	800a668 <_malloc_r>
 8012118:	2800      	cmp	r0, #0
 801211a:	d102      	bne.n	8012122 <__submore+0x22>
 801211c:	2001      	movs	r0, #1
 801211e:	4240      	negs	r0, r0
 8012120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012122:	0023      	movs	r3, r4
 8012124:	6320      	str	r0, [r4, #48]	; 0x30
 8012126:	6366      	str	r6, [r4, #52]	; 0x34
 8012128:	3342      	adds	r3, #66	; 0x42
 801212a:	781a      	ldrb	r2, [r3, #0]
 801212c:	4b10      	ldr	r3, [pc, #64]	; (8012170 <__submore+0x70>)
 801212e:	54c2      	strb	r2, [r0, r3]
 8012130:	0023      	movs	r3, r4
 8012132:	3341      	adds	r3, #65	; 0x41
 8012134:	781a      	ldrb	r2, [r3, #0]
 8012136:	4b0f      	ldr	r3, [pc, #60]	; (8012174 <__submore+0x74>)
 8012138:	54c2      	strb	r2, [r0, r3]
 801213a:	782a      	ldrb	r2, [r5, #0]
 801213c:	4b0e      	ldr	r3, [pc, #56]	; (8012178 <__submore+0x78>)
 801213e:	54c2      	strb	r2, [r0, r3]
 8012140:	18c0      	adds	r0, r0, r3
 8012142:	6020      	str	r0, [r4, #0]
 8012144:	2000      	movs	r0, #0
 8012146:	e7eb      	b.n	8012120 <__submore+0x20>
 8012148:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801214a:	0029      	movs	r1, r5
 801214c:	0073      	lsls	r3, r6, #1
 801214e:	001a      	movs	r2, r3
 8012150:	9301      	str	r3, [sp, #4]
 8012152:	f7fe fc47 	bl	80109e4 <_realloc_r>
 8012156:	1e05      	subs	r5, r0, #0
 8012158:	d0e0      	beq.n	801211c <__submore+0x1c>
 801215a:	1987      	adds	r7, r0, r6
 801215c:	0001      	movs	r1, r0
 801215e:	0032      	movs	r2, r6
 8012160:	0038      	movs	r0, r7
 8012162:	f7f9 fde6 	bl	800bd32 <memcpy>
 8012166:	9b01      	ldr	r3, [sp, #4]
 8012168:	6027      	str	r7, [r4, #0]
 801216a:	6325      	str	r5, [r4, #48]	; 0x30
 801216c:	6363      	str	r3, [r4, #52]	; 0x34
 801216e:	e7e9      	b.n	8012144 <__submore+0x44>
 8012170:	000003ff 	.word	0x000003ff
 8012174:	000003fe 	.word	0x000003fe
 8012178:	000003fd 	.word	0x000003fd

0801217c <__swsetup_r>:
 801217c:	4b30      	ldr	r3, [pc, #192]	; (8012240 <__swsetup_r+0xc4>)
 801217e:	b570      	push	{r4, r5, r6, lr}
 8012180:	0005      	movs	r5, r0
 8012182:	6818      	ldr	r0, [r3, #0]
 8012184:	000c      	movs	r4, r1
 8012186:	2800      	cmp	r0, #0
 8012188:	d004      	beq.n	8012194 <__swsetup_r+0x18>
 801218a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <__swsetup_r+0x18>
 8012190:	f7f9 fbec 	bl	800b96c <__sinit>
 8012194:	230c      	movs	r3, #12
 8012196:	5ee2      	ldrsh	r2, [r4, r3]
 8012198:	b293      	uxth	r3, r2
 801219a:	0711      	lsls	r1, r2, #28
 801219c:	d423      	bmi.n	80121e6 <__swsetup_r+0x6a>
 801219e:	06d9      	lsls	r1, r3, #27
 80121a0:	d407      	bmi.n	80121b2 <__swsetup_r+0x36>
 80121a2:	2309      	movs	r3, #9
 80121a4:	2001      	movs	r0, #1
 80121a6:	602b      	str	r3, [r5, #0]
 80121a8:	3337      	adds	r3, #55	; 0x37
 80121aa:	4313      	orrs	r3, r2
 80121ac:	81a3      	strh	r3, [r4, #12]
 80121ae:	4240      	negs	r0, r0
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
 80121b2:	075b      	lsls	r3, r3, #29
 80121b4:	d513      	bpl.n	80121de <__swsetup_r+0x62>
 80121b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80121b8:	2900      	cmp	r1, #0
 80121ba:	d008      	beq.n	80121ce <__swsetup_r+0x52>
 80121bc:	0023      	movs	r3, r4
 80121be:	3340      	adds	r3, #64	; 0x40
 80121c0:	4299      	cmp	r1, r3
 80121c2:	d002      	beq.n	80121ca <__swsetup_r+0x4e>
 80121c4:	0028      	movs	r0, r5
 80121c6:	f7f9 fe2f 	bl	800be28 <_free_r>
 80121ca:	2300      	movs	r3, #0
 80121cc:	6323      	str	r3, [r4, #48]	; 0x30
 80121ce:	2224      	movs	r2, #36	; 0x24
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	4393      	bics	r3, r2
 80121d4:	81a3      	strh	r3, [r4, #12]
 80121d6:	2300      	movs	r3, #0
 80121d8:	6063      	str	r3, [r4, #4]
 80121da:	6923      	ldr	r3, [r4, #16]
 80121dc:	6023      	str	r3, [r4, #0]
 80121de:	2308      	movs	r3, #8
 80121e0:	89a2      	ldrh	r2, [r4, #12]
 80121e2:	4313      	orrs	r3, r2
 80121e4:	81a3      	strh	r3, [r4, #12]
 80121e6:	6923      	ldr	r3, [r4, #16]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10b      	bne.n	8012204 <__swsetup_r+0x88>
 80121ec:	21a0      	movs	r1, #160	; 0xa0
 80121ee:	2280      	movs	r2, #128	; 0x80
 80121f0:	89a3      	ldrh	r3, [r4, #12]
 80121f2:	0089      	lsls	r1, r1, #2
 80121f4:	0092      	lsls	r2, r2, #2
 80121f6:	400b      	ands	r3, r1
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d003      	beq.n	8012204 <__swsetup_r+0x88>
 80121fc:	0021      	movs	r1, r4
 80121fe:	0028      	movs	r0, r5
 8012200:	f000 f8e8 	bl	80123d4 <__smakebuf_r>
 8012204:	220c      	movs	r2, #12
 8012206:	5ea3      	ldrsh	r3, [r4, r2]
 8012208:	2001      	movs	r0, #1
 801220a:	001a      	movs	r2, r3
 801220c:	b299      	uxth	r1, r3
 801220e:	4002      	ands	r2, r0
 8012210:	4203      	tst	r3, r0
 8012212:	d00f      	beq.n	8012234 <__swsetup_r+0xb8>
 8012214:	2200      	movs	r2, #0
 8012216:	60a2      	str	r2, [r4, #8]
 8012218:	6962      	ldr	r2, [r4, #20]
 801221a:	4252      	negs	r2, r2
 801221c:	61a2      	str	r2, [r4, #24]
 801221e:	2000      	movs	r0, #0
 8012220:	6922      	ldr	r2, [r4, #16]
 8012222:	4282      	cmp	r2, r0
 8012224:	d1c4      	bne.n	80121b0 <__swsetup_r+0x34>
 8012226:	0609      	lsls	r1, r1, #24
 8012228:	d5c2      	bpl.n	80121b0 <__swsetup_r+0x34>
 801222a:	2240      	movs	r2, #64	; 0x40
 801222c:	4313      	orrs	r3, r2
 801222e:	81a3      	strh	r3, [r4, #12]
 8012230:	3801      	subs	r0, #1
 8012232:	e7bd      	b.n	80121b0 <__swsetup_r+0x34>
 8012234:	0788      	lsls	r0, r1, #30
 8012236:	d400      	bmi.n	801223a <__swsetup_r+0xbe>
 8012238:	6962      	ldr	r2, [r4, #20]
 801223a:	60a2      	str	r2, [r4, #8]
 801223c:	e7ef      	b.n	801221e <__swsetup_r+0xa2>
 801223e:	46c0      	nop			; (mov r8, r8)
 8012240:	200006d0 	.word	0x200006d0

08012244 <__fputwc>:
 8012244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012246:	b085      	sub	sp, #20
 8012248:	000e      	movs	r6, r1
 801224a:	0015      	movs	r5, r2
 801224c:	9001      	str	r0, [sp, #4]
 801224e:	f7f9 fccf 	bl	800bbf0 <__locale_mb_cur_max>
 8012252:	0004      	movs	r4, r0
 8012254:	2801      	cmp	r0, #1
 8012256:	d119      	bne.n	801228c <__fputwc+0x48>
 8012258:	1e73      	subs	r3, r6, #1
 801225a:	2bfe      	cmp	r3, #254	; 0xfe
 801225c:	d816      	bhi.n	801228c <__fputwc+0x48>
 801225e:	ab02      	add	r3, sp, #8
 8012260:	711e      	strb	r6, [r3, #4]
 8012262:	2700      	movs	r7, #0
 8012264:	42a7      	cmp	r7, r4
 8012266:	d020      	beq.n	80122aa <__fputwc+0x66>
 8012268:	ab03      	add	r3, sp, #12
 801226a:	5dd9      	ldrb	r1, [r3, r7]
 801226c:	68ab      	ldr	r3, [r5, #8]
 801226e:	3b01      	subs	r3, #1
 8012270:	60ab      	str	r3, [r5, #8]
 8012272:	2b00      	cmp	r3, #0
 8012274:	da04      	bge.n	8012280 <__fputwc+0x3c>
 8012276:	69aa      	ldr	r2, [r5, #24]
 8012278:	4293      	cmp	r3, r2
 801227a:	db19      	blt.n	80122b0 <__fputwc+0x6c>
 801227c:	290a      	cmp	r1, #10
 801227e:	d017      	beq.n	80122b0 <__fputwc+0x6c>
 8012280:	682b      	ldr	r3, [r5, #0]
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	602a      	str	r2, [r5, #0]
 8012286:	7019      	strb	r1, [r3, #0]
 8012288:	3701      	adds	r7, #1
 801228a:	e7eb      	b.n	8012264 <__fputwc+0x20>
 801228c:	002b      	movs	r3, r5
 801228e:	0032      	movs	r2, r6
 8012290:	9801      	ldr	r0, [sp, #4]
 8012292:	335c      	adds	r3, #92	; 0x5c
 8012294:	a903      	add	r1, sp, #12
 8012296:	f000 f857 	bl	8012348 <_wcrtomb_r>
 801229a:	0004      	movs	r4, r0
 801229c:	1c43      	adds	r3, r0, #1
 801229e:	d1e0      	bne.n	8012262 <__fputwc+0x1e>
 80122a0:	2340      	movs	r3, #64	; 0x40
 80122a2:	0006      	movs	r6, r0
 80122a4:	89aa      	ldrh	r2, [r5, #12]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	81ab      	strh	r3, [r5, #12]
 80122aa:	0030      	movs	r0, r6
 80122ac:	b005      	add	sp, #20
 80122ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122b0:	002a      	movs	r2, r5
 80122b2:	9801      	ldr	r0, [sp, #4]
 80122b4:	f000 f8cc 	bl	8012450 <__swbuf_r>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d1e5      	bne.n	8012288 <__fputwc+0x44>
 80122bc:	0006      	movs	r6, r0
 80122be:	e7f4      	b.n	80122aa <__fputwc+0x66>

080122c0 <_fputwc_r>:
 80122c0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80122c2:	b570      	push	{r4, r5, r6, lr}
 80122c4:	0005      	movs	r5, r0
 80122c6:	000e      	movs	r6, r1
 80122c8:	0014      	movs	r4, r2
 80122ca:	07db      	lsls	r3, r3, #31
 80122cc:	d405      	bmi.n	80122da <_fputwc_r+0x1a>
 80122ce:	8993      	ldrh	r3, [r2, #12]
 80122d0:	059b      	lsls	r3, r3, #22
 80122d2:	d402      	bmi.n	80122da <_fputwc_r+0x1a>
 80122d4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80122d6:	f7f9 fd1f 	bl	800bd18 <__retarget_lock_acquire_recursive>
 80122da:	230c      	movs	r3, #12
 80122dc:	5ee2      	ldrsh	r2, [r4, r3]
 80122de:	2380      	movs	r3, #128	; 0x80
 80122e0:	019b      	lsls	r3, r3, #6
 80122e2:	421a      	tst	r2, r3
 80122e4:	d104      	bne.n	80122f0 <_fputwc_r+0x30>
 80122e6:	431a      	orrs	r2, r3
 80122e8:	81a2      	strh	r2, [r4, #12]
 80122ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80122ec:	4313      	orrs	r3, r2
 80122ee:	6663      	str	r3, [r4, #100]	; 0x64
 80122f0:	0028      	movs	r0, r5
 80122f2:	0022      	movs	r2, r4
 80122f4:	0031      	movs	r1, r6
 80122f6:	f7ff ffa5 	bl	8012244 <__fputwc>
 80122fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122fc:	0005      	movs	r5, r0
 80122fe:	07db      	lsls	r3, r3, #31
 8012300:	d405      	bmi.n	801230e <_fputwc_r+0x4e>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	059b      	lsls	r3, r3, #22
 8012306:	d402      	bmi.n	801230e <_fputwc_r+0x4e>
 8012308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801230a:	f7f9 fd06 	bl	800bd1a <__retarget_lock_release_recursive>
 801230e:	0028      	movs	r0, r5
 8012310:	bd70      	pop	{r4, r5, r6, pc}

08012312 <memmove>:
 8012312:	b510      	push	{r4, lr}
 8012314:	4288      	cmp	r0, r1
 8012316:	d902      	bls.n	801231e <memmove+0xc>
 8012318:	188b      	adds	r3, r1, r2
 801231a:	4298      	cmp	r0, r3
 801231c:	d303      	bcc.n	8012326 <memmove+0x14>
 801231e:	2300      	movs	r3, #0
 8012320:	e007      	b.n	8012332 <memmove+0x20>
 8012322:	5c8b      	ldrb	r3, [r1, r2]
 8012324:	5483      	strb	r3, [r0, r2]
 8012326:	3a01      	subs	r2, #1
 8012328:	d2fb      	bcs.n	8012322 <memmove+0x10>
 801232a:	bd10      	pop	{r4, pc}
 801232c:	5ccc      	ldrb	r4, [r1, r3]
 801232e:	54c4      	strb	r4, [r0, r3]
 8012330:	3301      	adds	r3, #1
 8012332:	429a      	cmp	r2, r3
 8012334:	d1fa      	bne.n	801232c <memmove+0x1a>
 8012336:	e7f8      	b.n	801232a <memmove+0x18>

08012338 <abort>:
 8012338:	2006      	movs	r0, #6
 801233a:	b510      	push	{r4, lr}
 801233c:	f000 f906 	bl	801254c <raise>
 8012340:	2001      	movs	r0, #1
 8012342:	f7f1 fc25 	bl	8003b90 <_exit>
	...

08012348 <_wcrtomb_r>:
 8012348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801234a:	001d      	movs	r5, r3
 801234c:	4b09      	ldr	r3, [pc, #36]	; (8012374 <_wcrtomb_r+0x2c>)
 801234e:	0004      	movs	r4, r0
 8012350:	33e0      	adds	r3, #224	; 0xe0
 8012352:	681e      	ldr	r6, [r3, #0]
 8012354:	002b      	movs	r3, r5
 8012356:	2900      	cmp	r1, #0
 8012358:	d101      	bne.n	801235e <_wcrtomb_r+0x16>
 801235a:	000a      	movs	r2, r1
 801235c:	a901      	add	r1, sp, #4
 801235e:	0020      	movs	r0, r4
 8012360:	47b0      	blx	r6
 8012362:	1c43      	adds	r3, r0, #1
 8012364:	d103      	bne.n	801236e <_wcrtomb_r+0x26>
 8012366:	2300      	movs	r3, #0
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	338a      	adds	r3, #138	; 0x8a
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	b004      	add	sp, #16
 8012370:	bd70      	pop	{r4, r5, r6, pc}
 8012372:	46c0      	nop			; (mov r8, r8)
 8012374:	20000444 	.word	0x20000444

08012378 <__swhatbuf_r>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	000e      	movs	r6, r1
 801237c:	001d      	movs	r5, r3
 801237e:	230e      	movs	r3, #14
 8012380:	5ec9      	ldrsh	r1, [r1, r3]
 8012382:	0014      	movs	r4, r2
 8012384:	b096      	sub	sp, #88	; 0x58
 8012386:	2900      	cmp	r1, #0
 8012388:	da09      	bge.n	801239e <__swhatbuf_r+0x26>
 801238a:	89b2      	ldrh	r2, [r6, #12]
 801238c:	2380      	movs	r3, #128	; 0x80
 801238e:	0011      	movs	r1, r2
 8012390:	4019      	ands	r1, r3
 8012392:	421a      	tst	r2, r3
 8012394:	d018      	beq.n	80123c8 <__swhatbuf_r+0x50>
 8012396:	2100      	movs	r1, #0
 8012398:	3b40      	subs	r3, #64	; 0x40
 801239a:	0008      	movs	r0, r1
 801239c:	e010      	b.n	80123c0 <__swhatbuf_r+0x48>
 801239e:	466a      	mov	r2, sp
 80123a0:	f000 f8de 	bl	8012560 <_fstat_r>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	dbf0      	blt.n	801238a <__swhatbuf_r+0x12>
 80123a8:	23f0      	movs	r3, #240	; 0xf0
 80123aa:	9901      	ldr	r1, [sp, #4]
 80123ac:	021b      	lsls	r3, r3, #8
 80123ae:	4019      	ands	r1, r3
 80123b0:	4b07      	ldr	r3, [pc, #28]	; (80123d0 <__swhatbuf_r+0x58>)
 80123b2:	2080      	movs	r0, #128	; 0x80
 80123b4:	18c9      	adds	r1, r1, r3
 80123b6:	424b      	negs	r3, r1
 80123b8:	4159      	adcs	r1, r3
 80123ba:	2380      	movs	r3, #128	; 0x80
 80123bc:	0100      	lsls	r0, r0, #4
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	6029      	str	r1, [r5, #0]
 80123c2:	6023      	str	r3, [r4, #0]
 80123c4:	b016      	add	sp, #88	; 0x58
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	2380      	movs	r3, #128	; 0x80
 80123ca:	00db      	lsls	r3, r3, #3
 80123cc:	e7e5      	b.n	801239a <__swhatbuf_r+0x22>
 80123ce:	46c0      	nop			; (mov r8, r8)
 80123d0:	ffffe000 	.word	0xffffe000

080123d4 <__smakebuf_r>:
 80123d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123d6:	2602      	movs	r6, #2
 80123d8:	898b      	ldrh	r3, [r1, #12]
 80123da:	0005      	movs	r5, r0
 80123dc:	000c      	movs	r4, r1
 80123de:	4233      	tst	r3, r6
 80123e0:	d006      	beq.n	80123f0 <__smakebuf_r+0x1c>
 80123e2:	0023      	movs	r3, r4
 80123e4:	3343      	adds	r3, #67	; 0x43
 80123e6:	6023      	str	r3, [r4, #0]
 80123e8:	6123      	str	r3, [r4, #16]
 80123ea:	2301      	movs	r3, #1
 80123ec:	6163      	str	r3, [r4, #20]
 80123ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80123f0:	466a      	mov	r2, sp
 80123f2:	ab01      	add	r3, sp, #4
 80123f4:	f7ff ffc0 	bl	8012378 <__swhatbuf_r>
 80123f8:	9900      	ldr	r1, [sp, #0]
 80123fa:	0007      	movs	r7, r0
 80123fc:	0028      	movs	r0, r5
 80123fe:	f7f8 f933 	bl	800a668 <_malloc_r>
 8012402:	2800      	cmp	r0, #0
 8012404:	d108      	bne.n	8012418 <__smakebuf_r+0x44>
 8012406:	220c      	movs	r2, #12
 8012408:	5ea3      	ldrsh	r3, [r4, r2]
 801240a:	059a      	lsls	r2, r3, #22
 801240c:	d4ef      	bmi.n	80123ee <__smakebuf_r+0x1a>
 801240e:	2203      	movs	r2, #3
 8012410:	4393      	bics	r3, r2
 8012412:	431e      	orrs	r6, r3
 8012414:	81a6      	strh	r6, [r4, #12]
 8012416:	e7e4      	b.n	80123e2 <__smakebuf_r+0xe>
 8012418:	2380      	movs	r3, #128	; 0x80
 801241a:	89a2      	ldrh	r2, [r4, #12]
 801241c:	6020      	str	r0, [r4, #0]
 801241e:	4313      	orrs	r3, r2
 8012420:	81a3      	strh	r3, [r4, #12]
 8012422:	9b00      	ldr	r3, [sp, #0]
 8012424:	6120      	str	r0, [r4, #16]
 8012426:	6163      	str	r3, [r4, #20]
 8012428:	9b01      	ldr	r3, [sp, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00c      	beq.n	8012448 <__smakebuf_r+0x74>
 801242e:	0028      	movs	r0, r5
 8012430:	230e      	movs	r3, #14
 8012432:	5ee1      	ldrsh	r1, [r4, r3]
 8012434:	f000 f8a6 	bl	8012584 <_isatty_r>
 8012438:	2800      	cmp	r0, #0
 801243a:	d005      	beq.n	8012448 <__smakebuf_r+0x74>
 801243c:	2303      	movs	r3, #3
 801243e:	89a2      	ldrh	r2, [r4, #12]
 8012440:	439a      	bics	r2, r3
 8012442:	3b02      	subs	r3, #2
 8012444:	4313      	orrs	r3, r2
 8012446:	81a3      	strh	r3, [r4, #12]
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	433b      	orrs	r3, r7
 801244c:	81a3      	strh	r3, [r4, #12]
 801244e:	e7ce      	b.n	80123ee <__smakebuf_r+0x1a>

08012450 <__swbuf_r>:
 8012450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012452:	0006      	movs	r6, r0
 8012454:	000d      	movs	r5, r1
 8012456:	0014      	movs	r4, r2
 8012458:	2800      	cmp	r0, #0
 801245a:	d004      	beq.n	8012466 <__swbuf_r+0x16>
 801245c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801245e:	2b00      	cmp	r3, #0
 8012460:	d101      	bne.n	8012466 <__swbuf_r+0x16>
 8012462:	f7f9 fa83 	bl	800b96c <__sinit>
 8012466:	69a3      	ldr	r3, [r4, #24]
 8012468:	60a3      	str	r3, [r4, #8]
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	071b      	lsls	r3, r3, #28
 801246e:	d52e      	bpl.n	80124ce <__swbuf_r+0x7e>
 8012470:	6923      	ldr	r3, [r4, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d02b      	beq.n	80124ce <__swbuf_r+0x7e>
 8012476:	230c      	movs	r3, #12
 8012478:	5ee2      	ldrsh	r2, [r4, r3]
 801247a:	2380      	movs	r3, #128	; 0x80
 801247c:	019b      	lsls	r3, r3, #6
 801247e:	b2ef      	uxtb	r7, r5
 8012480:	b2ed      	uxtb	r5, r5
 8012482:	421a      	tst	r2, r3
 8012484:	d02c      	beq.n	80124e0 <__swbuf_r+0x90>
 8012486:	6923      	ldr	r3, [r4, #16]
 8012488:	6820      	ldr	r0, [r4, #0]
 801248a:	1ac0      	subs	r0, r0, r3
 801248c:	6963      	ldr	r3, [r4, #20]
 801248e:	4283      	cmp	r3, r0
 8012490:	dc05      	bgt.n	801249e <__swbuf_r+0x4e>
 8012492:	0021      	movs	r1, r4
 8012494:	0030      	movs	r0, r6
 8012496:	f7fd fab3 	bl	800fa00 <_fflush_r>
 801249a:	2800      	cmp	r0, #0
 801249c:	d11d      	bne.n	80124da <__swbuf_r+0x8a>
 801249e:	68a3      	ldr	r3, [r4, #8]
 80124a0:	3001      	adds	r0, #1
 80124a2:	3b01      	subs	r3, #1
 80124a4:	60a3      	str	r3, [r4, #8]
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	1c5a      	adds	r2, r3, #1
 80124aa:	6022      	str	r2, [r4, #0]
 80124ac:	701f      	strb	r7, [r3, #0]
 80124ae:	6963      	ldr	r3, [r4, #20]
 80124b0:	4283      	cmp	r3, r0
 80124b2:	d004      	beq.n	80124be <__swbuf_r+0x6e>
 80124b4:	89a3      	ldrh	r3, [r4, #12]
 80124b6:	07db      	lsls	r3, r3, #31
 80124b8:	d507      	bpl.n	80124ca <__swbuf_r+0x7a>
 80124ba:	2d0a      	cmp	r5, #10
 80124bc:	d105      	bne.n	80124ca <__swbuf_r+0x7a>
 80124be:	0021      	movs	r1, r4
 80124c0:	0030      	movs	r0, r6
 80124c2:	f7fd fa9d 	bl	800fa00 <_fflush_r>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d107      	bne.n	80124da <__swbuf_r+0x8a>
 80124ca:	0028      	movs	r0, r5
 80124cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ce:	0021      	movs	r1, r4
 80124d0:	0030      	movs	r0, r6
 80124d2:	f7ff fe53 	bl	801217c <__swsetup_r>
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d0cd      	beq.n	8012476 <__swbuf_r+0x26>
 80124da:	2501      	movs	r5, #1
 80124dc:	426d      	negs	r5, r5
 80124de:	e7f4      	b.n	80124ca <__swbuf_r+0x7a>
 80124e0:	4313      	orrs	r3, r2
 80124e2:	81a3      	strh	r3, [r4, #12]
 80124e4:	4a02      	ldr	r2, [pc, #8]	; (80124f0 <__swbuf_r+0xa0>)
 80124e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124e8:	4013      	ands	r3, r2
 80124ea:	6663      	str	r3, [r4, #100]	; 0x64
 80124ec:	e7cb      	b.n	8012486 <__swbuf_r+0x36>
 80124ee:	46c0      	nop			; (mov r8, r8)
 80124f0:	ffffdfff 	.word	0xffffdfff

080124f4 <_raise_r>:
 80124f4:	b570      	push	{r4, r5, r6, lr}
 80124f6:	0004      	movs	r4, r0
 80124f8:	000d      	movs	r5, r1
 80124fa:	291f      	cmp	r1, #31
 80124fc:	d904      	bls.n	8012508 <_raise_r+0x14>
 80124fe:	2316      	movs	r3, #22
 8012500:	6003      	str	r3, [r0, #0]
 8012502:	2001      	movs	r0, #1
 8012504:	4240      	negs	r0, r0
 8012506:	bd70      	pop	{r4, r5, r6, pc}
 8012508:	0003      	movs	r3, r0
 801250a:	33fc      	adds	r3, #252	; 0xfc
 801250c:	69db      	ldr	r3, [r3, #28]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d004      	beq.n	801251c <_raise_r+0x28>
 8012512:	008a      	lsls	r2, r1, #2
 8012514:	189b      	adds	r3, r3, r2
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	2a00      	cmp	r2, #0
 801251a:	d108      	bne.n	801252e <_raise_r+0x3a>
 801251c:	0020      	movs	r0, r4
 801251e:	f000 f855 	bl	80125cc <_getpid_r>
 8012522:	002a      	movs	r2, r5
 8012524:	0001      	movs	r1, r0
 8012526:	0020      	movs	r0, r4
 8012528:	f000 f83e 	bl	80125a8 <_kill_r>
 801252c:	e7eb      	b.n	8012506 <_raise_r+0x12>
 801252e:	2000      	movs	r0, #0
 8012530:	2a01      	cmp	r2, #1
 8012532:	d0e8      	beq.n	8012506 <_raise_r+0x12>
 8012534:	1c51      	adds	r1, r2, #1
 8012536:	d103      	bne.n	8012540 <_raise_r+0x4c>
 8012538:	2316      	movs	r3, #22
 801253a:	3001      	adds	r0, #1
 801253c:	6023      	str	r3, [r4, #0]
 801253e:	e7e2      	b.n	8012506 <_raise_r+0x12>
 8012540:	2400      	movs	r4, #0
 8012542:	0028      	movs	r0, r5
 8012544:	601c      	str	r4, [r3, #0]
 8012546:	4790      	blx	r2
 8012548:	0020      	movs	r0, r4
 801254a:	e7dc      	b.n	8012506 <_raise_r+0x12>

0801254c <raise>:
 801254c:	b510      	push	{r4, lr}
 801254e:	4b03      	ldr	r3, [pc, #12]	; (801255c <raise+0x10>)
 8012550:	0001      	movs	r1, r0
 8012552:	6818      	ldr	r0, [r3, #0]
 8012554:	f7ff ffce 	bl	80124f4 <_raise_r>
 8012558:	bd10      	pop	{r4, pc}
 801255a:	46c0      	nop			; (mov r8, r8)
 801255c:	200006d0 	.word	0x200006d0

08012560 <_fstat_r>:
 8012560:	2300      	movs	r3, #0
 8012562:	b570      	push	{r4, r5, r6, lr}
 8012564:	4d06      	ldr	r5, [pc, #24]	; (8012580 <_fstat_r+0x20>)
 8012566:	0004      	movs	r4, r0
 8012568:	0008      	movs	r0, r1
 801256a:	0011      	movs	r1, r2
 801256c:	602b      	str	r3, [r5, #0]
 801256e:	f7f1 fb5e 	bl	8003c2e <_fstat>
 8012572:	1c43      	adds	r3, r0, #1
 8012574:	d103      	bne.n	801257e <_fstat_r+0x1e>
 8012576:	682b      	ldr	r3, [r5, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d000      	beq.n	801257e <_fstat_r+0x1e>
 801257c:	6023      	str	r3, [r4, #0]
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	20000da0 	.word	0x20000da0

08012584 <_isatty_r>:
 8012584:	2300      	movs	r3, #0
 8012586:	b570      	push	{r4, r5, r6, lr}
 8012588:	4d06      	ldr	r5, [pc, #24]	; (80125a4 <_isatty_r+0x20>)
 801258a:	0004      	movs	r4, r0
 801258c:	0008      	movs	r0, r1
 801258e:	602b      	str	r3, [r5, #0]
 8012590:	f7f1 fb5b 	bl	8003c4a <_isatty>
 8012594:	1c43      	adds	r3, r0, #1
 8012596:	d103      	bne.n	80125a0 <_isatty_r+0x1c>
 8012598:	682b      	ldr	r3, [r5, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d000      	beq.n	80125a0 <_isatty_r+0x1c>
 801259e:	6023      	str	r3, [r4, #0]
 80125a0:	bd70      	pop	{r4, r5, r6, pc}
 80125a2:	46c0      	nop			; (mov r8, r8)
 80125a4:	20000da0 	.word	0x20000da0

080125a8 <_kill_r>:
 80125a8:	2300      	movs	r3, #0
 80125aa:	b570      	push	{r4, r5, r6, lr}
 80125ac:	4d06      	ldr	r5, [pc, #24]	; (80125c8 <_kill_r+0x20>)
 80125ae:	0004      	movs	r4, r0
 80125b0:	0008      	movs	r0, r1
 80125b2:	0011      	movs	r1, r2
 80125b4:	602b      	str	r3, [r5, #0]
 80125b6:	f7f1 fadb 	bl	8003b70 <_kill>
 80125ba:	1c43      	adds	r3, r0, #1
 80125bc:	d103      	bne.n	80125c6 <_kill_r+0x1e>
 80125be:	682b      	ldr	r3, [r5, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d000      	beq.n	80125c6 <_kill_r+0x1e>
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	bd70      	pop	{r4, r5, r6, pc}
 80125c8:	20000da0 	.word	0x20000da0

080125cc <_getpid_r>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	f7f1 fac9 	bl	8003b64 <_getpid>
 80125d2:	bd10      	pop	{r4, pc}

080125d4 <round>:
 80125d4:	b570      	push	{r4, r5, r6, lr}
 80125d6:	004a      	lsls	r2, r1, #1
 80125d8:	000d      	movs	r5, r1
 80125da:	4920      	ldr	r1, [pc, #128]	; (801265c <round+0x88>)
 80125dc:	0d52      	lsrs	r2, r2, #21
 80125de:	1851      	adds	r1, r2, r1
 80125e0:	0006      	movs	r6, r0
 80125e2:	2913      	cmp	r1, #19
 80125e4:	dc18      	bgt.n	8012618 <round+0x44>
 80125e6:	2900      	cmp	r1, #0
 80125e8:	da09      	bge.n	80125fe <round+0x2a>
 80125ea:	0feb      	lsrs	r3, r5, #31
 80125ec:	2200      	movs	r2, #0
 80125ee:	07db      	lsls	r3, r3, #31
 80125f0:	3101      	adds	r1, #1
 80125f2:	d101      	bne.n	80125f8 <round+0x24>
 80125f4:	491a      	ldr	r1, [pc, #104]	; (8012660 <round+0x8c>)
 80125f6:	430b      	orrs	r3, r1
 80125f8:	0019      	movs	r1, r3
 80125fa:	0010      	movs	r0, r2
 80125fc:	e017      	b.n	801262e <round+0x5a>
 80125fe:	4c19      	ldr	r4, [pc, #100]	; (8012664 <round+0x90>)
 8012600:	410c      	asrs	r4, r1
 8012602:	0022      	movs	r2, r4
 8012604:	402a      	ands	r2, r5
 8012606:	4302      	orrs	r2, r0
 8012608:	d013      	beq.n	8012632 <round+0x5e>
 801260a:	2280      	movs	r2, #128	; 0x80
 801260c:	0312      	lsls	r2, r2, #12
 801260e:	410a      	asrs	r2, r1
 8012610:	1953      	adds	r3, r2, r5
 8012612:	43a3      	bics	r3, r4
 8012614:	2200      	movs	r2, #0
 8012616:	e7ef      	b.n	80125f8 <round+0x24>
 8012618:	2933      	cmp	r1, #51	; 0x33
 801261a:	dd0d      	ble.n	8012638 <round+0x64>
 801261c:	2380      	movs	r3, #128	; 0x80
 801261e:	00db      	lsls	r3, r3, #3
 8012620:	4299      	cmp	r1, r3
 8012622:	d106      	bne.n	8012632 <round+0x5e>
 8012624:	0002      	movs	r2, r0
 8012626:	002b      	movs	r3, r5
 8012628:	0029      	movs	r1, r5
 801262a:	f7ee f8c5 	bl	80007b8 <__aeabi_dadd>
 801262e:	0006      	movs	r6, r0
 8012630:	000d      	movs	r5, r1
 8012632:	0030      	movs	r0, r6
 8012634:	0029      	movs	r1, r5
 8012636:	bd70      	pop	{r4, r5, r6, pc}
 8012638:	4c0b      	ldr	r4, [pc, #44]	; (8012668 <round+0x94>)
 801263a:	1912      	adds	r2, r2, r4
 801263c:	2401      	movs	r4, #1
 801263e:	4264      	negs	r4, r4
 8012640:	40d4      	lsrs	r4, r2
 8012642:	4220      	tst	r0, r4
 8012644:	d0f5      	beq.n	8012632 <round+0x5e>
 8012646:	2233      	movs	r2, #51	; 0x33
 8012648:	1a51      	subs	r1, r2, r1
 801264a:	3a32      	subs	r2, #50	; 0x32
 801264c:	408a      	lsls	r2, r1
 801264e:	1812      	adds	r2, r2, r0
 8012650:	4282      	cmp	r2, r0
 8012652:	4180      	sbcs	r0, r0
 8012654:	4240      	negs	r0, r0
 8012656:	182b      	adds	r3, r5, r0
 8012658:	43a2      	bics	r2, r4
 801265a:	e7cd      	b.n	80125f8 <round+0x24>
 801265c:	fffffc01 	.word	0xfffffc01
 8012660:	3ff00000 	.word	0x3ff00000
 8012664:	000fffff 	.word	0x000fffff
 8012668:	fffffbed 	.word	0xfffffbed

0801266c <_init>:
 801266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266e:	46c0      	nop			; (mov r8, r8)
 8012670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012672:	bc08      	pop	{r3}
 8012674:	469e      	mov	lr, r3
 8012676:	4770      	bx	lr

08012678 <_fini>:
 8012678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267a:	46c0      	nop			; (mov r8, r8)
 801267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801267e:	bc08      	pop	{r3}
 8012680:	469e      	mov	lr, r3
 8012682:	4770      	bx	lr
