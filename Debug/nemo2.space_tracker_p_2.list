
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013de8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020f4  08013ea8  08013ea8  00023ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f9c  08015f9c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015f9c  08015f9c  00025f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015fa4  08015fa4  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015fac  08015fac  00025fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08015fb0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200006d8  08016688  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  08016688  00030f54  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1f8  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d08  00000000  00000000  0004d93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  00051648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001605  00000000  00000000  00053298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022209  00000000  00000000  0005489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020b61  00000000  00000000  00076aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9d0  00000000  00000000  00097607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082ec  00000000  00000000  00163fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013e8c 	.word	0x08013e8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08013e8c 	.word	0x08013e8c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08015a0c 	.word	0x08015a0c
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 ff2e 	bl	8004414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f9f6 	bl	80029a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc88 	bl	8002ed0 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa48 	bl	8002a54 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb28 	bl	8002c18 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fae8 	bl	8002b9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb62 	bl	8002c94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fbae 	bl	8002d30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fbfa 	bl	8002dcc <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc46 	bl	8002e68 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4bda      	ldr	r3, [pc, #872]	; (8002948 <main+0x3a0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd81 	bl	80030e8 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fdaf 	bl	8003148 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025ea:	4bd8      	ldr	r3, [pc, #864]	; (800294c <main+0x3a4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	49d7      	ldr	r1, [pc, #860]	; (8002950 <main+0x3a8>)
 80025f2:	4bd8      	ldr	r3, [pc, #864]	; (8002954 <main+0x3ac>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f00a fe6f 	bl	800d2d8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4bd6      	ldr	r3, [pc, #856]	; (8002954 <main+0x3ac>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fd73 	bl	80030e8 <send_debug_logs>

  my_tim_init () ;
 8002602:	f001 fb09 	bl	8003c18 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f001 f93e 	bl	8003888 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260c:	f001 f96e 	bl	80038ec <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002610:	4bd1      	ldr	r3, [pc, #836]	; (8002958 <main+0x3b0>)
 8002612:	0018      	movs	r0, r3
 8002614:	f008 fa8c 	bl	800ab30 <my_gnss_acq_coordinates>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	4bcf      	ldr	r3, [pc, #828]	; (800295c <main+0x3b4>)
 800261e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002620:	f001 f97e 	bl	8003920 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002624:	4bce      	ldr	r3, [pc, #824]	; (8002960 <main+0x3b8>)
 8002626:	0018      	movs	r0, r3
 8002628:	f008 fc08 	bl	800ae3c <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262c:	4bca      	ldr	r3, [pc, #808]	; (8002958 <main+0x3b0>)
 800262e:	7c1b      	ldrb	r3, [r3, #16]
 8002630:	001e      	movs	r6, r3
 8002632:	4bc9      	ldr	r3, [pc, #804]	; (8002958 <main+0x3b0>)
 8002634:	689c      	ldr	r4, [r3, #8]
 8002636:	68dd      	ldr	r5, [r3, #12]
 8002638:	4bc7      	ldr	r3, [pc, #796]	; (8002958 <main+0x3b0>)
 800263a:	8a5b      	ldrh	r3, [r3, #18]
 800263c:	4698      	mov	r8, r3
 800263e:	4bc6      	ldr	r3, [pc, #792]	; (8002958 <main+0x3b0>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	213c      	movs	r1, #60	; 0x3c
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd79 	bl	800013c <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	4ac5      	ldr	r2, [pc, #788]	; (8002964 <main+0x3bc>)
 800264e:	49c6      	ldr	r1, [pc, #792]	; (8002968 <main+0x3c0>)
 8002650:	48c0      	ldr	r0, [pc, #768]	; (8002954 <main+0x3ac>)
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	4643      	mov	r3, r8
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	9402      	str	r4, [sp, #8]
 800265a:	9503      	str	r5, [sp, #12]
 800265c:	9601      	str	r6, [sp, #4]
 800265e:	4bc0      	ldr	r3, [pc, #768]	; (8002960 <main+0x3b8>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	23c4      	movs	r3, #196	; 0xc4
 8002664:	f00a fe38 	bl	800d2d8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002668:	4bba      	ldr	r3, [pc, #744]	; (8002954 <main+0x3ac>)
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fd3c 	bl	80030e8 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002670:	4bba      	ldr	r3, [pc, #744]	; (800295c <main+0x3b4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d027      	beq.n	80026ce <main+0x126>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267e:	4bbb      	ldr	r3, [pc, #748]	; (800296c <main+0x3c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f008 fc1c 	bl	800aec0 <my_rtc_set_alarm>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d020      	beq.n	80026ce <main+0x126>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268c:	4ab5      	ldr	r2, [pc, #724]	; (8002964 <main+0x3bc>)
 800268e:	49b8      	ldr	r1, [pc, #736]	; (8002970 <main+0x3c8>)
 8002690:	48b0      	ldr	r0, [pc, #704]	; (8002954 <main+0x3ac>)
 8002692:	23ca      	movs	r3, #202	; 0xca
 8002694:	f00a fe20 	bl	800d2d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002698:	4bae      	ldr	r3, [pc, #696]	; (8002954 <main+0x3ac>)
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fd24 	bl	80030e8 <send_debug_logs>
		  my_tim_stop () ;
 80026a0:	f001 fad6 	bl	8003c50 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a4:	4bb3      	ldr	r3, [pc, #716]	; (8002974 <main+0x3cc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026aa:	f002 fb7b 	bl	8004da4 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ae:	4bac      	ldr	r3, [pc, #688]	; (8002960 <main+0x3b8>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f008 fbc3 	bl	800ae3c <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b6:	4aab      	ldr	r2, [pc, #684]	; (8002964 <main+0x3bc>)
 80026b8:	49af      	ldr	r1, [pc, #700]	; (8002978 <main+0x3d0>)
 80026ba:	48a6      	ldr	r0, [pc, #664]	; (8002954 <main+0x3ac>)
 80026bc:	4ba8      	ldr	r3, [pc, #672]	; (8002960 <main+0x3b8>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	23d0      	movs	r3, #208	; 0xd0
 80026c2:	f00a fe09 	bl	800d2d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <main+0x3ac>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fd0d 	bl	80030e8 <send_debug_logs>
	  }
  }

  my_acc_problem_flag = my_acc_init () ;
 80026ce:	f001 f96f 	bl	80039b0 <my_acc_init>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	4ba9      	ldr	r3, [pc, #676]	; (800297c <main+0x3d4>)
 80026d8:	701a      	strb	r2, [r3, #0]

  if ( !my_astro_init () )
 80026da:	f008 f976 	bl	800a9ca <my_astro_init>
 80026de:	0003      	movs	r3, r0
 80026e0:	001a      	movs	r2, r3
 80026e2:	2301      	movs	r3, #1
 80026e4:	4053      	eors	r3, r2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <main+0x162>
	  my_sys_restart () ;
 80026ec:	f000 fdca 	bl	8003284 <my_sys_restart>
 80026f0:	e087      	b.n	8002802 <main+0x25a>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026f2:	4a9c      	ldr	r2, [pc, #624]	; (8002964 <main+0x3bc>)
 80026f4:	49a2      	ldr	r1, [pc, #648]	; (8002980 <main+0x3d8>)
 80026f6:	4897      	ldr	r0, [pc, #604]	; (8002954 <main+0x3ac>)
 80026f8:	23dd      	movs	r3, #221	; 0xdd
 80026fa:	f00a fded 	bl	800d2d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026fe:	4b95      	ldr	r3, [pc, #596]	; (8002954 <main+0x3ac>)
 8002700:	0018      	movs	r0, r3
 8002702:	f000 fcf1 	bl	80030e8 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002706:	f008 f9c1 	bl	800aa8c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800270a:	f001 f9f3 	bl	8003af4 <my_astro_evt_pin>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d1ef      	bne.n	80026f2 <main+0x14a>
	  }
	  if ( sys_mode == 0 ) // Present sys_mode if other than production
 8002712:	4b8e      	ldr	r3, [pc, #568]	; (800294c <main+0x3a4>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11d      	bne.n	8002756 <main+0x1ae>
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800271a:	4b9a      	ldr	r3, [pc, #616]	; (8002984 <main+0x3dc>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	4698      	mov	r8, r3
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <main+0x3b0>)
 8002722:	689c      	ldr	r4, [r3, #8]
 8002724:	68dd      	ldr	r5, [r3, #12]
 8002726:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <main+0x3b0>)
 8002728:	8a5b      	ldrh	r3, [r3, #18]
 800272a:	001e      	movs	r6, r3
 800272c:	4b8a      	ldr	r3, [pc, #552]	; (8002958 <main+0x3b0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	213c      	movs	r1, #60	; 0x3c
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fd02 	bl	800013c <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	001a      	movs	r2, r3
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <main+0x3e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4992      	ldr	r1, [pc, #584]	; (800298c <main+0x3e4>)
 8002742:	4893      	ldr	r0, [pc, #588]	; (8002990 <main+0x3e8>)
 8002744:	9304      	str	r3, [sp, #16]
 8002746:	9203      	str	r2, [sp, #12]
 8002748:	9602      	str	r6, [sp, #8]
 800274a:	9400      	str	r4, [sp, #0]
 800274c:	9501      	str	r5, [sp, #4]
 800274e:	4642      	mov	r2, r8
 8002750:	f00a fdc2 	bl	800d2d8 <sprintf>
 8002754:	e020      	b.n	8002798 <main+0x1f0>
	  else
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s,%u" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv , (uint16_t) sys_mode ) ;
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <main+0x3dc>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	4698      	mov	r8, r3
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <main+0x3b0>)
 800275e:	689c      	ldr	r4, [r3, #8]
 8002760:	68dd      	ldr	r5, [r3, #12]
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <main+0x3b0>)
 8002764:	8a5b      	ldrh	r3, [r3, #18]
 8002766:	001e      	movs	r6, r3
 8002768:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <main+0x3b0>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	213c      	movs	r1, #60	; 0x3c
 800276e:	0018      	movs	r0, r3
 8002770:	f7fd fce4 	bl	800013c <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	469c      	mov	ip, r3
 8002778:	4b83      	ldr	r3, [pc, #524]	; (8002988 <main+0x3e0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a73      	ldr	r2, [pc, #460]	; (800294c <main+0x3a4>)
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	4984      	ldr	r1, [pc, #528]	; (8002994 <main+0x3ec>)
 8002782:	4883      	ldr	r0, [pc, #524]	; (8002990 <main+0x3e8>)
 8002784:	9205      	str	r2, [sp, #20]
 8002786:	9304      	str	r3, [sp, #16]
 8002788:	4663      	mov	r3, ip
 800278a:	9303      	str	r3, [sp, #12]
 800278c:	9602      	str	r6, [sp, #8]
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	9501      	str	r5, [sp, #4]
 8002792:	4642      	mov	r2, r8
 8002794:	f00a fda0 	bl	800d2d8 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002798:	4a72      	ldr	r2, [pc, #456]	; (8002964 <main+0x3bc>)
 800279a:	497f      	ldr	r1, [pc, #508]	; (8002998 <main+0x3f0>)
 800279c:	486d      	ldr	r0, [pc, #436]	; (8002954 <main+0x3ac>)
 800279e:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <main+0x3e8>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	23e5      	movs	r3, #229	; 0xe5
 80027a4:	f00a fd98 	bl	800d2d8 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <main+0x3ac>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fc9c 	bl	80030e8 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <main+0x3b0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <main+0x3b0>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f008 f9a8 	bl	800ab10 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80027c0:	4b70      	ldr	r3, [pc, #448]	; (8002984 <main+0x3dc>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	b291      	uxth	r1, r2
 80027c8:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <main+0x3dc>)
 80027ca:	8011      	strh	r1, [r2, #0]
 80027cc:	4a70      	ldr	r2, [pc, #448]	; (8002990 <main+0x3e8>)
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f008 f933 	bl	800aa3c <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <main+0x3c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0018      	movs	r0, r3
 80027dc:	f008 fb70 	bl	800aec0 <my_rtc_set_alarm>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d00e      	beq.n	8002802 <main+0x25a>
	  {
		  my_sys_deepsleep () ;
 80027e4:	f000 fd72 	bl	80032cc <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027e8:	e00b      	b.n	8002802 <main+0x25a>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027ea:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <main+0x3bc>)
 80027ec:	4964      	ldr	r1, [pc, #400]	; (8002980 <main+0x3d8>)
 80027ee:	4859      	ldr	r0, [pc, #356]	; (8002954 <main+0x3ac>)
 80027f0:	23f7      	movs	r3, #247	; 0xf7
 80027f2:	f00a fd71 	bl	800d2d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <main+0x3ac>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fc75 	bl	80030e8 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027fe:	f008 f945 	bl	800aa8c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002802:	f001 f977 	bl	8003af4 <my_astro_evt_pin>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d1ef      	bne.n	80027ea <main+0x242>
	  }
	  if ( astro_rcv_cmd_flag )
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <main+0x3f4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <main+0x27a>
	  {
		  astro_rcv_cmd_flag = false ;
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <main+0x3f4>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 8002818:	f000 fe2c 	bl	8003474 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <main+0x3f8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <main+0x3cc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <main+0x284>
 800282a:	e081      	b.n	8002930 <main+0x388>
	  {
		  my_rtc_alarm_flag = false ;
 800282c:	4b51      	ldr	r3, [pc, #324]	; (8002974 <main+0x3cc>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002832:	f001 f85b 	bl	80038ec <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002836:	4b48      	ldr	r3, [pc, #288]	; (8002958 <main+0x3b0>)
 8002838:	0018      	movs	r0, r3
 800283a:	f008 f979 	bl	800ab30 <my_gnss_acq_coordinates>
 800283e:	0003      	movs	r3, r0
 8002840:	001a      	movs	r2, r3
 8002842:	4b46      	ldr	r3, [pc, #280]	; (800295c <main+0x3b4>)
 8002844:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002846:	f001 f86b 	bl	8003920 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <main+0x3b8>)
 800284c:	0018      	movs	r0, r3
 800284e:	f008 faf5 	bl	800ae3c <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <main+0x3b0>)
 8002854:	7c1b      	ldrb	r3, [r3, #16]
 8002856:	4698      	mov	r8, r3
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <main+0x3b0>)
 800285a:	689c      	ldr	r4, [r3, #8]
 800285c:	68dd      	ldr	r5, [r3, #12]
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <main+0x3b0>)
 8002860:	8a5b      	ldrh	r3, [r3, #18]
 8002862:	4699      	mov	r9, r3
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <main+0x3b0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	213c      	movs	r1, #60	; 0x3c
 800286a:	0018      	movs	r0, r3
 800286c:	f7fd fc66 	bl	800013c <__udivsi3>
 8002870:	0003      	movs	r3, r0
 8002872:	469c      	mov	ip, r3
 8002874:	2384      	movs	r3, #132	; 0x84
 8002876:	005e      	lsls	r6, r3, #1
 8002878:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <main+0x3bc>)
 800287a:	493b      	ldr	r1, [pc, #236]	; (8002968 <main+0x3c0>)
 800287c:	4835      	ldr	r0, [pc, #212]	; (8002954 <main+0x3ac>)
 800287e:	4663      	mov	r3, ip
 8002880:	9305      	str	r3, [sp, #20]
 8002882:	464b      	mov	r3, r9
 8002884:	9304      	str	r3, [sp, #16]
 8002886:	9402      	str	r4, [sp, #8]
 8002888:	9503      	str	r5, [sp, #12]
 800288a:	4643      	mov	r3, r8
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <main+0x3b8>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	0033      	movs	r3, r6
 8002894:	f00a fd20 	bl	800d2d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002898:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <main+0x3ac>)
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fc24 	bl	80030e8 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <main+0x3b4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <main+0x388>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <main+0x3b0>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <main+0x3b0>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f008 f92c 	bl	800ab10 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <main+0x3dc>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	4698      	mov	r8, r3
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <main+0x3b0>)
 80028c0:	689c      	ldr	r4, [r3, #8]
 80028c2:	68dd      	ldr	r5, [r3, #12]
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <main+0x3b0>)
 80028c6:	8a5b      	ldrh	r3, [r3, #18]
 80028c8:	001e      	movs	r6, r3
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <main+0x3b0>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	213c      	movs	r1, #60	; 0x3c
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd fc33 	bl	800013c <__udivsi3>
 80028d6:	0003      	movs	r3, r0
 80028d8:	469c      	mov	ip, r3
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <main+0x3b0>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <main+0x3b0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4930      	ldr	r1, [pc, #192]	; (80029a4 <main+0x3fc>)
 80028e4:	482a      	ldr	r0, [pc, #168]	; (8002990 <main+0x3e8>)
 80028e6:	9305      	str	r3, [sp, #20]
 80028e8:	9204      	str	r2, [sp, #16]
 80028ea:	4663      	mov	r3, ip
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	9602      	str	r6, [sp, #8]
 80028f0:	9400      	str	r4, [sp, #0]
 80028f2:	9501      	str	r5, [sp, #4]
 80028f4:	4642      	mov	r2, r8
 80028f6:	f00a fcef 	bl	800d2d8 <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <main+0x3dc>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	b291      	uxth	r1, r2
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <main+0x3dc>)
 8002904:	8011      	strh	r1, [r2, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <main+0x3e8>)
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f008 f896 	bl	800aa3c <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 8002910:	f001 f902 	bl	8003b18 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002914:	2388      	movs	r3, #136	; 0x88
 8002916:	005c      	lsls	r4, r3, #1
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <main+0x3bc>)
 800291a:	491f      	ldr	r1, [pc, #124]	; (8002998 <main+0x3f0>)
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <main+0x3ac>)
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <main+0x3e8>)
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	0023      	movs	r3, r4
 8002924:	f00a fcd8 	bl	800d2d8 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <main+0x3ac>)
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fbdc 	bl	80030e8 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <main+0x3c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f008 fac3 	bl	800aec0 <my_rtc_set_alarm>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d100      	bne.n	8002940 <main+0x398>
 800293e:	e760      	b.n	8002802 <main+0x25a>
	  {
		  my_sys_deepsleep () ;
 8002940:	f000 fcc4 	bl	80032cc <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 8002944:	e75d      	b.n	8002802 <main+0x25a>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000000 	.word	0x20000000
 800294c:	20000a22 	.word	0x20000a22
 8002950:	08013ed8 	.word	0x08013ed8
 8002954:	20000b20 	.word	0x20000b20
 8002958:	20000ae8 	.word	0x20000ae8
 800295c:	20000b11 	.word	0x20000b11
 8002960:	20000a24 	.word	0x20000a24
 8002964:	08013ee8 	.word	0x08013ee8
 8002968:	08013efc 	.word	0x08013efc
 800296c:	2000000c 	.word	0x2000000c
 8002970:	08013f3c 	.word	0x08013f3c
 8002974:	20000b10 	.word	0x20000b10
 8002978:	08013f5c 	.word	0x08013f5c
 800297c:	20000b12 	.word	0x20000b12
 8002980:	08013f68 	.word	0x08013f68
 8002984:	20000ae4 	.word	0x20000ae4
 8002988:	20000004 	.word	0x20000004
 800298c:	08013f80 	.word	0x08013f80
 8002990:	20000a38 	.word	0x20000a38
 8002994:	08013f94 	.word	0x08013f94
 8002998:	08013fac 	.word	0x08013fac
 800299c:	20000c1a 	.word	0x20000c1a
 80029a0:	20000c1c 	.word	0x20000c1c
 80029a4:	08013fc0 	.word	0x08013fc0

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b095      	sub	sp, #84	; 0x54
 80029ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	2414      	movs	r4, #20
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	0018      	movs	r0, r3
 80029b4:	233c      	movs	r3, #60	; 0x3c
 80029b6:	001a      	movs	r2, r3
 80029b8:	2100      	movs	r1, #0
 80029ba:	f00a fd23 	bl	800d404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2310      	movs	r3, #16
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f00a fd1c 	bl	800d404 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f002 fa01 	bl	8004dd8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029d6:	f002 f99f 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <SystemClock_Config+0xa8>)
 80029dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <SystemClock_Config+0xa8>)
 80029e0:	2118      	movs	r1, #24
 80029e2:	438a      	bics	r2, r1
 80029e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2206      	movs	r2, #6
 80029ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0052      	lsls	r2, r2, #1
 80029f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f002 fa2e 	bl	8004e70 <HAL_RCC_OscConfig>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a18:	f001 f960 	bl	8003cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2207      	movs	r2, #7
 8002a20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2100      	movs	r1, #0
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 fd79 	bl	8005530 <HAL_RCC_ClockConfig>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a42:	f001 f94b 	bl	8003cdc <Error_Handler>
  }
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b015      	add	sp, #84	; 0x54
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000

08002a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b090      	sub	sp, #64	; 0x40
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a5a:	232c      	movs	r3, #44	; 0x2c
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2314      	movs	r3, #20
 8002a62:	001a      	movs	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f00a fccd 	bl	800d404 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a6a:	2328      	movs	r3, #40	; 0x28
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a72:	003b      	movs	r3, r7
 8002a74:	0018      	movs	r0, r3
 8002a76:	2328      	movs	r3, #40	; 0x28
 8002a78:	001a      	movs	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f00a fcc2 	bl	800d404 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <MX_RTC_Init+0x144>)
 8002a84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a8e:	227f      	movs	r2, #127	; 0x7f
 8002a90:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	05d2      	lsls	r2, r2, #23
 8002ab0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <MX_RTC_Init+0x140>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f003 f91e 	bl	8005cfc <HAL_RTC_Init>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002ac4:	f001 f90a 	bl	8003cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aee:	1879      	adds	r1, r7, r1
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_RTC_Init+0x140>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	0018      	movs	r0, r3
 8002af6:	f003 f9a3 	bl	8005e40 <HAL_RTC_SetTime>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002afe:	f001 f8ed 	bl	8003cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b02:	2128      	movs	r1, #40	; 0x28
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2206      	movs	r2, #6
 8002b08:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2201      	movs	r2, #1
 8002b14:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b1c:	1879      	adds	r1, r7, r1
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_RTC_Init+0x140>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	0018      	movs	r0, r3
 8002b24:	f003 fa90 	bl	8006048 <HAL_RTC_SetDate>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b2c:	f001 f8d6 	bl	8003cdc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b42:	003b      	movs	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b60:	003b      	movs	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b66:	003b      	movs	r3, r7
 8002b68:	2220      	movs	r2, #32
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b76:	0039      	movs	r1, r7
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_RTC_Init+0x140>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f003 fb43 	bl	8006208 <HAL_RTC_SetAlarm_IT>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d001      	beq.n	8002b8a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b86:	f001 f8a9 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b010      	add	sp, #64	; 0x40
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	200006f4 	.word	0x200006f4
 8002b98:	40002800 	.word	0x40002800

08002b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <MX_SPI1_Init+0x78>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002ba8:	2282      	movs	r2, #130	; 0x82
 8002baa:	0052      	lsls	r2, r2, #1
 8002bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bb6:	22e0      	movs	r2, #224	; 0xe0
 8002bb8:	00d2      	lsls	r2, r2, #3
 8002bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bea:	2207      	movs	r2, #7
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f003 fde3 	bl	80067c8 <HAL_SPI_Init>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c06:	f001 f869 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000720 	.word	0x20000720
 8002c14:	40013000 	.word	0x40013000

08002c18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	0018      	movs	r0, r3
 8002c22:	230c      	movs	r3, #12
 8002c24:	001a      	movs	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f00a fbec 	bl	800d404 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_TIM6_Init+0x70>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <MX_TIM6_Init+0x74>)
 8002c36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <MX_TIM6_Init+0x78>)
 8002c42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f004 fcdb 	bl	8007608 <HAL_TIM_Base_Init>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c56:	f001 f841 	bl	8003cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f004 ff73 	bl	8007b58 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c76:	f001 f831 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	20000784 	.word	0x20000784
 8002c88:	40001000 	.word	0x40001000
 8002c8c:	00003e7f 	.word	0x00003e7f
 8002c90:	000003e7 	.word	0x000003e7

08002c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <MX_USART1_UART_Init+0x98>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca0:	22e1      	movs	r2, #225	; 0xe1
 8002ca2:	0252      	lsls	r2, r2, #9
 8002ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 ffc8 	bl	8007c74 <HAL_UART_Init>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ce8:	f000 fff8 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f005 ffa3 	bl	8008c3c <HAL_UARTEx_SetTxFifoThreshold>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cfa:	f000 ffef 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f005 ffda 	bl	8008cbc <HAL_UARTEx_SetRxFifoThreshold>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d0c:	f000 ffe6 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f005 ff58 	bl	8008bc8 <HAL_UARTEx_DisableFifoMode>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d1c:	f000 ffde 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200007d0 	.word	0x200007d0
 8002d2c:	40013800 	.word	0x40013800

08002d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <MX_USART2_UART_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d3c:	22e1      	movs	r2, #225	; 0xe1
 8002d3e:	0252      	lsls	r2, r2, #9
 8002d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 ff7a 	bl	8007c74 <HAL_UART_Init>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d84:	f000 ffaa 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f005 ff55 	bl	8008c3c <HAL_UARTEx_SetTxFifoThreshold>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f000 ffa1 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f005 ff8c 	bl	8008cbc <HAL_UARTEx_SetRxFifoThreshold>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002da8:	f000 ff98 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f005 ff0a 	bl	8008bc8 <HAL_UARTEx_DisableFifoMode>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002db8:	f000 ff90 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000864 	.word	0x20000864
 8002dc8:	40004400 	.word	0x40004400

08002dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <MX_USART3_UART_Init+0x98>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dd8:	2296      	movs	r2, #150	; 0x96
 8002dda:	0192      	lsls	r2, r2, #6
 8002ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f004 ff2c 	bl	8007c74 <HAL_UART_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e20:	f000 ff5c 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f005 ff07 	bl	8008c3c <HAL_UARTEx_SetTxFifoThreshold>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e32:	f000 ff53 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f005 ff3e 	bl	8008cbc <HAL_UARTEx_SetRxFifoThreshold>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e44:	f000 ff4a 	bl	8003cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f005 febc 	bl	8008bc8 <HAL_UARTEx_DisableFifoMode>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 ff42 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200008f8 	.word	0x200008f8
 8002e64:	40004800 	.word	0x40004800

08002e68 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <MX_USART5_UART_Init+0x64>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e74:	2296      	movs	r2, #150	; 0x96
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f004 fede 	bl	8007c74 <HAL_UART_Init>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ebc:	f000 ff0e 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	2000098c 	.word	0x2000098c
 8002ecc:	40005000 	.word	0x40005000

08002ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	; 0x2c
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed6:	2414      	movs	r4, #20
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	0018      	movs	r0, r3
 8002edc:	2314      	movs	r3, #20
 8002ede:	001a      	movs	r2, r3
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	f00a fa8f 	bl	800d404 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002eec:	2104      	movs	r1, #4
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
 8002f22:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f34:	2108      	movs	r1, #8
 8002f36:	430a      	orrs	r2, r1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	2208      	movs	r2, #8
 8002f40:	4013      	ands	r3, r2
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fe91 	bl	8004c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f54:	495f      	ldr	r1, [pc, #380]	; (80030d4 <MX_GPIO_Init+0x204>)
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f001 fe8b 	bl	8004c76 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	485c      	ldr	r0, [pc, #368]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	0019      	movs	r1, r3
 8002f6a:	f001 fe84 	bl	8004c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <MX_GPIO_Init+0x20c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	2103      	movs	r1, #3
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 fe7e 	bl	8004c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2288      	movs	r2, #136	; 0x88
 8002f84:	0352      	lsls	r2, r2, #13
 8002f86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	193a      	adds	r2, r7, r4
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	0011      	movs	r1, r2
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 fc0c 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002fae:	193a      	adds	r2, r7, r4
 8002fb0:	23a0      	movs	r3, #160	; 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fbfc 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	193a      	adds	r2, r7, r4
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f001 fbe9 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	4a3e      	ldr	r2, [pc, #248]	; (80030e0 <MX_GPIO_Init+0x210>)
 8002fe6:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2201      	movs	r2, #1
 8002fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f001 fbd7 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003006:	0021      	movs	r1, r4
 8003008:	187b      	adds	r3, r7, r1
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2288      	movs	r2, #136	; 0x88
 8003012:	0352      	lsls	r2, r2, #13
 8003014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	000c      	movs	r4, r1
 800301e:	187b      	adds	r3, r7, r1
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <MX_GPIO_Init+0x208>)
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f001 fbc5 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800302a:	0021      	movs	r1, r4
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0192      	lsls	r2, r2, #6
 8003032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003034:	000c      	movs	r4, r1
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2211      	movs	r2, #17
 800303a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003048:	193b      	adds	r3, r7, r4
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <MX_GPIO_Init+0x208>)
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f001 fbb0 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003054:	193b      	adds	r3, r7, r4
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <MX_GPIO_Init+0x214>)
 8003058:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2200      	movs	r2, #0
 800305e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	193b      	adds	r3, r7, r4
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003066:	193b      	adds	r3, r7, r4
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <MX_GPIO_Init+0x208>)
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f001 fba1 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2203      	movs	r2, #3
 8003076:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	193b      	adds	r3, r7, r4
 800307a:	2201      	movs	r2, #1
 800307c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800308a:	193b      	adds	r3, r7, r4
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <MX_GPIO_Init+0x20c>)
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f001 fb8f 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003096:	0021      	movs	r1, r4
 8003098:	187b      	adds	r3, r7, r1
 800309a:	220c      	movs	r2, #12
 800309c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2201      	movs	r2, #1
 80030a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <MX_GPIO_Init+0x20c>)
 80030ae:	0019      	movs	r1, r3
 80030b0:	0010      	movs	r0, r2
 80030b2:	f001 fb7f 	bl	80047b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2006      	movs	r0, #6
 80030bc:	f001 fb44 	bl	8004748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030c0:	2006      	movs	r0, #6
 80030c2:	f001 fb56 	bl	8004772 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b00b      	add	sp, #44	; 0x2c
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0000a403 	.word	0x0000a403
 80030d8:	50000400 	.word	0x50000400
 80030dc:	50000c00 	.word	0x50000c00
 80030e0:	00008c03 	.word	0x00008c03
 80030e4:	00004040 	.word	0x00004040

080030e8 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd f806 	bl	8000104 <strlen>
 80030f8:	0003      	movs	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2bfa      	cmp	r3, #250	; 0xfa
 8003100:	d908      	bls.n	8003114 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8003102:	23fa      	movs	r3, #250	; 0xfa
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <send_debug_logs+0x54>)
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <send_debug_logs+0x58>)
 800310a:	222a      	movs	r2, #42	; 0x2a
 800310c:	f004 fe48 	bl	8007da0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8003110:	23fa      	movs	r3, #250	; 0xfa
 8003112:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	b29a      	uxth	r2, r3
 8003118:	23fa      	movs	r3, #250	; 0xfa
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4808      	ldr	r0, [pc, #32]	; (8003140 <send_debug_logs+0x58>)
 8003120:	f004 fe3e 	bl	8007da0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003124:	23fa      	movs	r3, #250	; 0xfa
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <send_debug_logs+0x5c>)
 800312a:	4805      	ldr	r0, [pc, #20]	; (8003140 <send_debug_logs+0x58>)
 800312c:	2201      	movs	r2, #1
 800312e:	f004 fe37 	bl	8007da0 <HAL_UART_Transmit>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08013fd8 	.word	0x08013fd8
 8003140:	20000864 	.word	0x20000864
 8003144:	08014004 	.word	0x08014004

08003148 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <my_sys_init+0x114>)
 800314e:	2200      	movs	r2, #0
 8003150:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003152:	4b42      	ldr	r3, [pc, #264]	; (800325c <my_sys_init+0x114>)
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <my_sys_init+0x118>)
 800315a:	2104      	movs	r1, #4
 800315c:	0018      	movs	r0, r3
 800315e:	f001 fd6d 	bl	8004c3c <HAL_GPIO_ReadPin>
 8003162:	0003      	movs	r3, r0
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	4193      	sbcs	r3, r2
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <my_sys_init+0x11c>)
 800316c:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800316e:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <my_sys_init+0x118>)
 8003170:	2108      	movs	r1, #8
 8003172:	0018      	movs	r0, r3
 8003174:	f001 fd62 	bl	8004c3c <HAL_GPIO_ReadPin>
 8003178:	0003      	movs	r3, r0
 800317a:	1e5a      	subs	r2, r3, #1
 800317c:	4193      	sbcs	r3, r2
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <my_sys_init+0x120>)
 8003182:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003184:	4b37      	ldr	r3, [pc, #220]	; (8003264 <my_sys_init+0x11c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4053      	eors	r3, r2
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d019      	beq.n	80031c6 <my_sys_init+0x7e>
 8003192:	4b35      	ldr	r3, [pc, #212]	; (8003268 <my_sys_init+0x120>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	4053      	eors	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <my_sys_init+0x124>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <my_sys_init+0x128>)
 80031a8:	22e1      	movs	r2, #225	; 0xe1
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <my_sys_init+0x12c>)
 80031b0:	2278      	movs	r2, #120	; 0x78
 80031b2:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <my_sys_init+0x130>)
 80031b6:	221e      	movs	r2, #30
 80031b8:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031ba:	4930      	ldr	r1, [pc, #192]	; (800327c <my_sys_init+0x134>)
 80031bc:	2200      	movs	r2, #0
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	600a      	str	r2, [r1, #0]
 80031c4:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <my_sys_init+0x11c>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <my_sys_init+0xba>
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <my_sys_init+0x120>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4053      	eors	r3, r2
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <my_sys_init+0x124>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <my_sys_init+0x128>)
 80031e4:	22e1      	movs	r2, #225	; 0xe1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <my_sys_init+0x12c>)
 80031ec:	2278      	movs	r2, #120	; 0x78
 80031ee:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <my_sys_init+0x130>)
 80031f2:	221e      	movs	r2, #30
 80031f4:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031f6:	4921      	ldr	r1, [pc, #132]	; (800327c <my_sys_init+0x134>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	600a      	str	r2, [r1, #0]
 8003200:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <my_sys_init+0x11c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4053      	eors	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <my_sys_init+0xf6>
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <my_sys_init+0x120>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <my_sys_init+0x124>)
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <my_sys_init+0x128>)
 8003220:	2296      	movs	r2, #150	; 0x96
 8003222:	0052      	lsls	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <my_sys_init+0x12c>)
 8003228:	2296      	movs	r2, #150	; 0x96
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <my_sys_init+0x130>)
 8003230:	223c      	movs	r2, #60	; 0x3c
 8003232:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003234:	4911      	ldr	r1, [pc, #68]	; (800327c <my_sys_init+0x134>)
 8003236:	2200      	movs	r2, #0
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <my_sys_init+0x138>)
 800323a:	600a      	str	r2, [r1, #0]
 800323c:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <my_sys_init+0x11c>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <my_sys_init+0x10c>
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <my_sys_init+0x120>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <my_sys_init+0x124>)
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]
	}
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	20000ae8 	.word	0x20000ae8
 8003260:	50000c00 	.word	0x50000c00
 8003264:	20000a20 	.word	0x20000a20
 8003268:	20000a21 	.word	0x20000a21
 800326c:	20000a22 	.word	0x20000a22
 8003270:	2000000c 	.word	0x2000000c
 8003274:	2000001a 	.word	0x2000001a
 8003278:	2000001c 	.word	0x2000001c
 800327c:	20000020 	.word	0x20000020
 8003280:	40240000 	.word	0x40240000

08003284 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b083      	sub	sp, #12
 8003288:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <my_sys_restart+0x38>)
 800328c:	0018      	movs	r0, r3
 800328e:	f007 fdd5 	bl	800ae3c <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003292:	23d2      	movs	r3, #210	; 0xd2
 8003294:	009c      	lsls	r4, r3, #2
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <my_sys_restart+0x3c>)
 8003298:	490a      	ldr	r1, [pc, #40]	; (80032c4 <my_sys_restart+0x40>)
 800329a:	480b      	ldr	r0, [pc, #44]	; (80032c8 <my_sys_restart+0x44>)
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <my_sys_restart+0x38>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	0023      	movs	r3, r4
 80032a2:	f00a f819 	bl	800d2d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <my_sys_restart+0x44>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ff1d 	bl	80030e8 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 80032ae:	f001 fa70 	bl	8004792 <HAL_NVIC_SystemReset>
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b001      	add	sp, #4
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000a24 	.word	0x20000a24
 80032c0:	08013ee8 	.word	0x08013ee8
 80032c4:	08014008 	.word	0x08014008
 80032c8:	20000b20 	.word	0x20000b20

080032cc <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <my_sys_deepsleep+0x64>)
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <my_sys_deepsleep+0x68>)
 80032d6:	4918      	ldr	r1, [pc, #96]	; (8003338 <my_sys_deepsleep+0x6c>)
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <my_sys_deepsleep+0x70>)
 80032da:	f009 fffd 	bl	800d2d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <my_sys_deepsleep+0x70>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff ff01 	bl	80030e8 <send_debug_logs>
	my_tim_stop () ;
 80032e6:	f000 fcb3 	bl	8003c50 <my_tim_stop>
	HAL_SuspendTick () ;
 80032ea:	f001 f93d 	bl	8004568 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <my_sys_deepsleep+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	01db      	lsls	r3, r3, #7
 80032f8:	2102      	movs	r1, #2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f001 fd1a 	bl	8004d34 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 8003300:	f001 f940 	bl	8004584 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <my_sys_deepsleep+0x78>)
 8003306:	0018      	movs	r0, r3
 8003308:	f007 fd98 	bl	800ae3c <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800330c:	4c0e      	ldr	r4, [pc, #56]	; (8003348 <my_sys_deepsleep+0x7c>)
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <my_sys_deepsleep+0x68>)
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <my_sys_deepsleep+0x80>)
 8003312:	480a      	ldr	r0, [pc, #40]	; (800333c <my_sys_deepsleep+0x70>)
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <my_sys_deepsleep+0x78>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	0023      	movs	r3, r4
 800331a:	f009 ffdd 	bl	800d2d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <my_sys_deepsleep+0x70>)
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fee1 	bl	80030e8 <send_debug_logs>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b001      	add	sp, #4
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	0000035b 	.word	0x0000035b
 8003334:	08013ee8 	.word	0x08013ee8
 8003338:	08014048 	.word	0x08014048
 800333c:	20000b20 	.word	0x20000b20
 8003340:	20000b10 	.word	0x20000b10
 8003344:	20000a24 	.word	0x20000a24
 8003348:	00000363 	.word	0x00000363
 800334c:	0801407c 	.word	0x0801407c

08003350 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	2396      	movs	r3, #150	; 0x96
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	429a      	cmp	r2, r3
 8003360:	d30b      	bcc.n	800337a <my_sys_change_watchdog_time_ths+0x2a>
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	23e1      	movs	r3, #225	; 0xe1
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	429a      	cmp	r2, r3
 800336a:	d806      	bhi.n	800337a <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <my_sys_change_watchdog_time_ths+0x34>)
 8003372:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <my_sys_change_watchdog_time_ths+0x38>)
 8003376:	2201      	movs	r2, #1
 8003378:	721a      	strb	r2, [r3, #8]
	}
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20000008 	.word	0x20000008
 8003388:	20000ad8 	.word	0x20000ad8

0800338c <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	2396      	movs	r3, #150	; 0x96
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	429a      	cmp	r2, r3
 800339c:	d309      	bcc.n	80033b2 <my_sys_change_AlarmA_time+0x26>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <my_sys_change_AlarmA_time+0x30>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d805      	bhi.n	80033b2 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <my_sys_change_AlarmA_time+0x34>)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <my_sys_change_AlarmA_time+0x38>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	721a      	strb	r2, [r3, #8]
	}
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	0083d600 	.word	0x0083d600
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000ad8 	.word	0x20000ad8

080033c8 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b2c      	cmp	r3, #44	; 0x2c
 80033d4:	d90b      	bls.n	80033ee <my_sys_change_fix_acq_ths+0x26>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	2396      	movs	r3, #150	; 0x96
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d806      	bhi.n	80033ee <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <my_sys_change_fix_acq_ths+0x30>)
 80033e6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <my_sys_change_fix_acq_ths+0x34>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	721a      	strb	r2, [r3, #8]
	}
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	2000001a 	.word	0x2000001a
 80033fc:	20000ad8 	.word	0x20000ad8

08003400 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b0e      	cmp	r3, #14
 800340c:	d90b      	bls.n	8003426 <my_sys_change_min_tns_time_ths+0x26>
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	2396      	movs	r3, #150	; 0x96
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d806      	bhi.n	8003426 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <my_sys_change_min_tns_time_ths+0x30>)
 800341e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <my_sys_change_min_tns_time_ths+0x34>)
 8003422:	2201      	movs	r2, #1
 8003424:	721a      	strb	r2, [r3, #8]
	}
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	2000001c 	.word	0x2000001c
 8003434:	20000ad8 	.word	0x20000ad8

08003438 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <my_sys_change_pdop_ths+0x2a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d80a      	bhi.n	8003462 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fe ffd5 	bl	80023fc <__aeabi_ui2d>
 8003452:	0002      	movs	r2, r0
 8003454:	000b      	movs	r3, r1
 8003456:	4905      	ldr	r1, [pc, #20]	; (800346c <my_sys_change_pdop_ths+0x34>)
 8003458:	600a      	str	r2, [r1, #0]
 800345a:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <my_sys_change_pdop_ths+0x38>)
 800345e:	2201      	movs	r2, #1
 8003460:	721a      	strb	r2, [r3, #8]
	}
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20000020 	.word	0x20000020
 8003470:	20000ad8 	.word	0x20000ad8

08003474 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	46d6      	mov	lr, sl
 8003478:	464f      	mov	r7, r9
 800347a:	4646      	mov	r6, r8
 800347c:	b5c0      	push	{r6, r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 8003482:	4be2      	ldr	r3, [pc, #904]	; (800380c <my_tracker_handle_cmd+0x398>)
 8003484:	0018      	movs	r0, r3
 8003486:	f008 fbe9 	bl	800bc5c <my_tracker_api_is_cmd>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d100      	bne.n	8003490 <my_tracker_handle_cmd+0x1c>
 800348e:	e1f2      	b.n	8003876 <my_tracker_handle_cmd+0x402>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003490:	4ade      	ldr	r2, [pc, #888]	; (800380c <my_tracker_handle_cmd+0x398>)
 8003492:	4bdf      	ldr	r3, [pc, #892]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003494:	0011      	movs	r1, r2
 8003496:	0018      	movs	r0, r3
 8003498:	f008 fc4a 	bl	800bd30 <my_tracker_api_parse_cmd>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d100      	bne.n	80034a2 <my_tracker_handle_cmd+0x2e>
 80034a0:	e1e9      	b.n	8003876 <my_tracker_handle_cmd+0x402>
		{
			switch ( my_astro_cmd.code )
 80034a2:	4bdb      	ldr	r3, [pc, #876]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d900      	bls.n	80034ac <my_tracker_handle_cmd+0x38>
 80034aa:	e17d      	b.n	80037a8 <my_tracker_handle_cmd+0x334>
 80034ac:	009a      	lsls	r2, r3, #2
 80034ae:	4bd9      	ldr	r3, [pc, #868]	; (8003814 <my_tracker_handle_cmd+0x3a0>)
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 80034b6:	4bd6      	ldr	r3, [pc, #856]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff ff48 	bl	8003350 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034c0:	4bd5      	ldr	r3, [pc, #852]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	001c      	movs	r4, r3
 80034c6:	4bd2      	ldr	r3, [pc, #840]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80034c8:	7a1b      	ldrb	r3, [r3, #8]
 80034ca:	001d      	movs	r5, r3
 80034cc:	4bd0      	ldr	r3, [pc, #832]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	4bcf      	ldr	r3, [pc, #828]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	49d1      	ldr	r1, [pc, #836]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 80034d8:	48d1      	ldr	r0, [pc, #836]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	002b      	movs	r3, r5
 80034e0:	0022      	movs	r2, r4
 80034e2:	f009 fef9 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034e6:	4ccf      	ldr	r4, [pc, #828]	; (8003824 <my_tracker_handle_cmd+0x3b0>)
 80034e8:	4acf      	ldr	r2, [pc, #828]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 80034ea:	49d0      	ldr	r1, [pc, #832]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 80034ec:	48d0      	ldr	r0, [pc, #832]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80034ee:	4bcc      	ldr	r3, [pc, #816]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	0023      	movs	r3, r4
 80034f4:	f009 fef0 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034f8:	4bcd      	ldr	r3, [pc, #820]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fdf4 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003500:	4bc5      	ldr	r3, [pc, #788]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	b291      	uxth	r1, r2
 8003508:	4ac3      	ldr	r2, [pc, #780]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800350a:	8011      	strh	r1, [r2, #0]
 800350c:	4ac4      	ldr	r2, [pc, #784]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f007 fa93 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003516:	f000 faff 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  break ;
 800351a:	e1ac      	b.n	8003876 <my_tracker_handle_cmd+0x402>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 800351c:	4bbc      	ldr	r3, [pc, #752]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff33 	bl	800338c <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003526:	4bbc      	ldr	r3, [pc, #752]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	001c      	movs	r4, r3
 800352c:	4bb8      	ldr	r3, [pc, #736]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	001d      	movs	r5, r3
 8003532:	4bb7      	ldr	r3, [pc, #732]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	001a      	movs	r2, r3
 8003538:	4bb5      	ldr	r3, [pc, #724]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	49b7      	ldr	r1, [pc, #732]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 800353e:	48b8      	ldr	r0, [pc, #736]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9200      	str	r2, [sp, #0]
 8003544:	002b      	movs	r3, r5
 8003546:	0022      	movs	r2, r4
 8003548:	f009 fec6 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800354c:	4cb9      	ldr	r4, [pc, #740]	; (8003834 <my_tracker_handle_cmd+0x3c0>)
 800354e:	4ab6      	ldr	r2, [pc, #728]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 8003550:	49b6      	ldr	r1, [pc, #728]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 8003552:	48b7      	ldr	r0, [pc, #732]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003554:	4bb2      	ldr	r3, [pc, #712]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	0023      	movs	r3, r4
 800355a:	f009 febd 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800355e:	4bb4      	ldr	r3, [pc, #720]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff fdc1 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003566:	4bac      	ldr	r3, [pc, #688]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	b291      	uxth	r1, r2
 800356e:	4aaa      	ldr	r2, [pc, #680]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003570:	8011      	strh	r1, [r2, #0]
 8003572:	4aab      	ldr	r2, [pc, #684]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f007 fa60 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800357c:	f000 facc 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  break ;
 8003580:	e179      	b.n	8003876 <my_tracker_handle_cmd+0x402>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 8003582:	4ba3      	ldr	r3, [pc, #652]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff ff1e 	bl	80033c8 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800358c:	4ba2      	ldr	r3, [pc, #648]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	001c      	movs	r4, r3
 8003592:	4b9f      	ldr	r3, [pc, #636]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003594:	7a1b      	ldrb	r3, [r3, #8]
 8003596:	001d      	movs	r5, r3
 8003598:	4b9d      	ldr	r3, [pc, #628]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	001a      	movs	r2, r3
 800359e:	4b9c      	ldr	r3, [pc, #624]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	499e      	ldr	r1, [pc, #632]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 80035a4:	489e      	ldr	r0, [pc, #632]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	002b      	movs	r3, r5
 80035ac:	0022      	movs	r2, r4
 80035ae:	f009 fe93 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035b2:	4ca1      	ldr	r4, [pc, #644]	; (8003838 <my_tracker_handle_cmd+0x3c4>)
 80035b4:	4a9c      	ldr	r2, [pc, #624]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 80035b6:	499d      	ldr	r1, [pc, #628]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 80035b8:	489d      	ldr	r0, [pc, #628]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80035ba:	4b99      	ldr	r3, [pc, #612]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0023      	movs	r3, r4
 80035c0:	f009 fe8a 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035c4:	4b9a      	ldr	r3, [pc, #616]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fd8e 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035cc:	4b92      	ldr	r3, [pc, #584]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	b291      	uxth	r1, r2
 80035d4:	4a90      	ldr	r2, [pc, #576]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80035d6:	8011      	strh	r1, [r2, #0]
 80035d8:	4a91      	ldr	r2, [pc, #580]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f007 fa2d 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80035e2:	f000 fa99 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  break ;
 80035e6:	e146      	b.n	8003876 <my_tracker_handle_cmd+0x402>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 80035e8:	4b89      	ldr	r3, [pc, #548]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff ff07 	bl	8003400 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	001c      	movs	r4, r3
 80035f8:	4b85      	ldr	r3, [pc, #532]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80035fa:	7a1b      	ldrb	r3, [r3, #8]
 80035fc:	001d      	movs	r5, r3
 80035fe:	4b84      	ldr	r3, [pc, #528]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	001a      	movs	r2, r3
 8003604:	4b82      	ldr	r3, [pc, #520]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4984      	ldr	r1, [pc, #528]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 800360a:	4885      	ldr	r0, [pc, #532]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	002b      	movs	r3, r5
 8003612:	0022      	movs	r2, r4
 8003614:	f009 fe60 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003618:	4c88      	ldr	r4, [pc, #544]	; (800383c <my_tracker_handle_cmd+0x3c8>)
 800361a:	4a83      	ldr	r2, [pc, #524]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 800361c:	4983      	ldr	r1, [pc, #524]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 800361e:	4884      	ldr	r0, [pc, #528]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003620:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	0023      	movs	r3, r4
 8003626:	f009 fe57 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800362a:	4b81      	ldr	r3, [pc, #516]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff fd5b 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003632:	4b79      	ldr	r3, [pc, #484]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b291      	uxth	r1, r2
 800363a:	4a77      	ldr	r2, [pc, #476]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800363c:	8011      	strh	r1, [r2, #0]
 800363e:	4a78      	ldr	r2, [pc, #480]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003640:	0011      	movs	r1, r2
 8003642:	0018      	movs	r0, r3
 8003644:	f007 f9fa 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003648:	f000 fa66 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  break ;
 800364c:	e113      	b.n	8003876 <my_tracker_handle_cmd+0x402>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff fef0 	bl	8003438 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003658:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	001c      	movs	r4, r3
 800365e:	4b6c      	ldr	r3, [pc, #432]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003660:	7a1b      	ldrb	r3, [r3, #8]
 8003662:	001d      	movs	r5, r3
 8003664:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	001a      	movs	r2, r3
 800366a:	4b69      	ldr	r3, [pc, #420]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	496b      	ldr	r1, [pc, #428]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 8003670:	486b      	ldr	r0, [pc, #428]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	9200      	str	r2, [sp, #0]
 8003676:	002b      	movs	r3, r5
 8003678:	0022      	movs	r2, r4
 800367a:	f009 fe2d 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800367e:	4c70      	ldr	r4, [pc, #448]	; (8003840 <my_tracker_handle_cmd+0x3cc>)
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 8003682:	496a      	ldr	r1, [pc, #424]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 8003684:	486a      	ldr	r0, [pc, #424]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003686:	4b66      	ldr	r3, [pc, #408]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	f009 fe24 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fd28 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003698:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	b291      	uxth	r1, r2
 80036a0:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80036a2:	8011      	strh	r1, [r2, #0]
 80036a4:	4a5e      	ldr	r2, [pc, #376]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f007 f9c7 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80036ae:	f000 fa33 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  break ;
 80036b2:	e0e0      	b.n	8003876 <my_tracker_handle_cmd+0x402>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d140      	bne.n	800373e <my_tracker_handle_cmd+0x2ca>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 80036bc:	4b56      	ldr	r3, [pc, #344]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	469a      	mov	sl, r3
 80036c2:	4b60      	ldr	r3, [pc, #384]	; (8003844 <my_tracker_handle_cmd+0x3d0>)
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	4b60      	ldr	r3, [pc, #384]	; (8003848 <my_tracker_handle_cmd+0x3d4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	001e      	movs	r6, r3
 80036cc:	4b5f      	ldr	r3, [pc, #380]	; (800384c <my_tracker_handle_cmd+0x3d8>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	469c      	mov	ip, r3
 80036d2:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <my_tracker_handle_cmd+0x3dc>)
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <my_tracker_handle_cmd+0x3e0>)
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	4698      	mov	r8, r3
 80036dc:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <my_tracker_handle_cmd+0x3e4>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	4699      	mov	r9, r3
 80036e2:	4b5e      	ldr	r3, [pc, #376]	; (800385c <my_tracker_handle_cmd+0x3e8>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4c5d      	ldr	r4, [pc, #372]	; (8003860 <my_tracker_handle_cmd+0x3ec>)
 80036ea:	484d      	ldr	r0, [pc, #308]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80036ec:	9206      	str	r2, [sp, #24]
 80036ee:	9307      	str	r3, [sp, #28]
 80036f0:	464b      	mov	r3, r9
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	4643      	mov	r3, r8
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	9102      	str	r1, [sp, #8]
 80036fa:	4663      	mov	r3, ip
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	9600      	str	r6, [sp, #0]
 8003700:	002b      	movs	r3, r5
 8003702:	4652      	mov	r2, sl
 8003704:	0021      	movs	r1, r4
 8003706:	f009 fde7 	bl	800d2d8 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800370a:	4c56      	ldr	r4, [pc, #344]	; (8003864 <my_tracker_handle_cmd+0x3f0>)
 800370c:	4a46      	ldr	r2, [pc, #280]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 800370e:	4947      	ldr	r1, [pc, #284]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 8003710:	4847      	ldr	r0, [pc, #284]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003712:	4b43      	ldr	r3, [pc, #268]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	0023      	movs	r3, r4
 8003718:	f009 fdde 	bl	800d2d8 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 800371c:	4b44      	ldr	r3, [pc, #272]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 800371e:	0018      	movs	r0, r3
 8003720:	f7ff fce2 	bl	80030e8 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	b291      	uxth	r1, r2
 800372c:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 800372e:	8011      	strh	r1, [r2, #0]
 8003730:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f007 f981 	bl	800aa3c <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 800373a:	f000 f9ed 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  }
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_COURSE )
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d160      	bne.n	8003808 <my_tracker_handle_cmd+0x394>
				  {
					  sprintf ( my_astro_payload , "%u,%lu" , uplink_id , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	001c      	movs	r4, r3
 800374c:	4b46      	ldr	r3, [pc, #280]	; (8003868 <my_tracker_handle_cmd+0x3f4>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	213c      	movs	r1, #60	; 0x3c
 8003752:	0018      	movs	r0, r3
 8003754:	f7fc fcf2 	bl	800013c <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	4944      	ldr	r1, [pc, #272]	; (800386c <my_tracker_handle_cmd+0x3f8>)
 800375c:	4830      	ldr	r0, [pc, #192]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800375e:	0022      	movs	r2, r4
 8003760:	f009 fdba 	bl	800d2d8 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003764:	4c42      	ldr	r4, [pc, #264]	; (8003870 <my_tracker_handle_cmd+0x3fc>)
 8003766:	4a30      	ldr	r2, [pc, #192]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 8003768:	4930      	ldr	r1, [pc, #192]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 800376a:	4831      	ldr	r0, [pc, #196]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	0023      	movs	r3, r4
 8003772:	f009 fdb1 	bl	800d2d8 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff fcb5 	bl	80030e8 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800377e:	4b26      	ldr	r3, [pc, #152]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	b291      	uxth	r1, r2
 8003786:	4a24      	ldr	r2, [pc, #144]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 8003788:	8011      	strh	r1, [r2, #0]
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800378c:	0011      	movs	r1, r2
 800378e:	0018      	movs	r0, r3
 8003790:	f007 f954 	bl	800aa3c <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 8003794:	f000 f9c0 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 8003798:	e036      	b.n	8003808 <my_tracker_handle_cmd+0x394>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d168      	bne.n	8003874 <my_tracker_handle_cmd+0x400>
					  my_sys_restart () ;
 80037a2:	f7ff fd6f 	bl	8003284 <my_sys_restart>
				  break ;
 80037a6:	e065      	b.n	8003874 <my_tracker_handle_cmd+0x400>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	001c      	movs	r4, r3
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80037b0:	7a1b      	ldrb	r3, [r3, #8]
 80037b2:	001d      	movs	r5, r3
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	001a      	movs	r2, r3
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4917      	ldr	r1, [pc, #92]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 80037c0:	4817      	ldr	r0, [pc, #92]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	002b      	movs	r3, r5
 80037c8:	0022      	movs	r2, r4
 80037ca:	f009 fd85 	bl	800d2d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80037ce:	23f6      	movs	r3, #246	; 0xf6
 80037d0:	009c      	lsls	r4, r3, #2
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <my_tracker_handle_cmd+0x3b4>)
 80037d4:	4915      	ldr	r1, [pc, #84]	; (800382c <my_tracker_handle_cmd+0x3b8>)
 80037d6:	4816      	ldr	r0, [pc, #88]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	0023      	movs	r3, r4
 80037de:	f009 fd7b 	bl	800d2d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <my_tracker_handle_cmd+0x3bc>)
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff fc7f 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	b291      	uxth	r1, r2
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80037f4:	8011      	strh	r1, [r2, #0]
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 80037f8:	0011      	movs	r1, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f007 f91e 	bl	800aa3c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003800:	f000 f98a 	bl	8003b18 <my_astro_turn_payload_id_counter>
				  return false ;
 8003804:	2300      	movs	r3, #0
 8003806:	e037      	b.n	8003878 <my_tracker_handle_cmd+0x404>
				  break ;
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	e034      	b.n	8003876 <my_tracker_handle_cmd+0x402>
 800380c:	20000c1c 	.word	0x20000c1c
 8003810:	20000ad8 	.word	0x20000ad8
 8003814:	08015a4c 	.word	0x08015a4c
 8003818:	20000ae4 	.word	0x20000ae4
 800381c:	080140a0 	.word	0x080140a0
 8003820:	20000a38 	.word	0x20000a38
 8003824:	0000039a 	.word	0x0000039a
 8003828:	08013ee8 	.word	0x08013ee8
 800382c:	08013fac 	.word	0x08013fac
 8003830:	20000b20 	.word	0x20000b20
 8003834:	000003a2 	.word	0x000003a2
 8003838:	000003aa 	.word	0x000003aa
 800383c:	000003b2 	.word	0x000003b2
 8003840:	000003ba 	.word	0x000003ba
 8003844:	20000004 	.word	0x20000004
 8003848:	20000a22 	.word	0x20000a22
 800384c:	20000008 	.word	0x20000008
 8003850:	2000000c 	.word	0x2000000c
 8003854:	2000001a 	.word	0x2000001a
 8003858:	2000001c 	.word	0x2000001c
 800385c:	20000020 	.word	0x20000020
 8003860:	080140b0 	.word	0x080140b0
 8003864:	000003c3 	.word	0x000003c3
 8003868:	20000ae8 	.word	0x20000ae8
 800386c:	080140cc 	.word	0x080140cc
 8003870:	000003cb 	.word	0x000003cb
				  break ;
 8003874:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 8003876:	2301      	movs	r3, #1
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	bce0      	pop	{r5, r6, r7}
 800387e:	46ba      	mov	sl, r7
 8003880:	46b1      	mov	r9, r6
 8003882:	46a8      	mov	r8, r5
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)

08003888 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	0002      	movs	r2, r0
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10e      	bne.n	80038ba <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4811      	ldr	r0, [pc, #68]	; (80038e8 <my_ant_sw_pos+0x60>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	0019      	movs	r1, r3
 80038a6:	f001 f9e6 	bl	8004c76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	480e      	ldr	r0, [pc, #56]	; (80038e8 <my_ant_sw_pos+0x60>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	0019      	movs	r1, r3
 80038b4:	f001 f9df 	bl	8004c76 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80038b8:	e011      	b.n	80038de <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d10d      	bne.n	80038de <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	4808      	ldr	r0, [pc, #32]	; (80038e8 <my_ant_sw_pos+0x60>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	0019      	movs	r1, r3
 80038cc:	f001 f9d3 	bl	8004c76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4804      	ldr	r0, [pc, #16]	; (80038e8 <my_ant_sw_pos+0x60>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	0019      	movs	r1, r3
 80038da:	f001 f9cc 	bl	8004c76 <HAL_GPIO_WritePin>
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	50000400 	.word	0x50000400

080038ec <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 80038f0:	2001      	movs	r0, #1
 80038f2:	f7ff ffc9 	bl	8003888 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	4808      	ldr	r0, [pc, #32]	; (800391c <my_gnss_sw_on+0x30>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	0019      	movs	r1, r3
 8003900:	f001 f9b9 	bl	8004c76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	019b      	lsls	r3, r3, #6
 8003908:	4804      	ldr	r0, [pc, #16]	; (800391c <my_gnss_sw_on+0x30>)
 800390a:	2201      	movs	r2, #1
 800390c:	0019      	movs	r1, r3
 800390e:	f001 f9b2 	bl	8004c76 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8003912:	f7ff faa9 	bl	8002e68 <MX_USART5_UART_Init>
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	50000400 	.word	0x50000400

08003920 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003924:	2002      	movs	r0, #2
 8003926:	f7ff ffaf 	bl	8003888 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <my_gnss_sw_off+0x3c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d811      	bhi.n	8003956 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	480a      	ldr	r0, [pc, #40]	; (8003960 <my_gnss_sw_off+0x40>)
 8003938:	2200      	movs	r2, #0
 800393a:	0019      	movs	r1, r3
 800393c:	f001 f99b 	bl	8004c76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	019b      	lsls	r3, r3, #6
 8003944:	4806      	ldr	r0, [pc, #24]	; (8003960 <my_gnss_sw_off+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	0019      	movs	r1, r3
 800394a:	f001 f994 	bl	8004c76 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <my_gnss_sw_off+0x44>)
 8003950:	0018      	movs	r0, r3
 8003952:	f004 f9e5 	bl	8007d20 <HAL_UART_DeInit>
	}
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000a22 	.word	0x20000a22
 8003960:	50000400 	.word	0x50000400
 8003964:	2000098c 	.word	0x2000098c

08003968 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	000a      	movs	r2, r1
 8003972:	1cfb      	adds	r3, r7, #3
 8003974:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003976:	23fa      	movs	r3, #250	; 0xfa
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4809      	ldr	r0, [pc, #36]	; (80039a4 <my_gnss_receive_byte+0x3c>)
 800397e:	2201      	movs	r2, #1
 8003980:	f004 fab2 	bl	8007ee8 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <my_gnss_receive_byte+0x40>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 800398c:	23fa      	movs	r3, #250	; 0xfa
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4806      	ldr	r0, [pc, #24]	; (80039ac <my_gnss_receive_byte+0x44>)
 8003994:	2201      	movs	r2, #1
 8003996:	f004 fa03 	bl	8007da0 <HAL_UART_Transmit>
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	2000098c 	.word	0x2000098c
 80039a8:	20000a22 	.word	0x20000a22
 80039ac:	20000864 	.word	0x20000864

080039b0 <my_acc_init>:
	  my_gnss_sw_off () ;
}

// ACC
bool my_acc_init ( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 80039bc:	1dfa      	adds	r2, r7, #7
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <my_acc_init+0x60>)
 80039c0:	0011      	movs	r1, r2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f006 ffef 	bl	800a9a6 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b33      	cmp	r3, #51	; 0x33
 80039ce:	d001      	beq.n	80039d4 <my_acc_init+0x24>
		return false ;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e018      	b.n	8003a06 <my_acc_init+0x56>

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <my_acc_init+0x60>)
 80039d6:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <my_acc_init+0x64>)
 80039d8:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <my_acc_init+0x60>)
 80039dc:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <my_acc_init+0x68>)
 80039de:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <my_acc_init+0x60>)
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <my_acc_init+0x6c>)
 80039e4:	60da      	str	r2, [r3, #12]

	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <my_acc_init+0x60>)
 80039e8:	2100      	movs	r1, #0
 80039ea:	0018      	movs	r0, r3
 80039ec:	f006 ffab 	bl	800a946 <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ;
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <my_acc_init+0x60>)
 80039f2:	2102      	movs	r1, #2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f006 ff0f 	bl	800a818 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ;
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <my_acc_init+0x60>)
 80039fc:	2102      	movs	r1, #2
 80039fe:	0018      	movs	r0, r3
 8003a00:	f006 ff73 	bl	800a8ea <iis2dh_data_rate_set>

	return true ;
 8003a04:	2301      	movs	r3, #1
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	20000b00 	.word	0x20000b00
 8003a14:	08003b35 	.word	0x08003b35
 8003a18:	08003b9f 	.word	0x08003b9f
 8003a1c:	20000720 	.word	0x20000720

08003a20 <my_astronode_reset>:

// ** ASTRO Operations
void my_astronode_reset ( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <my_astronode_reset+0x30>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	2102      	movs	r1, #2
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f001 f923 	bl	8004c76 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003a30:	2001      	movs	r0, #1
 8003a32:	f000 fd75 	bl	8004520 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <my_astronode_reset+0x30>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f001 f91a 	bl	8004c76 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003a42:	20fa      	movs	r0, #250	; 0xfa
 8003a44:	f000 fd6c 	bl	8004520 <HAL_Delay>
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	50000400 	.word	0x50000400

08003a54 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <send_astronode_request+0x34>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff fb41 	bl	80030e8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fb3d 	bl	80030e8 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	23fa      	movs	r3, #250	; 0xfa
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <send_astronode_request+0x38>)
 8003a7a:	f004 f991 	bl	8007da0 <HAL_UART_Transmit>
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	080140dc 	.word	0x080140dc
 8003a8c:	200008f8 	.word	0x200008f8

08003a90 <get_systick>:
uint32_t get_systick ( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003a94:	f000 fd3a 	bl	800450c <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003aae:	f7ff ffef 	bl	8003a90 <get_systick>
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	1cba      	adds	r2, r7, #2
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	419b      	sbcs	r3, r3
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4806      	ldr	r0, [pc, #24]	; (8003af0 <is_astronode_character_received+0x24>)
 8003ad8:	2364      	movs	r3, #100	; 0x64
 8003ada:	2201      	movs	r2, #1
 8003adc:	f004 fa04 	bl	8007ee8 <HAL_UART_Receive>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	425a      	negs	r2, r3
 8003ae4:	4153      	adcs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200008f8 	.word	0x200008f8

08003af4 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <my_astro_evt_pin+0x20>)
 8003afa:	2104      	movs	r1, #4
 8003afc:	0018      	movs	r0, r3
 8003afe:	f001 f89d 	bl	8004c3c <HAL_GPIO_ReadPin>
 8003b02:	0003      	movs	r3, r0
 8003b04:	3b01      	subs	r3, #1
 8003b06:	425a      	negs	r2, r3
 8003b08:	4153      	adcs	r3, r2
 8003b0a:	b2db      	uxtb	r3, r3
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	50000400 	.word	0x50000400

08003b18 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <my_astro_turn_payload_id_counter+0x18>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	2b63      	cmp	r3, #99	; 0x63
 8003b22:	d902      	bls.n	8003b2a <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003b24:	4b02      	ldr	r3, [pc, #8]	; (8003b30 <my_astro_turn_payload_id_counter+0x18>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	801a      	strh	r2, [r3, #0]
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000ae4 	.word	0x20000ae4

08003b34 <my_st_acc_platform_write>:

// ACC LL Function
int32_t my_st_acc_platform_write ( void* handle , uint8_t reg , const uint8_t* bufp , uint16_t len )
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	0008      	movs	r0, r1
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	0019      	movs	r1, r3
 8003b42:	240b      	movs	r4, #11
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	1c02      	adds	r2, r0, #0
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	2508      	movs	r5, #8
 8003b4c:	197b      	adds	r3, r7, r5
 8003b4e:	1c0a      	adds	r2, r1, #0
 8003b50:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003b52:	23a0      	movs	r3, #160	; 0xa0
 8003b54:	05db      	lsls	r3, r3, #23
 8003b56:	2200      	movs	r2, #0
 8003b58:	2110      	movs	r1, #16
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f001 f88b 	bl	8004c76 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003b60:	2014      	movs	r0, #20
 8003b62:	f000 fcdd 	bl	8004520 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003b66:	23fa      	movs	r3, #250	; 0xfa
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	1939      	adds	r1, r7, r4
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f002 fee2 	bl	8006938 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003b74:	23fa      	movs	r3, #250	; 0xfa
 8003b76:	009c      	lsls	r4, r3, #2
 8003b78:	197b      	adds	r3, r7, r5
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	0023      	movs	r3, r4
 8003b82:	f002 fed9 	bl	8006938 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003b86:	23a0      	movs	r3, #160	; 0xa0
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2110      	movs	r1, #16
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f001 f871 	bl	8004c76 <HAL_GPIO_WritePin>

	return 0 ;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bdb0      	pop	{r4, r5, r7, pc}

08003b9e <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void* handle , uint8_t reg , uint8_t* bufp , uint16_t len )
{
 8003b9e:	b5b0      	push	{r4, r5, r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	0008      	movs	r0, r1
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	0019      	movs	r1, r3
 8003bac:	240b      	movs	r4, #11
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	1c02      	adds	r2, r0, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	2508      	movs	r5, #8
 8003bb6:	197b      	adds	r3, r7, r5
 8003bb8:	1c0a      	adds	r2, r1, #0
 8003bba:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	4252      	negs	r2, r2
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	193b      	adds	r3, r7, r4
 8003bca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003bcc:	23a0      	movs	r3, #160	; 0xa0
 8003bce:	05db      	lsls	r3, r3, #23
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f001 f84e 	bl	8004c76 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003bda:	2014      	movs	r0, #20
 8003bdc:	f000 fca0 	bl	8004520 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003be0:	23fa      	movs	r3, #250	; 0xfa
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	1939      	adds	r1, r7, r4
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f002 fea5 	bl	8006938 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003bee:	23fa      	movs	r3, #250	; 0xfa
 8003bf0:	009c      	lsls	r4, r3, #2
 8003bf2:	197b      	adds	r3, r7, r5
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	0023      	movs	r3, r4
 8003bfc:	f002 fffc 	bl	8006bf8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003c00:	23a0      	movs	r3, #160	; 0xa0
 8003c02:	05db      	lsls	r3, r3, #23
 8003c04:	2201      	movs	r2, #1
 8003c06:	2110      	movs	r1, #16
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f001 f834 	bl	8004c76 <HAL_GPIO_WritePin>

	return 0 ;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bdb0      	pop	{r4, r5, r7, pc}

08003c18 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <my_tim_init+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4252      	negs	r2, r2
 8003c24:	611a      	str	r2, [r3, #16]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000784 	.word	0x20000784

08003c30 <my_tim_start>:

void my_tim_start ()
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <my_tim_start+0x18>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003c3a:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <my_tim_start+0x1c>)
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f003 fd3b 	bl	80076b8 <HAL_TIM_Base_Start_IT>
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000c44 	.word	0x20000c44
 8003c4c:	20000784 	.word	0x20000784

08003c50 <my_tim_stop>:

void my_tim_stop ()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <my_tim_stop+0x14>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f003 fd90 	bl	800777c <HAL_TIM_Base_Stop_IT>
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000784 	.word	0x20000784

08003c68 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10d      	bne.n	8003c96 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c84:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d901      	bls.n	8003c96 <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003c92:	f7ff faf7 	bl	8003284 <my_sys_restart>
	}
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40001000 	.word	0x40001000
 8003ca4:	20000c44 	.word	0x20000c44
 8003ca8:	20000008 	.word	0x20000008

08003cac <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	20000b10 	.word	0x20000b10

08003cc8 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	0002      	movs	r2, r0
 8003cd0:	1dbb      	adds	r3, r7, #6
 8003cd2:	801a      	strh	r2, [r3, #0]

}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce4:	e7fe      	b.n	8003ce4 <Error_Handler+0x8>
	...

08003ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_MspInit+0x4c>)
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_MspInit+0x4c>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_MspInit+0x4c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4013      	ands	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_MspInit+0x4c>)
 8003d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_MspInit+0x4c>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0549      	lsls	r1, r1, #21
 8003d10:	430a      	orrs	r2, r1
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_MspInit+0x4c>)
 8003d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	055b      	lsls	r3, r3, #21
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003d22:	23c0      	movs	r3, #192	; 0xc0
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fc3a 	bl	80045a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000

08003d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b097      	sub	sp, #92	; 0x5c
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d40:	240c      	movs	r4, #12
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	0018      	movs	r0, r3
 8003d46:	234c      	movs	r3, #76	; 0x4c
 8003d48:	001a      	movs	r2, r3
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f009 fb5a 	bl	800d404 <memset>
  if(hrtc->Instance==RTC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <HAL_RTC_MspInit+0x84>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d12c      	bne.n	8003db4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	0292      	lsls	r2, r2, #10
 8003d60:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d62:	193b      	adds	r3, r7, r4
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	0052      	lsls	r2, r2, #1
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 fd89 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d76:	f7ff ffb1 	bl	8003cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RTC_MspInit+0x88>)
 8003d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_RTC_MspInit+0x88>)
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	0209      	lsls	r1, r1, #8
 8003d84:	430a      	orrs	r2, r1
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_RTC_MspInit+0x88>)
 8003d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RTC_MspInit+0x88>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	00c9      	lsls	r1, r1, #3
 8003d92:	430a      	orrs	r2, r1
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_RTC_MspInit+0x88>)
 8003d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003da4:	2200      	movs	r2, #0
 8003da6:	2103      	movs	r1, #3
 8003da8:	2002      	movs	r0, #2
 8003daa:	f000 fccd 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003dae:	2002      	movs	r0, #2
 8003db0:	f000 fcdf 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b017      	add	sp, #92	; 0x5c
 8003dba:	bd90      	pop	{r4, r7, pc}
 8003dbc:	40002800 	.word	0x40002800
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	2414      	movs	r4, #20
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	2314      	movs	r3, #20
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f009 fb14 	bl	800d404 <memset>
  if(hspi->Instance==SPI1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <HAL_SPI_MspInit+0x8c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d130      	bne.n	8003e48 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0149      	lsls	r1, r1, #5
 8003df0:	430a      	orrs	r2, r1
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003e08:	2101      	movs	r1, #1
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_SPI_MspInit+0x90>)
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2201      	movs	r2, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003e1a:	0021      	movs	r1, r4
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	22e0      	movs	r2, #224	; 0xe0
 8003e20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	2202      	movs	r2, #2
 8003e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	2200      	movs	r2, #0
 8003e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3a:	187a      	adds	r2, r7, r1
 8003e3c:	23a0      	movs	r3, #160	; 0xa0
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	0011      	movs	r1, r2
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 fcb6 	bl	80047b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00b      	add	sp, #44	; 0x2c
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	40013000 	.word	0x40013000
 8003e54:	40021000 	.word	0x40021000

08003e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <HAL_TIM_Base_MspInit+0x44>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d113      	bne.n	8003e92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_TIM_Base_MspInit+0x48>)
 8003e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_TIM_Base_MspInit+0x48>)
 8003e70:	2110      	movs	r1, #16
 8003e72:	430a      	orrs	r2, r1
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_TIM_Base_MspInit+0x48>)
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2102      	movs	r1, #2
 8003e86:	2011      	movs	r0, #17
 8003e88:	f000 fc5e 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003e8c:	2011      	movs	r0, #17
 8003e8e:	f000 fc70 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40001000 	.word	0x40001000
 8003ea0:	40021000 	.word	0x40021000

08003ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b0a3      	sub	sp, #140	; 0x8c
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	2374      	movs	r3, #116	; 0x74
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	2314      	movs	r3, #20
 8003eb4:	001a      	movs	r2, r3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f009 faa4 	bl	800d404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ebc:	2428      	movs	r4, #40	; 0x28
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	234c      	movs	r3, #76	; 0x4c
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f009 fa9c 	bl	800d404 <memset>
  if(huart->Instance==USART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a84      	ldr	r2, [pc, #528]	; (80040e4 <HAL_UART_MspInit+0x240>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d140      	bne.n	8003f58 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003edc:	193b      	adds	r3, r7, r4
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f001 fccd 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003eee:	f7ff fef5 	bl	8003cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ef2:	4b7d      	ldr	r3, [pc, #500]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	01c9      	lsls	r1, r1, #7
 8003efc:	430a      	orrs	r2, r1
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
 8003f00:	4b79      	ldr	r3, [pc, #484]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	01db      	lsls	r3, r3, #7
 8003f08:	4013      	ands	r3, r2
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	4b76      	ldr	r3, [pc, #472]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f14:	2101      	movs	r1, #1
 8003f16:	430a      	orrs	r2, r1
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
 8003f1a:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003f26:	2174      	movs	r1, #116	; 0x74
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	22c0      	movs	r2, #192	; 0xc0
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	2202      	movs	r2, #2
 8003f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	187b      	adds	r3, r7, r1
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	2201      	movs	r2, #1
 8003f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f48:	187a      	adds	r2, r7, r1
 8003f4a:	23a0      	movs	r3, #160	; 0xa0
 8003f4c:	05db      	lsls	r3, r3, #23
 8003f4e:	0011      	movs	r1, r2
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 fc2f 	bl	80047b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003f56:	e0c0      	b.n	80040da <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a63      	ldr	r2, [pc, #396]	; (80040ec <HAL_UART_MspInit+0x248>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d140      	bne.n	8003fe4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f62:	2128      	movs	r1, #40	; 0x28
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	2202      	movs	r2, #2
 8003f68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	0018      	movs	r0, r3
 8003f74:	f001 fc86 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003f7c:	f7ff feae 	bl	8003cdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	0289      	lsls	r1, r1, #10
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	4013      	ands	r3, r2
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa0:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003fb4:	2174      	movs	r1, #116	; 0x74
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	220c      	movs	r2, #12
 8003fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd4:	187a      	adds	r2, r7, r1
 8003fd6:	23a0      	movs	r3, #160	; 0xa0
 8003fd8:	05db      	lsls	r3, r3, #23
 8003fda:	0011      	movs	r1, r2
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 fbe9 	bl	80047b4 <HAL_GPIO_Init>
}
 8003fe2:	e07a      	b.n	80040da <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a41      	ldr	r2, [pc, #260]	; (80040f0 <HAL_UART_MspInit+0x24c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d140      	bne.n	8004070 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003fee:	2128      	movs	r1, #40	; 0x28
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	0018      	movs	r0, r3
 8004000:	f001 fc40 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <HAL_UART_MspInit+0x168>
      Error_Handler();
 8004008:	f7ff fe68 	bl	8003cdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800400e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004010:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	02c9      	lsls	r1, r1, #11
 8004016:	430a      	orrs	r2, r1
 8004018:	63da      	str	r2, [r3, #60]	; 0x3c
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800401c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	02db      	lsls	r3, r3, #11
 8004022:	4013      	ands	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004028:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800402a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800402e:	2102      	movs	r1, #2
 8004030:	430a      	orrs	r2, r1
 8004032:	635a      	str	r2, [r3, #52]	; 0x34
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8004040:	2174      	movs	r1, #116	; 0x74
 8004042:	187b      	adds	r3, r7, r1
 8004044:	22c0      	movs	r2, #192	; 0xc0
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2202      	movs	r2, #2
 800404e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	187b      	adds	r3, r7, r1
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2200      	movs	r2, #0
 800405a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2204      	movs	r2, #4
 8004060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004062:	187b      	adds	r3, r7, r1
 8004064:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <HAL_UART_MspInit+0x250>)
 8004066:	0019      	movs	r1, r3
 8004068:	0010      	movs	r0, r2
 800406a:	f000 fba3 	bl	80047b4 <HAL_GPIO_Init>
}
 800406e:	e034      	b.n	80040da <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_UART_MspInit+0x254>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12f      	bne.n	80040da <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800407c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0049      	lsls	r1, r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	63da      	str	r2, [r3, #60]	; 0x3c
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800408a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_UART_MspInit+0x244>)
 8004098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_UART_MspInit+0x244>)
 800409c:	2102      	movs	r1, #2
 800409e:	430a      	orrs	r2, r1
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_UART_MspInit+0x244>)
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	2202      	movs	r2, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80040ae:	2174      	movs	r1, #116	; 0x74
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	2218      	movs	r2, #24
 80040b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	2202      	movs	r2, #2
 80040ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	2200      	movs	r2, #0
 80040c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	2203      	movs	r2, #3
 80040cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <HAL_UART_MspInit+0x250>)
 80040d2:	0019      	movs	r1, r3
 80040d4:	0010      	movs	r0, r2
 80040d6:	f000 fb6d 	bl	80047b4 <HAL_GPIO_Init>
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b023      	add	sp, #140	; 0x8c
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	40013800 	.word	0x40013800
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40004400 	.word	0x40004400
 80040f0:	40004800 	.word	0x40004800
 80040f4:	50000400 	.word	0x50000400
 80040f8:	40005000 	.word	0x40005000

080040fc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <HAL_UART_MspDeInit+0xa4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10e      	bne.n	800412c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004114:	4924      	ldr	r1, [pc, #144]	; (80041a8 <HAL_UART_MspDeInit+0xac>)
 8004116:	400a      	ands	r2, r1
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 800411a:	23c0      	movs	r3, #192	; 0xc0
 800411c:	00da      	lsls	r2, r3, #3
 800411e:	23a0      	movs	r3, #160	; 0xa0
 8004120:	05db      	lsls	r3, r3, #23
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f000 fcb1 	bl	8004a8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 800412a:	e034      	b.n	8004196 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_UART_MspDeInit+0xb0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10c      	bne.n	8004150 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 800413c:	491c      	ldr	r1, [pc, #112]	; (80041b0 <HAL_UART_MspDeInit+0xb4>)
 800413e:	400a      	ands	r2, r1
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	210c      	movs	r1, #12
 8004148:	0018      	movs	r0, r3
 800414a:	f000 fc9f 	bl	8004a8c <HAL_GPIO_DeInit>
}
 800414e:	e022      	b.n	8004196 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_UART_MspDeInit+0xb8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 800415c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004160:	4915      	ldr	r1, [pc, #84]	; (80041b8 <HAL_UART_MspDeInit+0xbc>)
 8004162:	400a      	ands	r2, r1
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8004166:	23c0      	movs	r3, #192	; 0xc0
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_UART_MspDeInit+0xc0>)
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f000 fc8c 	bl	8004a8c <HAL_GPIO_DeInit>
}
 8004174:	e00f      	b.n	8004196 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <HAL_UART_MspDeInit+0xc4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10a      	bne.n	8004196 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_UART_MspDeInit+0xa8>)
 8004186:	490f      	ldr	r1, [pc, #60]	; (80041c4 <HAL_UART_MspDeInit+0xc8>)
 8004188:	400a      	ands	r2, r1
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_UART_MspDeInit+0xc0>)
 800418e:	2118      	movs	r1, #24
 8004190:	0018      	movs	r0, r3
 8004192:	f000 fc7b 	bl	8004a8c <HAL_GPIO_DeInit>
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40021000 	.word	0x40021000
 80041a8:	ffffbfff 	.word	0xffffbfff
 80041ac:	40004400 	.word	0x40004400
 80041b0:	fffdffff 	.word	0xfffdffff
 80041b4:	40004800 	.word	0x40004800
 80041b8:	fffbffff 	.word	0xfffbffff
 80041bc:	50000400 	.word	0x50000400
 80041c0:	40005000 	.word	0x40005000
 80041c4:	fffffeff 	.word	0xfffffeff

080041c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041cc:	e7fe      	b.n	80041cc <NMI_Handler+0x4>

080041ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <HardFault_Handler+0x4>

080041d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ec:	f000 f97c 	bl	80044e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <RTC_TAMP_IRQHandler+0x14>)
 80041fe:	0018      	movs	r0, r3
 8004200:	f002 f942 	bl	8006488 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	200006f4 	.word	0x200006f4

08004210 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8004214:	2004      	movs	r0, #4
 8004216:	f000 fd4b 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8004226:	0018      	movs	r0, r3
 8004228:	f003 fad6 	bl	80077d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000784 	.word	0x20000784

08004238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  return 1;
 800423c:	2301      	movs	r3, #1
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_kill>:

int _kill(int pid, int sig)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800424e:	f009 f9cd 	bl	800d5ec <__errno>
 8004252:	0003      	movs	r3, r0
 8004254:	2216      	movs	r2, #22
 8004256:	601a      	str	r2, [r3, #0]
  return -1;
 8004258:	2301      	movs	r3, #1
 800425a:	425b      	negs	r3, r3
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b002      	add	sp, #8
 8004262:	bd80      	pop	{r7, pc}

08004264 <_exit>:

void _exit (int status)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800426c:	2301      	movs	r3, #1
 800426e:	425a      	negs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff ffe5 	bl	8004244 <_kill>
  while (1) {}    /* Make sure we hang here */
 800427a:	e7fe      	b.n	800427a <_exit+0x16>

0800427c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e00a      	b.n	80042a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800428e:	e000      	b.n	8004292 <_read+0x16>
 8004290:	bf00      	nop
 8004292:	0001      	movs	r1, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dbf0      	blt.n	800428e <_read+0x12>
  }

  return len;
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b006      	add	sp, #24
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e009      	b.n	80042dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	60ba      	str	r2, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	0018      	movs	r0, r3
 80042d2:	e000      	b.n	80042d6 <_write+0x20>
 80042d4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	dbf1      	blt.n	80042c8 <_write+0x12>
  }
  return len;
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b006      	add	sp, #24
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_close>:

int _close(int file)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	425b      	negs	r3, r3
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}

08004302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	0192      	lsls	r2, r2, #6
 8004312:	605a      	str	r2, [r3, #4]
  return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}

0800431e <_isatty>:

int _isatty(int file)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004326:	2301      	movs	r3, #1
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800433c:	2300      	movs	r3, #0
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <_sbrk+0x5c>)
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <_sbrk+0x60>)
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <_sbrk+0x64>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <_sbrk+0x64>)
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <_sbrk+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <_sbrk+0x64>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	18d3      	adds	r3, r2, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d207      	bcs.n	8004388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004378:	f009 f938 	bl	800d5ec <__errno>
 800437c:	0003      	movs	r3, r0
 800437e:	220c      	movs	r2, #12
 8004380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004382:	2301      	movs	r3, #1
 8004384:	425b      	negs	r3, r3
 8004386:	e009      	b.n	800439c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_sbrk+0x64>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <_sbrk+0x64>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	18d2      	adds	r2, r2, r3
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_sbrk+0x64>)
 8004398:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b006      	add	sp, #24
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20024000 	.word	0x20024000
 80043a8:	00000400 	.word	0x00000400
 80043ac:	20000b14 	.word	0x20000b14
 80043b0:	20000f58 	.word	0x20000f58

080043b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043c0:	480d      	ldr	r0, [pc, #52]	; (80043f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043c4:	f7ff fff6 	bl	80043b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043c8:	480c      	ldr	r0, [pc, #48]	; (80043fc <LoopForever+0x6>)
  ldr r1, =_edata
 80043ca:	490d      	ldr	r1, [pc, #52]	; (8004400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043cc:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <LoopForever+0xe>)
  movs r3, #0
 80043ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d0:	e002      	b.n	80043d8 <LoopCopyDataInit>

080043d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043d6:	3304      	adds	r3, #4

080043d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043dc:	d3f9      	bcc.n	80043d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e0:	4c0a      	ldr	r4, [pc, #40]	; (800440c <LoopForever+0x16>)
  movs r3, #0
 80043e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e4:	e001      	b.n	80043ea <LoopFillZerobss>

080043e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e8:	3204      	adds	r2, #4

080043ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ec:	d3fb      	bcc.n	80043e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80043ee:	f009 f903 	bl	800d5f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80043f2:	f7fe f8d9 	bl	80025a8 <main>

080043f6 <LoopForever>:

LoopForever:
  b LoopForever
 80043f6:	e7fe      	b.n	80043f6 <LoopForever>
  ldr   r0, =_estack
 80043f8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80043fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004400:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8004404:	08015fb0 	.word	0x08015fb0
  ldr r2, =_sbss
 8004408:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 800440c:	20000f54 	.word	0x20000f54

08004410 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004410:	e7fe      	b.n	8004410 <ADC1_COMP_IRQHandler>
	...

08004414 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_Init+0x3c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_Init+0x3c>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0049      	lsls	r1, r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800442e:	2003      	movs	r0, #3
 8004430:	f000 f810 	bl	8004454 <HAL_InitTick>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d003      	beq.n	8004440 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004438:	1dfb      	adds	r3, r7, #7
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e001      	b.n	8004444 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004440:	f7ff fc52 	bl	8003ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004444:	1dfb      	adds	r3, r7, #7
 8004446:	781b      	ldrb	r3, [r3, #0]
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40022000 	.word	0x40022000

08004454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800445c:	230f      	movs	r3, #15
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_InitTick+0x88>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02b      	beq.n	80044c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800446c:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_InitTick+0x8c>)
 800446e:	681c      	ldr	r4, [r3, #0]
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_InitTick+0x88>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	0019      	movs	r1, r3
 8004476:	23fa      	movs	r3, #250	; 0xfa
 8004478:	0098      	lsls	r0, r3, #2
 800447a:	f7fb fe5f 	bl	800013c <__udivsi3>
 800447e:	0003      	movs	r3, r0
 8004480:	0019      	movs	r1, r3
 8004482:	0020      	movs	r0, r4
 8004484:	f7fb fe5a 	bl	800013c <__udivsi3>
 8004488:	0003      	movs	r3, r0
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f985 	bl	800479a <HAL_SYSTICK_Config>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d112      	bne.n	80044ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d80a      	bhi.n	80044b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	2301      	movs	r3, #1
 800449e:	425b      	negs	r3, r3
 80044a0:	2200      	movs	r2, #0
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 f950 	bl	8004748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <HAL_InitTick+0x90>)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e00d      	b.n	80044cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80044b0:	230f      	movs	r3, #15
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e008      	b.n	80044cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044ba:	230f      	movs	r3, #15
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e003      	b.n	80044cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044c4:	230f      	movs	r3, #15
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80044cc:	230f      	movs	r3, #15
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	781b      	ldrb	r3, [r3, #0]
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b005      	add	sp, #20
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000018 	.word	0x20000018
 80044e0:	20000010 	.word	0x20000010
 80044e4:	20000014 	.word	0x20000014

080044e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_IncTick+0x1c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	001a      	movs	r2, r3
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_IncTick+0x20>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	18d2      	adds	r2, r2, r3
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_IncTick+0x20>)
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000018 	.word	0x20000018
 8004508:	20000b18 	.word	0x20000b18

0800450c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  return uwTick;
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <HAL_GetTick+0x10>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	20000b18 	.word	0x20000b18

08004520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004528:	f7ff fff0 	bl	800450c <HAL_GetTick>
 800452c:	0003      	movs	r3, r0
 800452e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	d005      	beq.n	8004546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_Delay+0x44>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001a      	movs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	189b      	adds	r3, r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	f7ff ffe0 	bl	800450c <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	429a      	cmp	r2, r3
 8004556:	d8f7      	bhi.n	8004548 <HAL_Delay+0x28>
  {
  }
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b004      	add	sp, #16
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	20000018 	.word	0x20000018

08004568 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_SuspendTick+0x18>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_SuspendTick+0x18>)
 8004572:	2102      	movs	r1, #2
 8004574:	438a      	bics	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	e000e010 	.word	0xe000e010

08004584 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <HAL_ResumeTick+0x18>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_ResumeTick+0x18>)
 800458e:	2102      	movs	r1, #2
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	e000e010 	.word	0xe000e010

080045a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a06      	ldr	r2, [pc, #24]	; (80045c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	40010000 	.word	0x40010000
 80045c8:	fffff9ff 	.word	0xfffff9ff

080045cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b7f      	cmp	r3, #127	; 0x7f
 80045de:	d809      	bhi.n	80045f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	001a      	movs	r2, r3
 80045e6:	231f      	movs	r3, #31
 80045e8:	401a      	ands	r2, r3
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <__NVIC_EnableIRQ+0x30>)
 80045ec:	2101      	movs	r1, #1
 80045ee:	4091      	lsls	r1, r2
 80045f0:	000a      	movs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	e000e100 	.word	0xe000e100

08004600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	0002      	movs	r2, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b7f      	cmp	r3, #127	; 0x7f
 8004614:	d828      	bhi.n	8004668 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004616:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <__NVIC_SetPriority+0xd4>)
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b25b      	sxtb	r3, r3
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	33c0      	adds	r3, #192	; 0xc0
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	589b      	ldr	r3, [r3, r2]
 8004626:	1dfa      	adds	r2, r7, #7
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	0011      	movs	r1, r2
 800462c:	2203      	movs	r2, #3
 800462e:	400a      	ands	r2, r1
 8004630:	00d2      	lsls	r2, r2, #3
 8004632:	21ff      	movs	r1, #255	; 0xff
 8004634:	4091      	lsls	r1, r2
 8004636:	000a      	movs	r2, r1
 8004638:	43d2      	mvns	r2, r2
 800463a:	401a      	ands	r2, r3
 800463c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	22ff      	movs	r2, #255	; 0xff
 8004644:	401a      	ands	r2, r3
 8004646:	1dfb      	adds	r3, r7, #7
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	0018      	movs	r0, r3
 800464c:	2303      	movs	r3, #3
 800464e:	4003      	ands	r3, r0
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004654:	481f      	ldr	r0, [pc, #124]	; (80046d4 <__NVIC_SetPriority+0xd4>)
 8004656:	1dfb      	adds	r3, r7, #7
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	b25b      	sxtb	r3, r3
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	430a      	orrs	r2, r1
 8004660:	33c0      	adds	r3, #192	; 0xc0
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004666:	e031      	b.n	80046cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <__NVIC_SetPriority+0xd8>)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	0019      	movs	r1, r3
 8004670:	230f      	movs	r3, #15
 8004672:	400b      	ands	r3, r1
 8004674:	3b08      	subs	r3, #8
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3306      	adds	r3, #6
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	3304      	adds	r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1dfa      	adds	r2, r7, #7
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	0011      	movs	r1, r2
 8004688:	2203      	movs	r2, #3
 800468a:	400a      	ands	r2, r1
 800468c:	00d2      	lsls	r2, r2, #3
 800468e:	21ff      	movs	r1, #255	; 0xff
 8004690:	4091      	lsls	r1, r2
 8004692:	000a      	movs	r2, r1
 8004694:	43d2      	mvns	r2, r2
 8004696:	401a      	ands	r2, r3
 8004698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	22ff      	movs	r2, #255	; 0xff
 80046a0:	401a      	ands	r2, r3
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0018      	movs	r0, r3
 80046a8:	2303      	movs	r3, #3
 80046aa:	4003      	ands	r3, r0
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <__NVIC_SetPriority+0xd8>)
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	001c      	movs	r4, r3
 80046b8:	230f      	movs	r3, #15
 80046ba:	4023      	ands	r3, r4
 80046bc:	3b08      	subs	r3, #8
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	430a      	orrs	r2, r1
 80046c2:	3306      	adds	r3, #6
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18c3      	adds	r3, r0, r3
 80046c8:	3304      	adds	r3, #4
 80046ca:	601a      	str	r2, [r3, #0]
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b003      	add	sp, #12
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	e000e100 	.word	0xe000e100
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046e0:	f3bf 8f4f 	dsb	sy
}
 80046e4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <__NVIC_SystemReset+0x1c>)
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <__NVIC_SystemReset+0x20>)
 80046ea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046ec:	f3bf 8f4f 	dsb	sy
}
 80046f0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	e7fd      	b.n	80046f2 <__NVIC_SystemReset+0x16>
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	05fa0004 	.word	0x05fa0004

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	045b      	lsls	r3, r3, #17
 8004710:	429a      	cmp	r2, r3
 8004712:	d301      	bcc.n	8004718 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004714:	2301      	movs	r3, #1
 8004716:	e010      	b.n	800473a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <SysTick_Config+0x44>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	3a01      	subs	r2, #1
 800471e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004720:	2301      	movs	r3, #1
 8004722:	425b      	negs	r3, r3
 8004724:	2103      	movs	r1, #3
 8004726:	0018      	movs	r0, r3
 8004728:	f7ff ff6a 	bl	8004600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <SysTick_Config+0x44>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <SysTick_Config+0x44>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	e000e010 	.word	0xe000e010

08004748 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	210f      	movs	r1, #15
 8004754:	187b      	adds	r3, r7, r1
 8004756:	1c02      	adds	r2, r0, #0
 8004758:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	187b      	adds	r3, r7, r1
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b25b      	sxtb	r3, r3
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff ff4b 	bl	8004600 <__NVIC_SetPriority>
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	0002      	movs	r2, r0
 800477a:	1dfb      	adds	r3, r7, #7
 800477c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ff21 	bl	80045cc <__NVIC_EnableIRQ>
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004796:	f7ff ffa1 	bl	80046dc <__NVIC_SystemReset>

0800479a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff ffab 	bl	8004700 <SysTick_Config>
 80047aa:	0003      	movs	r3, r0
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b002      	add	sp, #8
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c2:	e14d      	b.n	8004a60 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4091      	lsls	r1, r2
 80047ce:	000a      	movs	r2, r1
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d100      	bne.n	80047dc <HAL_GPIO_Init+0x28>
 80047da:	e13e      	b.n	8004a5a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2203      	movs	r2, #3
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d005      	beq.n	80047f4 <HAL_GPIO_Init+0x40>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d130      	bne.n	8004856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	409a      	lsls	r2, r3
 8004802:	0013      	movs	r3, r2
 8004804:	43da      	mvns	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	409a      	lsls	r2, r3
 8004816:	0013      	movs	r3, r2
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800482a:	2201      	movs	r2, #1
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	409a      	lsls	r2, r3
 8004830:	0013      	movs	r3, r2
 8004832:	43da      	mvns	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	2201      	movs	r2, #1
 8004842:	401a      	ands	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	409a      	lsls	r2, r3
 8004848:	0013      	movs	r3, r2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2203      	movs	r2, #3
 800485c:	4013      	ands	r3, r2
 800485e:	2b03      	cmp	r3, #3
 8004860:	d017      	beq.n	8004892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	409a      	lsls	r2, r3
 8004870:	0013      	movs	r3, r2
 8004872:	43da      	mvns	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	0013      	movs	r3, r2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2203      	movs	r2, #3
 8004898:	4013      	ands	r3, r2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d123      	bne.n	80048e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	0092      	lsls	r2, r2, #2
 80048a8:	58d3      	ldr	r3, [r2, r3]
 80048aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	409a      	lsls	r2, r3
 80048b8:	0013      	movs	r3, r2
 80048ba:	43da      	mvns	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2107      	movs	r1, #7
 80048ca:	400b      	ands	r3, r1
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	409a      	lsls	r2, r3
 80048d0:	0013      	movs	r3, r2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	409a      	lsls	r2, r3
 80048f4:	0013      	movs	r3, r2
 80048f6:	43da      	mvns	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2203      	movs	r2, #3
 8004904:	401a      	ands	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	0013      	movs	r3, r2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	23c0      	movs	r3, #192	; 0xc0
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	4013      	ands	r3, r2
 8004924:	d100      	bne.n	8004928 <HAL_GPIO_Init+0x174>
 8004926:	e098      	b.n	8004a5a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004928:	4a53      	ldr	r2, [pc, #332]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	3318      	adds	r3, #24
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	589b      	ldr	r3, [r3, r2]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2203      	movs	r2, #3
 800493a:	4013      	ands	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	220f      	movs	r2, #15
 8004940:	409a      	lsls	r2, r3
 8004942:	0013      	movs	r3, r2
 8004944:	43da      	mvns	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	23a0      	movs	r3, #160	; 0xa0
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	429a      	cmp	r2, r3
 8004954:	d019      	beq.n	800498a <HAL_GPIO_Init+0x1d6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a48      	ldr	r2, [pc, #288]	; (8004a7c <HAL_GPIO_Init+0x2c8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_GPIO_Init+0x1d2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a47      	ldr	r2, [pc, #284]	; (8004a80 <HAL_GPIO_Init+0x2cc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00d      	beq.n	8004982 <HAL_GPIO_Init+0x1ce>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a46      	ldr	r2, [pc, #280]	; (8004a84 <HAL_GPIO_Init+0x2d0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <HAL_GPIO_Init+0x1ca>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a45      	ldr	r2, [pc, #276]	; (8004a88 <HAL_GPIO_Init+0x2d4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_GPIO_Init+0x1c6>
 8004976:	2304      	movs	r3, #4
 8004978:	e008      	b.n	800498c <HAL_GPIO_Init+0x1d8>
 800497a:	2305      	movs	r3, #5
 800497c:	e006      	b.n	800498c <HAL_GPIO_Init+0x1d8>
 800497e:	2303      	movs	r3, #3
 8004980:	e004      	b.n	800498c <HAL_GPIO_Init+0x1d8>
 8004982:	2302      	movs	r3, #2
 8004984:	e002      	b.n	800498c <HAL_GPIO_Init+0x1d8>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_GPIO_Init+0x1d8>
 800498a:	2300      	movs	r3, #0
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	2103      	movs	r1, #3
 8004990:	400a      	ands	r2, r1
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	4093      	lsls	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800499c:	4936      	ldr	r1, [pc, #216]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	3318      	adds	r3, #24
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	035b      	lsls	r3, r3, #13
 80049c2:	4013      	ands	r3, r2
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80049d4:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	43da      	mvns	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	039b      	lsls	r3, r3, #14
 80049ec:	4013      	ands	r3, r2
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 8004a00:	2384      	movs	r3, #132	; 0x84
 8004a02:	58d3      	ldr	r3, [r2, r3]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43da      	mvns	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a24:	4914      	ldr	r1, [pc, #80]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 8004a26:	2284      	movs	r2, #132	; 0x84
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	58d3      	ldr	r3, [r2, r3]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43da      	mvns	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	4013      	ands	r3, r2
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a52:	4909      	ldr	r1, [pc, #36]	; (8004a78 <HAL_GPIO_Init+0x2c4>)
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	40da      	lsrs	r2, r3
 8004a68:	1e13      	subs	r3, r2, #0
 8004a6a:	d000      	beq.n	8004a6e <HAL_GPIO_Init+0x2ba>
 8004a6c:	e6aa      	b.n	80047c4 <HAL_GPIO_Init+0x10>
  }
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b006      	add	sp, #24
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021800 	.word	0x40021800
 8004a7c:	50000400 	.word	0x50000400
 8004a80:	50000800 	.word	0x50000800
 8004a84:	50000c00 	.word	0x50000c00
 8004a88:	50001000 	.word	0x50001000

08004a8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a9a:	e0ba      	b.n	8004c12 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d100      	bne.n	8004ab0 <HAL_GPIO_DeInit+0x24>
 8004aae:	e0ad      	b.n	8004c0c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	589b      	ldr	r3, [r3, r2]
 8004abc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	23a0      	movs	r3, #160	; 0xa0
 8004ad4:	05db      	lsls	r3, r3, #23
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d019      	beq.n	8004b0e <HAL_GPIO_DeInit+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a53      	ldr	r2, [pc, #332]	; (8004c2c <HAL_GPIO_DeInit+0x1a0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_GPIO_DeInit+0x7e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_GPIO_DeInit+0x1a4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00d      	beq.n	8004b06 <HAL_GPIO_DeInit+0x7a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a51      	ldr	r2, [pc, #324]	; (8004c34 <HAL_GPIO_DeInit+0x1a8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <HAL_GPIO_DeInit+0x76>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a50      	ldr	r2, [pc, #320]	; (8004c38 <HAL_GPIO_DeInit+0x1ac>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d101      	bne.n	8004afe <HAL_GPIO_DeInit+0x72>
 8004afa:	2304      	movs	r3, #4
 8004afc:	e008      	b.n	8004b10 <HAL_GPIO_DeInit+0x84>
 8004afe:	2305      	movs	r3, #5
 8004b00:	e006      	b.n	8004b10 <HAL_GPIO_DeInit+0x84>
 8004b02:	2303      	movs	r3, #3
 8004b04:	e004      	b.n	8004b10 <HAL_GPIO_DeInit+0x84>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e002      	b.n	8004b10 <HAL_GPIO_DeInit+0x84>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_GPIO_DeInit+0x84>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	2103      	movs	r1, #3
 8004b14:	400a      	ands	r2, r1
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	4093      	lsls	r3, r2
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d136      	bne.n	8004b8e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b20:	4a41      	ldr	r2, [pc, #260]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	58d3      	ldr	r3, [r2, r3]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	43d2      	mvns	r2, r2
 8004b2a:	493f      	ldr	r1, [pc, #252]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004b32:	4a3d      	ldr	r2, [pc, #244]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b34:	2384      	movs	r3, #132	; 0x84
 8004b36:	58d3      	ldr	r3, [r2, r3]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	43d2      	mvns	r2, r2
 8004b3c:	493a      	ldr	r1, [pc, #232]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2284      	movs	r2, #132	; 0x84
 8004b42:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004b44:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	43d9      	mvns	r1, r3
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004b52:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	43d9      	mvns	r1, r3
 8004b5a:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2203      	movs	r2, #3
 8004b64:	4013      	ands	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	220f      	movs	r2, #15
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	3318      	adds	r3, #24
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	589a      	ldr	r2, [r3, r2]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	4829      	ldr	r0, [pc, #164]	; (8004c28 <HAL_GPIO_DeInit+0x19c>)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	400a      	ands	r2, r1
 8004b88:	3318      	adds	r3, #24
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	2103      	movs	r1, #3
 8004b98:	4099      	lsls	r1, r3
 8004b9a:	000b      	movs	r3, r1
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	08da      	lsrs	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3208      	adds	r2, #8
 8004baa:	0092      	lsls	r2, r2, #2
 8004bac:	58d3      	ldr	r3, [r2, r3]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	2107      	movs	r1, #7
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	0092      	lsls	r2, r2, #2
 8004bb6:	210f      	movs	r1, #15
 8004bb8:	4091      	lsls	r1, r2
 8004bba:	000a      	movs	r2, r1
 8004bbc:	43d1      	mvns	r1, r2
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	08d2      	lsrs	r2, r2, #3
 8004bc2:	4019      	ands	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	0052      	lsls	r2, r2, #1
 8004bd4:	2103      	movs	r1, #3
 8004bd6:	4091      	lsls	r1, r2
 8004bd8:	000a      	movs	r2, r1
 8004bda:	43d2      	mvns	r2, r2
 8004bdc:	401a      	ands	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2101      	movs	r1, #1
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4091      	lsls	r1, r2
 8004bec:	000a      	movs	r2, r1
 8004bee:	43d2      	mvns	r2, r2
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	0052      	lsls	r2, r2, #1
 8004bfe:	2103      	movs	r1, #3
 8004c00:	4091      	lsls	r1, r2
 8004c02:	000a      	movs	r2, r1
 8004c04:	43d2      	mvns	r2, r2
 8004c06:	401a      	ands	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	40da      	lsrs	r2, r3
 8004c18:	1e13      	subs	r3, r2, #0
 8004c1a:	d000      	beq.n	8004c1e <HAL_GPIO_DeInit+0x192>
 8004c1c:	e73e      	b.n	8004a9c <HAL_GPIO_DeInit+0x10>
  }
}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b006      	add	sp, #24
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021800 	.word	0x40021800
 8004c2c:	50000400 	.word	0x50000400
 8004c30:	50000800 	.word	0x50000800
 8004c34:	50000c00 	.word	0x50000c00
 8004c38:	50001000 	.word	0x50001000

08004c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	000a      	movs	r2, r1
 8004c46:	1cbb      	adds	r3, r7, #2
 8004c48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	1cba      	adds	r2, r7, #2
 8004c50:	8812      	ldrh	r2, [r2, #0]
 8004c52:	4013      	ands	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e003      	b.n	8004c68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	0008      	movs	r0, r1
 8004c80:	0011      	movs	r1, r2
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	1c02      	adds	r2, r0, #0
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	1c7b      	adds	r3, r7, #1
 8004c8a:	1c0a      	adds	r2, r1, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c8e:	1c7b      	adds	r3, r7, #1
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c96:	1cbb      	adds	r3, r7, #2
 8004c98:	881a      	ldrh	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c9e:	e003      	b.n	8004ca8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ca0:	1cbb      	adds	r3, r7, #2
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	1dba      	adds	r2, r7, #6
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d008      	beq.n	8004cda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cca:	1dba      	adds	r2, r7, #6
 8004ccc:	8812      	ldrh	r2, [r2, #0]
 8004cce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fe fff7 	bl	8003cc8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	1dba      	adds	r2, r7, #6
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d008      	beq.n	8004cf8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ce8:	1dba      	adds	r2, r7, #6
 8004cea:	8812      	ldrh	r2, [r2, #0]
 8004cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f806 	bl	8004d04 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021800 	.word	0x40021800

08004d04 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	1dbb      	adds	r3, r7, #6
 8004d0e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0049      	lsls	r1, r1, #1
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40007000 	.word	0x40007000

08004d34 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	000a      	movs	r2, r1
 8004d3e:	1cfb      	adds	r3, r7, #3
 8004d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_PWR_EnterSTOPMode+0x68>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	4393      	bics	r3, r2
 8004d50:	001a      	movs	r2, r3
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <HAL_PWR_EnterSTOPMode+0x68>)
 8004d54:	2101      	movs	r1, #1
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e005      	b.n	8004d68 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_PWR_EnterSTOPMode+0x68>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_PWR_EnterSTOPMode+0x68>)
 8004d62:	2107      	movs	r1, #7
 8004d64:	438a      	bics	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d6e:	2104      	movs	r1, #4
 8004d70:	430a      	orrs	r2, r1
 8004d72:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004d74:	1cfb      	adds	r3, r7, #3
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d7c:	bf30      	wfi
 8004d7e:	e002      	b.n	8004d86 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d80:	bf40      	sev
    __WFE();
 8004d82:	bf20      	wfe
    __WFE();
 8004d84:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	438a      	bics	r2, r1
 8004d90:	611a      	str	r2, [r3, #16]
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b002      	add	sp, #8
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2207      	movs	r2, #7
 8004dae:	4393      	bics	r3, r2
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004db4:	2103      	movs	r1, #3
 8004db6:	430a      	orrs	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004dc6:	bf30      	wfi
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	0019      	movs	r1, r3
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d11f      	bne.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dfc:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	0013      	movs	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	189b      	adds	r3, r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4912      	ldr	r1, [pc, #72]	; (8004e54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fb f996 	bl	800013c <__udivsi3>
 8004e10:	0003      	movs	r3, r0
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e16:	e008      	b.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e001      	b.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e009      	b.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	401a      	ands	r2, r3
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0ed      	beq.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	fffff9ff 	.word	0xfffff9ff
 8004e50:	20000010 	.word	0x20000010
 8004e54:	000f4240 	.word	0x000f4240

08004e58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	23e0      	movs	r3, #224	; 0xe0
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	4013      	ands	r3, r2
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000

08004e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f000 fb50 	bl	8005524 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d100      	bne.n	8004e90 <HAL_RCC_OscConfig+0x20>
 8004e8e:	e07c      	b.n	8004f8a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e90:	4bc3      	ldr	r3, [pc, #780]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2238      	movs	r2, #56	; 0x38
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9a:	4bc1      	ldr	r3, [pc, #772]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d102      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x40>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d002      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d10b      	bne.n	8004ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb6:	4bba      	ldr	r3, [pc, #744]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d062      	beq.n	8004f88 <HAL_RCC_OscConfig+0x118>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d15e      	bne.n	8004f88 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e32a      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_OscConfig+0x7a>
 8004eda:	4bb1      	ldr	r3, [pc, #708]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4bb0      	ldr	r3, [pc, #704]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	0249      	lsls	r1, r1, #9
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e020      	b.n	8004f2c <HAL_RCC_OscConfig+0xbc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	23a0      	movs	r3, #160	; 0xa0
 8004ef0:	02db      	lsls	r3, r3, #11
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d10e      	bne.n	8004f14 <HAL_RCC_OscConfig+0xa4>
 8004ef6:	4baa      	ldr	r3, [pc, #680]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4ba9      	ldr	r3, [pc, #676]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	02c9      	lsls	r1, r1, #11
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	4ba6      	ldr	r3, [pc, #664]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4ba5      	ldr	r3, [pc, #660]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	0249      	lsls	r1, r1, #9
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xbc>
 8004f14:	4ba2      	ldr	r3, [pc, #648]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4ba1      	ldr	r3, [pc, #644]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f1a:	49a2      	ldr	r1, [pc, #648]	; (80051a4 <HAL_RCC_OscConfig+0x334>)
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	4b9f      	ldr	r3, [pc, #636]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b9e      	ldr	r3, [pc, #632]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f26:	49a0      	ldr	r1, [pc, #640]	; (80051a8 <HAL_RCC_OscConfig+0x338>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7ff faea 	bl	800450c <HAL_GetTick>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3e:	f7ff fae5 	bl	800450c <HAL_GetTick>
 8004f42:	0002      	movs	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b64      	cmp	r3, #100	; 0x64
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e2e9      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f50:	4b93      	ldr	r3, [pc, #588]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	029b      	lsls	r3, r3, #10
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0xce>
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7ff fad5 	bl	800450c <HAL_GetTick>
 8004f62:	0003      	movs	r3, r0
 8004f64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7ff fad0 	bl	800450c <HAL_GetTick>
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e2d4      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f7a:	4b89      	ldr	r3, [pc, #548]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	4013      	ands	r3, r2
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0xf8>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	4013      	ands	r3, r2
 8004f92:	d100      	bne.n	8004f96 <HAL_RCC_OscConfig+0x126>
 8004f94:	e099      	b.n	80050ca <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f96:	4b82      	ldr	r3, [pc, #520]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2238      	movs	r2, #56	; 0x38
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa0:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d102      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x146>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d135      	bne.n	8005028 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fbc:	4b78      	ldr	r3, [pc, #480]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x164>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e2a7      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd4:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a74      	ldr	r2, [pc, #464]	; (80051ac <HAL_RCC_OscConfig+0x33c>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	4b6e      	ldr	r3, [pc, #440]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d112      	bne.n	8005016 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	; (80051b0 <HAL_RCC_OscConfig+0x340>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005000:	430a      	orrs	r2, r1
 8005002:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005004:	4b66      	ldr	r3, [pc, #408]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0adb      	lsrs	r3, r3, #11
 800500a:	2207      	movs	r2, #7
 800500c:	4013      	ands	r3, r2
 800500e:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_RCC_OscConfig+0x344>)
 8005010:	40da      	lsrs	r2, r3
 8005012:	4b69      	ldr	r3, [pc, #420]	; (80051b8 <HAL_RCC_OscConfig+0x348>)
 8005014:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005016:	4b69      	ldr	r3, [pc, #420]	; (80051bc <HAL_RCC_OscConfig+0x34c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff fa1a 	bl	8004454 <HAL_InitTick>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d051      	beq.n	80050c8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e27d      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d030      	beq.n	8005092 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005030:	4b5b      	ldr	r3, [pc, #364]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a5e      	ldr	r2, [pc, #376]	; (80051b0 <HAL_RCC_OscConfig+0x340>)
 8005036:	4013      	ands	r3, r2
 8005038:	0019      	movs	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	4b58      	ldr	r3, [pc, #352]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005044:	4b56      	ldr	r3, [pc, #344]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b55      	ldr	r3, [pc, #340]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	0049      	lsls	r1, r1, #1
 800504e:	430a      	orrs	r2, r1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7ff fa5b 	bl	800450c <HAL_GetTick>
 8005056:	0003      	movs	r3, r0
 8005058:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505c:	f7ff fa56 	bl	800450c <HAL_GetTick>
 8005060:	0002      	movs	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e25a      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506e:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4013      	ands	r3, r2
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b49      	ldr	r3, [pc, #292]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <HAL_RCC_OscConfig+0x33c>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	e01b      	b.n	80050ca <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005092:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005098:	4949      	ldr	r1, [pc, #292]	; (80051c0 <HAL_RCC_OscConfig+0x350>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7ff fa35 	bl	800450c <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a8:	f7ff fa30 	bl	800450c <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e234      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4013      	ands	r3, r2
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x238>
 80050c6:	e000      	b.n	80050ca <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2208      	movs	r2, #8
 80050d0:	4013      	ands	r3, r2
 80050d2:	d047      	beq.n	8005164 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2238      	movs	r2, #56	; 0x38
 80050da:	4013      	ands	r3, r2
 80050dc:	2b18      	cmp	r3, #24
 80050de:	d10a      	bne.n	80050f6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80050e0:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 80050e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e4:	2202      	movs	r2, #2
 80050e6:	4013      	ands	r3, r2
 80050e8:	d03c      	beq.n	8005164 <HAL_RCC_OscConfig+0x2f4>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d138      	bne.n	8005164 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e216      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d019      	beq.n	8005132 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005100:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005102:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005104:	2101      	movs	r1, #1
 8005106:	430a      	orrs	r2, r1
 8005108:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7ff f9ff 	bl	800450c <HAL_GetTick>
 800510e:	0003      	movs	r3, r0
 8005110:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005114:	f7ff f9fa 	bl	800450c <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1fe      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	d0f1      	beq.n	8005114 <HAL_RCC_OscConfig+0x2a4>
 8005130:	e018      	b.n	8005164 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005138:	2101      	movs	r1, #1
 800513a:	438a      	bics	r2, r1
 800513c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7ff f9e5 	bl	800450c <HAL_GetTick>
 8005142:	0003      	movs	r3, r0
 8005144:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005148:	f7ff f9e0 	bl	800450c <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e1e4      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 800515c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d1f1      	bne.n	8005148 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2204      	movs	r2, #4
 800516a:	4013      	ands	r3, r2
 800516c:	d100      	bne.n	8005170 <HAL_RCC_OscConfig+0x300>
 800516e:	e0c7      	b.n	8005300 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005170:	231f      	movs	r3, #31
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2238      	movs	r2, #56	; 0x38
 800517e:	4013      	ands	r3, r2
 8005180:	2b20      	cmp	r3, #32
 8005182:	d11f      	bne.n	80051c4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_RCC_OscConfig+0x330>)
 8005186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005188:	2202      	movs	r2, #2
 800518a:	4013      	ands	r3, r2
 800518c:	d100      	bne.n	8005190 <HAL_RCC_OscConfig+0x320>
 800518e:	e0b7      	b.n	8005300 <HAL_RCC_OscConfig+0x490>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d000      	beq.n	800519a <HAL_RCC_OscConfig+0x32a>
 8005198:	e0b2      	b.n	8005300 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e1c2      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	40021000 	.word	0x40021000
 80051a4:	fffeffff 	.word	0xfffeffff
 80051a8:	fffbffff 	.word	0xfffbffff
 80051ac:	ffff80ff 	.word	0xffff80ff
 80051b0:	ffffc7ff 	.word	0xffffc7ff
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	20000010 	.word	0x20000010
 80051bc:	20000014 	.word	0x20000014
 80051c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051c4:	4bb5      	ldr	r3, [pc, #724]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	055b      	lsls	r3, r3, #21
 80051cc:	4013      	ands	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_OscConfig+0x364>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x366>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d011      	beq.n	80051fe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80051da:	4bb0      	ldr	r3, [pc, #704]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80051dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051de:	4baf      	ldr	r3, [pc, #700]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0549      	lsls	r1, r1, #21
 80051e4:	430a      	orrs	r2, r1
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80051e8:	4bac      	ldr	r3, [pc, #688]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80051ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	055b      	lsls	r3, r3, #21
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051f6:	231f      	movs	r3, #31
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fe:	4ba8      	ldr	r3, [pc, #672]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4013      	ands	r3, r2
 8005208:	d11a      	bne.n	8005240 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520a:	4ba5      	ldr	r3, [pc, #660]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4ba4      	ldr	r3, [pc, #656]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	0049      	lsls	r1, r1, #1
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005218:	f7ff f978 	bl	800450c <HAL_GetTick>
 800521c:	0003      	movs	r3, r0
 800521e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005222:	f7ff f973 	bl	800450c <HAL_GetTick>
 8005226:	0002      	movs	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e177      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005234:	4b9a      	ldr	r3, [pc, #616]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4013      	ands	r3, r2
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x3e6>
 8005248:	4b94      	ldr	r3, [pc, #592]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800524a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800524c:	4b93      	ldr	r3, [pc, #588]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800524e:	2101      	movs	r1, #1
 8005250:	430a      	orrs	r2, r1
 8005252:	65da      	str	r2, [r3, #92]	; 0x5c
 8005254:	e01c      	b.n	8005290 <HAL_RCC_OscConfig+0x420>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x408>
 800525e:	4b8f      	ldr	r3, [pc, #572]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005262:	4b8e      	ldr	r3, [pc, #568]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005264:	2104      	movs	r1, #4
 8005266:	430a      	orrs	r2, r1
 8005268:	65da      	str	r2, [r3, #92]	; 0x5c
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800526c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800526e:	4b8b      	ldr	r3, [pc, #556]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	65da      	str	r2, [r3, #92]	; 0x5c
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0x420>
 8005278:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800527a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800527c:	4b87      	ldr	r3, [pc, #540]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800527e:	2101      	movs	r1, #1
 8005280:	438a      	bics	r2, r1
 8005282:	65da      	str	r2, [r3, #92]	; 0x5c
 8005284:	4b85      	ldr	r3, [pc, #532]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005288:	4b84      	ldr	r3, [pc, #528]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800528a:	2104      	movs	r1, #4
 800528c:	438a      	bics	r2, r1
 800528e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d014      	beq.n	80052c2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7ff f938 	bl	800450c <HAL_GetTick>
 800529c:	0003      	movs	r3, r0
 800529e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a0:	e009      	b.n	80052b6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7ff f933 	bl	800450c <HAL_GetTick>
 80052a6:	0002      	movs	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	4a7d      	ldr	r2, [pc, #500]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e136      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b6:	4b79      	ldr	r3, [pc, #484]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	2202      	movs	r2, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x432>
 80052c0:	e013      	b.n	80052ea <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c2:	f7ff f923 	bl	800450c <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052ca:	e009      	b.n	80052e0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7ff f91e 	bl	800450c <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	4a73      	ldr	r2, [pc, #460]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e121      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e0:	4b6e      	ldr	r3, [pc, #440]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2202      	movs	r2, #2
 80052e6:	4013      	ands	r3, r2
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80052ea:	231f      	movs	r3, #31
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052f4:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80052f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f8:	4b68      	ldr	r3, [pc, #416]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80052fa:	496b      	ldr	r1, [pc, #428]	; (80054a8 <HAL_RCC_OscConfig+0x638>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2220      	movs	r2, #32
 8005306:	4013      	ands	r3, r2
 8005308:	d039      	beq.n	800537e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005312:	4b62      	ldr	r3, [pc, #392]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	03c9      	lsls	r1, r1, #15
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7ff f8f4 	bl	800450c <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800532a:	f7ff f8ef 	bl	800450c <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0f3      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800533c:	4b57      	ldr	r3, [pc, #348]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	4013      	ands	r3, r2
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x4ba>
 8005348:	e019      	b.n	800537e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800534a:	4b54      	ldr	r3, [pc, #336]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b53      	ldr	r3, [pc, #332]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005350:	4956      	ldr	r1, [pc, #344]	; (80054ac <HAL_RCC_OscConfig+0x63c>)
 8005352:	400a      	ands	r2, r1
 8005354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7ff f8d9 	bl	800450c <HAL_GetTick>
 800535a:	0003      	movs	r3, r0
 800535c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005360:	f7ff f8d4 	bl	800450c <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0d8      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	4013      	ands	r3, r2
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d100      	bne.n	8005388 <HAL_RCC_OscConfig+0x518>
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005388:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2238      	movs	r2, #56	; 0x38
 800538e:	4013      	ands	r3, r2
 8005390:	2b10      	cmp	r3, #16
 8005392:	d100      	bne.n	8005396 <HAL_RCC_OscConfig+0x526>
 8005394:	e07b      	b.n	800548e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d156      	bne.n	800544c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80053a4:	4942      	ldr	r1, [pc, #264]	; (80054b0 <HAL_RCC_OscConfig+0x640>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7ff f8af 	bl	800450c <HAL_GetTick>
 80053ae:	0003      	movs	r3, r0
 80053b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7ff f8aa 	bl	800450c <HAL_GetTick>
 80053b8:	0002      	movs	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0ae      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	049b      	lsls	r3, r3, #18
 80053ce:	4013      	ands	r3, r2
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d2:	4b32      	ldr	r3, [pc, #200]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a37      	ldr	r2, [pc, #220]	; (80054b4 <HAL_RCC_OscConfig+0x644>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	431a      	orrs	r2, r3
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005402:	430a      	orrs	r2, r1
 8005404:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005406:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	0449      	lsls	r1, r1, #17
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005414:	4b21      	ldr	r3, [pc, #132]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	0549      	lsls	r1, r1, #21
 800541e:	430a      	orrs	r2, r1
 8005420:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7ff f873 	bl	800450c <HAL_GetTick>
 8005426:	0003      	movs	r3, r0
 8005428:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542c:	f7ff f86e 	bl	800450c <HAL_GetTick>
 8005430:	0002      	movs	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e072      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	4b17      	ldr	r3, [pc, #92]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	049b      	lsls	r3, r3, #18
 8005446:	4013      	ands	r3, r2
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x5bc>
 800544a:	e06a      	b.n	8005522 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b13      	ldr	r3, [pc, #76]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005452:	4917      	ldr	r1, [pc, #92]	; (80054b0 <HAL_RCC_OscConfig+0x640>)
 8005454:	400a      	ands	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7ff f858 	bl	800450c <HAL_GetTick>
 800545c:	0003      	movs	r3, r0
 800545e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005462:	f7ff f853 	bl	800450c <HAL_GetTick>
 8005466:	0002      	movs	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e057      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	049b      	lsls	r3, r3, #18
 800547c:	4013      	ands	r3, r2
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCC_OscConfig+0x62c>)
 8005486:	490c      	ldr	r1, [pc, #48]	; (80054b8 <HAL_RCC_OscConfig+0x648>)
 8005488:	400a      	ands	r2, r1
 800548a:	60da      	str	r2, [r3, #12]
 800548c:	e049      	b.n	8005522 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d112      	bne.n	80054bc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e044      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	40021000 	.word	0x40021000
 80054a0:	40007000 	.word	0x40007000
 80054a4:	00001388 	.word	0x00001388
 80054a8:	efffffff 	.word	0xefffffff
 80054ac:	ffbfffff 	.word	0xffbfffff
 80054b0:	feffffff 	.word	0xfeffffff
 80054b4:	11c1808c 	.word	0x11c1808c
 80054b8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_OscConfig+0x6bc>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2203      	movs	r2, #3
 80054c6:	401a      	ands	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d126      	bne.n	800551e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2270      	movs	r2, #112	; 0x70
 80054d4:	401a      	ands	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11f      	bne.n	800551e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	23fe      	movs	r3, #254	; 0xfe
 80054e2:	01db      	lsls	r3, r3, #7
 80054e4:	401a      	ands	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d116      	bne.n	800551e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	23f8      	movs	r3, #248	; 0xf8
 80054f4:	039b      	lsls	r3, r3, #14
 80054f6:	401a      	ands	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d10e      	bne.n	800551e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	23e0      	movs	r3, #224	; 0xe0
 8005504:	051b      	lsls	r3, r3, #20
 8005506:	401a      	ands	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	0f5b      	lsrs	r3, r3, #29
 8005514:	075a      	lsls	r2, r3, #29
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b008      	add	sp, #32
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0e9      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b76      	ldr	r3, [pc, #472]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2207      	movs	r2, #7
 800554a:	4013      	ands	r3, r2
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d91e      	bls.n	8005590 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b73      	ldr	r3, [pc, #460]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2207      	movs	r2, #7
 8005558:	4393      	bics	r3, r2
 800555a:	0019      	movs	r1, r3
 800555c:	4b70      	ldr	r3, [pc, #448]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005564:	f7fe ffd2 	bl	800450c <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800556c:	e009      	b.n	8005582 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556e:	f7fe ffcd 	bl	800450c <HAL_GetTick>
 8005572:	0002      	movs	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	4a6a      	ldr	r2, [pc, #424]	; (8005724 <HAL_RCC_ClockConfig+0x1f4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0ca      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005582:	4b67      	ldr	r3, [pc, #412]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d1ee      	bne.n	800556e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2202      	movs	r2, #2
 8005596:	4013      	ands	r3, r2
 8005598:	d015      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2204      	movs	r2, #4
 80055a0:	4013      	ands	r3, r2
 80055a2:	d006      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055a4:	4b60      	ldr	r3, [pc, #384]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055aa:	21e0      	movs	r1, #224	; 0xe0
 80055ac:	01c9      	lsls	r1, r1, #7
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b2:	4b5d      	ldr	r3, [pc, #372]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	; (800572c <HAL_RCC_ClockConfig+0x1fc>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	d057      	beq.n	8005680 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d8:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	4013      	ands	r3, r2
 80055e2:	d12b      	bne.n	800563c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e097      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f0:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	049b      	lsls	r3, r3, #18
 80055f8:	4013      	ands	r3, r2
 80055fa:	d11f      	bne.n	800563c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e08b      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005608:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4013      	ands	r3, r2
 8005612:	d113      	bne.n	800563c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e07f      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d106      	bne.n	800562e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005620:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 8005622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005624:	2202      	movs	r2, #2
 8005626:	4013      	ands	r3, r2
 8005628:	d108      	bne.n	800563c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e074      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562e:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e06d      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2207      	movs	r2, #7
 8005642:	4393      	bics	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fe ff5c 	bl	800450c <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005658:	e009      	b.n	800566e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565a:	f7fe ff57 	bl	800450c <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <HAL_RCC_ClockConfig+0x1f4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e054      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2238      	movs	r2, #56	; 0x38
 8005674:	401a      	ands	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	429a      	cmp	r2, r3
 800567e:	d1ec      	bne.n	800565a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005680:	4b27      	ldr	r3, [pc, #156]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2207      	movs	r2, #7
 8005686:	4013      	ands	r3, r2
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d21e      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568e:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2207      	movs	r2, #7
 8005694:	4393      	bics	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056a0:	f7fe ff34 	bl	800450c <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056a8:	e009      	b.n	80056be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f7fe ff2f 	bl	800450c <HAL_GetTick>
 80056ae:	0002      	movs	r2, r0
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_RCC_ClockConfig+0x1f4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e02c      	b.n	8005718 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056be:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2207      	movs	r2, #7
 80056c4:	4013      	ands	r3, r2
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d1ee      	bne.n	80056aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2204      	movs	r2, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_RCC_ClockConfig+0x200>)
 80056dc:	4013      	ands	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056ea:	f000 f829 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056ee:	0001      	movs	r1, r0
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	220f      	movs	r2, #15
 80056f8:	401a      	ands	r2, r3
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <HAL_RCC_ClockConfig+0x204>)
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	58d3      	ldr	r3, [r2, r3]
 8005700:	221f      	movs	r2, #31
 8005702:	4013      	ands	r3, r2
 8005704:	000a      	movs	r2, r1
 8005706:	40da      	lsrs	r2, r3
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_ClockConfig+0x208>)
 800570a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_RCC_ClockConfig+0x20c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	0018      	movs	r0, r3
 8005712:	f7fe fe9f 	bl	8004454 <HAL_InitTick>
 8005716:	0003      	movs	r3, r0
}
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b004      	add	sp, #16
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40022000 	.word	0x40022000
 8005724:	00001388 	.word	0x00001388
 8005728:	40021000 	.word	0x40021000
 800572c:	fffff0ff 	.word	0xfffff0ff
 8005730:	ffff8fff 	.word	0xffff8fff
 8005734:	08015a74 	.word	0x08015a74
 8005738:	20000010 	.word	0x20000010
 800573c:	20000014 	.word	0x20000014

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005746:	4b3c      	ldr	r3, [pc, #240]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2238      	movs	r2, #56	; 0x38
 800574c:	4013      	ands	r3, r2
 800574e:	d10f      	bne.n	8005770 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005750:	4b39      	ldr	r3, [pc, #228]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0adb      	lsrs	r3, r3, #11
 8005756:	2207      	movs	r2, #7
 8005758:	4013      	ands	r3, r2
 800575a:	2201      	movs	r2, #1
 800575c:	409a      	lsls	r2, r3
 800575e:	0013      	movs	r3, r2
 8005760:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	4835      	ldr	r0, [pc, #212]	; (800583c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005766:	f7fa fce9 	bl	800013c <__udivsi3>
 800576a:	0003      	movs	r3, r0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e05d      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2238      	movs	r2, #56	; 0x38
 8005776:	4013      	ands	r3, r2
 8005778:	2b08      	cmp	r3, #8
 800577a:	d102      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800577c:	4b30      	ldr	r3, [pc, #192]	; (8005840 <HAL_RCC_GetSysClockFreq+0x100>)
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	e054      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005782:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2238      	movs	r2, #56	; 0x38
 8005788:	4013      	ands	r3, r2
 800578a:	2b10      	cmp	r3, #16
 800578c:	d138      	bne.n	8005800 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2203      	movs	r2, #3
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005798:	4b27      	ldr	r3, [pc, #156]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	2207      	movs	r2, #7
 80057a0:	4013      	ands	r3, r2
 80057a2:	3301      	adds	r3, #1
 80057a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d10d      	bne.n	80057c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4824      	ldr	r0, [pc, #144]	; (8005840 <HAL_RCC_GetSysClockFreq+0x100>)
 80057b0:	f7fa fcc4 	bl	800013c <__udivsi3>
 80057b4:	0003      	movs	r3, r0
 80057b6:	0019      	movs	r1, r3
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	227f      	movs	r2, #127	; 0x7f
 80057c0:	4013      	ands	r3, r2
 80057c2:	434b      	muls	r3, r1
 80057c4:	617b      	str	r3, [r7, #20]
        break;
 80057c6:	e00d      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	481c      	ldr	r0, [pc, #112]	; (800583c <HAL_RCC_GetSysClockFreq+0xfc>)
 80057cc:	f7fa fcb6 	bl	800013c <__udivsi3>
 80057d0:	0003      	movs	r3, r0
 80057d2:	0019      	movs	r1, r3
 80057d4:	4b18      	ldr	r3, [pc, #96]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	0a1b      	lsrs	r3, r3, #8
 80057da:	227f      	movs	r2, #127	; 0x7f
 80057dc:	4013      	ands	r3, r2
 80057de:	434b      	muls	r3, r1
 80057e0:	617b      	str	r3, [r7, #20]
        break;
 80057e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057e4:	4b14      	ldr	r3, [pc, #80]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	0f5b      	lsrs	r3, r3, #29
 80057ea:	2207      	movs	r2, #7
 80057ec:	4013      	ands	r3, r2
 80057ee:	3301      	adds	r3, #1
 80057f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	6978      	ldr	r0, [r7, #20]
 80057f6:	f7fa fca1 	bl	800013c <__udivsi3>
 80057fa:	0003      	movs	r3, r0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	e015      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2238      	movs	r2, #56	; 0x38
 8005806:	4013      	ands	r3, r2
 8005808:	2b20      	cmp	r3, #32
 800580a:	d103      	bne.n	8005814 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e00b      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2238      	movs	r2, #56	; 0x38
 800581a:	4013      	ands	r3, r2
 800581c:	2b18      	cmp	r3, #24
 800581e:	d103      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005820:	23fa      	movs	r3, #250	; 0xfa
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e001      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800582c:	693b      	ldr	r3, [r7, #16]
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b006      	add	sp, #24
 8005834:	bd80      	pop	{r7, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	40021000 	.word	0x40021000
 800583c:	00f42400 	.word	0x00f42400
 8005840:	007a1200 	.word	0x007a1200

08005844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005848:	4b02      	ldr	r3, [pc, #8]	; (8005854 <HAL_RCC_GetHCLKFreq+0x10>)
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	20000010 	.word	0x20000010

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800585c:	f7ff fff2 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005860:	0004      	movs	r4, r0
 8005862:	f7ff faf9 	bl	8004e58 <LL_RCC_GetAPB1Prescaler>
 8005866:	0003      	movs	r3, r0
 8005868:	0b1a      	lsrs	r2, r3, #12
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	58d3      	ldr	r3, [r2, r3]
 8005870:	221f      	movs	r2, #31
 8005872:	4013      	ands	r3, r2
 8005874:	40dc      	lsrs	r4, r3
 8005876:	0023      	movs	r3, r4
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	bdb0      	pop	{r4, r5, r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	08015ab4 	.word	0x08015ab4

08005884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800588c:	2313      	movs	r3, #19
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005894:	2312      	movs	r3, #18
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	4013      	ands	r3, r2
 80058a6:	d100      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80058a8:	e0ad      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058aa:	2011      	movs	r0, #17
 80058ac:	183b      	adds	r3, r7, r0
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b2:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	055b      	lsls	r3, r3, #21
 80058ba:	4013      	ands	r3, r2
 80058bc:	d110      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058be:	4b44      	ldr	r3, [pc, #272]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c2:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	0549      	lsls	r1, r1, #21
 80058c8:	430a      	orrs	r2, r1
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80058cc:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	055b      	lsls	r3, r3, #21
 80058d4:	4013      	ands	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058da:	183b      	adds	r3, r7, r0
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e0:	4b3c      	ldr	r3, [pc, #240]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	0049      	lsls	r1, r1, #1
 80058ea:	430a      	orrs	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ee:	f7fe fe0d 	bl	800450c <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f6:	e00b      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fe fe08 	bl	800450c <HAL_GetTick>
 80058fc:	0002      	movs	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d904      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005906:	2313      	movs	r3, #19
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	2203      	movs	r2, #3
 800590c:	701a      	strb	r2, [r3, #0]
        break;
 800590e:	e005      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005910:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4013      	ands	r3, r2
 800591a:	d0ed      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800591c:	2313      	movs	r3, #19
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d15e      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005928:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800592a:	23c0      	movs	r3, #192	; 0xc0
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4013      	ands	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d019      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	429a      	cmp	r2, r3
 8005940:	d014      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005948:	4013      	ands	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800594c:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800594e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005950:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	0249      	lsls	r1, r1, #9
 8005956:	430a      	orrs	r2, r1
 8005958:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800595c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800595e:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005960:	491e      	ldr	r1, [pc, #120]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005962:	400a      	ands	r2, r1
 8005964:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005966:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2201      	movs	r2, #1
 8005970:	4013      	ands	r3, r2
 8005972:	d016      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fe fdca 	bl	800450c <HAL_GetTick>
 8005978:	0003      	movs	r3, r0
 800597a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597c:	e00c      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fe fdc5 	bl	800450c <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d904      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800598e:	2313      	movs	r3, #19
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	2203      	movs	r2, #3
 8005994:	701a      	strb	r2, [r3, #0]
            break;
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800599a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599c:	2202      	movs	r2, #2
 800599e:	4013      	ands	r3, r2
 80059a0:	d0ed      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80059a2:	2313      	movs	r3, #19
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	0019      	movs	r1, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059bc:	430a      	orrs	r2, r1
 80059be:	65da      	str	r2, [r3, #92]	; 0x5c
 80059c0:	e016      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c2:	2312      	movs	r3, #18
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2213      	movs	r2, #19
 80059c8:	18ba      	adds	r2, r7, r2
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e00f      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40007000 	.word	0x40007000
 80059d8:	fffffcff 	.word	0xfffffcff
 80059dc:	fffeffff 	.word	0xfffeffff
 80059e0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	2312      	movs	r3, #18
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	2213      	movs	r2, #19
 80059ea:	18ba      	adds	r2, r7, r2
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059f0:	2311      	movs	r3, #17
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4bb6      	ldr	r3, [pc, #728]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fe:	4bb5      	ldr	r3, [pc, #724]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a00:	49b5      	ldr	r1, [pc, #724]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005a02:	400a      	ands	r2, r1
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a10:	4bb0      	ldr	r3, [pc, #704]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	2203      	movs	r2, #3
 8005a16:	4393      	bics	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4bad      	ldr	r3, [pc, #692]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a20:	430a      	orrs	r2, r1
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a2e:	4ba9      	ldr	r3, [pc, #676]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	220c      	movs	r2, #12
 8005a34:	4393      	bics	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	4ba5      	ldr	r3, [pc, #660]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a4c:	4ba1      	ldr	r3, [pc, #644]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	2230      	movs	r2, #48	; 0x30
 8005a52:	4393      	bics	r3, r2
 8005a54:	0019      	movs	r1, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	4b9e      	ldr	r3, [pc, #632]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2210      	movs	r2, #16
 8005a66:	4013      	ands	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a6a:	4b9a      	ldr	r3, [pc, #616]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	4a9b      	ldr	r2, [pc, #620]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	4b96      	ldr	r3, [pc, #600]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	015b      	lsls	r3, r3, #5
 8005a86:	4013      	ands	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005a8a:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	4a94      	ldr	r2, [pc, #592]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	0019      	movs	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aaa:	4b8a      	ldr	r3, [pc, #552]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	4a8d      	ldr	r2, [pc, #564]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab8:	4b86      	ldr	r3, [pc, #536]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aba:	430a      	orrs	r2, r1
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aca:	4b82      	ldr	r3, [pc, #520]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	4a86      	ldr	r2, [pc, #536]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	4b7e      	ldr	r3, [pc, #504]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae8:	4b7a      	ldr	r3, [pc, #488]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	4a7f      	ldr	r2, [pc, #508]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005af8:	430a      	orrs	r2, r1
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2240      	movs	r2, #64	; 0x40
 8005b02:	4013      	ands	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b06:	4b73      	ldr	r3, [pc, #460]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	4a79      	ldr	r2, [pc, #484]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	4b6f      	ldr	r3, [pc, #444]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b16:	430a      	orrs	r2, r1
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	01db      	lsls	r3, r3, #7
 8005b22:	4013      	ands	r3, r2
 8005b24:	d015      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b26:	4b6b      	ldr	r3, [pc, #428]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	0899      	lsrs	r1, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b32:	4b68      	ldr	r3, [pc, #416]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	05db      	lsls	r3, r3, #23
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d106      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b44:	4b63      	ldr	r3, [pc, #396]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	4b62      	ldr	r3, [pc, #392]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	0249      	lsls	r1, r1, #9
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b5e:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	2240      	movs	r2, #64	; 0x40
 8005b64:	4393      	bics	r3, r2
 8005b66:	0019      	movs	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6c:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	039b      	lsls	r3, r3, #14
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d016      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b7e:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	4a5c      	ldr	r2, [pc, #368]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8c:	4b51      	ldr	r3, [pc, #324]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	03db      	lsls	r3, r3, #15
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d106      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b9e:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	0449      	lsls	r1, r1, #17
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	03db      	lsls	r3, r3, #15
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d016      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005bb8:	4b46      	ldr	r3, [pc, #280]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	4a4e      	ldr	r2, [pc, #312]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc6:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	045b      	lsls	r3, r3, #17
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d106      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005bd8:	4b3e      	ldr	r3, [pc, #248]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	0449      	lsls	r1, r1, #17
 8005be2:	430a      	orrs	r2, r1
 8005be4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d014      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005bf2:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	4393      	bics	r3, r2
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	4b34      	ldr	r3, [pc, #208]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d106      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c0e:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	0249      	lsls	r1, r1, #9
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	019b      	lsls	r3, r3, #6
 8005c24:	4013      	ands	r3, r2
 8005c26:	d014      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c28:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	220c      	movs	r2, #12
 8005c2e:	4393      	bics	r3, r2
 8005c30:	0019      	movs	r1, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c36:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d106      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c44:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	0249      	lsls	r1, r1, #9
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	045b      	lsls	r3, r3, #17
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d016      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d106      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c84:	2180      	movs	r1, #128	; 0x80
 8005c86:	0449      	lsls	r1, r1, #17
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	049b      	lsls	r3, r3, #18
 8005c94:	4013      	ands	r3, r2
 8005c96:	d016      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c98:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	0449      	lsls	r1, r1, #17
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005cc6:	2312      	movs	r3, #18
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	781b      	ldrb	r3, [r3, #0]
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b006      	add	sp, #24
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	efffffff 	.word	0xefffffff
 8005cdc:	fffff3ff 	.word	0xfffff3ff
 8005ce0:	fffffcff 	.word	0xfffffcff
 8005ce4:	fff3ffff 	.word	0xfff3ffff
 8005ce8:	ffcfffff 	.word	0xffcfffff
 8005cec:	ffffcfff 	.word	0xffffcfff
 8005cf0:	ffff3fff 	.word	0xffff3fff
 8005cf4:	ffbfffff 	.word	0xffbfffff
 8005cf8:	feffffff 	.word	0xfeffffff

08005cfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cfc:	b5b0      	push	{r4, r5, r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d04:	230f      	movs	r3, #15
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d100      	bne.n	8005d14 <HAL_RTC_Init+0x18>
 8005d12:	e08c      	b.n	8005e2e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2229      	movs	r2, #41	; 0x29
 8005d18:	5c9b      	ldrb	r3, [r3, r2]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2228      	movs	r2, #40	; 0x28
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2288      	movs	r2, #136	; 0x88
 8005d2c:	0212      	lsls	r2, r2, #8
 8005d2e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fe f800 	bl	8003d38 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2229      	movs	r2, #41	; 0x29
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2210      	movs	r2, #16
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d062      	beq.n	8005e14 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ca      	movs	r2, #202	; 0xca
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2253      	movs	r2, #83	; 0x53
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005d5e:	250f      	movs	r5, #15
 8005d60:	197c      	adds	r4, r7, r5
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 fbf3 	bl	8006550 <RTC_EnterInitMode>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005d6e:	0028      	movs	r0, r5
 8005d70:	183b      	adds	r3, r7, r0
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d12c      	bne.n	8005dd2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	492e      	ldr	r1, [pc, #184]	; (8005e3c <HAL_RTC_Init+0x140>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6912      	ldr	r2, [r2, #16]
 8005dae:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6919      	ldr	r1, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	041a      	lsls	r2, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005dc4:	183c      	adds	r4, r7, r0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 fc03 	bl	80065d4 <RTC_ExitInitMode>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005dd2:	230f      	movs	r3, #15
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	00d2      	lsls	r2, r2, #3
 8005de8:	08d2      	lsrs	r2, r2, #3
 8005dea:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	22ff      	movs	r2, #255	; 0xff
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24
 8005e12:	e003      	b.n	8005e1c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005e14:	230f      	movs	r3, #15
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005e1c:	230f      	movs	r3, #15
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2229      	movs	r2, #41	; 0x29
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005e2e:	230f      	movs	r3, #15
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	781b      	ldrb	r3, [r3, #0]
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b004      	add	sp, #16
 8005e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3c:	fb8fffbf 	.word	0xfb8fffbf

08005e40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2228      	movs	r2, #40	; 0x28
 8005e50:	5c9b      	ldrb	r3, [r3, r2]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_RTC_SetTime+0x1a>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e092      	b.n	8005f80 <HAL_RTC_SetTime+0x140>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2228      	movs	r2, #40	; 0x28
 8005e5e:	2101      	movs	r1, #1
 8005e60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2229      	movs	r2, #41	; 0x29
 8005e66:	2102      	movs	r1, #2
 8005e68:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	22ca      	movs	r2, #202	; 0xca
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2253      	movs	r2, #83	; 0x53
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e7a:	2513      	movs	r5, #19
 8005e7c:	197c      	adds	r4, r7, r5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fb65 	bl	8006550 <RTC_EnterInitMode>
 8005e86:	0003      	movs	r3, r0
 8005e88:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005e8a:	197b      	adds	r3, r7, r5
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d162      	bne.n	8005f58 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d125      	bne.n	8005ee4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d102      	bne.n	8005eaa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 fbd4 	bl	800665c <RTC_ByteToBcd2>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 fbcd 	bl	800665c <RTC_ByteToBcd2>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ec6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	789b      	ldrb	r3, [r3, #2]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 fbc5 	bl	800665c <RTC_ByteToBcd2>
 8005ed2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ed4:	0022      	movs	r2, r4
 8005ed6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e017      	b.n	8005f14 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	4013      	ands	r3, r2
 8005eee:	d102      	bne.n	8005ef6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f02:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f08:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	491b      	ldr	r1, [pc, #108]	; (8005f88 <HAL_RTC_SetTime+0x148>)
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4918      	ldr	r1, [pc, #96]	; (8005f8c <HAL_RTC_SetTime+0x14c>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6999      	ldr	r1, [r3, #24]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f48:	2313      	movs	r3, #19
 8005f4a:	18fc      	adds	r4, r7, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f000 fb40 	bl	80065d4 <RTC_ExitInitMode>
 8005f54:	0003      	movs	r3, r0
 8005f56:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005f60:	2313      	movs	r3, #19
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2229      	movs	r2, #41	; 0x29
 8005f6e:	2101      	movs	r1, #1
 8005f70:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2228      	movs	r2, #40	; 0x28
 8005f76:	2100      	movs	r1, #0
 8005f78:	5499      	strb	r1, [r3, r2]

  return status;
 8005f7a:	2313      	movs	r3, #19
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b006      	add	sp, #24
 8005f86:	bdb0      	pop	{r4, r5, r7, pc}
 8005f88:	007f7f7f 	.word	0x007f7f7f
 8005f8c:	fffbffff 	.word	0xfffbffff

08005f90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	045b      	lsls	r3, r3, #17
 8005fae:	0c5a      	lsrs	r2, r3, #17
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_RTC_GetTime+0xb4>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	223f      	movs	r2, #63	; 0x3f
 8005fc8:	4013      	ands	r3, r2
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	227f      	movs	r2, #127	; 0x7f
 8005fd8:	4013      	ands	r3, r2
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	227f      	movs	r2, #127	; 0x7f
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	0d9b      	lsrs	r3, r3, #22
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11a      	bne.n	800603a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 fb4f 	bl	80066ac <RTC_Bcd2ToByte>
 800600e:	0003      	movs	r3, r0
 8006010:	001a      	movs	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 fb46 	bl	80066ac <RTC_Bcd2ToByte>
 8006020:	0003      	movs	r3, r0
 8006022:	001a      	movs	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	0018      	movs	r0, r3
 800602e:	f000 fb3d 	bl	80066ac <RTC_Bcd2ToByte>
 8006032:	0003      	movs	r3, r0
 8006034:	001a      	movs	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b006      	add	sp, #24
 8006042:	bd80      	pop	{r7, pc}
 8006044:	007f7f7f 	.word	0x007f7f7f

08006048 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006048:	b5b0      	push	{r4, r5, r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2228      	movs	r2, #40	; 0x28
 8006058:	5c9b      	ldrb	r3, [r3, r2]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_RTC_SetDate+0x1a>
 800605e:	2302      	movs	r3, #2
 8006060:	e07e      	b.n	8006160 <HAL_RTC_SetDate+0x118>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2228      	movs	r2, #40	; 0x28
 8006066:	2101      	movs	r1, #1
 8006068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2229      	movs	r2, #41	; 0x29
 800606e:	2102      	movs	r1, #2
 8006070:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10e      	bne.n	8006096 <HAL_RTC_SetDate+0x4e>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	001a      	movs	r2, r3
 800607e:	2310      	movs	r3, #16
 8006080:	4013      	ands	r3, r2
 8006082:	d008      	beq.n	8006096 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2210      	movs	r2, #16
 800608a:	4393      	bics	r3, r2
 800608c:	b2db      	uxtb	r3, r3
 800608e:	330a      	adds	r3, #10
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11c      	bne.n	80060d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 fadb 	bl	800665c <RTC_ByteToBcd2>
 80060a6:	0003      	movs	r3, r0
 80060a8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 fad4 	bl	800665c <RTC_ByteToBcd2>
 80060b4:	0003      	movs	r3, r0
 80060b6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060b8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 facc 	bl	800665c <RTC_ByteToBcd2>
 80060c4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060c6:	0022      	movs	r2, r4
 80060c8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e00e      	b.n	80060f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	78db      	ldrb	r3, [r3, #3]
 80060da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	22ca      	movs	r2, #202	; 0xca
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2253      	movs	r2, #83	; 0x53
 8006102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006104:	2513      	movs	r5, #19
 8006106:	197c      	adds	r4, r7, r5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 fa20 	bl	8006550 <RTC_EnterInitMode>
 8006110:	0003      	movs	r3, r0
 8006112:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006114:	0028      	movs	r0, r5
 8006116:	183b      	adds	r3, r7, r0
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4910      	ldr	r1, [pc, #64]	; (8006168 <HAL_RTC_SetDate+0x120>)
 8006126:	400a      	ands	r2, r1
 8006128:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800612a:	183c      	adds	r4, r7, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 fa50 	bl	80065d4 <RTC_ExitInitMode>
 8006134:	0003      	movs	r3, r0
 8006136:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006140:	2313      	movs	r3, #19
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2229      	movs	r2, #41	; 0x29
 800614e:	2101      	movs	r1, #1
 8006150:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2228      	movs	r2, #40	; 0x28
 8006156:	2100      	movs	r1, #0
 8006158:	5499      	strb	r1, [r3, r2]

  return status;
 800615a:	2313      	movs	r3, #19
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	781b      	ldrb	r3, [r3, #0]
}
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b006      	add	sp, #24
 8006166:	bdb0      	pop	{r4, r5, r7, pc}
 8006168:	00ffff3f 	.word	0x00ffff3f

0800616c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_RTC_GetDate+0x98>)
 8006180:	4013      	ands	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	b2db      	uxtb	r3, r3
 8006194:	221f      	movs	r2, #31
 8006196:	4013      	ands	r3, r2
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	223f      	movs	r2, #63	; 0x3f
 80061a4:	4013      	ands	r3, r2
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	0b5b      	lsrs	r3, r3, #13
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2207      	movs	r2, #7
 80061b4:	4013      	ands	r3, r2
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11a      	bne.n	80061f8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	78db      	ldrb	r3, [r3, #3]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f000 fa70 	bl	80066ac <RTC_Bcd2ToByte>
 80061cc:	0003      	movs	r3, r0
 80061ce:	001a      	movs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	0018      	movs	r0, r3
 80061da:	f000 fa67 	bl	80066ac <RTC_Bcd2ToByte>
 80061de:	0003      	movs	r3, r0
 80061e0:	001a      	movs	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	789b      	ldrb	r3, [r3, #2]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 fa5e 	bl	80066ac <RTC_Bcd2ToByte>
 80061f0:	0003      	movs	r3, r0
 80061f2:	001a      	movs	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	0018      	movs	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b006      	add	sp, #24
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	00ffff3f 	.word	0x00ffff3f

08006208 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b089      	sub	sp, #36	; 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2228      	movs	r2, #40	; 0x28
 8006218:	5c9b      	ldrb	r3, [r3, r2]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_RTC_SetAlarm_IT+0x1a>
 800621e:	2302      	movs	r3, #2
 8006220:	e127      	b.n	8006472 <HAL_RTC_SetAlarm_IT+0x26a>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2228      	movs	r2, #40	; 0x28
 8006226:	2101      	movs	r1, #1
 8006228:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2229      	movs	r2, #41	; 0x29
 800622e:	2102      	movs	r1, #2
 8006230:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d136      	bne.n	80062a6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	4013      	ands	r3, r2
 8006242:	d102      	bne.n	800624a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	0018      	movs	r0, r3
 8006250:	f000 fa04 	bl	800665c <RTC_ByteToBcd2>
 8006254:	0003      	movs	r3, r0
 8006256:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	0018      	movs	r0, r3
 800625e:	f000 f9fd 	bl	800665c <RTC_ByteToBcd2>
 8006262:	0003      	movs	r3, r0
 8006264:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006266:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	789b      	ldrb	r3, [r3, #2]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 f9f5 	bl	800665c <RTC_ByteToBcd2>
 8006272:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006274:	0022      	movs	r2, r4
 8006276:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800627e:	431a      	orrs	r2, r3
 8006280:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2220      	movs	r2, #32
 8006286:	5c9b      	ldrb	r3, [r3, r2]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f9e7 	bl	800665c <RTC_ByteToBcd2>
 800628e:	0003      	movs	r3, r0
 8006290:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006292:	0022      	movs	r2, r4
 8006294:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800629a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e022      	b.n	80062ec <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2240      	movs	r2, #64	; 0x40
 80062ae:	4013      	ands	r3, r2
 80062b0:	d102      	bne.n	80062b8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2200      	movs	r2, #0
 80062b6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062c4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	78db      	ldrb	r3, [r3, #3]
 80062d0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2120      	movs	r1, #32
 80062d8:	5c5b      	ldrb	r3, [r3, r1]
 80062da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	22ca      	movs	r2, #202	; 0xca
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2253      	movs	r2, #83	; 0x53
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	429a      	cmp	r2, r3
 8006312:	d14c      	bne.n	80063ae <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4957      	ldr	r1, [pc, #348]	; (800647c <HAL_RTC_SetAlarm_IT+0x274>)
 8006320:	400a      	ands	r2, r1
 8006322:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2101      	movs	r1, #1
 8006330:	430a      	orrs	r2, r1
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006334:	f7fe f8ea 	bl	800450c <HAL_GetTick>
 8006338:	0003      	movs	r3, r0
 800633a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800633c:	e016      	b.n	800636c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800633e:	f7fe f8e5 	bl	800450c <HAL_GetTick>
 8006342:	0002      	movs	r2, r0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1ad2      	subs	r2, r2, r3
 8006348:	23fa      	movs	r3, #250	; 0xfa
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	429a      	cmp	r2, r3
 800634e:	d90d      	bls.n	800636c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2229      	movs	r2, #41	; 0x29
 800635c:	2103      	movs	r1, #3
 800635e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2228      	movs	r2, #40	; 0x28
 8006364:	2100      	movs	r1, #0
 8006366:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e082      	b.n	8006472 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	4013      	ands	r3, r2
 8006376:	d0e2      	beq.n	800633e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	0049      	lsls	r1, r1, #1
 8006396:	430a      	orrs	r2, r1
 8006398:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2180      	movs	r1, #128	; 0x80
 80063a6:	0149      	lsls	r1, r1, #5
 80063a8:	430a      	orrs	r2, r1
 80063aa:	619a      	str	r2, [r3, #24]
 80063ac:	e04b      	b.n	8006446 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4931      	ldr	r1, [pc, #196]	; (8006480 <HAL_RTC_SetAlarm_IT+0x278>)
 80063ba:	400a      	ands	r2, r1
 80063bc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2102      	movs	r1, #2
 80063ca:	430a      	orrs	r2, r1
 80063cc:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80063ce:	f7fe f89d 	bl	800450c <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063d6:	e016      	b.n	8006406 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063d8:	f7fe f898 	bl	800450c <HAL_GetTick>
 80063dc:	0002      	movs	r2, r0
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	23fa      	movs	r3, #250	; 0xfa
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d90d      	bls.n	8006406 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	22ff      	movs	r2, #255	; 0xff
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2229      	movs	r2, #41	; 0x29
 80063f6:	2103      	movs	r1, #3
 80063f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2228      	movs	r2, #40	; 0x28
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e035      	b.n	8006472 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	4013      	ands	r3, r2
 8006410:	d0e2      	beq.n	80063d8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2180      	movs	r1, #128	; 0x80
 800642e:	0089      	lsls	r1, r1, #2
 8006430:	430a      	orrs	r2, r1
 8006432:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2180      	movs	r1, #128	; 0x80
 8006440:	0189      	lsls	r1, r1, #6
 8006442:	430a      	orrs	r2, r1
 8006444:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006446:	4a0f      	ldr	r2, [pc, #60]	; (8006484 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	58d3      	ldr	r3, [r2, r3]
 800644c:	490d      	ldr	r1, [pc, #52]	; (8006484 <HAL_RTC_SetAlarm_IT+0x27c>)
 800644e:	2280      	movs	r2, #128	; 0x80
 8006450:	0312      	lsls	r2, r2, #12
 8006452:	4313      	orrs	r3, r2
 8006454:	2280      	movs	r2, #128	; 0x80
 8006456:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2229      	movs	r2, #41	; 0x29
 8006464:	2101      	movs	r1, #1
 8006466:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2228      	movs	r2, #40	; 0x28
 800646c:	2100      	movs	r1, #0
 800646e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	0018      	movs	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	b009      	add	sp, #36	; 0x24
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	fffffeff 	.word	0xfffffeff
 8006480:	fffffdff 	.word	0xfffffdff
 8006484:	40021800 	.word	0x40021800

08006488 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	015b      	lsls	r3, r3, #5
 800649a:	4013      	ands	r3, r2
 800649c:	d011      	beq.n	80064c2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2101      	movs	r1, #1
 80064b6:	430a      	orrs	r2, r1
 80064b8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0018      	movs	r0, r3
 80064be:	f7fd fbf5 	bl	8003cac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	019b      	lsls	r3, r3, #6
 80064cc:	4013      	ands	r3, r2
 80064ce:	d011      	beq.n	80064f4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	2202      	movs	r2, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	d00b      	beq.n	80064f4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2102      	movs	r1, #2
 80064e8:	430a      	orrs	r2, r1
 80064ea:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 f961 	bl	80067b6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2229      	movs	r2, #41	; 0x29
 80064f8:	2101      	movs	r1, #1
 80064fa:	5499      	strb	r1, [r3, r2]
}
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	b002      	add	sp, #8
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0e      	ldr	r2, [pc, #56]	; (800654c <HAL_RTC_WaitForSynchro+0x48>)
 8006512:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006514:	f7fd fffa 	bl	800450c <HAL_GetTick>
 8006518:	0003      	movs	r3, r0
 800651a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800651c:	e00a      	b.n	8006534 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800651e:	f7fd fff5 	bl	800450c <HAL_GetTick>
 8006522:	0002      	movs	r2, r0
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	23fa      	movs	r3, #250	; 0xfa
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	429a      	cmp	r2, r3
 800652e:	d901      	bls.n	8006534 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e006      	b.n	8006542 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	4013      	ands	r3, r2
 800653e:	d0ee      	beq.n	800651e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	0001005f 	.word	0x0001005f

08006550 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006558:	230f      	movs	r3, #15
 800655a:	18fb      	adds	r3, r7, r3
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	4013      	ands	r3, r2
 800656a:	d12c      	bne.n	80065c6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	430a      	orrs	r2, r1
 800657a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800657c:	f7fd ffc6 	bl	800450c <HAL_GetTick>
 8006580:	0003      	movs	r3, r0
 8006582:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006584:	e014      	b.n	80065b0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006586:	f7fd ffc1 	bl	800450c <HAL_GetTick>
 800658a:	0002      	movs	r2, r0
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	200f      	movs	r0, #15
 8006592:	183b      	adds	r3, r7, r0
 8006594:	1839      	adds	r1, r7, r0
 8006596:	7809      	ldrb	r1, [r1, #0]
 8006598:	7019      	strb	r1, [r3, #0]
 800659a:	23fa      	movs	r3, #250	; 0xfa
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	429a      	cmp	r2, r3
 80065a0:	d906      	bls.n	80065b0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	2203      	movs	r2, #3
 80065a6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2229      	movs	r2, #41	; 0x29
 80065ac:	2103      	movs	r1, #3
 80065ae:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	4013      	ands	r3, r2
 80065ba:	d104      	bne.n	80065c6 <RTC_EnterInitMode+0x76>
 80065bc:	230f      	movs	r3, #15
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d1df      	bne.n	8006586 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80065c6:	230f      	movs	r3, #15
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	781b      	ldrb	r3, [r3, #0]
}
 80065cc:	0018      	movs	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b004      	add	sp, #16
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	240f      	movs	r4, #15
 80065de:	193b      	adds	r3, r7, r4
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <RTC_ExitInitMode+0x84>)
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <RTC_ExitInitMode+0x84>)
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	438a      	bics	r2, r1
 80065ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <RTC_ExitInitMode+0x84>)
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	2220      	movs	r2, #32
 80065f6:	4013      	ands	r3, r2
 80065f8:	d10d      	bne.n	8006616 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff ff81 	bl	8006504 <HAL_RTC_WaitForSynchro>
 8006602:	1e03      	subs	r3, r0, #0
 8006604:	d021      	beq.n	800664a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2229      	movs	r2, #41	; 0x29
 800660a:	2103      	movs	r1, #3
 800660c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800660e:	193b      	adds	r3, r7, r4
 8006610:	2203      	movs	r2, #3
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e019      	b.n	800664a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <RTC_ExitInitMode+0x84>)
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <RTC_ExitInitMode+0x84>)
 800661c:	2120      	movs	r1, #32
 800661e:	438a      	bics	r2, r1
 8006620:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f7ff ff6d 	bl	8006504 <HAL_RTC_WaitForSynchro>
 800662a:	1e03      	subs	r3, r0, #0
 800662c:	d007      	beq.n	800663e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2229      	movs	r2, #41	; 0x29
 8006632:	2103      	movs	r1, #3
 8006634:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006636:	230f      	movs	r3, #15
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2203      	movs	r2, #3
 800663c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <RTC_ExitInitMode+0x84>)
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <RTC_ExitInitMode+0x84>)
 8006644:	2120      	movs	r1, #32
 8006646:	430a      	orrs	r2, r1
 8006648:	619a      	str	r2, [r3, #24]
  }

  return status;
 800664a:	230f      	movs	r3, #15
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	781b      	ldrb	r3, [r3, #0]
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b005      	add	sp, #20
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	40002800 	.word	0x40002800

0800665c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	0002      	movs	r2, r0
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800666c:	230b      	movs	r3, #11
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	1dfa      	adds	r2, r7, #7
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006676:	e008      	b.n	800668a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800667e:	220b      	movs	r2, #11
 8006680:	18bb      	adds	r3, r7, r2
 8006682:	18ba      	adds	r2, r7, r2
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	3a0a      	subs	r2, #10
 8006688:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800668a:	210b      	movs	r1, #11
 800668c:	187b      	adds	r3, r7, r1
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b09      	cmp	r3, #9
 8006692:	d8f1      	bhi.n	8006678 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	b2da      	uxtb	r2, r3
 800669c:	187b      	adds	r3, r7, r1
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	b2db      	uxtb	r3, r3
}
 80066a4:	0018      	movs	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b004      	add	sp, #16
 80066aa:	bd80      	pop	{r7, pc}

080066ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	0002      	movs	r2, r0
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066b8:	1dfb      	adds	r3, r7, #7
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	001a      	movs	r2, r3
 80066c2:	0013      	movs	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	1dfb      	adds	r3, r7, #7
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	210f      	movs	r1, #15
 80066d6:	400b      	ands	r3, r1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	18d3      	adds	r3, r2, r3
 80066dc:	b2db      	uxtb	r3, r3
}
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2228      	movs	r2, #40	; 0x28
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_RTCEx_EnableBypassShadow+0x16>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e024      	b.n	8006746 <HAL_RTCEx_EnableBypassShadow+0x60>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2228      	movs	r2, #40	; 0x28
 8006700:	2101      	movs	r1, #1
 8006702:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2229      	movs	r2, #41	; 0x29
 8006708:	2102      	movs	r1, #2
 800670a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	22ca      	movs	r2, #202	; 0xca
 8006712:	625a      	str	r2, [r3, #36]	; 0x24
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2253      	movs	r2, #83	; 0x53
 800671a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2120      	movs	r1, #32
 8006728:	430a      	orrs	r2, r1
 800672a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2229      	movs	r2, #41	; 0x29
 8006738:	2101      	movs	r1, #1
 800673a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2228      	movs	r2, #40	; 0x28
 8006740:	2100      	movs	r1, #0
 8006742:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	b002      	add	sp, #8
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2228      	movs	r2, #40	; 0x28
 800675a:	5c9b      	ldrb	r3, [r3, r2]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_RTCEx_DisableBypassShadow+0x16>
 8006760:	2302      	movs	r3, #2
 8006762:	e024      	b.n	80067ae <HAL_RTCEx_DisableBypassShadow+0x60>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2228      	movs	r2, #40	; 0x28
 8006768:	2101      	movs	r1, #1
 800676a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2229      	movs	r2, #41	; 0x29
 8006770:	2102      	movs	r1, #2
 8006772:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	22ca      	movs	r2, #202	; 0xca
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2253      	movs	r2, #83	; 0x53
 8006782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	21df      	movs	r1, #223	; 0xdf
 8006790:	400a      	ands	r2, r1
 8006792:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	22ff      	movs	r2, #255	; 0xff
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2229      	movs	r2, #41	; 0x29
 80067a0:	2101      	movs	r1, #1
 80067a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2228      	movs	r2, #40	; 0x28
 80067a8:	2100      	movs	r1, #0
 80067aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	0018      	movs	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b002      	add	sp, #8
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b002      	add	sp, #8
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e0a8      	b.n	800692c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	2382      	movs	r3, #130	; 0x82
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d009      	beq.n	8006802 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	61da      	str	r2, [r3, #28]
 80067f4:	e005      	b.n	8006802 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	225d      	movs	r2, #93	; 0x5d
 800680c:	5c9b      	ldrb	r3, [r3, r2]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d107      	bne.n	8006824 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	225c      	movs	r2, #92	; 0x5c
 8006818:	2100      	movs	r1, #0
 800681a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0018      	movs	r0, r3
 8006820:	f7fd fad0 	bl	8003dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	225d      	movs	r2, #93	; 0x5d
 8006828:	2102      	movs	r1, #2
 800682a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	438a      	bics	r2, r1
 800683a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	23e0      	movs	r3, #224	; 0xe0
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	429a      	cmp	r2, r3
 8006846:	d902      	bls.n	800684e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e002      	b.n	8006854 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	015b      	lsls	r3, r3, #5
 8006852:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	23f0      	movs	r3, #240	; 0xf0
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	429a      	cmp	r2, r3
 800685e:	d008      	beq.n	8006872 <HAL_SPI_Init+0xaa>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	23e0      	movs	r3, #224	; 0xe0
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	429a      	cmp	r2, r3
 800686a:	d002      	beq.n	8006872 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	2382      	movs	r3, #130	; 0x82
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	401a      	ands	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	2384      	movs	r3, #132	; 0x84
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	400b      	ands	r3, r1
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2102      	movs	r1, #2
 800688e:	400b      	ands	r3, r1
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2101      	movs	r1, #1
 8006898:	400b      	ands	r3, r1
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6999      	ldr	r1, [r3, #24]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	400b      	ands	r3, r1
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	2138      	movs	r1, #56	; 0x38
 80068ae:	400b      	ands	r3, r1
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	2180      	movs	r1, #128	; 0x80
 80068b8:	400b      	ands	r3, r1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	0011      	movs	r1, r2
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	019b      	lsls	r3, r3, #6
 80068c6:	401a      	ands	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	2204      	movs	r2, #4
 80068d8:	401a      	ands	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2110      	movs	r1, #16
 80068e0:	400b      	ands	r3, r1
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	2108      	movs	r1, #8
 80068ea:	400b      	ands	r3, r1
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	23f0      	movs	r3, #240	; 0xf0
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	400b      	ands	r3, r1
 80068f8:	431a      	orrs	r2, r3
 80068fa:	0011      	movs	r1, r2
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	015b      	lsls	r3, r3, #5
 8006902:	401a      	ands	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4907      	ldr	r1, [pc, #28]	; (8006934 <HAL_SPI_Init+0x16c>)
 8006918:	400a      	ands	r2, r1
 800691a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	225d      	movs	r2, #93	; 0x5d
 8006926:	2101      	movs	r1, #1
 8006928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b004      	add	sp, #16
 8006932:	bd80      	pop	{r7, pc}
 8006934:	fffff7ff 	.word	0xfffff7ff

08006938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	1dbb      	adds	r3, r7, #6
 8006946:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006948:	231f      	movs	r3, #31
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	225c      	movs	r2, #92	; 0x5c
 8006954:	5c9b      	ldrb	r3, [r3, r2]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_SPI_Transmit+0x26>
 800695a:	2302      	movs	r3, #2
 800695c:	e147      	b.n	8006bee <HAL_SPI_Transmit+0x2b6>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	225c      	movs	r2, #92	; 0x5c
 8006962:	2101      	movs	r1, #1
 8006964:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006966:	f7fd fdd1 	bl	800450c <HAL_GetTick>
 800696a:	0003      	movs	r3, r0
 800696c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800696e:	2316      	movs	r3, #22
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	1dba      	adds	r2, r7, #6
 8006974:	8812      	ldrh	r2, [r2, #0]
 8006976:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	225d      	movs	r2, #93	; 0x5d
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d004      	beq.n	800698e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006984:	231f      	movs	r3, #31
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2202      	movs	r2, #2
 800698a:	701a      	strb	r2, [r3, #0]
    goto error;
 800698c:	e128      	b.n	8006be0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_SPI_Transmit+0x64>
 8006994:	1dbb      	adds	r3, r7, #6
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800699c:	231f      	movs	r3, #31
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80069a4:	e11c      	b.n	8006be0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	225d      	movs	r2, #93	; 0x5d
 80069aa:	2103      	movs	r1, #3
 80069ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1dba      	adds	r2, r7, #6
 80069be:	8812      	ldrh	r2, [r2, #0]
 80069c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1dba      	adds	r2, r7, #6
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2244      	movs	r2, #68	; 0x44
 80069d4:	2100      	movs	r1, #0
 80069d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2246      	movs	r2, #70	; 0x46
 80069dc:	2100      	movs	r1, #0
 80069de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d110      	bne.n	8006a1a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	438a      	bics	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	01c9      	lsls	r1, r1, #7
 8006a16:	430a      	orrs	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2240      	movs	r2, #64	; 0x40
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d007      	beq.n	8006a38 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2140      	movs	r1, #64	; 0x40
 8006a34:	430a      	orrs	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	23e0      	movs	r3, #224	; 0xe0
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d952      	bls.n	8006aea <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <HAL_SPI_Transmit+0x11e>
 8006a4c:	2316      	movs	r3, #22
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d143      	bne.n	8006ade <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	881a      	ldrh	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	1c9a      	adds	r2, r3, #2
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a7a:	e030      	b.n	8006ade <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2202      	movs	r2, #2
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d112      	bne.n	8006ab0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	881a      	ldrh	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aae:	e016      	b.n	8006ade <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ab0:	f7fd fd2c 	bl	800450c <HAL_GetTick>
 8006ab4:	0002      	movs	r2, r0
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d802      	bhi.n	8006ac6 <HAL_SPI_Transmit+0x18e>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	d102      	bne.n	8006acc <HAL_SPI_Transmit+0x194>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006acc:	231f      	movs	r3, #31
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	225d      	movs	r2, #93	; 0x5d
 8006ad8:	2101      	movs	r1, #1
 8006ada:	5499      	strb	r1, [r3, r2]
          goto error;
 8006adc:	e080      	b.n	8006be0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1c9      	bne.n	8006a7c <HAL_SPI_Transmit+0x144>
 8006ae8:	e053      	b.n	8006b92 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <HAL_SPI_Transmit+0x1c4>
 8006af2:	2316      	movs	r3, #22
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d145      	bne.n	8006b88 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006b22:	e031      	b.n	8006b88 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d113      	bne.n	8006b5a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b58:	e016      	b.n	8006b88 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5a:	f7fd fcd7 	bl	800450c <HAL_GetTick>
 8006b5e:	0002      	movs	r2, r0
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d802      	bhi.n	8006b70 <HAL_SPI_Transmit+0x238>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	d102      	bne.n	8006b76 <HAL_SPI_Transmit+0x23e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d108      	bne.n	8006b88 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006b76:	231f      	movs	r3, #31
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	225d      	movs	r2, #93	; 0x5d
 8006b82:	2101      	movs	r1, #1
 8006b84:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b86:	e02b      	b.n	8006be0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1c8      	bne.n	8006b24 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 fcef 	bl	800757c <SPI_EndRxTxTransaction>
 8006b9e:	1e03      	subs	r3, r0, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006bce:	231f      	movs	r3, #31
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e003      	b.n	8006be0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	225d      	movs	r2, #93	; 0x5d
 8006bdc:	2101      	movs	r1, #1
 8006bde:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	225c      	movs	r2, #92	; 0x5c
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006be8:	231f      	movs	r3, #31
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	781b      	ldrb	r3, [r3, #0]
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b008      	add	sp, #32
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	1dbb      	adds	r3, r7, #6
 8006c06:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c08:	2117      	movs	r1, #23
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	225d      	movs	r2, #93	; 0x5d
 8006c14:	5c9b      	ldrb	r3, [r3, r2]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d003      	beq.n	8006c24 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c22:	e12b      	b.n	8006e7c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	2382      	movs	r3, #130	; 0x82
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d113      	bne.n	8006c58 <HAL_SPI_Receive+0x60>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10f      	bne.n	8006c58 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	225d      	movs	r2, #93	; 0x5d
 8006c3c:	2104      	movs	r1, #4
 8006c3e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c40:	1dbb      	adds	r3, r7, #6
 8006c42:	881c      	ldrh	r4, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	0023      	movs	r3, r4
 8006c50:	f000 f924 	bl	8006e9c <HAL_SPI_TransmitReceive>
 8006c54:	0003      	movs	r3, r0
 8006c56:	e118      	b.n	8006e8a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	225c      	movs	r2, #92	; 0x5c
 8006c5c:	5c9b      	ldrb	r3, [r3, r2]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_SPI_Receive+0x6e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e111      	b.n	8006e8a <HAL_SPI_Receive+0x292>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	225c      	movs	r2, #92	; 0x5c
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6e:	f7fd fc4d 	bl	800450c <HAL_GetTick>
 8006c72:	0003      	movs	r3, r0
 8006c74:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_Receive+0x8c>
 8006c7c:	1dbb      	adds	r3, r7, #6
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006c84:	2317      	movs	r3, #23
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c8c:	e0f6      	b.n	8006e7c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	225d      	movs	r2, #93	; 0x5d
 8006c92:	2104      	movs	r1, #4
 8006c94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1dba      	adds	r2, r7, #6
 8006ca6:	2144      	movs	r1, #68	; 0x44
 8006ca8:	8812      	ldrh	r2, [r2, #0]
 8006caa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1dba      	adds	r2, r7, #6
 8006cb0:	2146      	movs	r1, #70	; 0x46
 8006cb2:	8812      	ldrh	r2, [r2, #0]
 8006cb4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	23e0      	movs	r3, #224	; 0xe0
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d908      	bls.n	8006cf2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	496a      	ldr	r1, [pc, #424]	; (8006e94 <HAL_SPI_Receive+0x29c>)
 8006cec:	400a      	ands	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	e008      	b.n	8006d04 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2180      	movs	r1, #128	; 0x80
 8006cfe:	0149      	lsls	r1, r1, #5
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d10f      	bne.n	8006d30 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2140      	movs	r1, #64	; 0x40
 8006d1c:	438a      	bics	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	495b      	ldr	r1, [pc, #364]	; (8006e98 <HAL_SPI_Receive+0x2a0>)
 8006d2c:	400a      	ands	r2, r1
 8006d2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d007      	beq.n	8006d4e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2140      	movs	r1, #64	; 0x40
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	23e0      	movs	r3, #224	; 0xe0
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d900      	bls.n	8006d5c <HAL_SPI_Receive+0x164>
 8006d5a:	e071      	b.n	8006e40 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d5c:	e035      	b.n	8006dca <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2201      	movs	r2, #1
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d117      	bne.n	8006d9c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	001a      	movs	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2246      	movs	r2, #70	; 0x46
 8006d8c:	5a9b      	ldrh	r3, [r3, r2]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b299      	uxth	r1, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2246      	movs	r2, #70	; 0x46
 8006d98:	5299      	strh	r1, [r3, r2]
 8006d9a:	e016      	b.n	8006dca <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9c:	f7fd fbb6 	bl	800450c <HAL_GetTick>
 8006da0:	0002      	movs	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d802      	bhi.n	8006db2 <HAL_SPI_Receive+0x1ba>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3301      	adds	r3, #1
 8006db0:	d102      	bne.n	8006db8 <HAL_SPI_Receive+0x1c0>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d108      	bne.n	8006dca <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006db8:	2317      	movs	r3, #23
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	225d      	movs	r2, #93	; 0x5d
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	5499      	strb	r1, [r3, r2]
          goto error;
 8006dc8:	e058      	b.n	8006e7c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2246      	movs	r2, #70	; 0x46
 8006dce:	5a9b      	ldrh	r3, [r3, r2]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1c3      	bne.n	8006d5e <HAL_SPI_Receive+0x166>
 8006dd6:	e039      	b.n	8006e4c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2201      	movs	r2, #1
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d115      	bne.n	8006e12 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	b292      	uxth	r2, r2
 8006df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2246      	movs	r2, #70	; 0x46
 8006e02:	5a9b      	ldrh	r3, [r3, r2]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2246      	movs	r2, #70	; 0x46
 8006e0e:	5299      	strh	r1, [r3, r2]
 8006e10:	e016      	b.n	8006e40 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e12:	f7fd fb7b 	bl	800450c <HAL_GetTick>
 8006e16:	0002      	movs	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d802      	bhi.n	8006e28 <HAL_SPI_Receive+0x230>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	d102      	bne.n	8006e2e <HAL_SPI_Receive+0x236>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d108      	bne.n	8006e40 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006e2e:	2317      	movs	r3, #23
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	2203      	movs	r2, #3
 8006e34:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	225d      	movs	r2, #93	; 0x5d
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]
          goto error;
 8006e3e:	e01d      	b.n	8006e7c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2246      	movs	r2, #70	; 0x46
 8006e44:	5a9b      	ldrh	r3, [r3, r2]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1c5      	bne.n	8006dd8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	0018      	movs	r0, r3
 8006e54:	f000 fb34 	bl	80074c0 <SPI_EndRxTransaction>
 8006e58:	1e03      	subs	r3, r0, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e6a:	2317      	movs	r3, #23
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e003      	b.n	8006e7c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	225d      	movs	r2, #93	; 0x5d
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	225c      	movs	r2, #92	; 0x5c
 8006e80:	2100      	movs	r1, #0
 8006e82:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e84:	2317      	movs	r3, #23
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	781b      	ldrb	r3, [r3, #0]
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b007      	add	sp, #28
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	ffffefff 	.word	0xffffefff
 8006e98:	ffffbfff 	.word	0xffffbfff

08006e9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	; 0x28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	001a      	movs	r2, r3
 8006eaa:	1cbb      	adds	r3, r7, #2
 8006eac:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006eb2:	2323      	movs	r3, #35	; 0x23
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	225c      	movs	r2, #92	; 0x5c
 8006ebe:	5c9b      	ldrb	r3, [r3, r2]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x2c>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e1c4      	b.n	8007252 <HAL_SPI_TransmitReceive+0x3b6>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	225c      	movs	r2, #92	; 0x5c
 8006ecc:	2101      	movs	r1, #1
 8006ece:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed0:	f7fd fb1c 	bl	800450c <HAL_GetTick>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ed8:	201b      	movs	r0, #27
 8006eda:	183b      	adds	r3, r7, r0
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	215d      	movs	r1, #93	; 0x5d
 8006ee0:	5c52      	ldrb	r2, [r2, r1]
 8006ee2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006eea:	2312      	movs	r3, #18
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	1cba      	adds	r2, r7, #2
 8006ef0:	8812      	ldrh	r2, [r2, #0]
 8006ef2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ef4:	183b      	adds	r3, r7, r0
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d011      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x84>
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	2382      	movs	r3, #130	; 0x82
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d107      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d103      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x7a>
 8006f0e:	183b      	adds	r3, r7, r0
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d004      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006f16:	2323      	movs	r3, #35	; 0x23
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f1e:	e191      	b.n	8007244 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <HAL_SPI_TransmitReceive+0x98>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_SPI_TransmitReceive+0x98>
 8006f2c:	1cbb      	adds	r3, r7, #2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006f34:	2323      	movs	r3, #35	; 0x23
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2201      	movs	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f3c:	e182      	b.n	8007244 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	225d      	movs	r2, #93	; 0x5d
 8006f42:	5c9b      	ldrb	r3, [r3, r2]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d003      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	225d      	movs	r2, #93	; 0x5d
 8006f4e:	2105      	movs	r1, #5
 8006f50:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1cba      	adds	r2, r7, #2
 8006f62:	2146      	movs	r1, #70	; 0x46
 8006f64:	8812      	ldrh	r2, [r2, #0]
 8006f66:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1cba      	adds	r2, r7, #2
 8006f6c:	2144      	movs	r1, #68	; 0x44
 8006f6e:	8812      	ldrh	r2, [r2, #0]
 8006f70:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1cba      	adds	r2, r7, #2
 8006f7c:	8812      	ldrh	r2, [r2, #0]
 8006f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1cba      	adds	r2, r7, #2
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	23e0      	movs	r3, #224	; 0xe0
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d908      	bls.n	8006fb2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	49ac      	ldr	r1, [pc, #688]	; (800725c <HAL_SPI_TransmitReceive+0x3c0>)
 8006fac:	400a      	ands	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	e008      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	0149      	lsls	r1, r1, #5
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2240      	movs	r2, #64	; 0x40
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d007      	beq.n	8006fe2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	23e0      	movs	r3, #224	; 0xe0
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d800      	bhi.n	8006ff0 <HAL_SPI_TransmitReceive+0x154>
 8006fee:	e083      	b.n	80070f8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x168>
 8006ff8:	2312      	movs	r3, #18
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d000      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x168>
 8007002:	e06d      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	881a      	ldrh	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007028:	e05a      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2202      	movs	r2, #2
 8007032:	4013      	ands	r3, r2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d11b      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x1d4>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d016      	beq.n	8007070 <HAL_SPI_TransmitReceive+0x1d4>
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	2b01      	cmp	r3, #1
 8007046:	d113      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2201      	movs	r2, #1
 8007078:	4013      	ands	r3, r2
 800707a:	2b01      	cmp	r3, #1
 800707c:	d11c      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x21c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2246      	movs	r2, #70	; 0x46
 8007082:	5a9b      	ldrh	r3, [r3, r2]
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	b292      	uxth	r2, r2
 8007096:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2246      	movs	r2, #70	; 0x46
 80070a6:	5a9b      	ldrh	r3, [r3, r2]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b299      	uxth	r1, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2246      	movs	r2, #70	; 0x46
 80070b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070b4:	2301      	movs	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070b8:	f7fd fa28 	bl	800450c <HAL_GetTick>
 80070bc:	0002      	movs	r2, r0
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d80b      	bhi.n	80070e0 <HAL_SPI_TransmitReceive+0x244>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	3301      	adds	r3, #1
 80070cc:	d008      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80070ce:	2323      	movs	r3, #35	; 0x23
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2203      	movs	r2, #3
 80070d4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	225d      	movs	r2, #93	; 0x5d
 80070da:	2101      	movs	r1, #1
 80070dc:	5499      	strb	r1, [r3, r2]
        goto error;
 80070de:	e0b1      	b.n	8007244 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d19f      	bne.n	800702a <HAL_SPI_TransmitReceive+0x18e>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2246      	movs	r2, #70	; 0x46
 80070ee:	5a9b      	ldrh	r3, [r3, r2]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d199      	bne.n	800702a <HAL_SPI_TransmitReceive+0x18e>
 80070f6:	e089      	b.n	800720c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_SPI_TransmitReceive+0x270>
 8007100:	2312      	movs	r3, #18
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d000      	beq.n	800710c <HAL_SPI_TransmitReceive+0x270>
 800710a:	e074      	b.n	80071f6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007132:	e060      	b.n	80071f6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2202      	movs	r2, #2
 800713c:	4013      	ands	r3, r2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d11c      	bne.n	800717c <HAL_SPI_TransmitReceive+0x2e0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d017      	beq.n	800717c <HAL_SPI_TransmitReceive+0x2e0>
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	2b01      	cmp	r3, #1
 8007150:	d114      	bne.n	800717c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2201      	movs	r2, #1
 8007184:	4013      	ands	r3, r2
 8007186:	2b01      	cmp	r3, #1
 8007188:	d11e      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x32c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2246      	movs	r2, #70	; 0x46
 800718e:	5a9b      	ldrh	r3, [r3, r2]
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d018      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	001a      	movs	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	7812      	ldrb	r2, [r2, #0]
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2246      	movs	r2, #70	; 0x46
 80071b6:	5a9b      	ldrh	r3, [r3, r2]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b299      	uxth	r1, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2246      	movs	r2, #70	; 0x46
 80071c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c4:	2301      	movs	r3, #1
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071c8:	f7fd f9a0 	bl	800450c <HAL_GetTick>
 80071cc:	0002      	movs	r2, r0
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d802      	bhi.n	80071de <HAL_SPI_TransmitReceive+0x342>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	3301      	adds	r3, #1
 80071dc:	d102      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x348>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80071e4:	2323      	movs	r3, #35	; 0x23
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2203      	movs	r2, #3
 80071ea:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	225d      	movs	r2, #93	; 0x5d
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]
        goto error;
 80071f4:	e026      	b.n	8007244 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d199      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x298>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2246      	movs	r2, #70	; 0x46
 8007204:	5a9b      	ldrh	r3, [r3, r2]
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d193      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	0018      	movs	r0, r3
 8007214:	f000 f9b2 	bl	800757c <SPI_EndRxTxTransaction>
 8007218:	1e03      	subs	r3, r0, #0
 800721a:	d006      	beq.n	800722a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800721c:	2323      	movs	r3, #35	; 0x23
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	2201      	movs	r2, #1
 8007222:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007232:	2323      	movs	r3, #35	; 0x23
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e003      	b.n	8007244 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	225d      	movs	r2, #93	; 0x5d
 8007240:	2101      	movs	r1, #1
 8007242:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	225c      	movs	r2, #92	; 0x5c
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800724c:	2323      	movs	r3, #35	; 0x23
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	781b      	ldrb	r3, [r3, #0]
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b00a      	add	sp, #40	; 0x28
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	ffffefff 	.word	0xffffefff

08007260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	1dfb      	adds	r3, r7, #7
 800726e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007270:	f7fd f94c 	bl	800450c <HAL_GetTick>
 8007274:	0002      	movs	r2, r0
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007280:	f7fd f944 	bl	800450c <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007288:	4b3a      	ldr	r3, [pc, #232]	; (8007374 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	015b      	lsls	r3, r3, #5
 800728e:	0d1b      	lsrs	r3, r3, #20
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	4353      	muls	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007296:	e058      	b.n	800734a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	d055      	beq.n	800734a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800729e:	f7fd f935 	bl	800450c <HAL_GetTick>
 80072a2:	0002      	movs	r2, r0
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d902      	bls.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d142      	bne.n	800733a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	21e0      	movs	r1, #224	; 0xe0
 80072c0:	438a      	bics	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	2382      	movs	r3, #130	; 0x82
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d113      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	2380      	movs	r3, #128	; 0x80
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	429a      	cmp	r2, r3
 80072da:	d005      	beq.n	80072e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d107      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2140      	movs	r1, #64	; 0x40
 80072f4:	438a      	bics	r2, r1
 80072f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	019b      	lsls	r3, r3, #6
 8007300:	429a      	cmp	r2, r3
 8007302:	d110      	bne.n	8007326 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	491a      	ldr	r1, [pc, #104]	; (8007378 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007310:	400a      	ands	r2, r1
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2180      	movs	r1, #128	; 0x80
 8007320:	0189      	lsls	r1, r1, #6
 8007322:	430a      	orrs	r2, r1
 8007324:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	225d      	movs	r2, #93	; 0x5d
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	225c      	movs	r2, #92	; 0x5c
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e017      	b.n	800736a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	3b01      	subs	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	4013      	ands	r3, r2
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	425a      	negs	r2, r3
 800735a:	4153      	adcs	r3, r2
 800735c:	b2db      	uxtb	r3, r3
 800735e:	001a      	movs	r2, r3
 8007360:	1dfb      	adds	r3, r7, #7
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d197      	bne.n	8007298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b008      	add	sp, #32
 8007370:	bd80      	pop	{r7, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	20000010 	.word	0x20000010
 8007378:	ffffdfff 	.word	0xffffdfff

0800737c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800738a:	2317      	movs	r3, #23
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007392:	f7fd f8bb 	bl	800450c <HAL_GetTick>
 8007396:	0002      	movs	r2, r0
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80073a2:	f7fd f8b3 	bl	800450c <HAL_GetTick>
 80073a6:	0003      	movs	r3, r0
 80073a8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073b2:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	0013      	movs	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	00da      	lsls	r2, r3, #3
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	0d1b      	lsrs	r3, r3, #20
 80073c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c4:	4353      	muls	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073c8:	e068      	b.n	800749c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	23c0      	movs	r3, #192	; 0xc0
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d10a      	bne.n	80073ea <SPI_WaitFifoStateUntilTimeout+0x6e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d107      	bne.n	80073ea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	2117      	movs	r1, #23
 80073e2:	187b      	adds	r3, r7, r1
 80073e4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073e6:	187b      	adds	r3, r7, r1
 80073e8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	3301      	adds	r3, #1
 80073ee:	d055      	beq.n	800749c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073f0:	f7fd f88c 	bl	800450c <HAL_GetTick>
 80073f4:	0002      	movs	r2, r0
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d902      	bls.n	8007406 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d142      	bne.n	800748c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	21e0      	movs	r1, #224	; 0xe0
 8007412:	438a      	bics	r2, r1
 8007414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	2382      	movs	r3, #130	; 0x82
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	429a      	cmp	r2, r3
 8007420:	d113      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	2380      	movs	r3, #128	; 0x80
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	429a      	cmp	r2, r3
 800742c:	d005      	beq.n	800743a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	2380      	movs	r3, #128	; 0x80
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	429a      	cmp	r2, r3
 8007438:	d107      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	438a      	bics	r2, r1
 8007448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	019b      	lsls	r3, r3, #6
 8007452:	429a      	cmp	r2, r3
 8007454:	d110      	bne.n	8007478 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4916      	ldr	r1, [pc, #88]	; (80074bc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007462:	400a      	ands	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	0189      	lsls	r1, r1, #6
 8007474:	430a      	orrs	r2, r1
 8007476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	225d      	movs	r2, #93	; 0x5d
 800747c:	2101      	movs	r1, #1
 800747e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	225c      	movs	r2, #92	; 0x5c
 8007484:	2100      	movs	r1, #0
 8007486:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e010      	b.n	80074ae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	3b01      	subs	r3, #1
 800749a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d18e      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	0018      	movs	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b00a      	add	sp, #40	; 0x28
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	20000010 	.word	0x20000010
 80074bc:	ffffdfff 	.word	0xffffdfff

080074c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	2382      	movs	r3, #130	; 0x82
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d113      	bne.n	8007500 <SPI_EndRxTransaction+0x40>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d005      	beq.n	80074f0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d107      	bne.n	8007500 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2140      	movs	r1, #64	; 0x40
 80074fc:	438a      	bics	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	0013      	movs	r3, r2
 800750a:	2200      	movs	r2, #0
 800750c:	2180      	movs	r1, #128	; 0x80
 800750e:	f7ff fea7 	bl	8007260 <SPI_WaitFlagStateUntilTimeout>
 8007512:	1e03      	subs	r3, r0, #0
 8007514:	d007      	beq.n	8007526 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751a:	2220      	movs	r2, #32
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e026      	b.n	8007574 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	2382      	movs	r3, #130	; 0x82
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	429a      	cmp	r2, r3
 8007530:	d11f      	bne.n	8007572 <SPI_EndRxTransaction+0xb2>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	429a      	cmp	r2, r3
 800753c:	d005      	beq.n	800754a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	2380      	movs	r3, #128	; 0x80
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	429a      	cmp	r2, r3
 8007548:	d113      	bne.n	8007572 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	23c0      	movs	r3, #192	; 0xc0
 800754e:	00d9      	lsls	r1, r3, #3
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	0013      	movs	r3, r2
 8007558:	2200      	movs	r2, #0
 800755a:	f7ff ff0f 	bl	800737c <SPI_WaitFifoStateUntilTimeout>
 800755e:	1e03      	subs	r3, r0, #0
 8007560:	d007      	beq.n	8007572 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007566:	2220      	movs	r2, #32
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e000      	b.n	8007574 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b004      	add	sp, #16
 800757a:	bd80      	pop	{r7, pc}

0800757c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	23c0      	movs	r3, #192	; 0xc0
 800758c:	0159      	lsls	r1, r3, #5
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	0013      	movs	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	f7ff fef0 	bl	800737c <SPI_WaitFifoStateUntilTimeout>
 800759c:	1e03      	subs	r3, r0, #0
 800759e:	d007      	beq.n	80075b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a4:	2220      	movs	r2, #32
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e027      	b.n	8007600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	0013      	movs	r3, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	f7ff fe4f 	bl	8007260 <SPI_WaitFlagStateUntilTimeout>
 80075c2:	1e03      	subs	r3, r0, #0
 80075c4:	d007      	beq.n	80075d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	2220      	movs	r2, #32
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e014      	b.n	8007600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	23c0      	movs	r3, #192	; 0xc0
 80075da:	00d9      	lsls	r1, r3, #3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	0013      	movs	r3, r2
 80075e4:	2200      	movs	r2, #0
 80075e6:	f7ff fec9 	bl	800737c <SPI_WaitFifoStateUntilTimeout>
 80075ea:	1e03      	subs	r3, r0, #0
 80075ec:	d007      	beq.n	80075fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f2:	2220      	movs	r2, #32
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e000      	b.n	8007600 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e04a      	b.n	80076b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	223d      	movs	r2, #61	; 0x3d
 800761e:	5c9b      	ldrb	r3, [r3, r2]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d107      	bne.n	8007636 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	223c      	movs	r2, #60	; 0x3c
 800762a:	2100      	movs	r1, #0
 800762c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f7fc fc11 	bl	8003e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	223d      	movs	r2, #61	; 0x3d
 800763a:	2102      	movs	r1, #2
 800763c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	0019      	movs	r1, r3
 8007648:	0010      	movs	r0, r2
 800764a:	f000 f9ed 	bl	8007a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2248      	movs	r2, #72	; 0x48
 8007652:	2101      	movs	r1, #1
 8007654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	223e      	movs	r2, #62	; 0x3e
 800765a:	2101      	movs	r1, #1
 800765c:	5499      	strb	r1, [r3, r2]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	223f      	movs	r2, #63	; 0x3f
 8007662:	2101      	movs	r1, #1
 8007664:	5499      	strb	r1, [r3, r2]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2240      	movs	r2, #64	; 0x40
 800766a:	2101      	movs	r1, #1
 800766c:	5499      	strb	r1, [r3, r2]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2241      	movs	r2, #65	; 0x41
 8007672:	2101      	movs	r1, #1
 8007674:	5499      	strb	r1, [r3, r2]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2242      	movs	r2, #66	; 0x42
 800767a:	2101      	movs	r1, #1
 800767c:	5499      	strb	r1, [r3, r2]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2243      	movs	r2, #67	; 0x43
 8007682:	2101      	movs	r1, #1
 8007684:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2244      	movs	r2, #68	; 0x44
 800768a:	2101      	movs	r1, #1
 800768c:	5499      	strb	r1, [r3, r2]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2245      	movs	r2, #69	; 0x45
 8007692:	2101      	movs	r1, #1
 8007694:	5499      	strb	r1, [r3, r2]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2246      	movs	r2, #70	; 0x46
 800769a:	2101      	movs	r1, #1
 800769c:	5499      	strb	r1, [r3, r2]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2247      	movs	r2, #71	; 0x47
 80076a2:	2101      	movs	r1, #1
 80076a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	223d      	movs	r2, #61	; 0x3d
 80076aa:	2101      	movs	r1, #1
 80076ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b002      	add	sp, #8
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	223d      	movs	r2, #61	; 0x3d
 80076c4:	5c9b      	ldrb	r3, [r3, r2]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d001      	beq.n	80076d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e047      	b.n	8007760 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	223d      	movs	r2, #61	; 0x3d
 80076d4:	2102      	movs	r1, #2
 80076d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2101      	movs	r1, #1
 80076e4:	430a      	orrs	r2, r1
 80076e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <HAL_TIM_Base_Start_IT+0xb0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d014      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x64>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	05db      	lsls	r3, r3, #23
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d00e      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x64>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1a      	ldr	r2, [pc, #104]	; (800776c <HAL_TIM_Base_Start_IT+0xb4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x64>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_TIM_Base_Start_IT+0xb8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x64>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a17      	ldr	r2, [pc, #92]	; (8007774 <HAL_TIM_Base_Start_IT+0xbc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d116      	bne.n	800774a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	4a15      	ldr	r2, [pc, #84]	; (8007778 <HAL_TIM_Base_Start_IT+0xc0>)
 8007724:	4013      	ands	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b06      	cmp	r3, #6
 800772c:	d016      	beq.n	800775c <HAL_TIM_Base_Start_IT+0xa4>
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	025b      	lsls	r3, r3, #9
 8007734:	429a      	cmp	r2, r3
 8007736:	d011      	beq.n	800775c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2101      	movs	r1, #1
 8007744:	430a      	orrs	r2, r1
 8007746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007748:	e008      	b.n	800775c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2101      	movs	r1, #1
 8007756:	430a      	orrs	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e000      	b.n	800775e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800775c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	0018      	movs	r0, r3
 8007762:	46bd      	mov	sp, r7
 8007764:	b004      	add	sp, #16
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40014000 	.word	0x40014000
 8007778:	00010007 	.word	0x00010007

0800777c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2101      	movs	r1, #1
 8007790:	438a      	bics	r2, r1
 8007792:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	4a0d      	ldr	r2, [pc, #52]	; (80077d0 <HAL_TIM_Base_Stop_IT+0x54>)
 800779c:	4013      	ands	r3, r2
 800779e:	d10d      	bne.n	80077bc <HAL_TIM_Base_Stop_IT+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	4a0b      	ldr	r2, [pc, #44]	; (80077d4 <HAL_TIM_Base_Stop_IT+0x58>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_Base_Stop_IT+0x40>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2101      	movs	r1, #1
 80077b8:	438a      	bics	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	223d      	movs	r2, #61	; 0x3d
 80077c0:	2101      	movs	r1, #1
 80077c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	0018      	movs	r0, r3
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b002      	add	sp, #8
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	00001111 	.word	0x00001111
 80077d4:	00000444 	.word	0x00000444

080077d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2202      	movs	r2, #2
 80077f4:	4013      	ands	r3, r2
 80077f6:	d021      	beq.n	800783c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2202      	movs	r2, #2
 80077fc:	4013      	ands	r3, r2
 80077fe:	d01d      	beq.n	800783c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2203      	movs	r2, #3
 8007806:	4252      	negs	r2, r2
 8007808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2203      	movs	r2, #3
 8007818:	4013      	ands	r3, r2
 800781a:	d004      	beq.n	8007826 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	0018      	movs	r0, r3
 8007820:	f000 f8ea 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 8007824:	e007      	b.n	8007836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	0018      	movs	r0, r3
 800782a:	f000 f8dd 	bl	80079e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0018      	movs	r0, r3
 8007832:	f000 f8e9 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2204      	movs	r2, #4
 8007840:	4013      	ands	r3, r2
 8007842:	d022      	beq.n	800788a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2204      	movs	r2, #4
 8007848:	4013      	ands	r3, r2
 800784a:	d01e      	beq.n	800788a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2205      	movs	r2, #5
 8007852:	4252      	negs	r2, r2
 8007854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	23c0      	movs	r3, #192	; 0xc0
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4013      	ands	r3, r2
 8007868:	d004      	beq.n	8007874 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 f8c3 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 8007872:	e007      	b.n	8007884 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f8b6 	bl	80079e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	0018      	movs	r0, r3
 8007880:	f000 f8c2 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2208      	movs	r2, #8
 800788e:	4013      	ands	r3, r2
 8007890:	d021      	beq.n	80078d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2208      	movs	r2, #8
 8007896:	4013      	ands	r3, r2
 8007898:	d01d      	beq.n	80078d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2209      	movs	r2, #9
 80078a0:	4252      	negs	r2, r2
 80078a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2204      	movs	r2, #4
 80078a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	2203      	movs	r2, #3
 80078b2:	4013      	ands	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f000 f89d 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 80078be:	e007      	b.n	80078d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 f890 	bl	80079e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	0018      	movs	r0, r3
 80078cc:	f000 f89c 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2210      	movs	r2, #16
 80078da:	4013      	ands	r3, r2
 80078dc:	d022      	beq.n	8007924 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2210      	movs	r2, #16
 80078e2:	4013      	ands	r3, r2
 80078e4:	d01e      	beq.n	8007924 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2211      	movs	r2, #17
 80078ec:	4252      	negs	r2, r2
 80078ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2208      	movs	r2, #8
 80078f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	23c0      	movs	r3, #192	; 0xc0
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4013      	ands	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0018      	movs	r0, r3
 8007908:	f000 f876 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 800790c:	e007      	b.n	800791e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 f869 	bl	80079e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 f875 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2201      	movs	r2, #1
 8007928:	4013      	ands	r3, r2
 800792a:	d00c      	beq.n	8007946 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	4013      	ands	r3, r2
 8007932:	d008      	beq.n	8007946 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2202      	movs	r2, #2
 800793a:	4252      	negs	r2, r2
 800793c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0018      	movs	r0, r3
 8007942:	f7fc f991 	bl	8003c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2280      	movs	r2, #128	; 0x80
 800794a:	4013      	ands	r3, r2
 800794c:	d104      	bne.n	8007958 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	019b      	lsls	r3, r3, #6
 8007954:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007956:	d00b      	beq.n	8007970 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2280      	movs	r2, #128	; 0x80
 800795c:	4013      	ands	r3, r2
 800795e:	d007      	beq.n	8007970 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_TIM_IRQHandler+0x208>)
 8007966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	0018      	movs	r0, r3
 800796c:	f000 f972 	bl	8007c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	2380      	movs	r3, #128	; 0x80
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4013      	ands	r3, r2
 8007978:	d00b      	beq.n	8007992 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	4013      	ands	r3, r2
 8007980:	d007      	beq.n	8007992 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <HAL_TIM_IRQHandler+0x20c>)
 8007988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	0018      	movs	r0, r3
 800798e:	f000 f969 	bl	8007c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2240      	movs	r2, #64	; 0x40
 8007996:	4013      	ands	r3, r2
 8007998:	d00c      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2240      	movs	r2, #64	; 0x40
 800799e:	4013      	ands	r3, r2
 80079a0:	d008      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2241      	movs	r2, #65	; 0x41
 80079a8:	4252      	negs	r2, r2
 80079aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 f832 	bl	8007a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2220      	movs	r2, #32
 80079b8:	4013      	ands	r3, r2
 80079ba:	d00c      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	4013      	ands	r3, r2
 80079c2:	d008      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	4252      	negs	r2, r2
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	0018      	movs	r0, r3
 80079d2:	f000 f937 	bl	8007c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	46bd      	mov	sp, r7
 80079da:	b004      	add	sp, #16
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	ffffdf7f 	.word	0xffffdf7f
 80079e4:	fffffeff 	.word	0xfffffeff

080079e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079f0:	46c0      	nop			; (mov r8, r8)
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b002      	add	sp, #8
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b002      	add	sp, #8
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b002      	add	sp, #8
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <TIM_Base_SetConfig+0x110>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00c      	beq.n	8007a5a <TIM_Base_SetConfig+0x32>
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	2380      	movs	r3, #128	; 0x80
 8007a44:	05db      	lsls	r3, r3, #23
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d007      	beq.n	8007a5a <TIM_Base_SetConfig+0x32>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a3b      	ldr	r2, [pc, #236]	; (8007b3c <TIM_Base_SetConfig+0x114>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_Base_SetConfig+0x32>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a3a      	ldr	r2, [pc, #232]	; (8007b40 <TIM_Base_SetConfig+0x118>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d108      	bne.n	8007a6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2270      	movs	r2, #112	; 0x70
 8007a5e:	4393      	bics	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a32      	ldr	r2, [pc, #200]	; (8007b38 <TIM_Base_SetConfig+0x110>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d01c      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	05db      	lsls	r3, r3, #23
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d017      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2e      	ldr	r2, [pc, #184]	; (8007b3c <TIM_Base_SetConfig+0x114>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2d      	ldr	r2, [pc, #180]	; (8007b40 <TIM_Base_SetConfig+0x118>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2c      	ldr	r2, [pc, #176]	; (8007b44 <TIM_Base_SetConfig+0x11c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00b      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2b      	ldr	r2, [pc, #172]	; (8007b48 <TIM_Base_SetConfig+0x120>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d007      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <TIM_Base_SetConfig+0x124>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_Base_SetConfig+0x86>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a29      	ldr	r2, [pc, #164]	; (8007b50 <TIM_Base_SetConfig+0x128>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d108      	bne.n	8007ac0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a28      	ldr	r2, [pc, #160]	; (8007b54 <TIM_Base_SetConfig+0x12c>)
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2280      	movs	r2, #128	; 0x80
 8007ac4:	4393      	bics	r3, r2
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <TIM_Base_SetConfig+0x110>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00b      	beq.n	8007b06 <TIM_Base_SetConfig+0xde>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <TIM_Base_SetConfig+0x120>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <TIM_Base_SetConfig+0xde>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <TIM_Base_SetConfig+0x124>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_Base_SetConfig+0xde>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <TIM_Base_SetConfig+0x128>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d103      	bne.n	8007b0e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	691a      	ldr	r2, [r3, #16]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d106      	bne.n	8007b2e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2201      	movs	r2, #1
 8007b26:	4393      	bics	r3, r2
 8007b28:	001a      	movs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]
  }
}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b004      	add	sp, #16
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40002000 	.word	0x40002000
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40014400 	.word	0x40014400
 8007b50:	40014800 	.word	0x40014800
 8007b54:	fffffcff 	.word	0xfffffcff

08007b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	223c      	movs	r2, #60	; 0x3c
 8007b66:	5c9b      	ldrb	r3, [r3, r2]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e05a      	b.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	223c      	movs	r2, #60	; 0x3c
 8007b74:	2101      	movs	r1, #1
 8007b76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	223d      	movs	r2, #61	; 0x3d
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d108      	bne.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2270      	movs	r2, #112	; 0x70
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d014      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	05db      	lsls	r3, r3, #23
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d00e      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a14      	ldr	r2, [pc, #80]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a12      	ldr	r2, [pc, #72]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10c      	bne.n	8007c14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	4393      	bics	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	223d      	movs	r2, #61	; 0x3d
 8007c18:	2101      	movs	r1, #1
 8007c1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	223c      	movs	r2, #60	; 0x3c
 8007c20:	2100      	movs	r1, #0
 8007c22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	0018      	movs	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b004      	add	sp, #16
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	ff0fffff 	.word	0xff0fffff
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40014000 	.word	0x40014000

08007c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	b002      	add	sp, #8
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b002      	add	sp, #8
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c6c:	46c0      	nop			; (mov r8, r8)
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b002      	add	sp, #8
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e046      	b.n	8007d14 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2288      	movs	r2, #136	; 0x88
 8007c8a:	589b      	ldr	r3, [r3, r2]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d107      	bne.n	8007ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2284      	movs	r2, #132	; 0x84
 8007c94:	2100      	movs	r1, #0
 8007c96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f7fc f902 	bl	8003ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2288      	movs	r2, #136	; 0x88
 8007ca4:	2124      	movs	r1, #36	; 0x24
 8007ca6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	438a      	bics	r2, r1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f000 fd4c 	bl	8008760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f000 f9f2 	bl	80080b4 <UART_SetConfig>
 8007cd0:	0003      	movs	r3, r0
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e01c      	b.n	8007d14 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	490d      	ldr	r1, [pc, #52]	; (8007d1c <HAL_UART_Init+0xa8>)
 8007ce6:	400a      	ands	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	212a      	movs	r1, #42	; 0x2a
 8007cf6:	438a      	bics	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2101      	movs	r1, #1
 8007d06:	430a      	orrs	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f000 fddb 	bl	80088c8 <UART_CheckIdleState>
 8007d12:	0003      	movs	r3, r0
}
 8007d14:	0018      	movs	r0, r3
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	ffffb7ff 	.word	0xffffb7ff

08007d20 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e032      	b.n	8007d98 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2288      	movs	r2, #136	; 0x88
 8007d36:	2124      	movs	r1, #36	; 0x24
 8007d38:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2101      	movs	r1, #1
 8007d46:	438a      	bics	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2200      	movs	r2, #0
 8007d58:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7fc f9c9 	bl	80040fc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2290      	movs	r2, #144	; 0x90
 8007d6e:	2100      	movs	r1, #0
 8007d70:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2288      	movs	r2, #136	; 0x88
 8007d76:	2100      	movs	r1, #0
 8007d78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	228c      	movs	r2, #140	; 0x8c
 8007d7e:	2100      	movs	r1, #0
 8007d80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2284      	movs	r2, #132	; 0x84
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	0018      	movs	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b002      	add	sp, #8
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	1dbb      	adds	r3, r7, #6
 8007dae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2288      	movs	r2, #136	; 0x88
 8007db4:	589b      	ldr	r3, [r3, r2]
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d000      	beq.n	8007dbc <HAL_UART_Transmit+0x1c>
 8007dba:	e090      	b.n	8007ede <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_UART_Transmit+0x2a>
 8007dc2:	1dbb      	adds	r3, r7, #6
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e088      	b.n	8007ee0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	2380      	movs	r3, #128	; 0x80
 8007dd4:	015b      	lsls	r3, r3, #5
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d109      	bne.n	8007dee <HAL_UART_Transmit+0x4e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2201      	movs	r2, #1
 8007de6:	4013      	ands	r3, r2
 8007de8:	d001      	beq.n	8007dee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e078      	b.n	8007ee0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2290      	movs	r2, #144	; 0x90
 8007df2:	2100      	movs	r1, #0
 8007df4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2288      	movs	r2, #136	; 0x88
 8007dfa:	2121      	movs	r1, #33	; 0x21
 8007dfc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dfe:	f7fc fb85 	bl	800450c <HAL_GetTick>
 8007e02:	0003      	movs	r3, r0
 8007e04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1dba      	adds	r2, r7, #6
 8007e0a:	2154      	movs	r1, #84	; 0x54
 8007e0c:	8812      	ldrh	r2, [r2, #0]
 8007e0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	1dba      	adds	r2, r7, #6
 8007e14:	2156      	movs	r1, #86	; 0x56
 8007e16:	8812      	ldrh	r2, [r2, #0]
 8007e18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	015b      	lsls	r3, r3, #5
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d108      	bne.n	8007e38 <HAL_UART_Transmit+0x98>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e003      	b.n	8007e40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e40:	e030      	b.n	8007ea4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	0013      	movs	r3, r2
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	f000 fde4 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 8007e54:	1e03      	subs	r3, r0, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2288      	movs	r2, #136	; 0x88
 8007e5c:	2120      	movs	r1, #32
 8007e5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e03d      	b.n	8007ee0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	001a      	movs	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	05d2      	lsls	r2, r2, #23
 8007e76:	0dd2      	lsrs	r2, r2, #23
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e007      	b.n	8007e92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2256      	movs	r2, #86	; 0x56
 8007e96:	5a9b      	ldrh	r3, [r3, r2]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b299      	uxth	r1, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2256      	movs	r2, #86	; 0x56
 8007ea2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2256      	movs	r2, #86	; 0x56
 8007ea8:	5a9b      	ldrh	r3, [r3, r2]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1c8      	bne.n	8007e42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	0013      	movs	r3, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2140      	movs	r1, #64	; 0x40
 8007ebe:	f000 fdad 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 8007ec2:	1e03      	subs	r3, r0, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2288      	movs	r2, #136	; 0x88
 8007eca:	2120      	movs	r1, #32
 8007ecc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e006      	b.n	8007ee0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2288      	movs	r2, #136	; 0x88
 8007ed6:	2120      	movs	r1, #32
 8007ed8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e000      	b.n	8007ee0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
  }
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b008      	add	sp, #32
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	1dbb      	adds	r3, r7, #6
 8007ef6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	228c      	movs	r2, #140	; 0x8c
 8007efc:	589b      	ldr	r3, [r3, r2]
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d000      	beq.n	8007f04 <HAL_UART_Receive+0x1c>
 8007f02:	e0d0      	b.n	80080a6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_UART_Receive+0x2a>
 8007f0a:	1dbb      	adds	r3, r7, #6
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0c8      	b.n	80080a8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	2380      	movs	r3, #128	; 0x80
 8007f1c:	015b      	lsls	r3, r3, #5
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d109      	bne.n	8007f36 <HAL_UART_Receive+0x4e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	4013      	ands	r3, r2
 8007f30:	d001      	beq.n	8007f36 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e0b8      	b.n	80080a8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2290      	movs	r2, #144	; 0x90
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	228c      	movs	r2, #140	; 0x8c
 8007f42:	2122      	movs	r1, #34	; 0x22
 8007f44:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f4c:	f7fc fade 	bl	800450c <HAL_GetTick>
 8007f50:	0003      	movs	r3, r0
 8007f52:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1dba      	adds	r2, r7, #6
 8007f58:	215c      	movs	r1, #92	; 0x5c
 8007f5a:	8812      	ldrh	r2, [r2, #0]
 8007f5c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1dba      	adds	r2, r7, #6
 8007f62:	215e      	movs	r1, #94	; 0x5e
 8007f64:	8812      	ldrh	r2, [r2, #0]
 8007f66:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	015b      	lsls	r3, r3, #5
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d10d      	bne.n	8007f90 <HAL_UART_Receive+0xa8>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <HAL_UART_Receive+0x9e>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2260      	movs	r2, #96	; 0x60
 8007f80:	494b      	ldr	r1, [pc, #300]	; (80080b0 <HAL_UART_Receive+0x1c8>)
 8007f82:	5299      	strh	r1, [r3, r2]
 8007f84:	e02e      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2260      	movs	r2, #96	; 0x60
 8007f8a:	21ff      	movs	r1, #255	; 0xff
 8007f8c:	5299      	strh	r1, [r3, r2]
 8007f8e:	e029      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10d      	bne.n	8007fb4 <HAL_UART_Receive+0xcc>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <HAL_UART_Receive+0xc2>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2260      	movs	r2, #96	; 0x60
 8007fa4:	21ff      	movs	r1, #255	; 0xff
 8007fa6:	5299      	strh	r1, [r3, r2]
 8007fa8:	e01c      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2260      	movs	r2, #96	; 0x60
 8007fae:	217f      	movs	r1, #127	; 0x7f
 8007fb0:	5299      	strh	r1, [r3, r2]
 8007fb2:	e017      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	2380      	movs	r3, #128	; 0x80
 8007fba:	055b      	lsls	r3, r3, #21
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d10d      	bne.n	8007fdc <HAL_UART_Receive+0xf4>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <HAL_UART_Receive+0xea>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2260      	movs	r2, #96	; 0x60
 8007fcc:	217f      	movs	r1, #127	; 0x7f
 8007fce:	5299      	strh	r1, [r3, r2]
 8007fd0:	e008      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2260      	movs	r2, #96	; 0x60
 8007fd6:	213f      	movs	r1, #63	; 0x3f
 8007fd8:	5299      	strh	r1, [r3, r2]
 8007fda:	e003      	b.n	8007fe4 <HAL_UART_Receive+0xfc>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2260      	movs	r2, #96	; 0x60
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007fe4:	2312      	movs	r3, #18
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	2160      	movs	r1, #96	; 0x60
 8007fec:	5a52      	ldrh	r2, [r2, r1]
 8007fee:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	2380      	movs	r3, #128	; 0x80
 8007ff6:	015b      	lsls	r3, r3, #5
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d108      	bne.n	800800e <HAL_UART_Receive+0x126>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	e003      	b.n	8008016 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008016:	e03a      	b.n	800808e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	0013      	movs	r3, r2
 8008022:	2200      	movs	r2, #0
 8008024:	2120      	movs	r1, #32
 8008026:	f000 fcf9 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 800802a:	1e03      	subs	r3, r0, #0
 800802c:	d005      	beq.n	800803a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	228c      	movs	r2, #140	; 0x8c
 8008032:	2120      	movs	r1, #32
 8008034:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e036      	b.n	80080a8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10e      	bne.n	800805e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	b29b      	uxth	r3, r3
 8008048:	2212      	movs	r2, #18
 800804a:	18ba      	adds	r2, r7, r2
 800804c:	8812      	ldrh	r2, [r2, #0]
 800804e:	4013      	ands	r3, r2
 8008050:	b29a      	uxth	r2, r3
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	3302      	adds	r3, #2
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	e00e      	b.n	800807c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2212      	movs	r2, #18
 8008068:	18ba      	adds	r2, r7, r2
 800806a:	8812      	ldrh	r2, [r2, #0]
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	4013      	ands	r3, r2
 8008070:	b2da      	uxtb	r2, r3
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	3301      	adds	r3, #1
 800807a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	225e      	movs	r2, #94	; 0x5e
 8008080:	5a9b      	ldrh	r3, [r3, r2]
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b299      	uxth	r1, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	225e      	movs	r2, #94	; 0x5e
 800808c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	225e      	movs	r2, #94	; 0x5e
 8008092:	5a9b      	ldrh	r3, [r3, r2]
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1be      	bne.n	8008018 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	228c      	movs	r2, #140	; 0x8c
 800809e:	2120      	movs	r1, #32
 80080a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e000      	b.n	80080a8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
  }
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b008      	add	sp, #32
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	000001ff 	.word	0x000001ff

080080b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b4:	b5b0      	push	{r4, r5, r7, lr}
 80080b6:	b090      	sub	sp, #64	; 0x40
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080bc:	231a      	movs	r3, #26
 80080be:	2220      	movs	r2, #32
 80080c0:	189b      	adds	r3, r3, r2
 80080c2:	19db      	adds	r3, r3, r7
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	4313      	orrs	r3, r2
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4ac1      	ldr	r2, [pc, #772]	; (80083ec <UART_SetConfig+0x338>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	0019      	movs	r1, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f2:	430b      	orrs	r3, r1
 80080f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4abc      	ldr	r2, [pc, #752]	; (80083f0 <UART_SetConfig+0x33c>)
 80080fe:	4013      	ands	r3, r2
 8008100:	0018      	movs	r0, r3
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	68d9      	ldr	r1, [r3, #12]
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	0003      	movs	r3, r0
 800810c:	430b      	orrs	r3, r1
 800810e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4ab6      	ldr	r2, [pc, #728]	; (80083f4 <UART_SetConfig+0x340>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d009      	beq.n	8008134 <UART_SetConfig+0x80>
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4ab4      	ldr	r2, [pc, #720]	; (80083f8 <UART_SetConfig+0x344>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d004      	beq.n	8008134 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008130:	4313      	orrs	r3, r2
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	4ab0      	ldr	r2, [pc, #704]	; (80083fc <UART_SetConfig+0x348>)
 800813c:	4013      	ands	r3, r2
 800813e:	0019      	movs	r1, r3
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	430b      	orrs	r3, r1
 8008148:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	220f      	movs	r2, #15
 8008152:	4393      	bics	r3, r2
 8008154:	0018      	movs	r0, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	0003      	movs	r3, r0
 8008160:	430b      	orrs	r3, r1
 8008162:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4aa5      	ldr	r2, [pc, #660]	; (8008400 <UART_SetConfig+0x34c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d131      	bne.n	80081d2 <UART_SetConfig+0x11e>
 800816e:	4ba5      	ldr	r3, [pc, #660]	; (8008404 <UART_SetConfig+0x350>)
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	2203      	movs	r2, #3
 8008174:	4013      	ands	r3, r2
 8008176:	2b03      	cmp	r3, #3
 8008178:	d01d      	beq.n	80081b6 <UART_SetConfig+0x102>
 800817a:	d823      	bhi.n	80081c4 <UART_SetConfig+0x110>
 800817c:	2b02      	cmp	r3, #2
 800817e:	d00c      	beq.n	800819a <UART_SetConfig+0xe6>
 8008180:	d820      	bhi.n	80081c4 <UART_SetConfig+0x110>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <UART_SetConfig+0xd8>
 8008186:	2b01      	cmp	r3, #1
 8008188:	d00e      	beq.n	80081a8 <UART_SetConfig+0xf4>
 800818a:	e01b      	b.n	80081c4 <UART_SetConfig+0x110>
 800818c:	231b      	movs	r3, #27
 800818e:	2220      	movs	r2, #32
 8008190:	189b      	adds	r3, r3, r2
 8008192:	19db      	adds	r3, r3, r7
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	e154      	b.n	8008444 <UART_SetConfig+0x390>
 800819a:	231b      	movs	r3, #27
 800819c:	2220      	movs	r2, #32
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	19db      	adds	r3, r3, r7
 80081a2:	2202      	movs	r2, #2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e14d      	b.n	8008444 <UART_SetConfig+0x390>
 80081a8:	231b      	movs	r3, #27
 80081aa:	2220      	movs	r2, #32
 80081ac:	189b      	adds	r3, r3, r2
 80081ae:	19db      	adds	r3, r3, r7
 80081b0:	2204      	movs	r2, #4
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e146      	b.n	8008444 <UART_SetConfig+0x390>
 80081b6:	231b      	movs	r3, #27
 80081b8:	2220      	movs	r2, #32
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	19db      	adds	r3, r3, r7
 80081be:	2208      	movs	r2, #8
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e13f      	b.n	8008444 <UART_SetConfig+0x390>
 80081c4:	231b      	movs	r3, #27
 80081c6:	2220      	movs	r2, #32
 80081c8:	189b      	adds	r3, r3, r2
 80081ca:	19db      	adds	r3, r3, r7
 80081cc:	2210      	movs	r2, #16
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e138      	b.n	8008444 <UART_SetConfig+0x390>
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a8c      	ldr	r2, [pc, #560]	; (8008408 <UART_SetConfig+0x354>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d131      	bne.n	8008240 <UART_SetConfig+0x18c>
 80081dc:	4b89      	ldr	r3, [pc, #548]	; (8008404 <UART_SetConfig+0x350>)
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	220c      	movs	r2, #12
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	d01d      	beq.n	8008224 <UART_SetConfig+0x170>
 80081e8:	d823      	bhi.n	8008232 <UART_SetConfig+0x17e>
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d00c      	beq.n	8008208 <UART_SetConfig+0x154>
 80081ee:	d820      	bhi.n	8008232 <UART_SetConfig+0x17e>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <UART_SetConfig+0x146>
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d00e      	beq.n	8008216 <UART_SetConfig+0x162>
 80081f8:	e01b      	b.n	8008232 <UART_SetConfig+0x17e>
 80081fa:	231b      	movs	r3, #27
 80081fc:	2220      	movs	r2, #32
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	19db      	adds	r3, r3, r7
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e11d      	b.n	8008444 <UART_SetConfig+0x390>
 8008208:	231b      	movs	r3, #27
 800820a:	2220      	movs	r2, #32
 800820c:	189b      	adds	r3, r3, r2
 800820e:	19db      	adds	r3, r3, r7
 8008210:	2202      	movs	r2, #2
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	e116      	b.n	8008444 <UART_SetConfig+0x390>
 8008216:	231b      	movs	r3, #27
 8008218:	2220      	movs	r2, #32
 800821a:	189b      	adds	r3, r3, r2
 800821c:	19db      	adds	r3, r3, r7
 800821e:	2204      	movs	r2, #4
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e10f      	b.n	8008444 <UART_SetConfig+0x390>
 8008224:	231b      	movs	r3, #27
 8008226:	2220      	movs	r2, #32
 8008228:	189b      	adds	r3, r3, r2
 800822a:	19db      	adds	r3, r3, r7
 800822c:	2208      	movs	r2, #8
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	e108      	b.n	8008444 <UART_SetConfig+0x390>
 8008232:	231b      	movs	r3, #27
 8008234:	2220      	movs	r2, #32
 8008236:	189b      	adds	r3, r3, r2
 8008238:	19db      	adds	r3, r3, r7
 800823a:	2210      	movs	r2, #16
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e101      	b.n	8008444 <UART_SetConfig+0x390>
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a71      	ldr	r2, [pc, #452]	; (800840c <UART_SetConfig+0x358>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d131      	bne.n	80082ae <UART_SetConfig+0x1fa>
 800824a:	4b6e      	ldr	r3, [pc, #440]	; (8008404 <UART_SetConfig+0x350>)
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	2230      	movs	r2, #48	; 0x30
 8008250:	4013      	ands	r3, r2
 8008252:	2b30      	cmp	r3, #48	; 0x30
 8008254:	d01d      	beq.n	8008292 <UART_SetConfig+0x1de>
 8008256:	d823      	bhi.n	80082a0 <UART_SetConfig+0x1ec>
 8008258:	2b20      	cmp	r3, #32
 800825a:	d00c      	beq.n	8008276 <UART_SetConfig+0x1c2>
 800825c:	d820      	bhi.n	80082a0 <UART_SetConfig+0x1ec>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <UART_SetConfig+0x1b4>
 8008262:	2b10      	cmp	r3, #16
 8008264:	d00e      	beq.n	8008284 <UART_SetConfig+0x1d0>
 8008266:	e01b      	b.n	80082a0 <UART_SetConfig+0x1ec>
 8008268:	231b      	movs	r3, #27
 800826a:	2220      	movs	r2, #32
 800826c:	189b      	adds	r3, r3, r2
 800826e:	19db      	adds	r3, r3, r7
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e0e6      	b.n	8008444 <UART_SetConfig+0x390>
 8008276:	231b      	movs	r3, #27
 8008278:	2220      	movs	r2, #32
 800827a:	189b      	adds	r3, r3, r2
 800827c:	19db      	adds	r3, r3, r7
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e0df      	b.n	8008444 <UART_SetConfig+0x390>
 8008284:	231b      	movs	r3, #27
 8008286:	2220      	movs	r2, #32
 8008288:	189b      	adds	r3, r3, r2
 800828a:	19db      	adds	r3, r3, r7
 800828c:	2204      	movs	r2, #4
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e0d8      	b.n	8008444 <UART_SetConfig+0x390>
 8008292:	231b      	movs	r3, #27
 8008294:	2220      	movs	r2, #32
 8008296:	189b      	adds	r3, r3, r2
 8008298:	19db      	adds	r3, r3, r7
 800829a:	2208      	movs	r2, #8
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e0d1      	b.n	8008444 <UART_SetConfig+0x390>
 80082a0:	231b      	movs	r3, #27
 80082a2:	2220      	movs	r2, #32
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	19db      	adds	r3, r3, r7
 80082a8:	2210      	movs	r2, #16
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e0ca      	b.n	8008444 <UART_SetConfig+0x390>
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a57      	ldr	r2, [pc, #348]	; (8008410 <UART_SetConfig+0x35c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d106      	bne.n	80082c6 <UART_SetConfig+0x212>
 80082b8:	231b      	movs	r3, #27
 80082ba:	2220      	movs	r2, #32
 80082bc:	189b      	adds	r3, r3, r2
 80082be:	19db      	adds	r3, r3, r7
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e0be      	b.n	8008444 <UART_SetConfig+0x390>
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a52      	ldr	r2, [pc, #328]	; (8008414 <UART_SetConfig+0x360>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d106      	bne.n	80082de <UART_SetConfig+0x22a>
 80082d0:	231b      	movs	r3, #27
 80082d2:	2220      	movs	r2, #32
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	19db      	adds	r3, r3, r7
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e0b2      	b.n	8008444 <UART_SetConfig+0x390>
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a4d      	ldr	r2, [pc, #308]	; (8008418 <UART_SetConfig+0x364>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d106      	bne.n	80082f6 <UART_SetConfig+0x242>
 80082e8:	231b      	movs	r3, #27
 80082ea:	2220      	movs	r2, #32
 80082ec:	189b      	adds	r3, r3, r2
 80082ee:	19db      	adds	r3, r3, r7
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e0a6      	b.n	8008444 <UART_SetConfig+0x390>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3e      	ldr	r2, [pc, #248]	; (80083f4 <UART_SetConfig+0x340>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d13e      	bne.n	800837e <UART_SetConfig+0x2ca>
 8008300:	4b40      	ldr	r3, [pc, #256]	; (8008404 <UART_SetConfig+0x350>)
 8008302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008304:	23c0      	movs	r3, #192	; 0xc0
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	4013      	ands	r3, r2
 800830a:	22c0      	movs	r2, #192	; 0xc0
 800830c:	0112      	lsls	r2, r2, #4
 800830e:	4293      	cmp	r3, r2
 8008310:	d027      	beq.n	8008362 <UART_SetConfig+0x2ae>
 8008312:	22c0      	movs	r2, #192	; 0xc0
 8008314:	0112      	lsls	r2, r2, #4
 8008316:	4293      	cmp	r3, r2
 8008318:	d82a      	bhi.n	8008370 <UART_SetConfig+0x2bc>
 800831a:	2280      	movs	r2, #128	; 0x80
 800831c:	0112      	lsls	r2, r2, #4
 800831e:	4293      	cmp	r3, r2
 8008320:	d011      	beq.n	8008346 <UART_SetConfig+0x292>
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	0112      	lsls	r2, r2, #4
 8008326:	4293      	cmp	r3, r2
 8008328:	d822      	bhi.n	8008370 <UART_SetConfig+0x2bc>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <UART_SetConfig+0x284>
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	00d2      	lsls	r2, r2, #3
 8008332:	4293      	cmp	r3, r2
 8008334:	d00e      	beq.n	8008354 <UART_SetConfig+0x2a0>
 8008336:	e01b      	b.n	8008370 <UART_SetConfig+0x2bc>
 8008338:	231b      	movs	r3, #27
 800833a:	2220      	movs	r2, #32
 800833c:	189b      	adds	r3, r3, r2
 800833e:	19db      	adds	r3, r3, r7
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	e07e      	b.n	8008444 <UART_SetConfig+0x390>
 8008346:	231b      	movs	r3, #27
 8008348:	2220      	movs	r2, #32
 800834a:	189b      	adds	r3, r3, r2
 800834c:	19db      	adds	r3, r3, r7
 800834e:	2202      	movs	r2, #2
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	e077      	b.n	8008444 <UART_SetConfig+0x390>
 8008354:	231b      	movs	r3, #27
 8008356:	2220      	movs	r2, #32
 8008358:	189b      	adds	r3, r3, r2
 800835a:	19db      	adds	r3, r3, r7
 800835c:	2204      	movs	r2, #4
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e070      	b.n	8008444 <UART_SetConfig+0x390>
 8008362:	231b      	movs	r3, #27
 8008364:	2220      	movs	r2, #32
 8008366:	189b      	adds	r3, r3, r2
 8008368:	19db      	adds	r3, r3, r7
 800836a:	2208      	movs	r2, #8
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e069      	b.n	8008444 <UART_SetConfig+0x390>
 8008370:	231b      	movs	r3, #27
 8008372:	2220      	movs	r2, #32
 8008374:	189b      	adds	r3, r3, r2
 8008376:	19db      	adds	r3, r3, r7
 8008378:	2210      	movs	r2, #16
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e062      	b.n	8008444 <UART_SetConfig+0x390>
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <UART_SetConfig+0x344>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d157      	bne.n	8008438 <UART_SetConfig+0x384>
 8008388:	4b1e      	ldr	r3, [pc, #120]	; (8008404 <UART_SetConfig+0x350>)
 800838a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838c:	23c0      	movs	r3, #192	; 0xc0
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4013      	ands	r3, r2
 8008392:	22c0      	movs	r2, #192	; 0xc0
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	4293      	cmp	r3, r2
 8008398:	d040      	beq.n	800841c <UART_SetConfig+0x368>
 800839a:	22c0      	movs	r2, #192	; 0xc0
 800839c:	0092      	lsls	r2, r2, #2
 800839e:	4293      	cmp	r3, r2
 80083a0:	d843      	bhi.n	800842a <UART_SetConfig+0x376>
 80083a2:	2280      	movs	r2, #128	; 0x80
 80083a4:	0092      	lsls	r2, r2, #2
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d011      	beq.n	80083ce <UART_SetConfig+0x31a>
 80083aa:	2280      	movs	r2, #128	; 0x80
 80083ac:	0092      	lsls	r2, r2, #2
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d83b      	bhi.n	800842a <UART_SetConfig+0x376>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d004      	beq.n	80083c0 <UART_SetConfig+0x30c>
 80083b6:	2280      	movs	r2, #128	; 0x80
 80083b8:	0052      	lsls	r2, r2, #1
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00e      	beq.n	80083dc <UART_SetConfig+0x328>
 80083be:	e034      	b.n	800842a <UART_SetConfig+0x376>
 80083c0:	231b      	movs	r3, #27
 80083c2:	2220      	movs	r2, #32
 80083c4:	189b      	adds	r3, r3, r2
 80083c6:	19db      	adds	r3, r3, r7
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	e03a      	b.n	8008444 <UART_SetConfig+0x390>
 80083ce:	231b      	movs	r3, #27
 80083d0:	2220      	movs	r2, #32
 80083d2:	189b      	adds	r3, r3, r2
 80083d4:	19db      	adds	r3, r3, r7
 80083d6:	2202      	movs	r2, #2
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	e033      	b.n	8008444 <UART_SetConfig+0x390>
 80083dc:	231b      	movs	r3, #27
 80083de:	2220      	movs	r2, #32
 80083e0:	189b      	adds	r3, r3, r2
 80083e2:	19db      	adds	r3, r3, r7
 80083e4:	2204      	movs	r2, #4
 80083e6:	701a      	strb	r2, [r3, #0]
 80083e8:	e02c      	b.n	8008444 <UART_SetConfig+0x390>
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	cfff69f3 	.word	0xcfff69f3
 80083f0:	ffffcfff 	.word	0xffffcfff
 80083f4:	40008000 	.word	0x40008000
 80083f8:	40008400 	.word	0x40008400
 80083fc:	11fff4ff 	.word	0x11fff4ff
 8008400:	40013800 	.word	0x40013800
 8008404:	40021000 	.word	0x40021000
 8008408:	40004400 	.word	0x40004400
 800840c:	40004800 	.word	0x40004800
 8008410:	40004c00 	.word	0x40004c00
 8008414:	40005000 	.word	0x40005000
 8008418:	40013c00 	.word	0x40013c00
 800841c:	231b      	movs	r3, #27
 800841e:	2220      	movs	r2, #32
 8008420:	189b      	adds	r3, r3, r2
 8008422:	19db      	adds	r3, r3, r7
 8008424:	2208      	movs	r2, #8
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e00c      	b.n	8008444 <UART_SetConfig+0x390>
 800842a:	231b      	movs	r3, #27
 800842c:	2220      	movs	r2, #32
 800842e:	189b      	adds	r3, r3, r2
 8008430:	19db      	adds	r3, r3, r7
 8008432:	2210      	movs	r2, #16
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	e005      	b.n	8008444 <UART_SetConfig+0x390>
 8008438:	231b      	movs	r3, #27
 800843a:	2220      	movs	r2, #32
 800843c:	189b      	adds	r3, r3, r2
 800843e:	19db      	adds	r3, r3, r7
 8008440:	2210      	movs	r2, #16
 8008442:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4ac1      	ldr	r2, [pc, #772]	; (8008750 <UART_SetConfig+0x69c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d005      	beq.n	800845a <UART_SetConfig+0x3a6>
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4ac0      	ldr	r2, [pc, #768]	; (8008754 <UART_SetConfig+0x6a0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d000      	beq.n	800845a <UART_SetConfig+0x3a6>
 8008458:	e093      	b.n	8008582 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800845a:	231b      	movs	r3, #27
 800845c:	2220      	movs	r2, #32
 800845e:	189b      	adds	r3, r3, r2
 8008460:	19db      	adds	r3, r3, r7
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d015      	beq.n	8008494 <UART_SetConfig+0x3e0>
 8008468:	dc18      	bgt.n	800849c <UART_SetConfig+0x3e8>
 800846a:	2b04      	cmp	r3, #4
 800846c:	d00d      	beq.n	800848a <UART_SetConfig+0x3d6>
 800846e:	dc15      	bgt.n	800849c <UART_SetConfig+0x3e8>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <UART_SetConfig+0x3c6>
 8008474:	2b02      	cmp	r3, #2
 8008476:	d005      	beq.n	8008484 <UART_SetConfig+0x3d0>
 8008478:	e010      	b.n	800849c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800847a:	f7fd f9ed 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800847e:	0003      	movs	r3, r0
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008482:	e014      	b.n	80084ae <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008484:	4bb4      	ldr	r3, [pc, #720]	; (8008758 <UART_SetConfig+0x6a4>)
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008488:	e011      	b.n	80084ae <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800848a:	f7fd f959 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800848e:	0003      	movs	r3, r0
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008492:	e00c      	b.n	80084ae <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008494:	2380      	movs	r3, #128	; 0x80
 8008496:	021b      	lsls	r3, r3, #8
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800849a:	e008      	b.n	80084ae <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80084a0:	231a      	movs	r3, #26
 80084a2:	2220      	movs	r2, #32
 80084a4:	189b      	adds	r3, r3, r2
 80084a6:	19db      	adds	r3, r3, r7
 80084a8:	2201      	movs	r2, #1
 80084aa:	701a      	strb	r2, [r3, #0]
        break;
 80084ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d100      	bne.n	80084b6 <UART_SetConfig+0x402>
 80084b4:	e135      	b.n	8008722 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ba:	4ba8      	ldr	r3, [pc, #672]	; (800875c <UART_SetConfig+0x6a8>)
 80084bc:	0052      	lsls	r2, r2, #1
 80084be:	5ad3      	ldrh	r3, [r2, r3]
 80084c0:	0019      	movs	r1, r3
 80084c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80084c4:	f7f7 fe3a 	bl	800013c <__udivsi3>
 80084c8:	0003      	movs	r3, r0
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	0013      	movs	r3, r2
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	189b      	adds	r3, r3, r2
 80084d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d8:	429a      	cmp	r2, r3
 80084da:	d305      	bcc.n	80084e8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d906      	bls.n	80084f6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80084e8:	231a      	movs	r3, #26
 80084ea:	2220      	movs	r2, #32
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	19db      	adds	r3, r3, r7
 80084f0:	2201      	movs	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e044      	b.n	8008580 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	2300      	movs	r3, #0
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008502:	4b96      	ldr	r3, [pc, #600]	; (800875c <UART_SetConfig+0x6a8>)
 8008504:	0052      	lsls	r2, r2, #1
 8008506:	5ad3      	ldrh	r3, [r2, r3]
 8008508:	613b      	str	r3, [r7, #16]
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	69b8      	ldr	r0, [r7, #24]
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	f7f7 ffc5 	bl	80004a4 <__aeabi_uldivmod>
 800851a:	0002      	movs	r2, r0
 800851c:	000b      	movs	r3, r1
 800851e:	0e11      	lsrs	r1, r2, #24
 8008520:	021d      	lsls	r5, r3, #8
 8008522:	430d      	orrs	r5, r1
 8008524:	0214      	lsls	r4, r2, #8
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	68b8      	ldr	r0, [r7, #8]
 8008534:	68f9      	ldr	r1, [r7, #12]
 8008536:	1900      	adds	r0, r0, r4
 8008538:	4169      	adcs	r1, r5
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f7f7 ffac 	bl	80004a4 <__aeabi_uldivmod>
 800854c:	0002      	movs	r2, r0
 800854e:	000b      	movs	r3, r1
 8008550:	0013      	movs	r3, r2
 8008552:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008556:	23c0      	movs	r3, #192	; 0xc0
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	429a      	cmp	r2, r3
 800855c:	d309      	bcc.n	8008572 <UART_SetConfig+0x4be>
 800855e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	035b      	lsls	r3, r3, #13
 8008564:	429a      	cmp	r2, r3
 8008566:	d204      	bcs.n	8008572 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e006      	b.n	8008580 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008572:	231a      	movs	r3, #26
 8008574:	2220      	movs	r2, #32
 8008576:	189b      	adds	r3, r3, r2
 8008578:	19db      	adds	r3, r3, r7
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800857e:	e0d0      	b.n	8008722 <UART_SetConfig+0x66e>
 8008580:	e0cf      	b.n	8008722 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	429a      	cmp	r2, r3
 800858c:	d000      	beq.n	8008590 <UART_SetConfig+0x4dc>
 800858e:	e070      	b.n	8008672 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008590:	231b      	movs	r3, #27
 8008592:	2220      	movs	r2, #32
 8008594:	189b      	adds	r3, r3, r2
 8008596:	19db      	adds	r3, r3, r7
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b08      	cmp	r3, #8
 800859c:	d015      	beq.n	80085ca <UART_SetConfig+0x516>
 800859e:	dc18      	bgt.n	80085d2 <UART_SetConfig+0x51e>
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d00d      	beq.n	80085c0 <UART_SetConfig+0x50c>
 80085a4:	dc15      	bgt.n	80085d2 <UART_SetConfig+0x51e>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <UART_SetConfig+0x4fc>
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d005      	beq.n	80085ba <UART_SetConfig+0x506>
 80085ae:	e010      	b.n	80085d2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fd f952 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 80085b4:	0003      	movs	r3, r0
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085b8:	e014      	b.n	80085e4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085ba:	4b67      	ldr	r3, [pc, #412]	; (8008758 <UART_SetConfig+0x6a4>)
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085be:	e011      	b.n	80085e4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c0:	f7fd f8be 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80085c4:	0003      	movs	r3, r0
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085c8:	e00c      	b.n	80085e4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	2380      	movs	r3, #128	; 0x80
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085d0:	e008      	b.n	80085e4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80085d6:	231a      	movs	r3, #26
 80085d8:	2220      	movs	r2, #32
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	19db      	adds	r3, r3, r7
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
        break;
 80085e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d100      	bne.n	80085ec <UART_SetConfig+0x538>
 80085ea:	e09a      	b.n	8008722 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f0:	4b5a      	ldr	r3, [pc, #360]	; (800875c <UART_SetConfig+0x6a8>)
 80085f2:	0052      	lsls	r2, r2, #1
 80085f4:	5ad3      	ldrh	r3, [r2, r3]
 80085f6:	0019      	movs	r1, r3
 80085f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085fa:	f7f7 fd9f 	bl	800013c <__udivsi3>
 80085fe:	0003      	movs	r3, r0
 8008600:	005a      	lsls	r2, r3, #1
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	18d2      	adds	r2, r2, r3
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	0019      	movs	r1, r3
 8008610:	0010      	movs	r0, r2
 8008612:	f7f7 fd93 	bl	800013c <__udivsi3>
 8008616:	0003      	movs	r3, r0
 8008618:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d921      	bls.n	8008664 <UART_SetConfig+0x5b0>
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	025b      	lsls	r3, r3, #9
 8008626:	429a      	cmp	r2, r3
 8008628:	d21c      	bcs.n	8008664 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	b29a      	uxth	r2, r3
 800862e:	200e      	movs	r0, #14
 8008630:	2420      	movs	r4, #32
 8008632:	1903      	adds	r3, r0, r4
 8008634:	19db      	adds	r3, r3, r7
 8008636:	210f      	movs	r1, #15
 8008638:	438a      	bics	r2, r1
 800863a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	2207      	movs	r2, #7
 8008644:	4013      	ands	r3, r2
 8008646:	b299      	uxth	r1, r3
 8008648:	1903      	adds	r3, r0, r4
 800864a:	19db      	adds	r3, r3, r7
 800864c:	1902      	adds	r2, r0, r4
 800864e:	19d2      	adds	r2, r2, r7
 8008650:	8812      	ldrh	r2, [r2, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	1902      	adds	r2, r0, r4
 800865c:	19d2      	adds	r2, r2, r7
 800865e:	8812      	ldrh	r2, [r2, #0]
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	e05e      	b.n	8008722 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008664:	231a      	movs	r3, #26
 8008666:	2220      	movs	r2, #32
 8008668:	189b      	adds	r3, r3, r2
 800866a:	19db      	adds	r3, r3, r7
 800866c:	2201      	movs	r2, #1
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e057      	b.n	8008722 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008672:	231b      	movs	r3, #27
 8008674:	2220      	movs	r2, #32
 8008676:	189b      	adds	r3, r3, r2
 8008678:	19db      	adds	r3, r3, r7
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d015      	beq.n	80086ac <UART_SetConfig+0x5f8>
 8008680:	dc18      	bgt.n	80086b4 <UART_SetConfig+0x600>
 8008682:	2b04      	cmp	r3, #4
 8008684:	d00d      	beq.n	80086a2 <UART_SetConfig+0x5ee>
 8008686:	dc15      	bgt.n	80086b4 <UART_SetConfig+0x600>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <UART_SetConfig+0x5de>
 800868c:	2b02      	cmp	r3, #2
 800868e:	d005      	beq.n	800869c <UART_SetConfig+0x5e8>
 8008690:	e010      	b.n	80086b4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008692:	f7fd f8e1 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8008696:	0003      	movs	r3, r0
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800869a:	e014      	b.n	80086c6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800869c:	4b2e      	ldr	r3, [pc, #184]	; (8008758 <UART_SetConfig+0x6a4>)
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a0:	e011      	b.n	80086c6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086a2:	f7fd f84d 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80086a6:	0003      	movs	r3, r0
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086aa:	e00c      	b.n	80086c6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086b2:	e008      	b.n	80086c6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80086b8:	231a      	movs	r3, #26
 80086ba:	2220      	movs	r2, #32
 80086bc:	189b      	adds	r3, r3, r2
 80086be:	19db      	adds	r3, r3, r7
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
        break;
 80086c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80086c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d02a      	beq.n	8008722 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086d0:	4b22      	ldr	r3, [pc, #136]	; (800875c <UART_SetConfig+0x6a8>)
 80086d2:	0052      	lsls	r2, r2, #1
 80086d4:	5ad3      	ldrh	r3, [r2, r3]
 80086d6:	0019      	movs	r1, r3
 80086d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086da:	f7f7 fd2f 	bl	800013c <__udivsi3>
 80086de:	0003      	movs	r3, r0
 80086e0:	001a      	movs	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	18d2      	adds	r2, r2, r3
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	0019      	movs	r1, r3
 80086f0:	0010      	movs	r0, r2
 80086f2:	f7f7 fd23 	bl	800013c <__udivsi3>
 80086f6:	0003      	movs	r3, r0
 80086f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d90a      	bls.n	8008716 <UART_SetConfig+0x662>
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	2380      	movs	r3, #128	; 0x80
 8008704:	025b      	lsls	r3, r3, #9
 8008706:	429a      	cmp	r2, r3
 8008708:	d205      	bcs.n	8008716 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	b29a      	uxth	r2, r3
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60da      	str	r2, [r3, #12]
 8008714:	e005      	b.n	8008722 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008716:	231a      	movs	r3, #26
 8008718:	2220      	movs	r2, #32
 800871a:	189b      	adds	r3, r3, r2
 800871c:	19db      	adds	r3, r3, r7
 800871e:	2201      	movs	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	226a      	movs	r2, #106	; 0x6a
 8008726:	2101      	movs	r1, #1
 8008728:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	2268      	movs	r2, #104	; 0x68
 800872e:	2101      	movs	r1, #1
 8008730:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2200      	movs	r2, #0
 8008736:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	2200      	movs	r2, #0
 800873c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800873e:	231a      	movs	r3, #26
 8008740:	2220      	movs	r2, #32
 8008742:	189b      	adds	r3, r3, r2
 8008744:	19db      	adds	r3, r3, r7
 8008746:	781b      	ldrb	r3, [r3, #0]
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b010      	add	sp, #64	; 0x40
 800874e:	bdb0      	pop	{r4, r5, r7, pc}
 8008750:	40008000 	.word	0x40008000
 8008754:	40008400 	.word	0x40008400
 8008758:	00f42400 	.word	0x00f42400
 800875c:	08015ad4 	.word	0x08015ad4

08008760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	2208      	movs	r2, #8
 800876e:	4013      	ands	r3, r2
 8008770:	d00b      	beq.n	800878a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	4a4a      	ldr	r2, [pc, #296]	; (80088a4 <UART_AdvFeatureConfig+0x144>)
 800877a:	4013      	ands	r3, r2
 800877c:	0019      	movs	r1, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	2201      	movs	r2, #1
 8008790:	4013      	ands	r3, r2
 8008792:	d00b      	beq.n	80087ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4a43      	ldr	r2, [pc, #268]	; (80088a8 <UART_AdvFeatureConfig+0x148>)
 800879c:	4013      	ands	r3, r2
 800879e:	0019      	movs	r1, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	2202      	movs	r2, #2
 80087b2:	4013      	ands	r3, r2
 80087b4:	d00b      	beq.n	80087ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	4a3b      	ldr	r2, [pc, #236]	; (80088ac <UART_AdvFeatureConfig+0x14c>)
 80087be:	4013      	ands	r3, r2
 80087c0:	0019      	movs	r1, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	2204      	movs	r2, #4
 80087d4:	4013      	ands	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4a34      	ldr	r2, [pc, #208]	; (80088b0 <UART_AdvFeatureConfig+0x150>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	0019      	movs	r1, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	2210      	movs	r2, #16
 80087f6:	4013      	ands	r3, r2
 80087f8:	d00b      	beq.n	8008812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4a2c      	ldr	r2, [pc, #176]	; (80088b4 <UART_AdvFeatureConfig+0x154>)
 8008802:	4013      	ands	r3, r2
 8008804:	0019      	movs	r1, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	2220      	movs	r2, #32
 8008818:	4013      	ands	r3, r2
 800881a:	d00b      	beq.n	8008834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <UART_AdvFeatureConfig+0x158>)
 8008824:	4013      	ands	r3, r2
 8008826:	0019      	movs	r1, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	2240      	movs	r2, #64	; 0x40
 800883a:	4013      	ands	r3, r2
 800883c:	d01d      	beq.n	800887a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <UART_AdvFeatureConfig+0x15c>)
 8008846:	4013      	ands	r3, r2
 8008848:	0019      	movs	r1, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800885a:	2380      	movs	r3, #128	; 0x80
 800885c:	035b      	lsls	r3, r3, #13
 800885e:	429a      	cmp	r2, r3
 8008860:	d10b      	bne.n	800887a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <UART_AdvFeatureConfig+0x160>)
 800886a:	4013      	ands	r3, r2
 800886c:	0019      	movs	r1, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	2280      	movs	r2, #128	; 0x80
 8008880:	4013      	ands	r3, r2
 8008882:	d00b      	beq.n	800889c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <UART_AdvFeatureConfig+0x164>)
 800888c:	4013      	ands	r3, r2
 800888e:	0019      	movs	r1, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	46c0      	nop			; (mov r8, r8)
 800889e:	46bd      	mov	sp, r7
 80088a0:	b002      	add	sp, #8
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	ffff7fff 	.word	0xffff7fff
 80088a8:	fffdffff 	.word	0xfffdffff
 80088ac:	fffeffff 	.word	0xfffeffff
 80088b0:	fffbffff 	.word	0xfffbffff
 80088b4:	ffffefff 	.word	0xffffefff
 80088b8:	ffffdfff 	.word	0xffffdfff
 80088bc:	ffefffff 	.word	0xffefffff
 80088c0:	ff9fffff 	.word	0xff9fffff
 80088c4:	fff7ffff 	.word	0xfff7ffff

080088c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b092      	sub	sp, #72	; 0x48
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2290      	movs	r2, #144	; 0x90
 80088d4:	2100      	movs	r1, #0
 80088d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d8:	f7fb fe18 	bl	800450c <HAL_GetTick>
 80088dc:	0003      	movs	r3, r0
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2208      	movs	r2, #8
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d12d      	bne.n	800894a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f0:	2280      	movs	r2, #128	; 0x80
 80088f2:	0391      	lsls	r1, r2, #14
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	4a47      	ldr	r2, [pc, #284]	; (8008a14 <UART_CheckIdleState+0x14c>)
 80088f8:	9200      	str	r2, [sp, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f000 f88e 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 8008900:	1e03      	subs	r3, r0, #0
 8008902:	d022      	beq.n	800894a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008904:	f3ef 8310 	mrs	r3, PRIMASK
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38
 800890e:	2301      	movs	r3, #1
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	f383 8810 	msr	PRIMASK, r3
}
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2180      	movs	r1, #128	; 0x80
 8008926:	438a      	bics	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	f383 8810 	msr	PRIMASK, r3
}
 8008934:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2288      	movs	r2, #136	; 0x88
 800893a:	2120      	movs	r1, #32
 800893c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2284      	movs	r2, #132	; 0x84
 8008942:	2100      	movs	r1, #0
 8008944:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e060      	b.n	8008a0c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2204      	movs	r2, #4
 8008952:	4013      	ands	r3, r2
 8008954:	2b04      	cmp	r3, #4
 8008956:	d146      	bne.n	80089e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895a:	2280      	movs	r2, #128	; 0x80
 800895c:	03d1      	lsls	r1, r2, #15
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4a2c      	ldr	r2, [pc, #176]	; (8008a14 <UART_CheckIdleState+0x14c>)
 8008962:	9200      	str	r2, [sp, #0]
 8008964:	2200      	movs	r2, #0
 8008966:	f000 f859 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 800896a:	1e03      	subs	r3, r0, #0
 800896c:	d03b      	beq.n	80089e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896e:	f3ef 8310 	mrs	r3, PRIMASK
 8008972:	60fb      	str	r3, [r7, #12]
  return(result);
 8008974:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
 8008978:	2301      	movs	r3, #1
 800897a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f383 8810 	msr	PRIMASK, r3
}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4922      	ldr	r1, [pc, #136]	; (8008a18 <UART_CheckIdleState+0x150>)
 8008990:	400a      	ands	r2, r1
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f383 8810 	msr	PRIMASK, r3
}
 800899e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a0:	f3ef 8310 	mrs	r3, PRIMASK
 80089a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80089a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30
 80089aa:	2301      	movs	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	f383 8810 	msr	PRIMASK, r3
}
 80089b4:	46c0      	nop			; (mov r8, r8)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2101      	movs	r1, #1
 80089c2:	438a      	bics	r2, r1
 80089c4:	609a      	str	r2, [r3, #8]
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	f383 8810 	msr	PRIMASK, r3
}
 80089d0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	228c      	movs	r2, #140	; 0x8c
 80089d6:	2120      	movs	r1, #32
 80089d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2284      	movs	r2, #132	; 0x84
 80089de:	2100      	movs	r1, #0
 80089e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e012      	b.n	8008a0c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2288      	movs	r2, #136	; 0x88
 80089ea:	2120      	movs	r1, #32
 80089ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	228c      	movs	r2, #140	; 0x8c
 80089f2:	2120      	movs	r1, #32
 80089f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2284      	movs	r2, #132	; 0x84
 8008a06:	2100      	movs	r1, #0
 8008a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	b010      	add	sp, #64	; 0x40
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	01ffffff 	.word	0x01ffffff
 8008a18:	fffffedf 	.word	0xfffffedf

08008a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	1dfb      	adds	r3, r7, #7
 8008a2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a2c:	e051      	b.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	3301      	adds	r3, #1
 8008a32:	d04e      	beq.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a34:	f7fb fd6a 	bl	800450c <HAL_GetTick>
 8008a38:	0002      	movs	r2, r0
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e051      	b.n	8008af2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2204      	movs	r2, #4
 8008a56:	4013      	ands	r3, r2
 8008a58:	d03b      	beq.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b80      	cmp	r3, #128	; 0x80
 8008a5e:	d038      	beq.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d035      	beq.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d111      	bne.n	8008a98 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f000 f83c 	bl	8008afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2290      	movs	r2, #144	; 0x90
 8008a88:	2108      	movs	r1, #8
 8008a8a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2284      	movs	r2, #132	; 0x84
 8008a90:	2100      	movs	r1, #0
 8008a92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e02c      	b.n	8008af2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69da      	ldr	r2, [r3, #28]
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	2380      	movs	r3, #128	; 0x80
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d112      	bne.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2280      	movs	r2, #128	; 0x80
 8008ab2:	0112      	lsls	r2, r2, #4
 8008ab4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	0018      	movs	r0, r3
 8008aba:	f000 f81f 	bl	8008afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2290      	movs	r2, #144	; 0x90
 8008ac2:	2120      	movs	r1, #32
 8008ac4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2284      	movs	r2, #132	; 0x84
 8008aca:	2100      	movs	r1, #0
 8008acc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e00f      	b.n	8008af2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	4013      	ands	r3, r2
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	425a      	negs	r2, r3
 8008ae2:	4153      	adcs	r3, r2
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	001a      	movs	r2, r3
 8008ae8:	1dfb      	adds	r3, r7, #7
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d09e      	beq.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b004      	add	sp, #16
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08e      	sub	sp, #56	; 0x38
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b04:	f3ef 8310 	mrs	r3, PRIMASK
 8008b08:	617b      	str	r3, [r7, #20]
  return(result);
 8008b0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0e:	2301      	movs	r3, #1
 8008b10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	f383 8810 	msr	PRIMASK, r3
}
 8008b18:	46c0      	nop			; (mov r8, r8)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4926      	ldr	r1, [pc, #152]	; (8008bc0 <UART_EndRxTransfer+0xc4>)
 8008b26:	400a      	ands	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f383 8810 	msr	PRIMASK, r3
}
 8008b34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b36:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3a:	623b      	str	r3, [r7, #32]
  return(result);
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b40:	2301      	movs	r3, #1
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	f383 8810 	msr	PRIMASK, r3
}
 8008b4a:	46c0      	nop			; (mov r8, r8)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	491b      	ldr	r1, [pc, #108]	; (8008bc4 <UART_EndRxTransfer+0xc8>)
 8008b58:	400a      	ands	r2, r1
 8008b5a:	609a      	str	r2, [r3, #8]
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	f383 8810 	msr	PRIMASK, r3
}
 8008b66:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d118      	bne.n	8008ba2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b70:	f3ef 8310 	mrs	r3, PRIMASK
 8008b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f383 8810 	msr	PRIMASK, r3
}
 8008b84:	46c0      	nop			; (mov r8, r8)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2110      	movs	r1, #16
 8008b92:	438a      	bics	r2, r1
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f383 8810 	msr	PRIMASK, r3
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	228c      	movs	r2, #140	; 0x8c
 8008ba6:	2120      	movs	r1, #32
 8008ba8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b00e      	add	sp, #56	; 0x38
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	fffffedf 	.word	0xfffffedf
 8008bc4:	effffffe 	.word	0xeffffffe

08008bc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2284      	movs	r2, #132	; 0x84
 8008bd4:	5c9b      	ldrb	r3, [r3, r2]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_UARTEx_DisableFifoMode+0x16>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e027      	b.n	8008c2e <HAL_UARTEx_DisableFifoMode+0x66>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2284      	movs	r2, #132	; 0x84
 8008be2:	2101      	movs	r1, #1
 8008be4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2288      	movs	r2, #136	; 0x88
 8008bea:	2124      	movs	r1, #36	; 0x24
 8008bec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2101      	movs	r1, #1
 8008c02:	438a      	bics	r2, r1
 8008c04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4a0b      	ldr	r2, [pc, #44]	; (8008c38 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2288      	movs	r2, #136	; 0x88
 8008c20:	2120      	movs	r1, #32
 8008c22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2284      	movs	r2, #132	; 0x84
 8008c28:	2100      	movs	r1, #0
 8008c2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b004      	add	sp, #16
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	dfffffff 	.word	0xdfffffff

08008c3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2284      	movs	r2, #132	; 0x84
 8008c4a:	5c9b      	ldrb	r3, [r3, r2]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e02e      	b.n	8008cb2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2284      	movs	r2, #132	; 0x84
 8008c58:	2101      	movs	r1, #1
 8008c5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2288      	movs	r2, #136	; 0x88
 8008c60:	2124      	movs	r1, #36	; 0x24
 8008c62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2101      	movs	r1, #1
 8008c78:	438a      	bics	r2, r1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	08d9      	lsrs	r1, r3, #3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0018      	movs	r0, r3
 8008c94:	f000 f854 	bl	8008d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2288      	movs	r2, #136	; 0x88
 8008ca4:	2120      	movs	r1, #32
 8008ca6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2284      	movs	r2, #132	; 0x84
 8008cac:	2100      	movs	r1, #0
 8008cae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	b004      	add	sp, #16
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2284      	movs	r2, #132	; 0x84
 8008cca:	5c9b      	ldrb	r3, [r3, r2]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e02f      	b.n	8008d34 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2284      	movs	r2, #132	; 0x84
 8008cd8:	2101      	movs	r1, #1
 8008cda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2288      	movs	r2, #136	; 0x88
 8008ce0:	2124      	movs	r1, #36	; 0x24
 8008ce2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	438a      	bics	r2, r1
 8008cfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	4a0e      	ldr	r2, [pc, #56]	; (8008d3c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	0019      	movs	r1, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	0018      	movs	r0, r3
 8008d16:	f000 f813 	bl	8008d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2288      	movs	r2, #136	; 0x88
 8008d26:	2120      	movs	r1, #32
 8008d28:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2284      	movs	r2, #132	; 0x84
 8008d2e:	2100      	movs	r1, #0
 8008d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	0018      	movs	r0, r3
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b004      	add	sp, #16
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	f1ffffff 	.word	0xf1ffffff

08008d40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d108      	bne.n	8008d62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	226a      	movs	r2, #106	; 0x6a
 8008d54:	2101      	movs	r1, #1
 8008d56:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2268      	movs	r2, #104	; 0x68
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d60:	e043      	b.n	8008dea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d62:	260f      	movs	r6, #15
 8008d64:	19bb      	adds	r3, r7, r6
 8008d66:	2208      	movs	r2, #8
 8008d68:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d6a:	200e      	movs	r0, #14
 8008d6c:	183b      	adds	r3, r7, r0
 8008d6e:	2208      	movs	r2, #8
 8008d70:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	0e5b      	lsrs	r3, r3, #25
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	240d      	movs	r4, #13
 8008d7e:	193b      	adds	r3, r7, r4
 8008d80:	2107      	movs	r1, #7
 8008d82:	400a      	ands	r2, r1
 8008d84:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	0f5b      	lsrs	r3, r3, #29
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	250c      	movs	r5, #12
 8008d92:	197b      	adds	r3, r7, r5
 8008d94:	2107      	movs	r1, #7
 8008d96:	400a      	ands	r2, r1
 8008d98:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d9a:	183b      	adds	r3, r7, r0
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	197a      	adds	r2, r7, r5
 8008da0:	7812      	ldrb	r2, [r2, #0]
 8008da2:	4914      	ldr	r1, [pc, #80]	; (8008df4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008da4:	5c8a      	ldrb	r2, [r1, r2]
 8008da6:	435a      	muls	r2, r3
 8008da8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008daa:	197b      	adds	r3, r7, r5
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008db0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008db2:	0019      	movs	r1, r3
 8008db4:	f7f7 fa4c 	bl	8000250 <__divsi3>
 8008db8:	0003      	movs	r3, r0
 8008dba:	b299      	uxth	r1, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	226a      	movs	r2, #106	; 0x6a
 8008dc0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc2:	19bb      	adds	r3, r7, r6
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	193a      	adds	r2, r7, r4
 8008dc8:	7812      	ldrb	r2, [r2, #0]
 8008dca:	490a      	ldr	r1, [pc, #40]	; (8008df4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008dcc:	5c8a      	ldrb	r2, [r1, r2]
 8008dce:	435a      	muls	r2, r3
 8008dd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dd2:	193b      	adds	r3, r7, r4
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008dd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dda:	0019      	movs	r1, r3
 8008ddc:	f7f7 fa38 	bl	8000250 <__divsi3>
 8008de0:	0003      	movs	r3, r0
 8008de2:	b299      	uxth	r1, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2268      	movs	r2, #104	; 0x68
 8008de8:	5299      	strh	r1, [r3, r2]
}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b005      	add	sp, #20
 8008df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	08015aec 	.word	0x08015aec
 8008df8:	08015af4 	.word	0x08015af4

08008dfc <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8008dfc:	b5b0      	push	{r4, r5, r7, lr}
 8008dfe:	b0e4      	sub	sp, #400	; 0x190
 8008e00:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008e02:	24c8      	movs	r4, #200	; 0xc8
 8008e04:	193b      	adds	r3, r7, r4
 8008e06:	0018      	movs	r0, r3
 8008e08:	23c6      	movs	r3, #198	; 0xc6
 8008e0a:	001a      	movs	r2, r3
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f004 faf9 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8008e12:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <astronode_send_cfg_sr+0x64>)
 8008e14:	25c8      	movs	r5, #200	; 0xc8
 8008e16:	006d      	lsls	r5, r5, #1
 8008e18:	195b      	adds	r3, r3, r5
 8008e1a:	19db      	adds	r3, r3, r7
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	23c6      	movs	r3, #198	; 0xc6
 8008e20:	001a      	movs	r2, r3
 8008e22:	2100      	movs	r1, #0
 8008e24:	f004 faee 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008e28:	193b      	adds	r3, r7, r4
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008e2e:	003a      	movs	r2, r7
 8008e30:	193b      	adds	r3, r7, r4
 8008e32:	0011      	movs	r1, r2
 8008e34:	0018      	movs	r0, r3
 8008e36:	f001 fa87 	bl	800a348 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <astronode_send_cfg_sr+0x64>)
 8008e3c:	195b      	adds	r3, r3, r5
 8008e3e:	19db      	adds	r3, r3, r7
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b90      	cmp	r3, #144	; 0x90
 8008e44:	d104      	bne.n	8008e50 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <astronode_send_cfg_sr+0x68>)
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f7fa f94d 	bl	80030e8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008e4e:	e003      	b.n	8008e58 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <astronode_send_cfg_sr+0x6c>)
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7fa f948 	bl	80030e8 <send_debug_logs>
}
 8008e58:	46c0      	nop			; (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b064      	add	sp, #400	; 0x190
 8008e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e60:	fffffe70 	.word	0xfffffe70
 8008e64:	08014510 	.word	0x08014510
 8008e68:	08014544 	.word	0x08014544

08008e6c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6e:	b0e7      	sub	sp, #412	; 0x19c
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	0005      	movs	r5, r0
 8008e74:	000c      	movs	r4, r1
 8008e76:	0010      	movs	r0, r2
 8008e78:	0019      	movs	r1, r3
 8008e7a:	4b4b      	ldr	r3, [pc, #300]	; (8008fa8 <astronode_send_cfg_wr+0x13c>)
 8008e7c:	26cc      	movs	r6, #204	; 0xcc
 8008e7e:	0076      	lsls	r6, r6, #1
 8008e80:	199b      	adds	r3, r3, r6
 8008e82:	19db      	adds	r3, r3, r7
 8008e84:	1c2a      	adds	r2, r5, #0
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	4b48      	ldr	r3, [pc, #288]	; (8008fac <astronode_send_cfg_wr+0x140>)
 8008e8a:	0035      	movs	r5, r6
 8008e8c:	195b      	adds	r3, r3, r5
 8008e8e:	19db      	adds	r3, r3, r7
 8008e90:	1c22      	adds	r2, r4, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	4b46      	ldr	r3, [pc, #280]	; (8008fb0 <astronode_send_cfg_wr+0x144>)
 8008e96:	002c      	movs	r4, r5
 8008e98:	191b      	adds	r3, r3, r4
 8008e9a:	19db      	adds	r3, r3, r7
 8008e9c:	1c02      	adds	r2, r0, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	4b44      	ldr	r3, [pc, #272]	; (8008fb4 <astronode_send_cfg_wr+0x148>)
 8008ea2:	191b      	adds	r3, r3, r4
 8008ea4:	19db      	adds	r3, r3, r7
 8008ea6:	1c0a      	adds	r2, r1, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008eaa:	25d0      	movs	r5, #208	; 0xd0
 8008eac:	197b      	adds	r3, r7, r5
 8008eae:	0018      	movs	r0, r3
 8008eb0:	23c6      	movs	r3, #198	; 0xc6
 8008eb2:	001a      	movs	r2, r3
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f004 faa5 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8008eba:	4b3f      	ldr	r3, [pc, #252]	; (8008fb8 <astronode_send_cfg_wr+0x14c>)
 8008ebc:	191b      	adds	r3, r3, r4
 8008ebe:	19db      	adds	r3, r3, r7
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	23c6      	movs	r3, #198	; 0xc6
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	f004 fa9c 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008ecc:	0029      	movs	r1, r5
 8008ece:	187b      	adds	r3, r7, r1
 8008ed0:	2205      	movs	r2, #5
 8008ed2:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008ed4:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <astronode_send_cfg_wr+0x13c>)
 8008ed6:	191b      	adds	r3, r3, r4
 8008ed8:	19db      	adds	r3, r3, r7
 8008eda:	2200      	movs	r2, #0
 8008edc:	569a      	ldrsb	r2, [r3, r2]
 8008ede:	4b33      	ldr	r3, [pc, #204]	; (8008fac <astronode_send_cfg_wr+0x140>)
 8008ee0:	191b      	adds	r3, r3, r4
 8008ee2:	19db      	adds	r3, r3, r7
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008eee:	4b30      	ldr	r3, [pc, #192]	; (8008fb0 <astronode_send_cfg_wr+0x144>)
 8008ef0:	191b      	adds	r3, r3, r4
 8008ef2:	19db      	adds	r3, r3, r7
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	b25b      	sxtb	r3, r3
 8008efa:	4313      	orrs	r3, r2
 8008efc:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008efe:	4b2d      	ldr	r3, [pc, #180]	; (8008fb4 <astronode_send_cfg_wr+0x148>)
 8008f00:	191b      	adds	r3, r3, r4
 8008f02:	19db      	adds	r3, r3, r7
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008f14:	23d4      	movs	r3, #212	; 0xd4
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	2508      	movs	r5, #8
 8008f1a:	195b      	adds	r3, r3, r5
 8008f1c:	19db      	adds	r3, r3, r7
 8008f1e:	2200      	movs	r2, #0
 8008f20:	569a      	ldrsb	r2, [r3, r2]
 8008f22:	23d6      	movs	r3, #214	; 0xd6
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	195b      	adds	r3, r3, r5
 8008f28:	19db      	adds	r3, r3, r7
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	b25b      	sxtb	r3, r3
 8008f30:	4313      	orrs	r3, r2
 8008f32:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008f34:	23d8      	movs	r3, #216	; 0xd8
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	195b      	adds	r3, r3, r5
 8008f3a:	19db      	adds	r3, r3, r7
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008f46:	23da      	movs	r3, #218	; 0xda
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	195b      	adds	r3, r3, r5
 8008f4c:	19db      	adds	r3, r3, r7
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	b25b      	sxtb	r3, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008f5e:	0008      	movs	r0, r1
 8008f60:	187b      	adds	r3, r7, r1
 8008f62:	22c4      	movs	r2, #196	; 0xc4
 8008f64:	2103      	movs	r1, #3
 8008f66:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008f68:	002b      	movs	r3, r5
 8008f6a:	18fa      	adds	r2, r7, r3
 8008f6c:	183b      	adds	r3, r7, r0
 8008f6e:	0011      	movs	r1, r2
 8008f70:	0018      	movs	r0, r3
 8008f72:	f001 f9e9 	bl	800a348 <astronode_transport_send_receive>
 8008f76:	0003      	movs	r3, r0
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10f      	bne.n	8008f9c <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <astronode_send_cfg_wr+0x14c>)
 8008f7e:	191b      	adds	r3, r3, r4
 8008f80:	19db      	adds	r3, r3, r7
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b85      	cmp	r3, #133	; 0x85
 8008f86:	d105      	bne.n	8008f94 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <astronode_send_cfg_wr+0x150>)
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7fa f8ac 	bl	80030e8 <send_debug_logs>
            return true ;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e004      	b.n	8008f9e <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <astronode_send_cfg_wr+0x154>)
 8008f96:	0018      	movs	r0, r3
 8008f98:	f7fa f8a6 	bl	80030e8 <send_debug_logs>
        }
    }
    return false ;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b067      	add	sp, #412	; 0x19c
 8008fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	fffffe6f 	.word	0xfffffe6f
 8008fac:	fffffe6e 	.word	0xfffffe6e
 8008fb0:	fffffe6d 	.word	0xfffffe6d
 8008fb4:	fffffe6c 	.word	0xfffffe6c
 8008fb8:	fffffe70 	.word	0xfffffe70
 8008fbc:	08014578 	.word	0x08014578
 8008fc0:	080145a4 	.word	0x080145a4

08008fc4 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc6:	b0ed      	sub	sp, #436	; 0x1b4
 8008fc8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008fca:	21c8      	movs	r1, #200	; 0xc8
 8008fcc:	2318      	movs	r3, #24
 8008fce:	18cb      	adds	r3, r1, r3
 8008fd0:	19db      	adds	r3, r3, r7
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	23c6      	movs	r3, #198	; 0xc6
 8008fd6:	001a      	movs	r2, r3
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f004 fa13 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8008fde:	4b4a      	ldr	r3, [pc, #296]	; (8009108 <astronode_send_mgi_rr+0x144>)
 8008fe0:	26cc      	movs	r6, #204	; 0xcc
 8008fe2:	0076      	lsls	r6, r6, #1
 8008fe4:	199b      	adds	r3, r3, r6
 8008fe6:	2218      	movs	r2, #24
 8008fe8:	4694      	mov	ip, r2
 8008fea:	44bc      	add	ip, r7
 8008fec:	4463      	add	r3, ip
 8008fee:	0018      	movs	r0, r3
 8008ff0:	23c6      	movs	r3, #198	; 0xc6
 8008ff2:	001a      	movs	r2, r3
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	f004 fa05 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008ffa:	21c8      	movs	r1, #200	; 0xc8
 8008ffc:	2318      	movs	r3, #24
 8008ffe:	18cb      	adds	r3, r1, r3
 8009000:	19db      	adds	r3, r3, r7
 8009002:	2219      	movs	r2, #25
 8009004:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009006:	2318      	movs	r3, #24
 8009008:	18fa      	adds	r2, r7, r3
 800900a:	2318      	movs	r3, #24
 800900c:	18cb      	adds	r3, r1, r3
 800900e:	19db      	adds	r3, r3, r7
 8009010:	0011      	movs	r1, r2
 8009012:	0018      	movs	r0, r3
 8009014:	f001 f998 	bl	800a348 <astronode_transport_send_receive>
 8009018:	0003      	movs	r3, r0
 800901a:	2b01      	cmp	r3, #1
 800901c:	d16f      	bne.n	80090fe <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800901e:	4b3a      	ldr	r3, [pc, #232]	; (8009108 <astronode_send_mgi_rr+0x144>)
 8009020:	0032      	movs	r2, r6
 8009022:	189b      	adds	r3, r3, r2
 8009024:	2118      	movs	r1, #24
 8009026:	468c      	mov	ip, r1
 8009028:	44bc      	add	ip, r7
 800902a:	4463      	add	r3, ip
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b99      	cmp	r3, #153	; 0x99
 8009030:	d161      	bne.n	80090f6 <astronode_send_mgi_rr+0x132>
        {
 8009032:	466b      	mov	r3, sp
 8009034:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8009036:	4b34      	ldr	r3, [pc, #208]	; (8009108 <astronode_send_mgi_rr+0x144>)
 8009038:	189b      	adds	r3, r3, r2
 800903a:	2218      	movs	r2, #24
 800903c:	4694      	mov	ip, r2
 800903e:	44bc      	add	ip, r7
 8009040:	4463      	add	r3, ip
 8009042:	22c4      	movs	r2, #196	; 0xc4
 8009044:	5a9b      	ldrh	r3, [r3, r2]
 8009046:	001a      	movs	r2, r3
 8009048:	3a01      	subs	r2, #1
 800904a:	21ca      	movs	r1, #202	; 0xca
 800904c:	0049      	lsls	r1, r1, #1
 800904e:	2018      	movs	r0, #24
 8009050:	1809      	adds	r1, r1, r0
 8009052:	19c9      	adds	r1, r1, r7
 8009054:	600a      	str	r2, [r1, #0]
 8009056:	001c      	movs	r4, r3
 8009058:	2200      	movs	r2, #0
 800905a:	0015      	movs	r5, r2
 800905c:	0020      	movs	r0, r4
 800905e:	0029      	movs	r1, r5
 8009060:	0004      	movs	r4, r0
 8009062:	0f62      	lsrs	r2, r4, #29
 8009064:	000c      	movs	r4, r1
 8009066:	00e4      	lsls	r4, r4, #3
 8009068:	617c      	str	r4, [r7, #20]
 800906a:	697c      	ldr	r4, [r7, #20]
 800906c:	4314      	orrs	r4, r2
 800906e:	617c      	str	r4, [r7, #20]
 8009070:	0001      	movs	r1, r0
 8009072:	00c9      	lsls	r1, r1, #3
 8009074:	6139      	str	r1, [r7, #16]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	2200      	movs	r2, #0
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	6838      	ldr	r0, [r7, #0]
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	0004      	movs	r4, r0
 8009082:	0f62      	lsrs	r2, r4, #29
 8009084:	000c      	movs	r4, r1
 8009086:	00e4      	lsls	r4, r4, #3
 8009088:	60fc      	str	r4, [r7, #12]
 800908a:	68fc      	ldr	r4, [r7, #12]
 800908c:	4314      	orrs	r4, r2
 800908e:	60fc      	str	r4, [r7, #12]
 8009090:	0001      	movs	r1, r0
 8009092:	00ca      	lsls	r2, r1, #3
 8009094:	60ba      	str	r2, [r7, #8]
 8009096:	3307      	adds	r3, #7
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4669      	mov	r1, sp
 800909e:	1acb      	subs	r3, r1, r3
 80090a0:	469d      	mov	sp, r3
 80090a2:	466b      	mov	r3, sp
 80090a4:	3300      	adds	r3, #0
 80090a6:	24c8      	movs	r4, #200	; 0xc8
 80090a8:	0064      	lsls	r4, r4, #1
 80090aa:	2218      	movs	r2, #24
 80090ac:	18a2      	adds	r2, r4, r2
 80090ae:	19d1      	adds	r1, r2, r7
 80090b0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <astronode_send_mgi_rr+0x148>)
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7fa f817 	bl	80030e8 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80090ba:	4b13      	ldr	r3, [pc, #76]	; (8009108 <astronode_send_mgi_rr+0x144>)
 80090bc:	22cc      	movs	r2, #204	; 0xcc
 80090be:	0052      	lsls	r2, r2, #1
 80090c0:	189b      	adds	r3, r3, r2
 80090c2:	2218      	movs	r2, #24
 80090c4:	4694      	mov	ip, r2
 80090c6:	44bc      	add	ip, r7
 80090c8:	4463      	add	r3, ip
 80090ca:	22c4      	movs	r2, #196	; 0xc4
 80090cc:	5a9b      	ldrh	r3, [r3, r2]
 80090ce:	0019      	movs	r1, r3
 80090d0:	2318      	movs	r3, #24
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	3301      	adds	r3, #1
 80090d6:	4a0e      	ldr	r2, [pc, #56]	; (8009110 <astronode_send_mgi_rr+0x14c>)
 80090d8:	2018      	movs	r0, #24
 80090da:	1820      	adds	r0, r4, r0
 80090dc:	19c0      	adds	r0, r0, r7
 80090de:	6800      	ldr	r0, [r0, #0]
 80090e0:	f004 f8c6 	bl	800d270 <snprintf>
            send_debug_logs(guid);
 80090e4:	2318      	movs	r3, #24
 80090e6:	18e3      	adds	r3, r4, r3
 80090e8:	19db      	adds	r3, r3, r7
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	0018      	movs	r0, r3
 80090ee:	f7f9 fffb 	bl	80030e8 <send_debug_logs>
 80090f2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80090f4:	e003      	b.n	80090fe <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <astronode_send_mgi_rr+0x150>)
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7f9 fff5 	bl	80030e8 <send_debug_logs>
}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	46bd      	mov	sp, r7
 8009102:	b06d      	add	sp, #436	; 0x1b4
 8009104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	fffffe68 	.word	0xfffffe68
 800910c:	08014630 	.word	0x08014630
 8009110:	08014640 	.word	0x08014640
 8009114:	08014644 	.word	0x08014644

08009118 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8009118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800911a:	b0ed      	sub	sp, #436	; 0x1b4
 800911c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800911e:	21c8      	movs	r1, #200	; 0xc8
 8009120:	2318      	movs	r3, #24
 8009122:	18cb      	adds	r3, r1, r3
 8009124:	19db      	adds	r3, r3, r7
 8009126:	0018      	movs	r0, r3
 8009128:	23c6      	movs	r3, #198	; 0xc6
 800912a:	001a      	movs	r2, r3
 800912c:	2100      	movs	r1, #0
 800912e:	f004 f969 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009132:	4b4a      	ldr	r3, [pc, #296]	; (800925c <astronode_send_msn_rr+0x144>)
 8009134:	26cc      	movs	r6, #204	; 0xcc
 8009136:	0076      	lsls	r6, r6, #1
 8009138:	199b      	adds	r3, r3, r6
 800913a:	2218      	movs	r2, #24
 800913c:	4694      	mov	ip, r2
 800913e:	44bc      	add	ip, r7
 8009140:	4463      	add	r3, ip
 8009142:	0018      	movs	r0, r3
 8009144:	23c6      	movs	r3, #198	; 0xc6
 8009146:	001a      	movs	r2, r3
 8009148:	2100      	movs	r1, #0
 800914a:	f004 f95b 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800914e:	21c8      	movs	r1, #200	; 0xc8
 8009150:	2318      	movs	r3, #24
 8009152:	18cb      	adds	r3, r1, r3
 8009154:	19db      	adds	r3, r3, r7
 8009156:	221a      	movs	r2, #26
 8009158:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800915a:	2318      	movs	r3, #24
 800915c:	18fa      	adds	r2, r7, r3
 800915e:	2318      	movs	r3, #24
 8009160:	18cb      	adds	r3, r1, r3
 8009162:	19db      	adds	r3, r3, r7
 8009164:	0011      	movs	r1, r2
 8009166:	0018      	movs	r0, r3
 8009168:	f001 f8ee 	bl	800a348 <astronode_transport_send_receive>
 800916c:	0003      	movs	r3, r0
 800916e:	2b01      	cmp	r3, #1
 8009170:	d16f      	bne.n	8009252 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8009172:	4b3a      	ldr	r3, [pc, #232]	; (800925c <astronode_send_msn_rr+0x144>)
 8009174:	0032      	movs	r2, r6
 8009176:	189b      	adds	r3, r3, r2
 8009178:	2118      	movs	r1, #24
 800917a:	468c      	mov	ip, r1
 800917c:	44bc      	add	ip, r7
 800917e:	4463      	add	r3, ip
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b9a      	cmp	r3, #154	; 0x9a
 8009184:	d161      	bne.n	800924a <astronode_send_msn_rr+0x132>
        {
 8009186:	466b      	mov	r3, sp
 8009188:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 800918a:	4b34      	ldr	r3, [pc, #208]	; (800925c <astronode_send_msn_rr+0x144>)
 800918c:	189b      	adds	r3, r3, r2
 800918e:	2218      	movs	r2, #24
 8009190:	4694      	mov	ip, r2
 8009192:	44bc      	add	ip, r7
 8009194:	4463      	add	r3, ip
 8009196:	22c4      	movs	r2, #196	; 0xc4
 8009198:	5a9b      	ldrh	r3, [r3, r2]
 800919a:	001a      	movs	r2, r3
 800919c:	3a01      	subs	r2, #1
 800919e:	21ca      	movs	r1, #202	; 0xca
 80091a0:	0049      	lsls	r1, r1, #1
 80091a2:	2018      	movs	r0, #24
 80091a4:	1809      	adds	r1, r1, r0
 80091a6:	19c9      	adds	r1, r1, r7
 80091a8:	600a      	str	r2, [r1, #0]
 80091aa:	001c      	movs	r4, r3
 80091ac:	2200      	movs	r2, #0
 80091ae:	0015      	movs	r5, r2
 80091b0:	0020      	movs	r0, r4
 80091b2:	0029      	movs	r1, r5
 80091b4:	0004      	movs	r4, r0
 80091b6:	0f62      	lsrs	r2, r4, #29
 80091b8:	000c      	movs	r4, r1
 80091ba:	00e4      	lsls	r4, r4, #3
 80091bc:	617c      	str	r4, [r7, #20]
 80091be:	697c      	ldr	r4, [r7, #20]
 80091c0:	4314      	orrs	r4, r2
 80091c2:	617c      	str	r4, [r7, #20]
 80091c4:	0001      	movs	r1, r0
 80091c6:	00c9      	lsls	r1, r1, #3
 80091c8:	6139      	str	r1, [r7, #16]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	6838      	ldr	r0, [r7, #0]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	0004      	movs	r4, r0
 80091d6:	0f62      	lsrs	r2, r4, #29
 80091d8:	000c      	movs	r4, r1
 80091da:	00e4      	lsls	r4, r4, #3
 80091dc:	60fc      	str	r4, [r7, #12]
 80091de:	68fc      	ldr	r4, [r7, #12]
 80091e0:	4314      	orrs	r4, r2
 80091e2:	60fc      	str	r4, [r7, #12]
 80091e4:	0001      	movs	r1, r0
 80091e6:	00ca      	lsls	r2, r1, #3
 80091e8:	60ba      	str	r2, [r7, #8]
 80091ea:	3307      	adds	r3, #7
 80091ec:	08db      	lsrs	r3, r3, #3
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	4669      	mov	r1, sp
 80091f2:	1acb      	subs	r3, r1, r3
 80091f4:	469d      	mov	sp, r3
 80091f6:	466b      	mov	r3, sp
 80091f8:	3300      	adds	r3, #0
 80091fa:	24c8      	movs	r4, #200	; 0xc8
 80091fc:	0064      	lsls	r4, r4, #1
 80091fe:	2218      	movs	r2, #24
 8009200:	18a2      	adds	r2, r4, r2
 8009202:	19d1      	adds	r1, r2, r7
 8009204:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <astronode_send_msn_rr+0x148>)
 8009208:	0018      	movs	r0, r3
 800920a:	f7f9 ff6d 	bl	80030e8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <astronode_send_msn_rr+0x144>)
 8009210:	22cc      	movs	r2, #204	; 0xcc
 8009212:	0052      	lsls	r2, r2, #1
 8009214:	189b      	adds	r3, r3, r2
 8009216:	2218      	movs	r2, #24
 8009218:	4694      	mov	ip, r2
 800921a:	44bc      	add	ip, r7
 800921c:	4463      	add	r3, ip
 800921e:	22c4      	movs	r2, #196	; 0xc4
 8009220:	5a9b      	ldrh	r3, [r3, r2]
 8009222:	0019      	movs	r1, r3
 8009224:	2318      	movs	r3, #24
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	3301      	adds	r3, #1
 800922a:	4a0e      	ldr	r2, [pc, #56]	; (8009264 <astronode_send_msn_rr+0x14c>)
 800922c:	2018      	movs	r0, #24
 800922e:	1820      	adds	r0, r4, r0
 8009230:	19c0      	adds	r0, r0, r7
 8009232:	6800      	ldr	r0, [r0, #0]
 8009234:	f004 f81c 	bl	800d270 <snprintf>
            send_debug_logs(serial_number);
 8009238:	2318      	movs	r3, #24
 800923a:	18e3      	adds	r3, r4, r3
 800923c:	19db      	adds	r3, r3, r7
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	0018      	movs	r0, r3
 8009242:	f7f9 ff51 	bl	80030e8 <send_debug_logs>
 8009246:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8009248:	e003      	b.n	8009252 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <astronode_send_msn_rr+0x150>)
 800924c:	0018      	movs	r0, r3
 800924e:	f7f9 ff4b 	bl	80030e8 <send_debug_logs>
}
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	46bd      	mov	sp, r7
 8009256:	b06d      	add	sp, #436	; 0x1b4
 8009258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	fffffe68 	.word	0xfffffe68
 8009260:	08014660 	.word	0x08014660
 8009264:	08014640 	.word	0x08014640
 8009268:	0801467c 	.word	0x0801467c

0800926c <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b0e4      	sub	sp, #400	; 0x190
 8009270:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009272:	24c8      	movs	r4, #200	; 0xc8
 8009274:	193b      	adds	r3, r7, r4
 8009276:	0018      	movs	r0, r3
 8009278:	23c6      	movs	r3, #198	; 0xc6
 800927a:	001a      	movs	r2, r3
 800927c:	2100      	movs	r1, #0
 800927e:	f004 f8c1 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009282:	4b31      	ldr	r3, [pc, #196]	; (8009348 <astronode_send_evt_rr+0xdc>)
 8009284:	25c8      	movs	r5, #200	; 0xc8
 8009286:	006d      	lsls	r5, r5, #1
 8009288:	195b      	adds	r3, r3, r5
 800928a:	19db      	adds	r3, r3, r7
 800928c:	0018      	movs	r0, r3
 800928e:	23c6      	movs	r3, #198	; 0xc6
 8009290:	001a      	movs	r2, r3
 8009292:	2100      	movs	r1, #0
 8009294:	f004 f8b6 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8009298:	193b      	adds	r3, r7, r4
 800929a:	2265      	movs	r2, #101	; 0x65
 800929c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800929e:	003a      	movs	r2, r7
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	0011      	movs	r1, r2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f001 f84f 	bl	800a348 <astronode_transport_send_receive>
 80092aa:	0003      	movs	r3, r0
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d147      	bne.n	8009340 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80092b0:	4b25      	ldr	r3, [pc, #148]	; (8009348 <astronode_send_evt_rr+0xdc>)
 80092b2:	195b      	adds	r3, r3, r5
 80092b4:	19db      	adds	r3, r3, r7
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2be5      	cmp	r3, #229	; 0xe5
 80092ba:	d141      	bne.n	8009340 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80092bc:	4b22      	ldr	r3, [pc, #136]	; (8009348 <astronode_send_evt_rr+0xdc>)
 80092be:	195b      	adds	r3, r3, r5
 80092c0:	19db      	adds	r3, r3, r7
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	001a      	movs	r2, r3
 80092c6:	2301      	movs	r3, #1
 80092c8:	4013      	ands	r3, r2
 80092ca:	d006      	beq.n	80092da <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80092cc:	4b1f      	ldr	r3, [pc, #124]	; (800934c <astronode_send_evt_rr+0xe0>)
 80092ce:	2201      	movs	r2, #1
 80092d0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80092d2:	4b1f      	ldr	r3, [pc, #124]	; (8009350 <astronode_send_evt_rr+0xe4>)
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7f9 ff07 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <astronode_send_evt_rr+0xdc>)
 80092dc:	22c8      	movs	r2, #200	; 0xc8
 80092de:	0052      	lsls	r2, r2, #1
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	19db      	adds	r3, r3, r7
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	001a      	movs	r2, r3
 80092e8:	2302      	movs	r3, #2
 80092ea:	4013      	ands	r3, r2
 80092ec:	d006      	beq.n	80092fc <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80092ee:	4b19      	ldr	r3, [pc, #100]	; (8009354 <astronode_send_evt_rr+0xe8>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80092f4:	4b18      	ldr	r3, [pc, #96]	; (8009358 <astronode_send_evt_rr+0xec>)
 80092f6:	0018      	movs	r0, r3
 80092f8:	f7f9 fef6 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80092fc:	4b12      	ldr	r3, [pc, #72]	; (8009348 <astronode_send_evt_rr+0xdc>)
 80092fe:	22c8      	movs	r2, #200	; 0xc8
 8009300:	0052      	lsls	r2, r2, #1
 8009302:	189b      	adds	r3, r3, r2
 8009304:	19db      	adds	r3, r3, r7
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	001a      	movs	r2, r3
 800930a:	2304      	movs	r3, #4
 800930c:	4013      	ands	r3, r2
 800930e:	d006      	beq.n	800931e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8009310:	4b12      	ldr	r3, [pc, #72]	; (800935c <astronode_send_evt_rr+0xf0>)
 8009312:	2201      	movs	r2, #1
 8009314:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <astronode_send_evt_rr+0xf4>)
 8009318:	0018      	movs	r0, r3
 800931a:	f7f9 fee5 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800931e:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <astronode_send_evt_rr+0xdc>)
 8009320:	22c8      	movs	r2, #200	; 0xc8
 8009322:	0052      	lsls	r2, r2, #1
 8009324:	189b      	adds	r3, r3, r2
 8009326:	19db      	adds	r3, r3, r7
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	001a      	movs	r2, r3
 800932c:	2308      	movs	r3, #8
 800932e:	4013      	ands	r3, r2
 8009330:	d006      	beq.n	8009340 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <astronode_send_evt_rr+0xf8>)
 8009334:	2201      	movs	r2, #1
 8009336:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8009338:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <astronode_send_evt_rr+0xfc>)
 800933a:	0018      	movs	r0, r3
 800933c:	f7f9 fed4 	bl	80030e8 <send_debug_logs>
            }

        }
    }
}
 8009340:	46c0      	nop			; (mov r8, r8)
 8009342:	46bd      	mov	sp, r7
 8009344:	b064      	add	sp, #400	; 0x190
 8009346:	bdb0      	pop	{r4, r5, r7, pc}
 8009348:	fffffe70 	.word	0xfffffe70
 800934c:	20000b1c 	.word	0x20000b1c
 8009350:	08014724 	.word	0x08014724
 8009354:	20000b1d 	.word	0x20000b1d
 8009358:	08014748 	.word	0x08014748
 800935c:	20000b1e 	.word	0x20000b1e
 8009360:	08014760 	.word	0x08014760
 8009364:	20000b1f 	.word	0x20000b1f
 8009368:	08014774 	.word	0x08014774

0800936c <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 800936c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936e:	b0e7      	sub	sp, #412	; 0x19c
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8009376:	24d0      	movs	r4, #208	; 0xd0
 8009378:	193b      	adds	r3, r7, r4
 800937a:	0018      	movs	r0, r3
 800937c:	23c6      	movs	r3, #198	; 0xc6
 800937e:	001a      	movs	r2, r3
 8009380:	2100      	movs	r1, #0
 8009382:	f004 f83f 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009386:	4b56      	ldr	r3, [pc, #344]	; (80094e0 <astronode_send_geo_wr+0x174>)
 8009388:	26cc      	movs	r6, #204	; 0xcc
 800938a:	0076      	lsls	r6, r6, #1
 800938c:	199b      	adds	r3, r3, r6
 800938e:	19db      	adds	r3, r3, r7
 8009390:	0018      	movs	r0, r3
 8009392:	23c6      	movs	r3, #198	; 0xc6
 8009394:	001a      	movs	r2, r3
 8009396:	2100      	movs	r1, #0
 8009398:	f004 f834 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800939c:	193b      	adds	r3, r7, r4
 800939e:	2235      	movs	r2, #53	; 0x35
 80093a0:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80093a2:	193b      	adds	r3, r7, r4
 80093a4:	22c4      	movs	r2, #196	; 0xc4
 80093a6:	5a9b      	ldrh	r3, [r3, r2]
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	b290      	uxth	r0, r2
 80093ac:	193a      	adds	r2, r7, r4
 80093ae:	21c4      	movs	r1, #196	; 0xc4
 80093b0:	5250      	strh	r0, [r2, r1]
 80093b2:	0019      	movs	r1, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	193b      	adds	r3, r7, r4
 80093ba:	185b      	adds	r3, r3, r1
 80093bc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	1218      	asrs	r0, r3, #8
 80093c2:	0025      	movs	r5, r4
 80093c4:	197b      	adds	r3, r7, r5
 80093c6:	22c4      	movs	r2, #196	; 0xc4
 80093c8:	5a9b      	ldrh	r3, [r3, r2]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	b294      	uxth	r4, r2
 80093ce:	197a      	adds	r2, r7, r5
 80093d0:	21c4      	movs	r1, #196	; 0xc4
 80093d2:	5254      	strh	r4, [r2, r1]
 80093d4:	0019      	movs	r1, r3
 80093d6:	b2c2      	uxtb	r2, r0
 80093d8:	002c      	movs	r4, r5
 80093da:	193b      	adds	r3, r7, r4
 80093dc:	185b      	adds	r3, r3, r1
 80093de:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	1418      	asrs	r0, r3, #16
 80093e4:	0025      	movs	r5, r4
 80093e6:	197b      	adds	r3, r7, r5
 80093e8:	22c4      	movs	r2, #196	; 0xc4
 80093ea:	5a9b      	ldrh	r3, [r3, r2]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	b294      	uxth	r4, r2
 80093f0:	197a      	adds	r2, r7, r5
 80093f2:	21c4      	movs	r1, #196	; 0xc4
 80093f4:	5254      	strh	r4, [r2, r1]
 80093f6:	0019      	movs	r1, r3
 80093f8:	b2c2      	uxtb	r2, r0
 80093fa:	002c      	movs	r4, r5
 80093fc:	193b      	adds	r3, r7, r4
 80093fe:	185b      	adds	r3, r3, r1
 8009400:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	1618      	asrs	r0, r3, #24
 8009406:	0025      	movs	r5, r4
 8009408:	197b      	adds	r3, r7, r5
 800940a:	22c4      	movs	r2, #196	; 0xc4
 800940c:	5a9b      	ldrh	r3, [r3, r2]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	b294      	uxth	r4, r2
 8009412:	197a      	adds	r2, r7, r5
 8009414:	21c4      	movs	r1, #196	; 0xc4
 8009416:	5254      	strh	r4, [r2, r1]
 8009418:	0019      	movs	r1, r3
 800941a:	b2c2      	uxtb	r2, r0
 800941c:	002c      	movs	r4, r5
 800941e:	193b      	adds	r3, r7, r4
 8009420:	185b      	adds	r3, r3, r1
 8009422:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8009424:	193b      	adds	r3, r7, r4
 8009426:	22c4      	movs	r2, #196	; 0xc4
 8009428:	5a9b      	ldrh	r3, [r3, r2]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	b290      	uxth	r0, r2
 800942e:	193a      	adds	r2, r7, r4
 8009430:	21c4      	movs	r1, #196	; 0xc4
 8009432:	5250      	strh	r0, [r2, r1]
 8009434:	0019      	movs	r1, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	b2da      	uxtb	r2, r3
 800943a:	193b      	adds	r3, r7, r4
 800943c:	185b      	adds	r3, r3, r1
 800943e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	1218      	asrs	r0, r3, #8
 8009444:	0025      	movs	r5, r4
 8009446:	197b      	adds	r3, r7, r5
 8009448:	22c4      	movs	r2, #196	; 0xc4
 800944a:	5a9b      	ldrh	r3, [r3, r2]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	b294      	uxth	r4, r2
 8009450:	197a      	adds	r2, r7, r5
 8009452:	21c4      	movs	r1, #196	; 0xc4
 8009454:	5254      	strh	r4, [r2, r1]
 8009456:	0019      	movs	r1, r3
 8009458:	b2c2      	uxtb	r2, r0
 800945a:	002c      	movs	r4, r5
 800945c:	193b      	adds	r3, r7, r4
 800945e:	185b      	adds	r3, r3, r1
 8009460:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	1418      	asrs	r0, r3, #16
 8009466:	0025      	movs	r5, r4
 8009468:	197b      	adds	r3, r7, r5
 800946a:	22c4      	movs	r2, #196	; 0xc4
 800946c:	5a9b      	ldrh	r3, [r3, r2]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	b294      	uxth	r4, r2
 8009472:	197a      	adds	r2, r7, r5
 8009474:	21c4      	movs	r1, #196	; 0xc4
 8009476:	5254      	strh	r4, [r2, r1]
 8009478:	0019      	movs	r1, r3
 800947a:	b2c2      	uxtb	r2, r0
 800947c:	002c      	movs	r4, r5
 800947e:	193b      	adds	r3, r7, r4
 8009480:	185b      	adds	r3, r3, r1
 8009482:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	1618      	asrs	r0, r3, #24
 8009488:	0025      	movs	r5, r4
 800948a:	197b      	adds	r3, r7, r5
 800948c:	22c4      	movs	r2, #196	; 0xc4
 800948e:	5a9b      	ldrh	r3, [r3, r2]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	b294      	uxth	r4, r2
 8009494:	197a      	adds	r2, r7, r5
 8009496:	21c4      	movs	r1, #196	; 0xc4
 8009498:	5254      	strh	r4, [r2, r1]
 800949a:	0019      	movs	r1, r3
 800949c:	b2c2      	uxtb	r2, r0
 800949e:	0028      	movs	r0, r5
 80094a0:	183b      	adds	r3, r7, r0
 80094a2:	185b      	adds	r3, r3, r1
 80094a4:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80094a6:	2308      	movs	r3, #8
 80094a8:	18fa      	adds	r2, r7, r3
 80094aa:	183b      	adds	r3, r7, r0
 80094ac:	0011      	movs	r1, r2
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 ff4a 	bl	800a348 <astronode_transport_send_receive>
 80094b4:	0003      	movs	r3, r0
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10e      	bne.n	80094d8 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <astronode_send_geo_wr+0x174>)
 80094bc:	199b      	adds	r3, r3, r6
 80094be:	19db      	adds	r3, r3, r7
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2bb5      	cmp	r3, #181	; 0xb5
 80094c4:	d104      	bne.n	80094d0 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <astronode_send_geo_wr+0x178>)
 80094c8:	0018      	movs	r0, r3
 80094ca:	f7f9 fe0d 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80094ce:	e003      	b.n	80094d8 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <astronode_send_geo_wr+0x17c>)
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7f9 fe08 	bl	80030e8 <send_debug_logs>
}
 80094d8:	46c0      	nop			; (mov r8, r8)
 80094da:	46bd      	mov	sp, r7
 80094dc:	b067      	add	sp, #412	; 0x19c
 80094de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e0:	fffffe70 	.word	0xfffffe70
 80094e4:	08014788 	.word	0x08014788
 80094e8:	080147b4 	.word	0x080147b4

080094ec <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80094ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ee:	b0fd      	sub	sp, #500	; 0x1f4
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	6039      	str	r1, [r7, #0]
 80094f4:	0011      	movs	r1, r2
 80094f6:	4b4c      	ldr	r3, [pc, #304]	; (8009628 <astronode_send_pld_er+0x13c>)
 80094f8:	26f4      	movs	r6, #244	; 0xf4
 80094fa:	0076      	lsls	r6, r6, #1
 80094fc:	199b      	adds	r3, r3, r6
 80094fe:	19db      	adds	r3, r3, r7
 8009500:	1c02      	adds	r2, r0, #0
 8009502:	801a      	strh	r2, [r3, #0]
 8009504:	4b49      	ldr	r3, [pc, #292]	; (800962c <astronode_send_pld_er+0x140>)
 8009506:	199b      	adds	r3, r3, r6
 8009508:	19db      	adds	r3, r3, r7
 800950a:	1c0a      	adds	r2, r1, #0
 800950c:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800950e:	2490      	movs	r4, #144	; 0x90
 8009510:	0064      	lsls	r4, r4, #1
 8009512:	193b      	adds	r3, r7, r4
 8009514:	0018      	movs	r0, r3
 8009516:	23c6      	movs	r3, #198	; 0xc6
 8009518:	001a      	movs	r2, r3
 800951a:	2100      	movs	r1, #0
 800951c:	f003 ff72 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009520:	4b43      	ldr	r3, [pc, #268]	; (8009630 <astronode_send_pld_er+0x144>)
 8009522:	199b      	adds	r3, r3, r6
 8009524:	19db      	adds	r3, r3, r7
 8009526:	0018      	movs	r0, r3
 8009528:	23c6      	movs	r3, #198	; 0xc6
 800952a:	001a      	movs	r2, r3
 800952c:	2100      	movs	r1, #0
 800952e:	f003 ff69 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8009532:	193b      	adds	r3, r7, r4
 8009534:	2225      	movs	r2, #37	; 0x25
 8009536:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8009538:	193b      	adds	r3, r7, r4
 800953a:	22c4      	movs	r2, #196	; 0xc4
 800953c:	5a9b      	ldrh	r3, [r3, r2]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	b290      	uxth	r0, r2
 8009542:	193a      	adds	r2, r7, r4
 8009544:	21c4      	movs	r1, #196	; 0xc4
 8009546:	5250      	strh	r0, [r2, r1]
 8009548:	0019      	movs	r1, r3
 800954a:	4b37      	ldr	r3, [pc, #220]	; (8009628 <astronode_send_pld_er+0x13c>)
 800954c:	199b      	adds	r3, r3, r6
 800954e:	19db      	adds	r3, r3, r7
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b2da      	uxtb	r2, r3
 8009554:	193b      	adds	r3, r7, r4
 8009556:	185b      	adds	r3, r3, r1
 8009558:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800955a:	4b33      	ldr	r3, [pc, #204]	; (8009628 <astronode_send_pld_er+0x13c>)
 800955c:	199b      	adds	r3, r3, r6
 800955e:	19db      	adds	r3, r3, r7
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	0a1b      	lsrs	r3, r3, #8
 8009564:	b298      	uxth	r0, r3
 8009566:	0025      	movs	r5, r4
 8009568:	197b      	adds	r3, r7, r5
 800956a:	22c4      	movs	r2, #196	; 0xc4
 800956c:	5a9b      	ldrh	r3, [r3, r2]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	b294      	uxth	r4, r2
 8009572:	197a      	adds	r2, r7, r5
 8009574:	21c4      	movs	r1, #196	; 0xc4
 8009576:	5254      	strh	r4, [r2, r1]
 8009578:	0019      	movs	r1, r3
 800957a:	b2c2      	uxtb	r2, r0
 800957c:	002c      	movs	r4, r5
 800957e:	193b      	adds	r3, r7, r4
 8009580:	185b      	adds	r3, r3, r1
 8009582:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8009584:	193b      	adds	r3, r7, r4
 8009586:	22c4      	movs	r2, #196	; 0xc4
 8009588:	5a9b      	ldrh	r3, [r3, r2]
 800958a:	001a      	movs	r2, r3
 800958c:	193b      	adds	r3, r7, r4
 800958e:	189b      	adds	r3, r3, r2
 8009590:	1c58      	adds	r0, r3, #1
 8009592:	4b26      	ldr	r3, [pc, #152]	; (800962c <astronode_send_pld_er+0x140>)
 8009594:	199b      	adds	r3, r3, r6
 8009596:	19db      	adds	r3, r3, r7
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	0019      	movs	r1, r3
 800959e:	f004 f85e 	bl	800d65e <memcpy>
    request.payload_len = 2 + payload_length;
 80095a2:	4b22      	ldr	r3, [pc, #136]	; (800962c <astronode_send_pld_er+0x140>)
 80095a4:	199b      	adds	r3, r3, r6
 80095a6:	19db      	adds	r3, r3, r7
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	3302      	adds	r3, #2
 80095ac:	b299      	uxth	r1, r3
 80095ae:	193b      	adds	r3, r7, r4
 80095b0:	22c4      	movs	r2, #196	; 0xc4
 80095b2:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80095b4:	2358      	movs	r3, #88	; 0x58
 80095b6:	18fa      	adds	r2, r7, r3
 80095b8:	193b      	adds	r3, r7, r4
 80095ba:	0011      	movs	r1, r2
 80095bc:	0018      	movs	r0, r3
 80095be:	f000 fec3 	bl	800a348 <astronode_transport_send_receive>
 80095c2:	0003      	movs	r3, r0
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d12a      	bne.n	800961e <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80095c8:	4b19      	ldr	r3, [pc, #100]	; (8009630 <astronode_send_pld_er+0x144>)
 80095ca:	199b      	adds	r3, r3, r6
 80095cc:	19db      	adds	r3, r3, r7
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2ba5      	cmp	r3, #165	; 0xa5
 80095d2:	d114      	bne.n	80095fe <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80095d4:	4b14      	ldr	r3, [pc, #80]	; (8009628 <astronode_send_pld_er+0x13c>)
 80095d6:	199b      	adds	r3, r3, r6
 80095d8:	19db      	adds	r3, r3, r7
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	22ea      	movs	r2, #234	; 0xea
 80095de:	32ff      	adds	r2, #255	; 0xff
 80095e0:	0014      	movs	r4, r2
 80095e2:	4a14      	ldr	r2, [pc, #80]	; (8009634 <astronode_send_pld_er+0x148>)
 80095e4:	4914      	ldr	r1, [pc, #80]	; (8009638 <astronode_send_pld_er+0x14c>)
 80095e6:	2508      	movs	r5, #8
 80095e8:	1978      	adds	r0, r7, r5
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	0023      	movs	r3, r4
 80095ee:	f003 fe73 	bl	800d2d8 <sprintf>
            send_debug_logs ( s ) ;
 80095f2:	197b      	adds	r3, r7, r5
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f9 fd77 	bl	80030e8 <send_debug_logs>
            return true ;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e010      	b.n	8009620 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80095fe:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <astronode_send_pld_er+0x13c>)
 8009600:	22f4      	movs	r2, #244	; 0xf4
 8009602:	0052      	lsls	r2, r2, #1
 8009604:	189b      	adds	r3, r3, r2
 8009606:	19db      	adds	r3, r3, r7
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	490c      	ldr	r1, [pc, #48]	; (800963c <astronode_send_pld_er+0x150>)
 800960c:	2408      	movs	r4, #8
 800960e:	193b      	adds	r3, r7, r4
 8009610:	0018      	movs	r0, r3
 8009612:	f003 fe61 	bl	800d2d8 <sprintf>
            send_debug_logs ( s ) ;
 8009616:	193b      	adds	r3, r7, r4
 8009618:	0018      	movs	r0, r3
 800961a:	f7f9 fd65 	bl	80030e8 <send_debug_logs>
        }
    }
    return false ;
 800961e:	2300      	movs	r3, #0
}
 8009620:	0018      	movs	r0, r3
 8009622:	46bd      	mov	sp, r7
 8009624:	b07b      	add	sp, #492	; 0x1ec
 8009626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009628:	fffffe1e 	.word	0xfffffe1e
 800962c:	fffffe1c 	.word	0xfffffe1c
 8009630:	fffffe70 	.word	0xfffffe70
 8009634:	0801482c 	.word	0x0801482c
 8009638:	08014858 	.word	0x08014858
 800963c:	08014874 	.word	0x08014874

08009640 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8009640:	b5b0      	push	{r4, r5, r7, lr}
 8009642:	b0e4      	sub	sp, #400	; 0x190
 8009644:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009646:	24c8      	movs	r4, #200	; 0xc8
 8009648:	193b      	adds	r3, r7, r4
 800964a:	0018      	movs	r0, r3
 800964c:	23c6      	movs	r3, #198	; 0xc6
 800964e:	001a      	movs	r2, r3
 8009650:	2100      	movs	r1, #0
 8009652:	f003 fed7 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009656:	4b15      	ldr	r3, [pc, #84]	; (80096ac <astronode_send_pld_fr+0x6c>)
 8009658:	25c8      	movs	r5, #200	; 0xc8
 800965a:	006d      	lsls	r5, r5, #1
 800965c:	195b      	adds	r3, r3, r5
 800965e:	19db      	adds	r3, r3, r7
 8009660:	0018      	movs	r0, r3
 8009662:	23c6      	movs	r3, #198	; 0xc6
 8009664:	001a      	movs	r2, r3
 8009666:	2100      	movs	r1, #0
 8009668:	f003 fecc 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800966c:	193b      	adds	r3, r7, r4
 800966e:	2227      	movs	r2, #39	; 0x27
 8009670:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009672:	003a      	movs	r2, r7
 8009674:	193b      	adds	r3, r7, r4
 8009676:	0011      	movs	r1, r2
 8009678:	0018      	movs	r0, r3
 800967a:	f000 fe65 	bl	800a348 <astronode_transport_send_receive>
 800967e:	0003      	movs	r3, r0
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10e      	bne.n	80096a2 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <astronode_send_pld_fr+0x6c>)
 8009686:	195b      	adds	r3, r3, r5
 8009688:	19db      	adds	r3, r3, r7
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2ba7      	cmp	r3, #167	; 0xa7
 800968e:	d104      	bne.n	800969a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <astronode_send_pld_fr+0x70>)
 8009692:	0018      	movs	r0, r3
 8009694:	f7f9 fd28 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8009698:	e003      	b.n	80096a2 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <astronode_send_pld_fr+0x74>)
 800969c:	0018      	movs	r0, r3
 800969e:	f7f9 fd23 	bl	80030e8 <send_debug_logs>
}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b064      	add	sp, #400	; 0x190
 80096a8:	bdb0      	pop	{r4, r5, r7, pc}
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	fffffe70 	.word	0xfffffe70
 80096b0:	080148a4 	.word	0x080148a4
 80096b4:	080148dc 	.word	0x080148dc

080096b8 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80096b8:	b5b0      	push	{r4, r5, r7, lr}
 80096ba:	b0e4      	sub	sp, #400	; 0x190
 80096bc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80096be:	24c8      	movs	r4, #200	; 0xc8
 80096c0:	193b      	adds	r3, r7, r4
 80096c2:	0018      	movs	r0, r3
 80096c4:	23c6      	movs	r3, #198	; 0xc6
 80096c6:	001a      	movs	r2, r3
 80096c8:	2100      	movs	r1, #0
 80096ca:	f003 fe9b 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <astronode_send_res_cr+0x70>)
 80096d0:	25c8      	movs	r5, #200	; 0xc8
 80096d2:	006d      	lsls	r5, r5, #1
 80096d4:	195b      	adds	r3, r3, r5
 80096d6:	19db      	adds	r3, r3, r7
 80096d8:	0018      	movs	r0, r3
 80096da:	23c6      	movs	r3, #198	; 0xc6
 80096dc:	001a      	movs	r2, r3
 80096de:	2100      	movs	r1, #0
 80096e0:	f003 fe90 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80096e4:	193b      	adds	r3, r7, r4
 80096e6:	2255      	movs	r2, #85	; 0x55
 80096e8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80096ea:	003a      	movs	r2, r7
 80096ec:	193b      	adds	r3, r7, r4
 80096ee:	0011      	movs	r1, r2
 80096f0:	0018      	movs	r0, r3
 80096f2:	f000 fe29 	bl	800a348 <astronode_transport_send_receive>
 80096f6:	0003      	movs	r3, r0
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d111      	bne.n	8009720 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <astronode_send_res_cr+0x70>)
 80096fe:	195b      	adds	r3, r3, r5
 8009700:	19db      	adds	r3, r3, r7
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2bd5      	cmp	r3, #213	; 0xd5
 8009706:	d107      	bne.n	8009718 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <astronode_send_res_cr+0x74>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <astronode_send_res_cr+0x78>)
 8009710:	0018      	movs	r0, r3
 8009712:	f7f9 fce9 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8009716:	e003      	b.n	8009720 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <astronode_send_res_cr+0x7c>)
 800971a:	0018      	movs	r0, r3
 800971c:	f7f9 fce4 	bl	80030e8 <send_debug_logs>
}
 8009720:	46c0      	nop			; (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b064      	add	sp, #400	; 0x190
 8009726:	bdb0      	pop	{r4, r5, r7, pc}
 8009728:	fffffe70 	.word	0xfffffe70
 800972c:	20000b1d 	.word	0x20000b1d
 8009730:	08014918 	.word	0x08014918
 8009734:	0801494c 	.word	0x0801494c

08009738 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8009738:	b5b0      	push	{r4, r5, r7, lr}
 800973a:	b0fa      	sub	sp, #488	; 0x1e8
 800973c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800973e:	258e      	movs	r5, #142	; 0x8e
 8009740:	006d      	lsls	r5, r5, #1
 8009742:	197b      	adds	r3, r7, r5
 8009744:	0018      	movs	r0, r3
 8009746:	23c6      	movs	r3, #198	; 0xc6
 8009748:	001a      	movs	r2, r3
 800974a:	2100      	movs	r1, #0
 800974c:	f003 fe5a 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0} ;
 8009750:	4b28      	ldr	r3, [pc, #160]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 8009752:	24f4      	movs	r4, #244	; 0xf4
 8009754:	0064      	lsls	r4, r4, #1
 8009756:	191b      	adds	r3, r3, r4
 8009758:	19db      	adds	r3, r3, r7
 800975a:	0018      	movs	r0, r3
 800975c:	23c6      	movs	r3, #198	; 0xc6
 800975e:	001a      	movs	r2, r3
 8009760:	2100      	movs	r1, #0
 8009762:	f003 fe4f 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8009766:	197b      	adds	r3, r7, r5
 8009768:	2217      	movs	r2, #23
 800976a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800976c:	2354      	movs	r3, #84	; 0x54
 800976e:	18fa      	adds	r2, r7, r3
 8009770:	197b      	adds	r3, r7, r5
 8009772:	0011      	movs	r1, r2
 8009774:	0018      	movs	r0, r3
 8009776:	f000 fde7 	bl	800a348 <astronode_transport_send_receive>
 800977a:	0003      	movs	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d133      	bne.n	80097e8 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8009780:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 8009782:	0021      	movs	r1, r4
 8009784:	185b      	adds	r3, r3, r1
 8009786:	19db      	adds	r3, r3, r7
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b97      	cmp	r3, #151	; 0x97
 800978c:	d128      	bne.n	80097e0 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800978e:	4b19      	ldr	r3, [pc, #100]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 8009790:	185b      	adds	r3, r3, r1
 8009792:	19db      	adds	r3, r3, r7
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8009798:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 800979a:	185b      	adds	r3, r3, r1
 800979c:	19db      	adds	r3, r3, r7
 800979e:	789b      	ldrb	r3, [r3, #2]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80097a4:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 80097a6:	185b      	adds	r3, r3, r1
 80097a8:	19db      	adds	r3, r3, r7
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	041b      	lsls	r3, r3, #16
 80097ae:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80097b0:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <astronode_send_rtc_rr+0xbc>)
 80097b2:	185b      	adds	r3, r3, r1
 80097b4:	19db      	adds	r3, r3, r7
 80097b6:	791b      	ldrb	r3, [r3, #4]
 80097b8:	061b      	lsls	r3, r3, #24
 80097ba:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80097bc:	24f2      	movs	r4, #242	; 0xf2
 80097be:	0064      	lsls	r4, r4, #1
 80097c0:	193a      	adds	r2, r7, r4
 80097c2:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80097c4:	193b      	adds	r3, r7, r4
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	490b      	ldr	r1, [pc, #44]	; (80097f8 <astronode_send_rtc_rr+0xc0>)
 80097ca:	1d3b      	adds	r3, r7, #4
 80097cc:	0018      	movs	r0, r3
 80097ce:	f003 fd83 	bl	800d2d8 <sprintf>
            send_debug_logs ( str ) ;
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	0018      	movs	r0, r3
 80097d6:	f7f9 fc87 	bl	80030e8 <send_debug_logs>
            return rtc_time ;
 80097da:	193b      	adds	r3, r7, r4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	e004      	b.n	80097ea <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <astronode_send_rtc_rr+0xc4>)
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7f9 fc80 	bl	80030e8 <send_debug_logs>
        }
    }
    return 0 ;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b07a      	add	sp, #488	; 0x1e8
 80097f0:	bdb0      	pop	{r4, r5, r7, pc}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	fffffe6c 	.word	0xfffffe6c
 80097f8:	08014978 	.word	0x08014978
 80097fc:	080149b8 	.word	0x080149b8

08009800 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8009800:	b5b0      	push	{r4, r5, r7, lr}
 8009802:	b0f8      	sub	sp, #480	; 0x1e0
 8009804:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009806:	258c      	movs	r5, #140	; 0x8c
 8009808:	006d      	lsls	r5, r5, #1
 800980a:	197b      	adds	r3, r7, r5
 800980c:	0018      	movs	r0, r3
 800980e:	23c6      	movs	r3, #198	; 0xc6
 8009810:	001a      	movs	r2, r3
 8009812:	2100      	movs	r1, #0
 8009814:	f003 fdf6 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009818:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <astronode_send_sak_rr+0xa0>)
 800981a:	24f0      	movs	r4, #240	; 0xf0
 800981c:	0064      	lsls	r4, r4, #1
 800981e:	191b      	adds	r3, r3, r4
 8009820:	19db      	adds	r3, r3, r7
 8009822:	0018      	movs	r0, r3
 8009824:	23c6      	movs	r3, #198	; 0xc6
 8009826:	001a      	movs	r2, r3
 8009828:	2100      	movs	r1, #0
 800982a:	f003 fdeb 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800982e:	197b      	adds	r3, r7, r5
 8009830:	2245      	movs	r2, #69	; 0x45
 8009832:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009834:	2350      	movs	r3, #80	; 0x50
 8009836:	18fa      	adds	r2, r7, r3
 8009838:	197b      	adds	r3, r7, r5
 800983a:	0011      	movs	r1, r2
 800983c:	0018      	movs	r0, r3
 800983e:	f000 fd83 	bl	800a348 <astronode_transport_send_receive>
 8009842:	0003      	movs	r3, r0
 8009844:	2b01      	cmp	r3, #1
 8009846:	d126      	bne.n	8009896 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <astronode_send_sak_rr+0xa0>)
 800984a:	191b      	adds	r3, r3, r4
 800984c:	19db      	adds	r3, r3, r7
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2bc5      	cmp	r3, #197	; 0xc5
 8009852:	d11c      	bne.n	800988e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8009854:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <astronode_send_sak_rr+0xa0>)
 8009856:	191b      	adds	r3, r3, r4
 8009858:	19db      	adds	r3, r3, r7
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	b299      	uxth	r1, r3
 800985e:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <astronode_send_sak_rr+0xa0>)
 8009860:	191b      	adds	r3, r3, r4
 8009862:	19db      	adds	r3, r3, r7
 8009864:	789b      	ldrb	r3, [r3, #2]
 8009866:	b29b      	uxth	r3, r3
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	b29a      	uxth	r2, r3
 800986c:	20ef      	movs	r0, #239	; 0xef
 800986e:	0040      	lsls	r0, r0, #1
 8009870:	183b      	adds	r3, r7, r0
 8009872:	188a      	adds	r2, r1, r2
 8009874:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8009876:	183b      	adds	r3, r7, r0
 8009878:	881a      	ldrh	r2, [r3, #0]
 800987a:	490a      	ldr	r1, [pc, #40]	; (80098a4 <astronode_send_sak_rr+0xa4>)
 800987c:	003b      	movs	r3, r7
 800987e:	0018      	movs	r0, r3
 8009880:	f003 fd2a 	bl	800d2d8 <sprintf>
            send_debug_logs(str);
 8009884:	003b      	movs	r3, r7
 8009886:	0018      	movs	r0, r3
 8009888:	f7f9 fc2e 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800988c:	e003      	b.n	8009896 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <astronode_send_sak_rr+0xa8>)
 8009890:	0018      	movs	r0, r3
 8009892:	f7f9 fc29 	bl	80030e8 <send_debug_logs>
}
 8009896:	46c0      	nop			; (mov r8, r8)
 8009898:	46bd      	mov	sp, r7
 800989a:	b078      	add	sp, #480	; 0x1e0
 800989c:	bdb0      	pop	{r4, r5, r7, pc}
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	fffffe70 	.word	0xfffffe70
 80098a4:	080149d4 	.word	0x080149d4
 80098a8:	08014a00 	.word	0x08014a00

080098ac <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80098ac:	b5b0      	push	{r4, r5, r7, lr}
 80098ae:	b0e4      	sub	sp, #400	; 0x190
 80098b0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80098b2:	24c8      	movs	r4, #200	; 0xc8
 80098b4:	193b      	adds	r3, r7, r4
 80098b6:	0018      	movs	r0, r3
 80098b8:	23c6      	movs	r3, #198	; 0xc6
 80098ba:	001a      	movs	r2, r3
 80098bc:	2100      	movs	r1, #0
 80098be:	f003 fda1 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <astronode_send_sak_cr+0x70>)
 80098c4:	25c8      	movs	r5, #200	; 0xc8
 80098c6:	006d      	lsls	r5, r5, #1
 80098c8:	195b      	adds	r3, r3, r5
 80098ca:	19db      	adds	r3, r3, r7
 80098cc:	0018      	movs	r0, r3
 80098ce:	23c6      	movs	r3, #198	; 0xc6
 80098d0:	001a      	movs	r2, r3
 80098d2:	2100      	movs	r1, #0
 80098d4:	f003 fd96 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80098d8:	193b      	adds	r3, r7, r4
 80098da:	2246      	movs	r2, #70	; 0x46
 80098dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80098de:	003a      	movs	r2, r7
 80098e0:	193b      	adds	r3, r7, r4
 80098e2:	0011      	movs	r1, r2
 80098e4:	0018      	movs	r0, r3
 80098e6:	f000 fd2f 	bl	800a348 <astronode_transport_send_receive>
 80098ea:	0003      	movs	r3, r0
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d111      	bne.n	8009914 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80098f0:	4b0a      	ldr	r3, [pc, #40]	; (800991c <astronode_send_sak_cr+0x70>)
 80098f2:	195b      	adds	r3, r3, r5
 80098f4:	19db      	adds	r3, r3, r7
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2bc6      	cmp	r3, #198	; 0xc6
 80098fa:	d107      	bne.n	800990c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80098fc:	4b08      	ldr	r3, [pc, #32]	; (8009920 <astronode_send_sak_cr+0x74>)
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <astronode_send_sak_cr+0x78>)
 8009904:	0018      	movs	r0, r3
 8009906:	f7f9 fbef 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800990a:	e003      	b.n	8009914 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <astronode_send_sak_cr+0x7c>)
 800990e:	0018      	movs	r0, r3
 8009910:	f7f9 fbea 	bl	80030e8 <send_debug_logs>
}
 8009914:	46c0      	nop			; (mov r8, r8)
 8009916:	46bd      	mov	sp, r7
 8009918:	b064      	add	sp, #400	; 0x190
 800991a:	bdb0      	pop	{r4, r5, r7, pc}
 800991c:	fffffe70 	.word	0xfffffe70
 8009920:	20000b1c 	.word	0x20000b1c
 8009924:	08014a34 	.word	0x08014a34
 8009928:	08014a5c 	.word	0x08014a5c

0800992c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800992c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992e:	b0ed      	sub	sp, #436	; 0x1b4
 8009930:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009932:	21c8      	movs	r1, #200	; 0xc8
 8009934:	2318      	movs	r3, #24
 8009936:	18cb      	adds	r3, r1, r3
 8009938:	19db      	adds	r3, r3, r7
 800993a:	0018      	movs	r0, r3
 800993c:	23c6      	movs	r3, #198	; 0xc6
 800993e:	001a      	movs	r2, r3
 8009940:	2100      	movs	r1, #0
 8009942:	f003 fd5f 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009946:	4b4a      	ldr	r3, [pc, #296]	; (8009a70 <astronode_send_mpn_rr+0x144>)
 8009948:	26cc      	movs	r6, #204	; 0xcc
 800994a:	0076      	lsls	r6, r6, #1
 800994c:	199b      	adds	r3, r3, r6
 800994e:	2218      	movs	r2, #24
 8009950:	4694      	mov	ip, r2
 8009952:	44bc      	add	ip, r7
 8009954:	4463      	add	r3, ip
 8009956:	0018      	movs	r0, r3
 8009958:	23c6      	movs	r3, #198	; 0xc6
 800995a:	001a      	movs	r2, r3
 800995c:	2100      	movs	r1, #0
 800995e:	f003 fd51 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8009962:	21c8      	movs	r1, #200	; 0xc8
 8009964:	2318      	movs	r3, #24
 8009966:	18cb      	adds	r3, r1, r3
 8009968:	19db      	adds	r3, r3, r7
 800996a:	221b      	movs	r2, #27
 800996c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800996e:	2318      	movs	r3, #24
 8009970:	18fa      	adds	r2, r7, r3
 8009972:	2318      	movs	r3, #24
 8009974:	18cb      	adds	r3, r1, r3
 8009976:	19db      	adds	r3, r3, r7
 8009978:	0011      	movs	r1, r2
 800997a:	0018      	movs	r0, r3
 800997c:	f000 fce4 	bl	800a348 <astronode_transport_send_receive>
 8009980:	0003      	movs	r3, r0
 8009982:	2b01      	cmp	r3, #1
 8009984:	d16f      	bne.n	8009a66 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8009986:	4b3a      	ldr	r3, [pc, #232]	; (8009a70 <astronode_send_mpn_rr+0x144>)
 8009988:	0032      	movs	r2, r6
 800998a:	189b      	adds	r3, r3, r2
 800998c:	2118      	movs	r1, #24
 800998e:	468c      	mov	ip, r1
 8009990:	44bc      	add	ip, r7
 8009992:	4463      	add	r3, ip
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b9b      	cmp	r3, #155	; 0x9b
 8009998:	d161      	bne.n	8009a5e <astronode_send_mpn_rr+0x132>
        {
 800999a:	466b      	mov	r3, sp
 800999c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800999e:	4b34      	ldr	r3, [pc, #208]	; (8009a70 <astronode_send_mpn_rr+0x144>)
 80099a0:	189b      	adds	r3, r3, r2
 80099a2:	2218      	movs	r2, #24
 80099a4:	4694      	mov	ip, r2
 80099a6:	44bc      	add	ip, r7
 80099a8:	4463      	add	r3, ip
 80099aa:	22c4      	movs	r2, #196	; 0xc4
 80099ac:	5a9b      	ldrh	r3, [r3, r2]
 80099ae:	001a      	movs	r2, r3
 80099b0:	3a01      	subs	r2, #1
 80099b2:	21ca      	movs	r1, #202	; 0xca
 80099b4:	0049      	lsls	r1, r1, #1
 80099b6:	2018      	movs	r0, #24
 80099b8:	1809      	adds	r1, r1, r0
 80099ba:	19c9      	adds	r1, r1, r7
 80099bc:	600a      	str	r2, [r1, #0]
 80099be:	001c      	movs	r4, r3
 80099c0:	2200      	movs	r2, #0
 80099c2:	0015      	movs	r5, r2
 80099c4:	0020      	movs	r0, r4
 80099c6:	0029      	movs	r1, r5
 80099c8:	0004      	movs	r4, r0
 80099ca:	0f62      	lsrs	r2, r4, #29
 80099cc:	000c      	movs	r4, r1
 80099ce:	00e4      	lsls	r4, r4, #3
 80099d0:	617c      	str	r4, [r7, #20]
 80099d2:	697c      	ldr	r4, [r7, #20]
 80099d4:	4314      	orrs	r4, r2
 80099d6:	617c      	str	r4, [r7, #20]
 80099d8:	0001      	movs	r1, r0
 80099da:	00c9      	lsls	r1, r1, #3
 80099dc:	6139      	str	r1, [r7, #16]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	2200      	movs	r2, #0
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	0004      	movs	r4, r0
 80099ea:	0f62      	lsrs	r2, r4, #29
 80099ec:	000c      	movs	r4, r1
 80099ee:	00e4      	lsls	r4, r4, #3
 80099f0:	60fc      	str	r4, [r7, #12]
 80099f2:	68fc      	ldr	r4, [r7, #12]
 80099f4:	4314      	orrs	r4, r2
 80099f6:	60fc      	str	r4, [r7, #12]
 80099f8:	0001      	movs	r1, r0
 80099fa:	00ca      	lsls	r2, r1, #3
 80099fc:	60ba      	str	r2, [r7, #8]
 80099fe:	3307      	adds	r3, #7
 8009a00:	08db      	lsrs	r3, r3, #3
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	4669      	mov	r1, sp
 8009a06:	1acb      	subs	r3, r1, r3
 8009a08:	469d      	mov	sp, r3
 8009a0a:	466b      	mov	r3, sp
 8009a0c:	3300      	adds	r3, #0
 8009a0e:	24c8      	movs	r4, #200	; 0xc8
 8009a10:	0064      	lsls	r4, r4, #1
 8009a12:	2218      	movs	r2, #24
 8009a14:	18a2      	adds	r2, r4, r2
 8009a16:	19d1      	adds	r1, r2, r7
 8009a18:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8009a1a:	4b16      	ldr	r3, [pc, #88]	; (8009a74 <astronode_send_mpn_rr+0x148>)
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f7f9 fb63 	bl	80030e8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <astronode_send_mpn_rr+0x144>)
 8009a24:	22cc      	movs	r2, #204	; 0xcc
 8009a26:	0052      	lsls	r2, r2, #1
 8009a28:	189b      	adds	r3, r3, r2
 8009a2a:	2218      	movs	r2, #24
 8009a2c:	4694      	mov	ip, r2
 8009a2e:	44bc      	add	ip, r7
 8009a30:	4463      	add	r3, ip
 8009a32:	22c4      	movs	r2, #196	; 0xc4
 8009a34:	5a9b      	ldrh	r3, [r3, r2]
 8009a36:	0019      	movs	r1, r3
 8009a38:	2318      	movs	r3, #24
 8009a3a:	18fb      	adds	r3, r7, r3
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	; (8009a78 <astronode_send_mpn_rr+0x14c>)
 8009a40:	2018      	movs	r0, #24
 8009a42:	1820      	adds	r0, r4, r0
 8009a44:	19c0      	adds	r0, r0, r7
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	f003 fc12 	bl	800d270 <snprintf>
            send_debug_logs(product_number);
 8009a4c:	2318      	movs	r3, #24
 8009a4e:	18e3      	adds	r3, r4, r3
 8009a50:	19db      	adds	r3, r3, r7
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	0018      	movs	r0, r3
 8009a56:	f7f9 fb47 	bl	80030e8 <send_debug_logs>
 8009a5a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8009a5c:	e003      	b.n	8009a66 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <astronode_send_mpn_rr+0x150>)
 8009a60:	0018      	movs	r0, r3
 8009a62:	f7f9 fb41 	bl	80030e8 <send_debug_logs>
}
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	b06d      	add	sp, #436	; 0x1b4
 8009a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	fffffe68 	.word	0xfffffe68
 8009a74:	08014b24 	.word	0x08014b24
 8009a78:	08014640 	.word	0x08014640
 8009a7c:	0801467c 	.word	0x0801467c

08009a80 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8009a80:	b5b0      	push	{r4, r5, r7, lr}
 8009a82:	b0e4      	sub	sp, #400	; 0x190
 8009a84:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009a86:	24c8      	movs	r4, #200	; 0xc8
 8009a88:	193b      	adds	r3, r7, r4
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	23c6      	movs	r3, #198	; 0xc6
 8009a8e:	001a      	movs	r2, r3
 8009a90:	2100      	movs	r1, #0
 8009a92:	f003 fcb7 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009a96:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <astronode_send_cmd_cr+0x70>)
 8009a98:	25c8      	movs	r5, #200	; 0xc8
 8009a9a:	006d      	lsls	r5, r5, #1
 8009a9c:	195b      	adds	r3, r3, r5
 8009a9e:	19db      	adds	r3, r3, r7
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	23c6      	movs	r3, #198	; 0xc6
 8009aa4:	001a      	movs	r2, r3
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	f003 fcac 	bl	800d404 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8009aac:	193b      	adds	r3, r7, r4
 8009aae:	2248      	movs	r2, #72	; 0x48
 8009ab0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009ab2:	003a      	movs	r2, r7
 8009ab4:	193b      	adds	r3, r7, r4
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 fc45 	bl	800a348 <astronode_transport_send_receive>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d111      	bne.n	8009ae8 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <astronode_send_cmd_cr+0x70>)
 8009ac6:	195b      	adds	r3, r3, r5
 8009ac8:	19db      	adds	r3, r3, r7
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2bc8      	cmp	r3, #200	; 0xc8
 8009ace:	d107      	bne.n	8009ae0 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8009ad0:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <astronode_send_cmd_cr+0x74>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <astronode_send_cmd_cr+0x78>)
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7f9 fb05 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8009ade:	e003      	b.n	8009ae8 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <astronode_send_cmd_cr+0x7c>)
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f7f9 fb00 	bl	80030e8 <send_debug_logs>
}
 8009ae8:	46c0      	nop			; (mov r8, r8)
 8009aea:	46bd      	mov	sp, r7
 8009aec:	b064      	add	sp, #400	; 0x190
 8009aee:	bdb0      	pop	{r4, r5, r7, pc}
 8009af0:	fffffe70 	.word	0xfffffe70
 8009af4:	20000b1e 	.word	0x20000b1e
 8009af8:	08014f74 	.word	0x08014f74
 8009afc:	08014f98 	.word	0x08014f98

08009b00 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8009b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b02:	4cc6      	ldr	r4, [pc, #792]	; (8009e1c <astronode_send_cmd_rr+0x31c>)
 8009b04:	44a5      	add	sp, r4
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8009b0a:	2190      	movs	r1, #144	; 0x90
 8009b0c:	0049      	lsls	r1, r1, #1
 8009b0e:	2318      	movs	r3, #24
 8009b10:	18cb      	adds	r3, r1, r3
 8009b12:	19db      	adds	r3, r3, r7
 8009b14:	0018      	movs	r0, r3
 8009b16:	23c6      	movs	r3, #198	; 0xc6
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	f003 fc72 	bl	800d404 <memset>
    astronode_app_msg_t answer = {0};
 8009b20:	4bbf      	ldr	r3, [pc, #764]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009b22:	26fc      	movs	r6, #252	; 0xfc
 8009b24:	0076      	lsls	r6, r6, #1
 8009b26:	199b      	adds	r3, r3, r6
 8009b28:	2218      	movs	r2, #24
 8009b2a:	4694      	mov	ip, r2
 8009b2c:	44bc      	add	ip, r7
 8009b2e:	4463      	add	r3, ip
 8009b30:	0018      	movs	r0, r3
 8009b32:	23c6      	movs	r3, #198	; 0xc6
 8009b34:	001a      	movs	r2, r3
 8009b36:	2100      	movs	r1, #0
 8009b38:	f003 fc64 	bl	800d404 <memset>
    bool result = false ;
 8009b3c:	23f8      	movs	r3, #248	; 0xf8
 8009b3e:	33ff      	adds	r3, #255	; 0xff
 8009b40:	2218      	movs	r2, #24
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	19db      	adds	r3, r3, r7
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8009b4a:	2190      	movs	r1, #144	; 0x90
 8009b4c:	0049      	lsls	r1, r1, #1
 8009b4e:	2318      	movs	r3, #24
 8009b50:	18cb      	adds	r3, r1, r3
 8009b52:	19db      	adds	r3, r3, r7
 8009b54:	2247      	movs	r2, #71	; 0x47
 8009b56:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009b58:	2258      	movs	r2, #88	; 0x58
 8009b5a:	2318      	movs	r3, #24
 8009b5c:	18d3      	adds	r3, r2, r3
 8009b5e:	19da      	adds	r2, r3, r7
 8009b60:	2318      	movs	r3, #24
 8009b62:	18cb      	adds	r3, r1, r3
 8009b64:	19db      	adds	r3, r3, r7
 8009b66:	0011      	movs	r1, r2
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 fbed 	bl	800a348 <astronode_transport_send_receive>
 8009b6e:	0003      	movs	r3, r0
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d000      	beq.n	8009b76 <astronode_send_cmd_rr+0x76>
 8009b74:	e146      	b.n	8009e04 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8009b76:	4baa      	ldr	r3, [pc, #680]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009b78:	199a      	adds	r2, r3, r6
 8009b7a:	2318      	movs	r3, #24
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	18d3      	adds	r3, r2, r3
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2bc7      	cmp	r3, #199	; 0xc7
 8009b84:	d000      	beq.n	8009b88 <astronode_send_cmd_rr+0x88>
 8009b86:	e139      	b.n	8009dfc <astronode_send_cmd_rr+0x2fc>
        {
 8009b88:	466b      	mov	r3, sp
 8009b8a:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8009b8c:	4ba5      	ldr	r3, [pc, #660]	; (8009e24 <astronode_send_cmd_rr+0x324>)
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f7f9 faaa 	bl	80030e8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8009b94:	4ba2      	ldr	r3, [pc, #648]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009b96:	21fc      	movs	r1, #252	; 0xfc
 8009b98:	0049      	lsls	r1, r1, #1
 8009b9a:	185a      	adds	r2, r3, r1
 8009b9c:	2318      	movs	r3, #24
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8009ba6:	4b9e      	ldr	r3, [pc, #632]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009ba8:	1858      	adds	r0, r3, r1
 8009baa:	2318      	movs	r3, #24
 8009bac:	18fb      	adds	r3, r7, r3
 8009bae:	18c3      	adds	r3, r0, r3
 8009bb0:	789b      	ldrb	r3, [r3, #2]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8009bb6:	4b9a      	ldr	r3, [pc, #616]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009bb8:	1858      	adds	r0, r3, r1
 8009bba:	2318      	movs	r3, #24
 8009bbc:	18fb      	adds	r3, r7, r3
 8009bbe:	18c3      	adds	r3, r0, r3
 8009bc0:	78db      	ldrb	r3, [r3, #3]
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8009bc6:	4b96      	ldr	r3, [pc, #600]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009bc8:	1858      	adds	r0, r3, r1
 8009bca:	2318      	movs	r3, #24
 8009bcc:	18fb      	adds	r3, r7, r3
 8009bce:	18c3      	adds	r3, r0, r3
 8009bd0:	791b      	ldrb	r3, [r3, #4]
 8009bd2:	061b      	lsls	r3, r3, #24
 8009bd4:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009bd6:	22f8      	movs	r2, #248	; 0xf8
 8009bd8:	0052      	lsls	r2, r2, #1
 8009bda:	2118      	movs	r1, #24
 8009bdc:	1851      	adds	r1, r2, r1
 8009bde:	19c8      	adds	r0, r1, r7
 8009be0:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8009be2:	2318      	movs	r3, #24
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	19da      	adds	r2, r3, r7
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	498f      	ldr	r1, [pc, #572]	; (8009e28 <astronode_send_cmd_rr+0x328>)
 8009bec:	2008      	movs	r0, #8
 8009bee:	2318      	movs	r3, #24
 8009bf0:	18c3      	adds	r3, r0, r3
 8009bf2:	19db      	adds	r3, r3, r7
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f003 fb6f 	bl	800d2d8 <sprintf>
            send_debug_logs(str);
 8009bfa:	2008      	movs	r0, #8
 8009bfc:	2318      	movs	r3, #24
 8009bfe:	18c3      	adds	r3, r0, r3
 8009c00:	19db      	adds	r3, r3, r7
 8009c02:	0018      	movs	r0, r3
 8009c04:	f7f9 fa70 	bl	80030e8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8009c08:	4b85      	ldr	r3, [pc, #532]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009c0a:	21fc      	movs	r1, #252	; 0xfc
 8009c0c:	0049      	lsls	r1, r1, #1
 8009c0e:	185a      	adds	r2, r3, r1
 8009c10:	2318      	movs	r3, #24
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	18d3      	adds	r3, r2, r3
 8009c16:	22c4      	movs	r2, #196	; 0xc4
 8009c18:	5a9b      	ldrh	r3, [r3, r2]
 8009c1a:	2b2c      	cmp	r3, #44	; 0x2c
 8009c1c:	d013      	beq.n	8009c46 <astronode_send_cmd_rr+0x146>
 8009c1e:	4b80      	ldr	r3, [pc, #512]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009c20:	185a      	adds	r2, r3, r1
 8009c22:	2318      	movs	r3, #24
 8009c24:	18fb      	adds	r3, r7, r3
 8009c26:	18d3      	adds	r3, r2, r3
 8009c28:	22c4      	movs	r2, #196	; 0xc4
 8009c2a:	5a9b      	ldrh	r3, [r3, r2]
 8009c2c:	2b0c      	cmp	r3, #12
 8009c2e:	d00a      	beq.n	8009c46 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8009c30:	4b7e      	ldr	r3, [pc, #504]	; (8009e2c <astronode_send_cmd_rr+0x32c>)
 8009c32:	0018      	movs	r0, r3
 8009c34:	f7f9 fa58 	bl	80030e8 <send_debug_logs>
                return result ;
 8009c38:	23f8      	movs	r3, #248	; 0xf8
 8009c3a:	33ff      	adds	r3, #255	; 0xff
 8009c3c:	2218      	movs	r2, #24
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	19db      	adds	r3, r3, r7
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	e0d8      	b.n	8009df8 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8009c46:	4b76      	ldr	r3, [pc, #472]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009c48:	22fc      	movs	r2, #252	; 0xfc
 8009c4a:	0052      	lsls	r2, r2, #1
 8009c4c:	189b      	adds	r3, r3, r2
 8009c4e:	2218      	movs	r2, #24
 8009c50:	4694      	mov	ip, r2
 8009c52:	44bc      	add	ip, r7
 8009c54:	4463      	add	r3, ip
 8009c56:	22c4      	movs	r2, #196	; 0xc4
 8009c58:	5a9b      	ldrh	r3, [r3, r2]
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	3a01      	subs	r2, #1
 8009c5e:	21f6      	movs	r1, #246	; 0xf6
 8009c60:	0049      	lsls	r1, r1, #1
 8009c62:	2018      	movs	r0, #24
 8009c64:	1809      	adds	r1, r1, r0
 8009c66:	19c9      	adds	r1, r1, r7
 8009c68:	600a      	str	r2, [r1, #0]
 8009c6a:	001c      	movs	r4, r3
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	0015      	movs	r5, r2
 8009c70:	0020      	movs	r0, r4
 8009c72:	0029      	movs	r1, r5
 8009c74:	0004      	movs	r4, r0
 8009c76:	0f62      	lsrs	r2, r4, #29
 8009c78:	000c      	movs	r4, r1
 8009c7a:	00e4      	lsls	r4, r4, #3
 8009c7c:	617c      	str	r4, [r7, #20]
 8009c7e:	697c      	ldr	r4, [r7, #20]
 8009c80:	4314      	orrs	r4, r2
 8009c82:	617c      	str	r4, [r7, #20]
 8009c84:	0001      	movs	r1, r0
 8009c86:	00c9      	lsls	r1, r1, #3
 8009c88:	6139      	str	r1, [r7, #16]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	6838      	ldr	r0, [r7, #0]
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	0004      	movs	r4, r0
 8009c96:	0f62      	lsrs	r2, r4, #29
 8009c98:	000c      	movs	r4, r1
 8009c9a:	00e4      	lsls	r4, r4, #3
 8009c9c:	60fc      	str	r4, [r7, #12]
 8009c9e:	68fc      	ldr	r4, [r7, #12]
 8009ca0:	4314      	orrs	r4, r2
 8009ca2:	60fc      	str	r4, [r7, #12]
 8009ca4:	0001      	movs	r1, r0
 8009ca6:	00ca      	lsls	r2, r1, #3
 8009ca8:	60ba      	str	r2, [r7, #8]
 8009caa:	3307      	adds	r3, #7
 8009cac:	08db      	lsrs	r3, r3, #3
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	4669      	mov	r1, sp
 8009cb2:	1acb      	subs	r3, r1, r3
 8009cb4:	469d      	mov	sp, r3
 8009cb6:	466b      	mov	r3, sp
 8009cb8:	3300      	adds	r3, #0
 8009cba:	20f4      	movs	r0, #244	; 0xf4
 8009cbc:	0040      	lsls	r0, r0, #1
 8009cbe:	2218      	movs	r2, #24
 8009cc0:	1882      	adds	r2, r0, r2
 8009cc2:	19d1      	adds	r1, r2, r7
 8009cc4:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8009cc6:	4b56      	ldr	r3, [pc, #344]	; (8009e20 <astronode_send_cmd_rr+0x320>)
 8009cc8:	22fc      	movs	r2, #252	; 0xfc
 8009cca:	0052      	lsls	r2, r2, #1
 8009ccc:	189b      	adds	r3, r3, r2
 8009cce:	2218      	movs	r2, #24
 8009cd0:	4694      	mov	ip, r2
 8009cd2:	44bc      	add	ip, r7
 8009cd4:	4463      	add	r3, ip
 8009cd6:	22c4      	movs	r2, #196	; 0xc4
 8009cd8:	5a9b      	ldrh	r3, [r3, r2]
 8009cda:	3b03      	subs	r3, #3
 8009cdc:	0019      	movs	r1, r3
 8009cde:	2358      	movs	r3, #88	; 0x58
 8009ce0:	2218      	movs	r2, #24
 8009ce2:	189b      	adds	r3, r3, r2
 8009ce4:	19db      	adds	r3, r3, r7
 8009ce6:	3305      	adds	r3, #5
 8009ce8:	4a51      	ldr	r2, [pc, #324]	; (8009e30 <astronode_send_cmd_rr+0x330>)
 8009cea:	2418      	movs	r4, #24
 8009cec:	1900      	adds	r0, r0, r4
 8009cee:	19c0      	adds	r0, r0, r7
 8009cf0:	6800      	ldr	r0, [r0, #0]
 8009cf2:	f003 fabd 	bl	800d270 <snprintf>
 8009cf6:	0002      	movs	r2, r0
 8009cf8:	23f3      	movs	r3, #243	; 0xf3
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	2118      	movs	r1, #24
 8009cfe:	185b      	adds	r3, r3, r1
 8009d00:	19db      	adds	r3, r3, r7
 8009d02:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009d04:	23fb      	movs	r3, #251	; 0xfb
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	2218      	movs	r2, #24
 8009d0a:	189b      	adds	r3, r3, r2
 8009d0c:	19db      	adds	r3, r3, r7
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e037      	b.n	8009d84 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8009d14:	23fb      	movs	r3, #251	; 0xfb
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	2218      	movs	r2, #24
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	19db      	adds	r3, r3, r7
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	22f4      	movs	r2, #244	; 0xf4
 8009d22:	0052      	lsls	r2, r2, #1
 8009d24:	2118      	movs	r1, #24
 8009d26:	1852      	adds	r2, r2, r1
 8009d28:	19d2      	adds	r2, r2, r7
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	5cd3      	ldrb	r3, [r2, r3]
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	4b40      	ldr	r3, [pc, #256]	; (8009e34 <astronode_send_cmd_rr+0x334>)
 8009d32:	18d3      	adds	r3, r2, r3
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	001a      	movs	r2, r3
 8009d38:	2397      	movs	r3, #151	; 0x97
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	d105      	bne.n	8009d4a <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8009d3e:	4b3e      	ldr	r3, [pc, #248]	; (8009e38 <astronode_send_cmd_rr+0x338>)
 8009d40:	0018      	movs	r0, r3
 8009d42:	f7f9 f9d1 	bl	80030e8 <send_debug_logs>
                    return false;
 8009d46:	2300      	movs	r3, #0
 8009d48:	e056      	b.n	8009df8 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8009d4a:	20fb      	movs	r0, #251	; 0xfb
 8009d4c:	0040      	lsls	r0, r0, #1
 8009d4e:	2318      	movs	r3, #24
 8009d50:	18c3      	adds	r3, r0, r3
 8009d52:	19db      	adds	r3, r3, r7
 8009d54:	781a      	ldrb	r2, [r3, #0]
 8009d56:	2318      	movs	r3, #24
 8009d58:	18c3      	adds	r3, r0, r3
 8009d5a:	19db      	adds	r3, r3, r7
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	69f9      	ldr	r1, [r7, #28]
 8009d60:	18cb      	adds	r3, r1, r3
 8009d62:	21f4      	movs	r1, #244	; 0xf4
 8009d64:	0049      	lsls	r1, r1, #1
 8009d66:	2418      	movs	r4, #24
 8009d68:	1909      	adds	r1, r1, r4
 8009d6a:	19c9      	adds	r1, r1, r7
 8009d6c:	6809      	ldr	r1, [r1, #0]
 8009d6e:	5c8a      	ldrb	r2, [r1, r2]
 8009d70:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009d72:	2318      	movs	r3, #24
 8009d74:	18c3      	adds	r3, r0, r3
 8009d76:	19db      	adds	r3, r3, r7
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	2318      	movs	r3, #24
 8009d7c:	18c3      	adds	r3, r0, r3
 8009d7e:	19db      	adds	r3, r3, r7
 8009d80:	3201      	adds	r2, #1
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	23fb      	movs	r3, #251	; 0xfb
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	2218      	movs	r2, #24
 8009d8a:	189b      	adds	r3, r3, r2
 8009d8c:	19db      	adds	r3, r3, r7
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	21f3      	movs	r1, #243	; 0xf3
 8009d94:	0049      	lsls	r1, r1, #1
 8009d96:	2218      	movs	r2, #24
 8009d98:	188a      	adds	r2, r1, r2
 8009d9a:	19d2      	adds	r2, r2, r7
 8009d9c:	8812      	ldrh	r2, [r2, #0]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d8b8      	bhi.n	8009d14 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8009da2:	23f8      	movs	r3, #248	; 0xf8
 8009da4:	33ff      	adds	r3, #255	; 0xff
 8009da6:	2218      	movs	r2, #24
 8009da8:	189b      	adds	r3, r3, r2
 8009daa:	19db      	adds	r3, r3, r7
 8009dac:	2201      	movs	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8009db0:	2318      	movs	r3, #24
 8009db2:	18cb      	adds	r3, r1, r3
 8009db4:	19db      	adds	r3, r3, r7
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	18d3      	adds	r3, r2, r3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <astronode_send_cmd_rr+0x33c>)
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	f7f9 f990 	bl	80030e8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8009dc8:	2358      	movs	r3, #88	; 0x58
 8009dca:	2218      	movs	r2, #24
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	19db      	adds	r3, r3, r7
 8009dd0:	1d5a      	adds	r2, r3, #5
 8009dd2:	491b      	ldr	r1, [pc, #108]	; (8009e40 <astronode_send_cmd_rr+0x340>)
 8009dd4:	24f4      	movs	r4, #244	; 0xf4
 8009dd6:	0064      	lsls	r4, r4, #1
 8009dd8:	2318      	movs	r3, #24
 8009dda:	18e3      	adds	r3, r4, r3
 8009ddc:	19db      	adds	r3, r3, r7
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	0018      	movs	r0, r3
 8009de2:	f003 fa79 	bl	800d2d8 <sprintf>
            send_debug_logs(command_content);
 8009de6:	2318      	movs	r3, #24
 8009de8:	18e3      	adds	r3, r4, r3
 8009dea:	19db      	adds	r3, r3, r7
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	0018      	movs	r0, r3
 8009df0:	f7f9 f97a 	bl	80030e8 <send_debug_logs>
 8009df4:	46b5      	mov	sp, r6
 8009df6:	e005      	b.n	8009e04 <astronode_send_cmd_rr+0x304>
                return result ;
 8009df8:	46b5      	mov	sp, r6
 8009dfa:	e009      	b.n	8009e10 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8009dfc:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <astronode_send_cmd_rr+0x344>)
 8009dfe:	0018      	movs	r0, r3
 8009e00:	f7f9 f972 	bl	80030e8 <send_debug_logs>
        }
    }
    return result ;
 8009e04:	23f8      	movs	r3, #248	; 0xf8
 8009e06:	33ff      	adds	r3, #255	; 0xff
 8009e08:	2218      	movs	r2, #24
 8009e0a:	189b      	adds	r3, r3, r2
 8009e0c:	19db      	adds	r3, r3, r7
 8009e0e:	781b      	ldrb	r3, [r3, #0]
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	2385      	movs	r3, #133	; 0x85
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	449d      	add	sp, r3
 8009e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1c:	fffffdec 	.word	0xfffffdec
 8009e20:	fffffe60 	.word	0xfffffe60
 8009e24:	08014fb0 	.word	0x08014fb0
 8009e28:	08014fcc 	.word	0x08014fcc
 8009e2c:	0801501c 	.word	0x0801501c
 8009e30:	08014640 	.word	0x08014640
 8009e34:	08015b88 	.word	0x08015b88
 8009e38:	08015030 	.word	0x08015030
 8009e3c:	0801505c 	.word	0x0801505c
 8009e40:	08015074 	.word	0x08015074
 8009e44:	08015078 	.word	0x08015078

08009e48 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009e4c:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <is_sak_available+0x10>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
}
 8009e50:	0018      	movs	r0, r3
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	20000b1c 	.word	0x20000b1c

08009e5c <is_astronode_reset>:

bool is_astronode_reset()
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <is_astronode_reset+0x10>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
}
 8009e64:	0018      	movs	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	20000b1d 	.word	0x20000b1d

08009e70 <is_command_available>:

bool is_command_available()
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009e74:	4b02      	ldr	r3, [pc, #8]	; (8009e80 <is_command_available+0x10>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
}
 8009e78:	0018      	movs	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	46c0      	nop			; (mov r8, r8)
 8009e80:	20000b1e 	.word	0x20000b1e

08009e84 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	0002      	movs	r2, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	1dfb      	adds	r3, r7, #7
 8009e90:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009e92:	1dfb      	adds	r3, r7, #7
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2b2f      	cmp	r3, #47	; 0x2f
 8009e98:	d90b      	bls.n	8009eb2 <ascii_to_value+0x2e>
 8009e9a:	1dfb      	adds	r3, r7, #7
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b39      	cmp	r3, #57	; 0x39
 8009ea0:	d807      	bhi.n	8009eb2 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009ea2:	1dfb      	adds	r3, r7, #7
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	3b30      	subs	r3, #48	; 0x30
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	701a      	strb	r2, [r3, #0]
        return true;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e010      	b.n	8009ed4 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009eb2:	1dfb      	adds	r3, r7, #7
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b40      	cmp	r3, #64	; 0x40
 8009eb8:	d90b      	bls.n	8009ed2 <ascii_to_value+0x4e>
 8009eba:	1dfb      	adds	r3, r7, #7
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b46      	cmp	r3, #70	; 0x46
 8009ec0:	d807      	bhi.n	8009ed2 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009ec2:	1dfb      	adds	r3, r7, #7
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	3b37      	subs	r3, #55	; 0x37
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	701a      	strb	r2, [r3, #0]
        return true;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009ed2:	2300      	movs	r3, #0
    }
}
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b002      	add	sp, #8
 8009eda:	bd80      	pop	{r7, pc}

08009edc <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009ee6:	250e      	movs	r5, #14
 8009ee8:	197b      	adds	r3, r7, r5
 8009eea:	2200      	movs	r2, #0
 8009eec:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009eee:	197b      	adds	r3, r7, r5
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	197a      	adds	r2, r7, r5
 8009ef4:	1c59      	adds	r1, r3, #1
 8009ef6:	8011      	strh	r1, [r2, #0]
 8009ef8:	001a      	movs	r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	189b      	adds	r3, r3, r2
 8009efe:	2202      	movs	r2, #2
 8009f00:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	260a      	movs	r6, #10
 8009f06:	19bc      	adds	r4, r7, r6
 8009f08:	4a44      	ldr	r2, [pc, #272]	; (800a01c <astronode_create_request_transport+0x140>)
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f000 fa7d 	bl	800a40c <calculate_crc>
 8009f12:	0003      	movs	r3, r0
 8009f14:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	1c58      	adds	r0, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	22c4      	movs	r2, #196	; 0xc4
 8009f1e:	5a99      	ldrh	r1, [r3, r2]
 8009f20:	19bc      	adds	r4, r7, r6
 8009f22:	19bb      	adds	r3, r7, r6
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	001a      	movs	r2, r3
 8009f28:	f000 fa70 	bl	800a40c <calculate_crc>
 8009f2c:	0003      	movs	r3, r0
 8009f2e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009f30:	19bb      	adds	r3, r7, r6
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	b21a      	sxth	r2, r3
 8009f38:	0031      	movs	r1, r6
 8009f3a:	19bb      	adds	r3, r7, r6
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	b21b      	sxth	r3, r3
 8009f44:	4313      	orrs	r3, r2
 8009f46:	b21a      	sxth	r2, r3
 8009f48:	187b      	adds	r3, r7, r1
 8009f4a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	7818      	ldrb	r0, [r3, #0]
 8009f50:	197b      	adds	r3, r7, r5
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	18d3      	adds	r3, r2, r3
 8009f58:	0019      	movs	r1, r3
 8009f5a:	f000 fbeb 	bl	800a734 <uint8_to_ascii_buffer>
    index += 2;
 8009f5e:	197b      	adds	r3, r7, r5
 8009f60:	197a      	adds	r2, r7, r5
 8009f62:	8812      	ldrh	r2, [r2, #0]
 8009f64:	3202      	adds	r2, #2
 8009f66:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f68:	230c      	movs	r3, #12
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	e017      	b.n	8009fa2 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009f72:	240c      	movs	r4, #12
 8009f74:	193b      	adds	r3, r7, r4
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	18d3      	adds	r3, r2, r3
 8009f7c:	7858      	ldrb	r0, [r3, #1]
 8009f7e:	250e      	movs	r5, #14
 8009f80:	197b      	adds	r3, r7, r5
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	18d3      	adds	r3, r2, r3
 8009f88:	0019      	movs	r1, r3
 8009f8a:	f000 fbd3 	bl	800a734 <uint8_to_ascii_buffer>
        index += 2;
 8009f8e:	197b      	adds	r3, r7, r5
 8009f90:	197a      	adds	r2, r7, r5
 8009f92:	8812      	ldrh	r2, [r2, #0]
 8009f94:	3202      	adds	r2, #2
 8009f96:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f98:	193b      	adds	r3, r7, r4
 8009f9a:	881a      	ldrh	r2, [r3, #0]
 8009f9c:	193b      	adds	r3, r7, r4
 8009f9e:	3201      	adds	r2, #1
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	22c4      	movs	r2, #196	; 0xc4
 8009fa6:	5a9b      	ldrh	r3, [r3, r2]
 8009fa8:	220c      	movs	r2, #12
 8009faa:	18ba      	adds	r2, r7, r2
 8009fac:	8812      	ldrh	r2, [r2, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d3df      	bcc.n	8009f72 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009fb2:	250a      	movs	r5, #10
 8009fb4:	197b      	adds	r3, r7, r5
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	0a1b      	lsrs	r3, r3, #8
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	b2d8      	uxtb	r0, r3
 8009fbe:	240e      	movs	r4, #14
 8009fc0:	193b      	adds	r3, r7, r4
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	18d3      	adds	r3, r2, r3
 8009fc8:	0019      	movs	r1, r3
 8009fca:	f000 fbb3 	bl	800a734 <uint8_to_ascii_buffer>
    index += 2;
 8009fce:	0021      	movs	r1, r4
 8009fd0:	187b      	adds	r3, r7, r1
 8009fd2:	187a      	adds	r2, r7, r1
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	3202      	adds	r2, #2
 8009fd8:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8009fda:	197b      	adds	r3, r7, r5
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b2d8      	uxtb	r0, r3
 8009fe0:	000c      	movs	r4, r1
 8009fe2:	187b      	adds	r3, r7, r1
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	18d3      	adds	r3, r2, r3
 8009fea:	0019      	movs	r1, r3
 8009fec:	f000 fba2 	bl	800a734 <uint8_to_ascii_buffer>
    index += 2;
 8009ff0:	0020      	movs	r0, r4
 8009ff2:	183b      	adds	r3, r7, r0
 8009ff4:	183a      	adds	r2, r7, r0
 8009ff6:	8812      	ldrh	r2, [r2, #0]
 8009ff8:	3202      	adds	r2, #2
 8009ffa:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8009ffc:	183b      	adds	r3, r7, r0
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	183a      	adds	r2, r7, r0
 800a002:	1c59      	adds	r1, r3, #1
 800a004:	8011      	strh	r1, [r2, #0]
 800a006:	001a      	movs	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	189b      	adds	r3, r3, r2
 800a00c:	2203      	movs	r2, #3
 800a00e:	701a      	strb	r2, [r3, #0]

    return index;
 800a010:	183b      	adds	r3, r7, r0
 800a012:	881b      	ldrh	r3, [r3, #0]
}
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	b005      	add	sp, #20
 800a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01c:	0000ffff 	.word	0x0000ffff

0800a020 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 800a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a022:	b089      	sub	sp, #36	; 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	230a      	movs	r3, #10
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	1c0a      	adds	r2, r1, #0
 800a030:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d005      	beq.n	800a046 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800a03a:	4bbd      	ldr	r3, [pc, #756]	; (800a330 <astronode_decode_answer_transport+0x310>)
 800a03c:	0018      	movs	r0, r3
 800a03e:	f7f9 f853 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a042:	2300      	movs	r3, #0
 800a044:	e170      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800a046:	210a      	movs	r1, #10
 800a048:	187b      	adds	r3, r7, r1
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	2201      	movs	r2, #1
 800a04e:	4013      	ands	r3, r2
 800a050:	b29b      	uxth	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d103      	bne.n	800a05e <astronode_decode_answer_transport+0x3e>
 800a056:	187b      	adds	r3, r7, r1
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	2b07      	cmp	r3, #7
 800a05c:	d805      	bhi.n	800a06a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800a05e:	4bb5      	ldr	r3, [pc, #724]	; (800a334 <astronode_decode_answer_transport+0x314>)
 800a060:	0018      	movs	r0, r3
 800a062:	f7f9 f841 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a066:	2300      	movs	r3, #0
 800a068:	e15e      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800a06a:	230a      	movs	r3, #10
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	3b08      	subs	r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	da00      	bge.n	800a078 <astronode_decode_answer_transport+0x58>
 800a076:	3301      	adds	r3, #1
 800a078:	105b      	asrs	r3, r3, #1
 800a07a:	b299      	uxth	r1, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	22c4      	movs	r2, #196	; 0xc4
 800a080:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800a082:	230a      	movs	r3, #10
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	3b01      	subs	r3, #1
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	18d3      	adds	r3, r2, r3
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b03      	cmp	r3, #3
 800a092:	d005      	beq.n	800a0a0 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800a094:	4ba8      	ldr	r3, [pc, #672]	; (800a338 <astronode_decode_answer_transport+0x318>)
 800a096:	0018      	movs	r0, r3
 800a098:	f7f9 f826 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	e143      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800a0a0:	2117      	movs	r1, #23
 800a0a2:	187b      	adds	r3, r7, r1
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800a0a8:	2416      	movs	r4, #22
 800a0aa:	193b      	adds	r3, r7, r4
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	187a      	adds	r2, r7, r1
 800a0b8:	0011      	movs	r1, r2
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f7ff fee2 	bl	8009e84 <ascii_to_value>
 800a0c0:	0003      	movs	r3, r0
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4053      	eors	r3, r2
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10e      	bne.n	800a0ec <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	193a      	adds	r2, r7, r4
 800a0d6:	0011      	movs	r1, r2
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f7ff fed3 	bl	8009e84 <ascii_to_value>
 800a0de:	0003      	movs	r3, r0
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4053      	eors	r3, r2
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a0ec:	4b93      	ldr	r3, [pc, #588]	; (800a33c <astronode_decode_answer_transport+0x31c>)
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f7f8 fffa 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e117      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800a0f8:	2317      	movs	r3, #23
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	b2da      	uxtb	r2, r3
 800a102:	2316      	movs	r3, #22
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	18d3      	adds	r3, r2, r3
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a110:	231e      	movs	r3, #30
 800a112:	18fb      	adds	r3, r7, r3
 800a114:	2203      	movs	r2, #3
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	231c      	movs	r3, #28
 800a11a:	18fb      	adds	r3, r7, r3
 800a11c:	2200      	movs	r2, #0
 800a11e:	801a      	strh	r2, [r3, #0]
 800a120:	e045      	b.n	800a1ae <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800a122:	241e      	movs	r4, #30
 800a124:	193b      	adds	r3, r7, r4
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	18d3      	adds	r3, r2, r3
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2217      	movs	r2, #23
 800a130:	18ba      	adds	r2, r7, r2
 800a132:	0011      	movs	r1, r2
 800a134:	0018      	movs	r0, r3
 800a136:	f7ff fea5 	bl	8009e84 <ascii_to_value>
 800a13a:	0003      	movs	r3, r0
 800a13c:	001a      	movs	r2, r3
 800a13e:	2301      	movs	r3, #1
 800a140:	4053      	eors	r3, r2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d112      	bne.n	800a16e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800a148:	193b      	adds	r3, r7, r4
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	3301      	adds	r3, #1
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	18d3      	adds	r3, r2, r3
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2216      	movs	r2, #22
 800a156:	18ba      	adds	r2, r7, r2
 800a158:	0011      	movs	r1, r2
 800a15a:	0018      	movs	r0, r3
 800a15c:	f7ff fe92 	bl	8009e84 <ascii_to_value>
 800a160:	0003      	movs	r3, r0
 800a162:	001a      	movs	r2, r3
 800a164:	2301      	movs	r3, #1
 800a166:	4053      	eors	r3, r2
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a16e:	4b73      	ldr	r3, [pc, #460]	; (800a33c <astronode_decode_answer_transport+0x31c>)
 800a170:	0018      	movs	r0, r3
 800a172:	f7f8 ffb9 	bl	80030e8 <send_debug_logs>
            return RS_FAILURE;
 800a176:	2300      	movs	r3, #0
 800a178:	e0d6      	b.n	800a328 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800a17a:	2317      	movs	r3, #23
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	b2d9      	uxtb	r1, r3
 800a184:	2316      	movs	r3, #22
 800a186:	18fb      	adds	r3, r7, r3
 800a188:	781a      	ldrb	r2, [r3, #0]
 800a18a:	201c      	movs	r0, #28
 800a18c:	183b      	adds	r3, r7, r0
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	1838      	adds	r0, r7, r0
 800a192:	1c5c      	adds	r4, r3, #1
 800a194:	8004      	strh	r4, [r0, #0]
 800a196:	0018      	movs	r0, r3
 800a198:	188b      	adds	r3, r1, r2
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	181b      	adds	r3, r3, r0
 800a1a0:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a1a2:	221e      	movs	r2, #30
 800a1a4:	18bb      	adds	r3, r7, r2
 800a1a6:	18ba      	adds	r2, r7, r2
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	3202      	adds	r2, #2
 800a1ac:	801a      	strh	r2, [r3, #0]
 800a1ae:	231e      	movs	r3, #30
 800a1b0:	18fb      	adds	r3, r7, r3
 800a1b2:	881a      	ldrh	r2, [r3, #0]
 800a1b4:	260a      	movs	r6, #10
 800a1b6:	19bb      	adds	r3, r7, r6
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	3b05      	subs	r3, #5
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	dbb0      	blt.n	800a122 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	251a      	movs	r5, #26
 800a1c4:	197c      	adds	r4, r7, r5
 800a1c6:	4a5e      	ldr	r2, [pc, #376]	; (800a340 <astronode_decode_answer_transport+0x320>)
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 f91e 	bl	800a40c <calculate_crc>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	1c58      	adds	r0, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	22c4      	movs	r2, #196	; 0xc4
 800a1dc:	5a99      	ldrh	r1, [r3, r2]
 800a1de:	197c      	adds	r4, r7, r5
 800a1e0:	197b      	adds	r3, r7, r5
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	001a      	movs	r2, r3
 800a1e6:	f000 f911 	bl	800a40c <calculate_crc>
 800a1ea:	0003      	movs	r3, r0
 800a1ec:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800a1ee:	197b      	adds	r3, r7, r5
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	b21a      	sxth	r2, r3
 800a1f6:	0029      	movs	r1, r5
 800a1f8:	197b      	adds	r3, r7, r5
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	b21b      	sxth	r3, r3
 800a202:	4313      	orrs	r3, r2
 800a204:	b21a      	sxth	r2, r3
 800a206:	187b      	adds	r3, r7, r1
 800a208:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800a20a:	19bb      	adds	r3, r7, r6
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	3b05      	subs	r3, #5
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	18d3      	adds	r3, r2, r3
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2217      	movs	r2, #23
 800a218:	18ba      	adds	r2, r7, r2
 800a21a:	0011      	movs	r1, r2
 800a21c:	0018      	movs	r0, r3
 800a21e:	f7ff fe31 	bl	8009e84 <ascii_to_value>
 800a222:	0003      	movs	r3, r0
 800a224:	001a      	movs	r2, r3
 800a226:	2301      	movs	r3, #1
 800a228:	4053      	eors	r3, r2
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d112      	bne.n	800a256 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800a230:	19bb      	adds	r3, r7, r6
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	3b04      	subs	r3, #4
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	18d3      	adds	r3, r2, r3
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2216      	movs	r2, #22
 800a23e:	18ba      	adds	r2, r7, r2
 800a240:	0011      	movs	r1, r2
 800a242:	0018      	movs	r0, r3
 800a244:	f7ff fe1e 	bl	8009e84 <ascii_to_value>
 800a248:	0003      	movs	r3, r0
 800a24a:	001a      	movs	r2, r3
 800a24c:	2301      	movs	r3, #1
 800a24e:	4053      	eors	r3, r2
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a256:	4b39      	ldr	r3, [pc, #228]	; (800a33c <astronode_decode_answer_transport+0x31c>)
 800a258:	0018      	movs	r0, r3
 800a25a:	f7f8 ff45 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a25e:	2300      	movs	r3, #0
 800a260:	e062      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800a262:	2017      	movs	r0, #23
 800a264:	183b      	adds	r3, r7, r0
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	031b      	lsls	r3, r3, #12
 800a26c:	b299      	uxth	r1, r3
 800a26e:	2416      	movs	r4, #22
 800a270:	193b      	adds	r3, r7, r4
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	b29a      	uxth	r2, r3
 800a27a:	2318      	movs	r3, #24
 800a27c:	18fb      	adds	r3, r7, r3
 800a27e:	188a      	adds	r2, r1, r2
 800a280:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800a282:	250a      	movs	r5, #10
 800a284:	197b      	adds	r3, r7, r5
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	3b03      	subs	r3, #3
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	18d3      	adds	r3, r2, r3
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	183a      	adds	r2, r7, r0
 800a292:	0011      	movs	r1, r2
 800a294:	0018      	movs	r0, r3
 800a296:	f7ff fdf5 	bl	8009e84 <ascii_to_value>
 800a29a:	0003      	movs	r3, r0
 800a29c:	001a      	movs	r2, r3
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4053      	eors	r3, r2
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d111      	bne.n	800a2cc <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800a2a8:	197b      	adds	r3, r7, r5
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	3b02      	subs	r3, #2
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	18d3      	adds	r3, r2, r3
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	193a      	adds	r2, r7, r4
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f7ff fde3 	bl	8009e84 <ascii_to_value>
 800a2be:	0003      	movs	r3, r0
 800a2c0:	001a      	movs	r2, r3
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4053      	eors	r3, r2
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a2cc:	4b1b      	ldr	r3, [pc, #108]	; (800a33c <astronode_decode_answer_transport+0x31c>)
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f7f8 ff0a 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e027      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800a2d8:	2317      	movs	r3, #23
 800a2da:	18fb      	adds	r3, r7, r3
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	2316      	movs	r3, #22
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	18d3      	adds	r3, r2, r3
 800a2ee:	b299      	uxth	r1, r3
 800a2f0:	2018      	movs	r0, #24
 800a2f2:	183b      	adds	r3, r7, r0
 800a2f4:	183a      	adds	r2, r7, r0
 800a2f6:	8812      	ldrh	r2, [r2, #0]
 800a2f8:	188a      	adds	r2, r1, r2
 800a2fa:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800a2fc:	183a      	adds	r2, r7, r0
 800a2fe:	231a      	movs	r3, #26
 800a300:	18fb      	adds	r3, r7, r3
 800a302:	8812      	ldrh	r2, [r2, #0]
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d005      	beq.n	800a316 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800a30a:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <astronode_decode_answer_transport+0x324>)
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7f8 feeb 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a312:	2300      	movs	r3, #0
 800a314:	e008      	b.n	800a328 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	2bff      	cmp	r3, #255	; 0xff
 800a31c:	d103      	bne.n	800a326 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	0018      	movs	r0, r3
 800a322:	f000 f8c3 	bl	800a4ac <check_for_error>
    }

    return RS_SUCCESS;
 800a326:	2301      	movs	r3, #1
}
 800a328:	0018      	movs	r0, r3
 800a32a:	46bd      	mov	sp, r7
 800a32c:	b009      	add	sp, #36	; 0x24
 800a32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a330:	08015108 	.word	0x08015108
 800a334:	08015158 	.word	0x08015158
 800a338:	080151a8 	.word	0x080151a8
 800a33c:	080151f8 	.word	0x080151f8
 800a340:	0000ffff 	.word	0x0000ffff
 800a344:	08015244 	.word	0x08015244

0800a348 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800a348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34a:	4c2b      	ldr	r4, [pc, #172]	; (800a3f8 <astronode_transport_send_receive+0xb0>)
 800a34c:	44a5      	add	sp, r4
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a354:	4b29      	ldr	r3, [pc, #164]	; (800a3fc <astronode_transport_send_receive+0xb4>)
 800a356:	25ca      	movs	r5, #202	; 0xca
 800a358:	00ad      	lsls	r5, r5, #2
 800a35a:	195b      	adds	r3, r3, r5
 800a35c:	19db      	adds	r3, r3, r7
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	3304      	adds	r3, #4
 800a364:	22c4      	movs	r2, #196	; 0xc4
 800a366:	0052      	lsls	r2, r2, #1
 800a368:	2100      	movs	r1, #0
 800a36a:	0018      	movs	r0, r3
 800a36c:	f003 f84a 	bl	800d404 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a370:	4b23      	ldr	r3, [pc, #140]	; (800a400 <astronode_transport_send_receive+0xb8>)
 800a372:	195b      	adds	r3, r3, r5
 800a374:	19db      	adds	r3, r3, r7
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	3304      	adds	r3, #4
 800a37c:	22c4      	movs	r2, #196	; 0xc4
 800a37e:	0052      	lsls	r2, r2, #1
 800a380:	2100      	movs	r1, #0
 800a382:	0018      	movs	r0, r3
 800a384:	f003 f83e 	bl	800d404 <memset>
    uint16_t answer_length =  0;
 800a388:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <astronode_transport_send_receive+0xbc>)
 800a38a:	195b      	adds	r3, r3, r5
 800a38c:	19db      	adds	r3, r3, r7
 800a38e:	2200      	movs	r2, #0
 800a390:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800a392:	4e1d      	ldr	r6, [pc, #116]	; (800a408 <astronode_transport_send_receive+0xc0>)
 800a394:	19bc      	adds	r4, r7, r6
 800a396:	23cc      	movs	r3, #204	; 0xcc
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	18fa      	adds	r2, r7, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	0011      	movs	r1, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f7ff fd9b 	bl	8009edc <astronode_create_request_transport>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800a3aa:	19bb      	adds	r3, r7, r6
 800a3ac:	881a      	ldrh	r2, [r3, #0]
 800a3ae:	23cc      	movs	r3, #204	; 0xcc
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	18fb      	adds	r3, r7, r3
 800a3b4:	0011      	movs	r1, r2
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f7f9 fb4c 	bl	8003a54 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800a3bc:	230a      	movs	r3, #10
 800a3be:	18fa      	adds	r2, r7, r3
 800a3c0:	240c      	movs	r4, #12
 800a3c2:	193b      	adds	r3, r7, r4
 800a3c4:	0011      	movs	r1, r2
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f000 f92c 	bl	800a624 <receive_astronode_answer>
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d10a      	bne.n	800a3e8 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <astronode_transport_send_receive+0xbc>)
 800a3d4:	195b      	adds	r3, r3, r5
 800a3d6:	19db      	adds	r3, r3, r7
 800a3d8:	8819      	ldrh	r1, [r3, #0]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	193b      	adds	r3, r7, r4
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f7ff fe1e 	bl	800a020 <astronode_decode_answer_transport>
 800a3e4:	0003      	movs	r3, r0
 800a3e6:	e000      	b.n	800a3ea <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800a3e8:	2300      	movs	r3, #0
    }
}
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	23cb      	movs	r3, #203	; 0xcb
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	449d      	add	sp, r3
 800a3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	fffffcd4 	.word	0xfffffcd4
 800a3fc:	fffffe70 	.word	0xfffffe70
 800a400:	fffffce4 	.word	0xfffffce4
 800a404:	fffffce2 	.word	0xfffffce2
 800a408:	00000326 	.word	0x00000326

0800a40c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	0008      	movs	r0, r1
 800a416:	0011      	movs	r1, r2
 800a418:	1cbb      	adds	r3, r7, #2
 800a41a:	1c02      	adds	r2, r0, #0
 800a41c:	801a      	strh	r2, [r3, #0]
 800a41e:	003b      	movs	r3, r7
 800a420:	1c0a      	adds	r2, r1, #0
 800a422:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800a424:	230e      	movs	r3, #14
 800a426:	18fb      	adds	r3, r7, r3
 800a428:	003a      	movs	r2, r7
 800a42a:	8812      	ldrh	r2, [r2, #0]
 800a42c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800a42e:	e02e      	b.n	800a48e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800a430:	240e      	movs	r4, #14
 800a432:	193b      	adds	r3, r7, r4
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	0a1b      	lsrs	r3, r3, #8
 800a438:	b299      	uxth	r1, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b29a      	uxth	r2, r3
 800a444:	200c      	movs	r0, #12
 800a446:	183b      	adds	r3, r7, r0
 800a448:	404a      	eors	r2, r1
 800a44a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800a44c:	183b      	adds	r3, r7, r0
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	091b      	lsrs	r3, r3, #4
 800a452:	b299      	uxth	r1, r3
 800a454:	183b      	adds	r3, r7, r0
 800a456:	183a      	adds	r2, r7, r0
 800a458:	8812      	ldrh	r2, [r2, #0]
 800a45a:	404a      	eors	r2, r1
 800a45c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800a45e:	0021      	movs	r1, r4
 800a460:	187b      	adds	r3, r7, r1
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	b21a      	sxth	r2, r3
 800a468:	183b      	adds	r3, r7, r0
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	031b      	lsls	r3, r3, #12
 800a46e:	b21b      	sxth	r3, r3
 800a470:	4053      	eors	r3, r2
 800a472:	b21a      	sxth	r2, r3
 800a474:	183b      	adds	r3, r7, r0
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	015b      	lsls	r3, r3, #5
 800a47a:	b21b      	sxth	r3, r3
 800a47c:	4053      	eors	r3, r2
 800a47e:	b21a      	sxth	r2, r3
 800a480:	183b      	adds	r3, r7, r0
 800a482:	2000      	movs	r0, #0
 800a484:	5e1b      	ldrsh	r3, [r3, r0]
 800a486:	4053      	eors	r3, r2
 800a488:	b21a      	sxth	r2, r3
 800a48a:	187b      	adds	r3, r7, r1
 800a48c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800a48e:	1cbb      	adds	r3, r7, #2
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	1cba      	adds	r2, r7, #2
 800a494:	1e59      	subs	r1, r3, #1
 800a496:	8011      	strh	r1, [r2, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1c9      	bne.n	800a430 <calculate_crc+0x24>
    }
    return crc;
 800a49c:	230e      	movs	r3, #14
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	881b      	ldrh	r3, [r3, #0]
}
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b005      	add	sp, #20
 800a4a8:	bd90      	pop	{r4, r7, pc}
	...

0800a4ac <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	b299      	uxth	r1, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	789b      	ldrb	r3, [r3, #2]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	200e      	movs	r0, #14
 800a4c6:	183b      	adds	r3, r7, r0
 800a4c8:	188a      	adds	r2, r1, r2
 800a4ca:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800a4cc:	183b      	adds	r3, r7, r0
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	4a40      	ldr	r2, [pc, #256]	; (800a5d4 <check_for_error+0x128>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d100      	bne.n	800a4d8 <check_for_error+0x2c>
 800a4d6:	e06f      	b.n	800a5b8 <check_for_error+0x10c>
 800a4d8:	4a3e      	ldr	r2, [pc, #248]	; (800a5d4 <check_for_error+0x128>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	dd00      	ble.n	800a4e0 <check_for_error+0x34>
 800a4de:	e070      	b.n	800a5c2 <check_for_error+0x116>
 800a4e0:	4a3d      	ldr	r2, [pc, #244]	; (800a5d8 <check_for_error+0x12c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d100      	bne.n	800a4e8 <check_for_error+0x3c>
 800a4e6:	e062      	b.n	800a5ae <check_for_error+0x102>
 800a4e8:	4a3b      	ldr	r2, [pc, #236]	; (800a5d8 <check_for_error+0x12c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	dd00      	ble.n	800a4f0 <check_for_error+0x44>
 800a4ee:	e068      	b.n	800a5c2 <check_for_error+0x116>
 800a4f0:	4a3a      	ldr	r2, [pc, #232]	; (800a5dc <check_for_error+0x130>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d056      	beq.n	800a5a4 <check_for_error+0xf8>
 800a4f6:	4a39      	ldr	r2, [pc, #228]	; (800a5dc <check_for_error+0x130>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	dd00      	ble.n	800a4fe <check_for_error+0x52>
 800a4fc:	e061      	b.n	800a5c2 <check_for_error+0x116>
 800a4fe:	4a38      	ldr	r2, [pc, #224]	; (800a5e0 <check_for_error+0x134>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d04a      	beq.n	800a59a <check_for_error+0xee>
 800a504:	4a36      	ldr	r2, [pc, #216]	; (800a5e0 <check_for_error+0x134>)
 800a506:	4293      	cmp	r3, r2
 800a508:	dc5b      	bgt.n	800a5c2 <check_for_error+0x116>
 800a50a:	4a36      	ldr	r2, [pc, #216]	; (800a5e4 <check_for_error+0x138>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d03f      	beq.n	800a590 <check_for_error+0xe4>
 800a510:	4a34      	ldr	r2, [pc, #208]	; (800a5e4 <check_for_error+0x138>)
 800a512:	4293      	cmp	r3, r2
 800a514:	dc55      	bgt.n	800a5c2 <check_for_error+0x116>
 800a516:	4a34      	ldr	r2, [pc, #208]	; (800a5e8 <check_for_error+0x13c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d034      	beq.n	800a586 <check_for_error+0xda>
 800a51c:	4a32      	ldr	r2, [pc, #200]	; (800a5e8 <check_for_error+0x13c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	dc4f      	bgt.n	800a5c2 <check_for_error+0x116>
 800a522:	4a32      	ldr	r2, [pc, #200]	; (800a5ec <check_for_error+0x140>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d029      	beq.n	800a57c <check_for_error+0xd0>
 800a528:	4a30      	ldr	r2, [pc, #192]	; (800a5ec <check_for_error+0x140>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	dc49      	bgt.n	800a5c2 <check_for_error+0x116>
 800a52e:	4a30      	ldr	r2, [pc, #192]	; (800a5f0 <check_for_error+0x144>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d01e      	beq.n	800a572 <check_for_error+0xc6>
 800a534:	4a2e      	ldr	r2, [pc, #184]	; (800a5f0 <check_for_error+0x144>)
 800a536:	4293      	cmp	r3, r2
 800a538:	dc43      	bgt.n	800a5c2 <check_for_error+0x116>
 800a53a:	2222      	movs	r2, #34	; 0x22
 800a53c:	32ff      	adds	r2, #255	; 0xff
 800a53e:	4293      	cmp	r3, r2
 800a540:	d012      	beq.n	800a568 <check_for_error+0xbc>
 800a542:	2291      	movs	r2, #145	; 0x91
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	4293      	cmp	r3, r2
 800a548:	da3b      	bge.n	800a5c2 <check_for_error+0x116>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d002      	beq.n	800a554 <check_for_error+0xa8>
 800a54e:	2b11      	cmp	r3, #17
 800a550:	d005      	beq.n	800a55e <check_for_error+0xb2>
 800a552:	e036      	b.n	800a5c2 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800a554:	4b27      	ldr	r3, [pc, #156]	; (800a5f4 <check_for_error+0x148>)
 800a556:	0018      	movs	r0, r3
 800a558:	f7f8 fdc6 	bl	80030e8 <send_debug_logs>
            break;
 800a55c:	e036      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800a55e:	4b26      	ldr	r3, [pc, #152]	; (800a5f8 <check_for_error+0x14c>)
 800a560:	0018      	movs	r0, r3
 800a562:	f7f8 fdc1 	bl	80030e8 <send_debug_logs>
            break;
 800a566:	e031      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800a568:	4b24      	ldr	r3, [pc, #144]	; (800a5fc <check_for_error+0x150>)
 800a56a:	0018      	movs	r0, r3
 800a56c:	f7f8 fdbc 	bl	80030e8 <send_debug_logs>
            break;
 800a570:	e02c      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800a572:	4b23      	ldr	r3, [pc, #140]	; (800a600 <check_for_error+0x154>)
 800a574:	0018      	movs	r0, r3
 800a576:	f7f8 fdb7 	bl	80030e8 <send_debug_logs>
            break;
 800a57a:	e027      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800a57c:	4b21      	ldr	r3, [pc, #132]	; (800a604 <check_for_error+0x158>)
 800a57e:	0018      	movs	r0, r3
 800a580:	f7f8 fdb2 	bl	80030e8 <send_debug_logs>
            break;
 800a584:	e022      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800a586:	4b20      	ldr	r3, [pc, #128]	; (800a608 <check_for_error+0x15c>)
 800a588:	0018      	movs	r0, r3
 800a58a:	f7f8 fdad 	bl	80030e8 <send_debug_logs>
            break;
 800a58e:	e01d      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800a590:	4b1e      	ldr	r3, [pc, #120]	; (800a60c <check_for_error+0x160>)
 800a592:	0018      	movs	r0, r3
 800a594:	f7f8 fda8 	bl	80030e8 <send_debug_logs>
            break;
 800a598:	e018      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800a59a:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <check_for_error+0x164>)
 800a59c:	0018      	movs	r0, r3
 800a59e:	f7f8 fda3 	bl	80030e8 <send_debug_logs>
            break;
 800a5a2:	e013      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800a5a4:	4b1b      	ldr	r3, [pc, #108]	; (800a614 <check_for_error+0x168>)
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	f7f8 fd9e 	bl	80030e8 <send_debug_logs>
            break;
 800a5ac:	e00e      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800a5ae:	4b1a      	ldr	r3, [pc, #104]	; (800a618 <check_for_error+0x16c>)
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7f8 fd99 	bl	80030e8 <send_debug_logs>
            break;
 800a5b6:	e009      	b.n	800a5cc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800a5b8:	4b18      	ldr	r3, [pc, #96]	; (800a61c <check_for_error+0x170>)
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f7f8 fd94 	bl	80030e8 <send_debug_logs>
            break;
 800a5c0:	e004      	b.n	800a5cc <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800a5c2:	4b17      	ldr	r3, [pc, #92]	; (800a620 <check_for_error+0x174>)
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f7f8 fd8f 	bl	80030e8 <send_debug_logs>
            break;
 800a5ca:	46c0      	nop			; (mov r8, r8)
    }
}
 800a5cc:	46c0      	nop			; (mov r8, r8)
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b004      	add	sp, #16
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	00004601 	.word	0x00004601
 800a5d8:	00004501 	.word	0x00004501
 800a5dc:	00003501 	.word	0x00003501
 800a5e0:	00002601 	.word	0x00002601
 800a5e4:	00002511 	.word	0x00002511
 800a5e8:	00002501 	.word	0x00002501
 800a5ec:	00000611 	.word	0x00000611
 800a5f0:	00000601 	.word	0x00000601
 800a5f4:	08015288 	.word	0x08015288
 800a5f8:	080152d4 	.word	0x080152d4
 800a5fc:	08015338 	.word	0x08015338
 800a600:	08015370 	.word	0x08015370
 800a604:	08015414 	.word	0x08015414
 800a608:	0801547c 	.word	0x0801547c
 800a60c:	080154dc 	.word	0x080154dc
 800a610:	08015568 	.word	0x08015568
 800a614:	080155c8 	.word	0x080155c8
 800a618:	08015674 	.word	0x08015674
 800a61c:	080156c0 	.word	0x080156c0
 800a620:	08015708 	.word	0x08015708

0800a624 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800a624:	b5b0      	push	{r4, r5, r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800a62e:	230f      	movs	r3, #15
 800a630:	18fb      	adds	r3, r7, r3
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800a636:	2316      	movs	r3, #22
 800a638:	18fb      	adds	r3, r7, r3
 800a63a:	2200      	movs	r2, #0
 800a63c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800a63e:	f7f9 fa27 	bl	8003a90 <get_systick>
 800a642:	0003      	movs	r3, r0
 800a644:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800a646:	2315      	movs	r3, #21
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800a64e:	e054      	b.n	800a6fa <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800a650:	4a34      	ldr	r2, [pc, #208]	; (800a724 <receive_astronode_answer+0x100>)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	0011      	movs	r1, r2
 800a656:	0018      	movs	r0, r3
 800a658:	f7f9 fa22 	bl	8003aa0 <is_systick_timeout_over>
 800a65c:	1e03      	subs	r3, r0, #0
 800a65e:	d005      	beq.n	800a66c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800a660:	4b31      	ldr	r3, [pc, #196]	; (800a728 <receive_astronode_answer+0x104>)
 800a662:	0018      	movs	r0, r3
 800a664:	f7f8 fd40 	bl	80030e8 <send_debug_logs>
            return RS_FAILURE;
 800a668:	2300      	movs	r3, #0
 800a66a:	e057      	b.n	800a71c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800a66c:	250f      	movs	r5, #15
 800a66e:	197b      	adds	r3, r7, r5
 800a670:	0018      	movs	r0, r3
 800a672:	f7f9 fa2b 	bl	8003acc <is_astronode_character_received>
 800a676:	0003      	movs	r3, r0
 800a678:	0019      	movs	r1, r3
 800a67a:	2016      	movs	r0, #22
 800a67c:	183b      	adds	r3, r7, r0
 800a67e:	183a      	adds	r2, r7, r0
 800a680:	8812      	ldrh	r2, [r2, #0]
 800a682:	801a      	strh	r2, [r3, #0]
 800a684:	2415      	movs	r4, #21
 800a686:	193b      	adds	r3, r7, r4
 800a688:	193a      	adds	r2, r7, r4
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	2900      	cmp	r1, #0
 800a690:	d033      	beq.n	800a6fa <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800a692:	197b      	adds	r3, r7, r5
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d105      	bne.n	800a6a6 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800a69a:	193b      	adds	r3, r7, r4
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]
                length = 0;
 800a6a0:	183b      	adds	r3, r7, r0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800a6a6:	2116      	movs	r1, #22
 800a6a8:	187b      	adds	r3, r7, r1
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	18d3      	adds	r3, r2, r3
 800a6b0:	220f      	movs	r2, #15
 800a6b2:	18ba      	adds	r2, r7, r2
 800a6b4:	7812      	ldrb	r2, [r2, #0]
 800a6b6:	701a      	strb	r2, [r3, #0]
            length++;
 800a6b8:	187b      	adds	r3, r7, r1
 800a6ba:	881a      	ldrh	r2, [r3, #0]
 800a6bc:	187b      	adds	r3, r7, r1
 800a6be:	3201      	adds	r2, #1
 800a6c0:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800a6c2:	187b      	adds	r3, r7, r1
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	2bb2      	cmp	r3, #178	; 0xb2
 800a6c8:	d905      	bls.n	800a6d6 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800a6ca:	4b18      	ldr	r3, [pc, #96]	; (800a72c <receive_astronode_answer+0x108>)
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f7f8 fd0b 	bl	80030e8 <send_debug_logs>
                return RS_FAILURE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e022      	b.n	800a71c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800a6d6:	230f      	movs	r3, #15
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d10c      	bne.n	800a6fa <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800a6e0:	2216      	movs	r2, #22
 800a6e2:	18bb      	adds	r3, r7, r2
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d907      	bls.n	800a6fa <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	18ba      	adds	r2, r7, r2
 800a6ee:	8812      	ldrh	r2, [r2, #0]
 800a6f0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800a6f2:	2315      	movs	r3, #21
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800a6fa:	2315      	movs	r3, #21
 800a6fc:	18fb      	adds	r3, r7, r3
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2201      	movs	r2, #1
 800a702:	4053      	eors	r3, r2
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1a2      	bne.n	800a650 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <receive_astronode_answer+0x10c>)
 800a70c:	0018      	movs	r0, r3
 800a70e:	f7f8 fceb 	bl	80030e8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	0018      	movs	r0, r3
 800a716:	f7f8 fce7 	bl	80030e8 <send_debug_logs>

    return RS_SUCCESS;
 800a71a:	2301      	movs	r3, #1
}
 800a71c:	0018      	movs	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	b006      	add	sp, #24
 800a722:	bdb0      	pop	{r4, r5, r7, pc}
 800a724:	000005dc 	.word	0x000005dc
 800a728:	0801572c 	.word	0x0801572c
 800a72c:	08015750 	.word	0x08015750
 800a730:	0801579c 	.word	0x0801579c

0800a734 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	0002      	movs	r2, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	1dfb      	adds	r3, r7, #7
 800a740:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800a742:	1dfb      	adds	r3, r7, #7
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	091b      	lsrs	r3, r3, #4
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	001a      	movs	r2, r3
 800a74c:	4b08      	ldr	r3, [pc, #32]	; (800a770 <uint8_to_ascii_buffer+0x3c>)
 800a74e:	5c9a      	ldrb	r2, [r3, r2]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800a754:	1dfb      	adds	r3, r7, #7
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	220f      	movs	r2, #15
 800a75a:	401a      	ands	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	4903      	ldr	r1, [pc, #12]	; (800a770 <uint8_to_ascii_buffer+0x3c>)
 800a762:	5c8a      	ldrb	r2, [r1, r2]
 800a764:	701a      	strb	r2, [r3, #0]
}
 800a766:	46c0      	nop			; (mov r8, r8)
 800a768:	46bd      	mov	sp, r7
 800a76a:	b002      	add	sp, #8
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	08015afc 	.word	0x08015afc

0800a774 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800a774:	b5b0      	push	{r4, r5, r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	0008      	movs	r0, r1
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	0019      	movs	r1, r3
 800a782:	230b      	movs	r3, #11
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	1c02      	adds	r2, r0, #0
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	2308      	movs	r3, #8
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	1c0a      	adds	r2, r1, #0
 800a790:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <iis2dh_read_reg+0x2a>
 800a798:	2301      	movs	r3, #1
 800a79a:	425b      	negs	r3, r3
 800a79c:	e00f      	b.n	800a7be <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	685c      	ldr	r4, [r3, #4]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	68d8      	ldr	r0, [r3, #12]
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	18fb      	adds	r3, r7, r3
 800a7aa:	881d      	ldrh	r5, [r3, #0]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	230b      	movs	r3, #11
 800a7b0:	18fb      	adds	r3, r7, r3
 800a7b2:	7819      	ldrb	r1, [r3, #0]
 800a7b4:	002b      	movs	r3, r5
 800a7b6:	47a0      	blx	r4
 800a7b8:	0003      	movs	r3, r0
 800a7ba:	617b      	str	r3, [r7, #20]

  return ret;
 800a7bc:	697b      	ldr	r3, [r7, #20]
}
 800a7be:	0018      	movs	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	b006      	add	sp, #24
 800a7c4:	bdb0      	pop	{r4, r5, r7, pc}

0800a7c6 <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a7c6:	b5b0      	push	{r4, r5, r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	0008      	movs	r0, r1
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	0019      	movs	r1, r3
 800a7d4:	230b      	movs	r3, #11
 800a7d6:	18fb      	adds	r3, r7, r3
 800a7d8:	1c02      	adds	r2, r0, #0
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	2308      	movs	r3, #8
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	1c0a      	adds	r2, r1, #0
 800a7e2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <iis2dh_write_reg+0x2a>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	425b      	negs	r3, r3
 800a7ee:	e00f      	b.n	800a810 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681c      	ldr	r4, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68d8      	ldr	r0, [r3, #12]
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	18fb      	adds	r3, r7, r3
 800a7fc:	881d      	ldrh	r5, [r3, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	230b      	movs	r3, #11
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	7819      	ldrb	r1, [r3, #0]
 800a806:	002b      	movs	r3, r5
 800a808:	47a0      	blx	r4
 800a80a:	0003      	movs	r3, r0
 800a80c:	617b      	str	r3, [r7, #20]

  return ret;
 800a80e:	697b      	ldr	r3, [r7, #20]
}
 800a810:	0018      	movs	r0, r3
 800a812:	46bd      	mov	sp, r7
 800a814:	b006      	add	sp, #24
 800a816:	bdb0      	pop	{r4, r5, r7, pc}

0800a818 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	000a      	movs	r2, r1
 800a822:	1cfb      	adds	r3, r7, #3
 800a824:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a826:	2310      	movs	r3, #16
 800a828:	18fa      	adds	r2, r7, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	2301      	movs	r3, #1
 800a82e:	2120      	movs	r1, #32
 800a830:	f7ff ffa0 	bl	800a774 <iis2dh_read_reg>
 800a834:	0003      	movs	r3, r0
 800a836:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d108      	bne.n	800a850 <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a83e:	230c      	movs	r3, #12
 800a840:	18fa      	adds	r2, r7, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	2301      	movs	r3, #1
 800a846:	2123      	movs	r1, #35	; 0x23
 800a848:	f7ff ff94 	bl	800a774 <iis2dh_read_reg>
 800a84c:	0003      	movs	r3, r0
 800a84e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d138      	bne.n	800a8c8 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 800a856:	1cfb      	adds	r3, r7, #3
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10b      	bne.n	800a876 <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 800a85e:	2310      	movs	r3, #16
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	2108      	movs	r1, #8
 800a866:	438a      	bics	r2, r1
 800a868:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 800a86a:	230c      	movs	r3, #12
 800a86c:	18fb      	adds	r3, r7, r3
 800a86e:	781a      	ldrb	r2, [r3, #0]
 800a870:	2108      	movs	r1, #8
 800a872:	430a      	orrs	r2, r1
 800a874:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 800a876:	1cfb      	adds	r3, r7, #3
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d10b      	bne.n	800a896 <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 800a87e:	2310      	movs	r3, #16
 800a880:	18fb      	adds	r3, r7, r3
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	2108      	movs	r1, #8
 800a886:	438a      	bics	r2, r1
 800a888:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a88a:	230c      	movs	r3, #12
 800a88c:	18fb      	adds	r3, r7, r3
 800a88e:	781a      	ldrb	r2, [r3, #0]
 800a890:	2108      	movs	r1, #8
 800a892:	438a      	bics	r2, r1
 800a894:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 800a896:	1cfb      	adds	r3, r7, #3
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d10b      	bne.n	800a8b6 <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 800a89e:	2310      	movs	r3, #16
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	2108      	movs	r1, #8
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	18fb      	adds	r3, r7, r3
 800a8ae:	781a      	ldrb	r2, [r3, #0]
 800a8b0:	2108      	movs	r1, #8
 800a8b2:	438a      	bics	r2, r1
 800a8b4:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a8b6:	2310      	movs	r3, #16
 800a8b8:	18fa      	adds	r2, r7, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	2301      	movs	r3, #1
 800a8be:	2120      	movs	r1, #32
 800a8c0:	f7ff ff81 	bl	800a7c6 <iis2dh_write_reg>
 800a8c4:	0003      	movs	r3, r0
 800a8c6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d108      	bne.n	800a8e0 <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	18fa      	adds	r2, r7, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	2123      	movs	r1, #35	; 0x23
 800a8d8:	f7ff ff75 	bl	800a7c6 <iis2dh_write_reg>
 800a8dc:	0003      	movs	r3, r0
 800a8de:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a8e0:	697b      	ldr	r3, [r7, #20]
}
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	b006      	add	sp, #24
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 800a8ea:	b590      	push	{r4, r7, lr}
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	000a      	movs	r2, r1
 800a8f4:	1cfb      	adds	r3, r7, #3
 800a8f6:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a8f8:	2408      	movs	r4, #8
 800a8fa:	193a      	adds	r2, r7, r4
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	2301      	movs	r3, #1
 800a900:	2120      	movs	r1, #32
 800a902:	f7ff ff37 	bl	800a774 <iis2dh_read_reg>
 800a906:	0003      	movs	r3, r0
 800a908:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d115      	bne.n	800a93c <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800a910:	1cfb      	adds	r3, r7, #3
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	220f      	movs	r2, #15
 800a916:	4013      	ands	r3, r2
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	193b      	adds	r3, r7, r4
 800a91c:	0110      	lsls	r0, r2, #4
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	210f      	movs	r1, #15
 800a922:	400a      	ands	r2, r1
 800a924:	1c11      	adds	r1, r2, #0
 800a926:	1c02      	adds	r2, r0, #0
 800a928:	430a      	orrs	r2, r1
 800a92a:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a92c:	193a      	adds	r2, r7, r4
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	2301      	movs	r3, #1
 800a932:	2120      	movs	r1, #32
 800a934:	f7ff ff47 	bl	800a7c6 <iis2dh_write_reg>
 800a938:	0003      	movs	r3, r0
 800a93a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a93c:	68fb      	ldr	r3, [r7, #12]
}
 800a93e:	0018      	movs	r0, r3
 800a940:	46bd      	mov	sp, r7
 800a942:	b005      	add	sp, #20
 800a944:	bd90      	pop	{r4, r7, pc}

0800a946 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 800a946:	b590      	push	{r4, r7, lr}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	000a      	movs	r2, r1
 800a950:	1cfb      	adds	r3, r7, #3
 800a952:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a954:	2408      	movs	r4, #8
 800a956:	193a      	adds	r2, r7, r4
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	2301      	movs	r3, #1
 800a95c:	2123      	movs	r1, #35	; 0x23
 800a95e:	f7ff ff09 	bl	800a774 <iis2dh_read_reg>
 800a962:	0003      	movs	r3, r0
 800a964:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d117      	bne.n	800a99c <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800a96c:	1cfb      	adds	r3, r7, #3
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2203      	movs	r2, #3
 800a972:	4013      	ands	r3, r2
 800a974:	b2da      	uxtb	r2, r3
 800a976:	193b      	adds	r3, r7, r4
 800a978:	2103      	movs	r1, #3
 800a97a:	400a      	ands	r2, r1
 800a97c:	0110      	lsls	r0, r2, #4
 800a97e:	781a      	ldrb	r2, [r3, #0]
 800a980:	2130      	movs	r1, #48	; 0x30
 800a982:	438a      	bics	r2, r1
 800a984:	1c11      	adds	r1, r2, #0
 800a986:	1c02      	adds	r2, r0, #0
 800a988:	430a      	orrs	r2, r1
 800a98a:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a98c:	193a      	adds	r2, r7, r4
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	2301      	movs	r3, #1
 800a992:	2123      	movs	r1, #35	; 0x23
 800a994:	f7ff ff17 	bl	800a7c6 <iis2dh_write_reg>
 800a998:	0003      	movs	r3, r0
 800a99a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a99c:	68fb      	ldr	r3, [r7, #12]
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b005      	add	sp, #20
 800a9a4:	bd90      	pop	{r4, r7, pc}

0800a9a6 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	210f      	movs	r1, #15
 800a9b8:	f7ff fedc 	bl	800a774 <iis2dh_read_reg>
 800a9bc:	0003      	movs	r3, r0
 800a9be:	60fb      	str	r3, [r7, #12]

  return ret;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
}
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b004      	add	sp, #16
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800a9ca:	b590      	push	{r4, r7, lr}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800a9d0:	1dfb      	adds	r3, r7, #7
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800a9d6:	e012      	b.n	800a9fe <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800a9d8:	f7f9 f822 	bl	8003a20 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800a9dc:	1dfc      	adds	r4, r7, #7
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	9302      	str	r3, [sp, #8]
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	f7fe fa39 	bl	8008e6c <astronode_send_cfg_wr>
 800a9fa:	0003      	movs	r3, r0
 800a9fc:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 800a9fe:	1dfb      	adds	r3, r7, #7
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2201      	movs	r2, #1
 800aa04:	4053      	eors	r3, r2
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e5      	bne.n	800a9d8 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800aa0c:	1dfb      	adds	r3, r7, #7
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00d      	beq.n	800aa30 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800aa14:	f7fe fe90 	bl	8009738 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800aa18:	f7fe f9f0 	bl	8008dfc <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800aa1c:	f7fe ff86 	bl	800992c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800aa20:	f7fe fb7a 	bl	8009118 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800aa24:	f7fe face 	bl	8008fc4 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800aa28:	f7fe fe0a 	bl	8009640 <astronode_send_pld_fr>
		return true ;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800aa30:	2300      	movs	r3, #0
	}
}
 800aa32:	0018      	movs	r0, r3
 800aa34:	46bd      	mov	sp, r7
 800aa36:	b003      	add	sp, #12
 800aa38:	bd90      	pop	{r4, r7, pc}
	...

0800aa3c <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	0002      	movs	r2, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	1dbb      	adds	r3, r7, #6
 800aa48:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f7f5 fb59 	bl	8000104 <strlen>
 800aa52:	0003      	movs	r3, r0
 800aa54:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2ba0      	cmp	r3, #160	; 0xa0
 800aa5a:	d80b      	bhi.n	800aa74 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	1dbb      	adds	r3, r7, #6
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	0018      	movs	r0, r3
 800aa68:	f7fe fd40 	bl	80094ec <astronode_send_pld_er>
 800aa6c:	1e03      	subs	r3, r0, #0
 800aa6e:	d005      	beq.n	800aa7c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e004      	b.n	800aa7e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800aa74:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <my_astro_add_payload_2_queue+0x4c>)
 800aa76:	0018      	movs	r0, r3
 800aa78:	f7f8 fb36 	bl	80030e8 <send_debug_logs>
	}
	return false ;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	0018      	movs	r0, r3
 800aa80:	46bd      	mov	sp, r7
 800aa82:	b004      	add	sp, #16
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	46c0      	nop			; (mov r8, r8)
 800aa88:	080157c8 	.word	0x080157c8

0800aa8c <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800aa90:	4b19      	ldr	r3, [pc, #100]	; (800aaf8 <my_astro_handle_evt+0x6c>)
 800aa92:	0018      	movs	r0, r3
 800aa94:	f7f8 fb28 	bl	80030e8 <send_debug_logs>
	astronode_send_evt_rr () ;
 800aa98:	f7fe fbe8 	bl	800926c <astronode_send_evt_rr>
	if (is_sak_available () )
 800aa9c:	f7ff f9d4 	bl	8009e48 <is_sak_available>
 800aaa0:	1e03      	subs	r3, r0, #0
 800aaa2:	d007      	beq.n	800aab4 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800aaa4:	f7fe feac 	bl	8009800 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800aaa8:	f7fe ff00 	bl	80098ac <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800aaac:	4b13      	ldr	r3, [pc, #76]	; (800aafc <my_astro_handle_evt+0x70>)
 800aaae:	0018      	movs	r0, r3
 800aab0:	f7f8 fb1a 	bl	80030e8 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800aab4:	f7ff f9d2 	bl	8009e5c <is_astronode_reset>
 800aab8:	1e03      	subs	r3, r0, #0
 800aaba:	d005      	beq.n	800aac8 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800aabc:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <my_astro_handle_evt+0x74>)
 800aabe:	0018      	movs	r0, r3
 800aac0:	f7f8 fb12 	bl	80030e8 <send_debug_logs>
	  astronode_send_res_cr () ;
 800aac4:	f7fe fdf8 	bl	80096b8 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800aac8:	f7ff f9d2 	bl	8009e70 <is_command_available>
 800aacc:	1e03      	subs	r3, r0, #0
 800aace:	d00e      	beq.n	800aaee <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800aad0:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <my_astro_handle_evt+0x78>)
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7f8 fb08 	bl	80030e8 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800aad8:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <my_astro_handle_evt+0x7c>)
 800aada:	0018      	movs	r0, r3
 800aadc:	f7ff f810 	bl	8009b00 <astronode_send_cmd_rr>
 800aae0:	1e03      	subs	r3, r0, #0
 800aae2:	d002      	beq.n	800aaea <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <my_astro_handle_evt+0x80>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800aaea:	f7fe ffc9 	bl	8009a80 <astronode_send_cmd_cr>
	}
	return true ;
 800aaee:	2301      	movs	r3, #1
}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	08015830 	.word	0x08015830
 800aafc:	08015864 	.word	0x08015864
 800ab00:	080158a8 	.word	0x080158a8
 800ab04:	080158e4 	.word	0x080158e4
 800ab08:	20000c1c 	.word	0x20000c1c
 800ab0c:	20000c1a 	.word	0x20000c1a

0800ab10 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	0011      	movs	r1, r2
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7fe fc23 	bl	800936c <astronode_send_geo_wr>
}
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	b002      	add	sp, #8
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	4ca5      	ldr	r4, [pc, #660]	; (800adc8 <my_gnss_acq_coordinates+0x298>)
 800ab34:	44a5      	add	sp, r4
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800ab3a:	4ba4      	ldr	r3, [pc, #656]	; (800adcc <my_gnss_acq_coordinates+0x29c>)
 800ab3c:	18fb      	adds	r3, r7, r3
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800ab42:	4ba3      	ldr	r3, [pc, #652]	; (800add0 <my_gnss_acq_coordinates+0x2a0>)
 800ab44:	18fb      	adds	r3, r7, r3
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800ab4a:	4ba2      	ldr	r3, [pc, #648]	; (800add4 <my_gnss_acq_coordinates+0x2a4>)
 800ab4c:	18fb      	adds	r3, r7, r3
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800ab52:	4ba1      	ldr	r3, [pc, #644]	; (800add8 <my_gnss_acq_coordinates+0x2a8>)
 800ab54:	18fb      	adds	r3, r7, r3
 800ab56:	2200      	movs	r2, #0
 800ab58:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800ab5a:	4ba0      	ldr	r3, [pc, #640]	; (800addc <my_gnss_acq_coordinates+0x2ac>)
 800ab5c:	18fb      	adds	r3, r7, r3
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800ab62:	4b9f      	ldr	r3, [pc, #636]	; (800ade0 <my_gnss_acq_coordinates+0x2b0>)
 800ab64:	2486      	movs	r4, #134	; 0x86
 800ab66:	00a4      	lsls	r4, r4, #2
 800ab68:	191b      	adds	r3, r3, r4
 800ab6a:	19db      	adds	r3, r3, r7
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	3304      	adds	r3, #4
 800ab72:	22f6      	movs	r2, #246	; 0xf6
 800ab74:	2100      	movs	r1, #0
 800ab76:	0018      	movs	r0, r3
 800ab78:	f002 fc44 	bl	800d404 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800ab7c:	4b99      	ldr	r3, [pc, #612]	; (800ade4 <my_gnss_acq_coordinates+0x2b4>)
 800ab7e:	191b      	adds	r3, r3, r4
 800ab80:	19db      	adds	r3, r3, r7
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	3304      	adds	r3, #4
 800ab88:	22f6      	movs	r2, #246	; 0xf6
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f002 fc39 	bl	800d404 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800ab92:	4b95      	ldr	r3, [pc, #596]	; (800ade8 <my_gnss_acq_coordinates+0x2b8>)
 800ab94:	2284      	movs	r2, #132	; 0x84
 800ab96:	0092      	lsls	r2, r2, #2
 800ab98:	18ba      	adds	r2, r7, r2
 800ab9a:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800ab9c:	4b93      	ldr	r3, [pc, #588]	; (800adec <my_gnss_acq_coordinates+0x2bc>)
 800ab9e:	2283      	movs	r2, #131	; 0x83
 800aba0:	0092      	lsls	r2, r2, #2
 800aba2:	18ba      	adds	r2, r7, r2
 800aba4:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800aba6:	4b92      	ldr	r3, [pc, #584]	; (800adf0 <my_gnss_acq_coordinates+0x2c0>)
 800aba8:	2282      	movs	r2, #130	; 0x82
 800abaa:	0092      	lsls	r2, r2, #2
 800abac:	18ba      	adds	r2, r7, r2
 800abae:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800abb0:	4b90      	ldr	r3, [pc, #576]	; (800adf4 <my_gnss_acq_coordinates+0x2c4>)
 800abb2:	2281      	movs	r2, #129	; 0x81
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	18ba      	adds	r2, r7, r2
 800abb8:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2230      	movs	r2, #48	; 0x30
 800abbe:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	4b8c      	ldr	r3, [pc, #560]	; (800adf8 <my_gnss_acq_coordinates+0x2c8>)
 800abc6:	608a      	str	r2, [r1, #8]
 800abc8:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800abca:	f7f9 f831 	bl	8003c30 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800abce:	e0c4      	b.n	800ad5a <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 800abd0:	4c80      	ldr	r4, [pc, #512]	; (800add4 <my_gnss_acq_coordinates+0x2a4>)
 800abd2:	193b      	adds	r3, r7, r4
 800abd4:	2101      	movs	r1, #1
 800abd6:	0018      	movs	r0, r3
 800abd8:	f7f8 fec6 	bl	8003968 <my_gnss_receive_byte>
		if ( rx_byte )
 800abdc:	0020      	movs	r0, r4
 800abde:	183b      	adds	r3, r7, r0
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	4c7b      	ldr	r4, [pc, #492]	; (800add0 <my_gnss_acq_coordinates+0x2a0>)
 800abe4:	193a      	adds	r2, r7, r4
 800abe6:	1939      	adds	r1, r7, r4
 800abe8:	7809      	ldrb	r1, [r1, #0]
 800abea:	7011      	strb	r1, [r2, #0]
 800abec:	4d7b      	ldr	r5, [pc, #492]	; (800addc <my_gnss_acq_coordinates+0x2ac>)
 800abee:	197a      	adds	r2, r7, r5
 800abf0:	1979      	adds	r1, r7, r5
 800abf2:	7809      	ldrb	r1, [r1, #0]
 800abf4:	7011      	strb	r1, [r2, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d100      	bne.n	800abfc <my_gnss_acq_coordinates+0xcc>
 800abfa:	e0ae      	b.n	800ad5a <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800abfc:	4b76      	ldr	r3, [pc, #472]	; (800add8 <my_gnss_acq_coordinates+0x2a8>)
 800abfe:	18fa      	adds	r2, r7, r3
 800ac00:	2684      	movs	r6, #132	; 0x84
 800ac02:	0076      	lsls	r6, r6, #1
 800ac04:	19b9      	adds	r1, r7, r6
 800ac06:	183b      	adds	r3, r7, r0
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f000 fbf9 	bl	800b400 <my_nmea_message>
 800ac0e:	0001      	movs	r1, r0
 800ac10:	193b      	adds	r3, r7, r4
 800ac12:	193a      	adds	r2, r7, r4
 800ac14:	7812      	ldrb	r2, [r2, #0]
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	197b      	adds	r3, r7, r5
 800ac1a:	197a      	adds	r2, r7, r5
 800ac1c:	7812      	ldrb	r2, [r2, #0]
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	2902      	cmp	r1, #2
 800ac22:	d000      	beq.n	800ac26 <my_gnss_acq_coordinates+0xf6>
 800ac24:	e099      	b.n	800ad5a <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800ac26:	19bb      	adds	r3, r7, r6
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fca9 	bl	800b580 <is_my_nmea_checksum_ok>
 800ac2e:	0003      	movs	r3, r0
 800ac30:	0019      	movs	r1, r3
 800ac32:	193b      	adds	r3, r7, r4
 800ac34:	193a      	adds	r2, r7, r4
 800ac36:	7812      	ldrb	r2, [r2, #0]
 800ac38:	701a      	strb	r2, [r3, #0]
 800ac3a:	197b      	adds	r3, r7, r5
 800ac3c:	197a      	adds	r2, r7, r5
 800ac3e:	7812      	ldrb	r2, [r2, #0]
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	2900      	cmp	r1, #0
 800ac44:	d100      	bne.n	800ac48 <my_gnss_acq_coordinates+0x118>
 800ac46:	e088      	b.n	800ad5a <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800ac48:	193b      	adds	r3, r7, r4
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4053      	eors	r3, r2
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d015      	beq.n	800ac82 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7c1b      	ldrb	r3, [r3, #16]
 800ac5a:	2b33      	cmp	r3, #51	; 0x33
 800ac5c:	d111      	bne.n	800ac82 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800ac5e:	2383      	movs	r3, #131	; 0x83
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	18fb      	adds	r3, r7, r3
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	19bb      	adds	r3, r7, r6
 800ac68:	0011      	movs	r1, r2
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	f002 fc3f 	bl	800d4ee <strstr>
 800ac70:	1e03      	subs	r3, r0, #0
 800ac72:	d006      	beq.n	800ac82 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800ac74:	19bb      	adds	r3, r7, r6
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 f9a6 	bl	800afc8 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800ac7c:	193b      	adds	r3, r7, r4
 800ac7e:	2201      	movs	r2, #1
 800ac80:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800ac82:	2384      	movs	r3, #132	; 0x84
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	18fb      	adds	r3, r7, r3
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	2484      	movs	r4, #132	; 0x84
 800ac8c:	0064      	lsls	r4, r4, #1
 800ac8e:	193b      	adds	r3, r7, r4
 800ac90:	0011      	movs	r1, r2
 800ac92:	0018      	movs	r0, r3
 800ac94:	f002 fc2b 	bl	800d4ee <strstr>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d012      	beq.n	800acc2 <my_gnss_acq_coordinates+0x192>
 800ac9c:	4d4f      	ldr	r5, [pc, #316]	; (800addc <my_gnss_acq_coordinates+0x2ac>)
 800ac9e:	197b      	adds	r3, r7, r5
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d80d      	bhi.n	800acc2 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800aca6:	4b55      	ldr	r3, [pc, #340]	; (800adfc <my_gnss_acq_coordinates+0x2cc>)
 800aca8:	881a      	ldrh	r2, [r3, #0]
 800acaa:	4b55      	ldr	r3, [pc, #340]	; (800ae00 <my_gnss_acq_coordinates+0x2d0>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d85b      	bhi.n	800ad6a <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800acb2:	193b      	adds	r3, r7, r4
 800acb4:	0018      	movs	r0, r3
 800acb6:	f000 fe09 	bl	800b8cc <my_nmea_get_gsv_tns>
 800acba:	0003      	movs	r3, r0
 800acbc:	001a      	movs	r2, r3
 800acbe:	197b      	adds	r3, r7, r5
 800acc0:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800acc2:	2382      	movs	r3, #130	; 0x82
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	18fb      	adds	r3, r7, r3
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	2484      	movs	r4, #132	; 0x84
 800accc:	0064      	lsls	r4, r4, #1
 800acce:	193b      	adds	r3, r7, r4
 800acd0:	0011      	movs	r1, r2
 800acd2:	0018      	movs	r0, r3
 800acd4:	f002 fc0b 	bl	800d4ee <strstr>
 800acd8:	1e03      	subs	r3, r0, #0
 800acda:	d010      	beq.n	800acfe <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800acdc:	193b      	adds	r3, r7, r4
 800acde:	0018      	movs	r0, r3
 800ace0:	f000 fbfa 	bl	800b4d8 <get_my_nmea_gngsa_fixed_mode_s>
 800ace4:	0003      	movs	r3, r0
 800ace6:	001a      	movs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800acec:	193b      	adds	r3, r7, r4
 800acee:	0018      	movs	r0, r3
 800acf0:	f000 fbfd 	bl	800b4ee <get_my_nmea_gngsa_pdop_d>
 800acf4:	0002      	movs	r2, r0
 800acf6:	000b      	movs	r3, r1
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	608a      	str	r2, [r1, #8]
 800acfc:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 800acfe:	2381      	movs	r3, #129	; 0x81
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	18fb      	adds	r3, r7, r3
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	2384      	movs	r3, #132	; 0x84
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	0011      	movs	r1, r2
 800ad0e:	0018      	movs	r0, r3
 800ad10:	f002 fbed 	bl	800d4ee <strstr>
 800ad14:	1e03      	subs	r3, r0, #0
 800ad16:	d020      	beq.n	800ad5a <my_gnss_acq_coordinates+0x22a>
 800ad18:	4b2d      	ldr	r3, [pc, #180]	; (800add0 <my_gnss_acq_coordinates+0x2a0>)
 800ad1a:	18fb      	adds	r3, r7, r3
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01b      	beq.n	800ad5a <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7c1b      	ldrb	r3, [r3, #16]
 800ad26:	2b33      	cmp	r3, #51	; 0x33
 800ad28:	d121      	bne.n	800ad6e <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800ad2a:	4b2e      	ldr	r3, [pc, #184]	; (800ade4 <my_gnss_acq_coordinates+0x2b4>)
 800ad2c:	2186      	movs	r1, #134	; 0x86
 800ad2e:	0089      	lsls	r1, r1, #2
 800ad30:	185b      	adds	r3, r3, r1
 800ad32:	19da      	adds	r2, r3, r7
 800ad34:	4b2a      	ldr	r3, [pc, #168]	; (800ade0 <my_gnss_acq_coordinates+0x2b0>)
 800ad36:	185b      	adds	r3, r3, r1
 800ad38:	19db      	adds	r3, r3, r7
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	0019      	movs	r1, r3
 800ad3e:	23fa      	movs	r3, #250	; 0xfa
 800ad40:	001a      	movs	r2, r3
 800ad42:	f002 fc8c 	bl	800d65e <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6898      	ldr	r0, [r3, #8]
 800ad4a:	68d9      	ldr	r1, [r3, #12]
 800ad4c:	4b2d      	ldr	r3, [pc, #180]	; (800ae04 <my_gnss_acq_coordinates+0x2d4>)
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f7f5 fb89 	bl	8000468 <__aeabi_dcmple>
 800ad56:	1e03      	subs	r3, r0, #0
 800ad58:	d10b      	bne.n	800ad72 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800ad5a:	4b28      	ldr	r3, [pc, #160]	; (800adfc <my_gnss_acq_coordinates+0x2cc>)
 800ad5c:	881a      	ldrh	r2, [r3, #0]
 800ad5e:	4b2a      	ldr	r3, [pc, #168]	; (800ae08 <my_gnss_acq_coordinates+0x2d8>)
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d200      	bcs.n	800ad68 <my_gnss_acq_coordinates+0x238>
 800ad66:	e733      	b.n	800abd0 <my_gnss_acq_coordinates+0xa0>
 800ad68:	e004      	b.n	800ad74 <my_gnss_acq_coordinates+0x244>
							break ;
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	e002      	b.n	800ad74 <my_gnss_acq_coordinates+0x244>
							break ;
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	e000      	b.n	800ad74 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800ad72:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800ad74:	f7f8 ff6c 	bl	8003c50 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <my_gnss_acq_coordinates+0x2b4>)
 800ad7a:	2286      	movs	r2, #134	; 0x86
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	189b      	adds	r3, r3, r2
 800ad80:	19db      	adds	r3, r3, r7
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00a      	beq.n	800ad9e <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	230c      	movs	r3, #12
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	0011      	movs	r1, r2
 800ad90:	0018      	movs	r0, r3
 800ad92:	f000 fcb1 	bl	800b6f8 <my_nmea_get_gngll_coordinates>
		r = true ;
 800ad96:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <my_gnss_acq_coordinates+0x29c>)
 800ad98:	18fb      	adds	r3, r7, r3
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 800ad9e:	4b17      	ldr	r3, [pc, #92]	; (800adfc <my_gnss_acq_coordinates+0x2cc>)
 800ada0:	881a      	ldrh	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	4a14      	ldr	r2, [pc, #80]	; (800adfc <my_gnss_acq_coordinates+0x2cc>)
 800adac:	8812      	ldrh	r2, [r2, #0]
 800adae:	189a      	adds	r2, r3, r2
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	615a      	str	r2, [r3, #20]
	return r ;
 800adb4:	4b05      	ldr	r3, [pc, #20]	; (800adcc <my_gnss_acq_coordinates+0x29c>)
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	781b      	ldrb	r3, [r3, #0]
}
 800adba:	0018      	movs	r0, r3
 800adbc:	46bd      	mov	sp, r7
 800adbe:	2387      	movs	r3, #135	; 0x87
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	449d      	add	sp, r3
 800adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	fffffde4 	.word	0xfffffde4
 800adcc:	00000217 	.word	0x00000217
 800add0:	00000216 	.word	0x00000216
 800add4:	00000203 	.word	0x00000203
 800add8:	00000202 	.word	0x00000202
 800addc:	00000215 	.word	0x00000215
 800ade0:	fffffef0 	.word	0xfffffef0
 800ade4:	fffffdf4 	.word	0xfffffdf4
 800ade8:	08015924 	.word	0x08015924
 800adec:	0801592c 	.word	0x0801592c
 800adf0:	08015934 	.word	0x08015934
 800adf4:	0801593c 	.word	0x0801593c
 800adf8:	408f4000 	.word	0x408f4000
 800adfc:	20000c44 	.word	0x20000c44
 800ae00:	2000001c 	.word	0x2000001c
 800ae04:	20000020 	.word	0x20000020
 800ae08:	2000001a 	.word	0x2000001a

0800ae0c <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <my_rtc_get_dt+0x2c>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	f7fb f9a5 	bl	800616c <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <my_rtc_get_dt+0x2c>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	0018      	movs	r0, r3
 800ae2a:	f7fb f8b1 	bl	8005f90 <HAL_RTC_GetTime>
}
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	46bd      	mov	sp, r7
 800ae32:	b002      	add	sp, #8
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	46c0      	nop			; (mov r8, r8)
 800ae38:	200006f4 	.word	0x200006f4

0800ae3c <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800ae3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3e:	b08d      	sub	sp, #52	; 0x34
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800ae44:	2508      	movs	r5, #8
 800ae46:	1979      	adds	r1, r7, r5
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <my_rtc_get_dt_s+0x7c>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f7fb f89f 	bl	8005f90 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800ae52:	241c      	movs	r4, #28
 800ae54:	1939      	adds	r1, r7, r4
 800ae56:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <my_rtc_get_dt_s+0x7c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f7fb f986 	bl	800616c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800ae60:	0021      	movs	r1, r4
 800ae62:	187b      	adds	r3, r7, r1
 800ae64:	78db      	ldrb	r3, [r3, #3]
 800ae66:	22fa      	movs	r2, #250	; 0xfa
 800ae68:	00d2      	lsls	r2, r2, #3
 800ae6a:	189a      	adds	r2, r3, r2
 800ae6c:	187b      	adds	r3, r7, r1
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	469c      	mov	ip, r3
 800ae72:	187b      	adds	r3, r7, r1
 800ae74:	789b      	ldrb	r3, [r3, #2]
 800ae76:	001c      	movs	r4, r3
 800ae78:	0028      	movs	r0, r5
 800ae7a:	183b      	adds	r3, r7, r0
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	001d      	movs	r5, r3
 800ae80:	183b      	adds	r3, r7, r0
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	001e      	movs	r6, r3
 800ae86:	183b      	adds	r3, r7, r0
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	490c      	ldr	r1, [pc, #48]	; (800aebc <my_rtc_get_dt_s+0x80>)
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	9303      	str	r3, [sp, #12]
 800ae90:	9602      	str	r6, [sp, #8]
 800ae92:	9501      	str	r5, [sp, #4]
 800ae94:	9400      	str	r4, [sp, #0]
 800ae96:	4663      	mov	r3, ip
 800ae98:	f002 fa1e 	bl	800d2d8 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800ae9c:	211c      	movs	r1, #28
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	78db      	ldrb	r3, [r3, #3]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	22fa      	movs	r2, #250	; 0xfa
 800aea6:	00d2      	lsls	r2, r2, #3
 800aea8:	4694      	mov	ip, r2
 800aeaa:	4463      	add	r3, ip
 800aeac:	b29b      	uxth	r3, r3
}
 800aeae:	0018      	movs	r0, r3
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	b009      	add	sp, #36	; 0x24
 800aeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb6:	46c0      	nop			; (mov r8, r8)
 800aeb8:	200006f4 	.word	0x200006f4
 800aebc:	0801598c 	.word	0x0801598c

0800aec0 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec2:	b0a9      	sub	sp, #164	; 0xa4
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800aec8:	2434      	movs	r4, #52	; 0x34
 800aeca:	193a      	adds	r2, r7, r4
 800aecc:	2548      	movs	r5, #72	; 0x48
 800aece:	197b      	adds	r3, r7, r5
 800aed0:	0011      	movs	r1, r2
 800aed2:	0018      	movs	r0, r3
 800aed4:	f7ff ff9a 	bl	800ae0c <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800aed8:	2680      	movs	r6, #128	; 0x80
 800aeda:	19bb      	adds	r3, r7, r6
 800aedc:	0018      	movs	r0, r3
 800aede:	f7ff ffad 	bl	800ae3c <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800aee2:	4a36      	ldr	r2, [pc, #216]	; (800afbc <my_rtc_set_alarm+0xfc>)
 800aee4:	4936      	ldr	r1, [pc, #216]	; (800afc0 <my_rtc_set_alarm+0x100>)
 800aee6:	234c      	movs	r3, #76	; 0x4c
 800aee8:	18f8      	adds	r0, r7, r3
 800aeea:	19bb      	adds	r3, r7, r6
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	232d      	movs	r3, #45	; 0x2d
 800aef0:	f002 f9f2 	bl	800d2d8 <sprintf>
	send_debug_logs ( m ) ;
 800aef4:	234c      	movs	r3, #76	; 0x4c
 800aef6:	18fb      	adds	r3, r7, r3
 800aef8:	0018      	movs	r0, r3
 800aefa:	f7f8 f8f5 	bl	80030e8 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800aefe:	193a      	adds	r2, r7, r4
 800af00:	197b      	adds	r3, r7, r5
 800af02:	0011      	movs	r1, r2
 800af04:	0018      	movs	r0, r3
 800af06:	f000 f90d 	bl	800b124 <my_conv_rtc2timestamp>
 800af0a:	0002      	movs	r2, r0
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	189b      	adds	r3, r3, r2
 800af10:	2094      	movs	r0, #148	; 0x94
 800af12:	183a      	adds	r2, r7, r0
 800af14:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800af16:	193a      	adds	r2, r7, r4
 800af18:	1979      	adds	r1, r7, r5
 800af1a:	1838      	adds	r0, r7, r0
 800af1c:	6803      	ldr	r3, [r0, #0]
 800af1e:	0018      	movs	r0, r3
 800af20:	f000 f974 	bl	800b20c <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800af24:	193b      	adds	r3, r7, r4
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	210c      	movs	r1, #12
 800af2a:	187b      	adds	r3, r7, r1
 800af2c:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800af2e:	193b      	adds	r3, r7, r4
 800af30:	785a      	ldrb	r2, [r3, #1]
 800af32:	187b      	adds	r3, r7, r1
 800af34:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800af36:	193b      	adds	r3, r7, r4
 800af38:	789a      	ldrb	r2, [r3, #2]
 800af3a:	187b      	adds	r3, r7, r1
 800af3c:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800af3e:	0008      	movs	r0, r1
 800af40:	183b      	adds	r3, r7, r0
 800af42:	2200      	movs	r2, #0
 800af44:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800af46:	183b      	adds	r3, r7, r0
 800af48:	2200      	movs	r2, #0
 800af4a:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800af4c:	183b      	adds	r3, r7, r0
 800af4e:	2200      	movs	r2, #0
 800af50:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800af52:	183b      	adds	r3, r7, r0
 800af54:	2200      	movs	r2, #0
 800af56:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800af58:	183b      	adds	r3, r7, r0
 800af5a:	2200      	movs	r2, #0
 800af5c:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800af5e:	183b      	adds	r3, r7, r0
 800af60:	2200      	movs	r2, #0
 800af62:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800af64:	197b      	adds	r3, r7, r5
 800af66:	7899      	ldrb	r1, [r3, #2]
 800af68:	183b      	adds	r3, r7, r0
 800af6a:	2220      	movs	r2, #32
 800af6c:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800af6e:	183b      	adds	r3, r7, r0
 800af70:	2280      	movs	r2, #128	; 0x80
 800af72:	0052      	lsls	r2, r2, #1
 800af74:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800af76:	1839      	adds	r1, r7, r0
 800af78:	4b12      	ldr	r3, [pc, #72]	; (800afc4 <my_rtc_set_alarm+0x104>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	0018      	movs	r0, r3
 800af7e:	f7fb f943 	bl	8006208 <HAL_RTC_SetAlarm_IT>
 800af82:	1e03      	subs	r3, r0, #0
 800af84:	d114      	bne.n	800afb0 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800af86:	19ba      	adds	r2, r7, r6
 800af88:	1939      	adds	r1, r7, r4
 800af8a:	197b      	adds	r3, r7, r5
 800af8c:	0018      	movs	r0, r3
 800af8e:	f000 f9ff 	bl	800b390 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800af92:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <my_rtc_set_alarm+0xfc>)
 800af94:	490a      	ldr	r1, [pc, #40]	; (800afc0 <my_rtc_set_alarm+0x100>)
 800af96:	244c      	movs	r4, #76	; 0x4c
 800af98:	1938      	adds	r0, r7, r4
 800af9a:	19bb      	adds	r3, r7, r6
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2341      	movs	r3, #65	; 0x41
 800afa0:	f002 f99a 	bl	800d2d8 <sprintf>
		send_debug_logs ( m ) ;
 800afa4:	193b      	adds	r3, r7, r4
 800afa6:	0018      	movs	r0, r3
 800afa8:	f7f8 f89e 	bl	80030e8 <send_debug_logs>
		return true ;
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	0018      	movs	r0, r3
 800afb4:	46bd      	mov	sp, r7
 800afb6:	b027      	add	sp, #156	; 0x9c
 800afb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	080159ac 	.word	0x080159ac
 800afc0:	080159c8 	.word	0x080159c8
 800afc4:	200006f4 	.word	0x200006f4

0800afc8 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800afc8:	b5b0      	push	{r4, r5, r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800afd0:	2508      	movs	r5, #8
 800afd2:	197b      	adds	r3, r7, r5
 800afd4:	1cda      	adds	r2, r3, #3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	0011      	movs	r1, r2
 800afda:	0018      	movs	r0, r3
 800afdc:	f000 fcae 	bl	800b93c <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800afe0:	197b      	adds	r3, r7, r5
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	0011      	movs	r1, r2
 800afe8:	0018      	movs	r0, r3
 800afea:	f000 fce1 	bl	800b9b0 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800afee:	197b      	adds	r3, r7, r5
 800aff0:	1c9a      	adds	r2, r3, #2
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	0011      	movs	r1, r2
 800aff6:	0018      	movs	r0, r3
 800aff8:	f000 fd14 	bl	800ba24 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800affc:	240c      	movs	r4, #12
 800affe:	193a      	adds	r2, r7, r4
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	0011      	movs	r1, r2
 800b004:	0018      	movs	r0, r3
 800b006:	f000 fd47 	bl	800ba98 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800b00a:	193b      	adds	r3, r7, r4
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	0011      	movs	r1, r2
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fd7a 	bl	800bb0c <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800b018:	193b      	adds	r3, r7, r4
 800b01a:	1c9a      	adds	r2, r3, #2
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	0011      	movs	r1, r2
 800b020:	0018      	movs	r0, r3
 800b022:	f000 fdad 	bl	800bb80 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800b026:	193b      	adds	r3, r7, r4
 800b028:	1d1a      	adds	r2, r3, #4
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	0011      	movs	r1, r2
 800b02e:	0018      	movs	r0, r3
 800b030:	f000 fde0 	bl	800bbf4 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b034:	193b      	adds	r3, r7, r4
 800b036:	2200      	movs	r2, #0
 800b038:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b03a:	193b      	adds	r3, r7, r4
 800b03c:	2200      	movs	r2, #0
 800b03e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b042:	0018      	movs	r0, r3
 800b044:	f7fb fb4f 	bl	80066e6 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800b048:	1939      	adds	r1, r7, r4
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	0018      	movs	r0, r3
 800b050:	f7fa fef6 	bl	8005e40 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800b054:	1979      	adds	r1, r7, r5
 800b056:	4b06      	ldr	r3, [pc, #24]	; (800b070 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b058:	2200      	movs	r2, #0
 800b05a:	0018      	movs	r0, r3
 800b05c:	f7fa fff4 	bl	8006048 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800b060:	4b03      	ldr	r3, [pc, #12]	; (800b070 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b062:	0018      	movs	r0, r3
 800b064:	f7fb fb73 	bl	800674e <HAL_RTCEx_DisableBypassShadow>
}
 800b068:	46c0      	nop			; (mov r8, r8)
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b008      	add	sp, #32
 800b06e:	bdb0      	pop	{r4, r5, r7, pc}
 800b070:	200006f4 	.word	0x200006f4

0800b074 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2100      	movs	r1, #0
 800b080:	0018      	movs	r0, r3
 800b082:	f001 fefb 	bl	800ce7c <strtod>
 800b086:	0002      	movs	r2, r0
 800b088:	000b      	movs	r3, r1
 800b08a:	60ba      	str	r2, [r7, #8]
 800b08c:	60fb      	str	r3, [r7, #12]
    return d ;
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	68fb      	ldr	r3, [r7, #12]
}
 800b092:	0010      	movs	r0, r2
 800b094:	0019      	movs	r1, r3
 800b096:	46bd      	mov	sp, r7
 800b098:	b004      	add	sp, #16
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	0008      	movs	r0, r1
 800b0a6:	0011      	movs	r1, r2
 800b0a8:	1cfb      	adds	r3, r7, #3
 800b0aa:	1c02      	adds	r2, r0, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
 800b0ae:	1cbb      	adds	r3, r7, #2
 800b0b0:	1c0a      	adds	r2, r1, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800b0b4:	230f      	movs	r3, #15
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800b0bc:	230e      	movs	r3, #14
 800b0be:	18fb      	adds	r3, r7, r3
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800b0c4:	e01c      	b.n	800b100 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800b0c6:	230f      	movs	r3, #15
 800b0c8:	18fb      	adds	r3, r7, r3
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	18d3      	adds	r3, r2, r3
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	1cfa      	adds	r2, r7, #3
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d105      	bne.n	800b0e6 <my_find_char_position+0x4a>
			p++ ;
 800b0da:	210e      	movs	r1, #14
 800b0dc:	187b      	adds	r3, r7, r1
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	187b      	adds	r3, r7, r1
 800b0e2:	3201      	adds	r2, #1
 800b0e4:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800b0e6:	230e      	movs	r3, #14
 800b0e8:	18fa      	adds	r2, r7, r3
 800b0ea:	1cbb      	adds	r3, r7, #2
 800b0ec:	7812      	ldrb	r2, [r2, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d00e      	beq.n	800b112 <my_find_char_position+0x76>
			break ;
		i++ ;
 800b0f4:	210f      	movs	r1, #15
 800b0f6:	187b      	adds	r3, r7, r1
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	187b      	adds	r3, r7, r1
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800b100:	230f      	movs	r3, #15
 800b102:	18fb      	adds	r3, r7, r3
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	18d3      	adds	r3, r2, r3
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1da      	bne.n	800b0c6 <my_find_char_position+0x2a>
 800b110:	e000      	b.n	800b114 <my_find_char_position+0x78>
			break ;
 800b112:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800b114:	230f      	movs	r3, #15
 800b116:	18fb      	adds	r3, r7, r3
 800b118:	781b      	ldrb	r3, [r3, #0]
}
 800b11a:	0018      	movs	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	b004      	add	sp, #16
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	78db      	ldrb	r3, [r3, #3]
 800b132:	22fa      	movs	r2, #250	; 0xfa
 800b134:	00d2      	lsls	r2, r2, #3
 800b136:	4694      	mov	ip, r2
 800b138:	4463      	add	r3, ip
 800b13a:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	0013      	movs	r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	189b      	adds	r3, r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	189b      	adds	r3, r3, r2
 800b148:	009a      	lsls	r2, r3, #2
 800b14a:	189a      	adds	r2, r3, r2
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	492c      	ldr	r1, [pc, #176]	; (800b200 <my_conv_rtc2timestamp+0xdc>)
 800b150:	468c      	mov	ip, r1
 800b152:	4463      	add	r3, ip
 800b154:	089b      	lsrs	r3, r3, #2
 800b156:	18d3      	adds	r3, r2, r3
 800b158:	4a2a      	ldr	r2, [pc, #168]	; (800b204 <my_conv_rtc2timestamp+0xe0>)
 800b15a:	4694      	mov	ip, r2
 800b15c:	4463      	add	r3, ip
 800b15e:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	e00a      	b.n	800b17c <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800b166:	4a28      	ldr	r2, [pc, #160]	; (800b208 <my_conv_rtc2timestamp+0xe4>)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	18d3      	adds	r3, r2, r3
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	001a      	movs	r2, r3
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	189b      	adds	r3, r3, r2
 800b174:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	613b      	str	r3, [r7, #16]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	785b      	ldrb	r3, [r3, #1]
 800b180:	3b01      	subs	r3, #1
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	dbee      	blt.n	800b166 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	785b      	ldrb	r3, [r3, #1]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d908      	bls.n	800b1a2 <my_conv_rtc2timestamp+0x7e>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	0018      	movs	r0, r3
 800b194:	f000 f8de 	bl	800b354 <my_conv_is_leap_year>
 800b198:	1e03      	subs	r3, r0, #0
 800b19a:	d002      	beq.n	800b1a2 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	789b      	ldrb	r3, [r3, #2]
 800b1a6:	001a      	movs	r2, r3
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	18d3      	adds	r3, r2, r3
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	0013      	movs	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	189b      	adds	r3, r3, r2
 800b1b8:	011a      	lsls	r2, r3, #4
 800b1ba:	1ad2      	subs	r2, r2, r3
 800b1bc:	0113      	lsls	r3, r2, #4
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	01db      	lsls	r3, r3, #7
 800b1c2:	0019      	movs	r1, r3
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	001a      	movs	r2, r3
 800b1ca:	0013      	movs	r3, r2
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	1a9b      	subs	r3, r3, r2
 800b1d0:	011a      	lsls	r2, r3, #4
 800b1d2:	1ad2      	subs	r2, r2, r3
 800b1d4:	0113      	lsls	r3, r2, #4
 800b1d6:	001a      	movs	r2, r3
 800b1d8:	0013      	movs	r3, r2
 800b1da:	18ca      	adds	r2, r1, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	0019      	movs	r1, r3
 800b1e2:	000b      	movs	r3, r1
 800b1e4:	011b      	lsls	r3, r3, #4
 800b1e6:	1a5b      	subs	r3, r3, r1
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	18d3      	adds	r3, r2, r3
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	7892      	ldrb	r2, [r2, #2]
 800b1f0:	189b      	adds	r3, r3, r2
 800b1f2:	60bb      	str	r3, [r7, #8]

    return ts ;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
}
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	b006      	add	sp, #24
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	fffff84f 	.word	0xfffff84f
 800b204:	fff50736 	.word	0xfff50736
 800b208:	08015b0c 	.word	0x08015b0c

0800b20c <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b08b      	sub	sp, #44	; 0x2c
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	213c      	movs	r1, #60	; 0x3c
 800b21c:	0018      	movs	r0, r3
 800b21e:	f7f5 f813 	bl	8000248 <__aeabi_uidivmod>
 800b222:	000b      	movs	r3, r1
 800b224:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	213c      	movs	r1, #60	; 0x3c
 800b22a:	0018      	movs	r0, r3
 800b22c:	f7f4 ff86 	bl	800013c <__udivsi3>
 800b230:	0003      	movs	r3, r0
 800b232:	213c      	movs	r1, #60	; 0x3c
 800b234:	0018      	movs	r0, r3
 800b236:	f7f5 f807 	bl	8000248 <__aeabi_uidivmod>
 800b23a:	000b      	movs	r3, r1
 800b23c:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	22e1      	movs	r2, #225	; 0xe1
 800b242:	0111      	lsls	r1, r2, #4
 800b244:	0018      	movs	r0, r3
 800b246:	f7f4 ff79 	bl	800013c <__udivsi3>
 800b24a:	0003      	movs	r3, r0
 800b24c:	2118      	movs	r1, #24
 800b24e:	0018      	movs	r0, r3
 800b250:	f7f4 fffa 	bl	8000248 <__aeabi_uidivmod>
 800b254:	000b      	movs	r3, r1
 800b256:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	493b      	ldr	r1, [pc, #236]	; (800b348 <my_conv_timestamp2rtc+0x13c>)
 800b25c:	0018      	movs	r0, r3
 800b25e:	f7f4 ff6d 	bl	800013c <__udivsi3>
 800b262:	0003      	movs	r3, r0
 800b264:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <my_conv_timestamp2rtc+0x140>)
 800b268:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b26a:	e00d      	b.n	800b288 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	0018      	movs	r0, r3
 800b270:	f000 f870 	bl	800b354 <my_conv_is_leap_year>
 800b274:	0003      	movs	r3, r0
 800b276:	336e      	adds	r3, #110	; 0x6e
 800b278:	33ff      	adds	r3, #255	; 0xff
 800b27a:	001a      	movs	r2, r3
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	3301      	adds	r3, #1
 800b286:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	0018      	movs	r0, r3
 800b28c:	f000 f862 	bl	800b354 <my_conv_is_leap_year>
 800b290:	0003      	movs	r3, r0
 800b292:	336e      	adds	r3, #110	; 0x6e
 800b294:	33ff      	adds	r3, #255	; 0xff
 800b296:	001a      	movs	r2, r3
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d2e6      	bcs.n	800b26c <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b2a2:	e018      	b.n	800b2d6 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800b2a4:	4b2a      	ldr	r3, [pc, #168]	; (800b350 <my_conv_timestamp2rtc+0x144>)
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	0052      	lsls	r2, r2, #1
 800b2aa:	5ad3      	ldrh	r3, [r2, r3]
 800b2ac:	001c      	movs	r4, r3
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d107      	bne.n	800b2c4 <my_conv_timestamp2rtc+0xb8>
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	0018      	movs	r0, r3
 800b2b8:	f000 f84c 	bl	800b354 <my_conv_is_leap_year>
 800b2bc:	1e03      	subs	r3, r0, #0
 800b2be:	d001      	beq.n	800b2c4 <my_conv_timestamp2rtc+0xb8>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <my_conv_timestamp2rtc+0xba>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	191b      	adds	r3, r3, r4
 800b2c8:	001a      	movs	r2, r3
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	1a9b      	subs	r3, r3, r2
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b2d6:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <my_conv_timestamp2rtc+0x144>)
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	0052      	lsls	r2, r2, #1
 800b2dc:	5ad3      	ldrh	r3, [r2, r3]
 800b2de:	001c      	movs	r4, r3
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d107      	bne.n	800b2f6 <my_conv_timestamp2rtc+0xea>
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f000 f833 	bl	800b354 <my_conv_is_leap_year>
 800b2ee:	1e03      	subs	r3, r0, #0
 800b2f0:	d001      	beq.n	800b2f6 <my_conv_timestamp2rtc+0xea>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <my_conv_timestamp2rtc+0xec>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	191b      	adds	r3, r3, r4
 800b2fa:	001a      	movs	r2, r3
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d2d0      	bcs.n	800b2a4 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	3330      	adds	r3, #48	; 0x30
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	b2db      	uxtb	r3, r3
 800b312:	3301      	adds	r3, #1
 800b314:	b2da      	uxtb	r2, r3
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	3301      	adds	r3, #1
 800b320:	b2da      	uxtb	r2, r3
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	b2da      	uxtb	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	709a      	strb	r2, [r3, #2]
}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	46bd      	mov	sp, r7
 800b342:	b00b      	add	sp, #44	; 0x2c
 800b344:	bd90      	pop	{r4, r7, pc}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	00015180 	.word	0x00015180
 800b34c:	000007b2 	.word	0x000007b2
 800b350:	08015b18 	.word	0x08015b18

0800b354 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2203      	movs	r2, #3
 800b360:	4013      	ands	r3, r2
 800b362:	d106      	bne.n	800b372 <my_conv_is_leap_year+0x1e>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2164      	movs	r1, #100	; 0x64
 800b368:	0018      	movs	r0, r3
 800b36a:	f7f5 f857 	bl	800041c <__aeabi_idivmod>
 800b36e:	1e0b      	subs	r3, r1, #0
 800b370:	d107      	bne.n	800b382 <my_conv_is_leap_year+0x2e>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	22c8      	movs	r2, #200	; 0xc8
 800b376:	0051      	lsls	r1, r2, #1
 800b378:	0018      	movs	r0, r3
 800b37a:	f7f5 f84f 	bl	800041c <__aeabi_idivmod>
 800b37e:	1e0b      	subs	r3, r1, #0
 800b380:	d101      	bne.n	800b386 <my_conv_is_leap_year+0x32>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <my_conv_is_leap_year+0x34>
 800b386:	2300      	movs	r3, #0
}
 800b388:	0018      	movs	r0, r3
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b002      	add	sp, #8
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800b390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b392:	b089      	sub	sp, #36	; 0x24
 800b394:	af04      	add	r7, sp, #16
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	78db      	ldrb	r3, [r3, #3]
 800b3a0:	22fa      	movs	r2, #250	; 0xfa
 800b3a2:	00d2      	lsls	r2, r2, #3
 800b3a4:	189a      	adds	r2, r3, r2
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	469c      	mov	ip, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	789b      	ldrb	r3, [r3, #2]
 800b3b0:	001c      	movs	r4, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	001d      	movs	r5, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	001e      	movs	r6, r3
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	789b      	ldrb	r3, [r3, #2]
 800b3c2:	4906      	ldr	r1, [pc, #24]	; (800b3dc <my_conv_dt_2_dts+0x4c>)
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	9303      	str	r3, [sp, #12]
 800b3c8:	9602      	str	r6, [sp, #8]
 800b3ca:	9501      	str	r5, [sp, #4]
 800b3cc:	9400      	str	r4, [sp, #0]
 800b3ce:	4663      	mov	r3, ip
 800b3d0:	f001 ff82 	bl	800d2d8 <sprintf>
}
 800b3d4:	46c0      	nop			; (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b005      	add	sp, #20
 800b3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3dc:	080159d4 	.word	0x080159d4

0800b3e0 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800b3e8:	230c      	movs	r3, #12
 800b3ea:	18f9      	adds	r1, r7, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	220a      	movs	r2, #10
 800b3f0:	0018      	movs	r0, r3
 800b3f2:	f001 fe6d 	bl	800d0d0 <strtoul>
 800b3f6:	0003      	movs	r3, r0
}
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	b004      	add	sp, #16
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b24      	cmp	r3, #36	; 0x24
 800b412:	d117      	bne.n	800b444 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	b2d1      	uxtb	r1, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	7011      	strb	r1, [r2, #0]
 800b426:	001a      	movs	r2, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	189b      	adds	r3, r3, r2
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	001a      	movs	r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	189b      	adds	r3, r3, r2
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800b440:	2300      	movs	r3, #0
 800b442:	e045      	b.n	800b4d0 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b1f      	cmp	r3, #31
 800b44a:	d907      	bls.n	800b45c <my_nmea_message+0x5c>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b7e      	cmp	r3, #126	; 0x7e
 800b452:	d803      	bhi.n	800b45c <my_nmea_message+0x5c>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <my_nmea_message+0x64>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b0d      	cmp	r3, #13
 800b462:	d114      	bne.n	800b48e <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	b2d1      	uxtb	r1, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	7011      	strb	r1, [r2, #0]
 800b470:	001a      	movs	r2, r3
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	189b      	adds	r3, r3, r2
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	7812      	ldrb	r2, [r2, #0]
 800b47a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	001a      	movs	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	189b      	adds	r3, r3, r2
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e020      	b.n	800b4d0 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b0a      	cmp	r3, #10
 800b494:	d11a      	bne.n	800b4cc <my_nmea_message+0xcc>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d916      	bls.n	800b4cc <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	701a      	strb	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	001a      	movs	r2, r3
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	189b      	adds	r3, r3, r2
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b0d      	cmp	r3, #13
 800b4b8:	d108      	bne.n	800b4cc <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	001a      	movs	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	189b      	adds	r3, r3, r2
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e001      	b.n	800b4d0 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	425b      	negs	r3, r3
}
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	b004      	add	sp, #16
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3309      	adds	r3, #9
 800b4e4:	781b      	ldrb	r3, [r3, #0]
}
 800b4e6:	0018      	movs	r0, r3
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	b002      	add	sp, #8
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800b4ee:	b5b0      	push	{r4, r5, r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	220f      	movs	r2, #15
 800b4fa:	212c      	movs	r1, #44	; 0x2c
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f7ff fdcd 	bl	800b09c <my_find_char_position>
 800b502:	0003      	movs	r3, r0
 800b504:	001a      	movs	r2, r3
 800b506:	2517      	movs	r5, #23
 800b508:	197b      	adds	r3, r7, r5
 800b50a:	3201      	adds	r2, #1
 800b50c:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2210      	movs	r2, #16
 800b512:	212c      	movs	r1, #44	; 0x2c
 800b514:	0018      	movs	r0, r3
 800b516:	f7ff fdc1 	bl	800b09c <my_find_char_position>
 800b51a:	0003      	movs	r3, r0
 800b51c:	0019      	movs	r1, r3
 800b51e:	2416      	movs	r4, #22
 800b520:	193b      	adds	r3, r7, r4
 800b522:	197a      	adds	r2, r7, r5
 800b524:	7812      	ldrb	r2, [r2, #0]
 800b526:	1a8a      	subs	r2, r1, r2
 800b528:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800b52a:	193b      	adds	r3, r7, r4
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	0018      	movs	r0, r3
 800b532:	f000 fc41 	bl	800bdb8 <malloc>
 800b536:	0003      	movs	r3, r0
 800b538:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800b53a:	197b      	adds	r3, r7, r5
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	18d1      	adds	r1, r2, r3
 800b542:	193b      	adds	r3, r7, r4
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	0018      	movs	r0, r3
 800b54a:	f001 ff82 	bl	800d452 <strncpy>
	pdop_s[pdop_length] = '\0';
 800b54e:	193b      	adds	r3, r7, r4
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	18d3      	adds	r3, r2, r3
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	0018      	movs	r0, r3
 800b55e:	f7ff fd89 	bl	800b074 <my_string2double_conv>
 800b562:	0002      	movs	r2, r0
 800b564:	000b      	movs	r3, r1
 800b566:	60ba      	str	r2, [r7, #8]
 800b568:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	0018      	movs	r0, r3
 800b56e:	f000 fc2d 	bl	800bdcc <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	68fb      	ldr	r3, [r7, #12]
}
 800b576:	0010      	movs	r0, r2
 800b578:	0019      	movs	r1, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b006      	add	sp, #24
 800b57e:	bdb0      	pop	{r4, r5, r7, pc}

0800b580 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800b580:	b590      	push	{r4, r7, lr}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800b588:	230f      	movs	r3, #15
 800b58a:	18fb      	adds	r3, r7, r3
 800b58c:	2200      	movs	r2, #0
 800b58e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800b590:	230e      	movs	r3, #14
 800b592:	18fb      	adds	r3, r7, r3
 800b594:	2201      	movs	r2, #1
 800b596:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b598:	e00f      	b.n	800b5ba <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800b59a:	220e      	movs	r2, #14
 800b59c:	18bb      	adds	r3, r7, r2
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	18ba      	adds	r2, r7, r2
 800b5a2:	1c59      	adds	r1, r3, #1
 800b5a4:	7011      	strb	r1, [r2, #0]
 800b5a6:	001a      	movs	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	189b      	adds	r3, r3, r2
 800b5ac:	7819      	ldrb	r1, [r3, #0]
 800b5ae:	220f      	movs	r2, #15
 800b5b0:	18bb      	adds	r3, r7, r2
 800b5b2:	18ba      	adds	r2, r7, r2
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	404a      	eors	r2, r1
 800b5b8:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b5ba:	210e      	movs	r1, #14
 800b5bc:	187b      	adds	r3, r7, r1
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	18d3      	adds	r3, r2, r3
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5c8:	d00a      	beq.n	800b5e0 <is_my_nmea_checksum_ok+0x60>
 800b5ca:	187b      	adds	r3, r7, r1
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	18d3      	adds	r3, r2, r3
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <is_my_nmea_checksum_ok+0x60>
 800b5d8:	187b      	adds	r3, r7, r1
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1dc      	bne.n	800b59a <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800b5e0:	230f      	movs	r3, #15
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	781c      	ldrb	r4, [r3, #0]
 800b5e6:	210e      	movs	r1, #14
 800b5e8:	187b      	adds	r3, r7, r1
 800b5ea:	187a      	adds	r2, r7, r1
 800b5ec:	7812      	ldrb	r2, [r2, #0]
 800b5ee:	3201      	adds	r2, #1
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	187b      	adds	r3, r7, r1
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	18d3      	adds	r3, r2, r3
 800b5fa:	2210      	movs	r2, #16
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	0018      	movs	r0, r3
 800b600:	f001 fcd4 	bl	800cfac <strtol>
 800b604:	0003      	movs	r3, r0
 800b606:	1ae3      	subs	r3, r4, r3
 800b608:	425a      	negs	r2, r3
 800b60a:	4153      	adcs	r3, r2
 800b60c:	b2db      	uxtb	r3, r3
}
 800b60e:	0018      	movs	r0, r3
 800b610:	46bd      	mov	sp, r7
 800b612:	b005      	add	sp, #20
 800b614:	bd90      	pop	{r4, r7, pc}
	...

0800b618 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800b618:	b5b0      	push	{r4, r5, r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	000a      	movs	r2, r1
 800b622:	1cfb      	adds	r3, r7, #3
 800b624:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800b626:	2308      	movs	r3, #8
 800b628:	18fa      	adds	r2, r7, r3
 800b62a:	492f      	ldr	r1, [pc, #188]	; (800b6e8 <nmea2decimal+0xd0>)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	0018      	movs	r0, r3
 800b630:	f001 fe72 	bl	800d318 <sscanf>
    min = deg / 100 ;
 800b634:	68b8      	ldr	r0, [r7, #8]
 800b636:	68f9      	ldr	r1, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	4b2c      	ldr	r3, [pc, #176]	; (800b6ec <nmea2decimal+0xd4>)
 800b63c:	f7f5 fc1c 	bl	8000e78 <__aeabi_ddiv>
 800b640:	0002      	movs	r2, r0
 800b642:	000b      	movs	r3, r1
 800b644:	613a      	str	r2, [r7, #16]
 800b646:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800b648:	6938      	ldr	r0, [r7, #16]
 800b64a:	6979      	ldr	r1, [r7, #20]
 800b64c:	f7f6 fe70 	bl	8002330 <__aeabi_d2iz>
 800b650:	0003      	movs	r3, r0
 800b652:	0018      	movs	r0, r3
 800b654:	f7f6 fea2 	bl	800239c <__aeabi_i2d>
 800b658:	0002      	movs	r2, r0
 800b65a:	000b      	movs	r3, r1
 800b65c:	60ba      	str	r2, [r7, #8]
 800b65e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6938      	ldr	r0, [r7, #16]
 800b666:	6979      	ldr	r1, [r7, #20]
 800b668:	f7f6 fac2 	bl	8001bf0 <__aeabi_dsub>
 800b66c:	0002      	movs	r2, r0
 800b66e:	000b      	movs	r3, r1
 800b670:	0010      	movs	r0, r2
 800b672:	0019      	movs	r1, r3
 800b674:	2200      	movs	r2, #0
 800b676:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <nmea2decimal+0xd8>)
 800b678:	f7f5 fff8 	bl	800166c <__aeabi_dmul>
 800b67c:	0002      	movs	r2, r0
 800b67e:	000b      	movs	r3, r1
 800b680:	613a      	str	r2, [r7, #16]
 800b682:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800b684:	2200      	movs	r2, #0
 800b686:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <nmea2decimal+0xdc>)
 800b688:	6938      	ldr	r0, [r7, #16]
 800b68a:	6979      	ldr	r1, [r7, #20]
 800b68c:	f7f5 fbf4 	bl	8000e78 <__aeabi_ddiv>
 800b690:	0002      	movs	r2, r0
 800b692:	000b      	movs	r3, r1
 800b694:	613a      	str	r2, [r7, #16]
 800b696:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800b698:	1cfb      	adds	r3, r7, #3
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b53      	cmp	r3, #83	; 0x53
 800b69e:	d003      	beq.n	800b6a8 <nmea2decimal+0x90>
 800b6a0:	1cfb      	adds	r3, r7, #3
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b57      	cmp	r3, #87	; 0x57
 800b6a6:	d10e      	bne.n	800b6c6 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800b6a8:	68b8      	ldr	r0, [r7, #8]
 800b6aa:	68f9      	ldr	r1, [r7, #12]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f7f5 f882 	bl	80007b8 <__aeabi_dadd>
 800b6b4:	0002      	movs	r2, r0
 800b6b6:	000b      	movs	r3, r1
 800b6b8:	0011      	movs	r1, r2
 800b6ba:	000c      	movs	r4, r1
 800b6bc:	2180      	movs	r1, #128	; 0x80
 800b6be:	0609      	lsls	r1, r1, #24
 800b6c0:	4059      	eors	r1, r3
 800b6c2:	000d      	movs	r5, r1
 800b6c4:	e009      	b.n	800b6da <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800b6c6:	68b8      	ldr	r0, [r7, #8]
 800b6c8:	68f9      	ldr	r1, [r7, #12]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f7f5 f873 	bl	80007b8 <__aeabi_dadd>
 800b6d2:	0002      	movs	r2, r0
 800b6d4:	000b      	movs	r3, r1
 800b6d6:	0014      	movs	r4, r2
 800b6d8:	001d      	movs	r5, r3
}
 800b6da:	0022      	movs	r2, r4
 800b6dc:	002b      	movs	r3, r5
 800b6de:	0010      	movs	r0, r2
 800b6e0:	0019      	movs	r1, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	b006      	add	sp, #24
 800b6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e8:	080159f4 	.word	0x080159f4
 800b6ec:	40590000 	.word	0x40590000
 800b6f0:	40240000 	.word	0x40240000
 800b6f4:	40180000 	.word	0x40180000

0800b6f8 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	b08d      	sub	sp, #52	; 0x34
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	212c      	movs	r1, #44	; 0x2c
 800b708:	0018      	movs	r0, r3
 800b70a:	f7ff fcc7 	bl	800b09c <my_find_char_position>
 800b70e:	0003      	movs	r3, r0
 800b710:	001a      	movs	r2, r3
 800b712:	252f      	movs	r5, #47	; 0x2f
 800b714:	197b      	adds	r3, r7, r5
 800b716:	3201      	adds	r2, #1
 800b718:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2202      	movs	r2, #2
 800b71e:	212c      	movs	r1, #44	; 0x2c
 800b720:	0018      	movs	r0, r3
 800b722:	f7ff fcbb 	bl	800b09c <my_find_char_position>
 800b726:	0003      	movs	r3, r0
 800b728:	0019      	movs	r1, r3
 800b72a:	242e      	movs	r4, #46	; 0x2e
 800b72c:	193b      	adds	r3, r7, r4
 800b72e:	197a      	adds	r2, r7, r5
 800b730:	7812      	ldrb	r2, [r2, #0]
 800b732:	1a8a      	subs	r2, r1, r2
 800b734:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b736:	193b      	adds	r3, r7, r4
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	3301      	adds	r3, #1
 800b73c:	0018      	movs	r0, r3
 800b73e:	f000 fb3b 	bl	800bdb8 <malloc>
 800b742:	0003      	movs	r3, r0
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b746:	197b      	adds	r3, r7, r5
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	18d1      	adds	r1, r2, r3
 800b74e:	193b      	adds	r3, r7, r4
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	0018      	movs	r0, r3
 800b756:	f001 fe7c 	bl	800d452 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800b75a:	193b      	adds	r3, r7, r4
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b760:	18d3      	adds	r3, r2, r3
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b766:	197b      	adds	r3, r7, r5
 800b768:	781a      	ldrb	r2, [r3, #0]
 800b76a:	193b      	adds	r3, r7, r4
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	18d3      	adds	r3, r2, r3
 800b770:	3301      	adds	r3, #1
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	18d2      	adds	r2, r2, r3
 800b776:	2627      	movs	r6, #39	; 0x27
 800b778:	19bb      	adds	r3, r7, r6
 800b77a:	7812      	ldrb	r2, [r2, #0]
 800b77c:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800b77e:	19bb      	adds	r3, r7, r6
 800b780:	781a      	ldrb	r2, [r3, #0]
 800b782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b784:	0011      	movs	r1, r2
 800b786:	0018      	movs	r0, r3
 800b788:	f7ff ff46 	bl	800b618 <nmea2decimal>
 800b78c:	0002      	movs	r2, r0
 800b78e:	000b      	movs	r3, r1
 800b790:	61ba      	str	r2, [r7, #24]
 800b792:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	0018      	movs	r0, r3
 800b798:	f000 fb18 	bl	800bdcc <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800b79c:	2200      	movs	r2, #0
 800b79e:	4b49      	ldr	r3, [pc, #292]	; (800b8c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b7a0:	69b8      	ldr	r0, [r7, #24]
 800b7a2:	69f9      	ldr	r1, [r7, #28]
 800b7a4:	f7f5 ff62 	bl	800166c <__aeabi_dmul>
 800b7a8:	0002      	movs	r2, r0
 800b7aa:	000b      	movs	r3, r1
 800b7ac:	0010      	movs	r0, r2
 800b7ae:	0019      	movs	r1, r3
 800b7b0:	f008 fb20 	bl	8013df4 <round>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4b43      	ldr	r3, [pc, #268]	; (800b8c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b7b8:	f7f5 fb5e 	bl	8000e78 <__aeabi_ddiv>
 800b7bc:	0002      	movs	r2, r0
 800b7be:	000b      	movs	r3, r1
 800b7c0:	61ba      	str	r2, [r7, #24]
 800b7c2:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4b40      	ldr	r3, [pc, #256]	; (800b8c8 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b7c8:	69b8      	ldr	r0, [r7, #24]
 800b7ca:	69f9      	ldr	r1, [r7, #28]
 800b7cc:	f7f5 ff4e 	bl	800166c <__aeabi_dmul>
 800b7d0:	0002      	movs	r2, r0
 800b7d2:	000b      	movs	r3, r1
 800b7d4:	0010      	movs	r0, r2
 800b7d6:	0019      	movs	r1, r3
 800b7d8:	f7f6 fdaa 	bl	8002330 <__aeabi_d2iz>
 800b7dc:	0002      	movs	r2, r0
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2203      	movs	r2, #3
 800b7e6:	212c      	movs	r1, #44	; 0x2c
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7ff fc57 	bl	800b09c <my_find_char_position>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	197b      	adds	r3, r7, r5
 800b7f4:	3201      	adds	r2, #1
 800b7f6:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2204      	movs	r2, #4
 800b7fc:	212c      	movs	r1, #44	; 0x2c
 800b7fe:	0018      	movs	r0, r3
 800b800:	f7ff fc4c 	bl	800b09c <my_find_char_position>
 800b804:	0003      	movs	r3, r0
 800b806:	0019      	movs	r1, r3
 800b808:	193b      	adds	r3, r7, r4
 800b80a:	197a      	adds	r2, r7, r5
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	1a8a      	subs	r2, r1, r2
 800b810:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b812:	193b      	adds	r3, r7, r4
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	3301      	adds	r3, #1
 800b818:	0018      	movs	r0, r3
 800b81a:	f000 facd 	bl	800bdb8 <malloc>
 800b81e:	0003      	movs	r3, r0
 800b820:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b822:	197b      	adds	r3, r7, r5
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	18d1      	adds	r1, r2, r3
 800b82a:	193b      	adds	r3, r7, r4
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	0018      	movs	r0, r3
 800b832:	f001 fe0e 	bl	800d452 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800b836:	193b      	adds	r3, r7, r4
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	18d3      	adds	r3, r2, r3
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b842:	197b      	adds	r3, r7, r5
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	193b      	adds	r3, r7, r4
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	18d3      	adds	r3, r2, r3
 800b84c:	3301      	adds	r3, #1
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	18d2      	adds	r2, r2, r3
 800b852:	19bb      	adds	r3, r7, r6
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800b858:	19bb      	adds	r3, r7, r6
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	0011      	movs	r1, r2
 800b860:	0018      	movs	r0, r3
 800b862:	f7ff fed9 	bl	800b618 <nmea2decimal>
 800b866:	0002      	movs	r2, r0
 800b868:	000b      	movs	r3, r1
 800b86a:	60ba      	str	r2, [r7, #8]
 800b86c:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	0018      	movs	r0, r3
 800b872:	f000 faab 	bl	800bdcc <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800b876:	2200      	movs	r2, #0
 800b878:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b87a:	68b8      	ldr	r0, [r7, #8]
 800b87c:	68f9      	ldr	r1, [r7, #12]
 800b87e:	f7f5 fef5 	bl	800166c <__aeabi_dmul>
 800b882:	0002      	movs	r2, r0
 800b884:	000b      	movs	r3, r1
 800b886:	0010      	movs	r0, r2
 800b888:	0019      	movs	r1, r3
 800b88a:	f008 fab3 	bl	8013df4 <round>
 800b88e:	2200      	movs	r2, #0
 800b890:	4b0c      	ldr	r3, [pc, #48]	; (800b8c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b892:	f7f5 faf1 	bl	8000e78 <__aeabi_ddiv>
 800b896:	0002      	movs	r2, r0
 800b898:	000b      	movs	r3, r1
 800b89a:	60ba      	str	r2, [r7, #8]
 800b89c:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b8a2:	68b8      	ldr	r0, [r7, #8]
 800b8a4:	68f9      	ldr	r1, [r7, #12]
 800b8a6:	f7f5 fee1 	bl	800166c <__aeabi_dmul>
 800b8aa:	0002      	movs	r2, r0
 800b8ac:	000b      	movs	r3, r1
 800b8ae:	0010      	movs	r0, r2
 800b8b0:	0019      	movs	r1, r3
 800b8b2:	f7f6 fd3d 	bl	8002330 <__aeabi_d2iz>
 800b8b6:	0002      	movs	r2, r0
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	605a      	str	r2, [r3, #4]
}
 800b8bc:	46c0      	nop			; (mov r8, r8)
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b00d      	add	sp, #52	; 0x34
 800b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c4:	412e8480 	.word	0x412e8480
 800b8c8:	416312d0 	.word	0x416312d0

0800b8cc <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800b8cc:	b5b0      	push	{r4, r5, r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800b8d4:	240e      	movs	r4, #14
 800b8d6:	193b      	adds	r3, r7, r4
 800b8d8:	2200      	movs	r2, #0
 800b8da:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2203      	movs	r2, #3
 800b8e0:	212c      	movs	r1, #44	; 0x2c
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f7ff fbda 	bl	800b09c <my_find_char_position>
 800b8e8:	0003      	movs	r3, r0
 800b8ea:	001a      	movs	r2, r3
 800b8ec:	2517      	movs	r5, #23
 800b8ee:	197b      	adds	r3, r7, r5
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b8f4:	2003      	movs	r0, #3
 800b8f6:	f000 fa5f 	bl	800bdb8 <malloc>
 800b8fa:	0003      	movs	r3, r0
 800b8fc:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b8fe:	197b      	adds	r3, r7, r5
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	18d1      	adds	r1, r2, r3
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2202      	movs	r2, #2
 800b90a:	0018      	movs	r0, r3
 800b90c:	f001 fda1 	bl	800d452 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	3302      	adds	r3, #2
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800b918:	193a      	adds	r2, r7, r4
 800b91a:	4907      	ldr	r1, [pc, #28]	; (800b938 <my_nmea_get_gsv_tns+0x6c>)
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	0018      	movs	r0, r3
 800b920:	f001 fcfa 	bl	800d318 <sscanf>
	free ( s ) ;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	0018      	movs	r0, r3
 800b928:	f000 fa50 	bl	800bdcc <free>
	return tns ;
 800b92c:	193b      	adds	r3, r7, r4
 800b92e:	881b      	ldrh	r3, [r3, #0]
}
 800b930:	0018      	movs	r0, r3
 800b932:	46bd      	mov	sp, r7
 800b934:	b006      	add	sp, #24
 800b936:	bdb0      	pop	{r4, r5, r7, pc}
 800b938:	08015a00 	.word	0x08015a00

0800b93c <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b93c:	b590      	push	{r4, r7, lr}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2209      	movs	r2, #9
 800b94a:	212c      	movs	r1, #44	; 0x2c
 800b94c:	0018      	movs	r0, r3
 800b94e:	f7ff fba5 	bl	800b09c <my_find_char_position>
 800b952:	0003      	movs	r3, r0
 800b954:	001a      	movs	r2, r3
 800b956:	2417      	movs	r4, #23
 800b958:	193b      	adds	r3, r7, r4
 800b95a:	3205      	adds	r2, #5
 800b95c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b95e:	2003      	movs	r0, #3
 800b960:	f000 fa2a 	bl	800bdb8 <malloc>
 800b964:	0003      	movs	r3, r0
 800b966:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b968:	193b      	adds	r3, r7, r4
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	18d1      	adds	r1, r2, r3
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2202      	movs	r2, #2
 800b974:	0018      	movs	r0, r3
 800b976:	f001 fd6c 	bl	800d452 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	3302      	adds	r3, #2
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b982:	240e      	movs	r4, #14
 800b984:	193a      	adds	r2, r7, r4
 800b986:	4909      	ldr	r1, [pc, #36]	; (800b9ac <my_nmea_get_rmc_date_yy+0x70>)
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	0018      	movs	r0, r3
 800b98c:	f001 fcc4 	bl	800d318 <sscanf>
	free ( s ) ;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	0018      	movs	r0, r3
 800b994:	f000 fa1a 	bl	800bdcc <free>
	*yy = (uint8_t) temp ;
 800b998:	193b      	adds	r3, r7, r4
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	701a      	strb	r2, [r3, #0]

}
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	b007      	add	sp, #28
 800b9a8:	bd90      	pop	{r4, r7, pc}
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	08015a00 	.word	0x08015a00

0800b9b0 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2209      	movs	r2, #9
 800b9be:	212c      	movs	r1, #44	; 0x2c
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	f7ff fb6b 	bl	800b09c <my_find_char_position>
 800b9c6:	0003      	movs	r3, r0
 800b9c8:	001a      	movs	r2, r3
 800b9ca:	2417      	movs	r4, #23
 800b9cc:	193b      	adds	r3, r7, r4
 800b9ce:	3203      	adds	r2, #3
 800b9d0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b9d2:	2003      	movs	r0, #3
 800b9d4:	f000 f9f0 	bl	800bdb8 <malloc>
 800b9d8:	0003      	movs	r3, r0
 800b9da:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b9dc:	193b      	adds	r3, r7, r4
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	18d1      	adds	r1, r2, r3
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f001 fd32 	bl	800d452 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	3302      	adds	r3, #2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b9f6:	240e      	movs	r4, #14
 800b9f8:	193a      	adds	r2, r7, r4
 800b9fa:	4909      	ldr	r1, [pc, #36]	; (800ba20 <my_nmea_get_rmc_date_mm+0x70>)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f001 fc8a 	bl	800d318 <sscanf>
	free ( s ) ;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	0018      	movs	r0, r3
 800ba08:	f000 f9e0 	bl	800bdcc <free>
	*mm = (uint8_t) temp ;
 800ba0c:	193b      	adds	r3, r7, r4
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	701a      	strb	r2, [r3, #0]

}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	b007      	add	sp, #28
 800ba1c:	bd90      	pop	{r4, r7, pc}
 800ba1e:	46c0      	nop			; (mov r8, r8)
 800ba20:	08015a00 	.word	0x08015a00

0800ba24 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b087      	sub	sp, #28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2209      	movs	r2, #9
 800ba32:	212c      	movs	r1, #44	; 0x2c
 800ba34:	0018      	movs	r0, r3
 800ba36:	f7ff fb31 	bl	800b09c <my_find_char_position>
 800ba3a:	0003      	movs	r3, r0
 800ba3c:	001a      	movs	r2, r3
 800ba3e:	2417      	movs	r4, #23
 800ba40:	193b      	adds	r3, r7, r4
 800ba42:	3201      	adds	r2, #1
 800ba44:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ba46:	2003      	movs	r0, #3
 800ba48:	f000 f9b6 	bl	800bdb8 <malloc>
 800ba4c:	0003      	movs	r3, r0
 800ba4e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ba50:	193b      	adds	r3, r7, r4
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	18d1      	adds	r1, r2, r3
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f001 fcf8 	bl	800d452 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3302      	adds	r3, #2
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba6a:	240e      	movs	r4, #14
 800ba6c:	193a      	adds	r2, r7, r4
 800ba6e:	4909      	ldr	r1, [pc, #36]	; (800ba94 <my_nmea_get_rmc_date_dd+0x70>)
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	0018      	movs	r0, r3
 800ba74:	f001 fc50 	bl	800d318 <sscanf>
	free ( s ) ;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	0018      	movs	r0, r3
 800ba7c:	f000 f9a6 	bl	800bdcc <free>
	*dd = (uint8_t) temp ;
 800ba80:	193b      	adds	r3, r7, r4
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	701a      	strb	r2, [r3, #0]

}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b007      	add	sp, #28
 800ba90:	bd90      	pop	{r4, r7, pc}
 800ba92:	46c0      	nop			; (mov r8, r8)
 800ba94:	08015a00 	.word	0x08015a00

0800ba98 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	212c      	movs	r1, #44	; 0x2c
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7ff faf7 	bl	800b09c <my_find_char_position>
 800baae:	0003      	movs	r3, r0
 800bab0:	001a      	movs	r2, r3
 800bab2:	2417      	movs	r4, #23
 800bab4:	193b      	adds	r3, r7, r4
 800bab6:	3201      	adds	r2, #1
 800bab8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800baba:	2003      	movs	r0, #3
 800babc:	f000 f97c 	bl	800bdb8 <malloc>
 800bac0:	0003      	movs	r3, r0
 800bac2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bac4:	193b      	adds	r3, r7, r4
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	18d1      	adds	r1, r2, r3
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	2202      	movs	r2, #2
 800bad0:	0018      	movs	r0, r3
 800bad2:	f001 fcbe 	bl	800d452 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	3302      	adds	r3, #2
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bade:	240e      	movs	r4, #14
 800bae0:	193a      	adds	r2, r7, r4
 800bae2:	4909      	ldr	r1, [pc, #36]	; (800bb08 <my_nmea_get_rmc_utc_hh+0x70>)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	0018      	movs	r0, r3
 800bae8:	f001 fc16 	bl	800d318 <sscanf>
	free ( s ) ;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	0018      	movs	r0, r3
 800baf0:	f000 f96c 	bl	800bdcc <free>
	*hh = (uint8_t) temp ;
 800baf4:	193b      	adds	r3, r7, r4
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	701a      	strb	r2, [r3, #0]

}
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	46bd      	mov	sp, r7
 800bb02:	b007      	add	sp, #28
 800bb04:	bd90      	pop	{r4, r7, pc}
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	08015a00 	.word	0x08015a00

0800bb0c <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	212c      	movs	r1, #44	; 0x2c
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f7ff fabd 	bl	800b09c <my_find_char_position>
 800bb22:	0003      	movs	r3, r0
 800bb24:	001a      	movs	r2, r3
 800bb26:	2417      	movs	r4, #23
 800bb28:	193b      	adds	r3, r7, r4
 800bb2a:	3203      	adds	r2, #3
 800bb2c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bb2e:	2003      	movs	r0, #3
 800bb30:	f000 f942 	bl	800bdb8 <malloc>
 800bb34:	0003      	movs	r3, r0
 800bb36:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bb38:	193b      	adds	r3, r7, r4
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	18d1      	adds	r1, r2, r3
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2202      	movs	r2, #2
 800bb44:	0018      	movs	r0, r3
 800bb46:	f001 fc84 	bl	800d452 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bb52:	240e      	movs	r4, #14
 800bb54:	193a      	adds	r2, r7, r4
 800bb56:	4909      	ldr	r1, [pc, #36]	; (800bb7c <my_nmea_get_rmc_utc_mm+0x70>)
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	0018      	movs	r0, r3
 800bb5c:	f001 fbdc 	bl	800d318 <sscanf>
	free ( s ) ;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	0018      	movs	r0, r3
 800bb64:	f000 f932 	bl	800bdcc <free>
	*mm = (uint8_t) temp ;
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	701a      	strb	r2, [r3, #0]

}
 800bb72:	46c0      	nop			; (mov r8, r8)
 800bb74:	46bd      	mov	sp, r7
 800bb76:	b007      	add	sp, #28
 800bb78:	bd90      	pop	{r4, r7, pc}
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	08015a00 	.word	0x08015a00

0800bb80 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800bb80:	b590      	push	{r4, r7, lr}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	212c      	movs	r1, #44	; 0x2c
 800bb90:	0018      	movs	r0, r3
 800bb92:	f7ff fa83 	bl	800b09c <my_find_char_position>
 800bb96:	0003      	movs	r3, r0
 800bb98:	001a      	movs	r2, r3
 800bb9a:	2417      	movs	r4, #23
 800bb9c:	193b      	adds	r3, r7, r4
 800bb9e:	3205      	adds	r2, #5
 800bba0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bba2:	2003      	movs	r0, #3
 800bba4:	f000 f908 	bl	800bdb8 <malloc>
 800bba8:	0003      	movs	r3, r0
 800bbaa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bbac:	193b      	adds	r3, r7, r4
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	18d1      	adds	r1, r2, r3
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f001 fc4a 	bl	800d452 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	3302      	adds	r3, #2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bbc6:	240e      	movs	r4, #14
 800bbc8:	193a      	adds	r2, r7, r4
 800bbca:	4909      	ldr	r1, [pc, #36]	; (800bbf0 <my_nmea_get_rmc_utc_ss+0x70>)
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f001 fba2 	bl	800d318 <sscanf>
	free ( s ) ;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	f000 f8f8 	bl	800bdcc <free>
	*ss = (uint8_t) temp ;
 800bbdc:	193b      	adds	r3, r7, r4
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	701a      	strb	r2, [r3, #0]

}
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b007      	add	sp, #28
 800bbec:	bd90      	pop	{r4, r7, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	08015a00 	.word	0x08015a00

0800bbf4 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	212c      	movs	r1, #44	; 0x2c
 800bc04:	0018      	movs	r0, r3
 800bc06:	f7ff fa49 	bl	800b09c <my_find_char_position>
 800bc0a:	0003      	movs	r3, r0
 800bc0c:	001a      	movs	r2, r3
 800bc0e:	240f      	movs	r4, #15
 800bc10:	193b      	adds	r3, r7, r4
 800bc12:	3208      	adds	r2, #8
 800bc14:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bc16:	2004      	movs	r0, #4
 800bc18:	f000 f8ce 	bl	800bdb8 <malloc>
 800bc1c:	0003      	movs	r3, r0
 800bc1e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bc20:	193b      	adds	r3, r7, r4
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	18d1      	adds	r1, r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2203      	movs	r2, #3
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f001 fc10 	bl	800d452 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	3303      	adds	r3, #3
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	4906      	ldr	r1, [pc, #24]	; (800bc58 <my_nmea_get_rmc_utc_sss+0x64>)
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	0018      	movs	r0, r3
 800bc42:	f001 fb69 	bl	800d318 <sscanf>
	free ( s ) ;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f000 f8bf 	bl	800bdcc <free>
}
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b005      	add	sp, #20
 800bc54:	bd90      	pop	{r4, r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	08015a04 	.word	0x08015a04

0800bc5c <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	0018      	movs	r0, r3
 800bc68:	f7f4 fa4c 	bl	8000104 <strlen>
 800bc6c:	0003      	movs	r3, r0
 800bc6e:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800bc70:	2317      	movs	r3, #23
 800bc72:	18fb      	adds	r3, r7, r3
 800bc74:	2200      	movs	r2, #0
 800bc76:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800bc78:	2316      	movs	r3, #22
 800bc7a:	18fb      	adds	r3, r7, r3
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d902      	bls.n	800bc8c <my_tracker_api_is_cmd+0x30>
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b09      	cmp	r3, #9
 800bc8a:	d901      	bls.n	800bc90 <my_tracker_api_is_cmd+0x34>
		return false ;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e04b      	b.n	800bd28 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800bc90:	2317      	movs	r3, #23
 800bc92:	18fb      	adds	r3, r7, r3
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e025      	b.n	800bce6 <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800bc9a:	2317      	movs	r3, #23
 800bc9c:	18fb      	adds	r3, r7, r3
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	18d3      	adds	r3, r2, r3
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b2c      	cmp	r3, #44	; 0x2c
 800bca8:	d106      	bne.n	800bcb8 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800bcaa:	2116      	movs	r1, #22
 800bcac:	187b      	adds	r3, r7, r1
 800bcae:	781a      	ldrb	r2, [r3, #0]
 800bcb0:	187b      	adds	r3, r7, r1
 800bcb2:	3201      	adds	r2, #1
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e010      	b.n	800bcda <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800bcb8:	2117      	movs	r1, #23
 800bcba:	187b      	adds	r3, r7, r1
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	18d3      	adds	r3, r2, r3
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b2f      	cmp	r3, #47	; 0x2f
 800bcc6:	d906      	bls.n	800bcd6 <my_tracker_api_is_cmd+0x7a>
 800bcc8:	187b      	adds	r3, r7, r1
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	18d3      	adds	r3, r2, r3
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b39      	cmp	r3, #57	; 0x39
 800bcd4:	d901      	bls.n	800bcda <my_tracker_api_is_cmd+0x7e>
			return false;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e026      	b.n	800bd28 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800bcda:	2117      	movs	r1, #23
 800bcdc:	187b      	adds	r3, r7, r1
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	187b      	adds	r3, r7, r1
 800bce2:	3201      	adds	r2, #1
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	2317      	movs	r3, #23
 800bce8:	18fb      	adds	r3, r7, r3
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d8d3      	bhi.n	800bc9a <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800bcf2:	2316      	movs	r3, #22
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d901      	bls.n	800bd00 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e013      	b.n	800bd28 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	212c      	movs	r1, #44	; 0x2c
 800bd04:	0018      	movs	r0, r3
 800bd06:	f001 fb85 	bl	800d414 <strchr>
 800bd0a:	0003      	movs	r3, r0
 800bd0c:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d802      	bhi.n	800bd22 <my_tracker_api_is_cmd+0xc6>
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <my_tracker_api_is_cmd+0xca>
		return false ;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e000      	b.n	800bd28 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800bd26:	2301      	movs	r3, #1
}
 800bd28:	0018      	movs	r0, r3
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	b006      	add	sp, #24
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800bd4c:	4a19      	ldr	r2, [pc, #100]	; (800bdb4 <my_tracker_api_parse_cmd+0x84>)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	0011      	movs	r1, r2
 800bd52:	0018      	movs	r0, r3
 800bd54:	f001 fb92 	bl	800d47c <strtok>
 800bd58:	0003      	movs	r3, r0
 800bd5a:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	0018      	movs	r0, r3
 800bd60:	f7ff fb3e 	bl	800b3e0 <my_conv_string_2_uint32_t>
 800bd64:	0003      	movs	r3, r0
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800bd6c:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <my_tracker_api_parse_cmd+0x84>)
 800bd6e:	0019      	movs	r1, r3
 800bd70:	2000      	movs	r0, #0
 800bd72:	f001 fb83 	bl	800d47c <strtok>
 800bd76:	0003      	movs	r3, r0
 800bd78:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f7ff fb2f 	bl	800b3e0 <my_conv_string_2_uint32_t>
 800bd82:	0002      	movs	r2, r0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <my_tracker_api_parse_cmd+0x84>)
 800bd8a:	0019      	movs	r1, r3
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	f001 fb75 	bl	800d47c <strtok>
 800bd92:	0003      	movs	r3, r0
 800bd94:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <my_tracker_api_parse_cmd+0x74>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e000      	b.n	800bdaa <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800bda8:	2301      	movs	r3, #1
}
 800bdaa:	0018      	movs	r0, r3
 800bdac:	46bd      	mov	sp, r7
 800bdae:	b004      	add	sp, #16
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	08015a08 	.word	0x08015a08

0800bdb8 <malloc>:
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	4b03      	ldr	r3, [pc, #12]	; (800bdc8 <malloc+0x10>)
 800bdbc:	0001      	movs	r1, r0
 800bdbe:	6818      	ldr	r0, [r3, #0]
 800bdc0:	f000 f80e 	bl	800bde0 <_malloc_r>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	200006d0 	.word	0x200006d0

0800bdcc <free>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	4b03      	ldr	r3, [pc, #12]	; (800bddc <free+0x10>)
 800bdd0:	0001      	movs	r1, r0
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	f001 fcbe 	bl	800d754 <_free_r>
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	200006d0 	.word	0x200006d0

0800bde0 <_malloc_r>:
 800bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde2:	000d      	movs	r5, r1
 800bde4:	b087      	sub	sp, #28
 800bde6:	350b      	adds	r5, #11
 800bde8:	9001      	str	r0, [sp, #4]
 800bdea:	2d16      	cmp	r5, #22
 800bdec:	d908      	bls.n	800be00 <_malloc_r+0x20>
 800bdee:	2207      	movs	r2, #7
 800bdf0:	4395      	bics	r5, r2
 800bdf2:	d506      	bpl.n	800be02 <_malloc_r+0x22>
 800bdf4:	230c      	movs	r3, #12
 800bdf6:	9a01      	ldr	r2, [sp, #4]
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	b007      	add	sp, #28
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be00:	2510      	movs	r5, #16
 800be02:	42a9      	cmp	r1, r5
 800be04:	d8f6      	bhi.n	800bdf4 <_malloc_r+0x14>
 800be06:	9801      	ldr	r0, [sp, #4]
 800be08:	f000 f9fe 	bl	800c208 <__malloc_lock>
 800be0c:	23fc      	movs	r3, #252	; 0xfc
 800be0e:	4ebe      	ldr	r6, [pc, #760]	; (800c108 <_malloc_r+0x328>)
 800be10:	005b      	lsls	r3, r3, #1
 800be12:	429d      	cmp	r5, r3
 800be14:	d219      	bcs.n	800be4a <_malloc_r+0x6a>
 800be16:	002a      	movs	r2, r5
 800be18:	3208      	adds	r2, #8
 800be1a:	18b2      	adds	r2, r6, r2
 800be1c:	0011      	movs	r1, r2
 800be1e:	6854      	ldr	r4, [r2, #4]
 800be20:	3908      	subs	r1, #8
 800be22:	08eb      	lsrs	r3, r5, #3
 800be24:	428c      	cmp	r4, r1
 800be26:	d103      	bne.n	800be30 <_malloc_r+0x50>
 800be28:	68d4      	ldr	r4, [r2, #12]
 800be2a:	3302      	adds	r3, #2
 800be2c:	42a2      	cmp	r2, r4
 800be2e:	d022      	beq.n	800be76 <_malloc_r+0x96>
 800be30:	2203      	movs	r2, #3
 800be32:	6863      	ldr	r3, [r4, #4]
 800be34:	68a1      	ldr	r1, [r4, #8]
 800be36:	4393      	bics	r3, r2
 800be38:	68e2      	ldr	r2, [r4, #12]
 800be3a:	18e3      	adds	r3, r4, r3
 800be3c:	60ca      	str	r2, [r1, #12]
 800be3e:	6091      	str	r1, [r2, #8]
 800be40:	2201      	movs	r2, #1
 800be42:	6859      	ldr	r1, [r3, #4]
 800be44:	430a      	orrs	r2, r1
 800be46:	605a      	str	r2, [r3, #4]
 800be48:	e02a      	b.n	800bea0 <_malloc_r+0xc0>
 800be4a:	233f      	movs	r3, #63	; 0x3f
 800be4c:	0a6a      	lsrs	r2, r5, #9
 800be4e:	d003      	beq.n	800be58 <_malloc_r+0x78>
 800be50:	2a04      	cmp	r2, #4
 800be52:	d82b      	bhi.n	800beac <_malloc_r+0xcc>
 800be54:	09ab      	lsrs	r3, r5, #6
 800be56:	3338      	adds	r3, #56	; 0x38
 800be58:	2203      	movs	r2, #3
 800be5a:	4694      	mov	ip, r2
 800be5c:	00d9      	lsls	r1, r3, #3
 800be5e:	1989      	adds	r1, r1, r6
 800be60:	68cc      	ldr	r4, [r1, #12]
 800be62:	428c      	cmp	r4, r1
 800be64:	d006      	beq.n	800be74 <_malloc_r+0x94>
 800be66:	4660      	mov	r0, ip
 800be68:	6862      	ldr	r2, [r4, #4]
 800be6a:	4382      	bics	r2, r0
 800be6c:	1b57      	subs	r7, r2, r5
 800be6e:	2f0f      	cmp	r7, #15
 800be70:	dd34      	ble.n	800bedc <_malloc_r+0xfc>
 800be72:	3b01      	subs	r3, #1
 800be74:	3301      	adds	r3, #1
 800be76:	6934      	ldr	r4, [r6, #16]
 800be78:	49a4      	ldr	r1, [pc, #656]	; (800c10c <_malloc_r+0x32c>)
 800be7a:	428c      	cmp	r4, r1
 800be7c:	d055      	beq.n	800bf2a <_malloc_r+0x14a>
 800be7e:	2003      	movs	r0, #3
 800be80:	6862      	ldr	r2, [r4, #4]
 800be82:	4382      	bics	r2, r0
 800be84:	1b50      	subs	r0, r2, r5
 800be86:	280f      	cmp	r0, #15
 800be88:	dd36      	ble.n	800bef8 <_malloc_r+0x118>
 800be8a:	2301      	movs	r3, #1
 800be8c:	1967      	adds	r7, r4, r5
 800be8e:	431d      	orrs	r5, r3
 800be90:	4303      	orrs	r3, r0
 800be92:	6065      	str	r5, [r4, #4]
 800be94:	6177      	str	r7, [r6, #20]
 800be96:	6137      	str	r7, [r6, #16]
 800be98:	60f9      	str	r1, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607b      	str	r3, [r7, #4]
 800be9e:	50a0      	str	r0, [r4, r2]
 800bea0:	9801      	ldr	r0, [sp, #4]
 800bea2:	f000 f9b9 	bl	800c218 <__malloc_unlock>
 800bea6:	0020      	movs	r0, r4
 800bea8:	3008      	adds	r0, #8
 800beaa:	e7a7      	b.n	800bdfc <_malloc_r+0x1c>
 800beac:	2a14      	cmp	r2, #20
 800beae:	d802      	bhi.n	800beb6 <_malloc_r+0xd6>
 800beb0:	0013      	movs	r3, r2
 800beb2:	335b      	adds	r3, #91	; 0x5b
 800beb4:	e7d0      	b.n	800be58 <_malloc_r+0x78>
 800beb6:	2a54      	cmp	r2, #84	; 0x54
 800beb8:	d802      	bhi.n	800bec0 <_malloc_r+0xe0>
 800beba:	0b2b      	lsrs	r3, r5, #12
 800bebc:	336e      	adds	r3, #110	; 0x6e
 800bebe:	e7cb      	b.n	800be58 <_malloc_r+0x78>
 800bec0:	23aa      	movs	r3, #170	; 0xaa
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d802      	bhi.n	800bece <_malloc_r+0xee>
 800bec8:	0beb      	lsrs	r3, r5, #15
 800beca:	3377      	adds	r3, #119	; 0x77
 800becc:	e7c4      	b.n	800be58 <_malloc_r+0x78>
 800bece:	4990      	ldr	r1, [pc, #576]	; (800c110 <_malloc_r+0x330>)
 800bed0:	237e      	movs	r3, #126	; 0x7e
 800bed2:	428a      	cmp	r2, r1
 800bed4:	d8c0      	bhi.n	800be58 <_malloc_r+0x78>
 800bed6:	0cab      	lsrs	r3, r5, #18
 800bed8:	337c      	adds	r3, #124	; 0x7c
 800beda:	e7bd      	b.n	800be58 <_malloc_r+0x78>
 800bedc:	68e0      	ldr	r0, [r4, #12]
 800bede:	2f00      	cmp	r7, #0
 800bee0:	db08      	blt.n	800bef4 <_malloc_r+0x114>
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	60d8      	str	r0, [r3, #12]
 800bee6:	6083      	str	r3, [r0, #8]
 800bee8:	2301      	movs	r3, #1
 800beea:	18a2      	adds	r2, r4, r2
 800beec:	6851      	ldr	r1, [r2, #4]
 800beee:	430b      	orrs	r3, r1
 800bef0:	6053      	str	r3, [r2, #4]
 800bef2:	e7d5      	b.n	800bea0 <_malloc_r+0xc0>
 800bef4:	0004      	movs	r4, r0
 800bef6:	e7b4      	b.n	800be62 <_malloc_r+0x82>
 800bef8:	6171      	str	r1, [r6, #20]
 800befa:	6131      	str	r1, [r6, #16]
 800befc:	2800      	cmp	r0, #0
 800befe:	daf3      	bge.n	800bee8 <_malloc_r+0x108>
 800bf00:	6871      	ldr	r1, [r6, #4]
 800bf02:	468c      	mov	ip, r1
 800bf04:	2180      	movs	r1, #128	; 0x80
 800bf06:	0089      	lsls	r1, r1, #2
 800bf08:	428a      	cmp	r2, r1
 800bf0a:	d300      	bcc.n	800bf0e <_malloc_r+0x12e>
 800bf0c:	e08c      	b.n	800c028 <_malloc_r+0x248>
 800bf0e:	08d1      	lsrs	r1, r2, #3
 800bf10:	0950      	lsrs	r0, r2, #5
 800bf12:	2201      	movs	r2, #1
 800bf14:	4082      	lsls	r2, r0
 800bf16:	4660      	mov	r0, ip
 800bf18:	4302      	orrs	r2, r0
 800bf1a:	6072      	str	r2, [r6, #4]
 800bf1c:	00ca      	lsls	r2, r1, #3
 800bf1e:	1992      	adds	r2, r2, r6
 800bf20:	6891      	ldr	r1, [r2, #8]
 800bf22:	60e2      	str	r2, [r4, #12]
 800bf24:	60a1      	str	r1, [r4, #8]
 800bf26:	6094      	str	r4, [r2, #8]
 800bf28:	60cc      	str	r4, [r1, #12]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4876      	ldr	r0, [pc, #472]	; (800c108 <_malloc_r+0x328>)
 800bf2e:	1099      	asrs	r1, r3, #2
 800bf30:	408a      	lsls	r2, r1
 800bf32:	6841      	ldr	r1, [r0, #4]
 800bf34:	4291      	cmp	r1, r2
 800bf36:	d328      	bcc.n	800bf8a <_malloc_r+0x1aa>
 800bf38:	420a      	tst	r2, r1
 800bf3a:	d105      	bne.n	800bf48 <_malloc_r+0x168>
 800bf3c:	2403      	movs	r4, #3
 800bf3e:	43a3      	bics	r3, r4
 800bf40:	0052      	lsls	r2, r2, #1
 800bf42:	3304      	adds	r3, #4
 800bf44:	420a      	tst	r2, r1
 800bf46:	d0fb      	beq.n	800bf40 <_malloc_r+0x160>
 800bf48:	496f      	ldr	r1, [pc, #444]	; (800c108 <_malloc_r+0x328>)
 800bf4a:	9104      	str	r1, [sp, #16]
 800bf4c:	00d9      	lsls	r1, r3, #3
 800bf4e:	1841      	adds	r1, r0, r1
 800bf50:	468c      	mov	ip, r1
 800bf52:	000f      	movs	r7, r1
 800bf54:	9302      	str	r3, [sp, #8]
 800bf56:	68fc      	ldr	r4, [r7, #12]
 800bf58:	42bc      	cmp	r4, r7
 800bf5a:	d000      	beq.n	800bf5e <_malloc_r+0x17e>
 800bf5c:	e09b      	b.n	800c096 <_malloc_r+0x2b6>
 800bf5e:	2403      	movs	r4, #3
 800bf60:	9902      	ldr	r1, [sp, #8]
 800bf62:	3708      	adds	r7, #8
 800bf64:	3101      	adds	r1, #1
 800bf66:	9102      	str	r1, [sp, #8]
 800bf68:	4221      	tst	r1, r4
 800bf6a:	d1f4      	bne.n	800bf56 <_malloc_r+0x176>
 800bf6c:	2103      	movs	r1, #3
 800bf6e:	420b      	tst	r3, r1
 800bf70:	d000      	beq.n	800bf74 <_malloc_r+0x194>
 800bf72:	e0b7      	b.n	800c0e4 <_malloc_r+0x304>
 800bf74:	6843      	ldr	r3, [r0, #4]
 800bf76:	4393      	bics	r3, r2
 800bf78:	6043      	str	r3, [r0, #4]
 800bf7a:	9b04      	ldr	r3, [sp, #16]
 800bf7c:	0052      	lsls	r2, r2, #1
 800bf7e:	6859      	ldr	r1, [r3, #4]
 800bf80:	4291      	cmp	r1, r2
 800bf82:	d302      	bcc.n	800bf8a <_malloc_r+0x1aa>
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	d000      	beq.n	800bf8a <_malloc_r+0x1aa>
 800bf88:	e0bb      	b.n	800c102 <_malloc_r+0x322>
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	6883      	ldr	r3, [r0, #8]
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	4393      	bics	r3, r2
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	42ab      	cmp	r3, r5
 800bf98:	d303      	bcc.n	800bfa2 <_malloc_r+0x1c2>
 800bf9a:	1b59      	subs	r1, r3, r5
 800bf9c:	290f      	cmp	r1, #15
 800bf9e:	dd00      	ble.n	800bfa2 <_malloc_r+0x1c2>
 800bfa0:	e123      	b.n	800c1ea <_malloc_r+0x40a>
 800bfa2:	9b02      	ldr	r3, [sp, #8]
 800bfa4:	9a03      	ldr	r2, [sp, #12]
 800bfa6:	2008      	movs	r0, #8
 800bfa8:	189e      	adds	r6, r3, r2
 800bfaa:	4b5a      	ldr	r3, [pc, #360]	; (800c114 <_malloc_r+0x334>)
 800bfac:	681f      	ldr	r7, [r3, #0]
 800bfae:	f001 fb4b 	bl	800d648 <sysconf>
 800bfb2:	4b59      	ldr	r3, [pc, #356]	; (800c118 <_malloc_r+0x338>)
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	197f      	adds	r7, r7, r5
 800bfba:	9004      	str	r0, [sp, #16]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	d003      	beq.n	800bfc8 <_malloc_r+0x1e8>
 800bfc0:	1e7b      	subs	r3, r7, #1
 800bfc2:	181b      	adds	r3, r3, r0
 800bfc4:	4247      	negs	r7, r0
 800bfc6:	401f      	ands	r7, r3
 800bfc8:	0039      	movs	r1, r7
 800bfca:	9801      	ldr	r0, [sp, #4]
 800bfcc:	f001 fae8 	bl	800d5a0 <_sbrk_r>
 800bfd0:	0004      	movs	r4, r0
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d100      	bne.n	800bfd8 <_malloc_r+0x1f8>
 800bfd6:	e0de      	b.n	800c196 <_malloc_r+0x3b6>
 800bfd8:	4286      	cmp	r6, r0
 800bfda:	d904      	bls.n	800bfe6 <_malloc_r+0x206>
 800bfdc:	4b4a      	ldr	r3, [pc, #296]	; (800c108 <_malloc_r+0x328>)
 800bfde:	9a02      	ldr	r2, [sp, #8]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d000      	beq.n	800bfe6 <_malloc_r+0x206>
 800bfe4:	e0d7      	b.n	800c196 <_malloc_r+0x3b6>
 800bfe6:	4a4d      	ldr	r2, [pc, #308]	; (800c11c <_malloc_r+0x33c>)
 800bfe8:	6813      	ldr	r3, [r2, #0]
 800bfea:	18fb      	adds	r3, r7, r3
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	9a04      	ldr	r2, [sp, #16]
 800bff0:	3a01      	subs	r2, #1
 800bff2:	42a6      	cmp	r6, r4
 800bff4:	d000      	beq.n	800bff8 <_malloc_r+0x218>
 800bff6:	e097      	b.n	800c128 <_malloc_r+0x348>
 800bff8:	4216      	tst	r6, r2
 800bffa:	d000      	beq.n	800bffe <_malloc_r+0x21e>
 800bffc:	e094      	b.n	800c128 <_malloc_r+0x348>
 800bffe:	4b42      	ldr	r3, [pc, #264]	; (800c108 <_malloc_r+0x328>)
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	19df      	adds	r7, r3, r7
 800c006:	2301      	movs	r3, #1
 800c008:	433b      	orrs	r3, r7
 800c00a:	6053      	str	r3, [r2, #4]
 800c00c:	4b43      	ldr	r3, [pc, #268]	; (800c11c <_malloc_r+0x33c>)
 800c00e:	4a44      	ldr	r2, [pc, #272]	; (800c120 <_malloc_r+0x340>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6811      	ldr	r1, [r2, #0]
 800c014:	428b      	cmp	r3, r1
 800c016:	d900      	bls.n	800c01a <_malloc_r+0x23a>
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	4a42      	ldr	r2, [pc, #264]	; (800c124 <_malloc_r+0x344>)
 800c01c:	6811      	ldr	r1, [r2, #0]
 800c01e:	428b      	cmp	r3, r1
 800c020:	d800      	bhi.n	800c024 <_malloc_r+0x244>
 800c022:	e0b8      	b.n	800c196 <_malloc_r+0x3b6>
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	e0b6      	b.n	800c196 <_malloc_r+0x3b6>
 800c028:	0a50      	lsrs	r0, r2, #9
 800c02a:	2804      	cmp	r0, #4
 800c02c:	d811      	bhi.n	800c052 <_malloc_r+0x272>
 800c02e:	0991      	lsrs	r1, r2, #6
 800c030:	3138      	adds	r1, #56	; 0x38
 800c032:	00cf      	lsls	r7, r1, #3
 800c034:	19bf      	adds	r7, r7, r6
 800c036:	68b8      	ldr	r0, [r7, #8]
 800c038:	4287      	cmp	r7, r0
 800c03a:	d125      	bne.n	800c088 <_malloc_r+0x2a8>
 800c03c:	2201      	movs	r2, #1
 800c03e:	1089      	asrs	r1, r1, #2
 800c040:	408a      	lsls	r2, r1
 800c042:	4661      	mov	r1, ip
 800c044:	430a      	orrs	r2, r1
 800c046:	6072      	str	r2, [r6, #4]
 800c048:	60e7      	str	r7, [r4, #12]
 800c04a:	60a0      	str	r0, [r4, #8]
 800c04c:	60bc      	str	r4, [r7, #8]
 800c04e:	60c4      	str	r4, [r0, #12]
 800c050:	e76b      	b.n	800bf2a <_malloc_r+0x14a>
 800c052:	2814      	cmp	r0, #20
 800c054:	d802      	bhi.n	800c05c <_malloc_r+0x27c>
 800c056:	0001      	movs	r1, r0
 800c058:	315b      	adds	r1, #91	; 0x5b
 800c05a:	e7ea      	b.n	800c032 <_malloc_r+0x252>
 800c05c:	2854      	cmp	r0, #84	; 0x54
 800c05e:	d802      	bhi.n	800c066 <_malloc_r+0x286>
 800c060:	0b11      	lsrs	r1, r2, #12
 800c062:	316e      	adds	r1, #110	; 0x6e
 800c064:	e7e5      	b.n	800c032 <_malloc_r+0x252>
 800c066:	21aa      	movs	r1, #170	; 0xaa
 800c068:	0049      	lsls	r1, r1, #1
 800c06a:	4288      	cmp	r0, r1
 800c06c:	d802      	bhi.n	800c074 <_malloc_r+0x294>
 800c06e:	0bd1      	lsrs	r1, r2, #15
 800c070:	3177      	adds	r1, #119	; 0x77
 800c072:	e7de      	b.n	800c032 <_malloc_r+0x252>
 800c074:	4f26      	ldr	r7, [pc, #152]	; (800c110 <_malloc_r+0x330>)
 800c076:	217e      	movs	r1, #126	; 0x7e
 800c078:	42b8      	cmp	r0, r7
 800c07a:	d8da      	bhi.n	800c032 <_malloc_r+0x252>
 800c07c:	0c91      	lsrs	r1, r2, #18
 800c07e:	317c      	adds	r1, #124	; 0x7c
 800c080:	e7d7      	b.n	800c032 <_malloc_r+0x252>
 800c082:	6880      	ldr	r0, [r0, #8]
 800c084:	4287      	cmp	r7, r0
 800c086:	d004      	beq.n	800c092 <_malloc_r+0x2b2>
 800c088:	2603      	movs	r6, #3
 800c08a:	6841      	ldr	r1, [r0, #4]
 800c08c:	43b1      	bics	r1, r6
 800c08e:	4291      	cmp	r1, r2
 800c090:	d8f7      	bhi.n	800c082 <_malloc_r+0x2a2>
 800c092:	68c7      	ldr	r7, [r0, #12]
 800c094:	e7d8      	b.n	800c048 <_malloc_r+0x268>
 800c096:	2603      	movs	r6, #3
 800c098:	6861      	ldr	r1, [r4, #4]
 800c09a:	43b1      	bics	r1, r6
 800c09c:	9103      	str	r1, [sp, #12]
 800c09e:	68e6      	ldr	r6, [r4, #12]
 800c0a0:	1b49      	subs	r1, r1, r5
 800c0a2:	290f      	cmp	r1, #15
 800c0a4:	dd10      	ble.n	800c0c8 <_malloc_r+0x2e8>
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	1963      	adds	r3, r4, r5
 800c0aa:	4315      	orrs	r5, r2
 800c0ac:	6065      	str	r5, [r4, #4]
 800c0ae:	68a5      	ldr	r5, [r4, #8]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	60ee      	str	r6, [r5, #12]
 800c0b4:	60b5      	str	r5, [r6, #8]
 800c0b6:	6143      	str	r3, [r0, #20]
 800c0b8:	6103      	str	r3, [r0, #16]
 800c0ba:	4814      	ldr	r0, [pc, #80]	; (800c10c <_malloc_r+0x32c>)
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	60d8      	str	r0, [r3, #12]
 800c0c0:	6098      	str	r0, [r3, #8]
 800c0c2:	9b03      	ldr	r3, [sp, #12]
 800c0c4:	50e1      	str	r1, [r4, r3]
 800c0c6:	e6eb      	b.n	800bea0 <_malloc_r+0xc0>
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	db09      	blt.n	800c0e0 <_malloc_r+0x300>
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	18e1      	adds	r1, r4, r3
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	684a      	ldr	r2, [r1, #4]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	604b      	str	r3, [r1, #4]
 800c0d8:	68a3      	ldr	r3, [r4, #8]
 800c0da:	60de      	str	r6, [r3, #12]
 800c0dc:	60b3      	str	r3, [r6, #8]
 800c0de:	e6df      	b.n	800bea0 <_malloc_r+0xc0>
 800c0e0:	0034      	movs	r4, r6
 800c0e2:	e739      	b.n	800bf58 <_malloc_r+0x178>
 800c0e4:	2108      	movs	r1, #8
 800c0e6:	4249      	negs	r1, r1
 800c0e8:	448c      	add	ip, r1
 800c0ea:	4661      	mov	r1, ip
 800c0ec:	6889      	ldr	r1, [r1, #8]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	4561      	cmp	r1, ip
 800c0f2:	d100      	bne.n	800c0f6 <_malloc_r+0x316>
 800c0f4:	e73a      	b.n	800bf6c <_malloc_r+0x18c>
 800c0f6:	e740      	b.n	800bf7a <_malloc_r+0x19a>
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	0052      	lsls	r2, r2, #1
 800c0fc:	420a      	tst	r2, r1
 800c0fe:	d0fb      	beq.n	800c0f8 <_malloc_r+0x318>
 800c100:	e724      	b.n	800bf4c <_malloc_r+0x16c>
 800c102:	9b02      	ldr	r3, [sp, #8]
 800c104:	e7fa      	b.n	800c0fc <_malloc_r+0x31c>
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	20000028 	.word	0x20000028
 800c10c:	20000030 	.word	0x20000030
 800c110:	00000554 	.word	0x00000554
 800c114:	20000c78 	.word	0x20000c78
 800c118:	20000430 	.word	0x20000430
 800c11c:	20000c48 	.word	0x20000c48
 800c120:	20000c70 	.word	0x20000c70
 800c124:	20000c74 	.word	0x20000c74
 800c128:	4934      	ldr	r1, [pc, #208]	; (800c1fc <_malloc_r+0x41c>)
 800c12a:	6808      	ldr	r0, [r1, #0]
 800c12c:	3001      	adds	r0, #1
 800c12e:	d140      	bne.n	800c1b2 <_malloc_r+0x3d2>
 800c130:	600c      	str	r4, [r1, #0]
 800c132:	2107      	movs	r1, #7
 800c134:	0026      	movs	r6, r4
 800c136:	2300      	movs	r3, #0
 800c138:	400e      	ands	r6, r1
 800c13a:	420c      	tst	r4, r1
 800c13c:	d002      	beq.n	800c144 <_malloc_r+0x364>
 800c13e:	3308      	adds	r3, #8
 800c140:	1b9b      	subs	r3, r3, r6
 800c142:	18e4      	adds	r4, r4, r3
 800c144:	19e1      	adds	r1, r4, r7
 800c146:	9105      	str	r1, [sp, #20]
 800c148:	9f05      	ldr	r7, [sp, #20]
 800c14a:	9904      	ldr	r1, [sp, #16]
 800c14c:	4017      	ands	r7, r2
 800c14e:	18cb      	adds	r3, r1, r3
 800c150:	1bdf      	subs	r7, r3, r7
 800c152:	4017      	ands	r7, r2
 800c154:	0039      	movs	r1, r7
 800c156:	9801      	ldr	r0, [sp, #4]
 800c158:	f001 fa22 	bl	800d5a0 <_sbrk_r>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d107      	bne.n	800c170 <_malloc_r+0x390>
 800c160:	1e37      	subs	r7, r6, #0
 800c162:	9805      	ldr	r0, [sp, #20]
 800c164:	d004      	beq.n	800c170 <_malloc_r+0x390>
 800c166:	0030      	movs	r0, r6
 800c168:	2700      	movs	r7, #0
 800c16a:	9b05      	ldr	r3, [sp, #20]
 800c16c:	3808      	subs	r0, #8
 800c16e:	1818      	adds	r0, r3, r0
 800c170:	4a23      	ldr	r2, [pc, #140]	; (800c200 <_malloc_r+0x420>)
 800c172:	1b00      	subs	r0, r0, r4
 800c174:	6813      	ldr	r3, [r2, #0]
 800c176:	19c0      	adds	r0, r0, r7
 800c178:	19db      	adds	r3, r3, r7
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	2201      	movs	r2, #1
 800c17e:	4b21      	ldr	r3, [pc, #132]	; (800c204 <_malloc_r+0x424>)
 800c180:	9902      	ldr	r1, [sp, #8]
 800c182:	4310      	orrs	r0, r2
 800c184:	609c      	str	r4, [r3, #8]
 800c186:	6060      	str	r0, [r4, #4]
 800c188:	4299      	cmp	r1, r3
 800c18a:	d100      	bne.n	800c18e <_malloc_r+0x3ae>
 800c18c:	e73e      	b.n	800c00c <_malloc_r+0x22c>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	2b0f      	cmp	r3, #15
 800c192:	d813      	bhi.n	800c1bc <_malloc_r+0x3dc>
 800c194:	6062      	str	r2, [r4, #4]
 800c196:	2203      	movs	r2, #3
 800c198:	4b1a      	ldr	r3, [pc, #104]	; (800c204 <_malloc_r+0x424>)
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	4393      	bics	r3, r2
 800c1a0:	1b59      	subs	r1, r3, r5
 800c1a2:	42ab      	cmp	r3, r5
 800c1a4:	d301      	bcc.n	800c1aa <_malloc_r+0x3ca>
 800c1a6:	290f      	cmp	r1, #15
 800c1a8:	dc1f      	bgt.n	800c1ea <_malloc_r+0x40a>
 800c1aa:	9801      	ldr	r0, [sp, #4]
 800c1ac:	f000 f834 	bl	800c218 <__malloc_unlock>
 800c1b0:	e623      	b.n	800bdfa <_malloc_r+0x1a>
 800c1b2:	4913      	ldr	r1, [pc, #76]	; (800c200 <_malloc_r+0x420>)
 800c1b4:	1ba6      	subs	r6, r4, r6
 800c1b6:	18f6      	adds	r6, r6, r3
 800c1b8:	600e      	str	r6, [r1, #0]
 800c1ba:	e7ba      	b.n	800c132 <_malloc_r+0x352>
 800c1bc:	2107      	movs	r1, #7
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	3b0c      	subs	r3, #12
 800c1c2:	438b      	bics	r3, r1
 800c1c4:	9902      	ldr	r1, [sp, #8]
 800c1c6:	6849      	ldr	r1, [r1, #4]
 800c1c8:	400a      	ands	r2, r1
 800c1ca:	9902      	ldr	r1, [sp, #8]
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	604a      	str	r2, [r1, #4]
 800c1d0:	18ca      	adds	r2, r1, r3
 800c1d2:	2105      	movs	r1, #5
 800c1d4:	6051      	str	r1, [r2, #4]
 800c1d6:	6091      	str	r1, [r2, #8]
 800c1d8:	2b0f      	cmp	r3, #15
 800c1da:	d800      	bhi.n	800c1de <_malloc_r+0x3fe>
 800c1dc:	e716      	b.n	800c00c <_malloc_r+0x22c>
 800c1de:	9902      	ldr	r1, [sp, #8]
 800c1e0:	9801      	ldr	r0, [sp, #4]
 800c1e2:	3108      	adds	r1, #8
 800c1e4:	f001 fab6 	bl	800d754 <_free_r>
 800c1e8:	e710      	b.n	800c00c <_malloc_r+0x22c>
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	0013      	movs	r3, r2
 800c1ee:	4805      	ldr	r0, [pc, #20]	; (800c204 <_malloc_r+0x424>)
 800c1f0:	432b      	orrs	r3, r5
 800c1f2:	6884      	ldr	r4, [r0, #8]
 800c1f4:	6063      	str	r3, [r4, #4]
 800c1f6:	1963      	adds	r3, r4, r5
 800c1f8:	6083      	str	r3, [r0, #8]
 800c1fa:	e623      	b.n	800be44 <_malloc_r+0x64>
 800c1fc:	20000430 	.word	0x20000430
 800c200:	20000c48 	.word	0x20000c48
 800c204:	20000028 	.word	0x20000028

0800c208 <__malloc_lock>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	4802      	ldr	r0, [pc, #8]	; (800c214 <__malloc_lock+0xc>)
 800c20c:	f001 fa1a 	bl	800d644 <__retarget_lock_acquire_recursive>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	46c0      	nop			; (mov r8, r8)
 800c214:	20000dbd 	.word	0x20000dbd

0800c218 <__malloc_unlock>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	4802      	ldr	r0, [pc, #8]	; (800c224 <__malloc_unlock+0xc>)
 800c21c:	f001 fa13 	bl	800d646 <__retarget_lock_release_recursive>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	46c0      	nop			; (mov r8, r8)
 800c224:	20000dbd 	.word	0x20000dbd

0800c228 <sulp>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	0016      	movs	r6, r2
 800c22c:	000d      	movs	r5, r1
 800c22e:	f002 f9e7 	bl	800e600 <__ulp>
 800c232:	2e00      	cmp	r6, #0
 800c234:	d00d      	beq.n	800c252 <sulp+0x2a>
 800c236:	236b      	movs	r3, #107	; 0x6b
 800c238:	006a      	lsls	r2, r5, #1
 800c23a:	0d52      	lsrs	r2, r2, #21
 800c23c:	1a9b      	subs	r3, r3, r2
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd07      	ble.n	800c252 <sulp+0x2a>
 800c242:	2400      	movs	r4, #0
 800c244:	4a03      	ldr	r2, [pc, #12]	; (800c254 <sulp+0x2c>)
 800c246:	051b      	lsls	r3, r3, #20
 800c248:	189d      	adds	r5, r3, r2
 800c24a:	002b      	movs	r3, r5
 800c24c:	0022      	movs	r2, r4
 800c24e:	f7f5 fa0d 	bl	800166c <__aeabi_dmul>
 800c252:	bd70      	pop	{r4, r5, r6, pc}
 800c254:	3ff00000 	.word	0x3ff00000

0800c258 <_strtod_l>:
 800c258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25a:	b0a1      	sub	sp, #132	; 0x84
 800c25c:	9219      	str	r2, [sp, #100]	; 0x64
 800c25e:	2200      	movs	r2, #0
 800c260:	2600      	movs	r6, #0
 800c262:	2700      	movs	r7, #0
 800c264:	9004      	str	r0, [sp, #16]
 800c266:	9107      	str	r1, [sp, #28]
 800c268:	921c      	str	r2, [sp, #112]	; 0x70
 800c26a:	911b      	str	r1, [sp, #108]	; 0x6c
 800c26c:	780a      	ldrb	r2, [r1, #0]
 800c26e:	2a2b      	cmp	r2, #43	; 0x2b
 800c270:	d055      	beq.n	800c31e <_strtod_l+0xc6>
 800c272:	d841      	bhi.n	800c2f8 <_strtod_l+0xa0>
 800c274:	2a0d      	cmp	r2, #13
 800c276:	d83b      	bhi.n	800c2f0 <_strtod_l+0x98>
 800c278:	2a08      	cmp	r2, #8
 800c27a:	d83b      	bhi.n	800c2f4 <_strtod_l+0x9c>
 800c27c:	2a00      	cmp	r2, #0
 800c27e:	d044      	beq.n	800c30a <_strtod_l+0xb2>
 800c280:	2200      	movs	r2, #0
 800c282:	920f      	str	r2, [sp, #60]	; 0x3c
 800c284:	2100      	movs	r1, #0
 800c286:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c288:	9109      	str	r1, [sp, #36]	; 0x24
 800c28a:	782a      	ldrb	r2, [r5, #0]
 800c28c:	2a30      	cmp	r2, #48	; 0x30
 800c28e:	d000      	beq.n	800c292 <_strtod_l+0x3a>
 800c290:	e085      	b.n	800c39e <_strtod_l+0x146>
 800c292:	786a      	ldrb	r2, [r5, #1]
 800c294:	3120      	adds	r1, #32
 800c296:	438a      	bics	r2, r1
 800c298:	2a58      	cmp	r2, #88	; 0x58
 800c29a:	d000      	beq.n	800c29e <_strtod_l+0x46>
 800c29c:	e075      	b.n	800c38a <_strtod_l+0x132>
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a2:	4a97      	ldr	r2, [pc, #604]	; (800c500 <_strtod_l+0x2a8>)
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	ab1c      	add	r3, sp, #112	; 0x70
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	9804      	ldr	r0, [sp, #16]
 800c2ac:	ab1d      	add	r3, sp, #116	; 0x74
 800c2ae:	a91b      	add	r1, sp, #108	; 0x6c
 800c2b0:	f001 fb6c 	bl	800d98c <__gethex>
 800c2b4:	230f      	movs	r3, #15
 800c2b6:	0002      	movs	r2, r0
 800c2b8:	401a      	ands	r2, r3
 800c2ba:	0004      	movs	r4, r0
 800c2bc:	9205      	str	r2, [sp, #20]
 800c2be:	4218      	tst	r0, r3
 800c2c0:	d005      	beq.n	800c2ce <_strtod_l+0x76>
 800c2c2:	2a06      	cmp	r2, #6
 800c2c4:	d12d      	bne.n	800c322 <_strtod_l+0xca>
 800c2c6:	1c6b      	adds	r3, r5, #1
 800c2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <_strtod_l+0x82>
 800c2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01b      	beq.n	800c318 <_strtod_l+0xc0>
 800c2e0:	2380      	movs	r3, #128	; 0x80
 800c2e2:	0032      	movs	r2, r6
 800c2e4:	061b      	lsls	r3, r3, #24
 800c2e6:	18fb      	adds	r3, r7, r3
 800c2e8:	0010      	movs	r0, r2
 800c2ea:	0019      	movs	r1, r3
 800c2ec:	b021      	add	sp, #132	; 0x84
 800c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f0:	2a20      	cmp	r2, #32
 800c2f2:	d1c5      	bne.n	800c280 <_strtod_l+0x28>
 800c2f4:	3101      	adds	r1, #1
 800c2f6:	e7b8      	b.n	800c26a <_strtod_l+0x12>
 800c2f8:	2a2d      	cmp	r2, #45	; 0x2d
 800c2fa:	d1c1      	bne.n	800c280 <_strtod_l+0x28>
 800c2fc:	3a2c      	subs	r2, #44	; 0x2c
 800c2fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800c300:	1c4a      	adds	r2, r1, #1
 800c302:	921b      	str	r2, [sp, #108]	; 0x6c
 800c304:	784a      	ldrb	r2, [r1, #1]
 800c306:	2a00      	cmp	r2, #0
 800c308:	d1bc      	bne.n	800c284 <_strtod_l+0x2c>
 800c30a:	9b07      	ldr	r3, [sp, #28]
 800c30c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c30e:	2300      	movs	r3, #0
 800c310:	930f      	str	r3, [sp, #60]	; 0x3c
 800c312:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1dd      	bne.n	800c2d4 <_strtod_l+0x7c>
 800c318:	0032      	movs	r2, r6
 800c31a:	003b      	movs	r3, r7
 800c31c:	e7e4      	b.n	800c2e8 <_strtod_l+0x90>
 800c31e:	2200      	movs	r2, #0
 800c320:	e7ed      	b.n	800c2fe <_strtod_l+0xa6>
 800c322:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c324:	2a00      	cmp	r2, #0
 800c326:	d007      	beq.n	800c338 <_strtod_l+0xe0>
 800c328:	2135      	movs	r1, #53	; 0x35
 800c32a:	a81e      	add	r0, sp, #120	; 0x78
 800c32c:	f002 fa59 	bl	800e7e2 <__copybits>
 800c330:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c332:	9804      	ldr	r0, [sp, #16]
 800c334:	f001 fe56 	bl	800dfe4 <_Bfree>
 800c338:	9805      	ldr	r0, [sp, #20]
 800c33a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c33c:	3801      	subs	r0, #1
 800c33e:	2804      	cmp	r0, #4
 800c340:	d806      	bhi.n	800c350 <_strtod_l+0xf8>
 800c342:	f7f3 fee7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c346:	0312      	.short	0x0312
 800c348:	1e1c      	.short	0x1e1c
 800c34a:	12          	.byte	0x12
 800c34b:	00          	.byte	0x00
 800c34c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c34e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c350:	05e4      	lsls	r4, r4, #23
 800c352:	d502      	bpl.n	800c35a <_strtod_l+0x102>
 800c354:	2380      	movs	r3, #128	; 0x80
 800c356:	061b      	lsls	r3, r3, #24
 800c358:	431f      	orrs	r7, r3
 800c35a:	4b6a      	ldr	r3, [pc, #424]	; (800c504 <_strtod_l+0x2ac>)
 800c35c:	423b      	tst	r3, r7
 800c35e:	d1b6      	bne.n	800c2ce <_strtod_l+0x76>
 800c360:	f001 f944 	bl	800d5ec <__errno>
 800c364:	2322      	movs	r3, #34	; 0x22
 800c366:	6003      	str	r3, [r0, #0]
 800c368:	e7b1      	b.n	800c2ce <_strtod_l+0x76>
 800c36a:	4967      	ldr	r1, [pc, #412]	; (800c508 <_strtod_l+0x2b0>)
 800c36c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c36e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c370:	400a      	ands	r2, r1
 800c372:	4966      	ldr	r1, [pc, #408]	; (800c50c <_strtod_l+0x2b4>)
 800c374:	185b      	adds	r3, r3, r1
 800c376:	051b      	lsls	r3, r3, #20
 800c378:	431a      	orrs	r2, r3
 800c37a:	0017      	movs	r7, r2
 800c37c:	e7e8      	b.n	800c350 <_strtod_l+0xf8>
 800c37e:	4f61      	ldr	r7, [pc, #388]	; (800c504 <_strtod_l+0x2ac>)
 800c380:	e7e6      	b.n	800c350 <_strtod_l+0xf8>
 800c382:	2601      	movs	r6, #1
 800c384:	4f62      	ldr	r7, [pc, #392]	; (800c510 <_strtod_l+0x2b8>)
 800c386:	4276      	negs	r6, r6
 800c388:	e7e2      	b.n	800c350 <_strtod_l+0xf8>
 800c38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	2b30      	cmp	r3, #48	; 0x30
 800c394:	d0f9      	beq.n	800c38a <_strtod_l+0x132>
 800c396:	2b00      	cmp	r3, #0
 800c398:	d099      	beq.n	800c2ce <_strtod_l+0x76>
 800c39a:	2301      	movs	r3, #1
 800c39c:	9309      	str	r3, [sp, #36]	; 0x24
 800c39e:	2500      	movs	r5, #0
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3a4:	950d      	str	r5, [sp, #52]	; 0x34
 800c3a6:	9310      	str	r3, [sp, #64]	; 0x40
 800c3a8:	9508      	str	r5, [sp, #32]
 800c3aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c3ac:	7804      	ldrb	r4, [r0, #0]
 800c3ae:	0023      	movs	r3, r4
 800c3b0:	3b30      	subs	r3, #48	; 0x30
 800c3b2:	b2d9      	uxtb	r1, r3
 800c3b4:	2909      	cmp	r1, #9
 800c3b6:	d927      	bls.n	800c408 <_strtod_l+0x1b0>
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	4956      	ldr	r1, [pc, #344]	; (800c514 <_strtod_l+0x2bc>)
 800c3bc:	f001 f838 	bl	800d430 <strncmp>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d031      	beq.n	800c428 <_strtod_l+0x1d0>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	0023      	movs	r3, r4
 800c3c8:	4684      	mov	ip, r0
 800c3ca:	9a08      	ldr	r2, [sp, #32]
 800c3cc:	900c      	str	r0, [sp, #48]	; 0x30
 800c3ce:	9205      	str	r2, [sp, #20]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	0019      	movs	r1, r3
 800c3d4:	4391      	bics	r1, r2
 800c3d6:	000a      	movs	r2, r1
 800c3d8:	2100      	movs	r1, #0
 800c3da:	9106      	str	r1, [sp, #24]
 800c3dc:	2a45      	cmp	r2, #69	; 0x45
 800c3de:	d000      	beq.n	800c3e2 <_strtod_l+0x18a>
 800c3e0:	e0c2      	b.n	800c568 <_strtod_l+0x310>
 800c3e2:	9b05      	ldr	r3, [sp, #20]
 800c3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e6:	4303      	orrs	r3, r0
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	428b      	cmp	r3, r1
 800c3ec:	d08d      	beq.n	800c30a <_strtod_l+0xb2>
 800c3ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3f0:	9307      	str	r3, [sp, #28]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	785b      	ldrb	r3, [r3, #1]
 800c3fa:	2b2b      	cmp	r3, #43	; 0x2b
 800c3fc:	d071      	beq.n	800c4e2 <_strtod_l+0x28a>
 800c3fe:	000c      	movs	r4, r1
 800c400:	2b2d      	cmp	r3, #45	; 0x2d
 800c402:	d174      	bne.n	800c4ee <_strtod_l+0x296>
 800c404:	2401      	movs	r4, #1
 800c406:	e06d      	b.n	800c4e4 <_strtod_l+0x28c>
 800c408:	9908      	ldr	r1, [sp, #32]
 800c40a:	2908      	cmp	r1, #8
 800c40c:	dc09      	bgt.n	800c422 <_strtod_l+0x1ca>
 800c40e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c410:	4351      	muls	r1, r2
 800c412:	185b      	adds	r3, r3, r1
 800c414:	930d      	str	r3, [sp, #52]	; 0x34
 800c416:	9b08      	ldr	r3, [sp, #32]
 800c418:	3001      	adds	r0, #1
 800c41a:	3301      	adds	r3, #1
 800c41c:	9308      	str	r3, [sp, #32]
 800c41e:	901b      	str	r0, [sp, #108]	; 0x6c
 800c420:	e7c3      	b.n	800c3aa <_strtod_l+0x152>
 800c422:	4355      	muls	r5, r2
 800c424:	195d      	adds	r5, r3, r5
 800c426:	e7f6      	b.n	800c416 <_strtod_l+0x1be>
 800c428:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c42e:	9a08      	ldr	r2, [sp, #32]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	2a00      	cmp	r2, #0
 800c434:	d03a      	beq.n	800c4ac <_strtod_l+0x254>
 800c436:	900c      	str	r0, [sp, #48]	; 0x30
 800c438:	9205      	str	r2, [sp, #20]
 800c43a:	001a      	movs	r2, r3
 800c43c:	3a30      	subs	r2, #48	; 0x30
 800c43e:	2a09      	cmp	r2, #9
 800c440:	d912      	bls.n	800c468 <_strtod_l+0x210>
 800c442:	2201      	movs	r2, #1
 800c444:	4694      	mov	ip, r2
 800c446:	e7c3      	b.n	800c3d0 <_strtod_l+0x178>
 800c448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c44a:	3001      	adds	r0, #1
 800c44c:	1c5a      	adds	r2, r3, #1
 800c44e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c450:	785b      	ldrb	r3, [r3, #1]
 800c452:	2b30      	cmp	r3, #48	; 0x30
 800c454:	d0f8      	beq.n	800c448 <_strtod_l+0x1f0>
 800c456:	001a      	movs	r2, r3
 800c458:	3a31      	subs	r2, #49	; 0x31
 800c45a:	2a08      	cmp	r2, #8
 800c45c:	d83c      	bhi.n	800c4d8 <_strtod_l+0x280>
 800c45e:	900c      	str	r0, [sp, #48]	; 0x30
 800c460:	2000      	movs	r0, #0
 800c462:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c464:	9005      	str	r0, [sp, #20]
 800c466:	9210      	str	r2, [sp, #64]	; 0x40
 800c468:	001a      	movs	r2, r3
 800c46a:	1c41      	adds	r1, r0, #1
 800c46c:	3a30      	subs	r2, #48	; 0x30
 800c46e:	2b30      	cmp	r3, #48	; 0x30
 800c470:	d016      	beq.n	800c4a0 <_strtod_l+0x248>
 800c472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c474:	185b      	adds	r3, r3, r1
 800c476:	930c      	str	r3, [sp, #48]	; 0x30
 800c478:	9b05      	ldr	r3, [sp, #20]
 800c47a:	210a      	movs	r1, #10
 800c47c:	469c      	mov	ip, r3
 800c47e:	4484      	add	ip, r0
 800c480:	4563      	cmp	r3, ip
 800c482:	d115      	bne.n	800c4b0 <_strtod_l+0x258>
 800c484:	9905      	ldr	r1, [sp, #20]
 800c486:	9b05      	ldr	r3, [sp, #20]
 800c488:	3101      	adds	r1, #1
 800c48a:	1809      	adds	r1, r1, r0
 800c48c:	181b      	adds	r3, r3, r0
 800c48e:	9105      	str	r1, [sp, #20]
 800c490:	2b08      	cmp	r3, #8
 800c492:	dc19      	bgt.n	800c4c8 <_strtod_l+0x270>
 800c494:	230a      	movs	r3, #10
 800c496:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c498:	434b      	muls	r3, r1
 800c49a:	2100      	movs	r1, #0
 800c49c:	18d3      	adds	r3, r2, r3
 800c49e:	930d      	str	r3, [sp, #52]	; 0x34
 800c4a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4a2:	0008      	movs	r0, r1
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4a8:	785b      	ldrb	r3, [r3, #1]
 800c4aa:	e7c6      	b.n	800c43a <_strtod_l+0x1e2>
 800c4ac:	9808      	ldr	r0, [sp, #32]
 800c4ae:	e7d0      	b.n	800c452 <_strtod_l+0x1fa>
 800c4b0:	1c5c      	adds	r4, r3, #1
 800c4b2:	2b08      	cmp	r3, #8
 800c4b4:	dc04      	bgt.n	800c4c0 <_strtod_l+0x268>
 800c4b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b8:	434b      	muls	r3, r1
 800c4ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c4bc:	0023      	movs	r3, r4
 800c4be:	e7df      	b.n	800c480 <_strtod_l+0x228>
 800c4c0:	2c10      	cmp	r4, #16
 800c4c2:	dcfb      	bgt.n	800c4bc <_strtod_l+0x264>
 800c4c4:	434d      	muls	r5, r1
 800c4c6:	e7f9      	b.n	800c4bc <_strtod_l+0x264>
 800c4c8:	9b05      	ldr	r3, [sp, #20]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	2b10      	cmp	r3, #16
 800c4ce:	dce7      	bgt.n	800c4a0 <_strtod_l+0x248>
 800c4d0:	230a      	movs	r3, #10
 800c4d2:	435d      	muls	r5, r3
 800c4d4:	1955      	adds	r5, r2, r5
 800c4d6:	e7e3      	b.n	800c4a0 <_strtod_l+0x248>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	920c      	str	r2, [sp, #48]	; 0x30
 800c4dc:	9205      	str	r2, [sp, #20]
 800c4de:	3201      	adds	r2, #1
 800c4e0:	e7b0      	b.n	800c444 <_strtod_l+0x1ec>
 800c4e2:	2400      	movs	r4, #0
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	3302      	adds	r3, #2
 800c4e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4ea:	9b07      	ldr	r3, [sp, #28]
 800c4ec:	789b      	ldrb	r3, [r3, #2]
 800c4ee:	001a      	movs	r2, r3
 800c4f0:	3a30      	subs	r2, #48	; 0x30
 800c4f2:	2a09      	cmp	r2, #9
 800c4f4:	d914      	bls.n	800c520 <_strtod_l+0x2c8>
 800c4f6:	9a07      	ldr	r2, [sp, #28]
 800c4f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	e033      	b.n	800c566 <_strtod_l+0x30e>
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	08015b34 	.word	0x08015b34
 800c504:	7ff00000 	.word	0x7ff00000
 800c508:	ffefffff 	.word	0xffefffff
 800c50c:	00000433 	.word	0x00000433
 800c510:	7fffffff 	.word	0x7fffffff
 800c514:	08015b30 	.word	0x08015b30
 800c518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	2b30      	cmp	r3, #48	; 0x30
 800c522:	d0f9      	beq.n	800c518 <_strtod_l+0x2c0>
 800c524:	2200      	movs	r2, #0
 800c526:	9206      	str	r2, [sp, #24]
 800c528:	001a      	movs	r2, r3
 800c52a:	3a31      	subs	r2, #49	; 0x31
 800c52c:	2a08      	cmp	r2, #8
 800c52e:	d81b      	bhi.n	800c568 <_strtod_l+0x310>
 800c530:	3b30      	subs	r3, #48	; 0x30
 800c532:	930e      	str	r3, [sp, #56]	; 0x38
 800c534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c536:	9306      	str	r3, [sp, #24]
 800c538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c53a:	1c59      	adds	r1, r3, #1
 800c53c:	911b      	str	r1, [sp, #108]	; 0x6c
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	001a      	movs	r2, r3
 800c542:	3a30      	subs	r2, #48	; 0x30
 800c544:	2a09      	cmp	r2, #9
 800c546:	d93a      	bls.n	800c5be <_strtod_l+0x366>
 800c548:	9a06      	ldr	r2, [sp, #24]
 800c54a:	1a8a      	subs	r2, r1, r2
 800c54c:	49b2      	ldr	r1, [pc, #712]	; (800c818 <_strtod_l+0x5c0>)
 800c54e:	9106      	str	r1, [sp, #24]
 800c550:	2a08      	cmp	r2, #8
 800c552:	dc04      	bgt.n	800c55e <_strtod_l+0x306>
 800c554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c556:	9206      	str	r2, [sp, #24]
 800c558:	428a      	cmp	r2, r1
 800c55a:	dd00      	ble.n	800c55e <_strtod_l+0x306>
 800c55c:	9106      	str	r1, [sp, #24]
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d002      	beq.n	800c568 <_strtod_l+0x310>
 800c562:	9a06      	ldr	r2, [sp, #24]
 800c564:	4252      	negs	r2, r2
 800c566:	9206      	str	r2, [sp, #24]
 800c568:	9a05      	ldr	r2, [sp, #20]
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	d14d      	bne.n	800c60a <_strtod_l+0x3b2>
 800c56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c570:	4310      	orrs	r0, r2
 800c572:	d000      	beq.n	800c576 <_strtod_l+0x31e>
 800c574:	e6ab      	b.n	800c2ce <_strtod_l+0x76>
 800c576:	4662      	mov	r2, ip
 800c578:	2a00      	cmp	r2, #0
 800c57a:	d000      	beq.n	800c57e <_strtod_l+0x326>
 800c57c:	e6c5      	b.n	800c30a <_strtod_l+0xb2>
 800c57e:	2b69      	cmp	r3, #105	; 0x69
 800c580:	d027      	beq.n	800c5d2 <_strtod_l+0x37a>
 800c582:	dc23      	bgt.n	800c5cc <_strtod_l+0x374>
 800c584:	2b49      	cmp	r3, #73	; 0x49
 800c586:	d024      	beq.n	800c5d2 <_strtod_l+0x37a>
 800c588:	2b4e      	cmp	r3, #78	; 0x4e
 800c58a:	d000      	beq.n	800c58e <_strtod_l+0x336>
 800c58c:	e6bd      	b.n	800c30a <_strtod_l+0xb2>
 800c58e:	49a3      	ldr	r1, [pc, #652]	; (800c81c <_strtod_l+0x5c4>)
 800c590:	a81b      	add	r0, sp, #108	; 0x6c
 800c592:	f001 fc31 	bl	800ddf8 <__match>
 800c596:	2800      	cmp	r0, #0
 800c598:	d100      	bne.n	800c59c <_strtod_l+0x344>
 800c59a:	e6b6      	b.n	800c30a <_strtod_l+0xb2>
 800c59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b28      	cmp	r3, #40	; 0x28
 800c5a2:	d12c      	bne.n	800c5fe <_strtod_l+0x3a6>
 800c5a4:	499e      	ldr	r1, [pc, #632]	; (800c820 <_strtod_l+0x5c8>)
 800c5a6:	aa1e      	add	r2, sp, #120	; 0x78
 800c5a8:	a81b      	add	r0, sp, #108	; 0x6c
 800c5aa:	f001 fc39 	bl	800de20 <__hexnan>
 800c5ae:	2805      	cmp	r0, #5
 800c5b0:	d125      	bne.n	800c5fe <_strtod_l+0x3a6>
 800c5b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5b4:	4a9b      	ldr	r2, [pc, #620]	; (800c824 <_strtod_l+0x5cc>)
 800c5b6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	0017      	movs	r7, r2
 800c5bc:	e687      	b.n	800c2ce <_strtod_l+0x76>
 800c5be:	220a      	movs	r2, #10
 800c5c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c5c2:	434a      	muls	r2, r1
 800c5c4:	18d2      	adds	r2, r2, r3
 800c5c6:	3a30      	subs	r2, #48	; 0x30
 800c5c8:	920e      	str	r2, [sp, #56]	; 0x38
 800c5ca:	e7b5      	b.n	800c538 <_strtod_l+0x2e0>
 800c5cc:	2b6e      	cmp	r3, #110	; 0x6e
 800c5ce:	d0de      	beq.n	800c58e <_strtod_l+0x336>
 800c5d0:	e69b      	b.n	800c30a <_strtod_l+0xb2>
 800c5d2:	4995      	ldr	r1, [pc, #596]	; (800c828 <_strtod_l+0x5d0>)
 800c5d4:	a81b      	add	r0, sp, #108	; 0x6c
 800c5d6:	f001 fc0f 	bl	800ddf8 <__match>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d100      	bne.n	800c5e0 <_strtod_l+0x388>
 800c5de:	e694      	b.n	800c30a <_strtod_l+0xb2>
 800c5e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5e2:	4992      	ldr	r1, [pc, #584]	; (800c82c <_strtod_l+0x5d4>)
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	a81b      	add	r0, sp, #108	; 0x6c
 800c5e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5ea:	f001 fc05 	bl	800ddf8 <__match>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d102      	bne.n	800c5f8 <_strtod_l+0x3a0>
 800c5f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5f8:	2600      	movs	r6, #0
 800c5fa:	4f8a      	ldr	r7, [pc, #552]	; (800c824 <_strtod_l+0x5cc>)
 800c5fc:	e667      	b.n	800c2ce <_strtod_l+0x76>
 800c5fe:	488c      	ldr	r0, [pc, #560]	; (800c830 <_strtod_l+0x5d8>)
 800c600:	f001 f836 	bl	800d670 <nan>
 800c604:	0006      	movs	r6, r0
 800c606:	000f      	movs	r7, r1
 800c608:	e661      	b.n	800c2ce <_strtod_l+0x76>
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c60e:	1a9b      	subs	r3, r3, r2
 800c610:	9309      	str	r3, [sp, #36]	; 0x24
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <_strtod_l+0x3c4>
 800c618:	9b05      	ldr	r3, [sp, #20]
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	9c05      	ldr	r4, [sp, #20]
 800c61e:	2c10      	cmp	r4, #16
 800c620:	dd00      	ble.n	800c624 <_strtod_l+0x3cc>
 800c622:	2410      	movs	r4, #16
 800c624:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c626:	f7f5 fee9 	bl	80023fc <__aeabi_ui2d>
 800c62a:	9b05      	ldr	r3, [sp, #20]
 800c62c:	0006      	movs	r6, r0
 800c62e:	000f      	movs	r7, r1
 800c630:	2b09      	cmp	r3, #9
 800c632:	dd15      	ble.n	800c660 <_strtod_l+0x408>
 800c634:	0022      	movs	r2, r4
 800c636:	4b7f      	ldr	r3, [pc, #508]	; (800c834 <_strtod_l+0x5dc>)
 800c638:	3a09      	subs	r2, #9
 800c63a:	00d2      	lsls	r2, r2, #3
 800c63c:	189b      	adds	r3, r3, r2
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f7f5 f813 	bl	800166c <__aeabi_dmul>
 800c646:	0006      	movs	r6, r0
 800c648:	0028      	movs	r0, r5
 800c64a:	000f      	movs	r7, r1
 800c64c:	f7f5 fed6 	bl	80023fc <__aeabi_ui2d>
 800c650:	0002      	movs	r2, r0
 800c652:	000b      	movs	r3, r1
 800c654:	0030      	movs	r0, r6
 800c656:	0039      	movs	r1, r7
 800c658:	f7f4 f8ae 	bl	80007b8 <__aeabi_dadd>
 800c65c:	0006      	movs	r6, r0
 800c65e:	000f      	movs	r7, r1
 800c660:	9b05      	ldr	r3, [sp, #20]
 800c662:	2b0f      	cmp	r3, #15
 800c664:	dc39      	bgt.n	800c6da <_strtod_l+0x482>
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d100      	bne.n	800c66e <_strtod_l+0x416>
 800c66c:	e62f      	b.n	800c2ce <_strtod_l+0x76>
 800c66e:	dd24      	ble.n	800c6ba <_strtod_l+0x462>
 800c670:	2b16      	cmp	r3, #22
 800c672:	dc09      	bgt.n	800c688 <_strtod_l+0x430>
 800c674:	496f      	ldr	r1, [pc, #444]	; (800c834 <_strtod_l+0x5dc>)
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	18c9      	adds	r1, r1, r3
 800c67a:	0032      	movs	r2, r6
 800c67c:	6808      	ldr	r0, [r1, #0]
 800c67e:	6849      	ldr	r1, [r1, #4]
 800c680:	003b      	movs	r3, r7
 800c682:	f7f4 fff3 	bl	800166c <__aeabi_dmul>
 800c686:	e7bd      	b.n	800c604 <_strtod_l+0x3ac>
 800c688:	2325      	movs	r3, #37	; 0x25
 800c68a:	9a05      	ldr	r2, [sp, #20]
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c690:	4293      	cmp	r3, r2
 800c692:	db22      	blt.n	800c6da <_strtod_l+0x482>
 800c694:	240f      	movs	r4, #15
 800c696:	9b05      	ldr	r3, [sp, #20]
 800c698:	4d66      	ldr	r5, [pc, #408]	; (800c834 <_strtod_l+0x5dc>)
 800c69a:	1ae4      	subs	r4, r4, r3
 800c69c:	00e1      	lsls	r1, r4, #3
 800c69e:	1869      	adds	r1, r5, r1
 800c6a0:	0032      	movs	r2, r6
 800c6a2:	6808      	ldr	r0, [r1, #0]
 800c6a4:	6849      	ldr	r1, [r1, #4]
 800c6a6:	003b      	movs	r3, r7
 800c6a8:	f7f4 ffe0 	bl	800166c <__aeabi_dmul>
 800c6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ae:	1b1c      	subs	r4, r3, r4
 800c6b0:	00e4      	lsls	r4, r4, #3
 800c6b2:	192d      	adds	r5, r5, r4
 800c6b4:	682a      	ldr	r2, [r5, #0]
 800c6b6:	686b      	ldr	r3, [r5, #4]
 800c6b8:	e7e3      	b.n	800c682 <_strtod_l+0x42a>
 800c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6bc:	3316      	adds	r3, #22
 800c6be:	db0c      	blt.n	800c6da <_strtod_l+0x482>
 800c6c0:	9906      	ldr	r1, [sp, #24]
 800c6c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6c4:	4b5b      	ldr	r3, [pc, #364]	; (800c834 <_strtod_l+0x5dc>)
 800c6c6:	1a52      	subs	r2, r2, r1
 800c6c8:	00d2      	lsls	r2, r2, #3
 800c6ca:	189b      	adds	r3, r3, r2
 800c6cc:	0030      	movs	r0, r6
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	0039      	movs	r1, r7
 800c6d4:	f7f4 fbd0 	bl	8000e78 <__aeabi_ddiv>
 800c6d8:	e794      	b.n	800c604 <_strtod_l+0x3ac>
 800c6da:	9b05      	ldr	r3, [sp, #20]
 800c6dc:	1b1c      	subs	r4, r3, r4
 800c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e0:	18e4      	adds	r4, r4, r3
 800c6e2:	2c00      	cmp	r4, #0
 800c6e4:	dd72      	ble.n	800c7cc <_strtod_l+0x574>
 800c6e6:	220f      	movs	r2, #15
 800c6e8:	0023      	movs	r3, r4
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	4214      	tst	r4, r2
 800c6ee:	d00a      	beq.n	800c706 <_strtod_l+0x4ae>
 800c6f0:	4950      	ldr	r1, [pc, #320]	; (800c834 <_strtod_l+0x5dc>)
 800c6f2:	00db      	lsls	r3, r3, #3
 800c6f4:	18c9      	adds	r1, r1, r3
 800c6f6:	0032      	movs	r2, r6
 800c6f8:	6808      	ldr	r0, [r1, #0]
 800c6fa:	6849      	ldr	r1, [r1, #4]
 800c6fc:	003b      	movs	r3, r7
 800c6fe:	f7f4 ffb5 	bl	800166c <__aeabi_dmul>
 800c702:	0006      	movs	r6, r0
 800c704:	000f      	movs	r7, r1
 800c706:	230f      	movs	r3, #15
 800c708:	439c      	bics	r4, r3
 800c70a:	d04a      	beq.n	800c7a2 <_strtod_l+0x54a>
 800c70c:	3326      	adds	r3, #38	; 0x26
 800c70e:	33ff      	adds	r3, #255	; 0xff
 800c710:	429c      	cmp	r4, r3
 800c712:	dd22      	ble.n	800c75a <_strtod_l+0x502>
 800c714:	2300      	movs	r3, #0
 800c716:	9305      	str	r3, [sp, #20]
 800c718:	9306      	str	r3, [sp, #24]
 800c71a:	930d      	str	r3, [sp, #52]	; 0x34
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	2322      	movs	r3, #34	; 0x22
 800c720:	2600      	movs	r6, #0
 800c722:	9a04      	ldr	r2, [sp, #16]
 800c724:	4f3f      	ldr	r7, [pc, #252]	; (800c824 <_strtod_l+0x5cc>)
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c72a:	42b3      	cmp	r3, r6
 800c72c:	d100      	bne.n	800c730 <_strtod_l+0x4d8>
 800c72e:	e5ce      	b.n	800c2ce <_strtod_l+0x76>
 800c730:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c732:	9804      	ldr	r0, [sp, #16]
 800c734:	f001 fc56 	bl	800dfe4 <_Bfree>
 800c738:	9908      	ldr	r1, [sp, #32]
 800c73a:	9804      	ldr	r0, [sp, #16]
 800c73c:	f001 fc52 	bl	800dfe4 <_Bfree>
 800c740:	9906      	ldr	r1, [sp, #24]
 800c742:	9804      	ldr	r0, [sp, #16]
 800c744:	f001 fc4e 	bl	800dfe4 <_Bfree>
 800c748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c74a:	9804      	ldr	r0, [sp, #16]
 800c74c:	f001 fc4a 	bl	800dfe4 <_Bfree>
 800c750:	9905      	ldr	r1, [sp, #20]
 800c752:	9804      	ldr	r0, [sp, #16]
 800c754:	f001 fc46 	bl	800dfe4 <_Bfree>
 800c758:	e5b9      	b.n	800c2ce <_strtod_l+0x76>
 800c75a:	2300      	movs	r3, #0
 800c75c:	0030      	movs	r0, r6
 800c75e:	0039      	movs	r1, r7
 800c760:	4d35      	ldr	r5, [pc, #212]	; (800c838 <_strtod_l+0x5e0>)
 800c762:	1124      	asrs	r4, r4, #4
 800c764:	9307      	str	r3, [sp, #28]
 800c766:	2c01      	cmp	r4, #1
 800c768:	dc1e      	bgt.n	800c7a8 <_strtod_l+0x550>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <_strtod_l+0x51a>
 800c76e:	0006      	movs	r6, r0
 800c770:	000f      	movs	r7, r1
 800c772:	4b32      	ldr	r3, [pc, #200]	; (800c83c <_strtod_l+0x5e4>)
 800c774:	9a07      	ldr	r2, [sp, #28]
 800c776:	18ff      	adds	r7, r7, r3
 800c778:	4b2f      	ldr	r3, [pc, #188]	; (800c838 <_strtod_l+0x5e0>)
 800c77a:	00d2      	lsls	r2, r2, #3
 800c77c:	189d      	adds	r5, r3, r2
 800c77e:	6828      	ldr	r0, [r5, #0]
 800c780:	6869      	ldr	r1, [r5, #4]
 800c782:	0032      	movs	r2, r6
 800c784:	003b      	movs	r3, r7
 800c786:	f7f4 ff71 	bl	800166c <__aeabi_dmul>
 800c78a:	4b26      	ldr	r3, [pc, #152]	; (800c824 <_strtod_l+0x5cc>)
 800c78c:	4a2c      	ldr	r2, [pc, #176]	; (800c840 <_strtod_l+0x5e8>)
 800c78e:	0006      	movs	r6, r0
 800c790:	400b      	ands	r3, r1
 800c792:	4293      	cmp	r3, r2
 800c794:	d8be      	bhi.n	800c714 <_strtod_l+0x4bc>
 800c796:	4a2b      	ldr	r2, [pc, #172]	; (800c844 <_strtod_l+0x5ec>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d913      	bls.n	800c7c4 <_strtod_l+0x56c>
 800c79c:	2601      	movs	r6, #1
 800c79e:	4f2a      	ldr	r7, [pc, #168]	; (800c848 <_strtod_l+0x5f0>)
 800c7a0:	4276      	negs	r6, r6
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	e088      	b.n	800c8ba <_strtod_l+0x662>
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	4214      	tst	r4, r2
 800c7ac:	d004      	beq.n	800c7b8 <_strtod_l+0x560>
 800c7ae:	682a      	ldr	r2, [r5, #0]
 800c7b0:	686b      	ldr	r3, [r5, #4]
 800c7b2:	f7f4 ff5b 	bl	800166c <__aeabi_dmul>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	9a07      	ldr	r2, [sp, #28]
 800c7ba:	1064      	asrs	r4, r4, #1
 800c7bc:	3201      	adds	r2, #1
 800c7be:	9207      	str	r2, [sp, #28]
 800c7c0:	3508      	adds	r5, #8
 800c7c2:	e7d0      	b.n	800c766 <_strtod_l+0x50e>
 800c7c4:	23d4      	movs	r3, #212	; 0xd4
 800c7c6:	049b      	lsls	r3, r3, #18
 800c7c8:	18cf      	adds	r7, r1, r3
 800c7ca:	e7ea      	b.n	800c7a2 <_strtod_l+0x54a>
 800c7cc:	2c00      	cmp	r4, #0
 800c7ce:	d0e8      	beq.n	800c7a2 <_strtod_l+0x54a>
 800c7d0:	4264      	negs	r4, r4
 800c7d2:	230f      	movs	r3, #15
 800c7d4:	0022      	movs	r2, r4
 800c7d6:	401a      	ands	r2, r3
 800c7d8:	421c      	tst	r4, r3
 800c7da:	d00a      	beq.n	800c7f2 <_strtod_l+0x59a>
 800c7dc:	4b15      	ldr	r3, [pc, #84]	; (800c834 <_strtod_l+0x5dc>)
 800c7de:	00d2      	lsls	r2, r2, #3
 800c7e0:	189b      	adds	r3, r3, r2
 800c7e2:	0030      	movs	r0, r6
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	0039      	movs	r1, r7
 800c7ea:	f7f4 fb45 	bl	8000e78 <__aeabi_ddiv>
 800c7ee:	0006      	movs	r6, r0
 800c7f0:	000f      	movs	r7, r1
 800c7f2:	1124      	asrs	r4, r4, #4
 800c7f4:	d0d5      	beq.n	800c7a2 <_strtod_l+0x54a>
 800c7f6:	2c1f      	cmp	r4, #31
 800c7f8:	dd28      	ble.n	800c84c <_strtod_l+0x5f4>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9305      	str	r3, [sp, #20]
 800c7fe:	9306      	str	r3, [sp, #24]
 800c800:	930d      	str	r3, [sp, #52]	; 0x34
 800c802:	9308      	str	r3, [sp, #32]
 800c804:	2322      	movs	r3, #34	; 0x22
 800c806:	9a04      	ldr	r2, [sp, #16]
 800c808:	2600      	movs	r6, #0
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c80e:	2700      	movs	r7, #0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d18d      	bne.n	800c730 <_strtod_l+0x4d8>
 800c814:	e55b      	b.n	800c2ce <_strtod_l+0x76>
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	00004e1f 	.word	0x00004e1f
 800c81c:	08015e69 	.word	0x08015e69
 800c820:	08015b48 	.word	0x08015b48
 800c824:	7ff00000 	.word	0x7ff00000
 800c828:	08015e61 	.word	0x08015e61
 800c82c:	08015f17 	.word	0x08015f17
 800c830:	08015f13 	.word	0x08015f13
 800c834:	08015d88 	.word	0x08015d88
 800c838:	08015d60 	.word	0x08015d60
 800c83c:	fcb00000 	.word	0xfcb00000
 800c840:	7ca00000 	.word	0x7ca00000
 800c844:	7c900000 	.word	0x7c900000
 800c848:	7fefffff 	.word	0x7fefffff
 800c84c:	2310      	movs	r3, #16
 800c84e:	0022      	movs	r2, r4
 800c850:	401a      	ands	r2, r3
 800c852:	9207      	str	r2, [sp, #28]
 800c854:	421c      	tst	r4, r3
 800c856:	d001      	beq.n	800c85c <_strtod_l+0x604>
 800c858:	335a      	adds	r3, #90	; 0x5a
 800c85a:	9307      	str	r3, [sp, #28]
 800c85c:	0030      	movs	r0, r6
 800c85e:	0039      	movs	r1, r7
 800c860:	2300      	movs	r3, #0
 800c862:	4dc4      	ldr	r5, [pc, #784]	; (800cb74 <_strtod_l+0x91c>)
 800c864:	2201      	movs	r2, #1
 800c866:	4214      	tst	r4, r2
 800c868:	d004      	beq.n	800c874 <_strtod_l+0x61c>
 800c86a:	682a      	ldr	r2, [r5, #0]
 800c86c:	686b      	ldr	r3, [r5, #4]
 800c86e:	f7f4 fefd 	bl	800166c <__aeabi_dmul>
 800c872:	2301      	movs	r3, #1
 800c874:	1064      	asrs	r4, r4, #1
 800c876:	3508      	adds	r5, #8
 800c878:	2c00      	cmp	r4, #0
 800c87a:	d1f3      	bne.n	800c864 <_strtod_l+0x60c>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <_strtod_l+0x62c>
 800c880:	0006      	movs	r6, r0
 800c882:	000f      	movs	r7, r1
 800c884:	9b07      	ldr	r3, [sp, #28]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00f      	beq.n	800c8aa <_strtod_l+0x652>
 800c88a:	236b      	movs	r3, #107	; 0x6b
 800c88c:	007a      	lsls	r2, r7, #1
 800c88e:	0d52      	lsrs	r2, r2, #21
 800c890:	0039      	movs	r1, r7
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd08      	ble.n	800c8aa <_strtod_l+0x652>
 800c898:	2b1f      	cmp	r3, #31
 800c89a:	dc00      	bgt.n	800c89e <_strtod_l+0x646>
 800c89c:	e121      	b.n	800cae2 <_strtod_l+0x88a>
 800c89e:	2600      	movs	r6, #0
 800c8a0:	2b34      	cmp	r3, #52	; 0x34
 800c8a2:	dc00      	bgt.n	800c8a6 <_strtod_l+0x64e>
 800c8a4:	e116      	b.n	800cad4 <_strtod_l+0x87c>
 800c8a6:	27dc      	movs	r7, #220	; 0xdc
 800c8a8:	04bf      	lsls	r7, r7, #18
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	0030      	movs	r0, r6
 800c8b0:	0039      	movs	r1, r7
 800c8b2:	f7f3 fdc9 	bl	8000448 <__aeabi_dcmpeq>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d19f      	bne.n	800c7fa <_strtod_l+0x5a2>
 800c8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8bc:	9a08      	ldr	r2, [sp, #32]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c8c2:	9b05      	ldr	r3, [sp, #20]
 800c8c4:	9804      	ldr	r0, [sp, #16]
 800c8c6:	f001 fbdb 	bl	800e080 <__s2b>
 800c8ca:	900d      	str	r0, [sp, #52]	; 0x34
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d100      	bne.n	800c8d2 <_strtod_l+0x67a>
 800c8d0:	e720      	b.n	800c714 <_strtod_l+0x4bc>
 800c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d4:	9906      	ldr	r1, [sp, #24]
 800c8d6:	17da      	asrs	r2, r3, #31
 800c8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8da:	1a5b      	subs	r3, r3, r1
 800c8dc:	401a      	ands	r2, r3
 800c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e0:	9215      	str	r2, [sp, #84]	; 0x54
 800c8e2:	43db      	mvns	r3, r3
 800c8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e6:	17db      	asrs	r3, r3, #31
 800c8e8:	401a      	ands	r2, r3
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	9218      	str	r2, [sp, #96]	; 0x60
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	9306      	str	r3, [sp, #24]
 800c8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f4:	9804      	ldr	r0, [sp, #16]
 800c8f6:	6859      	ldr	r1, [r3, #4]
 800c8f8:	f001 fb4c 	bl	800df94 <_Balloc>
 800c8fc:	9008      	str	r0, [sp, #32]
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d100      	bne.n	800c904 <_strtod_l+0x6ac>
 800c902:	e70c      	b.n	800c71e <_strtod_l+0x4c6>
 800c904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c906:	300c      	adds	r0, #12
 800c908:	0019      	movs	r1, r3
 800c90a:	691a      	ldr	r2, [r3, #16]
 800c90c:	310c      	adds	r1, #12
 800c90e:	3202      	adds	r2, #2
 800c910:	0092      	lsls	r2, r2, #2
 800c912:	f000 fea4 	bl	800d65e <memcpy>
 800c916:	ab1e      	add	r3, sp, #120	; 0x78
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	ab1d      	add	r3, sp, #116	; 0x74
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	0032      	movs	r2, r6
 800c920:	003b      	movs	r3, r7
 800c922:	9804      	ldr	r0, [sp, #16]
 800c924:	9610      	str	r6, [sp, #64]	; 0x40
 800c926:	9711      	str	r7, [sp, #68]	; 0x44
 800c928:	f001 fed2 	bl	800e6d0 <__d2b>
 800c92c:	901c      	str	r0, [sp, #112]	; 0x70
 800c92e:	2800      	cmp	r0, #0
 800c930:	d100      	bne.n	800c934 <_strtod_l+0x6dc>
 800c932:	e6f4      	b.n	800c71e <_strtod_l+0x4c6>
 800c934:	2101      	movs	r1, #1
 800c936:	9804      	ldr	r0, [sp, #16]
 800c938:	f001 fc36 	bl	800e1a8 <__i2b>
 800c93c:	9006      	str	r0, [sp, #24]
 800c93e:	2800      	cmp	r0, #0
 800c940:	d100      	bne.n	800c944 <_strtod_l+0x6ec>
 800c942:	e6ec      	b.n	800c71e <_strtod_l+0x4c6>
 800c944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c946:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c948:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c94a:	1ad4      	subs	r4, r2, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	db01      	blt.n	800c954 <_strtod_l+0x6fc>
 800c950:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c952:	195d      	adds	r5, r3, r5
 800c954:	9907      	ldr	r1, [sp, #28]
 800c956:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c958:	1a5b      	subs	r3, r3, r1
 800c95a:	2136      	movs	r1, #54	; 0x36
 800c95c:	189b      	adds	r3, r3, r2
 800c95e:	1a8a      	subs	r2, r1, r2
 800c960:	4985      	ldr	r1, [pc, #532]	; (800cb78 <_strtod_l+0x920>)
 800c962:	2001      	movs	r0, #1
 800c964:	468c      	mov	ip, r1
 800c966:	2100      	movs	r1, #0
 800c968:	3b01      	subs	r3, #1
 800c96a:	9114      	str	r1, [sp, #80]	; 0x50
 800c96c:	9012      	str	r0, [sp, #72]	; 0x48
 800c96e:	4563      	cmp	r3, ip
 800c970:	da07      	bge.n	800c982 <_strtod_l+0x72a>
 800c972:	4661      	mov	r1, ip
 800c974:	1ac9      	subs	r1, r1, r3
 800c976:	1a52      	subs	r2, r2, r1
 800c978:	291f      	cmp	r1, #31
 800c97a:	dd00      	ble.n	800c97e <_strtod_l+0x726>
 800c97c:	e0b6      	b.n	800caec <_strtod_l+0x894>
 800c97e:	4088      	lsls	r0, r1
 800c980:	9012      	str	r0, [sp, #72]	; 0x48
 800c982:	18ab      	adds	r3, r5, r2
 800c984:	930c      	str	r3, [sp, #48]	; 0x30
 800c986:	18a4      	adds	r4, r4, r2
 800c988:	9b07      	ldr	r3, [sp, #28]
 800c98a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c98c:	191c      	adds	r4, r3, r4
 800c98e:	002b      	movs	r3, r5
 800c990:	4295      	cmp	r5, r2
 800c992:	dd00      	ble.n	800c996 <_strtod_l+0x73e>
 800c994:	0013      	movs	r3, r2
 800c996:	42a3      	cmp	r3, r4
 800c998:	dd00      	ble.n	800c99c <_strtod_l+0x744>
 800c99a:	0023      	movs	r3, r4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dd04      	ble.n	800c9aa <_strtod_l+0x752>
 800c9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9a2:	1ae4      	subs	r4, r4, r3
 800c9a4:	1ad2      	subs	r2, r2, r3
 800c9a6:	920c      	str	r2, [sp, #48]	; 0x30
 800c9a8:	1aed      	subs	r5, r5, r3
 800c9aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	dd17      	ble.n	800c9e0 <_strtod_l+0x788>
 800c9b0:	001a      	movs	r2, r3
 800c9b2:	9906      	ldr	r1, [sp, #24]
 800c9b4:	9804      	ldr	r0, [sp, #16]
 800c9b6:	f001 fcbf 	bl	800e338 <__pow5mult>
 800c9ba:	9006      	str	r0, [sp, #24]
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d100      	bne.n	800c9c2 <_strtod_l+0x76a>
 800c9c0:	e6ad      	b.n	800c71e <_strtod_l+0x4c6>
 800c9c2:	0001      	movs	r1, r0
 800c9c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9c6:	9804      	ldr	r0, [sp, #16]
 800c9c8:	f001 fc06 	bl	800e1d8 <__multiply>
 800c9cc:	900e      	str	r0, [sp, #56]	; 0x38
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d100      	bne.n	800c9d4 <_strtod_l+0x77c>
 800c9d2:	e6a4      	b.n	800c71e <_strtod_l+0x4c6>
 800c9d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9d6:	9804      	ldr	r0, [sp, #16]
 800c9d8:	f001 fb04 	bl	800dfe4 <_Bfree>
 800c9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9de:	931c      	str	r3, [sp, #112]	; 0x70
 800c9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dd00      	ble.n	800c9e8 <_strtod_l+0x790>
 800c9e6:	e087      	b.n	800caf8 <_strtod_l+0x8a0>
 800c9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dd08      	ble.n	800ca00 <_strtod_l+0x7a8>
 800c9ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9f0:	9908      	ldr	r1, [sp, #32]
 800c9f2:	9804      	ldr	r0, [sp, #16]
 800c9f4:	f001 fca0 	bl	800e338 <__pow5mult>
 800c9f8:	9008      	str	r0, [sp, #32]
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d100      	bne.n	800ca00 <_strtod_l+0x7a8>
 800c9fe:	e68e      	b.n	800c71e <_strtod_l+0x4c6>
 800ca00:	2c00      	cmp	r4, #0
 800ca02:	dd08      	ble.n	800ca16 <_strtod_l+0x7be>
 800ca04:	0022      	movs	r2, r4
 800ca06:	9908      	ldr	r1, [sp, #32]
 800ca08:	9804      	ldr	r0, [sp, #16]
 800ca0a:	f001 fcd7 	bl	800e3bc <__lshift>
 800ca0e:	9008      	str	r0, [sp, #32]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d100      	bne.n	800ca16 <_strtod_l+0x7be>
 800ca14:	e683      	b.n	800c71e <_strtod_l+0x4c6>
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	dd08      	ble.n	800ca2c <_strtod_l+0x7d4>
 800ca1a:	002a      	movs	r2, r5
 800ca1c:	9906      	ldr	r1, [sp, #24]
 800ca1e:	9804      	ldr	r0, [sp, #16]
 800ca20:	f001 fccc 	bl	800e3bc <__lshift>
 800ca24:	9006      	str	r0, [sp, #24]
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d100      	bne.n	800ca2c <_strtod_l+0x7d4>
 800ca2a:	e678      	b.n	800c71e <_strtod_l+0x4c6>
 800ca2c:	9a08      	ldr	r2, [sp, #32]
 800ca2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca30:	9804      	ldr	r0, [sp, #16]
 800ca32:	f001 fd4d 	bl	800e4d0 <__mdiff>
 800ca36:	9005      	str	r0, [sp, #20]
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d100      	bne.n	800ca3e <_strtod_l+0x7e6>
 800ca3c:	e66f      	b.n	800c71e <_strtod_l+0x4c6>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	68c3      	ldr	r3, [r0, #12]
 800ca42:	9906      	ldr	r1, [sp, #24]
 800ca44:	60c2      	str	r2, [r0, #12]
 800ca46:	930c      	str	r3, [sp, #48]	; 0x30
 800ca48:	f001 fd26 	bl	800e498 <__mcmp>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	da5d      	bge.n	800cb0c <_strtod_l+0x8b4>
 800ca50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca52:	4333      	orrs	r3, r6
 800ca54:	d000      	beq.n	800ca58 <_strtod_l+0x800>
 800ca56:	e088      	b.n	800cb6a <_strtod_l+0x912>
 800ca58:	033b      	lsls	r3, r7, #12
 800ca5a:	d000      	beq.n	800ca5e <_strtod_l+0x806>
 800ca5c:	e085      	b.n	800cb6a <_strtod_l+0x912>
 800ca5e:	22d6      	movs	r2, #214	; 0xd6
 800ca60:	4b46      	ldr	r3, [pc, #280]	; (800cb7c <_strtod_l+0x924>)
 800ca62:	04d2      	lsls	r2, r2, #19
 800ca64:	403b      	ands	r3, r7
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d97f      	bls.n	800cb6a <_strtod_l+0x912>
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <_strtod_l+0x822>
 800ca72:	9b05      	ldr	r3, [sp, #20]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	dd77      	ble.n	800cb6a <_strtod_l+0x912>
 800ca7a:	9905      	ldr	r1, [sp, #20]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	9804      	ldr	r0, [sp, #16]
 800ca80:	f001 fc9c 	bl	800e3bc <__lshift>
 800ca84:	9906      	ldr	r1, [sp, #24]
 800ca86:	9005      	str	r0, [sp, #20]
 800ca88:	f001 fd06 	bl	800e498 <__mcmp>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	dd6c      	ble.n	800cb6a <_strtod_l+0x912>
 800ca90:	9907      	ldr	r1, [sp, #28]
 800ca92:	003b      	movs	r3, r7
 800ca94:	4a39      	ldr	r2, [pc, #228]	; (800cb7c <_strtod_l+0x924>)
 800ca96:	2900      	cmp	r1, #0
 800ca98:	d100      	bne.n	800ca9c <_strtod_l+0x844>
 800ca9a:	e094      	b.n	800cbc6 <_strtod_l+0x96e>
 800ca9c:	0011      	movs	r1, r2
 800ca9e:	20d6      	movs	r0, #214	; 0xd6
 800caa0:	4039      	ands	r1, r7
 800caa2:	04c0      	lsls	r0, r0, #19
 800caa4:	4281      	cmp	r1, r0
 800caa6:	dd00      	ble.n	800caaa <_strtod_l+0x852>
 800caa8:	e08d      	b.n	800cbc6 <_strtod_l+0x96e>
 800caaa:	23dc      	movs	r3, #220	; 0xdc
 800caac:	049b      	lsls	r3, r3, #18
 800caae:	4299      	cmp	r1, r3
 800cab0:	dc00      	bgt.n	800cab4 <_strtod_l+0x85c>
 800cab2:	e6a7      	b.n	800c804 <_strtod_l+0x5ac>
 800cab4:	0030      	movs	r0, r6
 800cab6:	0039      	movs	r1, r7
 800cab8:	4b31      	ldr	r3, [pc, #196]	; (800cb80 <_strtod_l+0x928>)
 800caba:	2200      	movs	r2, #0
 800cabc:	f7f4 fdd6 	bl	800166c <__aeabi_dmul>
 800cac0:	4b2e      	ldr	r3, [pc, #184]	; (800cb7c <_strtod_l+0x924>)
 800cac2:	0006      	movs	r6, r0
 800cac4:	000f      	movs	r7, r1
 800cac6:	420b      	tst	r3, r1
 800cac8:	d000      	beq.n	800cacc <_strtod_l+0x874>
 800caca:	e631      	b.n	800c730 <_strtod_l+0x4d8>
 800cacc:	2322      	movs	r3, #34	; 0x22
 800cace:	9a04      	ldr	r2, [sp, #16]
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	e62d      	b.n	800c730 <_strtod_l+0x4d8>
 800cad4:	234b      	movs	r3, #75	; 0x4b
 800cad6:	1a9a      	subs	r2, r3, r2
 800cad8:	3b4c      	subs	r3, #76	; 0x4c
 800cada:	4093      	lsls	r3, r2
 800cadc:	4019      	ands	r1, r3
 800cade:	000f      	movs	r7, r1
 800cae0:	e6e3      	b.n	800c8aa <_strtod_l+0x652>
 800cae2:	2201      	movs	r2, #1
 800cae4:	4252      	negs	r2, r2
 800cae6:	409a      	lsls	r2, r3
 800cae8:	4016      	ands	r6, r2
 800caea:	e6de      	b.n	800c8aa <_strtod_l+0x652>
 800caec:	4925      	ldr	r1, [pc, #148]	; (800cb84 <_strtod_l+0x92c>)
 800caee:	1acb      	subs	r3, r1, r3
 800caf0:	0001      	movs	r1, r0
 800caf2:	4099      	lsls	r1, r3
 800caf4:	9114      	str	r1, [sp, #80]	; 0x50
 800caf6:	e743      	b.n	800c980 <_strtod_l+0x728>
 800caf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cafa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cafc:	9804      	ldr	r0, [sp, #16]
 800cafe:	f001 fc5d 	bl	800e3bc <__lshift>
 800cb02:	901c      	str	r0, [sp, #112]	; 0x70
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d000      	beq.n	800cb0a <_strtod_l+0x8b2>
 800cb08:	e76e      	b.n	800c9e8 <_strtod_l+0x790>
 800cb0a:	e608      	b.n	800c71e <_strtod_l+0x4c6>
 800cb0c:	970e      	str	r7, [sp, #56]	; 0x38
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d177      	bne.n	800cc02 <_strtod_l+0x9aa>
 800cb12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb14:	033b      	lsls	r3, r7, #12
 800cb16:	0b1b      	lsrs	r3, r3, #12
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	d039      	beq.n	800cb90 <_strtod_l+0x938>
 800cb1c:	4a1a      	ldr	r2, [pc, #104]	; (800cb88 <_strtod_l+0x930>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d139      	bne.n	800cb96 <_strtod_l+0x93e>
 800cb22:	2101      	movs	r1, #1
 800cb24:	9b07      	ldr	r3, [sp, #28]
 800cb26:	4249      	negs	r1, r1
 800cb28:	0032      	movs	r2, r6
 800cb2a:	0008      	movs	r0, r1
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00b      	beq.n	800cb48 <_strtod_l+0x8f0>
 800cb30:	24d4      	movs	r4, #212	; 0xd4
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <_strtod_l+0x924>)
 800cb34:	0008      	movs	r0, r1
 800cb36:	403b      	ands	r3, r7
 800cb38:	04e4      	lsls	r4, r4, #19
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	d804      	bhi.n	800cb48 <_strtod_l+0x8f0>
 800cb3e:	306c      	adds	r0, #108	; 0x6c
 800cb40:	0d1b      	lsrs	r3, r3, #20
 800cb42:	1ac3      	subs	r3, r0, r3
 800cb44:	4099      	lsls	r1, r3
 800cb46:	0008      	movs	r0, r1
 800cb48:	4282      	cmp	r2, r0
 800cb4a:	d124      	bne.n	800cb96 <_strtod_l+0x93e>
 800cb4c:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <_strtod_l+0x934>)
 800cb4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb50:	4299      	cmp	r1, r3
 800cb52:	d102      	bne.n	800cb5a <_strtod_l+0x902>
 800cb54:	3201      	adds	r2, #1
 800cb56:	d100      	bne.n	800cb5a <_strtod_l+0x902>
 800cb58:	e5e1      	b.n	800c71e <_strtod_l+0x4c6>
 800cb5a:	4b08      	ldr	r3, [pc, #32]	; (800cb7c <_strtod_l+0x924>)
 800cb5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb5e:	2600      	movs	r6, #0
 800cb60:	401a      	ands	r2, r3
 800cb62:	0013      	movs	r3, r2
 800cb64:	2280      	movs	r2, #128	; 0x80
 800cb66:	0352      	lsls	r2, r2, #13
 800cb68:	189f      	adds	r7, r3, r2
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1a1      	bne.n	800cab4 <_strtod_l+0x85c>
 800cb70:	e5de      	b.n	800c730 <_strtod_l+0x4d8>
 800cb72:	46c0      	nop			; (mov r8, r8)
 800cb74:	08015b60 	.word	0x08015b60
 800cb78:	fffffc02 	.word	0xfffffc02
 800cb7c:	7ff00000 	.word	0x7ff00000
 800cb80:	39500000 	.word	0x39500000
 800cb84:	fffffbe2 	.word	0xfffffbe2
 800cb88:	000fffff 	.word	0x000fffff
 800cb8c:	7fefffff 	.word	0x7fefffff
 800cb90:	4333      	orrs	r3, r6
 800cb92:	d100      	bne.n	800cb96 <_strtod_l+0x93e>
 800cb94:	e77c      	b.n	800ca90 <_strtod_l+0x838>
 800cb96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01d      	beq.n	800cbd8 <_strtod_l+0x980>
 800cb9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cba0:	4213      	tst	r3, r2
 800cba2:	d0e2      	beq.n	800cb6a <_strtod_l+0x912>
 800cba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cba6:	0030      	movs	r0, r6
 800cba8:	0039      	movs	r1, r7
 800cbaa:	9a07      	ldr	r2, [sp, #28]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d017      	beq.n	800cbe0 <_strtod_l+0x988>
 800cbb0:	f7ff fb3a 	bl	800c228 <sulp>
 800cbb4:	0002      	movs	r2, r0
 800cbb6:	000b      	movs	r3, r1
 800cbb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cbba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cbbc:	f7f3 fdfc 	bl	80007b8 <__aeabi_dadd>
 800cbc0:	0006      	movs	r6, r0
 800cbc2:	000f      	movs	r7, r1
 800cbc4:	e7d1      	b.n	800cb6a <_strtod_l+0x912>
 800cbc6:	2601      	movs	r6, #1
 800cbc8:	4013      	ands	r3, r2
 800cbca:	4a98      	ldr	r2, [pc, #608]	; (800ce2c <_strtod_l+0xbd4>)
 800cbcc:	4276      	negs	r6, r6
 800cbce:	189b      	adds	r3, r3, r2
 800cbd0:	4a97      	ldr	r2, [pc, #604]	; (800ce30 <_strtod_l+0xbd8>)
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	0017      	movs	r7, r2
 800cbd6:	e7c8      	b.n	800cb6a <_strtod_l+0x912>
 800cbd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbda:	4233      	tst	r3, r6
 800cbdc:	d0c5      	beq.n	800cb6a <_strtod_l+0x912>
 800cbde:	e7e1      	b.n	800cba4 <_strtod_l+0x94c>
 800cbe0:	f7ff fb22 	bl	800c228 <sulp>
 800cbe4:	0002      	movs	r2, r0
 800cbe6:	000b      	movs	r3, r1
 800cbe8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cbea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cbec:	f7f5 f800 	bl	8001bf0 <__aeabi_dsub>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	0006      	movs	r6, r0
 800cbf6:	000f      	movs	r7, r1
 800cbf8:	f7f3 fc26 	bl	8000448 <__aeabi_dcmpeq>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d0b4      	beq.n	800cb6a <_strtod_l+0x912>
 800cc00:	e600      	b.n	800c804 <_strtod_l+0x5ac>
 800cc02:	9906      	ldr	r1, [sp, #24]
 800cc04:	9805      	ldr	r0, [sp, #20]
 800cc06:	f001 fdc3 	bl	800e790 <__ratio>
 800cc0a:	2380      	movs	r3, #128	; 0x80
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	05db      	lsls	r3, r3, #23
 800cc10:	0004      	movs	r4, r0
 800cc12:	000d      	movs	r5, r1
 800cc14:	f7f3 fc28 	bl	8000468 <__aeabi_dcmple>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d06d      	beq.n	800ccf8 <_strtod_l+0xaa0>
 800cc1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d000      	beq.n	800cc24 <_strtod_l+0x9cc>
 800cc22:	e07e      	b.n	800cd22 <_strtod_l+0xaca>
 800cc24:	2e00      	cmp	r6, #0
 800cc26:	d158      	bne.n	800ccda <_strtod_l+0xa82>
 800cc28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc2a:	031b      	lsls	r3, r3, #12
 800cc2c:	d000      	beq.n	800cc30 <_strtod_l+0x9d8>
 800cc2e:	e07f      	b.n	800cd30 <_strtod_l+0xad8>
 800cc30:	2200      	movs	r2, #0
 800cc32:	0020      	movs	r0, r4
 800cc34:	0029      	movs	r1, r5
 800cc36:	4b7f      	ldr	r3, [pc, #508]	; (800ce34 <_strtod_l+0xbdc>)
 800cc38:	f7f3 fc0c 	bl	8000454 <__aeabi_dcmplt>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d158      	bne.n	800ccf2 <_strtod_l+0xa9a>
 800cc40:	0020      	movs	r0, r4
 800cc42:	0029      	movs	r1, r5
 800cc44:	2200      	movs	r2, #0
 800cc46:	4b7c      	ldr	r3, [pc, #496]	; (800ce38 <_strtod_l+0xbe0>)
 800cc48:	f7f4 fd10 	bl	800166c <__aeabi_dmul>
 800cc4c:	0004      	movs	r4, r0
 800cc4e:	000d      	movs	r5, r1
 800cc50:	2380      	movs	r3, #128	; 0x80
 800cc52:	061b      	lsls	r3, r3, #24
 800cc54:	940a      	str	r4, [sp, #40]	; 0x28
 800cc56:	18eb      	adds	r3, r5, r3
 800cc58:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc5e:	9212      	str	r2, [sp, #72]	; 0x48
 800cc60:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc62:	4a76      	ldr	r2, [pc, #472]	; (800ce3c <_strtod_l+0xbe4>)
 800cc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc66:	4013      	ands	r3, r2
 800cc68:	9314      	str	r3, [sp, #80]	; 0x50
 800cc6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc6c:	4b74      	ldr	r3, [pc, #464]	; (800ce40 <_strtod_l+0xbe8>)
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d000      	beq.n	800cc74 <_strtod_l+0xa1c>
 800cc72:	e091      	b.n	800cd98 <_strtod_l+0xb40>
 800cc74:	4a73      	ldr	r2, [pc, #460]	; (800ce44 <_strtod_l+0xbec>)
 800cc76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc78:	4694      	mov	ip, r2
 800cc7a:	4463      	add	r3, ip
 800cc7c:	001f      	movs	r7, r3
 800cc7e:	0030      	movs	r0, r6
 800cc80:	0019      	movs	r1, r3
 800cc82:	f001 fcbd 	bl	800e600 <__ulp>
 800cc86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8a:	f7f4 fcef 	bl	800166c <__aeabi_dmul>
 800cc8e:	0032      	movs	r2, r6
 800cc90:	003b      	movs	r3, r7
 800cc92:	f7f3 fd91 	bl	80007b8 <__aeabi_dadd>
 800cc96:	4a69      	ldr	r2, [pc, #420]	; (800ce3c <_strtod_l+0xbe4>)
 800cc98:	4b6b      	ldr	r3, [pc, #428]	; (800ce48 <_strtod_l+0xbf0>)
 800cc9a:	0006      	movs	r6, r0
 800cc9c:	400a      	ands	r2, r1
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d949      	bls.n	800cd36 <_strtod_l+0xade>
 800cca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cca4:	4b69      	ldr	r3, [pc, #420]	; (800ce4c <_strtod_l+0xbf4>)
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d103      	bne.n	800ccb2 <_strtod_l+0xa5a>
 800ccaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccac:	3301      	adds	r3, #1
 800ccae:	d100      	bne.n	800ccb2 <_strtod_l+0xa5a>
 800ccb0:	e535      	b.n	800c71e <_strtod_l+0x4c6>
 800ccb2:	2601      	movs	r6, #1
 800ccb4:	4f65      	ldr	r7, [pc, #404]	; (800ce4c <_strtod_l+0xbf4>)
 800ccb6:	4276      	negs	r6, r6
 800ccb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ccba:	9804      	ldr	r0, [sp, #16]
 800ccbc:	f001 f992 	bl	800dfe4 <_Bfree>
 800ccc0:	9908      	ldr	r1, [sp, #32]
 800ccc2:	9804      	ldr	r0, [sp, #16]
 800ccc4:	f001 f98e 	bl	800dfe4 <_Bfree>
 800ccc8:	9906      	ldr	r1, [sp, #24]
 800ccca:	9804      	ldr	r0, [sp, #16]
 800cccc:	f001 f98a 	bl	800dfe4 <_Bfree>
 800ccd0:	9905      	ldr	r1, [sp, #20]
 800ccd2:	9804      	ldr	r0, [sp, #16]
 800ccd4:	f001 f986 	bl	800dfe4 <_Bfree>
 800ccd8:	e60b      	b.n	800c8f2 <_strtod_l+0x69a>
 800ccda:	2e01      	cmp	r6, #1
 800ccdc:	d103      	bne.n	800cce6 <_strtod_l+0xa8e>
 800ccde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d100      	bne.n	800cce6 <_strtod_l+0xa8e>
 800cce4:	e58e      	b.n	800c804 <_strtod_l+0x5ac>
 800cce6:	2300      	movs	r3, #0
 800cce8:	4c59      	ldr	r4, [pc, #356]	; (800ce50 <_strtod_l+0xbf8>)
 800ccea:	930a      	str	r3, [sp, #40]	; 0x28
 800ccec:	940b      	str	r4, [sp, #44]	; 0x2c
 800ccee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccf0:	e01c      	b.n	800cd2c <_strtod_l+0xad4>
 800ccf2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccf4:	4d50      	ldr	r5, [pc, #320]	; (800ce38 <_strtod_l+0xbe0>)
 800ccf6:	e7ab      	b.n	800cc50 <_strtod_l+0x9f8>
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	0020      	movs	r0, r4
 800ccfc:	0029      	movs	r1, r5
 800ccfe:	4b4e      	ldr	r3, [pc, #312]	; (800ce38 <_strtod_l+0xbe0>)
 800cd00:	f7f4 fcb4 	bl	800166c <__aeabi_dmul>
 800cd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd06:	0004      	movs	r4, r0
 800cd08:	000b      	movs	r3, r1
 800cd0a:	000d      	movs	r5, r1
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d104      	bne.n	800cd1a <_strtod_l+0xac2>
 800cd10:	2280      	movs	r2, #128	; 0x80
 800cd12:	0612      	lsls	r2, r2, #24
 800cd14:	900a      	str	r0, [sp, #40]	; 0x28
 800cd16:	188b      	adds	r3, r1, r2
 800cd18:	e79e      	b.n	800cc58 <_strtod_l+0xa00>
 800cd1a:	0002      	movs	r2, r0
 800cd1c:	920a      	str	r2, [sp, #40]	; 0x28
 800cd1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd20:	e79b      	b.n	800cc5a <_strtod_l+0xa02>
 800cd22:	2300      	movs	r3, #0
 800cd24:	4c43      	ldr	r4, [pc, #268]	; (800ce34 <_strtod_l+0xbdc>)
 800cd26:	930a      	str	r3, [sp, #40]	; 0x28
 800cd28:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd2a:	2400      	movs	r4, #0
 800cd2c:	4d41      	ldr	r5, [pc, #260]	; (800ce34 <_strtod_l+0xbdc>)
 800cd2e:	e794      	b.n	800cc5a <_strtod_l+0xa02>
 800cd30:	2300      	movs	r3, #0
 800cd32:	4c47      	ldr	r4, [pc, #284]	; (800ce50 <_strtod_l+0xbf8>)
 800cd34:	e7f7      	b.n	800cd26 <_strtod_l+0xace>
 800cd36:	23d4      	movs	r3, #212	; 0xd4
 800cd38:	049b      	lsls	r3, r3, #18
 800cd3a:	18cf      	adds	r7, r1, r3
 800cd3c:	9b07      	ldr	r3, [sp, #28]
 800cd3e:	970e      	str	r7, [sp, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1b9      	bne.n	800ccb8 <_strtod_l+0xa60>
 800cd44:	4b3d      	ldr	r3, [pc, #244]	; (800ce3c <_strtod_l+0xbe4>)
 800cd46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd48:	403b      	ands	r3, r7
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d1b4      	bne.n	800ccb8 <_strtod_l+0xa60>
 800cd4e:	0020      	movs	r0, r4
 800cd50:	0029      	movs	r1, r5
 800cd52:	f7f3 fc13 	bl	800057c <__aeabi_d2lz>
 800cd56:	f7f3 fc4d 	bl	80005f4 <__aeabi_l2d>
 800cd5a:	0002      	movs	r2, r0
 800cd5c:	000b      	movs	r3, r1
 800cd5e:	0020      	movs	r0, r4
 800cd60:	0029      	movs	r1, r5
 800cd62:	f7f4 ff45 	bl	8001bf0 <__aeabi_dsub>
 800cd66:	033b      	lsls	r3, r7, #12
 800cd68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd6a:	0b1b      	lsrs	r3, r3, #12
 800cd6c:	4333      	orrs	r3, r6
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	0004      	movs	r4, r0
 800cd72:	000d      	movs	r5, r1
 800cd74:	4a37      	ldr	r2, [pc, #220]	; (800ce54 <_strtod_l+0xbfc>)
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d054      	beq.n	800ce24 <_strtod_l+0xbcc>
 800cd7a:	4b37      	ldr	r3, [pc, #220]	; (800ce58 <_strtod_l+0xc00>)
 800cd7c:	f7f3 fb6a 	bl	8000454 <__aeabi_dcmplt>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d000      	beq.n	800cd86 <_strtod_l+0xb2e>
 800cd84:	e4d4      	b.n	800c730 <_strtod_l+0x4d8>
 800cd86:	0020      	movs	r0, r4
 800cd88:	0029      	movs	r1, r5
 800cd8a:	4a34      	ldr	r2, [pc, #208]	; (800ce5c <_strtod_l+0xc04>)
 800cd8c:	4b2a      	ldr	r3, [pc, #168]	; (800ce38 <_strtod_l+0xbe0>)
 800cd8e:	f7f3 fb75 	bl	800047c <__aeabi_dcmpgt>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d090      	beq.n	800ccb8 <_strtod_l+0xa60>
 800cd96:	e4cb      	b.n	800c730 <_strtod_l+0x4d8>
 800cd98:	9b07      	ldr	r3, [sp, #28]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d02b      	beq.n	800cdf6 <_strtod_l+0xb9e>
 800cd9e:	23d4      	movs	r3, #212	; 0xd4
 800cda0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cda2:	04db      	lsls	r3, r3, #19
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d826      	bhi.n	800cdf6 <_strtod_l+0xb9e>
 800cda8:	0020      	movs	r0, r4
 800cdaa:	0029      	movs	r1, r5
 800cdac:	4a2c      	ldr	r2, [pc, #176]	; (800ce60 <_strtod_l+0xc08>)
 800cdae:	4b2d      	ldr	r3, [pc, #180]	; (800ce64 <_strtod_l+0xc0c>)
 800cdb0:	f7f3 fb5a 	bl	8000468 <__aeabi_dcmple>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d017      	beq.n	800cde8 <_strtod_l+0xb90>
 800cdb8:	0020      	movs	r0, r4
 800cdba:	0029      	movs	r1, r5
 800cdbc:	f7f3 fbc0 	bl	8000540 <__aeabi_d2uiz>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d100      	bne.n	800cdc6 <_strtod_l+0xb6e>
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	f7f5 fb19 	bl	80023fc <__aeabi_ui2d>
 800cdca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdcc:	0004      	movs	r4, r0
 800cdce:	000b      	movs	r3, r1
 800cdd0:	000d      	movs	r5, r1
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d122      	bne.n	800ce1c <_strtod_l+0xbc4>
 800cdd6:	2280      	movs	r2, #128	; 0x80
 800cdd8:	0612      	lsls	r2, r2, #24
 800cdda:	188b      	adds	r3, r1, r2
 800cddc:	9016      	str	r0, [sp, #88]	; 0x58
 800cdde:	9317      	str	r3, [sp, #92]	; 0x5c
 800cde0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cde2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cde4:	9212      	str	r2, [sp, #72]	; 0x48
 800cde6:	9313      	str	r3, [sp, #76]	; 0x4c
 800cde8:	22d6      	movs	r2, #214	; 0xd6
 800cdea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdec:	04d2      	lsls	r2, r2, #19
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdf2:	1a9b      	subs	r3, r3, r2
 800cdf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdf6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cdf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cdfa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cdfc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cdfe:	f001 fbff 	bl	800e600 <__ulp>
 800ce02:	0002      	movs	r2, r0
 800ce04:	000b      	movs	r3, r1
 800ce06:	0030      	movs	r0, r6
 800ce08:	0039      	movs	r1, r7
 800ce0a:	f7f4 fc2f 	bl	800166c <__aeabi_dmul>
 800ce0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce12:	f7f3 fcd1 	bl	80007b8 <__aeabi_dadd>
 800ce16:	0006      	movs	r6, r0
 800ce18:	000f      	movs	r7, r1
 800ce1a:	e78f      	b.n	800cd3c <_strtod_l+0xae4>
 800ce1c:	0002      	movs	r2, r0
 800ce1e:	9216      	str	r2, [sp, #88]	; 0x58
 800ce20:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce22:	e7dd      	b.n	800cde0 <_strtod_l+0xb88>
 800ce24:	4b10      	ldr	r3, [pc, #64]	; (800ce68 <_strtod_l+0xc10>)
 800ce26:	f7f3 fb15 	bl	8000454 <__aeabi_dcmplt>
 800ce2a:	e7b2      	b.n	800cd92 <_strtod_l+0xb3a>
 800ce2c:	fff00000 	.word	0xfff00000
 800ce30:	000fffff 	.word	0x000fffff
 800ce34:	3ff00000 	.word	0x3ff00000
 800ce38:	3fe00000 	.word	0x3fe00000
 800ce3c:	7ff00000 	.word	0x7ff00000
 800ce40:	7fe00000 	.word	0x7fe00000
 800ce44:	fcb00000 	.word	0xfcb00000
 800ce48:	7c9fffff 	.word	0x7c9fffff
 800ce4c:	7fefffff 	.word	0x7fefffff
 800ce50:	bff00000 	.word	0xbff00000
 800ce54:	94a03595 	.word	0x94a03595
 800ce58:	3fdfffff 	.word	0x3fdfffff
 800ce5c:	35afe535 	.word	0x35afe535
 800ce60:	ffc00000 	.word	0xffc00000
 800ce64:	41dfffff 	.word	0x41dfffff
 800ce68:	3fcfffff 	.word	0x3fcfffff

0800ce6c <_strtod_r>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	4b02      	ldr	r3, [pc, #8]	; (800ce78 <_strtod_r+0xc>)
 800ce70:	f7ff f9f2 	bl	800c258 <_strtod_l>
 800ce74:	bd10      	pop	{r4, pc}
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	20000444 	.word	0x20000444

0800ce7c <strtod>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	4c04      	ldr	r4, [pc, #16]	; (800ce90 <strtod+0x14>)
 800ce80:	000a      	movs	r2, r1
 800ce82:	0001      	movs	r1, r0
 800ce84:	4b03      	ldr	r3, [pc, #12]	; (800ce94 <strtod+0x18>)
 800ce86:	6820      	ldr	r0, [r4, #0]
 800ce88:	f7ff f9e6 	bl	800c258 <_strtod_l>
 800ce8c:	bd10      	pop	{r4, pc}
 800ce8e:	46c0      	nop			; (mov r8, r8)
 800ce90:	200006d0 	.word	0x200006d0
 800ce94:	20000444 	.word	0x20000444

0800ce98 <_strtol_l.constprop.0>:
 800ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	001e      	movs	r6, r3
 800ce9e:	9005      	str	r0, [sp, #20]
 800cea0:	9101      	str	r1, [sp, #4]
 800cea2:	9202      	str	r2, [sp, #8]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d048      	beq.n	800cf3a <_strtol_l.constprop.0+0xa2>
 800cea8:	000b      	movs	r3, r1
 800ceaa:	2e24      	cmp	r6, #36	; 0x24
 800ceac:	d845      	bhi.n	800cf3a <_strtol_l.constprop.0+0xa2>
 800ceae:	4a3b      	ldr	r2, [pc, #236]	; (800cf9c <_strtol_l.constprop.0+0x104>)
 800ceb0:	2108      	movs	r1, #8
 800ceb2:	4694      	mov	ip, r2
 800ceb4:	001a      	movs	r2, r3
 800ceb6:	4660      	mov	r0, ip
 800ceb8:	7814      	ldrb	r4, [r2, #0]
 800ceba:	3301      	adds	r3, #1
 800cebc:	5d00      	ldrb	r0, [r0, r4]
 800cebe:	001d      	movs	r5, r3
 800cec0:	0007      	movs	r7, r0
 800cec2:	400f      	ands	r7, r1
 800cec4:	4208      	tst	r0, r1
 800cec6:	d1f5      	bne.n	800ceb4 <_strtol_l.constprop.0+0x1c>
 800cec8:	2c2d      	cmp	r4, #45	; 0x2d
 800ceca:	d13d      	bne.n	800cf48 <_strtol_l.constprop.0+0xb0>
 800cecc:	2701      	movs	r7, #1
 800cece:	781c      	ldrb	r4, [r3, #0]
 800ced0:	1c95      	adds	r5, r2, #2
 800ced2:	2e00      	cmp	r6, #0
 800ced4:	d05e      	beq.n	800cf94 <_strtol_l.constprop.0+0xfc>
 800ced6:	2e10      	cmp	r6, #16
 800ced8:	d109      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800ceda:	2c30      	cmp	r4, #48	; 0x30
 800cedc:	d107      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800cede:	2220      	movs	r2, #32
 800cee0:	782b      	ldrb	r3, [r5, #0]
 800cee2:	4393      	bics	r3, r2
 800cee4:	2b58      	cmp	r3, #88	; 0x58
 800cee6:	d150      	bne.n	800cf8a <_strtol_l.constprop.0+0xf2>
 800cee8:	2610      	movs	r6, #16
 800ceea:	786c      	ldrb	r4, [r5, #1]
 800ceec:	3502      	adds	r5, #2
 800ceee:	4b2c      	ldr	r3, [pc, #176]	; (800cfa0 <_strtol_l.constprop.0+0x108>)
 800cef0:	0031      	movs	r1, r6
 800cef2:	18fb      	adds	r3, r7, r3
 800cef4:	0018      	movs	r0, r3
 800cef6:	9303      	str	r3, [sp, #12]
 800cef8:	f7f3 f9a6 	bl	8000248 <__aeabi_uidivmod>
 800cefc:	2200      	movs	r2, #0
 800cefe:	9104      	str	r1, [sp, #16]
 800cf00:	2101      	movs	r1, #1
 800cf02:	4684      	mov	ip, r0
 800cf04:	0010      	movs	r0, r2
 800cf06:	4249      	negs	r1, r1
 800cf08:	0023      	movs	r3, r4
 800cf0a:	3b30      	subs	r3, #48	; 0x30
 800cf0c:	2b09      	cmp	r3, #9
 800cf0e:	d903      	bls.n	800cf18 <_strtol_l.constprop.0+0x80>
 800cf10:	3b11      	subs	r3, #17
 800cf12:	2b19      	cmp	r3, #25
 800cf14:	d81d      	bhi.n	800cf52 <_strtol_l.constprop.0+0xba>
 800cf16:	330a      	adds	r3, #10
 800cf18:	429e      	cmp	r6, r3
 800cf1a:	dd1e      	ble.n	800cf5a <_strtol_l.constprop.0+0xc2>
 800cf1c:	1c54      	adds	r4, r2, #1
 800cf1e:	d009      	beq.n	800cf34 <_strtol_l.constprop.0+0x9c>
 800cf20:	000a      	movs	r2, r1
 800cf22:	4584      	cmp	ip, r0
 800cf24:	d306      	bcc.n	800cf34 <_strtol_l.constprop.0+0x9c>
 800cf26:	d102      	bne.n	800cf2e <_strtol_l.constprop.0+0x96>
 800cf28:	9c04      	ldr	r4, [sp, #16]
 800cf2a:	429c      	cmp	r4, r3
 800cf2c:	db02      	blt.n	800cf34 <_strtol_l.constprop.0+0x9c>
 800cf2e:	2201      	movs	r2, #1
 800cf30:	4370      	muls	r0, r6
 800cf32:	1818      	adds	r0, r3, r0
 800cf34:	782c      	ldrb	r4, [r5, #0]
 800cf36:	3501      	adds	r5, #1
 800cf38:	e7e6      	b.n	800cf08 <_strtol_l.constprop.0+0x70>
 800cf3a:	f000 fb57 	bl	800d5ec <__errno>
 800cf3e:	2316      	movs	r3, #22
 800cf40:	6003      	str	r3, [r0, #0]
 800cf42:	2000      	movs	r0, #0
 800cf44:	b007      	add	sp, #28
 800cf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf48:	2c2b      	cmp	r4, #43	; 0x2b
 800cf4a:	d1c2      	bne.n	800ced2 <_strtol_l.constprop.0+0x3a>
 800cf4c:	781c      	ldrb	r4, [r3, #0]
 800cf4e:	1c95      	adds	r5, r2, #2
 800cf50:	e7bf      	b.n	800ced2 <_strtol_l.constprop.0+0x3a>
 800cf52:	0023      	movs	r3, r4
 800cf54:	3b61      	subs	r3, #97	; 0x61
 800cf56:	2b19      	cmp	r3, #25
 800cf58:	d9dd      	bls.n	800cf16 <_strtol_l.constprop.0+0x7e>
 800cf5a:	1c53      	adds	r3, r2, #1
 800cf5c:	d109      	bne.n	800cf72 <_strtol_l.constprop.0+0xda>
 800cf5e:	2322      	movs	r3, #34	; 0x22
 800cf60:	9a05      	ldr	r2, [sp, #20]
 800cf62:	9803      	ldr	r0, [sp, #12]
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0eb      	beq.n	800cf44 <_strtol_l.constprop.0+0xac>
 800cf6c:	1e6b      	subs	r3, r5, #1
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	e007      	b.n	800cf82 <_strtol_l.constprop.0+0xea>
 800cf72:	2f00      	cmp	r7, #0
 800cf74:	d000      	beq.n	800cf78 <_strtol_l.constprop.0+0xe0>
 800cf76:	4240      	negs	r0, r0
 800cf78:	9b02      	ldr	r3, [sp, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0e2      	beq.n	800cf44 <_strtol_l.constprop.0+0xac>
 800cf7e:	2a00      	cmp	r2, #0
 800cf80:	d1f4      	bne.n	800cf6c <_strtol_l.constprop.0+0xd4>
 800cf82:	9b02      	ldr	r3, [sp, #8]
 800cf84:	9a01      	ldr	r2, [sp, #4]
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	e7dc      	b.n	800cf44 <_strtol_l.constprop.0+0xac>
 800cf8a:	2430      	movs	r4, #48	; 0x30
 800cf8c:	2e00      	cmp	r6, #0
 800cf8e:	d1ae      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf90:	3608      	adds	r6, #8
 800cf92:	e7ac      	b.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf94:	2c30      	cmp	r4, #48	; 0x30
 800cf96:	d0a2      	beq.n	800cede <_strtol_l.constprop.0+0x46>
 800cf98:	260a      	movs	r6, #10
 800cf9a:	e7a8      	b.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf9c:	08015b89 	.word	0x08015b89
 800cfa0:	7fffffff 	.word	0x7fffffff

0800cfa4 <_strtol_r>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	f7ff ff77 	bl	800ce98 <_strtol_l.constprop.0>
 800cfaa:	bd10      	pop	{r4, pc}

0800cfac <strtol>:
 800cfac:	b510      	push	{r4, lr}
 800cfae:	4c04      	ldr	r4, [pc, #16]	; (800cfc0 <strtol+0x14>)
 800cfb0:	0013      	movs	r3, r2
 800cfb2:	000a      	movs	r2, r1
 800cfb4:	0001      	movs	r1, r0
 800cfb6:	6820      	ldr	r0, [r4, #0]
 800cfb8:	f7ff ff6e 	bl	800ce98 <_strtol_l.constprop.0>
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	200006d0 	.word	0x200006d0

0800cfc4 <_strtoul_l.constprop.0>:
 800cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	9202      	str	r2, [sp, #8]
 800cfca:	4a3e      	ldr	r2, [pc, #248]	; (800d0c4 <_strtoul_l.constprop.0+0x100>)
 800cfcc:	001e      	movs	r6, r3
 800cfce:	9101      	str	r1, [sp, #4]
 800cfd0:	000b      	movs	r3, r1
 800cfd2:	4694      	mov	ip, r2
 800cfd4:	2108      	movs	r1, #8
 800cfd6:	9005      	str	r0, [sp, #20]
 800cfd8:	001a      	movs	r2, r3
 800cfda:	4660      	mov	r0, ip
 800cfdc:	7814      	ldrb	r4, [r2, #0]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	5d00      	ldrb	r0, [r0, r4]
 800cfe2:	001d      	movs	r5, r3
 800cfe4:	0007      	movs	r7, r0
 800cfe6:	400f      	ands	r7, r1
 800cfe8:	4208      	tst	r0, r1
 800cfea:	d1f5      	bne.n	800cfd8 <_strtoul_l.constprop.0+0x14>
 800cfec:	2c2d      	cmp	r4, #45	; 0x2d
 800cfee:	d13d      	bne.n	800d06c <_strtoul_l.constprop.0+0xa8>
 800cff0:	2701      	movs	r7, #1
 800cff2:	781c      	ldrb	r4, [r3, #0]
 800cff4:	1c95      	adds	r5, r2, #2
 800cff6:	2e00      	cmp	r6, #0
 800cff8:	d05f      	beq.n	800d0ba <_strtoul_l.constprop.0+0xf6>
 800cffa:	2e10      	cmp	r6, #16
 800cffc:	d109      	bne.n	800d012 <_strtoul_l.constprop.0+0x4e>
 800cffe:	2c30      	cmp	r4, #48	; 0x30
 800d000:	d107      	bne.n	800d012 <_strtoul_l.constprop.0+0x4e>
 800d002:	2220      	movs	r2, #32
 800d004:	782b      	ldrb	r3, [r5, #0]
 800d006:	4393      	bics	r3, r2
 800d008:	2b58      	cmp	r3, #88	; 0x58
 800d00a:	d151      	bne.n	800d0b0 <_strtoul_l.constprop.0+0xec>
 800d00c:	2610      	movs	r6, #16
 800d00e:	786c      	ldrb	r4, [r5, #1]
 800d010:	3502      	adds	r5, #2
 800d012:	2001      	movs	r0, #1
 800d014:	0031      	movs	r1, r6
 800d016:	4240      	negs	r0, r0
 800d018:	f7f3 f890 	bl	800013c <__udivsi3>
 800d01c:	9003      	str	r0, [sp, #12]
 800d01e:	2001      	movs	r0, #1
 800d020:	0031      	movs	r1, r6
 800d022:	4240      	negs	r0, r0
 800d024:	f7f3 f910 	bl	8000248 <__aeabi_uidivmod>
 800d028:	2300      	movs	r3, #0
 800d02a:	2201      	movs	r2, #1
 800d02c:	9104      	str	r1, [sp, #16]
 800d02e:	2101      	movs	r1, #1
 800d030:	0018      	movs	r0, r3
 800d032:	4694      	mov	ip, r2
 800d034:	4249      	negs	r1, r1
 800d036:	0022      	movs	r2, r4
 800d038:	3a30      	subs	r2, #48	; 0x30
 800d03a:	2a09      	cmp	r2, #9
 800d03c:	d903      	bls.n	800d046 <_strtoul_l.constprop.0+0x82>
 800d03e:	3a11      	subs	r2, #17
 800d040:	2a19      	cmp	r2, #25
 800d042:	d818      	bhi.n	800d076 <_strtoul_l.constprop.0+0xb2>
 800d044:	320a      	adds	r2, #10
 800d046:	4296      	cmp	r6, r2
 800d048:	dd19      	ble.n	800d07e <_strtoul_l.constprop.0+0xba>
 800d04a:	1c5c      	adds	r4, r3, #1
 800d04c:	d00b      	beq.n	800d066 <_strtoul_l.constprop.0+0xa2>
 800d04e:	9c03      	ldr	r4, [sp, #12]
 800d050:	000b      	movs	r3, r1
 800d052:	4284      	cmp	r4, r0
 800d054:	d307      	bcc.n	800d066 <_strtoul_l.constprop.0+0xa2>
 800d056:	d103      	bne.n	800d060 <_strtoul_l.constprop.0+0x9c>
 800d058:	9c04      	ldr	r4, [sp, #16]
 800d05a:	000b      	movs	r3, r1
 800d05c:	4294      	cmp	r4, r2
 800d05e:	db02      	blt.n	800d066 <_strtoul_l.constprop.0+0xa2>
 800d060:	4663      	mov	r3, ip
 800d062:	4370      	muls	r0, r6
 800d064:	1810      	adds	r0, r2, r0
 800d066:	782c      	ldrb	r4, [r5, #0]
 800d068:	3501      	adds	r5, #1
 800d06a:	e7e4      	b.n	800d036 <_strtoul_l.constprop.0+0x72>
 800d06c:	2c2b      	cmp	r4, #43	; 0x2b
 800d06e:	d1c2      	bne.n	800cff6 <_strtoul_l.constprop.0+0x32>
 800d070:	781c      	ldrb	r4, [r3, #0]
 800d072:	1c95      	adds	r5, r2, #2
 800d074:	e7bf      	b.n	800cff6 <_strtoul_l.constprop.0+0x32>
 800d076:	0022      	movs	r2, r4
 800d078:	3a61      	subs	r2, #97	; 0x61
 800d07a:	2a19      	cmp	r2, #25
 800d07c:	d9e2      	bls.n	800d044 <_strtoul_l.constprop.0+0x80>
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	d108      	bne.n	800d094 <_strtoul_l.constprop.0+0xd0>
 800d082:	2222      	movs	r2, #34	; 0x22
 800d084:	9905      	ldr	r1, [sp, #20]
 800d086:	0018      	movs	r0, r3
 800d088:	600a      	str	r2, [r1, #0]
 800d08a:	9a02      	ldr	r2, [sp, #8]
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	d109      	bne.n	800d0a4 <_strtoul_l.constprop.0+0xe0>
 800d090:	b007      	add	sp, #28
 800d092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d094:	2f00      	cmp	r7, #0
 800d096:	d000      	beq.n	800d09a <_strtoul_l.constprop.0+0xd6>
 800d098:	4240      	negs	r0, r0
 800d09a:	9a02      	ldr	r2, [sp, #8]
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	d0f7      	beq.n	800d090 <_strtoul_l.constprop.0+0xcc>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <_strtoul_l.constprop.0+0xe4>
 800d0a4:	1e6b      	subs	r3, r5, #1
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	9b02      	ldr	r3, [sp, #8]
 800d0aa:	9a01      	ldr	r2, [sp, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e7ef      	b.n	800d090 <_strtoul_l.constprop.0+0xcc>
 800d0b0:	2430      	movs	r4, #48	; 0x30
 800d0b2:	2e00      	cmp	r6, #0
 800d0b4:	d1ad      	bne.n	800d012 <_strtoul_l.constprop.0+0x4e>
 800d0b6:	3608      	adds	r6, #8
 800d0b8:	e7ab      	b.n	800d012 <_strtoul_l.constprop.0+0x4e>
 800d0ba:	2c30      	cmp	r4, #48	; 0x30
 800d0bc:	d0a1      	beq.n	800d002 <_strtoul_l.constprop.0+0x3e>
 800d0be:	260a      	movs	r6, #10
 800d0c0:	e7a7      	b.n	800d012 <_strtoul_l.constprop.0+0x4e>
 800d0c2:	46c0      	nop			; (mov r8, r8)
 800d0c4:	08015b89 	.word	0x08015b89

0800d0c8 <_strtoul_r>:
 800d0c8:	b510      	push	{r4, lr}
 800d0ca:	f7ff ff7b 	bl	800cfc4 <_strtoul_l.constprop.0>
 800d0ce:	bd10      	pop	{r4, pc}

0800d0d0 <strtoul>:
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	4c04      	ldr	r4, [pc, #16]	; (800d0e4 <strtoul+0x14>)
 800d0d4:	0013      	movs	r3, r2
 800d0d6:	000a      	movs	r2, r1
 800d0d8:	0001      	movs	r1, r0
 800d0da:	6820      	ldr	r0, [r4, #0]
 800d0dc:	f7ff ff72 	bl	800cfc4 <_strtoul_l.constprop.0>
 800d0e0:	bd10      	pop	{r4, pc}
 800d0e2:	46c0      	nop			; (mov r8, r8)
 800d0e4:	200006d0 	.word	0x200006d0

0800d0e8 <std>:
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	0004      	movs	r4, r0
 800d0ee:	6003      	str	r3, [r0, #0]
 800d0f0:	6043      	str	r3, [r0, #4]
 800d0f2:	6083      	str	r3, [r0, #8]
 800d0f4:	8181      	strh	r1, [r0, #12]
 800d0f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d0f8:	81c2      	strh	r2, [r0, #14]
 800d0fa:	6103      	str	r3, [r0, #16]
 800d0fc:	6143      	str	r3, [r0, #20]
 800d0fe:	6183      	str	r3, [r0, #24]
 800d100:	0019      	movs	r1, r3
 800d102:	2208      	movs	r2, #8
 800d104:	305c      	adds	r0, #92	; 0x5c
 800d106:	f000 f97d 	bl	800d404 <memset>
 800d10a:	4b0b      	ldr	r3, [pc, #44]	; (800d138 <std+0x50>)
 800d10c:	61e4      	str	r4, [r4, #28]
 800d10e:	6223      	str	r3, [r4, #32]
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <std+0x54>)
 800d112:	6263      	str	r3, [r4, #36]	; 0x24
 800d114:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <std+0x58>)
 800d116:	62a3      	str	r3, [r4, #40]	; 0x28
 800d118:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <std+0x5c>)
 800d11a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <std+0x60>)
 800d11e:	429c      	cmp	r4, r3
 800d120:	d005      	beq.n	800d12e <std+0x46>
 800d122:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <std+0x64>)
 800d124:	429c      	cmp	r4, r3
 800d126:	d002      	beq.n	800d12e <std+0x46>
 800d128:	4b09      	ldr	r3, [pc, #36]	; (800d150 <std+0x68>)
 800d12a:	429c      	cmp	r4, r3
 800d12c:	d103      	bne.n	800d136 <std+0x4e>
 800d12e:	0020      	movs	r0, r4
 800d130:	3058      	adds	r0, #88	; 0x58
 800d132:	f000 fa85 	bl	800d640 <__retarget_lock_init_recursive>
 800d136:	bd10      	pop	{r4, pc}
 800d138:	0800d369 	.word	0x0800d369
 800d13c:	0800d395 	.word	0x0800d395
 800d140:	0800d3cd 	.word	0x0800d3cd
 800d144:	0800d3f9 	.word	0x0800d3f9
 800d148:	20000c7c 	.word	0x20000c7c
 800d14c:	20000ce4 	.word	0x20000ce4
 800d150:	20000d4c 	.word	0x20000d4c

0800d154 <stdio_exit_handler>:
 800d154:	b510      	push	{r4, lr}
 800d156:	4a03      	ldr	r2, [pc, #12]	; (800d164 <stdio_exit_handler+0x10>)
 800d158:	4903      	ldr	r1, [pc, #12]	; (800d168 <stdio_exit_handler+0x14>)
 800d15a:	4804      	ldr	r0, [pc, #16]	; (800d16c <stdio_exit_handler+0x18>)
 800d15c:	f000 f86c 	bl	800d238 <_fwalk_sglue>
 800d160:	bd10      	pop	{r4, pc}
 800d162:	46c0      	nop			; (mov r8, r8)
 800d164:	20000438 	.word	0x20000438
 800d168:	08011141 	.word	0x08011141
 800d16c:	200005b0 	.word	0x200005b0

0800d170 <cleanup_stdio>:
 800d170:	6841      	ldr	r1, [r0, #4]
 800d172:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <cleanup_stdio+0x30>)
 800d174:	b510      	push	{r4, lr}
 800d176:	0004      	movs	r4, r0
 800d178:	4299      	cmp	r1, r3
 800d17a:	d001      	beq.n	800d180 <cleanup_stdio+0x10>
 800d17c:	f003 ffe0 	bl	8011140 <_fclose_r>
 800d180:	68a1      	ldr	r1, [r4, #8]
 800d182:	4b08      	ldr	r3, [pc, #32]	; (800d1a4 <cleanup_stdio+0x34>)
 800d184:	4299      	cmp	r1, r3
 800d186:	d002      	beq.n	800d18e <cleanup_stdio+0x1e>
 800d188:	0020      	movs	r0, r4
 800d18a:	f003 ffd9 	bl	8011140 <_fclose_r>
 800d18e:	68e1      	ldr	r1, [r4, #12]
 800d190:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <cleanup_stdio+0x38>)
 800d192:	4299      	cmp	r1, r3
 800d194:	d002      	beq.n	800d19c <cleanup_stdio+0x2c>
 800d196:	0020      	movs	r0, r4
 800d198:	f003 ffd2 	bl	8011140 <_fclose_r>
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	46c0      	nop			; (mov r8, r8)
 800d1a0:	20000c7c 	.word	0x20000c7c
 800d1a4:	20000ce4 	.word	0x20000ce4
 800d1a8:	20000d4c 	.word	0x20000d4c

0800d1ac <global_stdio_init.part.0>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <global_stdio_init.part.0+0x28>)
 800d1b0:	4a09      	ldr	r2, [pc, #36]	; (800d1d8 <global_stdio_init.part.0+0x2c>)
 800d1b2:	2104      	movs	r1, #4
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	4809      	ldr	r0, [pc, #36]	; (800d1dc <global_stdio_init.part.0+0x30>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f7ff ff95 	bl	800d0e8 <std>
 800d1be:	2201      	movs	r2, #1
 800d1c0:	2109      	movs	r1, #9
 800d1c2:	4807      	ldr	r0, [pc, #28]	; (800d1e0 <global_stdio_init.part.0+0x34>)
 800d1c4:	f7ff ff90 	bl	800d0e8 <std>
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	2112      	movs	r1, #18
 800d1cc:	4805      	ldr	r0, [pc, #20]	; (800d1e4 <global_stdio_init.part.0+0x38>)
 800d1ce:	f7ff ff8b 	bl	800d0e8 <std>
 800d1d2:	bd10      	pop	{r4, pc}
 800d1d4:	20000db4 	.word	0x20000db4
 800d1d8:	0800d155 	.word	0x0800d155
 800d1dc:	20000c7c 	.word	0x20000c7c
 800d1e0:	20000ce4 	.word	0x20000ce4
 800d1e4:	20000d4c 	.word	0x20000d4c

0800d1e8 <__sfp_lock_acquire>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	4802      	ldr	r0, [pc, #8]	; (800d1f4 <__sfp_lock_acquire+0xc>)
 800d1ec:	f000 fa2a 	bl	800d644 <__retarget_lock_acquire_recursive>
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	20000dbe 	.word	0x20000dbe

0800d1f8 <__sfp_lock_release>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	4802      	ldr	r0, [pc, #8]	; (800d204 <__sfp_lock_release+0xc>)
 800d1fc:	f000 fa23 	bl	800d646 <__retarget_lock_release_recursive>
 800d200:	bd10      	pop	{r4, pc}
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	20000dbe 	.word	0x20000dbe

0800d208 <__sinit>:
 800d208:	b510      	push	{r4, lr}
 800d20a:	0004      	movs	r4, r0
 800d20c:	f7ff ffec 	bl	800d1e8 <__sfp_lock_acquire>
 800d210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <__sinit+0x14>
 800d216:	f7ff ffef 	bl	800d1f8 <__sfp_lock_release>
 800d21a:	bd10      	pop	{r4, pc}
 800d21c:	4b04      	ldr	r3, [pc, #16]	; (800d230 <__sinit+0x28>)
 800d21e:	6363      	str	r3, [r4, #52]	; 0x34
 800d220:	4b04      	ldr	r3, [pc, #16]	; (800d234 <__sinit+0x2c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1f6      	bne.n	800d216 <__sinit+0xe>
 800d228:	f7ff ffc0 	bl	800d1ac <global_stdio_init.part.0>
 800d22c:	e7f3      	b.n	800d216 <__sinit+0xe>
 800d22e:	46c0      	nop			; (mov r8, r8)
 800d230:	0800d171 	.word	0x0800d171
 800d234:	20000db4 	.word	0x20000db4

0800d238 <_fwalk_sglue>:
 800d238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d23a:	0014      	movs	r4, r2
 800d23c:	2600      	movs	r6, #0
 800d23e:	9000      	str	r0, [sp, #0]
 800d240:	9101      	str	r1, [sp, #4]
 800d242:	68a5      	ldr	r5, [r4, #8]
 800d244:	6867      	ldr	r7, [r4, #4]
 800d246:	3f01      	subs	r7, #1
 800d248:	d504      	bpl.n	800d254 <_fwalk_sglue+0x1c>
 800d24a:	6824      	ldr	r4, [r4, #0]
 800d24c:	2c00      	cmp	r4, #0
 800d24e:	d1f8      	bne.n	800d242 <_fwalk_sglue+0xa>
 800d250:	0030      	movs	r0, r6
 800d252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d254:	89ab      	ldrh	r3, [r5, #12]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d908      	bls.n	800d26c <_fwalk_sglue+0x34>
 800d25a:	220e      	movs	r2, #14
 800d25c:	5eab      	ldrsh	r3, [r5, r2]
 800d25e:	3301      	adds	r3, #1
 800d260:	d004      	beq.n	800d26c <_fwalk_sglue+0x34>
 800d262:	0029      	movs	r1, r5
 800d264:	9800      	ldr	r0, [sp, #0]
 800d266:	9b01      	ldr	r3, [sp, #4]
 800d268:	4798      	blx	r3
 800d26a:	4306      	orrs	r6, r0
 800d26c:	3568      	adds	r5, #104	; 0x68
 800d26e:	e7ea      	b.n	800d246 <_fwalk_sglue+0xe>

0800d270 <snprintf>:
 800d270:	b40c      	push	{r2, r3}
 800d272:	b530      	push	{r4, r5, lr}
 800d274:	4b17      	ldr	r3, [pc, #92]	; (800d2d4 <snprintf+0x64>)
 800d276:	000c      	movs	r4, r1
 800d278:	681d      	ldr	r5, [r3, #0]
 800d27a:	b09d      	sub	sp, #116	; 0x74
 800d27c:	2900      	cmp	r1, #0
 800d27e:	da08      	bge.n	800d292 <snprintf+0x22>
 800d280:	238b      	movs	r3, #139	; 0x8b
 800d282:	2001      	movs	r0, #1
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	4240      	negs	r0, r0
 800d288:	b01d      	add	sp, #116	; 0x74
 800d28a:	bc30      	pop	{r4, r5}
 800d28c:	bc08      	pop	{r3}
 800d28e:	b002      	add	sp, #8
 800d290:	4718      	bx	r3
 800d292:	2382      	movs	r3, #130	; 0x82
 800d294:	466a      	mov	r2, sp
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	8293      	strh	r3, [r2, #20]
 800d29a:	2300      	movs	r3, #0
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	9006      	str	r0, [sp, #24]
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	d000      	beq.n	800d2a6 <snprintf+0x36>
 800d2a4:	1e4b      	subs	r3, r1, #1
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	9307      	str	r3, [sp, #28]
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	466a      	mov	r2, sp
 800d2ae:	425b      	negs	r3, r3
 800d2b0:	82d3      	strh	r3, [r2, #22]
 800d2b2:	0028      	movs	r0, r5
 800d2b4:	ab21      	add	r3, sp, #132	; 0x84
 800d2b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d2b8:	a902      	add	r1, sp, #8
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	f001 fae2 	bl	800e884 <_svfprintf_r>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	da01      	bge.n	800d2c8 <snprintf+0x58>
 800d2c4:	238b      	movs	r3, #139	; 0x8b
 800d2c6:	602b      	str	r3, [r5, #0]
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	d0dd      	beq.n	800d288 <snprintf+0x18>
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	701a      	strb	r2, [r3, #0]
 800d2d2:	e7d9      	b.n	800d288 <snprintf+0x18>
 800d2d4:	200006d0 	.word	0x200006d0

0800d2d8 <sprintf>:
 800d2d8:	b40e      	push	{r1, r2, r3}
 800d2da:	b500      	push	{lr}
 800d2dc:	490b      	ldr	r1, [pc, #44]	; (800d30c <sprintf+0x34>)
 800d2de:	b09c      	sub	sp, #112	; 0x70
 800d2e0:	ab1d      	add	r3, sp, #116	; 0x74
 800d2e2:	9002      	str	r0, [sp, #8]
 800d2e4:	9006      	str	r0, [sp, #24]
 800d2e6:	9107      	str	r1, [sp, #28]
 800d2e8:	9104      	str	r1, [sp, #16]
 800d2ea:	4809      	ldr	r0, [pc, #36]	; (800d310 <sprintf+0x38>)
 800d2ec:	4909      	ldr	r1, [pc, #36]	; (800d314 <sprintf+0x3c>)
 800d2ee:	cb04      	ldmia	r3!, {r2}
 800d2f0:	9105      	str	r1, [sp, #20]
 800d2f2:	6800      	ldr	r0, [r0, #0]
 800d2f4:	a902      	add	r1, sp, #8
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	f001 fac4 	bl	800e884 <_svfprintf_r>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	9b02      	ldr	r3, [sp, #8]
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	b01c      	add	sp, #112	; 0x70
 800d304:	bc08      	pop	{r3}
 800d306:	b003      	add	sp, #12
 800d308:	4718      	bx	r3
 800d30a:	46c0      	nop			; (mov r8, r8)
 800d30c:	7fffffff 	.word	0x7fffffff
 800d310:	200006d0 	.word	0x200006d0
 800d314:	ffff0208 	.word	0xffff0208

0800d318 <sscanf>:
 800d318:	b40e      	push	{r1, r2, r3}
 800d31a:	b530      	push	{r4, r5, lr}
 800d31c:	2381      	movs	r3, #129	; 0x81
 800d31e:	b09c      	sub	sp, #112	; 0x70
 800d320:	466a      	mov	r2, sp
 800d322:	ac1f      	add	r4, sp, #124	; 0x7c
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	cc20      	ldmia	r4!, {r5}
 800d328:	8293      	strh	r3, [r2, #20]
 800d32a:	9002      	str	r0, [sp, #8]
 800d32c:	9006      	str	r0, [sp, #24]
 800d32e:	f7f2 fee9 	bl	8000104 <strlen>
 800d332:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <sscanf+0x48>)
 800d334:	466a      	mov	r2, sp
 800d336:	930a      	str	r3, [sp, #40]	; 0x28
 800d338:	2300      	movs	r3, #0
 800d33a:	9003      	str	r0, [sp, #12]
 800d33c:	9007      	str	r0, [sp, #28]
 800d33e:	4809      	ldr	r0, [pc, #36]	; (800d364 <sscanf+0x4c>)
 800d340:	930e      	str	r3, [sp, #56]	; 0x38
 800d342:	9313      	str	r3, [sp, #76]	; 0x4c
 800d344:	3b01      	subs	r3, #1
 800d346:	82d3      	strh	r3, [r2, #22]
 800d348:	a902      	add	r1, sp, #8
 800d34a:	0023      	movs	r3, r4
 800d34c:	002a      	movs	r2, r5
 800d34e:	6800      	ldr	r0, [r0, #0]
 800d350:	9401      	str	r4, [sp, #4]
 800d352:	f002 fcd9 	bl	800fd08 <__ssvfscanf_r>
 800d356:	b01c      	add	sp, #112	; 0x70
 800d358:	bc30      	pop	{r4, r5}
 800d35a:	bc08      	pop	{r3}
 800d35c:	b003      	add	sp, #12
 800d35e:	4718      	bx	r3
 800d360:	0800d391 	.word	0x0800d391
 800d364:	200006d0 	.word	0x200006d0

0800d368 <__sread>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	000c      	movs	r4, r1
 800d36c:	250e      	movs	r5, #14
 800d36e:	5f49      	ldrsh	r1, [r1, r5]
 800d370:	f000 f902 	bl	800d578 <_read_r>
 800d374:	2800      	cmp	r0, #0
 800d376:	db03      	blt.n	800d380 <__sread+0x18>
 800d378:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d37a:	181b      	adds	r3, r3, r0
 800d37c:	6523      	str	r3, [r4, #80]	; 0x50
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	4a02      	ldr	r2, [pc, #8]	; (800d38c <__sread+0x24>)
 800d384:	4013      	ands	r3, r2
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	e7f9      	b.n	800d37e <__sread+0x16>
 800d38a:	46c0      	nop			; (mov r8, r8)
 800d38c:	ffffefff 	.word	0xffffefff

0800d390 <__seofread>:
 800d390:	2000      	movs	r0, #0
 800d392:	4770      	bx	lr

0800d394 <__swrite>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	001f      	movs	r7, r3
 800d398:	898b      	ldrh	r3, [r1, #12]
 800d39a:	0005      	movs	r5, r0
 800d39c:	000c      	movs	r4, r1
 800d39e:	0016      	movs	r6, r2
 800d3a0:	05db      	lsls	r3, r3, #23
 800d3a2:	d505      	bpl.n	800d3b0 <__swrite+0x1c>
 800d3a4:	230e      	movs	r3, #14
 800d3a6:	5ec9      	ldrsh	r1, [r1, r3]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	f000 f8d0 	bl	800d550 <_lseek_r>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	4a05      	ldr	r2, [pc, #20]	; (800d3c8 <__swrite+0x34>)
 800d3b4:	0028      	movs	r0, r5
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	0032      	movs	r2, r6
 800d3bc:	230e      	movs	r3, #14
 800d3be:	5ee1      	ldrsh	r1, [r4, r3]
 800d3c0:	003b      	movs	r3, r7
 800d3c2:	f000 f8ff 	bl	800d5c4 <_write_r>
 800d3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c8:	ffffefff 	.word	0xffffefff

0800d3cc <__sseek>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	000c      	movs	r4, r1
 800d3d0:	250e      	movs	r5, #14
 800d3d2:	5f49      	ldrsh	r1, [r1, r5]
 800d3d4:	f000 f8bc 	bl	800d550 <_lseek_r>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	1c42      	adds	r2, r0, #1
 800d3dc:	d103      	bne.n	800d3e6 <__sseek+0x1a>
 800d3de:	4a05      	ldr	r2, [pc, #20]	; (800d3f4 <__sseek+0x28>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
 800d3e6:	2280      	movs	r2, #128	; 0x80
 800d3e8:	0152      	lsls	r2, r2, #5
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	6520      	str	r0, [r4, #80]	; 0x50
 800d3f0:	e7f8      	b.n	800d3e4 <__sseek+0x18>
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	ffffefff 	.word	0xffffefff

0800d3f8 <__sclose>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	230e      	movs	r3, #14
 800d3fc:	5ec9      	ldrsh	r1, [r1, r3]
 800d3fe:	f000 f895 	bl	800d52c <_close_r>
 800d402:	bd10      	pop	{r4, pc}

0800d404 <memset>:
 800d404:	0003      	movs	r3, r0
 800d406:	1882      	adds	r2, r0, r2
 800d408:	4293      	cmp	r3, r2
 800d40a:	d100      	bne.n	800d40e <memset+0xa>
 800d40c:	4770      	bx	lr
 800d40e:	7019      	strb	r1, [r3, #0]
 800d410:	3301      	adds	r3, #1
 800d412:	e7f9      	b.n	800d408 <memset+0x4>

0800d414 <strchr>:
 800d414:	b2c9      	uxtb	r1, r1
 800d416:	7803      	ldrb	r3, [r0, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <strchr+0x12>
 800d41c:	428b      	cmp	r3, r1
 800d41e:	d100      	bne.n	800d422 <strchr+0xe>
 800d420:	4770      	bx	lr
 800d422:	3001      	adds	r0, #1
 800d424:	e7f7      	b.n	800d416 <strchr+0x2>
 800d426:	424b      	negs	r3, r1
 800d428:	4159      	adcs	r1, r3
 800d42a:	4249      	negs	r1, r1
 800d42c:	4008      	ands	r0, r1
 800d42e:	e7f7      	b.n	800d420 <strchr+0xc>

0800d430 <strncmp>:
 800d430:	b530      	push	{r4, r5, lr}
 800d432:	0005      	movs	r5, r0
 800d434:	1e10      	subs	r0, r2, #0
 800d436:	d00b      	beq.n	800d450 <strncmp+0x20>
 800d438:	2400      	movs	r4, #0
 800d43a:	3a01      	subs	r2, #1
 800d43c:	5d2b      	ldrb	r3, [r5, r4]
 800d43e:	5d08      	ldrb	r0, [r1, r4]
 800d440:	4283      	cmp	r3, r0
 800d442:	d104      	bne.n	800d44e <strncmp+0x1e>
 800d444:	42a2      	cmp	r2, r4
 800d446:	d002      	beq.n	800d44e <strncmp+0x1e>
 800d448:	3401      	adds	r4, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1f6      	bne.n	800d43c <strncmp+0xc>
 800d44e:	1a18      	subs	r0, r3, r0
 800d450:	bd30      	pop	{r4, r5, pc}

0800d452 <strncpy>:
 800d452:	0003      	movs	r3, r0
 800d454:	b530      	push	{r4, r5, lr}
 800d456:	001d      	movs	r5, r3
 800d458:	2a00      	cmp	r2, #0
 800d45a:	d006      	beq.n	800d46a <strncpy+0x18>
 800d45c:	780c      	ldrb	r4, [r1, #0]
 800d45e:	3a01      	subs	r2, #1
 800d460:	3301      	adds	r3, #1
 800d462:	702c      	strb	r4, [r5, #0]
 800d464:	3101      	adds	r1, #1
 800d466:	2c00      	cmp	r4, #0
 800d468:	d1f5      	bne.n	800d456 <strncpy+0x4>
 800d46a:	2100      	movs	r1, #0
 800d46c:	189a      	adds	r2, r3, r2
 800d46e:	4293      	cmp	r3, r2
 800d470:	d100      	bne.n	800d474 <strncpy+0x22>
 800d472:	bd30      	pop	{r4, r5, pc}
 800d474:	7019      	strb	r1, [r3, #0]
 800d476:	3301      	adds	r3, #1
 800d478:	e7f9      	b.n	800d46e <strncpy+0x1c>
	...

0800d47c <strtok>:
 800d47c:	4b03      	ldr	r3, [pc, #12]	; (800d48c <strtok+0x10>)
 800d47e:	b510      	push	{r4, lr}
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	2301      	movs	r3, #1
 800d484:	3250      	adds	r2, #80	; 0x50
 800d486:	f000 f803 	bl	800d490 <__strtok_r>
 800d48a:	bd10      	pop	{r4, pc}
 800d48c:	200006d0 	.word	0x200006d0

0800d490 <__strtok_r>:
 800d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d492:	2800      	cmp	r0, #0
 800d494:	d102      	bne.n	800d49c <__strtok_r+0xc>
 800d496:	6810      	ldr	r0, [r2, #0]
 800d498:	2800      	cmp	r0, #0
 800d49a:	d013      	beq.n	800d4c4 <__strtok_r+0x34>
 800d49c:	0004      	movs	r4, r0
 800d49e:	0020      	movs	r0, r4
 800d4a0:	000e      	movs	r6, r1
 800d4a2:	7805      	ldrb	r5, [r0, #0]
 800d4a4:	3401      	adds	r4, #1
 800d4a6:	7837      	ldrb	r7, [r6, #0]
 800d4a8:	2f00      	cmp	r7, #0
 800d4aa:	d104      	bne.n	800d4b6 <__strtok_r+0x26>
 800d4ac:	2d00      	cmp	r5, #0
 800d4ae:	d10f      	bne.n	800d4d0 <__strtok_r+0x40>
 800d4b0:	0028      	movs	r0, r5
 800d4b2:	6015      	str	r5, [r2, #0]
 800d4b4:	e006      	b.n	800d4c4 <__strtok_r+0x34>
 800d4b6:	3601      	adds	r6, #1
 800d4b8:	42bd      	cmp	r5, r7
 800d4ba:	d1f4      	bne.n	800d4a6 <__strtok_r+0x16>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1ee      	bne.n	800d49e <__strtok_r+0xe>
 800d4c0:	6014      	str	r4, [r2, #0]
 800d4c2:	7003      	strb	r3, [r0, #0]
 800d4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c6:	002f      	movs	r7, r5
 800d4c8:	e00f      	b.n	800d4ea <__strtok_r+0x5a>
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	2e00      	cmp	r6, #0
 800d4ce:	d104      	bne.n	800d4da <__strtok_r+0x4a>
 800d4d0:	0023      	movs	r3, r4
 800d4d2:	3401      	adds	r4, #1
 800d4d4:	781d      	ldrb	r5, [r3, #0]
 800d4d6:	0027      	movs	r7, r4
 800d4d8:	000b      	movs	r3, r1
 800d4da:	781e      	ldrb	r6, [r3, #0]
 800d4dc:	42b5      	cmp	r5, r6
 800d4de:	d1f4      	bne.n	800d4ca <__strtok_r+0x3a>
 800d4e0:	2d00      	cmp	r5, #0
 800d4e2:	d0f0      	beq.n	800d4c6 <__strtok_r+0x36>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	3c01      	subs	r4, #1
 800d4e8:	7023      	strb	r3, [r4, #0]
 800d4ea:	6017      	str	r7, [r2, #0]
 800d4ec:	e7ea      	b.n	800d4c4 <__strtok_r+0x34>

0800d4ee <strstr>:
 800d4ee:	780a      	ldrb	r2, [r1, #0]
 800d4f0:	b530      	push	{r4, r5, lr}
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	d10c      	bne.n	800d510 <strstr+0x22>
 800d4f6:	bd30      	pop	{r4, r5, pc}
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d108      	bne.n	800d50e <strstr+0x20>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	5ccc      	ldrb	r4, [r1, r3]
 800d500:	2c00      	cmp	r4, #0
 800d502:	d0f8      	beq.n	800d4f6 <strstr+0x8>
 800d504:	5cc5      	ldrb	r5, [r0, r3]
 800d506:	42a5      	cmp	r5, r4
 800d508:	d101      	bne.n	800d50e <strstr+0x20>
 800d50a:	3301      	adds	r3, #1
 800d50c:	e7f7      	b.n	800d4fe <strstr+0x10>
 800d50e:	3001      	adds	r0, #1
 800d510:	7803      	ldrb	r3, [r0, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1f0      	bne.n	800d4f8 <strstr+0xa>
 800d516:	0018      	movs	r0, r3
 800d518:	e7ed      	b.n	800d4f6 <strstr+0x8>
	...

0800d51c <__locale_mb_cur_max>:
 800d51c:	2294      	movs	r2, #148	; 0x94
 800d51e:	4b02      	ldr	r3, [pc, #8]	; (800d528 <__locale_mb_cur_max+0xc>)
 800d520:	0052      	lsls	r2, r2, #1
 800d522:	5c98      	ldrb	r0, [r3, r2]
 800d524:	4770      	bx	lr
 800d526:	46c0      	nop			; (mov r8, r8)
 800d528:	20000444 	.word	0x20000444

0800d52c <_close_r>:
 800d52c:	2300      	movs	r3, #0
 800d52e:	b570      	push	{r4, r5, r6, lr}
 800d530:	4d06      	ldr	r5, [pc, #24]	; (800d54c <_close_r+0x20>)
 800d532:	0004      	movs	r4, r0
 800d534:	0008      	movs	r0, r1
 800d536:	602b      	str	r3, [r5, #0]
 800d538:	f7f6 fed9 	bl	80042ee <_close>
 800d53c:	1c43      	adds	r3, r0, #1
 800d53e:	d103      	bne.n	800d548 <_close_r+0x1c>
 800d540:	682b      	ldr	r3, [r5, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d000      	beq.n	800d548 <_close_r+0x1c>
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	bd70      	pop	{r4, r5, r6, pc}
 800d54a:	46c0      	nop			; (mov r8, r8)
 800d54c:	20000db8 	.word	0x20000db8

0800d550 <_lseek_r>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	0004      	movs	r4, r0
 800d554:	0008      	movs	r0, r1
 800d556:	0011      	movs	r1, r2
 800d558:	001a      	movs	r2, r3
 800d55a:	2300      	movs	r3, #0
 800d55c:	4d05      	ldr	r5, [pc, #20]	; (800d574 <_lseek_r+0x24>)
 800d55e:	602b      	str	r3, [r5, #0]
 800d560:	f7f6 fee6 	bl	8004330 <_lseek>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d103      	bne.n	800d570 <_lseek_r+0x20>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d000      	beq.n	800d570 <_lseek_r+0x20>
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	20000db8 	.word	0x20000db8

0800d578 <_read_r>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	0004      	movs	r4, r0
 800d57c:	0008      	movs	r0, r1
 800d57e:	0011      	movs	r1, r2
 800d580:	001a      	movs	r2, r3
 800d582:	2300      	movs	r3, #0
 800d584:	4d05      	ldr	r5, [pc, #20]	; (800d59c <_read_r+0x24>)
 800d586:	602b      	str	r3, [r5, #0]
 800d588:	f7f6 fe78 	bl	800427c <_read>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d103      	bne.n	800d598 <_read_r+0x20>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d000      	beq.n	800d598 <_read_r+0x20>
 800d596:	6023      	str	r3, [r4, #0]
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	46c0      	nop			; (mov r8, r8)
 800d59c:	20000db8 	.word	0x20000db8

0800d5a0 <_sbrk_r>:
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	b570      	push	{r4, r5, r6, lr}
 800d5a4:	4d06      	ldr	r5, [pc, #24]	; (800d5c0 <_sbrk_r+0x20>)
 800d5a6:	0004      	movs	r4, r0
 800d5a8:	0008      	movs	r0, r1
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	f7f6 fecc 	bl	8004348 <_sbrk>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d103      	bne.n	800d5bc <_sbrk_r+0x1c>
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d000      	beq.n	800d5bc <_sbrk_r+0x1c>
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
 800d5be:	46c0      	nop			; (mov r8, r8)
 800d5c0:	20000db8 	.word	0x20000db8

0800d5c4 <_write_r>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	0004      	movs	r4, r0
 800d5c8:	0008      	movs	r0, r1
 800d5ca:	0011      	movs	r1, r2
 800d5cc:	001a      	movs	r2, r3
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	4d05      	ldr	r5, [pc, #20]	; (800d5e8 <_write_r+0x24>)
 800d5d2:	602b      	str	r3, [r5, #0]
 800d5d4:	f7f6 fe6f 	bl	80042b6 <_write>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d103      	bne.n	800d5e4 <_write_r+0x20>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d000      	beq.n	800d5e4 <_write_r+0x20>
 800d5e2:	6023      	str	r3, [r4, #0]
 800d5e4:	bd70      	pop	{r4, r5, r6, pc}
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	20000db8 	.word	0x20000db8

0800d5ec <__errno>:
 800d5ec:	4b01      	ldr	r3, [pc, #4]	; (800d5f4 <__errno+0x8>)
 800d5ee:	6818      	ldr	r0, [r3, #0]
 800d5f0:	4770      	bx	lr
 800d5f2:	46c0      	nop			; (mov r8, r8)
 800d5f4:	200006d0 	.word	0x200006d0

0800d5f8 <__libc_init_array>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	2600      	movs	r6, #0
 800d5fc:	4c0c      	ldr	r4, [pc, #48]	; (800d630 <__libc_init_array+0x38>)
 800d5fe:	4d0d      	ldr	r5, [pc, #52]	; (800d634 <__libc_init_array+0x3c>)
 800d600:	1b64      	subs	r4, r4, r5
 800d602:	10a4      	asrs	r4, r4, #2
 800d604:	42a6      	cmp	r6, r4
 800d606:	d109      	bne.n	800d61c <__libc_init_array+0x24>
 800d608:	2600      	movs	r6, #0
 800d60a:	f006 fc3f 	bl	8013e8c <_init>
 800d60e:	4c0a      	ldr	r4, [pc, #40]	; (800d638 <__libc_init_array+0x40>)
 800d610:	4d0a      	ldr	r5, [pc, #40]	; (800d63c <__libc_init_array+0x44>)
 800d612:	1b64      	subs	r4, r4, r5
 800d614:	10a4      	asrs	r4, r4, #2
 800d616:	42a6      	cmp	r6, r4
 800d618:	d105      	bne.n	800d626 <__libc_init_array+0x2e>
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	00b3      	lsls	r3, r6, #2
 800d61e:	58eb      	ldr	r3, [r5, r3]
 800d620:	4798      	blx	r3
 800d622:	3601      	adds	r6, #1
 800d624:	e7ee      	b.n	800d604 <__libc_init_array+0xc>
 800d626:	00b3      	lsls	r3, r6, #2
 800d628:	58eb      	ldr	r3, [r5, r3]
 800d62a:	4798      	blx	r3
 800d62c:	3601      	adds	r6, #1
 800d62e:	e7f2      	b.n	800d616 <__libc_init_array+0x1e>
 800d630:	08015fa4 	.word	0x08015fa4
 800d634:	08015fa4 	.word	0x08015fa4
 800d638:	08015fac 	.word	0x08015fac
 800d63c:	08015fa4 	.word	0x08015fa4

0800d640 <__retarget_lock_init_recursive>:
 800d640:	4770      	bx	lr

0800d642 <__retarget_lock_close_recursive>:
 800d642:	4770      	bx	lr

0800d644 <__retarget_lock_acquire_recursive>:
 800d644:	4770      	bx	lr

0800d646 <__retarget_lock_release_recursive>:
 800d646:	4770      	bx	lr

0800d648 <sysconf>:
 800d648:	2380      	movs	r3, #128	; 0x80
 800d64a:	b510      	push	{r4, lr}
 800d64c:	2808      	cmp	r0, #8
 800d64e:	d004      	beq.n	800d65a <sysconf+0x12>
 800d650:	f7ff ffcc 	bl	800d5ec <__errno>
 800d654:	2316      	movs	r3, #22
 800d656:	6003      	str	r3, [r0, #0]
 800d658:	3b17      	subs	r3, #23
 800d65a:	0018      	movs	r0, r3
 800d65c:	bd10      	pop	{r4, pc}

0800d65e <memcpy>:
 800d65e:	2300      	movs	r3, #0
 800d660:	b510      	push	{r4, lr}
 800d662:	429a      	cmp	r2, r3
 800d664:	d100      	bne.n	800d668 <memcpy+0xa>
 800d666:	bd10      	pop	{r4, pc}
 800d668:	5ccc      	ldrb	r4, [r1, r3]
 800d66a:	54c4      	strb	r4, [r0, r3]
 800d66c:	3301      	adds	r3, #1
 800d66e:	e7f8      	b.n	800d662 <memcpy+0x4>

0800d670 <nan>:
 800d670:	2000      	movs	r0, #0
 800d672:	4901      	ldr	r1, [pc, #4]	; (800d678 <nan+0x8>)
 800d674:	4770      	bx	lr
 800d676:	46c0      	nop			; (mov r8, r8)
 800d678:	7ff80000 	.word	0x7ff80000

0800d67c <nanf>:
 800d67c:	4800      	ldr	r0, [pc, #0]	; (800d680 <nanf+0x4>)
 800d67e:	4770      	bx	lr
 800d680:	7fc00000 	.word	0x7fc00000

0800d684 <register_fini>:
 800d684:	4b03      	ldr	r3, [pc, #12]	; (800d694 <register_fini+0x10>)
 800d686:	b510      	push	{r4, lr}
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <register_fini+0xe>
 800d68c:	4802      	ldr	r0, [pc, #8]	; (800d698 <register_fini+0x14>)
 800d68e:	f000 f805 	bl	800d69c <atexit>
 800d692:	bd10      	pop	{r4, pc}
 800d694:	00000000 	.word	0x00000000
 800d698:	080113f9 	.word	0x080113f9

0800d69c <atexit>:
 800d69c:	2300      	movs	r3, #0
 800d69e:	b510      	push	{r4, lr}
 800d6a0:	0001      	movs	r1, r0
 800d6a2:	001a      	movs	r2, r3
 800d6a4:	0018      	movs	r0, r3
 800d6a6:	f003 fef9 	bl	801149c <__register_exitproc>
 800d6aa:	bd10      	pop	{r4, pc}

0800d6ac <_malloc_trim_r>:
 800d6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ae:	0004      	movs	r4, r0
 800d6b0:	2008      	movs	r0, #8
 800d6b2:	000d      	movs	r5, r1
 800d6b4:	f7ff ffc8 	bl	800d648 <sysconf>
 800d6b8:	0006      	movs	r6, r0
 800d6ba:	0020      	movs	r0, r4
 800d6bc:	f7fe fda4 	bl	800c208 <__malloc_lock>
 800d6c0:	2203      	movs	r2, #3
 800d6c2:	4f21      	ldr	r7, [pc, #132]	; (800d748 <_malloc_trim_r+0x9c>)
 800d6c4:	0031      	movs	r1, r6
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	4393      	bics	r3, r2
 800d6cc:	1b58      	subs	r0, r3, r5
 800d6ce:	3811      	subs	r0, #17
 800d6d0:	1980      	adds	r0, r0, r6
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	f7f2 fd32 	bl	800013c <__udivsi3>
 800d6d8:	1e45      	subs	r5, r0, #1
 800d6da:	4375      	muls	r5, r6
 800d6dc:	42ae      	cmp	r6, r5
 800d6de:	dd04      	ble.n	800d6ea <_malloc_trim_r+0x3e>
 800d6e0:	0020      	movs	r0, r4
 800d6e2:	f7fe fd99 	bl	800c218 <__malloc_unlock>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	0020      	movs	r0, r4
 800d6ee:	f7ff ff57 	bl	800d5a0 <_sbrk_r>
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	9a01      	ldr	r2, [sp, #4]
 800d6f6:	189b      	adds	r3, r3, r2
 800d6f8:	4298      	cmp	r0, r3
 800d6fa:	d1f1      	bne.n	800d6e0 <_malloc_trim_r+0x34>
 800d6fc:	0020      	movs	r0, r4
 800d6fe:	4269      	negs	r1, r5
 800d700:	f7ff ff4e 	bl	800d5a0 <_sbrk_r>
 800d704:	3001      	adds	r0, #1
 800d706:	d110      	bne.n	800d72a <_malloc_trim_r+0x7e>
 800d708:	2100      	movs	r1, #0
 800d70a:	0020      	movs	r0, r4
 800d70c:	f7ff ff48 	bl	800d5a0 <_sbrk_r>
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	1a81      	subs	r1, r0, r2
 800d714:	290f      	cmp	r1, #15
 800d716:	dde3      	ble.n	800d6e0 <_malloc_trim_r+0x34>
 800d718:	4d0c      	ldr	r5, [pc, #48]	; (800d74c <_malloc_trim_r+0xa0>)
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <_malloc_trim_r+0xa4>)
 800d71c:	682d      	ldr	r5, [r5, #0]
 800d71e:	1b40      	subs	r0, r0, r5
 800d720:	6018      	str	r0, [r3, #0]
 800d722:	2301      	movs	r3, #1
 800d724:	430b      	orrs	r3, r1
 800d726:	6053      	str	r3, [r2, #4]
 800d728:	e7da      	b.n	800d6e0 <_malloc_trim_r+0x34>
 800d72a:	2601      	movs	r6, #1
 800d72c:	9b01      	ldr	r3, [sp, #4]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	1b5b      	subs	r3, r3, r5
 800d732:	4333      	orrs	r3, r6
 800d734:	6053      	str	r3, [r2, #4]
 800d736:	4a06      	ldr	r2, [pc, #24]	; (800d750 <_malloc_trim_r+0xa4>)
 800d738:	0020      	movs	r0, r4
 800d73a:	6813      	ldr	r3, [r2, #0]
 800d73c:	1b5b      	subs	r3, r3, r5
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	f7fe fd6a 	bl	800c218 <__malloc_unlock>
 800d744:	0030      	movs	r0, r6
 800d746:	e7cf      	b.n	800d6e8 <_malloc_trim_r+0x3c>
 800d748:	20000028 	.word	0x20000028
 800d74c:	20000430 	.word	0x20000430
 800d750:	20000c48 	.word	0x20000c48

0800d754 <_free_r>:
 800d754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d756:	1e0d      	subs	r5, r1, #0
 800d758:	9001      	str	r0, [sp, #4]
 800d75a:	d02d      	beq.n	800d7b8 <_free_r+0x64>
 800d75c:	f7fe fd54 	bl	800c208 <__malloc_lock>
 800d760:	2301      	movs	r3, #1
 800d762:	0029      	movs	r1, r5
 800d764:	469c      	mov	ip, r3
 800d766:	3908      	subs	r1, #8
 800d768:	684f      	ldr	r7, [r1, #4]
 800d76a:	4662      	mov	r2, ip
 800d76c:	003b      	movs	r3, r7
 800d76e:	4664      	mov	r4, ip
 800d770:	4393      	bics	r3, r2
 800d772:	18c8      	adds	r0, r1, r3
 800d774:	6845      	ldr	r5, [r0, #4]
 800d776:	3202      	adds	r2, #2
 800d778:	4395      	bics	r5, r2
 800d77a:	4a4a      	ldr	r2, [pc, #296]	; (800d8a4 <_free_r+0x150>)
 800d77c:	4027      	ands	r7, r4
 800d77e:	6896      	ldr	r6, [r2, #8]
 800d780:	4286      	cmp	r6, r0
 800d782:	d11a      	bne.n	800d7ba <_free_r+0x66>
 800d784:	195b      	adds	r3, r3, r5
 800d786:	2f00      	cmp	r7, #0
 800d788:	d106      	bne.n	800d798 <_free_r+0x44>
 800d78a:	6808      	ldr	r0, [r1, #0]
 800d78c:	1a09      	subs	r1, r1, r0
 800d78e:	688d      	ldr	r5, [r1, #8]
 800d790:	181b      	adds	r3, r3, r0
 800d792:	68c8      	ldr	r0, [r1, #12]
 800d794:	60e8      	str	r0, [r5, #12]
 800d796:	6085      	str	r5, [r0, #8]
 800d798:	2001      	movs	r0, #1
 800d79a:	4318      	orrs	r0, r3
 800d79c:	6048      	str	r0, [r1, #4]
 800d79e:	6091      	str	r1, [r2, #8]
 800d7a0:	4a41      	ldr	r2, [pc, #260]	; (800d8a8 <_free_r+0x154>)
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d804      	bhi.n	800d7b2 <_free_r+0x5e>
 800d7a8:	4b40      	ldr	r3, [pc, #256]	; (800d8ac <_free_r+0x158>)
 800d7aa:	9801      	ldr	r0, [sp, #4]
 800d7ac:	6819      	ldr	r1, [r3, #0]
 800d7ae:	f7ff ff7d 	bl	800d6ac <_malloc_trim_r>
 800d7b2:	9801      	ldr	r0, [sp, #4]
 800d7b4:	f7fe fd30 	bl	800c218 <__malloc_unlock>
 800d7b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d7ba:	2600      	movs	r6, #0
 800d7bc:	6045      	str	r5, [r0, #4]
 800d7be:	42b7      	cmp	r7, r6
 800d7c0:	d109      	bne.n	800d7d6 <_free_r+0x82>
 800d7c2:	680f      	ldr	r7, [r1, #0]
 800d7c4:	4c3a      	ldr	r4, [pc, #232]	; (800d8b0 <_free_r+0x15c>)
 800d7c6:	1bc9      	subs	r1, r1, r7
 800d7c8:	19db      	adds	r3, r3, r7
 800d7ca:	688f      	ldr	r7, [r1, #8]
 800d7cc:	42a7      	cmp	r7, r4
 800d7ce:	d02c      	beq.n	800d82a <_free_r+0xd6>
 800d7d0:	68cc      	ldr	r4, [r1, #12]
 800d7d2:	60fc      	str	r4, [r7, #12]
 800d7d4:	60a7      	str	r7, [r4, #8]
 800d7d6:	1947      	adds	r7, r0, r5
 800d7d8:	687c      	ldr	r4, [r7, #4]
 800d7da:	2701      	movs	r7, #1
 800d7dc:	423c      	tst	r4, r7
 800d7de:	d10b      	bne.n	800d7f8 <_free_r+0xa4>
 800d7e0:	195b      	adds	r3, r3, r5
 800d7e2:	6885      	ldr	r5, [r0, #8]
 800d7e4:	2e00      	cmp	r6, #0
 800d7e6:	d122      	bne.n	800d82e <_free_r+0xda>
 800d7e8:	4c31      	ldr	r4, [pc, #196]	; (800d8b0 <_free_r+0x15c>)
 800d7ea:	42a5      	cmp	r5, r4
 800d7ec:	d11f      	bne.n	800d82e <_free_r+0xda>
 800d7ee:	003e      	movs	r6, r7
 800d7f0:	6151      	str	r1, [r2, #20]
 800d7f2:	6111      	str	r1, [r2, #16]
 800d7f4:	60cd      	str	r5, [r1, #12]
 800d7f6:	608d      	str	r5, [r1, #8]
 800d7f8:	2501      	movs	r5, #1
 800d7fa:	0028      	movs	r0, r5
 800d7fc:	4318      	orrs	r0, r3
 800d7fe:	6048      	str	r0, [r1, #4]
 800d800:	50cb      	str	r3, [r1, r3]
 800d802:	2e00      	cmp	r6, #0
 800d804:	d1d5      	bne.n	800d7b2 <_free_r+0x5e>
 800d806:	2080      	movs	r0, #128	; 0x80
 800d808:	0080      	lsls	r0, r0, #2
 800d80a:	4283      	cmp	r3, r0
 800d80c:	d213      	bcs.n	800d836 <_free_r+0xe2>
 800d80e:	08d8      	lsrs	r0, r3, #3
 800d810:	095b      	lsrs	r3, r3, #5
 800d812:	409d      	lsls	r5, r3
 800d814:	6853      	ldr	r3, [r2, #4]
 800d816:	431d      	orrs	r5, r3
 800d818:	00c3      	lsls	r3, r0, #3
 800d81a:	189b      	adds	r3, r3, r2
 800d81c:	6055      	str	r5, [r2, #4]
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	60cb      	str	r3, [r1, #12]
 800d822:	608a      	str	r2, [r1, #8]
 800d824:	6099      	str	r1, [r3, #8]
 800d826:	60d1      	str	r1, [r2, #12]
 800d828:	e7c3      	b.n	800d7b2 <_free_r+0x5e>
 800d82a:	4666      	mov	r6, ip
 800d82c:	e7d3      	b.n	800d7d6 <_free_r+0x82>
 800d82e:	68c0      	ldr	r0, [r0, #12]
 800d830:	60e8      	str	r0, [r5, #12]
 800d832:	6085      	str	r5, [r0, #8]
 800d834:	e7e0      	b.n	800d7f8 <_free_r+0xa4>
 800d836:	0a5d      	lsrs	r5, r3, #9
 800d838:	2d04      	cmp	r5, #4
 800d83a:	d812      	bhi.n	800d862 <_free_r+0x10e>
 800d83c:	0998      	lsrs	r0, r3, #6
 800d83e:	3038      	adds	r0, #56	; 0x38
 800d840:	00c6      	lsls	r6, r0, #3
 800d842:	18b6      	adds	r6, r6, r2
 800d844:	68b5      	ldr	r5, [r6, #8]
 800d846:	2703      	movs	r7, #3
 800d848:	42ae      	cmp	r6, r5
 800d84a:	d125      	bne.n	800d898 <_free_r+0x144>
 800d84c:	2301      	movs	r3, #1
 800d84e:	1080      	asrs	r0, r0, #2
 800d850:	4083      	lsls	r3, r0
 800d852:	6850      	ldr	r0, [r2, #4]
 800d854:	4303      	orrs	r3, r0
 800d856:	6053      	str	r3, [r2, #4]
 800d858:	60ce      	str	r6, [r1, #12]
 800d85a:	608d      	str	r5, [r1, #8]
 800d85c:	60b1      	str	r1, [r6, #8]
 800d85e:	60e9      	str	r1, [r5, #12]
 800d860:	e7a7      	b.n	800d7b2 <_free_r+0x5e>
 800d862:	2d14      	cmp	r5, #20
 800d864:	d802      	bhi.n	800d86c <_free_r+0x118>
 800d866:	0028      	movs	r0, r5
 800d868:	305b      	adds	r0, #91	; 0x5b
 800d86a:	e7e9      	b.n	800d840 <_free_r+0xec>
 800d86c:	2d54      	cmp	r5, #84	; 0x54
 800d86e:	d802      	bhi.n	800d876 <_free_r+0x122>
 800d870:	0b18      	lsrs	r0, r3, #12
 800d872:	306e      	adds	r0, #110	; 0x6e
 800d874:	e7e4      	b.n	800d840 <_free_r+0xec>
 800d876:	20aa      	movs	r0, #170	; 0xaa
 800d878:	0040      	lsls	r0, r0, #1
 800d87a:	4285      	cmp	r5, r0
 800d87c:	d802      	bhi.n	800d884 <_free_r+0x130>
 800d87e:	0bd8      	lsrs	r0, r3, #15
 800d880:	3077      	adds	r0, #119	; 0x77
 800d882:	e7dd      	b.n	800d840 <_free_r+0xec>
 800d884:	4e0b      	ldr	r6, [pc, #44]	; (800d8b4 <_free_r+0x160>)
 800d886:	207e      	movs	r0, #126	; 0x7e
 800d888:	42b5      	cmp	r5, r6
 800d88a:	d8d9      	bhi.n	800d840 <_free_r+0xec>
 800d88c:	0c98      	lsrs	r0, r3, #18
 800d88e:	307c      	adds	r0, #124	; 0x7c
 800d890:	e7d6      	b.n	800d840 <_free_r+0xec>
 800d892:	68ad      	ldr	r5, [r5, #8]
 800d894:	42ae      	cmp	r6, r5
 800d896:	d003      	beq.n	800d8a0 <_free_r+0x14c>
 800d898:	686a      	ldr	r2, [r5, #4]
 800d89a:	43ba      	bics	r2, r7
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d8f8      	bhi.n	800d892 <_free_r+0x13e>
 800d8a0:	68ee      	ldr	r6, [r5, #12]
 800d8a2:	e7d9      	b.n	800d858 <_free_r+0x104>
 800d8a4:	20000028 	.word	0x20000028
 800d8a8:	20000434 	.word	0x20000434
 800d8ac:	20000c78 	.word	0x20000c78
 800d8b0:	20000030 	.word	0x20000030
 800d8b4:	00000554 	.word	0x00000554

0800d8b8 <rshift>:
 800d8b8:	0002      	movs	r2, r0
 800d8ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8bc:	6904      	ldr	r4, [r0, #16]
 800d8be:	114b      	asrs	r3, r1, #5
 800d8c0:	b085      	sub	sp, #20
 800d8c2:	3214      	adds	r2, #20
 800d8c4:	9302      	str	r3, [sp, #8]
 800d8c6:	114d      	asrs	r5, r1, #5
 800d8c8:	0013      	movs	r3, r2
 800d8ca:	42ac      	cmp	r4, r5
 800d8cc:	dd32      	ble.n	800d934 <rshift+0x7c>
 800d8ce:	261f      	movs	r6, #31
 800d8d0:	000f      	movs	r7, r1
 800d8d2:	114b      	asrs	r3, r1, #5
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	00a5      	lsls	r5, r4, #2
 800d8d8:	18d3      	adds	r3, r2, r3
 800d8da:	4037      	ands	r7, r6
 800d8dc:	1955      	adds	r5, r2, r5
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	9701      	str	r7, [sp, #4]
 800d8e2:	4231      	tst	r1, r6
 800d8e4:	d10d      	bne.n	800d902 <rshift+0x4a>
 800d8e6:	0016      	movs	r6, r2
 800d8e8:	0019      	movs	r1, r3
 800d8ea:	428d      	cmp	r5, r1
 800d8ec:	d836      	bhi.n	800d95c <rshift+0xa4>
 800d8ee:	9900      	ldr	r1, [sp, #0]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	3903      	subs	r1, #3
 800d8f4:	428d      	cmp	r5, r1
 800d8f6:	d302      	bcc.n	800d8fe <rshift+0x46>
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	1ae4      	subs	r4, r4, r3
 800d8fc:	00a3      	lsls	r3, r4, #2
 800d8fe:	18d3      	adds	r3, r2, r3
 800d900:	e018      	b.n	800d934 <rshift+0x7c>
 800d902:	2120      	movs	r1, #32
 800d904:	9e01      	ldr	r6, [sp, #4]
 800d906:	9f01      	ldr	r7, [sp, #4]
 800d908:	1b89      	subs	r1, r1, r6
 800d90a:	9e00      	ldr	r6, [sp, #0]
 800d90c:	9103      	str	r1, [sp, #12]
 800d90e:	ce02      	ldmia	r6!, {r1}
 800d910:	4694      	mov	ip, r2
 800d912:	40f9      	lsrs	r1, r7
 800d914:	42b5      	cmp	r5, r6
 800d916:	d816      	bhi.n	800d946 <rshift+0x8e>
 800d918:	9e00      	ldr	r6, [sp, #0]
 800d91a:	2300      	movs	r3, #0
 800d91c:	3601      	adds	r6, #1
 800d91e:	42b5      	cmp	r5, r6
 800d920:	d303      	bcc.n	800d92a <rshift+0x72>
 800d922:	9b02      	ldr	r3, [sp, #8]
 800d924:	1ae3      	subs	r3, r4, r3
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	3b04      	subs	r3, #4
 800d92a:	18d3      	adds	r3, r2, r3
 800d92c:	6019      	str	r1, [r3, #0]
 800d92e:	2900      	cmp	r1, #0
 800d930:	d000      	beq.n	800d934 <rshift+0x7c>
 800d932:	3304      	adds	r3, #4
 800d934:	1a99      	subs	r1, r3, r2
 800d936:	1089      	asrs	r1, r1, #2
 800d938:	6101      	str	r1, [r0, #16]
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d101      	bne.n	800d942 <rshift+0x8a>
 800d93e:	2300      	movs	r3, #0
 800d940:	6143      	str	r3, [r0, #20]
 800d942:	b005      	add	sp, #20
 800d944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d946:	6837      	ldr	r7, [r6, #0]
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	409f      	lsls	r7, r3
 800d94c:	430f      	orrs	r7, r1
 800d94e:	4661      	mov	r1, ip
 800d950:	c180      	stmia	r1!, {r7}
 800d952:	468c      	mov	ip, r1
 800d954:	9b01      	ldr	r3, [sp, #4]
 800d956:	ce02      	ldmia	r6!, {r1}
 800d958:	40d9      	lsrs	r1, r3
 800d95a:	e7db      	b.n	800d914 <rshift+0x5c>
 800d95c:	c980      	ldmia	r1!, {r7}
 800d95e:	c680      	stmia	r6!, {r7}
 800d960:	e7c3      	b.n	800d8ea <rshift+0x32>

0800d962 <__hexdig_fun>:
 800d962:	0002      	movs	r2, r0
 800d964:	3a30      	subs	r2, #48	; 0x30
 800d966:	0003      	movs	r3, r0
 800d968:	2a09      	cmp	r2, #9
 800d96a:	d802      	bhi.n	800d972 <__hexdig_fun+0x10>
 800d96c:	3b20      	subs	r3, #32
 800d96e:	b2d8      	uxtb	r0, r3
 800d970:	4770      	bx	lr
 800d972:	0002      	movs	r2, r0
 800d974:	3a61      	subs	r2, #97	; 0x61
 800d976:	2a05      	cmp	r2, #5
 800d978:	d801      	bhi.n	800d97e <__hexdig_fun+0x1c>
 800d97a:	3b47      	subs	r3, #71	; 0x47
 800d97c:	e7f7      	b.n	800d96e <__hexdig_fun+0xc>
 800d97e:	001a      	movs	r2, r3
 800d980:	3a41      	subs	r2, #65	; 0x41
 800d982:	2000      	movs	r0, #0
 800d984:	2a05      	cmp	r2, #5
 800d986:	d8f3      	bhi.n	800d970 <__hexdig_fun+0xe>
 800d988:	3b27      	subs	r3, #39	; 0x27
 800d98a:	e7f0      	b.n	800d96e <__hexdig_fun+0xc>

0800d98c <__gethex>:
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	b089      	sub	sp, #36	; 0x24
 800d990:	9307      	str	r3, [sp, #28]
 800d992:	2302      	movs	r3, #2
 800d994:	9201      	str	r2, [sp, #4]
 800d996:	680a      	ldr	r2, [r1, #0]
 800d998:	425b      	negs	r3, r3
 800d99a:	9003      	str	r0, [sp, #12]
 800d99c:	9106      	str	r1, [sp, #24]
 800d99e:	1c96      	adds	r6, r2, #2
 800d9a0:	1a9b      	subs	r3, r3, r2
 800d9a2:	199a      	adds	r2, r3, r6
 800d9a4:	9600      	str	r6, [sp, #0]
 800d9a6:	9205      	str	r2, [sp, #20]
 800d9a8:	9a00      	ldr	r2, [sp, #0]
 800d9aa:	3601      	adds	r6, #1
 800d9ac:	7810      	ldrb	r0, [r2, #0]
 800d9ae:	2830      	cmp	r0, #48	; 0x30
 800d9b0:	d0f7      	beq.n	800d9a2 <__gethex+0x16>
 800d9b2:	f7ff ffd6 	bl	800d962 <__hexdig_fun>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	001d      	movs	r5, r3
 800d9ba:	9302      	str	r3, [sp, #8]
 800d9bc:	4298      	cmp	r0, r3
 800d9be:	d11d      	bne.n	800d9fc <__gethex+0x70>
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	49a6      	ldr	r1, [pc, #664]	; (800dc5c <__gethex+0x2d0>)
 800d9c4:	9800      	ldr	r0, [sp, #0]
 800d9c6:	f7ff fd33 	bl	800d430 <strncmp>
 800d9ca:	0007      	movs	r7, r0
 800d9cc:	42a8      	cmp	r0, r5
 800d9ce:	d169      	bne.n	800daa4 <__gethex+0x118>
 800d9d0:	9b00      	ldr	r3, [sp, #0]
 800d9d2:	0034      	movs	r4, r6
 800d9d4:	7858      	ldrb	r0, [r3, #1]
 800d9d6:	f7ff ffc4 	bl	800d962 <__hexdig_fun>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	9302      	str	r3, [sp, #8]
 800d9de:	42a8      	cmp	r0, r5
 800d9e0:	d02f      	beq.n	800da42 <__gethex+0xb6>
 800d9e2:	9600      	str	r6, [sp, #0]
 800d9e4:	9b00      	ldr	r3, [sp, #0]
 800d9e6:	7818      	ldrb	r0, [r3, #0]
 800d9e8:	2830      	cmp	r0, #48	; 0x30
 800d9ea:	d009      	beq.n	800da00 <__gethex+0x74>
 800d9ec:	f7ff ffb9 	bl	800d962 <__hexdig_fun>
 800d9f0:	4242      	negs	r2, r0
 800d9f2:	4142      	adcs	r2, r0
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	0035      	movs	r5, r6
 800d9f8:	9202      	str	r2, [sp, #8]
 800d9fa:	9305      	str	r3, [sp, #20]
 800d9fc:	9c00      	ldr	r4, [sp, #0]
 800d9fe:	e004      	b.n	800da0a <__gethex+0x7e>
 800da00:	9b00      	ldr	r3, [sp, #0]
 800da02:	3301      	adds	r3, #1
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	e7ed      	b.n	800d9e4 <__gethex+0x58>
 800da08:	3401      	adds	r4, #1
 800da0a:	7820      	ldrb	r0, [r4, #0]
 800da0c:	f7ff ffa9 	bl	800d962 <__hexdig_fun>
 800da10:	1e07      	subs	r7, r0, #0
 800da12:	d1f9      	bne.n	800da08 <__gethex+0x7c>
 800da14:	2201      	movs	r2, #1
 800da16:	0020      	movs	r0, r4
 800da18:	4990      	ldr	r1, [pc, #576]	; (800dc5c <__gethex+0x2d0>)
 800da1a:	f7ff fd09 	bl	800d430 <strncmp>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d10d      	bne.n	800da3e <__gethex+0xb2>
 800da22:	2d00      	cmp	r5, #0
 800da24:	d106      	bne.n	800da34 <__gethex+0xa8>
 800da26:	3401      	adds	r4, #1
 800da28:	0025      	movs	r5, r4
 800da2a:	7820      	ldrb	r0, [r4, #0]
 800da2c:	f7ff ff99 	bl	800d962 <__hexdig_fun>
 800da30:	2800      	cmp	r0, #0
 800da32:	d102      	bne.n	800da3a <__gethex+0xae>
 800da34:	1b2d      	subs	r5, r5, r4
 800da36:	00af      	lsls	r7, r5, #2
 800da38:	e003      	b.n	800da42 <__gethex+0xb6>
 800da3a:	3401      	adds	r4, #1
 800da3c:	e7f5      	b.n	800da2a <__gethex+0x9e>
 800da3e:	2d00      	cmp	r5, #0
 800da40:	d1f8      	bne.n	800da34 <__gethex+0xa8>
 800da42:	2220      	movs	r2, #32
 800da44:	7823      	ldrb	r3, [r4, #0]
 800da46:	0026      	movs	r6, r4
 800da48:	4393      	bics	r3, r2
 800da4a:	2b50      	cmp	r3, #80	; 0x50
 800da4c:	d11d      	bne.n	800da8a <__gethex+0xfe>
 800da4e:	7863      	ldrb	r3, [r4, #1]
 800da50:	2b2b      	cmp	r3, #43	; 0x2b
 800da52:	d02c      	beq.n	800daae <__gethex+0x122>
 800da54:	2b2d      	cmp	r3, #45	; 0x2d
 800da56:	d02e      	beq.n	800dab6 <__gethex+0x12a>
 800da58:	2300      	movs	r3, #0
 800da5a:	1c66      	adds	r6, r4, #1
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	7830      	ldrb	r0, [r6, #0]
 800da60:	f7ff ff7f 	bl	800d962 <__hexdig_fun>
 800da64:	1e43      	subs	r3, r0, #1
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b18      	cmp	r3, #24
 800da6a:	d82b      	bhi.n	800dac4 <__gethex+0x138>
 800da6c:	3810      	subs	r0, #16
 800da6e:	0005      	movs	r5, r0
 800da70:	7870      	ldrb	r0, [r6, #1]
 800da72:	f7ff ff76 	bl	800d962 <__hexdig_fun>
 800da76:	1e43      	subs	r3, r0, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	3601      	adds	r6, #1
 800da7c:	2b18      	cmp	r3, #24
 800da7e:	d91c      	bls.n	800daba <__gethex+0x12e>
 800da80:	9b04      	ldr	r3, [sp, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d000      	beq.n	800da88 <__gethex+0xfc>
 800da86:	426d      	negs	r5, r5
 800da88:	197f      	adds	r7, r7, r5
 800da8a:	9b06      	ldr	r3, [sp, #24]
 800da8c:	601e      	str	r6, [r3, #0]
 800da8e:	9b02      	ldr	r3, [sp, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d019      	beq.n	800dac8 <__gethex+0x13c>
 800da94:	2600      	movs	r6, #0
 800da96:	9b05      	ldr	r3, [sp, #20]
 800da98:	42b3      	cmp	r3, r6
 800da9a:	d100      	bne.n	800da9e <__gethex+0x112>
 800da9c:	3606      	adds	r6, #6
 800da9e:	0030      	movs	r0, r6
 800daa0:	b009      	add	sp, #36	; 0x24
 800daa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa4:	2301      	movs	r3, #1
 800daa6:	2700      	movs	r7, #0
 800daa8:	9c00      	ldr	r4, [sp, #0]
 800daaa:	9302      	str	r3, [sp, #8]
 800daac:	e7c9      	b.n	800da42 <__gethex+0xb6>
 800daae:	2300      	movs	r3, #0
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	1ca6      	adds	r6, r4, #2
 800dab4:	e7d3      	b.n	800da5e <__gethex+0xd2>
 800dab6:	2301      	movs	r3, #1
 800dab8:	e7fa      	b.n	800dab0 <__gethex+0x124>
 800daba:	230a      	movs	r3, #10
 800dabc:	435d      	muls	r5, r3
 800dabe:	182d      	adds	r5, r5, r0
 800dac0:	3d10      	subs	r5, #16
 800dac2:	e7d5      	b.n	800da70 <__gethex+0xe4>
 800dac4:	0026      	movs	r6, r4
 800dac6:	e7e0      	b.n	800da8a <__gethex+0xfe>
 800dac8:	9b00      	ldr	r3, [sp, #0]
 800daca:	9902      	ldr	r1, [sp, #8]
 800dacc:	1ae3      	subs	r3, r4, r3
 800dace:	3b01      	subs	r3, #1
 800dad0:	2b07      	cmp	r3, #7
 800dad2:	dc0a      	bgt.n	800daea <__gethex+0x15e>
 800dad4:	9803      	ldr	r0, [sp, #12]
 800dad6:	f000 fa5d 	bl	800df94 <_Balloc>
 800dada:	1e05      	subs	r5, r0, #0
 800dadc:	d108      	bne.n	800daf0 <__gethex+0x164>
 800dade:	002a      	movs	r2, r5
 800dae0:	21e4      	movs	r1, #228	; 0xe4
 800dae2:	4b5f      	ldr	r3, [pc, #380]	; (800dc60 <__gethex+0x2d4>)
 800dae4:	485f      	ldr	r0, [pc, #380]	; (800dc64 <__gethex+0x2d8>)
 800dae6:	f003 fd19 	bl	801151c <__assert_func>
 800daea:	3101      	adds	r1, #1
 800daec:	105b      	asrs	r3, r3, #1
 800daee:	e7ef      	b.n	800dad0 <__gethex+0x144>
 800daf0:	0003      	movs	r3, r0
 800daf2:	3314      	adds	r3, #20
 800daf4:	9302      	str	r3, [sp, #8]
 800daf6:	9305      	str	r3, [sp, #20]
 800daf8:	2300      	movs	r3, #0
 800dafa:	001e      	movs	r6, r3
 800dafc:	9304      	str	r3, [sp, #16]
 800dafe:	9b00      	ldr	r3, [sp, #0]
 800db00:	42a3      	cmp	r3, r4
 800db02:	d33f      	bcc.n	800db84 <__gethex+0x1f8>
 800db04:	9c05      	ldr	r4, [sp, #20]
 800db06:	9b02      	ldr	r3, [sp, #8]
 800db08:	c440      	stmia	r4!, {r6}
 800db0a:	1ae4      	subs	r4, r4, r3
 800db0c:	10a4      	asrs	r4, r4, #2
 800db0e:	0030      	movs	r0, r6
 800db10:	612c      	str	r4, [r5, #16]
 800db12:	f000 fb01 	bl	800e118 <__hi0bits>
 800db16:	9b01      	ldr	r3, [sp, #4]
 800db18:	0164      	lsls	r4, r4, #5
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	1a26      	subs	r6, r4, r0
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	429e      	cmp	r6, r3
 800db22:	dd51      	ble.n	800dbc8 <__gethex+0x23c>
 800db24:	1af6      	subs	r6, r6, r3
 800db26:	0031      	movs	r1, r6
 800db28:	0028      	movs	r0, r5
 800db2a:	f000 fe7b 	bl	800e824 <__any_on>
 800db2e:	1e04      	subs	r4, r0, #0
 800db30:	d016      	beq.n	800db60 <__gethex+0x1d4>
 800db32:	2401      	movs	r4, #1
 800db34:	231f      	movs	r3, #31
 800db36:	0020      	movs	r0, r4
 800db38:	1e72      	subs	r2, r6, #1
 800db3a:	4013      	ands	r3, r2
 800db3c:	4098      	lsls	r0, r3
 800db3e:	0003      	movs	r3, r0
 800db40:	1151      	asrs	r1, r2, #5
 800db42:	9802      	ldr	r0, [sp, #8]
 800db44:	0089      	lsls	r1, r1, #2
 800db46:	5809      	ldr	r1, [r1, r0]
 800db48:	4219      	tst	r1, r3
 800db4a:	d009      	beq.n	800db60 <__gethex+0x1d4>
 800db4c:	42a2      	cmp	r2, r4
 800db4e:	dd06      	ble.n	800db5e <__gethex+0x1d2>
 800db50:	0028      	movs	r0, r5
 800db52:	1eb1      	subs	r1, r6, #2
 800db54:	f000 fe66 	bl	800e824 <__any_on>
 800db58:	3402      	adds	r4, #2
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d100      	bne.n	800db60 <__gethex+0x1d4>
 800db5e:	2402      	movs	r4, #2
 800db60:	0031      	movs	r1, r6
 800db62:	0028      	movs	r0, r5
 800db64:	f7ff fea8 	bl	800d8b8 <rshift>
 800db68:	19bf      	adds	r7, r7, r6
 800db6a:	9b01      	ldr	r3, [sp, #4]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	42bb      	cmp	r3, r7
 800db70:	da3a      	bge.n	800dbe8 <__gethex+0x25c>
 800db72:	0029      	movs	r1, r5
 800db74:	9803      	ldr	r0, [sp, #12]
 800db76:	f000 fa35 	bl	800dfe4 <_Bfree>
 800db7a:	2300      	movs	r3, #0
 800db7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db7e:	26a3      	movs	r6, #163	; 0xa3
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	e78c      	b.n	800da9e <__gethex+0x112>
 800db84:	3c01      	subs	r4, #1
 800db86:	7823      	ldrb	r3, [r4, #0]
 800db88:	2b2e      	cmp	r3, #46	; 0x2e
 800db8a:	d012      	beq.n	800dbb2 <__gethex+0x226>
 800db8c:	9b04      	ldr	r3, [sp, #16]
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d104      	bne.n	800db9c <__gethex+0x210>
 800db92:	9b05      	ldr	r3, [sp, #20]
 800db94:	c340      	stmia	r3!, {r6}
 800db96:	2600      	movs	r6, #0
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	9604      	str	r6, [sp, #16]
 800db9c:	7820      	ldrb	r0, [r4, #0]
 800db9e:	f7ff fee0 	bl	800d962 <__hexdig_fun>
 800dba2:	230f      	movs	r3, #15
 800dba4:	4018      	ands	r0, r3
 800dba6:	9b04      	ldr	r3, [sp, #16]
 800dba8:	4098      	lsls	r0, r3
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4306      	orrs	r6, r0
 800dbae:	9304      	str	r3, [sp, #16]
 800dbb0:	e7a5      	b.n	800dafe <__gethex+0x172>
 800dbb2:	9b00      	ldr	r3, [sp, #0]
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	d8e9      	bhi.n	800db8c <__gethex+0x200>
 800dbb8:	2201      	movs	r2, #1
 800dbba:	0020      	movs	r0, r4
 800dbbc:	4927      	ldr	r1, [pc, #156]	; (800dc5c <__gethex+0x2d0>)
 800dbbe:	f7ff fc37 	bl	800d430 <strncmp>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d1e2      	bne.n	800db8c <__gethex+0x200>
 800dbc6:	e79a      	b.n	800dafe <__gethex+0x172>
 800dbc8:	9b00      	ldr	r3, [sp, #0]
 800dbca:	2400      	movs	r4, #0
 800dbcc:	429e      	cmp	r6, r3
 800dbce:	dacc      	bge.n	800db6a <__gethex+0x1de>
 800dbd0:	1b9e      	subs	r6, r3, r6
 800dbd2:	0029      	movs	r1, r5
 800dbd4:	0032      	movs	r2, r6
 800dbd6:	9803      	ldr	r0, [sp, #12]
 800dbd8:	f000 fbf0 	bl	800e3bc <__lshift>
 800dbdc:	0003      	movs	r3, r0
 800dbde:	3314      	adds	r3, #20
 800dbe0:	0005      	movs	r5, r0
 800dbe2:	1bbf      	subs	r7, r7, r6
 800dbe4:	9302      	str	r3, [sp, #8]
 800dbe6:	e7c0      	b.n	800db6a <__gethex+0x1de>
 800dbe8:	9b01      	ldr	r3, [sp, #4]
 800dbea:	685e      	ldr	r6, [r3, #4]
 800dbec:	42be      	cmp	r6, r7
 800dbee:	dd70      	ble.n	800dcd2 <__gethex+0x346>
 800dbf0:	9b00      	ldr	r3, [sp, #0]
 800dbf2:	1bf6      	subs	r6, r6, r7
 800dbf4:	42b3      	cmp	r3, r6
 800dbf6:	dc37      	bgt.n	800dc68 <__gethex+0x2dc>
 800dbf8:	9b01      	ldr	r3, [sp, #4]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d024      	beq.n	800dc4a <__gethex+0x2be>
 800dc00:	2b03      	cmp	r3, #3
 800dc02:	d026      	beq.n	800dc52 <__gethex+0x2c6>
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d117      	bne.n	800dc38 <__gethex+0x2ac>
 800dc08:	9b00      	ldr	r3, [sp, #0]
 800dc0a:	42b3      	cmp	r3, r6
 800dc0c:	d114      	bne.n	800dc38 <__gethex+0x2ac>
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d10b      	bne.n	800dc2a <__gethex+0x29e>
 800dc12:	9b01      	ldr	r3, [sp, #4]
 800dc14:	9a07      	ldr	r2, [sp, #28]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	2662      	movs	r6, #98	; 0x62
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	9a02      	ldr	r2, [sp, #8]
 800dc20:	612b      	str	r3, [r5, #16]
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc26:	601d      	str	r5, [r3, #0]
 800dc28:	e739      	b.n	800da9e <__gethex+0x112>
 800dc2a:	9900      	ldr	r1, [sp, #0]
 800dc2c:	0028      	movs	r0, r5
 800dc2e:	3901      	subs	r1, #1
 800dc30:	f000 fdf8 	bl	800e824 <__any_on>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1ec      	bne.n	800dc12 <__gethex+0x286>
 800dc38:	0029      	movs	r1, r5
 800dc3a:	9803      	ldr	r0, [sp, #12]
 800dc3c:	f000 f9d2 	bl	800dfe4 <_Bfree>
 800dc40:	2300      	movs	r3, #0
 800dc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc44:	2650      	movs	r6, #80	; 0x50
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	e729      	b.n	800da9e <__gethex+0x112>
 800dc4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1f3      	bne.n	800dc38 <__gethex+0x2ac>
 800dc50:	e7df      	b.n	800dc12 <__gethex+0x286>
 800dc52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1dc      	bne.n	800dc12 <__gethex+0x286>
 800dc58:	e7ee      	b.n	800dc38 <__gethex+0x2ac>
 800dc5a:	46c0      	nop			; (mov r8, r8)
 800dc5c:	08015b30 	.word	0x08015b30
 800dc60:	08015c91 	.word	0x08015c91
 800dc64:	08015ca2 	.word	0x08015ca2
 800dc68:	1e77      	subs	r7, r6, #1
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	d12f      	bne.n	800dcce <__gethex+0x342>
 800dc6e:	2f00      	cmp	r7, #0
 800dc70:	d004      	beq.n	800dc7c <__gethex+0x2f0>
 800dc72:	0039      	movs	r1, r7
 800dc74:	0028      	movs	r0, r5
 800dc76:	f000 fdd5 	bl	800e824 <__any_on>
 800dc7a:	0004      	movs	r4, r0
 800dc7c:	231f      	movs	r3, #31
 800dc7e:	117a      	asrs	r2, r7, #5
 800dc80:	401f      	ands	r7, r3
 800dc82:	3b1e      	subs	r3, #30
 800dc84:	40bb      	lsls	r3, r7
 800dc86:	9902      	ldr	r1, [sp, #8]
 800dc88:	0092      	lsls	r2, r2, #2
 800dc8a:	5852      	ldr	r2, [r2, r1]
 800dc8c:	421a      	tst	r2, r3
 800dc8e:	d001      	beq.n	800dc94 <__gethex+0x308>
 800dc90:	2302      	movs	r3, #2
 800dc92:	431c      	orrs	r4, r3
 800dc94:	9b00      	ldr	r3, [sp, #0]
 800dc96:	0031      	movs	r1, r6
 800dc98:	1b9b      	subs	r3, r3, r6
 800dc9a:	2602      	movs	r6, #2
 800dc9c:	0028      	movs	r0, r5
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	f7ff fe0a 	bl	800d8b8 <rshift>
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	685f      	ldr	r7, [r3, #4]
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	d041      	beq.n	800dd30 <__gethex+0x3a4>
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d010      	beq.n	800dcd6 <__gethex+0x34a>
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d012      	beq.n	800dcde <__gethex+0x352>
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d106      	bne.n	800dcca <__gethex+0x33e>
 800dcbc:	07a2      	lsls	r2, r4, #30
 800dcbe:	d504      	bpl.n	800dcca <__gethex+0x33e>
 800dcc0:	9a02      	ldr	r2, [sp, #8]
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	4314      	orrs	r4, r2
 800dcc6:	421c      	tst	r4, r3
 800dcc8:	d10c      	bne.n	800dce4 <__gethex+0x358>
 800dcca:	2310      	movs	r3, #16
 800dccc:	e02f      	b.n	800dd2e <__gethex+0x3a2>
 800dcce:	2401      	movs	r4, #1
 800dcd0:	e7d4      	b.n	800dc7c <__gethex+0x2f0>
 800dcd2:	2601      	movs	r6, #1
 800dcd4:	e7e8      	b.n	800dca8 <__gethex+0x31c>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d0f2      	beq.n	800dcca <__gethex+0x33e>
 800dce4:	692b      	ldr	r3, [r5, #16]
 800dce6:	2000      	movs	r0, #0
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	002b      	movs	r3, r5
 800dcf0:	9a04      	ldr	r2, [sp, #16]
 800dcf2:	3314      	adds	r3, #20
 800dcf4:	1899      	adds	r1, r3, r2
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	1c54      	adds	r4, r2, #1
 800dcfa:	d01e      	beq.n	800dd3a <__gethex+0x3ae>
 800dcfc:	3201      	adds	r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	002b      	movs	r3, r5
 800dd02:	3314      	adds	r3, #20
 800dd04:	2e02      	cmp	r6, #2
 800dd06:	d141      	bne.n	800dd8c <__gethex+0x400>
 800dd08:	9a01      	ldr	r2, [sp, #4]
 800dd0a:	9900      	ldr	r1, [sp, #0]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	3a01      	subs	r2, #1
 800dd10:	428a      	cmp	r2, r1
 800dd12:	d10b      	bne.n	800dd2c <__gethex+0x3a0>
 800dd14:	221f      	movs	r2, #31
 800dd16:	9800      	ldr	r0, [sp, #0]
 800dd18:	1149      	asrs	r1, r1, #5
 800dd1a:	4002      	ands	r2, r0
 800dd1c:	2001      	movs	r0, #1
 800dd1e:	0004      	movs	r4, r0
 800dd20:	4094      	lsls	r4, r2
 800dd22:	0089      	lsls	r1, r1, #2
 800dd24:	58cb      	ldr	r3, [r1, r3]
 800dd26:	4223      	tst	r3, r4
 800dd28:	d000      	beq.n	800dd2c <__gethex+0x3a0>
 800dd2a:	2601      	movs	r6, #1
 800dd2c:	2320      	movs	r3, #32
 800dd2e:	431e      	orrs	r6, r3
 800dd30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd32:	601d      	str	r5, [r3, #0]
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	601f      	str	r7, [r3, #0]
 800dd38:	e6b1      	b.n	800da9e <__gethex+0x112>
 800dd3a:	c301      	stmia	r3!, {r0}
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	d8da      	bhi.n	800dcf6 <__gethex+0x36a>
 800dd40:	68ab      	ldr	r3, [r5, #8]
 800dd42:	9a02      	ldr	r2, [sp, #8]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	db18      	blt.n	800dd7a <__gethex+0x3ee>
 800dd48:	6869      	ldr	r1, [r5, #4]
 800dd4a:	9803      	ldr	r0, [sp, #12]
 800dd4c:	3101      	adds	r1, #1
 800dd4e:	f000 f921 	bl	800df94 <_Balloc>
 800dd52:	1e04      	subs	r4, r0, #0
 800dd54:	d104      	bne.n	800dd60 <__gethex+0x3d4>
 800dd56:	0022      	movs	r2, r4
 800dd58:	2184      	movs	r1, #132	; 0x84
 800dd5a:	4b1c      	ldr	r3, [pc, #112]	; (800ddcc <__gethex+0x440>)
 800dd5c:	481c      	ldr	r0, [pc, #112]	; (800ddd0 <__gethex+0x444>)
 800dd5e:	e6c2      	b.n	800dae6 <__gethex+0x15a>
 800dd60:	0029      	movs	r1, r5
 800dd62:	692a      	ldr	r2, [r5, #16]
 800dd64:	310c      	adds	r1, #12
 800dd66:	3202      	adds	r2, #2
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	300c      	adds	r0, #12
 800dd6c:	f7ff fc77 	bl	800d65e <memcpy>
 800dd70:	0029      	movs	r1, r5
 800dd72:	9803      	ldr	r0, [sp, #12]
 800dd74:	f000 f936 	bl	800dfe4 <_Bfree>
 800dd78:	0025      	movs	r5, r4
 800dd7a:	692b      	ldr	r3, [r5, #16]
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	612a      	str	r2, [r5, #16]
 800dd80:	2201      	movs	r2, #1
 800dd82:	3304      	adds	r3, #4
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	18eb      	adds	r3, r5, r3
 800dd88:	605a      	str	r2, [r3, #4]
 800dd8a:	e7b9      	b.n	800dd00 <__gethex+0x374>
 800dd8c:	692a      	ldr	r2, [r5, #16]
 800dd8e:	9902      	ldr	r1, [sp, #8]
 800dd90:	428a      	cmp	r2, r1
 800dd92:	dd09      	ble.n	800dda8 <__gethex+0x41c>
 800dd94:	2101      	movs	r1, #1
 800dd96:	0028      	movs	r0, r5
 800dd98:	f7ff fd8e 	bl	800d8b8 <rshift>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	3701      	adds	r7, #1
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	42bb      	cmp	r3, r7
 800dda4:	dac1      	bge.n	800dd2a <__gethex+0x39e>
 800dda6:	e6e4      	b.n	800db72 <__gethex+0x1e6>
 800dda8:	221f      	movs	r2, #31
 800ddaa:	9c00      	ldr	r4, [sp, #0]
 800ddac:	9900      	ldr	r1, [sp, #0]
 800ddae:	2601      	movs	r6, #1
 800ddb0:	4014      	ands	r4, r2
 800ddb2:	4211      	tst	r1, r2
 800ddb4:	d0ba      	beq.n	800dd2c <__gethex+0x3a0>
 800ddb6:	9a04      	ldr	r2, [sp, #16]
 800ddb8:	189b      	adds	r3, r3, r2
 800ddba:	3b04      	subs	r3, #4
 800ddbc:	6818      	ldr	r0, [r3, #0]
 800ddbe:	f000 f9ab 	bl	800e118 <__hi0bits>
 800ddc2:	2320      	movs	r3, #32
 800ddc4:	1b1b      	subs	r3, r3, r4
 800ddc6:	4298      	cmp	r0, r3
 800ddc8:	dbe4      	blt.n	800dd94 <__gethex+0x408>
 800ddca:	e7af      	b.n	800dd2c <__gethex+0x3a0>
 800ddcc:	08015c91 	.word	0x08015c91
 800ddd0:	08015ca2 	.word	0x08015ca2

0800ddd4 <L_shift>:
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	2520      	movs	r5, #32
 800ddda:	1a9a      	subs	r2, r3, r2
 800dddc:	0092      	lsls	r2, r2, #2
 800ddde:	1aad      	subs	r5, r5, r2
 800dde0:	6843      	ldr	r3, [r0, #4]
 800dde2:	6804      	ldr	r4, [r0, #0]
 800dde4:	001e      	movs	r6, r3
 800dde6:	40ae      	lsls	r6, r5
 800dde8:	40d3      	lsrs	r3, r2
 800ddea:	4334      	orrs	r4, r6
 800ddec:	6004      	str	r4, [r0, #0]
 800ddee:	6043      	str	r3, [r0, #4]
 800ddf0:	3004      	adds	r0, #4
 800ddf2:	4288      	cmp	r0, r1
 800ddf4:	d3f4      	bcc.n	800dde0 <L_shift+0xc>
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}

0800ddf8 <__match>:
 800ddf8:	b530      	push	{r4, r5, lr}
 800ddfa:	6803      	ldr	r3, [r0, #0]
 800ddfc:	780c      	ldrb	r4, [r1, #0]
 800ddfe:	3301      	adds	r3, #1
 800de00:	2c00      	cmp	r4, #0
 800de02:	d102      	bne.n	800de0a <__match+0x12>
 800de04:	6003      	str	r3, [r0, #0]
 800de06:	2001      	movs	r0, #1
 800de08:	bd30      	pop	{r4, r5, pc}
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	0015      	movs	r5, r2
 800de0e:	3d41      	subs	r5, #65	; 0x41
 800de10:	2d19      	cmp	r5, #25
 800de12:	d800      	bhi.n	800de16 <__match+0x1e>
 800de14:	3220      	adds	r2, #32
 800de16:	3101      	adds	r1, #1
 800de18:	42a2      	cmp	r2, r4
 800de1a:	d0ef      	beq.n	800ddfc <__match+0x4>
 800de1c:	2000      	movs	r0, #0
 800de1e:	e7f3      	b.n	800de08 <__match+0x10>

0800de20 <__hexnan>:
 800de20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de22:	680b      	ldr	r3, [r1, #0]
 800de24:	b08b      	sub	sp, #44	; 0x2c
 800de26:	9201      	str	r2, [sp, #4]
 800de28:	9901      	ldr	r1, [sp, #4]
 800de2a:	115a      	asrs	r2, r3, #5
 800de2c:	0092      	lsls	r2, r2, #2
 800de2e:	188a      	adds	r2, r1, r2
 800de30:	9202      	str	r2, [sp, #8]
 800de32:	0019      	movs	r1, r3
 800de34:	221f      	movs	r2, #31
 800de36:	4011      	ands	r1, r2
 800de38:	9008      	str	r0, [sp, #32]
 800de3a:	9106      	str	r1, [sp, #24]
 800de3c:	4213      	tst	r3, r2
 800de3e:	d002      	beq.n	800de46 <__hexnan+0x26>
 800de40:	9b02      	ldr	r3, [sp, #8]
 800de42:	3304      	adds	r3, #4
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	9b02      	ldr	r3, [sp, #8]
 800de48:	2500      	movs	r5, #0
 800de4a:	1f1f      	subs	r7, r3, #4
 800de4c:	003e      	movs	r6, r7
 800de4e:	003c      	movs	r4, r7
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	603d      	str	r5, [r7, #0]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	9507      	str	r5, [sp, #28]
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	9503      	str	r5, [sp, #12]
 800de5c:	9b05      	ldr	r3, [sp, #20]
 800de5e:	3301      	adds	r3, #1
 800de60:	9309      	str	r3, [sp, #36]	; 0x24
 800de62:	9b05      	ldr	r3, [sp, #20]
 800de64:	785b      	ldrb	r3, [r3, #1]
 800de66:	9304      	str	r3, [sp, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d028      	beq.n	800debe <__hexnan+0x9e>
 800de6c:	9804      	ldr	r0, [sp, #16]
 800de6e:	f7ff fd78 	bl	800d962 <__hexdig_fun>
 800de72:	2800      	cmp	r0, #0
 800de74:	d154      	bne.n	800df20 <__hexnan+0x100>
 800de76:	9b04      	ldr	r3, [sp, #16]
 800de78:	2b20      	cmp	r3, #32
 800de7a:	d819      	bhi.n	800deb0 <__hexnan+0x90>
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	9a07      	ldr	r2, [sp, #28]
 800de80:	4293      	cmp	r3, r2
 800de82:	dd12      	ble.n	800deaa <__hexnan+0x8a>
 800de84:	42b4      	cmp	r4, r6
 800de86:	d206      	bcs.n	800de96 <__hexnan+0x76>
 800de88:	2d07      	cmp	r5, #7
 800de8a:	dc04      	bgt.n	800de96 <__hexnan+0x76>
 800de8c:	002a      	movs	r2, r5
 800de8e:	0031      	movs	r1, r6
 800de90:	0020      	movs	r0, r4
 800de92:	f7ff ff9f 	bl	800ddd4 <L_shift>
 800de96:	9b01      	ldr	r3, [sp, #4]
 800de98:	2508      	movs	r5, #8
 800de9a:	429c      	cmp	r4, r3
 800de9c:	d905      	bls.n	800deaa <__hexnan+0x8a>
 800de9e:	1f26      	subs	r6, r4, #4
 800dea0:	2500      	movs	r5, #0
 800dea2:	0034      	movs	r4, r6
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	6035      	str	r5, [r6, #0]
 800dea8:	9307      	str	r3, [sp, #28]
 800deaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	e7d5      	b.n	800de5c <__hexnan+0x3c>
 800deb0:	9b04      	ldr	r3, [sp, #16]
 800deb2:	2b29      	cmp	r3, #41	; 0x29
 800deb4:	d159      	bne.n	800df6a <__hexnan+0x14a>
 800deb6:	9b05      	ldr	r3, [sp, #20]
 800deb8:	9a08      	ldr	r2, [sp, #32]
 800deba:	3302      	adds	r3, #2
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d052      	beq.n	800df6a <__hexnan+0x14a>
 800dec4:	42b4      	cmp	r4, r6
 800dec6:	d206      	bcs.n	800ded6 <__hexnan+0xb6>
 800dec8:	2d07      	cmp	r5, #7
 800deca:	dc04      	bgt.n	800ded6 <__hexnan+0xb6>
 800decc:	002a      	movs	r2, r5
 800dece:	0031      	movs	r1, r6
 800ded0:	0020      	movs	r0, r4
 800ded2:	f7ff ff7f 	bl	800ddd4 <L_shift>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	429c      	cmp	r4, r3
 800deda:	d935      	bls.n	800df48 <__hexnan+0x128>
 800dedc:	001a      	movs	r2, r3
 800dede:	0023      	movs	r3, r4
 800dee0:	cb02      	ldmia	r3!, {r1}
 800dee2:	c202      	stmia	r2!, {r1}
 800dee4:	429f      	cmp	r7, r3
 800dee6:	d2fb      	bcs.n	800dee0 <__hexnan+0xc0>
 800dee8:	9b02      	ldr	r3, [sp, #8]
 800deea:	1c62      	adds	r2, r4, #1
 800deec:	1ed9      	subs	r1, r3, #3
 800deee:	2304      	movs	r3, #4
 800def0:	4291      	cmp	r1, r2
 800def2:	d305      	bcc.n	800df00 <__hexnan+0xe0>
 800def4:	9b02      	ldr	r3, [sp, #8]
 800def6:	3b04      	subs	r3, #4
 800def8:	1b1b      	subs	r3, r3, r4
 800defa:	089b      	lsrs	r3, r3, #2
 800defc:	3301      	adds	r3, #1
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	9a01      	ldr	r2, [sp, #4]
 800df02:	18d3      	adds	r3, r2, r3
 800df04:	2200      	movs	r2, #0
 800df06:	c304      	stmia	r3!, {r2}
 800df08:	429f      	cmp	r7, r3
 800df0a:	d2fc      	bcs.n	800df06 <__hexnan+0xe6>
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <__hexnan+0xfc>
 800df12:	9b01      	ldr	r3, [sp, #4]
 800df14:	429f      	cmp	r7, r3
 800df16:	d126      	bne.n	800df66 <__hexnan+0x146>
 800df18:	2301      	movs	r3, #1
 800df1a:	603b      	str	r3, [r7, #0]
 800df1c:	2005      	movs	r0, #5
 800df1e:	e025      	b.n	800df6c <__hexnan+0x14c>
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	3501      	adds	r5, #1
 800df24:	3301      	adds	r3, #1
 800df26:	9303      	str	r3, [sp, #12]
 800df28:	2d08      	cmp	r5, #8
 800df2a:	dd06      	ble.n	800df3a <__hexnan+0x11a>
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	429c      	cmp	r4, r3
 800df30:	d9bb      	bls.n	800deaa <__hexnan+0x8a>
 800df32:	2300      	movs	r3, #0
 800df34:	2501      	movs	r5, #1
 800df36:	3c04      	subs	r4, #4
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	220f      	movs	r2, #15
 800df3c:	6823      	ldr	r3, [r4, #0]
 800df3e:	4010      	ands	r0, r2
 800df40:	011b      	lsls	r3, r3, #4
 800df42:	4303      	orrs	r3, r0
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	e7b0      	b.n	800deaa <__hexnan+0x8a>
 800df48:	9b06      	ldr	r3, [sp, #24]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0de      	beq.n	800df0c <__hexnan+0xec>
 800df4e:	2320      	movs	r3, #32
 800df50:	9a06      	ldr	r2, [sp, #24]
 800df52:	9902      	ldr	r1, [sp, #8]
 800df54:	1a9b      	subs	r3, r3, r2
 800df56:	2201      	movs	r2, #1
 800df58:	4252      	negs	r2, r2
 800df5a:	40da      	lsrs	r2, r3
 800df5c:	3904      	subs	r1, #4
 800df5e:	680b      	ldr	r3, [r1, #0]
 800df60:	4013      	ands	r3, r2
 800df62:	600b      	str	r3, [r1, #0]
 800df64:	e7d2      	b.n	800df0c <__hexnan+0xec>
 800df66:	3f04      	subs	r7, #4
 800df68:	e7d0      	b.n	800df0c <__hexnan+0xec>
 800df6a:	2004      	movs	r0, #4
 800df6c:	b00b      	add	sp, #44	; 0x2c
 800df6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df70 <__ascii_mbtowc>:
 800df70:	b082      	sub	sp, #8
 800df72:	2900      	cmp	r1, #0
 800df74:	d100      	bne.n	800df78 <__ascii_mbtowc+0x8>
 800df76:	a901      	add	r1, sp, #4
 800df78:	1e10      	subs	r0, r2, #0
 800df7a:	d006      	beq.n	800df8a <__ascii_mbtowc+0x1a>
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <__ascii_mbtowc+0x1e>
 800df80:	7813      	ldrb	r3, [r2, #0]
 800df82:	600b      	str	r3, [r1, #0]
 800df84:	7810      	ldrb	r0, [r2, #0]
 800df86:	1e43      	subs	r3, r0, #1
 800df88:	4198      	sbcs	r0, r3
 800df8a:	b002      	add	sp, #8
 800df8c:	4770      	bx	lr
 800df8e:	2002      	movs	r0, #2
 800df90:	4240      	negs	r0, r0
 800df92:	e7fa      	b.n	800df8a <__ascii_mbtowc+0x1a>

0800df94 <_Balloc>:
 800df94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df96:	b570      	push	{r4, r5, r6, lr}
 800df98:	0006      	movs	r6, r0
 800df9a:	000c      	movs	r4, r1
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d012      	beq.n	800dfc6 <_Balloc+0x32>
 800dfa0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800dfa2:	00a2      	lsls	r2, r4, #2
 800dfa4:	189b      	adds	r3, r3, r2
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d115      	bne.n	800dfd8 <_Balloc+0x44>
 800dfac:	2101      	movs	r1, #1
 800dfae:	000d      	movs	r5, r1
 800dfb0:	40a5      	lsls	r5, r4
 800dfb2:	1d6a      	adds	r2, r5, #5
 800dfb4:	0030      	movs	r0, r6
 800dfb6:	0092      	lsls	r2, r2, #2
 800dfb8:	f003 face 	bl	8011558 <_calloc_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d009      	beq.n	800dfd4 <_Balloc+0x40>
 800dfc0:	6044      	str	r4, [r0, #4]
 800dfc2:	6085      	str	r5, [r0, #8]
 800dfc4:	e00a      	b.n	800dfdc <_Balloc+0x48>
 800dfc6:	2221      	movs	r2, #33	; 0x21
 800dfc8:	2104      	movs	r1, #4
 800dfca:	f003 fac5 	bl	8011558 <_calloc_r>
 800dfce:	6470      	str	r0, [r6, #68]	; 0x44
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d1e5      	bne.n	800dfa0 <_Balloc+0xc>
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	6802      	ldr	r2, [r0, #0]
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	6103      	str	r3, [r0, #16]
 800dfe0:	60c3      	str	r3, [r0, #12]
 800dfe2:	e7f8      	b.n	800dfd6 <_Balloc+0x42>

0800dfe4 <_Bfree>:
 800dfe4:	2900      	cmp	r1, #0
 800dfe6:	d006      	beq.n	800dff6 <_Bfree+0x12>
 800dfe8:	684a      	ldr	r2, [r1, #4]
 800dfea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dfec:	0092      	lsls	r2, r2, #2
 800dfee:	189b      	adds	r3, r3, r2
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	600a      	str	r2, [r1, #0]
 800dff4:	6019      	str	r1, [r3, #0]
 800dff6:	4770      	bx	lr

0800dff8 <__multadd>:
 800dff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dffa:	000e      	movs	r6, r1
 800dffc:	9001      	str	r0, [sp, #4]
 800dffe:	000c      	movs	r4, r1
 800e000:	001d      	movs	r5, r3
 800e002:	2000      	movs	r0, #0
 800e004:	690f      	ldr	r7, [r1, #16]
 800e006:	3614      	adds	r6, #20
 800e008:	6833      	ldr	r3, [r6, #0]
 800e00a:	3001      	adds	r0, #1
 800e00c:	b299      	uxth	r1, r3
 800e00e:	4351      	muls	r1, r2
 800e010:	0c1b      	lsrs	r3, r3, #16
 800e012:	4353      	muls	r3, r2
 800e014:	1949      	adds	r1, r1, r5
 800e016:	0c0d      	lsrs	r5, r1, #16
 800e018:	195b      	adds	r3, r3, r5
 800e01a:	0c1d      	lsrs	r5, r3, #16
 800e01c:	b289      	uxth	r1, r1
 800e01e:	041b      	lsls	r3, r3, #16
 800e020:	185b      	adds	r3, r3, r1
 800e022:	c608      	stmia	r6!, {r3}
 800e024:	4287      	cmp	r7, r0
 800e026:	dcef      	bgt.n	800e008 <__multadd+0x10>
 800e028:	2d00      	cmp	r5, #0
 800e02a:	d022      	beq.n	800e072 <__multadd+0x7a>
 800e02c:	68a3      	ldr	r3, [r4, #8]
 800e02e:	42bb      	cmp	r3, r7
 800e030:	dc19      	bgt.n	800e066 <__multadd+0x6e>
 800e032:	6861      	ldr	r1, [r4, #4]
 800e034:	9801      	ldr	r0, [sp, #4]
 800e036:	3101      	adds	r1, #1
 800e038:	f7ff ffac 	bl	800df94 <_Balloc>
 800e03c:	1e06      	subs	r6, r0, #0
 800e03e:	d105      	bne.n	800e04c <__multadd+0x54>
 800e040:	0032      	movs	r2, r6
 800e042:	21ba      	movs	r1, #186	; 0xba
 800e044:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <__multadd+0x80>)
 800e046:	480d      	ldr	r0, [pc, #52]	; (800e07c <__multadd+0x84>)
 800e048:	f003 fa68 	bl	801151c <__assert_func>
 800e04c:	0021      	movs	r1, r4
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	310c      	adds	r1, #12
 800e052:	3202      	adds	r2, #2
 800e054:	0092      	lsls	r2, r2, #2
 800e056:	300c      	adds	r0, #12
 800e058:	f7ff fb01 	bl	800d65e <memcpy>
 800e05c:	0021      	movs	r1, r4
 800e05e:	9801      	ldr	r0, [sp, #4]
 800e060:	f7ff ffc0 	bl	800dfe4 <_Bfree>
 800e064:	0034      	movs	r4, r6
 800e066:	1d3b      	adds	r3, r7, #4
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	18e3      	adds	r3, r4, r3
 800e06c:	605d      	str	r5, [r3, #4]
 800e06e:	1c7b      	adds	r3, r7, #1
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	0020      	movs	r0, r4
 800e074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e076:	46c0      	nop			; (mov r8, r8)
 800e078:	08015c91 	.word	0x08015c91
 800e07c:	08015d02 	.word	0x08015d02

0800e080 <__s2b>:
 800e080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e082:	0006      	movs	r6, r0
 800e084:	0018      	movs	r0, r3
 800e086:	000c      	movs	r4, r1
 800e088:	3008      	adds	r0, #8
 800e08a:	2109      	movs	r1, #9
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	0015      	movs	r5, r2
 800e090:	f7f2 f8de 	bl	8000250 <__divsi3>
 800e094:	2301      	movs	r3, #1
 800e096:	2100      	movs	r1, #0
 800e098:	4283      	cmp	r3, r0
 800e09a:	db0a      	blt.n	800e0b2 <__s2b+0x32>
 800e09c:	0030      	movs	r0, r6
 800e09e:	f7ff ff79 	bl	800df94 <_Balloc>
 800e0a2:	1e01      	subs	r1, r0, #0
 800e0a4:	d108      	bne.n	800e0b8 <__s2b+0x38>
 800e0a6:	000a      	movs	r2, r1
 800e0a8:	4b19      	ldr	r3, [pc, #100]	; (800e110 <__s2b+0x90>)
 800e0aa:	481a      	ldr	r0, [pc, #104]	; (800e114 <__s2b+0x94>)
 800e0ac:	31d3      	adds	r1, #211	; 0xd3
 800e0ae:	f003 fa35 	bl	801151c <__assert_func>
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	3101      	adds	r1, #1
 800e0b6:	e7ef      	b.n	800e098 <__s2b+0x18>
 800e0b8:	9b08      	ldr	r3, [sp, #32]
 800e0ba:	6143      	str	r3, [r0, #20]
 800e0bc:	2301      	movs	r3, #1
 800e0be:	6103      	str	r3, [r0, #16]
 800e0c0:	2d09      	cmp	r5, #9
 800e0c2:	dd18      	ble.n	800e0f6 <__s2b+0x76>
 800e0c4:	0023      	movs	r3, r4
 800e0c6:	3309      	adds	r3, #9
 800e0c8:	001f      	movs	r7, r3
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	1964      	adds	r4, r4, r5
 800e0ce:	783b      	ldrb	r3, [r7, #0]
 800e0d0:	220a      	movs	r2, #10
 800e0d2:	0030      	movs	r0, r6
 800e0d4:	3b30      	subs	r3, #48	; 0x30
 800e0d6:	f7ff ff8f 	bl	800dff8 <__multadd>
 800e0da:	3701      	adds	r7, #1
 800e0dc:	0001      	movs	r1, r0
 800e0de:	42a7      	cmp	r7, r4
 800e0e0:	d1f5      	bne.n	800e0ce <__s2b+0x4e>
 800e0e2:	002c      	movs	r4, r5
 800e0e4:	9b00      	ldr	r3, [sp, #0]
 800e0e6:	3c08      	subs	r4, #8
 800e0e8:	191c      	adds	r4, r3, r4
 800e0ea:	002f      	movs	r7, r5
 800e0ec:	9b01      	ldr	r3, [sp, #4]
 800e0ee:	429f      	cmp	r7, r3
 800e0f0:	db04      	blt.n	800e0fc <__s2b+0x7c>
 800e0f2:	0008      	movs	r0, r1
 800e0f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0f6:	2509      	movs	r5, #9
 800e0f8:	340a      	adds	r4, #10
 800e0fa:	e7f6      	b.n	800e0ea <__s2b+0x6a>
 800e0fc:	1b63      	subs	r3, r4, r5
 800e0fe:	5ddb      	ldrb	r3, [r3, r7]
 800e100:	220a      	movs	r2, #10
 800e102:	0030      	movs	r0, r6
 800e104:	3b30      	subs	r3, #48	; 0x30
 800e106:	f7ff ff77 	bl	800dff8 <__multadd>
 800e10a:	3701      	adds	r7, #1
 800e10c:	0001      	movs	r1, r0
 800e10e:	e7ed      	b.n	800e0ec <__s2b+0x6c>
 800e110:	08015c91 	.word	0x08015c91
 800e114:	08015d02 	.word	0x08015d02

0800e118 <__hi0bits>:
 800e118:	0003      	movs	r3, r0
 800e11a:	0c02      	lsrs	r2, r0, #16
 800e11c:	2000      	movs	r0, #0
 800e11e:	4282      	cmp	r2, r0
 800e120:	d101      	bne.n	800e126 <__hi0bits+0xe>
 800e122:	041b      	lsls	r3, r3, #16
 800e124:	3010      	adds	r0, #16
 800e126:	0e1a      	lsrs	r2, r3, #24
 800e128:	d101      	bne.n	800e12e <__hi0bits+0x16>
 800e12a:	3008      	adds	r0, #8
 800e12c:	021b      	lsls	r3, r3, #8
 800e12e:	0f1a      	lsrs	r2, r3, #28
 800e130:	d101      	bne.n	800e136 <__hi0bits+0x1e>
 800e132:	3004      	adds	r0, #4
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	0f9a      	lsrs	r2, r3, #30
 800e138:	d101      	bne.n	800e13e <__hi0bits+0x26>
 800e13a:	3002      	adds	r0, #2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	2b00      	cmp	r3, #0
 800e140:	db03      	blt.n	800e14a <__hi0bits+0x32>
 800e142:	3001      	adds	r0, #1
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	d400      	bmi.n	800e14a <__hi0bits+0x32>
 800e148:	2020      	movs	r0, #32
 800e14a:	4770      	bx	lr

0800e14c <__lo0bits>:
 800e14c:	6803      	ldr	r3, [r0, #0]
 800e14e:	0001      	movs	r1, r0
 800e150:	2207      	movs	r2, #7
 800e152:	0018      	movs	r0, r3
 800e154:	4010      	ands	r0, r2
 800e156:	4213      	tst	r3, r2
 800e158:	d00d      	beq.n	800e176 <__lo0bits+0x2a>
 800e15a:	3a06      	subs	r2, #6
 800e15c:	2000      	movs	r0, #0
 800e15e:	4213      	tst	r3, r2
 800e160:	d105      	bne.n	800e16e <__lo0bits+0x22>
 800e162:	3002      	adds	r0, #2
 800e164:	4203      	tst	r3, r0
 800e166:	d003      	beq.n	800e170 <__lo0bits+0x24>
 800e168:	40d3      	lsrs	r3, r2
 800e16a:	0010      	movs	r0, r2
 800e16c:	600b      	str	r3, [r1, #0]
 800e16e:	4770      	bx	lr
 800e170:	089b      	lsrs	r3, r3, #2
 800e172:	600b      	str	r3, [r1, #0]
 800e174:	e7fb      	b.n	800e16e <__lo0bits+0x22>
 800e176:	b29a      	uxth	r2, r3
 800e178:	2a00      	cmp	r2, #0
 800e17a:	d101      	bne.n	800e180 <__lo0bits+0x34>
 800e17c:	2010      	movs	r0, #16
 800e17e:	0c1b      	lsrs	r3, r3, #16
 800e180:	b2da      	uxtb	r2, r3
 800e182:	2a00      	cmp	r2, #0
 800e184:	d101      	bne.n	800e18a <__lo0bits+0x3e>
 800e186:	3008      	adds	r0, #8
 800e188:	0a1b      	lsrs	r3, r3, #8
 800e18a:	071a      	lsls	r2, r3, #28
 800e18c:	d101      	bne.n	800e192 <__lo0bits+0x46>
 800e18e:	3004      	adds	r0, #4
 800e190:	091b      	lsrs	r3, r3, #4
 800e192:	079a      	lsls	r2, r3, #30
 800e194:	d101      	bne.n	800e19a <__lo0bits+0x4e>
 800e196:	3002      	adds	r0, #2
 800e198:	089b      	lsrs	r3, r3, #2
 800e19a:	07da      	lsls	r2, r3, #31
 800e19c:	d4e9      	bmi.n	800e172 <__lo0bits+0x26>
 800e19e:	3001      	adds	r0, #1
 800e1a0:	085b      	lsrs	r3, r3, #1
 800e1a2:	d1e6      	bne.n	800e172 <__lo0bits+0x26>
 800e1a4:	2020      	movs	r0, #32
 800e1a6:	e7e2      	b.n	800e16e <__lo0bits+0x22>

0800e1a8 <__i2b>:
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	000c      	movs	r4, r1
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	f7ff fef1 	bl	800df94 <_Balloc>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d107      	bne.n	800e1c6 <__i2b+0x1e>
 800e1b6:	2146      	movs	r1, #70	; 0x46
 800e1b8:	4c05      	ldr	r4, [pc, #20]	; (800e1d0 <__i2b+0x28>)
 800e1ba:	0002      	movs	r2, r0
 800e1bc:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <__i2b+0x2c>)
 800e1be:	0020      	movs	r0, r4
 800e1c0:	31ff      	adds	r1, #255	; 0xff
 800e1c2:	f003 f9ab 	bl	801151c <__assert_func>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	6144      	str	r4, [r0, #20]
 800e1ca:	6103      	str	r3, [r0, #16]
 800e1cc:	bd10      	pop	{r4, pc}
 800e1ce:	46c0      	nop			; (mov r8, r8)
 800e1d0:	08015d02 	.word	0x08015d02
 800e1d4:	08015c91 	.word	0x08015c91

0800e1d8 <__multiply>:
 800e1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1da:	0015      	movs	r5, r2
 800e1dc:	690a      	ldr	r2, [r1, #16]
 800e1de:	692b      	ldr	r3, [r5, #16]
 800e1e0:	000c      	movs	r4, r1
 800e1e2:	b08b      	sub	sp, #44	; 0x2c
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	da01      	bge.n	800e1ec <__multiply+0x14>
 800e1e8:	002c      	movs	r4, r5
 800e1ea:	000d      	movs	r5, r1
 800e1ec:	6927      	ldr	r7, [r4, #16]
 800e1ee:	692e      	ldr	r6, [r5, #16]
 800e1f0:	6861      	ldr	r1, [r4, #4]
 800e1f2:	19bb      	adds	r3, r7, r6
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	68a3      	ldr	r3, [r4, #8]
 800e1f8:	19ba      	adds	r2, r7, r6
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	da00      	bge.n	800e200 <__multiply+0x28>
 800e1fe:	3101      	adds	r1, #1
 800e200:	f7ff fec8 	bl	800df94 <_Balloc>
 800e204:	9002      	str	r0, [sp, #8]
 800e206:	2800      	cmp	r0, #0
 800e208:	d106      	bne.n	800e218 <__multiply+0x40>
 800e20a:	21b1      	movs	r1, #177	; 0xb1
 800e20c:	4b48      	ldr	r3, [pc, #288]	; (800e330 <__multiply+0x158>)
 800e20e:	4849      	ldr	r0, [pc, #292]	; (800e334 <__multiply+0x15c>)
 800e210:	9a02      	ldr	r2, [sp, #8]
 800e212:	0049      	lsls	r1, r1, #1
 800e214:	f003 f982 	bl	801151c <__assert_func>
 800e218:	9b02      	ldr	r3, [sp, #8]
 800e21a:	2200      	movs	r2, #0
 800e21c:	3314      	adds	r3, #20
 800e21e:	469c      	mov	ip, r3
 800e220:	19bb      	adds	r3, r7, r6
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4463      	add	r3, ip
 800e226:	9304      	str	r3, [sp, #16]
 800e228:	4663      	mov	r3, ip
 800e22a:	9904      	ldr	r1, [sp, #16]
 800e22c:	428b      	cmp	r3, r1
 800e22e:	d32a      	bcc.n	800e286 <__multiply+0xae>
 800e230:	0023      	movs	r3, r4
 800e232:	00bf      	lsls	r7, r7, #2
 800e234:	3314      	adds	r3, #20
 800e236:	3514      	adds	r5, #20
 800e238:	9308      	str	r3, [sp, #32]
 800e23a:	00b6      	lsls	r6, r6, #2
 800e23c:	19db      	adds	r3, r3, r7
 800e23e:	9305      	str	r3, [sp, #20]
 800e240:	19ab      	adds	r3, r5, r6
 800e242:	9309      	str	r3, [sp, #36]	; 0x24
 800e244:	2304      	movs	r3, #4
 800e246:	9306      	str	r3, [sp, #24]
 800e248:	0023      	movs	r3, r4
 800e24a:	9a05      	ldr	r2, [sp, #20]
 800e24c:	3315      	adds	r3, #21
 800e24e:	9501      	str	r5, [sp, #4]
 800e250:	429a      	cmp	r2, r3
 800e252:	d305      	bcc.n	800e260 <__multiply+0x88>
 800e254:	1b13      	subs	r3, r2, r4
 800e256:	3b15      	subs	r3, #21
 800e258:	089b      	lsrs	r3, r3, #2
 800e25a:	3301      	adds	r3, #1
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	9306      	str	r3, [sp, #24]
 800e260:	9b01      	ldr	r3, [sp, #4]
 800e262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e264:	4293      	cmp	r3, r2
 800e266:	d310      	bcc.n	800e28a <__multiply+0xb2>
 800e268:	9b03      	ldr	r3, [sp, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	dd05      	ble.n	800e27a <__multiply+0xa2>
 800e26e:	9b04      	ldr	r3, [sp, #16]
 800e270:	3b04      	subs	r3, #4
 800e272:	9304      	str	r3, [sp, #16]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d056      	beq.n	800e328 <__multiply+0x150>
 800e27a:	9b02      	ldr	r3, [sp, #8]
 800e27c:	9a03      	ldr	r2, [sp, #12]
 800e27e:	0018      	movs	r0, r3
 800e280:	611a      	str	r2, [r3, #16]
 800e282:	b00b      	add	sp, #44	; 0x2c
 800e284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e286:	c304      	stmia	r3!, {r2}
 800e288:	e7cf      	b.n	800e22a <__multiply+0x52>
 800e28a:	9b01      	ldr	r3, [sp, #4]
 800e28c:	6818      	ldr	r0, [r3, #0]
 800e28e:	b280      	uxth	r0, r0
 800e290:	2800      	cmp	r0, #0
 800e292:	d01e      	beq.n	800e2d2 <__multiply+0xfa>
 800e294:	4667      	mov	r7, ip
 800e296:	2500      	movs	r5, #0
 800e298:	9e08      	ldr	r6, [sp, #32]
 800e29a:	ce02      	ldmia	r6!, {r1}
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	9307      	str	r3, [sp, #28]
 800e2a0:	b28b      	uxth	r3, r1
 800e2a2:	4343      	muls	r3, r0
 800e2a4:	001a      	movs	r2, r3
 800e2a6:	466b      	mov	r3, sp
 800e2a8:	8b9b      	ldrh	r3, [r3, #28]
 800e2aa:	18d3      	adds	r3, r2, r3
 800e2ac:	195b      	adds	r3, r3, r5
 800e2ae:	0c0d      	lsrs	r5, r1, #16
 800e2b0:	4345      	muls	r5, r0
 800e2b2:	9a07      	ldr	r2, [sp, #28]
 800e2b4:	0c11      	lsrs	r1, r2, #16
 800e2b6:	1869      	adds	r1, r5, r1
 800e2b8:	0c1a      	lsrs	r2, r3, #16
 800e2ba:	188a      	adds	r2, r1, r2
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	0c15      	lsrs	r5, r2, #16
 800e2c0:	0412      	lsls	r2, r2, #16
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	9b05      	ldr	r3, [sp, #20]
 800e2c6:	c704      	stmia	r7!, {r2}
 800e2c8:	42b3      	cmp	r3, r6
 800e2ca:	d8e6      	bhi.n	800e29a <__multiply+0xc2>
 800e2cc:	4663      	mov	r3, ip
 800e2ce:	9a06      	ldr	r2, [sp, #24]
 800e2d0:	509d      	str	r5, [r3, r2]
 800e2d2:	9b01      	ldr	r3, [sp, #4]
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	0c00      	lsrs	r0, r0, #16
 800e2d8:	d020      	beq.n	800e31c <__multiply+0x144>
 800e2da:	4663      	mov	r3, ip
 800e2dc:	0025      	movs	r5, r4
 800e2de:	4661      	mov	r1, ip
 800e2e0:	2700      	movs	r7, #0
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3514      	adds	r5, #20
 800e2e6:	682a      	ldr	r2, [r5, #0]
 800e2e8:	680e      	ldr	r6, [r1, #0]
 800e2ea:	b292      	uxth	r2, r2
 800e2ec:	4342      	muls	r2, r0
 800e2ee:	0c36      	lsrs	r6, r6, #16
 800e2f0:	1992      	adds	r2, r2, r6
 800e2f2:	19d2      	adds	r2, r2, r7
 800e2f4:	0416      	lsls	r6, r2, #16
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	431e      	orrs	r6, r3
 800e2fa:	600e      	str	r6, [r1, #0]
 800e2fc:	cd40      	ldmia	r5!, {r6}
 800e2fe:	684b      	ldr	r3, [r1, #4]
 800e300:	0c36      	lsrs	r6, r6, #16
 800e302:	4346      	muls	r6, r0
 800e304:	b29b      	uxth	r3, r3
 800e306:	0c12      	lsrs	r2, r2, #16
 800e308:	18f3      	adds	r3, r6, r3
 800e30a:	189b      	adds	r3, r3, r2
 800e30c:	9a05      	ldr	r2, [sp, #20]
 800e30e:	0c1f      	lsrs	r7, r3, #16
 800e310:	3104      	adds	r1, #4
 800e312:	42aa      	cmp	r2, r5
 800e314:	d8e7      	bhi.n	800e2e6 <__multiply+0x10e>
 800e316:	4662      	mov	r2, ip
 800e318:	9906      	ldr	r1, [sp, #24]
 800e31a:	5053      	str	r3, [r2, r1]
 800e31c:	9b01      	ldr	r3, [sp, #4]
 800e31e:	3304      	adds	r3, #4
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	2304      	movs	r3, #4
 800e324:	449c      	add	ip, r3
 800e326:	e79b      	b.n	800e260 <__multiply+0x88>
 800e328:	9b03      	ldr	r3, [sp, #12]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	9303      	str	r3, [sp, #12]
 800e32e:	e79b      	b.n	800e268 <__multiply+0x90>
 800e330:	08015c91 	.word	0x08015c91
 800e334:	08015d02 	.word	0x08015d02

0800e338 <__pow5mult>:
 800e338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e33a:	2303      	movs	r3, #3
 800e33c:	0015      	movs	r5, r2
 800e33e:	0007      	movs	r7, r0
 800e340:	000e      	movs	r6, r1
 800e342:	401a      	ands	r2, r3
 800e344:	421d      	tst	r5, r3
 800e346:	d008      	beq.n	800e35a <__pow5mult+0x22>
 800e348:	491a      	ldr	r1, [pc, #104]	; (800e3b4 <__pow5mult+0x7c>)
 800e34a:	3a01      	subs	r2, #1
 800e34c:	0092      	lsls	r2, r2, #2
 800e34e:	5852      	ldr	r2, [r2, r1]
 800e350:	2300      	movs	r3, #0
 800e352:	0031      	movs	r1, r6
 800e354:	f7ff fe50 	bl	800dff8 <__multadd>
 800e358:	0006      	movs	r6, r0
 800e35a:	10ad      	asrs	r5, r5, #2
 800e35c:	d027      	beq.n	800e3ae <__pow5mult+0x76>
 800e35e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e360:	2c00      	cmp	r4, #0
 800e362:	d107      	bne.n	800e374 <__pow5mult+0x3c>
 800e364:	0038      	movs	r0, r7
 800e366:	4914      	ldr	r1, [pc, #80]	; (800e3b8 <__pow5mult+0x80>)
 800e368:	f7ff ff1e 	bl	800e1a8 <__i2b>
 800e36c:	2300      	movs	r3, #0
 800e36e:	0004      	movs	r4, r0
 800e370:	6438      	str	r0, [r7, #64]	; 0x40
 800e372:	6003      	str	r3, [r0, #0]
 800e374:	2301      	movs	r3, #1
 800e376:	421d      	tst	r5, r3
 800e378:	d00a      	beq.n	800e390 <__pow5mult+0x58>
 800e37a:	0031      	movs	r1, r6
 800e37c:	0022      	movs	r2, r4
 800e37e:	0038      	movs	r0, r7
 800e380:	f7ff ff2a 	bl	800e1d8 <__multiply>
 800e384:	0031      	movs	r1, r6
 800e386:	9001      	str	r0, [sp, #4]
 800e388:	0038      	movs	r0, r7
 800e38a:	f7ff fe2b 	bl	800dfe4 <_Bfree>
 800e38e:	9e01      	ldr	r6, [sp, #4]
 800e390:	106d      	asrs	r5, r5, #1
 800e392:	d00c      	beq.n	800e3ae <__pow5mult+0x76>
 800e394:	6820      	ldr	r0, [r4, #0]
 800e396:	2800      	cmp	r0, #0
 800e398:	d107      	bne.n	800e3aa <__pow5mult+0x72>
 800e39a:	0022      	movs	r2, r4
 800e39c:	0021      	movs	r1, r4
 800e39e:	0038      	movs	r0, r7
 800e3a0:	f7ff ff1a 	bl	800e1d8 <__multiply>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	0004      	movs	r4, r0
 800e3ac:	e7e2      	b.n	800e374 <__pow5mult+0x3c>
 800e3ae:	0030      	movs	r0, r6
 800e3b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	08015e50 	.word	0x08015e50
 800e3b8:	00000271 	.word	0x00000271

0800e3bc <__lshift>:
 800e3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3be:	000c      	movs	r4, r1
 800e3c0:	0017      	movs	r7, r2
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	1155      	asrs	r5, r2, #5
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	18eb      	adds	r3, r5, r3
 800e3ca:	9302      	str	r3, [sp, #8]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	6849      	ldr	r1, [r1, #4]
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	9004      	str	r0, [sp, #16]
 800e3d6:	9a01      	ldr	r2, [sp, #4]
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	db10      	blt.n	800e3fe <__lshift+0x42>
 800e3dc:	9804      	ldr	r0, [sp, #16]
 800e3de:	f7ff fdd9 	bl	800df94 <_Balloc>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	0002      	movs	r2, r0
 800e3e6:	0006      	movs	r6, r0
 800e3e8:	0019      	movs	r1, r3
 800e3ea:	3214      	adds	r2, #20
 800e3ec:	4298      	cmp	r0, r3
 800e3ee:	d10c      	bne.n	800e40a <__lshift+0x4e>
 800e3f0:	31df      	adds	r1, #223	; 0xdf
 800e3f2:	0032      	movs	r2, r6
 800e3f4:	4b26      	ldr	r3, [pc, #152]	; (800e490 <__lshift+0xd4>)
 800e3f6:	4827      	ldr	r0, [pc, #156]	; (800e494 <__lshift+0xd8>)
 800e3f8:	31ff      	adds	r1, #255	; 0xff
 800e3fa:	f003 f88f 	bl	801151c <__assert_func>
 800e3fe:	3101      	adds	r1, #1
 800e400:	005b      	lsls	r3, r3, #1
 800e402:	e7e8      	b.n	800e3d6 <__lshift+0x1a>
 800e404:	0098      	lsls	r0, r3, #2
 800e406:	5011      	str	r1, [r2, r0]
 800e408:	3301      	adds	r3, #1
 800e40a:	42ab      	cmp	r3, r5
 800e40c:	dbfa      	blt.n	800e404 <__lshift+0x48>
 800e40e:	43eb      	mvns	r3, r5
 800e410:	17db      	asrs	r3, r3, #31
 800e412:	401d      	ands	r5, r3
 800e414:	211f      	movs	r1, #31
 800e416:	0023      	movs	r3, r4
 800e418:	0038      	movs	r0, r7
 800e41a:	00ad      	lsls	r5, r5, #2
 800e41c:	1955      	adds	r5, r2, r5
 800e41e:	6922      	ldr	r2, [r4, #16]
 800e420:	3314      	adds	r3, #20
 800e422:	0092      	lsls	r2, r2, #2
 800e424:	4008      	ands	r0, r1
 800e426:	4684      	mov	ip, r0
 800e428:	189a      	adds	r2, r3, r2
 800e42a:	420f      	tst	r7, r1
 800e42c:	d02a      	beq.n	800e484 <__lshift+0xc8>
 800e42e:	3101      	adds	r1, #1
 800e430:	1a09      	subs	r1, r1, r0
 800e432:	9105      	str	r1, [sp, #20]
 800e434:	2100      	movs	r1, #0
 800e436:	9503      	str	r5, [sp, #12]
 800e438:	4667      	mov	r7, ip
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	40b8      	lsls	r0, r7
 800e43e:	4308      	orrs	r0, r1
 800e440:	9903      	ldr	r1, [sp, #12]
 800e442:	c101      	stmia	r1!, {r0}
 800e444:	9103      	str	r1, [sp, #12]
 800e446:	9805      	ldr	r0, [sp, #20]
 800e448:	cb02      	ldmia	r3!, {r1}
 800e44a:	40c1      	lsrs	r1, r0
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d8f3      	bhi.n	800e438 <__lshift+0x7c>
 800e450:	0020      	movs	r0, r4
 800e452:	3015      	adds	r0, #21
 800e454:	2304      	movs	r3, #4
 800e456:	4282      	cmp	r2, r0
 800e458:	d304      	bcc.n	800e464 <__lshift+0xa8>
 800e45a:	1b13      	subs	r3, r2, r4
 800e45c:	3b15      	subs	r3, #21
 800e45e:	089b      	lsrs	r3, r3, #2
 800e460:	3301      	adds	r3, #1
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	50e9      	str	r1, [r5, r3]
 800e466:	2900      	cmp	r1, #0
 800e468:	d002      	beq.n	800e470 <__lshift+0xb4>
 800e46a:	9b02      	ldr	r3, [sp, #8]
 800e46c:	3302      	adds	r3, #2
 800e46e:	9301      	str	r3, [sp, #4]
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	9804      	ldr	r0, [sp, #16]
 800e474:	3b01      	subs	r3, #1
 800e476:	0021      	movs	r1, r4
 800e478:	6133      	str	r3, [r6, #16]
 800e47a:	f7ff fdb3 	bl	800dfe4 <_Bfree>
 800e47e:	0030      	movs	r0, r6
 800e480:	b007      	add	sp, #28
 800e482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e484:	cb02      	ldmia	r3!, {r1}
 800e486:	c502      	stmia	r5!, {r1}
 800e488:	429a      	cmp	r2, r3
 800e48a:	d8fb      	bhi.n	800e484 <__lshift+0xc8>
 800e48c:	e7f0      	b.n	800e470 <__lshift+0xb4>
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	08015c91 	.word	0x08015c91
 800e494:	08015d02 	.word	0x08015d02

0800e498 <__mcmp>:
 800e498:	b530      	push	{r4, r5, lr}
 800e49a:	690b      	ldr	r3, [r1, #16]
 800e49c:	6904      	ldr	r4, [r0, #16]
 800e49e:	0002      	movs	r2, r0
 800e4a0:	1ae0      	subs	r0, r4, r3
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	d10e      	bne.n	800e4c4 <__mcmp+0x2c>
 800e4a6:	3214      	adds	r2, #20
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	3114      	adds	r1, #20
 800e4ac:	0014      	movs	r4, r2
 800e4ae:	18c9      	adds	r1, r1, r3
 800e4b0:	18d2      	adds	r2, r2, r3
 800e4b2:	3a04      	subs	r2, #4
 800e4b4:	3904      	subs	r1, #4
 800e4b6:	6815      	ldr	r5, [r2, #0]
 800e4b8:	680b      	ldr	r3, [r1, #0]
 800e4ba:	429d      	cmp	r5, r3
 800e4bc:	d003      	beq.n	800e4c6 <__mcmp+0x2e>
 800e4be:	2001      	movs	r0, #1
 800e4c0:	429d      	cmp	r5, r3
 800e4c2:	d303      	bcc.n	800e4cc <__mcmp+0x34>
 800e4c4:	bd30      	pop	{r4, r5, pc}
 800e4c6:	4294      	cmp	r4, r2
 800e4c8:	d3f3      	bcc.n	800e4b2 <__mcmp+0x1a>
 800e4ca:	e7fb      	b.n	800e4c4 <__mcmp+0x2c>
 800e4cc:	4240      	negs	r0, r0
 800e4ce:	e7f9      	b.n	800e4c4 <__mcmp+0x2c>

0800e4d0 <__mdiff>:
 800e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d2:	000e      	movs	r6, r1
 800e4d4:	0007      	movs	r7, r0
 800e4d6:	0011      	movs	r1, r2
 800e4d8:	0030      	movs	r0, r6
 800e4da:	b087      	sub	sp, #28
 800e4dc:	0014      	movs	r4, r2
 800e4de:	f7ff ffdb 	bl	800e498 <__mcmp>
 800e4e2:	1e05      	subs	r5, r0, #0
 800e4e4:	d110      	bne.n	800e508 <__mdiff+0x38>
 800e4e6:	0001      	movs	r1, r0
 800e4e8:	0038      	movs	r0, r7
 800e4ea:	f7ff fd53 	bl	800df94 <_Balloc>
 800e4ee:	1e02      	subs	r2, r0, #0
 800e4f0:	d104      	bne.n	800e4fc <__mdiff+0x2c>
 800e4f2:	4b3f      	ldr	r3, [pc, #252]	; (800e5f0 <__mdiff+0x120>)
 800e4f4:	483f      	ldr	r0, [pc, #252]	; (800e5f4 <__mdiff+0x124>)
 800e4f6:	4940      	ldr	r1, [pc, #256]	; (800e5f8 <__mdiff+0x128>)
 800e4f8:	f003 f810 	bl	801151c <__assert_func>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	6145      	str	r5, [r0, #20]
 800e500:	6103      	str	r3, [r0, #16]
 800e502:	0010      	movs	r0, r2
 800e504:	b007      	add	sp, #28
 800e506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e508:	2301      	movs	r3, #1
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	2800      	cmp	r0, #0
 800e50e:	db04      	blt.n	800e51a <__mdiff+0x4a>
 800e510:	0023      	movs	r3, r4
 800e512:	0034      	movs	r4, r6
 800e514:	001e      	movs	r6, r3
 800e516:	2300      	movs	r3, #0
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	0038      	movs	r0, r7
 800e51c:	6861      	ldr	r1, [r4, #4]
 800e51e:	f7ff fd39 	bl	800df94 <_Balloc>
 800e522:	1e02      	subs	r2, r0, #0
 800e524:	d103      	bne.n	800e52e <__mdiff+0x5e>
 800e526:	4b32      	ldr	r3, [pc, #200]	; (800e5f0 <__mdiff+0x120>)
 800e528:	4832      	ldr	r0, [pc, #200]	; (800e5f4 <__mdiff+0x124>)
 800e52a:	4934      	ldr	r1, [pc, #208]	; (800e5fc <__mdiff+0x12c>)
 800e52c:	e7e4      	b.n	800e4f8 <__mdiff+0x28>
 800e52e:	9b01      	ldr	r3, [sp, #4]
 800e530:	2700      	movs	r7, #0
 800e532:	60c3      	str	r3, [r0, #12]
 800e534:	6920      	ldr	r0, [r4, #16]
 800e536:	3414      	adds	r4, #20
 800e538:	0083      	lsls	r3, r0, #2
 800e53a:	18e3      	adds	r3, r4, r3
 800e53c:	0021      	movs	r1, r4
 800e53e:	9401      	str	r4, [sp, #4]
 800e540:	0034      	movs	r4, r6
 800e542:	9302      	str	r3, [sp, #8]
 800e544:	6933      	ldr	r3, [r6, #16]
 800e546:	3414      	adds	r4, #20
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	18e3      	adds	r3, r4, r3
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	0013      	movs	r3, r2
 800e550:	3314      	adds	r3, #20
 800e552:	469c      	mov	ip, r3
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	9104      	str	r1, [sp, #16]
 800e558:	9b04      	ldr	r3, [sp, #16]
 800e55a:	cc02      	ldmia	r4!, {r1}
 800e55c:	cb20      	ldmia	r3!, {r5}
 800e55e:	9304      	str	r3, [sp, #16]
 800e560:	b2ab      	uxth	r3, r5
 800e562:	19df      	adds	r7, r3, r7
 800e564:	b28b      	uxth	r3, r1
 800e566:	1afb      	subs	r3, r7, r3
 800e568:	0c09      	lsrs	r1, r1, #16
 800e56a:	0c2d      	lsrs	r5, r5, #16
 800e56c:	1a6d      	subs	r5, r5, r1
 800e56e:	1419      	asrs	r1, r3, #16
 800e570:	1869      	adds	r1, r5, r1
 800e572:	b29b      	uxth	r3, r3
 800e574:	140f      	asrs	r7, r1, #16
 800e576:	0409      	lsls	r1, r1, #16
 800e578:	4319      	orrs	r1, r3
 800e57a:	4663      	mov	r3, ip
 800e57c:	c302      	stmia	r3!, {r1}
 800e57e:	469c      	mov	ip, r3
 800e580:	9b03      	ldr	r3, [sp, #12]
 800e582:	42a3      	cmp	r3, r4
 800e584:	d8e8      	bhi.n	800e558 <__mdiff+0x88>
 800e586:	0031      	movs	r1, r6
 800e588:	9c03      	ldr	r4, [sp, #12]
 800e58a:	3115      	adds	r1, #21
 800e58c:	2304      	movs	r3, #4
 800e58e:	428c      	cmp	r4, r1
 800e590:	d304      	bcc.n	800e59c <__mdiff+0xcc>
 800e592:	1ba3      	subs	r3, r4, r6
 800e594:	3b15      	subs	r3, #21
 800e596:	089b      	lsrs	r3, r3, #2
 800e598:	3301      	adds	r3, #1
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	9901      	ldr	r1, [sp, #4]
 800e59e:	18cd      	adds	r5, r1, r3
 800e5a0:	9905      	ldr	r1, [sp, #20]
 800e5a2:	002e      	movs	r6, r5
 800e5a4:	18cb      	adds	r3, r1, r3
 800e5a6:	469c      	mov	ip, r3
 800e5a8:	9902      	ldr	r1, [sp, #8]
 800e5aa:	428e      	cmp	r6, r1
 800e5ac:	d310      	bcc.n	800e5d0 <__mdiff+0x100>
 800e5ae:	9e02      	ldr	r6, [sp, #8]
 800e5b0:	1ee9      	subs	r1, r5, #3
 800e5b2:	2400      	movs	r4, #0
 800e5b4:	428e      	cmp	r6, r1
 800e5b6:	d304      	bcc.n	800e5c2 <__mdiff+0xf2>
 800e5b8:	0031      	movs	r1, r6
 800e5ba:	3103      	adds	r1, #3
 800e5bc:	1b49      	subs	r1, r1, r5
 800e5be:	0889      	lsrs	r1, r1, #2
 800e5c0:	008c      	lsls	r4, r1, #2
 800e5c2:	191b      	adds	r3, r3, r4
 800e5c4:	3b04      	subs	r3, #4
 800e5c6:	6819      	ldr	r1, [r3, #0]
 800e5c8:	2900      	cmp	r1, #0
 800e5ca:	d00f      	beq.n	800e5ec <__mdiff+0x11c>
 800e5cc:	6110      	str	r0, [r2, #16]
 800e5ce:	e798      	b.n	800e502 <__mdiff+0x32>
 800e5d0:	ce02      	ldmia	r6!, {r1}
 800e5d2:	b28c      	uxth	r4, r1
 800e5d4:	19e4      	adds	r4, r4, r7
 800e5d6:	0c0f      	lsrs	r7, r1, #16
 800e5d8:	1421      	asrs	r1, r4, #16
 800e5da:	1879      	adds	r1, r7, r1
 800e5dc:	b2a4      	uxth	r4, r4
 800e5de:	140f      	asrs	r7, r1, #16
 800e5e0:	0409      	lsls	r1, r1, #16
 800e5e2:	4321      	orrs	r1, r4
 800e5e4:	4664      	mov	r4, ip
 800e5e6:	c402      	stmia	r4!, {r1}
 800e5e8:	46a4      	mov	ip, r4
 800e5ea:	e7dd      	b.n	800e5a8 <__mdiff+0xd8>
 800e5ec:	3801      	subs	r0, #1
 800e5ee:	e7e9      	b.n	800e5c4 <__mdiff+0xf4>
 800e5f0:	08015c91 	.word	0x08015c91
 800e5f4:	08015d02 	.word	0x08015d02
 800e5f8:	00000237 	.word	0x00000237
 800e5fc:	00000245 	.word	0x00000245

0800e600 <__ulp>:
 800e600:	2000      	movs	r0, #0
 800e602:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <__ulp+0x30>)
 800e604:	4019      	ands	r1, r3
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <__ulp+0x34>)
 800e608:	18c9      	adds	r1, r1, r3
 800e60a:	4281      	cmp	r1, r0
 800e60c:	dc06      	bgt.n	800e61c <__ulp+0x1c>
 800e60e:	4249      	negs	r1, r1
 800e610:	150b      	asrs	r3, r1, #20
 800e612:	2b13      	cmp	r3, #19
 800e614:	dc03      	bgt.n	800e61e <__ulp+0x1e>
 800e616:	2180      	movs	r1, #128	; 0x80
 800e618:	0309      	lsls	r1, r1, #12
 800e61a:	4119      	asrs	r1, r3
 800e61c:	4770      	bx	lr
 800e61e:	3b14      	subs	r3, #20
 800e620:	2001      	movs	r0, #1
 800e622:	2b1e      	cmp	r3, #30
 800e624:	dc02      	bgt.n	800e62c <__ulp+0x2c>
 800e626:	2080      	movs	r0, #128	; 0x80
 800e628:	0600      	lsls	r0, r0, #24
 800e62a:	40d8      	lsrs	r0, r3
 800e62c:	2100      	movs	r1, #0
 800e62e:	e7f5      	b.n	800e61c <__ulp+0x1c>
 800e630:	7ff00000 	.word	0x7ff00000
 800e634:	fcc00000 	.word	0xfcc00000

0800e638 <__b2d>:
 800e638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e63a:	0006      	movs	r6, r0
 800e63c:	6903      	ldr	r3, [r0, #16]
 800e63e:	3614      	adds	r6, #20
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	18f3      	adds	r3, r6, r3
 800e644:	1f1d      	subs	r5, r3, #4
 800e646:	682c      	ldr	r4, [r5, #0]
 800e648:	000f      	movs	r7, r1
 800e64a:	0020      	movs	r0, r4
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	f7ff fd63 	bl	800e118 <__hi0bits>
 800e652:	2220      	movs	r2, #32
 800e654:	1a12      	subs	r2, r2, r0
 800e656:	603a      	str	r2, [r7, #0]
 800e658:	0003      	movs	r3, r0
 800e65a:	4a1c      	ldr	r2, [pc, #112]	; (800e6cc <__b2d+0x94>)
 800e65c:	280a      	cmp	r0, #10
 800e65e:	dc15      	bgt.n	800e68c <__b2d+0x54>
 800e660:	210b      	movs	r1, #11
 800e662:	0027      	movs	r7, r4
 800e664:	1a09      	subs	r1, r1, r0
 800e666:	40cf      	lsrs	r7, r1
 800e668:	433a      	orrs	r2, r7
 800e66a:	468c      	mov	ip, r1
 800e66c:	0011      	movs	r1, r2
 800e66e:	2200      	movs	r2, #0
 800e670:	42ae      	cmp	r6, r5
 800e672:	d202      	bcs.n	800e67a <__b2d+0x42>
 800e674:	9a01      	ldr	r2, [sp, #4]
 800e676:	3a08      	subs	r2, #8
 800e678:	6812      	ldr	r2, [r2, #0]
 800e67a:	3315      	adds	r3, #21
 800e67c:	409c      	lsls	r4, r3
 800e67e:	4663      	mov	r3, ip
 800e680:	0027      	movs	r7, r4
 800e682:	40da      	lsrs	r2, r3
 800e684:	4317      	orrs	r7, r2
 800e686:	0038      	movs	r0, r7
 800e688:	b003      	add	sp, #12
 800e68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e68c:	2700      	movs	r7, #0
 800e68e:	42ae      	cmp	r6, r5
 800e690:	d202      	bcs.n	800e698 <__b2d+0x60>
 800e692:	9d01      	ldr	r5, [sp, #4]
 800e694:	3d08      	subs	r5, #8
 800e696:	682f      	ldr	r7, [r5, #0]
 800e698:	210b      	movs	r1, #11
 800e69a:	4249      	negs	r1, r1
 800e69c:	468c      	mov	ip, r1
 800e69e:	449c      	add	ip, r3
 800e6a0:	2b0b      	cmp	r3, #11
 800e6a2:	d010      	beq.n	800e6c6 <__b2d+0x8e>
 800e6a4:	4661      	mov	r1, ip
 800e6a6:	2320      	movs	r3, #32
 800e6a8:	408c      	lsls	r4, r1
 800e6aa:	1a5b      	subs	r3, r3, r1
 800e6ac:	0039      	movs	r1, r7
 800e6ae:	40d9      	lsrs	r1, r3
 800e6b0:	430c      	orrs	r4, r1
 800e6b2:	4322      	orrs	r2, r4
 800e6b4:	0011      	movs	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	42b5      	cmp	r5, r6
 800e6ba:	d901      	bls.n	800e6c0 <__b2d+0x88>
 800e6bc:	3d04      	subs	r5, #4
 800e6be:	682a      	ldr	r2, [r5, #0]
 800e6c0:	4664      	mov	r4, ip
 800e6c2:	40a7      	lsls	r7, r4
 800e6c4:	e7dd      	b.n	800e682 <__b2d+0x4a>
 800e6c6:	4322      	orrs	r2, r4
 800e6c8:	0011      	movs	r1, r2
 800e6ca:	e7dc      	b.n	800e686 <__b2d+0x4e>
 800e6cc:	3ff00000 	.word	0x3ff00000

0800e6d0 <__d2b>:
 800e6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	0014      	movs	r4, r2
 800e6d6:	001d      	movs	r5, r3
 800e6d8:	9f08      	ldr	r7, [sp, #32]
 800e6da:	f7ff fc5b 	bl	800df94 <_Balloc>
 800e6de:	1e06      	subs	r6, r0, #0
 800e6e0:	d105      	bne.n	800e6ee <__d2b+0x1e>
 800e6e2:	0032      	movs	r2, r6
 800e6e4:	4b24      	ldr	r3, [pc, #144]	; (800e778 <__d2b+0xa8>)
 800e6e6:	4825      	ldr	r0, [pc, #148]	; (800e77c <__d2b+0xac>)
 800e6e8:	4925      	ldr	r1, [pc, #148]	; (800e780 <__d2b+0xb0>)
 800e6ea:	f002 ff17 	bl	801151c <__assert_func>
 800e6ee:	032b      	lsls	r3, r5, #12
 800e6f0:	006d      	lsls	r5, r5, #1
 800e6f2:	0b1b      	lsrs	r3, r3, #12
 800e6f4:	0d6d      	lsrs	r5, r5, #21
 800e6f6:	d125      	bne.n	800e744 <__d2b+0x74>
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	2c00      	cmp	r4, #0
 800e6fc:	d028      	beq.n	800e750 <__d2b+0x80>
 800e6fe:	4668      	mov	r0, sp
 800e700:	9400      	str	r4, [sp, #0]
 800e702:	f7ff fd23 	bl	800e14c <__lo0bits>
 800e706:	9b01      	ldr	r3, [sp, #4]
 800e708:	9900      	ldr	r1, [sp, #0]
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d01e      	beq.n	800e74c <__d2b+0x7c>
 800e70e:	2220      	movs	r2, #32
 800e710:	001c      	movs	r4, r3
 800e712:	1a12      	subs	r2, r2, r0
 800e714:	4094      	lsls	r4, r2
 800e716:	0022      	movs	r2, r4
 800e718:	40c3      	lsrs	r3, r0
 800e71a:	430a      	orrs	r2, r1
 800e71c:	6172      	str	r2, [r6, #20]
 800e71e:	9301      	str	r3, [sp, #4]
 800e720:	9c01      	ldr	r4, [sp, #4]
 800e722:	61b4      	str	r4, [r6, #24]
 800e724:	1e63      	subs	r3, r4, #1
 800e726:	419c      	sbcs	r4, r3
 800e728:	3401      	adds	r4, #1
 800e72a:	6134      	str	r4, [r6, #16]
 800e72c:	2d00      	cmp	r5, #0
 800e72e:	d017      	beq.n	800e760 <__d2b+0x90>
 800e730:	2435      	movs	r4, #53	; 0x35
 800e732:	4b14      	ldr	r3, [pc, #80]	; (800e784 <__d2b+0xb4>)
 800e734:	18ed      	adds	r5, r5, r3
 800e736:	182d      	adds	r5, r5, r0
 800e738:	603d      	str	r5, [r7, #0]
 800e73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73c:	1a24      	subs	r4, r4, r0
 800e73e:	601c      	str	r4, [r3, #0]
 800e740:	0030      	movs	r0, r6
 800e742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e744:	2280      	movs	r2, #128	; 0x80
 800e746:	0352      	lsls	r2, r2, #13
 800e748:	4313      	orrs	r3, r2
 800e74a:	e7d5      	b.n	800e6f8 <__d2b+0x28>
 800e74c:	6171      	str	r1, [r6, #20]
 800e74e:	e7e7      	b.n	800e720 <__d2b+0x50>
 800e750:	a801      	add	r0, sp, #4
 800e752:	f7ff fcfb 	bl	800e14c <__lo0bits>
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	2401      	movs	r4, #1
 800e75a:	6173      	str	r3, [r6, #20]
 800e75c:	3020      	adds	r0, #32
 800e75e:	e7e4      	b.n	800e72a <__d2b+0x5a>
 800e760:	4b09      	ldr	r3, [pc, #36]	; (800e788 <__d2b+0xb8>)
 800e762:	18c0      	adds	r0, r0, r3
 800e764:	4b09      	ldr	r3, [pc, #36]	; (800e78c <__d2b+0xbc>)
 800e766:	6038      	str	r0, [r7, #0]
 800e768:	18e3      	adds	r3, r4, r3
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	18f3      	adds	r3, r6, r3
 800e76e:	6958      	ldr	r0, [r3, #20]
 800e770:	f7ff fcd2 	bl	800e118 <__hi0bits>
 800e774:	0164      	lsls	r4, r4, #5
 800e776:	e7e0      	b.n	800e73a <__d2b+0x6a>
 800e778:	08015c91 	.word	0x08015c91
 800e77c:	08015d02 	.word	0x08015d02
 800e780:	0000030f 	.word	0x0000030f
 800e784:	fffffbcd 	.word	0xfffffbcd
 800e788:	fffffbce 	.word	0xfffffbce
 800e78c:	3fffffff 	.word	0x3fffffff

0800e790 <__ratio>:
 800e790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e792:	b087      	sub	sp, #28
 800e794:	000f      	movs	r7, r1
 800e796:	a904      	add	r1, sp, #16
 800e798:	0006      	movs	r6, r0
 800e79a:	f7ff ff4d 	bl	800e638 <__b2d>
 800e79e:	9000      	str	r0, [sp, #0]
 800e7a0:	9101      	str	r1, [sp, #4]
 800e7a2:	9c00      	ldr	r4, [sp, #0]
 800e7a4:	9d01      	ldr	r5, [sp, #4]
 800e7a6:	0038      	movs	r0, r7
 800e7a8:	a905      	add	r1, sp, #20
 800e7aa:	f7ff ff45 	bl	800e638 <__b2d>
 800e7ae:	9002      	str	r0, [sp, #8]
 800e7b0:	9103      	str	r1, [sp, #12]
 800e7b2:	9a02      	ldr	r2, [sp, #8]
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	6930      	ldr	r0, [r6, #16]
 800e7b8:	6939      	ldr	r1, [r7, #16]
 800e7ba:	9e04      	ldr	r6, [sp, #16]
 800e7bc:	1a40      	subs	r0, r0, r1
 800e7be:	9905      	ldr	r1, [sp, #20]
 800e7c0:	0140      	lsls	r0, r0, #5
 800e7c2:	1a71      	subs	r1, r6, r1
 800e7c4:	1841      	adds	r1, r0, r1
 800e7c6:	0508      	lsls	r0, r1, #20
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	dd07      	ble.n	800e7dc <__ratio+0x4c>
 800e7cc:	9901      	ldr	r1, [sp, #4]
 800e7ce:	1845      	adds	r5, r0, r1
 800e7d0:	0020      	movs	r0, r4
 800e7d2:	0029      	movs	r1, r5
 800e7d4:	f7f2 fb50 	bl	8000e78 <__aeabi_ddiv>
 800e7d8:	b007      	add	sp, #28
 800e7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7dc:	9903      	ldr	r1, [sp, #12]
 800e7de:	1a0b      	subs	r3, r1, r0
 800e7e0:	e7f6      	b.n	800e7d0 <__ratio+0x40>

0800e7e2 <__copybits>:
 800e7e2:	b570      	push	{r4, r5, r6, lr}
 800e7e4:	0014      	movs	r4, r2
 800e7e6:	0005      	movs	r5, r0
 800e7e8:	3901      	subs	r1, #1
 800e7ea:	6913      	ldr	r3, [r2, #16]
 800e7ec:	1149      	asrs	r1, r1, #5
 800e7ee:	3101      	adds	r1, #1
 800e7f0:	0089      	lsls	r1, r1, #2
 800e7f2:	3414      	adds	r4, #20
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	1841      	adds	r1, r0, r1
 800e7f8:	18e3      	adds	r3, r4, r3
 800e7fa:	42a3      	cmp	r3, r4
 800e7fc:	d80d      	bhi.n	800e81a <__copybits+0x38>
 800e7fe:	0014      	movs	r4, r2
 800e800:	3411      	adds	r4, #17
 800e802:	2500      	movs	r5, #0
 800e804:	429c      	cmp	r4, r3
 800e806:	d803      	bhi.n	800e810 <__copybits+0x2e>
 800e808:	1a9b      	subs	r3, r3, r2
 800e80a:	3b11      	subs	r3, #17
 800e80c:	089b      	lsrs	r3, r3, #2
 800e80e:	009d      	lsls	r5, r3, #2
 800e810:	2300      	movs	r3, #0
 800e812:	1940      	adds	r0, r0, r5
 800e814:	4281      	cmp	r1, r0
 800e816:	d803      	bhi.n	800e820 <__copybits+0x3e>
 800e818:	bd70      	pop	{r4, r5, r6, pc}
 800e81a:	cc40      	ldmia	r4!, {r6}
 800e81c:	c540      	stmia	r5!, {r6}
 800e81e:	e7ec      	b.n	800e7fa <__copybits+0x18>
 800e820:	c008      	stmia	r0!, {r3}
 800e822:	e7f7      	b.n	800e814 <__copybits+0x32>

0800e824 <__any_on>:
 800e824:	0002      	movs	r2, r0
 800e826:	6900      	ldr	r0, [r0, #16]
 800e828:	b510      	push	{r4, lr}
 800e82a:	3214      	adds	r2, #20
 800e82c:	114b      	asrs	r3, r1, #5
 800e82e:	4298      	cmp	r0, r3
 800e830:	db13      	blt.n	800e85a <__any_on+0x36>
 800e832:	dd0c      	ble.n	800e84e <__any_on+0x2a>
 800e834:	241f      	movs	r4, #31
 800e836:	0008      	movs	r0, r1
 800e838:	4020      	ands	r0, r4
 800e83a:	4221      	tst	r1, r4
 800e83c:	d007      	beq.n	800e84e <__any_on+0x2a>
 800e83e:	0099      	lsls	r1, r3, #2
 800e840:	588c      	ldr	r4, [r1, r2]
 800e842:	0021      	movs	r1, r4
 800e844:	40c1      	lsrs	r1, r0
 800e846:	4081      	lsls	r1, r0
 800e848:	2001      	movs	r0, #1
 800e84a:	428c      	cmp	r4, r1
 800e84c:	d104      	bne.n	800e858 <__any_on+0x34>
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	18d3      	adds	r3, r2, r3
 800e852:	4293      	cmp	r3, r2
 800e854:	d803      	bhi.n	800e85e <__any_on+0x3a>
 800e856:	2000      	movs	r0, #0
 800e858:	bd10      	pop	{r4, pc}
 800e85a:	0003      	movs	r3, r0
 800e85c:	e7f7      	b.n	800e84e <__any_on+0x2a>
 800e85e:	3b04      	subs	r3, #4
 800e860:	6819      	ldr	r1, [r3, #0]
 800e862:	2900      	cmp	r1, #0
 800e864:	d0f5      	beq.n	800e852 <__any_on+0x2e>
 800e866:	2001      	movs	r0, #1
 800e868:	e7f6      	b.n	800e858 <__any_on+0x34>

0800e86a <__ascii_wctomb>:
 800e86a:	0003      	movs	r3, r0
 800e86c:	1e08      	subs	r0, r1, #0
 800e86e:	d005      	beq.n	800e87c <__ascii_wctomb+0x12>
 800e870:	2aff      	cmp	r2, #255	; 0xff
 800e872:	d904      	bls.n	800e87e <__ascii_wctomb+0x14>
 800e874:	228a      	movs	r2, #138	; 0x8a
 800e876:	2001      	movs	r0, #1
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	4240      	negs	r0, r0
 800e87c:	4770      	bx	lr
 800e87e:	2001      	movs	r0, #1
 800e880:	700a      	strb	r2, [r1, #0]
 800e882:	e7fb      	b.n	800e87c <__ascii_wctomb+0x12>

0800e884 <_svfprintf_r>:
 800e884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e886:	b0d9      	sub	sp, #356	; 0x164
 800e888:	001c      	movs	r4, r3
 800e88a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e88c:	9208      	str	r2, [sp, #32]
 800e88e:	900a      	str	r0, [sp, #40]	; 0x28
 800e890:	f002 fdae 	bl	80113f0 <_localeconv_r>
 800e894:	6803      	ldr	r3, [r0, #0]
 800e896:	0018      	movs	r0, r3
 800e898:	931c      	str	r3, [sp, #112]	; 0x70
 800e89a:	f7f1 fc33 	bl	8000104 <strlen>
 800e89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8a0:	9016      	str	r0, [sp, #88]	; 0x58
 800e8a2:	899b      	ldrh	r3, [r3, #12]
 800e8a4:	061b      	lsls	r3, r3, #24
 800e8a6:	d517      	bpl.n	800e8d8 <_svfprintf_r+0x54>
 800e8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d113      	bne.n	800e8d8 <_svfprintf_r+0x54>
 800e8b0:	2140      	movs	r1, #64	; 0x40
 800e8b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8b4:	f7fd fa94 	bl	800bde0 <_malloc_r>
 800e8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8ba:	6018      	str	r0, [r3, #0]
 800e8bc:	6118      	str	r0, [r3, #16]
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d107      	bne.n	800e8d2 <_svfprintf_r+0x4e>
 800e8c2:	230c      	movs	r3, #12
 800e8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	3b0d      	subs	r3, #13
 800e8ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e8ce:	b059      	add	sp, #356	; 0x164
 800e8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d2:	2340      	movs	r3, #64	; 0x40
 800e8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8d6:	6153      	str	r3, [r2, #20]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	2200      	movs	r2, #0
 800e8dc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8de:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8e0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	9214      	str	r2, [sp, #80]	; 0x50
 800e8e6:	9315      	str	r3, [sp, #84]	; 0x54
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	af2f      	add	r7, sp, #188	; 0xbc
 800e8ec:	972c      	str	r7, [sp, #176]	; 0xb0
 800e8ee:	931f      	str	r3, [sp, #124]	; 0x7c
 800e8f0:	931e      	str	r3, [sp, #120]	; 0x78
 800e8f2:	9312      	str	r3, [sp, #72]	; 0x48
 800e8f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8f6:	931d      	str	r3, [sp, #116]	; 0x74
 800e8f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8fa:	9d08      	ldr	r5, [sp, #32]
 800e8fc:	782b      	ldrb	r3, [r5, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <_svfprintf_r+0x84>
 800e902:	2b25      	cmp	r3, #37	; 0x25
 800e904:	d000      	beq.n	800e908 <_svfprintf_r+0x84>
 800e906:	e091      	b.n	800ea2c <_svfprintf_r+0x1a8>
 800e908:	9b08      	ldr	r3, [sp, #32]
 800e90a:	1aee      	subs	r6, r5, r3
 800e90c:	429d      	cmp	r5, r3
 800e90e:	d016      	beq.n	800e93e <_svfprintf_r+0xba>
 800e910:	603b      	str	r3, [r7, #0]
 800e912:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e914:	607e      	str	r6, [r7, #4]
 800e916:	199b      	adds	r3, r3, r6
 800e918:	932e      	str	r3, [sp, #184]	; 0xb8
 800e91a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e91c:	3708      	adds	r7, #8
 800e91e:	3301      	adds	r3, #1
 800e920:	932d      	str	r3, [sp, #180]	; 0xb4
 800e922:	2b07      	cmp	r3, #7
 800e924:	dd08      	ble.n	800e938 <_svfprintf_r+0xb4>
 800e926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e928:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e92a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e92c:	f004 f83a 	bl	80129a4 <__ssprint_r>
 800e930:	2800      	cmp	r0, #0
 800e932:	d000      	beq.n	800e936 <_svfprintf_r+0xb2>
 800e934:	e1cf      	b.n	800ecd6 <_svfprintf_r+0x452>
 800e936:	af2f      	add	r7, sp, #188	; 0xbc
 800e938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e93a:	199b      	adds	r3, r3, r6
 800e93c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e93e:	782b      	ldrb	r3, [r5, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <_svfprintf_r+0xc4>
 800e944:	f001 f99e 	bl	800fc84 <_svfprintf_r+0x1400>
 800e948:	221b      	movs	r2, #27
 800e94a:	2300      	movs	r3, #0
 800e94c:	a91e      	add	r1, sp, #120	; 0x78
 800e94e:	1852      	adds	r2, r2, r1
 800e950:	7013      	strb	r3, [r2, #0]
 800e952:	2201      	movs	r2, #1
 800e954:	001e      	movs	r6, r3
 800e956:	4252      	negs	r2, r2
 800e958:	3501      	adds	r5, #1
 800e95a:	9209      	str	r2, [sp, #36]	; 0x24
 800e95c:	9318      	str	r3, [sp, #96]	; 0x60
 800e95e:	1c6b      	adds	r3, r5, #1
 800e960:	9313      	str	r3, [sp, #76]	; 0x4c
 800e962:	782b      	ldrb	r3, [r5, #0]
 800e964:	930f      	str	r3, [sp, #60]	; 0x3c
 800e966:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e968:	3820      	subs	r0, #32
 800e96a:	285a      	cmp	r0, #90	; 0x5a
 800e96c:	d901      	bls.n	800e972 <_svfprintf_r+0xee>
 800e96e:	f000 fe20 	bl	800f5b2 <_svfprintf_r+0xd2e>
 800e972:	f7f1 fbd9 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e976:	0078      	.short	0x0078
 800e978:	061e061e 	.word	0x061e061e
 800e97c:	061e0082 	.word	0x061e0082
 800e980:	061e061e 	.word	0x061e061e
 800e984:	061e005d 	.word	0x061e005d
 800e988:	0084061e 	.word	0x0084061e
 800e98c:	061e008c 	.word	0x061e008c
 800e990:	0091008a 	.word	0x0091008a
 800e994:	00b2061e 	.word	0x00b2061e
 800e998:	00b400b4 	.word	0x00b400b4
 800e99c:	00b400b4 	.word	0x00b400b4
 800e9a0:	00b400b4 	.word	0x00b400b4
 800e9a4:	00b400b4 	.word	0x00b400b4
 800e9a8:	061e00b4 	.word	0x061e00b4
 800e9ac:	061e061e 	.word	0x061e061e
 800e9b0:	061e061e 	.word	0x061e061e
 800e9b4:	061e061e 	.word	0x061e061e
 800e9b8:	061e013b 	.word	0x061e013b
 800e9bc:	00f400e0 	.word	0x00f400e0
 800e9c0:	013b013b 	.word	0x013b013b
 800e9c4:	061e013b 	.word	0x061e013b
 800e9c8:	061e061e 	.word	0x061e061e
 800e9cc:	00c7061e 	.word	0x00c7061e
 800e9d0:	061e061e 	.word	0x061e061e
 800e9d4:	061e04c7 	.word	0x061e04c7
 800e9d8:	061e061e 	.word	0x061e061e
 800e9dc:	061e050a 	.word	0x061e050a
 800e9e0:	061e052a 	.word	0x061e052a
 800e9e4:	055c061e 	.word	0x055c061e
 800e9e8:	061e061e 	.word	0x061e061e
 800e9ec:	061e061e 	.word	0x061e061e
 800e9f0:	061e061e 	.word	0x061e061e
 800e9f4:	061e061e 	.word	0x061e061e
 800e9f8:	061e013b 	.word	0x061e013b
 800e9fc:	00f600e0 	.word	0x00f600e0
 800ea00:	013b013b 	.word	0x013b013b
 800ea04:	00c9013b 	.word	0x00c9013b
 800ea08:	00dc00f6 	.word	0x00dc00f6
 800ea0c:	00d5061e 	.word	0x00d5061e
 800ea10:	04a7061e 	.word	0x04a7061e
 800ea14:	04fa04c9 	.word	0x04fa04c9
 800ea18:	061e00dc 	.word	0x061e00dc
 800ea1c:	0080050a 	.word	0x0080050a
 800ea20:	061e052c 	.word	0x061e052c
 800ea24:	057c061e 	.word	0x057c061e
 800ea28:	0080061e 	.word	0x0080061e
 800ea2c:	3501      	adds	r5, #1
 800ea2e:	e765      	b.n	800e8fc <_svfprintf_r+0x78>
 800ea30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea32:	f002 fcdd 	bl	80113f0 <_localeconv_r>
 800ea36:	6843      	ldr	r3, [r0, #4]
 800ea38:	0018      	movs	r0, r3
 800ea3a:	931d      	str	r3, [sp, #116]	; 0x74
 800ea3c:	f7f1 fb62 	bl	8000104 <strlen>
 800ea40:	901b      	str	r0, [sp, #108]	; 0x6c
 800ea42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea44:	f002 fcd4 	bl	80113f0 <_localeconv_r>
 800ea48:	6883      	ldr	r3, [r0, #8]
 800ea4a:	9312      	str	r3, [sp, #72]	; 0x48
 800ea4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d011      	beq.n	800ea76 <_svfprintf_r+0x1f2>
 800ea52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00e      	beq.n	800ea76 <_svfprintf_r+0x1f2>
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00b      	beq.n	800ea76 <_svfprintf_r+0x1f2>
 800ea5e:	2380      	movs	r3, #128	; 0x80
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	431e      	orrs	r6, r3
 800ea64:	e007      	b.n	800ea76 <_svfprintf_r+0x1f2>
 800ea66:	231b      	movs	r3, #27
 800ea68:	aa1e      	add	r2, sp, #120	; 0x78
 800ea6a:	189b      	adds	r3, r3, r2
 800ea6c:	781a      	ldrb	r2, [r3, #0]
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	d101      	bne.n	800ea76 <_svfprintf_r+0x1f2>
 800ea72:	3220      	adds	r2, #32
 800ea74:	701a      	strb	r2, [r3, #0]
 800ea76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea78:	e771      	b.n	800e95e <_svfprintf_r+0xda>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e7f1      	b.n	800ea62 <_svfprintf_r+0x1de>
 800ea7e:	cc08      	ldmia	r4!, {r3}
 800ea80:	9318      	str	r3, [sp, #96]	; 0x60
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	daf7      	bge.n	800ea76 <_svfprintf_r+0x1f2>
 800ea86:	425b      	negs	r3, r3
 800ea88:	9318      	str	r3, [sp, #96]	; 0x60
 800ea8a:	2304      	movs	r3, #4
 800ea8c:	e7e9      	b.n	800ea62 <_svfprintf_r+0x1de>
 800ea8e:	231b      	movs	r3, #27
 800ea90:	aa1e      	add	r2, sp, #120	; 0x78
 800ea92:	189b      	adds	r3, r3, r2
 800ea94:	222b      	movs	r2, #43	; 0x2b
 800ea96:	e7ed      	b.n	800ea74 <_svfprintf_r+0x1f0>
 800ea98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea9c:	7812      	ldrb	r2, [r2, #0]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	920f      	str	r2, [sp, #60]	; 0x3c
 800eaa2:	2a2a      	cmp	r2, #42	; 0x2a
 800eaa4:	d010      	beq.n	800eac8 <_svfprintf_r+0x244>
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	9209      	str	r2, [sp, #36]	; 0x24
 800eaaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eaac:	9313      	str	r3, [sp, #76]	; 0x4c
 800eaae:	3a30      	subs	r2, #48	; 0x30
 800eab0:	2a09      	cmp	r2, #9
 800eab2:	d900      	bls.n	800eab6 <_svfprintf_r+0x232>
 800eab4:	e757      	b.n	800e966 <_svfprintf_r+0xe2>
 800eab6:	200a      	movs	r0, #10
 800eab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaba:	4341      	muls	r1, r0
 800eabc:	188a      	adds	r2, r1, r2
 800eabe:	9209      	str	r2, [sp, #36]	; 0x24
 800eac0:	781a      	ldrb	r2, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	920f      	str	r2, [sp, #60]	; 0x3c
 800eac6:	e7f0      	b.n	800eaaa <_svfprintf_r+0x226>
 800eac8:	cc04      	ldmia	r4!, {r2}
 800eaca:	9209      	str	r2, [sp, #36]	; 0x24
 800eacc:	2a00      	cmp	r2, #0
 800eace:	da02      	bge.n	800ead6 <_svfprintf_r+0x252>
 800ead0:	2201      	movs	r2, #1
 800ead2:	4252      	negs	r2, r2
 800ead4:	9209      	str	r2, [sp, #36]	; 0x24
 800ead6:	9313      	str	r3, [sp, #76]	; 0x4c
 800ead8:	e7cd      	b.n	800ea76 <_svfprintf_r+0x1f2>
 800eada:	2380      	movs	r3, #128	; 0x80
 800eadc:	e7c1      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eade:	2200      	movs	r2, #0
 800eae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eae2:	9218      	str	r2, [sp, #96]	; 0x60
 800eae4:	210a      	movs	r1, #10
 800eae6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eae8:	434a      	muls	r2, r1
 800eaea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eaec:	3930      	subs	r1, #48	; 0x30
 800eaee:	188a      	adds	r2, r1, r2
 800eaf0:	9218      	str	r2, [sp, #96]	; 0x60
 800eaf2:	001a      	movs	r2, r3
 800eaf4:	7812      	ldrb	r2, [r2, #0]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	920f      	str	r2, [sp, #60]	; 0x3c
 800eafa:	3a30      	subs	r2, #48	; 0x30
 800eafc:	9313      	str	r3, [sp, #76]	; 0x4c
 800eafe:	2a09      	cmp	r2, #9
 800eb00:	d9f0      	bls.n	800eae4 <_svfprintf_r+0x260>
 800eb02:	e730      	b.n	800e966 <_svfprintf_r+0xe2>
 800eb04:	2308      	movs	r3, #8
 800eb06:	e7ac      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eb08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b68      	cmp	r3, #104	; 0x68
 800eb0e:	d105      	bne.n	800eb1c <_svfprintf_r+0x298>
 800eb10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb12:	3301      	adds	r3, #1
 800eb14:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb16:	2380      	movs	r3, #128	; 0x80
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	e7a2      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eb1c:	2340      	movs	r3, #64	; 0x40
 800eb1e:	e7a0      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eb20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b6c      	cmp	r3, #108	; 0x6c
 800eb26:	d104      	bne.n	800eb32 <_svfprintf_r+0x2ae>
 800eb28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb2e:	2320      	movs	r3, #32
 800eb30:	e797      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eb32:	2310      	movs	r3, #16
 800eb34:	e795      	b.n	800ea62 <_svfprintf_r+0x1de>
 800eb36:	0021      	movs	r1, r4
 800eb38:	c904      	ldmia	r1!, {r2}
 800eb3a:	ab3f      	add	r3, sp, #252	; 0xfc
 800eb3c:	910d      	str	r1, [sp, #52]	; 0x34
 800eb3e:	211b      	movs	r1, #27
 800eb40:	701a      	strb	r2, [r3, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	a81e      	add	r0, sp, #120	; 0x78
 800eb46:	1809      	adds	r1, r1, r0
 800eb48:	700a      	strb	r2, [r1, #0]
 800eb4a:	920c      	str	r2, [sp, #48]	; 0x30
 800eb4c:	3201      	adds	r2, #1
 800eb4e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb50:	2200      	movs	r2, #0
 800eb52:	9308      	str	r3, [sp, #32]
 800eb54:	0015      	movs	r5, r2
 800eb56:	9219      	str	r2, [sp, #100]	; 0x64
 800eb58:	9210      	str	r2, [sp, #64]	; 0x40
 800eb5a:	9211      	str	r2, [sp, #68]	; 0x44
 800eb5c:	e1f1      	b.n	800ef42 <_svfprintf_r+0x6be>
 800eb5e:	2310      	movs	r3, #16
 800eb60:	431e      	orrs	r6, r3
 800eb62:	06b3      	lsls	r3, r6, #26
 800eb64:	d531      	bpl.n	800ebca <_svfprintf_r+0x346>
 800eb66:	2307      	movs	r3, #7
 800eb68:	3407      	adds	r4, #7
 800eb6a:	439c      	bics	r4, r3
 800eb6c:	0022      	movs	r2, r4
 800eb6e:	ca18      	ldmia	r2!, {r3, r4}
 800eb70:	9306      	str	r3, [sp, #24]
 800eb72:	9407      	str	r4, [sp, #28]
 800eb74:	920d      	str	r2, [sp, #52]	; 0x34
 800eb76:	9a07      	ldr	r2, [sp, #28]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	2a00      	cmp	r2, #0
 800eb7c:	da0b      	bge.n	800eb96 <_svfprintf_r+0x312>
 800eb7e:	9c06      	ldr	r4, [sp, #24]
 800eb80:	9d07      	ldr	r5, [sp, #28]
 800eb82:	2200      	movs	r2, #0
 800eb84:	4261      	negs	r1, r4
 800eb86:	41aa      	sbcs	r2, r5
 800eb88:	9106      	str	r1, [sp, #24]
 800eb8a:	9207      	str	r2, [sp, #28]
 800eb8c:	221b      	movs	r2, #27
 800eb8e:	a91e      	add	r1, sp, #120	; 0x78
 800eb90:	1852      	adds	r2, r2, r1
 800eb92:	212d      	movs	r1, #45	; 0x2d
 800eb94:	7011      	strb	r1, [r2, #0]
 800eb96:	9907      	ldr	r1, [sp, #28]
 800eb98:	9a06      	ldr	r2, [sp, #24]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb9e:	3101      	adds	r1, #1
 800eba0:	d101      	bne.n	800eba6 <_svfprintf_r+0x322>
 800eba2:	f001 f87b 	bl	800fc9c <_svfprintf_r+0x1418>
 800eba6:	2180      	movs	r1, #128	; 0x80
 800eba8:	0034      	movs	r4, r6
 800ebaa:	438c      	bics	r4, r1
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	d001      	beq.n	800ebb4 <_svfprintf_r+0x330>
 800ebb0:	f001 f879 	bl	800fca6 <_svfprintf_r+0x1422>
 800ebb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb6:	2a00      	cmp	r2, #0
 800ebb8:	d101      	bne.n	800ebbe <_svfprintf_r+0x33a>
 800ebba:	f000 fcef 	bl	800f59c <_svfprintf_r+0xd18>
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d001      	beq.n	800ebc6 <_svfprintf_r+0x342>
 800ebc2:	f001 f874 	bl	800fcae <_svfprintf_r+0x142a>
 800ebc6:	f000 fc79 	bl	800f4bc <_svfprintf_r+0xc38>
 800ebca:	0022      	movs	r2, r4
 800ebcc:	ca08      	ldmia	r2!, {r3}
 800ebce:	920d      	str	r2, [sp, #52]	; 0x34
 800ebd0:	06f2      	lsls	r2, r6, #27
 800ebd2:	d503      	bpl.n	800ebdc <_svfprintf_r+0x358>
 800ebd4:	9306      	str	r3, [sp, #24]
 800ebd6:	17db      	asrs	r3, r3, #31
 800ebd8:	9307      	str	r3, [sp, #28]
 800ebda:	e7cc      	b.n	800eb76 <_svfprintf_r+0x2f2>
 800ebdc:	0672      	lsls	r2, r6, #25
 800ebde:	d501      	bpl.n	800ebe4 <_svfprintf_r+0x360>
 800ebe0:	b21b      	sxth	r3, r3
 800ebe2:	e7f7      	b.n	800ebd4 <_svfprintf_r+0x350>
 800ebe4:	05b2      	lsls	r2, r6, #22
 800ebe6:	d5f5      	bpl.n	800ebd4 <_svfprintf_r+0x350>
 800ebe8:	b25b      	sxtb	r3, r3
 800ebea:	e7f3      	b.n	800ebd4 <_svfprintf_r+0x350>
 800ebec:	2307      	movs	r3, #7
 800ebee:	3407      	adds	r4, #7
 800ebf0:	439c      	bics	r4, r3
 800ebf2:	0022      	movs	r2, r4
 800ebf4:	ca18      	ldmia	r2!, {r3, r4}
 800ebf6:	920d      	str	r2, [sp, #52]	; 0x34
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	9314      	str	r3, [sp, #80]	; 0x50
 800ebfc:	9415      	str	r4, [sp, #84]	; 0x54
 800ebfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec00:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ec02:	005c      	lsls	r4, r3, #1
 800ec04:	0864      	lsrs	r4, r4, #1
 800ec06:	0028      	movs	r0, r5
 800ec08:	0021      	movs	r1, r4
 800ec0a:	4b3e      	ldr	r3, [pc, #248]	; (800ed04 <_svfprintf_r+0x480>)
 800ec0c:	4252      	negs	r2, r2
 800ec0e:	f7f3 fb71 	bl	80022f4 <__aeabi_dcmpun>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d126      	bne.n	800ec64 <_svfprintf_r+0x3e0>
 800ec16:	2201      	movs	r2, #1
 800ec18:	0028      	movs	r0, r5
 800ec1a:	0021      	movs	r1, r4
 800ec1c:	4b39      	ldr	r3, [pc, #228]	; (800ed04 <_svfprintf_r+0x480>)
 800ec1e:	4252      	negs	r2, r2
 800ec20:	f7f1 fc22 	bl	8000468 <__aeabi_dcmple>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d11d      	bne.n	800ec64 <_svfprintf_r+0x3e0>
 800ec28:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ec2a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f7f1 fc10 	bl	8000454 <__aeabi_dcmplt>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d004      	beq.n	800ec42 <_svfprintf_r+0x3be>
 800ec38:	231b      	movs	r3, #27
 800ec3a:	aa1e      	add	r2, sp, #120	; 0x78
 800ec3c:	189b      	adds	r3, r3, r2
 800ec3e:	222d      	movs	r2, #45	; 0x2d
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	4b31      	ldr	r3, [pc, #196]	; (800ed08 <_svfprintf_r+0x484>)
 800ec44:	9308      	str	r3, [sp, #32]
 800ec46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec48:	2b47      	cmp	r3, #71	; 0x47
 800ec4a:	dd01      	ble.n	800ec50 <_svfprintf_r+0x3cc>
 800ec4c:	4b2f      	ldr	r3, [pc, #188]	; (800ed0c <_svfprintf_r+0x488>)
 800ec4e:	9308      	str	r3, [sp, #32]
 800ec50:	2380      	movs	r3, #128	; 0x80
 800ec52:	439e      	bics	r6, r3
 800ec54:	2300      	movs	r3, #0
 800ec56:	930c      	str	r3, [sp, #48]	; 0x30
 800ec58:	3303      	adds	r3, #3
 800ec5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9319      	str	r3, [sp, #100]	; 0x64
 800ec60:	f000 fc78 	bl	800f554 <_svfprintf_r+0xcd0>
 800ec64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec68:	0010      	movs	r0, r2
 800ec6a:	0019      	movs	r1, r3
 800ec6c:	f7f3 fb42 	bl	80022f4 <__aeabi_dcmpun>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d00e      	beq.n	800ec92 <_svfprintf_r+0x40e>
 800ec74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da04      	bge.n	800ec84 <_svfprintf_r+0x400>
 800ec7a:	231b      	movs	r3, #27
 800ec7c:	aa1e      	add	r2, sp, #120	; 0x78
 800ec7e:	189b      	adds	r3, r3, r2
 800ec80:	222d      	movs	r2, #45	; 0x2d
 800ec82:	701a      	strb	r2, [r3, #0]
 800ec84:	4b22      	ldr	r3, [pc, #136]	; (800ed10 <_svfprintf_r+0x48c>)
 800ec86:	9308      	str	r3, [sp, #32]
 800ec88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec8a:	2b47      	cmp	r3, #71	; 0x47
 800ec8c:	dde0      	ble.n	800ec50 <_svfprintf_r+0x3cc>
 800ec8e:	4b21      	ldr	r3, [pc, #132]	; (800ed14 <_svfprintf_r+0x490>)
 800ec90:	e7dd      	b.n	800ec4e <_svfprintf_r+0x3ca>
 800ec92:	2320      	movs	r3, #32
 800ec94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec96:	439a      	bics	r2, r3
 800ec98:	9210      	str	r2, [sp, #64]	; 0x40
 800ec9a:	2a41      	cmp	r2, #65	; 0x41
 800ec9c:	d123      	bne.n	800ece6 <_svfprintf_r+0x462>
 800ec9e:	2230      	movs	r2, #48	; 0x30
 800eca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eca2:	ab25      	add	r3, sp, #148	; 0x94
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	3248      	adds	r2, #72	; 0x48
 800eca8:	2961      	cmp	r1, #97	; 0x61
 800ecaa:	d000      	beq.n	800ecae <_svfprintf_r+0x42a>
 800ecac:	3a20      	subs	r2, #32
 800ecae:	705a      	strb	r2, [r3, #1]
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	431e      	orrs	r6, r3
 800ecb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb6:	2b63      	cmp	r3, #99	; 0x63
 800ecb8:	dd2e      	ble.n	800ed18 <_svfprintf_r+0x494>
 800ecba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecbc:	1c59      	adds	r1, r3, #1
 800ecbe:	f7fd f88f 	bl	800bde0 <_malloc_r>
 800ecc2:	9008      	str	r0, [sp, #32]
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d000      	beq.n	800ecca <_svfprintf_r+0x446>
 800ecc8:	e216      	b.n	800f0f8 <_svfprintf_r+0x874>
 800ecca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eccc:	899a      	ldrh	r2, [r3, #12]
 800ecce:	2340      	movs	r3, #64	; 0x40
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecd4:	8193      	strh	r3, [r2, #12]
 800ecd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecd8:	899b      	ldrh	r3, [r3, #12]
 800ecda:	065b      	lsls	r3, r3, #25
 800ecdc:	d400      	bmi.n	800ece0 <_svfprintf_r+0x45c>
 800ecde:	e5f5      	b.n	800e8cc <_svfprintf_r+0x48>
 800ece0:	2301      	movs	r3, #1
 800ece2:	425b      	negs	r3, r3
 800ece4:	e5f1      	b.n	800e8ca <_svfprintf_r+0x46>
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	900c      	str	r0, [sp, #48]	; 0x30
 800ecea:	3301      	adds	r3, #1
 800ecec:	d100      	bne.n	800ecf0 <_svfprintf_r+0x46c>
 800ecee:	e206      	b.n	800f0fe <_svfprintf_r+0x87a>
 800ecf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecf2:	2b47      	cmp	r3, #71	; 0x47
 800ecf4:	d114      	bne.n	800ed20 <_svfprintf_r+0x49c>
 800ecf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d111      	bne.n	800ed20 <_svfprintf_r+0x49c>
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ed00:	e00e      	b.n	800ed20 <_svfprintf_r+0x49c>
 800ed02:	46c0      	nop			; (mov r8, r8)
 800ed04:	7fefffff 	.word	0x7fefffff
 800ed08:	08015e5c 	.word	0x08015e5c
 800ed0c:	08015e60 	.word	0x08015e60
 800ed10:	08015e64 	.word	0x08015e64
 800ed14:	08015e68 	.word	0x08015e68
 800ed18:	2300      	movs	r3, #0
 800ed1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed1c:	ab3f      	add	r3, sp, #252	; 0xfc
 800ed1e:	9308      	str	r3, [sp, #32]
 800ed20:	2380      	movs	r3, #128	; 0x80
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4333      	orrs	r3, r6
 800ed26:	931a      	str	r3, [sp, #104]	; 0x68
 800ed28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	db00      	blt.n	800ed32 <_svfprintf_r+0x4ae>
 800ed30:	e1e7      	b.n	800f102 <_svfprintf_r+0x87e>
 800ed32:	2280      	movs	r2, #128	; 0x80
 800ed34:	0612      	lsls	r2, r2, #24
 800ed36:	4694      	mov	ip, r2
 800ed38:	4463      	add	r3, ip
 800ed3a:	930e      	str	r3, [sp, #56]	; 0x38
 800ed3c:	232d      	movs	r3, #45	; 0x2d
 800ed3e:	9322      	str	r3, [sp, #136]	; 0x88
 800ed40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed42:	2b41      	cmp	r3, #65	; 0x41
 800ed44:	d000      	beq.n	800ed48 <_svfprintf_r+0x4c4>
 800ed46:	e1f5      	b.n	800f134 <_svfprintf_r+0x8b0>
 800ed48:	0028      	movs	r0, r5
 800ed4a:	aa26      	add	r2, sp, #152	; 0x98
 800ed4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed4e:	f002 fb73 	bl	8011438 <frexp>
 800ed52:	23ff      	movs	r3, #255	; 0xff
 800ed54:	2200      	movs	r2, #0
 800ed56:	059b      	lsls	r3, r3, #22
 800ed58:	f7f2 fc88 	bl	800166c <__aeabi_dmul>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	0004      	movs	r4, r0
 800ed62:	000d      	movs	r5, r1
 800ed64:	f7f1 fb70 	bl	8000448 <__aeabi_dcmpeq>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d001      	beq.n	800ed70 <_svfprintf_r+0x4ec>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	9326      	str	r3, [sp, #152]	; 0x98
 800ed70:	4bda      	ldr	r3, [pc, #872]	; (800f0dc <_svfprintf_r+0x858>)
 800ed72:	9319      	str	r3, [sp, #100]	; 0x64
 800ed74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed76:	2b61      	cmp	r3, #97	; 0x61
 800ed78:	d001      	beq.n	800ed7e <_svfprintf_r+0x4fa>
 800ed7a:	4bd9      	ldr	r3, [pc, #868]	; (800f0e0 <_svfprintf_r+0x85c>)
 800ed7c:	9319      	str	r3, [sp, #100]	; 0x64
 800ed7e:	9b08      	ldr	r3, [sp, #32]
 800ed80:	930e      	str	r3, [sp, #56]	; 0x38
 800ed82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed84:	3b01      	subs	r3, #1
 800ed86:	9311      	str	r3, [sp, #68]	; 0x44
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4bd6      	ldr	r3, [pc, #856]	; (800f0e4 <_svfprintf_r+0x860>)
 800ed8c:	0020      	movs	r0, r4
 800ed8e:	0029      	movs	r1, r5
 800ed90:	f7f2 fc6c 	bl	800166c <__aeabi_dmul>
 800ed94:	000d      	movs	r5, r1
 800ed96:	0004      	movs	r4, r0
 800ed98:	f7f3 faca 	bl	8002330 <__aeabi_d2iz>
 800ed9c:	9021      	str	r0, [sp, #132]	; 0x84
 800ed9e:	f7f3 fafd 	bl	800239c <__aeabi_i2d>
 800eda2:	0002      	movs	r2, r0
 800eda4:	000b      	movs	r3, r1
 800eda6:	0020      	movs	r0, r4
 800eda8:	0029      	movs	r1, r5
 800edaa:	f7f2 ff21 	bl	8001bf0 <__aeabi_dsub>
 800edae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edb0:	000d      	movs	r5, r1
 800edb2:	001a      	movs	r2, r3
 800edb4:	3201      	adds	r2, #1
 800edb6:	9921      	ldr	r1, [sp, #132]	; 0x84
 800edb8:	920e      	str	r2, [sp, #56]	; 0x38
 800edba:	9223      	str	r2, [sp, #140]	; 0x8c
 800edbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800edbe:	0004      	movs	r4, r0
 800edc0:	5c52      	ldrb	r2, [r2, r1]
 800edc2:	701a      	strb	r2, [r3, #0]
 800edc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edc6:	9320      	str	r3, [sp, #128]	; 0x80
 800edc8:	3301      	adds	r3, #1
 800edca:	d00a      	beq.n	800ede2 <_svfprintf_r+0x55e>
 800edcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edce:	2200      	movs	r2, #0
 800edd0:	3b01      	subs	r3, #1
 800edd2:	9311      	str	r3, [sp, #68]	; 0x44
 800edd4:	0020      	movs	r0, r4
 800edd6:	2300      	movs	r3, #0
 800edd8:	0029      	movs	r1, r5
 800edda:	f7f1 fb35 	bl	8000448 <__aeabi_dcmpeq>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d0d2      	beq.n	800ed88 <_svfprintf_r+0x504>
 800ede2:	2200      	movs	r2, #0
 800ede4:	0020      	movs	r0, r4
 800ede6:	0029      	movs	r1, r5
 800ede8:	4bbf      	ldr	r3, [pc, #764]	; (800f0e8 <_svfprintf_r+0x864>)
 800edea:	f7f1 fb47 	bl	800047c <__aeabi_dcmpgt>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d10c      	bne.n	800ee0c <_svfprintf_r+0x588>
 800edf2:	2200      	movs	r2, #0
 800edf4:	0020      	movs	r0, r4
 800edf6:	0029      	movs	r1, r5
 800edf8:	4bbb      	ldr	r3, [pc, #748]	; (800f0e8 <_svfprintf_r+0x864>)
 800edfa:	f7f1 fb25 	bl	8000448 <__aeabi_dcmpeq>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d100      	bne.n	800ee04 <_svfprintf_r+0x580>
 800ee02:	e191      	b.n	800f128 <_svfprintf_r+0x8a4>
 800ee04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d400      	bmi.n	800ee0c <_svfprintf_r+0x588>
 800ee0a:	e18d      	b.n	800f128 <_svfprintf_r+0x8a4>
 800ee0c:	2030      	movs	r0, #48	; 0x30
 800ee0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee10:	932a      	str	r3, [sp, #168]	; 0xa8
 800ee12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee14:	7bdb      	ldrb	r3, [r3, #15]
 800ee16:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ee18:	3a01      	subs	r2, #1
 800ee1a:	922a      	str	r2, [sp, #168]	; 0xa8
 800ee1c:	7811      	ldrb	r1, [r2, #0]
 800ee1e:	4299      	cmp	r1, r3
 800ee20:	d100      	bne.n	800ee24 <_svfprintf_r+0x5a0>
 800ee22:	e171      	b.n	800f108 <_svfprintf_r+0x884>
 800ee24:	1c4b      	adds	r3, r1, #1
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2939      	cmp	r1, #57	; 0x39
 800ee2a:	d101      	bne.n	800ee30 <_svfprintf_r+0x5ac>
 800ee2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee2e:	7a9b      	ldrb	r3, [r3, #10]
 800ee30:	7013      	strb	r3, [r2, #0]
 800ee32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee34:	9a08      	ldr	r2, [sp, #32]
 800ee36:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ee38:	1a9b      	subs	r3, r3, r2
 800ee3a:	930e      	str	r3, [sp, #56]	; 0x38
 800ee3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee3e:	2b47      	cmp	r3, #71	; 0x47
 800ee40:	d000      	beq.n	800ee44 <_svfprintf_r+0x5c0>
 800ee42:	e1c4      	b.n	800f1ce <_svfprintf_r+0x94a>
 800ee44:	1ceb      	adds	r3, r5, #3
 800ee46:	db03      	blt.n	800ee50 <_svfprintf_r+0x5cc>
 800ee48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee4a:	42ab      	cmp	r3, r5
 800ee4c:	db00      	blt.n	800ee50 <_svfprintf_r+0x5cc>
 800ee4e:	e1e6      	b.n	800f21e <_svfprintf_r+0x99a>
 800ee50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee52:	3b02      	subs	r3, #2
 800ee54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee56:	223c      	movs	r2, #60	; 0x3c
 800ee58:	466b      	mov	r3, sp
 800ee5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee5c:	189b      	adds	r3, r3, r2
 800ee5e:	1e6c      	subs	r4, r5, #1
 800ee60:	3a1c      	subs	r2, #28
 800ee62:	2000      	movs	r0, #0
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	9426      	str	r4, [sp, #152]	; 0x98
 800ee68:	4391      	bics	r1, r2
 800ee6a:	2941      	cmp	r1, #65	; 0x41
 800ee6c:	d102      	bne.n	800ee74 <_svfprintf_r+0x5f0>
 800ee6e:	330f      	adds	r3, #15
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	3001      	adds	r0, #1
 800ee74:	a928      	add	r1, sp, #160	; 0xa0
 800ee76:	700b      	strb	r3, [r1, #0]
 800ee78:	232b      	movs	r3, #43	; 0x2b
 800ee7a:	2c00      	cmp	r4, #0
 800ee7c:	da02      	bge.n	800ee84 <_svfprintf_r+0x600>
 800ee7e:	2401      	movs	r4, #1
 800ee80:	3302      	adds	r3, #2
 800ee82:	1b64      	subs	r4, r4, r5
 800ee84:	704b      	strb	r3, [r1, #1]
 800ee86:	2c09      	cmp	r4, #9
 800ee88:	dc00      	bgt.n	800ee8c <_svfprintf_r+0x608>
 800ee8a:	e1ba      	b.n	800f202 <_svfprintf_r+0x97e>
 800ee8c:	2337      	movs	r3, #55	; 0x37
 800ee8e:	250a      	movs	r5, #10
 800ee90:	aa1e      	add	r2, sp, #120	; 0x78
 800ee92:	189b      	adds	r3, r3, r2
 800ee94:	9310      	str	r3, [sp, #64]	; 0x40
 800ee96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee98:	0020      	movs	r0, r4
 800ee9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9c:	0029      	movs	r1, r5
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	9310      	str	r3, [sp, #64]	; 0x40
 800eea2:	f7f1 fabb 	bl	800041c <__aeabi_idivmod>
 800eea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eea8:	3130      	adds	r1, #48	; 0x30
 800eeaa:	7019      	strb	r1, [r3, #0]
 800eeac:	0020      	movs	r0, r4
 800eeae:	0029      	movs	r1, r5
 800eeb0:	9411      	str	r4, [sp, #68]	; 0x44
 800eeb2:	f7f1 f9cd 	bl	8000250 <__divsi3>
 800eeb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eeb8:	0004      	movs	r4, r0
 800eeba:	2b63      	cmp	r3, #99	; 0x63
 800eebc:	dceb      	bgt.n	800ee96 <_svfprintf_r+0x612>
 800eebe:	222a      	movs	r2, #42	; 0x2a
 800eec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec2:	a81e      	add	r0, sp, #120	; 0x78
 800eec4:	1e99      	subs	r1, r3, #2
 800eec6:	1812      	adds	r2, r2, r0
 800eec8:	2037      	movs	r0, #55	; 0x37
 800eeca:	000b      	movs	r3, r1
 800eecc:	3430      	adds	r4, #48	; 0x30
 800eece:	700c      	strb	r4, [r1, #0]
 800eed0:	ac1e      	add	r4, sp, #120	; 0x78
 800eed2:	1900      	adds	r0, r0, r4
 800eed4:	4283      	cmp	r3, r0
 800eed6:	d200      	bcs.n	800eeda <_svfprintf_r+0x656>
 800eed8:	e18e      	b.n	800f1f8 <_svfprintf_r+0x974>
 800eeda:	2300      	movs	r3, #0
 800eedc:	4281      	cmp	r1, r0
 800eede:	d804      	bhi.n	800eeea <_svfprintf_r+0x666>
 800eee0:	aa1e      	add	r2, sp, #120	; 0x78
 800eee2:	3339      	adds	r3, #57	; 0x39
 800eee4:	189b      	adds	r3, r3, r2
 800eee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eee8:	1a9b      	subs	r3, r3, r2
 800eeea:	222a      	movs	r2, #42	; 0x2a
 800eeec:	a91e      	add	r1, sp, #120	; 0x78
 800eeee:	1852      	adds	r2, r2, r1
 800eef0:	18d3      	adds	r3, r2, r3
 800eef2:	aa28      	add	r2, sp, #160	; 0xa0
 800eef4:	1a9b      	subs	r3, r3, r2
 800eef6:	931e      	str	r3, [sp, #120]	; 0x78
 800eef8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eefc:	4694      	mov	ip, r2
 800eefe:	4463      	add	r3, ip
 800ef00:	9309      	str	r3, [sp, #36]	; 0x24
 800ef02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	dc01      	bgt.n	800ef0c <_svfprintf_r+0x688>
 800ef08:	07f3      	lsls	r3, r6, #31
 800ef0a:	d504      	bpl.n	800ef16 <_svfprintf_r+0x692>
 800ef0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef10:	4694      	mov	ip, r2
 800ef12:	4463      	add	r3, ip
 800ef14:	9309      	str	r3, [sp, #36]	; 0x24
 800ef16:	2280      	movs	r2, #128	; 0x80
 800ef18:	4b74      	ldr	r3, [pc, #464]	; (800f0ec <_svfprintf_r+0x868>)
 800ef1a:	0052      	lsls	r2, r2, #1
 800ef1c:	4033      	ands	r3, r6
 800ef1e:	431a      	orrs	r2, r3
 800ef20:	2300      	movs	r3, #0
 800ef22:	001d      	movs	r5, r3
 800ef24:	921a      	str	r2, [sp, #104]	; 0x68
 800ef26:	9310      	str	r3, [sp, #64]	; 0x40
 800ef28:	9311      	str	r3, [sp, #68]	; 0x44
 800ef2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef2c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ef2e:	9319      	str	r3, [sp, #100]	; 0x64
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d006      	beq.n	800ef42 <_svfprintf_r+0x6be>
 800ef34:	231b      	movs	r3, #27
 800ef36:	aa1e      	add	r2, sp, #120	; 0x78
 800ef38:	189b      	adds	r3, r3, r2
 800ef3a:	222d      	movs	r2, #45	; 0x2d
 800ef3c:	701a      	strb	r2, [r3, #0]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9319      	str	r3, [sp, #100]	; 0x64
 800ef42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef46:	931a      	str	r3, [sp, #104]	; 0x68
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	da00      	bge.n	800ef4e <_svfprintf_r+0x6ca>
 800ef4c:	921a      	str	r2, [sp, #104]	; 0x68
 800ef4e:	231b      	movs	r3, #27
 800ef50:	aa1e      	add	r2, sp, #120	; 0x78
 800ef52:	189b      	adds	r3, r3, r2
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	4193      	sbcs	r3, r2
 800ef5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef5c:	18d3      	adds	r3, r2, r3
 800ef5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef60:	0032      	movs	r2, r6
 800ef62:	2302      	movs	r3, #2
 800ef64:	401a      	ands	r2, r3
 800ef66:	9220      	str	r2, [sp, #128]	; 0x80
 800ef68:	421e      	tst	r6, r3
 800ef6a:	d002      	beq.n	800ef72 <_svfprintf_r+0x6ee>
 800ef6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef6e:	3302      	adds	r3, #2
 800ef70:	931a      	str	r3, [sp, #104]	; 0x68
 800ef72:	2384      	movs	r3, #132	; 0x84
 800ef74:	0032      	movs	r2, r6
 800ef76:	401a      	ands	r2, r3
 800ef78:	9221      	str	r2, [sp, #132]	; 0x84
 800ef7a:	421e      	tst	r6, r3
 800ef7c:	d11f      	bne.n	800efbe <_svfprintf_r+0x73a>
 800ef7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef82:	1a9c      	subs	r4, r3, r2
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	dd1a      	ble.n	800efbe <_svfprintf_r+0x73a>
 800ef88:	0039      	movs	r1, r7
 800ef8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef8c:	4858      	ldr	r0, [pc, #352]	; (800f0f0 <_svfprintf_r+0x86c>)
 800ef8e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ef90:	3301      	adds	r3, #1
 800ef92:	3108      	adds	r1, #8
 800ef94:	6038      	str	r0, [r7, #0]
 800ef96:	2c10      	cmp	r4, #16
 800ef98:	dd00      	ble.n	800ef9c <_svfprintf_r+0x718>
 800ef9a:	e31c      	b.n	800f5d6 <_svfprintf_r+0xd52>
 800ef9c:	607c      	str	r4, [r7, #4]
 800ef9e:	18a4      	adds	r4, r4, r2
 800efa0:	000f      	movs	r7, r1
 800efa2:	942e      	str	r4, [sp, #184]	; 0xb8
 800efa4:	932d      	str	r3, [sp, #180]	; 0xb4
 800efa6:	2b07      	cmp	r3, #7
 800efa8:	dd09      	ble.n	800efbe <_svfprintf_r+0x73a>
 800efaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efae:	aa2c      	add	r2, sp, #176	; 0xb0
 800efb0:	f003 fcf8 	bl	80129a4 <__ssprint_r>
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d001      	beq.n	800efbc <_svfprintf_r+0x738>
 800efb8:	f000 fe43 	bl	800fc42 <_svfprintf_r+0x13be>
 800efbc:	af2f      	add	r7, sp, #188	; 0xbc
 800efbe:	221b      	movs	r2, #27
 800efc0:	a91e      	add	r1, sp, #120	; 0x78
 800efc2:	1852      	adds	r2, r2, r1
 800efc4:	7811      	ldrb	r1, [r2, #0]
 800efc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800efc8:	2900      	cmp	r1, #0
 800efca:	d014      	beq.n	800eff6 <_svfprintf_r+0x772>
 800efcc:	603a      	str	r2, [r7, #0]
 800efce:	2201      	movs	r2, #1
 800efd0:	189b      	adds	r3, r3, r2
 800efd2:	932e      	str	r3, [sp, #184]	; 0xb8
 800efd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efd6:	607a      	str	r2, [r7, #4]
 800efd8:	189b      	adds	r3, r3, r2
 800efda:	932d      	str	r3, [sp, #180]	; 0xb4
 800efdc:	3708      	adds	r7, #8
 800efde:	2b07      	cmp	r3, #7
 800efe0:	dd09      	ble.n	800eff6 <_svfprintf_r+0x772>
 800efe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efe6:	aa2c      	add	r2, sp, #176	; 0xb0
 800efe8:	f003 fcdc 	bl	80129a4 <__ssprint_r>
 800efec:	2800      	cmp	r0, #0
 800efee:	d001      	beq.n	800eff4 <_svfprintf_r+0x770>
 800eff0:	f000 fe27 	bl	800fc42 <_svfprintf_r+0x13be>
 800eff4:	af2f      	add	r7, sp, #188	; 0xbc
 800eff6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eff8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800effa:	2a00      	cmp	r2, #0
 800effc:	d015      	beq.n	800f02a <_svfprintf_r+0x7a6>
 800effe:	aa25      	add	r2, sp, #148	; 0x94
 800f000:	603a      	str	r2, [r7, #0]
 800f002:	2202      	movs	r2, #2
 800f004:	189b      	adds	r3, r3, r2
 800f006:	932e      	str	r3, [sp, #184]	; 0xb8
 800f008:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	3301      	adds	r3, #1
 800f00e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f010:	3708      	adds	r7, #8
 800f012:	2b07      	cmp	r3, #7
 800f014:	dd09      	ble.n	800f02a <_svfprintf_r+0x7a6>
 800f016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f018:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f01a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f01c:	f003 fcc2 	bl	80129a4 <__ssprint_r>
 800f020:	2800      	cmp	r0, #0
 800f022:	d001      	beq.n	800f028 <_svfprintf_r+0x7a4>
 800f024:	f000 fe0d 	bl	800fc42 <_svfprintf_r+0x13be>
 800f028:	af2f      	add	r7, sp, #188	; 0xbc
 800f02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f02c:	2b80      	cmp	r3, #128	; 0x80
 800f02e:	d11f      	bne.n	800f070 <_svfprintf_r+0x7ec>
 800f030:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f032:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f034:	1a9c      	subs	r4, r3, r2
 800f036:	2c00      	cmp	r4, #0
 800f038:	dd1a      	ble.n	800f070 <_svfprintf_r+0x7ec>
 800f03a:	0039      	movs	r1, r7
 800f03c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f03e:	482d      	ldr	r0, [pc, #180]	; (800f0f4 <_svfprintf_r+0x870>)
 800f040:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f042:	3301      	adds	r3, #1
 800f044:	3108      	adds	r1, #8
 800f046:	6038      	str	r0, [r7, #0]
 800f048:	2c10      	cmp	r4, #16
 800f04a:	dd00      	ble.n	800f04e <_svfprintf_r+0x7ca>
 800f04c:	e2d6      	b.n	800f5fc <_svfprintf_r+0xd78>
 800f04e:	607c      	str	r4, [r7, #4]
 800f050:	18a4      	adds	r4, r4, r2
 800f052:	000f      	movs	r7, r1
 800f054:	942e      	str	r4, [sp, #184]	; 0xb8
 800f056:	932d      	str	r3, [sp, #180]	; 0xb4
 800f058:	2b07      	cmp	r3, #7
 800f05a:	dd09      	ble.n	800f070 <_svfprintf_r+0x7ec>
 800f05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f05e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f060:	aa2c      	add	r2, sp, #176	; 0xb0
 800f062:	f003 fc9f 	bl	80129a4 <__ssprint_r>
 800f066:	2800      	cmp	r0, #0
 800f068:	d001      	beq.n	800f06e <_svfprintf_r+0x7ea>
 800f06a:	f000 fdea 	bl	800fc42 <_svfprintf_r+0x13be>
 800f06e:	af2f      	add	r7, sp, #188	; 0xbc
 800f070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f074:	1a9c      	subs	r4, r3, r2
 800f076:	2c00      	cmp	r4, #0
 800f078:	dd1a      	ble.n	800f0b0 <_svfprintf_r+0x82c>
 800f07a:	0039      	movs	r1, r7
 800f07c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f07e:	481d      	ldr	r0, [pc, #116]	; (800f0f4 <_svfprintf_r+0x870>)
 800f080:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f082:	3301      	adds	r3, #1
 800f084:	3108      	adds	r1, #8
 800f086:	6038      	str	r0, [r7, #0]
 800f088:	2c10      	cmp	r4, #16
 800f08a:	dd00      	ble.n	800f08e <_svfprintf_r+0x80a>
 800f08c:	e2c9      	b.n	800f622 <_svfprintf_r+0xd9e>
 800f08e:	18a2      	adds	r2, r4, r2
 800f090:	607c      	str	r4, [r7, #4]
 800f092:	922e      	str	r2, [sp, #184]	; 0xb8
 800f094:	000f      	movs	r7, r1
 800f096:	932d      	str	r3, [sp, #180]	; 0xb4
 800f098:	2b07      	cmp	r3, #7
 800f09a:	dd09      	ble.n	800f0b0 <_svfprintf_r+0x82c>
 800f09c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f09e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f0a0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f0a2:	f003 fc7f 	bl	80129a4 <__ssprint_r>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d001      	beq.n	800f0ae <_svfprintf_r+0x82a>
 800f0aa:	f000 fdca 	bl	800fc42 <_svfprintf_r+0x13be>
 800f0ae:	af2f      	add	r7, sp, #188	; 0xbc
 800f0b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f0b2:	9319      	str	r3, [sp, #100]	; 0x64
 800f0b4:	05f3      	lsls	r3, r6, #23
 800f0b6:	d500      	bpl.n	800f0ba <_svfprintf_r+0x836>
 800f0b8:	e2ce      	b.n	800f658 <_svfprintf_r+0xdd4>
 800f0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0bc:	9b08      	ldr	r3, [sp, #32]
 800f0be:	4694      	mov	ip, r2
 800f0c0:	603b      	str	r3, [r7, #0]
 800f0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c4:	607b      	str	r3, [r7, #4]
 800f0c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f0c8:	4463      	add	r3, ip
 800f0ca:	932e      	str	r3, [sp, #184]	; 0xb8
 800f0cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	932d      	str	r3, [sp, #180]	; 0xb4
 800f0d2:	2b07      	cmp	r3, #7
 800f0d4:	dd00      	ble.n	800f0d8 <_svfprintf_r+0x854>
 800f0d6:	e3a3      	b.n	800f820 <_svfprintf_r+0xf9c>
 800f0d8:	3708      	adds	r7, #8
 800f0da:	e301      	b.n	800f6e0 <_svfprintf_r+0xe5c>
 800f0dc:	08015e6c 	.word	0x08015e6c
 800f0e0:	08015e7d 	.word	0x08015e7d
 800f0e4:	40300000 	.word	0x40300000
 800f0e8:	3fe00000 	.word	0x3fe00000
 800f0ec:	fffffbff 	.word	0xfffffbff
 800f0f0:	08015e90 	.word	0x08015e90
 800f0f4:	08015ea0 	.word	0x08015ea0
 800f0f8:	9b08      	ldr	r3, [sp, #32]
 800f0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f0fc:	e610      	b.n	800ed20 <_svfprintf_r+0x49c>
 800f0fe:	2306      	movs	r3, #6
 800f100:	e5fd      	b.n	800ecfe <_svfprintf_r+0x47a>
 800f102:	930e      	str	r3, [sp, #56]	; 0x38
 800f104:	2300      	movs	r3, #0
 800f106:	e61a      	b.n	800ed3e <_svfprintf_r+0x4ba>
 800f108:	7010      	strb	r0, [r2, #0]
 800f10a:	e684      	b.n	800ee16 <_svfprintf_r+0x592>
 800f10c:	7018      	strb	r0, [r3, #0]
 800f10e:	3301      	adds	r3, #1
 800f110:	1aca      	subs	r2, r1, r3
 800f112:	d5fb      	bpl.n	800f10c <_svfprintf_r+0x888>
 800f114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f116:	2300      	movs	r3, #0
 800f118:	3201      	adds	r2, #1
 800f11a:	db01      	blt.n	800f120 <_svfprintf_r+0x89c>
 800f11c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f11e:	3301      	adds	r3, #1
 800f120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f122:	18d3      	adds	r3, r2, r3
 800f124:	9323      	str	r3, [sp, #140]	; 0x8c
 800f126:	e684      	b.n	800ee32 <_svfprintf_r+0x5ae>
 800f128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f12a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f12c:	2030      	movs	r0, #48	; 0x30
 800f12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f130:	1851      	adds	r1, r2, r1
 800f132:	e7ed      	b.n	800f110 <_svfprintf_r+0x88c>
 800f134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f136:	2303      	movs	r3, #3
 800f138:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f13a:	2a46      	cmp	r2, #70	; 0x46
 800f13c:	d006      	beq.n	800f14c <_svfprintf_r+0x8c8>
 800f13e:	0014      	movs	r4, r2
 800f140:	3c45      	subs	r4, #69	; 0x45
 800f142:	4262      	negs	r2, r4
 800f144:	4154      	adcs	r4, r2
 800f146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f148:	3b01      	subs	r3, #1
 800f14a:	1914      	adds	r4, r2, r4
 800f14c:	aa2a      	add	r2, sp, #168	; 0xa8
 800f14e:	9204      	str	r2, [sp, #16]
 800f150:	aa27      	add	r2, sp, #156	; 0x9c
 800f152:	9203      	str	r2, [sp, #12]
 800f154:	aa26      	add	r2, sp, #152	; 0x98
 800f156:	9202      	str	r2, [sp, #8]
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	002a      	movs	r2, r5
 800f15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f15e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f160:	9401      	str	r4, [sp, #4]
 800f162:	f002 fad7 	bl	8011714 <_dtoa_r>
 800f166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f168:	9008      	str	r0, [sp, #32]
 800f16a:	2b47      	cmp	r3, #71	; 0x47
 800f16c:	d103      	bne.n	800f176 <_svfprintf_r+0x8f2>
 800f16e:	07f3      	lsls	r3, r6, #31
 800f170:	d401      	bmi.n	800f176 <_svfprintf_r+0x8f2>
 800f172:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f174:	e65e      	b.n	800ee34 <_svfprintf_r+0x5b0>
 800f176:	9b08      	ldr	r3, [sp, #32]
 800f178:	191b      	adds	r3, r3, r4
 800f17a:	9311      	str	r3, [sp, #68]	; 0x44
 800f17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f17e:	2b46      	cmp	r3, #70	; 0x46
 800f180:	d112      	bne.n	800f1a8 <_svfprintf_r+0x924>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	2b30      	cmp	r3, #48	; 0x30
 800f188:	d10a      	bne.n	800f1a0 <_svfprintf_r+0x91c>
 800f18a:	2200      	movs	r2, #0
 800f18c:	2300      	movs	r3, #0
 800f18e:	0028      	movs	r0, r5
 800f190:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f192:	f7f1 f959 	bl	8000448 <__aeabi_dcmpeq>
 800f196:	2800      	cmp	r0, #0
 800f198:	d102      	bne.n	800f1a0 <_svfprintf_r+0x91c>
 800f19a:	2301      	movs	r3, #1
 800f19c:	1b1b      	subs	r3, r3, r4
 800f19e:	9326      	str	r3, [sp, #152]	; 0x98
 800f1a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f1a4:	18d3      	adds	r3, r2, r3
 800f1a6:	9311      	str	r3, [sp, #68]	; 0x44
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	0028      	movs	r0, r5
 800f1ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f1b0:	f7f1 f94a 	bl	8000448 <__aeabi_dcmpeq>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d001      	beq.n	800f1bc <_svfprintf_r+0x938>
 800f1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1ba:	932a      	str	r3, [sp, #168]	; 0xa8
 800f1bc:	2230      	movs	r2, #48	; 0x30
 800f1be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f1c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1c2:	4299      	cmp	r1, r3
 800f1c4:	d9d5      	bls.n	800f172 <_svfprintf_r+0x8ee>
 800f1c6:	1c59      	adds	r1, r3, #1
 800f1c8:	912a      	str	r1, [sp, #168]	; 0xa8
 800f1ca:	701a      	strb	r2, [r3, #0]
 800f1cc:	e7f7      	b.n	800f1be <_svfprintf_r+0x93a>
 800f1ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1d0:	2b46      	cmp	r3, #70	; 0x46
 800f1d2:	d000      	beq.n	800f1d6 <_svfprintf_r+0x952>
 800f1d4:	e63f      	b.n	800ee56 <_svfprintf_r+0x5d2>
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	0033      	movs	r3, r6
 800f1da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1dc:	4013      	ands	r3, r2
 800f1de:	430b      	orrs	r3, r1
 800f1e0:	2d00      	cmp	r5, #0
 800f1e2:	dd2c      	ble.n	800f23e <_svfprintf_r+0x9ba>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d046      	beq.n	800f276 <_svfprintf_r+0x9f2>
 800f1e8:	000a      	movs	r2, r1
 800f1ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1ec:	18eb      	adds	r3, r5, r3
 800f1ee:	18d3      	adds	r3, r2, r3
 800f1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f2:	2366      	movs	r3, #102	; 0x66
 800f1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1f6:	e030      	b.n	800f25a <_svfprintf_r+0x9d6>
 800f1f8:	781c      	ldrb	r4, [r3, #0]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	7014      	strb	r4, [r2, #0]
 800f1fe:	3201      	adds	r2, #1
 800f200:	e668      	b.n	800eed4 <_svfprintf_r+0x650>
 800f202:	222a      	movs	r2, #42	; 0x2a
 800f204:	ab1e      	add	r3, sp, #120	; 0x78
 800f206:	18d2      	adds	r2, r2, r3
 800f208:	2800      	cmp	r0, #0
 800f20a:	d104      	bne.n	800f216 <_svfprintf_r+0x992>
 800f20c:	2330      	movs	r3, #48	; 0x30
 800f20e:	222b      	movs	r2, #43	; 0x2b
 800f210:	708b      	strb	r3, [r1, #2]
 800f212:	ab1e      	add	r3, sp, #120	; 0x78
 800f214:	18d2      	adds	r2, r2, r3
 800f216:	3430      	adds	r4, #48	; 0x30
 800f218:	1c53      	adds	r3, r2, #1
 800f21a:	7014      	strb	r4, [r2, #0]
 800f21c:	e669      	b.n	800eef2 <_svfprintf_r+0x66e>
 800f21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f220:	42ab      	cmp	r3, r5
 800f222:	dd12      	ble.n	800f24a <_svfprintf_r+0x9c6>
 800f224:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f228:	4694      	mov	ip, r2
 800f22a:	4463      	add	r3, ip
 800f22c:	9309      	str	r3, [sp, #36]	; 0x24
 800f22e:	2367      	movs	r3, #103	; 0x67
 800f230:	930f      	str	r3, [sp, #60]	; 0x3c
 800f232:	2d00      	cmp	r5, #0
 800f234:	dc11      	bgt.n	800f25a <_svfprintf_r+0x9d6>
 800f236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f238:	1b5b      	subs	r3, r3, r5
 800f23a:	3301      	adds	r3, #1
 800f23c:	e00c      	b.n	800f258 <_svfprintf_r+0x9d4>
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d01b      	beq.n	800f27a <_svfprintf_r+0x9f6>
 800f242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f246:	3301      	adds	r3, #1
 800f248:	e7d1      	b.n	800f1ee <_svfprintf_r+0x96a>
 800f24a:	2367      	movs	r3, #103	; 0x67
 800f24c:	9509      	str	r5, [sp, #36]	; 0x24
 800f24e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f250:	07f3      	lsls	r3, r6, #31
 800f252:	d502      	bpl.n	800f25a <_svfprintf_r+0x9d6>
 800f254:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f256:	18eb      	adds	r3, r5, r3
 800f258:	9309      	str	r3, [sp, #36]	; 0x24
 800f25a:	2380      	movs	r3, #128	; 0x80
 800f25c:	0032      	movs	r2, r6
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	401a      	ands	r2, r3
 800f262:	9211      	str	r2, [sp, #68]	; 0x44
 800f264:	2200      	movs	r2, #0
 800f266:	9210      	str	r2, [sp, #64]	; 0x40
 800f268:	421e      	tst	r6, r3
 800f26a:	d100      	bne.n	800f26e <_svfprintf_r+0x9ea>
 800f26c:	e65d      	b.n	800ef2a <_svfprintf_r+0x6a6>
 800f26e:	4295      	cmp	r5, r2
 800f270:	dc25      	bgt.n	800f2be <_svfprintf_r+0xa3a>
 800f272:	9211      	str	r2, [sp, #68]	; 0x44
 800f274:	e659      	b.n	800ef2a <_svfprintf_r+0x6a6>
 800f276:	9509      	str	r5, [sp, #36]	; 0x24
 800f278:	e7bb      	b.n	800f1f2 <_svfprintf_r+0x96e>
 800f27a:	2366      	movs	r3, #102	; 0x66
 800f27c:	9209      	str	r2, [sp, #36]	; 0x24
 800f27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f280:	e7eb      	b.n	800f25a <_svfprintf_r+0x9d6>
 800f282:	42ab      	cmp	r3, r5
 800f284:	da0e      	bge.n	800f2a4 <_svfprintf_r+0xa20>
 800f286:	1aed      	subs	r5, r5, r3
 800f288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f28a:	785b      	ldrb	r3, [r3, #1]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d012      	beq.n	800f2b6 <_svfprintf_r+0xa32>
 800f290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f292:	3301      	adds	r3, #1
 800f294:	9311      	str	r3, [sp, #68]	; 0x44
 800f296:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f298:	3301      	adds	r3, #1
 800f29a:	9312      	str	r3, [sp, #72]	; 0x48
 800f29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2bff      	cmp	r3, #255	; 0xff
 800f2a2:	d1ee      	bne.n	800f282 <_svfprintf_r+0x9fe>
 800f2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2a8:	189b      	adds	r3, r3, r2
 800f2aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f2ac:	4353      	muls	r3, r2
 800f2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2b0:	189b      	adds	r3, r3, r2
 800f2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b4:	e639      	b.n	800ef2a <_svfprintf_r+0x6a6>
 800f2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	9310      	str	r3, [sp, #64]	; 0x40
 800f2bc:	e7ee      	b.n	800f29c <_svfprintf_r+0xa18>
 800f2be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2c0:	9311      	str	r3, [sp, #68]	; 0x44
 800f2c2:	e7eb      	b.n	800f29c <_svfprintf_r+0xa18>
 800f2c4:	1d23      	adds	r3, r4, #4
 800f2c6:	930d      	str	r3, [sp, #52]	; 0x34
 800f2c8:	06b3      	lsls	r3, r6, #26
 800f2ca:	d509      	bpl.n	800f2e0 <_svfprintf_r+0xa5c>
 800f2cc:	6823      	ldr	r3, [r4, #0]
 800f2ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	17d2      	asrs	r2, r2, #31
 800f2d4:	605a      	str	r2, [r3, #4]
 800f2d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f2d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f2da:	9308      	str	r3, [sp, #32]
 800f2dc:	f7ff fb0d 	bl	800e8fa <_svfprintf_r+0x76>
 800f2e0:	06f3      	lsls	r3, r6, #27
 800f2e2:	d503      	bpl.n	800f2ec <_svfprintf_r+0xa68>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	e7f4      	b.n	800f2d6 <_svfprintf_r+0xa52>
 800f2ec:	0673      	lsls	r3, r6, #25
 800f2ee:	d503      	bpl.n	800f2f8 <_svfprintf_r+0xa74>
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2f4:	801a      	strh	r2, [r3, #0]
 800f2f6:	e7ee      	b.n	800f2d6 <_svfprintf_r+0xa52>
 800f2f8:	05b6      	lsls	r6, r6, #22
 800f2fa:	d5f3      	bpl.n	800f2e4 <_svfprintf_r+0xa60>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f300:	701a      	strb	r2, [r3, #0]
 800f302:	e7e8      	b.n	800f2d6 <_svfprintf_r+0xa52>
 800f304:	2310      	movs	r3, #16
 800f306:	431e      	orrs	r6, r3
 800f308:	2320      	movs	r3, #32
 800f30a:	0030      	movs	r0, r6
 800f30c:	4018      	ands	r0, r3
 800f30e:	421e      	tst	r6, r3
 800f310:	d00f      	beq.n	800f332 <_svfprintf_r+0xaae>
 800f312:	3b19      	subs	r3, #25
 800f314:	3407      	adds	r4, #7
 800f316:	439c      	bics	r4, r3
 800f318:	0022      	movs	r2, r4
 800f31a:	ca18      	ldmia	r2!, {r3, r4}
 800f31c:	9306      	str	r3, [sp, #24]
 800f31e:	9407      	str	r4, [sp, #28]
 800f320:	920d      	str	r2, [sp, #52]	; 0x34
 800f322:	4bc9      	ldr	r3, [pc, #804]	; (800f648 <_svfprintf_r+0xdc4>)
 800f324:	401e      	ands	r6, r3
 800f326:	2300      	movs	r3, #0
 800f328:	221b      	movs	r2, #27
 800f32a:	a91e      	add	r1, sp, #120	; 0x78
 800f32c:	1852      	adds	r2, r2, r1
 800f32e:	2100      	movs	r1, #0
 800f330:	e430      	b.n	800eb94 <_svfprintf_r+0x310>
 800f332:	0022      	movs	r2, r4
 800f334:	ca08      	ldmia	r2!, {r3}
 800f336:	0031      	movs	r1, r6
 800f338:	920d      	str	r2, [sp, #52]	; 0x34
 800f33a:	2210      	movs	r2, #16
 800f33c:	4011      	ands	r1, r2
 800f33e:	4216      	tst	r6, r2
 800f340:	d002      	beq.n	800f348 <_svfprintf_r+0xac4>
 800f342:	9306      	str	r3, [sp, #24]
 800f344:	9007      	str	r0, [sp, #28]
 800f346:	e7ec      	b.n	800f322 <_svfprintf_r+0xa9e>
 800f348:	2240      	movs	r2, #64	; 0x40
 800f34a:	0030      	movs	r0, r6
 800f34c:	4010      	ands	r0, r2
 800f34e:	4216      	tst	r6, r2
 800f350:	d003      	beq.n	800f35a <_svfprintf_r+0xad6>
 800f352:	b29b      	uxth	r3, r3
 800f354:	9306      	str	r3, [sp, #24]
 800f356:	9107      	str	r1, [sp, #28]
 800f358:	e7e3      	b.n	800f322 <_svfprintf_r+0xa9e>
 800f35a:	2280      	movs	r2, #128	; 0x80
 800f35c:	0031      	movs	r1, r6
 800f35e:	0092      	lsls	r2, r2, #2
 800f360:	4011      	ands	r1, r2
 800f362:	4216      	tst	r6, r2
 800f364:	d0f6      	beq.n	800f354 <_svfprintf_r+0xad0>
 800f366:	b2db      	uxtb	r3, r3
 800f368:	e7eb      	b.n	800f342 <_svfprintf_r+0xabe>
 800f36a:	0023      	movs	r3, r4
 800f36c:	cb04      	ldmia	r3!, {r2}
 800f36e:	49b7      	ldr	r1, [pc, #732]	; (800f64c <_svfprintf_r+0xdc8>)
 800f370:	9206      	str	r2, [sp, #24]
 800f372:	aa25      	add	r2, sp, #148	; 0x94
 800f374:	8011      	strh	r1, [r2, #0]
 800f376:	4ab6      	ldr	r2, [pc, #728]	; (800f650 <_svfprintf_r+0xdcc>)
 800f378:	930d      	str	r3, [sp, #52]	; 0x34
 800f37a:	2300      	movs	r3, #0
 800f37c:	921f      	str	r2, [sp, #124]	; 0x7c
 800f37e:	2278      	movs	r2, #120	; 0x78
 800f380:	9307      	str	r3, [sp, #28]
 800f382:	3302      	adds	r3, #2
 800f384:	431e      	orrs	r6, r3
 800f386:	920f      	str	r2, [sp, #60]	; 0x3c
 800f388:	e7ce      	b.n	800f328 <_svfprintf_r+0xaa4>
 800f38a:	0023      	movs	r3, r4
 800f38c:	cb04      	ldmia	r3!, {r2}
 800f38e:	2400      	movs	r4, #0
 800f390:	930d      	str	r3, [sp, #52]	; 0x34
 800f392:	231b      	movs	r3, #27
 800f394:	9208      	str	r2, [sp, #32]
 800f396:	aa1e      	add	r2, sp, #120	; 0x78
 800f398:	189b      	adds	r3, r3, r2
 800f39a:	701c      	strb	r4, [r3, #0]
 800f39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39e:	3301      	adds	r3, #1
 800f3a0:	d00e      	beq.n	800f3c0 <_svfprintf_r+0xb3c>
 800f3a2:	0021      	movs	r1, r4
 800f3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3a6:	9808      	ldr	r0, [sp, #32]
 800f3a8:	f002 f83a 	bl	8011420 <memchr>
 800f3ac:	900c      	str	r0, [sp, #48]	; 0x30
 800f3ae:	42a0      	cmp	r0, r4
 800f3b0:	d100      	bne.n	800f3b4 <_svfprintf_r+0xb30>
 800f3b2:	e10d      	b.n	800f5d0 <_svfprintf_r+0xd4c>
 800f3b4:	9a08      	ldr	r2, [sp, #32]
 800f3b6:	1a83      	subs	r3, r0, r2
 800f3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ba:	0023      	movs	r3, r4
 800f3bc:	940c      	str	r4, [sp, #48]	; 0x30
 800f3be:	e44e      	b.n	800ec5e <_svfprintf_r+0x3da>
 800f3c0:	9808      	ldr	r0, [sp, #32]
 800f3c2:	f7f0 fe9f 	bl	8000104 <strlen>
 800f3c6:	9009      	str	r0, [sp, #36]	; 0x24
 800f3c8:	e7f7      	b.n	800f3ba <_svfprintf_r+0xb36>
 800f3ca:	2310      	movs	r3, #16
 800f3cc:	431e      	orrs	r6, r3
 800f3ce:	2320      	movs	r3, #32
 800f3d0:	0030      	movs	r0, r6
 800f3d2:	4018      	ands	r0, r3
 800f3d4:	421e      	tst	r6, r3
 800f3d6:	d009      	beq.n	800f3ec <_svfprintf_r+0xb68>
 800f3d8:	3b19      	subs	r3, #25
 800f3da:	3407      	adds	r4, #7
 800f3dc:	439c      	bics	r4, r3
 800f3de:	0022      	movs	r2, r4
 800f3e0:	ca18      	ldmia	r2!, {r3, r4}
 800f3e2:	9306      	str	r3, [sp, #24]
 800f3e4:	9407      	str	r4, [sp, #28]
 800f3e6:	920d      	str	r2, [sp, #52]	; 0x34
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e79d      	b.n	800f328 <_svfprintf_r+0xaa4>
 800f3ec:	0023      	movs	r3, r4
 800f3ee:	cb04      	ldmia	r3!, {r2}
 800f3f0:	0031      	movs	r1, r6
 800f3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800f3f4:	2310      	movs	r3, #16
 800f3f6:	4019      	ands	r1, r3
 800f3f8:	421e      	tst	r6, r3
 800f3fa:	d003      	beq.n	800f404 <_svfprintf_r+0xb80>
 800f3fc:	9206      	str	r2, [sp, #24]
 800f3fe:	9007      	str	r0, [sp, #28]
 800f400:	3b0f      	subs	r3, #15
 800f402:	e791      	b.n	800f328 <_svfprintf_r+0xaa4>
 800f404:	2340      	movs	r3, #64	; 0x40
 800f406:	0030      	movs	r0, r6
 800f408:	4018      	ands	r0, r3
 800f40a:	421e      	tst	r6, r3
 800f40c:	d003      	beq.n	800f416 <_svfprintf_r+0xb92>
 800f40e:	b293      	uxth	r3, r2
 800f410:	9306      	str	r3, [sp, #24]
 800f412:	9107      	str	r1, [sp, #28]
 800f414:	e7e8      	b.n	800f3e8 <_svfprintf_r+0xb64>
 800f416:	2380      	movs	r3, #128	; 0x80
 800f418:	0031      	movs	r1, r6
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4019      	ands	r1, r3
 800f41e:	421e      	tst	r6, r3
 800f420:	d003      	beq.n	800f42a <_svfprintf_r+0xba6>
 800f422:	b2d3      	uxtb	r3, r2
 800f424:	9306      	str	r3, [sp, #24]
 800f426:	9007      	str	r0, [sp, #28]
 800f428:	e7de      	b.n	800f3e8 <_svfprintf_r+0xb64>
 800f42a:	9206      	str	r2, [sp, #24]
 800f42c:	e7f1      	b.n	800f412 <_svfprintf_r+0xb8e>
 800f42e:	4b89      	ldr	r3, [pc, #548]	; (800f654 <_svfprintf_r+0xdd0>)
 800f430:	0030      	movs	r0, r6
 800f432:	931f      	str	r3, [sp, #124]	; 0x7c
 800f434:	2320      	movs	r3, #32
 800f436:	4018      	ands	r0, r3
 800f438:	421e      	tst	r6, r3
 800f43a:	d01a      	beq.n	800f472 <_svfprintf_r+0xbee>
 800f43c:	3b19      	subs	r3, #25
 800f43e:	3407      	adds	r4, #7
 800f440:	439c      	bics	r4, r3
 800f442:	0022      	movs	r2, r4
 800f444:	ca18      	ldmia	r2!, {r3, r4}
 800f446:	9306      	str	r3, [sp, #24]
 800f448:	9407      	str	r4, [sp, #28]
 800f44a:	920d      	str	r2, [sp, #52]	; 0x34
 800f44c:	07f3      	lsls	r3, r6, #31
 800f44e:	d50a      	bpl.n	800f466 <_svfprintf_r+0xbe2>
 800f450:	9b06      	ldr	r3, [sp, #24]
 800f452:	9a07      	ldr	r2, [sp, #28]
 800f454:	4313      	orrs	r3, r2
 800f456:	d006      	beq.n	800f466 <_svfprintf_r+0xbe2>
 800f458:	2230      	movs	r2, #48	; 0x30
 800f45a:	ab25      	add	r3, sp, #148	; 0x94
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f460:	705a      	strb	r2, [r3, #1]
 800f462:	2302      	movs	r3, #2
 800f464:	431e      	orrs	r6, r3
 800f466:	4b78      	ldr	r3, [pc, #480]	; (800f648 <_svfprintf_r+0xdc4>)
 800f468:	401e      	ands	r6, r3
 800f46a:	2302      	movs	r3, #2
 800f46c:	e75c      	b.n	800f328 <_svfprintf_r+0xaa4>
 800f46e:	4b78      	ldr	r3, [pc, #480]	; (800f650 <_svfprintf_r+0xdcc>)
 800f470:	e7de      	b.n	800f430 <_svfprintf_r+0xbac>
 800f472:	0023      	movs	r3, r4
 800f474:	cb04      	ldmia	r3!, {r2}
 800f476:	0031      	movs	r1, r6
 800f478:	930d      	str	r3, [sp, #52]	; 0x34
 800f47a:	2310      	movs	r3, #16
 800f47c:	4019      	ands	r1, r3
 800f47e:	421e      	tst	r6, r3
 800f480:	d002      	beq.n	800f488 <_svfprintf_r+0xc04>
 800f482:	9206      	str	r2, [sp, #24]
 800f484:	9007      	str	r0, [sp, #28]
 800f486:	e7e1      	b.n	800f44c <_svfprintf_r+0xbc8>
 800f488:	2340      	movs	r3, #64	; 0x40
 800f48a:	0030      	movs	r0, r6
 800f48c:	4018      	ands	r0, r3
 800f48e:	421e      	tst	r6, r3
 800f490:	d003      	beq.n	800f49a <_svfprintf_r+0xc16>
 800f492:	b293      	uxth	r3, r2
 800f494:	9306      	str	r3, [sp, #24]
 800f496:	9107      	str	r1, [sp, #28]
 800f498:	e7d8      	b.n	800f44c <_svfprintf_r+0xbc8>
 800f49a:	2380      	movs	r3, #128	; 0x80
 800f49c:	0031      	movs	r1, r6
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4019      	ands	r1, r3
 800f4a2:	421e      	tst	r6, r3
 800f4a4:	d002      	beq.n	800f4ac <_svfprintf_r+0xc28>
 800f4a6:	b2d3      	uxtb	r3, r2
 800f4a8:	9306      	str	r3, [sp, #24]
 800f4aa:	e7eb      	b.n	800f484 <_svfprintf_r+0xc00>
 800f4ac:	9206      	str	r2, [sp, #24]
 800f4ae:	e7f2      	b.n	800f496 <_svfprintf_r+0xc12>
 800f4b0:	9b07      	ldr	r3, [sp, #28]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10a      	bne.n	800f4cc <_svfprintf_r+0xc48>
 800f4b6:	9b06      	ldr	r3, [sp, #24]
 800f4b8:	2b09      	cmp	r3, #9
 800f4ba:	d807      	bhi.n	800f4cc <_svfprintf_r+0xc48>
 800f4bc:	23e7      	movs	r3, #231	; 0xe7
 800f4be:	aa1e      	add	r2, sp, #120	; 0x78
 800f4c0:	189b      	adds	r3, r3, r2
 800f4c2:	9a06      	ldr	r2, [sp, #24]
 800f4c4:	3230      	adds	r2, #48	; 0x30
 800f4c6:	701a      	strb	r2, [r3, #0]
 800f4c8:	f000 fc18 	bl	800fcfc <_svfprintf_r+0x1478>
 800f4cc:	2680      	movs	r6, #128	; 0x80
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	00f6      	lsls	r6, r6, #3
 800f4d2:	930e      	str	r3, [sp, #56]	; 0x38
 800f4d4:	ad58      	add	r5, sp, #352	; 0x160
 800f4d6:	4026      	ands	r6, r4
 800f4d8:	220a      	movs	r2, #10
 800f4da:	9806      	ldr	r0, [sp, #24]
 800f4dc:	9907      	ldr	r1, [sp, #28]
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f7f0 ffe0 	bl	80004a4 <__aeabi_uldivmod>
 800f4e4:	1e6b      	subs	r3, r5, #1
 800f4e6:	3230      	adds	r2, #48	; 0x30
 800f4e8:	9308      	str	r3, [sp, #32]
 800f4ea:	701a      	strb	r2, [r3, #0]
 800f4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4ee:	900c      	str	r0, [sp, #48]	; 0x30
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	9110      	str	r1, [sp, #64]	; 0x40
 800f4f4:	930e      	str	r3, [sp, #56]	; 0x38
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	d01d      	beq.n	800f536 <_svfprintf_r+0xcb2>
 800f4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	429a      	cmp	r2, r3
 800f502:	d118      	bne.n	800f536 <_svfprintf_r+0xcb2>
 800f504:	2aff      	cmp	r2, #255	; 0xff
 800f506:	d016      	beq.n	800f536 <_svfprintf_r+0xcb2>
 800f508:	9b07      	ldr	r3, [sp, #28]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d102      	bne.n	800f514 <_svfprintf_r+0xc90>
 800f50e:	9b06      	ldr	r3, [sp, #24]
 800f510:	2b09      	cmp	r3, #9
 800f512:	d910      	bls.n	800f536 <_svfprintf_r+0xcb2>
 800f514:	9b08      	ldr	r3, [sp, #32]
 800f516:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f518:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f51a:	1a9b      	subs	r3, r3, r2
 800f51c:	0018      	movs	r0, r3
 800f51e:	9308      	str	r3, [sp, #32]
 800f520:	f7fd ff97 	bl	800d452 <strncpy>
 800f524:	2200      	movs	r2, #0
 800f526:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f528:	920e      	str	r2, [sp, #56]	; 0x38
 800f52a:	785b      	ldrb	r3, [r3, #1]
 800f52c:	1e5a      	subs	r2, r3, #1
 800f52e:	4193      	sbcs	r3, r2
 800f530:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f532:	18d3      	adds	r3, r2, r3
 800f534:	9312      	str	r3, [sp, #72]	; 0x48
 800f536:	9b07      	ldr	r3, [sp, #28]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10f      	bne.n	800f55c <_svfprintf_r+0xcd8>
 800f53c:	9b06      	ldr	r3, [sp, #24]
 800f53e:	2b09      	cmp	r3, #9
 800f540:	d80c      	bhi.n	800f55c <_svfprintf_r+0xcd8>
 800f542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f544:	9a08      	ldr	r2, [sp, #32]
 800f546:	9319      	str	r3, [sp, #100]	; 0x64
 800f548:	ab58      	add	r3, sp, #352	; 0x160
 800f54a:	1a9b      	subs	r3, r3, r2
 800f54c:	9309      	str	r3, [sp, #36]	; 0x24
 800f54e:	2300      	movs	r3, #0
 800f550:	0026      	movs	r6, r4
 800f552:	930c      	str	r3, [sp, #48]	; 0x30
 800f554:	001d      	movs	r5, r3
 800f556:	9310      	str	r3, [sp, #64]	; 0x40
 800f558:	9311      	str	r3, [sp, #68]	; 0x44
 800f55a:	e4f2      	b.n	800ef42 <_svfprintf_r+0x6be>
 800f55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f55e:	9d08      	ldr	r5, [sp, #32]
 800f560:	9306      	str	r3, [sp, #24]
 800f562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f564:	9307      	str	r3, [sp, #28]
 800f566:	e7b7      	b.n	800f4d8 <_svfprintf_r+0xc54>
 800f568:	200f      	movs	r0, #15
 800f56a:	ab58      	add	r3, sp, #352	; 0x160
 800f56c:	9308      	str	r3, [sp, #32]
 800f56e:	9b08      	ldr	r3, [sp, #32]
 800f570:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f572:	3b01      	subs	r3, #1
 800f574:	9308      	str	r3, [sp, #32]
 800f576:	9b06      	ldr	r3, [sp, #24]
 800f578:	4003      	ands	r3, r0
 800f57a:	5cd3      	ldrb	r3, [r2, r3]
 800f57c:	9a08      	ldr	r2, [sp, #32]
 800f57e:	7013      	strb	r3, [r2, #0]
 800f580:	9b07      	ldr	r3, [sp, #28]
 800f582:	0719      	lsls	r1, r3, #28
 800f584:	9b06      	ldr	r3, [sp, #24]
 800f586:	091a      	lsrs	r2, r3, #4
 800f588:	9b07      	ldr	r3, [sp, #28]
 800f58a:	4311      	orrs	r1, r2
 800f58c:	091b      	lsrs	r3, r3, #4
 800f58e:	9307      	str	r3, [sp, #28]
 800f590:	000b      	movs	r3, r1
 800f592:	9a07      	ldr	r2, [sp, #28]
 800f594:	9106      	str	r1, [sp, #24]
 800f596:	4313      	orrs	r3, r2
 800f598:	d1e9      	bne.n	800f56e <_svfprintf_r+0xcea>
 800f59a:	e7d2      	b.n	800f542 <_svfprintf_r+0xcbe>
 800f59c:	aa58      	add	r2, sp, #352	; 0x160
 800f59e:	9208      	str	r2, [sp, #32]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1ce      	bne.n	800f542 <_svfprintf_r+0xcbe>
 800f5a4:	07f6      	lsls	r6, r6, #31
 800f5a6:	d5cc      	bpl.n	800f542 <_svfprintf_r+0xcbe>
 800f5a8:	aa1e      	add	r2, sp, #120	; 0x78
 800f5aa:	33e7      	adds	r3, #231	; 0xe7
 800f5ac:	189b      	adds	r3, r3, r2
 800f5ae:	2230      	movs	r2, #48	; 0x30
 800f5b0:	e789      	b.n	800f4c6 <_svfprintf_r+0xc42>
 800f5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d100      	bne.n	800f5ba <_svfprintf_r+0xd36>
 800f5b8:	e364      	b.n	800fc84 <_svfprintf_r+0x1400>
 800f5ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5bc:	211b      	movs	r1, #27
 800f5be:	ab3f      	add	r3, sp, #252	; 0xfc
 800f5c0:	701a      	strb	r2, [r3, #0]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	a81e      	add	r0, sp, #120	; 0x78
 800f5c6:	1809      	adds	r1, r1, r0
 800f5c8:	700a      	strb	r2, [r1, #0]
 800f5ca:	940d      	str	r4, [sp, #52]	; 0x34
 800f5cc:	f7ff fabd 	bl	800eb4a <_svfprintf_r+0x2c6>
 800f5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5d2:	f7ff fb44 	bl	800ec5e <_svfprintf_r+0x3da>
 800f5d6:	2010      	movs	r0, #16
 800f5d8:	1812      	adds	r2, r2, r0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5de:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5e0:	2b07      	cmp	r3, #7
 800f5e2:	dd08      	ble.n	800f5f6 <_svfprintf_r+0xd72>
 800f5e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5ea:	f003 f9db 	bl	80129a4 <__ssprint_r>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d000      	beq.n	800f5f4 <_svfprintf_r+0xd70>
 800f5f2:	e326      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f5f4:	a92f      	add	r1, sp, #188	; 0xbc
 800f5f6:	000f      	movs	r7, r1
 800f5f8:	3c10      	subs	r4, #16
 800f5fa:	e4c5      	b.n	800ef88 <_svfprintf_r+0x704>
 800f5fc:	2010      	movs	r0, #16
 800f5fe:	1812      	adds	r2, r2, r0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	922e      	str	r2, [sp, #184]	; 0xb8
 800f604:	932d      	str	r3, [sp, #180]	; 0xb4
 800f606:	2b07      	cmp	r3, #7
 800f608:	dd08      	ble.n	800f61c <_svfprintf_r+0xd98>
 800f60a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f60c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f60e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f610:	f003 f9c8 	bl	80129a4 <__ssprint_r>
 800f614:	2800      	cmp	r0, #0
 800f616:	d000      	beq.n	800f61a <_svfprintf_r+0xd96>
 800f618:	e313      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f61a:	a92f      	add	r1, sp, #188	; 0xbc
 800f61c:	000f      	movs	r7, r1
 800f61e:	3c10      	subs	r4, #16
 800f620:	e50b      	b.n	800f03a <_svfprintf_r+0x7b6>
 800f622:	2010      	movs	r0, #16
 800f624:	1812      	adds	r2, r2, r0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	922e      	str	r2, [sp, #184]	; 0xb8
 800f62a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f62c:	2b07      	cmp	r3, #7
 800f62e:	dd08      	ble.n	800f642 <_svfprintf_r+0xdbe>
 800f630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f632:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f634:	aa2c      	add	r2, sp, #176	; 0xb0
 800f636:	f003 f9b5 	bl	80129a4 <__ssprint_r>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d000      	beq.n	800f640 <_svfprintf_r+0xdbc>
 800f63e:	e300      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f640:	a92f      	add	r1, sp, #188	; 0xbc
 800f642:	000f      	movs	r7, r1
 800f644:	3c10      	subs	r4, #16
 800f646:	e518      	b.n	800f07a <_svfprintf_r+0x7f6>
 800f648:	fffffbff 	.word	0xfffffbff
 800f64c:	00007830 	.word	0x00007830
 800f650:	08015e6c 	.word	0x08015e6c
 800f654:	08015e7d 	.word	0x08015e7d
 800f658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f65a:	2b65      	cmp	r3, #101	; 0x65
 800f65c:	dc00      	bgt.n	800f660 <_svfprintf_r+0xddc>
 800f65e:	e241      	b.n	800fae4 <_svfprintf_r+0x1260>
 800f660:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f662:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f664:	2200      	movs	r2, #0
 800f666:	2300      	movs	r3, #0
 800f668:	f7f0 feee 	bl	8000448 <__aeabi_dcmpeq>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d077      	beq.n	800f760 <_svfprintf_r+0xedc>
 800f670:	4bca      	ldr	r3, [pc, #808]	; (800f99c <_svfprintf_r+0x1118>)
 800f672:	603b      	str	r3, [r7, #0]
 800f674:	2301      	movs	r3, #1
 800f676:	607b      	str	r3, [r7, #4]
 800f678:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f67a:	3708      	adds	r7, #8
 800f67c:	3301      	adds	r3, #1
 800f67e:	932e      	str	r3, [sp, #184]	; 0xb8
 800f680:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f682:	3301      	adds	r3, #1
 800f684:	932d      	str	r3, [sp, #180]	; 0xb4
 800f686:	2b07      	cmp	r3, #7
 800f688:	dd08      	ble.n	800f69c <_svfprintf_r+0xe18>
 800f68a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f68c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f68e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f690:	f003 f988 	bl	80129a4 <__ssprint_r>
 800f694:	2800      	cmp	r0, #0
 800f696:	d000      	beq.n	800f69a <_svfprintf_r+0xe16>
 800f698:	e2d3      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f69a:	af2f      	add	r7, sp, #188	; 0xbc
 800f69c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f69e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	db01      	blt.n	800f6a8 <_svfprintf_r+0xe24>
 800f6a4:	07f3      	lsls	r3, r6, #31
 800f6a6:	d51b      	bpl.n	800f6e0 <_svfprintf_r+0xe5c>
 800f6a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f6aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f6ac:	603b      	str	r3, [r7, #0]
 800f6ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f6b0:	607b      	str	r3, [r7, #4]
 800f6b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	189b      	adds	r3, r3, r2
 800f6b8:	932e      	str	r3, [sp, #184]	; 0xb8
 800f6ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f6bc:	3301      	adds	r3, #1
 800f6be:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6c0:	2b07      	cmp	r3, #7
 800f6c2:	dd08      	ble.n	800f6d6 <_svfprintf_r+0xe52>
 800f6c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800f6ca:	f003 f96b 	bl	80129a4 <__ssprint_r>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d000      	beq.n	800f6d4 <_svfprintf_r+0xe50>
 800f6d2:	e2b6      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f6d4:	af2f      	add	r7, sp, #188	; 0xbc
 800f6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6d8:	2510      	movs	r5, #16
 800f6da:	1e5c      	subs	r4, r3, #1
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	dc2e      	bgt.n	800f73e <_svfprintf_r+0xeba>
 800f6e0:	0776      	lsls	r6, r6, #29
 800f6e2:	d500      	bpl.n	800f6e6 <_svfprintf_r+0xe62>
 800f6e4:	e290      	b.n	800fc08 <_svfprintf_r+0x1384>
 800f6e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f6e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	da00      	bge.n	800f6f0 <_svfprintf_r+0xe6c>
 800f6ee:	0013      	movs	r3, r2
 800f6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6f2:	18d3      	adds	r3, r2, r3
 800f6f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d007      	beq.n	800f70c <_svfprintf_r+0xe88>
 800f6fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f700:	aa2c      	add	r2, sp, #176	; 0xb0
 800f702:	f003 f94f 	bl	80129a4 <__ssprint_r>
 800f706:	2800      	cmp	r0, #0
 800f708:	d000      	beq.n	800f70c <_svfprintf_r+0xe88>
 800f70a:	e29a      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f70c:	2300      	movs	r3, #0
 800f70e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f712:	2b00      	cmp	r3, #0
 800f714:	d000      	beq.n	800f718 <_svfprintf_r+0xe94>
 800f716:	e2b0      	b.n	800fc7a <_svfprintf_r+0x13f6>
 800f718:	af2f      	add	r7, sp, #188	; 0xbc
 800f71a:	e5dc      	b.n	800f2d6 <_svfprintf_r+0xa52>
 800f71c:	3210      	adds	r2, #16
 800f71e:	607d      	str	r5, [r7, #4]
 800f720:	922e      	str	r2, [sp, #184]	; 0xb8
 800f722:	932d      	str	r3, [sp, #180]	; 0xb4
 800f724:	2b07      	cmp	r3, #7
 800f726:	dd08      	ble.n	800f73a <_svfprintf_r+0xeb6>
 800f728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f72a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f72c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f72e:	f003 f939 	bl	80129a4 <__ssprint_r>
 800f732:	2800      	cmp	r0, #0
 800f734:	d000      	beq.n	800f738 <_svfprintf_r+0xeb4>
 800f736:	e284      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f738:	a92f      	add	r1, sp, #188	; 0xbc
 800f73a:	000f      	movs	r7, r1
 800f73c:	3c10      	subs	r4, #16
 800f73e:	0039      	movs	r1, r7
 800f740:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f742:	4897      	ldr	r0, [pc, #604]	; (800f9a0 <_svfprintf_r+0x111c>)
 800f744:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f746:	3301      	adds	r3, #1
 800f748:	3108      	adds	r1, #8
 800f74a:	6038      	str	r0, [r7, #0]
 800f74c:	2c10      	cmp	r4, #16
 800f74e:	dce5      	bgt.n	800f71c <_svfprintf_r+0xe98>
 800f750:	607c      	str	r4, [r7, #4]
 800f752:	18a4      	adds	r4, r4, r2
 800f754:	942e      	str	r4, [sp, #184]	; 0xb8
 800f756:	000f      	movs	r7, r1
 800f758:	932d      	str	r3, [sp, #180]	; 0xb4
 800f75a:	2b07      	cmp	r3, #7
 800f75c:	ddc0      	ble.n	800f6e0 <_svfprintf_r+0xe5c>
 800f75e:	e05f      	b.n	800f820 <_svfprintf_r+0xf9c>
 800f760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f762:	2b00      	cmp	r3, #0
 800f764:	dc78      	bgt.n	800f858 <_svfprintf_r+0xfd4>
 800f766:	4b8d      	ldr	r3, [pc, #564]	; (800f99c <_svfprintf_r+0x1118>)
 800f768:	603b      	str	r3, [r7, #0]
 800f76a:	2301      	movs	r3, #1
 800f76c:	607b      	str	r3, [r7, #4]
 800f76e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f770:	3708      	adds	r7, #8
 800f772:	3301      	adds	r3, #1
 800f774:	932e      	str	r3, [sp, #184]	; 0xb8
 800f776:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f778:	3301      	adds	r3, #1
 800f77a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f77c:	2b07      	cmp	r3, #7
 800f77e:	dd08      	ble.n	800f792 <_svfprintf_r+0xf0e>
 800f780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f782:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f784:	aa2c      	add	r2, sp, #176	; 0xb0
 800f786:	f003 f90d 	bl	80129a4 <__ssprint_r>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d000      	beq.n	800f790 <_svfprintf_r+0xf0c>
 800f78e:	e258      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f790:	af2f      	add	r7, sp, #188	; 0xbc
 800f792:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f794:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f796:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f798:	430b      	orrs	r3, r1
 800f79a:	2101      	movs	r1, #1
 800f79c:	4031      	ands	r1, r6
 800f79e:	430b      	orrs	r3, r1
 800f7a0:	d09e      	beq.n	800f6e0 <_svfprintf_r+0xe5c>
 800f7a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f7a4:	603b      	str	r3, [r7, #0]
 800f7a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f7a8:	607b      	str	r3, [r7, #4]
 800f7aa:	189a      	adds	r2, r3, r2
 800f7ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f7ae:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	2b07      	cmp	r3, #7
 800f7b8:	dd08      	ble.n	800f7cc <_svfprintf_r+0xf48>
 800f7ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7be:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7c0:	f003 f8f0 	bl	80129a4 <__ssprint_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d000      	beq.n	800f7ca <_svfprintf_r+0xf46>
 800f7c8:	e23b      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f7ca:	af2f      	add	r7, sp, #188	; 0xbc
 800f7cc:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f7ce:	2c00      	cmp	r4, #0
 800f7d0:	da19      	bge.n	800f806 <_svfprintf_r+0xf82>
 800f7d2:	0038      	movs	r0, r7
 800f7d4:	2510      	movs	r5, #16
 800f7d6:	4264      	negs	r4, r4
 800f7d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f7da:	4a71      	ldr	r2, [pc, #452]	; (800f9a0 <_svfprintf_r+0x111c>)
 800f7dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f7de:	3101      	adds	r1, #1
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	6002      	str	r2, [r0, #0]
 800f7e4:	2c10      	cmp	r4, #16
 800f7e6:	dc25      	bgt.n	800f834 <_svfprintf_r+0xfb0>
 800f7e8:	6044      	str	r4, [r0, #4]
 800f7ea:	18e4      	adds	r4, r4, r3
 800f7ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800f7ee:	912d      	str	r1, [sp, #180]	; 0xb4
 800f7f0:	2907      	cmp	r1, #7
 800f7f2:	dd08      	ble.n	800f806 <_svfprintf_r+0xf82>
 800f7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7fa:	f003 f8d3 	bl	80129a4 <__ssprint_r>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d000      	beq.n	800f804 <_svfprintf_r+0xf80>
 800f802:	e21e      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f804:	af2f      	add	r7, sp, #188	; 0xbc
 800f806:	9b08      	ldr	r3, [sp, #32]
 800f808:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f80a:	603b      	str	r3, [r7, #0]
 800f80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f80e:	18d2      	adds	r2, r2, r3
 800f810:	922e      	str	r2, [sp, #184]	; 0xb8
 800f812:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f814:	607b      	str	r3, [r7, #4]
 800f816:	3201      	adds	r2, #1
 800f818:	922d      	str	r2, [sp, #180]	; 0xb4
 800f81a:	2a07      	cmp	r2, #7
 800f81c:	dc00      	bgt.n	800f820 <_svfprintf_r+0xf9c>
 800f81e:	e45b      	b.n	800f0d8 <_svfprintf_r+0x854>
 800f820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f822:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f824:	aa2c      	add	r2, sp, #176	; 0xb0
 800f826:	f003 f8bd 	bl	80129a4 <__ssprint_r>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d000      	beq.n	800f830 <_svfprintf_r+0xfac>
 800f82e:	e208      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f830:	af2f      	add	r7, sp, #188	; 0xbc
 800f832:	e755      	b.n	800f6e0 <_svfprintf_r+0xe5c>
 800f834:	3310      	adds	r3, #16
 800f836:	6045      	str	r5, [r0, #4]
 800f838:	932e      	str	r3, [sp, #184]	; 0xb8
 800f83a:	912d      	str	r1, [sp, #180]	; 0xb4
 800f83c:	2907      	cmp	r1, #7
 800f83e:	dd08      	ble.n	800f852 <_svfprintf_r+0xfce>
 800f840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f842:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f844:	aa2c      	add	r2, sp, #176	; 0xb0
 800f846:	f003 f8ad 	bl	80129a4 <__ssprint_r>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d000      	beq.n	800f850 <_svfprintf_r+0xfcc>
 800f84e:	e1f8      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f850:	af2f      	add	r7, sp, #188	; 0xbc
 800f852:	0038      	movs	r0, r7
 800f854:	3c10      	subs	r4, #16
 800f856:	e7bf      	b.n	800f7d8 <_svfprintf_r+0xf54>
 800f858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f85a:	002c      	movs	r4, r5
 800f85c:	429d      	cmp	r5, r3
 800f85e:	dd00      	ble.n	800f862 <_svfprintf_r+0xfde>
 800f860:	001c      	movs	r4, r3
 800f862:	2c00      	cmp	r4, #0
 800f864:	dd14      	ble.n	800f890 <_svfprintf_r+0x100c>
 800f866:	9b08      	ldr	r3, [sp, #32]
 800f868:	607c      	str	r4, [r7, #4]
 800f86a:	603b      	str	r3, [r7, #0]
 800f86c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f86e:	3708      	adds	r7, #8
 800f870:	18e3      	adds	r3, r4, r3
 800f872:	932e      	str	r3, [sp, #184]	; 0xb8
 800f874:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f876:	3301      	adds	r3, #1
 800f878:	932d      	str	r3, [sp, #180]	; 0xb4
 800f87a:	2b07      	cmp	r3, #7
 800f87c:	dd08      	ble.n	800f890 <_svfprintf_r+0x100c>
 800f87e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f880:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f882:	aa2c      	add	r2, sp, #176	; 0xb0
 800f884:	f003 f88e 	bl	80129a4 <__ssprint_r>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d000      	beq.n	800f88e <_svfprintf_r+0x100a>
 800f88c:	e1d9      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f88e:	af2f      	add	r7, sp, #188	; 0xbc
 800f890:	43e3      	mvns	r3, r4
 800f892:	17db      	asrs	r3, r3, #31
 800f894:	401c      	ands	r4, r3
 800f896:	1b2c      	subs	r4, r5, r4
 800f898:	2c00      	cmp	r4, #0
 800f89a:	dd18      	ble.n	800f8ce <_svfprintf_r+0x104a>
 800f89c:	0039      	movs	r1, r7
 800f89e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f8a0:	483f      	ldr	r0, [pc, #252]	; (800f9a0 <_svfprintf_r+0x111c>)
 800f8a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	3108      	adds	r1, #8
 800f8a8:	6038      	str	r0, [r7, #0]
 800f8aa:	2c10      	cmp	r4, #16
 800f8ac:	dc7a      	bgt.n	800f9a4 <_svfprintf_r+0x1120>
 800f8ae:	607c      	str	r4, [r7, #4]
 800f8b0:	18a4      	adds	r4, r4, r2
 800f8b2:	000f      	movs	r7, r1
 800f8b4:	942e      	str	r4, [sp, #184]	; 0xb8
 800f8b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8b8:	2b07      	cmp	r3, #7
 800f8ba:	dd08      	ble.n	800f8ce <_svfprintf_r+0x104a>
 800f8bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8c2:	f003 f86f 	bl	80129a4 <__ssprint_r>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	d000      	beq.n	800f8cc <_svfprintf_r+0x1048>
 800f8ca:	e1ba      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f8cc:	af2f      	add	r7, sp, #188	; 0xbc
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	195d      	adds	r5, r3, r5
 800f8d2:	0573      	lsls	r3, r6, #21
 800f8d4:	d50b      	bpl.n	800f8ee <_svfprintf_r+0x106a>
 800f8d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d176      	bne.n	800f9ca <_svfprintf_r+0x1146>
 800f8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d176      	bne.n	800f9d0 <_svfprintf_r+0x114c>
 800f8e2:	9b08      	ldr	r3, [sp, #32]
 800f8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8e6:	189b      	adds	r3, r3, r2
 800f8e8:	429d      	cmp	r5, r3
 800f8ea:	d900      	bls.n	800f8ee <_svfprintf_r+0x106a>
 800f8ec:	001d      	movs	r5, r3
 800f8ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f8f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	db01      	blt.n	800f8fa <_svfprintf_r+0x1076>
 800f8f6:	07f3      	lsls	r3, r6, #31
 800f8f8:	d516      	bpl.n	800f928 <_svfprintf_r+0x10a4>
 800f8fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f8fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8fe:	603b      	str	r3, [r7, #0]
 800f900:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f902:	607b      	str	r3, [r7, #4]
 800f904:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f906:	3708      	adds	r7, #8
 800f908:	189b      	adds	r3, r3, r2
 800f90a:	932e      	str	r3, [sp, #184]	; 0xb8
 800f90c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f90e:	3301      	adds	r3, #1
 800f910:	932d      	str	r3, [sp, #180]	; 0xb4
 800f912:	2b07      	cmp	r3, #7
 800f914:	dd08      	ble.n	800f928 <_svfprintf_r+0x10a4>
 800f916:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f918:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f91a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f91c:	f003 f842 	bl	80129a4 <__ssprint_r>
 800f920:	2800      	cmp	r0, #0
 800f922:	d000      	beq.n	800f926 <_svfprintf_r+0x10a2>
 800f924:	e18d      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f926:	af2f      	add	r7, sp, #188	; 0xbc
 800f928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f92a:	9b08      	ldr	r3, [sp, #32]
 800f92c:	4694      	mov	ip, r2
 800f92e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f930:	4463      	add	r3, ip
 800f932:	1b5b      	subs	r3, r3, r5
 800f934:	1b14      	subs	r4, r2, r4
 800f936:	429c      	cmp	r4, r3
 800f938:	dd00      	ble.n	800f93c <_svfprintf_r+0x10b8>
 800f93a:	001c      	movs	r4, r3
 800f93c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f93e:	2c00      	cmp	r4, #0
 800f940:	dd12      	ble.n	800f968 <_svfprintf_r+0x10e4>
 800f942:	18e3      	adds	r3, r4, r3
 800f944:	932e      	str	r3, [sp, #184]	; 0xb8
 800f946:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f948:	603d      	str	r5, [r7, #0]
 800f94a:	3301      	adds	r3, #1
 800f94c:	607c      	str	r4, [r7, #4]
 800f94e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f950:	3708      	adds	r7, #8
 800f952:	2b07      	cmp	r3, #7
 800f954:	dd08      	ble.n	800f968 <_svfprintf_r+0x10e4>
 800f956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f958:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f95a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f95c:	f003 f822 	bl	80129a4 <__ssprint_r>
 800f960:	2800      	cmp	r0, #0
 800f962:	d000      	beq.n	800f966 <_svfprintf_r+0x10e2>
 800f964:	e16d      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f966:	af2f      	add	r7, sp, #188	; 0xbc
 800f968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f96a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f96c:	2510      	movs	r5, #16
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	43e2      	mvns	r2, r4
 800f972:	17d2      	asrs	r2, r2, #31
 800f974:	4014      	ands	r4, r2
 800f976:	1b1c      	subs	r4, r3, r4
 800f978:	2c00      	cmp	r4, #0
 800f97a:	dc00      	bgt.n	800f97e <_svfprintf_r+0x10fa>
 800f97c:	e6b0      	b.n	800f6e0 <_svfprintf_r+0xe5c>
 800f97e:	0039      	movs	r1, r7
 800f980:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f982:	4807      	ldr	r0, [pc, #28]	; (800f9a0 <_svfprintf_r+0x111c>)
 800f984:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f986:	3301      	adds	r3, #1
 800f988:	3108      	adds	r1, #8
 800f98a:	6038      	str	r0, [r7, #0]
 800f98c:	2c10      	cmp	r4, #16
 800f98e:	dd00      	ble.n	800f992 <_svfprintf_r+0x110e>
 800f990:	e096      	b.n	800fac0 <_svfprintf_r+0x123c>
 800f992:	1912      	adds	r2, r2, r4
 800f994:	607c      	str	r4, [r7, #4]
 800f996:	922e      	str	r2, [sp, #184]	; 0xb8
 800f998:	e6dd      	b.n	800f756 <_svfprintf_r+0xed2>
 800f99a:	46c0      	nop			; (mov r8, r8)
 800f99c:	08015e8e 	.word	0x08015e8e
 800f9a0:	08015ea0 	.word	0x08015ea0
 800f9a4:	2010      	movs	r0, #16
 800f9a6:	1812      	adds	r2, r2, r0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	922e      	str	r2, [sp, #184]	; 0xb8
 800f9ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9ae:	2b07      	cmp	r3, #7
 800f9b0:	dd08      	ble.n	800f9c4 <_svfprintf_r+0x1140>
 800f9b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9b8:	f002 fff4 	bl	80129a4 <__ssprint_r>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d000      	beq.n	800f9c2 <_svfprintf_r+0x113e>
 800f9c0:	e13f      	b.n	800fc42 <_svfprintf_r+0x13be>
 800f9c2:	a92f      	add	r1, sp, #188	; 0xbc
 800f9c4:	000f      	movs	r7, r1
 800f9c6:	3c10      	subs	r4, #16
 800f9c8:	e768      	b.n	800f89c <_svfprintf_r+0x1018>
 800f9ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d05d      	beq.n	800fa8c <_svfprintf_r+0x1208>
 800f9d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	9310      	str	r3, [sp, #64]	; 0x40
 800f9d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f9da:	603b      	str	r3, [r7, #0]
 800f9dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9de:	607b      	str	r3, [r7, #4]
 800f9e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	189b      	adds	r3, r3, r2
 800f9e6:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9ee:	2b07      	cmp	r3, #7
 800f9f0:	dd08      	ble.n	800fa04 <_svfprintf_r+0x1180>
 800f9f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9f8:	f002 ffd4 	bl	80129a4 <__ssprint_r>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d000      	beq.n	800fa02 <_svfprintf_r+0x117e>
 800fa00:	e11f      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fa02:	af2f      	add	r7, sp, #188	; 0xbc
 800fa04:	9b08      	ldr	r3, [sp, #32]
 800fa06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa08:	189c      	adds	r4, r3, r2
 800fa0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa0c:	1b64      	subs	r4, r4, r5
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	429c      	cmp	r4, r3
 800fa12:	dd00      	ble.n	800fa16 <_svfprintf_r+0x1192>
 800fa14:	001c      	movs	r4, r3
 800fa16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fa18:	2c00      	cmp	r4, #0
 800fa1a:	dd12      	ble.n	800fa42 <_svfprintf_r+0x11be>
 800fa1c:	18e3      	adds	r3, r4, r3
 800fa1e:	932e      	str	r3, [sp, #184]	; 0xb8
 800fa20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa22:	603d      	str	r5, [r7, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	607c      	str	r4, [r7, #4]
 800fa28:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	2b07      	cmp	r3, #7
 800fa2e:	dd08      	ble.n	800fa42 <_svfprintf_r+0x11be>
 800fa30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa34:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa36:	f002 ffb5 	bl	80129a4 <__ssprint_r>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d000      	beq.n	800fa40 <_svfprintf_r+0x11bc>
 800fa3e:	e100      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fa40:	af2f      	add	r7, sp, #188	; 0xbc
 800fa42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa44:	781a      	ldrb	r2, [r3, #0]
 800fa46:	43e3      	mvns	r3, r4
 800fa48:	17db      	asrs	r3, r3, #31
 800fa4a:	401c      	ands	r4, r3
 800fa4c:	1b14      	subs	r4, r2, r4
 800fa4e:	2c00      	cmp	r4, #0
 800fa50:	dd18      	ble.n	800fa84 <_svfprintf_r+0x1200>
 800fa52:	0039      	movs	r1, r7
 800fa54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa56:	48aa      	ldr	r0, [pc, #680]	; (800fd00 <_svfprintf_r+0x147c>)
 800fa58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	3108      	adds	r1, #8
 800fa5e:	6038      	str	r0, [r7, #0]
 800fa60:	2c10      	cmp	r4, #16
 800fa62:	dc1a      	bgt.n	800fa9a <_svfprintf_r+0x1216>
 800fa64:	1912      	adds	r2, r2, r4
 800fa66:	607c      	str	r4, [r7, #4]
 800fa68:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa6a:	000f      	movs	r7, r1
 800fa6c:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa6e:	2b07      	cmp	r3, #7
 800fa70:	dd08      	ble.n	800fa84 <_svfprintf_r+0x1200>
 800fa72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa76:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa78:	f002 ff94 	bl	80129a4 <__ssprint_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d000      	beq.n	800fa82 <_svfprintf_r+0x11fe>
 800fa80:	e0df      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fa82:	af2f      	add	r7, sp, #188	; 0xbc
 800fa84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	18ed      	adds	r5, r5, r3
 800fa8a:	e724      	b.n	800f8d6 <_svfprintf_r+0x1052>
 800fa8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	9312      	str	r3, [sp, #72]	; 0x48
 800fa92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa94:	3b01      	subs	r3, #1
 800fa96:	9311      	str	r3, [sp, #68]	; 0x44
 800fa98:	e79d      	b.n	800f9d6 <_svfprintf_r+0x1152>
 800fa9a:	2010      	movs	r0, #16
 800fa9c:	1812      	adds	r2, r2, r0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	922e      	str	r2, [sp, #184]	; 0xb8
 800faa2:	932d      	str	r3, [sp, #180]	; 0xb4
 800faa4:	2b07      	cmp	r3, #7
 800faa6:	dd08      	ble.n	800faba <_svfprintf_r+0x1236>
 800faa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800faaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800faac:	aa2c      	add	r2, sp, #176	; 0xb0
 800faae:	f002 ff79 	bl	80129a4 <__ssprint_r>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d000      	beq.n	800fab8 <_svfprintf_r+0x1234>
 800fab6:	e0c4      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fab8:	a92f      	add	r1, sp, #188	; 0xbc
 800faba:	000f      	movs	r7, r1
 800fabc:	3c10      	subs	r4, #16
 800fabe:	e7c8      	b.n	800fa52 <_svfprintf_r+0x11ce>
 800fac0:	3210      	adds	r2, #16
 800fac2:	607d      	str	r5, [r7, #4]
 800fac4:	922e      	str	r2, [sp, #184]	; 0xb8
 800fac6:	932d      	str	r3, [sp, #180]	; 0xb4
 800fac8:	2b07      	cmp	r3, #7
 800faca:	dd08      	ble.n	800fade <_svfprintf_r+0x125a>
 800facc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800face:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fad0:	aa2c      	add	r2, sp, #176	; 0xb0
 800fad2:	f002 ff67 	bl	80129a4 <__ssprint_r>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d000      	beq.n	800fadc <_svfprintf_r+0x1258>
 800fada:	e0b2      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fadc:	a92f      	add	r1, sp, #188	; 0xbc
 800fade:	000f      	movs	r7, r1
 800fae0:	3c10      	subs	r4, #16
 800fae2:	e74c      	b.n	800f97e <_svfprintf_r+0x10fa>
 800fae4:	003c      	movs	r4, r7
 800fae6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800fae8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800faea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800faec:	3101      	adds	r1, #1
 800faee:	3301      	adds	r3, #1
 800faf0:	3408      	adds	r4, #8
 800faf2:	2a01      	cmp	r2, #1
 800faf4:	dc03      	bgt.n	800fafe <_svfprintf_r+0x127a>
 800faf6:	2201      	movs	r2, #1
 800faf8:	4216      	tst	r6, r2
 800fafa:	d100      	bne.n	800fafe <_svfprintf_r+0x127a>
 800fafc:	e07f      	b.n	800fbfe <_svfprintf_r+0x137a>
 800fafe:	9a08      	ldr	r2, [sp, #32]
 800fb00:	912e      	str	r1, [sp, #184]	; 0xb8
 800fb02:	603a      	str	r2, [r7, #0]
 800fb04:	2201      	movs	r2, #1
 800fb06:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb08:	607a      	str	r2, [r7, #4]
 800fb0a:	2b07      	cmp	r3, #7
 800fb0c:	dd08      	ble.n	800fb20 <_svfprintf_r+0x129c>
 800fb0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb12:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb14:	f002 ff46 	bl	80129a4 <__ssprint_r>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d000      	beq.n	800fb1e <_svfprintf_r+0x129a>
 800fb1c:	e091      	b.n	800fc42 <_svfprintf_r+0x13be>
 800fb1e:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fb22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fb2c:	3408      	adds	r4, #8
 800fb2e:	189b      	adds	r3, r3, r2
 800fb30:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb34:	3301      	adds	r3, #1
 800fb36:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb38:	2b07      	cmp	r3, #7
 800fb3a:	dd07      	ble.n	800fb4c <_svfprintf_r+0x12c8>
 800fb3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb40:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb42:	f002 ff2f 	bl	80129a4 <__ssprint_r>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d17b      	bne.n	800fc42 <_svfprintf_r+0x13be>
 800fb4a:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb4e:	2200      	movs	r2, #0
 800fb50:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fb52:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fb54:	9309      	str	r3, [sp, #36]	; 0x24
 800fb56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb58:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800fb5a:	1e5d      	subs	r5, r3, #1
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f7f0 fc73 	bl	8000448 <__aeabi_dcmpeq>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	d126      	bne.n	800fbb4 <_svfprintf_r+0x1330>
 800fb66:	9b08      	ldr	r3, [sp, #32]
 800fb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb6e:	6023      	str	r3, [r4, #0]
 800fb70:	1e7b      	subs	r3, r7, #1
 800fb72:	3201      	adds	r2, #1
 800fb74:	185b      	adds	r3, r3, r1
 800fb76:	6065      	str	r5, [r4, #4]
 800fb78:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb7a:	922d      	str	r2, [sp, #180]	; 0xb4
 800fb7c:	3408      	adds	r4, #8
 800fb7e:	2a07      	cmp	r2, #7
 800fb80:	dd07      	ble.n	800fb92 <_svfprintf_r+0x130e>
 800fb82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb86:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb88:	f002 ff0c 	bl	80129a4 <__ssprint_r>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d158      	bne.n	800fc42 <_svfprintf_r+0x13be>
 800fb90:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb92:	ab28      	add	r3, sp, #160	; 0xa0
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fb9a:	6063      	str	r3, [r4, #4]
 800fb9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fb9e:	189b      	adds	r3, r3, r2
 800fba0:	932e      	str	r3, [sp, #184]	; 0xb8
 800fba2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fba4:	3301      	adds	r3, #1
 800fba6:	932d      	str	r3, [sp, #180]	; 0xb4
 800fba8:	2b07      	cmp	r3, #7
 800fbaa:	dd00      	ble.n	800fbae <_svfprintf_r+0x132a>
 800fbac:	e638      	b.n	800f820 <_svfprintf_r+0xf9c>
 800fbae:	3408      	adds	r4, #8
 800fbb0:	0027      	movs	r7, r4
 800fbb2:	e595      	b.n	800f6e0 <_svfprintf_r+0xe5c>
 800fbb4:	2710      	movs	r7, #16
 800fbb6:	2d00      	cmp	r5, #0
 800fbb8:	ddeb      	ble.n	800fb92 <_svfprintf_r+0x130e>
 800fbba:	0021      	movs	r1, r4
 800fbbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbbe:	4850      	ldr	r0, [pc, #320]	; (800fd00 <_svfprintf_r+0x147c>)
 800fbc0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	3108      	adds	r1, #8
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	2d10      	cmp	r5, #16
 800fbca:	dc07      	bgt.n	800fbdc <_svfprintf_r+0x1358>
 800fbcc:	6065      	str	r5, [r4, #4]
 800fbce:	000c      	movs	r4, r1
 800fbd0:	18ad      	adds	r5, r5, r2
 800fbd2:	952e      	str	r5, [sp, #184]	; 0xb8
 800fbd4:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbd6:	2b07      	cmp	r3, #7
 800fbd8:	dddb      	ble.n	800fb92 <_svfprintf_r+0x130e>
 800fbda:	e7d2      	b.n	800fb82 <_svfprintf_r+0x12fe>
 800fbdc:	3210      	adds	r2, #16
 800fbde:	6067      	str	r7, [r4, #4]
 800fbe0:	922e      	str	r2, [sp, #184]	; 0xb8
 800fbe2:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbe4:	2b07      	cmp	r3, #7
 800fbe6:	dd07      	ble.n	800fbf8 <_svfprintf_r+0x1374>
 800fbe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbec:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbee:	f002 fed9 	bl	80129a4 <__ssprint_r>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d125      	bne.n	800fc42 <_svfprintf_r+0x13be>
 800fbf6:	a92f      	add	r1, sp, #188	; 0xbc
 800fbf8:	000c      	movs	r4, r1
 800fbfa:	3d10      	subs	r5, #16
 800fbfc:	e7dd      	b.n	800fbba <_svfprintf_r+0x1336>
 800fbfe:	9808      	ldr	r0, [sp, #32]
 800fc00:	912e      	str	r1, [sp, #184]	; 0xb8
 800fc02:	c705      	stmia	r7!, {r0, r2}
 800fc04:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc06:	e7e6      	b.n	800fbd6 <_svfprintf_r+0x1352>
 800fc08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc0c:	2510      	movs	r5, #16
 800fc0e:	1a9c      	subs	r4, r3, r2
 800fc10:	2c00      	cmp	r4, #0
 800fc12:	dc00      	bgt.n	800fc16 <_svfprintf_r+0x1392>
 800fc14:	e567      	b.n	800f6e6 <_svfprintf_r+0xe62>
 800fc16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fc18:	493a      	ldr	r1, [pc, #232]	; (800fd04 <_svfprintf_r+0x1480>)
 800fc1a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	6039      	str	r1, [r7, #0]
 800fc20:	2c10      	cmp	r4, #16
 800fc22:	dc19      	bgt.n	800fc58 <_svfprintf_r+0x13d4>
 800fc24:	607c      	str	r4, [r7, #4]
 800fc26:	18a4      	adds	r4, r4, r2
 800fc28:	942e      	str	r4, [sp, #184]	; 0xb8
 800fc2a:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc2c:	2b07      	cmp	r3, #7
 800fc2e:	dc00      	bgt.n	800fc32 <_svfprintf_r+0x13ae>
 800fc30:	e559      	b.n	800f6e6 <_svfprintf_r+0xe62>
 800fc32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc36:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc38:	f002 feb4 	bl	80129a4 <__ssprint_r>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d100      	bne.n	800fc42 <_svfprintf_r+0x13be>
 800fc40:	e551      	b.n	800f6e6 <_svfprintf_r+0xe62>
 800fc42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d101      	bne.n	800fc4c <_svfprintf_r+0x13c8>
 800fc48:	f7ff f845 	bl	800ecd6 <_svfprintf_r+0x452>
 800fc4c:	0019      	movs	r1, r3
 800fc4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc50:	f7fd fd80 	bl	800d754 <_free_r>
 800fc54:	f7ff f83f 	bl	800ecd6 <_svfprintf_r+0x452>
 800fc58:	3210      	adds	r2, #16
 800fc5a:	607d      	str	r5, [r7, #4]
 800fc5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fc5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc60:	3708      	adds	r7, #8
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	dd07      	ble.n	800fc76 <_svfprintf_r+0x13f2>
 800fc66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc6c:	f002 fe9a 	bl	80129a4 <__ssprint_r>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d1e6      	bne.n	800fc42 <_svfprintf_r+0x13be>
 800fc74:	af2f      	add	r7, sp, #188	; 0xbc
 800fc76:	3c10      	subs	r4, #16
 800fc78:	e7cd      	b.n	800fc16 <_svfprintf_r+0x1392>
 800fc7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc7e:	f7fd fd69 	bl	800d754 <_free_r>
 800fc82:	e549      	b.n	800f718 <_svfprintf_r+0xe94>
 800fc84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <_svfprintf_r+0x140a>
 800fc8a:	f7ff f824 	bl	800ecd6 <_svfprintf_r+0x452>
 800fc8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc92:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc94:	f002 fe86 	bl	80129a4 <__ssprint_r>
 800fc98:	f7ff f81d 	bl	800ecd6 <_svfprintf_r+0x452>
 800fc9c:	0034      	movs	r4, r6
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d101      	bne.n	800fca6 <_svfprintf_r+0x1422>
 800fca2:	f7fe ff8c 	bl	800ebbe <_svfprintf_r+0x33a>
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <_svfprintf_r+0x142a>
 800fcaa:	f7ff fc01 	bl	800f4b0 <_svfprintf_r+0xc2c>
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d100      	bne.n	800fcb4 <_svfprintf_r+0x1430>
 800fcb2:	e459      	b.n	800f568 <_svfprintf_r+0xce4>
 800fcb4:	2507      	movs	r5, #7
 800fcb6:	ab58      	add	r3, sp, #352	; 0x160
 800fcb8:	9308      	str	r3, [sp, #32]
 800fcba:	9a08      	ldr	r2, [sp, #32]
 800fcbc:	0013      	movs	r3, r2
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	9308      	str	r3, [sp, #32]
 800fcc2:	9b06      	ldr	r3, [sp, #24]
 800fcc4:	9908      	ldr	r1, [sp, #32]
 800fcc6:	402b      	ands	r3, r5
 800fcc8:	3330      	adds	r3, #48	; 0x30
 800fcca:	700b      	strb	r3, [r1, #0]
 800fccc:	9907      	ldr	r1, [sp, #28]
 800fcce:	074e      	lsls	r6, r1, #29
 800fcd0:	9906      	ldr	r1, [sp, #24]
 800fcd2:	08c8      	lsrs	r0, r1, #3
 800fcd4:	9907      	ldr	r1, [sp, #28]
 800fcd6:	4306      	orrs	r6, r0
 800fcd8:	08c9      	lsrs	r1, r1, #3
 800fcda:	9107      	str	r1, [sp, #28]
 800fcdc:	0031      	movs	r1, r6
 800fcde:	9807      	ldr	r0, [sp, #28]
 800fce0:	9606      	str	r6, [sp, #24]
 800fce2:	4301      	orrs	r1, r0
 800fce4:	d1e9      	bne.n	800fcba <_svfprintf_r+0x1436>
 800fce6:	07e1      	lsls	r1, r4, #31
 800fce8:	d400      	bmi.n	800fcec <_svfprintf_r+0x1468>
 800fcea:	e42a      	b.n	800f542 <_svfprintf_r+0xcbe>
 800fcec:	2b30      	cmp	r3, #48	; 0x30
 800fcee:	d100      	bne.n	800fcf2 <_svfprintf_r+0x146e>
 800fcf0:	e427      	b.n	800f542 <_svfprintf_r+0xcbe>
 800fcf2:	2130      	movs	r1, #48	; 0x30
 800fcf4:	9b08      	ldr	r3, [sp, #32]
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	7019      	strb	r1, [r3, #0]
 800fcfa:	1e93      	subs	r3, r2, #2
 800fcfc:	9308      	str	r3, [sp, #32]
 800fcfe:	e420      	b.n	800f542 <_svfprintf_r+0xcbe>
 800fd00:	08015ea0 	.word	0x08015ea0
 800fd04:	08015e90 	.word	0x08015e90

0800fd08 <__ssvfscanf_r>:
 800fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd0a:	4ca7      	ldr	r4, [pc, #668]	; (800ffa8 <__ssvfscanf_r+0x2a0>)
 800fd0c:	44a5      	add	sp, r4
 800fd0e:	af02      	add	r7, sp, #8
 800fd10:	633b      	str	r3, [r7, #48]	; 0x30
 800fd12:	000b      	movs	r3, r1
 800fd14:	6378      	str	r0, [r7, #52]	; 0x34
 800fd16:	6479      	str	r1, [r7, #68]	; 0x44
 800fd18:	61ba      	str	r2, [r7, #24]
 800fd1a:	220c      	movs	r2, #12
 800fd1c:	5e9a      	ldrsh	r2, [r3, r2]
 800fd1e:	2380      	movs	r3, #128	; 0x80
 800fd20:	019b      	lsls	r3, r3, #6
 800fd22:	421a      	tst	r2, r3
 800fd24:	d105      	bne.n	800fd32 <__ssvfscanf_r+0x2a>
 800fd26:	4313      	orrs	r3, r2
 800fd28:	818b      	strh	r3, [r1, #12]
 800fd2a:	4aa0      	ldr	r2, [pc, #640]	; (800ffac <__ssvfscanf_r+0x2a4>)
 800fd2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fd2e:	4013      	ands	r3, r2
 800fd30:	664b      	str	r3, [r1, #100]	; 0x64
 800fd32:	2300      	movs	r3, #0
 800fd34:	617b      	str	r3, [r7, #20]
 800fd36:	643b      	str	r3, [r7, #64]	; 0x40
 800fd38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	69ba      	ldr	r2, [r7, #24]
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	3201      	adds	r2, #1
 800fd48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd4a:	61ba      	str	r2, [r7, #24]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d100      	bne.n	800fd52 <__ssvfscanf_r+0x4a>
 800fd50:	e0d7      	b.n	800ff02 <__ssvfscanf_r+0x1fa>
 800fd52:	2608      	movs	r6, #8
 800fd54:	2108      	movs	r1, #8
 800fd56:	4a96      	ldr	r2, [pc, #600]	; (800ffb0 <__ssvfscanf_r+0x2a8>)
 800fd58:	5cd2      	ldrb	r2, [r2, r3]
 800fd5a:	4016      	ands	r6, r2
 800fd5c:	420a      	tst	r2, r1
 800fd5e:	d01d      	beq.n	800fd9c <__ssvfscanf_r+0x94>
 800fd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dd12      	ble.n	800fd8e <__ssvfscanf_r+0x86>
 800fd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd6a:	4991      	ldr	r1, [pc, #580]	; (800ffb0 <__ssvfscanf_r+0x2a8>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	781a      	ldrb	r2, [r3, #0]
 800fd70:	5c8a      	ldrb	r2, [r1, r2]
 800fd72:	2108      	movs	r1, #8
 800fd74:	420a      	tst	r2, r1
 800fd76:	d0e3      	beq.n	800fd40 <__ssvfscanf_r+0x38>
 800fd78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd7c:	3201      	adds	r2, #1
 800fd7e:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd82:	3301      	adds	r3, #1
 800fd84:	6852      	ldr	r2, [r2, #4]
 800fd86:	600b      	str	r3, [r1, #0]
 800fd88:	3a01      	subs	r2, #1
 800fd8a:	604a      	str	r2, [r1, #4]
 800fd8c:	e7e8      	b.n	800fd60 <__ssvfscanf_r+0x58>
 800fd8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd92:	f002 fec7 	bl	8012b24 <__ssrefill_r>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d0e6      	beq.n	800fd68 <__ssvfscanf_r+0x60>
 800fd9a:	e7d1      	b.n	800fd40 <__ssvfscanf_r+0x38>
 800fd9c:	2b25      	cmp	r3, #37	; 0x25
 800fd9e:	d165      	bne.n	800fe6c <__ssvfscanf_r+0x164>
 800fda0:	250a      	movs	r5, #10
 800fda2:	2480      	movs	r4, #128	; 0x80
 800fda4:	69ba      	ldr	r2, [r7, #24]
 800fda6:	63fe      	str	r6, [r7, #60]	; 0x3c
 800fda8:	3b16      	subs	r3, #22
 800fdaa:	69b9      	ldr	r1, [r7, #24]
 800fdac:	3101      	adds	r1, #1
 800fdae:	61b9      	str	r1, [r7, #24]
 800fdb0:	7811      	ldrb	r1, [r2, #0]
 800fdb2:	0008      	movs	r0, r1
 800fdb4:	3825      	subs	r0, #37	; 0x25
 800fdb6:	2855      	cmp	r0, #85	; 0x55
 800fdb8:	d900      	bls.n	800fdbc <__ssvfscanf_r+0xb4>
 800fdba:	e170      	b.n	801009e <__ssvfscanf_r+0x396>
 800fdbc:	f7f0 f9b4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fdc0:	016f0056 	.word	0x016f0056
 800fdc4:	016f016f 	.word	0x016f016f
 800fdc8:	0081016f 	.word	0x0081016f
 800fdcc:	016f016f 	.word	0x016f016f
 800fdd0:	016f016f 	.word	0x016f016f
 800fdd4:	00b8016f 	.word	0x00b8016f
 800fdd8:	00b800b8 	.word	0x00b800b8
 800fddc:	00b800b8 	.word	0x00b800b8
 800fde0:	00b800b8 	.word	0x00b800b8
 800fde4:	00b800b8 	.word	0x00b800b8
 800fde8:	016f00b8 	.word	0x016f00b8
 800fdec:	016f016f 	.word	0x016f016f
 800fdf0:	016f016f 	.word	0x016f016f
 800fdf4:	016f016f 	.word	0x016f016f
 800fdf8:	016f00d8 	.word	0x016f00d8
 800fdfc:	00c1010a 	.word	0x00c1010a
 800fe00:	00d800d8 	.word	0x00d800d8
 800fe04:	016f00d8 	.word	0x016f00d8
 800fe08:	016f016f 	.word	0x016f016f
 800fe0c:	009f016f 	.word	0x009f016f
 800fe10:	016f016f 	.word	0x016f016f
 800fe14:	016f00c9 	.word	0x016f00c9
 800fe18:	016f016f 	.word	0x016f016f
 800fe1c:	016f00f0 	.word	0x016f00f0
 800fe20:	016f016f 	.word	0x016f016f
 800fe24:	00d1016f 	.word	0x00d1016f
 800fe28:	016f016f 	.word	0x016f016f
 800fe2c:	016f00fe 	.word	0x016f00fe
 800fe30:	016f016f 	.word	0x016f016f
 800fe34:	016f016f 	.word	0x016f016f
 800fe38:	016f00d8 	.word	0x016f00d8
 800fe3c:	00c3010c 	.word	0x00c3010c
 800fe40:	00d800d8 	.word	0x00d800d8
 800fe44:	009400d8 	.word	0x009400d8
 800fe48:	009f012f 	.word	0x009f012f
 800fe4c:	0088016f 	.word	0x0088016f
 800fe50:	011200a9 	.word	0x011200a9
 800fe54:	011000cb 	.word	0x011000cb
 800fe58:	016f016f 	.word	0x016f016f
 800fe5c:	00a600f2 	.word	0x00a600f2
 800fe60:	016f00cf 	.word	0x016f00cf
 800fe64:	00d1016f 	.word	0x00d1016f
 800fe68:	00a6016f 	.word	0x00a6016f
 800fe6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	dd12      	ble.n	800fe9a <__ssvfscanf_r+0x192>
 800fe74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe76:	69ba      	ldr	r2, [r7, #24]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3a01      	subs	r2, #1
 800fe7c:	7819      	ldrb	r1, [r3, #0]
 800fe7e:	7812      	ldrb	r2, [r2, #0]
 800fe80:	4291      	cmp	r1, r2
 800fe82:	d13e      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800fe84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe88:	6852      	ldr	r2, [r2, #4]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	600b      	str	r3, [r1, #0]
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	3a01      	subs	r2, #1
 800fe92:	604a      	str	r2, [r1, #4]
 800fe94:	3301      	adds	r3, #1
 800fe96:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe98:	e752      	b.n	800fd40 <__ssvfscanf_r+0x38>
 800fe9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe9e:	f002 fe41 	bl	8012b24 <__ssrefill_r>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d0e6      	beq.n	800fe74 <__ssvfscanf_r+0x16c>
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d003      	beq.n	800feb4 <__ssvfscanf_r+0x1ac>
 800feac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feae:	899b      	ldrh	r3, [r3, #12]
 800feb0:	065b      	lsls	r3, r3, #25
 800feb2:	d526      	bpl.n	800ff02 <__ssvfscanf_r+0x1fa>
 800feb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d000      	beq.n	800febc <__ssvfscanf_r+0x1b4>
 800feba:	e0f6      	b.n	80100aa <__ssvfscanf_r+0x3a2>
 800febc:	3b01      	subs	r3, #1
 800febe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fec0:	e104      	b.n	80100cc <__ssvfscanf_r+0x3c4>
 800fec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fec4:	4332      	orrs	r2, r6
 800fec6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fec8:	d11b      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800feca:	2610      	movs	r6, #16
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	e76c      	b.n	800fdaa <__ssvfscanf_r+0xa2>
 800fed0:	421e      	tst	r6, r3
 800fed2:	d116      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800fed4:	7851      	ldrb	r1, [r2, #1]
 800fed6:	296c      	cmp	r1, #108	; 0x6c
 800fed8:	d103      	bne.n	800fee2 <__ssvfscanf_r+0x1da>
 800feda:	3202      	adds	r2, #2
 800fedc:	61ba      	str	r2, [r7, #24]
 800fede:	2202      	movs	r2, #2
 800fee0:	e000      	b.n	800fee4 <__ssvfscanf_r+0x1dc>
 800fee2:	2201      	movs	r2, #1
 800fee4:	4316      	orrs	r6, r2
 800fee6:	e7f1      	b.n	800fecc <__ssvfscanf_r+0x1c4>
 800fee8:	421e      	tst	r6, r3
 800feea:	d10a      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800feec:	7851      	ldrb	r1, [r2, #1]
 800feee:	2968      	cmp	r1, #104	; 0x68
 800fef0:	d103      	bne.n	800fefa <__ssvfscanf_r+0x1f2>
 800fef2:	3202      	adds	r2, #2
 800fef4:	61ba      	str	r2, [r7, #24]
 800fef6:	2208      	movs	r2, #8
 800fef8:	e7f4      	b.n	800fee4 <__ssvfscanf_r+0x1dc>
 800fefa:	2204      	movs	r2, #4
 800fefc:	e7f2      	b.n	800fee4 <__ssvfscanf_r+0x1dc>
 800fefe:	421e      	tst	r6, r3
 800ff00:	d0ed      	beq.n	800fede <__ssvfscanf_r+0x1d6>
 800ff02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d000      	beq.n	800ff0a <__ssvfscanf_r+0x202>
 800ff08:	e0da      	b.n	80100c0 <__ssvfscanf_r+0x3b8>
 800ff0a:	e0df      	b.n	80100cc <__ssvfscanf_r+0x3c4>
 800ff0c:	421e      	tst	r6, r3
 800ff0e:	d0dd      	beq.n	800fecc <__ssvfscanf_r+0x1c4>
 800ff10:	e7f7      	b.n	800ff02 <__ssvfscanf_r+0x1fa>
 800ff12:	228f      	movs	r2, #143	; 0x8f
 800ff14:	218f      	movs	r1, #143	; 0x8f
 800ff16:	4032      	ands	r2, r6
 800ff18:	420e      	tst	r6, r1
 800ff1a:	d1f2      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800ff1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff1e:	2900      	cmp	r1, #0
 800ff20:	d104      	bne.n	800ff2c <__ssvfscanf_r+0x224>
 800ff22:	b082      	sub	sp, #8
 800ff24:	a902      	add	r1, sp, #8
 800ff26:	6439      	str	r1, [r7, #64]	; 0x40
 800ff28:	600a      	str	r2, [r1, #0]
 800ff2a:	604a      	str	r2, [r1, #4]
 800ff2c:	4326      	orrs	r6, r4
 800ff2e:	e7cd      	b.n	800fecc <__ssvfscanf_r+0x1c4>
 800ff30:	228f      	movs	r2, #143	; 0x8f
 800ff32:	4216      	tst	r6, r2
 800ff34:	d1e5      	bne.n	800ff02 <__ssvfscanf_r+0x1fa>
 800ff36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff38:	436a      	muls	r2, r5
 800ff3a:	3a30      	subs	r2, #48	; 0x30
 800ff3c:	188a      	adds	r2, r1, r2
 800ff3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ff40:	e7c4      	b.n	800fecc <__ssvfscanf_r+0x1c4>
 800ff42:	2301      	movs	r3, #1
 800ff44:	431e      	orrs	r6, r3
 800ff46:	4b1b      	ldr	r3, [pc, #108]	; (800ffb4 <__ssvfscanf_r+0x2ac>)
 800ff48:	617b      	str	r3, [r7, #20]
 800ff4a:	230a      	movs	r3, #10
 800ff4c:	2403      	movs	r4, #3
 800ff4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff50:	e00f      	b.n	800ff72 <__ssvfscanf_r+0x26a>
 800ff52:	2301      	movs	r3, #1
 800ff54:	431e      	orrs	r6, r3
 800ff56:	4b18      	ldr	r3, [pc, #96]	; (800ffb8 <__ssvfscanf_r+0x2b0>)
 800ff58:	617b      	str	r3, [r7, #20]
 800ff5a:	2308      	movs	r3, #8
 800ff5c:	e7f6      	b.n	800ff4c <__ssvfscanf_r+0x244>
 800ff5e:	4b16      	ldr	r3, [pc, #88]	; (800ffb8 <__ssvfscanf_r+0x2b0>)
 800ff60:	e7f2      	b.n	800ff48 <__ssvfscanf_r+0x240>
 800ff62:	2380      	movs	r3, #128	; 0x80
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	431e      	orrs	r6, r3
 800ff68:	4b13      	ldr	r3, [pc, #76]	; (800ffb8 <__ssvfscanf_r+0x2b0>)
 800ff6a:	617b      	str	r3, [r7, #20]
 800ff6c:	2310      	movs	r3, #16
 800ff6e:	e7ed      	b.n	800ff4c <__ssvfscanf_r+0x244>
 800ff70:	2404      	movs	r4, #4
 800ff72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	dd55      	ble.n	8010026 <__ssvfscanf_r+0x31e>
 800ff7a:	0673      	lsls	r3, r6, #25
 800ff7c:	d407      	bmi.n	800ff8e <__ssvfscanf_r+0x286>
 800ff7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff80:	490b      	ldr	r1, [pc, #44]	; (800ffb0 <__ssvfscanf_r+0x2a8>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	781a      	ldrb	r2, [r3, #0]
 800ff86:	5c8a      	ldrb	r2, [r1, r2]
 800ff88:	2108      	movs	r1, #8
 800ff8a:	420a      	tst	r2, r1
 800ff8c:	d152      	bne.n	8010034 <__ssvfscanf_r+0x32c>
 800ff8e:	1e60      	subs	r0, r4, #1
 800ff90:	2803      	cmp	r0, #3
 800ff92:	d863      	bhi.n	801005c <__ssvfscanf_r+0x354>
 800ff94:	f7f0 f8c8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ff98:	03bd01da 	.word	0x03bd01da
 800ff9c:	068a0579 	.word	0x068a0579
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	431e      	orrs	r6, r3
 800ffa4:	2402      	movs	r4, #2
 800ffa6:	e7e4      	b.n	800ff72 <__ssvfscanf_r+0x26a>
 800ffa8:	fffffd34 	.word	0xfffffd34
 800ffac:	ffffdfff 	.word	0xffffdfff
 800ffb0:	08015b89 	.word	0x08015b89
 800ffb4:	0800cfa5 	.word	0x0800cfa5
 800ffb8:	0800d0c9 	.word	0x0800d0c9
 800ffbc:	2248      	movs	r2, #72	; 0x48
 800ffbe:	2318      	movs	r3, #24
 800ffc0:	189b      	adds	r3, r3, r2
 800ffc2:	19d8      	adds	r0, r3, r7
 800ffc4:	69b9      	ldr	r1, [r7, #24]
 800ffc6:	f001 f9d7 	bl	8011378 <__sccl>
 800ffca:	2340      	movs	r3, #64	; 0x40
 800ffcc:	2401      	movs	r4, #1
 800ffce:	61b8      	str	r0, [r7, #24]
 800ffd0:	431e      	orrs	r6, r3
 800ffd2:	e7ce      	b.n	800ff72 <__ssvfscanf_r+0x26a>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	431e      	orrs	r6, r3
 800ffd8:	2340      	movs	r3, #64	; 0x40
 800ffda:	2400      	movs	r4, #0
 800ffdc:	431e      	orrs	r6, r3
 800ffde:	e7c8      	b.n	800ff72 <__ssvfscanf_r+0x26a>
 800ffe0:	2388      	movs	r3, #136	; 0x88
 800ffe2:	e7bf      	b.n	800ff64 <__ssvfscanf_r+0x25c>
 800ffe4:	06f3      	lsls	r3, r6, #27
 800ffe6:	d500      	bpl.n	800ffea <__ssvfscanf_r+0x2e2>
 800ffe8:	e6aa      	b.n	800fd40 <__ssvfscanf_r+0x38>
 800ffea:	2108      	movs	r1, #8
 800ffec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffee:	cb04      	ldmia	r3!, {r2}
 800fff0:	420e      	tst	r6, r1
 800fff2:	d003      	beq.n	800fffc <__ssvfscanf_r+0x2f4>
 800fff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fff6:	7011      	strb	r1, [r2, #0]
 800fff8:	633b      	str	r3, [r7, #48]	; 0x30
 800fffa:	e6a1      	b.n	800fd40 <__ssvfscanf_r+0x38>
 800fffc:	0771      	lsls	r1, r6, #29
 800fffe:	d502      	bpl.n	8010006 <__ssvfscanf_r+0x2fe>
 8010000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010002:	8011      	strh	r1, [r2, #0]
 8010004:	e7f8      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 8010006:	07f1      	lsls	r1, r6, #31
 8010008:	d502      	bpl.n	8010010 <__ssvfscanf_r+0x308>
 801000a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801000c:	6011      	str	r1, [r2, #0]
 801000e:	e7f3      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 8010010:	07b6      	lsls	r6, r6, #30
 8010012:	d5fa      	bpl.n	801000a <__ssvfscanf_r+0x302>
 8010014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010016:	6011      	str	r1, [r2, #0]
 8010018:	17c9      	asrs	r1, r1, #31
 801001a:	6051      	str	r1, [r2, #4]
 801001c:	e7ec      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 801001e:	4ba2      	ldr	r3, [pc, #648]	; (80102a8 <__ssvfscanf_r+0x5a0>)
 8010020:	617b      	str	r3, [r7, #20]
 8010022:	2300      	movs	r3, #0
 8010024:	e792      	b.n	800ff4c <__ssvfscanf_r+0x244>
 8010026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010028:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801002a:	f002 fd7b 	bl	8012b24 <__ssrefill_r>
 801002e:	2800      	cmp	r0, #0
 8010030:	d0a3      	beq.n	800ff7a <__ssvfscanf_r+0x272>
 8010032:	e738      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010038:	3201      	adds	r2, #1
 801003a:	63ba      	str	r2, [r7, #56]	; 0x38
 801003c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801003e:	6852      	ldr	r2, [r2, #4]
 8010040:	3a01      	subs	r2, #1
 8010042:	604a      	str	r2, [r1, #4]
 8010044:	2a00      	cmp	r2, #0
 8010046:	dd02      	ble.n	801004e <__ssvfscanf_r+0x346>
 8010048:	3301      	adds	r3, #1
 801004a:	600b      	str	r3, [r1, #0]
 801004c:	e797      	b.n	800ff7e <__ssvfscanf_r+0x276>
 801004e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010050:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010052:	f002 fd67 	bl	8012b24 <__ssrefill_r>
 8010056:	2800      	cmp	r0, #0
 8010058:	d091      	beq.n	800ff7e <__ssvfscanf_r+0x276>
 801005a:	e724      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 801005c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801005e:	2301      	movs	r3, #1
 8010060:	2a00      	cmp	r2, #0
 8010062:	d100      	bne.n	8010066 <__ssvfscanf_r+0x35e>
 8010064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010066:	2210      	movs	r2, #16
 8010068:	0034      	movs	r4, r6
 801006a:	4032      	ands	r2, r6
 801006c:	623a      	str	r2, [r7, #32]
 801006e:	401c      	ands	r4, r3
 8010070:	421e      	tst	r6, r3
 8010072:	d100      	bne.n	8010076 <__ssvfscanf_r+0x36e>
 8010074:	e0f3      	b.n	801025e <__ssvfscanf_r+0x556>
 8010076:	2a00      	cmp	r2, #0
 8010078:	d000      	beq.n	801007c <__ssvfscanf_r+0x374>
 801007a:	e0b6      	b.n	80101ea <__ssvfscanf_r+0x4e2>
 801007c:	2080      	movs	r0, #128	; 0x80
 801007e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010080:	cb10      	ldmia	r3!, {r4}
 8010082:	613b      	str	r3, [r7, #16]
 8010084:	4206      	tst	r6, r0
 8010086:	d100      	bne.n	801008a <__ssvfscanf_r+0x382>
 8010088:	e0b7      	b.n	80101fa <__ssvfscanf_r+0x4f2>
 801008a:	2c00      	cmp	r4, #0
 801008c:	d007      	beq.n	801009e <__ssvfscanf_r+0x396>
 801008e:	f7fb fe93 	bl	800bdb8 <malloc>
 8010092:	6338      	str	r0, [r7, #48]	; 0x30
 8010094:	2800      	cmp	r0, #0
 8010096:	d11f      	bne.n	80100d8 <__ssvfscanf_r+0x3d0>
 8010098:	2301      	movs	r3, #1
 801009a:	425b      	negs	r3, r3
 801009c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801009e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d013      	beq.n	80100cc <__ssvfscanf_r+0x3c4>
 80100a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a6:	3301      	adds	r3, #1
 80100a8:	d10a      	bne.n	80100c0 <__ssvfscanf_r+0x3b8>
 80100aa:	2400      	movs	r4, #0
 80100ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ae:	681d      	ldr	r5, [r3, #0]
 80100b0:	88db      	ldrh	r3, [r3, #6]
 80100b2:	42a3      	cmp	r3, r4
 80100b4:	dd01      	ble.n	80100ba <__ssvfscanf_r+0x3b2>
 80100b6:	f001 f82a 	bl	801110e <__ssvfscanf_r+0x1406>
 80100ba:	2301      	movs	r3, #1
 80100bc:	425b      	negs	r3, r3
 80100be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c2:	6818      	ldr	r0, [r3, #0]
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d001      	beq.n	80100cc <__ssvfscanf_r+0x3c4>
 80100c8:	f7fb fe80 	bl	800bdcc <free>
 80100cc:	46bd      	mov	sp, r7
 80100ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100d0:	23b1      	movs	r3, #177	; 0xb1
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	449d      	add	sp, r3
 80100d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100de:	88de      	ldrh	r6, [r3, #6]
 80100e0:	889d      	ldrh	r5, [r3, #4]
 80100e2:	42ae      	cmp	r6, r5
 80100e4:	d30e      	bcc.n	8010104 <__ssvfscanf_r+0x3fc>
 80100e6:	4b71      	ldr	r3, [pc, #452]	; (80102ac <__ssvfscanf_r+0x5a4>)
 80100e8:	429d      	cmp	r5, r3
 80100ea:	d8d5      	bhi.n	8010098 <__ssvfscanf_r+0x390>
 80100ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ee:	3508      	adds	r5, #8
 80100f0:	b2ad      	uxth	r5, r5
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	00a9      	lsls	r1, r5, #2
 80100f6:	f002 f901 	bl	80122fc <realloc>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d0cc      	beq.n	8010098 <__ssvfscanf_r+0x390>
 80100fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010100:	6018      	str	r0, [r3, #0]
 8010102:	809d      	strh	r5, [r3, #4]
 8010104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010106:	1c72      	adds	r2, r6, #1
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	00b6      	lsls	r6, r6, #2
 801010c:	50f4      	str	r4, [r6, r3]
 801010e:	2320      	movs	r3, #32
 8010110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010112:	0026      	movs	r6, r4
 8010114:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010116:	80ca      	strh	r2, [r1, #6]
 8010118:	61fb      	str	r3, [r7, #28]
 801011a:	2500      	movs	r5, #0
 801011c:	f7fd f9fe 	bl	800d51c <__locale_mb_cur_max>
 8010120:	42a8      	cmp	r0, r5
 8010122:	d100      	bne.n	8010126 <__ssvfscanf_r+0x41e>
 8010124:	e6bf      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010126:	1c6a      	adds	r2, r5, #1
 8010128:	60fa      	str	r2, [r7, #12]
 801012a:	228c      	movs	r2, #140	; 0x8c
 801012c:	2048      	movs	r0, #72	; 0x48
 801012e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010130:	0052      	lsls	r2, r2, #1
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	1812      	adds	r2, r2, r0
 8010136:	7819      	ldrb	r1, [r3, #0]
 8010138:	19d2      	adds	r2, r2, r7
 801013a:	5551      	strb	r1, [r2, r5]
 801013c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801013e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010140:	6852      	ldr	r2, [r2, #4]
 8010142:	3301      	adds	r3, #1
 8010144:	600b      	str	r3, [r1, #0]
 8010146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010148:	3a01      	subs	r2, #1
 801014a:	604a      	str	r2, [r1, #4]
 801014c:	2b03      	cmp	r3, #3
 801014e:	d102      	bne.n	8010156 <__ssvfscanf_r+0x44e>
 8010150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010152:	2b04      	cmp	r3, #4
 8010154:	d007      	beq.n	8010166 <__ssvfscanf_r+0x45e>
 8010156:	2048      	movs	r0, #72	; 0x48
 8010158:	2310      	movs	r3, #16
 801015a:	181b      	adds	r3, r3, r0
 801015c:	2208      	movs	r2, #8
 801015e:	2100      	movs	r1, #0
 8010160:	19d8      	adds	r0, r3, r7
 8010162:	f7fd f94f 	bl	800d404 <memset>
 8010166:	2148      	movs	r1, #72	; 0x48
 8010168:	2310      	movs	r3, #16
 801016a:	228c      	movs	r2, #140	; 0x8c
 801016c:	185b      	adds	r3, r3, r1
 801016e:	0052      	lsls	r2, r2, #1
 8010170:	19db      	adds	r3, r3, r7
 8010172:	1852      	adds	r2, r2, r1
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	0021      	movs	r1, r4
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801017c:	19d2      	adds	r2, r2, r7
 801017e:	f002 fbd1 	bl	8012924 <_mbrtowc_r>
 8010182:	0003      	movs	r3, r0
 8010184:	62b8      	str	r0, [r7, #40]	; 0x28
 8010186:	3301      	adds	r3, #1
 8010188:	d100      	bne.n	801018c <__ssvfscanf_r+0x484>
 801018a:	e68c      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 801018c:	2800      	cmp	r0, #0
 801018e:	d139      	bne.n	8010204 <__ssvfscanf_r+0x4fc>
 8010190:	6a3b      	ldr	r3, [r7, #32]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d100      	bne.n	8010198 <__ssvfscanf_r+0x490>
 8010196:	6023      	str	r3, [r4, #0]
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019c:	4694      	mov	ip, r2
 801019e:	4463      	add	r3, ip
 80101a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	2b03      	cmp	r3, #3
 80101a6:	d102      	bne.n	80101ae <__ssvfscanf_r+0x4a6>
 80101a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d002      	beq.n	80101b4 <__ssvfscanf_r+0x4ac>
 80101ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b0:	3b01      	subs	r3, #1
 80101b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d115      	bne.n	80101e6 <__ssvfscanf_r+0x4de>
 80101ba:	2e00      	cmp	r6, #0
 80101bc:	d012      	beq.n	80101e4 <__ssvfscanf_r+0x4dc>
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	69fa      	ldr	r2, [r7, #28]
 80101c2:	1ae5      	subs	r5, r4, r3
 80101c4:	10ab      	asrs	r3, r5, #2
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d30c      	bcc.n	80101e4 <__ssvfscanf_r+0x4dc>
 80101ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101cc:	00d1      	lsls	r1, r2, #3
 80101ce:	f002 f895 	bl	80122fc <realloc>
 80101d2:	6338      	str	r0, [r7, #48]	; 0x30
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d100      	bne.n	80101da <__ssvfscanf_r+0x4d2>
 80101d8:	e75e      	b.n	8010098 <__ssvfscanf_r+0x390>
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	1944      	adds	r4, r0, r5
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	6030      	str	r0, [r6, #0]
 80101e2:	61fb      	str	r3, [r7, #28]
 80101e4:	3404      	adds	r4, #4
 80101e6:	2500      	movs	r5, #0
 80101e8:	e010      	b.n	801020c <__ssvfscanf_r+0x504>
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	613b      	str	r3, [r7, #16]
 80101ee:	2300      	movs	r3, #0
 80101f0:	001e      	movs	r6, r3
 80101f2:	001c      	movs	r4, r3
 80101f4:	61fb      	str	r3, [r7, #28]
 80101f6:	633b      	str	r3, [r7, #48]	; 0x30
 80101f8:	e78f      	b.n	801011a <__ssvfscanf_r+0x412>
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	001e      	movs	r6, r3
 80101fe:	61fb      	str	r3, [r7, #28]
 8010200:	633b      	str	r3, [r7, #48]	; 0x30
 8010202:	e78a      	b.n	801011a <__ssvfscanf_r+0x412>
 8010204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010206:	68fd      	ldr	r5, [r7, #12]
 8010208:	3302      	adds	r3, #2
 801020a:	d1c5      	bne.n	8010198 <__ssvfscanf_r+0x490>
 801020c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	2b00      	cmp	r3, #0
 8010212:	dc12      	bgt.n	801023a <__ssvfscanf_r+0x532>
 8010214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010216:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010218:	f002 fc84 	bl	8012b24 <__ssrefill_r>
 801021c:	2800      	cmp	r0, #0
 801021e:	d00c      	beq.n	801023a <__ssvfscanf_r+0x532>
 8010220:	2d00      	cmp	r5, #0
 8010222:	d000      	beq.n	8010226 <__ssvfscanf_r+0x51e>
 8010224:	e63f      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010226:	2e00      	cmp	r6, #0
 8010228:	d10c      	bne.n	8010244 <__ssvfscanf_r+0x53c>
 801022a:	6a3b      	ldr	r3, [r7, #32]
 801022c:	425a      	negs	r2, r3
 801022e:	4153      	adcs	r3, r2
 8010230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010232:	18d3      	adds	r3, r2, r3
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	e6de      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 801023a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023c:	2b00      	cmp	r3, #0
 801023e:	d000      	beq.n	8010242 <__ssvfscanf_r+0x53a>
 8010240:	e76c      	b.n	801011c <__ssvfscanf_r+0x414>
 8010242:	e7f0      	b.n	8010226 <__ssvfscanf_r+0x51e>
 8010244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010246:	69fa      	ldr	r2, [r7, #28]
 8010248:	1ae1      	subs	r1, r4, r3
 801024a:	108b      	asrs	r3, r1, #2
 801024c:	429a      	cmp	r2, r3
 801024e:	d9ec      	bls.n	801022a <__ssvfscanf_r+0x522>
 8010250:	6830      	ldr	r0, [r6, #0]
 8010252:	f002 f853 	bl	80122fc <realloc>
 8010256:	2800      	cmp	r0, #0
 8010258:	d0e7      	beq.n	801022a <__ssvfscanf_r+0x522>
 801025a:	6030      	str	r0, [r6, #0]
 801025c:	e7e5      	b.n	801022a <__ssvfscanf_r+0x522>
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d025      	beq.n	80102b0 <__ssvfscanf_r+0x5a8>
 8010264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801026c:	6812      	ldr	r2, [r2, #0]
 801026e:	4299      	cmp	r1, r3
 8010270:	dd11      	ble.n	8010296 <__ssvfscanf_r+0x58e>
 8010272:	1ac9      	subs	r1, r1, r3
 8010274:	18d2      	adds	r2, r2, r3
 8010276:	18e4      	adds	r4, r4, r3
 8010278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801027a:	63f9      	str	r1, [r7, #60]	; 0x3c
 801027c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801027e:	0019      	movs	r1, r3
 8010280:	601a      	str	r2, [r3, #0]
 8010282:	f002 fc4f 	bl	8012b24 <__ssrefill_r>
 8010286:	2800      	cmp	r0, #0
 8010288:	d0ec      	beq.n	8010264 <__ssvfscanf_r+0x55c>
 801028a:	2c00      	cmp	r4, #0
 801028c:	d100      	bne.n	8010290 <__ssvfscanf_r+0x588>
 801028e:	e60a      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	191b      	adds	r3, r3, r4
 8010294:	e5ff      	b.n	800fe96 <__ssvfscanf_r+0x18e>
 8010296:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010298:	1a5b      	subs	r3, r3, r1
 801029a:	1864      	adds	r4, r4, r1
 801029c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801029e:	604b      	str	r3, [r1, #4]
 80102a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102a2:	18d2      	adds	r2, r2, r3
 80102a4:	600a      	str	r2, [r1, #0]
 80102a6:	e7f3      	b.n	8010290 <__ssvfscanf_r+0x588>
 80102a8:	0800cfa5 	.word	0x0800cfa5
 80102ac:	0000fff6 	.word	0x0000fff6
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	0034      	movs	r4, r6
 80102b4:	cb20      	ldmia	r3!, {r5}
 80102b6:	633b      	str	r3, [r7, #48]	; 0x30
 80102b8:	2380      	movs	r3, #128	; 0x80
 80102ba:	401c      	ands	r4, r3
 80102bc:	421e      	tst	r6, r3
 80102be:	d028      	beq.n	8010312 <__ssvfscanf_r+0x60a>
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	d100      	bne.n	80102c6 <__ssvfscanf_r+0x5be>
 80102c4:	e61d      	b.n	800ff02 <__ssvfscanf_r+0x1fa>
 80102c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102c8:	f7fb fd76 	bl	800bdb8 <malloc>
 80102cc:	6238      	str	r0, [r7, #32]
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d100      	bne.n	80102d4 <__ssvfscanf_r+0x5cc>
 80102d2:	e5ef      	b.n	800feb4 <__ssvfscanf_r+0x1ac>
 80102d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d6:	6028      	str	r0, [r5, #0]
 80102d8:	88de      	ldrh	r6, [r3, #6]
 80102da:	889c      	ldrh	r4, [r3, #4]
 80102dc:	6818      	ldr	r0, [r3, #0]
 80102de:	42a6      	cmp	r6, r4
 80102e0:	d30e      	bcc.n	8010300 <__ssvfscanf_r+0x5f8>
 80102e2:	4bbf      	ldr	r3, [pc, #764]	; (80105e0 <__ssvfscanf_r+0x8d8>)
 80102e4:	429c      	cmp	r4, r3
 80102e6:	d900      	bls.n	80102ea <__ssvfscanf_r+0x5e2>
 80102e8:	e6df      	b.n	80100aa <__ssvfscanf_r+0x3a2>
 80102ea:	3408      	adds	r4, #8
 80102ec:	b2a4      	uxth	r4, r4
 80102ee:	00a1      	lsls	r1, r4, #2
 80102f0:	f002 f804 	bl	80122fc <realloc>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d100      	bne.n	80102fa <__ssvfscanf_r+0x5f2>
 80102f8:	e6d7      	b.n	80100aa <__ssvfscanf_r+0x3a2>
 80102fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fc:	6018      	str	r0, [r3, #0]
 80102fe:	809c      	strh	r4, [r3, #4]
 8010300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010302:	1c72      	adds	r2, r6, #1
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010308:	00b6      	lsls	r6, r6, #2
 801030a:	002c      	movs	r4, r5
 801030c:	50f5      	str	r5, [r6, r3]
 801030e:	6a3d      	ldr	r5, [r7, #32]
 8010310:	80ca      	strh	r2, [r1, #6]
 8010312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010314:	0029      	movs	r1, r5
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	2201      	movs	r2, #1
 801031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801031e:	f002 fc20 	bl	8012b62 <_sfread_r>
 8010322:	1e05      	subs	r5, r0, #0
 8010324:	d100      	bne.n	8010328 <__ssvfscanf_r+0x620>
 8010326:	e5be      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010328:	2c00      	cmp	r4, #0
 801032a:	d009      	beq.n	8010340 <__ssvfscanf_r+0x638>
 801032c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032e:	4283      	cmp	r3, r0
 8010330:	d906      	bls.n	8010340 <__ssvfscanf_r+0x638>
 8010332:	0001      	movs	r1, r0
 8010334:	6820      	ldr	r0, [r4, #0]
 8010336:	f001 ffe1 	bl	80122fc <realloc>
 801033a:	2800      	cmp	r0, #0
 801033c:	d000      	beq.n	8010340 <__ssvfscanf_r+0x638>
 801033e:	6020      	str	r0, [r4, #0]
 8010340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010342:	195b      	adds	r3, r3, r5
 8010344:	63bb      	str	r3, [r7, #56]	; 0x38
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010348:	3301      	adds	r3, #1
 801034a:	e4f8      	b.n	800fd3e <__ssvfscanf_r+0x36>
 801034c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034e:	2b00      	cmp	r3, #0
 8010350:	d101      	bne.n	8010356 <__ssvfscanf_r+0x64e>
 8010352:	3b01      	subs	r3, #1
 8010354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010356:	2210      	movs	r2, #16
 8010358:	2301      	movs	r3, #1
 801035a:	0034      	movs	r4, r6
 801035c:	4032      	ands	r2, r6
 801035e:	401c      	ands	r4, r3
 8010360:	623a      	str	r2, [r7, #32]
 8010362:	421e      	tst	r6, r3
 8010364:	d100      	bne.n	8010368 <__ssvfscanf_r+0x660>
 8010366:	e116      	b.n	8010596 <__ssvfscanf_r+0x88e>
 8010368:	2a00      	cmp	r2, #0
 801036a:	d000      	beq.n	801036e <__ssvfscanf_r+0x666>
 801036c:	e0b0      	b.n	80104d0 <__ssvfscanf_r+0x7c8>
 801036e:	2080      	movs	r0, #128	; 0x80
 8010370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010372:	cb10      	ldmia	r3!, {r4}
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	4206      	tst	r6, r0
 8010378:	d100      	bne.n	801037c <__ssvfscanf_r+0x674>
 801037a:	e0b2      	b.n	80104e2 <__ssvfscanf_r+0x7da>
 801037c:	2c00      	cmp	r4, #0
 801037e:	d100      	bne.n	8010382 <__ssvfscanf_r+0x67a>
 8010380:	e68d      	b.n	801009e <__ssvfscanf_r+0x396>
 8010382:	f7fb fd19 	bl	800bdb8 <malloc>
 8010386:	6338      	str	r0, [r7, #48]	; 0x30
 8010388:	2800      	cmp	r0, #0
 801038a:	d100      	bne.n	801038e <__ssvfscanf_r+0x686>
 801038c:	e684      	b.n	8010098 <__ssvfscanf_r+0x390>
 801038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010394:	88de      	ldrh	r6, [r3, #6]
 8010396:	889d      	ldrh	r5, [r3, #4]
 8010398:	42ae      	cmp	r6, r5
 801039a:	d310      	bcc.n	80103be <__ssvfscanf_r+0x6b6>
 801039c:	4b90      	ldr	r3, [pc, #576]	; (80105e0 <__ssvfscanf_r+0x8d8>)
 801039e:	429d      	cmp	r5, r3
 80103a0:	d900      	bls.n	80103a4 <__ssvfscanf_r+0x69c>
 80103a2:	e679      	b.n	8010098 <__ssvfscanf_r+0x390>
 80103a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a6:	3508      	adds	r5, #8
 80103a8:	b2ad      	uxth	r5, r5
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	00a9      	lsls	r1, r5, #2
 80103ae:	f001 ffa5 	bl	80122fc <realloc>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d100      	bne.n	80103b8 <__ssvfscanf_r+0x6b0>
 80103b6:	e66f      	b.n	8010098 <__ssvfscanf_r+0x390>
 80103b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ba:	6018      	str	r0, [r3, #0]
 80103bc:	809d      	strh	r5, [r3, #4]
 80103be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c0:	1c72      	adds	r2, r6, #1
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	00b6      	lsls	r6, r6, #2
 80103c6:	50f4      	str	r4, [r6, r3]
 80103c8:	2320      	movs	r3, #32
 80103ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80103cc:	0026      	movs	r6, r4
 80103ce:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80103d0:	80ca      	strh	r2, [r1, #6]
 80103d2:	613b      	str	r3, [r7, #16]
 80103d4:	2500      	movs	r5, #0
 80103d6:	f7fd f8a1 	bl	800d51c <__locale_mb_cur_max>
 80103da:	42a8      	cmp	r0, r5
 80103dc:	d100      	bne.n	80103e0 <__ssvfscanf_r+0x6d8>
 80103de:	e562      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 80103e0:	1c6a      	adds	r2, r5, #1
 80103e2:	61fa      	str	r2, [r7, #28]
 80103e4:	228c      	movs	r2, #140	; 0x8c
 80103e6:	2048      	movs	r0, #72	; 0x48
 80103e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ea:	0052      	lsls	r2, r2, #1
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	1812      	adds	r2, r2, r0
 80103f0:	7819      	ldrb	r1, [r3, #0]
 80103f2:	19d2      	adds	r2, r2, r7
 80103f4:	5551      	strb	r1, [r2, r5]
 80103f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103fa:	6852      	ldr	r2, [r2, #4]
 80103fc:	3301      	adds	r3, #1
 80103fe:	600b      	str	r3, [r1, #0]
 8010400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010402:	3a01      	subs	r2, #1
 8010404:	604a      	str	r2, [r1, #4]
 8010406:	2b03      	cmp	r3, #3
 8010408:	d102      	bne.n	8010410 <__ssvfscanf_r+0x708>
 801040a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801040c:	2b04      	cmp	r3, #4
 801040e:	d006      	beq.n	801041e <__ssvfscanf_r+0x716>
 8010410:	2048      	movs	r0, #72	; 0x48
 8010412:	2208      	movs	r2, #8
 8010414:	1813      	adds	r3, r2, r0
 8010416:	2100      	movs	r1, #0
 8010418:	19d8      	adds	r0, r3, r7
 801041a:	f7fc fff3 	bl	800d404 <memset>
 801041e:	2148      	movs	r1, #72	; 0x48
 8010420:	2308      	movs	r3, #8
 8010422:	228c      	movs	r2, #140	; 0x8c
 8010424:	185b      	adds	r3, r3, r1
 8010426:	0052      	lsls	r2, r2, #1
 8010428:	19db      	adds	r3, r3, r7
 801042a:	1852      	adds	r2, r2, r1
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	0021      	movs	r1, r4
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010434:	19d2      	adds	r2, r2, r7
 8010436:	f002 fa75 	bl	8012924 <_mbrtowc_r>
 801043a:	0003      	movs	r3, r0
 801043c:	62b8      	str	r0, [r7, #40]	; 0x28
 801043e:	3301      	adds	r3, #1
 8010440:	d100      	bne.n	8010444 <__ssvfscanf_r+0x73c>
 8010442:	e530      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 8010444:	2800      	cmp	r0, #0
 8010446:	d151      	bne.n	80104ec <__ssvfscanf_r+0x7e4>
 8010448:	6020      	str	r0, [r4, #0]
 801044a:	2301      	movs	r3, #1
 801044c:	6825      	ldr	r5, [r4, #0]
 801044e:	425b      	negs	r3, r3
 8010450:	1c6a      	adds	r2, r5, #1
 8010452:	d01a      	beq.n	801048a <__ssvfscanf_r+0x782>
 8010454:	2048      	movs	r0, #72	; 0x48
 8010456:	3311      	adds	r3, #17
 8010458:	181b      	adds	r3, r3, r0
 801045a:	2208      	movs	r2, #8
 801045c:	2100      	movs	r1, #0
 801045e:	19d8      	adds	r0, r3, r7
 8010460:	f7fc ffd0 	bl	800d404 <memset>
 8010464:	4b5f      	ldr	r3, [pc, #380]	; (80105e4 <__ssvfscanf_r+0x8dc>)
 8010466:	2148      	movs	r1, #72	; 0x48
 8010468:	33e0      	adds	r3, #224	; 0xe0
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	2310      	movs	r3, #16
 801046e:	4694      	mov	ip, r2
 8010470:	185b      	adds	r3, r3, r1
 8010472:	002a      	movs	r2, r5
 8010474:	19db      	adds	r3, r3, r7
 8010476:	4665      	mov	r5, ip
 8010478:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801047a:	1879      	adds	r1, r7, r1
 801047c:	47a8      	blx	r5
 801047e:	2300      	movs	r3, #0
 8010480:	2801      	cmp	r0, #1
 8010482:	d102      	bne.n	801048a <__ssvfscanf_r+0x782>
 8010484:	3348      	adds	r3, #72	; 0x48
 8010486:	18fb      	adds	r3, r7, r3
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2218      	movs	r2, #24
 801048c:	2148      	movs	r1, #72	; 0x48
 801048e:	1852      	adds	r2, r2, r1
 8010490:	19d2      	adds	r2, r2, r7
 8010492:	5cd3      	ldrb	r3, [r2, r3]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d149      	bne.n	801052c <__ssvfscanf_r+0x824>
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d137      	bne.n	801050e <__ssvfscanf_r+0x806>
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d113      	bne.n	80104cc <__ssvfscanf_r+0x7c4>
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	2e00      	cmp	r6, #0
 80104a8:	d00d      	beq.n	80104c6 <__ssvfscanf_r+0x7be>
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	693a      	ldr	r2, [r7, #16]
 80104ae:	1ae4      	subs	r4, r4, r3
 80104b0:	10a3      	asrs	r3, r4, #2
 80104b2:	3301      	adds	r3, #1
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d906      	bls.n	80104c6 <__ssvfscanf_r+0x7be>
 80104b8:	6830      	ldr	r0, [r6, #0]
 80104ba:	1d21      	adds	r1, r4, #4
 80104bc:	f001 ff1e 	bl	80122fc <realloc>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d000      	beq.n	80104c6 <__ssvfscanf_r+0x7be>
 80104c4:	6030      	str	r0, [r6, #0]
 80104c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c8:	3301      	adds	r3, #1
 80104ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	e593      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 80104d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d2:	60fb      	str	r3, [r7, #12]
 80104d4:	2300      	movs	r3, #0
 80104d6:	001e      	movs	r6, r3
 80104d8:	613b      	str	r3, [r7, #16]
 80104da:	633b      	str	r3, [r7, #48]	; 0x30
 80104dc:	334c      	adds	r3, #76	; 0x4c
 80104de:	18fc      	adds	r4, r7, r3
 80104e0:	e778      	b.n	80103d4 <__ssvfscanf_r+0x6cc>
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	001e      	movs	r6, r3
 80104e6:	613b      	str	r3, [r7, #16]
 80104e8:	633b      	str	r3, [r7, #48]	; 0x30
 80104ea:	e773      	b.n	80103d4 <__ssvfscanf_r+0x6cc>
 80104ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ee:	69fd      	ldr	r5, [r7, #28]
 80104f0:	3302      	adds	r3, #2
 80104f2:	d1aa      	bne.n	801044a <__ssvfscanf_r+0x742>
 80104f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	dc47      	bgt.n	801058c <__ssvfscanf_r+0x884>
 80104fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80104fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010500:	f002 fb10 	bl	8012b24 <__ssrefill_r>
 8010504:	2800      	cmp	r0, #0
 8010506:	d041      	beq.n	801058c <__ssvfscanf_r+0x884>
 8010508:	2d00      	cmp	r5, #0
 801050a:	d0c8      	beq.n	801049e <__ssvfscanf_r+0x796>
 801050c:	e4cb      	b.n	800fea6 <__ssvfscanf_r+0x19e>
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	2248      	movs	r2, #72	; 0x48
 8010512:	3b01      	subs	r3, #1
 8010514:	61fb      	str	r3, [r7, #28]
 8010516:	238c      	movs	r3, #140	; 0x8c
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	189b      	adds	r3, r3, r2
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	19db      	adds	r3, r3, r7
 8010520:	5cd1      	ldrb	r1, [r2, r3]
 8010522:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010526:	f002 fac1 	bl	8012aac <_sungetc_r>
 801052a:	e7b5      	b.n	8010498 <__ssvfscanf_r+0x790>
 801052c:	69fa      	ldr	r2, [r7, #28]
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	4694      	mov	ip, r2
 8010532:	4463      	add	r3, ip
 8010534:	63bb      	str	r3, [r7, #56]	; 0x38
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	2b03      	cmp	r3, #3
 801053a:	d102      	bne.n	8010542 <__ssvfscanf_r+0x83a>
 801053c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801053e:	2b04      	cmp	r3, #4
 8010540:	d002      	beq.n	8010548 <__ssvfscanf_r+0x840>
 8010542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010544:	3b01      	subs	r3, #1
 8010546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010548:	6a3b      	ldr	r3, [r7, #32]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d11a      	bne.n	8010584 <__ssvfscanf_r+0x87c>
 801054e:	3404      	adds	r4, #4
 8010550:	2e00      	cmp	r6, #0
 8010552:	d019      	beq.n	8010588 <__ssvfscanf_r+0x880>
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	693a      	ldr	r2, [r7, #16]
 8010558:	1ae3      	subs	r3, r4, r3
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	6a3d      	ldr	r5, [r7, #32]
 801055e:	109b      	asrs	r3, r3, #2
 8010560:	4293      	cmp	r3, r2
 8010562:	d3c7      	bcc.n	80104f4 <__ssvfscanf_r+0x7ec>
 8010564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010566:	00d1      	lsls	r1, r2, #3
 8010568:	f001 fec8 	bl	80122fc <realloc>
 801056c:	6338      	str	r0, [r7, #48]	; 0x30
 801056e:	2800      	cmp	r0, #0
 8010570:	d100      	bne.n	8010574 <__ssvfscanf_r+0x86c>
 8010572:	e591      	b.n	8010098 <__ssvfscanf_r+0x390>
 8010574:	4684      	mov	ip, r0
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	69fc      	ldr	r4, [r7, #28]
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4464      	add	r4, ip
 801057e:	6030      	str	r0, [r6, #0]
 8010580:	613b      	str	r3, [r7, #16]
 8010582:	e7b7      	b.n	80104f4 <__ssvfscanf_r+0x7ec>
 8010584:	2500      	movs	r5, #0
 8010586:	e7b5      	b.n	80104f4 <__ssvfscanf_r+0x7ec>
 8010588:	0035      	movs	r5, r6
 801058a:	e7b3      	b.n	80104f4 <__ssvfscanf_r+0x7ec>
 801058c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801058e:	2b00      	cmp	r3, #0
 8010590:	d000      	beq.n	8010594 <__ssvfscanf_r+0x88c>
 8010592:	e720      	b.n	80103d6 <__ssvfscanf_r+0x6ce>
 8010594:	e783      	b.n	801049e <__ssvfscanf_r+0x796>
 8010596:	6a3b      	ldr	r3, [r7, #32]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d025      	beq.n	80105e8 <__ssvfscanf_r+0x8e0>
 801059c:	2118      	movs	r1, #24
 801059e:	2048      	movs	r0, #72	; 0x48
 80105a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a2:	1809      	adds	r1, r1, r0
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	19c9      	adds	r1, r1, r7
 80105a8:	781a      	ldrb	r2, [r3, #0]
 80105aa:	5c8a      	ldrb	r2, [r1, r2]
 80105ac:	2a00      	cmp	r2, #0
 80105ae:	d103      	bne.n	80105b8 <__ssvfscanf_r+0x8b0>
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	d000      	beq.n	80105b6 <__ssvfscanf_r+0x8ae>
 80105b4:	e66c      	b.n	8010290 <__ssvfscanf_r+0x588>
 80105b6:	e4a4      	b.n	800ff02 <__ssvfscanf_r+0x1fa>
 80105b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105bc:	6852      	ldr	r2, [r2, #4]
 80105be:	3301      	adds	r3, #1
 80105c0:	600b      	str	r3, [r1, #0]
 80105c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c4:	3a01      	subs	r2, #1
 80105c6:	3401      	adds	r4, #1
 80105c8:	604a      	str	r2, [r1, #4]
 80105ca:	429c      	cmp	r4, r3
 80105cc:	d100      	bne.n	80105d0 <__ssvfscanf_r+0x8c8>
 80105ce:	e65f      	b.n	8010290 <__ssvfscanf_r+0x588>
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	dce3      	bgt.n	801059c <__ssvfscanf_r+0x894>
 80105d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105d6:	f002 faa5 	bl	8012b24 <__ssrefill_r>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d0de      	beq.n	801059c <__ssvfscanf_r+0x894>
 80105de:	e657      	b.n	8010290 <__ssvfscanf_r+0x588>
 80105e0:	0000fff6 	.word	0x0000fff6
 80105e4:	20000444 	.word	0x20000444
 80105e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ea:	0032      	movs	r2, r6
 80105ec:	cb20      	ldmia	r3!, {r5}
 80105ee:	61fb      	str	r3, [r7, #28]
 80105f0:	2380      	movs	r3, #128	; 0x80
 80105f2:	401a      	ands	r2, r3
 80105f4:	421e      	tst	r6, r3
 80105f6:	d100      	bne.n	80105fa <__ssvfscanf_r+0x8f2>
 80105f8:	e086      	b.n	8010708 <__ssvfscanf_r+0xa00>
 80105fa:	2d00      	cmp	r5, #0
 80105fc:	d100      	bne.n	8010600 <__ssvfscanf_r+0x8f8>
 80105fe:	e480      	b.n	800ff02 <__ssvfscanf_r+0x1fa>
 8010600:	2020      	movs	r0, #32
 8010602:	f7fb fbd9 	bl	800bdb8 <malloc>
 8010606:	6338      	str	r0, [r7, #48]	; 0x30
 8010608:	2800      	cmp	r0, #0
 801060a:	d100      	bne.n	801060e <__ssvfscanf_r+0x906>
 801060c:	e452      	b.n	800feb4 <__ssvfscanf_r+0x1ac>
 801060e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010610:	6028      	str	r0, [r5, #0]
 8010612:	88de      	ldrh	r6, [r3, #6]
 8010614:	889c      	ldrh	r4, [r3, #4]
 8010616:	6818      	ldr	r0, [r3, #0]
 8010618:	42a6      	cmp	r6, r4
 801061a:	d30e      	bcc.n	801063a <__ssvfscanf_r+0x932>
 801061c:	4bc3      	ldr	r3, [pc, #780]	; (801092c <__ssvfscanf_r+0xc24>)
 801061e:	429c      	cmp	r4, r3
 8010620:	d900      	bls.n	8010624 <__ssvfscanf_r+0x91c>
 8010622:	e542      	b.n	80100aa <__ssvfscanf_r+0x3a2>
 8010624:	3408      	adds	r4, #8
 8010626:	b2a4      	uxth	r4, r4
 8010628:	00a1      	lsls	r1, r4, #2
 801062a:	f001 fe67 	bl	80122fc <realloc>
 801062e:	2800      	cmp	r0, #0
 8010630:	d100      	bne.n	8010634 <__ssvfscanf_r+0x92c>
 8010632:	e53a      	b.n	80100aa <__ssvfscanf_r+0x3a2>
 8010634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010636:	6018      	str	r0, [r3, #0]
 8010638:	809c      	strh	r4, [r3, #4]
 801063a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801063c:	1c72      	adds	r2, r6, #1
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	00b6      	lsls	r6, r6, #2
 8010642:	50f5      	str	r5, [r6, r3]
 8010644:	2320      	movs	r3, #32
 8010646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010648:	002e      	movs	r6, r5
 801064a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 801064c:	80ca      	strh	r2, [r1, #6]
 801064e:	623b      	str	r3, [r7, #32]
 8010650:	002c      	movs	r4, r5
 8010652:	2118      	movs	r1, #24
 8010654:	2048      	movs	r0, #72	; 0x48
 8010656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010658:	1809      	adds	r1, r1, r0
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	19c9      	adds	r1, r1, r7
 801065e:	781a      	ldrb	r2, [r3, #0]
 8010660:	5c8a      	ldrb	r2, [r1, r2]
 8010662:	2a00      	cmp	r2, #0
 8010664:	d101      	bne.n	801066a <__ssvfscanf_r+0x962>
 8010666:	633d      	str	r5, [r7, #48]	; 0x30
 8010668:	e031      	b.n	80106ce <__ssvfscanf_r+0x9c6>
 801066a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801066c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801066e:	6852      	ldr	r2, [r2, #4]
 8010670:	3a01      	subs	r2, #1
 8010672:	604a      	str	r2, [r1, #4]
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	600a      	str	r2, [r1, #0]
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	1c6a      	adds	r2, r5, #1
 801067c:	633a      	str	r2, [r7, #48]	; 0x30
 801067e:	702b      	strb	r3, [r5, #0]
 8010680:	2e00      	cmp	r6, #0
 8010682:	d010      	beq.n	80106a6 <__ssvfscanf_r+0x99e>
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	1b15      	subs	r5, r2, r4
 8010688:	429d      	cmp	r5, r3
 801068a:	d30c      	bcc.n	80106a6 <__ssvfscanf_r+0x99e>
 801068c:	005b      	lsls	r3, r3, #1
 801068e:	0020      	movs	r0, r4
 8010690:	0019      	movs	r1, r3
 8010692:	623b      	str	r3, [r7, #32]
 8010694:	f001 fe32 	bl	80122fc <realloc>
 8010698:	1e04      	subs	r4, r0, #0
 801069a:	d101      	bne.n	80106a0 <__ssvfscanf_r+0x998>
 801069c:	f7ff fc0a 	bl	800feb4 <__ssvfscanf_r+0x1ac>
 80106a0:	1943      	adds	r3, r0, r5
 80106a2:	633b      	str	r3, [r7, #48]	; 0x30
 80106a4:	6030      	str	r0, [r6, #0]
 80106a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a8:	3b01      	subs	r3, #1
 80106aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00e      	beq.n	80106ce <__ssvfscanf_r+0x9c6>
 80106b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dc2a      	bgt.n	801070e <__ssvfscanf_r+0xa06>
 80106b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106bc:	f002 fa32 	bl	8012b24 <__ssrefill_r>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d024      	beq.n	801070e <__ssvfscanf_r+0xa06>
 80106c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c6:	42a3      	cmp	r3, r4
 80106c8:	d101      	bne.n	80106ce <__ssvfscanf_r+0x9c6>
 80106ca:	f7ff fbec 	bl	800fea6 <__ssvfscanf_r+0x19e>
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	1b1d      	subs	r5, r3, r4
 80106d2:	42a3      	cmp	r3, r4
 80106d4:	d101      	bne.n	80106da <__ssvfscanf_r+0x9d2>
 80106d6:	f7ff fc14 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 80106da:	2300      	movs	r3, #0
 80106dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106de:	7013      	strb	r3, [r2, #0]
 80106e0:	429e      	cmp	r6, r3
 80106e2:	d009      	beq.n	80106f8 <__ssvfscanf_r+0x9f0>
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	1c69      	adds	r1, r5, #1
 80106e8:	428b      	cmp	r3, r1
 80106ea:	d905      	bls.n	80106f8 <__ssvfscanf_r+0x9f0>
 80106ec:	6830      	ldr	r0, [r6, #0]
 80106ee:	f001 fe05 	bl	80122fc <realloc>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d000      	beq.n	80106f8 <__ssvfscanf_r+0x9f0>
 80106f6:	6030      	str	r0, [r6, #0]
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	3301      	adds	r3, #1
 80106fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	195b      	adds	r3, r3, r5
 8010702:	63bb      	str	r3, [r7, #56]	; 0x38
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	e477      	b.n	800fff8 <__ssvfscanf_r+0x2f0>
 8010708:	0016      	movs	r6, r2
 801070a:	623a      	str	r2, [r7, #32]
 801070c:	e7a0      	b.n	8010650 <__ssvfscanf_r+0x948>
 801070e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010710:	e79f      	b.n	8010652 <__ssvfscanf_r+0x94a>
 8010712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010714:	2b00      	cmp	r3, #0
 8010716:	d101      	bne.n	801071c <__ssvfscanf_r+0xa14>
 8010718:	3b01      	subs	r3, #1
 801071a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801071c:	2210      	movs	r2, #16
 801071e:	2301      	movs	r3, #1
 8010720:	0034      	movs	r4, r6
 8010722:	4032      	ands	r2, r6
 8010724:	401c      	ands	r4, r3
 8010726:	61fa      	str	r2, [r7, #28]
 8010728:	421e      	tst	r6, r3
 801072a:	d100      	bne.n	801072e <__ssvfscanf_r+0xa26>
 801072c:	e102      	b.n	8010934 <__ssvfscanf_r+0xc2c>
 801072e:	2a00      	cmp	r2, #0
 8010730:	d000      	beq.n	8010734 <__ssvfscanf_r+0xa2c>
 8010732:	e09f      	b.n	8010874 <__ssvfscanf_r+0xb6c>
 8010734:	2080      	movs	r0, #128	; 0x80
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	cb10      	ldmia	r3!, {r4}
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	4206      	tst	r6, r0
 801073e:	d100      	bne.n	8010742 <__ssvfscanf_r+0xa3a>
 8010740:	e0a1      	b.n	8010886 <__ssvfscanf_r+0xb7e>
 8010742:	2c00      	cmp	r4, #0
 8010744:	d100      	bne.n	8010748 <__ssvfscanf_r+0xa40>
 8010746:	e4aa      	b.n	801009e <__ssvfscanf_r+0x396>
 8010748:	f7fb fb36 	bl	800bdb8 <malloc>
 801074c:	6338      	str	r0, [r7, #48]	; 0x30
 801074e:	2800      	cmp	r0, #0
 8010750:	d100      	bne.n	8010754 <__ssvfscanf_r+0xa4c>
 8010752:	e4a1      	b.n	8010098 <__ssvfscanf_r+0x390>
 8010754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010756:	6023      	str	r3, [r4, #0]
 8010758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075a:	88de      	ldrh	r6, [r3, #6]
 801075c:	889d      	ldrh	r5, [r3, #4]
 801075e:	42ae      	cmp	r6, r5
 8010760:	d310      	bcc.n	8010784 <__ssvfscanf_r+0xa7c>
 8010762:	4b72      	ldr	r3, [pc, #456]	; (801092c <__ssvfscanf_r+0xc24>)
 8010764:	429d      	cmp	r5, r3
 8010766:	d900      	bls.n	801076a <__ssvfscanf_r+0xa62>
 8010768:	e496      	b.n	8010098 <__ssvfscanf_r+0x390>
 801076a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801076c:	3508      	adds	r5, #8
 801076e:	b2ad      	uxth	r5, r5
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	00a9      	lsls	r1, r5, #2
 8010774:	f001 fdc2 	bl	80122fc <realloc>
 8010778:	2800      	cmp	r0, #0
 801077a:	d100      	bne.n	801077e <__ssvfscanf_r+0xa76>
 801077c:	e48c      	b.n	8010098 <__ssvfscanf_r+0x390>
 801077e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010780:	6018      	str	r0, [r3, #0]
 8010782:	809d      	strh	r5, [r3, #4]
 8010784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010786:	1c72      	adds	r2, r6, #1
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	00b6      	lsls	r6, r6, #2
 801078c:	50f4      	str	r4, [r6, r3]
 801078e:	2320      	movs	r3, #32
 8010790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010792:	0025      	movs	r5, r4
 8010794:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010796:	80ca      	strh	r2, [r1, #6]
 8010798:	613b      	str	r3, [r7, #16]
 801079a:	2300      	movs	r3, #0
 801079c:	623b      	str	r3, [r7, #32]
 801079e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107a0:	4a63      	ldr	r2, [pc, #396]	; (8010930 <__ssvfscanf_r+0xc28>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	5cd3      	ldrb	r3, [r2, r3]
 80107a8:	2208      	movs	r2, #8
 80107aa:	4213      	tst	r3, r2
 80107ac:	d149      	bne.n	8010842 <__ssvfscanf_r+0xb3a>
 80107ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d046      	beq.n	8010842 <__ssvfscanf_r+0xb3a>
 80107b4:	f7fc feb2 	bl	800d51c <__locale_mb_cur_max>
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	4298      	cmp	r0, r3
 80107bc:	d101      	bne.n	80107c2 <__ssvfscanf_r+0xaba>
 80107be:	f7ff fb72 	bl	800fea6 <__ssvfscanf_r+0x19e>
 80107c2:	6a3a      	ldr	r2, [r7, #32]
 80107c4:	2048      	movs	r0, #72	; 0x48
 80107c6:	1c56      	adds	r6, r2, #1
 80107c8:	228c      	movs	r2, #140	; 0x8c
 80107ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107cc:	0052      	lsls	r2, r2, #1
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	1812      	adds	r2, r2, r0
 80107d2:	7819      	ldrb	r1, [r3, #0]
 80107d4:	6a38      	ldr	r0, [r7, #32]
 80107d6:	19d2      	adds	r2, r2, r7
 80107d8:	5411      	strb	r1, [r2, r0]
 80107da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107de:	6852      	ldr	r2, [r2, #4]
 80107e0:	3301      	adds	r3, #1
 80107e2:	600b      	str	r3, [r1, #0]
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	3a01      	subs	r2, #1
 80107e8:	604a      	str	r2, [r1, #4]
 80107ea:	2b03      	cmp	r3, #3
 80107ec:	d102      	bne.n	80107f4 <__ssvfscanf_r+0xaec>
 80107ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107f0:	2b04      	cmp	r3, #4
 80107f2:	d007      	beq.n	8010804 <__ssvfscanf_r+0xafc>
 80107f4:	2048      	movs	r0, #72	; 0x48
 80107f6:	2310      	movs	r3, #16
 80107f8:	181b      	adds	r3, r3, r0
 80107fa:	2208      	movs	r2, #8
 80107fc:	2100      	movs	r1, #0
 80107fe:	19d8      	adds	r0, r3, r7
 8010800:	f7fc fe00 	bl	800d404 <memset>
 8010804:	2148      	movs	r1, #72	; 0x48
 8010806:	2310      	movs	r3, #16
 8010808:	228c      	movs	r2, #140	; 0x8c
 801080a:	185b      	adds	r3, r3, r1
 801080c:	0052      	lsls	r2, r2, #1
 801080e:	19db      	adds	r3, r3, r7
 8010810:	1852      	adds	r2, r2, r1
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	0021      	movs	r1, r4
 8010816:	0033      	movs	r3, r6
 8010818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801081a:	19d2      	adds	r2, r2, r7
 801081c:	f002 f882 	bl	8012924 <_mbrtowc_r>
 8010820:	0003      	movs	r3, r0
 8010822:	62b8      	str	r0, [r7, #40]	; 0x28
 8010824:	3301      	adds	r3, #1
 8010826:	d101      	bne.n	801082c <__ssvfscanf_r+0xb24>
 8010828:	f7ff fb3d 	bl	800fea6 <__ssvfscanf_r+0x19e>
 801082c:	2800      	cmp	r0, #0
 801082e:	d12f      	bne.n	8010890 <__ssvfscanf_r+0xb88>
 8010830:	6020      	str	r0, [r4, #0]
 8010832:	6820      	ldr	r0, [r4, #0]
 8010834:	f002 f894 	bl	8012960 <iswspace>
 8010838:	6238      	str	r0, [r7, #32]
 801083a:	2800      	cmp	r0, #0
 801083c:	d04a      	beq.n	80108d4 <__ssvfscanf_r+0xbcc>
 801083e:	2e00      	cmp	r6, #0
 8010840:	d13c      	bne.n	80108bc <__ssvfscanf_r+0xbb4>
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d000      	beq.n	801084a <__ssvfscanf_r+0xb42>
 8010848:	e640      	b.n	80104cc <__ssvfscanf_r+0x7c4>
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	2d00      	cmp	r5, #0
 801084e:	d100      	bne.n	8010852 <__ssvfscanf_r+0xb4a>
 8010850:	e639      	b.n	80104c6 <__ssvfscanf_r+0x7be>
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	693a      	ldr	r2, [r7, #16]
 8010856:	1ae4      	subs	r4, r4, r3
 8010858:	10a3      	asrs	r3, r4, #2
 801085a:	3301      	adds	r3, #1
 801085c:	429a      	cmp	r2, r3
 801085e:	d800      	bhi.n	8010862 <__ssvfscanf_r+0xb5a>
 8010860:	e631      	b.n	80104c6 <__ssvfscanf_r+0x7be>
 8010862:	6828      	ldr	r0, [r5, #0]
 8010864:	1d21      	adds	r1, r4, #4
 8010866:	f001 fd49 	bl	80122fc <realloc>
 801086a:	2800      	cmp	r0, #0
 801086c:	d100      	bne.n	8010870 <__ssvfscanf_r+0xb68>
 801086e:	e62a      	b.n	80104c6 <__ssvfscanf_r+0x7be>
 8010870:	6028      	str	r0, [r5, #0]
 8010872:	e628      	b.n	80104c6 <__ssvfscanf_r+0x7be>
 8010874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010876:	60fb      	str	r3, [r7, #12]
 8010878:	2300      	movs	r3, #0
 801087a:	001d      	movs	r5, r3
 801087c:	613b      	str	r3, [r7, #16]
 801087e:	633b      	str	r3, [r7, #48]	; 0x30
 8010880:	334c      	adds	r3, #76	; 0x4c
 8010882:	18fc      	adds	r4, r7, r3
 8010884:	e789      	b.n	801079a <__ssvfscanf_r+0xa92>
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	001d      	movs	r5, r3
 801088a:	613b      	str	r3, [r7, #16]
 801088c:	633b      	str	r3, [r7, #48]	; 0x30
 801088e:	e784      	b.n	801079a <__ssvfscanf_r+0xa92>
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	623e      	str	r6, [r7, #32]
 8010894:	3302      	adds	r3, #2
 8010896:	d1cc      	bne.n	8010832 <__ssvfscanf_r+0xb2a>
 8010898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	dd00      	ble.n	80108a2 <__ssvfscanf_r+0xb9a>
 80108a0:	e77d      	b.n	801079e <__ssvfscanf_r+0xa96>
 80108a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80108a6:	f002 f93d 	bl	8012b24 <__ssrefill_r>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d100      	bne.n	80108b0 <__ssvfscanf_r+0xba8>
 80108ae:	e776      	b.n	801079e <__ssvfscanf_r+0xa96>
 80108b0:	6a3b      	ldr	r3, [r7, #32]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <__ssvfscanf_r+0xbb2>
 80108b6:	f7ff faf6 	bl	800fea6 <__ssvfscanf_r+0x19e>
 80108ba:	e7c2      	b.n	8010842 <__ssvfscanf_r+0xb3a>
 80108bc:	238c      	movs	r3, #140	; 0x8c
 80108be:	2248      	movs	r2, #72	; 0x48
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	189b      	adds	r3, r3, r2
 80108c4:	3e01      	subs	r6, #1
 80108c6:	19db      	adds	r3, r3, r7
 80108c8:	5cf1      	ldrb	r1, [r6, r3]
 80108ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80108ce:	f002 f8ed 	bl	8012aac <_sungetc_r>
 80108d2:	e7b4      	b.n	801083e <__ssvfscanf_r+0xb36>
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	199b      	adds	r3, r3, r6
 80108d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	2b03      	cmp	r3, #3
 80108de:	d102      	bne.n	80108e6 <__ssvfscanf_r+0xbde>
 80108e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108e2:	2b04      	cmp	r3, #4
 80108e4:	d002      	beq.n	80108ec <__ssvfscanf_r+0xbe4>
 80108e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e8:	3b01      	subs	r3, #1
 80108ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1d2      	bne.n	8010898 <__ssvfscanf_r+0xb90>
 80108f2:	3404      	adds	r4, #4
 80108f4:	2d00      	cmp	r5, #0
 80108f6:	d016      	beq.n	8010926 <__ssvfscanf_r+0xc1e>
 80108f8:	69fa      	ldr	r2, [r7, #28]
 80108fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fc:	623a      	str	r2, [r7, #32]
 80108fe:	693a      	ldr	r2, [r7, #16]
 8010900:	1ae6      	subs	r6, r4, r3
 8010902:	10b3      	asrs	r3, r6, #2
 8010904:	4293      	cmp	r3, r2
 8010906:	d3c7      	bcc.n	8010898 <__ssvfscanf_r+0xb90>
 8010908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801090a:	00d1      	lsls	r1, r2, #3
 801090c:	f001 fcf6 	bl	80122fc <realloc>
 8010910:	6338      	str	r0, [r7, #48]	; 0x30
 8010912:	2800      	cmp	r0, #0
 8010914:	d101      	bne.n	801091a <__ssvfscanf_r+0xc12>
 8010916:	f7ff fbbf 	bl	8010098 <__ssvfscanf_r+0x390>
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	1984      	adds	r4, r0, r6
 801091e:	005b      	lsls	r3, r3, #1
 8010920:	6028      	str	r0, [r5, #0]
 8010922:	613b      	str	r3, [r7, #16]
 8010924:	e7b8      	b.n	8010898 <__ssvfscanf_r+0xb90>
 8010926:	623d      	str	r5, [r7, #32]
 8010928:	e7b6      	b.n	8010898 <__ssvfscanf_r+0xb90>
 801092a:	46c0      	nop			; (mov r8, r8)
 801092c:	0000fff6 	.word	0x0000fff6
 8010930:	08015b89 	.word	0x08015b89
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d01c      	beq.n	8010974 <__ssvfscanf_r+0xc6c>
 801093a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801093c:	49bf      	ldr	r1, [pc, #764]	; (8010c3c <__ssvfscanf_r+0xf34>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	781a      	ldrb	r2, [r3, #0]
 8010942:	5c8a      	ldrb	r2, [r1, r2]
 8010944:	2108      	movs	r1, #8
 8010946:	420a      	tst	r2, r1
 8010948:	d000      	beq.n	801094c <__ssvfscanf_r+0xc44>
 801094a:	e4a1      	b.n	8010290 <__ssvfscanf_r+0x588>
 801094c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801094e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010950:	6852      	ldr	r2, [r2, #4]
 8010952:	3301      	adds	r3, #1
 8010954:	600b      	str	r3, [r1, #0]
 8010956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010958:	3a01      	subs	r2, #1
 801095a:	3401      	adds	r4, #1
 801095c:	604a      	str	r2, [r1, #4]
 801095e:	429c      	cmp	r4, r3
 8010960:	d100      	bne.n	8010964 <__ssvfscanf_r+0xc5c>
 8010962:	e495      	b.n	8010290 <__ssvfscanf_r+0x588>
 8010964:	2a00      	cmp	r2, #0
 8010966:	dce8      	bgt.n	801093a <__ssvfscanf_r+0xc32>
 8010968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801096a:	f002 f8db 	bl	8012b24 <__ssrefill_r>
 801096e:	2800      	cmp	r0, #0
 8010970:	d0e3      	beq.n	801093a <__ssvfscanf_r+0xc32>
 8010972:	e48d      	b.n	8010290 <__ssvfscanf_r+0x588>
 8010974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010976:	0032      	movs	r2, r6
 8010978:	cb10      	ldmia	r3!, {r4}
 801097a:	61fb      	str	r3, [r7, #28]
 801097c:	2380      	movs	r3, #128	; 0x80
 801097e:	401a      	ands	r2, r3
 8010980:	421e      	tst	r6, r3
 8010982:	d039      	beq.n	80109f8 <__ssvfscanf_r+0xcf0>
 8010984:	2c00      	cmp	r4, #0
 8010986:	d101      	bne.n	801098c <__ssvfscanf_r+0xc84>
 8010988:	f7ff fabb 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 801098c:	2020      	movs	r0, #32
 801098e:	f7fb fa13 	bl	800bdb8 <malloc>
 8010992:	6338      	str	r0, [r7, #48]	; 0x30
 8010994:	2800      	cmp	r0, #0
 8010996:	d101      	bne.n	801099c <__ssvfscanf_r+0xc94>
 8010998:	f7ff fa8c 	bl	800feb4 <__ssvfscanf_r+0x1ac>
 801099c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801099e:	6020      	str	r0, [r4, #0]
 80109a0:	88de      	ldrh	r6, [r3, #6]
 80109a2:	889d      	ldrh	r5, [r3, #4]
 80109a4:	6818      	ldr	r0, [r3, #0]
 80109a6:	42ae      	cmp	r6, r5
 80109a8:	d310      	bcc.n	80109cc <__ssvfscanf_r+0xcc4>
 80109aa:	4ba5      	ldr	r3, [pc, #660]	; (8010c40 <__ssvfscanf_r+0xf38>)
 80109ac:	429d      	cmp	r5, r3
 80109ae:	d901      	bls.n	80109b4 <__ssvfscanf_r+0xcac>
 80109b0:	f7ff fb7b 	bl	80100aa <__ssvfscanf_r+0x3a2>
 80109b4:	3508      	adds	r5, #8
 80109b6:	b2ad      	uxth	r5, r5
 80109b8:	00a9      	lsls	r1, r5, #2
 80109ba:	f001 fc9f 	bl	80122fc <realloc>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d101      	bne.n	80109c6 <__ssvfscanf_r+0xcbe>
 80109c2:	f7ff fb72 	bl	80100aa <__ssvfscanf_r+0x3a2>
 80109c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109c8:	6018      	str	r0, [r3, #0]
 80109ca:	809d      	strh	r5, [r3, #4]
 80109cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109ce:	1c72      	adds	r2, r6, #1
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	00b6      	lsls	r6, r6, #2
 80109d4:	50f4      	str	r4, [r6, r3]
 80109d6:	2320      	movs	r3, #32
 80109d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80109da:	0026      	movs	r6, r4
 80109dc:	80ca      	strh	r2, [r1, #6]
 80109de:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80109e0:	633b      	str	r3, [r7, #48]	; 0x30
 80109e2:	0025      	movs	r5, r4
 80109e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e6:	4995      	ldr	r1, [pc, #596]	; (8010c3c <__ssvfscanf_r+0xf34>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	781a      	ldrb	r2, [r3, #0]
 80109ec:	5c8a      	ldrb	r2, [r1, r2]
 80109ee:	2108      	movs	r1, #8
 80109f0:	420a      	tst	r2, r1
 80109f2:	d004      	beq.n	80109fe <__ssvfscanf_r+0xcf6>
 80109f4:	623c      	str	r4, [r7, #32]
 80109f6:	e031      	b.n	8010a5c <__ssvfscanf_r+0xd54>
 80109f8:	0016      	movs	r6, r2
 80109fa:	633a      	str	r2, [r7, #48]	; 0x30
 80109fc:	e7f1      	b.n	80109e2 <__ssvfscanf_r+0xcda>
 80109fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a02:	6852      	ldr	r2, [r2, #4]
 8010a04:	3a01      	subs	r2, #1
 8010a06:	604a      	str	r2, [r1, #4]
 8010a08:	1c5a      	adds	r2, r3, #1
 8010a0a:	600a      	str	r2, [r1, #0]
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	1c62      	adds	r2, r4, #1
 8010a10:	623a      	str	r2, [r7, #32]
 8010a12:	7023      	strb	r3, [r4, #0]
 8010a14:	2e00      	cmp	r6, #0
 8010a16:	d010      	beq.n	8010a3a <__ssvfscanf_r+0xd32>
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	1b54      	subs	r4, r2, r5
 8010a1c:	429c      	cmp	r4, r3
 8010a1e:	d30c      	bcc.n	8010a3a <__ssvfscanf_r+0xd32>
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	0028      	movs	r0, r5
 8010a24:	0019      	movs	r1, r3
 8010a26:	633b      	str	r3, [r7, #48]	; 0x30
 8010a28:	f001 fc68 	bl	80122fc <realloc>
 8010a2c:	1e05      	subs	r5, r0, #0
 8010a2e:	d101      	bne.n	8010a34 <__ssvfscanf_r+0xd2c>
 8010a30:	f7ff fa40 	bl	800feb4 <__ssvfscanf_r+0x1ac>
 8010a34:	1903      	adds	r3, r0, r4
 8010a36:	623b      	str	r3, [r7, #32]
 8010a38:	6030      	str	r0, [r6, #0]
 8010a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d00b      	beq.n	8010a5c <__ssvfscanf_r+0xd54>
 8010a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	dd01      	ble.n	8010a50 <__ssvfscanf_r+0xd48>
 8010a4c:	6a3c      	ldr	r4, [r7, #32]
 8010a4e:	e7c9      	b.n	80109e4 <__ssvfscanf_r+0xcdc>
 8010a50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a54:	f002 f866 	bl	8012b24 <__ssrefill_r>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d0f7      	beq.n	8010a4c <__ssvfscanf_r+0xd44>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	6a3a      	ldr	r2, [r7, #32]
 8010a60:	7013      	strb	r3, [r2, #0]
 8010a62:	1b55      	subs	r5, r2, r5
 8010a64:	2e00      	cmp	r6, #0
 8010a66:	d009      	beq.n	8010a7c <__ssvfscanf_r+0xd74>
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	1c69      	adds	r1, r5, #1
 8010a6c:	428b      	cmp	r3, r1
 8010a6e:	d905      	bls.n	8010a7c <__ssvfscanf_r+0xd74>
 8010a70:	6830      	ldr	r0, [r6, #0]
 8010a72:	f001 fc43 	bl	80122fc <realloc>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d000      	beq.n	8010a7c <__ssvfscanf_r+0xd74>
 8010a7a:	6030      	str	r0, [r6, #0]
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	195b      	adds	r3, r3, r5
 8010a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a84:	3301      	adds	r3, #1
 8010a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a88:	e63c      	b.n	8010704 <__ssvfscanf_r+0x9fc>
 8010a8a:	22ae      	movs	r2, #174	; 0xae
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a90:	0052      	lsls	r2, r2, #1
 8010a92:	3b01      	subs	r3, #1
 8010a94:	6239      	str	r1, [r7, #32]
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d906      	bls.n	8010aa8 <__ssvfscanf_r+0xda0>
 8010a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9c:	3b5e      	subs	r3, #94	; 0x5e
 8010a9e:	3bff      	subs	r3, #255	; 0xff
 8010aa0:	623b      	str	r3, [r7, #32]
 8010aa2:	235e      	movs	r3, #94	; 0x5e
 8010aa4:	33ff      	adds	r3, #255	; 0xff
 8010aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010aa8:	24d8      	movs	r4, #216	; 0xd8
 8010aaa:	2300      	movs	r3, #0
 8010aac:	2248      	movs	r2, #72	; 0x48
 8010aae:	0124      	lsls	r4, r4, #4
 8010ab0:	4334      	orrs	r4, r6
 8010ab2:	2680      	movs	r6, #128	; 0x80
 8010ab4:	61fb      	str	r3, [r7, #28]
 8010ab6:	3319      	adds	r3, #25
 8010ab8:	33ff      	adds	r3, #255	; 0xff
 8010aba:	189b      	adds	r3, r3, r2
 8010abc:	19dd      	adds	r5, r3, r7
 8010abe:	00b6      	lsls	r6, r6, #2
 8010ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	7813      	ldrb	r3, [r2, #0]
 8010ac6:	2b39      	cmp	r3, #57	; 0x39
 8010ac8:	d80f      	bhi.n	8010aea <__ssvfscanf_r+0xde2>
 8010aca:	2b2a      	cmp	r3, #42	; 0x2a
 8010acc:	d91b      	bls.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010ace:	0018      	movs	r0, r3
 8010ad0:	382b      	subs	r0, #43	; 0x2b
 8010ad2:	280e      	cmp	r0, #14
 8010ad4:	d817      	bhi.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010ad6:	f7ef fb1d 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010ada:	168f      	.short	0x168f
 8010adc:	5416168f 	.word	0x5416168f
 8010ae0:	80808080 	.word	0x80808080
 8010ae4:	87808080 	.word	0x87808080
 8010ae8:	87          	.byte	0x87
 8010ae9:	00          	.byte	0x00
 8010aea:	2b66      	cmp	r3, #102	; 0x66
 8010aec:	d83a      	bhi.n	8010b64 <__ssvfscanf_r+0xe5c>
 8010aee:	2b60      	cmp	r3, #96	; 0x60
 8010af0:	d803      	bhi.n	8010afa <__ssvfscanf_r+0xdf2>
 8010af2:	2b46      	cmp	r3, #70	; 0x46
 8010af4:	d805      	bhi.n	8010b02 <__ssvfscanf_r+0xdfa>
 8010af6:	2b40      	cmp	r3, #64	; 0x40
 8010af8:	d905      	bls.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010afc:	290a      	cmp	r1, #10
 8010afe:	dc71      	bgt.n	8010be4 <__ssvfscanf_r+0xedc>
 8010b00:	e001      	b.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010b02:	2b58      	cmp	r3, #88	; 0x58
 8010b04:	d030      	beq.n	8010b68 <__ssvfscanf_r+0xe60>
 8010b06:	05e3      	lsls	r3, r4, #23
 8010b08:	d515      	bpl.n	8010b36 <__ssvfscanf_r+0xe2e>
 8010b0a:	238c      	movs	r3, #140	; 0x8c
 8010b0c:	2248      	movs	r2, #72	; 0x48
 8010b0e:	005b      	lsls	r3, r3, #1
 8010b10:	189b      	adds	r3, r3, r2
 8010b12:	19db      	adds	r3, r3, r7
 8010b14:	429d      	cmp	r5, r3
 8010b16:	d905      	bls.n	8010b24 <__ssvfscanf_r+0xe1c>
 8010b18:	3d01      	subs	r5, #1
 8010b1a:	7829      	ldrb	r1, [r5, #0]
 8010b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b20:	f001 ffc4 	bl	8012aac <_sungetc_r>
 8010b24:	238c      	movs	r3, #140	; 0x8c
 8010b26:	2248      	movs	r2, #72	; 0x48
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	189b      	adds	r3, r3, r2
 8010b2c:	19db      	adds	r3, r3, r7
 8010b2e:	429d      	cmp	r5, r3
 8010b30:	d101      	bne.n	8010b36 <__ssvfscanf_r+0xe2e>
 8010b32:	f7ff f9e6 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 8010b36:	2310      	movs	r3, #16
 8010b38:	0022      	movs	r2, r4
 8010b3a:	401a      	ands	r2, r3
 8010b3c:	421c      	tst	r4, r3
 8010b3e:	d171      	bne.n	8010c24 <__ssvfscanf_r+0xf1c>
 8010b40:	218c      	movs	r1, #140	; 0x8c
 8010b42:	2048      	movs	r0, #72	; 0x48
 8010b44:	0049      	lsls	r1, r1, #1
 8010b46:	1809      	adds	r1, r1, r0
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	697e      	ldr	r6, [r7, #20]
 8010b4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b4e:	19c9      	adds	r1, r1, r7
 8010b50:	702a      	strb	r2, [r5, #0]
 8010b52:	47b0      	blx	r6
 8010b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b56:	1d1e      	adds	r6, r3, #4
 8010b58:	06a3      	lsls	r3, r4, #26
 8010b5a:	d559      	bpl.n	8010c10 <__ssvfscanf_r+0xf08>
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	6018      	str	r0, [r3, #0]
 8010b62:	e05b      	b.n	8010c1c <__ssvfscanf_r+0xf14>
 8010b64:	2b78      	cmp	r3, #120	; 0x78
 8010b66:	d1ce      	bne.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010b68:	21c0      	movs	r1, #192	; 0xc0
 8010b6a:	00c9      	lsls	r1, r1, #3
 8010b6c:	4021      	ands	r1, r4
 8010b6e:	42b1      	cmp	r1, r6
 8010b70:	d1c9      	bne.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010b72:	4934      	ldr	r1, [pc, #208]	; (8010c44 <__ssvfscanf_r+0xf3c>)
 8010b74:	4021      	ands	r1, r4
 8010b76:	24a0      	movs	r4, #160	; 0xa0
 8010b78:	00e4      	lsls	r4, r4, #3
 8010b7a:	430c      	orrs	r4, r1
 8010b7c:	2110      	movs	r1, #16
 8010b7e:	6279      	str	r1, [r7, #36]	; 0x24
 8010b80:	e00b      	b.n	8010b9a <__ssvfscanf_r+0xe92>
 8010b82:	0521      	lsls	r1, r4, #20
 8010b84:	d509      	bpl.n	8010b9a <__ssvfscanf_r+0xe92>
 8010b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b88:	2900      	cmp	r1, #0
 8010b8a:	d102      	bne.n	8010b92 <__ssvfscanf_r+0xe8a>
 8010b8c:	3108      	adds	r1, #8
 8010b8e:	4334      	orrs	r4, r6
 8010b90:	6279      	str	r1, [r7, #36]	; 0x24
 8010b92:	0561      	lsls	r1, r4, #21
 8010b94:	d504      	bpl.n	8010ba0 <__ssvfscanf_r+0xe98>
 8010b96:	492c      	ldr	r1, [pc, #176]	; (8010c48 <__ssvfscanf_r+0xf40>)
 8010b98:	400c      	ands	r4, r1
 8010b9a:	702b      	strb	r3, [r5, #0]
 8010b9c:	3501      	adds	r5, #1
 8010b9e:	e00c      	b.n	8010bba <__ssvfscanf_r+0xeb2>
 8010ba0:	4b2a      	ldr	r3, [pc, #168]	; (8010c4c <__ssvfscanf_r+0xf44>)
 8010ba2:	401c      	ands	r4, r3
 8010ba4:	6a3b      	ldr	r3, [r7, #32]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <__ssvfscanf_r+0xeac>
 8010baa:	3b01      	subs	r3, #1
 8010bac:	623b      	str	r3, [r7, #32]
 8010bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	61fb      	str	r3, [r7, #28]
 8010bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	604b      	str	r3, [r1, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	dd1c      	ble.n	8010c02 <__ssvfscanf_r+0xefa>
 8010bc8:	3201      	adds	r2, #1
 8010bca:	600a      	str	r2, [r1, #0]
 8010bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d000      	beq.n	8010bd8 <__ssvfscanf_r+0xed0>
 8010bd6:	e773      	b.n	8010ac0 <__ssvfscanf_r+0xdb8>
 8010bd8:	e795      	b.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bdc:	491c      	ldr	r1, [pc, #112]	; (8010c50 <__ssvfscanf_r+0xf48>)
 8010bde:	0040      	lsls	r0, r0, #1
 8010be0:	5e41      	ldrsh	r1, [r0, r1]
 8010be2:	6279      	str	r1, [r7, #36]	; 0x24
 8010be4:	491b      	ldr	r1, [pc, #108]	; (8010c54 <__ssvfscanf_r+0xf4c>)
 8010be6:	e7d7      	b.n	8010b98 <__ssvfscanf_r+0xe90>
 8010be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bea:	4919      	ldr	r1, [pc, #100]	; (8010c50 <__ssvfscanf_r+0xf48>)
 8010bec:	0040      	lsls	r0, r0, #1
 8010bee:	5e41      	ldrsh	r1, [r0, r1]
 8010bf0:	6279      	str	r1, [r7, #36]	; 0x24
 8010bf2:	2908      	cmp	r1, #8
 8010bf4:	dcf6      	bgt.n	8010be4 <__ssvfscanf_r+0xedc>
 8010bf6:	e786      	b.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010bf8:	2180      	movs	r1, #128	; 0x80
 8010bfa:	420c      	tst	r4, r1
 8010bfc:	d083      	beq.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010bfe:	438c      	bics	r4, r1
 8010c00:	e7cb      	b.n	8010b9a <__ssvfscanf_r+0xe92>
 8010c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c06:	f001 ff8d 	bl	8012b24 <__ssrefill_r>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d0de      	beq.n	8010bcc <__ssvfscanf_r+0xec4>
 8010c0e:	e77a      	b.n	8010b06 <__ssvfscanf_r+0xdfe>
 8010c10:	2308      	movs	r3, #8
 8010c12:	421c      	tst	r4, r3
 8010c14:	d020      	beq.n	8010c58 <__ssvfscanf_r+0xf50>
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	7018      	strb	r0, [r3, #0]
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1e:	633e      	str	r6, [r7, #48]	; 0x30
 8010c20:	3301      	adds	r3, #1
 8010c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c24:	238c      	movs	r3, #140	; 0x8c
 8010c26:	2248      	movs	r2, #72	; 0x48
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	189b      	adds	r3, r3, r2
 8010c2c:	19db      	adds	r3, r3, r7
 8010c2e:	1aed      	subs	r5, r5, r3
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	18ed      	adds	r5, r5, r3
 8010c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c36:	195b      	adds	r3, r3, r5
 8010c38:	f7ff f92d 	bl	800fe96 <__ssvfscanf_r+0x18e>
 8010c3c:	08015b89 	.word	0x08015b89
 8010c40:	0000fff6 	.word	0x0000fff6
 8010c44:	fffffdff 	.word	0xfffffdff
 8010c48:	fffffa7f 	.word	0xfffffa7f
 8010c4c:	fffffc7f 	.word	0xfffffc7f
 8010c50:	08015eb6 	.word	0x08015eb6
 8010c54:	fffff47f 	.word	0xfffff47f
 8010c58:	0763      	lsls	r3, r4, #29
 8010c5a:	d503      	bpl.n	8010c64 <__ssvfscanf_r+0xf5c>
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	8018      	strh	r0, [r3, #0]
 8010c62:	e7db      	b.n	8010c1c <__ssvfscanf_r+0xf14>
 8010c64:	2301      	movs	r3, #1
 8010c66:	0022      	movs	r2, r4
 8010c68:	401a      	ands	r2, r3
 8010c6a:	421c      	tst	r4, r3
 8010c6c:	d000      	beq.n	8010c70 <__ssvfscanf_r+0xf68>
 8010c6e:	e775      	b.n	8010b5c <__ssvfscanf_r+0xe54>
 8010c70:	07a4      	lsls	r4, r4, #30
 8010c72:	d400      	bmi.n	8010c76 <__ssvfscanf_r+0xf6e>
 8010c74:	e772      	b.n	8010b5c <__ssvfscanf_r+0xe54>
 8010c76:	4ba8      	ldr	r3, [pc, #672]	; (8010f18 <__ssvfscanf_r+0x1210>)
 8010c78:	6979      	ldr	r1, [r7, #20]
 8010c7a:	4299      	cmp	r1, r3
 8010c7c:	d10c      	bne.n	8010c98 <__ssvfscanf_r+0xf90>
 8010c7e:	218c      	movs	r1, #140	; 0x8c
 8010c80:	2048      	movs	r0, #72	; 0x48
 8010c82:	0049      	lsls	r1, r1, #1
 8010c84:	1809      	adds	r1, r1, r0
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c8a:	19c9      	adds	r1, r1, r7
 8010c8c:	f001 fe46 	bl	801291c <_strtoull_r>
 8010c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	c303      	stmia	r3!, {r0, r1}
 8010c96:	e7c1      	b.n	8010c1c <__ssvfscanf_r+0xf14>
 8010c98:	218c      	movs	r1, #140	; 0x8c
 8010c9a:	2048      	movs	r0, #72	; 0x48
 8010c9c:	0049      	lsls	r1, r1, #1
 8010c9e:	1809      	adds	r1, r1, r0
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ca4:	19c9      	adds	r1, r1, r7
 8010ca6:	f001 fd87 	bl	80127b8 <_strtoll_r>
 8010caa:	e7f1      	b.n	8010c90 <__ssvfscanf_r+0xf88>
 8010cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010cae:	f000 fb9f 	bl	80113f0 <_localeconv_r>
 8010cb2:	22ae      	movs	r2, #174	; 0xae
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	6803      	ldr	r3, [r0, #0]
 8010cb8:	0052      	lsls	r2, r2, #1
 8010cba:	603b      	str	r3, [r7, #0]
 8010cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cbe:	60f9      	str	r1, [r7, #12]
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d906      	bls.n	8010cd4 <__ssvfscanf_r+0xfcc>
 8010cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc8:	3b5e      	subs	r3, #94	; 0x5e
 8010cca:	3bff      	subs	r3, #255	; 0xff
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	235e      	movs	r3, #94	; 0x5e
 8010cd0:	33ff      	adds	r3, #255	; 0xff
 8010cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cd4:	23f0      	movs	r3, #240	; 0xf0
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	431e      	orrs	r6, r3
 8010cda:	238c      	movs	r3, #140	; 0x8c
 8010cdc:	2248      	movs	r2, #72	; 0x48
 8010cde:	2400      	movs	r4, #0
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	189b      	adds	r3, r3, r2
 8010ce4:	623c      	str	r4, [r7, #32]
 8010ce6:	607c      	str	r4, [r7, #4]
 8010ce8:	60bc      	str	r4, [r7, #8]
 8010cea:	61fc      	str	r4, [r7, #28]
 8010cec:	613c      	str	r4, [r7, #16]
 8010cee:	19dd      	adds	r5, r3, r7
 8010cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	781a      	ldrb	r2, [r3, #0]
 8010cf6:	0010      	movs	r0, r2
 8010cf8:	382b      	subs	r0, #43	; 0x2b
 8010cfa:	284e      	cmp	r0, #78	; 0x4e
 8010cfc:	d900      	bls.n	8010d00 <__ssvfscanf_r+0xff8>
 8010cfe:	e133      	b.n	8010f68 <__ssvfscanf_r+0x1260>
 8010d00:	f7ef fa12 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010d04:	0132009b 	.word	0x0132009b
 8010d08:	0132009b 	.word	0x0132009b
 8010d0c:	004f0132 	.word	0x004f0132
 8010d10:	00720072 	.word	0x00720072
 8010d14:	00720072 	.word	0x00720072
 8010d18:	00720072 	.word	0x00720072
 8010d1c:	00720072 	.word	0x00720072
 8010d20:	01320072 	.word	0x01320072
 8010d24:	01320132 	.word	0x01320132
 8010d28:	01320132 	.word	0x01320132
 8010d2c:	01320132 	.word	0x01320132
 8010d30:	007b00bc 	.word	0x007b00bc
 8010d34:	007b007b 	.word	0x007b007b
 8010d38:	00f7012f 	.word	0x00f7012f
 8010d3c:	01320132 	.word	0x01320132
 8010d40:	013200e3 	.word	0x013200e3
 8010d44:	01320132 	.word	0x01320132
 8010d48:	00a00132 	.word	0x00a00132
 8010d4c:	01120132 	.word	0x01120132
 8010d50:	01320132 	.word	0x01320132
 8010d54:	01010132 	.word	0x01010132
 8010d58:	01320132 	.word	0x01320132
 8010d5c:	00820132 	.word	0x00820132
 8010d60:	01320105 	.word	0x01320105
 8010d64:	01320132 	.word	0x01320132
 8010d68:	01320132 	.word	0x01320132
 8010d6c:	01320132 	.word	0x01320132
 8010d70:	007b00bc 	.word	0x007b00bc
 8010d74:	007b007b 	.word	0x007b007b
 8010d78:	00f7012f 	.word	0x00f7012f
 8010d7c:	01320132 	.word	0x01320132
 8010d80:	013200e3 	.word	0x013200e3
 8010d84:	01320132 	.word	0x01320132
 8010d88:	00a00132 	.word	0x00a00132
 8010d8c:	01120132 	.word	0x01120132
 8010d90:	01320132 	.word	0x01320132
 8010d94:	01010132 	.word	0x01010132
 8010d98:	01320132 	.word	0x01320132
 8010d9c:	00820132 	.word	0x00820132
 8010da0:	0105      	.short	0x0105
 8010da2:	05f1      	lsls	r1, r6, #23
 8010da4:	d520      	bpl.n	8010de8 <__ssvfscanf_r+0x10e0>
 8010da6:	2280      	movs	r2, #128	; 0x80
 8010da8:	4396      	bics	r6, r2
 8010daa:	69fa      	ldr	r2, [r7, #28]
 8010dac:	3201      	adds	r2, #1
 8010dae:	61fa      	str	r2, [r7, #28]
 8010db0:	68fa      	ldr	r2, [r7, #12]
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	d004      	beq.n	8010dc0 <__ssvfscanf_r+0x10b8>
 8010db6:	3a01      	subs	r2, #1
 8010db8:	60fa      	str	r2, [r7, #12]
 8010dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dbc:	3201      	adds	r2, #1
 8010dbe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dc4:	3a01      	subs	r2, #1
 8010dc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dca:	3201      	adds	r2, #1
 8010dcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8010dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010dd0:	6852      	ldr	r2, [r2, #4]
 8010dd2:	3a01      	subs	r2, #1
 8010dd4:	604a      	str	r2, [r1, #4]
 8010dd6:	2a00      	cmp	r2, #0
 8010dd8:	dc00      	bgt.n	8010ddc <__ssvfscanf_r+0x10d4>
 8010dda:	e0d6      	b.n	8010f8a <__ssvfscanf_r+0x1282>
 8010ddc:	3301      	adds	r3, #1
 8010dde:	600b      	str	r3, [r1, #0]
 8010de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d184      	bne.n	8010cf0 <__ssvfscanf_r+0xfe8>
 8010de6:	e057      	b.n	8010e98 <__ssvfscanf_r+0x1190>
 8010de8:	6a39      	ldr	r1, [r7, #32]
 8010dea:	1909      	adds	r1, r1, r4
 8010dec:	2900      	cmp	r1, #0
 8010dee:	d153      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010df0:	494a      	ldr	r1, [pc, #296]	; (8010f1c <__ssvfscanf_r+0x1214>)
 8010df2:	400e      	ands	r6, r1
 8010df4:	702a      	strb	r2, [r5, #0]
 8010df6:	3501      	adds	r5, #1
 8010df8:	e7e2      	b.n	8010dc0 <__ssvfscanf_r+0x10b8>
 8010dfa:	0531      	lsls	r1, r6, #20
 8010dfc:	d54c      	bpl.n	8010e98 <__ssvfscanf_r+0x1190>
 8010dfe:	6a39      	ldr	r1, [r7, #32]
 8010e00:	1909      	adds	r1, r1, r4
 8010e02:	2900      	cmp	r1, #0
 8010e04:	d040      	beq.n	8010e88 <__ssvfscanf_r+0x1180>
 8010e06:	e047      	b.n	8010e98 <__ssvfscanf_r+0x1190>
 8010e08:	2198      	movs	r1, #152	; 0x98
 8010e0a:	2080      	movs	r0, #128	; 0x80
 8010e0c:	0109      	lsls	r1, r1, #4
 8010e0e:	4031      	ands	r1, r6
 8010e10:	0040      	lsls	r0, r0, #1
 8010e12:	4281      	cmp	r1, r0
 8010e14:	d140      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010e16:	69f9      	ldr	r1, [r7, #28]
 8010e18:	2901      	cmp	r1, #1
 8010e1a:	d13d      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010e1c:	2080      	movs	r0, #128	; 0x80
 8010e1e:	4940      	ldr	r1, [pc, #256]	; (8010f20 <__ssvfscanf_r+0x1218>)
 8010e20:	0100      	lsls	r0, r0, #4
 8010e22:	400e      	ands	r6, r1
 8010e24:	3132      	adds	r1, #50	; 0x32
 8010e26:	31ff      	adds	r1, #255	; 0xff
 8010e28:	7029      	strb	r1, [r5, #0]
 8010e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e2c:	4306      	orrs	r6, r0
 8010e2e:	3901      	subs	r1, #1
 8010e30:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010e32:	3501      	adds	r5, #1
 8010e34:	2100      	movs	r1, #0
 8010e36:	61f9      	str	r1, [r7, #28]
 8010e38:	e7dc      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010e3a:	2180      	movs	r1, #128	; 0x80
 8010e3c:	420e      	tst	r6, r1
 8010e3e:	d02b      	beq.n	8010e98 <__ssvfscanf_r+0x1190>
 8010e40:	438e      	bics	r6, r1
 8010e42:	e7d7      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010e44:	6a39      	ldr	r1, [r7, #32]
 8010e46:	2900      	cmp	r1, #0
 8010e48:	d10d      	bne.n	8010e66 <__ssvfscanf_r+0x115e>
 8010e4a:	69f9      	ldr	r1, [r7, #28]
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	d10e      	bne.n	8010e6e <__ssvfscanf_r+0x1166>
 8010e50:	21e0      	movs	r1, #224	; 0xe0
 8010e52:	0030      	movs	r0, r6
 8010e54:	00c9      	lsls	r1, r1, #3
 8010e56:	4008      	ands	r0, r1
 8010e58:	4288      	cmp	r0, r1
 8010e5a:	d108      	bne.n	8010e6e <__ssvfscanf_r+0x1166>
 8010e5c:	4931      	ldr	r1, [pc, #196]	; (8010f24 <__ssvfscanf_r+0x121c>)
 8010e5e:	400e      	ands	r6, r1
 8010e60:	2101      	movs	r1, #1
 8010e62:	6239      	str	r1, [r7, #32]
 8010e64:	e7c6      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010e66:	6a39      	ldr	r1, [r7, #32]
 8010e68:	2902      	cmp	r1, #2
 8010e6a:	d100      	bne.n	8010e6e <__ssvfscanf_r+0x1166>
 8010e6c:	e089      	b.n	8010f82 <__ssvfscanf_r+0x127a>
 8010e6e:	2c01      	cmp	r4, #1
 8010e70:	d001      	beq.n	8010e76 <__ssvfscanf_r+0x116e>
 8010e72:	2c04      	cmp	r4, #4
 8010e74:	d110      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010e76:	3401      	adds	r4, #1
 8010e78:	b2e4      	uxtb	r4, r4
 8010e7a:	e7bb      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010e7c:	0531      	lsls	r1, r6, #20
 8010e7e:	d508      	bpl.n	8010e92 <__ssvfscanf_r+0x118a>
 8010e80:	6a39      	ldr	r1, [r7, #32]
 8010e82:	1909      	adds	r1, r1, r4
 8010e84:	2900      	cmp	r1, #0
 8010e86:	d104      	bne.n	8010e92 <__ssvfscanf_r+0x118a>
 8010e88:	4824      	ldr	r0, [pc, #144]	; (8010f1c <__ssvfscanf_r+0x1214>)
 8010e8a:	000c      	movs	r4, r1
 8010e8c:	4006      	ands	r6, r0
 8010e8e:	6239      	str	r1, [r7, #32]
 8010e90:	e7b0      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010e92:	6a39      	ldr	r1, [r7, #32]
 8010e94:	2901      	cmp	r1, #1
 8010e96:	d076      	beq.n	8010f86 <__ssvfscanf_r+0x127e>
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d001      	beq.n	8010ea2 <__ssvfscanf_r+0x119a>
 8010e9e:	4b20      	ldr	r3, [pc, #128]	; (8010f20 <__ssvfscanf_r+0x1218>)
 8010ea0:	401e      	ands	r6, r3
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d877      	bhi.n	8010f9a <__ssvfscanf_r+0x1292>
 8010eaa:	238c      	movs	r3, #140	; 0x8c
 8010eac:	2248      	movs	r2, #72	; 0x48
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	189b      	adds	r3, r3, r2
 8010eb2:	19db      	adds	r3, r3, r7
 8010eb4:	429d      	cmp	r5, r3
 8010eb6:	d801      	bhi.n	8010ebc <__ssvfscanf_r+0x11b4>
 8010eb8:	f7ff f823 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 8010ebc:	3d01      	subs	r5, #1
 8010ebe:	7829      	ldrb	r1, [r5, #0]
 8010ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ec2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ec4:	f001 fdf2 	bl	8012aac <_sungetc_r>
 8010ec8:	e7ef      	b.n	8010eaa <__ssvfscanf_r+0x11a2>
 8010eca:	2c00      	cmp	r4, #0
 8010ecc:	d10c      	bne.n	8010ee8 <__ssvfscanf_r+0x11e0>
 8010ece:	69f9      	ldr	r1, [r7, #28]
 8010ed0:	2900      	cmp	r1, #0
 8010ed2:	d1e4      	bne.n	8010e9e <__ssvfscanf_r+0x1196>
 8010ed4:	21e0      	movs	r1, #224	; 0xe0
 8010ed6:	0030      	movs	r0, r6
 8010ed8:	00c9      	lsls	r1, r1, #3
 8010eda:	4008      	ands	r0, r1
 8010edc:	4288      	cmp	r0, r1
 8010ede:	d1e0      	bne.n	8010ea2 <__ssvfscanf_r+0x119a>
 8010ee0:	4910      	ldr	r1, [pc, #64]	; (8010f24 <__ssvfscanf_r+0x121c>)
 8010ee2:	3401      	adds	r4, #1
 8010ee4:	400e      	ands	r6, r1
 8010ee6:	e785      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010ee8:	20fd      	movs	r0, #253	; 0xfd
 8010eea:	1ee1      	subs	r1, r4, #3
 8010eec:	4201      	tst	r1, r0
 8010eee:	d1d3      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010ef0:	e7c1      	b.n	8010e76 <__ssvfscanf_r+0x116e>
 8010ef2:	0531      	lsls	r1, r6, #20
 8010ef4:	d503      	bpl.n	8010efe <__ssvfscanf_r+0x11f6>
 8010ef6:	6a39      	ldr	r1, [r7, #32]
 8010ef8:	1909      	adds	r1, r1, r4
 8010efa:	2900      	cmp	r1, #0
 8010efc:	d0c4      	beq.n	8010e88 <__ssvfscanf_r+0x1180>
 8010efe:	2c02      	cmp	r4, #2
 8010f00:	d1ca      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f02:	2403      	movs	r4, #3
 8010f04:	e776      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010f06:	2c06      	cmp	r4, #6
 8010f08:	d1c6      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f0a:	2407      	movs	r4, #7
 8010f0c:	e772      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010f0e:	2c07      	cmp	r4, #7
 8010f10:	d1c2      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f12:	2408      	movs	r4, #8
 8010f14:	e76e      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010f16:	46c0      	nop			; (mov r8, r8)
 8010f18:	0800d0c9 	.word	0x0800d0c9
 8010f1c:	fffffe7f 	.word	0xfffffe7f
 8010f20:	fffffeff 	.word	0xfffffeff
 8010f24:	fffff87f 	.word	0xfffff87f
 8010f28:	0531      	lsls	r1, r6, #20
 8010f2a:	d5b5      	bpl.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f2c:	21a0      	movs	r1, #160	; 0xa0
 8010f2e:	2080      	movs	r0, #128	; 0x80
 8010f30:	00c9      	lsls	r1, r1, #3
 8010f32:	00c0      	lsls	r0, r0, #3
 8010f34:	4031      	ands	r1, r6
 8010f36:	4281      	cmp	r1, r0
 8010f38:	d004      	beq.n	8010f44 <__ssvfscanf_r+0x123c>
 8010f3a:	4206      	tst	r6, r0
 8010f3c:	d0ac      	beq.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f3e:	69f9      	ldr	r1, [r7, #28]
 8010f40:	2900      	cmp	r1, #0
 8010f42:	d0ae      	beq.n	8010ea2 <__ssvfscanf_r+0x119a>
 8010f44:	2180      	movs	r1, #128	; 0x80
 8010f46:	0089      	lsls	r1, r1, #2
 8010f48:	420e      	tst	r6, r1
 8010f4a:	d104      	bne.n	8010f56 <__ssvfscanf_r+0x124e>
 8010f4c:	69f9      	ldr	r1, [r7, #28]
 8010f4e:	6938      	ldr	r0, [r7, #16]
 8010f50:	607d      	str	r5, [r7, #4]
 8010f52:	1a09      	subs	r1, r1, r0
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	20c0      	movs	r0, #192	; 0xc0
 8010f58:	4973      	ldr	r1, [pc, #460]	; (8011128 <__ssvfscanf_r+0x1420>)
 8010f5a:	0040      	lsls	r0, r0, #1
 8010f5c:	400e      	ands	r6, r1
 8010f5e:	4306      	orrs	r6, r0
 8010f60:	e768      	b.n	8010e34 <__ssvfscanf_r+0x112c>
 8010f62:	0531      	lsls	r1, r6, #20
 8010f64:	d5e2      	bpl.n	8010f2c <__ssvfscanf_r+0x1224>
 8010f66:	e74a      	b.n	8010dfe <__ssvfscanf_r+0x10f6>
 8010f68:	6839      	ldr	r1, [r7, #0]
 8010f6a:	7809      	ldrb	r1, [r1, #0]
 8010f6c:	4291      	cmp	r1, r2
 8010f6e:	d193      	bne.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f70:	2180      	movs	r1, #128	; 0x80
 8010f72:	0089      	lsls	r1, r1, #2
 8010f74:	420e      	tst	r6, r1
 8010f76:	d08f      	beq.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f78:	496c      	ldr	r1, [pc, #432]	; (801112c <__ssvfscanf_r+0x1424>)
 8010f7a:	400e      	ands	r6, r1
 8010f7c:	69f9      	ldr	r1, [r7, #28]
 8010f7e:	6139      	str	r1, [r7, #16]
 8010f80:	e738      	b.n	8010df4 <__ssvfscanf_r+0x10ec>
 8010f82:	2103      	movs	r1, #3
 8010f84:	e76d      	b.n	8010e62 <__ssvfscanf_r+0x115a>
 8010f86:	2102      	movs	r1, #2
 8010f88:	e76b      	b.n	8010e62 <__ssvfscanf_r+0x115a>
 8010f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f8e:	f001 fdc9 	bl	8012b24 <__ssrefill_r>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d100      	bne.n	8010f98 <__ssvfscanf_r+0x1290>
 8010f96:	e723      	b.n	8010de0 <__ssvfscanf_r+0x10d8>
 8010f98:	e77e      	b.n	8010e98 <__ssvfscanf_r+0x1190>
 8010f9a:	1e63      	subs	r3, r4, #1
 8010f9c:	2b06      	cmp	r3, #6
 8010f9e:	d825      	bhi.n	8010fec <__ssvfscanf_r+0x12e4>
 8010fa0:	2c02      	cmp	r4, #2
 8010fa2:	d837      	bhi.n	8011014 <__ssvfscanf_r+0x130c>
 8010fa4:	238c      	movs	r3, #140	; 0x8c
 8010fa6:	2248      	movs	r2, #72	; 0x48
 8010fa8:	005b      	lsls	r3, r3, #1
 8010faa:	189b      	adds	r3, r3, r2
 8010fac:	19db      	adds	r3, r3, r7
 8010fae:	429d      	cmp	r5, r3
 8010fb0:	d801      	bhi.n	8010fb6 <__ssvfscanf_r+0x12ae>
 8010fb2:	f7fe ffa6 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 8010fb6:	3d01      	subs	r5, #1
 8010fb8:	7829      	ldrb	r1, [r5, #0]
 8010fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fbe:	f001 fd75 	bl	8012aac <_sungetc_r>
 8010fc2:	e7ef      	b.n	8010fa4 <__ssvfscanf_r+0x129c>
 8010fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	7819      	ldrb	r1, [r3, #0]
 8010fcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fd0:	f001 fd6c 	bl	8012aac <_sungetc_r>
 8010fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fd6:	6a3a      	ldr	r2, [r7, #32]
 8010fd8:	189b      	adds	r3, r3, r2
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	2b03      	cmp	r3, #3
 8010fde:	d8f1      	bhi.n	8010fc4 <__ssvfscanf_r+0x12bc>
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	3c03      	subs	r4, #3
 8010fe4:	b2e4      	uxtb	r4, r4
 8010fe6:	1b1b      	subs	r3, r3, r4
 8010fe8:	1b2d      	subs	r5, r5, r4
 8010fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fec:	05f3      	lsls	r3, r6, #23
 8010fee:	d52f      	bpl.n	8011050 <__ssvfscanf_r+0x1348>
 8010ff0:	0573      	lsls	r3, r6, #21
 8010ff2:	d514      	bpl.n	801101e <__ssvfscanf_r+0x1316>
 8010ff4:	238c      	movs	r3, #140	; 0x8c
 8010ff6:	2248      	movs	r2, #72	; 0x48
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	189b      	adds	r3, r3, r2
 8010ffc:	19db      	adds	r3, r3, r7
 8010ffe:	429d      	cmp	r5, r3
 8011000:	d801      	bhi.n	8011006 <__ssvfscanf_r+0x12fe>
 8011002:	f7fe ff7e 	bl	800ff02 <__ssvfscanf_r+0x1fa>
 8011006:	3d01      	subs	r5, #1
 8011008:	7829      	ldrb	r1, [r5, #0]
 801100a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801100c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801100e:	f001 fd4d 	bl	8012aac <_sungetc_r>
 8011012:	e7ef      	b.n	8010ff4 <__ssvfscanf_r+0x12ec>
 8011014:	1b63      	subs	r3, r4, r5
 8011016:	b2db      	uxtb	r3, r3
 8011018:	63fd      	str	r5, [r7, #60]	; 0x3c
 801101a:	623b      	str	r3, [r7, #32]
 801101c:	e7da      	b.n	8010fd4 <__ssvfscanf_r+0x12cc>
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	1e6c      	subs	r4, r5, #1
 8011022:	7821      	ldrb	r1, [r4, #0]
 8011024:	3b01      	subs	r3, #1
 8011026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011028:	2965      	cmp	r1, #101	; 0x65
 801102a:	d00a      	beq.n	8011042 <__ssvfscanf_r+0x133a>
 801102c:	2945      	cmp	r1, #69	; 0x45
 801102e:	d008      	beq.n	8011042 <__ssvfscanf_r+0x133a>
 8011030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011032:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011034:	f001 fd3a 	bl	8012aac <_sungetc_r>
 8011038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103a:	1eac      	subs	r4, r5, #2
 801103c:	3b02      	subs	r3, #2
 801103e:	7821      	ldrb	r1, [r4, #0]
 8011040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011042:	0025      	movs	r5, r4
 8011044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011046:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011048:	f001 fd30 	bl	8012aac <_sungetc_r>
 801104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011050:	2310      	movs	r3, #16
 8011052:	0032      	movs	r2, r6
 8011054:	401a      	ands	r2, r3
 8011056:	421e      	tst	r6, r3
 8011058:	d001      	beq.n	801105e <__ssvfscanf_r+0x1356>
 801105a:	f7fe fe71 	bl	800fd40 <__ssvfscanf_r+0x38>
 801105e:	23c0      	movs	r3, #192	; 0xc0
 8011060:	2180      	movs	r1, #128	; 0x80
 8011062:	00db      	lsls	r3, r3, #3
 8011064:	702a      	strb	r2, [r5, #0]
 8011066:	4033      	ands	r3, r6
 8011068:	00c9      	lsls	r1, r1, #3
 801106a:	428b      	cmp	r3, r1
 801106c:	d11f      	bne.n	80110ae <__ssvfscanf_r+0x13a6>
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	69fa      	ldr	r2, [r7, #28]
 8011072:	69f9      	ldr	r1, [r7, #28]
 8011074:	1a9a      	subs	r2, r3, r2
 8011076:	428b      	cmp	r3, r1
 8011078:	d125      	bne.n	80110c6 <__ssvfscanf_r+0x13be>
 801107a:	238c      	movs	r3, #140	; 0x8c
 801107c:	2148      	movs	r1, #72	; 0x48
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	185b      	adds	r3, r3, r1
 8011082:	19d9      	adds	r1, r3, r7
 8011084:	2200      	movs	r2, #0
 8011086:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011088:	f7fb fef0 	bl	800ce6c <_strtod_r>
 801108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108e:	0004      	movs	r4, r0
 8011090:	3304      	adds	r3, #4
 8011092:	000d      	movs	r5, r1
 8011094:	623b      	str	r3, [r7, #32]
 8011096:	07f3      	lsls	r3, r6, #31
 8011098:	d523      	bpl.n	80110e2 <__ssvfscanf_r+0x13da>
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	601c      	str	r4, [r3, #0]
 80110a0:	605d      	str	r5, [r3, #4]
 80110a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a4:	3301      	adds	r3, #1
 80110a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110a8:	6a3b      	ldr	r3, [r7, #32]
 80110aa:	f7fe ffa5 	bl	800fff8 <__ssvfscanf_r+0x2f0>
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d0e2      	beq.n	801107a <__ssvfscanf_r+0x1372>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80110b8:	1c59      	adds	r1, r3, #1
 80110ba:	230a      	movs	r3, #10
 80110bc:	f7fb ff72 	bl	800cfa4 <_strtol_r>
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	687d      	ldr	r5, [r7, #4]
 80110c4:	1ac2      	subs	r2, r0, r3
 80110c6:	2148      	movs	r1, #72	; 0x48
 80110c8:	4b19      	ldr	r3, [pc, #100]	; (8011130 <__ssvfscanf_r+0x1428>)
 80110ca:	185b      	adds	r3, r3, r1
 80110cc:	19db      	adds	r3, r3, r7
 80110ce:	429d      	cmp	r5, r3
 80110d0:	d302      	bcc.n	80110d8 <__ssvfscanf_r+0x13d0>
 80110d2:	4b18      	ldr	r3, [pc, #96]	; (8011134 <__ssvfscanf_r+0x142c>)
 80110d4:	185b      	adds	r3, r3, r1
 80110d6:	19dd      	adds	r5, r3, r7
 80110d8:	0028      	movs	r0, r5
 80110da:	4917      	ldr	r1, [pc, #92]	; (8011138 <__ssvfscanf_r+0x1430>)
 80110dc:	f7fc f8fc 	bl	800d2d8 <sprintf>
 80110e0:	e7cb      	b.n	801107a <__ssvfscanf_r+0x1372>
 80110e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e8:	07b6      	lsls	r6, r6, #30
 80110ea:	d4d8      	bmi.n	801109e <__ssvfscanf_r+0x1396>
 80110ec:	0002      	movs	r2, r0
 80110ee:	000b      	movs	r3, r1
 80110f0:	f7f1 f900 	bl	80022f4 <__aeabi_dcmpun>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d005      	beq.n	8011104 <__ssvfscanf_r+0x13fc>
 80110f8:	4810      	ldr	r0, [pc, #64]	; (801113c <__ssvfscanf_r+0x1434>)
 80110fa:	f7fc fabf 	bl	800d67c <nanf>
 80110fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011100:	6018      	str	r0, [r3, #0]
 8011102:	e7ce      	b.n	80110a2 <__ssvfscanf_r+0x139a>
 8011104:	0020      	movs	r0, r4
 8011106:	0029      	movs	r1, r5
 8011108:	f7f1 f99e 	bl	8002448 <__aeabi_d2f>
 801110c:	e7f7      	b.n	80110fe <__ssvfscanf_r+0x13f6>
 801110e:	00a3      	lsls	r3, r4, #2
 8011110:	18ed      	adds	r5, r5, r3
 8011112:	682b      	ldr	r3, [r5, #0]
 8011114:	3401      	adds	r4, #1
 8011116:	6818      	ldr	r0, [r3, #0]
 8011118:	f7fa fe58 	bl	800bdcc <free>
 801111c:	2200      	movs	r2, #0
 801111e:	682b      	ldr	r3, [r5, #0]
 8011120:	601a      	str	r2, [r3, #0]
 8011122:	f7fe ffc3 	bl	80100ac <__ssvfscanf_r+0x3a4>
 8011126:	46c0      	nop			; (mov r8, r8)
 8011128:	fffff07f 	.word	0xfffff07f
 801112c:	fffffd7f 	.word	0xfffffd7f
 8011130:	0000026b 	.word	0x0000026b
 8011134:	0000026a 	.word	0x0000026a
 8011138:	08015eb0 	.word	0x08015eb0
 801113c:	08015f13 	.word	0x08015f13

08011140 <_fclose_r>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	0005      	movs	r5, r0
 8011144:	1e0c      	subs	r4, r1, #0
 8011146:	d102      	bne.n	801114e <_fclose_r+0xe>
 8011148:	2600      	movs	r6, #0
 801114a:	0030      	movs	r0, r6
 801114c:	bd70      	pop	{r4, r5, r6, pc}
 801114e:	2800      	cmp	r0, #0
 8011150:	d004      	beq.n	801115c <_fclose_r+0x1c>
 8011152:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011154:	2b00      	cmp	r3, #0
 8011156:	d101      	bne.n	801115c <_fclose_r+0x1c>
 8011158:	f7fc f856 	bl	800d208 <__sinit>
 801115c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801115e:	07db      	lsls	r3, r3, #31
 8011160:	d405      	bmi.n	801116e <_fclose_r+0x2e>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	059b      	lsls	r3, r3, #22
 8011166:	d402      	bmi.n	801116e <_fclose_r+0x2e>
 8011168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116a:	f7fc fa6b 	bl	800d644 <__retarget_lock_acquire_recursive>
 801116e:	220c      	movs	r2, #12
 8011170:	5ea3      	ldrsh	r3, [r4, r2]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d109      	bne.n	801118a <_fclose_r+0x4a>
 8011176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011178:	3301      	adds	r3, #1
 801117a:	0016      	movs	r6, r2
 801117c:	401e      	ands	r6, r3
 801117e:	421a      	tst	r2, r3
 8011180:	d1e2      	bne.n	8011148 <_fclose_r+0x8>
 8011182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011184:	f7fc fa5f 	bl	800d646 <__retarget_lock_release_recursive>
 8011188:	e7df      	b.n	801114a <_fclose_r+0xa>
 801118a:	0021      	movs	r1, r4
 801118c:	0028      	movs	r0, r5
 801118e:	f000 f837 	bl	8011200 <__sflush_r>
 8011192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011194:	0006      	movs	r6, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d006      	beq.n	80111a8 <_fclose_r+0x68>
 801119a:	0028      	movs	r0, r5
 801119c:	69e1      	ldr	r1, [r4, #28]
 801119e:	4798      	blx	r3
 80111a0:	2800      	cmp	r0, #0
 80111a2:	da01      	bge.n	80111a8 <_fclose_r+0x68>
 80111a4:	2601      	movs	r6, #1
 80111a6:	4276      	negs	r6, r6
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	061b      	lsls	r3, r3, #24
 80111ac:	d503      	bpl.n	80111b6 <_fclose_r+0x76>
 80111ae:	0028      	movs	r0, r5
 80111b0:	6921      	ldr	r1, [r4, #16]
 80111b2:	f7fc facf 	bl	800d754 <_free_r>
 80111b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80111b8:	2900      	cmp	r1, #0
 80111ba:	d008      	beq.n	80111ce <_fclose_r+0x8e>
 80111bc:	0023      	movs	r3, r4
 80111be:	3340      	adds	r3, #64	; 0x40
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d002      	beq.n	80111ca <_fclose_r+0x8a>
 80111c4:	0028      	movs	r0, r5
 80111c6:	f7fc fac5 	bl	800d754 <_free_r>
 80111ca:	2300      	movs	r3, #0
 80111cc:	6323      	str	r3, [r4, #48]	; 0x30
 80111ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80111d0:	2900      	cmp	r1, #0
 80111d2:	d004      	beq.n	80111de <_fclose_r+0x9e>
 80111d4:	0028      	movs	r0, r5
 80111d6:	f7fc fabd 	bl	800d754 <_free_r>
 80111da:	2300      	movs	r3, #0
 80111dc:	6463      	str	r3, [r4, #68]	; 0x44
 80111de:	f7fc f803 	bl	800d1e8 <__sfp_lock_acquire>
 80111e2:	2300      	movs	r3, #0
 80111e4:	81a3      	strh	r3, [r4, #12]
 80111e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111e8:	07db      	lsls	r3, r3, #31
 80111ea:	d402      	bmi.n	80111f2 <_fclose_r+0xb2>
 80111ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ee:	f7fc fa2a 	bl	800d646 <__retarget_lock_release_recursive>
 80111f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111f4:	f7fc fa25 	bl	800d642 <__retarget_lock_close_recursive>
 80111f8:	f7fb fffe 	bl	800d1f8 <__sfp_lock_release>
 80111fc:	e7a5      	b.n	801114a <_fclose_r+0xa>
	...

08011200 <__sflush_r>:
 8011200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011202:	230c      	movs	r3, #12
 8011204:	5eca      	ldrsh	r2, [r1, r3]
 8011206:	000c      	movs	r4, r1
 8011208:	0005      	movs	r5, r0
 801120a:	b291      	uxth	r1, r2
 801120c:	0713      	lsls	r3, r2, #28
 801120e:	d464      	bmi.n	80112da <__sflush_r+0xda>
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	011b      	lsls	r3, r3, #4
 8011214:	4313      	orrs	r3, r2
 8011216:	6862      	ldr	r2, [r4, #4]
 8011218:	81a3      	strh	r3, [r4, #12]
 801121a:	2a00      	cmp	r2, #0
 801121c:	dc04      	bgt.n	8011228 <__sflush_r+0x28>
 801121e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011220:	2a00      	cmp	r2, #0
 8011222:	dc01      	bgt.n	8011228 <__sflush_r+0x28>
 8011224:	2000      	movs	r0, #0
 8011226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011228:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801122a:	2f00      	cmp	r7, #0
 801122c:	d0fa      	beq.n	8011224 <__sflush_r+0x24>
 801122e:	2200      	movs	r2, #0
 8011230:	2080      	movs	r0, #128	; 0x80
 8011232:	682e      	ldr	r6, [r5, #0]
 8011234:	602a      	str	r2, [r5, #0]
 8011236:	001a      	movs	r2, r3
 8011238:	0140      	lsls	r0, r0, #5
 801123a:	69e1      	ldr	r1, [r4, #28]
 801123c:	4002      	ands	r2, r0
 801123e:	4203      	tst	r3, r0
 8011240:	d038      	beq.n	80112b4 <__sflush_r+0xb4>
 8011242:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011244:	89a3      	ldrh	r3, [r4, #12]
 8011246:	075b      	lsls	r3, r3, #29
 8011248:	d506      	bpl.n	8011258 <__sflush_r+0x58>
 801124a:	6863      	ldr	r3, [r4, #4]
 801124c:	1ac0      	subs	r0, r0, r3
 801124e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <__sflush_r+0x58>
 8011254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011256:	1ac0      	subs	r0, r0, r3
 8011258:	0002      	movs	r2, r0
 801125a:	2300      	movs	r3, #0
 801125c:	0028      	movs	r0, r5
 801125e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8011260:	69e1      	ldr	r1, [r4, #28]
 8011262:	47b8      	blx	r7
 8011264:	89a2      	ldrh	r2, [r4, #12]
 8011266:	1c43      	adds	r3, r0, #1
 8011268:	d106      	bne.n	8011278 <__sflush_r+0x78>
 801126a:	6829      	ldr	r1, [r5, #0]
 801126c:	291d      	cmp	r1, #29
 801126e:	d830      	bhi.n	80112d2 <__sflush_r+0xd2>
 8011270:	4b2c      	ldr	r3, [pc, #176]	; (8011324 <__sflush_r+0x124>)
 8011272:	410b      	asrs	r3, r1
 8011274:	07db      	lsls	r3, r3, #31
 8011276:	d42c      	bmi.n	80112d2 <__sflush_r+0xd2>
 8011278:	4b2b      	ldr	r3, [pc, #172]	; (8011328 <__sflush_r+0x128>)
 801127a:	4013      	ands	r3, r2
 801127c:	2200      	movs	r2, #0
 801127e:	6062      	str	r2, [r4, #4]
 8011280:	6922      	ldr	r2, [r4, #16]
 8011282:	b21b      	sxth	r3, r3
 8011284:	81a3      	strh	r3, [r4, #12]
 8011286:	6022      	str	r2, [r4, #0]
 8011288:	04db      	lsls	r3, r3, #19
 801128a:	d505      	bpl.n	8011298 <__sflush_r+0x98>
 801128c:	1c43      	adds	r3, r0, #1
 801128e:	d102      	bne.n	8011296 <__sflush_r+0x96>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d100      	bne.n	8011298 <__sflush_r+0x98>
 8011296:	6520      	str	r0, [r4, #80]	; 0x50
 8011298:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801129a:	602e      	str	r6, [r5, #0]
 801129c:	2900      	cmp	r1, #0
 801129e:	d0c1      	beq.n	8011224 <__sflush_r+0x24>
 80112a0:	0023      	movs	r3, r4
 80112a2:	3340      	adds	r3, #64	; 0x40
 80112a4:	4299      	cmp	r1, r3
 80112a6:	d002      	beq.n	80112ae <__sflush_r+0xae>
 80112a8:	0028      	movs	r0, r5
 80112aa:	f7fc fa53 	bl	800d754 <_free_r>
 80112ae:	2000      	movs	r0, #0
 80112b0:	6320      	str	r0, [r4, #48]	; 0x30
 80112b2:	e7b8      	b.n	8011226 <__sflush_r+0x26>
 80112b4:	2301      	movs	r3, #1
 80112b6:	0028      	movs	r0, r5
 80112b8:	47b8      	blx	r7
 80112ba:	1c43      	adds	r3, r0, #1
 80112bc:	d1c2      	bne.n	8011244 <__sflush_r+0x44>
 80112be:	682b      	ldr	r3, [r5, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d0bf      	beq.n	8011244 <__sflush_r+0x44>
 80112c4:	2b1d      	cmp	r3, #29
 80112c6:	d001      	beq.n	80112cc <__sflush_r+0xcc>
 80112c8:	2b16      	cmp	r3, #22
 80112ca:	d101      	bne.n	80112d0 <__sflush_r+0xd0>
 80112cc:	602e      	str	r6, [r5, #0]
 80112ce:	e7a9      	b.n	8011224 <__sflush_r+0x24>
 80112d0:	89a2      	ldrh	r2, [r4, #12]
 80112d2:	2340      	movs	r3, #64	; 0x40
 80112d4:	4313      	orrs	r3, r2
 80112d6:	81a3      	strh	r3, [r4, #12]
 80112d8:	e7a5      	b.n	8011226 <__sflush_r+0x26>
 80112da:	6926      	ldr	r6, [r4, #16]
 80112dc:	2e00      	cmp	r6, #0
 80112de:	d0a1      	beq.n	8011224 <__sflush_r+0x24>
 80112e0:	6827      	ldr	r7, [r4, #0]
 80112e2:	6026      	str	r6, [r4, #0]
 80112e4:	1bbb      	subs	r3, r7, r6
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	2300      	movs	r3, #0
 80112ea:	0789      	lsls	r1, r1, #30
 80112ec:	d100      	bne.n	80112f0 <__sflush_r+0xf0>
 80112ee:	6963      	ldr	r3, [r4, #20]
 80112f0:	60a3      	str	r3, [r4, #8]
 80112f2:	9b01      	ldr	r3, [sp, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	dc00      	bgt.n	80112fa <__sflush_r+0xfa>
 80112f8:	e794      	b.n	8011224 <__sflush_r+0x24>
 80112fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112fc:	0032      	movs	r2, r6
 80112fe:	001f      	movs	r7, r3
 8011300:	0028      	movs	r0, r5
 8011302:	9b01      	ldr	r3, [sp, #4]
 8011304:	69e1      	ldr	r1, [r4, #28]
 8011306:	47b8      	blx	r7
 8011308:	2800      	cmp	r0, #0
 801130a:	dc06      	bgt.n	801131a <__sflush_r+0x11a>
 801130c:	2340      	movs	r3, #64	; 0x40
 801130e:	2001      	movs	r0, #1
 8011310:	89a2      	ldrh	r2, [r4, #12]
 8011312:	4240      	negs	r0, r0
 8011314:	4313      	orrs	r3, r2
 8011316:	81a3      	strh	r3, [r4, #12]
 8011318:	e785      	b.n	8011226 <__sflush_r+0x26>
 801131a:	9b01      	ldr	r3, [sp, #4]
 801131c:	1836      	adds	r6, r6, r0
 801131e:	1a1b      	subs	r3, r3, r0
 8011320:	9301      	str	r3, [sp, #4]
 8011322:	e7e6      	b.n	80112f2 <__sflush_r+0xf2>
 8011324:	dfbffffe 	.word	0xdfbffffe
 8011328:	fffff7ff 	.word	0xfffff7ff

0801132c <_fflush_r>:
 801132c:	b570      	push	{r4, r5, r6, lr}
 801132e:	0005      	movs	r5, r0
 8011330:	000c      	movs	r4, r1
 8011332:	2800      	cmp	r0, #0
 8011334:	d004      	beq.n	8011340 <_fflush_r+0x14>
 8011336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011338:	2b00      	cmp	r3, #0
 801133a:	d101      	bne.n	8011340 <_fflush_r+0x14>
 801133c:	f7fb ff64 	bl	800d208 <__sinit>
 8011340:	220c      	movs	r2, #12
 8011342:	5ea3      	ldrsh	r3, [r4, r2]
 8011344:	1e1e      	subs	r6, r3, #0
 8011346:	d015      	beq.n	8011374 <_fflush_r+0x48>
 8011348:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801134a:	07d2      	lsls	r2, r2, #31
 801134c:	d404      	bmi.n	8011358 <_fflush_r+0x2c>
 801134e:	059b      	lsls	r3, r3, #22
 8011350:	d402      	bmi.n	8011358 <_fflush_r+0x2c>
 8011352:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011354:	f7fc f976 	bl	800d644 <__retarget_lock_acquire_recursive>
 8011358:	0021      	movs	r1, r4
 801135a:	0028      	movs	r0, r5
 801135c:	f7ff ff50 	bl	8011200 <__sflush_r>
 8011360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011362:	0006      	movs	r6, r0
 8011364:	07db      	lsls	r3, r3, #31
 8011366:	d405      	bmi.n	8011374 <_fflush_r+0x48>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	059b      	lsls	r3, r3, #22
 801136c:	d402      	bmi.n	8011374 <_fflush_r+0x48>
 801136e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011370:	f7fc f969 	bl	800d646 <__retarget_lock_release_recursive>
 8011374:	0030      	movs	r0, r6
 8011376:	bd70      	pop	{r4, r5, r6, pc}

08011378 <__sccl>:
 8011378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801137a:	780b      	ldrb	r3, [r1, #0]
 801137c:	0004      	movs	r4, r0
 801137e:	2b5e      	cmp	r3, #94	; 0x5e
 8011380:	d019      	beq.n	80113b6 <__sccl+0x3e>
 8011382:	2200      	movs	r2, #0
 8011384:	1c4d      	adds	r5, r1, #1
 8011386:	0021      	movs	r1, r4
 8011388:	1c60      	adds	r0, r4, #1
 801138a:	30ff      	adds	r0, #255	; 0xff
 801138c:	700a      	strb	r2, [r1, #0]
 801138e:	3101      	adds	r1, #1
 8011390:	4281      	cmp	r1, r0
 8011392:	d1fb      	bne.n	801138c <__sccl+0x14>
 8011394:	1e68      	subs	r0, r5, #1
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00c      	beq.n	80113b4 <__sccl+0x3c>
 801139a:	2101      	movs	r1, #1
 801139c:	262d      	movs	r6, #45	; 0x2d
 801139e:	404a      	eors	r2, r1
 80113a0:	0028      	movs	r0, r5
 80113a2:	54e2      	strb	r2, [r4, r3]
 80113a4:	7801      	ldrb	r1, [r0, #0]
 80113a6:	1c45      	adds	r5, r0, #1
 80113a8:	292d      	cmp	r1, #45	; 0x2d
 80113aa:	d00c      	beq.n	80113c6 <__sccl+0x4e>
 80113ac:	295d      	cmp	r1, #93	; 0x5d
 80113ae:	d01d      	beq.n	80113ec <__sccl+0x74>
 80113b0:	2900      	cmp	r1, #0
 80113b2:	d104      	bne.n	80113be <__sccl+0x46>
 80113b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b6:	2201      	movs	r2, #1
 80113b8:	784b      	ldrb	r3, [r1, #1]
 80113ba:	1c8d      	adds	r5, r1, #2
 80113bc:	e7e3      	b.n	8011386 <__sccl+0xe>
 80113be:	000b      	movs	r3, r1
 80113c0:	e7ee      	b.n	80113a0 <__sccl+0x28>
 80113c2:	0033      	movs	r3, r6
 80113c4:	e7ec      	b.n	80113a0 <__sccl+0x28>
 80113c6:	7841      	ldrb	r1, [r0, #1]
 80113c8:	295d      	cmp	r1, #93	; 0x5d
 80113ca:	d0fa      	beq.n	80113c2 <__sccl+0x4a>
 80113cc:	428b      	cmp	r3, r1
 80113ce:	dcf8      	bgt.n	80113c2 <__sccl+0x4a>
 80113d0:	001d      	movs	r5, r3
 80113d2:	3002      	adds	r0, #2
 80113d4:	3501      	adds	r5, #1
 80113d6:	5562      	strb	r2, [r4, r5]
 80113d8:	42a9      	cmp	r1, r5
 80113da:	dcfb      	bgt.n	80113d4 <__sccl+0x5c>
 80113dc:	2500      	movs	r5, #0
 80113de:	1c5f      	adds	r7, r3, #1
 80113e0:	428b      	cmp	r3, r1
 80113e2:	da01      	bge.n	80113e8 <__sccl+0x70>
 80113e4:	1acd      	subs	r5, r1, r3
 80113e6:	3d01      	subs	r5, #1
 80113e8:	197b      	adds	r3, r7, r5
 80113ea:	e7db      	b.n	80113a4 <__sccl+0x2c>
 80113ec:	0028      	movs	r0, r5
 80113ee:	e7e1      	b.n	80113b4 <__sccl+0x3c>

080113f0 <_localeconv_r>:
 80113f0:	4800      	ldr	r0, [pc, #0]	; (80113f4 <_localeconv_r+0x4>)
 80113f2:	4770      	bx	lr
 80113f4:	20000534 	.word	0x20000534

080113f8 <__libc_fini_array>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	4c07      	ldr	r4, [pc, #28]	; (8011418 <__libc_fini_array+0x20>)
 80113fc:	4d07      	ldr	r5, [pc, #28]	; (801141c <__libc_fini_array+0x24>)
 80113fe:	1b64      	subs	r4, r4, r5
 8011400:	10a4      	asrs	r4, r4, #2
 8011402:	2c00      	cmp	r4, #0
 8011404:	d102      	bne.n	801140c <__libc_fini_array+0x14>
 8011406:	f002 fd47 	bl	8013e98 <_fini>
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	3c01      	subs	r4, #1
 801140e:	00a3      	lsls	r3, r4, #2
 8011410:	58eb      	ldr	r3, [r5, r3]
 8011412:	4798      	blx	r3
 8011414:	e7f5      	b.n	8011402 <__libc_fini_array+0xa>
 8011416:	46c0      	nop			; (mov r8, r8)
 8011418:	08015fb0 	.word	0x08015fb0
 801141c:	08015fac 	.word	0x08015fac

08011420 <memchr>:
 8011420:	b2c9      	uxtb	r1, r1
 8011422:	1882      	adds	r2, r0, r2
 8011424:	4290      	cmp	r0, r2
 8011426:	d101      	bne.n	801142c <memchr+0xc>
 8011428:	2000      	movs	r0, #0
 801142a:	4770      	bx	lr
 801142c:	7803      	ldrb	r3, [r0, #0]
 801142e:	428b      	cmp	r3, r1
 8011430:	d0fb      	beq.n	801142a <memchr+0xa>
 8011432:	3001      	adds	r0, #1
 8011434:	e7f6      	b.n	8011424 <memchr+0x4>
	...

08011438 <frexp>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	0014      	movs	r4, r2
 801143c:	2500      	movs	r5, #0
 801143e:	6025      	str	r5, [r4, #0]
 8011440:	4d10      	ldr	r5, [pc, #64]	; (8011484 <frexp+0x4c>)
 8011442:	004b      	lsls	r3, r1, #1
 8011444:	000a      	movs	r2, r1
 8011446:	085b      	lsrs	r3, r3, #1
 8011448:	42ab      	cmp	r3, r5
 801144a:	dc1a      	bgt.n	8011482 <frexp+0x4a>
 801144c:	001d      	movs	r5, r3
 801144e:	4305      	orrs	r5, r0
 8011450:	d017      	beq.n	8011482 <frexp+0x4a>
 8011452:	4d0d      	ldr	r5, [pc, #52]	; (8011488 <frexp+0x50>)
 8011454:	4229      	tst	r1, r5
 8011456:	d109      	bne.n	801146c <frexp+0x34>
 8011458:	2200      	movs	r2, #0
 801145a:	4b0c      	ldr	r3, [pc, #48]	; (801148c <frexp+0x54>)
 801145c:	f7f0 f906 	bl	800166c <__aeabi_dmul>
 8011460:	2536      	movs	r5, #54	; 0x36
 8011462:	000a      	movs	r2, r1
 8011464:	004b      	lsls	r3, r1, #1
 8011466:	426d      	negs	r5, r5
 8011468:	085b      	lsrs	r3, r3, #1
 801146a:	6025      	str	r5, [r4, #0]
 801146c:	4d08      	ldr	r5, [pc, #32]	; (8011490 <frexp+0x58>)
 801146e:	151b      	asrs	r3, r3, #20
 8011470:	195b      	adds	r3, r3, r5
 8011472:	6825      	ldr	r5, [r4, #0]
 8011474:	18eb      	adds	r3, r5, r3
 8011476:	6023      	str	r3, [r4, #0]
 8011478:	4b06      	ldr	r3, [pc, #24]	; (8011494 <frexp+0x5c>)
 801147a:	401a      	ands	r2, r3
 801147c:	4b06      	ldr	r3, [pc, #24]	; (8011498 <frexp+0x60>)
 801147e:	4313      	orrs	r3, r2
 8011480:	0019      	movs	r1, r3
 8011482:	bd70      	pop	{r4, r5, r6, pc}
 8011484:	7fefffff 	.word	0x7fefffff
 8011488:	7ff00000 	.word	0x7ff00000
 801148c:	43500000 	.word	0x43500000
 8011490:	fffffc02 	.word	0xfffffc02
 8011494:	800fffff 	.word	0x800fffff
 8011498:	3fe00000 	.word	0x3fe00000

0801149c <__register_exitproc>:
 801149c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801149e:	4f1c      	ldr	r7, [pc, #112]	; (8011510 <__register_exitproc+0x74>)
 80114a0:	0004      	movs	r4, r0
 80114a2:	6838      	ldr	r0, [r7, #0]
 80114a4:	0016      	movs	r6, r2
 80114a6:	9301      	str	r3, [sp, #4]
 80114a8:	9100      	str	r1, [sp, #0]
 80114aa:	f7fc f8cb 	bl	800d644 <__retarget_lock_acquire_recursive>
 80114ae:	4a19      	ldr	r2, [pc, #100]	; (8011514 <__register_exitproc+0x78>)
 80114b0:	6813      	ldr	r3, [r2, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d101      	bne.n	80114ba <__register_exitproc+0x1e>
 80114b6:	4b18      	ldr	r3, [pc, #96]	; (8011518 <__register_exitproc+0x7c>)
 80114b8:	6013      	str	r3, [r2, #0]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	6838      	ldr	r0, [r7, #0]
 80114be:	2a1f      	cmp	r2, #31
 80114c0:	dd04      	ble.n	80114cc <__register_exitproc+0x30>
 80114c2:	f7fc f8c0 	bl	800d646 <__retarget_lock_release_recursive>
 80114c6:	2001      	movs	r0, #1
 80114c8:	4240      	negs	r0, r0
 80114ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114cc:	2c00      	cmp	r4, #0
 80114ce:	d014      	beq.n	80114fa <__register_exitproc+0x5e>
 80114d0:	0091      	lsls	r1, r2, #2
 80114d2:	1859      	adds	r1, r3, r1
 80114d4:	000f      	movs	r7, r1
 80114d6:	3788      	adds	r7, #136	; 0x88
 80114d8:	603e      	str	r6, [r7, #0]
 80114da:	2701      	movs	r7, #1
 80114dc:	001e      	movs	r6, r3
 80114de:	4097      	lsls	r7, r2
 80114e0:	3685      	adds	r6, #133	; 0x85
 80114e2:	36ff      	adds	r6, #255	; 0xff
 80114e4:	6875      	ldr	r5, [r6, #4]
 80114e6:	31fc      	adds	r1, #252	; 0xfc
 80114e8:	433d      	orrs	r5, r7
 80114ea:	6075      	str	r5, [r6, #4]
 80114ec:	9d01      	ldr	r5, [sp, #4]
 80114ee:	60cd      	str	r5, [r1, #12]
 80114f0:	2c02      	cmp	r4, #2
 80114f2:	d102      	bne.n	80114fa <__register_exitproc+0x5e>
 80114f4:	68b1      	ldr	r1, [r6, #8]
 80114f6:	4339      	orrs	r1, r7
 80114f8:	60b1      	str	r1, [r6, #8]
 80114fa:	1c51      	adds	r1, r2, #1
 80114fc:	6059      	str	r1, [r3, #4]
 80114fe:	3202      	adds	r2, #2
 8011500:	9900      	ldr	r1, [sp, #0]
 8011502:	0092      	lsls	r2, r2, #2
 8011504:	50d1      	str	r1, [r2, r3]
 8011506:	f7fc f89e 	bl	800d646 <__retarget_lock_release_recursive>
 801150a:	2000      	movs	r0, #0
 801150c:	e7dd      	b.n	80114ca <__register_exitproc+0x2e>
 801150e:	46c0      	nop			; (mov r8, r8)
 8011510:	200006d4 	.word	0x200006d4
 8011514:	20000dc0 	.word	0x20000dc0
 8011518:	20000dc4 	.word	0x20000dc4

0801151c <__assert_func>:
 801151c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801151e:	0014      	movs	r4, r2
 8011520:	001a      	movs	r2, r3
 8011522:	4b09      	ldr	r3, [pc, #36]	; (8011548 <__assert_func+0x2c>)
 8011524:	0005      	movs	r5, r0
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	000e      	movs	r6, r1
 801152a:	68d8      	ldr	r0, [r3, #12]
 801152c:	4b07      	ldr	r3, [pc, #28]	; (801154c <__assert_func+0x30>)
 801152e:	2c00      	cmp	r4, #0
 8011530:	d101      	bne.n	8011536 <__assert_func+0x1a>
 8011532:	4b07      	ldr	r3, [pc, #28]	; (8011550 <__assert_func+0x34>)
 8011534:	001c      	movs	r4, r3
 8011536:	4907      	ldr	r1, [pc, #28]	; (8011554 <__assert_func+0x38>)
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	9402      	str	r4, [sp, #8]
 801153c:	002b      	movs	r3, r5
 801153e:	9600      	str	r6, [sp, #0]
 8011540:	f001 fa20 	bl	8012984 <fiprintf>
 8011544:	f002 fb08 	bl	8013b58 <abort>
 8011548:	200006d0 	.word	0x200006d0
 801154c:	08015ed8 	.word	0x08015ed8
 8011550:	08015f13 	.word	0x08015f13
 8011554:	08015ee5 	.word	0x08015ee5

08011558 <_calloc_r>:
 8011558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155a:	2400      	movs	r4, #0
 801155c:	0c0b      	lsrs	r3, r1, #16
 801155e:	0c16      	lsrs	r6, r2, #16
 8011560:	42a3      	cmp	r3, r4
 8011562:	d133      	bne.n	80115cc <_calloc_r+0x74>
 8011564:	42a6      	cmp	r6, r4
 8011566:	d121      	bne.n	80115ac <_calloc_r+0x54>
 8011568:	b28b      	uxth	r3, r1
 801156a:	b291      	uxth	r1, r2
 801156c:	4359      	muls	r1, r3
 801156e:	f7fa fc37 	bl	800bde0 <_malloc_r>
 8011572:	1e05      	subs	r5, r0, #0
 8011574:	d033      	beq.n	80115de <_calloc_r+0x86>
 8011576:	0003      	movs	r3, r0
 8011578:	3b08      	subs	r3, #8
 801157a:	685a      	ldr	r2, [r3, #4]
 801157c:	2303      	movs	r3, #3
 801157e:	439a      	bics	r2, r3
 8011580:	3a04      	subs	r2, #4
 8011582:	2a24      	cmp	r2, #36	; 0x24
 8011584:	d832      	bhi.n	80115ec <_calloc_r+0x94>
 8011586:	0003      	movs	r3, r0
 8011588:	2a13      	cmp	r2, #19
 801158a:	d90a      	bls.n	80115a2 <_calloc_r+0x4a>
 801158c:	6004      	str	r4, [r0, #0]
 801158e:	6044      	str	r4, [r0, #4]
 8011590:	3308      	adds	r3, #8
 8011592:	2a1b      	cmp	r2, #27
 8011594:	d905      	bls.n	80115a2 <_calloc_r+0x4a>
 8011596:	6084      	str	r4, [r0, #8]
 8011598:	60c4      	str	r4, [r0, #12]
 801159a:	2a24      	cmp	r2, #36	; 0x24
 801159c:	d021      	beq.n	80115e2 <_calloc_r+0x8a>
 801159e:	0003      	movs	r3, r0
 80115a0:	3310      	adds	r3, #16
 80115a2:	2200      	movs	r2, #0
 80115a4:	601a      	str	r2, [r3, #0]
 80115a6:	605a      	str	r2, [r3, #4]
 80115a8:	609a      	str	r2, [r3, #8]
 80115aa:	e018      	b.n	80115de <_calloc_r+0x86>
 80115ac:	1c33      	adds	r3, r6, #0
 80115ae:	1c0d      	adds	r5, r1, #0
 80115b0:	b289      	uxth	r1, r1
 80115b2:	b292      	uxth	r2, r2
 80115b4:	434a      	muls	r2, r1
 80115b6:	b2ad      	uxth	r5, r5
 80115b8:	b299      	uxth	r1, r3
 80115ba:	4369      	muls	r1, r5
 80115bc:	0c13      	lsrs	r3, r2, #16
 80115be:	18c9      	adds	r1, r1, r3
 80115c0:	0c0b      	lsrs	r3, r1, #16
 80115c2:	d107      	bne.n	80115d4 <_calloc_r+0x7c>
 80115c4:	0409      	lsls	r1, r1, #16
 80115c6:	b292      	uxth	r2, r2
 80115c8:	4311      	orrs	r1, r2
 80115ca:	e7d0      	b.n	801156e <_calloc_r+0x16>
 80115cc:	2e00      	cmp	r6, #0
 80115ce:	d101      	bne.n	80115d4 <_calloc_r+0x7c>
 80115d0:	1c15      	adds	r5, r2, #0
 80115d2:	e7ed      	b.n	80115b0 <_calloc_r+0x58>
 80115d4:	f7fc f80a 	bl	800d5ec <__errno>
 80115d8:	230c      	movs	r3, #12
 80115da:	2500      	movs	r5, #0
 80115dc:	6003      	str	r3, [r0, #0]
 80115de:	0028      	movs	r0, r5
 80115e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115e2:	0003      	movs	r3, r0
 80115e4:	6104      	str	r4, [r0, #16]
 80115e6:	3318      	adds	r3, #24
 80115e8:	6144      	str	r4, [r0, #20]
 80115ea:	e7da      	b.n	80115a2 <_calloc_r+0x4a>
 80115ec:	2100      	movs	r1, #0
 80115ee:	f7fb ff09 	bl	800d404 <memset>
 80115f2:	e7f4      	b.n	80115de <_calloc_r+0x86>

080115f4 <quorem>:
 80115f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115f6:	6902      	ldr	r2, [r0, #16]
 80115f8:	690b      	ldr	r3, [r1, #16]
 80115fa:	b089      	sub	sp, #36	; 0x24
 80115fc:	0007      	movs	r7, r0
 80115fe:	9104      	str	r1, [sp, #16]
 8011600:	2000      	movs	r0, #0
 8011602:	429a      	cmp	r2, r3
 8011604:	db69      	blt.n	80116da <quorem+0xe6>
 8011606:	3b01      	subs	r3, #1
 8011608:	009c      	lsls	r4, r3, #2
 801160a:	9301      	str	r3, [sp, #4]
 801160c:	000b      	movs	r3, r1
 801160e:	3314      	adds	r3, #20
 8011610:	9306      	str	r3, [sp, #24]
 8011612:	191b      	adds	r3, r3, r4
 8011614:	9305      	str	r3, [sp, #20]
 8011616:	003b      	movs	r3, r7
 8011618:	3314      	adds	r3, #20
 801161a:	9303      	str	r3, [sp, #12]
 801161c:	191c      	adds	r4, r3, r4
 801161e:	9b05      	ldr	r3, [sp, #20]
 8011620:	6826      	ldr	r6, [r4, #0]
 8011622:	681d      	ldr	r5, [r3, #0]
 8011624:	0030      	movs	r0, r6
 8011626:	3501      	adds	r5, #1
 8011628:	0029      	movs	r1, r5
 801162a:	f7ee fd87 	bl	800013c <__udivsi3>
 801162e:	9002      	str	r0, [sp, #8]
 8011630:	42ae      	cmp	r6, r5
 8011632:	d329      	bcc.n	8011688 <quorem+0x94>
 8011634:	9b06      	ldr	r3, [sp, #24]
 8011636:	2600      	movs	r6, #0
 8011638:	469c      	mov	ip, r3
 801163a:	9d03      	ldr	r5, [sp, #12]
 801163c:	9606      	str	r6, [sp, #24]
 801163e:	4662      	mov	r2, ip
 8011640:	ca08      	ldmia	r2!, {r3}
 8011642:	6828      	ldr	r0, [r5, #0]
 8011644:	4694      	mov	ip, r2
 8011646:	9a02      	ldr	r2, [sp, #8]
 8011648:	b299      	uxth	r1, r3
 801164a:	4351      	muls	r1, r2
 801164c:	0c1b      	lsrs	r3, r3, #16
 801164e:	4353      	muls	r3, r2
 8011650:	1989      	adds	r1, r1, r6
 8011652:	0c0a      	lsrs	r2, r1, #16
 8011654:	189b      	adds	r3, r3, r2
 8011656:	9307      	str	r3, [sp, #28]
 8011658:	0c1e      	lsrs	r6, r3, #16
 801165a:	9b06      	ldr	r3, [sp, #24]
 801165c:	b282      	uxth	r2, r0
 801165e:	18d2      	adds	r2, r2, r3
 8011660:	466b      	mov	r3, sp
 8011662:	b289      	uxth	r1, r1
 8011664:	8b9b      	ldrh	r3, [r3, #28]
 8011666:	1a52      	subs	r2, r2, r1
 8011668:	0c01      	lsrs	r1, r0, #16
 801166a:	1ac9      	subs	r1, r1, r3
 801166c:	1413      	asrs	r3, r2, #16
 801166e:	18cb      	adds	r3, r1, r3
 8011670:	1419      	asrs	r1, r3, #16
 8011672:	b292      	uxth	r2, r2
 8011674:	041b      	lsls	r3, r3, #16
 8011676:	4313      	orrs	r3, r2
 8011678:	c508      	stmia	r5!, {r3}
 801167a:	9b05      	ldr	r3, [sp, #20]
 801167c:	9106      	str	r1, [sp, #24]
 801167e:	4563      	cmp	r3, ip
 8011680:	d2dd      	bcs.n	801163e <quorem+0x4a>
 8011682:	6823      	ldr	r3, [r4, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d030      	beq.n	80116ea <quorem+0xf6>
 8011688:	0038      	movs	r0, r7
 801168a:	9904      	ldr	r1, [sp, #16]
 801168c:	f7fc ff04 	bl	800e498 <__mcmp>
 8011690:	2800      	cmp	r0, #0
 8011692:	db21      	blt.n	80116d8 <quorem+0xe4>
 8011694:	0038      	movs	r0, r7
 8011696:	2600      	movs	r6, #0
 8011698:	9b02      	ldr	r3, [sp, #8]
 801169a:	9c04      	ldr	r4, [sp, #16]
 801169c:	3301      	adds	r3, #1
 801169e:	9302      	str	r3, [sp, #8]
 80116a0:	3014      	adds	r0, #20
 80116a2:	3414      	adds	r4, #20
 80116a4:	6803      	ldr	r3, [r0, #0]
 80116a6:	cc02      	ldmia	r4!, {r1}
 80116a8:	b29d      	uxth	r5, r3
 80116aa:	19ad      	adds	r5, r5, r6
 80116ac:	b28a      	uxth	r2, r1
 80116ae:	1aaa      	subs	r2, r5, r2
 80116b0:	0c09      	lsrs	r1, r1, #16
 80116b2:	0c1b      	lsrs	r3, r3, #16
 80116b4:	1a5b      	subs	r3, r3, r1
 80116b6:	1411      	asrs	r1, r2, #16
 80116b8:	185b      	adds	r3, r3, r1
 80116ba:	141e      	asrs	r6, r3, #16
 80116bc:	b292      	uxth	r2, r2
 80116be:	041b      	lsls	r3, r3, #16
 80116c0:	4313      	orrs	r3, r2
 80116c2:	c008      	stmia	r0!, {r3}
 80116c4:	9b05      	ldr	r3, [sp, #20]
 80116c6:	42a3      	cmp	r3, r4
 80116c8:	d2ec      	bcs.n	80116a4 <quorem+0xb0>
 80116ca:	9b01      	ldr	r3, [sp, #4]
 80116cc:	9a03      	ldr	r2, [sp, #12]
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	18d3      	adds	r3, r2, r3
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	d015      	beq.n	8011704 <quorem+0x110>
 80116d8:	9802      	ldr	r0, [sp, #8]
 80116da:	b009      	add	sp, #36	; 0x24
 80116dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116de:	6823      	ldr	r3, [r4, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d106      	bne.n	80116f2 <quorem+0xfe>
 80116e4:	9b01      	ldr	r3, [sp, #4]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	9301      	str	r3, [sp, #4]
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	3c04      	subs	r4, #4
 80116ee:	42a3      	cmp	r3, r4
 80116f0:	d3f5      	bcc.n	80116de <quorem+0xea>
 80116f2:	9b01      	ldr	r3, [sp, #4]
 80116f4:	613b      	str	r3, [r7, #16]
 80116f6:	e7c7      	b.n	8011688 <quorem+0x94>
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	2a00      	cmp	r2, #0
 80116fc:	d106      	bne.n	801170c <quorem+0x118>
 80116fe:	9a01      	ldr	r2, [sp, #4]
 8011700:	3a01      	subs	r2, #1
 8011702:	9201      	str	r2, [sp, #4]
 8011704:	9a03      	ldr	r2, [sp, #12]
 8011706:	3b04      	subs	r3, #4
 8011708:	429a      	cmp	r2, r3
 801170a:	d3f5      	bcc.n	80116f8 <quorem+0x104>
 801170c:	9b01      	ldr	r3, [sp, #4]
 801170e:	613b      	str	r3, [r7, #16]
 8011710:	e7e2      	b.n	80116d8 <quorem+0xe4>
	...

08011714 <_dtoa_r>:
 8011714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011716:	0014      	movs	r4, r2
 8011718:	001d      	movs	r5, r3
 801171a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801171c:	b09d      	sub	sp, #116	; 0x74
 801171e:	9408      	str	r4, [sp, #32]
 8011720:	9509      	str	r5, [sp, #36]	; 0x24
 8011722:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8011724:	9004      	str	r0, [sp, #16]
 8011726:	2900      	cmp	r1, #0
 8011728:	d009      	beq.n	801173e <_dtoa_r+0x2a>
 801172a:	2301      	movs	r3, #1
 801172c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801172e:	4093      	lsls	r3, r2
 8011730:	604a      	str	r2, [r1, #4]
 8011732:	608b      	str	r3, [r1, #8]
 8011734:	f7fc fc56 	bl	800dfe4 <_Bfree>
 8011738:	2300      	movs	r3, #0
 801173a:	9a04      	ldr	r2, [sp, #16]
 801173c:	6393      	str	r3, [r2, #56]	; 0x38
 801173e:	2d00      	cmp	r5, #0
 8011740:	da1e      	bge.n	8011780 <_dtoa_r+0x6c>
 8011742:	2301      	movs	r3, #1
 8011744:	6033      	str	r3, [r6, #0]
 8011746:	006b      	lsls	r3, r5, #1
 8011748:	085b      	lsrs	r3, r3, #1
 801174a:	9309      	str	r3, [sp, #36]	; 0x24
 801174c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801174e:	4bb5      	ldr	r3, [pc, #724]	; (8011a24 <_dtoa_r+0x310>)
 8011750:	4ab4      	ldr	r2, [pc, #720]	; (8011a24 <_dtoa_r+0x310>)
 8011752:	403b      	ands	r3, r7
 8011754:	4293      	cmp	r3, r2
 8011756:	d116      	bne.n	8011786 <_dtoa_r+0x72>
 8011758:	4bb3      	ldr	r3, [pc, #716]	; (8011a28 <_dtoa_r+0x314>)
 801175a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	033b      	lsls	r3, r7, #12
 8011760:	0b1b      	lsrs	r3, r3, #12
 8011762:	4323      	orrs	r3, r4
 8011764:	d101      	bne.n	801176a <_dtoa_r+0x56>
 8011766:	f000 fdb2 	bl	80122ce <_dtoa_r+0xbba>
 801176a:	4bb0      	ldr	r3, [pc, #704]	; (8011a2c <_dtoa_r+0x318>)
 801176c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801176e:	9306      	str	r3, [sp, #24]
 8011770:	2a00      	cmp	r2, #0
 8011772:	d002      	beq.n	801177a <_dtoa_r+0x66>
 8011774:	4bae      	ldr	r3, [pc, #696]	; (8011a30 <_dtoa_r+0x31c>)
 8011776:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011778:	6013      	str	r3, [r2, #0]
 801177a:	9806      	ldr	r0, [sp, #24]
 801177c:	b01d      	add	sp, #116	; 0x74
 801177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011780:	2300      	movs	r3, #0
 8011782:	6033      	str	r3, [r6, #0]
 8011784:	e7e2      	b.n	801174c <_dtoa_r+0x38>
 8011786:	9a08      	ldr	r2, [sp, #32]
 8011788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801178a:	9210      	str	r2, [sp, #64]	; 0x40
 801178c:	9311      	str	r3, [sp, #68]	; 0x44
 801178e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011790:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011792:	2200      	movs	r2, #0
 8011794:	2300      	movs	r3, #0
 8011796:	f7ee fe57 	bl	8000448 <__aeabi_dcmpeq>
 801179a:	1e06      	subs	r6, r0, #0
 801179c:	d009      	beq.n	80117b2 <_dtoa_r+0x9e>
 801179e:	2301      	movs	r3, #1
 80117a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80117a2:	6013      	str	r3, [r2, #0]
 80117a4:	4ba3      	ldr	r3, [pc, #652]	; (8011a34 <_dtoa_r+0x320>)
 80117a6:	9306      	str	r3, [sp, #24]
 80117a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d0e5      	beq.n	801177a <_dtoa_r+0x66>
 80117ae:	4ba2      	ldr	r3, [pc, #648]	; (8011a38 <_dtoa_r+0x324>)
 80117b0:	e7e1      	b.n	8011776 <_dtoa_r+0x62>
 80117b2:	ab1a      	add	r3, sp, #104	; 0x68
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	9804      	ldr	r0, [sp, #16]
 80117bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80117be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117c0:	f7fc ff86 	bl	800e6d0 <__d2b>
 80117c4:	007a      	lsls	r2, r7, #1
 80117c6:	9005      	str	r0, [sp, #20]
 80117c8:	0d52      	lsrs	r2, r2, #21
 80117ca:	d100      	bne.n	80117ce <_dtoa_r+0xba>
 80117cc:	e07b      	b.n	80118c6 <_dtoa_r+0x1b2>
 80117ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117d0:	9617      	str	r6, [sp, #92]	; 0x5c
 80117d2:	0319      	lsls	r1, r3, #12
 80117d4:	4b99      	ldr	r3, [pc, #612]	; (8011a3c <_dtoa_r+0x328>)
 80117d6:	0b09      	lsrs	r1, r1, #12
 80117d8:	430b      	orrs	r3, r1
 80117da:	4999      	ldr	r1, [pc, #612]	; (8011a40 <_dtoa_r+0x32c>)
 80117dc:	1857      	adds	r7, r2, r1
 80117de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80117e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80117e2:	0019      	movs	r1, r3
 80117e4:	2200      	movs	r2, #0
 80117e6:	4b97      	ldr	r3, [pc, #604]	; (8011a44 <_dtoa_r+0x330>)
 80117e8:	f7f0 fa02 	bl	8001bf0 <__aeabi_dsub>
 80117ec:	4a96      	ldr	r2, [pc, #600]	; (8011a48 <_dtoa_r+0x334>)
 80117ee:	4b97      	ldr	r3, [pc, #604]	; (8011a4c <_dtoa_r+0x338>)
 80117f0:	f7ef ff3c 	bl	800166c <__aeabi_dmul>
 80117f4:	4a96      	ldr	r2, [pc, #600]	; (8011a50 <_dtoa_r+0x33c>)
 80117f6:	4b97      	ldr	r3, [pc, #604]	; (8011a54 <_dtoa_r+0x340>)
 80117f8:	f7ee ffde 	bl	80007b8 <__aeabi_dadd>
 80117fc:	0004      	movs	r4, r0
 80117fe:	0038      	movs	r0, r7
 8011800:	000d      	movs	r5, r1
 8011802:	f7f0 fdcb 	bl	800239c <__aeabi_i2d>
 8011806:	4a94      	ldr	r2, [pc, #592]	; (8011a58 <_dtoa_r+0x344>)
 8011808:	4b94      	ldr	r3, [pc, #592]	; (8011a5c <_dtoa_r+0x348>)
 801180a:	f7ef ff2f 	bl	800166c <__aeabi_dmul>
 801180e:	0002      	movs	r2, r0
 8011810:	000b      	movs	r3, r1
 8011812:	0020      	movs	r0, r4
 8011814:	0029      	movs	r1, r5
 8011816:	f7ee ffcf 	bl	80007b8 <__aeabi_dadd>
 801181a:	0004      	movs	r4, r0
 801181c:	000d      	movs	r5, r1
 801181e:	f7f0 fd87 	bl	8002330 <__aeabi_d2iz>
 8011822:	2200      	movs	r2, #0
 8011824:	9003      	str	r0, [sp, #12]
 8011826:	2300      	movs	r3, #0
 8011828:	0020      	movs	r0, r4
 801182a:	0029      	movs	r1, r5
 801182c:	f7ee fe12 	bl	8000454 <__aeabi_dcmplt>
 8011830:	2800      	cmp	r0, #0
 8011832:	d00b      	beq.n	801184c <_dtoa_r+0x138>
 8011834:	9803      	ldr	r0, [sp, #12]
 8011836:	f7f0 fdb1 	bl	800239c <__aeabi_i2d>
 801183a:	002b      	movs	r3, r5
 801183c:	0022      	movs	r2, r4
 801183e:	f7ee fe03 	bl	8000448 <__aeabi_dcmpeq>
 8011842:	4243      	negs	r3, r0
 8011844:	4158      	adcs	r0, r3
 8011846:	9b03      	ldr	r3, [sp, #12]
 8011848:	1a1b      	subs	r3, r3, r0
 801184a:	9303      	str	r3, [sp, #12]
 801184c:	2301      	movs	r3, #1
 801184e:	9316      	str	r3, [sp, #88]	; 0x58
 8011850:	9b03      	ldr	r3, [sp, #12]
 8011852:	2b16      	cmp	r3, #22
 8011854:	d810      	bhi.n	8011878 <_dtoa_r+0x164>
 8011856:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011858:	9911      	ldr	r1, [sp, #68]	; 0x44
 801185a:	9a03      	ldr	r2, [sp, #12]
 801185c:	4b80      	ldr	r3, [pc, #512]	; (8011a60 <_dtoa_r+0x34c>)
 801185e:	00d2      	lsls	r2, r2, #3
 8011860:	189b      	adds	r3, r3, r2
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	f7ee fdf5 	bl	8000454 <__aeabi_dcmplt>
 801186a:	2800      	cmp	r0, #0
 801186c:	d047      	beq.n	80118fe <_dtoa_r+0x1ea>
 801186e:	9b03      	ldr	r3, [sp, #12]
 8011870:	3b01      	subs	r3, #1
 8011872:	9303      	str	r3, [sp, #12]
 8011874:	2300      	movs	r3, #0
 8011876:	9316      	str	r3, [sp, #88]	; 0x58
 8011878:	2200      	movs	r2, #0
 801187a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801187c:	920a      	str	r2, [sp, #40]	; 0x28
 801187e:	1bdb      	subs	r3, r3, r7
 8011880:	1e5a      	subs	r2, r3, #1
 8011882:	d53e      	bpl.n	8011902 <_dtoa_r+0x1ee>
 8011884:	2201      	movs	r2, #1
 8011886:	1ad3      	subs	r3, r2, r3
 8011888:	930a      	str	r3, [sp, #40]	; 0x28
 801188a:	2300      	movs	r3, #0
 801188c:	930c      	str	r3, [sp, #48]	; 0x30
 801188e:	9b03      	ldr	r3, [sp, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	db38      	blt.n	8011906 <_dtoa_r+0x1f2>
 8011894:	9a03      	ldr	r2, [sp, #12]
 8011896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011898:	4694      	mov	ip, r2
 801189a:	4463      	add	r3, ip
 801189c:	930c      	str	r3, [sp, #48]	; 0x30
 801189e:	2300      	movs	r3, #0
 80118a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80118a2:	930d      	str	r3, [sp, #52]	; 0x34
 80118a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80118a6:	2401      	movs	r4, #1
 80118a8:	2b09      	cmp	r3, #9
 80118aa:	d867      	bhi.n	801197c <_dtoa_r+0x268>
 80118ac:	2b05      	cmp	r3, #5
 80118ae:	dd02      	ble.n	80118b6 <_dtoa_r+0x1a2>
 80118b0:	2400      	movs	r4, #0
 80118b2:	3b04      	subs	r3, #4
 80118b4:	9322      	str	r3, [sp, #136]	; 0x88
 80118b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80118b8:	1e98      	subs	r0, r3, #2
 80118ba:	2803      	cmp	r0, #3
 80118bc:	d867      	bhi.n	801198e <_dtoa_r+0x27a>
 80118be:	f7ee fc29 	bl	8000114 <__gnu_thumb1_case_uqi>
 80118c2:	3a2b      	.short	0x3a2b
 80118c4:	5b38      	.short	0x5b38
 80118c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118c8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80118ca:	18f6      	adds	r6, r6, r3
 80118cc:	4b65      	ldr	r3, [pc, #404]	; (8011a64 <_dtoa_r+0x350>)
 80118ce:	18f2      	adds	r2, r6, r3
 80118d0:	2a20      	cmp	r2, #32
 80118d2:	dd0f      	ble.n	80118f4 <_dtoa_r+0x1e0>
 80118d4:	2340      	movs	r3, #64	; 0x40
 80118d6:	1a9b      	subs	r3, r3, r2
 80118d8:	409f      	lsls	r7, r3
 80118da:	4b63      	ldr	r3, [pc, #396]	; (8011a68 <_dtoa_r+0x354>)
 80118dc:	0038      	movs	r0, r7
 80118de:	18f3      	adds	r3, r6, r3
 80118e0:	40dc      	lsrs	r4, r3
 80118e2:	4320      	orrs	r0, r4
 80118e4:	f7f0 fd8a 	bl	80023fc <__aeabi_ui2d>
 80118e8:	2201      	movs	r2, #1
 80118ea:	4b60      	ldr	r3, [pc, #384]	; (8011a6c <_dtoa_r+0x358>)
 80118ec:	1e77      	subs	r7, r6, #1
 80118ee:	18cb      	adds	r3, r1, r3
 80118f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80118f2:	e776      	b.n	80117e2 <_dtoa_r+0xce>
 80118f4:	2320      	movs	r3, #32
 80118f6:	0020      	movs	r0, r4
 80118f8:	1a9b      	subs	r3, r3, r2
 80118fa:	4098      	lsls	r0, r3
 80118fc:	e7f2      	b.n	80118e4 <_dtoa_r+0x1d0>
 80118fe:	9016      	str	r0, [sp, #88]	; 0x58
 8011900:	e7ba      	b.n	8011878 <_dtoa_r+0x164>
 8011902:	920c      	str	r2, [sp, #48]	; 0x30
 8011904:	e7c3      	b.n	801188e <_dtoa_r+0x17a>
 8011906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011908:	9a03      	ldr	r2, [sp, #12]
 801190a:	1a9b      	subs	r3, r3, r2
 801190c:	930a      	str	r3, [sp, #40]	; 0x28
 801190e:	4253      	negs	r3, r2
 8011910:	930d      	str	r3, [sp, #52]	; 0x34
 8011912:	2300      	movs	r3, #0
 8011914:	9313      	str	r3, [sp, #76]	; 0x4c
 8011916:	e7c5      	b.n	80118a4 <_dtoa_r+0x190>
 8011918:	2300      	movs	r3, #0
 801191a:	930f      	str	r3, [sp, #60]	; 0x3c
 801191c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801191e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011920:	9307      	str	r3, [sp, #28]
 8011922:	2b00      	cmp	r3, #0
 8011924:	dc13      	bgt.n	801194e <_dtoa_r+0x23a>
 8011926:	2301      	movs	r3, #1
 8011928:	001a      	movs	r2, r3
 801192a:	930b      	str	r3, [sp, #44]	; 0x2c
 801192c:	9307      	str	r3, [sp, #28]
 801192e:	9223      	str	r2, [sp, #140]	; 0x8c
 8011930:	e00d      	b.n	801194e <_dtoa_r+0x23a>
 8011932:	2301      	movs	r3, #1
 8011934:	e7f1      	b.n	801191a <_dtoa_r+0x206>
 8011936:	2300      	movs	r3, #0
 8011938:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801193a:	930f      	str	r3, [sp, #60]	; 0x3c
 801193c:	4694      	mov	ip, r2
 801193e:	9b03      	ldr	r3, [sp, #12]
 8011940:	4463      	add	r3, ip
 8011942:	930b      	str	r3, [sp, #44]	; 0x2c
 8011944:	3301      	adds	r3, #1
 8011946:	9307      	str	r3, [sp, #28]
 8011948:	2b00      	cmp	r3, #0
 801194a:	dc00      	bgt.n	801194e <_dtoa_r+0x23a>
 801194c:	2301      	movs	r3, #1
 801194e:	2100      	movs	r1, #0
 8011950:	2204      	movs	r2, #4
 8011952:	0010      	movs	r0, r2
 8011954:	3014      	adds	r0, #20
 8011956:	4298      	cmp	r0, r3
 8011958:	d91d      	bls.n	8011996 <_dtoa_r+0x282>
 801195a:	9b04      	ldr	r3, [sp, #16]
 801195c:	0018      	movs	r0, r3
 801195e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8011960:	f7fc fb18 	bl	800df94 <_Balloc>
 8011964:	9006      	str	r0, [sp, #24]
 8011966:	2800      	cmp	r0, #0
 8011968:	d118      	bne.n	801199c <_dtoa_r+0x288>
 801196a:	21b0      	movs	r1, #176	; 0xb0
 801196c:	4b40      	ldr	r3, [pc, #256]	; (8011a70 <_dtoa_r+0x35c>)
 801196e:	4841      	ldr	r0, [pc, #260]	; (8011a74 <_dtoa_r+0x360>)
 8011970:	9a06      	ldr	r2, [sp, #24]
 8011972:	31ff      	adds	r1, #255	; 0xff
 8011974:	f7ff fdd2 	bl	801151c <__assert_func>
 8011978:	2301      	movs	r3, #1
 801197a:	e7dd      	b.n	8011938 <_dtoa_r+0x224>
 801197c:	2300      	movs	r3, #0
 801197e:	940f      	str	r4, [sp, #60]	; 0x3c
 8011980:	9322      	str	r3, [sp, #136]	; 0x88
 8011982:	3b01      	subs	r3, #1
 8011984:	930b      	str	r3, [sp, #44]	; 0x2c
 8011986:	9307      	str	r3, [sp, #28]
 8011988:	2200      	movs	r2, #0
 801198a:	3313      	adds	r3, #19
 801198c:	e7cf      	b.n	801192e <_dtoa_r+0x21a>
 801198e:	2301      	movs	r3, #1
 8011990:	930f      	str	r3, [sp, #60]	; 0x3c
 8011992:	3b02      	subs	r3, #2
 8011994:	e7f6      	b.n	8011984 <_dtoa_r+0x270>
 8011996:	3101      	adds	r1, #1
 8011998:	0052      	lsls	r2, r2, #1
 801199a:	e7da      	b.n	8011952 <_dtoa_r+0x23e>
 801199c:	9b04      	ldr	r3, [sp, #16]
 801199e:	9a06      	ldr	r2, [sp, #24]
 80119a0:	639a      	str	r2, [r3, #56]	; 0x38
 80119a2:	9b07      	ldr	r3, [sp, #28]
 80119a4:	2b0e      	cmp	r3, #14
 80119a6:	d900      	bls.n	80119aa <_dtoa_r+0x296>
 80119a8:	e0e3      	b.n	8011b72 <_dtoa_r+0x45e>
 80119aa:	2c00      	cmp	r4, #0
 80119ac:	d100      	bne.n	80119b0 <_dtoa_r+0x29c>
 80119ae:	e0e0      	b.n	8011b72 <_dtoa_r+0x45e>
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	dd62      	ble.n	8011a7c <_dtoa_r+0x368>
 80119b6:	210f      	movs	r1, #15
 80119b8:	9a03      	ldr	r2, [sp, #12]
 80119ba:	4b29      	ldr	r3, [pc, #164]	; (8011a60 <_dtoa_r+0x34c>)
 80119bc:	400a      	ands	r2, r1
 80119be:	00d2      	lsls	r2, r2, #3
 80119c0:	189b      	adds	r3, r3, r2
 80119c2:	681e      	ldr	r6, [r3, #0]
 80119c4:	685f      	ldr	r7, [r3, #4]
 80119c6:	9b03      	ldr	r3, [sp, #12]
 80119c8:	2402      	movs	r4, #2
 80119ca:	111d      	asrs	r5, r3, #4
 80119cc:	05db      	lsls	r3, r3, #23
 80119ce:	d50a      	bpl.n	80119e6 <_dtoa_r+0x2d2>
 80119d0:	4b29      	ldr	r3, [pc, #164]	; (8011a78 <_dtoa_r+0x364>)
 80119d2:	400d      	ands	r5, r1
 80119d4:	6a1a      	ldr	r2, [r3, #32]
 80119d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80119da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80119dc:	f7ef fa4c 	bl	8000e78 <__aeabi_ddiv>
 80119e0:	9008      	str	r0, [sp, #32]
 80119e2:	9109      	str	r1, [sp, #36]	; 0x24
 80119e4:	3401      	adds	r4, #1
 80119e6:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <_dtoa_r+0x364>)
 80119e8:	930e      	str	r3, [sp, #56]	; 0x38
 80119ea:	2d00      	cmp	r5, #0
 80119ec:	d108      	bne.n	8011a00 <_dtoa_r+0x2ec>
 80119ee:	9808      	ldr	r0, [sp, #32]
 80119f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119f2:	0032      	movs	r2, r6
 80119f4:	003b      	movs	r3, r7
 80119f6:	f7ef fa3f 	bl	8000e78 <__aeabi_ddiv>
 80119fa:	9008      	str	r0, [sp, #32]
 80119fc:	9109      	str	r1, [sp, #36]	; 0x24
 80119fe:	e058      	b.n	8011ab2 <_dtoa_r+0x39e>
 8011a00:	2301      	movs	r3, #1
 8011a02:	421d      	tst	r5, r3
 8011a04:	d009      	beq.n	8011a1a <_dtoa_r+0x306>
 8011a06:	18e4      	adds	r4, r4, r3
 8011a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a0a:	0030      	movs	r0, r6
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	0039      	movs	r1, r7
 8011a12:	f7ef fe2b 	bl	800166c <__aeabi_dmul>
 8011a16:	0006      	movs	r6, r0
 8011a18:	000f      	movs	r7, r1
 8011a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a1c:	106d      	asrs	r5, r5, #1
 8011a1e:	3308      	adds	r3, #8
 8011a20:	e7e2      	b.n	80119e8 <_dtoa_r+0x2d4>
 8011a22:	46c0      	nop			; (mov r8, r8)
 8011a24:	7ff00000 	.word	0x7ff00000
 8011a28:	0000270f 	.word	0x0000270f
 8011a2c:	08015f1d 	.word	0x08015f1d
 8011a30:	08015f20 	.word	0x08015f20
 8011a34:	08015e8e 	.word	0x08015e8e
 8011a38:	08015e8f 	.word	0x08015e8f
 8011a3c:	3ff00000 	.word	0x3ff00000
 8011a40:	fffffc01 	.word	0xfffffc01
 8011a44:	3ff80000 	.word	0x3ff80000
 8011a48:	636f4361 	.word	0x636f4361
 8011a4c:	3fd287a7 	.word	0x3fd287a7
 8011a50:	8b60c8b3 	.word	0x8b60c8b3
 8011a54:	3fc68a28 	.word	0x3fc68a28
 8011a58:	509f79fb 	.word	0x509f79fb
 8011a5c:	3fd34413 	.word	0x3fd34413
 8011a60:	08015d88 	.word	0x08015d88
 8011a64:	00000432 	.word	0x00000432
 8011a68:	00000412 	.word	0x00000412
 8011a6c:	fe100000 	.word	0xfe100000
 8011a70:	08015c91 	.word	0x08015c91
 8011a74:	08015f21 	.word	0x08015f21
 8011a78:	08015d60 	.word	0x08015d60
 8011a7c:	9b03      	ldr	r3, [sp, #12]
 8011a7e:	2402      	movs	r4, #2
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d016      	beq.n	8011ab2 <_dtoa_r+0x39e>
 8011a84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a88:	220f      	movs	r2, #15
 8011a8a:	425d      	negs	r5, r3
 8011a8c:	402a      	ands	r2, r5
 8011a8e:	4bdd      	ldr	r3, [pc, #884]	; (8011e04 <_dtoa_r+0x6f0>)
 8011a90:	00d2      	lsls	r2, r2, #3
 8011a92:	189b      	adds	r3, r3, r2
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	f7ef fde8 	bl	800166c <__aeabi_dmul>
 8011a9c:	2701      	movs	r7, #1
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	9008      	str	r0, [sp, #32]
 8011aa2:	9109      	str	r1, [sp, #36]	; 0x24
 8011aa4:	4ed8      	ldr	r6, [pc, #864]	; (8011e08 <_dtoa_r+0x6f4>)
 8011aa6:	112d      	asrs	r5, r5, #4
 8011aa8:	2d00      	cmp	r5, #0
 8011aaa:	d000      	beq.n	8011aae <_dtoa_r+0x39a>
 8011aac:	e091      	b.n	8011bd2 <_dtoa_r+0x4be>
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d1a3      	bne.n	80119fa <_dtoa_r+0x2e6>
 8011ab2:	9e08      	ldr	r6, [sp, #32]
 8011ab4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011ab6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d100      	bne.n	8011abe <_dtoa_r+0x3aa>
 8011abc:	e094      	b.n	8011be8 <_dtoa_r+0x4d4>
 8011abe:	2200      	movs	r2, #0
 8011ac0:	0030      	movs	r0, r6
 8011ac2:	0039      	movs	r1, r7
 8011ac4:	4bd1      	ldr	r3, [pc, #836]	; (8011e0c <_dtoa_r+0x6f8>)
 8011ac6:	f7ee fcc5 	bl	8000454 <__aeabi_dcmplt>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	d100      	bne.n	8011ad0 <_dtoa_r+0x3bc>
 8011ace:	e08b      	b.n	8011be8 <_dtoa_r+0x4d4>
 8011ad0:	9b07      	ldr	r3, [sp, #28]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d100      	bne.n	8011ad8 <_dtoa_r+0x3c4>
 8011ad6:	e087      	b.n	8011be8 <_dtoa_r+0x4d4>
 8011ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	dd45      	ble.n	8011b6a <_dtoa_r+0x456>
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	3b01      	subs	r3, #1
 8011ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8011ae6:	0030      	movs	r0, r6
 8011ae8:	4bc9      	ldr	r3, [pc, #804]	; (8011e10 <_dtoa_r+0x6fc>)
 8011aea:	0039      	movs	r1, r7
 8011aec:	f7ef fdbe 	bl	800166c <__aeabi_dmul>
 8011af0:	9008      	str	r0, [sp, #32]
 8011af2:	9109      	str	r1, [sp, #36]	; 0x24
 8011af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011af6:	3401      	adds	r4, #1
 8011af8:	0020      	movs	r0, r4
 8011afa:	9e08      	ldr	r6, [sp, #32]
 8011afc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011afe:	9312      	str	r3, [sp, #72]	; 0x48
 8011b00:	f7f0 fc4c 	bl	800239c <__aeabi_i2d>
 8011b04:	0032      	movs	r2, r6
 8011b06:	003b      	movs	r3, r7
 8011b08:	f7ef fdb0 	bl	800166c <__aeabi_dmul>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	4bc1      	ldr	r3, [pc, #772]	; (8011e14 <_dtoa_r+0x700>)
 8011b10:	f7ee fe52 	bl	80007b8 <__aeabi_dadd>
 8011b14:	4ac0      	ldr	r2, [pc, #768]	; (8011e18 <_dtoa_r+0x704>)
 8011b16:	9014      	str	r0, [sp, #80]	; 0x50
 8011b18:	9115      	str	r1, [sp, #84]	; 0x54
 8011b1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011b1e:	4694      	mov	ip, r2
 8011b20:	9308      	str	r3, [sp, #32]
 8011b22:	9409      	str	r4, [sp, #36]	; 0x24
 8011b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b26:	4463      	add	r3, ip
 8011b28:	9318      	str	r3, [sp, #96]	; 0x60
 8011b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d15e      	bne.n	8011bf0 <_dtoa_r+0x4dc>
 8011b32:	2200      	movs	r2, #0
 8011b34:	4bb9      	ldr	r3, [pc, #740]	; (8011e1c <_dtoa_r+0x708>)
 8011b36:	0030      	movs	r0, r6
 8011b38:	0039      	movs	r1, r7
 8011b3a:	f7f0 f859 	bl	8001bf0 <__aeabi_dsub>
 8011b3e:	9a08      	ldr	r2, [sp, #32]
 8011b40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011b42:	0004      	movs	r4, r0
 8011b44:	000d      	movs	r5, r1
 8011b46:	f7ee fc99 	bl	800047c <__aeabi_dcmpgt>
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	d000      	beq.n	8011b50 <_dtoa_r+0x43c>
 8011b4e:	e2b3      	b.n	80120b8 <_dtoa_r+0x9a4>
 8011b50:	48b3      	ldr	r0, [pc, #716]	; (8011e20 <_dtoa_r+0x70c>)
 8011b52:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011b54:	4684      	mov	ip, r0
 8011b56:	4461      	add	r1, ip
 8011b58:	000b      	movs	r3, r1
 8011b5a:	0020      	movs	r0, r4
 8011b5c:	0029      	movs	r1, r5
 8011b5e:	9a08      	ldr	r2, [sp, #32]
 8011b60:	f7ee fc78 	bl	8000454 <__aeabi_dcmplt>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d000      	beq.n	8011b6a <_dtoa_r+0x456>
 8011b68:	e2a3      	b.n	80120b2 <_dtoa_r+0x99e>
 8011b6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011b6e:	9308      	str	r3, [sp, #32]
 8011b70:	9409      	str	r4, [sp, #36]	; 0x24
 8011b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	da00      	bge.n	8011b7a <_dtoa_r+0x466>
 8011b78:	e179      	b.n	8011e6e <_dtoa_r+0x75a>
 8011b7a:	9a03      	ldr	r2, [sp, #12]
 8011b7c:	2a0e      	cmp	r2, #14
 8011b7e:	dd00      	ble.n	8011b82 <_dtoa_r+0x46e>
 8011b80:	e175      	b.n	8011e6e <_dtoa_r+0x75a>
 8011b82:	4ba0      	ldr	r3, [pc, #640]	; (8011e04 <_dtoa_r+0x6f0>)
 8011b84:	00d2      	lsls	r2, r2, #3
 8011b86:	189b      	adds	r3, r3, r2
 8011b88:	681e      	ldr	r6, [r3, #0]
 8011b8a:	685f      	ldr	r7, [r3, #4]
 8011b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	db00      	blt.n	8011b94 <_dtoa_r+0x480>
 8011b92:	e0e5      	b.n	8011d60 <_dtoa_r+0x64c>
 8011b94:	9b07      	ldr	r3, [sp, #28]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dd00      	ble.n	8011b9c <_dtoa_r+0x488>
 8011b9a:	e0e1      	b.n	8011d60 <_dtoa_r+0x64c>
 8011b9c:	d000      	beq.n	8011ba0 <_dtoa_r+0x48c>
 8011b9e:	e288      	b.n	80120b2 <_dtoa_r+0x99e>
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	0030      	movs	r0, r6
 8011ba4:	0039      	movs	r1, r7
 8011ba6:	4b9d      	ldr	r3, [pc, #628]	; (8011e1c <_dtoa_r+0x708>)
 8011ba8:	f7ef fd60 	bl	800166c <__aeabi_dmul>
 8011bac:	9a08      	ldr	r2, [sp, #32]
 8011bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb0:	f7ee fc6e 	bl	8000490 <__aeabi_dcmpge>
 8011bb4:	9e07      	ldr	r6, [sp, #28]
 8011bb6:	0037      	movs	r7, r6
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d000      	beq.n	8011bbe <_dtoa_r+0x4aa>
 8011bbc:	e25f      	b.n	801207e <_dtoa_r+0x96a>
 8011bbe:	9b06      	ldr	r3, [sp, #24]
 8011bc0:	9a06      	ldr	r2, [sp, #24]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	9308      	str	r3, [sp, #32]
 8011bc6:	2331      	movs	r3, #49	; 0x31
 8011bc8:	7013      	strb	r3, [r2, #0]
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	9303      	str	r3, [sp, #12]
 8011bd0:	e25a      	b.n	8012088 <_dtoa_r+0x974>
 8011bd2:	423d      	tst	r5, r7
 8011bd4:	d005      	beq.n	8011be2 <_dtoa_r+0x4ce>
 8011bd6:	6832      	ldr	r2, [r6, #0]
 8011bd8:	6873      	ldr	r3, [r6, #4]
 8011bda:	f7ef fd47 	bl	800166c <__aeabi_dmul>
 8011bde:	003b      	movs	r3, r7
 8011be0:	3401      	adds	r4, #1
 8011be2:	106d      	asrs	r5, r5, #1
 8011be4:	3608      	adds	r6, #8
 8011be6:	e75f      	b.n	8011aa8 <_dtoa_r+0x394>
 8011be8:	9b03      	ldr	r3, [sp, #12]
 8011bea:	930e      	str	r3, [sp, #56]	; 0x38
 8011bec:	9b07      	ldr	r3, [sp, #28]
 8011bee:	e783      	b.n	8011af8 <_dtoa_r+0x3e4>
 8011bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011bf2:	4b84      	ldr	r3, [pc, #528]	; (8011e04 <_dtoa_r+0x6f0>)
 8011bf4:	3a01      	subs	r2, #1
 8011bf6:	00d2      	lsls	r2, r2, #3
 8011bf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011bfa:	189b      	adds	r3, r3, r2
 8011bfc:	9c08      	ldr	r4, [sp, #32]
 8011bfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	2900      	cmp	r1, #0
 8011c06:	d051      	beq.n	8011cac <_dtoa_r+0x598>
 8011c08:	2000      	movs	r0, #0
 8011c0a:	4986      	ldr	r1, [pc, #536]	; (8011e24 <_dtoa_r+0x710>)
 8011c0c:	f7ef f934 	bl	8000e78 <__aeabi_ddiv>
 8011c10:	0022      	movs	r2, r4
 8011c12:	002b      	movs	r3, r5
 8011c14:	f7ef ffec 	bl	8001bf0 <__aeabi_dsub>
 8011c18:	9a06      	ldr	r2, [sp, #24]
 8011c1a:	0004      	movs	r4, r0
 8011c1c:	4694      	mov	ip, r2
 8011c1e:	000d      	movs	r5, r1
 8011c20:	9b06      	ldr	r3, [sp, #24]
 8011c22:	9314      	str	r3, [sp, #80]	; 0x50
 8011c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c26:	4463      	add	r3, ip
 8011c28:	9318      	str	r3, [sp, #96]	; 0x60
 8011c2a:	0039      	movs	r1, r7
 8011c2c:	0030      	movs	r0, r6
 8011c2e:	f7f0 fb7f 	bl	8002330 <__aeabi_d2iz>
 8011c32:	9012      	str	r0, [sp, #72]	; 0x48
 8011c34:	f7f0 fbb2 	bl	800239c <__aeabi_i2d>
 8011c38:	0002      	movs	r2, r0
 8011c3a:	000b      	movs	r3, r1
 8011c3c:	0030      	movs	r0, r6
 8011c3e:	0039      	movs	r1, r7
 8011c40:	f7ef ffd6 	bl	8001bf0 <__aeabi_dsub>
 8011c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c48:	3301      	adds	r3, #1
 8011c4a:	9308      	str	r3, [sp, #32]
 8011c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c4e:	0006      	movs	r6, r0
 8011c50:	3330      	adds	r3, #48	; 0x30
 8011c52:	7013      	strb	r3, [r2, #0]
 8011c54:	0022      	movs	r2, r4
 8011c56:	002b      	movs	r3, r5
 8011c58:	000f      	movs	r7, r1
 8011c5a:	f7ee fbfb 	bl	8000454 <__aeabi_dcmplt>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d174      	bne.n	8011d4c <_dtoa_r+0x638>
 8011c62:	0032      	movs	r2, r6
 8011c64:	003b      	movs	r3, r7
 8011c66:	2000      	movs	r0, #0
 8011c68:	4968      	ldr	r1, [pc, #416]	; (8011e0c <_dtoa_r+0x6f8>)
 8011c6a:	f7ef ffc1 	bl	8001bf0 <__aeabi_dsub>
 8011c6e:	0022      	movs	r2, r4
 8011c70:	002b      	movs	r3, r5
 8011c72:	f7ee fbef 	bl	8000454 <__aeabi_dcmplt>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d000      	beq.n	8011c7c <_dtoa_r+0x568>
 8011c7a:	e0d7      	b.n	8011e2c <_dtoa_r+0x718>
 8011c7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c7e:	9a08      	ldr	r2, [sp, #32]
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d100      	bne.n	8011c86 <_dtoa_r+0x572>
 8011c84:	e771      	b.n	8011b6a <_dtoa_r+0x456>
 8011c86:	2200      	movs	r2, #0
 8011c88:	0020      	movs	r0, r4
 8011c8a:	0029      	movs	r1, r5
 8011c8c:	4b60      	ldr	r3, [pc, #384]	; (8011e10 <_dtoa_r+0x6fc>)
 8011c8e:	f7ef fced 	bl	800166c <__aeabi_dmul>
 8011c92:	4b5f      	ldr	r3, [pc, #380]	; (8011e10 <_dtoa_r+0x6fc>)
 8011c94:	0004      	movs	r4, r0
 8011c96:	000d      	movs	r5, r1
 8011c98:	0030      	movs	r0, r6
 8011c9a:	0039      	movs	r1, r7
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f7ef fce5 	bl	800166c <__aeabi_dmul>
 8011ca2:	9b08      	ldr	r3, [sp, #32]
 8011ca4:	0006      	movs	r6, r0
 8011ca6:	000f      	movs	r7, r1
 8011ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8011caa:	e7be      	b.n	8011c2a <_dtoa_r+0x516>
 8011cac:	0020      	movs	r0, r4
 8011cae:	0029      	movs	r1, r5
 8011cb0:	f7ef fcdc 	bl	800166c <__aeabi_dmul>
 8011cb4:	9a06      	ldr	r2, [sp, #24]
 8011cb6:	9b06      	ldr	r3, [sp, #24]
 8011cb8:	4694      	mov	ip, r2
 8011cba:	9308      	str	r3, [sp, #32]
 8011cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011cbe:	9014      	str	r0, [sp, #80]	; 0x50
 8011cc0:	9115      	str	r1, [sp, #84]	; 0x54
 8011cc2:	4463      	add	r3, ip
 8011cc4:	9319      	str	r3, [sp, #100]	; 0x64
 8011cc6:	0030      	movs	r0, r6
 8011cc8:	0039      	movs	r1, r7
 8011cca:	f7f0 fb31 	bl	8002330 <__aeabi_d2iz>
 8011cce:	9018      	str	r0, [sp, #96]	; 0x60
 8011cd0:	f7f0 fb64 	bl	800239c <__aeabi_i2d>
 8011cd4:	0002      	movs	r2, r0
 8011cd6:	000b      	movs	r3, r1
 8011cd8:	0030      	movs	r0, r6
 8011cda:	0039      	movs	r1, r7
 8011cdc:	f7ef ff88 	bl	8001bf0 <__aeabi_dsub>
 8011ce0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011ce2:	9b08      	ldr	r3, [sp, #32]
 8011ce4:	3630      	adds	r6, #48	; 0x30
 8011ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ce8:	701e      	strb	r6, [r3, #0]
 8011cea:	3301      	adds	r3, #1
 8011cec:	0004      	movs	r4, r0
 8011cee:	000d      	movs	r5, r1
 8011cf0:	9308      	str	r3, [sp, #32]
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d12d      	bne.n	8011d52 <_dtoa_r+0x63e>
 8011cf6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011cf8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011cfa:	9a06      	ldr	r2, [sp, #24]
 8011cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011cfe:	4694      	mov	ip, r2
 8011d00:	4463      	add	r3, ip
 8011d02:	2200      	movs	r2, #0
 8011d04:	9308      	str	r3, [sp, #32]
 8011d06:	4b47      	ldr	r3, [pc, #284]	; (8011e24 <_dtoa_r+0x710>)
 8011d08:	f7ee fd56 	bl	80007b8 <__aeabi_dadd>
 8011d0c:	0002      	movs	r2, r0
 8011d0e:	000b      	movs	r3, r1
 8011d10:	0020      	movs	r0, r4
 8011d12:	0029      	movs	r1, r5
 8011d14:	f7ee fbb2 	bl	800047c <__aeabi_dcmpgt>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	d000      	beq.n	8011d1e <_dtoa_r+0x60a>
 8011d1c:	e086      	b.n	8011e2c <_dtoa_r+0x718>
 8011d1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d22:	2000      	movs	r0, #0
 8011d24:	493f      	ldr	r1, [pc, #252]	; (8011e24 <_dtoa_r+0x710>)
 8011d26:	f7ef ff63 	bl	8001bf0 <__aeabi_dsub>
 8011d2a:	0002      	movs	r2, r0
 8011d2c:	000b      	movs	r3, r1
 8011d2e:	0020      	movs	r0, r4
 8011d30:	0029      	movs	r1, r5
 8011d32:	f7ee fb8f 	bl	8000454 <__aeabi_dcmplt>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d100      	bne.n	8011d3c <_dtoa_r+0x628>
 8011d3a:	e716      	b.n	8011b6a <_dtoa_r+0x456>
 8011d3c:	9b08      	ldr	r3, [sp, #32]
 8011d3e:	001a      	movs	r2, r3
 8011d40:	3a01      	subs	r2, #1
 8011d42:	9208      	str	r2, [sp, #32]
 8011d44:	7812      	ldrb	r2, [r2, #0]
 8011d46:	2a30      	cmp	r2, #48	; 0x30
 8011d48:	d0f8      	beq.n	8011d3c <_dtoa_r+0x628>
 8011d4a:	9308      	str	r3, [sp, #32]
 8011d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d4e:	9303      	str	r3, [sp, #12]
 8011d50:	e046      	b.n	8011de0 <_dtoa_r+0x6cc>
 8011d52:	2200      	movs	r2, #0
 8011d54:	4b2e      	ldr	r3, [pc, #184]	; (8011e10 <_dtoa_r+0x6fc>)
 8011d56:	f7ef fc89 	bl	800166c <__aeabi_dmul>
 8011d5a:	0006      	movs	r6, r0
 8011d5c:	000f      	movs	r7, r1
 8011d5e:	e7b2      	b.n	8011cc6 <_dtoa_r+0x5b2>
 8011d60:	9b06      	ldr	r3, [sp, #24]
 8011d62:	9a06      	ldr	r2, [sp, #24]
 8011d64:	930a      	str	r3, [sp, #40]	; 0x28
 8011d66:	9b07      	ldr	r3, [sp, #28]
 8011d68:	9c08      	ldr	r4, [sp, #32]
 8011d6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	189b      	adds	r3, r3, r2
 8011d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d72:	0032      	movs	r2, r6
 8011d74:	003b      	movs	r3, r7
 8011d76:	0020      	movs	r0, r4
 8011d78:	0029      	movs	r1, r5
 8011d7a:	f7ef f87d 	bl	8000e78 <__aeabi_ddiv>
 8011d7e:	f7f0 fad7 	bl	8002330 <__aeabi_d2iz>
 8011d82:	9007      	str	r0, [sp, #28]
 8011d84:	f7f0 fb0a 	bl	800239c <__aeabi_i2d>
 8011d88:	0032      	movs	r2, r6
 8011d8a:	003b      	movs	r3, r7
 8011d8c:	f7ef fc6e 	bl	800166c <__aeabi_dmul>
 8011d90:	0002      	movs	r2, r0
 8011d92:	000b      	movs	r3, r1
 8011d94:	0020      	movs	r0, r4
 8011d96:	0029      	movs	r1, r5
 8011d98:	f7ef ff2a 	bl	8001bf0 <__aeabi_dsub>
 8011d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d9e:	001a      	movs	r2, r3
 8011da0:	3201      	adds	r2, #1
 8011da2:	920a      	str	r2, [sp, #40]	; 0x28
 8011da4:	9208      	str	r2, [sp, #32]
 8011da6:	9a07      	ldr	r2, [sp, #28]
 8011da8:	3230      	adds	r2, #48	; 0x30
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d14f      	bne.n	8011e52 <_dtoa_r+0x73e>
 8011db2:	0002      	movs	r2, r0
 8011db4:	000b      	movs	r3, r1
 8011db6:	f7ee fcff 	bl	80007b8 <__aeabi_dadd>
 8011dba:	0032      	movs	r2, r6
 8011dbc:	003b      	movs	r3, r7
 8011dbe:	0004      	movs	r4, r0
 8011dc0:	000d      	movs	r5, r1
 8011dc2:	f7ee fb5b 	bl	800047c <__aeabi_dcmpgt>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d12e      	bne.n	8011e28 <_dtoa_r+0x714>
 8011dca:	0032      	movs	r2, r6
 8011dcc:	003b      	movs	r3, r7
 8011dce:	0020      	movs	r0, r4
 8011dd0:	0029      	movs	r1, r5
 8011dd2:	f7ee fb39 	bl	8000448 <__aeabi_dcmpeq>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d002      	beq.n	8011de0 <_dtoa_r+0x6cc>
 8011dda:	9b07      	ldr	r3, [sp, #28]
 8011ddc:	07de      	lsls	r6, r3, #31
 8011dde:	d423      	bmi.n	8011e28 <_dtoa_r+0x714>
 8011de0:	9905      	ldr	r1, [sp, #20]
 8011de2:	9804      	ldr	r0, [sp, #16]
 8011de4:	f7fc f8fe 	bl	800dfe4 <_Bfree>
 8011de8:	2300      	movs	r3, #0
 8011dea:	9a08      	ldr	r2, [sp, #32]
 8011dec:	7013      	strb	r3, [r2, #0]
 8011dee:	9b03      	ldr	r3, [sp, #12]
 8011df0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011df2:	3301      	adds	r3, #1
 8011df4:	6013      	str	r3, [r2, #0]
 8011df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d100      	bne.n	8011dfe <_dtoa_r+0x6ea>
 8011dfc:	e4bd      	b.n	801177a <_dtoa_r+0x66>
 8011dfe:	9a08      	ldr	r2, [sp, #32]
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	e4ba      	b.n	801177a <_dtoa_r+0x66>
 8011e04:	08015d88 	.word	0x08015d88
 8011e08:	08015d60 	.word	0x08015d60
 8011e0c:	3ff00000 	.word	0x3ff00000
 8011e10:	40240000 	.word	0x40240000
 8011e14:	401c0000 	.word	0x401c0000
 8011e18:	fcc00000 	.word	0xfcc00000
 8011e1c:	40140000 	.word	0x40140000
 8011e20:	7cc00000 	.word	0x7cc00000
 8011e24:	3fe00000 	.word	0x3fe00000
 8011e28:	9b03      	ldr	r3, [sp, #12]
 8011e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8011e2c:	9b08      	ldr	r3, [sp, #32]
 8011e2e:	9308      	str	r3, [sp, #32]
 8011e30:	3b01      	subs	r3, #1
 8011e32:	781a      	ldrb	r2, [r3, #0]
 8011e34:	2a39      	cmp	r2, #57	; 0x39
 8011e36:	d108      	bne.n	8011e4a <_dtoa_r+0x736>
 8011e38:	9a06      	ldr	r2, [sp, #24]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d1f7      	bne.n	8011e2e <_dtoa_r+0x71a>
 8011e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e40:	9906      	ldr	r1, [sp, #24]
 8011e42:	3201      	adds	r2, #1
 8011e44:	920e      	str	r2, [sp, #56]	; 0x38
 8011e46:	2230      	movs	r2, #48	; 0x30
 8011e48:	700a      	strb	r2, [r1, #0]
 8011e4a:	781a      	ldrb	r2, [r3, #0]
 8011e4c:	3201      	adds	r2, #1
 8011e4e:	701a      	strb	r2, [r3, #0]
 8011e50:	e77c      	b.n	8011d4c <_dtoa_r+0x638>
 8011e52:	2200      	movs	r2, #0
 8011e54:	4ba9      	ldr	r3, [pc, #676]	; (80120fc <_dtoa_r+0x9e8>)
 8011e56:	f7ef fc09 	bl	800166c <__aeabi_dmul>
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	0004      	movs	r4, r0
 8011e60:	000d      	movs	r5, r1
 8011e62:	f7ee faf1 	bl	8000448 <__aeabi_dcmpeq>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d100      	bne.n	8011e6c <_dtoa_r+0x758>
 8011e6a:	e782      	b.n	8011d72 <_dtoa_r+0x65e>
 8011e6c:	e7b8      	b.n	8011de0 <_dtoa_r+0x6cc>
 8011e6e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011e70:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e74:	2f00      	cmp	r7, #0
 8011e76:	d012      	beq.n	8011e9e <_dtoa_r+0x78a>
 8011e78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e7a:	2a01      	cmp	r2, #1
 8011e7c:	dc6e      	bgt.n	8011f5c <_dtoa_r+0x848>
 8011e7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e80:	2a00      	cmp	r2, #0
 8011e82:	d065      	beq.n	8011f50 <_dtoa_r+0x83c>
 8011e84:	4a9e      	ldr	r2, [pc, #632]	; (8012100 <_dtoa_r+0x9ec>)
 8011e86:	189b      	adds	r3, r3, r2
 8011e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	18d2      	adds	r2, r2, r3
 8011e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8011e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e92:	9804      	ldr	r0, [sp, #16]
 8011e94:	18d3      	adds	r3, r2, r3
 8011e96:	930c      	str	r3, [sp, #48]	; 0x30
 8011e98:	f7fc f986 	bl	800e1a8 <__i2b>
 8011e9c:	0007      	movs	r7, r0
 8011e9e:	2c00      	cmp	r4, #0
 8011ea0:	d00e      	beq.n	8011ec0 <_dtoa_r+0x7ac>
 8011ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd0b      	ble.n	8011ec0 <_dtoa_r+0x7ac>
 8011ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eaa:	0023      	movs	r3, r4
 8011eac:	4294      	cmp	r4, r2
 8011eae:	dd00      	ble.n	8011eb2 <_dtoa_r+0x79e>
 8011eb0:	0013      	movs	r3, r2
 8011eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eb4:	1ae4      	subs	r4, r4, r3
 8011eb6:	1ad2      	subs	r2, r2, r3
 8011eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8011eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ebc:	1ad3      	subs	r3, r2, r3
 8011ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8011ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d01e      	beq.n	8011f04 <_dtoa_r+0x7f0>
 8011ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d05c      	beq.n	8011f86 <_dtoa_r+0x872>
 8011ecc:	2d00      	cmp	r5, #0
 8011ece:	dd10      	ble.n	8011ef2 <_dtoa_r+0x7de>
 8011ed0:	0039      	movs	r1, r7
 8011ed2:	002a      	movs	r2, r5
 8011ed4:	9804      	ldr	r0, [sp, #16]
 8011ed6:	f7fc fa2f 	bl	800e338 <__pow5mult>
 8011eda:	9a05      	ldr	r2, [sp, #20]
 8011edc:	0001      	movs	r1, r0
 8011ede:	0007      	movs	r7, r0
 8011ee0:	9804      	ldr	r0, [sp, #16]
 8011ee2:	f7fc f979 	bl	800e1d8 <__multiply>
 8011ee6:	0006      	movs	r6, r0
 8011ee8:	9905      	ldr	r1, [sp, #20]
 8011eea:	9804      	ldr	r0, [sp, #16]
 8011eec:	f7fc f87a 	bl	800dfe4 <_Bfree>
 8011ef0:	9605      	str	r6, [sp, #20]
 8011ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ef4:	1b5a      	subs	r2, r3, r5
 8011ef6:	42ab      	cmp	r3, r5
 8011ef8:	d004      	beq.n	8011f04 <_dtoa_r+0x7f0>
 8011efa:	9905      	ldr	r1, [sp, #20]
 8011efc:	9804      	ldr	r0, [sp, #16]
 8011efe:	f7fc fa1b 	bl	800e338 <__pow5mult>
 8011f02:	9005      	str	r0, [sp, #20]
 8011f04:	2101      	movs	r1, #1
 8011f06:	9804      	ldr	r0, [sp, #16]
 8011f08:	f7fc f94e 	bl	800e1a8 <__i2b>
 8011f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f0e:	0006      	movs	r6, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	dd3a      	ble.n	8011f8a <_dtoa_r+0x876>
 8011f14:	001a      	movs	r2, r3
 8011f16:	0001      	movs	r1, r0
 8011f18:	9804      	ldr	r0, [sp, #16]
 8011f1a:	f7fc fa0d 	bl	800e338 <__pow5mult>
 8011f1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f20:	0006      	movs	r6, r0
 8011f22:	2500      	movs	r5, #0
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	dc38      	bgt.n	8011f9a <_dtoa_r+0x886>
 8011f28:	2500      	movs	r5, #0
 8011f2a:	9b08      	ldr	r3, [sp, #32]
 8011f2c:	42ab      	cmp	r3, r5
 8011f2e:	d130      	bne.n	8011f92 <_dtoa_r+0x87e>
 8011f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f32:	031b      	lsls	r3, r3, #12
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	d12c      	bne.n	8011f92 <_dtoa_r+0x87e>
 8011f38:	4b72      	ldr	r3, [pc, #456]	; (8012104 <_dtoa_r+0x9f0>)
 8011f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f3c:	4213      	tst	r3, r2
 8011f3e:	d028      	beq.n	8011f92 <_dtoa_r+0x87e>
 8011f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f42:	3501      	adds	r5, #1
 8011f44:	3301      	adds	r3, #1
 8011f46:	930a      	str	r3, [sp, #40]	; 0x28
 8011f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	930c      	str	r3, [sp, #48]	; 0x30
 8011f4e:	e020      	b.n	8011f92 <_dtoa_r+0x87e>
 8011f50:	2336      	movs	r3, #54	; 0x36
 8011f52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011f54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011f56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011f58:	1a9b      	subs	r3, r3, r2
 8011f5a:	e795      	b.n	8011e88 <_dtoa_r+0x774>
 8011f5c:	9b07      	ldr	r3, [sp, #28]
 8011f5e:	1e5d      	subs	r5, r3, #1
 8011f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f62:	42ab      	cmp	r3, r5
 8011f64:	db07      	blt.n	8011f76 <_dtoa_r+0x862>
 8011f66:	1b5d      	subs	r5, r3, r5
 8011f68:	9b07      	ldr	r3, [sp, #28]
 8011f6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	da8b      	bge.n	8011e88 <_dtoa_r+0x774>
 8011f70:	1ae4      	subs	r4, r4, r3
 8011f72:	2300      	movs	r3, #0
 8011f74:	e788      	b.n	8011e88 <_dtoa_r+0x774>
 8011f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011f7a:	1aeb      	subs	r3, r5, r3
 8011f7c:	18d3      	adds	r3, r2, r3
 8011f7e:	950d      	str	r5, [sp, #52]	; 0x34
 8011f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f82:	2500      	movs	r5, #0
 8011f84:	e7f0      	b.n	8011f68 <_dtoa_r+0x854>
 8011f86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f88:	e7b7      	b.n	8011efa <_dtoa_r+0x7e6>
 8011f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f8c:	2500      	movs	r5, #0
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	ddca      	ble.n	8011f28 <_dtoa_r+0x814>
 8011f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f94:	2001      	movs	r0, #1
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d008      	beq.n	8011fac <_dtoa_r+0x898>
 8011f9a:	6933      	ldr	r3, [r6, #16]
 8011f9c:	3303      	adds	r3, #3
 8011f9e:	009b      	lsls	r3, r3, #2
 8011fa0:	18f3      	adds	r3, r6, r3
 8011fa2:	6858      	ldr	r0, [r3, #4]
 8011fa4:	f7fc f8b8 	bl	800e118 <__hi0bits>
 8011fa8:	2320      	movs	r3, #32
 8011faa:	1a18      	subs	r0, r3, r0
 8011fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fae:	1818      	adds	r0, r3, r0
 8011fb0:	0002      	movs	r2, r0
 8011fb2:	231f      	movs	r3, #31
 8011fb4:	401a      	ands	r2, r3
 8011fb6:	4218      	tst	r0, r3
 8011fb8:	d047      	beq.n	801204a <_dtoa_r+0x936>
 8011fba:	3301      	adds	r3, #1
 8011fbc:	1a9b      	subs	r3, r3, r2
 8011fbe:	2b04      	cmp	r3, #4
 8011fc0:	dd3f      	ble.n	8012042 <_dtoa_r+0x92e>
 8011fc2:	231c      	movs	r3, #28
 8011fc4:	1a9b      	subs	r3, r3, r2
 8011fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fc8:	18e4      	adds	r4, r4, r3
 8011fca:	18d2      	adds	r2, r2, r3
 8011fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8011fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fd0:	18d3      	adds	r3, r2, r3
 8011fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8011fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	dd05      	ble.n	8011fe6 <_dtoa_r+0x8d2>
 8011fda:	001a      	movs	r2, r3
 8011fdc:	9905      	ldr	r1, [sp, #20]
 8011fde:	9804      	ldr	r0, [sp, #16]
 8011fe0:	f7fc f9ec 	bl	800e3bc <__lshift>
 8011fe4:	9005      	str	r0, [sp, #20]
 8011fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dd05      	ble.n	8011ff8 <_dtoa_r+0x8e4>
 8011fec:	0031      	movs	r1, r6
 8011fee:	001a      	movs	r2, r3
 8011ff0:	9804      	ldr	r0, [sp, #16]
 8011ff2:	f7fc f9e3 	bl	800e3bc <__lshift>
 8011ff6:	0006      	movs	r6, r0
 8011ff8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d027      	beq.n	801204e <_dtoa_r+0x93a>
 8011ffe:	0031      	movs	r1, r6
 8012000:	9805      	ldr	r0, [sp, #20]
 8012002:	f7fc fa49 	bl	800e498 <__mcmp>
 8012006:	2800      	cmp	r0, #0
 8012008:	da21      	bge.n	801204e <_dtoa_r+0x93a>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	220a      	movs	r2, #10
 801200e:	3b01      	subs	r3, #1
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	9905      	ldr	r1, [sp, #20]
 8012014:	2300      	movs	r3, #0
 8012016:	9804      	ldr	r0, [sp, #16]
 8012018:	f7fb ffee 	bl	800dff8 <__multadd>
 801201c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801201e:	9005      	str	r0, [sp, #20]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d100      	bne.n	8012026 <_dtoa_r+0x912>
 8012024:	e15d      	b.n	80122e2 <_dtoa_r+0xbce>
 8012026:	2300      	movs	r3, #0
 8012028:	0039      	movs	r1, r7
 801202a:	220a      	movs	r2, #10
 801202c:	9804      	ldr	r0, [sp, #16]
 801202e:	f7fb ffe3 	bl	800dff8 <__multadd>
 8012032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012034:	0007      	movs	r7, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	dc49      	bgt.n	80120ce <_dtoa_r+0x9ba>
 801203a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801203c:	2b02      	cmp	r3, #2
 801203e:	dc0e      	bgt.n	801205e <_dtoa_r+0x94a>
 8012040:	e045      	b.n	80120ce <_dtoa_r+0x9ba>
 8012042:	2b04      	cmp	r3, #4
 8012044:	d0c6      	beq.n	8011fd4 <_dtoa_r+0x8c0>
 8012046:	331c      	adds	r3, #28
 8012048:	e7bd      	b.n	8011fc6 <_dtoa_r+0x8b2>
 801204a:	0013      	movs	r3, r2
 801204c:	e7fb      	b.n	8012046 <_dtoa_r+0x932>
 801204e:	9b07      	ldr	r3, [sp, #28]
 8012050:	2b00      	cmp	r3, #0
 8012052:	dc36      	bgt.n	80120c2 <_dtoa_r+0x9ae>
 8012054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012056:	2b02      	cmp	r3, #2
 8012058:	dd33      	ble.n	80120c2 <_dtoa_r+0x9ae>
 801205a:	9b07      	ldr	r3, [sp, #28]
 801205c:	930b      	str	r3, [sp, #44]	; 0x2c
 801205e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10c      	bne.n	801207e <_dtoa_r+0x96a>
 8012064:	0031      	movs	r1, r6
 8012066:	2205      	movs	r2, #5
 8012068:	9804      	ldr	r0, [sp, #16]
 801206a:	f7fb ffc5 	bl	800dff8 <__multadd>
 801206e:	0006      	movs	r6, r0
 8012070:	0001      	movs	r1, r0
 8012072:	9805      	ldr	r0, [sp, #20]
 8012074:	f7fc fa10 	bl	800e498 <__mcmp>
 8012078:	2800      	cmp	r0, #0
 801207a:	dd00      	ble.n	801207e <_dtoa_r+0x96a>
 801207c:	e59f      	b.n	8011bbe <_dtoa_r+0x4aa>
 801207e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012080:	43db      	mvns	r3, r3
 8012082:	9303      	str	r3, [sp, #12]
 8012084:	9b06      	ldr	r3, [sp, #24]
 8012086:	9308      	str	r3, [sp, #32]
 8012088:	2500      	movs	r5, #0
 801208a:	0031      	movs	r1, r6
 801208c:	9804      	ldr	r0, [sp, #16]
 801208e:	f7fb ffa9 	bl	800dfe4 <_Bfree>
 8012092:	2f00      	cmp	r7, #0
 8012094:	d100      	bne.n	8012098 <_dtoa_r+0x984>
 8012096:	e6a3      	b.n	8011de0 <_dtoa_r+0x6cc>
 8012098:	2d00      	cmp	r5, #0
 801209a:	d005      	beq.n	80120a8 <_dtoa_r+0x994>
 801209c:	42bd      	cmp	r5, r7
 801209e:	d003      	beq.n	80120a8 <_dtoa_r+0x994>
 80120a0:	0029      	movs	r1, r5
 80120a2:	9804      	ldr	r0, [sp, #16]
 80120a4:	f7fb ff9e 	bl	800dfe4 <_Bfree>
 80120a8:	0039      	movs	r1, r7
 80120aa:	9804      	ldr	r0, [sp, #16]
 80120ac:	f7fb ff9a 	bl	800dfe4 <_Bfree>
 80120b0:	e696      	b.n	8011de0 <_dtoa_r+0x6cc>
 80120b2:	2600      	movs	r6, #0
 80120b4:	0037      	movs	r7, r6
 80120b6:	e7e2      	b.n	801207e <_dtoa_r+0x96a>
 80120b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80120bc:	9303      	str	r3, [sp, #12]
 80120be:	0037      	movs	r7, r6
 80120c0:	e57d      	b.n	8011bbe <_dtoa_r+0x4aa>
 80120c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d100      	bne.n	80120ca <_dtoa_r+0x9b6>
 80120c8:	e0c3      	b.n	8012252 <_dtoa_r+0xb3e>
 80120ca:	9b07      	ldr	r3, [sp, #28]
 80120cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80120ce:	2c00      	cmp	r4, #0
 80120d0:	dd05      	ble.n	80120de <_dtoa_r+0x9ca>
 80120d2:	0039      	movs	r1, r7
 80120d4:	0022      	movs	r2, r4
 80120d6:	9804      	ldr	r0, [sp, #16]
 80120d8:	f7fc f970 	bl	800e3bc <__lshift>
 80120dc:	0007      	movs	r7, r0
 80120de:	0038      	movs	r0, r7
 80120e0:	2d00      	cmp	r5, #0
 80120e2:	d024      	beq.n	801212e <_dtoa_r+0xa1a>
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	9804      	ldr	r0, [sp, #16]
 80120e8:	f7fb ff54 	bl	800df94 <_Balloc>
 80120ec:	1e04      	subs	r4, r0, #0
 80120ee:	d111      	bne.n	8012114 <_dtoa_r+0xa00>
 80120f0:	0022      	movs	r2, r4
 80120f2:	4b05      	ldr	r3, [pc, #20]	; (8012108 <_dtoa_r+0x9f4>)
 80120f4:	4805      	ldr	r0, [pc, #20]	; (801210c <_dtoa_r+0x9f8>)
 80120f6:	4906      	ldr	r1, [pc, #24]	; (8012110 <_dtoa_r+0x9fc>)
 80120f8:	e43c      	b.n	8011974 <_dtoa_r+0x260>
 80120fa:	46c0      	nop			; (mov r8, r8)
 80120fc:	40240000 	.word	0x40240000
 8012100:	00000433 	.word	0x00000433
 8012104:	7ff00000 	.word	0x7ff00000
 8012108:	08015c91 	.word	0x08015c91
 801210c:	08015f21 	.word	0x08015f21
 8012110:	000002ef 	.word	0x000002ef
 8012114:	0039      	movs	r1, r7
 8012116:	693a      	ldr	r2, [r7, #16]
 8012118:	310c      	adds	r1, #12
 801211a:	3202      	adds	r2, #2
 801211c:	0092      	lsls	r2, r2, #2
 801211e:	300c      	adds	r0, #12
 8012120:	f7fb fa9d 	bl	800d65e <memcpy>
 8012124:	2201      	movs	r2, #1
 8012126:	0021      	movs	r1, r4
 8012128:	9804      	ldr	r0, [sp, #16]
 801212a:	f7fc f947 	bl	800e3bc <__lshift>
 801212e:	9b06      	ldr	r3, [sp, #24]
 8012130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012132:	9307      	str	r3, [sp, #28]
 8012134:	3b01      	subs	r3, #1
 8012136:	189b      	adds	r3, r3, r2
 8012138:	2201      	movs	r2, #1
 801213a:	003d      	movs	r5, r7
 801213c:	0007      	movs	r7, r0
 801213e:	930e      	str	r3, [sp, #56]	; 0x38
 8012140:	9b08      	ldr	r3, [sp, #32]
 8012142:	4013      	ands	r3, r2
 8012144:	930d      	str	r3, [sp, #52]	; 0x34
 8012146:	0031      	movs	r1, r6
 8012148:	9805      	ldr	r0, [sp, #20]
 801214a:	f7ff fa53 	bl	80115f4 <quorem>
 801214e:	0029      	movs	r1, r5
 8012150:	0004      	movs	r4, r0
 8012152:	900b      	str	r0, [sp, #44]	; 0x2c
 8012154:	9805      	ldr	r0, [sp, #20]
 8012156:	f7fc f99f 	bl	800e498 <__mcmp>
 801215a:	003a      	movs	r2, r7
 801215c:	900c      	str	r0, [sp, #48]	; 0x30
 801215e:	0031      	movs	r1, r6
 8012160:	9804      	ldr	r0, [sp, #16]
 8012162:	f7fc f9b5 	bl	800e4d0 <__mdiff>
 8012166:	2201      	movs	r2, #1
 8012168:	68c3      	ldr	r3, [r0, #12]
 801216a:	3430      	adds	r4, #48	; 0x30
 801216c:	9008      	str	r0, [sp, #32]
 801216e:	920a      	str	r2, [sp, #40]	; 0x28
 8012170:	2b00      	cmp	r3, #0
 8012172:	d104      	bne.n	801217e <_dtoa_r+0xa6a>
 8012174:	0001      	movs	r1, r0
 8012176:	9805      	ldr	r0, [sp, #20]
 8012178:	f7fc f98e 	bl	800e498 <__mcmp>
 801217c:	900a      	str	r0, [sp, #40]	; 0x28
 801217e:	9908      	ldr	r1, [sp, #32]
 8012180:	9804      	ldr	r0, [sp, #16]
 8012182:	f7fb ff2f 	bl	800dfe4 <_Bfree>
 8012186:	9b07      	ldr	r3, [sp, #28]
 8012188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801218a:	3301      	adds	r3, #1
 801218c:	9308      	str	r3, [sp, #32]
 801218e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012190:	4313      	orrs	r3, r2
 8012192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012194:	4313      	orrs	r3, r2
 8012196:	d109      	bne.n	80121ac <_dtoa_r+0xa98>
 8012198:	2c39      	cmp	r4, #57	; 0x39
 801219a:	d022      	beq.n	80121e2 <_dtoa_r+0xace>
 801219c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801219e:	2b00      	cmp	r3, #0
 80121a0:	dd01      	ble.n	80121a6 <_dtoa_r+0xa92>
 80121a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80121a4:	3431      	adds	r4, #49	; 0x31
 80121a6:	9b07      	ldr	r3, [sp, #28]
 80121a8:	701c      	strb	r4, [r3, #0]
 80121aa:	e76e      	b.n	801208a <_dtoa_r+0x976>
 80121ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	db04      	blt.n	80121bc <_dtoa_r+0xaa8>
 80121b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80121b4:	4313      	orrs	r3, r2
 80121b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121b8:	4313      	orrs	r3, r2
 80121ba:	d11e      	bne.n	80121fa <_dtoa_r+0xae6>
 80121bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121be:	2b00      	cmp	r3, #0
 80121c0:	ddf1      	ble.n	80121a6 <_dtoa_r+0xa92>
 80121c2:	9905      	ldr	r1, [sp, #20]
 80121c4:	2201      	movs	r2, #1
 80121c6:	9804      	ldr	r0, [sp, #16]
 80121c8:	f7fc f8f8 	bl	800e3bc <__lshift>
 80121cc:	0031      	movs	r1, r6
 80121ce:	9005      	str	r0, [sp, #20]
 80121d0:	f7fc f962 	bl	800e498 <__mcmp>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	dc02      	bgt.n	80121de <_dtoa_r+0xaca>
 80121d8:	d1e5      	bne.n	80121a6 <_dtoa_r+0xa92>
 80121da:	07e3      	lsls	r3, r4, #31
 80121dc:	d5e3      	bpl.n	80121a6 <_dtoa_r+0xa92>
 80121de:	2c39      	cmp	r4, #57	; 0x39
 80121e0:	d1df      	bne.n	80121a2 <_dtoa_r+0xa8e>
 80121e2:	2339      	movs	r3, #57	; 0x39
 80121e4:	9a07      	ldr	r2, [sp, #28]
 80121e6:	7013      	strb	r3, [r2, #0]
 80121e8:	9b08      	ldr	r3, [sp, #32]
 80121ea:	9308      	str	r3, [sp, #32]
 80121ec:	3b01      	subs	r3, #1
 80121ee:	781a      	ldrb	r2, [r3, #0]
 80121f0:	2a39      	cmp	r2, #57	; 0x39
 80121f2:	d063      	beq.n	80122bc <_dtoa_r+0xba8>
 80121f4:	3201      	adds	r2, #1
 80121f6:	701a      	strb	r2, [r3, #0]
 80121f8:	e747      	b.n	801208a <_dtoa_r+0x976>
 80121fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	dd03      	ble.n	8012208 <_dtoa_r+0xaf4>
 8012200:	2c39      	cmp	r4, #57	; 0x39
 8012202:	d0ee      	beq.n	80121e2 <_dtoa_r+0xace>
 8012204:	3401      	adds	r4, #1
 8012206:	e7ce      	b.n	80121a6 <_dtoa_r+0xa92>
 8012208:	9b07      	ldr	r3, [sp, #28]
 801220a:	9a07      	ldr	r2, [sp, #28]
 801220c:	701c      	strb	r4, [r3, #0]
 801220e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012210:	4293      	cmp	r3, r2
 8012212:	d03e      	beq.n	8012292 <_dtoa_r+0xb7e>
 8012214:	2300      	movs	r3, #0
 8012216:	220a      	movs	r2, #10
 8012218:	9905      	ldr	r1, [sp, #20]
 801221a:	9804      	ldr	r0, [sp, #16]
 801221c:	f7fb feec 	bl	800dff8 <__multadd>
 8012220:	2300      	movs	r3, #0
 8012222:	9005      	str	r0, [sp, #20]
 8012224:	220a      	movs	r2, #10
 8012226:	0029      	movs	r1, r5
 8012228:	9804      	ldr	r0, [sp, #16]
 801222a:	42bd      	cmp	r5, r7
 801222c:	d106      	bne.n	801223c <_dtoa_r+0xb28>
 801222e:	f7fb fee3 	bl	800dff8 <__multadd>
 8012232:	0005      	movs	r5, r0
 8012234:	0007      	movs	r7, r0
 8012236:	9b08      	ldr	r3, [sp, #32]
 8012238:	9307      	str	r3, [sp, #28]
 801223a:	e784      	b.n	8012146 <_dtoa_r+0xa32>
 801223c:	f7fb fedc 	bl	800dff8 <__multadd>
 8012240:	0039      	movs	r1, r7
 8012242:	0005      	movs	r5, r0
 8012244:	2300      	movs	r3, #0
 8012246:	220a      	movs	r2, #10
 8012248:	9804      	ldr	r0, [sp, #16]
 801224a:	f7fb fed5 	bl	800dff8 <__multadd>
 801224e:	0007      	movs	r7, r0
 8012250:	e7f1      	b.n	8012236 <_dtoa_r+0xb22>
 8012252:	9b07      	ldr	r3, [sp, #28]
 8012254:	930b      	str	r3, [sp, #44]	; 0x2c
 8012256:	2500      	movs	r5, #0
 8012258:	0031      	movs	r1, r6
 801225a:	9805      	ldr	r0, [sp, #20]
 801225c:	f7ff f9ca 	bl	80115f4 <quorem>
 8012260:	9b06      	ldr	r3, [sp, #24]
 8012262:	3030      	adds	r0, #48	; 0x30
 8012264:	5558      	strb	r0, [r3, r5]
 8012266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012268:	3501      	adds	r5, #1
 801226a:	0004      	movs	r4, r0
 801226c:	42ab      	cmp	r3, r5
 801226e:	dd07      	ble.n	8012280 <_dtoa_r+0xb6c>
 8012270:	2300      	movs	r3, #0
 8012272:	220a      	movs	r2, #10
 8012274:	9905      	ldr	r1, [sp, #20]
 8012276:	9804      	ldr	r0, [sp, #16]
 8012278:	f7fb febe 	bl	800dff8 <__multadd>
 801227c:	9005      	str	r0, [sp, #20]
 801227e:	e7eb      	b.n	8012258 <_dtoa_r+0xb44>
 8012280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012282:	2301      	movs	r3, #1
 8012284:	2a00      	cmp	r2, #0
 8012286:	dd00      	ble.n	801228a <_dtoa_r+0xb76>
 8012288:	0013      	movs	r3, r2
 801228a:	2500      	movs	r5, #0
 801228c:	9a06      	ldr	r2, [sp, #24]
 801228e:	18d3      	adds	r3, r2, r3
 8012290:	9308      	str	r3, [sp, #32]
 8012292:	9905      	ldr	r1, [sp, #20]
 8012294:	2201      	movs	r2, #1
 8012296:	9804      	ldr	r0, [sp, #16]
 8012298:	f7fc f890 	bl	800e3bc <__lshift>
 801229c:	0031      	movs	r1, r6
 801229e:	9005      	str	r0, [sp, #20]
 80122a0:	f7fc f8fa 	bl	800e498 <__mcmp>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	dc9f      	bgt.n	80121e8 <_dtoa_r+0xad4>
 80122a8:	d101      	bne.n	80122ae <_dtoa_r+0xb9a>
 80122aa:	07e4      	lsls	r4, r4, #31
 80122ac:	d49c      	bmi.n	80121e8 <_dtoa_r+0xad4>
 80122ae:	9b08      	ldr	r3, [sp, #32]
 80122b0:	9308      	str	r3, [sp, #32]
 80122b2:	3b01      	subs	r3, #1
 80122b4:	781a      	ldrb	r2, [r3, #0]
 80122b6:	2a30      	cmp	r2, #48	; 0x30
 80122b8:	d0fa      	beq.n	80122b0 <_dtoa_r+0xb9c>
 80122ba:	e6e6      	b.n	801208a <_dtoa_r+0x976>
 80122bc:	9a06      	ldr	r2, [sp, #24]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d193      	bne.n	80121ea <_dtoa_r+0xad6>
 80122c2:	9b03      	ldr	r3, [sp, #12]
 80122c4:	3301      	adds	r3, #1
 80122c6:	9303      	str	r3, [sp, #12]
 80122c8:	2331      	movs	r3, #49	; 0x31
 80122ca:	7013      	strb	r3, [r2, #0]
 80122cc:	e6dd      	b.n	801208a <_dtoa_r+0x976>
 80122ce:	4b09      	ldr	r3, [pc, #36]	; (80122f4 <_dtoa_r+0xbe0>)
 80122d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80122d2:	9306      	str	r3, [sp, #24]
 80122d4:	4b08      	ldr	r3, [pc, #32]	; (80122f8 <_dtoa_r+0xbe4>)
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	d001      	beq.n	80122de <_dtoa_r+0xbca>
 80122da:	f7ff fa4c 	bl	8011776 <_dtoa_r+0x62>
 80122de:	f7ff fa4c 	bl	801177a <_dtoa_r+0x66>
 80122e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	dcb6      	bgt.n	8012256 <_dtoa_r+0xb42>
 80122e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	dd00      	ble.n	80122f0 <_dtoa_r+0xbdc>
 80122ee:	e6b6      	b.n	801205e <_dtoa_r+0x94a>
 80122f0:	e7b1      	b.n	8012256 <_dtoa_r+0xb42>
 80122f2:	46c0      	nop			; (mov r8, r8)
 80122f4:	08015f14 	.word	0x08015f14
 80122f8:	08015f1c 	.word	0x08015f1c

080122fc <realloc>:
 80122fc:	b510      	push	{r4, lr}
 80122fe:	4b03      	ldr	r3, [pc, #12]	; (801230c <realloc+0x10>)
 8012300:	000a      	movs	r2, r1
 8012302:	0001      	movs	r1, r0
 8012304:	6818      	ldr	r0, [r3, #0]
 8012306:	f000 f803 	bl	8012310 <_realloc_r>
 801230a:	bd10      	pop	{r4, pc}
 801230c:	200006d0 	.word	0x200006d0

08012310 <_realloc_r>:
 8012310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012312:	b087      	sub	sp, #28
 8012314:	1e0c      	subs	r4, r1, #0
 8012316:	9001      	str	r0, [sp, #4]
 8012318:	9205      	str	r2, [sp, #20]
 801231a:	d106      	bne.n	801232a <_realloc_r+0x1a>
 801231c:	0011      	movs	r1, r2
 801231e:	f7f9 fd5f 	bl	800bde0 <_malloc_r>
 8012322:	0007      	movs	r7, r0
 8012324:	0038      	movs	r0, r7
 8012326:	b007      	add	sp, #28
 8012328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232a:	9801      	ldr	r0, [sp, #4]
 801232c:	f7f9 ff6c 	bl	800c208 <__malloc_lock>
 8012330:	0023      	movs	r3, r4
 8012332:	3b08      	subs	r3, #8
 8012334:	685f      	ldr	r7, [r3, #4]
 8012336:	9304      	str	r3, [sp, #16]
 8012338:	9b05      	ldr	r3, [sp, #20]
 801233a:	330b      	adds	r3, #11
 801233c:	2b16      	cmp	r3, #22
 801233e:	d908      	bls.n	8012352 <_realloc_r+0x42>
 8012340:	2207      	movs	r2, #7
 8012342:	4393      	bics	r3, r2
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	d506      	bpl.n	8012356 <_realloc_r+0x46>
 8012348:	230c      	movs	r3, #12
 801234a:	9a01      	ldr	r2, [sp, #4]
 801234c:	2700      	movs	r7, #0
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	e7e8      	b.n	8012324 <_realloc_r+0x14>
 8012352:	2310      	movs	r3, #16
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	9b00      	ldr	r3, [sp, #0]
 8012358:	9a05      	ldr	r2, [sp, #20]
 801235a:	4293      	cmp	r3, r2
 801235c:	d3f4      	bcc.n	8012348 <_realloc_r+0x38>
 801235e:	9b04      	ldr	r3, [sp, #16]
 8012360:	003a      	movs	r2, r7
 8012362:	9302      	str	r3, [sp, #8]
 8012364:	2303      	movs	r3, #3
 8012366:	439a      	bics	r2, r3
 8012368:	9b00      	ldr	r3, [sp, #0]
 801236a:	9203      	str	r2, [sp, #12]
 801236c:	4293      	cmp	r3, r2
 801236e:	dc00      	bgt.n	8012372 <_realloc_r+0x62>
 8012370:	e169      	b.n	8012646 <_realloc_r+0x336>
 8012372:	9b04      	ldr	r3, [sp, #16]
 8012374:	48b8      	ldr	r0, [pc, #736]	; (8012658 <_realloc_r+0x348>)
 8012376:	189b      	adds	r3, r3, r2
 8012378:	6882      	ldr	r2, [r0, #8]
 801237a:	4694      	mov	ip, r2
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	459c      	cmp	ip, r3
 8012380:	d006      	beq.n	8012390 <_realloc_r+0x80>
 8012382:	2501      	movs	r5, #1
 8012384:	0011      	movs	r1, r2
 8012386:	43a9      	bics	r1, r5
 8012388:	1859      	adds	r1, r3, r1
 801238a:	6849      	ldr	r1, [r1, #4]
 801238c:	4229      	tst	r1, r5
 801238e:	d144      	bne.n	801241a <_realloc_r+0x10a>
 8012390:	2103      	movs	r1, #3
 8012392:	438a      	bics	r2, r1
 8012394:	9903      	ldr	r1, [sp, #12]
 8012396:	188e      	adds	r6, r1, r2
 8012398:	9900      	ldr	r1, [sp, #0]
 801239a:	459c      	cmp	ip, r3
 801239c:	d117      	bne.n	80123ce <_realloc_r+0xbe>
 801239e:	3110      	adds	r1, #16
 80123a0:	42b1      	cmp	r1, r6
 80123a2:	dc3c      	bgt.n	801241e <_realloc_r+0x10e>
 80123a4:	9a00      	ldr	r2, [sp, #0]
 80123a6:	2101      	movs	r1, #1
 80123a8:	4694      	mov	ip, r2
 80123aa:	1ab6      	subs	r6, r6, r2
 80123ac:	0022      	movs	r2, r4
 80123ae:	9b04      	ldr	r3, [sp, #16]
 80123b0:	430e      	orrs	r6, r1
 80123b2:	4463      	add	r3, ip
 80123b4:	6083      	str	r3, [r0, #8]
 80123b6:	3a08      	subs	r2, #8
 80123b8:	605e      	str	r6, [r3, #4]
 80123ba:	6853      	ldr	r3, [r2, #4]
 80123bc:	9801      	ldr	r0, [sp, #4]
 80123be:	400b      	ands	r3, r1
 80123c0:	4661      	mov	r1, ip
 80123c2:	430b      	orrs	r3, r1
 80123c4:	6053      	str	r3, [r2, #4]
 80123c6:	f7f9 ff27 	bl	800c218 <__malloc_unlock>
 80123ca:	0027      	movs	r7, r4
 80123cc:	e7aa      	b.n	8012324 <_realloc_r+0x14>
 80123ce:	42b1      	cmp	r1, r6
 80123d0:	dc25      	bgt.n	801241e <_realloc_r+0x10e>
 80123d2:	68da      	ldr	r2, [r3, #12]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	60da      	str	r2, [r3, #12]
 80123d8:	6093      	str	r3, [r2, #8]
 80123da:	9b00      	ldr	r3, [sp, #0]
 80123dc:	9a02      	ldr	r2, [sp, #8]
 80123de:	1af4      	subs	r4, r6, r3
 80123e0:	9b02      	ldr	r3, [sp, #8]
 80123e2:	1992      	adds	r2, r2, r6
 80123e4:	6858      	ldr	r0, [r3, #4]
 80123e6:	2301      	movs	r3, #1
 80123e8:	4018      	ands	r0, r3
 80123ea:	2c0f      	cmp	r4, #15
 80123ec:	d800      	bhi.n	80123f0 <_realloc_r+0xe0>
 80123ee:	e12c      	b.n	801264a <_realloc_r+0x33a>
 80123f0:	9d00      	ldr	r5, [sp, #0]
 80123f2:	9902      	ldr	r1, [sp, #8]
 80123f4:	4328      	orrs	r0, r5
 80123f6:	1949      	adds	r1, r1, r5
 80123f8:	9d02      	ldr	r5, [sp, #8]
 80123fa:	431c      	orrs	r4, r3
 80123fc:	6068      	str	r0, [r5, #4]
 80123fe:	604c      	str	r4, [r1, #4]
 8012400:	6850      	ldr	r0, [r2, #4]
 8012402:	3108      	adds	r1, #8
 8012404:	4303      	orrs	r3, r0
 8012406:	6053      	str	r3, [r2, #4]
 8012408:	9801      	ldr	r0, [sp, #4]
 801240a:	f7fb f9a3 	bl	800d754 <_free_r>
 801240e:	9801      	ldr	r0, [sp, #4]
 8012410:	f7f9 ff02 	bl	800c218 <__malloc_unlock>
 8012414:	9f02      	ldr	r7, [sp, #8]
 8012416:	3708      	adds	r7, #8
 8012418:	e784      	b.n	8012324 <_realloc_r+0x14>
 801241a:	2200      	movs	r2, #0
 801241c:	0013      	movs	r3, r2
 801241e:	07ff      	lsls	r7, r7, #31
 8012420:	d500      	bpl.n	8012424 <_realloc_r+0x114>
 8012422:	e0c6      	b.n	80125b2 <_realloc_r+0x2a2>
 8012424:	0021      	movs	r1, r4
 8012426:	2003      	movs	r0, #3
 8012428:	3908      	subs	r1, #8
 801242a:	680d      	ldr	r5, [r1, #0]
 801242c:	9904      	ldr	r1, [sp, #16]
 801242e:	1b4d      	subs	r5, r1, r5
 8012430:	6869      	ldr	r1, [r5, #4]
 8012432:	4381      	bics	r1, r0
 8012434:	9803      	ldr	r0, [sp, #12]
 8012436:	180f      	adds	r7, r1, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	d100      	bne.n	801243e <_realloc_r+0x12e>
 801243c:	e084      	b.n	8012548 <_realloc_r+0x238>
 801243e:	19d6      	adds	r6, r2, r7
 8012440:	459c      	cmp	ip, r3
 8012442:	d148      	bne.n	80124d6 <_realloc_r+0x1c6>
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	3310      	adds	r3, #16
 8012448:	42b3      	cmp	r3, r6
 801244a:	dc7d      	bgt.n	8012548 <_realloc_r+0x238>
 801244c:	68aa      	ldr	r2, [r5, #8]
 801244e:	68eb      	ldr	r3, [r5, #12]
 8012450:	002f      	movs	r7, r5
 8012452:	60d3      	str	r3, [r2, #12]
 8012454:	609a      	str	r2, [r3, #8]
 8012456:	0002      	movs	r2, r0
 8012458:	3a04      	subs	r2, #4
 801245a:	3708      	adds	r7, #8
 801245c:	2a24      	cmp	r2, #36	; 0x24
 801245e:	d835      	bhi.n	80124cc <_realloc_r+0x1bc>
 8012460:	003b      	movs	r3, r7
 8012462:	2a13      	cmp	r2, #19
 8012464:	d908      	bls.n	8012478 <_realloc_r+0x168>
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	60ab      	str	r3, [r5, #8]
 801246a:	6863      	ldr	r3, [r4, #4]
 801246c:	60eb      	str	r3, [r5, #12]
 801246e:	2a1b      	cmp	r2, #27
 8012470:	d81a      	bhi.n	80124a8 <_realloc_r+0x198>
 8012472:	002b      	movs	r3, r5
 8012474:	3408      	adds	r4, #8
 8012476:	3310      	adds	r3, #16
 8012478:	6822      	ldr	r2, [r4, #0]
 801247a:	601a      	str	r2, [r3, #0]
 801247c:	6862      	ldr	r2, [r4, #4]
 801247e:	605a      	str	r2, [r3, #4]
 8012480:	68a2      	ldr	r2, [r4, #8]
 8012482:	609a      	str	r2, [r3, #8]
 8012484:	9b00      	ldr	r3, [sp, #0]
 8012486:	4a74      	ldr	r2, [pc, #464]	; (8012658 <_realloc_r+0x348>)
 8012488:	18eb      	adds	r3, r5, r3
 801248a:	6093      	str	r3, [r2, #8]
 801248c:	9a00      	ldr	r2, [sp, #0]
 801248e:	1ab6      	subs	r6, r6, r2
 8012490:	2201      	movs	r2, #1
 8012492:	4316      	orrs	r6, r2
 8012494:	605e      	str	r6, [r3, #4]
 8012496:	686b      	ldr	r3, [r5, #4]
 8012498:	4013      	ands	r3, r2
 801249a:	9a00      	ldr	r2, [sp, #0]
 801249c:	4313      	orrs	r3, r2
 801249e:	606b      	str	r3, [r5, #4]
 80124a0:	9801      	ldr	r0, [sp, #4]
 80124a2:	f7f9 feb9 	bl	800c218 <__malloc_unlock>
 80124a6:	e73d      	b.n	8012324 <_realloc_r+0x14>
 80124a8:	68a3      	ldr	r3, [r4, #8]
 80124aa:	612b      	str	r3, [r5, #16]
 80124ac:	68e3      	ldr	r3, [r4, #12]
 80124ae:	616b      	str	r3, [r5, #20]
 80124b0:	2a24      	cmp	r2, #36	; 0x24
 80124b2:	d003      	beq.n	80124bc <_realloc_r+0x1ac>
 80124b4:	002b      	movs	r3, r5
 80124b6:	3410      	adds	r4, #16
 80124b8:	3318      	adds	r3, #24
 80124ba:	e7dd      	b.n	8012478 <_realloc_r+0x168>
 80124bc:	6923      	ldr	r3, [r4, #16]
 80124be:	61ab      	str	r3, [r5, #24]
 80124c0:	002b      	movs	r3, r5
 80124c2:	6962      	ldr	r2, [r4, #20]
 80124c4:	3320      	adds	r3, #32
 80124c6:	61ea      	str	r2, [r5, #28]
 80124c8:	3418      	adds	r4, #24
 80124ca:	e7d5      	b.n	8012478 <_realloc_r+0x168>
 80124cc:	0021      	movs	r1, r4
 80124ce:	0038      	movs	r0, r7
 80124d0:	f001 fb2f 	bl	8013b32 <memmove>
 80124d4:	e7d6      	b.n	8012484 <_realloc_r+0x174>
 80124d6:	9a00      	ldr	r2, [sp, #0]
 80124d8:	42b2      	cmp	r2, r6
 80124da:	dc35      	bgt.n	8012548 <_realloc_r+0x238>
 80124dc:	0028      	movs	r0, r5
 80124de:	68da      	ldr	r2, [r3, #12]
 80124e0:	689b      	ldr	r3, [r3, #8]
 80124e2:	3008      	adds	r0, #8
 80124e4:	60da      	str	r2, [r3, #12]
 80124e6:	6093      	str	r3, [r2, #8]
 80124e8:	68aa      	ldr	r2, [r5, #8]
 80124ea:	68eb      	ldr	r3, [r5, #12]
 80124ec:	60d3      	str	r3, [r2, #12]
 80124ee:	609a      	str	r2, [r3, #8]
 80124f0:	9a03      	ldr	r2, [sp, #12]
 80124f2:	3a04      	subs	r2, #4
 80124f4:	2a24      	cmp	r2, #36	; 0x24
 80124f6:	d823      	bhi.n	8012540 <_realloc_r+0x230>
 80124f8:	2a13      	cmp	r2, #19
 80124fa:	d907      	bls.n	801250c <_realloc_r+0x1fc>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	60ab      	str	r3, [r5, #8]
 8012500:	6863      	ldr	r3, [r4, #4]
 8012502:	60eb      	str	r3, [r5, #12]
 8012504:	2a1b      	cmp	r2, #27
 8012506:	d809      	bhi.n	801251c <_realloc_r+0x20c>
 8012508:	3408      	adds	r4, #8
 801250a:	3008      	adds	r0, #8
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	6003      	str	r3, [r0, #0]
 8012510:	6863      	ldr	r3, [r4, #4]
 8012512:	6043      	str	r3, [r0, #4]
 8012514:	68a3      	ldr	r3, [r4, #8]
 8012516:	6083      	str	r3, [r0, #8]
 8012518:	9502      	str	r5, [sp, #8]
 801251a:	e75e      	b.n	80123da <_realloc_r+0xca>
 801251c:	68a3      	ldr	r3, [r4, #8]
 801251e:	612b      	str	r3, [r5, #16]
 8012520:	68e3      	ldr	r3, [r4, #12]
 8012522:	616b      	str	r3, [r5, #20]
 8012524:	2a24      	cmp	r2, #36	; 0x24
 8012526:	d003      	beq.n	8012530 <_realloc_r+0x220>
 8012528:	0028      	movs	r0, r5
 801252a:	3410      	adds	r4, #16
 801252c:	3018      	adds	r0, #24
 801252e:	e7ed      	b.n	801250c <_realloc_r+0x1fc>
 8012530:	0028      	movs	r0, r5
 8012532:	6923      	ldr	r3, [r4, #16]
 8012534:	3020      	adds	r0, #32
 8012536:	61ab      	str	r3, [r5, #24]
 8012538:	6963      	ldr	r3, [r4, #20]
 801253a:	3418      	adds	r4, #24
 801253c:	61eb      	str	r3, [r5, #28]
 801253e:	e7e5      	b.n	801250c <_realloc_r+0x1fc>
 8012540:	0021      	movs	r1, r4
 8012542:	f001 faf6 	bl	8013b32 <memmove>
 8012546:	e7e7      	b.n	8012518 <_realloc_r+0x208>
 8012548:	9b00      	ldr	r3, [sp, #0]
 801254a:	42bb      	cmp	r3, r7
 801254c:	dc31      	bgt.n	80125b2 <_realloc_r+0x2a2>
 801254e:	0028      	movs	r0, r5
 8012550:	68aa      	ldr	r2, [r5, #8]
 8012552:	68eb      	ldr	r3, [r5, #12]
 8012554:	3008      	adds	r0, #8
 8012556:	60d3      	str	r3, [r2, #12]
 8012558:	609a      	str	r2, [r3, #8]
 801255a:	9a03      	ldr	r2, [sp, #12]
 801255c:	3a04      	subs	r2, #4
 801255e:	2a24      	cmp	r2, #36	; 0x24
 8012560:	d823      	bhi.n	80125aa <_realloc_r+0x29a>
 8012562:	2a13      	cmp	r2, #19
 8012564:	d907      	bls.n	8012576 <_realloc_r+0x266>
 8012566:	6823      	ldr	r3, [r4, #0]
 8012568:	60ab      	str	r3, [r5, #8]
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	60eb      	str	r3, [r5, #12]
 801256e:	2a1b      	cmp	r2, #27
 8012570:	d809      	bhi.n	8012586 <_realloc_r+0x276>
 8012572:	3408      	adds	r4, #8
 8012574:	3008      	adds	r0, #8
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	6003      	str	r3, [r0, #0]
 801257a:	6863      	ldr	r3, [r4, #4]
 801257c:	6043      	str	r3, [r0, #4]
 801257e:	68a3      	ldr	r3, [r4, #8]
 8012580:	6083      	str	r3, [r0, #8]
 8012582:	003e      	movs	r6, r7
 8012584:	e7c8      	b.n	8012518 <_realloc_r+0x208>
 8012586:	68a3      	ldr	r3, [r4, #8]
 8012588:	612b      	str	r3, [r5, #16]
 801258a:	68e3      	ldr	r3, [r4, #12]
 801258c:	616b      	str	r3, [r5, #20]
 801258e:	2a24      	cmp	r2, #36	; 0x24
 8012590:	d003      	beq.n	801259a <_realloc_r+0x28a>
 8012592:	0028      	movs	r0, r5
 8012594:	3410      	adds	r4, #16
 8012596:	3018      	adds	r0, #24
 8012598:	e7ed      	b.n	8012576 <_realloc_r+0x266>
 801259a:	0028      	movs	r0, r5
 801259c:	6923      	ldr	r3, [r4, #16]
 801259e:	3020      	adds	r0, #32
 80125a0:	61ab      	str	r3, [r5, #24]
 80125a2:	6963      	ldr	r3, [r4, #20]
 80125a4:	3418      	adds	r4, #24
 80125a6:	61eb      	str	r3, [r5, #28]
 80125a8:	e7e5      	b.n	8012576 <_realloc_r+0x266>
 80125aa:	0021      	movs	r1, r4
 80125ac:	f001 fac1 	bl	8013b32 <memmove>
 80125b0:	e7e7      	b.n	8012582 <_realloc_r+0x272>
 80125b2:	9905      	ldr	r1, [sp, #20]
 80125b4:	9801      	ldr	r0, [sp, #4]
 80125b6:	f7f9 fc13 	bl	800bde0 <_malloc_r>
 80125ba:	1e07      	subs	r7, r0, #0
 80125bc:	d100      	bne.n	80125c0 <_realloc_r+0x2b0>
 80125be:	e76f      	b.n	80124a0 <_realloc_r+0x190>
 80125c0:	0023      	movs	r3, r4
 80125c2:	2201      	movs	r2, #1
 80125c4:	3b08      	subs	r3, #8
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	4393      	bics	r3, r2
 80125ca:	9a04      	ldr	r2, [sp, #16]
 80125cc:	18d3      	adds	r3, r2, r3
 80125ce:	0002      	movs	r2, r0
 80125d0:	3a08      	subs	r2, #8
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d105      	bne.n	80125e2 <_realloc_r+0x2d2>
 80125d6:	685e      	ldr	r6, [r3, #4]
 80125d8:	2303      	movs	r3, #3
 80125da:	439e      	bics	r6, r3
 80125dc:	9b03      	ldr	r3, [sp, #12]
 80125de:	18f6      	adds	r6, r6, r3
 80125e0:	e6fb      	b.n	80123da <_realloc_r+0xca>
 80125e2:	9a03      	ldr	r2, [sp, #12]
 80125e4:	3a04      	subs	r2, #4
 80125e6:	2a24      	cmp	r2, #36	; 0x24
 80125e8:	d829      	bhi.n	801263e <_realloc_r+0x32e>
 80125ea:	0003      	movs	r3, r0
 80125ec:	0021      	movs	r1, r4
 80125ee:	2a13      	cmp	r2, #19
 80125f0:	d908      	bls.n	8012604 <_realloc_r+0x2f4>
 80125f2:	6823      	ldr	r3, [r4, #0]
 80125f4:	6003      	str	r3, [r0, #0]
 80125f6:	6863      	ldr	r3, [r4, #4]
 80125f8:	6043      	str	r3, [r0, #4]
 80125fa:	2a1b      	cmp	r2, #27
 80125fc:	d80d      	bhi.n	801261a <_realloc_r+0x30a>
 80125fe:	0003      	movs	r3, r0
 8012600:	3108      	adds	r1, #8
 8012602:	3308      	adds	r3, #8
 8012604:	680a      	ldr	r2, [r1, #0]
 8012606:	601a      	str	r2, [r3, #0]
 8012608:	684a      	ldr	r2, [r1, #4]
 801260a:	605a      	str	r2, [r3, #4]
 801260c:	688a      	ldr	r2, [r1, #8]
 801260e:	609a      	str	r2, [r3, #8]
 8012610:	0021      	movs	r1, r4
 8012612:	9801      	ldr	r0, [sp, #4]
 8012614:	f7fb f89e 	bl	800d754 <_free_r>
 8012618:	e742      	b.n	80124a0 <_realloc_r+0x190>
 801261a:	68a3      	ldr	r3, [r4, #8]
 801261c:	6083      	str	r3, [r0, #8]
 801261e:	68e3      	ldr	r3, [r4, #12]
 8012620:	60c3      	str	r3, [r0, #12]
 8012622:	2a24      	cmp	r2, #36	; 0x24
 8012624:	d003      	beq.n	801262e <_realloc_r+0x31e>
 8012626:	0003      	movs	r3, r0
 8012628:	3110      	adds	r1, #16
 801262a:	3310      	adds	r3, #16
 801262c:	e7ea      	b.n	8012604 <_realloc_r+0x2f4>
 801262e:	6923      	ldr	r3, [r4, #16]
 8012630:	3118      	adds	r1, #24
 8012632:	6103      	str	r3, [r0, #16]
 8012634:	0003      	movs	r3, r0
 8012636:	6962      	ldr	r2, [r4, #20]
 8012638:	3318      	adds	r3, #24
 801263a:	6142      	str	r2, [r0, #20]
 801263c:	e7e2      	b.n	8012604 <_realloc_r+0x2f4>
 801263e:	0021      	movs	r1, r4
 8012640:	f001 fa77 	bl	8013b32 <memmove>
 8012644:	e7e4      	b.n	8012610 <_realloc_r+0x300>
 8012646:	9e03      	ldr	r6, [sp, #12]
 8012648:	e6c7      	b.n	80123da <_realloc_r+0xca>
 801264a:	9902      	ldr	r1, [sp, #8]
 801264c:	4306      	orrs	r6, r0
 801264e:	604e      	str	r6, [r1, #4]
 8012650:	6851      	ldr	r1, [r2, #4]
 8012652:	430b      	orrs	r3, r1
 8012654:	6053      	str	r3, [r2, #4]
 8012656:	e6da      	b.n	801240e <_realloc_r+0xfe>
 8012658:	20000028 	.word	0x20000028

0801265c <_strtoll_l.constprop.0>:
 801265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801265e:	b08d      	sub	sp, #52	; 0x34
 8012660:	9203      	str	r2, [sp, #12]
 8012662:	4a53      	ldr	r2, [pc, #332]	; (80127b0 <_strtoll_l.constprop.0+0x154>)
 8012664:	001e      	movs	r6, r3
 8012666:	9102      	str	r1, [sp, #8]
 8012668:	000b      	movs	r3, r1
 801266a:	4694      	mov	ip, r2
 801266c:	2108      	movs	r1, #8
 801266e:	900a      	str	r0, [sp, #40]	; 0x28
 8012670:	001a      	movs	r2, r3
 8012672:	4660      	mov	r0, ip
 8012674:	7814      	ldrb	r4, [r2, #0]
 8012676:	3301      	adds	r3, #1
 8012678:	5d00      	ldrb	r0, [r0, r4]
 801267a:	001d      	movs	r5, r3
 801267c:	0007      	movs	r7, r0
 801267e:	400f      	ands	r7, r1
 8012680:	4208      	tst	r0, r1
 8012682:	d1f5      	bne.n	8012670 <_strtoll_l.constprop.0+0x14>
 8012684:	2c2d      	cmp	r4, #45	; 0x2d
 8012686:	d153      	bne.n	8012730 <_strtoll_l.constprop.0+0xd4>
 8012688:	781c      	ldrb	r4, [r3, #0]
 801268a:	2301      	movs	r3, #1
 801268c:	1c95      	adds	r5, r2, #2
 801268e:	9301      	str	r3, [sp, #4]
 8012690:	2e00      	cmp	r6, #0
 8012692:	d100      	bne.n	8012696 <_strtoll_l.constprop.0+0x3a>
 8012694:	e086      	b.n	80127a4 <_strtoll_l.constprop.0+0x148>
 8012696:	2e10      	cmp	r6, #16
 8012698:	d10a      	bne.n	80126b0 <_strtoll_l.constprop.0+0x54>
 801269a:	2c30      	cmp	r4, #48	; 0x30
 801269c:	d108      	bne.n	80126b0 <_strtoll_l.constprop.0+0x54>
 801269e:	2220      	movs	r2, #32
 80126a0:	782b      	ldrb	r3, [r5, #0]
 80126a2:	4393      	bics	r3, r2
 80126a4:	2b58      	cmp	r3, #88	; 0x58
 80126a6:	d000      	beq.n	80126aa <_strtoll_l.constprop.0+0x4e>
 80126a8:	e076      	b.n	8012798 <_strtoll_l.constprop.0+0x13c>
 80126aa:	2610      	movs	r6, #16
 80126ac:	786c      	ldrb	r4, [r5, #1]
 80126ae:	3502      	adds	r5, #2
 80126b0:	2001      	movs	r0, #1
 80126b2:	2300      	movs	r3, #0
 80126b4:	493f      	ldr	r1, [pc, #252]	; (80127b4 <_strtoll_l.constprop.0+0x158>)
 80126b6:	9a01      	ldr	r2, [sp, #4]
 80126b8:	4240      	negs	r0, r0
 80126ba:	1812      	adds	r2, r2, r0
 80126bc:	414b      	adcs	r3, r1
 80126be:	9204      	str	r2, [sp, #16]
 80126c0:	9305      	str	r3, [sp, #20]
 80126c2:	9804      	ldr	r0, [sp, #16]
 80126c4:	9905      	ldr	r1, [sp, #20]
 80126c6:	17f3      	asrs	r3, r6, #31
 80126c8:	0032      	movs	r2, r6
 80126ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80126cc:	f7ed feea 	bl	80004a4 <__aeabi_uldivmod>
 80126d0:	2300      	movs	r3, #0
 80126d2:	000f      	movs	r7, r1
 80126d4:	9008      	str	r0, [sp, #32]
 80126d6:	2100      	movs	r1, #0
 80126d8:	2000      	movs	r0, #0
 80126da:	9209      	str	r2, [sp, #36]	; 0x24
 80126dc:	0022      	movs	r2, r4
 80126de:	3a30      	subs	r2, #48	; 0x30
 80126e0:	2a09      	cmp	r2, #9
 80126e2:	d82b      	bhi.n	801273c <_strtoll_l.constprop.0+0xe0>
 80126e4:	0014      	movs	r4, r2
 80126e6:	42a6      	cmp	r6, r4
 80126e8:	dd37      	ble.n	801275a <_strtoll_l.constprop.0+0xfe>
 80126ea:	1c5a      	adds	r2, r3, #1
 80126ec:	d01d      	beq.n	801272a <_strtoll_l.constprop.0+0xce>
 80126ee:	42b9      	cmp	r1, r7
 80126f0:	d830      	bhi.n	8012754 <_strtoll_l.constprop.0+0xf8>
 80126f2:	d102      	bne.n	80126fa <_strtoll_l.constprop.0+0x9e>
 80126f4:	9b08      	ldr	r3, [sp, #32]
 80126f6:	4298      	cmp	r0, r3
 80126f8:	d82c      	bhi.n	8012754 <_strtoll_l.constprop.0+0xf8>
 80126fa:	9b08      	ldr	r3, [sp, #32]
 80126fc:	4283      	cmp	r3, r0
 80126fe:	d106      	bne.n	801270e <_strtoll_l.constprop.0+0xb2>
 8012700:	428f      	cmp	r7, r1
 8012702:	d104      	bne.n	801270e <_strtoll_l.constprop.0+0xb2>
 8012704:	2301      	movs	r3, #1
 8012706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012708:	425b      	negs	r3, r3
 801270a:	42a2      	cmp	r2, r4
 801270c:	db0d      	blt.n	801272a <_strtoll_l.constprop.0+0xce>
 801270e:	000b      	movs	r3, r1
 8012710:	0002      	movs	r2, r0
 8012712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012714:	0030      	movs	r0, r6
 8012716:	f7ed fee5 	bl	80004e4 <__aeabi_lmul>
 801271a:	17e3      	asrs	r3, r4, #31
 801271c:	9406      	str	r4, [sp, #24]
 801271e:	9307      	str	r3, [sp, #28]
 8012720:	9b06      	ldr	r3, [sp, #24]
 8012722:	9c07      	ldr	r4, [sp, #28]
 8012724:	18c0      	adds	r0, r0, r3
 8012726:	4161      	adcs	r1, r4
 8012728:	2301      	movs	r3, #1
 801272a:	782c      	ldrb	r4, [r5, #0]
 801272c:	3501      	adds	r5, #1
 801272e:	e7d5      	b.n	80126dc <_strtoll_l.constprop.0+0x80>
 8012730:	9701      	str	r7, [sp, #4]
 8012732:	2c2b      	cmp	r4, #43	; 0x2b
 8012734:	d1ac      	bne.n	8012690 <_strtoll_l.constprop.0+0x34>
 8012736:	781c      	ldrb	r4, [r3, #0]
 8012738:	1c95      	adds	r5, r2, #2
 801273a:	e7a9      	b.n	8012690 <_strtoll_l.constprop.0+0x34>
 801273c:	0022      	movs	r2, r4
 801273e:	3a41      	subs	r2, #65	; 0x41
 8012740:	2a19      	cmp	r2, #25
 8012742:	d801      	bhi.n	8012748 <_strtoll_l.constprop.0+0xec>
 8012744:	3c37      	subs	r4, #55	; 0x37
 8012746:	e7ce      	b.n	80126e6 <_strtoll_l.constprop.0+0x8a>
 8012748:	0022      	movs	r2, r4
 801274a:	3a61      	subs	r2, #97	; 0x61
 801274c:	2a19      	cmp	r2, #25
 801274e:	d804      	bhi.n	801275a <_strtoll_l.constprop.0+0xfe>
 8012750:	3c57      	subs	r4, #87	; 0x57
 8012752:	e7c8      	b.n	80126e6 <_strtoll_l.constprop.0+0x8a>
 8012754:	2301      	movs	r3, #1
 8012756:	425b      	negs	r3, r3
 8012758:	e7e7      	b.n	801272a <_strtoll_l.constprop.0+0xce>
 801275a:	1c5a      	adds	r2, r3, #1
 801275c:	d109      	bne.n	8012772 <_strtoll_l.constprop.0+0x116>
 801275e:	9804      	ldr	r0, [sp, #16]
 8012760:	9905      	ldr	r1, [sp, #20]
 8012762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012764:	3323      	adds	r3, #35	; 0x23
 8012766:	6013      	str	r3, [r2, #0]
 8012768:	9b03      	ldr	r3, [sp, #12]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10e      	bne.n	801278c <_strtoll_l.constprop.0+0x130>
 801276e:	b00d      	add	sp, #52	; 0x34
 8012770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012772:	9a01      	ldr	r2, [sp, #4]
 8012774:	2a00      	cmp	r2, #0
 8012776:	d004      	beq.n	8012782 <_strtoll_l.constprop.0+0x126>
 8012778:	0006      	movs	r6, r0
 801277a:	000f      	movs	r7, r1
 801277c:	2100      	movs	r1, #0
 801277e:	4270      	negs	r0, r6
 8012780:	41b9      	sbcs	r1, r7
 8012782:	9a03      	ldr	r2, [sp, #12]
 8012784:	2a00      	cmp	r2, #0
 8012786:	d0f2      	beq.n	801276e <_strtoll_l.constprop.0+0x112>
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <_strtoll_l.constprop.0+0x134>
 801278c:	1e6b      	subs	r3, r5, #1
 801278e:	9302      	str	r3, [sp, #8]
 8012790:	9b03      	ldr	r3, [sp, #12]
 8012792:	9a02      	ldr	r2, [sp, #8]
 8012794:	601a      	str	r2, [r3, #0]
 8012796:	e7ea      	b.n	801276e <_strtoll_l.constprop.0+0x112>
 8012798:	2430      	movs	r4, #48	; 0x30
 801279a:	2e00      	cmp	r6, #0
 801279c:	d000      	beq.n	80127a0 <_strtoll_l.constprop.0+0x144>
 801279e:	e787      	b.n	80126b0 <_strtoll_l.constprop.0+0x54>
 80127a0:	3608      	adds	r6, #8
 80127a2:	e785      	b.n	80126b0 <_strtoll_l.constprop.0+0x54>
 80127a4:	2c30      	cmp	r4, #48	; 0x30
 80127a6:	d100      	bne.n	80127aa <_strtoll_l.constprop.0+0x14e>
 80127a8:	e779      	b.n	801269e <_strtoll_l.constprop.0+0x42>
 80127aa:	260a      	movs	r6, #10
 80127ac:	e780      	b.n	80126b0 <_strtoll_l.constprop.0+0x54>
 80127ae:	46c0      	nop			; (mov r8, r8)
 80127b0:	08015b89 	.word	0x08015b89
 80127b4:	7fffffff 	.word	0x7fffffff

080127b8 <_strtoll_r>:
 80127b8:	b510      	push	{r4, lr}
 80127ba:	f7ff ff4f 	bl	801265c <_strtoll_l.constprop.0>
 80127be:	bd10      	pop	{r4, pc}

080127c0 <_strtoull_l.constprop.0>:
 80127c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c2:	b08b      	sub	sp, #44	; 0x2c
 80127c4:	9202      	str	r2, [sp, #8]
 80127c6:	4a54      	ldr	r2, [pc, #336]	; (8012918 <_strtoull_l.constprop.0+0x158>)
 80127c8:	001e      	movs	r6, r3
 80127ca:	9101      	str	r1, [sp, #4]
 80127cc:	000b      	movs	r3, r1
 80127ce:	4694      	mov	ip, r2
 80127d0:	2108      	movs	r1, #8
 80127d2:	9009      	str	r0, [sp, #36]	; 0x24
 80127d4:	001a      	movs	r2, r3
 80127d6:	4660      	mov	r0, ip
 80127d8:	7814      	ldrb	r4, [r2, #0]
 80127da:	3301      	adds	r3, #1
 80127dc:	5d00      	ldrb	r0, [r0, r4]
 80127de:	001d      	movs	r5, r3
 80127e0:	0007      	movs	r7, r0
 80127e2:	400f      	ands	r7, r1
 80127e4:	4208      	tst	r0, r1
 80127e6:	d1f5      	bne.n	80127d4 <_strtoull_l.constprop.0+0x14>
 80127e8:	2c2d      	cmp	r4, #45	; 0x2d
 80127ea:	d154      	bne.n	8012896 <_strtoull_l.constprop.0+0xd6>
 80127ec:	781c      	ldrb	r4, [r3, #0]
 80127ee:	2301      	movs	r3, #1
 80127f0:	1c95      	adds	r5, r2, #2
 80127f2:	9306      	str	r3, [sp, #24]
 80127f4:	2e00      	cmp	r6, #0
 80127f6:	d100      	bne.n	80127fa <_strtoull_l.constprop.0+0x3a>
 80127f8:	e088      	b.n	801290c <_strtoull_l.constprop.0+0x14c>
 80127fa:	2e10      	cmp	r6, #16
 80127fc:	d10a      	bne.n	8012814 <_strtoull_l.constprop.0+0x54>
 80127fe:	2c30      	cmp	r4, #48	; 0x30
 8012800:	d108      	bne.n	8012814 <_strtoull_l.constprop.0+0x54>
 8012802:	2220      	movs	r2, #32
 8012804:	782b      	ldrb	r3, [r5, #0]
 8012806:	4393      	bics	r3, r2
 8012808:	2b58      	cmp	r3, #88	; 0x58
 801280a:	d000      	beq.n	801280e <_strtoull_l.constprop.0+0x4e>
 801280c:	e078      	b.n	8012900 <_strtoull_l.constprop.0+0x140>
 801280e:	2610      	movs	r6, #16
 8012810:	786c      	ldrb	r4, [r5, #1]
 8012812:	3502      	adds	r5, #2
 8012814:	17f7      	asrs	r7, r6, #31
 8012816:	0032      	movs	r2, r6
 8012818:	003b      	movs	r3, r7
 801281a:	2001      	movs	r0, #1
 801281c:	4240      	negs	r0, r0
 801281e:	17c1      	asrs	r1, r0, #31
 8012820:	f7ed fe40 	bl	80004a4 <__aeabi_uldivmod>
 8012824:	0032      	movs	r2, r6
 8012826:	9007      	str	r0, [sp, #28]
 8012828:	9103      	str	r1, [sp, #12]
 801282a:	003b      	movs	r3, r7
 801282c:	2001      	movs	r0, #1
 801282e:	4240      	negs	r0, r0
 8012830:	17c1      	asrs	r1, r0, #31
 8012832:	f7ed fe37 	bl	80004a4 <__aeabi_uldivmod>
 8012836:	2300      	movs	r3, #0
 8012838:	2000      	movs	r0, #0
 801283a:	2100      	movs	r1, #0
 801283c:	9208      	str	r2, [sp, #32]
 801283e:	0022      	movs	r2, r4
 8012840:	3a30      	subs	r2, #48	; 0x30
 8012842:	2a09      	cmp	r2, #9
 8012844:	d82d      	bhi.n	80128a2 <_strtoull_l.constprop.0+0xe2>
 8012846:	0014      	movs	r4, r2
 8012848:	42a6      	cmp	r6, r4
 801284a:	dd39      	ble.n	80128c0 <_strtoull_l.constprop.0+0x100>
 801284c:	1c5a      	adds	r2, r3, #1
 801284e:	d01f      	beq.n	8012890 <_strtoull_l.constprop.0+0xd0>
 8012850:	9b03      	ldr	r3, [sp, #12]
 8012852:	4299      	cmp	r1, r3
 8012854:	d831      	bhi.n	80128ba <_strtoull_l.constprop.0+0xfa>
 8012856:	d102      	bne.n	801285e <_strtoull_l.constprop.0+0x9e>
 8012858:	9b07      	ldr	r3, [sp, #28]
 801285a:	4298      	cmp	r0, r3
 801285c:	d82d      	bhi.n	80128ba <_strtoull_l.constprop.0+0xfa>
 801285e:	9b07      	ldr	r3, [sp, #28]
 8012860:	4283      	cmp	r3, r0
 8012862:	d107      	bne.n	8012874 <_strtoull_l.constprop.0+0xb4>
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	428b      	cmp	r3, r1
 8012868:	d104      	bne.n	8012874 <_strtoull_l.constprop.0+0xb4>
 801286a:	2301      	movs	r3, #1
 801286c:	9a08      	ldr	r2, [sp, #32]
 801286e:	425b      	negs	r3, r3
 8012870:	42a2      	cmp	r2, r4
 8012872:	db0d      	blt.n	8012890 <_strtoull_l.constprop.0+0xd0>
 8012874:	000b      	movs	r3, r1
 8012876:	0002      	movs	r2, r0
 8012878:	0039      	movs	r1, r7
 801287a:	0030      	movs	r0, r6
 801287c:	f7ed fe32 	bl	80004e4 <__aeabi_lmul>
 8012880:	17e3      	asrs	r3, r4, #31
 8012882:	9404      	str	r4, [sp, #16]
 8012884:	9305      	str	r3, [sp, #20]
 8012886:	9b04      	ldr	r3, [sp, #16]
 8012888:	9c05      	ldr	r4, [sp, #20]
 801288a:	18c0      	adds	r0, r0, r3
 801288c:	4161      	adcs	r1, r4
 801288e:	2301      	movs	r3, #1
 8012890:	782c      	ldrb	r4, [r5, #0]
 8012892:	3501      	adds	r5, #1
 8012894:	e7d3      	b.n	801283e <_strtoull_l.constprop.0+0x7e>
 8012896:	9706      	str	r7, [sp, #24]
 8012898:	2c2b      	cmp	r4, #43	; 0x2b
 801289a:	d1ab      	bne.n	80127f4 <_strtoull_l.constprop.0+0x34>
 801289c:	781c      	ldrb	r4, [r3, #0]
 801289e:	1c95      	adds	r5, r2, #2
 80128a0:	e7a8      	b.n	80127f4 <_strtoull_l.constprop.0+0x34>
 80128a2:	0022      	movs	r2, r4
 80128a4:	3a41      	subs	r2, #65	; 0x41
 80128a6:	2a19      	cmp	r2, #25
 80128a8:	d801      	bhi.n	80128ae <_strtoull_l.constprop.0+0xee>
 80128aa:	3c37      	subs	r4, #55	; 0x37
 80128ac:	e7cc      	b.n	8012848 <_strtoull_l.constprop.0+0x88>
 80128ae:	0022      	movs	r2, r4
 80128b0:	3a61      	subs	r2, #97	; 0x61
 80128b2:	2a19      	cmp	r2, #25
 80128b4:	d804      	bhi.n	80128c0 <_strtoull_l.constprop.0+0x100>
 80128b6:	3c57      	subs	r4, #87	; 0x57
 80128b8:	e7c6      	b.n	8012848 <_strtoull_l.constprop.0+0x88>
 80128ba:	2301      	movs	r3, #1
 80128bc:	425b      	negs	r3, r3
 80128be:	e7e7      	b.n	8012890 <_strtoull_l.constprop.0+0xd0>
 80128c0:	1c5a      	adds	r2, r3, #1
 80128c2:	d10a      	bne.n	80128da <_strtoull_l.constprop.0+0x11a>
 80128c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128c6:	3323      	adds	r3, #35	; 0x23
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	9b02      	ldr	r3, [sp, #8]
 80128cc:	2001      	movs	r0, #1
 80128ce:	4240      	negs	r0, r0
 80128d0:	17c1      	asrs	r1, r0, #31
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d10e      	bne.n	80128f4 <_strtoull_l.constprop.0+0x134>
 80128d6:	b00b      	add	sp, #44	; 0x2c
 80128d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128da:	9a06      	ldr	r2, [sp, #24]
 80128dc:	2a00      	cmp	r2, #0
 80128de:	d004      	beq.n	80128ea <_strtoull_l.constprop.0+0x12a>
 80128e0:	0006      	movs	r6, r0
 80128e2:	000f      	movs	r7, r1
 80128e4:	2100      	movs	r1, #0
 80128e6:	4270      	negs	r0, r6
 80128e8:	41b9      	sbcs	r1, r7
 80128ea:	9a02      	ldr	r2, [sp, #8]
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	d0f2      	beq.n	80128d6 <_strtoull_l.constprop.0+0x116>
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <_strtoull_l.constprop.0+0x138>
 80128f4:	1e6b      	subs	r3, r5, #1
 80128f6:	9301      	str	r3, [sp, #4]
 80128f8:	9b02      	ldr	r3, [sp, #8]
 80128fa:	9a01      	ldr	r2, [sp, #4]
 80128fc:	601a      	str	r2, [r3, #0]
 80128fe:	e7ea      	b.n	80128d6 <_strtoull_l.constprop.0+0x116>
 8012900:	2430      	movs	r4, #48	; 0x30
 8012902:	2e00      	cmp	r6, #0
 8012904:	d000      	beq.n	8012908 <_strtoull_l.constprop.0+0x148>
 8012906:	e785      	b.n	8012814 <_strtoull_l.constprop.0+0x54>
 8012908:	3608      	adds	r6, #8
 801290a:	e783      	b.n	8012814 <_strtoull_l.constprop.0+0x54>
 801290c:	2c30      	cmp	r4, #48	; 0x30
 801290e:	d100      	bne.n	8012912 <_strtoull_l.constprop.0+0x152>
 8012910:	e777      	b.n	8012802 <_strtoull_l.constprop.0+0x42>
 8012912:	260a      	movs	r6, #10
 8012914:	e77e      	b.n	8012814 <_strtoull_l.constprop.0+0x54>
 8012916:	46c0      	nop			; (mov r8, r8)
 8012918:	08015b89 	.word	0x08015b89

0801291c <_strtoull_r>:
 801291c:	b510      	push	{r4, lr}
 801291e:	f7ff ff4f 	bl	80127c0 <_strtoull_l.constprop.0>
 8012922:	bd10      	pop	{r4, pc}

08012924 <_mbrtowc_r>:
 8012924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012926:	0004      	movs	r4, r0
 8012928:	0010      	movs	r0, r2
 801292a:	4a0b      	ldr	r2, [pc, #44]	; (8012958 <_mbrtowc_r+0x34>)
 801292c:	9d06      	ldr	r5, [sp, #24]
 801292e:	32e4      	adds	r2, #228	; 0xe4
 8012930:	6816      	ldr	r6, [r2, #0]
 8012932:	2800      	cmp	r0, #0
 8012934:	d10c      	bne.n	8012950 <_mbrtowc_r+0x2c>
 8012936:	2301      	movs	r3, #1
 8012938:	0001      	movs	r1, r0
 801293a:	4a08      	ldr	r2, [pc, #32]	; (801295c <_mbrtowc_r+0x38>)
 801293c:	9500      	str	r5, [sp, #0]
 801293e:	0020      	movs	r0, r4
 8012940:	47b0      	blx	r6
 8012942:	1c43      	adds	r3, r0, #1
 8012944:	d103      	bne.n	801294e <_mbrtowc_r+0x2a>
 8012946:	2300      	movs	r3, #0
 8012948:	602b      	str	r3, [r5, #0]
 801294a:	338a      	adds	r3, #138	; 0x8a
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8012950:	0002      	movs	r2, r0
 8012952:	9500      	str	r5, [sp, #0]
 8012954:	e7f3      	b.n	801293e <_mbrtowc_r+0x1a>
 8012956:	46c0      	nop			; (mov r8, r8)
 8012958:	20000444 	.word	0x20000444
 801295c:	08015f13 	.word	0x08015f13

08012960 <iswspace>:
 8012960:	b510      	push	{r4, lr}
 8012962:	2100      	movs	r1, #0
 8012964:	f000 f802 	bl	801296c <iswspace_l>
 8012968:	bd10      	pop	{r4, pc}
	...

0801296c <iswspace_l>:
 801296c:	0003      	movs	r3, r0
 801296e:	2000      	movs	r0, #0
 8012970:	2bff      	cmp	r3, #255	; 0xff
 8012972:	d803      	bhi.n	801297c <iswspace_l+0x10>
 8012974:	4a02      	ldr	r2, [pc, #8]	; (8012980 <iswspace_l+0x14>)
 8012976:	5cd0      	ldrb	r0, [r2, r3]
 8012978:	2308      	movs	r3, #8
 801297a:	4018      	ands	r0, r3
 801297c:	4770      	bx	lr
 801297e:	46c0      	nop			; (mov r8, r8)
 8012980:	08015b89 	.word	0x08015b89

08012984 <fiprintf>:
 8012984:	b40e      	push	{r1, r2, r3}
 8012986:	b517      	push	{r0, r1, r2, r4, lr}
 8012988:	4c05      	ldr	r4, [pc, #20]	; (80129a0 <fiprintf+0x1c>)
 801298a:	ab05      	add	r3, sp, #20
 801298c:	cb04      	ldmia	r3!, {r2}
 801298e:	0001      	movs	r1, r0
 8012990:	6820      	ldr	r0, [r4, #0]
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	f000 f954 	bl	8012c40 <_vfiprintf_r>
 8012998:	bc1e      	pop	{r1, r2, r3, r4}
 801299a:	bc08      	pop	{r3}
 801299c:	b003      	add	sp, #12
 801299e:	4718      	bx	r3
 80129a0:	200006d0 	.word	0x200006d0

080129a4 <__ssprint_r>:
 80129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a6:	6813      	ldr	r3, [r2, #0]
 80129a8:	b087      	sub	sp, #28
 80129aa:	0017      	movs	r7, r2
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	6893      	ldr	r3, [r2, #8]
 80129b0:	2200      	movs	r2, #0
 80129b2:	000c      	movs	r4, r1
 80129b4:	9005      	str	r0, [sp, #20]
 80129b6:	9202      	str	r2, [sp, #8]
 80129b8:	9201      	str	r2, [sp, #4]
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d10d      	bne.n	80129da <__ssprint_r+0x36>
 80129be:	2000      	movs	r0, #0
 80129c0:	2300      	movs	r3, #0
 80129c2:	607b      	str	r3, [r7, #4]
 80129c4:	b007      	add	sp, #28
 80129c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c8:	9b03      	ldr	r3, [sp, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	9302      	str	r3, [sp, #8]
 80129ce:	9b03      	ldr	r3, [sp, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	9b03      	ldr	r3, [sp, #12]
 80129d6:	3308      	adds	r3, #8
 80129d8:	9303      	str	r3, [sp, #12]
 80129da:	9a01      	ldr	r2, [sp, #4]
 80129dc:	68a6      	ldr	r6, [r4, #8]
 80129de:	6823      	ldr	r3, [r4, #0]
 80129e0:	2a00      	cmp	r2, #0
 80129e2:	d0f1      	beq.n	80129c8 <__ssprint_r+0x24>
 80129e4:	42b2      	cmp	r2, r6
 80129e6:	d32e      	bcc.n	8012a46 <__ssprint_r+0xa2>
 80129e8:	2190      	movs	r1, #144	; 0x90
 80129ea:	89a2      	ldrh	r2, [r4, #12]
 80129ec:	00c9      	lsls	r1, r1, #3
 80129ee:	420a      	tst	r2, r1
 80129f0:	d029      	beq.n	8012a46 <__ssprint_r+0xa2>
 80129f2:	2003      	movs	r0, #3
 80129f4:	6921      	ldr	r1, [r4, #16]
 80129f6:	1a5b      	subs	r3, r3, r1
 80129f8:	9304      	str	r3, [sp, #16]
 80129fa:	6963      	ldr	r3, [r4, #20]
 80129fc:	4343      	muls	r3, r0
 80129fe:	0fdd      	lsrs	r5, r3, #31
 8012a00:	18ed      	adds	r5, r5, r3
 8012a02:	9b04      	ldr	r3, [sp, #16]
 8012a04:	9801      	ldr	r0, [sp, #4]
 8012a06:	3301      	adds	r3, #1
 8012a08:	181b      	adds	r3, r3, r0
 8012a0a:	106d      	asrs	r5, r5, #1
 8012a0c:	42ab      	cmp	r3, r5
 8012a0e:	d900      	bls.n	8012a12 <__ssprint_r+0x6e>
 8012a10:	001d      	movs	r5, r3
 8012a12:	0552      	lsls	r2, r2, #21
 8012a14:	d532      	bpl.n	8012a7c <__ssprint_r+0xd8>
 8012a16:	0029      	movs	r1, r5
 8012a18:	9805      	ldr	r0, [sp, #20]
 8012a1a:	f7f9 f9e1 	bl	800bde0 <_malloc_r>
 8012a1e:	1e06      	subs	r6, r0, #0
 8012a20:	d036      	beq.n	8012a90 <__ssprint_r+0xec>
 8012a22:	9a04      	ldr	r2, [sp, #16]
 8012a24:	6921      	ldr	r1, [r4, #16]
 8012a26:	f7fa fe1a 	bl	800d65e <memcpy>
 8012a2a:	89a2      	ldrh	r2, [r4, #12]
 8012a2c:	4b1e      	ldr	r3, [pc, #120]	; (8012aa8 <__ssprint_r+0x104>)
 8012a2e:	401a      	ands	r2, r3
 8012a30:	2380      	movs	r3, #128	; 0x80
 8012a32:	4313      	orrs	r3, r2
 8012a34:	81a3      	strh	r3, [r4, #12]
 8012a36:	9b04      	ldr	r3, [sp, #16]
 8012a38:	6126      	str	r6, [r4, #16]
 8012a3a:	18f6      	adds	r6, r6, r3
 8012a3c:	6026      	str	r6, [r4, #0]
 8012a3e:	6165      	str	r5, [r4, #20]
 8012a40:	9e01      	ldr	r6, [sp, #4]
 8012a42:	1aed      	subs	r5, r5, r3
 8012a44:	60a5      	str	r5, [r4, #8]
 8012a46:	9b01      	ldr	r3, [sp, #4]
 8012a48:	429e      	cmp	r6, r3
 8012a4a:	d900      	bls.n	8012a4e <__ssprint_r+0xaa>
 8012a4c:	001e      	movs	r6, r3
 8012a4e:	0032      	movs	r2, r6
 8012a50:	9902      	ldr	r1, [sp, #8]
 8012a52:	6820      	ldr	r0, [r4, #0]
 8012a54:	f001 f86d 	bl	8013b32 <memmove>
 8012a58:	9a01      	ldr	r2, [sp, #4]
 8012a5a:	68a3      	ldr	r3, [r4, #8]
 8012a5c:	4694      	mov	ip, r2
 8012a5e:	1b9b      	subs	r3, r3, r6
 8012a60:	60a3      	str	r3, [r4, #8]
 8012a62:	6823      	ldr	r3, [r4, #0]
 8012a64:	199b      	adds	r3, r3, r6
 8012a66:	6023      	str	r3, [r4, #0]
 8012a68:	9b02      	ldr	r3, [sp, #8]
 8012a6a:	4463      	add	r3, ip
 8012a6c:	9302      	str	r3, [sp, #8]
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	1a9b      	subs	r3, r3, r2
 8012a72:	60bb      	str	r3, [r7, #8]
 8012a74:	d0a3      	beq.n	80129be <__ssprint_r+0x1a>
 8012a76:	2300      	movs	r3, #0
 8012a78:	9301      	str	r3, [sp, #4]
 8012a7a:	e7ae      	b.n	80129da <__ssprint_r+0x36>
 8012a7c:	002a      	movs	r2, r5
 8012a7e:	9805      	ldr	r0, [sp, #20]
 8012a80:	f7ff fc46 	bl	8012310 <_realloc_r>
 8012a84:	1e06      	subs	r6, r0, #0
 8012a86:	d1d6      	bne.n	8012a36 <__ssprint_r+0x92>
 8012a88:	6921      	ldr	r1, [r4, #16]
 8012a8a:	9805      	ldr	r0, [sp, #20]
 8012a8c:	f7fa fe62 	bl	800d754 <_free_r>
 8012a90:	230c      	movs	r3, #12
 8012a92:	9a05      	ldr	r2, [sp, #20]
 8012a94:	2001      	movs	r0, #1
 8012a96:	6013      	str	r3, [r2, #0]
 8012a98:	89a2      	ldrh	r2, [r4, #12]
 8012a9a:	3334      	adds	r3, #52	; 0x34
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	81a3      	strh	r3, [r4, #12]
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	4240      	negs	r0, r0
 8012aa4:	60bb      	str	r3, [r7, #8]
 8012aa6:	e78b      	b.n	80129c0 <__ssprint_r+0x1c>
 8012aa8:	fffffb7f 	.word	0xfffffb7f

08012aac <_sungetc_r>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	0014      	movs	r4, r2
 8012ab0:	1c4b      	adds	r3, r1, #1
 8012ab2:	d103      	bne.n	8012abc <_sungetc_r+0x10>
 8012ab4:	2501      	movs	r5, #1
 8012ab6:	426d      	negs	r5, r5
 8012ab8:	0028      	movs	r0, r5
 8012aba:	bd70      	pop	{r4, r5, r6, pc}
 8012abc:	8993      	ldrh	r3, [r2, #12]
 8012abe:	2220      	movs	r2, #32
 8012ac0:	4393      	bics	r3, r2
 8012ac2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012ac4:	81a3      	strh	r3, [r4, #12]
 8012ac6:	b2ce      	uxtb	r6, r1
 8012ac8:	6863      	ldr	r3, [r4, #4]
 8012aca:	b2cd      	uxtb	r5, r1
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	d010      	beq.n	8012af2 <_sungetc_r+0x46>
 8012ad0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	dd07      	ble.n	8012ae6 <_sungetc_r+0x3a>
 8012ad6:	6823      	ldr	r3, [r4, #0]
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	6023      	str	r3, [r4, #0]
 8012adc:	701e      	strb	r6, [r3, #0]
 8012ade:	6863      	ldr	r3, [r4, #4]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	6063      	str	r3, [r4, #4]
 8012ae4:	e7e8      	b.n	8012ab8 <_sungetc_r+0xc>
 8012ae6:	0021      	movs	r1, r4
 8012ae8:	f000 ff1a 	bl	8013920 <__submore>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	d0f2      	beq.n	8012ad6 <_sungetc_r+0x2a>
 8012af0:	e7e0      	b.n	8012ab4 <_sungetc_r+0x8>
 8012af2:	6921      	ldr	r1, [r4, #16]
 8012af4:	6822      	ldr	r2, [r4, #0]
 8012af6:	2900      	cmp	r1, #0
 8012af8:	d007      	beq.n	8012b0a <_sungetc_r+0x5e>
 8012afa:	4291      	cmp	r1, r2
 8012afc:	d205      	bcs.n	8012b0a <_sungetc_r+0x5e>
 8012afe:	1e51      	subs	r1, r2, #1
 8012b00:	7808      	ldrb	r0, [r1, #0]
 8012b02:	42a8      	cmp	r0, r5
 8012b04:	d101      	bne.n	8012b0a <_sungetc_r+0x5e>
 8012b06:	6021      	str	r1, [r4, #0]
 8012b08:	e7ea      	b.n	8012ae0 <_sungetc_r+0x34>
 8012b0a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012b0c:	0023      	movs	r3, r4
 8012b0e:	3340      	adds	r3, #64	; 0x40
 8012b10:	6323      	str	r3, [r4, #48]	; 0x30
 8012b12:	2303      	movs	r3, #3
 8012b14:	6363      	str	r3, [r4, #52]	; 0x34
 8012b16:	0023      	movs	r3, r4
 8012b18:	3342      	adds	r3, #66	; 0x42
 8012b1a:	63a2      	str	r2, [r4, #56]	; 0x38
 8012b1c:	701e      	strb	r6, [r3, #0]
 8012b1e:	6023      	str	r3, [r4, #0]
 8012b20:	2301      	movs	r3, #1
 8012b22:	e7de      	b.n	8012ae2 <_sungetc_r+0x36>

08012b24 <__ssrefill_r>:
 8012b24:	b510      	push	{r4, lr}
 8012b26:	000c      	movs	r4, r1
 8012b28:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012b2a:	2900      	cmp	r1, #0
 8012b2c:	d00e      	beq.n	8012b4c <__ssrefill_r+0x28>
 8012b2e:	0023      	movs	r3, r4
 8012b30:	3340      	adds	r3, #64	; 0x40
 8012b32:	4299      	cmp	r1, r3
 8012b34:	d001      	beq.n	8012b3a <__ssrefill_r+0x16>
 8012b36:	f7fa fe0d 	bl	800d754 <_free_r>
 8012b3a:	2000      	movs	r0, #0
 8012b3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012b3e:	6320      	str	r0, [r4, #48]	; 0x30
 8012b40:	6063      	str	r3, [r4, #4]
 8012b42:	4283      	cmp	r3, r0
 8012b44:	d002      	beq.n	8012b4c <__ssrefill_r+0x28>
 8012b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	bd10      	pop	{r4, pc}
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	2001      	movs	r0, #1
 8012b50:	6023      	str	r3, [r4, #0]
 8012b52:	2300      	movs	r3, #0
 8012b54:	89a2      	ldrh	r2, [r4, #12]
 8012b56:	6063      	str	r3, [r4, #4]
 8012b58:	3320      	adds	r3, #32
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	81a3      	strh	r3, [r4, #12]
 8012b5e:	4240      	negs	r0, r0
 8012b60:	e7f3      	b.n	8012b4a <__ssrefill_r+0x26>

08012b62 <_sfread_r>:
 8012b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b64:	0014      	movs	r4, r2
 8012b66:	435c      	muls	r4, r3
 8012b68:	b087      	sub	sp, #28
 8012b6a:	1e26      	subs	r6, r4, #0
 8012b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b6e:	9005      	str	r0, [sp, #20]
 8012b70:	9101      	str	r1, [sp, #4]
 8012b72:	9202      	str	r2, [sp, #8]
 8012b74:	9303      	str	r3, [sp, #12]
 8012b76:	d11e      	bne.n	8012bb6 <_sfread_r+0x54>
 8012b78:	0020      	movs	r0, r4
 8012b7a:	b007      	add	sp, #28
 8012b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b7e:	003a      	movs	r2, r7
 8012b80:	9801      	ldr	r0, [sp, #4]
 8012b82:	f7fa fd6c 	bl	800d65e <memcpy>
 8012b86:	682b      	ldr	r3, [r5, #0]
 8012b88:	0029      	movs	r1, r5
 8012b8a:	19db      	adds	r3, r3, r7
 8012b8c:	602b      	str	r3, [r5, #0]
 8012b8e:	2300      	movs	r3, #0
 8012b90:	606b      	str	r3, [r5, #4]
 8012b92:	9b01      	ldr	r3, [sp, #4]
 8012b94:	9805      	ldr	r0, [sp, #20]
 8012b96:	19db      	adds	r3, r3, r7
 8012b98:	9301      	str	r3, [sp, #4]
 8012b9a:	1bf3      	subs	r3, r6, r7
 8012b9c:	9304      	str	r3, [sp, #16]
 8012b9e:	f7ff ffc1 	bl	8012b24 <__ssrefill_r>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d006      	beq.n	8012bb4 <_sfread_r+0x52>
 8012ba6:	193c      	adds	r4, r7, r4
 8012ba8:	1ba0      	subs	r0, r4, r6
 8012baa:	9902      	ldr	r1, [sp, #8]
 8012bac:	f7ed fac6 	bl	800013c <__udivsi3>
 8012bb0:	0004      	movs	r4, r0
 8012bb2:	e7e1      	b.n	8012b78 <_sfread_r+0x16>
 8012bb4:	9e04      	ldr	r6, [sp, #16]
 8012bb6:	686f      	ldr	r7, [r5, #4]
 8012bb8:	6829      	ldr	r1, [r5, #0]
 8012bba:	42b7      	cmp	r7, r6
 8012bbc:	d3df      	bcc.n	8012b7e <_sfread_r+0x1c>
 8012bbe:	0032      	movs	r2, r6
 8012bc0:	9801      	ldr	r0, [sp, #4]
 8012bc2:	f7fa fd4c 	bl	800d65e <memcpy>
 8012bc6:	686b      	ldr	r3, [r5, #4]
 8012bc8:	9c03      	ldr	r4, [sp, #12]
 8012bca:	1b9b      	subs	r3, r3, r6
 8012bcc:	606b      	str	r3, [r5, #4]
 8012bce:	682b      	ldr	r3, [r5, #0]
 8012bd0:	199b      	adds	r3, r3, r6
 8012bd2:	602b      	str	r3, [r5, #0]
 8012bd4:	e7d0      	b.n	8012b78 <_sfread_r+0x16>

08012bd6 <__sprint_r>:
 8012bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bd8:	6893      	ldr	r3, [r2, #8]
 8012bda:	b085      	sub	sp, #20
 8012bdc:	9001      	str	r0, [sp, #4]
 8012bde:	000d      	movs	r5, r1
 8012be0:	0014      	movs	r4, r2
 8012be2:	1e18      	subs	r0, r3, #0
 8012be4:	d018      	beq.n	8012c18 <__sprint_r+0x42>
 8012be6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012be8:	049b      	lsls	r3, r3, #18
 8012bea:	d524      	bpl.n	8012c36 <__sprint_r+0x60>
 8012bec:	6817      	ldr	r7, [r2, #0]
 8012bee:	2600      	movs	r6, #0
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	9302      	str	r3, [sp, #8]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	9300      	str	r3, [sp, #0]
 8012bf8:	089b      	lsrs	r3, r3, #2
 8012bfa:	9303      	str	r3, [sp, #12]
 8012bfc:	9b03      	ldr	r3, [sp, #12]
 8012bfe:	42b3      	cmp	r3, r6
 8012c00:	dc0e      	bgt.n	8012c20 <__sprint_r+0x4a>
 8012c02:	2203      	movs	r2, #3
 8012c04:	9b00      	ldr	r3, [sp, #0]
 8012c06:	68a0      	ldr	r0, [r4, #8]
 8012c08:	4393      	bics	r3, r2
 8012c0a:	1ac0      	subs	r0, r0, r3
 8012c0c:	60a0      	str	r0, [r4, #8]
 8012c0e:	3708      	adds	r7, #8
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d1ec      	bne.n	8012bee <__sprint_r+0x18>
 8012c14:	2300      	movs	r3, #0
 8012c16:	60a3      	str	r3, [r4, #8]
 8012c18:	2300      	movs	r3, #0
 8012c1a:	6063      	str	r3, [r4, #4]
 8012c1c:	b005      	add	sp, #20
 8012c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c20:	9902      	ldr	r1, [sp, #8]
 8012c22:	00b3      	lsls	r3, r6, #2
 8012c24:	58c9      	ldr	r1, [r1, r3]
 8012c26:	002a      	movs	r2, r5
 8012c28:	9801      	ldr	r0, [sp, #4]
 8012c2a:	f000 ff59 	bl	8013ae0 <_fputwc_r>
 8012c2e:	1c43      	adds	r3, r0, #1
 8012c30:	d0f0      	beq.n	8012c14 <__sprint_r+0x3e>
 8012c32:	3601      	adds	r6, #1
 8012c34:	e7e2      	b.n	8012bfc <__sprint_r+0x26>
 8012c36:	9801      	ldr	r0, [sp, #4]
 8012c38:	f000 fd14 	bl	8013664 <__sfvwrite_r>
 8012c3c:	e7ea      	b.n	8012c14 <__sprint_r+0x3e>
	...

08012c40 <_vfiprintf_r>:
 8012c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c42:	b0c1      	sub	sp, #260	; 0x104
 8012c44:	001c      	movs	r4, r3
 8012c46:	001f      	movs	r7, r3
 8012c48:	9006      	str	r0, [sp, #24]
 8012c4a:	9103      	str	r1, [sp, #12]
 8012c4c:	9207      	str	r2, [sp, #28]
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	d004      	beq.n	8012c5c <_vfiprintf_r+0x1c>
 8012c52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d101      	bne.n	8012c5c <_vfiprintf_r+0x1c>
 8012c58:	f7fa fad6 	bl	800d208 <__sinit>
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c60:	07db      	lsls	r3, r3, #31
 8012c62:	d407      	bmi.n	8012c74 <_vfiprintf_r+0x34>
 8012c64:	9b03      	ldr	r3, [sp, #12]
 8012c66:	899b      	ldrh	r3, [r3, #12]
 8012c68:	059b      	lsls	r3, r3, #22
 8012c6a:	d403      	bmi.n	8012c74 <_vfiprintf_r+0x34>
 8012c6c:	9b03      	ldr	r3, [sp, #12]
 8012c6e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c70:	f7fa fce8 	bl	800d644 <__retarget_lock_acquire_recursive>
 8012c74:	9b03      	ldr	r3, [sp, #12]
 8012c76:	220c      	movs	r2, #12
 8012c78:	5e9a      	ldrsh	r2, [r3, r2]
 8012c7a:	2380      	movs	r3, #128	; 0x80
 8012c7c:	019b      	lsls	r3, r3, #6
 8012c7e:	421a      	tst	r2, r3
 8012c80:	d107      	bne.n	8012c92 <_vfiprintf_r+0x52>
 8012c82:	4313      	orrs	r3, r2
 8012c84:	9a03      	ldr	r2, [sp, #12]
 8012c86:	8193      	strh	r3, [r2, #12]
 8012c88:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012c8a:	4aa3      	ldr	r2, [pc, #652]	; (8012f18 <_vfiprintf_r+0x2d8>)
 8012c8c:	4013      	ands	r3, r2
 8012c8e:	9a03      	ldr	r2, [sp, #12]
 8012c90:	6653      	str	r3, [r2, #100]	; 0x64
 8012c92:	9b03      	ldr	r3, [sp, #12]
 8012c94:	899b      	ldrh	r3, [r3, #12]
 8012c96:	071b      	lsls	r3, r3, #28
 8012c98:	d503      	bpl.n	8012ca2 <_vfiprintf_r+0x62>
 8012c9a:	9b03      	ldr	r3, [sp, #12]
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d118      	bne.n	8012cd4 <_vfiprintf_r+0x94>
 8012ca2:	9903      	ldr	r1, [sp, #12]
 8012ca4:	9806      	ldr	r0, [sp, #24]
 8012ca6:	f000 fe79 	bl	801399c <__swsetup_r>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d012      	beq.n	8012cd4 <_vfiprintf_r+0x94>
 8012cae:	9b03      	ldr	r3, [sp, #12]
 8012cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cb2:	07db      	lsls	r3, r3, #31
 8012cb4:	d505      	bpl.n	8012cc2 <_vfiprintf_r+0x82>
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	425b      	negs	r3, r3
 8012cba:	9308      	str	r3, [sp, #32]
 8012cbc:	9808      	ldr	r0, [sp, #32]
 8012cbe:	b041      	add	sp, #260	; 0x104
 8012cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cc2:	9b03      	ldr	r3, [sp, #12]
 8012cc4:	899b      	ldrh	r3, [r3, #12]
 8012cc6:	059b      	lsls	r3, r3, #22
 8012cc8:	d4f5      	bmi.n	8012cb6 <_vfiprintf_r+0x76>
 8012cca:	9b03      	ldr	r3, [sp, #12]
 8012ccc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012cce:	f7fa fcba 	bl	800d646 <__retarget_lock_release_recursive>
 8012cd2:	e7f0      	b.n	8012cb6 <_vfiprintf_r+0x76>
 8012cd4:	221a      	movs	r2, #26
 8012cd6:	9b03      	ldr	r3, [sp, #12]
 8012cd8:	899b      	ldrh	r3, [r3, #12]
 8012cda:	401a      	ands	r2, r3
 8012cdc:	2a0a      	cmp	r2, #10
 8012cde:	d116      	bne.n	8012d0e <_vfiprintf_r+0xce>
 8012ce0:	9a03      	ldr	r2, [sp, #12]
 8012ce2:	210e      	movs	r1, #14
 8012ce4:	5e52      	ldrsh	r2, [r2, r1]
 8012ce6:	2a00      	cmp	r2, #0
 8012ce8:	db11      	blt.n	8012d0e <_vfiprintf_r+0xce>
 8012cea:	9a03      	ldr	r2, [sp, #12]
 8012cec:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012cee:	07d2      	lsls	r2, r2, #31
 8012cf0:	d405      	bmi.n	8012cfe <_vfiprintf_r+0xbe>
 8012cf2:	059b      	lsls	r3, r3, #22
 8012cf4:	d403      	bmi.n	8012cfe <_vfiprintf_r+0xbe>
 8012cf6:	9b03      	ldr	r3, [sp, #12]
 8012cf8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012cfa:	f7fa fca4 	bl	800d646 <__retarget_lock_release_recursive>
 8012cfe:	0023      	movs	r3, r4
 8012d00:	9a07      	ldr	r2, [sp, #28]
 8012d02:	9903      	ldr	r1, [sp, #12]
 8012d04:	9806      	ldr	r0, [sp, #24]
 8012d06:	f000 fc69 	bl	80135dc <__sbprintf>
 8012d0a:	9008      	str	r0, [sp, #32]
 8012d0c:	e7d6      	b.n	8012cbc <_vfiprintf_r+0x7c>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	ad17      	add	r5, sp, #92	; 0x5c
 8012d12:	9514      	str	r5, [sp, #80]	; 0x50
 8012d14:	9316      	str	r3, [sp, #88]	; 0x58
 8012d16:	9315      	str	r3, [sp, #84]	; 0x54
 8012d18:	930c      	str	r3, [sp, #48]	; 0x30
 8012d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8012d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8012d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d20:	9308      	str	r3, [sp, #32]
 8012d22:	9c07      	ldr	r4, [sp, #28]
 8012d24:	7823      	ldrb	r3, [r4, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <_vfiprintf_r+0xf0>
 8012d2a:	2b25      	cmp	r3, #37	; 0x25
 8012d2c:	d000      	beq.n	8012d30 <_vfiprintf_r+0xf0>
 8012d2e:	e08d      	b.n	8012e4c <_vfiprintf_r+0x20c>
 8012d30:	9b07      	ldr	r3, [sp, #28]
 8012d32:	1ae6      	subs	r6, r4, r3
 8012d34:	429c      	cmp	r4, r3
 8012d36:	d016      	beq.n	8012d66 <_vfiprintf_r+0x126>
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012d3c:	606e      	str	r6, [r5, #4]
 8012d3e:	199b      	adds	r3, r3, r6
 8012d40:	9316      	str	r3, [sp, #88]	; 0x58
 8012d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d44:	3508      	adds	r5, #8
 8012d46:	3301      	adds	r3, #1
 8012d48:	9315      	str	r3, [sp, #84]	; 0x54
 8012d4a:	2b07      	cmp	r3, #7
 8012d4c:	dd08      	ble.n	8012d60 <_vfiprintf_r+0x120>
 8012d4e:	9903      	ldr	r1, [sp, #12]
 8012d50:	9806      	ldr	r0, [sp, #24]
 8012d52:	aa14      	add	r2, sp, #80	; 0x50
 8012d54:	f7ff ff3f 	bl	8012bd6 <__sprint_r>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d000      	beq.n	8012d5e <_vfiprintf_r+0x11e>
 8012d5c:	e3d9      	b.n	8013512 <_vfiprintf_r+0x8d2>
 8012d5e:	ad17      	add	r5, sp, #92	; 0x5c
 8012d60:	9b08      	ldr	r3, [sp, #32]
 8012d62:	199b      	adds	r3, r3, r6
 8012d64:	9308      	str	r3, [sp, #32]
 8012d66:	7823      	ldrb	r3, [r4, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d101      	bne.n	8012d70 <_vfiprintf_r+0x130>
 8012d6c:	f000 fbf6 	bl	801355c <_vfiprintf_r+0x91c>
 8012d70:	2200      	movs	r2, #0
 8012d72:	a912      	add	r1, sp, #72	; 0x48
 8012d74:	70ca      	strb	r2, [r1, #3]
 8012d76:	2101      	movs	r1, #1
 8012d78:	1c63      	adds	r3, r4, #1
 8012d7a:	0014      	movs	r4, r2
 8012d7c:	4249      	negs	r1, r1
 8012d7e:	9105      	str	r1, [sp, #20]
 8012d80:	9209      	str	r2, [sp, #36]	; 0x24
 8012d82:	1c5a      	adds	r2, r3, #1
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	9207      	str	r2, [sp, #28]
 8012d88:	0018      	movs	r0, r3
 8012d8a:	3820      	subs	r0, #32
 8012d8c:	285a      	cmp	r0, #90	; 0x5a
 8012d8e:	d900      	bls.n	8012d92 <_vfiprintf_r+0x152>
 8012d90:	e362      	b.n	8013458 <_vfiprintf_r+0x818>
 8012d92:	f7ed f9c9 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012d96:	0078      	.short	0x0078
 8012d98:	03610361 	.word	0x03610361
 8012d9c:	03610081 	.word	0x03610081
 8012da0:	03610361 	.word	0x03610361
 8012da4:	0361005d 	.word	0x0361005d
 8012da8:	00830361 	.word	0x00830361
 8012dac:	0361008b 	.word	0x0361008b
 8012db0:	008f0089 	.word	0x008f0089
 8012db4:	00ad0361 	.word	0x00ad0361
 8012db8:	00af00af 	.word	0x00af00af
 8012dbc:	00af00af 	.word	0x00af00af
 8012dc0:	00af00af 	.word	0x00af00af
 8012dc4:	00af00af 	.word	0x00af00af
 8012dc8:	036100af 	.word	0x036100af
 8012dcc:	03610361 	.word	0x03610361
 8012dd0:	03610361 	.word	0x03610361
 8012dd4:	03610361 	.word	0x03610361
 8012dd8:	03610361 	.word	0x03610361
 8012ddc:	00e600da 	.word	0x00e600da
 8012de0:	03610361 	.word	0x03610361
 8012de4:	03610361 	.word	0x03610361
 8012de8:	03610361 	.word	0x03610361
 8012dec:	03610361 	.word	0x03610361
 8012df0:	03610361 	.word	0x03610361
 8012df4:	03610143 	.word	0x03610143
 8012df8:	03610361 	.word	0x03610361
 8012dfc:	03610182 	.word	0x03610182
 8012e00:	0361027c 	.word	0x0361027c
 8012e04:	02ae0361 	.word	0x02ae0361
 8012e08:	03610361 	.word	0x03610361
 8012e0c:	03610361 	.word	0x03610361
 8012e10:	03610361 	.word	0x03610361
 8012e14:	03610361 	.word	0x03610361
 8012e18:	03610361 	.word	0x03610361
 8012e1c:	00e800da 	.word	0x00e800da
 8012e20:	03610361 	.word	0x03610361
 8012e24:	00c30361 	.word	0x00c30361
 8012e28:	00d600e8 	.word	0x00d600e8
 8012e2c:	00cf0361 	.word	0x00cf0361
 8012e30:	01260361 	.word	0x01260361
 8012e34:	01740145 	.word	0x01740145
 8012e38:	036100d6 	.word	0x036100d6
 8012e3c:	007f0182 	.word	0x007f0182
 8012e40:	0361027e 	.word	0x0361027e
 8012e44:	02cd0361 	.word	0x02cd0361
 8012e48:	007f0361 	.word	0x007f0361
 8012e4c:	3401      	adds	r4, #1
 8012e4e:	e769      	b.n	8012d24 <_vfiprintf_r+0xe4>
 8012e50:	9806      	ldr	r0, [sp, #24]
 8012e52:	f7fe facd 	bl	80113f0 <_localeconv_r>
 8012e56:	6843      	ldr	r3, [r0, #4]
 8012e58:	0018      	movs	r0, r3
 8012e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e5c:	f7ed f952 	bl	8000104 <strlen>
 8012e60:	900e      	str	r0, [sp, #56]	; 0x38
 8012e62:	9806      	ldr	r0, [sp, #24]
 8012e64:	f7fe fac4 	bl	80113f0 <_localeconv_r>
 8012e68:	6883      	ldr	r3, [r0, #8]
 8012e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8012e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d010      	beq.n	8012e94 <_vfiprintf_r+0x254>
 8012e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d00d      	beq.n	8012e94 <_vfiprintf_r+0x254>
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00a      	beq.n	8012e94 <_vfiprintf_r+0x254>
 8012e7e:	2380      	movs	r3, #128	; 0x80
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	431c      	orrs	r4, r3
 8012e84:	e006      	b.n	8012e94 <_vfiprintf_r+0x254>
 8012e86:	ab12      	add	r3, sp, #72	; 0x48
 8012e88:	78da      	ldrb	r2, [r3, #3]
 8012e8a:	3303      	adds	r3, #3
 8012e8c:	2a00      	cmp	r2, #0
 8012e8e:	d101      	bne.n	8012e94 <_vfiprintf_r+0x254>
 8012e90:	3220      	adds	r2, #32
 8012e92:	701a      	strb	r2, [r3, #0]
 8012e94:	9b07      	ldr	r3, [sp, #28]
 8012e96:	e774      	b.n	8012d82 <_vfiprintf_r+0x142>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e7f2      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012e9c:	cf08      	ldmia	r7!, {r3}
 8012e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	daf7      	bge.n	8012e94 <_vfiprintf_r+0x254>
 8012ea4:	425b      	negs	r3, r3
 8012ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea8:	2304      	movs	r3, #4
 8012eaa:	e7ea      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012eac:	222b      	movs	r2, #43	; 0x2b
 8012eae:	ab12      	add	r3, sp, #72	; 0x48
 8012eb0:	70da      	strb	r2, [r3, #3]
 8012eb2:	e7ef      	b.n	8012e94 <_vfiprintf_r+0x254>
 8012eb4:	9b07      	ldr	r3, [sp, #28]
 8012eb6:	1c5a      	adds	r2, r3, #1
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b2a      	cmp	r3, #42	; 0x2a
 8012ebc:	d00f      	beq.n	8012ede <_vfiprintf_r+0x29e>
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	9105      	str	r1, [sp, #20]
 8012ec2:	0019      	movs	r1, r3
 8012ec4:	3930      	subs	r1, #48	; 0x30
 8012ec6:	9207      	str	r2, [sp, #28]
 8012ec8:	2909      	cmp	r1, #9
 8012eca:	d900      	bls.n	8012ece <_vfiprintf_r+0x28e>
 8012ecc:	e75c      	b.n	8012d88 <_vfiprintf_r+0x148>
 8012ece:	200a      	movs	r0, #10
 8012ed0:	9b05      	ldr	r3, [sp, #20]
 8012ed2:	4343      	muls	r3, r0
 8012ed4:	185b      	adds	r3, r3, r1
 8012ed6:	9305      	str	r3, [sp, #20]
 8012ed8:	7813      	ldrb	r3, [r2, #0]
 8012eda:	3201      	adds	r2, #1
 8012edc:	e7f1      	b.n	8012ec2 <_vfiprintf_r+0x282>
 8012ede:	cf08      	ldmia	r7!, {r3}
 8012ee0:	9305      	str	r3, [sp, #20]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	da02      	bge.n	8012eec <_vfiprintf_r+0x2ac>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	425b      	negs	r3, r3
 8012eea:	9305      	str	r3, [sp, #20]
 8012eec:	9207      	str	r2, [sp, #28]
 8012eee:	e7d1      	b.n	8012e94 <_vfiprintf_r+0x254>
 8012ef0:	2380      	movs	r3, #128	; 0x80
 8012ef2:	e7c6      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	9a07      	ldr	r2, [sp, #28]
 8012ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8012efa:	200a      	movs	r0, #10
 8012efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012efe:	3b30      	subs	r3, #48	; 0x30
 8012f00:	4341      	muls	r1, r0
 8012f02:	185b      	adds	r3, r3, r1
 8012f04:	9309      	str	r3, [sp, #36]	; 0x24
 8012f06:	0013      	movs	r3, r2
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	3201      	adds	r2, #1
 8012f0c:	0019      	movs	r1, r3
 8012f0e:	3930      	subs	r1, #48	; 0x30
 8012f10:	9207      	str	r2, [sp, #28]
 8012f12:	2909      	cmp	r1, #9
 8012f14:	d9f1      	bls.n	8012efa <_vfiprintf_r+0x2ba>
 8012f16:	e737      	b.n	8012d88 <_vfiprintf_r+0x148>
 8012f18:	ffffdfff 	.word	0xffffdfff
 8012f1c:	9b07      	ldr	r3, [sp, #28]
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	2b68      	cmp	r3, #104	; 0x68
 8012f22:	d105      	bne.n	8012f30 <_vfiprintf_r+0x2f0>
 8012f24:	9b07      	ldr	r3, [sp, #28]
 8012f26:	3301      	adds	r3, #1
 8012f28:	9307      	str	r3, [sp, #28]
 8012f2a:	2380      	movs	r3, #128	; 0x80
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	e7a8      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012f30:	2340      	movs	r3, #64	; 0x40
 8012f32:	e7a6      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012f34:	9b07      	ldr	r3, [sp, #28]
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	2b6c      	cmp	r3, #108	; 0x6c
 8012f3a:	d104      	bne.n	8012f46 <_vfiprintf_r+0x306>
 8012f3c:	9b07      	ldr	r3, [sp, #28]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	9307      	str	r3, [sp, #28]
 8012f42:	2320      	movs	r3, #32
 8012f44:	e79d      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012f46:	2310      	movs	r3, #16
 8012f48:	e79b      	b.n	8012e82 <_vfiprintf_r+0x242>
 8012f4a:	003a      	movs	r2, r7
 8012f4c:	ca08      	ldmia	r2!, {r3}
 8012f4e:	ae27      	add	r6, sp, #156	; 0x9c
 8012f50:	7033      	strb	r3, [r6, #0]
 8012f52:	2300      	movs	r3, #0
 8012f54:	9204      	str	r2, [sp, #16]
 8012f56:	aa12      	add	r2, sp, #72	; 0x48
 8012f58:	70d3      	strb	r3, [r2, #3]
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f5e:	9205      	str	r2, [sp, #20]
 8012f60:	e0b0      	b.n	80130c4 <_vfiprintf_r+0x484>
 8012f62:	2310      	movs	r3, #16
 8012f64:	431c      	orrs	r4, r3
 8012f66:	06a3      	lsls	r3, r4, #26
 8012f68:	d52a      	bpl.n	8012fc0 <_vfiprintf_r+0x380>
 8012f6a:	2307      	movs	r3, #7
 8012f6c:	3707      	adds	r7, #7
 8012f6e:	439f      	bics	r7, r3
 8012f70:	0039      	movs	r1, r7
 8012f72:	c90c      	ldmia	r1!, {r2, r3}
 8012f74:	9200      	str	r2, [sp, #0]
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	9104      	str	r1, [sp, #16]
 8012f7a:	9a01      	ldr	r2, [sp, #4]
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	2a00      	cmp	r2, #0
 8012f80:	da09      	bge.n	8012f96 <_vfiprintf_r+0x356>
 8012f82:	9e00      	ldr	r6, [sp, #0]
 8012f84:	9f01      	ldr	r7, [sp, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	4271      	negs	r1, r6
 8012f8a:	41ba      	sbcs	r2, r7
 8012f8c:	9100      	str	r1, [sp, #0]
 8012f8e:	9201      	str	r2, [sp, #4]
 8012f90:	212d      	movs	r1, #45	; 0x2d
 8012f92:	aa12      	add	r2, sp, #72	; 0x48
 8012f94:	70d1      	strb	r1, [r2, #3]
 8012f96:	9901      	ldr	r1, [sp, #4]
 8012f98:	9a00      	ldr	r2, [sp, #0]
 8012f9a:	430a      	orrs	r2, r1
 8012f9c:	9905      	ldr	r1, [sp, #20]
 8012f9e:	3101      	adds	r1, #1
 8012fa0:	d100      	bne.n	8012fa4 <_vfiprintf_r+0x364>
 8012fa2:	e2e9      	b.n	8013578 <_vfiprintf_r+0x938>
 8012fa4:	2180      	movs	r1, #128	; 0x80
 8012fa6:	0027      	movs	r7, r4
 8012fa8:	438f      	bics	r7, r1
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	d000      	beq.n	8012fb0 <_vfiprintf_r+0x370>
 8012fae:	e2e7      	b.n	8013580 <_vfiprintf_r+0x940>
 8012fb0:	9a05      	ldr	r2, [sp, #20]
 8012fb2:	2a00      	cmp	r2, #0
 8012fb4:	d100      	bne.n	8012fb8 <_vfiprintf_r+0x378>
 8012fb6:	e243      	b.n	8013440 <_vfiprintf_r+0x800>
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d000      	beq.n	8012fbe <_vfiprintf_r+0x37e>
 8012fbc:	e2e3      	b.n	8013586 <_vfiprintf_r+0x946>
 8012fbe:	e1e7      	b.n	8013390 <_vfiprintf_r+0x750>
 8012fc0:	003a      	movs	r2, r7
 8012fc2:	ca08      	ldmia	r2!, {r3}
 8012fc4:	9204      	str	r2, [sp, #16]
 8012fc6:	06e2      	lsls	r2, r4, #27
 8012fc8:	d503      	bpl.n	8012fd2 <_vfiprintf_r+0x392>
 8012fca:	9300      	str	r3, [sp, #0]
 8012fcc:	17db      	asrs	r3, r3, #31
 8012fce:	9301      	str	r3, [sp, #4]
 8012fd0:	e7d3      	b.n	8012f7a <_vfiprintf_r+0x33a>
 8012fd2:	0662      	lsls	r2, r4, #25
 8012fd4:	d501      	bpl.n	8012fda <_vfiprintf_r+0x39a>
 8012fd6:	b21b      	sxth	r3, r3
 8012fd8:	e7f7      	b.n	8012fca <_vfiprintf_r+0x38a>
 8012fda:	05a2      	lsls	r2, r4, #22
 8012fdc:	d5f5      	bpl.n	8012fca <_vfiprintf_r+0x38a>
 8012fde:	b25b      	sxtb	r3, r3
 8012fe0:	e7f3      	b.n	8012fca <_vfiprintf_r+0x38a>
 8012fe2:	1d3b      	adds	r3, r7, #4
 8012fe4:	9304      	str	r3, [sp, #16]
 8012fe6:	06a3      	lsls	r3, r4, #26
 8012fe8:	d506      	bpl.n	8012ff8 <_vfiprintf_r+0x3b8>
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	9a08      	ldr	r2, [sp, #32]
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	17d2      	asrs	r2, r2, #31
 8012ff2:	605a      	str	r2, [r3, #4]
 8012ff4:	9f04      	ldr	r7, [sp, #16]
 8012ff6:	e694      	b.n	8012d22 <_vfiprintf_r+0xe2>
 8012ff8:	06e3      	lsls	r3, r4, #27
 8012ffa:	d503      	bpl.n	8013004 <_vfiprintf_r+0x3c4>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	9a08      	ldr	r2, [sp, #32]
 8013000:	601a      	str	r2, [r3, #0]
 8013002:	e7f7      	b.n	8012ff4 <_vfiprintf_r+0x3b4>
 8013004:	0663      	lsls	r3, r4, #25
 8013006:	d503      	bpl.n	8013010 <_vfiprintf_r+0x3d0>
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	9a08      	ldr	r2, [sp, #32]
 801300c:	801a      	strh	r2, [r3, #0]
 801300e:	e7f1      	b.n	8012ff4 <_vfiprintf_r+0x3b4>
 8013010:	05a4      	lsls	r4, r4, #22
 8013012:	d5f3      	bpl.n	8012ffc <_vfiprintf_r+0x3bc>
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	9a08      	ldr	r2, [sp, #32]
 8013018:	701a      	strb	r2, [r3, #0]
 801301a:	e7eb      	b.n	8012ff4 <_vfiprintf_r+0x3b4>
 801301c:	2310      	movs	r3, #16
 801301e:	431c      	orrs	r4, r3
 8013020:	2320      	movs	r3, #32
 8013022:	0020      	movs	r0, r4
 8013024:	4018      	ands	r0, r3
 8013026:	421c      	tst	r4, r3
 8013028:	d00d      	beq.n	8013046 <_vfiprintf_r+0x406>
 801302a:	3b19      	subs	r3, #25
 801302c:	3707      	adds	r7, #7
 801302e:	439f      	bics	r7, r3
 8013030:	0039      	movs	r1, r7
 8013032:	c90c      	ldmia	r1!, {r2, r3}
 8013034:	9200      	str	r2, [sp, #0]
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	9104      	str	r1, [sp, #16]
 801303a:	4bcc      	ldr	r3, [pc, #816]	; (801336c <_vfiprintf_r+0x72c>)
 801303c:	401c      	ands	r4, r3
 801303e:	2300      	movs	r3, #0
 8013040:	2100      	movs	r1, #0
 8013042:	aa12      	add	r2, sp, #72	; 0x48
 8013044:	e7a6      	b.n	8012f94 <_vfiprintf_r+0x354>
 8013046:	003a      	movs	r2, r7
 8013048:	ca08      	ldmia	r2!, {r3}
 801304a:	0021      	movs	r1, r4
 801304c:	9204      	str	r2, [sp, #16]
 801304e:	2210      	movs	r2, #16
 8013050:	4011      	ands	r1, r2
 8013052:	4214      	tst	r4, r2
 8013054:	d002      	beq.n	801305c <_vfiprintf_r+0x41c>
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	9001      	str	r0, [sp, #4]
 801305a:	e7ee      	b.n	801303a <_vfiprintf_r+0x3fa>
 801305c:	2240      	movs	r2, #64	; 0x40
 801305e:	0020      	movs	r0, r4
 8013060:	4010      	ands	r0, r2
 8013062:	4214      	tst	r4, r2
 8013064:	d003      	beq.n	801306e <_vfiprintf_r+0x42e>
 8013066:	b29b      	uxth	r3, r3
 8013068:	9300      	str	r3, [sp, #0]
 801306a:	9101      	str	r1, [sp, #4]
 801306c:	e7e5      	b.n	801303a <_vfiprintf_r+0x3fa>
 801306e:	2280      	movs	r2, #128	; 0x80
 8013070:	0021      	movs	r1, r4
 8013072:	0092      	lsls	r2, r2, #2
 8013074:	4011      	ands	r1, r2
 8013076:	4214      	tst	r4, r2
 8013078:	d0f6      	beq.n	8013068 <_vfiprintf_r+0x428>
 801307a:	b2db      	uxtb	r3, r3
 801307c:	e7eb      	b.n	8013056 <_vfiprintf_r+0x416>
 801307e:	003b      	movs	r3, r7
 8013080:	cb04      	ldmia	r3!, {r2}
 8013082:	49bb      	ldr	r1, [pc, #748]	; (8013370 <_vfiprintf_r+0x730>)
 8013084:	9304      	str	r3, [sp, #16]
 8013086:	2300      	movs	r3, #0
 8013088:	9200      	str	r2, [sp, #0]
 801308a:	aa13      	add	r2, sp, #76	; 0x4c
 801308c:	8011      	strh	r1, [r2, #0]
 801308e:	4ab9      	ldr	r2, [pc, #740]	; (8013374 <_vfiprintf_r+0x734>)
 8013090:	9301      	str	r3, [sp, #4]
 8013092:	3302      	adds	r3, #2
 8013094:	431c      	orrs	r4, r3
 8013096:	920c      	str	r2, [sp, #48]	; 0x30
 8013098:	e7d2      	b.n	8013040 <_vfiprintf_r+0x400>
 801309a:	003b      	movs	r3, r7
 801309c:	2700      	movs	r7, #0
 801309e:	cb40      	ldmia	r3!, {r6}
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	ab12      	add	r3, sp, #72	; 0x48
 80130a4:	70df      	strb	r7, [r3, #3]
 80130a6:	9b05      	ldr	r3, [sp, #20]
 80130a8:	3301      	adds	r3, #1
 80130aa:	d100      	bne.n	80130ae <_vfiprintf_r+0x46e>
 80130ac:	e0ea      	b.n	8013284 <_vfiprintf_r+0x644>
 80130ae:	0039      	movs	r1, r7
 80130b0:	0030      	movs	r0, r6
 80130b2:	9a05      	ldr	r2, [sp, #20]
 80130b4:	f7fe f9b4 	bl	8011420 <memchr>
 80130b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80130ba:	42b8      	cmp	r0, r7
 80130bc:	d002      	beq.n	80130c4 <_vfiprintf_r+0x484>
 80130be:	1b83      	subs	r3, r0, r6
 80130c0:	9305      	str	r3, [sp, #20]
 80130c2:	970b      	str	r7, [sp, #44]	; 0x2c
 80130c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130c6:	9a05      	ldr	r2, [sp, #20]
 80130c8:	930a      	str	r3, [sp, #40]	; 0x28
 80130ca:	4293      	cmp	r3, r2
 80130cc:	da00      	bge.n	80130d0 <_vfiprintf_r+0x490>
 80130ce:	920a      	str	r2, [sp, #40]	; 0x28
 80130d0:	ab12      	add	r3, sp, #72	; 0x48
 80130d2:	3303      	adds	r3, #3
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	1e5a      	subs	r2, r3, #1
 80130d8:	4193      	sbcs	r3, r2
 80130da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130dc:	18d3      	adds	r3, r2, r3
 80130de:	930a      	str	r3, [sp, #40]	; 0x28
 80130e0:	0022      	movs	r2, r4
 80130e2:	2302      	movs	r3, #2
 80130e4:	401a      	ands	r2, r3
 80130e6:	9210      	str	r2, [sp, #64]	; 0x40
 80130e8:	421c      	tst	r4, r3
 80130ea:	d002      	beq.n	80130f2 <_vfiprintf_r+0x4b2>
 80130ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130ee:	3302      	adds	r3, #2
 80130f0:	930a      	str	r3, [sp, #40]	; 0x28
 80130f2:	2384      	movs	r3, #132	; 0x84
 80130f4:	0022      	movs	r2, r4
 80130f6:	401a      	ands	r2, r3
 80130f8:	9211      	str	r2, [sp, #68]	; 0x44
 80130fa:	421c      	tst	r4, r3
 80130fc:	d11e      	bne.n	801313c <_vfiprintf_r+0x4fc>
 80130fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013102:	1a9f      	subs	r7, r3, r2
 8013104:	2f00      	cmp	r7, #0
 8013106:	dd19      	ble.n	801313c <_vfiprintf_r+0x4fc>
 8013108:	0029      	movs	r1, r5
 801310a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801310c:	489a      	ldr	r0, [pc, #616]	; (8013378 <_vfiprintf_r+0x738>)
 801310e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013110:	3301      	adds	r3, #1
 8013112:	3108      	adds	r1, #8
 8013114:	6028      	str	r0, [r5, #0]
 8013116:	2f10      	cmp	r7, #16
 8013118:	dd00      	ble.n	801311c <_vfiprintf_r+0x4dc>
 801311a:	e1a7      	b.n	801346c <_vfiprintf_r+0x82c>
 801311c:	606f      	str	r7, [r5, #4]
 801311e:	18bf      	adds	r7, r7, r2
 8013120:	000d      	movs	r5, r1
 8013122:	9716      	str	r7, [sp, #88]	; 0x58
 8013124:	9315      	str	r3, [sp, #84]	; 0x54
 8013126:	2b07      	cmp	r3, #7
 8013128:	dd08      	ble.n	801313c <_vfiprintf_r+0x4fc>
 801312a:	9903      	ldr	r1, [sp, #12]
 801312c:	9806      	ldr	r0, [sp, #24]
 801312e:	aa14      	add	r2, sp, #80	; 0x50
 8013130:	f7ff fd51 	bl	8012bd6 <__sprint_r>
 8013134:	2800      	cmp	r0, #0
 8013136:	d000      	beq.n	801313a <_vfiprintf_r+0x4fa>
 8013138:	e1eb      	b.n	8013512 <_vfiprintf_r+0x8d2>
 801313a:	ad17      	add	r5, sp, #92	; 0x5c
 801313c:	a912      	add	r1, sp, #72	; 0x48
 801313e:	78c8      	ldrb	r0, [r1, #3]
 8013140:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013144:	3103      	adds	r1, #3
 8013146:	2800      	cmp	r0, #0
 8013148:	d012      	beq.n	8013170 <_vfiprintf_r+0x530>
 801314a:	6029      	str	r1, [r5, #0]
 801314c:	2101      	movs	r1, #1
 801314e:	3301      	adds	r3, #1
 8013150:	1852      	adds	r2, r2, r1
 8013152:	6069      	str	r1, [r5, #4]
 8013154:	9216      	str	r2, [sp, #88]	; 0x58
 8013156:	9315      	str	r3, [sp, #84]	; 0x54
 8013158:	3508      	adds	r5, #8
 801315a:	2b07      	cmp	r3, #7
 801315c:	dd08      	ble.n	8013170 <_vfiprintf_r+0x530>
 801315e:	9903      	ldr	r1, [sp, #12]
 8013160:	9806      	ldr	r0, [sp, #24]
 8013162:	aa14      	add	r2, sp, #80	; 0x50
 8013164:	f7ff fd37 	bl	8012bd6 <__sprint_r>
 8013168:	2800      	cmp	r0, #0
 801316a:	d000      	beq.n	801316e <_vfiprintf_r+0x52e>
 801316c:	e1d1      	b.n	8013512 <_vfiprintf_r+0x8d2>
 801316e:	ad17      	add	r5, sp, #92	; 0x5c
 8013170:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013172:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013176:	2900      	cmp	r1, #0
 8013178:	d013      	beq.n	80131a2 <_vfiprintf_r+0x562>
 801317a:	a913      	add	r1, sp, #76	; 0x4c
 801317c:	6029      	str	r1, [r5, #0]
 801317e:	2102      	movs	r1, #2
 8013180:	3301      	adds	r3, #1
 8013182:	1852      	adds	r2, r2, r1
 8013184:	6069      	str	r1, [r5, #4]
 8013186:	9216      	str	r2, [sp, #88]	; 0x58
 8013188:	9315      	str	r3, [sp, #84]	; 0x54
 801318a:	3508      	adds	r5, #8
 801318c:	2b07      	cmp	r3, #7
 801318e:	dd08      	ble.n	80131a2 <_vfiprintf_r+0x562>
 8013190:	9903      	ldr	r1, [sp, #12]
 8013192:	9806      	ldr	r0, [sp, #24]
 8013194:	aa14      	add	r2, sp, #80	; 0x50
 8013196:	f7ff fd1e 	bl	8012bd6 <__sprint_r>
 801319a:	2800      	cmp	r0, #0
 801319c:	d000      	beq.n	80131a0 <_vfiprintf_r+0x560>
 801319e:	e1b8      	b.n	8013512 <_vfiprintf_r+0x8d2>
 80131a0:	ad17      	add	r5, sp, #92	; 0x5c
 80131a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131a4:	2b80      	cmp	r3, #128	; 0x80
 80131a6:	d11e      	bne.n	80131e6 <_vfiprintf_r+0x5a6>
 80131a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131ac:	1a9f      	subs	r7, r3, r2
 80131ae:	2f00      	cmp	r7, #0
 80131b0:	dd19      	ble.n	80131e6 <_vfiprintf_r+0x5a6>
 80131b2:	0029      	movs	r1, r5
 80131b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131b6:	4871      	ldr	r0, [pc, #452]	; (801337c <_vfiprintf_r+0x73c>)
 80131b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80131ba:	3301      	adds	r3, #1
 80131bc:	3108      	adds	r1, #8
 80131be:	6028      	str	r0, [r5, #0]
 80131c0:	2f10      	cmp	r7, #16
 80131c2:	dd00      	ble.n	80131c6 <_vfiprintf_r+0x586>
 80131c4:	e164      	b.n	8013490 <_vfiprintf_r+0x850>
 80131c6:	606f      	str	r7, [r5, #4]
 80131c8:	18bf      	adds	r7, r7, r2
 80131ca:	000d      	movs	r5, r1
 80131cc:	9716      	str	r7, [sp, #88]	; 0x58
 80131ce:	9315      	str	r3, [sp, #84]	; 0x54
 80131d0:	2b07      	cmp	r3, #7
 80131d2:	dd08      	ble.n	80131e6 <_vfiprintf_r+0x5a6>
 80131d4:	9903      	ldr	r1, [sp, #12]
 80131d6:	9806      	ldr	r0, [sp, #24]
 80131d8:	aa14      	add	r2, sp, #80	; 0x50
 80131da:	f7ff fcfc 	bl	8012bd6 <__sprint_r>
 80131de:	2800      	cmp	r0, #0
 80131e0:	d000      	beq.n	80131e4 <_vfiprintf_r+0x5a4>
 80131e2:	e196      	b.n	8013512 <_vfiprintf_r+0x8d2>
 80131e4:	ad17      	add	r5, sp, #92	; 0x5c
 80131e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131e8:	9a05      	ldr	r2, [sp, #20]
 80131ea:	1a9f      	subs	r7, r3, r2
 80131ec:	2f00      	cmp	r7, #0
 80131ee:	dd19      	ble.n	8013224 <_vfiprintf_r+0x5e4>
 80131f0:	0029      	movs	r1, r5
 80131f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131f4:	4861      	ldr	r0, [pc, #388]	; (801337c <_vfiprintf_r+0x73c>)
 80131f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80131f8:	3301      	adds	r3, #1
 80131fa:	3108      	adds	r1, #8
 80131fc:	6028      	str	r0, [r5, #0]
 80131fe:	2f10      	cmp	r7, #16
 8013200:	dd00      	ble.n	8013204 <_vfiprintf_r+0x5c4>
 8013202:	e157      	b.n	80134b4 <_vfiprintf_r+0x874>
 8013204:	606f      	str	r7, [r5, #4]
 8013206:	18bf      	adds	r7, r7, r2
 8013208:	000d      	movs	r5, r1
 801320a:	9716      	str	r7, [sp, #88]	; 0x58
 801320c:	9315      	str	r3, [sp, #84]	; 0x54
 801320e:	2b07      	cmp	r3, #7
 8013210:	dd08      	ble.n	8013224 <_vfiprintf_r+0x5e4>
 8013212:	9903      	ldr	r1, [sp, #12]
 8013214:	9806      	ldr	r0, [sp, #24]
 8013216:	aa14      	add	r2, sp, #80	; 0x50
 8013218:	f7ff fcdd 	bl	8012bd6 <__sprint_r>
 801321c:	2800      	cmp	r0, #0
 801321e:	d000      	beq.n	8013222 <_vfiprintf_r+0x5e2>
 8013220:	e177      	b.n	8013512 <_vfiprintf_r+0x8d2>
 8013222:	ad17      	add	r5, sp, #92	; 0x5c
 8013224:	9b05      	ldr	r3, [sp, #20]
 8013226:	9a05      	ldr	r2, [sp, #20]
 8013228:	606b      	str	r3, [r5, #4]
 801322a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801322c:	602e      	str	r6, [r5, #0]
 801322e:	189b      	adds	r3, r3, r2
 8013230:	9316      	str	r3, [sp, #88]	; 0x58
 8013232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013234:	3508      	adds	r5, #8
 8013236:	3301      	adds	r3, #1
 8013238:	9315      	str	r3, [sp, #84]	; 0x54
 801323a:	2b07      	cmp	r3, #7
 801323c:	dd08      	ble.n	8013250 <_vfiprintf_r+0x610>
 801323e:	9903      	ldr	r1, [sp, #12]
 8013240:	9806      	ldr	r0, [sp, #24]
 8013242:	aa14      	add	r2, sp, #80	; 0x50
 8013244:	f7ff fcc7 	bl	8012bd6 <__sprint_r>
 8013248:	2800      	cmp	r0, #0
 801324a:	d000      	beq.n	801324e <_vfiprintf_r+0x60e>
 801324c:	e161      	b.n	8013512 <_vfiprintf_r+0x8d2>
 801324e:	ad17      	add	r5, sp, #92	; 0x5c
 8013250:	0764      	lsls	r4, r4, #29
 8013252:	d500      	bpl.n	8013256 <_vfiprintf_r+0x616>
 8013254:	e140      	b.n	80134d8 <_vfiprintf_r+0x898>
 8013256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801325a:	4293      	cmp	r3, r2
 801325c:	da00      	bge.n	8013260 <_vfiprintf_r+0x620>
 801325e:	0013      	movs	r3, r2
 8013260:	9a08      	ldr	r2, [sp, #32]
 8013262:	18d3      	adds	r3, r2, r3
 8013264:	9308      	str	r3, [sp, #32]
 8013266:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013268:	2b00      	cmp	r3, #0
 801326a:	d007      	beq.n	801327c <_vfiprintf_r+0x63c>
 801326c:	9903      	ldr	r1, [sp, #12]
 801326e:	9806      	ldr	r0, [sp, #24]
 8013270:	aa14      	add	r2, sp, #80	; 0x50
 8013272:	f7ff fcb0 	bl	8012bd6 <__sprint_r>
 8013276:	2800      	cmp	r0, #0
 8013278:	d000      	beq.n	801327c <_vfiprintf_r+0x63c>
 801327a:	e14a      	b.n	8013512 <_vfiprintf_r+0x8d2>
 801327c:	2300      	movs	r3, #0
 801327e:	ad17      	add	r5, sp, #92	; 0x5c
 8013280:	9315      	str	r3, [sp, #84]	; 0x54
 8013282:	e6b7      	b.n	8012ff4 <_vfiprintf_r+0x3b4>
 8013284:	0030      	movs	r0, r6
 8013286:	f7ec ff3d 	bl	8000104 <strlen>
 801328a:	9005      	str	r0, [sp, #20]
 801328c:	e719      	b.n	80130c2 <_vfiprintf_r+0x482>
 801328e:	2310      	movs	r3, #16
 8013290:	431c      	orrs	r4, r3
 8013292:	2320      	movs	r3, #32
 8013294:	0020      	movs	r0, r4
 8013296:	4018      	ands	r0, r3
 8013298:	421c      	tst	r4, r3
 801329a:	d009      	beq.n	80132b0 <_vfiprintf_r+0x670>
 801329c:	3b19      	subs	r3, #25
 801329e:	3707      	adds	r7, #7
 80132a0:	439f      	bics	r7, r3
 80132a2:	0039      	movs	r1, r7
 80132a4:	c90c      	ldmia	r1!, {r2, r3}
 80132a6:	9200      	str	r2, [sp, #0]
 80132a8:	9301      	str	r3, [sp, #4]
 80132aa:	9104      	str	r1, [sp, #16]
 80132ac:	2301      	movs	r3, #1
 80132ae:	e6c7      	b.n	8013040 <_vfiprintf_r+0x400>
 80132b0:	003b      	movs	r3, r7
 80132b2:	cb04      	ldmia	r3!, {r2}
 80132b4:	0021      	movs	r1, r4
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	2310      	movs	r3, #16
 80132ba:	4019      	ands	r1, r3
 80132bc:	421c      	tst	r4, r3
 80132be:	d003      	beq.n	80132c8 <_vfiprintf_r+0x688>
 80132c0:	9200      	str	r2, [sp, #0]
 80132c2:	9001      	str	r0, [sp, #4]
 80132c4:	3b0f      	subs	r3, #15
 80132c6:	e6bb      	b.n	8013040 <_vfiprintf_r+0x400>
 80132c8:	2340      	movs	r3, #64	; 0x40
 80132ca:	0020      	movs	r0, r4
 80132cc:	4018      	ands	r0, r3
 80132ce:	421c      	tst	r4, r3
 80132d0:	d003      	beq.n	80132da <_vfiprintf_r+0x69a>
 80132d2:	b293      	uxth	r3, r2
 80132d4:	9300      	str	r3, [sp, #0]
 80132d6:	9101      	str	r1, [sp, #4]
 80132d8:	e7e8      	b.n	80132ac <_vfiprintf_r+0x66c>
 80132da:	2380      	movs	r3, #128	; 0x80
 80132dc:	0021      	movs	r1, r4
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	4019      	ands	r1, r3
 80132e2:	421c      	tst	r4, r3
 80132e4:	d003      	beq.n	80132ee <_vfiprintf_r+0x6ae>
 80132e6:	b2d3      	uxtb	r3, r2
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	9001      	str	r0, [sp, #4]
 80132ec:	e7de      	b.n	80132ac <_vfiprintf_r+0x66c>
 80132ee:	9200      	str	r2, [sp, #0]
 80132f0:	e7f1      	b.n	80132d6 <_vfiprintf_r+0x696>
 80132f2:	4a23      	ldr	r2, [pc, #140]	; (8013380 <_vfiprintf_r+0x740>)
 80132f4:	0020      	movs	r0, r4
 80132f6:	920c      	str	r2, [sp, #48]	; 0x30
 80132f8:	2220      	movs	r2, #32
 80132fa:	4010      	ands	r0, r2
 80132fc:	4214      	tst	r4, r2
 80132fe:	d019      	beq.n	8013334 <_vfiprintf_r+0x6f4>
 8013300:	3a19      	subs	r2, #25
 8013302:	3707      	adds	r7, #7
 8013304:	4397      	bics	r7, r2
 8013306:	0038      	movs	r0, r7
 8013308:	c806      	ldmia	r0!, {r1, r2}
 801330a:	9100      	str	r1, [sp, #0]
 801330c:	9201      	str	r2, [sp, #4]
 801330e:	9004      	str	r0, [sp, #16]
 8013310:	07e2      	lsls	r2, r4, #31
 8013312:	d509      	bpl.n	8013328 <_vfiprintf_r+0x6e8>
 8013314:	9a00      	ldr	r2, [sp, #0]
 8013316:	9901      	ldr	r1, [sp, #4]
 8013318:	430a      	orrs	r2, r1
 801331a:	d005      	beq.n	8013328 <_vfiprintf_r+0x6e8>
 801331c:	aa13      	add	r2, sp, #76	; 0x4c
 801331e:	2130      	movs	r1, #48	; 0x30
 8013320:	7053      	strb	r3, [r2, #1]
 8013322:	2302      	movs	r3, #2
 8013324:	7011      	strb	r1, [r2, #0]
 8013326:	431c      	orrs	r4, r3
 8013328:	4b10      	ldr	r3, [pc, #64]	; (801336c <_vfiprintf_r+0x72c>)
 801332a:	401c      	ands	r4, r3
 801332c:	2302      	movs	r3, #2
 801332e:	e687      	b.n	8013040 <_vfiprintf_r+0x400>
 8013330:	4a10      	ldr	r2, [pc, #64]	; (8013374 <_vfiprintf_r+0x734>)
 8013332:	e7df      	b.n	80132f4 <_vfiprintf_r+0x6b4>
 8013334:	0039      	movs	r1, r7
 8013336:	c904      	ldmia	r1!, {r2}
 8013338:	0026      	movs	r6, r4
 801333a:	9104      	str	r1, [sp, #16]
 801333c:	2110      	movs	r1, #16
 801333e:	400e      	ands	r6, r1
 8013340:	420c      	tst	r4, r1
 8013342:	d002      	beq.n	801334a <_vfiprintf_r+0x70a>
 8013344:	9200      	str	r2, [sp, #0]
 8013346:	9001      	str	r0, [sp, #4]
 8013348:	e7e2      	b.n	8013310 <_vfiprintf_r+0x6d0>
 801334a:	2140      	movs	r1, #64	; 0x40
 801334c:	0020      	movs	r0, r4
 801334e:	4008      	ands	r0, r1
 8013350:	420c      	tst	r4, r1
 8013352:	d003      	beq.n	801335c <_vfiprintf_r+0x71c>
 8013354:	b292      	uxth	r2, r2
 8013356:	9200      	str	r2, [sp, #0]
 8013358:	9601      	str	r6, [sp, #4]
 801335a:	e7d9      	b.n	8013310 <_vfiprintf_r+0x6d0>
 801335c:	2180      	movs	r1, #128	; 0x80
 801335e:	0026      	movs	r6, r4
 8013360:	0089      	lsls	r1, r1, #2
 8013362:	400e      	ands	r6, r1
 8013364:	420c      	tst	r4, r1
 8013366:	d0f6      	beq.n	8013356 <_vfiprintf_r+0x716>
 8013368:	b2d2      	uxtb	r2, r2
 801336a:	e7eb      	b.n	8013344 <_vfiprintf_r+0x704>
 801336c:	fffffbff 	.word	0xfffffbff
 8013370:	00007830 	.word	0x00007830
 8013374:	08015e6c 	.word	0x08015e6c
 8013378:	08015f79 	.word	0x08015f79
 801337c:	08015f89 	.word	0x08015f89
 8013380:	08015e7d 	.word	0x08015e7d
 8013384:	9b01      	ldr	r3, [sp, #4]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d109      	bne.n	801339e <_vfiprintf_r+0x75e>
 801338a:	9b00      	ldr	r3, [sp, #0]
 801338c:	2b09      	cmp	r3, #9
 801338e:	d806      	bhi.n	801339e <_vfiprintf_r+0x75e>
 8013390:	26b7      	movs	r6, #183	; 0xb7
 8013392:	ab12      	add	r3, sp, #72	; 0x48
 8013394:	18f6      	adds	r6, r6, r3
 8013396:	9b00      	ldr	r3, [sp, #0]
 8013398:	3330      	adds	r3, #48	; 0x30
 801339a:	7033      	strb	r3, [r6, #0]
 801339c:	e115      	b.n	80135ca <_vfiprintf_r+0x98a>
 801339e:	2380      	movs	r3, #128	; 0x80
 80133a0:	2400      	movs	r4, #0
 80133a2:	00db      	lsls	r3, r3, #3
 80133a4:	403b      	ands	r3, r7
 80133a6:	ae40      	add	r6, sp, #256	; 0x100
 80133a8:	930a      	str	r3, [sp, #40]	; 0x28
 80133aa:	220a      	movs	r2, #10
 80133ac:	9800      	ldr	r0, [sp, #0]
 80133ae:	9901      	ldr	r1, [sp, #4]
 80133b0:	2300      	movs	r3, #0
 80133b2:	f7ed f877 	bl	80004a4 <__aeabi_uldivmod>
 80133b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133b8:	3e01      	subs	r6, #1
 80133ba:	3230      	adds	r2, #48	; 0x30
 80133bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80133be:	9110      	str	r1, [sp, #64]	; 0x40
 80133c0:	7032      	strb	r2, [r6, #0]
 80133c2:	3401      	adds	r4, #1
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d01a      	beq.n	80133fe <_vfiprintf_r+0x7be>
 80133c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	42a3      	cmp	r3, r4
 80133ce:	d116      	bne.n	80133fe <_vfiprintf_r+0x7be>
 80133d0:	2cff      	cmp	r4, #255	; 0xff
 80133d2:	d014      	beq.n	80133fe <_vfiprintf_r+0x7be>
 80133d4:	9b01      	ldr	r3, [sp, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d102      	bne.n	80133e0 <_vfiprintf_r+0x7a0>
 80133da:	9b00      	ldr	r3, [sp, #0]
 80133dc:	2b09      	cmp	r3, #9
 80133de:	d90e      	bls.n	80133fe <_vfiprintf_r+0x7be>
 80133e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133e4:	1af6      	subs	r6, r6, r3
 80133e6:	001a      	movs	r2, r3
 80133e8:	0030      	movs	r0, r6
 80133ea:	f7fa f832 	bl	800d452 <strncpy>
 80133ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133f0:	2400      	movs	r4, #0
 80133f2:	785b      	ldrb	r3, [r3, #1]
 80133f4:	1e5a      	subs	r2, r3, #1
 80133f6:	4193      	sbcs	r3, r2
 80133f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80133fa:	18d3      	adds	r3, r2, r3
 80133fc:	930d      	str	r3, [sp, #52]	; 0x34
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d103      	bne.n	801340c <_vfiprintf_r+0x7cc>
 8013404:	9b00      	ldr	r3, [sp, #0]
 8013406:	2b09      	cmp	r3, #9
 8013408:	d800      	bhi.n	801340c <_vfiprintf_r+0x7cc>
 801340a:	e0de      	b.n	80135ca <_vfiprintf_r+0x98a>
 801340c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013412:	9301      	str	r3, [sp, #4]
 8013414:	e7c9      	b.n	80133aa <_vfiprintf_r+0x76a>
 8013416:	200f      	movs	r0, #15
 8013418:	9b00      	ldr	r3, [sp, #0]
 801341a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801341c:	4003      	ands	r3, r0
 801341e:	5cd3      	ldrb	r3, [r2, r3]
 8013420:	3e01      	subs	r6, #1
 8013422:	7033      	strb	r3, [r6, #0]
 8013424:	9b01      	ldr	r3, [sp, #4]
 8013426:	0719      	lsls	r1, r3, #28
 8013428:	9b00      	ldr	r3, [sp, #0]
 801342a:	091a      	lsrs	r2, r3, #4
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	4311      	orrs	r1, r2
 8013430:	091b      	lsrs	r3, r3, #4
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	000b      	movs	r3, r1
 8013436:	9a01      	ldr	r2, [sp, #4]
 8013438:	9100      	str	r1, [sp, #0]
 801343a:	4313      	orrs	r3, r2
 801343c:	d1ec      	bne.n	8013418 <_vfiprintf_r+0x7d8>
 801343e:	e0c4      	b.n	80135ca <_vfiprintf_r+0x98a>
 8013440:	ae40      	add	r6, sp, #256	; 0x100
 8013442:	2b00      	cmp	r3, #0
 8013444:	d000      	beq.n	8013448 <_vfiprintf_r+0x808>
 8013446:	e0c0      	b.n	80135ca <_vfiprintf_r+0x98a>
 8013448:	07e4      	lsls	r4, r4, #31
 801344a:	d400      	bmi.n	801344e <_vfiprintf_r+0x80e>
 801344c:	e0bd      	b.n	80135ca <_vfiprintf_r+0x98a>
 801344e:	26b7      	movs	r6, #183	; 0xb7
 8013450:	ab12      	add	r3, sp, #72	; 0x48
 8013452:	18f6      	adds	r6, r6, r3
 8013454:	2330      	movs	r3, #48	; 0x30
 8013456:	e7a0      	b.n	801339a <_vfiprintf_r+0x75a>
 8013458:	2b00      	cmp	r3, #0
 801345a:	d100      	bne.n	801345e <_vfiprintf_r+0x81e>
 801345c:	e07e      	b.n	801355c <_vfiprintf_r+0x91c>
 801345e:	ae27      	add	r6, sp, #156	; 0x9c
 8013460:	7033      	strb	r3, [r6, #0]
 8013462:	2300      	movs	r3, #0
 8013464:	aa12      	add	r2, sp, #72	; 0x48
 8013466:	70d3      	strb	r3, [r2, #3]
 8013468:	9704      	str	r7, [sp, #16]
 801346a:	e576      	b.n	8012f5a <_vfiprintf_r+0x31a>
 801346c:	2010      	movs	r0, #16
 801346e:	1812      	adds	r2, r2, r0
 8013470:	6068      	str	r0, [r5, #4]
 8013472:	9216      	str	r2, [sp, #88]	; 0x58
 8013474:	9315      	str	r3, [sp, #84]	; 0x54
 8013476:	2b07      	cmp	r3, #7
 8013478:	dd07      	ble.n	801348a <_vfiprintf_r+0x84a>
 801347a:	9903      	ldr	r1, [sp, #12]
 801347c:	9806      	ldr	r0, [sp, #24]
 801347e:	aa14      	add	r2, sp, #80	; 0x50
 8013480:	f7ff fba9 	bl	8012bd6 <__sprint_r>
 8013484:	2800      	cmp	r0, #0
 8013486:	d144      	bne.n	8013512 <_vfiprintf_r+0x8d2>
 8013488:	a917      	add	r1, sp, #92	; 0x5c
 801348a:	000d      	movs	r5, r1
 801348c:	3f10      	subs	r7, #16
 801348e:	e63b      	b.n	8013108 <_vfiprintf_r+0x4c8>
 8013490:	2010      	movs	r0, #16
 8013492:	1812      	adds	r2, r2, r0
 8013494:	6068      	str	r0, [r5, #4]
 8013496:	9216      	str	r2, [sp, #88]	; 0x58
 8013498:	9315      	str	r3, [sp, #84]	; 0x54
 801349a:	2b07      	cmp	r3, #7
 801349c:	dd07      	ble.n	80134ae <_vfiprintf_r+0x86e>
 801349e:	9903      	ldr	r1, [sp, #12]
 80134a0:	9806      	ldr	r0, [sp, #24]
 80134a2:	aa14      	add	r2, sp, #80	; 0x50
 80134a4:	f7ff fb97 	bl	8012bd6 <__sprint_r>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d132      	bne.n	8013512 <_vfiprintf_r+0x8d2>
 80134ac:	a917      	add	r1, sp, #92	; 0x5c
 80134ae:	000d      	movs	r5, r1
 80134b0:	3f10      	subs	r7, #16
 80134b2:	e67e      	b.n	80131b2 <_vfiprintf_r+0x572>
 80134b4:	2010      	movs	r0, #16
 80134b6:	1812      	adds	r2, r2, r0
 80134b8:	6068      	str	r0, [r5, #4]
 80134ba:	9216      	str	r2, [sp, #88]	; 0x58
 80134bc:	9315      	str	r3, [sp, #84]	; 0x54
 80134be:	2b07      	cmp	r3, #7
 80134c0:	dd07      	ble.n	80134d2 <_vfiprintf_r+0x892>
 80134c2:	9903      	ldr	r1, [sp, #12]
 80134c4:	9806      	ldr	r0, [sp, #24]
 80134c6:	aa14      	add	r2, sp, #80	; 0x50
 80134c8:	f7ff fb85 	bl	8012bd6 <__sprint_r>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d120      	bne.n	8013512 <_vfiprintf_r+0x8d2>
 80134d0:	a917      	add	r1, sp, #92	; 0x5c
 80134d2:	000d      	movs	r5, r1
 80134d4:	3f10      	subs	r7, #16
 80134d6:	e68b      	b.n	80131f0 <_vfiprintf_r+0x5b0>
 80134d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134dc:	2610      	movs	r6, #16
 80134de:	1a9c      	subs	r4, r3, r2
 80134e0:	2c00      	cmp	r4, #0
 80134e2:	dc00      	bgt.n	80134e6 <_vfiprintf_r+0x8a6>
 80134e4:	e6b7      	b.n	8013256 <_vfiprintf_r+0x616>
 80134e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80134e8:	4a3b      	ldr	r2, [pc, #236]	; (80135d8 <_vfiprintf_r+0x998>)
 80134ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80134ec:	3101      	adds	r1, #1
 80134ee:	602a      	str	r2, [r5, #0]
 80134f0:	2c10      	cmp	r4, #16
 80134f2:	dc22      	bgt.n	801353a <_vfiprintf_r+0x8fa>
 80134f4:	606c      	str	r4, [r5, #4]
 80134f6:	18e4      	adds	r4, r4, r3
 80134f8:	9416      	str	r4, [sp, #88]	; 0x58
 80134fa:	9115      	str	r1, [sp, #84]	; 0x54
 80134fc:	2907      	cmp	r1, #7
 80134fe:	dc00      	bgt.n	8013502 <_vfiprintf_r+0x8c2>
 8013500:	e6a9      	b.n	8013256 <_vfiprintf_r+0x616>
 8013502:	9903      	ldr	r1, [sp, #12]
 8013504:	9806      	ldr	r0, [sp, #24]
 8013506:	aa14      	add	r2, sp, #80	; 0x50
 8013508:	f7ff fb65 	bl	8012bd6 <__sprint_r>
 801350c:	2800      	cmp	r0, #0
 801350e:	d100      	bne.n	8013512 <_vfiprintf_r+0x8d2>
 8013510:	e6a1      	b.n	8013256 <_vfiprintf_r+0x616>
 8013512:	9b03      	ldr	r3, [sp, #12]
 8013514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013516:	07db      	lsls	r3, r3, #31
 8013518:	d407      	bmi.n	801352a <_vfiprintf_r+0x8ea>
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	899b      	ldrh	r3, [r3, #12]
 801351e:	059b      	lsls	r3, r3, #22
 8013520:	d403      	bmi.n	801352a <_vfiprintf_r+0x8ea>
 8013522:	9b03      	ldr	r3, [sp, #12]
 8013524:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8013526:	f7fa f88e 	bl	800d646 <__retarget_lock_release_recursive>
 801352a:	9b03      	ldr	r3, [sp, #12]
 801352c:	899b      	ldrh	r3, [r3, #12]
 801352e:	065b      	lsls	r3, r3, #25
 8013530:	d401      	bmi.n	8013536 <_vfiprintf_r+0x8f6>
 8013532:	f7ff fbc3 	bl	8012cbc <_vfiprintf_r+0x7c>
 8013536:	f7ff fbbe 	bl	8012cb6 <_vfiprintf_r+0x76>
 801353a:	3310      	adds	r3, #16
 801353c:	606e      	str	r6, [r5, #4]
 801353e:	9316      	str	r3, [sp, #88]	; 0x58
 8013540:	9115      	str	r1, [sp, #84]	; 0x54
 8013542:	3508      	adds	r5, #8
 8013544:	2907      	cmp	r1, #7
 8013546:	dd07      	ble.n	8013558 <_vfiprintf_r+0x918>
 8013548:	9903      	ldr	r1, [sp, #12]
 801354a:	9806      	ldr	r0, [sp, #24]
 801354c:	aa14      	add	r2, sp, #80	; 0x50
 801354e:	f7ff fb42 	bl	8012bd6 <__sprint_r>
 8013552:	2800      	cmp	r0, #0
 8013554:	d1dd      	bne.n	8013512 <_vfiprintf_r+0x8d2>
 8013556:	ad17      	add	r5, sp, #92	; 0x5c
 8013558:	3c10      	subs	r4, #16
 801355a:	e7c4      	b.n	80134e6 <_vfiprintf_r+0x8a6>
 801355c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801355e:	2b00      	cmp	r3, #0
 8013560:	d102      	bne.n	8013568 <_vfiprintf_r+0x928>
 8013562:	2300      	movs	r3, #0
 8013564:	9315      	str	r3, [sp, #84]	; 0x54
 8013566:	e7d4      	b.n	8013512 <_vfiprintf_r+0x8d2>
 8013568:	9903      	ldr	r1, [sp, #12]
 801356a:	9806      	ldr	r0, [sp, #24]
 801356c:	aa14      	add	r2, sp, #80	; 0x50
 801356e:	f7ff fb32 	bl	8012bd6 <__sprint_r>
 8013572:	2800      	cmp	r0, #0
 8013574:	d0f5      	beq.n	8013562 <_vfiprintf_r+0x922>
 8013576:	e7cc      	b.n	8013512 <_vfiprintf_r+0x8d2>
 8013578:	0027      	movs	r7, r4
 801357a:	2a00      	cmp	r2, #0
 801357c:	d100      	bne.n	8013580 <_vfiprintf_r+0x940>
 801357e:	e51b      	b.n	8012fb8 <_vfiprintf_r+0x378>
 8013580:	2b01      	cmp	r3, #1
 8013582:	d100      	bne.n	8013586 <_vfiprintf_r+0x946>
 8013584:	e6fe      	b.n	8013384 <_vfiprintf_r+0x744>
 8013586:	ae40      	add	r6, sp, #256	; 0x100
 8013588:	2b02      	cmp	r3, #2
 801358a:	d100      	bne.n	801358e <_vfiprintf_r+0x94e>
 801358c:	e743      	b.n	8013416 <_vfiprintf_r+0x7d6>
 801358e:	2307      	movs	r3, #7
 8013590:	469c      	mov	ip, r3
 8013592:	4663      	mov	r3, ip
 8013594:	9900      	ldr	r1, [sp, #0]
 8013596:	0032      	movs	r2, r6
 8013598:	400b      	ands	r3, r1
 801359a:	9901      	ldr	r1, [sp, #4]
 801359c:	3e01      	subs	r6, #1
 801359e:	074c      	lsls	r4, r1, #29
 80135a0:	9900      	ldr	r1, [sp, #0]
 80135a2:	3330      	adds	r3, #48	; 0x30
 80135a4:	08c8      	lsrs	r0, r1, #3
 80135a6:	9901      	ldr	r1, [sp, #4]
 80135a8:	4304      	orrs	r4, r0
 80135aa:	08c9      	lsrs	r1, r1, #3
 80135ac:	9101      	str	r1, [sp, #4]
 80135ae:	0021      	movs	r1, r4
 80135b0:	9801      	ldr	r0, [sp, #4]
 80135b2:	7033      	strb	r3, [r6, #0]
 80135b4:	9400      	str	r4, [sp, #0]
 80135b6:	4301      	orrs	r1, r0
 80135b8:	d1eb      	bne.n	8013592 <_vfiprintf_r+0x952>
 80135ba:	07f9      	lsls	r1, r7, #31
 80135bc:	d505      	bpl.n	80135ca <_vfiprintf_r+0x98a>
 80135be:	2b30      	cmp	r3, #48	; 0x30
 80135c0:	d003      	beq.n	80135ca <_vfiprintf_r+0x98a>
 80135c2:	2330      	movs	r3, #48	; 0x30
 80135c4:	3e01      	subs	r6, #1
 80135c6:	7033      	strb	r3, [r6, #0]
 80135c8:	1e96      	subs	r6, r2, #2
 80135ca:	9b05      	ldr	r3, [sp, #20]
 80135cc:	003c      	movs	r4, r7
 80135ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80135d0:	ab40      	add	r3, sp, #256	; 0x100
 80135d2:	1b9b      	subs	r3, r3, r6
 80135d4:	9305      	str	r3, [sp, #20]
 80135d6:	e575      	b.n	80130c4 <_vfiprintf_r+0x484>
 80135d8:	08015f79 	.word	0x08015f79

080135dc <__sbprintf>:
 80135dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135de:	0015      	movs	r5, r2
 80135e0:	2202      	movs	r2, #2
 80135e2:	4c1e      	ldr	r4, [pc, #120]	; (801365c <__sbprintf+0x80>)
 80135e4:	001f      	movs	r7, r3
 80135e6:	898b      	ldrh	r3, [r1, #12]
 80135e8:	44a5      	add	sp, r4
 80135ea:	4393      	bics	r3, r2
 80135ec:	466a      	mov	r2, sp
 80135ee:	8193      	strh	r3, [r2, #12]
 80135f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80135f2:	0006      	movs	r6, r0
 80135f4:	9319      	str	r3, [sp, #100]	; 0x64
 80135f6:	89cb      	ldrh	r3, [r1, #14]
 80135f8:	a816      	add	r0, sp, #88	; 0x58
 80135fa:	81d3      	strh	r3, [r2, #14]
 80135fc:	69cb      	ldr	r3, [r1, #28]
 80135fe:	000c      	movs	r4, r1
 8013600:	9307      	str	r3, [sp, #28]
 8013602:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8013604:	9309      	str	r3, [sp, #36]	; 0x24
 8013606:	ab1a      	add	r3, sp, #104	; 0x68
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	2380      	movs	r3, #128	; 0x80
 801360e:	00db      	lsls	r3, r3, #3
 8013610:	9302      	str	r3, [sp, #8]
 8013612:	9305      	str	r3, [sp, #20]
 8013614:	2300      	movs	r3, #0
 8013616:	9306      	str	r3, [sp, #24]
 8013618:	f7fa f812 	bl	800d640 <__retarget_lock_init_recursive>
 801361c:	002a      	movs	r2, r5
 801361e:	003b      	movs	r3, r7
 8013620:	4669      	mov	r1, sp
 8013622:	0030      	movs	r0, r6
 8013624:	f7ff fb0c 	bl	8012c40 <_vfiprintf_r>
 8013628:	1e05      	subs	r5, r0, #0
 801362a:	db07      	blt.n	801363c <__sbprintf+0x60>
 801362c:	4669      	mov	r1, sp
 801362e:	0030      	movs	r0, r6
 8013630:	f7fd fe7c 	bl	801132c <_fflush_r>
 8013634:	2800      	cmp	r0, #0
 8013636:	d001      	beq.n	801363c <__sbprintf+0x60>
 8013638:	2501      	movs	r5, #1
 801363a:	426d      	negs	r5, r5
 801363c:	466b      	mov	r3, sp
 801363e:	899a      	ldrh	r2, [r3, #12]
 8013640:	2340      	movs	r3, #64	; 0x40
 8013642:	421a      	tst	r2, r3
 8013644:	d002      	beq.n	801364c <__sbprintf+0x70>
 8013646:	89a2      	ldrh	r2, [r4, #12]
 8013648:	4313      	orrs	r3, r2
 801364a:	81a3      	strh	r3, [r4, #12]
 801364c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801364e:	f7f9 fff8 	bl	800d642 <__retarget_lock_close_recursive>
 8013652:	0028      	movs	r0, r5
 8013654:	4b02      	ldr	r3, [pc, #8]	; (8013660 <__sbprintf+0x84>)
 8013656:	449d      	add	sp, r3
 8013658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801365a:	46c0      	nop			; (mov r8, r8)
 801365c:	fffffb94 	.word	0xfffffb94
 8013660:	0000046c 	.word	0x0000046c

08013664 <__sfvwrite_r>:
 8013664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013666:	6893      	ldr	r3, [r2, #8]
 8013668:	b087      	sub	sp, #28
 801366a:	000c      	movs	r4, r1
 801366c:	9002      	str	r0, [sp, #8]
 801366e:	9204      	str	r2, [sp, #16]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <__sfvwrite_r+0x16>
 8013674:	2000      	movs	r0, #0
 8013676:	b007      	add	sp, #28
 8013678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801367a:	898b      	ldrh	r3, [r1, #12]
 801367c:	071b      	lsls	r3, r3, #28
 801367e:	d557      	bpl.n	8013730 <__sfvwrite_r+0xcc>
 8013680:	690b      	ldr	r3, [r1, #16]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d054      	beq.n	8013730 <__sfvwrite_r+0xcc>
 8013686:	9b04      	ldr	r3, [sp, #16]
 8013688:	2202      	movs	r2, #2
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	89a3      	ldrh	r3, [r4, #12]
 8013690:	001f      	movs	r7, r3
 8013692:	4017      	ands	r7, r2
 8013694:	4213      	tst	r3, r2
 8013696:	d171      	bne.n	801377c <__sfvwrite_r+0x118>
 8013698:	2201      	movs	r2, #1
 801369a:	2101      	movs	r1, #1
 801369c:	401a      	ands	r2, r3
 801369e:	420b      	tst	r3, r1
 80136a0:	d100      	bne.n	80136a4 <__sfvwrite_r+0x40>
 80136a2:	e0a5      	b.n	80137f0 <__sfvwrite_r+0x18c>
 80136a4:	0038      	movs	r0, r7
 80136a6:	003e      	movs	r6, r7
 80136a8:	9703      	str	r7, [sp, #12]
 80136aa:	9b03      	ldr	r3, [sp, #12]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d100      	bne.n	80136b2 <__sfvwrite_r+0x4e>
 80136b0:	e10b      	b.n	80138ca <__sfvwrite_r+0x266>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d10a      	bne.n	80136cc <__sfvwrite_r+0x68>
 80136b6:	001a      	movs	r2, r3
 80136b8:	210a      	movs	r1, #10
 80136ba:	0030      	movs	r0, r6
 80136bc:	f7fd feb0 	bl	8011420 <memchr>
 80136c0:	9b03      	ldr	r3, [sp, #12]
 80136c2:	1c5f      	adds	r7, r3, #1
 80136c4:	2800      	cmp	r0, #0
 80136c6:	d001      	beq.n	80136cc <__sfvwrite_r+0x68>
 80136c8:	3001      	adds	r0, #1
 80136ca:	1b87      	subs	r7, r0, r6
 80136cc:	9b03      	ldr	r3, [sp, #12]
 80136ce:	9705      	str	r7, [sp, #20]
 80136d0:	429f      	cmp	r7, r3
 80136d2:	d900      	bls.n	80136d6 <__sfvwrite_r+0x72>
 80136d4:	9305      	str	r3, [sp, #20]
 80136d6:	6820      	ldr	r0, [r4, #0]
 80136d8:	6922      	ldr	r2, [r4, #16]
 80136da:	68a5      	ldr	r5, [r4, #8]
 80136dc:	6963      	ldr	r3, [r4, #20]
 80136de:	4290      	cmp	r0, r2
 80136e0:	d800      	bhi.n	80136e4 <__sfvwrite_r+0x80>
 80136e2:	e0fb      	b.n	80138dc <__sfvwrite_r+0x278>
 80136e4:	9a05      	ldr	r2, [sp, #20]
 80136e6:	18ed      	adds	r5, r5, r3
 80136e8:	42aa      	cmp	r2, r5
 80136ea:	dc00      	bgt.n	80136ee <__sfvwrite_r+0x8a>
 80136ec:	e0f6      	b.n	80138dc <__sfvwrite_r+0x278>
 80136ee:	0031      	movs	r1, r6
 80136f0:	002a      	movs	r2, r5
 80136f2:	f000 fa1e 	bl	8013b32 <memmove>
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	0021      	movs	r1, r4
 80136fa:	195b      	adds	r3, r3, r5
 80136fc:	9802      	ldr	r0, [sp, #8]
 80136fe:	6023      	str	r3, [r4, #0]
 8013700:	f7fd fe14 	bl	801132c <_fflush_r>
 8013704:	2800      	cmp	r0, #0
 8013706:	d16e      	bne.n	80137e6 <__sfvwrite_r+0x182>
 8013708:	2001      	movs	r0, #1
 801370a:	1b7f      	subs	r7, r7, r5
 801370c:	d105      	bne.n	801371a <__sfvwrite_r+0xb6>
 801370e:	0021      	movs	r1, r4
 8013710:	9802      	ldr	r0, [sp, #8]
 8013712:	f7fd fe0b 	bl	801132c <_fflush_r>
 8013716:	2800      	cmp	r0, #0
 8013718:	d165      	bne.n	80137e6 <__sfvwrite_r+0x182>
 801371a:	9b03      	ldr	r3, [sp, #12]
 801371c:	9a04      	ldr	r2, [sp, #16]
 801371e:	1b5b      	subs	r3, r3, r5
 8013720:	9303      	str	r3, [sp, #12]
 8013722:	9b04      	ldr	r3, [sp, #16]
 8013724:	1976      	adds	r6, r6, r5
 8013726:	689b      	ldr	r3, [r3, #8]
 8013728:	1b5b      	subs	r3, r3, r5
 801372a:	6093      	str	r3, [r2, #8]
 801372c:	d1bd      	bne.n	80136aa <__sfvwrite_r+0x46>
 801372e:	e7a1      	b.n	8013674 <__sfvwrite_r+0x10>
 8013730:	0021      	movs	r1, r4
 8013732:	9802      	ldr	r0, [sp, #8]
 8013734:	f000 f932 	bl	801399c <__swsetup_r>
 8013738:	2800      	cmp	r0, #0
 801373a:	d0a4      	beq.n	8013686 <__sfvwrite_r+0x22>
 801373c:	2001      	movs	r0, #1
 801373e:	4240      	negs	r0, r0
 8013740:	e799      	b.n	8013676 <__sfvwrite_r+0x12>
 8013742:	9b01      	ldr	r3, [sp, #4]
 8013744:	681e      	ldr	r6, [r3, #0]
 8013746:	685d      	ldr	r5, [r3, #4]
 8013748:	3308      	adds	r3, #8
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801374e:	69e1      	ldr	r1, [r4, #28]
 8013750:	2d00      	cmp	r5, #0
 8013752:	d0f6      	beq.n	8013742 <__sfvwrite_r+0xde>
 8013754:	4a6e      	ldr	r2, [pc, #440]	; (8013910 <__sfvwrite_r+0x2ac>)
 8013756:	002b      	movs	r3, r5
 8013758:	4295      	cmp	r5, r2
 801375a:	d900      	bls.n	801375e <__sfvwrite_r+0xfa>
 801375c:	0013      	movs	r3, r2
 801375e:	0032      	movs	r2, r6
 8013760:	9802      	ldr	r0, [sp, #8]
 8013762:	47b8      	blx	r7
 8013764:	2800      	cmp	r0, #0
 8013766:	dd3e      	ble.n	80137e6 <__sfvwrite_r+0x182>
 8013768:	9b04      	ldr	r3, [sp, #16]
 801376a:	9a04      	ldr	r2, [sp, #16]
 801376c:	689b      	ldr	r3, [r3, #8]
 801376e:	1836      	adds	r6, r6, r0
 8013770:	1a1b      	subs	r3, r3, r0
 8013772:	1a2d      	subs	r5, r5, r0
 8013774:	6093      	str	r3, [r2, #8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d1e8      	bne.n	801374c <__sfvwrite_r+0xe8>
 801377a:	e77b      	b.n	8013674 <__sfvwrite_r+0x10>
 801377c:	2600      	movs	r6, #0
 801377e:	0035      	movs	r5, r6
 8013780:	e7e4      	b.n	801374c <__sfvwrite_r+0xe8>
 8013782:	9b01      	ldr	r3, [sp, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	9303      	str	r3, [sp, #12]
 8013788:	9b01      	ldr	r3, [sp, #4]
 801378a:	685d      	ldr	r5, [r3, #4]
 801378c:	3308      	adds	r3, #8
 801378e:	9301      	str	r3, [sp, #4]
 8013790:	220c      	movs	r2, #12
 8013792:	5ea3      	ldrsh	r3, [r4, r2]
 8013794:	6820      	ldr	r0, [r4, #0]
 8013796:	68a6      	ldr	r6, [r4, #8]
 8013798:	2d00      	cmp	r5, #0
 801379a:	d0f2      	beq.n	8013782 <__sfvwrite_r+0x11e>
 801379c:	2180      	movs	r1, #128	; 0x80
 801379e:	0089      	lsls	r1, r1, #2
 80137a0:	b29a      	uxth	r2, r3
 80137a2:	420b      	tst	r3, r1
 80137a4:	d062      	beq.n	801386c <__sfvwrite_r+0x208>
 80137a6:	42ae      	cmp	r6, r5
 80137a8:	d837      	bhi.n	801381a <__sfvwrite_r+0x1b6>
 80137aa:	2390      	movs	r3, #144	; 0x90
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	421a      	tst	r2, r3
 80137b0:	d033      	beq.n	801381a <__sfvwrite_r+0x1b6>
 80137b2:	6921      	ldr	r1, [r4, #16]
 80137b4:	1a43      	subs	r3, r0, r1
 80137b6:	2003      	movs	r0, #3
 80137b8:	9305      	str	r3, [sp, #20]
 80137ba:	6963      	ldr	r3, [r4, #20]
 80137bc:	4343      	muls	r3, r0
 80137be:	0fdf      	lsrs	r7, r3, #31
 80137c0:	18ff      	adds	r7, r7, r3
 80137c2:	9b05      	ldr	r3, [sp, #20]
 80137c4:	107f      	asrs	r7, r7, #1
 80137c6:	3301      	adds	r3, #1
 80137c8:	195b      	adds	r3, r3, r5
 80137ca:	42bb      	cmp	r3, r7
 80137cc:	d900      	bls.n	80137d0 <__sfvwrite_r+0x16c>
 80137ce:	001f      	movs	r7, r3
 80137d0:	0552      	lsls	r2, r2, #21
 80137d2:	d53c      	bpl.n	801384e <__sfvwrite_r+0x1ea>
 80137d4:	0039      	movs	r1, r7
 80137d6:	9802      	ldr	r0, [sp, #8]
 80137d8:	f7f8 fb02 	bl	800bde0 <_malloc_r>
 80137dc:	1e06      	subs	r6, r0, #0
 80137de:	d10a      	bne.n	80137f6 <__sfvwrite_r+0x192>
 80137e0:	230c      	movs	r3, #12
 80137e2:	9a02      	ldr	r2, [sp, #8]
 80137e4:	6013      	str	r3, [r2, #0]
 80137e6:	2340      	movs	r3, #64	; 0x40
 80137e8:	89a2      	ldrh	r2, [r4, #12]
 80137ea:	4313      	orrs	r3, r2
 80137ec:	81a3      	strh	r3, [r4, #12]
 80137ee:	e7a5      	b.n	801373c <__sfvwrite_r+0xd8>
 80137f0:	0015      	movs	r5, r2
 80137f2:	9203      	str	r2, [sp, #12]
 80137f4:	e7cc      	b.n	8013790 <__sfvwrite_r+0x12c>
 80137f6:	9a05      	ldr	r2, [sp, #20]
 80137f8:	6921      	ldr	r1, [r4, #16]
 80137fa:	f7f9 ff30 	bl	800d65e <memcpy>
 80137fe:	89a2      	ldrh	r2, [r4, #12]
 8013800:	4b44      	ldr	r3, [pc, #272]	; (8013914 <__sfvwrite_r+0x2b0>)
 8013802:	401a      	ands	r2, r3
 8013804:	2380      	movs	r3, #128	; 0x80
 8013806:	4313      	orrs	r3, r2
 8013808:	81a3      	strh	r3, [r4, #12]
 801380a:	9b05      	ldr	r3, [sp, #20]
 801380c:	6126      	str	r6, [r4, #16]
 801380e:	18f6      	adds	r6, r6, r3
 8013810:	6026      	str	r6, [r4, #0]
 8013812:	002e      	movs	r6, r5
 8013814:	6167      	str	r7, [r4, #20]
 8013816:	1aff      	subs	r7, r7, r3
 8013818:	60a7      	str	r7, [r4, #8]
 801381a:	002f      	movs	r7, r5
 801381c:	42ae      	cmp	r6, r5
 801381e:	d900      	bls.n	8013822 <__sfvwrite_r+0x1be>
 8013820:	002e      	movs	r6, r5
 8013822:	0032      	movs	r2, r6
 8013824:	9903      	ldr	r1, [sp, #12]
 8013826:	6820      	ldr	r0, [r4, #0]
 8013828:	f000 f983 	bl	8013b32 <memmove>
 801382c:	68a3      	ldr	r3, [r4, #8]
 801382e:	1b9b      	subs	r3, r3, r6
 8013830:	60a3      	str	r3, [r4, #8]
 8013832:	6823      	ldr	r3, [r4, #0]
 8013834:	199b      	adds	r3, r3, r6
 8013836:	6023      	str	r3, [r4, #0]
 8013838:	9b03      	ldr	r3, [sp, #12]
 801383a:	9a04      	ldr	r2, [sp, #16]
 801383c:	19db      	adds	r3, r3, r7
 801383e:	9303      	str	r3, [sp, #12]
 8013840:	9b04      	ldr	r3, [sp, #16]
 8013842:	1bed      	subs	r5, r5, r7
 8013844:	689b      	ldr	r3, [r3, #8]
 8013846:	1bdb      	subs	r3, r3, r7
 8013848:	6093      	str	r3, [r2, #8]
 801384a:	d1a1      	bne.n	8013790 <__sfvwrite_r+0x12c>
 801384c:	e712      	b.n	8013674 <__sfvwrite_r+0x10>
 801384e:	003a      	movs	r2, r7
 8013850:	9802      	ldr	r0, [sp, #8]
 8013852:	f7fe fd5d 	bl	8012310 <_realloc_r>
 8013856:	1e06      	subs	r6, r0, #0
 8013858:	d1d7      	bne.n	801380a <__sfvwrite_r+0x1a6>
 801385a:	6921      	ldr	r1, [r4, #16]
 801385c:	9802      	ldr	r0, [sp, #8]
 801385e:	f7f9 ff79 	bl	800d754 <_free_r>
 8013862:	2280      	movs	r2, #128	; 0x80
 8013864:	89a3      	ldrh	r3, [r4, #12]
 8013866:	4393      	bics	r3, r2
 8013868:	81a3      	strh	r3, [r4, #12]
 801386a:	e7b9      	b.n	80137e0 <__sfvwrite_r+0x17c>
 801386c:	6923      	ldr	r3, [r4, #16]
 801386e:	4283      	cmp	r3, r0
 8013870:	d302      	bcc.n	8013878 <__sfvwrite_r+0x214>
 8013872:	6967      	ldr	r7, [r4, #20]
 8013874:	42af      	cmp	r7, r5
 8013876:	d916      	bls.n	80138a6 <__sfvwrite_r+0x242>
 8013878:	42ae      	cmp	r6, r5
 801387a:	d900      	bls.n	801387e <__sfvwrite_r+0x21a>
 801387c:	002e      	movs	r6, r5
 801387e:	0032      	movs	r2, r6
 8013880:	9903      	ldr	r1, [sp, #12]
 8013882:	f000 f956 	bl	8013b32 <memmove>
 8013886:	68a3      	ldr	r3, [r4, #8]
 8013888:	6822      	ldr	r2, [r4, #0]
 801388a:	1b9b      	subs	r3, r3, r6
 801388c:	1992      	adds	r2, r2, r6
 801388e:	0037      	movs	r7, r6
 8013890:	60a3      	str	r3, [r4, #8]
 8013892:	6022      	str	r2, [r4, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1cf      	bne.n	8013838 <__sfvwrite_r+0x1d4>
 8013898:	0021      	movs	r1, r4
 801389a:	9802      	ldr	r0, [sp, #8]
 801389c:	f7fd fd46 	bl	801132c <_fflush_r>
 80138a0:	2800      	cmp	r0, #0
 80138a2:	d0c9      	beq.n	8013838 <__sfvwrite_r+0x1d4>
 80138a4:	e79f      	b.n	80137e6 <__sfvwrite_r+0x182>
 80138a6:	4b1c      	ldr	r3, [pc, #112]	; (8013918 <__sfvwrite_r+0x2b4>)
 80138a8:	0028      	movs	r0, r5
 80138aa:	429d      	cmp	r5, r3
 80138ac:	d900      	bls.n	80138b0 <__sfvwrite_r+0x24c>
 80138ae:	481b      	ldr	r0, [pc, #108]	; (801391c <__sfvwrite_r+0x2b8>)
 80138b0:	0039      	movs	r1, r7
 80138b2:	f7ec fccd 	bl	8000250 <__divsi3>
 80138b6:	003b      	movs	r3, r7
 80138b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138ba:	4343      	muls	r3, r0
 80138bc:	9a03      	ldr	r2, [sp, #12]
 80138be:	69e1      	ldr	r1, [r4, #28]
 80138c0:	9802      	ldr	r0, [sp, #8]
 80138c2:	47b0      	blx	r6
 80138c4:	1e07      	subs	r7, r0, #0
 80138c6:	dcb7      	bgt.n	8013838 <__sfvwrite_r+0x1d4>
 80138c8:	e78d      	b.n	80137e6 <__sfvwrite_r+0x182>
 80138ca:	9b01      	ldr	r3, [sp, #4]
 80138cc:	2000      	movs	r0, #0
 80138ce:	681e      	ldr	r6, [r3, #0]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	9303      	str	r3, [sp, #12]
 80138d4:	9b01      	ldr	r3, [sp, #4]
 80138d6:	3308      	adds	r3, #8
 80138d8:	9301      	str	r3, [sp, #4]
 80138da:	e6e6      	b.n	80136aa <__sfvwrite_r+0x46>
 80138dc:	9a05      	ldr	r2, [sp, #20]
 80138de:	4293      	cmp	r3, r2
 80138e0:	dc08      	bgt.n	80138f4 <__sfvwrite_r+0x290>
 80138e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80138e4:	0032      	movs	r2, r6
 80138e6:	69e1      	ldr	r1, [r4, #28]
 80138e8:	9802      	ldr	r0, [sp, #8]
 80138ea:	47a8      	blx	r5
 80138ec:	1e05      	subs	r5, r0, #0
 80138ee:	dd00      	ble.n	80138f2 <__sfvwrite_r+0x28e>
 80138f0:	e70a      	b.n	8013708 <__sfvwrite_r+0xa4>
 80138f2:	e778      	b.n	80137e6 <__sfvwrite_r+0x182>
 80138f4:	9a05      	ldr	r2, [sp, #20]
 80138f6:	0031      	movs	r1, r6
 80138f8:	f000 f91b 	bl	8013b32 <memmove>
 80138fc:	9a05      	ldr	r2, [sp, #20]
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	0015      	movs	r5, r2
 8013902:	1a9b      	subs	r3, r3, r2
 8013904:	60a3      	str	r3, [r4, #8]
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	189b      	adds	r3, r3, r2
 801390a:	6023      	str	r3, [r4, #0]
 801390c:	e6fc      	b.n	8013708 <__sfvwrite_r+0xa4>
 801390e:	46c0      	nop			; (mov r8, r8)
 8013910:	7ffffc00 	.word	0x7ffffc00
 8013914:	fffffb7f 	.word	0xfffffb7f
 8013918:	7ffffffe 	.word	0x7ffffffe
 801391c:	7fffffff 	.word	0x7fffffff

08013920 <__submore>:
 8013920:	000b      	movs	r3, r1
 8013922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013924:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8013926:	3340      	adds	r3, #64	; 0x40
 8013928:	000c      	movs	r4, r1
 801392a:	429d      	cmp	r5, r3
 801392c:	d11c      	bne.n	8013968 <__submore+0x48>
 801392e:	2680      	movs	r6, #128	; 0x80
 8013930:	00f6      	lsls	r6, r6, #3
 8013932:	0031      	movs	r1, r6
 8013934:	f7f8 fa54 	bl	800bde0 <_malloc_r>
 8013938:	2800      	cmp	r0, #0
 801393a:	d102      	bne.n	8013942 <__submore+0x22>
 801393c:	2001      	movs	r0, #1
 801393e:	4240      	negs	r0, r0
 8013940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013942:	0023      	movs	r3, r4
 8013944:	6320      	str	r0, [r4, #48]	; 0x30
 8013946:	6366      	str	r6, [r4, #52]	; 0x34
 8013948:	3342      	adds	r3, #66	; 0x42
 801394a:	781a      	ldrb	r2, [r3, #0]
 801394c:	4b10      	ldr	r3, [pc, #64]	; (8013990 <__submore+0x70>)
 801394e:	54c2      	strb	r2, [r0, r3]
 8013950:	0023      	movs	r3, r4
 8013952:	3341      	adds	r3, #65	; 0x41
 8013954:	781a      	ldrb	r2, [r3, #0]
 8013956:	4b0f      	ldr	r3, [pc, #60]	; (8013994 <__submore+0x74>)
 8013958:	54c2      	strb	r2, [r0, r3]
 801395a:	782a      	ldrb	r2, [r5, #0]
 801395c:	4b0e      	ldr	r3, [pc, #56]	; (8013998 <__submore+0x78>)
 801395e:	54c2      	strb	r2, [r0, r3]
 8013960:	18c0      	adds	r0, r0, r3
 8013962:	6020      	str	r0, [r4, #0]
 8013964:	2000      	movs	r0, #0
 8013966:	e7eb      	b.n	8013940 <__submore+0x20>
 8013968:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801396a:	0029      	movs	r1, r5
 801396c:	0073      	lsls	r3, r6, #1
 801396e:	001a      	movs	r2, r3
 8013970:	9301      	str	r3, [sp, #4]
 8013972:	f7fe fccd 	bl	8012310 <_realloc_r>
 8013976:	1e05      	subs	r5, r0, #0
 8013978:	d0e0      	beq.n	801393c <__submore+0x1c>
 801397a:	1987      	adds	r7, r0, r6
 801397c:	0001      	movs	r1, r0
 801397e:	0032      	movs	r2, r6
 8013980:	0038      	movs	r0, r7
 8013982:	f7f9 fe6c 	bl	800d65e <memcpy>
 8013986:	9b01      	ldr	r3, [sp, #4]
 8013988:	6027      	str	r7, [r4, #0]
 801398a:	6325      	str	r5, [r4, #48]	; 0x30
 801398c:	6363      	str	r3, [r4, #52]	; 0x34
 801398e:	e7e9      	b.n	8013964 <__submore+0x44>
 8013990:	000003ff 	.word	0x000003ff
 8013994:	000003fe 	.word	0x000003fe
 8013998:	000003fd 	.word	0x000003fd

0801399c <__swsetup_r>:
 801399c:	4b30      	ldr	r3, [pc, #192]	; (8013a60 <__swsetup_r+0xc4>)
 801399e:	b570      	push	{r4, r5, r6, lr}
 80139a0:	0005      	movs	r5, r0
 80139a2:	6818      	ldr	r0, [r3, #0]
 80139a4:	000c      	movs	r4, r1
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d004      	beq.n	80139b4 <__swsetup_r+0x18>
 80139aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <__swsetup_r+0x18>
 80139b0:	f7f9 fc2a 	bl	800d208 <__sinit>
 80139b4:	230c      	movs	r3, #12
 80139b6:	5ee2      	ldrsh	r2, [r4, r3]
 80139b8:	b293      	uxth	r3, r2
 80139ba:	0711      	lsls	r1, r2, #28
 80139bc:	d423      	bmi.n	8013a06 <__swsetup_r+0x6a>
 80139be:	06d9      	lsls	r1, r3, #27
 80139c0:	d407      	bmi.n	80139d2 <__swsetup_r+0x36>
 80139c2:	2309      	movs	r3, #9
 80139c4:	2001      	movs	r0, #1
 80139c6:	602b      	str	r3, [r5, #0]
 80139c8:	3337      	adds	r3, #55	; 0x37
 80139ca:	4313      	orrs	r3, r2
 80139cc:	81a3      	strh	r3, [r4, #12]
 80139ce:	4240      	negs	r0, r0
 80139d0:	bd70      	pop	{r4, r5, r6, pc}
 80139d2:	075b      	lsls	r3, r3, #29
 80139d4:	d513      	bpl.n	80139fe <__swsetup_r+0x62>
 80139d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80139d8:	2900      	cmp	r1, #0
 80139da:	d008      	beq.n	80139ee <__swsetup_r+0x52>
 80139dc:	0023      	movs	r3, r4
 80139de:	3340      	adds	r3, #64	; 0x40
 80139e0:	4299      	cmp	r1, r3
 80139e2:	d002      	beq.n	80139ea <__swsetup_r+0x4e>
 80139e4:	0028      	movs	r0, r5
 80139e6:	f7f9 feb5 	bl	800d754 <_free_r>
 80139ea:	2300      	movs	r3, #0
 80139ec:	6323      	str	r3, [r4, #48]	; 0x30
 80139ee:	2224      	movs	r2, #36	; 0x24
 80139f0:	89a3      	ldrh	r3, [r4, #12]
 80139f2:	4393      	bics	r3, r2
 80139f4:	81a3      	strh	r3, [r4, #12]
 80139f6:	2300      	movs	r3, #0
 80139f8:	6063      	str	r3, [r4, #4]
 80139fa:	6923      	ldr	r3, [r4, #16]
 80139fc:	6023      	str	r3, [r4, #0]
 80139fe:	2308      	movs	r3, #8
 8013a00:	89a2      	ldrh	r2, [r4, #12]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	81a3      	strh	r3, [r4, #12]
 8013a06:	6923      	ldr	r3, [r4, #16]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d10b      	bne.n	8013a24 <__swsetup_r+0x88>
 8013a0c:	21a0      	movs	r1, #160	; 0xa0
 8013a0e:	2280      	movs	r2, #128	; 0x80
 8013a10:	89a3      	ldrh	r3, [r4, #12]
 8013a12:	0089      	lsls	r1, r1, #2
 8013a14:	0092      	lsls	r2, r2, #2
 8013a16:	400b      	ands	r3, r1
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d003      	beq.n	8013a24 <__swsetup_r+0x88>
 8013a1c:	0021      	movs	r1, r4
 8013a1e:	0028      	movs	r0, r5
 8013a20:	f000 f8e8 	bl	8013bf4 <__smakebuf_r>
 8013a24:	220c      	movs	r2, #12
 8013a26:	5ea3      	ldrsh	r3, [r4, r2]
 8013a28:	2001      	movs	r0, #1
 8013a2a:	001a      	movs	r2, r3
 8013a2c:	b299      	uxth	r1, r3
 8013a2e:	4002      	ands	r2, r0
 8013a30:	4203      	tst	r3, r0
 8013a32:	d00f      	beq.n	8013a54 <__swsetup_r+0xb8>
 8013a34:	2200      	movs	r2, #0
 8013a36:	60a2      	str	r2, [r4, #8]
 8013a38:	6962      	ldr	r2, [r4, #20]
 8013a3a:	4252      	negs	r2, r2
 8013a3c:	61a2      	str	r2, [r4, #24]
 8013a3e:	2000      	movs	r0, #0
 8013a40:	6922      	ldr	r2, [r4, #16]
 8013a42:	4282      	cmp	r2, r0
 8013a44:	d1c4      	bne.n	80139d0 <__swsetup_r+0x34>
 8013a46:	0609      	lsls	r1, r1, #24
 8013a48:	d5c2      	bpl.n	80139d0 <__swsetup_r+0x34>
 8013a4a:	2240      	movs	r2, #64	; 0x40
 8013a4c:	4313      	orrs	r3, r2
 8013a4e:	81a3      	strh	r3, [r4, #12]
 8013a50:	3801      	subs	r0, #1
 8013a52:	e7bd      	b.n	80139d0 <__swsetup_r+0x34>
 8013a54:	0788      	lsls	r0, r1, #30
 8013a56:	d400      	bmi.n	8013a5a <__swsetup_r+0xbe>
 8013a58:	6962      	ldr	r2, [r4, #20]
 8013a5a:	60a2      	str	r2, [r4, #8]
 8013a5c:	e7ef      	b.n	8013a3e <__swsetup_r+0xa2>
 8013a5e:	46c0      	nop			; (mov r8, r8)
 8013a60:	200006d0 	.word	0x200006d0

08013a64 <__fputwc>:
 8013a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a66:	b085      	sub	sp, #20
 8013a68:	000e      	movs	r6, r1
 8013a6a:	0015      	movs	r5, r2
 8013a6c:	9001      	str	r0, [sp, #4]
 8013a6e:	f7f9 fd55 	bl	800d51c <__locale_mb_cur_max>
 8013a72:	0004      	movs	r4, r0
 8013a74:	2801      	cmp	r0, #1
 8013a76:	d119      	bne.n	8013aac <__fputwc+0x48>
 8013a78:	1e73      	subs	r3, r6, #1
 8013a7a:	2bfe      	cmp	r3, #254	; 0xfe
 8013a7c:	d816      	bhi.n	8013aac <__fputwc+0x48>
 8013a7e:	ab02      	add	r3, sp, #8
 8013a80:	711e      	strb	r6, [r3, #4]
 8013a82:	2700      	movs	r7, #0
 8013a84:	42a7      	cmp	r7, r4
 8013a86:	d020      	beq.n	8013aca <__fputwc+0x66>
 8013a88:	ab03      	add	r3, sp, #12
 8013a8a:	5dd9      	ldrb	r1, [r3, r7]
 8013a8c:	68ab      	ldr	r3, [r5, #8]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	60ab      	str	r3, [r5, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	da04      	bge.n	8013aa0 <__fputwc+0x3c>
 8013a96:	69aa      	ldr	r2, [r5, #24]
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	db19      	blt.n	8013ad0 <__fputwc+0x6c>
 8013a9c:	290a      	cmp	r1, #10
 8013a9e:	d017      	beq.n	8013ad0 <__fputwc+0x6c>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	602a      	str	r2, [r5, #0]
 8013aa6:	7019      	strb	r1, [r3, #0]
 8013aa8:	3701      	adds	r7, #1
 8013aaa:	e7eb      	b.n	8013a84 <__fputwc+0x20>
 8013aac:	002b      	movs	r3, r5
 8013aae:	0032      	movs	r2, r6
 8013ab0:	9801      	ldr	r0, [sp, #4]
 8013ab2:	335c      	adds	r3, #92	; 0x5c
 8013ab4:	a903      	add	r1, sp, #12
 8013ab6:	f000 f857 	bl	8013b68 <_wcrtomb_r>
 8013aba:	0004      	movs	r4, r0
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d1e0      	bne.n	8013a82 <__fputwc+0x1e>
 8013ac0:	2340      	movs	r3, #64	; 0x40
 8013ac2:	0006      	movs	r6, r0
 8013ac4:	89aa      	ldrh	r2, [r5, #12]
 8013ac6:	4313      	orrs	r3, r2
 8013ac8:	81ab      	strh	r3, [r5, #12]
 8013aca:	0030      	movs	r0, r6
 8013acc:	b005      	add	sp, #20
 8013ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ad0:	002a      	movs	r2, r5
 8013ad2:	9801      	ldr	r0, [sp, #4]
 8013ad4:	f000 f8cc 	bl	8013c70 <__swbuf_r>
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	d1e5      	bne.n	8013aa8 <__fputwc+0x44>
 8013adc:	0006      	movs	r6, r0
 8013ade:	e7f4      	b.n	8013aca <__fputwc+0x66>

08013ae0 <_fputwc_r>:
 8013ae0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013ae2:	b570      	push	{r4, r5, r6, lr}
 8013ae4:	0005      	movs	r5, r0
 8013ae6:	000e      	movs	r6, r1
 8013ae8:	0014      	movs	r4, r2
 8013aea:	07db      	lsls	r3, r3, #31
 8013aec:	d405      	bmi.n	8013afa <_fputwc_r+0x1a>
 8013aee:	8993      	ldrh	r3, [r2, #12]
 8013af0:	059b      	lsls	r3, r3, #22
 8013af2:	d402      	bmi.n	8013afa <_fputwc_r+0x1a>
 8013af4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8013af6:	f7f9 fda5 	bl	800d644 <__retarget_lock_acquire_recursive>
 8013afa:	230c      	movs	r3, #12
 8013afc:	5ee2      	ldrsh	r2, [r4, r3]
 8013afe:	2380      	movs	r3, #128	; 0x80
 8013b00:	019b      	lsls	r3, r3, #6
 8013b02:	421a      	tst	r2, r3
 8013b04:	d104      	bne.n	8013b10 <_fputwc_r+0x30>
 8013b06:	431a      	orrs	r2, r3
 8013b08:	81a2      	strh	r2, [r4, #12]
 8013b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b0c:	4313      	orrs	r3, r2
 8013b0e:	6663      	str	r3, [r4, #100]	; 0x64
 8013b10:	0028      	movs	r0, r5
 8013b12:	0022      	movs	r2, r4
 8013b14:	0031      	movs	r1, r6
 8013b16:	f7ff ffa5 	bl	8013a64 <__fputwc>
 8013b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b1c:	0005      	movs	r5, r0
 8013b1e:	07db      	lsls	r3, r3, #31
 8013b20:	d405      	bmi.n	8013b2e <_fputwc_r+0x4e>
 8013b22:	89a3      	ldrh	r3, [r4, #12]
 8013b24:	059b      	lsls	r3, r3, #22
 8013b26:	d402      	bmi.n	8013b2e <_fputwc_r+0x4e>
 8013b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b2a:	f7f9 fd8c 	bl	800d646 <__retarget_lock_release_recursive>
 8013b2e:	0028      	movs	r0, r5
 8013b30:	bd70      	pop	{r4, r5, r6, pc}

08013b32 <memmove>:
 8013b32:	b510      	push	{r4, lr}
 8013b34:	4288      	cmp	r0, r1
 8013b36:	d902      	bls.n	8013b3e <memmove+0xc>
 8013b38:	188b      	adds	r3, r1, r2
 8013b3a:	4298      	cmp	r0, r3
 8013b3c:	d303      	bcc.n	8013b46 <memmove+0x14>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	e007      	b.n	8013b52 <memmove+0x20>
 8013b42:	5c8b      	ldrb	r3, [r1, r2]
 8013b44:	5483      	strb	r3, [r0, r2]
 8013b46:	3a01      	subs	r2, #1
 8013b48:	d2fb      	bcs.n	8013b42 <memmove+0x10>
 8013b4a:	bd10      	pop	{r4, pc}
 8013b4c:	5ccc      	ldrb	r4, [r1, r3]
 8013b4e:	54c4      	strb	r4, [r0, r3]
 8013b50:	3301      	adds	r3, #1
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d1fa      	bne.n	8013b4c <memmove+0x1a>
 8013b56:	e7f8      	b.n	8013b4a <memmove+0x18>

08013b58 <abort>:
 8013b58:	2006      	movs	r0, #6
 8013b5a:	b510      	push	{r4, lr}
 8013b5c:	f000 f906 	bl	8013d6c <raise>
 8013b60:	2001      	movs	r0, #1
 8013b62:	f7f0 fb7f 	bl	8004264 <_exit>
	...

08013b68 <_wcrtomb_r>:
 8013b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b6a:	001d      	movs	r5, r3
 8013b6c:	4b09      	ldr	r3, [pc, #36]	; (8013b94 <_wcrtomb_r+0x2c>)
 8013b6e:	0004      	movs	r4, r0
 8013b70:	33e0      	adds	r3, #224	; 0xe0
 8013b72:	681e      	ldr	r6, [r3, #0]
 8013b74:	002b      	movs	r3, r5
 8013b76:	2900      	cmp	r1, #0
 8013b78:	d101      	bne.n	8013b7e <_wcrtomb_r+0x16>
 8013b7a:	000a      	movs	r2, r1
 8013b7c:	a901      	add	r1, sp, #4
 8013b7e:	0020      	movs	r0, r4
 8013b80:	47b0      	blx	r6
 8013b82:	1c43      	adds	r3, r0, #1
 8013b84:	d103      	bne.n	8013b8e <_wcrtomb_r+0x26>
 8013b86:	2300      	movs	r3, #0
 8013b88:	602b      	str	r3, [r5, #0]
 8013b8a:	338a      	adds	r3, #138	; 0x8a
 8013b8c:	6023      	str	r3, [r4, #0]
 8013b8e:	b004      	add	sp, #16
 8013b90:	bd70      	pop	{r4, r5, r6, pc}
 8013b92:	46c0      	nop			; (mov r8, r8)
 8013b94:	20000444 	.word	0x20000444

08013b98 <__swhatbuf_r>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	000e      	movs	r6, r1
 8013b9c:	001d      	movs	r5, r3
 8013b9e:	230e      	movs	r3, #14
 8013ba0:	5ec9      	ldrsh	r1, [r1, r3]
 8013ba2:	0014      	movs	r4, r2
 8013ba4:	b096      	sub	sp, #88	; 0x58
 8013ba6:	2900      	cmp	r1, #0
 8013ba8:	da09      	bge.n	8013bbe <__swhatbuf_r+0x26>
 8013baa:	89b2      	ldrh	r2, [r6, #12]
 8013bac:	2380      	movs	r3, #128	; 0x80
 8013bae:	0011      	movs	r1, r2
 8013bb0:	4019      	ands	r1, r3
 8013bb2:	421a      	tst	r2, r3
 8013bb4:	d018      	beq.n	8013be8 <__swhatbuf_r+0x50>
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	3b40      	subs	r3, #64	; 0x40
 8013bba:	0008      	movs	r0, r1
 8013bbc:	e010      	b.n	8013be0 <__swhatbuf_r+0x48>
 8013bbe:	466a      	mov	r2, sp
 8013bc0:	f000 f8de 	bl	8013d80 <_fstat_r>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	dbf0      	blt.n	8013baa <__swhatbuf_r+0x12>
 8013bc8:	23f0      	movs	r3, #240	; 0xf0
 8013bca:	9901      	ldr	r1, [sp, #4]
 8013bcc:	021b      	lsls	r3, r3, #8
 8013bce:	4019      	ands	r1, r3
 8013bd0:	4b07      	ldr	r3, [pc, #28]	; (8013bf0 <__swhatbuf_r+0x58>)
 8013bd2:	2080      	movs	r0, #128	; 0x80
 8013bd4:	18c9      	adds	r1, r1, r3
 8013bd6:	424b      	negs	r3, r1
 8013bd8:	4159      	adcs	r1, r3
 8013bda:	2380      	movs	r3, #128	; 0x80
 8013bdc:	0100      	lsls	r0, r0, #4
 8013bde:	00db      	lsls	r3, r3, #3
 8013be0:	6029      	str	r1, [r5, #0]
 8013be2:	6023      	str	r3, [r4, #0]
 8013be4:	b016      	add	sp, #88	; 0x58
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
 8013be8:	2380      	movs	r3, #128	; 0x80
 8013bea:	00db      	lsls	r3, r3, #3
 8013bec:	e7e5      	b.n	8013bba <__swhatbuf_r+0x22>
 8013bee:	46c0      	nop			; (mov r8, r8)
 8013bf0:	ffffe000 	.word	0xffffe000

08013bf4 <__smakebuf_r>:
 8013bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bf6:	2602      	movs	r6, #2
 8013bf8:	898b      	ldrh	r3, [r1, #12]
 8013bfa:	0005      	movs	r5, r0
 8013bfc:	000c      	movs	r4, r1
 8013bfe:	4233      	tst	r3, r6
 8013c00:	d006      	beq.n	8013c10 <__smakebuf_r+0x1c>
 8013c02:	0023      	movs	r3, r4
 8013c04:	3343      	adds	r3, #67	; 0x43
 8013c06:	6023      	str	r3, [r4, #0]
 8013c08:	6123      	str	r3, [r4, #16]
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	6163      	str	r3, [r4, #20]
 8013c0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013c10:	466a      	mov	r2, sp
 8013c12:	ab01      	add	r3, sp, #4
 8013c14:	f7ff ffc0 	bl	8013b98 <__swhatbuf_r>
 8013c18:	9900      	ldr	r1, [sp, #0]
 8013c1a:	0007      	movs	r7, r0
 8013c1c:	0028      	movs	r0, r5
 8013c1e:	f7f8 f8df 	bl	800bde0 <_malloc_r>
 8013c22:	2800      	cmp	r0, #0
 8013c24:	d108      	bne.n	8013c38 <__smakebuf_r+0x44>
 8013c26:	220c      	movs	r2, #12
 8013c28:	5ea3      	ldrsh	r3, [r4, r2]
 8013c2a:	059a      	lsls	r2, r3, #22
 8013c2c:	d4ef      	bmi.n	8013c0e <__smakebuf_r+0x1a>
 8013c2e:	2203      	movs	r2, #3
 8013c30:	4393      	bics	r3, r2
 8013c32:	431e      	orrs	r6, r3
 8013c34:	81a6      	strh	r6, [r4, #12]
 8013c36:	e7e4      	b.n	8013c02 <__smakebuf_r+0xe>
 8013c38:	2380      	movs	r3, #128	; 0x80
 8013c3a:	89a2      	ldrh	r2, [r4, #12]
 8013c3c:	6020      	str	r0, [r4, #0]
 8013c3e:	4313      	orrs	r3, r2
 8013c40:	81a3      	strh	r3, [r4, #12]
 8013c42:	9b00      	ldr	r3, [sp, #0]
 8013c44:	6120      	str	r0, [r4, #16]
 8013c46:	6163      	str	r3, [r4, #20]
 8013c48:	9b01      	ldr	r3, [sp, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d00c      	beq.n	8013c68 <__smakebuf_r+0x74>
 8013c4e:	0028      	movs	r0, r5
 8013c50:	230e      	movs	r3, #14
 8013c52:	5ee1      	ldrsh	r1, [r4, r3]
 8013c54:	f000 f8a6 	bl	8013da4 <_isatty_r>
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d005      	beq.n	8013c68 <__smakebuf_r+0x74>
 8013c5c:	2303      	movs	r3, #3
 8013c5e:	89a2      	ldrh	r2, [r4, #12]
 8013c60:	439a      	bics	r2, r3
 8013c62:	3b02      	subs	r3, #2
 8013c64:	4313      	orrs	r3, r2
 8013c66:	81a3      	strh	r3, [r4, #12]
 8013c68:	89a3      	ldrh	r3, [r4, #12]
 8013c6a:	433b      	orrs	r3, r7
 8013c6c:	81a3      	strh	r3, [r4, #12]
 8013c6e:	e7ce      	b.n	8013c0e <__smakebuf_r+0x1a>

08013c70 <__swbuf_r>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	0006      	movs	r6, r0
 8013c74:	000d      	movs	r5, r1
 8013c76:	0014      	movs	r4, r2
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d004      	beq.n	8013c86 <__swbuf_r+0x16>
 8013c7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <__swbuf_r+0x16>
 8013c82:	f7f9 fac1 	bl	800d208 <__sinit>
 8013c86:	69a3      	ldr	r3, [r4, #24]
 8013c88:	60a3      	str	r3, [r4, #8]
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	071b      	lsls	r3, r3, #28
 8013c8e:	d52e      	bpl.n	8013cee <__swbuf_r+0x7e>
 8013c90:	6923      	ldr	r3, [r4, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d02b      	beq.n	8013cee <__swbuf_r+0x7e>
 8013c96:	230c      	movs	r3, #12
 8013c98:	5ee2      	ldrsh	r2, [r4, r3]
 8013c9a:	2380      	movs	r3, #128	; 0x80
 8013c9c:	019b      	lsls	r3, r3, #6
 8013c9e:	b2ef      	uxtb	r7, r5
 8013ca0:	b2ed      	uxtb	r5, r5
 8013ca2:	421a      	tst	r2, r3
 8013ca4:	d02c      	beq.n	8013d00 <__swbuf_r+0x90>
 8013ca6:	6923      	ldr	r3, [r4, #16]
 8013ca8:	6820      	ldr	r0, [r4, #0]
 8013caa:	1ac0      	subs	r0, r0, r3
 8013cac:	6963      	ldr	r3, [r4, #20]
 8013cae:	4283      	cmp	r3, r0
 8013cb0:	dc05      	bgt.n	8013cbe <__swbuf_r+0x4e>
 8013cb2:	0021      	movs	r1, r4
 8013cb4:	0030      	movs	r0, r6
 8013cb6:	f7fd fb39 	bl	801132c <_fflush_r>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d11d      	bne.n	8013cfa <__swbuf_r+0x8a>
 8013cbe:	68a3      	ldr	r3, [r4, #8]
 8013cc0:	3001      	adds	r0, #1
 8013cc2:	3b01      	subs	r3, #1
 8013cc4:	60a3      	str	r3, [r4, #8]
 8013cc6:	6823      	ldr	r3, [r4, #0]
 8013cc8:	1c5a      	adds	r2, r3, #1
 8013cca:	6022      	str	r2, [r4, #0]
 8013ccc:	701f      	strb	r7, [r3, #0]
 8013cce:	6963      	ldr	r3, [r4, #20]
 8013cd0:	4283      	cmp	r3, r0
 8013cd2:	d004      	beq.n	8013cde <__swbuf_r+0x6e>
 8013cd4:	89a3      	ldrh	r3, [r4, #12]
 8013cd6:	07db      	lsls	r3, r3, #31
 8013cd8:	d507      	bpl.n	8013cea <__swbuf_r+0x7a>
 8013cda:	2d0a      	cmp	r5, #10
 8013cdc:	d105      	bne.n	8013cea <__swbuf_r+0x7a>
 8013cde:	0021      	movs	r1, r4
 8013ce0:	0030      	movs	r0, r6
 8013ce2:	f7fd fb23 	bl	801132c <_fflush_r>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d107      	bne.n	8013cfa <__swbuf_r+0x8a>
 8013cea:	0028      	movs	r0, r5
 8013cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cee:	0021      	movs	r1, r4
 8013cf0:	0030      	movs	r0, r6
 8013cf2:	f7ff fe53 	bl	801399c <__swsetup_r>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d0cd      	beq.n	8013c96 <__swbuf_r+0x26>
 8013cfa:	2501      	movs	r5, #1
 8013cfc:	426d      	negs	r5, r5
 8013cfe:	e7f4      	b.n	8013cea <__swbuf_r+0x7a>
 8013d00:	4313      	orrs	r3, r2
 8013d02:	81a3      	strh	r3, [r4, #12]
 8013d04:	4a02      	ldr	r2, [pc, #8]	; (8013d10 <__swbuf_r+0xa0>)
 8013d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d08:	4013      	ands	r3, r2
 8013d0a:	6663      	str	r3, [r4, #100]	; 0x64
 8013d0c:	e7cb      	b.n	8013ca6 <__swbuf_r+0x36>
 8013d0e:	46c0      	nop			; (mov r8, r8)
 8013d10:	ffffdfff 	.word	0xffffdfff

08013d14 <_raise_r>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	0004      	movs	r4, r0
 8013d18:	000d      	movs	r5, r1
 8013d1a:	291f      	cmp	r1, #31
 8013d1c:	d904      	bls.n	8013d28 <_raise_r+0x14>
 8013d1e:	2316      	movs	r3, #22
 8013d20:	6003      	str	r3, [r0, #0]
 8013d22:	2001      	movs	r0, #1
 8013d24:	4240      	negs	r0, r0
 8013d26:	bd70      	pop	{r4, r5, r6, pc}
 8013d28:	0003      	movs	r3, r0
 8013d2a:	33fc      	adds	r3, #252	; 0xfc
 8013d2c:	69db      	ldr	r3, [r3, #28]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d004      	beq.n	8013d3c <_raise_r+0x28>
 8013d32:	008a      	lsls	r2, r1, #2
 8013d34:	189b      	adds	r3, r3, r2
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	2a00      	cmp	r2, #0
 8013d3a:	d108      	bne.n	8013d4e <_raise_r+0x3a>
 8013d3c:	0020      	movs	r0, r4
 8013d3e:	f000 f855 	bl	8013dec <_getpid_r>
 8013d42:	002a      	movs	r2, r5
 8013d44:	0001      	movs	r1, r0
 8013d46:	0020      	movs	r0, r4
 8013d48:	f000 f83e 	bl	8013dc8 <_kill_r>
 8013d4c:	e7eb      	b.n	8013d26 <_raise_r+0x12>
 8013d4e:	2000      	movs	r0, #0
 8013d50:	2a01      	cmp	r2, #1
 8013d52:	d0e8      	beq.n	8013d26 <_raise_r+0x12>
 8013d54:	1c51      	adds	r1, r2, #1
 8013d56:	d103      	bne.n	8013d60 <_raise_r+0x4c>
 8013d58:	2316      	movs	r3, #22
 8013d5a:	3001      	adds	r0, #1
 8013d5c:	6023      	str	r3, [r4, #0]
 8013d5e:	e7e2      	b.n	8013d26 <_raise_r+0x12>
 8013d60:	2400      	movs	r4, #0
 8013d62:	0028      	movs	r0, r5
 8013d64:	601c      	str	r4, [r3, #0]
 8013d66:	4790      	blx	r2
 8013d68:	0020      	movs	r0, r4
 8013d6a:	e7dc      	b.n	8013d26 <_raise_r+0x12>

08013d6c <raise>:
 8013d6c:	b510      	push	{r4, lr}
 8013d6e:	4b03      	ldr	r3, [pc, #12]	; (8013d7c <raise+0x10>)
 8013d70:	0001      	movs	r1, r0
 8013d72:	6818      	ldr	r0, [r3, #0]
 8013d74:	f7ff ffce 	bl	8013d14 <_raise_r>
 8013d78:	bd10      	pop	{r4, pc}
 8013d7a:	46c0      	nop			; (mov r8, r8)
 8013d7c:	200006d0 	.word	0x200006d0

08013d80 <_fstat_r>:
 8013d80:	2300      	movs	r3, #0
 8013d82:	b570      	push	{r4, r5, r6, lr}
 8013d84:	4d06      	ldr	r5, [pc, #24]	; (8013da0 <_fstat_r+0x20>)
 8013d86:	0004      	movs	r4, r0
 8013d88:	0008      	movs	r0, r1
 8013d8a:	0011      	movs	r1, r2
 8013d8c:	602b      	str	r3, [r5, #0]
 8013d8e:	f7f0 fab8 	bl	8004302 <_fstat>
 8013d92:	1c43      	adds	r3, r0, #1
 8013d94:	d103      	bne.n	8013d9e <_fstat_r+0x1e>
 8013d96:	682b      	ldr	r3, [r5, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d000      	beq.n	8013d9e <_fstat_r+0x1e>
 8013d9c:	6023      	str	r3, [r4, #0]
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}
 8013da0:	20000db8 	.word	0x20000db8

08013da4 <_isatty_r>:
 8013da4:	2300      	movs	r3, #0
 8013da6:	b570      	push	{r4, r5, r6, lr}
 8013da8:	4d06      	ldr	r5, [pc, #24]	; (8013dc4 <_isatty_r+0x20>)
 8013daa:	0004      	movs	r4, r0
 8013dac:	0008      	movs	r0, r1
 8013dae:	602b      	str	r3, [r5, #0]
 8013db0:	f7f0 fab5 	bl	800431e <_isatty>
 8013db4:	1c43      	adds	r3, r0, #1
 8013db6:	d103      	bne.n	8013dc0 <_isatty_r+0x1c>
 8013db8:	682b      	ldr	r3, [r5, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d000      	beq.n	8013dc0 <_isatty_r+0x1c>
 8013dbe:	6023      	str	r3, [r4, #0]
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
 8013dc2:	46c0      	nop			; (mov r8, r8)
 8013dc4:	20000db8 	.word	0x20000db8

08013dc8 <_kill_r>:
 8013dc8:	2300      	movs	r3, #0
 8013dca:	b570      	push	{r4, r5, r6, lr}
 8013dcc:	4d06      	ldr	r5, [pc, #24]	; (8013de8 <_kill_r+0x20>)
 8013dce:	0004      	movs	r4, r0
 8013dd0:	0008      	movs	r0, r1
 8013dd2:	0011      	movs	r1, r2
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	f7f0 fa35 	bl	8004244 <_kill>
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	d103      	bne.n	8013de6 <_kill_r+0x1e>
 8013dde:	682b      	ldr	r3, [r5, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d000      	beq.n	8013de6 <_kill_r+0x1e>
 8013de4:	6023      	str	r3, [r4, #0]
 8013de6:	bd70      	pop	{r4, r5, r6, pc}
 8013de8:	20000db8 	.word	0x20000db8

08013dec <_getpid_r>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	f7f0 fa23 	bl	8004238 <_getpid>
 8013df2:	bd10      	pop	{r4, pc}

08013df4 <round>:
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	004a      	lsls	r2, r1, #1
 8013df8:	000d      	movs	r5, r1
 8013dfa:	4920      	ldr	r1, [pc, #128]	; (8013e7c <round+0x88>)
 8013dfc:	0d52      	lsrs	r2, r2, #21
 8013dfe:	1851      	adds	r1, r2, r1
 8013e00:	0006      	movs	r6, r0
 8013e02:	2913      	cmp	r1, #19
 8013e04:	dc18      	bgt.n	8013e38 <round+0x44>
 8013e06:	2900      	cmp	r1, #0
 8013e08:	da09      	bge.n	8013e1e <round+0x2a>
 8013e0a:	0feb      	lsrs	r3, r5, #31
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	07db      	lsls	r3, r3, #31
 8013e10:	3101      	adds	r1, #1
 8013e12:	d101      	bne.n	8013e18 <round+0x24>
 8013e14:	491a      	ldr	r1, [pc, #104]	; (8013e80 <round+0x8c>)
 8013e16:	430b      	orrs	r3, r1
 8013e18:	0019      	movs	r1, r3
 8013e1a:	0010      	movs	r0, r2
 8013e1c:	e017      	b.n	8013e4e <round+0x5a>
 8013e1e:	4c19      	ldr	r4, [pc, #100]	; (8013e84 <round+0x90>)
 8013e20:	410c      	asrs	r4, r1
 8013e22:	0022      	movs	r2, r4
 8013e24:	402a      	ands	r2, r5
 8013e26:	4302      	orrs	r2, r0
 8013e28:	d013      	beq.n	8013e52 <round+0x5e>
 8013e2a:	2280      	movs	r2, #128	; 0x80
 8013e2c:	0312      	lsls	r2, r2, #12
 8013e2e:	410a      	asrs	r2, r1
 8013e30:	1953      	adds	r3, r2, r5
 8013e32:	43a3      	bics	r3, r4
 8013e34:	2200      	movs	r2, #0
 8013e36:	e7ef      	b.n	8013e18 <round+0x24>
 8013e38:	2933      	cmp	r1, #51	; 0x33
 8013e3a:	dd0d      	ble.n	8013e58 <round+0x64>
 8013e3c:	2380      	movs	r3, #128	; 0x80
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	4299      	cmp	r1, r3
 8013e42:	d106      	bne.n	8013e52 <round+0x5e>
 8013e44:	0002      	movs	r2, r0
 8013e46:	002b      	movs	r3, r5
 8013e48:	0029      	movs	r1, r5
 8013e4a:	f7ec fcb5 	bl	80007b8 <__aeabi_dadd>
 8013e4e:	0006      	movs	r6, r0
 8013e50:	000d      	movs	r5, r1
 8013e52:	0030      	movs	r0, r6
 8013e54:	0029      	movs	r1, r5
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	4c0b      	ldr	r4, [pc, #44]	; (8013e88 <round+0x94>)
 8013e5a:	1912      	adds	r2, r2, r4
 8013e5c:	2401      	movs	r4, #1
 8013e5e:	4264      	negs	r4, r4
 8013e60:	40d4      	lsrs	r4, r2
 8013e62:	4220      	tst	r0, r4
 8013e64:	d0f5      	beq.n	8013e52 <round+0x5e>
 8013e66:	2233      	movs	r2, #51	; 0x33
 8013e68:	1a51      	subs	r1, r2, r1
 8013e6a:	3a32      	subs	r2, #50	; 0x32
 8013e6c:	408a      	lsls	r2, r1
 8013e6e:	1812      	adds	r2, r2, r0
 8013e70:	4282      	cmp	r2, r0
 8013e72:	4180      	sbcs	r0, r0
 8013e74:	4240      	negs	r0, r0
 8013e76:	182b      	adds	r3, r5, r0
 8013e78:	43a2      	bics	r2, r4
 8013e7a:	e7cd      	b.n	8013e18 <round+0x24>
 8013e7c:	fffffc01 	.word	0xfffffc01
 8013e80:	3ff00000 	.word	0x3ff00000
 8013e84:	000fffff 	.word	0x000fffff
 8013e88:	fffffbed 	.word	0xfffffbed

08013e8c <_init>:
 8013e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8e:	46c0      	nop			; (mov r8, r8)
 8013e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e92:	bc08      	pop	{r3}
 8013e94:	469e      	mov	lr, r3
 8013e96:	4770      	bx	lr

08013e98 <_fini>:
 8013e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9a:	46c0      	nop			; (mov r8, r8)
 8013e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e9e:	bc08      	pop	{r3}
 8013ea0:	469e      	mov	lr, r3
 8013ea2:	4770      	bx	lr
