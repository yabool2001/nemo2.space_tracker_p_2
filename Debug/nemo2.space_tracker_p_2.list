
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b6c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b4  08012c28  08012c28  00022c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cdc  08014cdc  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014cdc  08014cdc  00024cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ce4  08014ce4  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014ce4  08014ce4  00024ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014cec  08014cec  00024cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014cf0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200006d8  080153c8  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f44  080153c8  00030f44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a127  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad9  00000000  00000000  0004a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0004e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000134e  00000000  00000000  0004fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d50  00000000  00000000  00050f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f42f  00000000  00000000  00072c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb091  00000000  00000000  000920c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074a4  00000000  00000000  0015d158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001645fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012c10 	.word	0x08012c10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012c10 	.word	0x08012c10

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0801474c 	.word	0x0801474c
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46c6      	mov	lr, r8
 80025ac:	b500      	push	{lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f001 fd85 	bl	80040c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 f9bf 	bl	8002938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ba:	f000 fc51 	bl	8002e60 <MX_GPIO_Init>
  MX_RTC_Init();
 80025be:	f000 fa11 	bl	80029e4 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c2:	f000 faf1 	bl	8002ba8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c6:	f000 fab1 	bl	8002b2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025ca:	f000 fb2b 	bl	8002c24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ce:	f000 fb77 	bl	8002cc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d2:	f000 fbc3 	bl	8002d5c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d6:	f000 fc0f 	bl	8002df8 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025da:	4bc1      	ldr	r3, [pc, #772]	; (80028e0 <main+0x338>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fd4a 	bl	8003078 <send_debug_logs>

  my_sys_init () ;
 80025e4:	f000 fd78 	bl	80030d8 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , sys_mode ) ;
 80025e8:	4bbe      	ldr	r3, [pc, #760]	; (80028e4 <main+0x33c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	49be      	ldr	r1, [pc, #760]	; (80028e8 <main+0x340>)
 80025f0:	4bbe      	ldr	r3, [pc, #760]	; (80028ec <main+0x344>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f009 fd32 	bl	800c05c <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025f8:	4bbc      	ldr	r3, [pc, #752]	; (80028ec <main+0x344>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fd3c 	bl	8003078 <send_debug_logs>

  my_tim_init () ;
 8002600:	f001 f960 	bl	80038c4 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002604:	2002      	movs	r0, #2
 8002606:	f001 f84d 	bl	80036a4 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260a:	f001 f87d 	bl	8003708 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800260e:	4bb8      	ldr	r3, [pc, #736]	; (80028f0 <main+0x348>)
 8002610:	0018      	movs	r0, r3
 8002612:	f007 f94f 	bl	80098b4 <my_gnss_acq_coordinates>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	4bb6      	ldr	r3, [pc, #728]	; (80028f4 <main+0x34c>)
 800261c:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 800261e:	f001 f88d 	bl	800373c <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002622:	4bb5      	ldr	r3, [pc, #724]	; (80028f8 <main+0x350>)
 8002624:	0018      	movs	r0, r3
 8002626:	f007 facb 	bl	8009bc0 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262a:	4bb1      	ldr	r3, [pc, #708]	; (80028f0 <main+0x348>)
 800262c:	7c1b      	ldrb	r3, [r3, #16]
 800262e:	001e      	movs	r6, r3
 8002630:	4baf      	ldr	r3, [pc, #700]	; (80028f0 <main+0x348>)
 8002632:	689c      	ldr	r4, [r3, #8]
 8002634:	68dd      	ldr	r5, [r3, #12]
 8002636:	4bae      	ldr	r3, [pc, #696]	; (80028f0 <main+0x348>)
 8002638:	8a5b      	ldrh	r3, [r3, #18]
 800263a:	4698      	mov	r8, r3
 800263c:	4bac      	ldr	r3, [pc, #688]	; (80028f0 <main+0x348>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	213c      	movs	r1, #60	; 0x3c
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd7a 	bl	800013c <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	4aac      	ldr	r2, [pc, #688]	; (80028fc <main+0x354>)
 800264c:	49ac      	ldr	r1, [pc, #688]	; (8002900 <main+0x358>)
 800264e:	48a7      	ldr	r0, [pc, #668]	; (80028ec <main+0x344>)
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	4643      	mov	r3, r8
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	9402      	str	r4, [sp, #8]
 8002658:	9503      	str	r5, [sp, #12]
 800265a:	9601      	str	r6, [sp, #4]
 800265c:	4ba6      	ldr	r3, [pc, #664]	; (80028f8 <main+0x350>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23ba      	movs	r3, #186	; 0xba
 8002662:	f009 fcfb 	bl	800c05c <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002666:	4ba1      	ldr	r3, [pc, #644]	; (80028ec <main+0x344>)
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fd05 	bl	8003078 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 800266e:	4ba1      	ldr	r3, [pc, #644]	; (80028f4 <main+0x34c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4053      	eors	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d027      	beq.n	80026cc <main+0x124>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267c:	4ba1      	ldr	r3, [pc, #644]	; (8002904 <main+0x35c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f007 fadf 	bl	8009c44 <my_rtc_set_alarm>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d020      	beq.n	80026cc <main+0x124>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268a:	4a9c      	ldr	r2, [pc, #624]	; (80028fc <main+0x354>)
 800268c:	499e      	ldr	r1, [pc, #632]	; (8002908 <main+0x360>)
 800268e:	4897      	ldr	r0, [pc, #604]	; (80028ec <main+0x344>)
 8002690:	23c0      	movs	r3, #192	; 0xc0
 8002692:	f009 fce3 	bl	800c05c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002696:	4b95      	ldr	r3, [pc, #596]	; (80028ec <main+0x344>)
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fced 	bl	8003078 <send_debug_logs>
		  my_tim_stop () ;
 800269e:	f001 f92d 	bl	80038fc <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a2:	4b9a      	ldr	r3, [pc, #616]	; (800290c <main+0x364>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026a8:	f002 f9d2 	bl	8004a50 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ac:	4b92      	ldr	r3, [pc, #584]	; (80028f8 <main+0x350>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f007 fa86 	bl	8009bc0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b4:	4a91      	ldr	r2, [pc, #580]	; (80028fc <main+0x354>)
 80026b6:	4996      	ldr	r1, [pc, #600]	; (8002910 <main+0x368>)
 80026b8:	488c      	ldr	r0, [pc, #560]	; (80028ec <main+0x344>)
 80026ba:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <main+0x350>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	23c6      	movs	r3, #198	; 0xc6
 80026c0:	f009 fccc 	bl	800c05c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c4:	4b89      	ldr	r3, [pc, #548]	; (80028ec <main+0x344>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fcd6 	bl	8003078 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026cc:	f007 f840 	bl	8009750 <my_astro_init>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4053      	eors	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <main+0x154>
	  my_sys_restart () ;
 80026de:	f000 fd83 	bl	80031e8 <my_sys_restart>
 80026e2:	e061      	b.n	80027a8 <main+0x200>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026e4:	4a85      	ldr	r2, [pc, #532]	; (80028fc <main+0x354>)
 80026e6:	498b      	ldr	r1, [pc, #556]	; (8002914 <main+0x36c>)
 80026e8:	4880      	ldr	r0, [pc, #512]	; (80028ec <main+0x344>)
 80026ea:	23d1      	movs	r3, #209	; 0xd1
 80026ec:	f009 fcb6 	bl	800c05c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <main+0x344>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 fcc0 	bl	8003078 <send_debug_logs>
		  my_astro_handle_evt () ;
 80026f8:	f007 f88a 	bl	8009810 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80026fc:	f001 f8d0 	bl	80038a0 <my_astro_evt_pin>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d1ef      	bne.n	80026e4 <main+0x13c>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 8002704:	4b84      	ldr	r3, [pc, #528]	; (8002918 <main+0x370>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4698      	mov	r8, r3
 800270a:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <main+0x348>)
 800270c:	689c      	ldr	r4, [r3, #8]
 800270e:	68dd      	ldr	r5, [r3, #12]
 8002710:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <main+0x348>)
 8002712:	8a5b      	ldrh	r3, [r3, #18]
 8002714:	001e      	movs	r6, r3
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <main+0x348>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	213c      	movs	r1, #60	; 0x3c
 800271c:	0018      	movs	r0, r3
 800271e:	f7fd fd0d 	bl	800013c <__udivsi3>
 8002722:	0003      	movs	r3, r0
 8002724:	001a      	movs	r2, r3
 8002726:	4b7d      	ldr	r3, [pc, #500]	; (800291c <main+0x374>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	497d      	ldr	r1, [pc, #500]	; (8002920 <main+0x378>)
 800272c:	487d      	ldr	r0, [pc, #500]	; (8002924 <main+0x37c>)
 800272e:	9304      	str	r3, [sp, #16]
 8002730:	9203      	str	r2, [sp, #12]
 8002732:	9602      	str	r6, [sp, #8]
 8002734:	9400      	str	r4, [sp, #0]
 8002736:	9501      	str	r5, [sp, #4]
 8002738:	4642      	mov	r2, r8
 800273a:	f009 fc8f 	bl	800c05c <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800273e:	4a6f      	ldr	r2, [pc, #444]	; (80028fc <main+0x354>)
 8002740:	4979      	ldr	r1, [pc, #484]	; (8002928 <main+0x380>)
 8002742:	486a      	ldr	r0, [pc, #424]	; (80028ec <main+0x344>)
 8002744:	4b77      	ldr	r3, [pc, #476]	; (8002924 <main+0x37c>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	23d6      	movs	r3, #214	; 0xd6
 800274a:	f009 fc87 	bl	800c05c <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <main+0x344>)
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fc91 	bl	8003078 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002756:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <main+0x348>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <main+0x348>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	0019      	movs	r1, r3
 8002760:	0010      	movs	r0, r2
 8002762:	f007 f897 	bl	8009894 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002766:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <main+0x370>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	b291      	uxth	r1, r2
 800276e:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <main+0x370>)
 8002770:	8011      	strh	r1, [r2, #0]
 8002772:	4a6c      	ldr	r2, [pc, #432]	; (8002924 <main+0x37c>)
 8002774:	0011      	movs	r1, r2
 8002776:	0018      	movs	r0, r3
 8002778:	f007 f822 	bl	80097c0 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <main+0x35c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f007 fa5f 	bl	8009c44 <my_rtc_set_alarm>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d00e      	beq.n	80027a8 <main+0x200>
	  {
		  my_sys_deepsleep () ;
 800278a:	f000 fd51 	bl	8003230 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 800278e:	e00b      	b.n	80027a8 <main+0x200>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002790:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <main+0x354>)
 8002792:	4960      	ldr	r1, [pc, #384]	; (8002914 <main+0x36c>)
 8002794:	4855      	ldr	r0, [pc, #340]	; (80028ec <main+0x344>)
 8002796:	23e8      	movs	r3, #232	; 0xe8
 8002798:	f009 fc60 	bl	800c05c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <main+0x344>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fc6a 	bl	8003078 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027a4:	f007 f834 	bl	8009810 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027a8:	f001 f87a 	bl	80038a0 <my_astro_evt_pin>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d1ef      	bne.n	8002790 <main+0x1e8>
	  }
	  if ( astro_rcv_cmd_flag )
 80027b0:	4b5e      	ldr	r3, [pc, #376]	; (800292c <main+0x384>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <main+0x220>
	  {
		  astro_rcv_cmd_flag = false ;
 80027b8:	4b5c      	ldr	r3, [pc, #368]	; (800292c <main+0x384>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 80027be:	f000 fe09 	bl	80033d4 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 80027c2:	4b5b      	ldr	r3, [pc, #364]	; (8002930 <main+0x388>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <main+0x364>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <main+0x22a>
 80027d0:	e07a      	b.n	80028c8 <main+0x320>
	  {
		  my_rtc_alarm_flag = false ;
 80027d2:	4b4e      	ldr	r3, [pc, #312]	; (800290c <main+0x364>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 80027d8:	f000 ff96 	bl	8003708 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 80027dc:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <main+0x348>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f007 f868 	bl	80098b4 <my_gnss_acq_coordinates>
 80027e4:	0003      	movs	r3, r0
 80027e6:	001a      	movs	r2, r3
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <main+0x34c>)
 80027ea:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 80027ec:	f000 ffa6 	bl	800373c <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027f0:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <main+0x350>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f007 f9e4 	bl	8009bc0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <main+0x348>)
 80027fa:	7c1b      	ldrb	r3, [r3, #16]
 80027fc:	001e      	movs	r6, r3
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <main+0x348>)
 8002800:	689c      	ldr	r4, [r3, #8]
 8002802:	68dd      	ldr	r5, [r3, #12]
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <main+0x348>)
 8002806:	8a5b      	ldrh	r3, [r3, #18]
 8002808:	4698      	mov	r8, r3
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <main+0x348>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	213c      	movs	r1, #60	; 0x3c
 8002810:	0018      	movs	r0, r3
 8002812:	f7fd fc93 	bl	800013c <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	4a38      	ldr	r2, [pc, #224]	; (80028fc <main+0x354>)
 800281a:	4939      	ldr	r1, [pc, #228]	; (8002900 <main+0x358>)
 800281c:	4833      	ldr	r0, [pc, #204]	; (80028ec <main+0x344>)
 800281e:	9305      	str	r3, [sp, #20]
 8002820:	4643      	mov	r3, r8
 8002822:	9304      	str	r3, [sp, #16]
 8002824:	9402      	str	r4, [sp, #8]
 8002826:	9503      	str	r5, [sp, #12]
 8002828:	9601      	str	r6, [sp, #4]
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <main+0x350>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	23f9      	movs	r3, #249	; 0xf9
 8002830:	f009 fc14 	bl	800c05c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <main+0x344>)
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fc1e 	bl	8003078 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <main+0x34c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d041      	beq.n	80028c8 <main+0x320>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <main+0x348>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <main+0x348>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0019      	movs	r1, r3
 800284e:	0010      	movs	r0, r2
 8002850:	f007 f820 	bl	8009894 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <main+0x370>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4698      	mov	r8, r3
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <main+0x348>)
 800285c:	689c      	ldr	r4, [r3, #8]
 800285e:	68dd      	ldr	r5, [r3, #12]
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <main+0x348>)
 8002862:	8a5b      	ldrh	r3, [r3, #18]
 8002864:	001e      	movs	r6, r3
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <main+0x348>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	213c      	movs	r1, #60	; 0x3c
 800286c:	0018      	movs	r0, r3
 800286e:	f7fd fc65 	bl	800013c <__udivsi3>
 8002872:	0003      	movs	r3, r0
 8002874:	469c      	mov	ip, r3
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <main+0x348>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <main+0x348>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	492d      	ldr	r1, [pc, #180]	; (8002934 <main+0x38c>)
 8002880:	4828      	ldr	r0, [pc, #160]	; (8002924 <main+0x37c>)
 8002882:	9305      	str	r3, [sp, #20]
 8002884:	9204      	str	r2, [sp, #16]
 8002886:	4663      	mov	r3, ip
 8002888:	9303      	str	r3, [sp, #12]
 800288a:	9602      	str	r6, [sp, #8]
 800288c:	9400      	str	r4, [sp, #0]
 800288e:	9501      	str	r5, [sp, #4]
 8002890:	4642      	mov	r2, r8
 8002892:	f009 fbe3 	bl	800c05c <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <main+0x370>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	b291      	uxth	r1, r2
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <main+0x370>)
 80028a0:	8011      	strh	r1, [r2, #0]
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <main+0x37c>)
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f006 ff8a 	bl	80097c0 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	005c      	lsls	r4, r3, #1
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <main+0x354>)
 80028b2:	491d      	ldr	r1, [pc, #116]	; (8002928 <main+0x380>)
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <main+0x344>)
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <main+0x37c>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	0023      	movs	r3, r4
 80028bc:	f009 fbce 	bl	800c05c <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <main+0x344>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fbd8 	bl	8003078 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <main+0x35c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f007 f9b9 	bl	8009c44 <my_rtc_set_alarm>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d100      	bne.n	80028d8 <main+0x330>
 80028d6:	e767      	b.n	80027a8 <main+0x200>
	  {
		  my_sys_deepsleep () ;
 80028d8:	f000 fcaa 	bl	8003230 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 80028dc:	e764      	b.n	80027a8 <main+0x200>
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000a22 	.word	0x20000a22
 80028e8:	08012c54 	.word	0x08012c54
 80028ec:	20000b10 	.word	0x20000b10
 80028f0:	20000ae8 	.word	0x20000ae8
 80028f4:	20000b01 	.word	0x20000b01
 80028f8:	20000a24 	.word	0x20000a24
 80028fc:	08012c64 	.word	0x08012c64
 8002900:	08012c78 	.word	0x08012c78
 8002904:	2000000c 	.word	0x2000000c
 8002908:	08012cb8 	.word	0x08012cb8
 800290c:	20000b00 	.word	0x20000b00
 8002910:	08012cd8 	.word	0x08012cd8
 8002914:	08012ce4 	.word	0x08012ce4
 8002918:	20000a38 	.word	0x20000a38
 800291c:	20000004 	.word	0x20000004
 8002920:	08012cfc 	.word	0x08012cfc
 8002924:	20000a3c 	.word	0x20000a3c
 8002928:	08012d10 	.word	0x08012d10
 800292c:	20000c0a 	.word	0x20000c0a
 8002930:	20000c0c 	.word	0x20000c0c
 8002934:	08012d24 	.word	0x08012d24

08002938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b095      	sub	sp, #84	; 0x54
 800293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293e:	2414      	movs	r4, #20
 8002940:	193b      	adds	r3, r7, r4
 8002942:	0018      	movs	r0, r3
 8002944:	233c      	movs	r3, #60	; 0x3c
 8002946:	001a      	movs	r2, r3
 8002948:	2100      	movs	r1, #0
 800294a:	f009 fc1d 	bl	800c188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	0018      	movs	r0, r3
 8002952:	2310      	movs	r3, #16
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f009 fc16 	bl	800c188 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	0018      	movs	r0, r3
 8002962:	f002 f88f 	bl	8004a84 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002966:	f002 f82d 	bl	80049c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <SystemClock_Config+0xa8>)
 800296c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <SystemClock_Config+0xa8>)
 8002970:	2118      	movs	r1, #24
 8002972:	438a      	bics	r2, r1
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2206      	movs	r2, #6
 800297a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2201      	movs	r2, #1
 8002980:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	0052      	lsls	r2, r2, #1
 8002988:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299c:	193b      	adds	r3, r7, r4
 800299e:	0018      	movs	r0, r3
 80029a0:	f002 f8bc 	bl	8004b1c <HAL_RCC_OscConfig>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80029a8:	f000 ffee 	bl	8003988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2207      	movs	r2, #7
 80029b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2100      	movs	r1, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f002 fc07 	bl	80051dc <HAL_RCC_ClockConfig>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029d2:	f000 ffd9 	bl	8003988 <Error_Handler>
  }
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b015      	add	sp, #84	; 0x54
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b090      	sub	sp, #64	; 0x40
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029ea:	232c      	movs	r3, #44	; 0x2c
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	0018      	movs	r0, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	001a      	movs	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f009 fbc7 	bl	800c188 <memset>
  RTC_DateTypeDef sDate = {0};
 80029fa:	2328      	movs	r3, #40	; 0x28
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a02:	003b      	movs	r3, r7
 8002a04:	0018      	movs	r0, r3
 8002a06:	2328      	movs	r3, #40	; 0x28
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f009 fbbc 	bl	800c188 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a10:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a12:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <MX_RTC_Init+0x144>)
 8002a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a1e:	227f      	movs	r2, #127	; 0x7f
 8002a20:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	05d2      	lsls	r2, r2, #23
 8002a40:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f002 ffac 	bl	80059a8 <HAL_RTC_Init>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002a54:	f000 ff98 	bl	8003988 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2200      	movs	r2, #0
 8002a64:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2200      	movs	r2, #0
 8002a6a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a7e:	1879      	adds	r1, r7, r1
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f003 f831 	bl	8005aec <HAL_RTC_SetTime>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002a8e:	f000 ff7b 	bl	8003988 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002a92:	2128      	movs	r1, #40	; 0x28
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2206      	movs	r2, #6
 8002a98:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002aac:	1879      	adds	r1, r7, r1
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_RTC_Init+0x140>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f003 f91e 	bl	8005cf4 <HAL_RTC_SetDate>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002abc:	f000 ff64 	bl	8003988 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002ac6:	003b      	movs	r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002acc:	003b      	movs	r3, r7
 8002ace:	2200      	movs	r2, #0
 8002ad0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ad8:	003b      	movs	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ade:	003b      	movs	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ae4:	003b      	movs	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002aea:	003b      	movs	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002af0:	003b      	movs	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002af6:	003b      	movs	r3, r7
 8002af8:	2220      	movs	r2, #32
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002afe:	003b      	movs	r3, r7
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0052      	lsls	r2, r2, #1
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b06:	0039      	movs	r1, r7
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_RTC_Init+0x140>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f003 f9d1 	bl	8005eb4 <HAL_RTC_SetAlarm_IT>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b16:	f000 ff37 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b010      	add	sp, #64	; 0x40
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	200006f4 	.word	0x200006f4
 8002b28:	40002800 	.word	0x40002800

08002b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <MX_SPI1_Init+0x78>)
 8002b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b38:	2282      	movs	r2, #130	; 0x82
 8002b3a:	0052      	lsls	r2, r2, #1
 8002b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b46:	22e0      	movs	r2, #224	; 0xe0
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b86:	2208      	movs	r2, #8
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f003 fc71 	bl	8006474 <HAL_SPI_Init>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b96:	f000 fef7 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000720 	.word	0x20000720
 8002ba4:	40013000 	.word	0x40013000

08002ba8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f009 fae6 	bl	800c188 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <MX_TIM6_Init+0x70>)
 8002bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <MX_TIM6_Init+0x74>)
 8002bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <MX_TIM6_Init+0x78>)
 8002bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f003 fd01 	bl	80065e4 <HAL_TIM_Base_Init>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002be6:	f000 fecf 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bf6:	1d3a      	adds	r2, r7, #4
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f003 ff99 	bl	8006b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c06:	f000 febf 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000784 	.word	0x20000784
 8002c18:	40001000 	.word	0x40001000
 8002c1c:	00003e7f 	.word	0x00003e7f
 8002c20:	000003e7 	.word	0x000003e7

08002c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <MX_USART1_UART_Init+0x98>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c30:	22e1      	movs	r2, #225	; 0xe1
 8002c32:	0252      	lsls	r2, r2, #9
 8002c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f003 ffee 	bl	8006c50 <HAL_UART_Init>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c78:	f000 fe86 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	0018      	movs	r0, r3
 8002c82:	f004 ffc9 	bl	8007c18 <HAL_UARTEx_SetTxFifoThreshold>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c8a:	f000 fe7d 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f005 f800 	bl	8007c98 <HAL_UARTEx_SetRxFifoThreshold>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c9c:	f000 fe74 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f004 ff7e 	bl	8007ba4 <HAL_UARTEx_DisableFifoMode>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002cac:	f000 fe6c 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	200007d0 	.word	0x200007d0
 8002cbc:	40013800 	.word	0x40013800

08002cc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <MX_USART2_UART_Init+0x98>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ccc:	22e1      	movs	r2, #225	; 0xe1
 8002cce:	0252      	lsls	r2, r2, #9
 8002cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f003 ffa0 	bl	8006c50 <HAL_UART_Init>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d14:	f000 fe38 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 ff7b 	bl	8007c18 <HAL_UARTEx_SetTxFifoThreshold>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d26:	f000 fe2f 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f004 ffb2 	bl	8007c98 <HAL_UARTEx_SetRxFifoThreshold>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f000 fe26 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f004 ff30 	bl	8007ba4 <HAL_UARTEx_DisableFifoMode>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f000 fe1e 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	20000864 	.word	0x20000864
 8002d58:	40004400 	.word	0x40004400

08002d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <MX_USART3_UART_Init+0x98>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d68:	2296      	movs	r2, #150	; 0x96
 8002d6a:	0192      	lsls	r2, r2, #6
 8002d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f003 ff52 	bl	8006c50 <HAL_UART_Init>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002db0:	f000 fdea 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f004 ff2d 	bl	8007c18 <HAL_UARTEx_SetTxFifoThreshold>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dc2:	f000 fde1 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f004 ff64 	bl	8007c98 <HAL_UARTEx_SetRxFifoThreshold>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f000 fdd8 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f004 fee2 	bl	8007ba4 <HAL_UARTEx_DisableFifoMode>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d001      	beq.n	8002de8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002de4:	f000 fdd0 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200008f8 	.word	0x200008f8
 8002df4:	40004800 	.word	0x40004800

08002df8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <MX_USART5_UART_Init+0x64>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e04:	2296      	movs	r2, #150	; 0x96
 8002e06:	0192      	lsls	r2, r2, #6
 8002e08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f003 ff04 	bl	8006c50 <HAL_UART_Init>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002e4c:	f000 fd9c 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	2000098c 	.word	0x2000098c
 8002e5c:	40005000 	.word	0x40005000

08002e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	2414      	movs	r4, #20
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	2314      	movs	r3, #20
 8002e6e:	001a      	movs	r2, r3
 8002e70:	2100      	movs	r1, #0
 8002e72:	f009 f989 	bl	800c188 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	4b79      	ldr	r3, [pc, #484]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	4b77      	ldr	r3, [pc, #476]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <MX_GPIO_Init+0x200>)
 8002eac:	2102      	movs	r1, #2
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <MX_GPIO_Init+0x200>)
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	2200      	movs	r2, #0
 8002edc:	2110      	movs	r1, #16
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 fd1f 	bl	8004922 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002ee4:	495f      	ldr	r1, [pc, #380]	; (8003064 <MX_GPIO_Init+0x204>)
 8002ee6:	4b60      	ldr	r3, [pc, #384]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0018      	movs	r0, r3
 8002eec:	f001 fd19 	bl	8004922 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	485c      	ldr	r0, [pc, #368]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	0019      	movs	r1, r3
 8002efa:	f001 fd12 	bl	8004922 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <MX_GPIO_Init+0x20c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	2103      	movs	r1, #3
 8002f04:	0018      	movs	r0, r3
 8002f06:	f001 fd0c 	bl	8004922 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2288      	movs	r2, #136	; 0x88
 8002f14:	0352      	lsls	r2, r2, #13
 8002f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	193a      	adds	r2, r7, r4
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 fa9a 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	2202      	movs	r2, #2
 8002f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002f3e:	193a      	adds	r2, r7, r4
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 fa8a 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2210      	movs	r2, #16
 8002f50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2201      	movs	r2, #1
 8002f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fa77 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	4a3e      	ldr	r2, [pc, #248]	; (8003070 <MX_GPIO_Init+0x210>)
 8002f76:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <MX_GPIO_Init+0x208>)
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f001 fa65 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2288      	movs	r2, #136	; 0x88
 8002fa2:	0352      	lsls	r2, r2, #13
 8002fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fac:	000c      	movs	r4, r1
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <MX_GPIO_Init+0x208>)
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f001 fa53 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002fba:	0021      	movs	r1, r4
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002fc4:	000c      	movs	r4, r1
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2211      	movs	r2, #17
 8002fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	4a23      	ldr	r2, [pc, #140]	; (8003068 <MX_GPIO_Init+0x208>)
 8002fdc:	0019      	movs	r1, r3
 8002fde:	0010      	movs	r0, r2
 8002fe0:	f001 fa3e 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <MX_GPIO_Init+0x214>)
 8002fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f001 fa2f 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2203      	movs	r2, #3
 8003006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003008:	193b      	adds	r3, r7, r4
 800300a:	2201      	movs	r2, #1
 800300c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800301a:	193b      	adds	r3, r7, r4
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <MX_GPIO_Init+0x20c>)
 800301e:	0019      	movs	r1, r3
 8003020:	0010      	movs	r0, r2
 8003022:	f001 fa1d 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003026:	0021      	movs	r1, r4
 8003028:	187b      	adds	r3, r7, r1
 800302a:	220c      	movs	r2, #12
 800302c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800303a:	187b      	adds	r3, r7, r1
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <MX_GPIO_Init+0x20c>)
 800303e:	0019      	movs	r1, r3
 8003040:	0010      	movs	r0, r2
 8003042:	f001 fa0d 	bl	8004460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2006      	movs	r0, #6
 800304c:	f001 f9d2 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003050:	2006      	movs	r0, #6
 8003052:	f001 f9e4 	bl	800441e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b00b      	add	sp, #44	; 0x2c
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	0000a403 	.word	0x0000a403
 8003068:	50000400 	.word	0x50000400
 800306c:	50000c00 	.word	0x50000c00
 8003070:	00008c03 	.word	0x00008c03
 8003074:	00004040 	.word	0x00004040

08003078 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd f83e 	bl	8000104 <strlen>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2bfa      	cmp	r3, #250	; 0xfa
 8003090:	d908      	bls.n	80030a4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8003092:	23fa      	movs	r3, #250	; 0xfa
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <send_debug_logs+0x54>)
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <send_debug_logs+0x58>)
 800309a:	222a      	movs	r2, #42	; 0x2a
 800309c:	f003 fe6e 	bl	8006d7c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030a0:	23fa      	movs	r3, #250	; 0xfa
 80030a2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	23fa      	movs	r3, #250	; 0xfa
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4808      	ldr	r0, [pc, #32]	; (80030d0 <send_debug_logs+0x58>)
 80030b0:	f003 fe64 	bl	8006d7c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80030b4:	23fa      	movs	r3, #250	; 0xfa
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4906      	ldr	r1, [pc, #24]	; (80030d4 <send_debug_logs+0x5c>)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <send_debug_logs+0x58>)
 80030bc:	2201      	movs	r2, #1
 80030be:	f003 fe5d 	bl	8006d7c <HAL_UART_Transmit>
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	08012d3c 	.word	0x08012d3c
 80030d0:	20000864 	.word	0x20000864
 80030d4:	08012d68 	.word	0x08012d68

080030d8 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 80030dc:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <my_sys_init+0xf0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <my_sys_init+0xf0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <my_sys_init+0xf4>)
 80030ea:	2104      	movs	r1, #4
 80030ec:	0018      	movs	r0, r3
 80030ee:	f001 fbfb 	bl	80048e8 <HAL_GPIO_ReadPin>
 80030f2:	0003      	movs	r3, r0
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	4193      	sbcs	r3, r2
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <my_sys_init+0xf8>)
 80030fc:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <my_sys_init+0xf4>)
 8003100:	2108      	movs	r1, #8
 8003102:	0018      	movs	r0, r3
 8003104:	f001 fbf0 	bl	80048e8 <HAL_GPIO_ReadPin>
 8003108:	0003      	movs	r3, r0
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	4193      	sbcs	r3, r2
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <my_sys_init+0xfc>)
 8003112:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <my_sys_init+0xf8>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4053      	eors	r3, r2
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d013      	beq.n	800314a <my_sys_init+0x72>
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <my_sys_init+0xfc>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	4053      	eors	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <my_sys_init+0x100>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <my_sys_init+0x104>)
 8003138:	22e1      	movs	r2, #225	; 0xe1
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <my_sys_init+0x108>)
 8003140:	2278      	movs	r2, #120	; 0x78
 8003142:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <my_sys_init+0x10c>)
 8003146:	221e      	movs	r2, #30
 8003148:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <my_sys_init+0xf8>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <my_sys_init+0xa2>
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <my_sys_init+0xfc>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	4053      	eors	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <my_sys_init+0x100>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <my_sys_init+0x104>)
 8003168:	22e1      	movs	r2, #225	; 0xe1
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <my_sys_init+0x108>)
 8003170:	2278      	movs	r2, #120	; 0x78
 8003172:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <my_sys_init+0x10c>)
 8003176:	221e      	movs	r2, #30
 8003178:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <my_sys_init+0xf8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	4053      	eors	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d011      	beq.n	80031ac <my_sys_init+0xd4>
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <my_sys_init+0xfc>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <my_sys_init+0x100>)
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <my_sys_init+0x104>)
 8003198:	2296      	movs	r2, #150	; 0x96
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <my_sys_init+0x108>)
 80031a0:	2296      	movs	r2, #150	; 0x96
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <my_sys_init+0x10c>)
 80031a8:	223c      	movs	r2, #60	; 0x3c
 80031aa:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <my_sys_init+0xf8>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <my_sys_init+0xea>
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <my_sys_init+0xfc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <my_sys_init+0x100>)
 80031be:	2203      	movs	r2, #3
 80031c0:	701a      	strb	r2, [r3, #0]
	}
}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000ae8 	.word	0x20000ae8
 80031cc:	50000c00 	.word	0x50000c00
 80031d0:	20000a20 	.word	0x20000a20
 80031d4:	20000a21 	.word	0x20000a21
 80031d8:	20000a22 	.word	0x20000a22
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	2000001a 	.word	0x2000001a
 80031e4:	2000001c 	.word	0x2000001c

080031e8 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <my_sys_restart+0x34>)
 80031f0:	0018      	movs	r0, r3
 80031f2:	f006 fce5 	bl	8009bc0 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80031f6:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <my_sys_restart+0x38>)
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <my_sys_restart+0x3c>)
 80031fa:	490b      	ldr	r1, [pc, #44]	; (8003228 <my_sys_restart+0x40>)
 80031fc:	480b      	ldr	r0, [pc, #44]	; (800322c <my_sys_restart+0x44>)
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <my_sys_restart+0x34>)
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	0023      	movs	r3, r4
 8003204:	f008 ff2a 	bl	800c05c <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <my_sys_restart+0x44>)
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff ff34 	bl	8003078 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 8003210:	f001 f915 	bl	800443e <HAL_NVIC_SystemReset>
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b001      	add	sp, #4
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	20000a24 	.word	0x20000a24
 8003220:	00000335 	.word	0x00000335
 8003224:	08012c64 	.word	0x08012c64
 8003228:	08012d6c 	.word	0x08012d6c
 800322c:	20000b10 	.word	0x20000b10

08003230 <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b083      	sub	sp, #12
 8003234:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 8003236:	23d2      	movs	r3, #210	; 0xd2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <my_sys_deepsleep+0x68>)
 800323c:	4917      	ldr	r1, [pc, #92]	; (800329c <my_sys_deepsleep+0x6c>)
 800323e:	4818      	ldr	r0, [pc, #96]	; (80032a0 <my_sys_deepsleep+0x70>)
 8003240:	f008 ff0c 	bl	800c05c <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <my_sys_deepsleep+0x70>)
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff ff16 	bl	8003078 <send_debug_logs>
	my_tim_stop () ;
 800324c:	f000 fb56 	bl	80038fc <my_tim_stop>
	HAL_SuspendTick () ;
 8003250:	f000 ffe0 	bl	8004214 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <my_sys_deepsleep+0x74>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	2102      	movs	r1, #2
 8003260:	0018      	movs	r0, r3
 8003262:	f001 fbbd 	bl	80049e0 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 8003266:	f000 ffe3 	bl	8004230 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <my_sys_deepsleep+0x78>)
 800326c:	0018      	movs	r0, r3
 800326e:	f006 fca7 	bl	8009bc0 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003272:	23d4      	movs	r3, #212	; 0xd4
 8003274:	009c      	lsls	r4, r3, #2
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <my_sys_deepsleep+0x68>)
 8003278:	490c      	ldr	r1, [pc, #48]	; (80032ac <my_sys_deepsleep+0x7c>)
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <my_sys_deepsleep+0x70>)
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <my_sys_deepsleep+0x78>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	0023      	movs	r3, r4
 8003282:	f008 feeb 	bl	800c05c <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <my_sys_deepsleep+0x70>)
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff fef5 	bl	8003078 <send_debug_logs>
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b001      	add	sp, #4
 8003294:	bd90      	pop	{r4, r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	08012c64 	.word	0x08012c64
 800329c:	08012dac 	.word	0x08012dac
 80032a0:	20000b10 	.word	0x20000b10
 80032a4:	20000b00 	.word	0x20000b00
 80032a8:	20000a24 	.word	0x20000a24
 80032ac:	08012de0 	.word	0x08012de0

080032b0 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	2396      	movs	r3, #150	; 0x96
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	429a      	cmp	r2, r3
 80032c0:	d30b      	bcc.n	80032da <my_sys_change_watchdog_time_ths+0x2a>
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	23e1      	movs	r3, #225	; 0xe1
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d806      	bhi.n	80032da <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <my_sys_change_watchdog_time_ths+0x34>)
 80032d2:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <my_sys_change_watchdog_time_ths+0x38>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	721a      	strb	r2, [r3, #8]
	}
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000008 	.word	0x20000008
 80032e8:	20000adc 	.word	0x20000adc

080032ec <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	2396      	movs	r3, #150	; 0x96
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d309      	bcc.n	8003312 <my_sys_change_AlarmA_time+0x26>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <my_sys_change_AlarmA_time+0x30>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d805      	bhi.n	8003312 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <my_sys_change_AlarmA_time+0x34>)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <my_sys_change_AlarmA_time+0x38>)
 800330e:	2201      	movs	r2, #1
 8003310:	721a      	strb	r2, [r3, #8]
	}
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	0083d600 	.word	0x0083d600
 8003320:	2000000c 	.word	0x2000000c
 8003324:	20000adc 	.word	0x20000adc

08003328 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b2c      	cmp	r3, #44	; 0x2c
 8003334:	d90b      	bls.n	800334e <my_sys_change_fix_acq_ths+0x26>
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	2396      	movs	r3, #150	; 0x96
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d806      	bhi.n	800334e <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <my_sys_change_fix_acq_ths+0x30>)
 8003346:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <my_sys_change_fix_acq_ths+0x34>)
 800334a:	2201      	movs	r2, #1
 800334c:	721a      	strb	r2, [r3, #8]
	}
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	2000001a 	.word	0x2000001a
 800335c:	20000adc 	.word	0x20000adc

08003360 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b0e      	cmp	r3, #14
 800336c:	d90b      	bls.n	8003386 <my_sys_change_min_tns_time_ths+0x26>
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	2396      	movs	r3, #150	; 0x96
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d806      	bhi.n	8003386 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <my_sys_change_min_tns_time_ths+0x30>)
 800337e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <my_sys_change_min_tns_time_ths+0x34>)
 8003382:	2201      	movs	r2, #1
 8003384:	721a      	strb	r2, [r3, #8]
	}
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	2000001c 	.word	0x2000001c
 8003394:	20000adc 	.word	0x20000adc

08003398 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <my_sys_change_pdop_ths+0x2a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d80a      	bhi.n	80033c2 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff f825 	bl	80023fc <__aeabi_ui2d>
 80033b2:	0002      	movs	r2, r0
 80033b4:	000b      	movs	r3, r1
 80033b6:	4905      	ldr	r1, [pc, #20]	; (80033cc <my_sys_change_pdop_ths+0x34>)
 80033b8:	600a      	str	r2, [r1, #0]
 80033ba:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <my_sys_change_pdop_ths+0x38>)
 80033be:	2201      	movs	r2, #1
 80033c0:	721a      	strb	r2, [r3, #8]
	}
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000020 	.word	0x20000020
 80033d0:	20000adc 	.word	0x20000adc

080033d4 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af02      	add	r7, sp, #8
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 80033da:	4ba4      	ldr	r3, [pc, #656]	; (800366c <my_tracker_handle_cmd+0x298>)
 80033dc:	0018      	movs	r0, r3
 80033de:	f007 faff 	bl	800a9e0 <my_tracker_api_is_cmd>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d100      	bne.n	80033e8 <my_tracker_handle_cmd+0x14>
 80033e6:	e13d      	b.n	8003664 <my_tracker_handle_cmd+0x290>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 80033e8:	4aa0      	ldr	r2, [pc, #640]	; (800366c <my_tracker_handle_cmd+0x298>)
 80033ea:	4ba1      	ldr	r3, [pc, #644]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f007 fb60 	bl	800aab4 <my_tracker_api_parse_cmd>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d100      	bne.n	80033fa <my_tracker_handle_cmd+0x26>
 80033f8:	e134      	b.n	8003664 <my_tracker_handle_cmd+0x290>
		{
			switch ( my_astro_cmd.code )
 80033fa:	4b9d      	ldr	r3, [pc, #628]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d900      	bls.n	8003404 <my_tracker_handle_cmd+0x30>
 8003402:	e101      	b.n	8003608 <my_tracker_handle_cmd+0x234>
 8003404:	009a      	lsls	r2, r3, #2
 8003406:	4b9b      	ldr	r3, [pc, #620]	; (8003674 <my_tracker_handle_cmd+0x2a0>)
 8003408:	18d3      	adds	r3, r2, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 800340e:	4b98      	ldr	r3, [pc, #608]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff ff4c 	bl	80032b0 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003418:	4b97      	ldr	r3, [pc, #604]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	001c      	movs	r4, r3
 800341e:	4b94      	ldr	r3, [pc, #592]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003420:	7a1b      	ldrb	r3, [r3, #8]
 8003422:	001d      	movs	r5, r3
 8003424:	4b92      	ldr	r3, [pc, #584]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	001a      	movs	r2, r3
 800342a:	4b91      	ldr	r3, [pc, #580]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4993      	ldr	r1, [pc, #588]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 8003430:	4893      	ldr	r0, [pc, #588]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	9200      	str	r2, [sp, #0]
 8003436:	002b      	movs	r3, r5
 8003438:	0022      	movs	r2, r4
 800343a:	f008 fe0f 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800343e:	4c91      	ldr	r4, [pc, #580]	; (8003684 <my_tracker_handle_cmd+0x2b0>)
 8003440:	4a91      	ldr	r2, [pc, #580]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 8003442:	4992      	ldr	r1, [pc, #584]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 8003444:	4892      	ldr	r0, [pc, #584]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 8003446:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	0023      	movs	r3, r4
 800344c:	f008 fe06 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003450:	4b8f      	ldr	r3, [pc, #572]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fe10 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8003458:	4b87      	ldr	r3, [pc, #540]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	b291      	uxth	r1, r2
 8003460:	4a85      	ldr	r2, [pc, #532]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 8003462:	8011      	strh	r1, [r2, #0]
 8003464:	4a86      	ldr	r2, [pc, #536]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f006 f9a9 	bl	80097c0 <my_astro_add_payload_2_queue>
				  break ;
 800346e:	e0f9      	b.n	8003664 <my_tracker_handle_cmd+0x290>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 8003470:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff ff39 	bl	80032ec <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800347a:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	001c      	movs	r4, r3
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003482:	7a1b      	ldrb	r3, [r3, #8]
 8003484:	001d      	movs	r5, r3
 8003486:	4b7a      	ldr	r3, [pc, #488]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	001a      	movs	r2, r3
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	497a      	ldr	r1, [pc, #488]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 8003492:	487b      	ldr	r0, [pc, #492]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	002b      	movs	r3, r5
 800349a:	0022      	movs	r2, r4
 800349c:	f008 fdde 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034a0:	4c7c      	ldr	r4, [pc, #496]	; (8003694 <my_tracker_handle_cmd+0x2c0>)
 80034a2:	4a79      	ldr	r2, [pc, #484]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 80034a4:	4979      	ldr	r1, [pc, #484]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 80034a6:	487a      	ldr	r0, [pc, #488]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 80034a8:	4b75      	ldr	r3, [pc, #468]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	0023      	movs	r3, r4
 80034ae:	f008 fdd5 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034b2:	4b77      	ldr	r3, [pc, #476]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7ff fddf 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	b291      	uxth	r1, r2
 80034c2:	4a6d      	ldr	r2, [pc, #436]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80034c4:	8011      	strh	r1, [r2, #0]
 80034c6:	4a6e      	ldr	r2, [pc, #440]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f006 f978 	bl	80097c0 <my_astro_add_payload_2_queue>
				  break ;
 80034d0:	e0c8      	b.n	8003664 <my_tracker_handle_cmd+0x290>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff ff26 	bl	8003328 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034dc:	4b66      	ldr	r3, [pc, #408]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	001c      	movs	r4, r3
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80034e4:	7a1b      	ldrb	r3, [r3, #8]
 80034e6:	001d      	movs	r5, r3
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	001a      	movs	r2, r3
 80034ee:	4b60      	ldr	r3, [pc, #384]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4962      	ldr	r1, [pc, #392]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 80034f4:	4862      	ldr	r0, [pc, #392]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	9200      	str	r2, [sp, #0]
 80034fa:	002b      	movs	r3, r5
 80034fc:	0022      	movs	r2, r4
 80034fe:	f008 fdad 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003502:	4c65      	ldr	r4, [pc, #404]	; (8003698 <my_tracker_handle_cmd+0x2c4>)
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 8003506:	4961      	ldr	r1, [pc, #388]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 8003508:	4861      	ldr	r0, [pc, #388]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 800350a:	4b5d      	ldr	r3, [pc, #372]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	0023      	movs	r3, r4
 8003510:	f008 fda4 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003514:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff fdae 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 800351c:	4b56      	ldr	r3, [pc, #344]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	b291      	uxth	r1, r2
 8003524:	4a54      	ldr	r2, [pc, #336]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 8003526:	8011      	strh	r1, [r2, #0]
 8003528:	4a55      	ldr	r2, [pc, #340]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 800352a:	0011      	movs	r1, r2
 800352c:	0018      	movs	r0, r3
 800352e:	f006 f947 	bl	80097c0 <my_astro_add_payload_2_queue>
				  break ;
 8003532:	e097      	b.n	8003664 <my_tracker_handle_cmd+0x290>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 8003534:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ff11 	bl	8003360 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800353e:	4b4e      	ldr	r3, [pc, #312]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	001c      	movs	r4, r3
 8003544:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003546:	7a1b      	ldrb	r3, [r3, #8]
 8003548:	001d      	movs	r5, r3
 800354a:	4b49      	ldr	r3, [pc, #292]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	001a      	movs	r2, r3
 8003550:	4b47      	ldr	r3, [pc, #284]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4949      	ldr	r1, [pc, #292]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 8003556:	484a      	ldr	r0, [pc, #296]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	9200      	str	r2, [sp, #0]
 800355c:	002b      	movs	r3, r5
 800355e:	0022      	movs	r2, r4
 8003560:	f008 fd7c 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003564:	23e7      	movs	r3, #231	; 0xe7
 8003566:	009c      	lsls	r4, r3, #2
 8003568:	4a47      	ldr	r2, [pc, #284]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 800356a:	4948      	ldr	r1, [pc, #288]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 800356c:	4848      	ldr	r0, [pc, #288]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 800356e:	4b44      	ldr	r3, [pc, #272]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	0023      	movs	r3, r4
 8003574:	f008 fd72 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fd7c 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	b291      	uxth	r1, r2
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800358a:	8011      	strh	r1, [r2, #0]
 800358c:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f006 f915 	bl	80097c0 <my_astro_add_payload_2_queue>
				  break ;
 8003596:	e065      	b.n	8003664 <my_tracker_handle_cmd+0x290>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 8003598:	4b35      	ldr	r3, [pc, #212]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff fefb 	bl	8003398 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035a2:	4b35      	ldr	r3, [pc, #212]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	001c      	movs	r4, r3
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80035aa:	7a1b      	ldrb	r3, [r3, #8]
 80035ac:	001d      	movs	r5, r3
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	001a      	movs	r2, r3
 80035b4:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4930      	ldr	r1, [pc, #192]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 80035ba:	4831      	ldr	r0, [pc, #196]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	9200      	str	r2, [sp, #0]
 80035c0:	002b      	movs	r3, r5
 80035c2:	0022      	movs	r2, r4
 80035c4:	f008 fd4a 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035c8:	4c34      	ldr	r4, [pc, #208]	; (800369c <my_tracker_handle_cmd+0x2c8>)
 80035ca:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 80035cc:	492f      	ldr	r1, [pc, #188]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 80035ce:	4830      	ldr	r0, [pc, #192]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	0023      	movs	r3, r4
 80035d6:	f008 fd41 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035da:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fd4b 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	b291      	uxth	r1, r2
 80035ea:	4a23      	ldr	r2, [pc, #140]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 80035ec:	8011      	strh	r1, [r2, #0]
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f006 f8e4 	bl	80097c0 <my_astro_add_payload_2_queue>
				  break ;
 80035f8:	e034      	b.n	8003664 <my_tracker_handle_cmd+0x290>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) SYS_RESET_CMD_VALUE )
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b09      	cmp	r3, #9
 8003600:	d12f      	bne.n	8003662 <my_tracker_handle_cmd+0x28e>
					  my_sys_restart () ;
 8003602:	f7ff fdf1 	bl	80031e8 <my_sys_restart>
				  break ;
 8003606:	e02c      	b.n	8003662 <my_tracker_handle_cmd+0x28e>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	001c      	movs	r4, r3
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003610:	7a1b      	ldrb	r3, [r3, #8]
 8003612:	001d      	movs	r5, r3
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	001a      	movs	r2, r3
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <my_tracker_handle_cmd+0x29c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4917      	ldr	r1, [pc, #92]	; (800367c <my_tracker_handle_cmd+0x2a8>)
 8003620:	4817      	ldr	r0, [pc, #92]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	9200      	str	r2, [sp, #0]
 8003626:	002b      	movs	r3, r5
 8003628:	0022      	movs	r2, r4
 800362a:	f008 fd17 	bl	800c05c <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800362e:	4c1c      	ldr	r4, [pc, #112]	; (80036a0 <my_tracker_handle_cmd+0x2cc>)
 8003630:	4a15      	ldr	r2, [pc, #84]	; (8003688 <my_tracker_handle_cmd+0x2b4>)
 8003632:	4916      	ldr	r1, [pc, #88]	; (800368c <my_tracker_handle_cmd+0x2b8>)
 8003634:	4816      	ldr	r0, [pc, #88]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	0023      	movs	r3, r4
 800363c:	f008 fd0e 	bl	800c05c <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <my_tracker_handle_cmd+0x2bc>)
 8003642:	0018      	movs	r0, r3
 8003644:	f7ff fd18 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	b291      	uxth	r1, r2
 8003650:	4a09      	ldr	r2, [pc, #36]	; (8003678 <my_tracker_handle_cmd+0x2a4>)
 8003652:	8011      	strh	r1, [r2, #0]
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <my_tracker_handle_cmd+0x2ac>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f006 f8b1 	bl	80097c0 <my_astro_add_payload_2_queue>
				  return false ;
 800365e:	2300      	movs	r3, #0
 8003660:	e001      	b.n	8003666 <my_tracker_handle_cmd+0x292>
				  break ;
 8003662:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 8003664:	2301      	movs	r3, #1
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	bdb0      	pop	{r4, r5, r7, pc}
 800366c:	20000c0c 	.word	0x20000c0c
 8003670:	20000adc 	.word	0x20000adc
 8003674:	0801478c 	.word	0x0801478c
 8003678:	20000a38 	.word	0x20000a38
 800367c:	08012e04 	.word	0x08012e04
 8003680:	20000a3c 	.word	0x20000a3c
 8003684:	00000387 	.word	0x00000387
 8003688:	08012c64 	.word	0x08012c64
 800368c:	08012d10 	.word	0x08012d10
 8003690:	20000b10 	.word	0x20000b10
 8003694:	0000038e 	.word	0x0000038e
 8003698:	00000395 	.word	0x00000395
 800369c:	000003a3 	.word	0x000003a3
 80036a0:	000003ae 	.word	0x000003ae

080036a4 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	0002      	movs	r2, r0
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10e      	bne.n	80036d6 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4811      	ldr	r0, [pc, #68]	; (8003704 <my_ant_sw_pos+0x60>)
 80036be:	2200      	movs	r2, #0
 80036c0:	0019      	movs	r1, r3
 80036c2:	f001 f92e 	bl	8004922 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	480e      	ldr	r0, [pc, #56]	; (8003704 <my_ant_sw_pos+0x60>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	0019      	movs	r1, r3
 80036d0:	f001 f927 	bl	8004922 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80036d4:	e011      	b.n	80036fa <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d10d      	bne.n	80036fa <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4808      	ldr	r0, [pc, #32]	; (8003704 <my_ant_sw_pos+0x60>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	0019      	movs	r1, r3
 80036e8:	f001 f91b 	bl	8004922 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4804      	ldr	r0, [pc, #16]	; (8003704 <my_ant_sw_pos+0x60>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	0019      	movs	r1, r3
 80036f6:	f001 f914 	bl	8004922 <HAL_GPIO_WritePin>
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	50000400 	.word	0x50000400

08003708 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 800370c:	2001      	movs	r0, #1
 800370e:	f7ff ffc9 	bl	80036a4 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	4808      	ldr	r0, [pc, #32]	; (8003738 <my_gnss_sw_on+0x30>)
 8003718:	2201      	movs	r2, #1
 800371a:	0019      	movs	r1, r3
 800371c:	f001 f901 	bl	8004922 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	019b      	lsls	r3, r3, #6
 8003724:	4804      	ldr	r0, [pc, #16]	; (8003738 <my_gnss_sw_on+0x30>)
 8003726:	2201      	movs	r2, #1
 8003728:	0019      	movs	r1, r3
 800372a:	f001 f8fa 	bl	8004922 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800372e:	f7ff fb63 	bl	8002df8 <MX_USART5_UART_Init>
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	50000400 	.word	0x50000400

0800373c <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003740:	2002      	movs	r0, #2
 8003742:	f7ff ffaf 	bl	80036a4 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <my_gnss_sw_off+0x3c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d811      	bhi.n	8003772 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	480a      	ldr	r0, [pc, #40]	; (800377c <my_gnss_sw_off+0x40>)
 8003754:	2200      	movs	r2, #0
 8003756:	0019      	movs	r1, r3
 8003758:	f001 f8e3 	bl	8004922 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	4806      	ldr	r0, [pc, #24]	; (800377c <my_gnss_sw_off+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	0019      	movs	r1, r3
 8003766:	f001 f8dc 	bl	8004922 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <my_gnss_sw_off+0x44>)
 800376c:	0018      	movs	r0, r3
 800376e:	f003 fac5 	bl	8006cfc <HAL_UART_DeInit>
	}
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000a22 	.word	0x20000a22
 800377c:	50000400 	.word	0x50000400
 8003780:	2000098c 	.word	0x2000098c

08003784 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	000a      	movs	r2, r1
 800378e:	1cfb      	adds	r3, r7, #3
 8003790:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003792:	23fa      	movs	r3, #250	; 0xfa
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <my_gnss_receive_byte+0x3c>)
 800379a:	2201      	movs	r2, #1
 800379c:	f003 fb92 	bl	8006ec4 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <my_gnss_receive_byte+0x40>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80037a8:	23fa      	movs	r3, #250	; 0xfa
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4806      	ldr	r0, [pc, #24]	; (80037c8 <my_gnss_receive_byte+0x44>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	f003 fae3 	bl	8006d7c <HAL_UART_Transmit>
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	2000098c 	.word	0x2000098c
 80037c4:	20000a22 	.word	0x20000a22
 80037c8:	20000864 	.word	0x20000864

080037cc <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <my_astronode_reset+0x30>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	2102      	movs	r1, #2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f001 f8a3 	bl	8004922 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80037dc:	2001      	movs	r0, #1
 80037de:	f000 fcf5 	bl	80041cc <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <my_astronode_reset+0x30>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	2102      	movs	r1, #2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f001 f89a 	bl	8004922 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80037ee:	20fa      	movs	r0, #250	; 0xfa
 80037f0:	f000 fcec 	bl	80041cc <HAL_Delay>
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	50000400 	.word	0x50000400

08003800 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <send_astronode_request+0x34>)
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff fc33 	bl	8003078 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff fc2f 	bl	8003078 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b29a      	uxth	r2, r3
 800381e:	23fa      	movs	r3, #250	; 0xfa
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4804      	ldr	r0, [pc, #16]	; (8003838 <send_astronode_request+0x38>)
 8003826:	f003 faa9 	bl	8006d7c <HAL_UART_Transmit>
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	08012e1c 	.word	0x08012e1c
 8003838:	200008f8 	.word	0x200008f8

0800383c <get_systick>:
uint32_t get_systick ( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003840:	f000 fcba 	bl	80041b8 <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	000a      	movs	r2, r1
 8003856:	1cbb      	adds	r3, r7, #2
 8003858:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800385a:	f7ff ffef 	bl	800383c <get_systick>
 800385e:	0002      	movs	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	1cba      	adds	r2, r7, #2
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	419b      	sbcs	r3, r3
 800386c:	425b      	negs	r3, r3
 800386e:	b2db      	uxtb	r3, r3
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <is_astronode_character_received+0x24>)
 8003884:	2364      	movs	r3, #100	; 0x64
 8003886:	2201      	movs	r2, #1
 8003888:	f003 fb1c 	bl	8006ec4 <HAL_UART_Receive>
 800388c:	0003      	movs	r3, r0
 800388e:	425a      	negs	r2, r3
 8003890:	4153      	adcs	r3, r2
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200008f8 	.word	0x200008f8

080038a0 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <my_astro_evt_pin+0x20>)
 80038a6:	2104      	movs	r1, #4
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 f81d 	bl	80048e8 <HAL_GPIO_ReadPin>
 80038ae:	0003      	movs	r3, r0
 80038b0:	3b01      	subs	r3, #1
 80038b2:	425a      	negs	r2, r3
 80038b4:	4153      	adcs	r3, r2
 80038b6:	b2db      	uxtb	r3, r3
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	50000400 	.word	0x50000400

080038c4 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <my_tim_init+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2202      	movs	r2, #2
 80038ce:	4252      	negs	r2, r2
 80038d0:	611a      	str	r2, [r3, #16]
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000784 	.word	0x20000784

080038dc <my_tim_start>:

void my_tim_start ()
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <my_tim_start+0x18>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <my_tim_start+0x1c>)
 80038e8:	0018      	movs	r0, r3
 80038ea:	f002 fed3 	bl	8006694 <HAL_TIM_Base_Start_IT>
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000c34 	.word	0x20000c34
 80038f8:	20000784 	.word	0x20000784

080038fc <my_tim_stop>:

void my_tim_stop ()
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <my_tim_stop+0x14>)
 8003902:	0018      	movs	r0, r3
 8003904:	f002 ff28 	bl	8006758 <HAL_TIM_Base_Stop_IT>
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	20000784 	.word	0x20000784

08003914 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10d      	bne.n	8003942 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003930:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d901      	bls.n	8003942 <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 800393e:	f7ff fc53 	bl	80031e8 <my_sys_restart>
	}
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40001000 	.word	0x40001000
 8003950:	20000c34 	.word	0x20000c34
 8003954:	20000008 	.word	0x20000008

08003958 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000b00 	.word	0x20000b00

08003974 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	0002      	movs	r2, r0
 800397c:	1dbb      	adds	r3, r7, #6
 800397e:	801a      	strh	r2, [r3, #0]

}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}

08003988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800398c:	b672      	cpsid	i
}
 800398e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003990:	e7fe      	b.n	8003990 <Error_Handler+0x8>
	...

08003994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_MspInit+0x4c>)
 800399c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_MspInit+0x4c>)
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_MspInit+0x4c>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_MspInit+0x4c>)
 80039b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_MspInit+0x4c>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	0549      	lsls	r1, r1, #21
 80039bc:	430a      	orrs	r2, r1
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_MspInit+0x4c>)
 80039c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	055b      	lsls	r3, r3, #21
 80039c8:	4013      	ands	r3, r2
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80039ce:	23c0      	movs	r3, #192	; 0xc0
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 fc3a 	bl	800424c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b097      	sub	sp, #92	; 0x5c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ec:	240c      	movs	r4, #12
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	0018      	movs	r0, r3
 80039f2:	234c      	movs	r3, #76	; 0x4c
 80039f4:	001a      	movs	r2, r3
 80039f6:	2100      	movs	r1, #0
 80039f8:	f008 fbc6 	bl	800c188 <memset>
  if(hrtc->Instance==RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_RTC_MspInit+0x84>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d12c      	bne.n	8003a60 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0292      	lsls	r2, r2, #10
 8003a0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0052      	lsls	r2, r2, #1
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 fd89 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a22:	f7ff ffb1 	bl	8003988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_RTC_MspInit+0x88>)
 8003a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_RTC_MspInit+0x88>)
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	0209      	lsls	r1, r1, #8
 8003a30:	430a      	orrs	r2, r1
 8003a32:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_RTC_MspInit+0x88>)
 8003a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_RTC_MspInit+0x88>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	00c9      	lsls	r1, r1, #3
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RTC_MspInit+0x88>)
 8003a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2103      	movs	r1, #3
 8003a54:	2002      	movs	r0, #2
 8003a56:	f000 fccd 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f000 fcdf 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b017      	add	sp, #92	; 0x5c
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	40002800 	.word	0x40002800
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b08b      	sub	sp, #44	; 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	2414      	movs	r4, #20
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	2314      	movs	r3, #20
 8003a80:	001a      	movs	r2, r3
 8003a82:	2100      	movs	r1, #0
 8003a84:	f008 fb80 	bl	800c188 <memset>
  if(hspi->Instance==SPI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_SPI_MspInit+0x8c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d130      	bne.n	8003af4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	0149      	lsls	r1, r1, #5
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	015b      	lsls	r3, r3, #5
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_SPI_MspInit+0x90>)
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003ac6:	0021      	movs	r1, r4
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	22e0      	movs	r2, #224	; 0xe0
 8003acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2200      	movs	r2, #0
 8003ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	187a      	adds	r2, r7, r1
 8003ae8:	23a0      	movs	r3, #160	; 0xa0
 8003aea:	05db      	lsls	r3, r3, #23
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fcb6 	bl	8004460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b00b      	add	sp, #44	; 0x2c
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	40013000 	.word	0x40013000
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_TIM_Base_MspInit+0x44>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_TIM_Base_MspInit+0x48>)
 8003b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_TIM_Base_MspInit+0x48>)
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_TIM_Base_MspInit+0x48>)
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2210      	movs	r2, #16
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2102      	movs	r1, #2
 8003b32:	2011      	movs	r0, #17
 8003b34:	f000 fc5e 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003b38:	2011      	movs	r0, #17
 8003b3a:	f000 fc70 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40001000 	.word	0x40001000
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b0a3      	sub	sp, #140	; 0x8c
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	2374      	movs	r3, #116	; 0x74
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	2314      	movs	r3, #20
 8003b60:	001a      	movs	r2, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	f008 fb10 	bl	800c188 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b68:	2428      	movs	r4, #40	; 0x28
 8003b6a:	193b      	adds	r3, r7, r4
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	234c      	movs	r3, #76	; 0x4c
 8003b70:	001a      	movs	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	f008 fb08 	bl	800c188 <memset>
  if(huart->Instance==USART1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a84      	ldr	r2, [pc, #528]	; (8003d90 <HAL_UART_MspInit+0x240>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d140      	bne.n	8003c04 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b88:	193b      	adds	r3, r7, r4
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	0018      	movs	r0, r3
 8003b92:	f001 fccd 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b9a:	f7ff fef5 	bl	8003988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b9e:	4b7d      	ldr	r3, [pc, #500]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	01c9      	lsls	r1, r1, #7
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bac:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbe:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4013      	ands	r3, r2
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003bd2:	2174      	movs	r1, #116	; 0x74
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	22c0      	movs	r2, #192	; 0xc0
 8003bd8:	00d2      	lsls	r2, r2, #3
 8003bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2202      	movs	r2, #2
 8003be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	187a      	adds	r2, r7, r1
 8003bf6:	23a0      	movs	r3, #160	; 0xa0
 8003bf8:	05db      	lsls	r3, r3, #23
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 fc2f 	bl	8004460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003c02:	e0c0      	b.n	8003d86 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_UART_MspInit+0x248>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d140      	bne.n	8003c90 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c0e:	2128      	movs	r1, #40	; 0x28
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2202      	movs	r2, #2
 8003c14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f001 fc86 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003c28:	f7ff feae 	bl	8003988 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c30:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0289      	lsls	r1, r1, #10
 8003c36:	430a      	orrs	r2, r1
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	4013      	ands	r3, r2
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c48:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c4e:	2101      	movs	r1, #1
 8003c50:	430a      	orrs	r2, r1
 8003c52:	635a      	str	r2, [r3, #52]	; 0x34
 8003c54:	4b4f      	ldr	r3, [pc, #316]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003c60:	2174      	movs	r1, #116	; 0x74
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	220c      	movs	r2, #12
 8003c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c80:	187a      	adds	r2, r7, r1
 8003c82:	23a0      	movs	r3, #160	; 0xa0
 8003c84:	05db      	lsls	r3, r3, #23
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f000 fbe9 	bl	8004460 <HAL_GPIO_Init>
}
 8003c8e:	e07a      	b.n	8003d86 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a41      	ldr	r2, [pc, #260]	; (8003d9c <HAL_UART_MspInit+0x24c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d140      	bne.n	8003d1c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c9a:	2128      	movs	r1, #40	; 0x28
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	0018      	movs	r0, r3
 8003cac:	f001 fc40 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003cb4:	f7ff fe68 	bl	8003988 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	02c9      	lsls	r1, r1, #11
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	02db      	lsls	r3, r3, #11
 8003cce:	4013      	ands	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003cda:	2102      	movs	r1, #2
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003cec:	2174      	movs	r1, #116	; 0x74
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	22c0      	movs	r2, #192	; 0xc0
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2200      	movs	r2, #0
 8003d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <HAL_UART_MspInit+0x250>)
 8003d12:	0019      	movs	r1, r3
 8003d14:	0010      	movs	r0, r2
 8003d16:	f000 fba3 	bl	8004460 <HAL_GPIO_Init>
}
 8003d1a:	e034      	b.n	8003d86 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <HAL_UART_MspInit+0x254>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d12f      	bne.n	8003d86 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0049      	lsls	r1, r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d48:	2102      	movs	r1, #2
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_UART_MspInit+0x244>)
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003d5a:	2174      	movs	r1, #116	; 0x74
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2218      	movs	r2, #24
 8003d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	2202      	movs	r2, #2
 8003d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2200      	movs	r2, #0
 8003d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	2203      	movs	r2, #3
 8003d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_UART_MspInit+0x250>)
 8003d7e:	0019      	movs	r1, r3
 8003d80:	0010      	movs	r0, r2
 8003d82:	f000 fb6d 	bl	8004460 <HAL_GPIO_Init>
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b023      	add	sp, #140	; 0x8c
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	40013800 	.word	0x40013800
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40004400 	.word	0x40004400
 8003d9c:	40004800 	.word	0x40004800
 8003da0:	50000400 	.word	0x50000400
 8003da4:	40005000 	.word	0x40005000

08003da8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <HAL_UART_MspDeInit+0xa4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10e      	bne.n	8003dd8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003dc0:	4924      	ldr	r1, [pc, #144]	; (8003e54 <HAL_UART_MspDeInit+0xac>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003dc6:	23c0      	movs	r3, #192	; 0xc0
 8003dc8:	00da      	lsls	r2, r3, #3
 8003dca:	23a0      	movs	r3, #160	; 0xa0
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 fcb1 	bl	8004738 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003dd6:	e034      	b.n	8003e42 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_UART_MspDeInit+0xb0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003de8:	491c      	ldr	r1, [pc, #112]	; (8003e5c <HAL_UART_MspDeInit+0xb4>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003dee:	23a0      	movs	r3, #160	; 0xa0
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	210c      	movs	r1, #12
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 fc9f 	bl	8004738 <HAL_GPIO_DeInit>
}
 8003dfa:	e022      	b.n	8003e42 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_UART_MspDeInit+0xb8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <HAL_UART_MspDeInit+0xbc>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003e12:	23c0      	movs	r3, #192	; 0xc0
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <HAL_UART_MspDeInit+0xc0>)
 8003e18:	0019      	movs	r1, r3
 8003e1a:	0010      	movs	r0, r2
 8003e1c:	f000 fc8c 	bl	8004738 <HAL_GPIO_DeInit>
}
 8003e20:	e00f      	b.n	8003e42 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <HAL_UART_MspDeInit+0xc4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10a      	bne.n	8003e42 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_UART_MspDeInit+0xa8>)
 8003e32:	490f      	ldr	r1, [pc, #60]	; (8003e70 <HAL_UART_MspDeInit+0xc8>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_UART_MspDeInit+0xc0>)
 8003e3a:	2118      	movs	r1, #24
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 fc7b 	bl	8004738 <HAL_GPIO_DeInit>
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	40021000 	.word	0x40021000
 8003e54:	ffffbfff 	.word	0xffffbfff
 8003e58:	40004400 	.word	0x40004400
 8003e5c:	fffdffff 	.word	0xfffdffff
 8003e60:	40004800 	.word	0x40004800
 8003e64:	fffbffff 	.word	0xfffbffff
 8003e68:	50000400 	.word	0x50000400
 8003e6c:	40005000 	.word	0x40005000
 8003e70:	fffffeff 	.word	0xfffffeff

08003e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e78:	e7fe      	b.n	8003e78 <NMI_Handler+0x4>

08003e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <HardFault_Handler+0x4>

08003e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e98:	f000 f97c 	bl	8004194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <RTC_TAMP_IRQHandler+0x14>)
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f002 f942 	bl	8006134 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	200006f4 	.word	0x200006f4

08003ebc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003ec0:	2004      	movs	r0, #4
 8003ec2:	f000 fd4b 	bl	800495c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f002 fc6e 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000784 	.word	0x20000784

08003ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  return 1;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_kill>:

int _kill(int pid, int sig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003efa:	f008 fa39 	bl	800c370 <__errno>
 8003efe:	0003      	movs	r3, r0
 8003f00:	2216      	movs	r2, #22
 8003f02:	601a      	str	r2, [r3, #0]
  return -1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	425b      	negs	r3, r3
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_exit>:

void _exit (int status)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f18:	2301      	movs	r3, #1
 8003f1a:	425a      	negs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff ffe5 	bl	8003ef0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f26:	e7fe      	b.n	8003f26 <_exit+0x16>

08003f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e00a      	b.n	8003f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f3a:	e000      	b.n	8003f3e <_read+0x16>
 8003f3c:	bf00      	nop
 8003f3e:	0001      	movs	r1, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	60ba      	str	r2, [r7, #8]
 8003f46:	b2ca      	uxtb	r2, r1
 8003f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dbf0      	blt.n	8003f3a <_read+0x12>
  }

  return len;
 8003f58:	687b      	ldr	r3, [r7, #4]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b006      	add	sp, #24
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e009      	b.n	8003f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	60ba      	str	r2, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	e000      	b.n	8003f82 <_write+0x20>
 8003f80:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3301      	adds	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	dbf1      	blt.n	8003f74 <_write+0x12>
  }
  return len;
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b006      	add	sp, #24
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_close>:

int _close(int file)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	425b      	negs	r3, r3
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	0192      	lsls	r2, r2, #6
 8003fbe:	605a      	str	r2, [r3, #4]
  return 0;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <_isatty>:

int _isatty(int file)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fd2:	2301      	movs	r3, #1
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <_sbrk+0x5c>)
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <_sbrk+0x60>)
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_sbrk+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <_sbrk+0x64>)
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <_sbrk+0x68>)
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <_sbrk+0x64>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d207      	bcs.n	8004034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004024:	f008 f9a4 	bl	800c370 <__errno>
 8004028:	0003      	movs	r3, r0
 800402a:	220c      	movs	r2, #12
 800402c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800402e:	2301      	movs	r3, #1
 8004030:	425b      	negs	r3, r3
 8004032:	e009      	b.n	8004048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <_sbrk+0x64>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <_sbrk+0x64>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	18d2      	adds	r2, r2, r3
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <_sbrk+0x64>)
 8004044:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b006      	add	sp, #24
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20024000 	.word	0x20024000
 8004054:	00000400 	.word	0x00000400
 8004058:	20000b04 	.word	0x20000b04
 800405c:	20000f48 	.word	0x20000f48

08004060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800406c:	480d      	ldr	r0, [pc, #52]	; (80040a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800406e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004070:	f7ff fff6 	bl	8004060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004076:	490d      	ldr	r1, [pc, #52]	; (80040ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <LoopForever+0xe>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800407c:	e002      	b.n	8004084 <LoopCopyDataInit>

0800407e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004082:	3304      	adds	r3, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004088:	d3f9      	bcc.n	800407e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800408c:	4c0a      	ldr	r4, [pc, #40]	; (80040b8 <LoopForever+0x16>)
  movs r3, #0
 800408e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004090:	e001      	b.n	8004096 <LoopFillZerobss>

08004092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004094:	3204      	adds	r2, #4

08004096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004098:	d3fb      	bcc.n	8004092 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800409a:	f008 f96f 	bl	800c37c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800409e:	f7fe fa83 	bl	80025a8 <main>

080040a2 <LoopForever>:

LoopForever:
  b LoopForever
 80040a2:	e7fe      	b.n	80040a2 <LoopForever>
  ldr   r0, =_estack
 80040a4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80040a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ac:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 80040b0:	08014cf0 	.word	0x08014cf0
  ldr r2, =_sbss
 80040b4:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80040b8:	20000f44 	.word	0x20000f44

080040bc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040bc:	e7fe      	b.n	80040bc <ADC1_COMP_IRQHandler>
	...

080040c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_Init+0x3c>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_Init+0x3c>)
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	0049      	lsls	r1, r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040da:	2003      	movs	r0, #3
 80040dc:	f000 f810 	bl	8004100 <HAL_InitTick>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d003      	beq.n	80040ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e001      	b.n	80040f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80040ec:	f7ff fc52 	bl	8003994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	781b      	ldrb	r3, [r3, #0]
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40022000 	.word	0x40022000

08004100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_InitTick+0x88>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02b      	beq.n	8004170 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_InitTick+0x8c>)
 800411a:	681c      	ldr	r4, [r3, #0]
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_InitTick+0x88>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	0019      	movs	r1, r3
 8004122:	23fa      	movs	r3, #250	; 0xfa
 8004124:	0098      	lsls	r0, r3, #2
 8004126:	f7fc f809 	bl	800013c <__udivsi3>
 800412a:	0003      	movs	r3, r0
 800412c:	0019      	movs	r1, r3
 800412e:	0020      	movs	r0, r4
 8004130:	f7fc f804 	bl	800013c <__udivsi3>
 8004134:	0003      	movs	r3, r0
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f985 	bl	8004446 <HAL_SYSTICK_Config>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d112      	bne.n	8004166 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d80a      	bhi.n	800415c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	2301      	movs	r3, #1
 800414a:	425b      	negs	r3, r3
 800414c:	2200      	movs	r2, #0
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f950 	bl	80043f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_InitTick+0x90>)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00d      	b.n	8004178 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800415c:	230f      	movs	r3, #15
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e008      	b.n	8004178 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004166:	230f      	movs	r3, #15
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e003      	b.n	8004178 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004170:	230f      	movs	r3, #15
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004178:	230f      	movs	r3, #15
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	781b      	ldrb	r3, [r3, #0]
}
 800417e:	0018      	movs	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	b005      	add	sp, #20
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20000018 	.word	0x20000018
 800418c:	20000010 	.word	0x20000010
 8004190:	20000014 	.word	0x20000014

08004194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_IncTick+0x1c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	001a      	movs	r2, r3
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_IncTick+0x20>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	18d2      	adds	r2, r2, r3
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_IncTick+0x20>)
 80041a6:	601a      	str	r2, [r3, #0]
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	20000018 	.word	0x20000018
 80041b4:	20000b08 	.word	0x20000b08

080041b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  return uwTick;
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <HAL_GetTick+0x10>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	20000b08 	.word	0x20000b08

080041cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d4:	f7ff fff0 	bl	80041b8 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	d005      	beq.n	80041f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_Delay+0x44>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	001a      	movs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	f7ff ffe0 	bl	80041b8 <HAL_GetTick>
 80041f8:	0002      	movs	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	429a      	cmp	r2, r3
 8004202:	d8f7      	bhi.n	80041f4 <HAL_Delay+0x28>
  {
  }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20000018 	.word	0x20000018

08004214 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_SuspendTick+0x18>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_SuspendTick+0x18>)
 800421e:	2102      	movs	r1, #2
 8004220:	438a      	bics	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_ResumeTick+0x18>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_ResumeTick+0x18>)
 800423a:	2102      	movs	r1, #2
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	e000e010 	.word	0xe000e010

0800424c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a06      	ldr	r2, [pc, #24]	; (8004274 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800425a:	4013      	ands	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40010000 	.word	0x40010000
 8004274:	fffff9ff 	.word	0xfffff9ff

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	0002      	movs	r2, r0
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b7f      	cmp	r3, #127	; 0x7f
 800428a:	d809      	bhi.n	80042a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428c:	1dfb      	adds	r3, r7, #7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	001a      	movs	r2, r3
 8004292:	231f      	movs	r3, #31
 8004294:	401a      	ands	r2, r3
 8004296:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <__NVIC_EnableIRQ+0x30>)
 8004298:	2101      	movs	r1, #1
 800429a:	4091      	lsls	r1, r2
 800429c:	000a      	movs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	e000e100 	.word	0xe000e100

080042ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	0002      	movs	r2, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	1dfb      	adds	r3, r7, #7
 80042b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	1dfb      	adds	r3, r7, #7
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b7f      	cmp	r3, #127	; 0x7f
 80042c0:	d828      	bhi.n	8004314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042c2:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <__NVIC_SetPriority+0xd4>)
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	33c0      	adds	r3, #192	; 0xc0
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	589b      	ldr	r3, [r3, r2]
 80042d2:	1dfa      	adds	r2, r7, #7
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	0011      	movs	r1, r2
 80042d8:	2203      	movs	r2, #3
 80042da:	400a      	ands	r2, r1
 80042dc:	00d2      	lsls	r2, r2, #3
 80042de:	21ff      	movs	r1, #255	; 0xff
 80042e0:	4091      	lsls	r1, r2
 80042e2:	000a      	movs	r2, r1
 80042e4:	43d2      	mvns	r2, r2
 80042e6:	401a      	ands	r2, r3
 80042e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	401a      	ands	r2, r3
 80042f2:	1dfb      	adds	r3, r7, #7
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	0018      	movs	r0, r3
 80042f8:	2303      	movs	r3, #3
 80042fa:	4003      	ands	r3, r0
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004300:	481f      	ldr	r0, [pc, #124]	; (8004380 <__NVIC_SetPriority+0xd4>)
 8004302:	1dfb      	adds	r3, r7, #7
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b25b      	sxtb	r3, r3
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	430a      	orrs	r2, r1
 800430c:	33c0      	adds	r3, #192	; 0xc0
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004312:	e031      	b.n	8004378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <__NVIC_SetPriority+0xd8>)
 8004316:	1dfb      	adds	r3, r7, #7
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	0019      	movs	r1, r3
 800431c:	230f      	movs	r3, #15
 800431e:	400b      	ands	r3, r1
 8004320:	3b08      	subs	r3, #8
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3306      	adds	r3, #6
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	3304      	adds	r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1dfa      	adds	r2, r7, #7
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	0011      	movs	r1, r2
 8004334:	2203      	movs	r2, #3
 8004336:	400a      	ands	r2, r1
 8004338:	00d2      	lsls	r2, r2, #3
 800433a:	21ff      	movs	r1, #255	; 0xff
 800433c:	4091      	lsls	r1, r2
 800433e:	000a      	movs	r2, r1
 8004340:	43d2      	mvns	r2, r2
 8004342:	401a      	ands	r2, r3
 8004344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	401a      	ands	r2, r3
 800434e:	1dfb      	adds	r3, r7, #7
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	0018      	movs	r0, r3
 8004354:	2303      	movs	r3, #3
 8004356:	4003      	ands	r3, r0
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800435c:	4809      	ldr	r0, [pc, #36]	; (8004384 <__NVIC_SetPriority+0xd8>)
 800435e:	1dfb      	adds	r3, r7, #7
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	001c      	movs	r4, r3
 8004364:	230f      	movs	r3, #15
 8004366:	4023      	ands	r3, r4
 8004368:	3b08      	subs	r3, #8
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	430a      	orrs	r2, r1
 800436e:	3306      	adds	r3, #6
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	18c3      	adds	r3, r0, r3
 8004374:	3304      	adds	r3, #4
 8004376:	601a      	str	r2, [r3, #0]
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b003      	add	sp, #12
 800437e:	bd90      	pop	{r4, r7, pc}
 8004380:	e000e100 	.word	0xe000e100
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800438c:	f3bf 8f4f 	dsb	sy
}
 8004390:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <__NVIC_SystemReset+0x1c>)
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <__NVIC_SystemReset+0x20>)
 8004396:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004398:	f3bf 8f4f 	dsb	sy
}
 800439c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	e7fd      	b.n	800439e <__NVIC_SystemReset+0x16>
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	05fa0004 	.word	0x05fa0004

080043ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	045b      	lsls	r3, r3, #17
 80043bc:	429a      	cmp	r2, r3
 80043be:	d301      	bcc.n	80043c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c0:	2301      	movs	r3, #1
 80043c2:	e010      	b.n	80043e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <SysTick_Config+0x44>)
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	3a01      	subs	r2, #1
 80043ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043cc:	2301      	movs	r3, #1
 80043ce:	425b      	negs	r3, r3
 80043d0:	2103      	movs	r1, #3
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7ff ff6a 	bl	80042ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <SysTick_Config+0x44>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <SysTick_Config+0x44>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	e000e010 	.word	0xe000e010

080043f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	210f      	movs	r1, #15
 8004400:	187b      	adds	r3, r7, r1
 8004402:	1c02      	adds	r2, r0, #0
 8004404:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	187b      	adds	r3, r7, r1
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b25b      	sxtb	r3, r3
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff ff4b 	bl	80042ac <__NVIC_SetPriority>
}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	0002      	movs	r2, r0
 8004426:	1dfb      	adds	r3, r7, #7
 8004428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442a:	1dfb      	adds	r3, r7, #7
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b25b      	sxtb	r3, r3
 8004430:	0018      	movs	r0, r3
 8004432:	f7ff ff21 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004442:	f7ff ffa1 	bl	8004388 <__NVIC_SystemReset>

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff ffab 	bl	80043ac <SysTick_Config>
 8004456:	0003      	movs	r3, r0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446e:	e14d      	b.n	800470c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4091      	lsls	r1, r2
 800447a:	000a      	movs	r2, r1
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d100      	bne.n	8004488 <HAL_GPIO_Init+0x28>
 8004486:	e13e      	b.n	8004706 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	4013      	ands	r3, r2
 8004490:	2b01      	cmp	r3, #1
 8004492:	d005      	beq.n	80044a0 <HAL_GPIO_Init+0x40>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d130      	bne.n	8004502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	409a      	lsls	r2, r3
 80044ae:	0013      	movs	r3, r2
 80044b0:	43da      	mvns	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	409a      	lsls	r2, r3
 80044c2:	0013      	movs	r3, r2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044d6:	2201      	movs	r2, #1
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	43da      	mvns	r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	2201      	movs	r2, #1
 80044ee:	401a      	ands	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	409a      	lsls	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2203      	movs	r2, #3
 8004508:	4013      	ands	r3, r2
 800450a:	2b03      	cmp	r3, #3
 800450c:	d017      	beq.n	800453e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	409a      	lsls	r2, r3
 800451c:	0013      	movs	r3, r2
 800451e:	43da      	mvns	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	0013      	movs	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2203      	movs	r2, #3
 8004544:	4013      	ands	r3, r2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d123      	bne.n	8004592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	58d3      	ldr	r3, [r2, r3]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2207      	movs	r2, #7
 800455c:	4013      	ands	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	409a      	lsls	r2, r3
 8004564:	0013      	movs	r3, r2
 8004566:	43da      	mvns	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2107      	movs	r1, #7
 8004576:	400b      	ands	r3, r1
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	409a      	lsls	r2, r3
 800457c:	0013      	movs	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	6939      	ldr	r1, [r7, #16]
 8004590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	409a      	lsls	r2, r3
 80045a0:	0013      	movs	r3, r2
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2203      	movs	r2, #3
 80045b0:	401a      	ands	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	23c0      	movs	r3, #192	; 0xc0
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	4013      	ands	r3, r2
 80045d0:	d100      	bne.n	80045d4 <HAL_GPIO_Init+0x174>
 80045d2:	e098      	b.n	8004706 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045d4:	4a53      	ldr	r2, [pc, #332]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	3318      	adds	r3, #24
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	589b      	ldr	r3, [r3, r2]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2203      	movs	r2, #3
 80045e6:	4013      	ands	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	220f      	movs	r2, #15
 80045ec:	409a      	lsls	r2, r3
 80045ee:	0013      	movs	r3, r2
 80045f0:	43da      	mvns	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	23a0      	movs	r3, #160	; 0xa0
 80045fc:	05db      	lsls	r3, r3, #23
 80045fe:	429a      	cmp	r2, r3
 8004600:	d019      	beq.n	8004636 <HAL_GPIO_Init+0x1d6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a48      	ldr	r2, [pc, #288]	; (8004728 <HAL_GPIO_Init+0x2c8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_GPIO_Init+0x1d2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a47      	ldr	r2, [pc, #284]	; (800472c <HAL_GPIO_Init+0x2cc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00d      	beq.n	800462e <HAL_GPIO_Init+0x1ce>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a46      	ldr	r2, [pc, #280]	; (8004730 <HAL_GPIO_Init+0x2d0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <HAL_GPIO_Init+0x1ca>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a45      	ldr	r2, [pc, #276]	; (8004734 <HAL_GPIO_Init+0x2d4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_GPIO_Init+0x1c6>
 8004622:	2304      	movs	r3, #4
 8004624:	e008      	b.n	8004638 <HAL_GPIO_Init+0x1d8>
 8004626:	2305      	movs	r3, #5
 8004628:	e006      	b.n	8004638 <HAL_GPIO_Init+0x1d8>
 800462a:	2303      	movs	r3, #3
 800462c:	e004      	b.n	8004638 <HAL_GPIO_Init+0x1d8>
 800462e:	2302      	movs	r3, #2
 8004630:	e002      	b.n	8004638 <HAL_GPIO_Init+0x1d8>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_GPIO_Init+0x1d8>
 8004636:	2300      	movs	r3, #0
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	2103      	movs	r1, #3
 800463c:	400a      	ands	r2, r1
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	4093      	lsls	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004648:	4936      	ldr	r1, [pc, #216]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3318      	adds	r3, #24
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43da      	mvns	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	035b      	lsls	r3, r3, #13
 800466e:	4013      	ands	r3, r2
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	43da      	mvns	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	039b      	lsls	r3, r3, #14
 8004698:	4013      	ands	r3, r2
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 80046ac:	2384      	movs	r3, #132	; 0x84
 80046ae:	58d3      	ldr	r3, [r2, r3]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43da      	mvns	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	029b      	lsls	r3, r3, #10
 80046c4:	4013      	ands	r3, r2
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d0:	4914      	ldr	r1, [pc, #80]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 80046d2:	2284      	movs	r2, #132	; 0x84
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80046d8:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	58d3      	ldr	r3, [r2, r3]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	025b      	lsls	r3, r3, #9
 80046f2:	4013      	ands	r3, r2
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046fe:	4909      	ldr	r1, [pc, #36]	; (8004724 <HAL_GPIO_Init+0x2c4>)
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	40da      	lsrs	r2, r3
 8004714:	1e13      	subs	r3, r2, #0
 8004716:	d000      	beq.n	800471a <HAL_GPIO_Init+0x2ba>
 8004718:	e6aa      	b.n	8004470 <HAL_GPIO_Init+0x10>
  }
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b006      	add	sp, #24
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021800 	.word	0x40021800
 8004728:	50000400 	.word	0x50000400
 800472c:	50000800 	.word	0x50000800
 8004730:	50000c00 	.word	0x50000c00
 8004734:	50001000 	.word	0x50001000

08004738 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004746:	e0ba      	b.n	80048be <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004748:	2201      	movs	r2, #1
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	409a      	lsls	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d100      	bne.n	800475c <HAL_GPIO_DeInit+0x24>
 800475a:	e0ad      	b.n	80048b8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3318      	adds	r3, #24
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	589b      	ldr	r3, [r3, r2]
 8004768:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2203      	movs	r2, #3
 800476e:	4013      	ands	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	220f      	movs	r2, #15
 8004774:	409a      	lsls	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	23a0      	movs	r3, #160	; 0xa0
 8004780:	05db      	lsls	r3, r3, #23
 8004782:	429a      	cmp	r2, r3
 8004784:	d019      	beq.n	80047ba <HAL_GPIO_DeInit+0x82>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a53      	ldr	r2, [pc, #332]	; (80048d8 <HAL_GPIO_DeInit+0x1a0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_GPIO_DeInit+0x7e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_GPIO_DeInit+0x1a4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00d      	beq.n	80047b2 <HAL_GPIO_DeInit+0x7a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a51      	ldr	r2, [pc, #324]	; (80048e0 <HAL_GPIO_DeInit+0x1a8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <HAL_GPIO_DeInit+0x76>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a50      	ldr	r2, [pc, #320]	; (80048e4 <HAL_GPIO_DeInit+0x1ac>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_GPIO_DeInit+0x72>
 80047a6:	2304      	movs	r3, #4
 80047a8:	e008      	b.n	80047bc <HAL_GPIO_DeInit+0x84>
 80047aa:	2305      	movs	r3, #5
 80047ac:	e006      	b.n	80047bc <HAL_GPIO_DeInit+0x84>
 80047ae:	2303      	movs	r3, #3
 80047b0:	e004      	b.n	80047bc <HAL_GPIO_DeInit+0x84>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e002      	b.n	80047bc <HAL_GPIO_DeInit+0x84>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_GPIO_DeInit+0x84>
 80047ba:	2300      	movs	r3, #0
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	2103      	movs	r1, #3
 80047c0:	400a      	ands	r2, r1
 80047c2:	00d2      	lsls	r2, r2, #3
 80047c4:	4093      	lsls	r3, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d136      	bne.n	800483a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80047cc:	4a41      	ldr	r2, [pc, #260]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	58d3      	ldr	r3, [r2, r3]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	43d2      	mvns	r2, r2
 80047d6:	493f      	ldr	r1, [pc, #252]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047d8:	4013      	ands	r3, r2
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80047de:	4a3d      	ldr	r2, [pc, #244]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047e0:	2384      	movs	r3, #132	; 0x84
 80047e2:	58d3      	ldr	r3, [r2, r3]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	43d2      	mvns	r2, r2
 80047e8:	493a      	ldr	r1, [pc, #232]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	2284      	movs	r2, #132	; 0x84
 80047ee:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80047f0:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	43d9      	mvns	r1, r3
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	43d9      	mvns	r1, r3
 8004806:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2203      	movs	r2, #3
 8004810:	4013      	ands	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	220f      	movs	r2, #15
 8004816:	409a      	lsls	r2, r3
 8004818:	0013      	movs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3318      	adds	r3, #24
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	589a      	ldr	r2, [r3, r2]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	43d9      	mvns	r1, r3
 800482c:	4829      	ldr	r0, [pc, #164]	; (80048d4 <HAL_GPIO_DeInit+0x19c>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	400a      	ands	r2, r1
 8004834:	3318      	adds	r3, #24
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2103      	movs	r1, #3
 8004844:	4099      	lsls	r1, r3
 8004846:	000b      	movs	r3, r1
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	0092      	lsls	r2, r2, #2
 8004858:	58d3      	ldr	r3, [r2, r3]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	2107      	movs	r1, #7
 800485e:	400a      	ands	r2, r1
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	210f      	movs	r1, #15
 8004864:	4091      	lsls	r1, r2
 8004866:	000a      	movs	r2, r1
 8004868:	43d1      	mvns	r1, r2
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	08d2      	lsrs	r2, r2, #3
 800486e:	4019      	ands	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3208      	adds	r2, #8
 8004874:	0092      	lsls	r2, r2, #2
 8004876:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	0052      	lsls	r2, r2, #1
 8004880:	2103      	movs	r1, #3
 8004882:	4091      	lsls	r1, r2
 8004884:	000a      	movs	r2, r1
 8004886:	43d2      	mvns	r2, r2
 8004888:	401a      	ands	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2101      	movs	r1, #1
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4091      	lsls	r1, r2
 8004898:	000a      	movs	r2, r1
 800489a:	43d2      	mvns	r2, r2
 800489c:	401a      	ands	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	0052      	lsls	r2, r2, #1
 80048aa:	2103      	movs	r1, #3
 80048ac:	4091      	lsls	r1, r2
 80048ae:	000a      	movs	r2, r1
 80048b0:	43d2      	mvns	r2, r2
 80048b2:	401a      	ands	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	40da      	lsrs	r2, r3
 80048c4:	1e13      	subs	r3, r2, #0
 80048c6:	d000      	beq.n	80048ca <HAL_GPIO_DeInit+0x192>
 80048c8:	e73e      	b.n	8004748 <HAL_GPIO_DeInit+0x10>
  }
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b006      	add	sp, #24
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021800 	.word	0x40021800
 80048d8:	50000400 	.word	0x50000400
 80048dc:	50000800 	.word	0x50000800
 80048e0:	50000c00 	.word	0x50000c00
 80048e4:	50001000 	.word	0x50001000

080048e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	000a      	movs	r2, r1
 80048f2:	1cbb      	adds	r3, r7, #2
 80048f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	1cba      	adds	r2, r7, #2
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	4013      	ands	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004902:	230f      	movs	r3, #15
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e003      	b.n	8004914 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800490c:	230f      	movs	r3, #15
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004914:	230f      	movs	r3, #15
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	781b      	ldrb	r3, [r3, #0]
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	0008      	movs	r0, r1
 800492c:	0011      	movs	r1, r2
 800492e:	1cbb      	adds	r3, r7, #2
 8004930:	1c02      	adds	r2, r0, #0
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	1c7b      	adds	r3, r7, #1
 8004936:	1c0a      	adds	r2, r1, #0
 8004938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800493a:	1c7b      	adds	r3, r7, #1
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004942:	1cbb      	adds	r3, r7, #2
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800494a:	e003      	b.n	8004954 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800494c:	1cbb      	adds	r3, r7, #2
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b002      	add	sp, #8
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	0002      	movs	r2, r0
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	1dba      	adds	r2, r7, #6
 800496e:	8812      	ldrh	r2, [r2, #0]
 8004970:	4013      	ands	r3, r2
 8004972:	d008      	beq.n	8004986 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004976:	1dba      	adds	r2, r7, #6
 8004978:	8812      	ldrh	r2, [r2, #0]
 800497a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800497c:	1dbb      	adds	r3, r7, #6
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	0018      	movs	r0, r3
 8004982:	f7fe fff7 	bl	8003974 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	1dba      	adds	r2, r7, #6
 800498c:	8812      	ldrh	r2, [r2, #0]
 800498e:	4013      	ands	r3, r2
 8004990:	d008      	beq.n	80049a4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004994:	1dba      	adds	r2, r7, #6
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800499a:	1dbb      	adds	r3, r7, #6
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 f806 	bl	80049b0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021800 	.word	0x40021800

080049b0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	0002      	movs	r2, r0
 80049b8:	1dbb      	adds	r3, r7, #6
 80049ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	0049      	lsls	r1, r1, #1
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40007000 	.word	0x40007000

080049e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	000a      	movs	r2, r1
 80049ea:	1cfb      	adds	r3, r7, #3
 80049ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_PWR_EnterSTOPMode+0x68>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2207      	movs	r2, #7
 80049fa:	4393      	bics	r3, r2
 80049fc:	001a      	movs	r2, r3
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_PWR_EnterSTOPMode+0x68>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e005      	b.n	8004a14 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <HAL_PWR_EnterSTOPMode+0x68>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_PWR_EnterSTOPMode+0x68>)
 8004a0e:	2107      	movs	r1, #7
 8004a10:	438a      	bics	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004a20:	1cfb      	adds	r3, r7, #3
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a28:	bf30      	wfi
 8004a2a:	e002      	b.n	8004a32 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a2c:	bf40      	sev
    __WFE();
 8004a2e:	bf20      	wfe
    __WFE();
 8004a30:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a38:	2104      	movs	r1, #4
 8004a3a:	438a      	bics	r2, r1
 8004a3c:	611a      	str	r2, [r3, #16]
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2207      	movs	r2, #7
 8004a5a:	4393      	bics	r3, r2
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004a60:	2103      	movs	r1, #3
 8004a62:	430a      	orrs	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004a72:	bf30      	wfi
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	0019      	movs	r1, r3
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d11f      	bne.n	8004ae8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004aa8:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	0013      	movs	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4912      	ldr	r1, [pc, #72]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fb fb40 	bl	800013c <__udivsi3>
 8004abc:	0003      	movs	r3, r0
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ac2:	e008      	b.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e001      	b.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e009      	b.n	8004aea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d0ed      	beq.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b004      	add	sp, #16
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	40007000 	.word	0x40007000
 8004af8:	fffff9ff 	.word	0xfffff9ff
 8004afc:	20000010 	.word	0x20000010
 8004b00:	000f4240 	.word	0x000f4240

08004b04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	23e0      	movs	r3, #224	; 0xe0
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	4013      	ands	r3, r2
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f000 fb50 	bl	80051d0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	d100      	bne.n	8004b3c <HAL_RCC_OscConfig+0x20>
 8004b3a:	e07c      	b.n	8004c36 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3c:	4bc3      	ldr	r3, [pc, #780]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2238      	movs	r2, #56	; 0x38
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b46:	4bc1      	ldr	r3, [pc, #772]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_OscConfig+0x40>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d002      	beq.n	8004b62 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d10b      	bne.n	8004b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b62:	4bba      	ldr	r3, [pc, #744]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d062      	beq.n	8004c34 <HAL_RCC_OscConfig+0x118>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d15e      	bne.n	8004c34 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e32a      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	025b      	lsls	r3, r3, #9
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_OscConfig+0x7a>
 8004b86:	4bb1      	ldr	r3, [pc, #708]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4bb0      	ldr	r3, [pc, #704]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	0249      	lsls	r1, r1, #9
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e020      	b.n	8004bd8 <HAL_RCC_OscConfig+0xbc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	23a0      	movs	r3, #160	; 0xa0
 8004b9c:	02db      	lsls	r3, r3, #11
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xa4>
 8004ba2:	4baa      	ldr	r3, [pc, #680]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4ba9      	ldr	r3, [pc, #676]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	02c9      	lsls	r1, r1, #11
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	4ba6      	ldr	r3, [pc, #664]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4ba5      	ldr	r3, [pc, #660]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	0249      	lsls	r1, r1, #9
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xbc>
 8004bc0:	4ba2      	ldr	r3, [pc, #648]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4ba1      	ldr	r3, [pc, #644]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bc6:	49a2      	ldr	r1, [pc, #648]	; (8004e50 <HAL_RCC_OscConfig+0x334>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	4b9f      	ldr	r3, [pc, #636]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b9e      	ldr	r3, [pc, #632]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bd2:	49a0      	ldr	r1, [pc, #640]	; (8004e54 <HAL_RCC_OscConfig+0x338>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d014      	beq.n	8004c0a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7ff faea 	bl	80041b8 <HAL_GetTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bea:	f7ff fae5 	bl	80041b8 <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b64      	cmp	r3, #100	; 0x64
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e2e9      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfc:	4b93      	ldr	r3, [pc, #588]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	4013      	ands	r3, r2
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0xce>
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7ff fad5 	bl	80041b8 <HAL_GetTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7ff fad0 	bl	80041b8 <HAL_GetTick>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e2d4      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c26:	4b89      	ldr	r3, [pc, #548]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	029b      	lsls	r3, r3, #10
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0xf8>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <HAL_RCC_OscConfig+0x126>
 8004c40:	e099      	b.n	8004d76 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	4b82      	ldr	r3, [pc, #520]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2238      	movs	r2, #56	; 0x38
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c4c:	4b7f      	ldr	r3, [pc, #508]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2203      	movs	r2, #3
 8004c52:	4013      	ands	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCC_OscConfig+0x146>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d002      	beq.n	8004c68 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d135      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	4b78      	ldr	r3, [pc, #480]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4013      	ands	r3, r2
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x164>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e2a7      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b72      	ldr	r3, [pc, #456]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a74      	ldr	r2, [pc, #464]	; (8004e58 <HAL_RCC_OscConfig+0x33c>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	4b6e      	ldr	r3, [pc, #440]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c9c:	4b6b      	ldr	r3, [pc, #428]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6e      	ldr	r2, [pc, #440]	; (8004e5c <HAL_RCC_OscConfig+0x340>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	4b68      	ldr	r3, [pc, #416]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004cb0:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	0adb      	lsrs	r3, r3, #11
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	4013      	ands	r3, r2
 8004cba:	4a69      	ldr	r2, [pc, #420]	; (8004e60 <HAL_RCC_OscConfig+0x344>)
 8004cbc:	40da      	lsrs	r2, r3
 8004cbe:	4b69      	ldr	r3, [pc, #420]	; (8004e64 <HAL_RCC_OscConfig+0x348>)
 8004cc0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cc2:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCC_OscConfig+0x34c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7ff fa1a 	bl	8004100 <HAL_InitTick>
 8004ccc:	1e03      	subs	r3, r0, #0
 8004cce:	d051      	beq.n	8004d74 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e27d      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d030      	beq.n	8004d3e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <HAL_RCC_OscConfig+0x340>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004cf0:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	0049      	lsls	r1, r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7ff fa5b 	bl	80041b8 <HAL_GetTick>
 8004d02:	0003      	movs	r3, r0
 8004d04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7ff fa56 	bl	80041b8 <HAL_GetTick>
 8004d0c:	0002      	movs	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e25a      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d1a:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4013      	ands	r3, r2
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d26:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a4b      	ldr	r2, [pc, #300]	; (8004e58 <HAL_RCC_OscConfig+0x33c>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	0019      	movs	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	021a      	lsls	r2, r3, #8
 8004d36:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e01b      	b.n	8004d76 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d44:	4949      	ldr	r1, [pc, #292]	; (8004e6c <HAL_RCC_OscConfig+0x350>)
 8004d46:	400a      	ands	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7ff fa35 	bl	80041b8 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d54:	f7ff fa30 	bl	80041b8 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e234      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x238>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d047      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2238      	movs	r2, #56	; 0x38
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b18      	cmp	r3, #24
 8004d8a:	d10a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d8c:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d90:	2202      	movs	r2, #2
 8004d92:	4013      	ands	r3, r2
 8004d94:	d03c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2f4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d138      	bne.n	8004e10 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e216      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d019      	beq.n	8004dde <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dae:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004db0:	2101      	movs	r1, #1
 8004db2:	430a      	orrs	r2, r1
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7ff f9ff 	bl	80041b8 <HAL_GetTick>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7ff f9fa 	bl	80041b8 <HAL_GetTick>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1fe      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d0f1      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2a4>
 8004ddc:	e018      	b.n	8004e10 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004de4:	2101      	movs	r1, #1
 8004de6:	438a      	bics	r2, r1
 8004de8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7ff f9e5 	bl	80041b8 <HAL_GetTick>
 8004dee:	0003      	movs	r3, r0
 8004df0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df4:	f7ff f9e0 	bl	80041b8 <HAL_GetTick>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1e4      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d1f1      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	4013      	ands	r3, r2
 8004e18:	d100      	bne.n	8004e1c <HAL_RCC_OscConfig+0x300>
 8004e1a:	e0c7      	b.n	8004fac <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1c:	231f      	movs	r3, #31
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2238      	movs	r2, #56	; 0x38
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d11f      	bne.n	8004e70 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_OscConfig+0x330>)
 8004e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e34:	2202      	movs	r2, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	d100      	bne.n	8004e3c <HAL_RCC_OscConfig+0x320>
 8004e3a:	e0b7      	b.n	8004fac <HAL_RCC_OscConfig+0x490>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d000      	beq.n	8004e46 <HAL_RCC_OscConfig+0x32a>
 8004e44:	e0b2      	b.n	8004fac <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e1c2      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	fffeffff 	.word	0xfffeffff
 8004e54:	fffbffff 	.word	0xfffbffff
 8004e58:	ffff80ff 	.word	0xffff80ff
 8004e5c:	ffffc7ff 	.word	0xffffc7ff
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	20000010 	.word	0x20000010
 8004e68:	20000014 	.word	0x20000014
 8004e6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e70:	4bb5      	ldr	r3, [pc, #724]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	055b      	lsls	r3, r3, #21
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_OscConfig+0x364>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x366>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	4bb0      	ldr	r3, [pc, #704]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8a:	4baf      	ldr	r3, [pc, #700]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004e8c:	2180      	movs	r1, #128	; 0x80
 8004e8e:	0549      	lsls	r1, r1, #21
 8004e90:	430a      	orrs	r2, r1
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e94:	4bac      	ldr	r3, [pc, #688]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	055b      	lsls	r3, r3, #21
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004ea2:	231f      	movs	r3, #31
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eaa:	4ba8      	ldr	r3, [pc, #672]	; (800514c <HAL_RCC_OscConfig+0x630>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d11a      	bne.n	8004eec <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb6:	4ba5      	ldr	r3, [pc, #660]	; (800514c <HAL_RCC_OscConfig+0x630>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4ba4      	ldr	r3, [pc, #656]	; (800514c <HAL_RCC_OscConfig+0x630>)
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	0049      	lsls	r1, r1, #1
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ec4:	f7ff f978 	bl	80041b8 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ece:	f7ff f973 	bl	80041b8 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e177      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee0:	4b9a      	ldr	r3, [pc, #616]	; (800514c <HAL_RCC_OscConfig+0x630>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3e6>
 8004ef4:	4b94      	ldr	r3, [pc, #592]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004ef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ef8:	4b93      	ldr	r3, [pc, #588]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004efa:	2101      	movs	r1, #1
 8004efc:	430a      	orrs	r2, r1
 8004efe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x420>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x408>
 8004f0a:	4b8f      	ldr	r3, [pc, #572]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f0e:	4b8e      	ldr	r3, [pc, #568]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f10:	2104      	movs	r1, #4
 8004f12:	430a      	orrs	r2, r1
 8004f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f16:	4b8c      	ldr	r3, [pc, #560]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f1a:	4b8b      	ldr	r3, [pc, #556]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0x420>
 8004f24:	4b88      	ldr	r3, [pc, #544]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f28:	4b87      	ldr	r3, [pc, #540]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f30:	4b85      	ldr	r3, [pc, #532]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f34:	4b84      	ldr	r3, [pc, #528]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f36:	2104      	movs	r1, #4
 8004f38:	438a      	bics	r2, r1
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d014      	beq.n	8004f6e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7ff f938 	bl	80041b8 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	e009      	b.n	8004f62 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7ff f933 	bl	80041b8 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	4a7d      	ldr	r2, [pc, #500]	; (8005150 <HAL_RCC_OscConfig+0x634>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e136      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f62:	4b79      	ldr	r3, [pc, #484]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	2202      	movs	r2, #2
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x432>
 8004f6c:	e013      	b.n	8004f96 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7ff f923 	bl	80041b8 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f76:	e009      	b.n	8004f8c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7ff f91e 	bl	80041b8 <HAL_GetTick>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	4a73      	ldr	r2, [pc, #460]	; (8005150 <HAL_RCC_OscConfig+0x634>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e121      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f8c:	4b6e      	ldr	r3, [pc, #440]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	2202      	movs	r2, #2
 8004f92:	4013      	ands	r3, r2
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f96:	231f      	movs	r3, #31
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b69      	ldr	r3, [pc, #420]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa4:	4b68      	ldr	r3, [pc, #416]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004fa6:	496b      	ldr	r1, [pc, #428]	; (8005154 <HAL_RCC_OscConfig+0x638>)
 8004fa8:	400a      	ands	r2, r1
 8004faa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d039      	beq.n	800502a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01b      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fbe:	4b62      	ldr	r3, [pc, #392]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004fc4:	2180      	movs	r1, #128	; 0x80
 8004fc6:	03c9      	lsls	r1, r1, #15
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7ff f8f4 	bl	80041b8 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd6:	f7ff f8ef 	bl	80041b8 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0f3      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004fe8:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x4ba>
 8004ff4:	e019      	b.n	800502a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ff6:	4b54      	ldr	r3, [pc, #336]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8004ffc:	4956      	ldr	r1, [pc, #344]	; (8005158 <HAL_RCC_OscConfig+0x63c>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7ff f8d9 	bl	80041b8 <HAL_GetTick>
 8005006:	0003      	movs	r3, r0
 8005008:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800500c:	f7ff f8d4 	bl	80041b8 <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0d8      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	4013      	ands	r3, r2
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d100      	bne.n	8005034 <HAL_RCC_OscConfig+0x518>
 8005032:	e0cc      	b.n	80051ce <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005034:	4b44      	ldr	r3, [pc, #272]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2238      	movs	r2, #56	; 0x38
 800503a:	4013      	ands	r3, r2
 800503c:	2b10      	cmp	r3, #16
 800503e:	d100      	bne.n	8005042 <HAL_RCC_OscConfig+0x526>
 8005040:	e07b      	b.n	800513a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d156      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005050:	4942      	ldr	r1, [pc, #264]	; (800515c <HAL_RCC_OscConfig+0x640>)
 8005052:	400a      	ands	r2, r1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7ff f8af 	bl	80041b8 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7ff f8aa 	bl	80041b8 <HAL_GetTick>
 8005064:	0002      	movs	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e0ae      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	049b      	lsls	r3, r3, #18
 800507a:	4013      	ands	r3, r2
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800507e:	4b32      	ldr	r3, [pc, #200]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4a37      	ldr	r2, [pc, #220]	; (8005160 <HAL_RCC_OscConfig+0x644>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	431a      	orrs	r2, r3
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050ae:	430a      	orrs	r2, r1
 80050b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b2:	4b25      	ldr	r3, [pc, #148]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	0449      	lsls	r1, r1, #17
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80050c0:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	0549      	lsls	r1, r1, #21
 80050ca:	430a      	orrs	r2, r1
 80050cc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7ff f873 	bl	80041b8 <HAL_GetTick>
 80050d2:	0003      	movs	r3, r0
 80050d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7ff f86e 	bl	80041b8 <HAL_GetTick>
 80050dc:	0002      	movs	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e072      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ea:	4b17      	ldr	r3, [pc, #92]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	049b      	lsls	r3, r3, #18
 80050f2:	4013      	ands	r3, r2
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x5bc>
 80050f6:	e06a      	b.n	80051ce <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 80050fe:	4917      	ldr	r1, [pc, #92]	; (800515c <HAL_RCC_OscConfig+0x640>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7ff f858 	bl	80041b8 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510e:	f7ff f853 	bl	80041b8 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e057      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	4b09      	ldr	r3, [pc, #36]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	049b      	lsls	r3, r3, #18
 8005128:	4013      	ands	r3, r2
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_OscConfig+0x62c>)
 8005132:	490c      	ldr	r1, [pc, #48]	; (8005164 <HAL_RCC_OscConfig+0x648>)
 8005134:	400a      	ands	r2, r1
 8005136:	60da      	str	r2, [r3, #12]
 8005138:	e049      	b.n	80051ce <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d112      	bne.n	8005168 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e044      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
 8005150:	00001388 	.word	0x00001388
 8005154:	efffffff 	.word	0xefffffff
 8005158:	ffbfffff 	.word	0xffbfffff
 800515c:	feffffff 	.word	0xfeffffff
 8005160:	11c1808c 	.word	0x11c1808c
 8005164:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x6bc>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2203      	movs	r2, #3
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	429a      	cmp	r2, r3
 800517a:	d126      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2270      	movs	r2, #112	; 0x70
 8005180:	401a      	ands	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d11f      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	23fe      	movs	r3, #254	; 0xfe
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	401a      	ands	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d116      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	23f8      	movs	r3, #248	; 0xf8
 80051a0:	039b      	lsls	r3, r3, #14
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10e      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	23e0      	movs	r3, #224	; 0xe0
 80051b0:	051b      	lsls	r3, r3, #20
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	0f5b      	lsrs	r3, r3, #29
 80051c0:	075a      	lsls	r2, r3, #29
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b008      	add	sp, #32
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000

080051dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0e9      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b76      	ldr	r3, [pc, #472]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2207      	movs	r2, #7
 80051f6:	4013      	ands	r3, r2
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d91e      	bls.n	800523c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b73      	ldr	r3, [pc, #460]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2207      	movs	r2, #7
 8005204:	4393      	bics	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	4b70      	ldr	r3, [pc, #448]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005210:	f7fe ffd2 	bl	80041b8 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005218:	e009      	b.n	800522e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521a:	f7fe ffcd 	bl	80041b8 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0ca      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2207      	movs	r2, #7
 8005234:	4013      	ands	r3, r2
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d1ee      	bne.n	800521a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2202      	movs	r2, #2
 8005242:	4013      	ands	r3, r2
 8005244:	d015      	beq.n	8005272 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2204      	movs	r2, #4
 800524c:	4013      	ands	r3, r2
 800524e:	d006      	beq.n	800525e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4b5f      	ldr	r3, [pc, #380]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005256:	21e0      	movs	r1, #224	; 0xe0
 8005258:	01c9      	lsls	r1, r1, #7
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4a5d      	ldr	r2, [pc, #372]	; (80053d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005264:	4013      	ands	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	4b59      	ldr	r3, [pc, #356]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d057      	beq.n	800532c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	029b      	lsls	r3, r3, #10
 800528c:	4013      	ands	r3, r2
 800528e:	d12b      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e097      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d107      	bne.n	80052ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	049b      	lsls	r3, r3, #18
 80052a4:	4013      	ands	r3, r2
 80052a6:	d11f      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e08b      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b4:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4013      	ands	r3, r2
 80052be:	d113      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e07f      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d106      	bne.n	80052da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	2202      	movs	r2, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	d108      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e074      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e06d      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2207      	movs	r2, #7
 80052ee:	4393      	bics	r3, r2
 80052f0:	0019      	movs	r1, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fe ff5c 	bl	80041b8 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005304:	e009      	b.n	800531a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005306:	f7fe ff57 	bl	80041b8 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e054      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2238      	movs	r2, #56	; 0x38
 8005320:	401a      	ands	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ec      	bne.n	8005306 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2207      	movs	r2, #7
 8005332:	4013      	ands	r3, r2
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d21e      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2207      	movs	r2, #7
 8005340:	4393      	bics	r3, r2
 8005342:	0019      	movs	r1, r3
 8005344:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800534c:	f7fe ff34 	bl	80041b8 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005354:	e009      	b.n	800536a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005356:	f7fe ff2f 	bl	80041b8 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e02c      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800536a:	4b18      	ldr	r3, [pc, #96]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2207      	movs	r2, #7
 8005370:	4013      	ands	r3, r2
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1ee      	bne.n	8005356 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2204      	movs	r2, #4
 800537e:	4013      	ands	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_RCC_ClockConfig+0x200>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005396:	f000 f829 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 800539a:	0001      	movs	r1, r0
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	220f      	movs	r2, #15
 80053a4:	401a      	ands	r2, r3
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCC_ClockConfig+0x204>)
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	58d3      	ldr	r3, [r2, r3]
 80053ac:	221f      	movs	r2, #31
 80053ae:	4013      	ands	r3, r2
 80053b0:	000a      	movs	r2, r1
 80053b2:	40da      	lsrs	r2, r3
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x208>)
 80053b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_RCC_ClockConfig+0x20c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	0018      	movs	r0, r3
 80053be:	f7fe fe9f 	bl	8004100 <HAL_InitTick>
 80053c2:	0003      	movs	r3, r0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b004      	add	sp, #16
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40022000 	.word	0x40022000
 80053d0:	00001388 	.word	0x00001388
 80053d4:	40021000 	.word	0x40021000
 80053d8:	fffff0ff 	.word	0xfffff0ff
 80053dc:	ffff8fff 	.word	0xffff8fff
 80053e0:	080147b4 	.word	0x080147b4
 80053e4:	20000010 	.word	0x20000010
 80053e8:	20000014 	.word	0x20000014

080053ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2238      	movs	r2, #56	; 0x38
 80053f8:	4013      	ands	r3, r2
 80053fa:	d10f      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80053fc:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	0adb      	lsrs	r3, r3, #11
 8005402:	2207      	movs	r2, #7
 8005404:	4013      	ands	r3, r2
 8005406:	2201      	movs	r2, #1
 8005408:	409a      	lsls	r2, r3
 800540a:	0013      	movs	r3, r2
 800540c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4835      	ldr	r0, [pc, #212]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005412:	f7fa fe93 	bl	800013c <__udivsi3>
 8005416:	0003      	movs	r3, r0
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	e05d      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2238      	movs	r2, #56	; 0x38
 8005422:	4013      	ands	r3, r2
 8005424:	2b08      	cmp	r3, #8
 8005426:	d102      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005428:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCC_GetSysClockFreq+0x100>)
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e054      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800542e:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2238      	movs	r2, #56	; 0x38
 8005434:	4013      	ands	r3, r2
 8005436:	2b10      	cmp	r3, #16
 8005438:	d138      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800543a:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	2207      	movs	r2, #7
 800544c:	4013      	ands	r3, r2
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d10d      	bne.n	8005474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4824      	ldr	r0, [pc, #144]	; (80054ec <HAL_RCC_GetSysClockFreq+0x100>)
 800545c:	f7fa fe6e 	bl	800013c <__udivsi3>
 8005460:	0003      	movs	r3, r0
 8005462:	0019      	movs	r1, r3
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	227f      	movs	r2, #127	; 0x7f
 800546c:	4013      	ands	r3, r2
 800546e:	434b      	muls	r3, r1
 8005470:	617b      	str	r3, [r7, #20]
        break;
 8005472:	e00d      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	481c      	ldr	r0, [pc, #112]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005478:	f7fa fe60 	bl	800013c <__udivsi3>
 800547c:	0003      	movs	r3, r0
 800547e:	0019      	movs	r1, r3
 8005480:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	227f      	movs	r2, #127	; 0x7f
 8005488:	4013      	ands	r3, r2
 800548a:	434b      	muls	r3, r1
 800548c:	617b      	str	r3, [r7, #20]
        break;
 800548e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	0f5b      	lsrs	r3, r3, #29
 8005496:	2207      	movs	r2, #7
 8005498:	4013      	ands	r3, r2
 800549a:	3301      	adds	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	6978      	ldr	r0, [r7, #20]
 80054a2:	f7fa fe4b 	bl	800013c <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e015      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2238      	movs	r2, #56	; 0x38
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d103      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e00b      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2238      	movs	r2, #56	; 0x38
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b18      	cmp	r3, #24
 80054ca:	d103      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80054cc:	23fa      	movs	r3, #250	; 0xfa
 80054ce:	01db      	lsls	r3, r3, #7
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e001      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054d8:	693b      	ldr	r3, [r7, #16]
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b006      	add	sp, #24
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	40021000 	.word	0x40021000
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	007a1200 	.word	0x007a1200

080054f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b02      	ldr	r3, [pc, #8]	; (8005500 <HAL_RCC_GetHCLKFreq+0x10>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000010 	.word	0x20000010

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005508:	f7ff fff2 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 800550c:	0004      	movs	r4, r0
 800550e:	f7ff faf9 	bl	8004b04 <LL_RCC_GetAPB1Prescaler>
 8005512:	0003      	movs	r3, r0
 8005514:	0b1a      	lsrs	r2, r3, #12
 8005516:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	58d3      	ldr	r3, [r2, r3]
 800551c:	221f      	movs	r2, #31
 800551e:	4013      	ands	r3, r2
 8005520:	40dc      	lsrs	r4, r3
 8005522:	0023      	movs	r3, r4
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	bdb0      	pop	{r4, r5, r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	080147f4 	.word	0x080147f4

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005538:	2313      	movs	r3, #19
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005540:	2312      	movs	r3, #18
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	4013      	ands	r3, r2
 8005552:	d100      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005554:	e0ad      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2011      	movs	r0, #17
 8005558:	183b      	adds	r3, r7, r0
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	055b      	lsls	r3, r3, #21
 8005566:	4013      	ands	r3, r2
 8005568:	d110      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556a:	4b44      	ldr	r3, [pc, #272]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800556c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	0549      	lsls	r1, r1, #21
 8005574:	430a      	orrs	r2, r1
 8005576:	63da      	str	r2, [r3, #60]	; 0x3c
 8005578:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800557a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	055b      	lsls	r3, r3, #21
 8005580:	4013      	ands	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005586:	183b      	adds	r3, r7, r0
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558c:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0049      	lsls	r1, r1, #1
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559a:	f7fe fe0d 	bl	80041b8 <HAL_GetTick>
 800559e:	0003      	movs	r3, r0
 80055a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a2:	e00b      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fe fe08 	bl	80041b8 <HAL_GetTick>
 80055a8:	0002      	movs	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d904      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80055b2:	2313      	movs	r3, #19
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2203      	movs	r2, #3
 80055b8:	701a      	strb	r2, [r3, #0]
        break;
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055bc:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4013      	ands	r3, r2
 80055c6:	d0ed      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80055c8:	2313      	movs	r3, #19
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d15e      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d6:	23c0      	movs	r3, #192	; 0xc0
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4013      	ands	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d019      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d014      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	4a24      	ldr	r2, [pc, #144]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f8:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055fc:	4b1f      	ldr	r3, [pc, #124]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	0249      	lsls	r1, r1, #9
 8005602:	430a      	orrs	r2, r1
 8005604:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800560c:	491e      	ldr	r1, [pc, #120]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800560e:	400a      	ands	r2, r1
 8005610:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2201      	movs	r2, #1
 800561c:	4013      	ands	r3, r2
 800561e:	d016      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fe fdca 	bl	80041b8 <HAL_GetTick>
 8005624:	0003      	movs	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005628:	e00c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fe fdc5 	bl	80041b8 <HAL_GetTick>
 800562e:	0002      	movs	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d904      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800563a:	2313      	movs	r3, #19
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
            break;
 8005642:	e004      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	2202      	movs	r2, #2
 800564a:	4013      	ands	r3, r2
 800564c:	d0ed      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800564e:	2313      	movs	r3, #19
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005668:	430a      	orrs	r2, r1
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c
 800566c:	e016      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800566e:	2312      	movs	r3, #18
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2213      	movs	r2, #19
 8005674:	18ba      	adds	r2, r7, r2
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e00f      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800567c:	40021000 	.word	0x40021000
 8005680:	40007000 	.word	0x40007000
 8005684:	fffffcff 	.word	0xfffffcff
 8005688:	fffeffff 	.word	0xfffeffff
 800568c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	2312      	movs	r3, #18
 8005692:	18fb      	adds	r3, r7, r3
 8005694:	2213      	movs	r2, #19
 8005696:	18ba      	adds	r2, r7, r2
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800569c:	2311      	movs	r3, #17
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d105      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a6:	4bb6      	ldr	r3, [pc, #728]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056aa:	4bb5      	ldr	r3, [pc, #724]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ac:	49b5      	ldr	r1, [pc, #724]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056bc:	4bb0      	ldr	r3, [pc, #704]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	2203      	movs	r2, #3
 80056c2:	4393      	bics	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4bad      	ldr	r3, [pc, #692]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056cc:	430a      	orrs	r2, r1
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2202      	movs	r2, #2
 80056d6:	4013      	ands	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056da:	4ba9      	ldr	r3, [pc, #676]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	220c      	movs	r2, #12
 80056e0:	4393      	bics	r3, r2
 80056e2:	0019      	movs	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	4ba5      	ldr	r3, [pc, #660]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2204      	movs	r2, #4
 80056f4:	4013      	ands	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056f8:	4ba1      	ldr	r3, [pc, #644]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	2230      	movs	r2, #48	; 0x30
 80056fe:	4393      	bics	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	4b9e      	ldr	r3, [pc, #632]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005708:	430a      	orrs	r2, r1
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2210      	movs	r2, #16
 8005712:	4013      	ands	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005716:	4b9a      	ldr	r3, [pc, #616]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	4a9b      	ldr	r2, [pc, #620]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800571c:	4013      	ands	r3, r2
 800571e:	0019      	movs	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	4b96      	ldr	r3, [pc, #600]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005726:	430a      	orrs	r2, r1
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	4013      	ands	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005736:	4b92      	ldr	r3, [pc, #584]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	4a94      	ldr	r2, [pc, #592]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800573c:	4013      	ands	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005746:	430a      	orrs	r2, r1
 8005748:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005756:	4b8a      	ldr	r3, [pc, #552]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	4a8d      	ldr	r2, [pc, #564]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800575c:	4013      	ands	r3, r2
 800575e:	0019      	movs	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005764:	4b86      	ldr	r3, [pc, #536]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005766:	430a      	orrs	r2, r1
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4013      	ands	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005776:	4b82      	ldr	r3, [pc, #520]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	4a86      	ldr	r2, [pc, #536]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800577c:	4013      	ands	r3, r2
 800577e:	0019      	movs	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	4b7e      	ldr	r3, [pc, #504]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005786:	430a      	orrs	r2, r1
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2220      	movs	r2, #32
 8005790:	4013      	ands	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005794:	4b7a      	ldr	r3, [pc, #488]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	4a7f      	ldr	r2, [pc, #508]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057a4:	430a      	orrs	r2, r1
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	4013      	ands	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057b2:	4b73      	ldr	r3, [pc, #460]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	4a79      	ldr	r2, [pc, #484]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	4b6f      	ldr	r3, [pc, #444]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057c2:	430a      	orrs	r2, r1
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	01db      	lsls	r3, r3, #7
 80057ce:	4013      	ands	r3, r2
 80057d0:	d015      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d2:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	0899      	lsrs	r1, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	4b68      	ldr	r3, [pc, #416]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d106      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80057f0:	4b63      	ldr	r3, [pc, #396]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	4b62      	ldr	r3, [pc, #392]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	0249      	lsls	r1, r1, #9
 80057fa:	430a      	orrs	r2, r1
 80057fc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	4013      	ands	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800580a:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	4393      	bics	r3, r2
 8005812:	0019      	movs	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800581a:	430a      	orrs	r2, r1
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	039b      	lsls	r3, r3, #14
 8005826:	4013      	ands	r3, r2
 8005828:	d016      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800582a:	4b55      	ldr	r3, [pc, #340]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	4a5c      	ldr	r2, [pc, #368]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005830:	4013      	ands	r3, r2
 8005832:	0019      	movs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005838:	4b51      	ldr	r3, [pc, #324]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800583a:	430a      	orrs	r2, r1
 800583c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	03db      	lsls	r3, r3, #15
 8005846:	429a      	cmp	r2, r3
 8005848:	d106      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800584a:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005850:	2180      	movs	r1, #128	; 0x80
 8005852:	0449      	lsls	r1, r1, #17
 8005854:	430a      	orrs	r2, r1
 8005856:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	03db      	lsls	r3, r3, #15
 8005860:	4013      	ands	r3, r2
 8005862:	d016      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005864:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	4a4e      	ldr	r2, [pc, #312]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800586a:	4013      	ands	r3, r2
 800586c:	0019      	movs	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005872:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005874:	430a      	orrs	r2, r1
 8005876:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	045b      	lsls	r3, r3, #17
 8005880:	429a      	cmp	r2, r3
 8005882:	d106      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005884:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	0449      	lsls	r1, r1, #17
 800588e:	430a      	orrs	r2, r1
 8005890:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4013      	ands	r3, r2
 800589c:	d014      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800589e:	4b38      	ldr	r3, [pc, #224]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	2203      	movs	r2, #3
 80058a4:	4393      	bics	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	4b34      	ldr	r3, [pc, #208]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ae:	430a      	orrs	r2, r1
 80058b0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d106      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	4b30      	ldr	r3, [pc, #192]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	0249      	lsls	r1, r1, #9
 80058c4:	430a      	orrs	r2, r1
 80058c6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	019b      	lsls	r3, r3, #6
 80058d0:	4013      	ands	r3, r2
 80058d2:	d014      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	220c      	movs	r2, #12
 80058da:	4393      	bics	r3, r2
 80058dc:	0019      	movs	r1, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e2:	4b27      	ldr	r3, [pc, #156]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058e4:	430a      	orrs	r2, r1
 80058e6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d106      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	0249      	lsls	r1, r1, #9
 80058fa:	430a      	orrs	r2, r1
 80058fc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	045b      	lsls	r3, r3, #17
 8005906:	4013      	ands	r3, r2
 8005908:	d016      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590a:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	4a22      	ldr	r2, [pc, #136]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005910:	4013      	ands	r3, r2
 8005912:	0019      	movs	r1, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800591a:	430a      	orrs	r2, r1
 800591c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	019b      	lsls	r3, r3, #6
 8005926:	429a      	cmp	r2, r3
 8005928:	d106      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	0449      	lsls	r1, r1, #17
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	049b      	lsls	r3, r3, #18
 8005940:	4013      	ands	r3, r2
 8005942:	d016      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	4a10      	ldr	r2, [pc, #64]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005954:	430a      	orrs	r2, r1
 8005956:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	0449      	lsls	r1, r1, #17
 800596e:	430a      	orrs	r2, r1
 8005970:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005972:	2312      	movs	r3, #18
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b006      	add	sp, #24
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	efffffff 	.word	0xefffffff
 8005988:	fffff3ff 	.word	0xfffff3ff
 800598c:	fffffcff 	.word	0xfffffcff
 8005990:	fff3ffff 	.word	0xfff3ffff
 8005994:	ffcfffff 	.word	0xffcfffff
 8005998:	ffffcfff 	.word	0xffffcfff
 800599c:	ffff3fff 	.word	0xffff3fff
 80059a0:	ffbfffff 	.word	0xffbfffff
 80059a4:	feffffff 	.word	0xfeffffff

080059a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059b0:	230f      	movs	r3, #15
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d100      	bne.n	80059c0 <HAL_RTC_Init+0x18>
 80059be:	e08c      	b.n	8005ada <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2229      	movs	r2, #41	; 0x29
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2228      	movs	r2, #40	; 0x28
 80059d0:	2100      	movs	r1, #0
 80059d2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2288      	movs	r2, #136	; 0x88
 80059d8:	0212      	lsls	r2, r2, #8
 80059da:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0018      	movs	r0, r3
 80059e0:	f7fe f800 	bl	80039e4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2229      	movs	r2, #41	; 0x29
 80059e8:	2102      	movs	r1, #2
 80059ea:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2210      	movs	r2, #16
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d062      	beq.n	8005ac0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ca      	movs	r2, #202	; 0xca
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2253      	movs	r2, #83	; 0x53
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005a0a:	250f      	movs	r5, #15
 8005a0c:	197c      	adds	r4, r7, r5
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 fbf3 	bl	80061fc <RTC_EnterInitMode>
 8005a16:	0003      	movs	r3, r0
 8005a18:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005a1a:	0028      	movs	r0, r5
 8005a1c:	183b      	adds	r3, r7, r0
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d12c      	bne.n	8005a7e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	492e      	ldr	r1, [pc, #184]	; (8005ae8 <HAL_RTC_Init+0x140>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6912      	ldr	r2, [r2, #16]
 8005a5a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6919      	ldr	r1, [r3, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	041a      	lsls	r2, r3, #16
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005a70:	183c      	adds	r4, r7, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 fc03 	bl	8006280 <RTC_ExitInitMode>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005a7e:	230f      	movs	r3, #15
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d116      	bne.n	8005ab6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	00d2      	lsls	r2, r2, #3
 8005a94:	08d2      	lsrs	r2, r2, #3
 8005a96:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
 8005abe:	e003      	b.n	8005ac8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005ac0:	230f      	movs	r3, #15
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005ac8:	230f      	movs	r3, #15
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2229      	movs	r2, #41	; 0x29
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005ada:	230f      	movs	r3, #15
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	781b      	ldrb	r3, [r3, #0]
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae8:	fb8fffbf 	.word	0xfb8fffbf

08005aec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aec:	b5b0      	push	{r4, r5, r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2228      	movs	r2, #40	; 0x28
 8005afc:	5c9b      	ldrb	r3, [r3, r2]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_RTC_SetTime+0x1a>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e092      	b.n	8005c2c <HAL_RTC_SetTime+0x140>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2228      	movs	r2, #40	; 0x28
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2229      	movs	r2, #41	; 0x29
 8005b12:	2102      	movs	r1, #2
 8005b14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ca      	movs	r2, #202	; 0xca
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2253      	movs	r2, #83	; 0x53
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b26:	2513      	movs	r5, #19
 8005b28:	197c      	adds	r4, r7, r5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fb65 	bl	80061fc <RTC_EnterInitMode>
 8005b32:	0003      	movs	r3, r0
 8005b34:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005b36:	197b      	adds	r3, r7, r5
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d162      	bne.n	8005c04 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d125      	bne.n	8005b90 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d102      	bne.n	8005b56 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fbd4 	bl	8006308 <RTC_ByteToBcd2>
 8005b60:	0003      	movs	r3, r0
 8005b62:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 fbcd 	bl	8006308 <RTC_ByteToBcd2>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b72:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	789b      	ldrb	r3, [r3, #2]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 fbc5 	bl	8006308 <RTC_ByteToBcd2>
 8005b7e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b80:	0022      	movs	r2, r4
 8005b82:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	78db      	ldrb	r3, [r3, #3]
 8005b88:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e017      	b.n	8005bc0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bb4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	78db      	ldrb	r3, [r3, #3]
 8005bba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	491b      	ldr	r1, [pc, #108]	; (8005c34 <HAL_RTC_SetTime+0x148>)
 8005bc8:	400a      	ands	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4918      	ldr	r1, [pc, #96]	; (8005c38 <HAL_RTC_SetTime+0x14c>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bf4:	2313      	movs	r3, #19
 8005bf6:	18fc      	adds	r4, r7, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fb40 	bl	8006280 <RTC_ExitInitMode>
 8005c00:	0003      	movs	r3, r0
 8005c02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	22ff      	movs	r2, #255	; 0xff
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005c0c:	2313      	movs	r3, #19
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2229      	movs	r2, #41	; 0x29
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2228      	movs	r2, #40	; 0x28
 8005c22:	2100      	movs	r1, #0
 8005c24:	5499      	strb	r1, [r3, r2]

  return status;
 8005c26:	2313      	movs	r3, #19
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b006      	add	sp, #24
 8005c32:	bdb0      	pop	{r4, r5, r7, pc}
 8005c34:	007f7f7f 	.word	0x007f7f7f
 8005c38:	fffbffff 	.word	0xfffbffff

08005c3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	045b      	lsls	r3, r3, #17
 8005c5a:	0c5a      	lsrs	r2, r3, #17
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a22      	ldr	r2, [pc, #136]	; (8005cf0 <HAL_RTC_GetTime+0xb4>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	0c1b      	lsrs	r3, r3, #16
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	223f      	movs	r2, #63	; 0x3f
 8005c74:	4013      	ands	r3, r2
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	227f      	movs	r2, #127	; 0x7f
 8005c84:	4013      	ands	r3, r2
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	227f      	movs	r2, #127	; 0x7f
 8005c92:	4013      	ands	r3, r2
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	0d9b      	lsrs	r3, r3, #22
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11a      	bne.n	8005ce6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 fb4f 	bl	8006358 <RTC_Bcd2ToByte>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 fb46 	bl	8006358 <RTC_Bcd2ToByte>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	001a      	movs	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	789b      	ldrb	r3, [r3, #2]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f000 fb3d 	bl	8006358 <RTC_Bcd2ToByte>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b006      	add	sp, #24
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	007f7f7f 	.word	0x007f7f7f

08005cf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cf4:	b5b0      	push	{r4, r5, r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2228      	movs	r2, #40	; 0x28
 8005d04:	5c9b      	ldrb	r3, [r3, r2]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_RTC_SetDate+0x1a>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e07e      	b.n	8005e0c <HAL_RTC_SetDate+0x118>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2228      	movs	r2, #40	; 0x28
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2229      	movs	r2, #41	; 0x29
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10e      	bne.n	8005d42 <HAL_RTC_SetDate+0x4e>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d008      	beq.n	8005d42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2210      	movs	r2, #16
 8005d36:	4393      	bics	r3, r2
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	330a      	adds	r3, #10
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11c      	bne.n	8005d82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fadb 	bl	8006308 <RTC_ByteToBcd2>
 8005d52:	0003      	movs	r3, r0
 8005d54:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f000 fad4 	bl	8006308 <RTC_ByteToBcd2>
 8005d60:	0003      	movs	r3, r0
 8005d62:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d64:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	789b      	ldrb	r3, [r3, #2]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 facc 	bl	8006308 <RTC_ByteToBcd2>
 8005d70:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d72:	0022      	movs	r2, r4
 8005d74:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e00e      	b.n	8005da0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d8e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	22ca      	movs	r2, #202	; 0xca
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2253      	movs	r2, #83	; 0x53
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005db0:	2513      	movs	r5, #19
 8005db2:	197c      	adds	r4, r7, r5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	0018      	movs	r0, r3
 8005db8:	f000 fa20 	bl	80061fc <RTC_EnterInitMode>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005dc0:	0028      	movs	r0, r5
 8005dc2:	183b      	adds	r3, r7, r0
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4910      	ldr	r1, [pc, #64]	; (8005e14 <HAL_RTC_SetDate+0x120>)
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dd6:	183c      	adds	r4, r7, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f000 fa50 	bl	8006280 <RTC_ExitInitMode>
 8005de0:	0003      	movs	r3, r0
 8005de2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005dec:	2313      	movs	r3, #19
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2229      	movs	r2, #41	; 0x29
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2228      	movs	r2, #40	; 0x28
 8005e02:	2100      	movs	r1, #0
 8005e04:	5499      	strb	r1, [r3, r2]

  return status;
 8005e06:	2313      	movs	r3, #19
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b006      	add	sp, #24
 8005e12:	bdb0      	pop	{r4, r5, r7, pc}
 8005e14:	00ffff3f 	.word	0x00ffff3f

08005e18 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <HAL_RTC_GetDate+0x98>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	221f      	movs	r2, #31
 8005e42:	4013      	ands	r3, r2
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	223f      	movs	r2, #63	; 0x3f
 8005e50:	4013      	ands	r3, r2
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	0b5b      	lsrs	r3, r3, #13
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2207      	movs	r2, #7
 8005e60:	4013      	ands	r3, r2
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11a      	bne.n	8005ea4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	78db      	ldrb	r3, [r3, #3]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 fa70 	bl	8006358 <RTC_Bcd2ToByte>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f000 fa67 	bl	8006358 <RTC_Bcd2ToByte>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	789b      	ldrb	r3, [r3, #2]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 fa5e 	bl	8006358 <RTC_Bcd2ToByte>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b006      	add	sp, #24
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	00ffff3f 	.word	0x00ffff3f

08005eb4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2228      	movs	r2, #40	; 0x28
 8005ec4:	5c9b      	ldrb	r3, [r3, r2]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_RTC_SetAlarm_IT+0x1a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e127      	b.n	800611e <HAL_RTC_SetAlarm_IT+0x26a>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2228      	movs	r2, #40	; 0x28
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2229      	movs	r2, #41	; 0x29
 8005eda:	2102      	movs	r1, #2
 8005edc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d136      	bne.n	8005f52 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	4013      	ands	r3, r2
 8005eee:	d102      	bne.n	8005ef6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fa04 	bl	8006308 <RTC_ByteToBcd2>
 8005f00:	0003      	movs	r3, r0
 8005f02:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 f9fd 	bl	8006308 <RTC_ByteToBcd2>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f12:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 f9f5 	bl	8006308 <RTC_ByteToBcd2>
 8005f1e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f20:	0022      	movs	r2, r4
 8005f22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2220      	movs	r2, #32
 8005f32:	5c9b      	ldrb	r3, [r3, r2]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 f9e7 	bl	8006308 <RTC_ByteToBcd2>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f3e:	0022      	movs	r2, r4
 8005f40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e022      	b.n	8005f98 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	2240      	movs	r2, #64	; 0x40
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d102      	bne.n	8005f64 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f70:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f76:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2120      	movs	r1, #32
 8005f84:	5c5b      	ldrb	r3, [r3, r1]
 8005f86:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	22ca      	movs	r2, #202	; 0xca
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2253      	movs	r2, #83	; 0x53
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d14c      	bne.n	800605a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4957      	ldr	r1, [pc, #348]	; (8006128 <HAL_RTC_SetAlarm_IT+0x274>)
 8005fcc:	400a      	ands	r2, r1
 8005fce:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2101      	movs	r1, #1
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005fe0:	f7fe f8ea 	bl	80041b8 <HAL_GetTick>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005fe8:	e016      	b.n	8006018 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005fea:	f7fe f8e5 	bl	80041b8 <HAL_GetTick>
 8005fee:	0002      	movs	r2, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	23fa      	movs	r3, #250	; 0xfa
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d90d      	bls.n	8006018 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	22ff      	movs	r2, #255	; 0xff
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2229      	movs	r2, #41	; 0x29
 8006008:	2103      	movs	r1, #3
 800600a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2228      	movs	r2, #40	; 0x28
 8006010:	2100      	movs	r1, #0
 8006012:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e082      	b.n	800611e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	4013      	ands	r3, r2
 8006022:	d0e2      	beq.n	8005fea <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	0049      	lsls	r1, r1, #1
 8006042:	430a      	orrs	r2, r1
 8006044:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	0149      	lsls	r1, r1, #5
 8006054:	430a      	orrs	r2, r1
 8006056:	619a      	str	r2, [r3, #24]
 8006058:	e04b      	b.n	80060f2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4931      	ldr	r1, [pc, #196]	; (800612c <HAL_RTC_SetAlarm_IT+0x278>)
 8006066:	400a      	ands	r2, r1
 8006068:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2102      	movs	r1, #2
 8006076:	430a      	orrs	r2, r1
 8006078:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800607a:	f7fe f89d 	bl	80041b8 <HAL_GetTick>
 800607e:	0003      	movs	r3, r0
 8006080:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006082:	e016      	b.n	80060b2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006084:	f7fe f898 	bl	80041b8 <HAL_GetTick>
 8006088:	0002      	movs	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1ad2      	subs	r2, r2, r3
 800608e:	23fa      	movs	r3, #250	; 0xfa
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	429a      	cmp	r2, r3
 8006094:	d90d      	bls.n	80060b2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	22ff      	movs	r2, #255	; 0xff
 800609c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2229      	movs	r2, #41	; 0x29
 80060a2:	2103      	movs	r1, #3
 80060a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2228      	movs	r2, #40	; 0x28
 80060aa:	2100      	movs	r1, #0
 80060ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e035      	b.n	800611e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2202      	movs	r2, #2
 80060ba:	4013      	ands	r3, r2
 80060bc:	d0e2      	beq.n	8006084 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	0089      	lsls	r1, r1, #2
 80060dc:	430a      	orrs	r2, r1
 80060de:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	0189      	lsls	r1, r1, #6
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <HAL_RTC_SetAlarm_IT+0x27c>)
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	58d3      	ldr	r3, [r2, r3]
 80060f8:	490d      	ldr	r1, [pc, #52]	; (8006130 <HAL_RTC_SetAlarm_IT+0x27c>)
 80060fa:	2280      	movs	r2, #128	; 0x80
 80060fc:	0312      	lsls	r2, r2, #12
 80060fe:	4313      	orrs	r3, r2
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2229      	movs	r2, #41	; 0x29
 8006110:	2101      	movs	r1, #1
 8006112:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2228      	movs	r2, #40	; 0x28
 8006118:	2100      	movs	r1, #0
 800611a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b009      	add	sp, #36	; 0x24
 8006124:	bd90      	pop	{r4, r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	fffffeff 	.word	0xfffffeff
 800612c:	fffffdff 	.word	0xfffffdff
 8006130:	40021800 	.word	0x40021800

08006134 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	015b      	lsls	r3, r3, #5
 8006146:	4013      	ands	r3, r2
 8006148:	d011      	beq.n	800616e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	d00b      	beq.n	800616e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2101      	movs	r1, #1
 8006162:	430a      	orrs	r2, r1
 8006164:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0018      	movs	r0, r3
 800616a:	f7fd fbf5 	bl	8003958 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	4013      	ands	r3, r2
 800617a:	d011      	beq.n	80061a0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	2202      	movs	r2, #2
 8006184:	4013      	ands	r3, r2
 8006186:	d00b      	beq.n	80061a0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2102      	movs	r1, #2
 8006194:	430a      	orrs	r2, r1
 8006196:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0018      	movs	r0, r3
 800619c:	f000 f961 	bl	8006462 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2229      	movs	r2, #41	; 0x29
 80061a4:	2101      	movs	r1, #1
 80061a6:	5499      	strb	r1, [r3, r2]
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_RTC_WaitForSynchro+0x48>)
 80061be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061c0:	f7fd fffa 	bl	80041b8 <HAL_GetTick>
 80061c4:	0003      	movs	r3, r0
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061c8:	e00a      	b.n	80061e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061ca:	f7fd fff5 	bl	80041b8 <HAL_GetTick>
 80061ce:	0002      	movs	r2, r0
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	23fa      	movs	r3, #250	; 0xfa
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	429a      	cmp	r2, r3
 80061da:	d901      	bls.n	80061e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e006      	b.n	80061ee <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	4013      	ands	r3, r2
 80061ea:	d0ee      	beq.n	80061ca <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b004      	add	sp, #16
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	0001005f 	.word	0x0001005f

080061fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006204:	230f      	movs	r3, #15
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	4013      	ands	r3, r2
 8006216:	d12c      	bne.n	8006272 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	430a      	orrs	r2, r1
 8006226:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006228:	f7fd ffc6 	bl	80041b8 <HAL_GetTick>
 800622c:	0003      	movs	r3, r0
 800622e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006230:	e014      	b.n	800625c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006232:	f7fd ffc1 	bl	80041b8 <HAL_GetTick>
 8006236:	0002      	movs	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	200f      	movs	r0, #15
 800623e:	183b      	adds	r3, r7, r0
 8006240:	1839      	adds	r1, r7, r0
 8006242:	7809      	ldrb	r1, [r1, #0]
 8006244:	7019      	strb	r1, [r3, #0]
 8006246:	23fa      	movs	r3, #250	; 0xfa
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	429a      	cmp	r2, r3
 800624c:	d906      	bls.n	800625c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800624e:	183b      	adds	r3, r7, r0
 8006250:	2203      	movs	r2, #3
 8006252:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2229      	movs	r2, #41	; 0x29
 8006258:	2103      	movs	r1, #3
 800625a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2240      	movs	r2, #64	; 0x40
 8006264:	4013      	ands	r3, r2
 8006266:	d104      	bne.n	8006272 <RTC_EnterInitMode+0x76>
 8006268:	230f      	movs	r3, #15
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d1df      	bne.n	8006232 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	781b      	ldrb	r3, [r3, #0]
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}

08006280 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006280:	b590      	push	{r4, r7, lr}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	240f      	movs	r4, #15
 800628a:	193b      	adds	r3, r7, r4
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006290:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <RTC_ExitInitMode+0x84>)
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <RTC_ExitInitMode+0x84>)
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	438a      	bics	r2, r1
 800629a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <RTC_ExitInitMode+0x84>)
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2220      	movs	r2, #32
 80062a2:	4013      	ands	r3, r2
 80062a4:	d10d      	bne.n	80062c2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff ff81 	bl	80061b0 <HAL_RTC_WaitForSynchro>
 80062ae:	1e03      	subs	r3, r0, #0
 80062b0:	d021      	beq.n	80062f6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2229      	movs	r2, #41	; 0x29
 80062b6:	2103      	movs	r1, #3
 80062b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80062ba:	193b      	adds	r3, r7, r4
 80062bc:	2203      	movs	r2, #3
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	e019      	b.n	80062f6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062c2:	4b10      	ldr	r3, [pc, #64]	; (8006304 <RTC_ExitInitMode+0x84>)
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <RTC_ExitInitMode+0x84>)
 80062c8:	2120      	movs	r1, #32
 80062ca:	438a      	bics	r2, r1
 80062cc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7ff ff6d 	bl	80061b0 <HAL_RTC_WaitForSynchro>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d007      	beq.n	80062ea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2229      	movs	r2, #41	; 0x29
 80062de:	2103      	movs	r1, #3
 80062e0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80062e2:	230f      	movs	r3, #15
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2203      	movs	r2, #3
 80062e8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <RTC_ExitInitMode+0x84>)
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <RTC_ExitInitMode+0x84>)
 80062f0:	2120      	movs	r1, #32
 80062f2:	430a      	orrs	r2, r1
 80062f4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80062f6:	230f      	movs	r3, #15
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	781b      	ldrb	r3, [r3, #0]
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	b005      	add	sp, #20
 8006302:	bd90      	pop	{r4, r7, pc}
 8006304:	40002800 	.word	0x40002800

08006308 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	0002      	movs	r2, r0
 8006310:	1dfb      	adds	r3, r7, #7
 8006312:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006318:	230b      	movs	r3, #11
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	1dfa      	adds	r2, r7, #7
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006322:	e008      	b.n	8006336 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800632a:	220b      	movs	r2, #11
 800632c:	18bb      	adds	r3, r7, r2
 800632e:	18ba      	adds	r2, r7, r2
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	3a0a      	subs	r2, #10
 8006334:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006336:	210b      	movs	r1, #11
 8006338:	187b      	adds	r3, r7, r1
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b09      	cmp	r3, #9
 800633e:	d8f1      	bhi.n	8006324 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	b2da      	uxtb	r2, r3
 8006348:	187b      	adds	r3, r7, r1
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	4313      	orrs	r3, r2
 800634e:	b2db      	uxtb	r3, r3
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b004      	add	sp, #16
 8006356:	bd80      	pop	{r7, pc}

08006358 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	0002      	movs	r2, r0
 8006360:	1dfb      	adds	r3, r7, #7
 8006362:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006364:	1dfb      	adds	r3, r7, #7
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	b2db      	uxtb	r3, r3
 800636c:	001a      	movs	r2, r3
 800636e:	0013      	movs	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	189b      	adds	r3, r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	1dfb      	adds	r3, r7, #7
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	210f      	movs	r1, #15
 8006382:	400b      	ands	r3, r1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	b2db      	uxtb	r3, r3
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b004      	add	sp, #16
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2228      	movs	r2, #40	; 0x28
 800639e:	5c9b      	ldrb	r3, [r3, r2]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_RTCEx_EnableBypassShadow+0x16>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e024      	b.n	80063f2 <HAL_RTCEx_EnableBypassShadow+0x60>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2228      	movs	r2, #40	; 0x28
 80063ac:	2101      	movs	r1, #1
 80063ae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2229      	movs	r2, #41	; 0x29
 80063b4:	2102      	movs	r1, #2
 80063b6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	22ca      	movs	r2, #202	; 0xca
 80063be:	625a      	str	r2, [r3, #36]	; 0x24
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2253      	movs	r2, #83	; 0x53
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2120      	movs	r1, #32
 80063d4:	430a      	orrs	r2, r1
 80063d6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	22ff      	movs	r2, #255	; 0xff
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2229      	movs	r2, #41	; 0x29
 80063e4:	2101      	movs	r1, #1
 80063e6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2228      	movs	r2, #40	; 0x28
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	0018      	movs	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b002      	add	sp, #8
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2228      	movs	r2, #40	; 0x28
 8006406:	5c9b      	ldrb	r3, [r3, r2]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_RTCEx_DisableBypassShadow+0x16>
 800640c:	2302      	movs	r3, #2
 800640e:	e024      	b.n	800645a <HAL_RTCEx_DisableBypassShadow+0x60>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2228      	movs	r2, #40	; 0x28
 8006414:	2101      	movs	r1, #1
 8006416:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2229      	movs	r2, #41	; 0x29
 800641c:	2102      	movs	r1, #2
 800641e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	22ca      	movs	r2, #202	; 0xca
 8006426:	625a      	str	r2, [r3, #36]	; 0x24
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2253      	movs	r2, #83	; 0x53
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	21df      	movs	r1, #223	; 0xdf
 800643c:	400a      	ands	r2, r1
 800643e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	22ff      	movs	r2, #255	; 0xff
 8006446:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2229      	movs	r2, #41	; 0x29
 800644c:	2101      	movs	r1, #1
 800644e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2228      	movs	r2, #40	; 0x28
 8006454:	2100      	movs	r1, #0
 8006456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b002      	add	sp, #8
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e0a8      	b.n	80065d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	2382      	movs	r3, #130	; 0x82
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	429a      	cmp	r2, r3
 8006498:	d009      	beq.n	80064ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	61da      	str	r2, [r3, #28]
 80064a0:	e005      	b.n	80064ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	225d      	movs	r2, #93	; 0x5d
 80064b8:	5c9b      	ldrb	r3, [r3, r2]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d107      	bne.n	80064d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	225c      	movs	r2, #92	; 0x5c
 80064c4:	2100      	movs	r1, #0
 80064c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7fd fad0 	bl	8003a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	225d      	movs	r2, #93	; 0x5d
 80064d4:	2102      	movs	r1, #2
 80064d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2140      	movs	r1, #64	; 0x40
 80064e4:	438a      	bics	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	23e0      	movs	r3, #224	; 0xe0
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d902      	bls.n	80064fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e002      	b.n	8006500 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	015b      	lsls	r3, r3, #5
 80064fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	23f0      	movs	r3, #240	; 0xf0
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	429a      	cmp	r2, r3
 800650a:	d008      	beq.n	800651e <HAL_SPI_Init+0xaa>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	23e0      	movs	r3, #224	; 0xe0
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	429a      	cmp	r2, r3
 8006516:	d002      	beq.n	800651e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	2382      	movs	r3, #130	; 0x82
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6899      	ldr	r1, [r3, #8]
 800652c:	2384      	movs	r3, #132	; 0x84
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	400b      	ands	r3, r1
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2102      	movs	r1, #2
 800653a:	400b      	ands	r3, r1
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2101      	movs	r1, #1
 8006544:	400b      	ands	r3, r1
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6999      	ldr	r1, [r3, #24]
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	400b      	ands	r3, r1
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2138      	movs	r1, #56	; 0x38
 800655a:	400b      	ands	r3, r1
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	400b      	ands	r3, r1
 8006566:	431a      	orrs	r2, r3
 8006568:	0011      	movs	r1, r2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	019b      	lsls	r3, r3, #6
 8006572:	401a      	ands	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	2204      	movs	r2, #4
 8006584:	401a      	ands	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2110      	movs	r1, #16
 800658c:	400b      	ands	r3, r1
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	2108      	movs	r1, #8
 8006596:	400b      	ands	r3, r1
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68d9      	ldr	r1, [r3, #12]
 800659e:	23f0      	movs	r3, #240	; 0xf0
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	400b      	ands	r3, r1
 80065a4:	431a      	orrs	r2, r3
 80065a6:	0011      	movs	r1, r2
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	015b      	lsls	r3, r3, #5
 80065ae:	401a      	ands	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4907      	ldr	r1, [pc, #28]	; (80065e0 <HAL_SPI_Init+0x16c>)
 80065c4:	400a      	ands	r2, r1
 80065c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	225d      	movs	r2, #93	; 0x5d
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b004      	add	sp, #16
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	fffff7ff 	.word	0xfffff7ff

080065e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e04a      	b.n	800668c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223d      	movs	r2, #61	; 0x3d
 80065fa:	5c9b      	ldrb	r3, [r3, r2]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	223c      	movs	r2, #60	; 0x3c
 8006606:	2100      	movs	r1, #0
 8006608:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f7fd fa79 	bl	8003b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	223d      	movs	r2, #61	; 0x3d
 8006616:	2102      	movs	r1, #2
 8006618:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	0019      	movs	r1, r3
 8006624:	0010      	movs	r0, r2
 8006626:	f000 f9ed 	bl	8006a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2248      	movs	r2, #72	; 0x48
 800662e:	2101      	movs	r1, #1
 8006630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	223e      	movs	r2, #62	; 0x3e
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	223f      	movs	r2, #63	; 0x3f
 800663e:	2101      	movs	r1, #1
 8006640:	5499      	strb	r1, [r3, r2]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2240      	movs	r2, #64	; 0x40
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2241      	movs	r2, #65	; 0x41
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2242      	movs	r2, #66	; 0x42
 8006656:	2101      	movs	r1, #1
 8006658:	5499      	strb	r1, [r3, r2]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2243      	movs	r2, #67	; 0x43
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2244      	movs	r2, #68	; 0x44
 8006666:	2101      	movs	r1, #1
 8006668:	5499      	strb	r1, [r3, r2]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2245      	movs	r2, #69	; 0x45
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2246      	movs	r2, #70	; 0x46
 8006676:	2101      	movs	r1, #1
 8006678:	5499      	strb	r1, [r3, r2]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2247      	movs	r2, #71	; 0x47
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	223d      	movs	r2, #61	; 0x3d
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b002      	add	sp, #8
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	223d      	movs	r2, #61	; 0x3d
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e047      	b.n	800673c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	223d      	movs	r2, #61	; 0x3d
 80066b0:	2102      	movs	r1, #2
 80066b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2101      	movs	r1, #1
 80066c0:	430a      	orrs	r2, r1
 80066c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_TIM_Base_Start_IT+0xb0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d014      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x64>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	05db      	lsls	r3, r3, #23
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d00e      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x64>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_TIM_Base_Start_IT+0xb4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x64>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_TIM_Base_Start_IT+0xb8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x64>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <HAL_TIM_Base_Start_IT+0xbc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d116      	bne.n	8006726 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a15      	ldr	r2, [pc, #84]	; (8006754 <HAL_TIM_Base_Start_IT+0xc0>)
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b06      	cmp	r3, #6
 8006708:	d016      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0xa4>
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	025b      	lsls	r3, r3, #9
 8006710:	429a      	cmp	r2, r3
 8006712:	d011      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2101      	movs	r1, #1
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	e008      	b.n	8006738 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2101      	movs	r1, #1
 8006732:	430a      	orrs	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e000      	b.n	800673a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40012c00 	.word	0x40012c00
 8006748:	40000400 	.word	0x40000400
 800674c:	40000800 	.word	0x40000800
 8006750:	40014000 	.word	0x40014000
 8006754:	00010007 	.word	0x00010007

08006758 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	438a      	bics	r2, r1
 800676e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <HAL_TIM_Base_Stop_IT+0x54>)
 8006778:	4013      	ands	r3, r2
 800677a:	d10d      	bne.n	8006798 <HAL_TIM_Base_Stop_IT+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <HAL_TIM_Base_Stop_IT+0x58>)
 8006784:	4013      	ands	r3, r2
 8006786:	d107      	bne.n	8006798 <HAL_TIM_Base_Stop_IT+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2101      	movs	r1, #1
 8006794:	438a      	bics	r2, r1
 8006796:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	223d      	movs	r2, #61	; 0x3d
 800679c:	2101      	movs	r1, #1
 800679e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	0018      	movs	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	00001111 	.word	0x00001111
 80067b0:	00000444 	.word	0x00000444

080067b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2202      	movs	r2, #2
 80067d0:	4013      	ands	r3, r2
 80067d2:	d021      	beq.n	8006818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2202      	movs	r2, #2
 80067d8:	4013      	ands	r3, r2
 80067da:	d01d      	beq.n	8006818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2203      	movs	r2, #3
 80067e2:	4252      	negs	r2, r2
 80067e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2203      	movs	r2, #3
 80067f4:	4013      	ands	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f000 f8ea 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 8006800:	e007      	b.n	8006812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 f8dd 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 f8e9 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2204      	movs	r2, #4
 800681c:	4013      	ands	r3, r2
 800681e:	d022      	beq.n	8006866 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2204      	movs	r2, #4
 8006824:	4013      	ands	r3, r2
 8006826:	d01e      	beq.n	8006866 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2205      	movs	r2, #5
 800682e:	4252      	negs	r2, r2
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	23c0      	movs	r3, #192	; 0xc0
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4013      	ands	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 f8c3 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 800684e:	e007      	b.n	8006860 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	0018      	movs	r0, r3
 8006854:	f000 f8b6 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	0018      	movs	r0, r3
 800685c:	f000 f8c2 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2208      	movs	r2, #8
 800686a:	4013      	ands	r3, r2
 800686c:	d021      	beq.n	80068b2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2208      	movs	r2, #8
 8006872:	4013      	ands	r3, r2
 8006874:	d01d      	beq.n	80068b2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2209      	movs	r2, #9
 800687c:	4252      	negs	r2, r2
 800687e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2204      	movs	r2, #4
 8006884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2203      	movs	r2, #3
 800688e:	4013      	ands	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f000 f89d 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 800689a:	e007      	b.n	80068ac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 f890 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f000 f89c 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2210      	movs	r2, #16
 80068b6:	4013      	ands	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2210      	movs	r2, #16
 80068be:	4013      	ands	r3, r2
 80068c0:	d01e      	beq.n	8006900 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2211      	movs	r2, #17
 80068c8:	4252      	negs	r2, r2
 80068ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2208      	movs	r2, #8
 80068d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	23c0      	movs	r3, #192	; 0xc0
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4013      	ands	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f876 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 80068e8:	e007      	b.n	80068fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 f869 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 f875 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2201      	movs	r2, #1
 8006904:	4013      	ands	r3, r2
 8006906:	d00c      	beq.n	8006922 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	4013      	ands	r3, r2
 800690e:	d008      	beq.n	8006922 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2202      	movs	r2, #2
 8006916:	4252      	negs	r2, r2
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7fc fff9 	bl	8003914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2280      	movs	r2, #128	; 0x80
 8006926:	4013      	ands	r3, r2
 8006928:	d104      	bne.n	8006934 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	019b      	lsls	r3, r3, #6
 8006930:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006932:	d00b      	beq.n	800694c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2280      	movs	r2, #128	; 0x80
 8006938:	4013      	ands	r3, r2
 800693a:	d007      	beq.n	800694c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_TIM_IRQHandler+0x208>)
 8006942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f972 	bl	8006c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4013      	ands	r3, r2
 8006954:	d00b      	beq.n	800696e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	4013      	ands	r3, r2
 800695c:	d007      	beq.n	800696e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <HAL_TIM_IRQHandler+0x20c>)
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 f969 	bl	8006c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	4013      	ands	r3, r2
 8006974:	d00c      	beq.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	4013      	ands	r3, r2
 800697c:	d008      	beq.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2241      	movs	r2, #65	; 0x41
 8006984:	4252      	negs	r2, r2
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f000 f832 	bl	80069f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2220      	movs	r2, #32
 8006994:	4013      	ands	r3, r2
 8006996:	d00c      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	4013      	ands	r3, r2
 800699e:	d008      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2221      	movs	r2, #33	; 0x21
 80069a6:	4252      	negs	r2, r2
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f937 	bl	8006c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b004      	add	sp, #16
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	ffffdf7f 	.word	0xffffdf7f
 80069c0:	fffffeff 	.word	0xfffffeff

080069c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069dc:	46c0      	nop			; (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b002      	add	sp, #8
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069fc:	46c0      	nop			; (mov r8, r8)
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b002      	add	sp, #8
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3f      	ldr	r2, [pc, #252]	; (8006b14 <TIM_Base_SetConfig+0x110>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00c      	beq.n	8006a36 <TIM_Base_SetConfig+0x32>
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	05db      	lsls	r3, r3, #23
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d007      	beq.n	8006a36 <TIM_Base_SetConfig+0x32>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a3b      	ldr	r2, [pc, #236]	; (8006b18 <TIM_Base_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d003      	beq.n	8006a36 <TIM_Base_SetConfig+0x32>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a3a      	ldr	r2, [pc, #232]	; (8006b1c <TIM_Base_SetConfig+0x118>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d108      	bne.n	8006a48 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2270      	movs	r2, #112	; 0x70
 8006a3a:	4393      	bics	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a32      	ldr	r2, [pc, #200]	; (8006b14 <TIM_Base_SetConfig+0x110>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d01c      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	05db      	lsls	r3, r3, #23
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d017      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <TIM_Base_SetConfig+0x114>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <TIM_Base_SetConfig+0x118>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00f      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <TIM_Base_SetConfig+0x11c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2b      	ldr	r2, [pc, #172]	; (8006b24 <TIM_Base_SetConfig+0x120>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <TIM_Base_SetConfig+0x124>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0x86>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <TIM_Base_SetConfig+0x128>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <TIM_Base_SetConfig+0x12c>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	4393      	bics	r3, r2
 8006aa2:	001a      	movs	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <TIM_Base_SetConfig+0x110>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_Base_SetConfig+0xde>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <TIM_Base_SetConfig+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_Base_SetConfig+0xde>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <TIM_Base_SetConfig+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_Base_SetConfig+0xde>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <TIM_Base_SetConfig+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d103      	bne.n	8006aea <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2201      	movs	r2, #1
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d106      	bne.n	8006b0a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2201      	movs	r2, #1
 8006b02:	4393      	bics	r3, r2
 8006b04:	001a      	movs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	611a      	str	r2, [r3, #16]
  }
}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b004      	add	sp, #16
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40002000 	.word	0x40002000
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800
 8006b30:	fffffcff 	.word	0xfffffcff

08006b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	223c      	movs	r2, #60	; 0x3c
 8006b42:	5c9b      	ldrb	r3, [r3, r2]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e05a      	b.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	223c      	movs	r2, #60	; 0x3c
 8006b50:	2101      	movs	r1, #1
 8006b52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	223d      	movs	r2, #61	; 0x3d
 8006b58:	2102      	movs	r1, #2
 8006b5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a26      	ldr	r2, [pc, #152]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d108      	bne.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2270      	movs	r2, #112	; 0x70
 8006b8c:	4393      	bics	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d014      	beq.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	05db      	lsls	r3, r3, #23
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d10c      	bne.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2280      	movs	r2, #128	; 0x80
 8006bda:	4393      	bics	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	223d      	movs	r2, #61	; 0x3d
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	223c      	movs	r2, #60	; 0x3c
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	0018      	movs	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	b004      	add	sp, #16
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	ff0fffff 	.word	0xff0fffff
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40014000 	.word	0x40014000

08006c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c28:	46c0      	nop			; (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b002      	add	sp, #8
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e046      	b.n	8006cf0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2288      	movs	r2, #136	; 0x88
 8006c66:	589b      	ldr	r3, [r3, r2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d107      	bne.n	8006c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2284      	movs	r2, #132	; 0x84
 8006c70:	2100      	movs	r1, #0
 8006c72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7fc ff6a 	bl	8003b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2288      	movs	r2, #136	; 0x88
 8006c80:	2124      	movs	r1, #36	; 0x24
 8006c82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	438a      	bics	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fd4c 	bl	800773c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 f9f2 	bl	8007090 <UART_SetConfig>
 8006cac:	0003      	movs	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e01c      	b.n	8006cf0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	490d      	ldr	r1, [pc, #52]	; (8006cf8 <HAL_UART_Init+0xa8>)
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	212a      	movs	r1, #42	; 0x2a
 8006cd2:	438a      	bics	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 fddb 	bl	80078a4 <UART_CheckIdleState>
 8006cee:	0003      	movs	r3, r0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	ffffb7ff 	.word	0xffffb7ff

08006cfc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e032      	b.n	8006d74 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2288      	movs	r2, #136	; 0x88
 8006d12:	2124      	movs	r1, #36	; 0x24
 8006d14:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2101      	movs	r1, #1
 8006d22:	438a      	bics	r2, r1
 8006d24:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fd f831 	bl	8003da8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2290      	movs	r2, #144	; 0x90
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2288      	movs	r2, #136	; 0x88
 8006d52:	2100      	movs	r1, #0
 8006d54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	228c      	movs	r2, #140	; 0x8c
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2284      	movs	r2, #132	; 0x84
 8006d6e:	2100      	movs	r1, #0
 8006d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	1dbb      	adds	r3, r7, #6
 8006d8a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2288      	movs	r2, #136	; 0x88
 8006d90:	589b      	ldr	r3, [r3, r2]
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d000      	beq.n	8006d98 <HAL_UART_Transmit+0x1c>
 8006d96:	e090      	b.n	8006eba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_UART_Transmit+0x2a>
 8006d9e:	1dbb      	adds	r3, r7, #6
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e088      	b.n	8006ebc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	015b      	lsls	r3, r3, #5
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d109      	bne.n	8006dca <HAL_UART_Transmit+0x4e>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d001      	beq.n	8006dca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e078      	b.n	8006ebc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2290      	movs	r2, #144	; 0x90
 8006dce:	2100      	movs	r1, #0
 8006dd0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2288      	movs	r2, #136	; 0x88
 8006dd6:	2121      	movs	r1, #33	; 0x21
 8006dd8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dda:	f7fd f9ed 	bl	80041b8 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1dba      	adds	r2, r7, #6
 8006de6:	2154      	movs	r1, #84	; 0x54
 8006de8:	8812      	ldrh	r2, [r2, #0]
 8006dea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	1dba      	adds	r2, r7, #6
 8006df0:	2156      	movs	r1, #86	; 0x56
 8006df2:	8812      	ldrh	r2, [r2, #0]
 8006df4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	015b      	lsls	r3, r3, #5
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d108      	bne.n	8006e14 <HAL_UART_Transmit+0x98>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	e003      	b.n	8006e1c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e1c:	e030      	b.n	8006e80 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	0013      	movs	r3, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	f000 fde4 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2288      	movs	r2, #136	; 0x88
 8006e38:	2120      	movs	r1, #32
 8006e3a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e03d      	b.n	8006ebc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	05d2      	lsls	r2, r2, #23
 8006e52:	0dd2      	lsrs	r2, r2, #23
 8006e54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3302      	adds	r3, #2
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e007      	b.n	8006e6e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2256      	movs	r2, #86	; 0x56
 8006e72:	5a9b      	ldrh	r3, [r3, r2]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2256      	movs	r2, #86	; 0x56
 8006e7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2256      	movs	r2, #86	; 0x56
 8006e84:	5a9b      	ldrh	r3, [r3, r2]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1c8      	bne.n	8006e1e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	0013      	movs	r3, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	2140      	movs	r1, #64	; 0x40
 8006e9a:	f000 fdad 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2288      	movs	r2, #136	; 0x88
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e006      	b.n	8006ebc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2288      	movs	r2, #136	; 0x88
 8006eb2:	2120      	movs	r1, #32
 8006eb4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b008      	add	sp, #32
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	1dbb      	adds	r3, r7, #6
 8006ed2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	228c      	movs	r2, #140	; 0x8c
 8006ed8:	589b      	ldr	r3, [r3, r2]
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d000      	beq.n	8006ee0 <HAL_UART_Receive+0x1c>
 8006ede:	e0d0      	b.n	8007082 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_UART_Receive+0x2a>
 8006ee6:	1dbb      	adds	r3, r7, #6
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0c8      	b.n	8007084 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	015b      	lsls	r3, r3, #5
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d109      	bne.n	8006f12 <HAL_UART_Receive+0x4e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d001      	beq.n	8006f12 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e0b8      	b.n	8007084 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2290      	movs	r2, #144	; 0x90
 8006f16:	2100      	movs	r1, #0
 8006f18:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	228c      	movs	r2, #140	; 0x8c
 8006f1e:	2122      	movs	r1, #34	; 0x22
 8006f20:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f28:	f7fd f946 	bl	80041b8 <HAL_GetTick>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	1dba      	adds	r2, r7, #6
 8006f34:	215c      	movs	r1, #92	; 0x5c
 8006f36:	8812      	ldrh	r2, [r2, #0]
 8006f38:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1dba      	adds	r2, r7, #6
 8006f3e:	215e      	movs	r1, #94	; 0x5e
 8006f40:	8812      	ldrh	r2, [r2, #0]
 8006f42:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	015b      	lsls	r3, r3, #5
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10d      	bne.n	8006f6c <HAL_UART_Receive+0xa8>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <HAL_UART_Receive+0x9e>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2260      	movs	r2, #96	; 0x60
 8006f5c:	494b      	ldr	r1, [pc, #300]	; (800708c <HAL_UART_Receive+0x1c8>)
 8006f5e:	5299      	strh	r1, [r3, r2]
 8006f60:	e02e      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2260      	movs	r2, #96	; 0x60
 8006f66:	21ff      	movs	r1, #255	; 0xff
 8006f68:	5299      	strh	r1, [r3, r2]
 8006f6a:	e029      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10d      	bne.n	8006f90 <HAL_UART_Receive+0xcc>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_UART_Receive+0xc2>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2260      	movs	r2, #96	; 0x60
 8006f80:	21ff      	movs	r1, #255	; 0xff
 8006f82:	5299      	strh	r1, [r3, r2]
 8006f84:	e01c      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2260      	movs	r2, #96	; 0x60
 8006f8a:	217f      	movs	r1, #127	; 0x7f
 8006f8c:	5299      	strh	r1, [r3, r2]
 8006f8e:	e017      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	055b      	lsls	r3, r3, #21
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d10d      	bne.n	8006fb8 <HAL_UART_Receive+0xf4>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <HAL_UART_Receive+0xea>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2260      	movs	r2, #96	; 0x60
 8006fa8:	217f      	movs	r1, #127	; 0x7f
 8006faa:	5299      	strh	r1, [r3, r2]
 8006fac:	e008      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2260      	movs	r2, #96	; 0x60
 8006fb2:	213f      	movs	r1, #63	; 0x3f
 8006fb4:	5299      	strh	r1, [r3, r2]
 8006fb6:	e003      	b.n	8006fc0 <HAL_UART_Receive+0xfc>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2260      	movs	r2, #96	; 0x60
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006fc0:	2312      	movs	r3, #18
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	2160      	movs	r1, #96	; 0x60
 8006fc8:	5a52      	ldrh	r2, [r2, r1]
 8006fca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	015b      	lsls	r3, r3, #5
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d108      	bne.n	8006fea <HAL_UART_Receive+0x126>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e003      	b.n	8006ff2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ff2:	e03a      	b.n	800706a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	0013      	movs	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	2120      	movs	r1, #32
 8007002:	f000 fcf9 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d005      	beq.n	8007016 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	228c      	movs	r2, #140	; 0x8c
 800700e:	2120      	movs	r1, #32
 8007010:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e036      	b.n	8007084 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	b29b      	uxth	r3, r3
 8007024:	2212      	movs	r2, #18
 8007026:	18ba      	adds	r2, r7, r2
 8007028:	8812      	ldrh	r2, [r2, #0]
 800702a:	4013      	ands	r3, r2
 800702c:	b29a      	uxth	r2, r3
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	3302      	adds	r3, #2
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e00e      	b.n	8007058 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2212      	movs	r2, #18
 8007044:	18ba      	adds	r2, r7, r2
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	4013      	ands	r3, r2
 800704c:	b2da      	uxtb	r2, r3
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	3301      	adds	r3, #1
 8007056:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	225e      	movs	r2, #94	; 0x5e
 800705c:	5a9b      	ldrh	r3, [r3, r2]
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b299      	uxth	r1, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	225e      	movs	r2, #94	; 0x5e
 8007068:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	225e      	movs	r2, #94	; 0x5e
 800706e:	5a9b      	ldrh	r3, [r3, r2]
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1be      	bne.n	8006ff4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	228c      	movs	r2, #140	; 0x8c
 800707a:	2120      	movs	r1, #32
 800707c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	b008      	add	sp, #32
 800708a:	bd80      	pop	{r7, pc}
 800708c:	000001ff 	.word	0x000001ff

08007090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	b5b0      	push	{r4, r5, r7, lr}
 8007092:	b090      	sub	sp, #64	; 0x40
 8007094:	af00      	add	r7, sp, #0
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007098:	231a      	movs	r3, #26
 800709a:	2220      	movs	r2, #32
 800709c:	189b      	adds	r3, r3, r2
 800709e:	19db      	adds	r3, r3, r7
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4ac1      	ldr	r2, [pc, #772]	; (80073c8 <UART_SetConfig+0x338>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	0019      	movs	r1, r3
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	430b      	orrs	r3, r1
 80070d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	4abc      	ldr	r2, [pc, #752]	; (80073cc <UART_SetConfig+0x33c>)
 80070da:	4013      	ands	r3, r2
 80070dc:	0018      	movs	r0, r3
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	68d9      	ldr	r1, [r3, #12]
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	0003      	movs	r3, r0
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4ab6      	ldr	r2, [pc, #728]	; (80073d0 <UART_SetConfig+0x340>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <UART_SetConfig+0x80>
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4ab4      	ldr	r2, [pc, #720]	; (80073d4 <UART_SetConfig+0x344>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800710c:	4313      	orrs	r3, r2
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4ab0      	ldr	r2, [pc, #704]	; (80073d8 <UART_SetConfig+0x348>)
 8007118:	4013      	ands	r3, r2
 800711a:	0019      	movs	r1, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	430b      	orrs	r3, r1
 8007124:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	220f      	movs	r2, #15
 800712e:	4393      	bics	r3, r2
 8007130:	0018      	movs	r0, r3
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	0003      	movs	r3, r0
 800713c:	430b      	orrs	r3, r1
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4aa5      	ldr	r2, [pc, #660]	; (80073dc <UART_SetConfig+0x34c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d131      	bne.n	80071ae <UART_SetConfig+0x11e>
 800714a:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <UART_SetConfig+0x350>)
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	2203      	movs	r2, #3
 8007150:	4013      	ands	r3, r2
 8007152:	2b03      	cmp	r3, #3
 8007154:	d01d      	beq.n	8007192 <UART_SetConfig+0x102>
 8007156:	d823      	bhi.n	80071a0 <UART_SetConfig+0x110>
 8007158:	2b02      	cmp	r3, #2
 800715a:	d00c      	beq.n	8007176 <UART_SetConfig+0xe6>
 800715c:	d820      	bhi.n	80071a0 <UART_SetConfig+0x110>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0xd8>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d00e      	beq.n	8007184 <UART_SetConfig+0xf4>
 8007166:	e01b      	b.n	80071a0 <UART_SetConfig+0x110>
 8007168:	231b      	movs	r3, #27
 800716a:	2220      	movs	r2, #32
 800716c:	189b      	adds	r3, r3, r2
 800716e:	19db      	adds	r3, r3, r7
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	e154      	b.n	8007420 <UART_SetConfig+0x390>
 8007176:	231b      	movs	r3, #27
 8007178:	2220      	movs	r2, #32
 800717a:	189b      	adds	r3, r3, r2
 800717c:	19db      	adds	r3, r3, r7
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e14d      	b.n	8007420 <UART_SetConfig+0x390>
 8007184:	231b      	movs	r3, #27
 8007186:	2220      	movs	r2, #32
 8007188:	189b      	adds	r3, r3, r2
 800718a:	19db      	adds	r3, r3, r7
 800718c:	2204      	movs	r2, #4
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e146      	b.n	8007420 <UART_SetConfig+0x390>
 8007192:	231b      	movs	r3, #27
 8007194:	2220      	movs	r2, #32
 8007196:	189b      	adds	r3, r3, r2
 8007198:	19db      	adds	r3, r3, r7
 800719a:	2208      	movs	r2, #8
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	e13f      	b.n	8007420 <UART_SetConfig+0x390>
 80071a0:	231b      	movs	r3, #27
 80071a2:	2220      	movs	r2, #32
 80071a4:	189b      	adds	r3, r3, r2
 80071a6:	19db      	adds	r3, r3, r7
 80071a8:	2210      	movs	r2, #16
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	e138      	b.n	8007420 <UART_SetConfig+0x390>
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a8c      	ldr	r2, [pc, #560]	; (80073e4 <UART_SetConfig+0x354>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d131      	bne.n	800721c <UART_SetConfig+0x18c>
 80071b8:	4b89      	ldr	r3, [pc, #548]	; (80073e0 <UART_SetConfig+0x350>)
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	220c      	movs	r2, #12
 80071be:	4013      	ands	r3, r2
 80071c0:	2b0c      	cmp	r3, #12
 80071c2:	d01d      	beq.n	8007200 <UART_SetConfig+0x170>
 80071c4:	d823      	bhi.n	800720e <UART_SetConfig+0x17e>
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d00c      	beq.n	80071e4 <UART_SetConfig+0x154>
 80071ca:	d820      	bhi.n	800720e <UART_SetConfig+0x17e>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <UART_SetConfig+0x146>
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d00e      	beq.n	80071f2 <UART_SetConfig+0x162>
 80071d4:	e01b      	b.n	800720e <UART_SetConfig+0x17e>
 80071d6:	231b      	movs	r3, #27
 80071d8:	2220      	movs	r2, #32
 80071da:	189b      	adds	r3, r3, r2
 80071dc:	19db      	adds	r3, r3, r7
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e11d      	b.n	8007420 <UART_SetConfig+0x390>
 80071e4:	231b      	movs	r3, #27
 80071e6:	2220      	movs	r2, #32
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	19db      	adds	r3, r3, r7
 80071ec:	2202      	movs	r2, #2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e116      	b.n	8007420 <UART_SetConfig+0x390>
 80071f2:	231b      	movs	r3, #27
 80071f4:	2220      	movs	r2, #32
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	19db      	adds	r3, r3, r7
 80071fa:	2204      	movs	r2, #4
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	e10f      	b.n	8007420 <UART_SetConfig+0x390>
 8007200:	231b      	movs	r3, #27
 8007202:	2220      	movs	r2, #32
 8007204:	189b      	adds	r3, r3, r2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	2208      	movs	r2, #8
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e108      	b.n	8007420 <UART_SetConfig+0x390>
 800720e:	231b      	movs	r3, #27
 8007210:	2220      	movs	r2, #32
 8007212:	189b      	adds	r3, r3, r2
 8007214:	19db      	adds	r3, r3, r7
 8007216:	2210      	movs	r2, #16
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e101      	b.n	8007420 <UART_SetConfig+0x390>
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a71      	ldr	r2, [pc, #452]	; (80073e8 <UART_SetConfig+0x358>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d131      	bne.n	800728a <UART_SetConfig+0x1fa>
 8007226:	4b6e      	ldr	r3, [pc, #440]	; (80073e0 <UART_SetConfig+0x350>)
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	2230      	movs	r2, #48	; 0x30
 800722c:	4013      	ands	r3, r2
 800722e:	2b30      	cmp	r3, #48	; 0x30
 8007230:	d01d      	beq.n	800726e <UART_SetConfig+0x1de>
 8007232:	d823      	bhi.n	800727c <UART_SetConfig+0x1ec>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d00c      	beq.n	8007252 <UART_SetConfig+0x1c2>
 8007238:	d820      	bhi.n	800727c <UART_SetConfig+0x1ec>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <UART_SetConfig+0x1b4>
 800723e:	2b10      	cmp	r3, #16
 8007240:	d00e      	beq.n	8007260 <UART_SetConfig+0x1d0>
 8007242:	e01b      	b.n	800727c <UART_SetConfig+0x1ec>
 8007244:	231b      	movs	r3, #27
 8007246:	2220      	movs	r2, #32
 8007248:	189b      	adds	r3, r3, r2
 800724a:	19db      	adds	r3, r3, r7
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e0e6      	b.n	8007420 <UART_SetConfig+0x390>
 8007252:	231b      	movs	r3, #27
 8007254:	2220      	movs	r2, #32
 8007256:	189b      	adds	r3, r3, r2
 8007258:	19db      	adds	r3, r3, r7
 800725a:	2202      	movs	r2, #2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e0df      	b.n	8007420 <UART_SetConfig+0x390>
 8007260:	231b      	movs	r3, #27
 8007262:	2220      	movs	r2, #32
 8007264:	189b      	adds	r3, r3, r2
 8007266:	19db      	adds	r3, r3, r7
 8007268:	2204      	movs	r2, #4
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e0d8      	b.n	8007420 <UART_SetConfig+0x390>
 800726e:	231b      	movs	r3, #27
 8007270:	2220      	movs	r2, #32
 8007272:	189b      	adds	r3, r3, r2
 8007274:	19db      	adds	r3, r3, r7
 8007276:	2208      	movs	r2, #8
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	e0d1      	b.n	8007420 <UART_SetConfig+0x390>
 800727c:	231b      	movs	r3, #27
 800727e:	2220      	movs	r2, #32
 8007280:	189b      	adds	r3, r3, r2
 8007282:	19db      	adds	r3, r3, r7
 8007284:	2210      	movs	r2, #16
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	e0ca      	b.n	8007420 <UART_SetConfig+0x390>
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a57      	ldr	r2, [pc, #348]	; (80073ec <UART_SetConfig+0x35c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d106      	bne.n	80072a2 <UART_SetConfig+0x212>
 8007294:	231b      	movs	r3, #27
 8007296:	2220      	movs	r2, #32
 8007298:	189b      	adds	r3, r3, r2
 800729a:	19db      	adds	r3, r3, r7
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e0be      	b.n	8007420 <UART_SetConfig+0x390>
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <UART_SetConfig+0x360>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d106      	bne.n	80072ba <UART_SetConfig+0x22a>
 80072ac:	231b      	movs	r3, #27
 80072ae:	2220      	movs	r2, #32
 80072b0:	189b      	adds	r3, r3, r2
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e0b2      	b.n	8007420 <UART_SetConfig+0x390>
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a4d      	ldr	r2, [pc, #308]	; (80073f4 <UART_SetConfig+0x364>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d106      	bne.n	80072d2 <UART_SetConfig+0x242>
 80072c4:	231b      	movs	r3, #27
 80072c6:	2220      	movs	r2, #32
 80072c8:	189b      	adds	r3, r3, r2
 80072ca:	19db      	adds	r3, r3, r7
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e0a6      	b.n	8007420 <UART_SetConfig+0x390>
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a3e      	ldr	r2, [pc, #248]	; (80073d0 <UART_SetConfig+0x340>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d13e      	bne.n	800735a <UART_SetConfig+0x2ca>
 80072dc:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <UART_SetConfig+0x350>)
 80072de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072e0:	23c0      	movs	r3, #192	; 0xc0
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	4013      	ands	r3, r2
 80072e6:	22c0      	movs	r2, #192	; 0xc0
 80072e8:	0112      	lsls	r2, r2, #4
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d027      	beq.n	800733e <UART_SetConfig+0x2ae>
 80072ee:	22c0      	movs	r2, #192	; 0xc0
 80072f0:	0112      	lsls	r2, r2, #4
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d82a      	bhi.n	800734c <UART_SetConfig+0x2bc>
 80072f6:	2280      	movs	r2, #128	; 0x80
 80072f8:	0112      	lsls	r2, r2, #4
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d011      	beq.n	8007322 <UART_SetConfig+0x292>
 80072fe:	2280      	movs	r2, #128	; 0x80
 8007300:	0112      	lsls	r2, r2, #4
 8007302:	4293      	cmp	r3, r2
 8007304:	d822      	bhi.n	800734c <UART_SetConfig+0x2bc>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <UART_SetConfig+0x284>
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	00d2      	lsls	r2, r2, #3
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <UART_SetConfig+0x2a0>
 8007312:	e01b      	b.n	800734c <UART_SetConfig+0x2bc>
 8007314:	231b      	movs	r3, #27
 8007316:	2220      	movs	r2, #32
 8007318:	189b      	adds	r3, r3, r2
 800731a:	19db      	adds	r3, r3, r7
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e07e      	b.n	8007420 <UART_SetConfig+0x390>
 8007322:	231b      	movs	r3, #27
 8007324:	2220      	movs	r2, #32
 8007326:	189b      	adds	r3, r3, r2
 8007328:	19db      	adds	r3, r3, r7
 800732a:	2202      	movs	r2, #2
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e077      	b.n	8007420 <UART_SetConfig+0x390>
 8007330:	231b      	movs	r3, #27
 8007332:	2220      	movs	r2, #32
 8007334:	189b      	adds	r3, r3, r2
 8007336:	19db      	adds	r3, r3, r7
 8007338:	2204      	movs	r2, #4
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e070      	b.n	8007420 <UART_SetConfig+0x390>
 800733e:	231b      	movs	r3, #27
 8007340:	2220      	movs	r2, #32
 8007342:	189b      	adds	r3, r3, r2
 8007344:	19db      	adds	r3, r3, r7
 8007346:	2208      	movs	r2, #8
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e069      	b.n	8007420 <UART_SetConfig+0x390>
 800734c:	231b      	movs	r3, #27
 800734e:	2220      	movs	r2, #32
 8007350:	189b      	adds	r3, r3, r2
 8007352:	19db      	adds	r3, r3, r7
 8007354:	2210      	movs	r2, #16
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e062      	b.n	8007420 <UART_SetConfig+0x390>
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <UART_SetConfig+0x344>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d157      	bne.n	8007414 <UART_SetConfig+0x384>
 8007364:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <UART_SetConfig+0x350>)
 8007366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007368:	23c0      	movs	r3, #192	; 0xc0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4013      	ands	r3, r2
 800736e:	22c0      	movs	r2, #192	; 0xc0
 8007370:	0092      	lsls	r2, r2, #2
 8007372:	4293      	cmp	r3, r2
 8007374:	d040      	beq.n	80073f8 <UART_SetConfig+0x368>
 8007376:	22c0      	movs	r2, #192	; 0xc0
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	4293      	cmp	r3, r2
 800737c:	d843      	bhi.n	8007406 <UART_SetConfig+0x376>
 800737e:	2280      	movs	r2, #128	; 0x80
 8007380:	0092      	lsls	r2, r2, #2
 8007382:	4293      	cmp	r3, r2
 8007384:	d011      	beq.n	80073aa <UART_SetConfig+0x31a>
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0092      	lsls	r2, r2, #2
 800738a:	4293      	cmp	r3, r2
 800738c:	d83b      	bhi.n	8007406 <UART_SetConfig+0x376>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <UART_SetConfig+0x30c>
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	0052      	lsls	r2, r2, #1
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <UART_SetConfig+0x328>
 800739a:	e034      	b.n	8007406 <UART_SetConfig+0x376>
 800739c:	231b      	movs	r3, #27
 800739e:	2220      	movs	r2, #32
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e03a      	b.n	8007420 <UART_SetConfig+0x390>
 80073aa:	231b      	movs	r3, #27
 80073ac:	2220      	movs	r2, #32
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	19db      	adds	r3, r3, r7
 80073b2:	2202      	movs	r2, #2
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e033      	b.n	8007420 <UART_SetConfig+0x390>
 80073b8:	231b      	movs	r3, #27
 80073ba:	2220      	movs	r2, #32
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	2204      	movs	r2, #4
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	e02c      	b.n	8007420 <UART_SetConfig+0x390>
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	cfff69f3 	.word	0xcfff69f3
 80073cc:	ffffcfff 	.word	0xffffcfff
 80073d0:	40008000 	.word	0x40008000
 80073d4:	40008400 	.word	0x40008400
 80073d8:	11fff4ff 	.word	0x11fff4ff
 80073dc:	40013800 	.word	0x40013800
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40004400 	.word	0x40004400
 80073e8:	40004800 	.word	0x40004800
 80073ec:	40004c00 	.word	0x40004c00
 80073f0:	40005000 	.word	0x40005000
 80073f4:	40013c00 	.word	0x40013c00
 80073f8:	231b      	movs	r3, #27
 80073fa:	2220      	movs	r2, #32
 80073fc:	189b      	adds	r3, r3, r2
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	2208      	movs	r2, #8
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e00c      	b.n	8007420 <UART_SetConfig+0x390>
 8007406:	231b      	movs	r3, #27
 8007408:	2220      	movs	r2, #32
 800740a:	189b      	adds	r3, r3, r2
 800740c:	19db      	adds	r3, r3, r7
 800740e:	2210      	movs	r2, #16
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	e005      	b.n	8007420 <UART_SetConfig+0x390>
 8007414:	231b      	movs	r3, #27
 8007416:	2220      	movs	r2, #32
 8007418:	189b      	adds	r3, r3, r2
 800741a:	19db      	adds	r3, r3, r7
 800741c:	2210      	movs	r2, #16
 800741e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4ac1      	ldr	r2, [pc, #772]	; (800772c <UART_SetConfig+0x69c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d005      	beq.n	8007436 <UART_SetConfig+0x3a6>
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4ac0      	ldr	r2, [pc, #768]	; (8007730 <UART_SetConfig+0x6a0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d000      	beq.n	8007436 <UART_SetConfig+0x3a6>
 8007434:	e093      	b.n	800755e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007436:	231b      	movs	r3, #27
 8007438:	2220      	movs	r2, #32
 800743a:	189b      	adds	r3, r3, r2
 800743c:	19db      	adds	r3, r3, r7
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d015      	beq.n	8007470 <UART_SetConfig+0x3e0>
 8007444:	dc18      	bgt.n	8007478 <UART_SetConfig+0x3e8>
 8007446:	2b04      	cmp	r3, #4
 8007448:	d00d      	beq.n	8007466 <UART_SetConfig+0x3d6>
 800744a:	dc15      	bgt.n	8007478 <UART_SetConfig+0x3e8>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <UART_SetConfig+0x3c6>
 8007450:	2b02      	cmp	r3, #2
 8007452:	d005      	beq.n	8007460 <UART_SetConfig+0x3d0>
 8007454:	e010      	b.n	8007478 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007456:	f7fe f855 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 800745a:	0003      	movs	r3, r0
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800745e:	e014      	b.n	800748a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007460:	4bb4      	ldr	r3, [pc, #720]	; (8007734 <UART_SetConfig+0x6a4>)
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007464:	e011      	b.n	800748a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007466:	f7fd ffc1 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 800746a:	0003      	movs	r3, r0
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746e:	e00c      	b.n	800748a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007476:	e008      	b.n	800748a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800747c:	231a      	movs	r3, #26
 800747e:	2220      	movs	r2, #32
 8007480:	189b      	adds	r3, r3, r2
 8007482:	19db      	adds	r3, r3, r7
 8007484:	2201      	movs	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
        break;
 8007488:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2b00      	cmp	r3, #0
 800748e:	d100      	bne.n	8007492 <UART_SetConfig+0x402>
 8007490:	e135      	b.n	80076fe <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007496:	4ba8      	ldr	r3, [pc, #672]	; (8007738 <UART_SetConfig+0x6a8>)
 8007498:	0052      	lsls	r2, r2, #1
 800749a:	5ad3      	ldrh	r3, [r2, r3]
 800749c:	0019      	movs	r1, r3
 800749e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074a0:	f7f8 fe4c 	bl	800013c <__udivsi3>
 80074a4:	0003      	movs	r3, r0
 80074a6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	0013      	movs	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	189b      	adds	r3, r3, r2
 80074b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d305      	bcc.n	80074c4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d906      	bls.n	80074d2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80074c4:	231a      	movs	r3, #26
 80074c6:	2220      	movs	r2, #32
 80074c8:	189b      	adds	r3, r3, r2
 80074ca:	19db      	adds	r3, r3, r7
 80074cc:	2201      	movs	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e044      	b.n	800755c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074de:	4b96      	ldr	r3, [pc, #600]	; (8007738 <UART_SetConfig+0x6a8>)
 80074e0:	0052      	lsls	r2, r2, #1
 80074e2:	5ad3      	ldrh	r3, [r2, r3]
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	69b8      	ldr	r0, [r7, #24]
 80074f0:	69f9      	ldr	r1, [r7, #28]
 80074f2:	f7f8 ffd7 	bl	80004a4 <__aeabi_uldivmod>
 80074f6:	0002      	movs	r2, r0
 80074f8:	000b      	movs	r3, r1
 80074fa:	0e11      	lsrs	r1, r2, #24
 80074fc:	021d      	lsls	r5, r3, #8
 80074fe:	430d      	orrs	r5, r1
 8007500:	0214      	lsls	r4, r2, #8
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	68f9      	ldr	r1, [r7, #12]
 8007512:	1900      	adds	r0, r0, r4
 8007514:	4169      	adcs	r1, r5
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f7f8 ffbe 	bl	80004a4 <__aeabi_uldivmod>
 8007528:	0002      	movs	r2, r0
 800752a:	000b      	movs	r3, r1
 800752c:	0013      	movs	r3, r2
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	23c0      	movs	r3, #192	; 0xc0
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	429a      	cmp	r2, r3
 8007538:	d309      	bcc.n	800754e <UART_SetConfig+0x4be>
 800753a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	035b      	lsls	r3, r3, #13
 8007540:	429a      	cmp	r2, r3
 8007542:	d204      	bcs.n	800754e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	e006      	b.n	800755c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800754e:	231a      	movs	r3, #26
 8007550:	2220      	movs	r2, #32
 8007552:	189b      	adds	r3, r3, r2
 8007554:	19db      	adds	r3, r3, r7
 8007556:	2201      	movs	r2, #1
 8007558:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800755a:	e0d0      	b.n	80076fe <UART_SetConfig+0x66e>
 800755c:	e0cf      	b.n	80076fe <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	2380      	movs	r3, #128	; 0x80
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	429a      	cmp	r2, r3
 8007568:	d000      	beq.n	800756c <UART_SetConfig+0x4dc>
 800756a:	e070      	b.n	800764e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800756c:	231b      	movs	r3, #27
 800756e:	2220      	movs	r2, #32
 8007570:	189b      	adds	r3, r3, r2
 8007572:	19db      	adds	r3, r3, r7
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d015      	beq.n	80075a6 <UART_SetConfig+0x516>
 800757a:	dc18      	bgt.n	80075ae <UART_SetConfig+0x51e>
 800757c:	2b04      	cmp	r3, #4
 800757e:	d00d      	beq.n	800759c <UART_SetConfig+0x50c>
 8007580:	dc15      	bgt.n	80075ae <UART_SetConfig+0x51e>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <UART_SetConfig+0x4fc>
 8007586:	2b02      	cmp	r3, #2
 8007588:	d005      	beq.n	8007596 <UART_SetConfig+0x506>
 800758a:	e010      	b.n	80075ae <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800758c:	f7fd ffba 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007590:	0003      	movs	r3, r0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007594:	e014      	b.n	80075c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007596:	4b67      	ldr	r3, [pc, #412]	; (8007734 <UART_SetConfig+0x6a4>)
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759a:	e011      	b.n	80075c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759c:	f7fd ff26 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 80075a0:	0003      	movs	r3, r0
 80075a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a4:	e00c      	b.n	80075c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ac:	e008      	b.n	80075c0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075b2:	231a      	movs	r3, #26
 80075b4:	2220      	movs	r2, #32
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	19db      	adds	r3, r3, r7
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
        break;
 80075be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d100      	bne.n	80075c8 <UART_SetConfig+0x538>
 80075c6:	e09a      	b.n	80076fe <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075cc:	4b5a      	ldr	r3, [pc, #360]	; (8007738 <UART_SetConfig+0x6a8>)
 80075ce:	0052      	lsls	r2, r2, #1
 80075d0:	5ad3      	ldrh	r3, [r2, r3]
 80075d2:	0019      	movs	r1, r3
 80075d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075d6:	f7f8 fdb1 	bl	800013c <__udivsi3>
 80075da:	0003      	movs	r3, r0
 80075dc:	005a      	lsls	r2, r3, #1
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	18d2      	adds	r2, r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	0019      	movs	r1, r3
 80075ec:	0010      	movs	r0, r2
 80075ee:	f7f8 fda5 	bl	800013c <__udivsi3>
 80075f2:	0003      	movs	r3, r0
 80075f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2b0f      	cmp	r3, #15
 80075fa:	d921      	bls.n	8007640 <UART_SetConfig+0x5b0>
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	025b      	lsls	r3, r3, #9
 8007602:	429a      	cmp	r2, r3
 8007604:	d21c      	bcs.n	8007640 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	b29a      	uxth	r2, r3
 800760a:	200e      	movs	r0, #14
 800760c:	2420      	movs	r4, #32
 800760e:	1903      	adds	r3, r0, r4
 8007610:	19db      	adds	r3, r3, r7
 8007612:	210f      	movs	r1, #15
 8007614:	438a      	bics	r2, r1
 8007616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	2207      	movs	r2, #7
 8007620:	4013      	ands	r3, r2
 8007622:	b299      	uxth	r1, r3
 8007624:	1903      	adds	r3, r0, r4
 8007626:	19db      	adds	r3, r3, r7
 8007628:	1902      	adds	r2, r0, r4
 800762a:	19d2      	adds	r2, r2, r7
 800762c:	8812      	ldrh	r2, [r2, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	1902      	adds	r2, r0, r4
 8007638:	19d2      	adds	r2, r2, r7
 800763a:	8812      	ldrh	r2, [r2, #0]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e05e      	b.n	80076fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007640:	231a      	movs	r3, #26
 8007642:	2220      	movs	r2, #32
 8007644:	189b      	adds	r3, r3, r2
 8007646:	19db      	adds	r3, r3, r7
 8007648:	2201      	movs	r2, #1
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e057      	b.n	80076fe <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800764e:	231b      	movs	r3, #27
 8007650:	2220      	movs	r2, #32
 8007652:	189b      	adds	r3, r3, r2
 8007654:	19db      	adds	r3, r3, r7
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b08      	cmp	r3, #8
 800765a:	d015      	beq.n	8007688 <UART_SetConfig+0x5f8>
 800765c:	dc18      	bgt.n	8007690 <UART_SetConfig+0x600>
 800765e:	2b04      	cmp	r3, #4
 8007660:	d00d      	beq.n	800767e <UART_SetConfig+0x5ee>
 8007662:	dc15      	bgt.n	8007690 <UART_SetConfig+0x600>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <UART_SetConfig+0x5de>
 8007668:	2b02      	cmp	r3, #2
 800766a:	d005      	beq.n	8007678 <UART_SetConfig+0x5e8>
 800766c:	e010      	b.n	8007690 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766e:	f7fd ff49 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007672:	0003      	movs	r3, r0
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007676:	e014      	b.n	80076a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b2e      	ldr	r3, [pc, #184]	; (8007734 <UART_SetConfig+0x6a4>)
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767c:	e011      	b.n	80076a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd feb5 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 8007682:	0003      	movs	r3, r0
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007686:	e00c      	b.n	80076a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800768e:	e008      	b.n	80076a2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007694:	231a      	movs	r3, #26
 8007696:	2220      	movs	r2, #32
 8007698:	189b      	adds	r3, r3, r2
 800769a:	19db      	adds	r3, r3, r7
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
        break;
 80076a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d02a      	beq.n	80076fe <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ac:	4b22      	ldr	r3, [pc, #136]	; (8007738 <UART_SetConfig+0x6a8>)
 80076ae:	0052      	lsls	r2, r2, #1
 80076b0:	5ad3      	ldrh	r3, [r2, r3]
 80076b2:	0019      	movs	r1, r3
 80076b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076b6:	f7f8 fd41 	bl	800013c <__udivsi3>
 80076ba:	0003      	movs	r3, r0
 80076bc:	001a      	movs	r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	18d2      	adds	r2, r2, r3
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	0019      	movs	r1, r3
 80076cc:	0010      	movs	r0, r2
 80076ce:	f7f8 fd35 	bl	800013c <__udivsi3>
 80076d2:	0003      	movs	r3, r0
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2b0f      	cmp	r3, #15
 80076da:	d90a      	bls.n	80076f2 <UART_SetConfig+0x662>
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	025b      	lsls	r3, r3, #9
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d205      	bcs.n	80076f2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e005      	b.n	80076fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80076f2:	231a      	movs	r3, #26
 80076f4:	2220      	movs	r2, #32
 80076f6:	189b      	adds	r3, r3, r2
 80076f8:	19db      	adds	r3, r3, r7
 80076fa:	2201      	movs	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	226a      	movs	r2, #106	; 0x6a
 8007702:	2101      	movs	r1, #1
 8007704:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	2268      	movs	r2, #104	; 0x68
 800770a:	2101      	movs	r1, #1
 800770c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	2200      	movs	r2, #0
 8007712:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	2200      	movs	r2, #0
 8007718:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800771a:	231a      	movs	r3, #26
 800771c:	2220      	movs	r2, #32
 800771e:	189b      	adds	r3, r3, r2
 8007720:	19db      	adds	r3, r3, r7
 8007722:	781b      	ldrb	r3, [r3, #0]
}
 8007724:	0018      	movs	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	b010      	add	sp, #64	; 0x40
 800772a:	bdb0      	pop	{r4, r5, r7, pc}
 800772c:	40008000 	.word	0x40008000
 8007730:	40008400 	.word	0x40008400
 8007734:	00f42400 	.word	0x00f42400
 8007738:	08014814 	.word	0x08014814

0800773c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	2208      	movs	r2, #8
 800774a:	4013      	ands	r3, r2
 800774c:	d00b      	beq.n	8007766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a4a      	ldr	r2, [pc, #296]	; (8007880 <UART_AdvFeatureConfig+0x144>)
 8007756:	4013      	ands	r3, r2
 8007758:	0019      	movs	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	2201      	movs	r2, #1
 800776c:	4013      	ands	r3, r2
 800776e:	d00b      	beq.n	8007788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4a43      	ldr	r2, [pc, #268]	; (8007884 <UART_AdvFeatureConfig+0x148>)
 8007778:	4013      	ands	r3, r2
 800777a:	0019      	movs	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	2202      	movs	r2, #2
 800778e:	4013      	ands	r3, r2
 8007790:	d00b      	beq.n	80077aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a3b      	ldr	r2, [pc, #236]	; (8007888 <UART_AdvFeatureConfig+0x14c>)
 800779a:	4013      	ands	r3, r2
 800779c:	0019      	movs	r1, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	2204      	movs	r2, #4
 80077b0:	4013      	ands	r3, r2
 80077b2:	d00b      	beq.n	80077cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4a34      	ldr	r2, [pc, #208]	; (800788c <UART_AdvFeatureConfig+0x150>)
 80077bc:	4013      	ands	r3, r2
 80077be:	0019      	movs	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	2210      	movs	r2, #16
 80077d2:	4013      	ands	r3, r2
 80077d4:	d00b      	beq.n	80077ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	4a2c      	ldr	r2, [pc, #176]	; (8007890 <UART_AdvFeatureConfig+0x154>)
 80077de:	4013      	ands	r3, r2
 80077e0:	0019      	movs	r1, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	2220      	movs	r2, #32
 80077f4:	4013      	ands	r3, r2
 80077f6:	d00b      	beq.n	8007810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4a25      	ldr	r2, [pc, #148]	; (8007894 <UART_AdvFeatureConfig+0x158>)
 8007800:	4013      	ands	r3, r2
 8007802:	0019      	movs	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	2240      	movs	r2, #64	; 0x40
 8007816:	4013      	ands	r3, r2
 8007818:	d01d      	beq.n	8007856 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <UART_AdvFeatureConfig+0x15c>)
 8007822:	4013      	ands	r3, r2
 8007824:	0019      	movs	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007836:	2380      	movs	r3, #128	; 0x80
 8007838:	035b      	lsls	r3, r3, #13
 800783a:	429a      	cmp	r2, r3
 800783c:	d10b      	bne.n	8007856 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <UART_AdvFeatureConfig+0x160>)
 8007846:	4013      	ands	r3, r2
 8007848:	0019      	movs	r1, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	4013      	ands	r3, r2
 800785e:	d00b      	beq.n	8007878 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <UART_AdvFeatureConfig+0x164>)
 8007868:	4013      	ands	r3, r2
 800786a:	0019      	movs	r1, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b002      	add	sp, #8
 800787e:	bd80      	pop	{r7, pc}
 8007880:	ffff7fff 	.word	0xffff7fff
 8007884:	fffdffff 	.word	0xfffdffff
 8007888:	fffeffff 	.word	0xfffeffff
 800788c:	fffbffff 	.word	0xfffbffff
 8007890:	ffffefff 	.word	0xffffefff
 8007894:	ffffdfff 	.word	0xffffdfff
 8007898:	ffefffff 	.word	0xffefffff
 800789c:	ff9fffff 	.word	0xff9fffff
 80078a0:	fff7ffff 	.word	0xfff7ffff

080078a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b092      	sub	sp, #72	; 0x48
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2290      	movs	r2, #144	; 0x90
 80078b0:	2100      	movs	r1, #0
 80078b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b4:	f7fc fc80 	bl	80041b8 <HAL_GetTick>
 80078b8:	0003      	movs	r3, r0
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2208      	movs	r2, #8
 80078c4:	4013      	ands	r3, r2
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d12d      	bne.n	8007926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	2280      	movs	r2, #128	; 0x80
 80078ce:	0391      	lsls	r1, r2, #14
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4a47      	ldr	r2, [pc, #284]	; (80079f0 <UART_CheckIdleState+0x14c>)
 80078d4:	9200      	str	r2, [sp, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f000 f88e 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 80078dc:	1e03      	subs	r3, r0, #0
 80078de:	d022      	beq.n	8007926 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e0:	f3ef 8310 	mrs	r3, PRIMASK
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ea:	2301      	movs	r3, #1
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	f383 8810 	msr	PRIMASK, r3
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2180      	movs	r1, #128	; 0x80
 8007902:	438a      	bics	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	f383 8810 	msr	PRIMASK, r3
}
 8007910:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2288      	movs	r2, #136	; 0x88
 8007916:	2120      	movs	r1, #32
 8007918:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2284      	movs	r2, #132	; 0x84
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e060      	b.n	80079e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2204      	movs	r2, #4
 800792e:	4013      	ands	r3, r2
 8007930:	2b04      	cmp	r3, #4
 8007932:	d146      	bne.n	80079c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	03d1      	lsls	r1, r2, #15
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <UART_CheckIdleState+0x14c>)
 800793e:	9200      	str	r2, [sp, #0]
 8007940:	2200      	movs	r2, #0
 8007942:	f000 f859 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 8007946:	1e03      	subs	r3, r0, #0
 8007948:	d03b      	beq.n	80079c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794a:	f3ef 8310 	mrs	r3, PRIMASK
 800794e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	2301      	movs	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f383 8810 	msr	PRIMASK, r3
}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4922      	ldr	r1, [pc, #136]	; (80079f4 <UART_CheckIdleState+0x150>)
 800796c:	400a      	ands	r2, r1
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f383 8810 	msr	PRIMASK, r3
}
 800797a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800797c:	f3ef 8310 	mrs	r3, PRIMASK
 8007980:	61bb      	str	r3, [r7, #24]
  return(result);
 8007982:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007984:	633b      	str	r3, [r7, #48]	; 0x30
 8007986:	2301      	movs	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f383 8810 	msr	PRIMASK, r3
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2101      	movs	r1, #1
 800799e:	438a      	bics	r2, r1
 80079a0:	609a      	str	r2, [r3, #8]
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	f383 8810 	msr	PRIMASK, r3
}
 80079ac:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	228c      	movs	r2, #140	; 0x8c
 80079b2:	2120      	movs	r1, #32
 80079b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2284      	movs	r2, #132	; 0x84
 80079ba:	2100      	movs	r1, #0
 80079bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e012      	b.n	80079e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2288      	movs	r2, #136	; 0x88
 80079c6:	2120      	movs	r1, #32
 80079c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	228c      	movs	r2, #140	; 0x8c
 80079ce:	2120      	movs	r1, #32
 80079d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2284      	movs	r2, #132	; 0x84
 80079e2:	2100      	movs	r1, #0
 80079e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	0018      	movs	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b010      	add	sp, #64	; 0x40
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	01ffffff 	.word	0x01ffffff
 80079f4:	fffffedf 	.word	0xfffffedf

080079f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a08:	e051      	b.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	d04e      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a10:	f7fc fbd2 	bl	80041b8 <HAL_GetTick>
 8007a14:	0002      	movs	r2, r0
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e051      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2204      	movs	r2, #4
 8007a32:	4013      	ands	r3, r2
 8007a34:	d03b      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d038      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d035      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	2208      	movs	r2, #8
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d111      	bne.n	8007a74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2208      	movs	r2, #8
 8007a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f000 f83c 	bl	8007ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2290      	movs	r2, #144	; 0x90
 8007a64:	2108      	movs	r1, #8
 8007a66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2284      	movs	r2, #132	; 0x84
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e02c      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69da      	ldr	r2, [r3, #28]
 8007a7a:	2380      	movs	r3, #128	; 0x80
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	401a      	ands	r2, r3
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d112      	bne.n	8007aae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2280      	movs	r2, #128	; 0x80
 8007a8e:	0112      	lsls	r2, r2, #4
 8007a90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 f81f 	bl	8007ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2290      	movs	r2, #144	; 0x90
 8007a9e:	2120      	movs	r1, #32
 8007aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2284      	movs	r2, #132	; 0x84
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e00f      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	425a      	negs	r2, r3
 8007abe:	4153      	adcs	r3, r2
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	001a      	movs	r2, r3
 8007ac4:	1dfb      	adds	r3, r7, #7
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d09e      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	0018      	movs	r0, r3
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b004      	add	sp, #16
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08e      	sub	sp, #56	; 0x38
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ae6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aea:	2301      	movs	r3, #1
 8007aec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f383 8810 	msr	PRIMASK, r3
}
 8007af4:	46c0      	nop			; (mov r8, r8)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4926      	ldr	r1, [pc, #152]	; (8007b9c <UART_EndRxTransfer+0xc4>)
 8007b02:	400a      	ands	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f383 8810 	msr	PRIMASK, r3
}
 8007b10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b12:	f3ef 8310 	mrs	r3, PRIMASK
 8007b16:	623b      	str	r3, [r7, #32]
  return(result);
 8007b18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	f383 8810 	msr	PRIMASK, r3
}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	491b      	ldr	r1, [pc, #108]	; (8007ba0 <UART_EndRxTransfer+0xc8>)
 8007b34:	400a      	ands	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	f383 8810 	msr	PRIMASK, r3
}
 8007b42:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d118      	bne.n	8007b7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b56:	2301      	movs	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2110      	movs	r1, #16
 8007b6e:	438a      	bics	r2, r1
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	228c      	movs	r2, #140	; 0x8c
 8007b82:	2120      	movs	r1, #32
 8007b84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b00e      	add	sp, #56	; 0x38
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	fffffedf 	.word	0xfffffedf
 8007ba0:	effffffe 	.word	0xeffffffe

08007ba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2284      	movs	r2, #132	; 0x84
 8007bb0:	5c9b      	ldrb	r3, [r3, r2]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UARTEx_DisableFifoMode+0x16>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e027      	b.n	8007c0a <HAL_UARTEx_DisableFifoMode+0x66>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2284      	movs	r2, #132	; 0x84
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2288      	movs	r2, #136	; 0x88
 8007bc6:	2124      	movs	r1, #36	; 0x24
 8007bc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	438a      	bics	r2, r1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a0b      	ldr	r2, [pc, #44]	; (8007c14 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2288      	movs	r2, #136	; 0x88
 8007bfc:	2120      	movs	r1, #32
 8007bfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2284      	movs	r2, #132	; 0x84
 8007c04:	2100      	movs	r1, #0
 8007c06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	dfffffff 	.word	0xdfffffff

08007c18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2284      	movs	r2, #132	; 0x84
 8007c26:	5c9b      	ldrb	r3, [r3, r2]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e02e      	b.n	8007c8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2284      	movs	r2, #132	; 0x84
 8007c34:	2101      	movs	r1, #1
 8007c36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2288      	movs	r2, #136	; 0x88
 8007c3c:	2124      	movs	r1, #36	; 0x24
 8007c3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2101      	movs	r1, #1
 8007c54:	438a      	bics	r2, r1
 8007c56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	08d9      	lsrs	r1, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f000 f854 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2288      	movs	r2, #136	; 0x88
 8007c80:	2120      	movs	r1, #32
 8007c82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2284      	movs	r2, #132	; 0x84
 8007c88:	2100      	movs	r1, #0
 8007c8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	0018      	movs	r0, r3
 8007c90:	46bd      	mov	sp, r7
 8007c92:	b004      	add	sp, #16
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2284      	movs	r2, #132	; 0x84
 8007ca6:	5c9b      	ldrb	r3, [r3, r2]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e02f      	b.n	8007d10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2284      	movs	r2, #132	; 0x84
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2288      	movs	r2, #136	; 0x88
 8007cbc:	2124      	movs	r1, #36	; 0x24
 8007cbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	438a      	bics	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	4a0e      	ldr	r2, [pc, #56]	; (8007d18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	0019      	movs	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f000 f813 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2288      	movs	r2, #136	; 0x88
 8007d02:	2120      	movs	r1, #32
 8007d04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2284      	movs	r2, #132	; 0x84
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b004      	add	sp, #16
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	f1ffffff 	.word	0xf1ffffff

08007d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d108      	bne.n	8007d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	226a      	movs	r2, #106	; 0x6a
 8007d30:	2101      	movs	r1, #1
 8007d32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2268      	movs	r2, #104	; 0x68
 8007d38:	2101      	movs	r1, #1
 8007d3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d3c:	e043      	b.n	8007dc6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d3e:	260f      	movs	r6, #15
 8007d40:	19bb      	adds	r3, r7, r6
 8007d42:	2208      	movs	r2, #8
 8007d44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d46:	200e      	movs	r0, #14
 8007d48:	183b      	adds	r3, r7, r0
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	0e5b      	lsrs	r3, r3, #25
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	240d      	movs	r4, #13
 8007d5a:	193b      	adds	r3, r7, r4
 8007d5c:	2107      	movs	r1, #7
 8007d5e:	400a      	ands	r2, r1
 8007d60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	0f5b      	lsrs	r3, r3, #29
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	250c      	movs	r5, #12
 8007d6e:	197b      	adds	r3, r7, r5
 8007d70:	2107      	movs	r1, #7
 8007d72:	400a      	ands	r2, r1
 8007d74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d76:	183b      	adds	r3, r7, r0
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	197a      	adds	r2, r7, r5
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	4914      	ldr	r1, [pc, #80]	; (8007dd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007d80:	5c8a      	ldrb	r2, [r1, r2]
 8007d82:	435a      	muls	r2, r3
 8007d84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d86:	197b      	adds	r3, r7, r5
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	4a12      	ldr	r2, [pc, #72]	; (8007dd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007d8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d8e:	0019      	movs	r1, r3
 8007d90:	f7f8 fa5e 	bl	8000250 <__divsi3>
 8007d94:	0003      	movs	r3, r0
 8007d96:	b299      	uxth	r1, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	226a      	movs	r2, #106	; 0x6a
 8007d9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d9e:	19bb      	adds	r3, r7, r6
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	193a      	adds	r2, r7, r4
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	490a      	ldr	r1, [pc, #40]	; (8007dd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007da8:	5c8a      	ldrb	r2, [r1, r2]
 8007daa:	435a      	muls	r2, r3
 8007dac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dae:	193b      	adds	r3, r7, r4
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007db4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007db6:	0019      	movs	r1, r3
 8007db8:	f7f8 fa4a 	bl	8000250 <__divsi3>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	b299      	uxth	r1, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2268      	movs	r2, #104	; 0x68
 8007dc4:	5299      	strh	r1, [r3, r2]
}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b005      	add	sp, #20
 8007dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	0801482c 	.word	0x0801482c
 8007dd4:	08014834 	.word	0x08014834

08007dd8 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007dd8:	b5b0      	push	{r4, r5, r7, lr}
 8007dda:	b0e4      	sub	sp, #400	; 0x190
 8007ddc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007dde:	24c8      	movs	r4, #200	; 0xc8
 8007de0:	193b      	adds	r3, r7, r4
 8007de2:	0018      	movs	r0, r3
 8007de4:	23c6      	movs	r3, #198	; 0xc6
 8007de6:	001a      	movs	r2, r3
 8007de8:	2100      	movs	r1, #0
 8007dea:	f004 f9cd 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <astronode_send_cfg_sr+0x64>)
 8007df0:	25c8      	movs	r5, #200	; 0xc8
 8007df2:	006d      	lsls	r5, r5, #1
 8007df4:	195b      	adds	r3, r3, r5
 8007df6:	19db      	adds	r3, r3, r7
 8007df8:	0018      	movs	r0, r3
 8007dfa:	23c6      	movs	r3, #198	; 0xc6
 8007dfc:	001a      	movs	r2, r3
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f004 f9c2 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007e04:	193b      	adds	r3, r7, r4
 8007e06:	2210      	movs	r2, #16
 8007e08:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007e0a:	003a      	movs	r2, r7
 8007e0c:	193b      	adds	r3, r7, r4
 8007e0e:	0011      	movs	r1, r2
 8007e10:	0018      	movs	r0, r3
 8007e12:	f001 fa87 	bl	8009324 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <astronode_send_cfg_sr+0x64>)
 8007e18:	195b      	adds	r3, r3, r5
 8007e1a:	19db      	adds	r3, r3, r7
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b90      	cmp	r3, #144	; 0x90
 8007e20:	d104      	bne.n	8007e2c <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007e22:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <astronode_send_cfg_sr+0x68>)
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fb f927 	bl	8003078 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007e2a:	e003      	b.n	8007e34 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <astronode_send_cfg_sr+0x6c>)
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f7fb f922 	bl	8003078 <send_debug_logs>
}
 8007e34:	46c0      	nop			; (mov r8, r8)
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b064      	add	sp, #400	; 0x190
 8007e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e3c:	fffffe70 	.word	0xfffffe70
 8007e40:	08013250 	.word	0x08013250
 8007e44:	08013284 	.word	0x08013284

08007e48 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4a:	b0e7      	sub	sp, #412	; 0x19c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	0005      	movs	r5, r0
 8007e50:	000c      	movs	r4, r1
 8007e52:	0010      	movs	r0, r2
 8007e54:	0019      	movs	r1, r3
 8007e56:	4b4b      	ldr	r3, [pc, #300]	; (8007f84 <astronode_send_cfg_wr+0x13c>)
 8007e58:	26cc      	movs	r6, #204	; 0xcc
 8007e5a:	0076      	lsls	r6, r6, #1
 8007e5c:	199b      	adds	r3, r3, r6
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	1c2a      	adds	r2, r5, #0
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	4b48      	ldr	r3, [pc, #288]	; (8007f88 <astronode_send_cfg_wr+0x140>)
 8007e66:	0035      	movs	r5, r6
 8007e68:	195b      	adds	r3, r3, r5
 8007e6a:	19db      	adds	r3, r3, r7
 8007e6c:	1c22      	adds	r2, r4, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <astronode_send_cfg_wr+0x144>)
 8007e72:	002c      	movs	r4, r5
 8007e74:	191b      	adds	r3, r3, r4
 8007e76:	19db      	adds	r3, r3, r7
 8007e78:	1c02      	adds	r2, r0, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	4b44      	ldr	r3, [pc, #272]	; (8007f90 <astronode_send_cfg_wr+0x148>)
 8007e7e:	191b      	adds	r3, r3, r4
 8007e80:	19db      	adds	r3, r3, r7
 8007e82:	1c0a      	adds	r2, r1, #0
 8007e84:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007e86:	25d0      	movs	r5, #208	; 0xd0
 8007e88:	197b      	adds	r3, r7, r5
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	23c6      	movs	r3, #198	; 0xc6
 8007e8e:	001a      	movs	r2, r3
 8007e90:	2100      	movs	r1, #0
 8007e92:	f004 f979 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8007e96:	4b3f      	ldr	r3, [pc, #252]	; (8007f94 <astronode_send_cfg_wr+0x14c>)
 8007e98:	191b      	adds	r3, r3, r4
 8007e9a:	19db      	adds	r3, r3, r7
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	23c6      	movs	r3, #198	; 0xc6
 8007ea0:	001a      	movs	r2, r3
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	f004 f970 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007ea8:	0029      	movs	r1, r5
 8007eaa:	187b      	adds	r3, r7, r1
 8007eac:	2205      	movs	r2, #5
 8007eae:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007eb0:	4b34      	ldr	r3, [pc, #208]	; (8007f84 <astronode_send_cfg_wr+0x13c>)
 8007eb2:	191b      	adds	r3, r3, r4
 8007eb4:	19db      	adds	r3, r3, r7
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	569a      	ldrsb	r2, [r3, r2]
 8007eba:	4b33      	ldr	r3, [pc, #204]	; (8007f88 <astronode_send_cfg_wr+0x140>)
 8007ebc:	191b      	adds	r3, r3, r4
 8007ebe:	19db      	adds	r3, r3, r7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007eca:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <astronode_send_cfg_wr+0x144>)
 8007ecc:	191b      	adds	r3, r3, r4
 8007ece:	19db      	adds	r3, r3, r7
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007eda:	4b2d      	ldr	r3, [pc, #180]	; (8007f90 <astronode_send_cfg_wr+0x148>)
 8007edc:	191b      	adds	r3, r3, r4
 8007ede:	19db      	adds	r3, r3, r7
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	b25b      	sxtb	r3, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b25b      	sxtb	r3, r3
 8007eea:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007eec:	187b      	adds	r3, r7, r1
 8007eee:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007ef0:	23d4      	movs	r3, #212	; 0xd4
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	2508      	movs	r5, #8
 8007ef6:	195b      	adds	r3, r3, r5
 8007ef8:	19db      	adds	r3, r3, r7
 8007efa:	2200      	movs	r2, #0
 8007efc:	569a      	ldrsb	r2, [r3, r2]
 8007efe:	23d6      	movs	r3, #214	; 0xd6
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	195b      	adds	r3, r3, r5
 8007f04:	19db      	adds	r3, r3, r7
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007f10:	23d8      	movs	r3, #216	; 0xd8
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	195b      	adds	r3, r3, r5
 8007f16:	19db      	adds	r3, r3, r7
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007f22:	23da      	movs	r3, #218	; 0xda
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	195b      	adds	r3, r3, r5
 8007f28:	19db      	adds	r3, r3, r7
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	b25b      	sxtb	r3, r3
 8007f30:	4313      	orrs	r3, r2
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007f3a:	0008      	movs	r0, r1
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	22c4      	movs	r2, #196	; 0xc4
 8007f40:	2103      	movs	r1, #3
 8007f42:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f44:	002b      	movs	r3, r5
 8007f46:	18fa      	adds	r2, r7, r3
 8007f48:	183b      	adds	r3, r7, r0
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f001 f9e9 	bl	8009324 <astronode_transport_send_receive>
 8007f52:	0003      	movs	r3, r0
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d10f      	bne.n	8007f78 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007f58:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <astronode_send_cfg_wr+0x14c>)
 8007f5a:	191b      	adds	r3, r3, r4
 8007f5c:	19db      	adds	r3, r3, r7
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b85      	cmp	r3, #133	; 0x85
 8007f62:	d105      	bne.n	8007f70 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <astronode_send_cfg_wr+0x150>)
 8007f66:	0018      	movs	r0, r3
 8007f68:	f7fb f886 	bl	8003078 <send_debug_logs>
            return true ;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e004      	b.n	8007f7a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <astronode_send_cfg_wr+0x154>)
 8007f72:	0018      	movs	r0, r3
 8007f74:	f7fb f880 	bl	8003078 <send_debug_logs>
        }
    }
    return false ;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b067      	add	sp, #412	; 0x19c
 8007f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	fffffe6f 	.word	0xfffffe6f
 8007f88:	fffffe6e 	.word	0xfffffe6e
 8007f8c:	fffffe6d 	.word	0xfffffe6d
 8007f90:	fffffe6c 	.word	0xfffffe6c
 8007f94:	fffffe70 	.word	0xfffffe70
 8007f98:	080132b8 	.word	0x080132b8
 8007f9c:	080132e4 	.word	0x080132e4

08007fa0 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	b0ed      	sub	sp, #436	; 0x1b4
 8007fa4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fa6:	21c8      	movs	r1, #200	; 0xc8
 8007fa8:	2318      	movs	r3, #24
 8007faa:	18cb      	adds	r3, r1, r3
 8007fac:	19db      	adds	r3, r3, r7
 8007fae:	0018      	movs	r0, r3
 8007fb0:	23c6      	movs	r3, #198	; 0xc6
 8007fb2:	001a      	movs	r2, r3
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f004 f8e7 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8007fba:	4b4a      	ldr	r3, [pc, #296]	; (80080e4 <astronode_send_mgi_rr+0x144>)
 8007fbc:	26cc      	movs	r6, #204	; 0xcc
 8007fbe:	0076      	lsls	r6, r6, #1
 8007fc0:	199b      	adds	r3, r3, r6
 8007fc2:	2218      	movs	r2, #24
 8007fc4:	4694      	mov	ip, r2
 8007fc6:	44bc      	add	ip, r7
 8007fc8:	4463      	add	r3, ip
 8007fca:	0018      	movs	r0, r3
 8007fcc:	23c6      	movs	r3, #198	; 0xc6
 8007fce:	001a      	movs	r2, r3
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	f004 f8d9 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007fd6:	21c8      	movs	r1, #200	; 0xc8
 8007fd8:	2318      	movs	r3, #24
 8007fda:	18cb      	adds	r3, r1, r3
 8007fdc:	19db      	adds	r3, r3, r7
 8007fde:	2219      	movs	r2, #25
 8007fe0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007fe2:	2318      	movs	r3, #24
 8007fe4:	18fa      	adds	r2, r7, r3
 8007fe6:	2318      	movs	r3, #24
 8007fe8:	18cb      	adds	r3, r1, r3
 8007fea:	19db      	adds	r3, r3, r7
 8007fec:	0011      	movs	r1, r2
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f001 f998 	bl	8009324 <astronode_transport_send_receive>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d16f      	bne.n	80080da <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007ffa:	4b3a      	ldr	r3, [pc, #232]	; (80080e4 <astronode_send_mgi_rr+0x144>)
 8007ffc:	0032      	movs	r2, r6
 8007ffe:	189b      	adds	r3, r3, r2
 8008000:	2118      	movs	r1, #24
 8008002:	468c      	mov	ip, r1
 8008004:	44bc      	add	ip, r7
 8008006:	4463      	add	r3, ip
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b99      	cmp	r3, #153	; 0x99
 800800c:	d161      	bne.n	80080d2 <astronode_send_mgi_rr+0x132>
        {
 800800e:	466b      	mov	r3, sp
 8008010:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008012:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <astronode_send_mgi_rr+0x144>)
 8008014:	189b      	adds	r3, r3, r2
 8008016:	2218      	movs	r2, #24
 8008018:	4694      	mov	ip, r2
 800801a:	44bc      	add	ip, r7
 800801c:	4463      	add	r3, ip
 800801e:	22c4      	movs	r2, #196	; 0xc4
 8008020:	5a9b      	ldrh	r3, [r3, r2]
 8008022:	001a      	movs	r2, r3
 8008024:	3a01      	subs	r2, #1
 8008026:	21ca      	movs	r1, #202	; 0xca
 8008028:	0049      	lsls	r1, r1, #1
 800802a:	2018      	movs	r0, #24
 800802c:	1809      	adds	r1, r1, r0
 800802e:	19c9      	adds	r1, r1, r7
 8008030:	600a      	str	r2, [r1, #0]
 8008032:	001c      	movs	r4, r3
 8008034:	2200      	movs	r2, #0
 8008036:	0015      	movs	r5, r2
 8008038:	0020      	movs	r0, r4
 800803a:	0029      	movs	r1, r5
 800803c:	0004      	movs	r4, r0
 800803e:	0f62      	lsrs	r2, r4, #29
 8008040:	000c      	movs	r4, r1
 8008042:	00e4      	lsls	r4, r4, #3
 8008044:	617c      	str	r4, [r7, #20]
 8008046:	697c      	ldr	r4, [r7, #20]
 8008048:	4314      	orrs	r4, r2
 800804a:	617c      	str	r4, [r7, #20]
 800804c:	0001      	movs	r1, r0
 800804e:	00c9      	lsls	r1, r1, #3
 8008050:	6139      	str	r1, [r7, #16]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	0004      	movs	r4, r0
 800805e:	0f62      	lsrs	r2, r4, #29
 8008060:	000c      	movs	r4, r1
 8008062:	00e4      	lsls	r4, r4, #3
 8008064:	60fc      	str	r4, [r7, #12]
 8008066:	68fc      	ldr	r4, [r7, #12]
 8008068:	4314      	orrs	r4, r2
 800806a:	60fc      	str	r4, [r7, #12]
 800806c:	0001      	movs	r1, r0
 800806e:	00ca      	lsls	r2, r1, #3
 8008070:	60ba      	str	r2, [r7, #8]
 8008072:	3307      	adds	r3, #7
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4669      	mov	r1, sp
 800807a:	1acb      	subs	r3, r1, r3
 800807c:	469d      	mov	sp, r3
 800807e:	466b      	mov	r3, sp
 8008080:	3300      	adds	r3, #0
 8008082:	24c8      	movs	r4, #200	; 0xc8
 8008084:	0064      	lsls	r4, r4, #1
 8008086:	2218      	movs	r2, #24
 8008088:	18a2      	adds	r2, r4, r2
 800808a:	19d1      	adds	r1, r2, r7
 800808c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <astronode_send_mgi_rr+0x148>)
 8008090:	0018      	movs	r0, r3
 8008092:	f7fa fff1 	bl	8003078 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8008096:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <astronode_send_mgi_rr+0x144>)
 8008098:	22cc      	movs	r2, #204	; 0xcc
 800809a:	0052      	lsls	r2, r2, #1
 800809c:	189b      	adds	r3, r3, r2
 800809e:	2218      	movs	r2, #24
 80080a0:	4694      	mov	ip, r2
 80080a2:	44bc      	add	ip, r7
 80080a4:	4463      	add	r3, ip
 80080a6:	22c4      	movs	r2, #196	; 0xc4
 80080a8:	5a9b      	ldrh	r3, [r3, r2]
 80080aa:	0019      	movs	r1, r3
 80080ac:	2318      	movs	r3, #24
 80080ae:	18fb      	adds	r3, r7, r3
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <astronode_send_mgi_rr+0x14c>)
 80080b4:	2018      	movs	r0, #24
 80080b6:	1820      	adds	r0, r4, r0
 80080b8:	19c0      	adds	r0, r0, r7
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	f003 ff9a 	bl	800bff4 <snprintf>
            send_debug_logs(guid);
 80080c0:	2318      	movs	r3, #24
 80080c2:	18e3      	adds	r3, r4, r3
 80080c4:	19db      	adds	r3, r3, r7
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7fa ffd5 	bl	8003078 <send_debug_logs>
 80080ce:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80080d0:	e003      	b.n	80080da <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80080d2:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <astronode_send_mgi_rr+0x150>)
 80080d4:	0018      	movs	r0, r3
 80080d6:	f7fa ffcf 	bl	8003078 <send_debug_logs>
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	46bd      	mov	sp, r7
 80080de:	b06d      	add	sp, #436	; 0x1b4
 80080e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	fffffe68 	.word	0xfffffe68
 80080e8:	08013370 	.word	0x08013370
 80080ec:	08013380 	.word	0x08013380
 80080f0:	08013384 	.word	0x08013384

080080f4 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 80080f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080f6:	b0ed      	sub	sp, #436	; 0x1b4
 80080f8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80080fa:	21c8      	movs	r1, #200	; 0xc8
 80080fc:	2318      	movs	r3, #24
 80080fe:	18cb      	adds	r3, r1, r3
 8008100:	19db      	adds	r3, r3, r7
 8008102:	0018      	movs	r0, r3
 8008104:	23c6      	movs	r3, #198	; 0xc6
 8008106:	001a      	movs	r2, r3
 8008108:	2100      	movs	r1, #0
 800810a:	f004 f83d 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 800810e:	4b4a      	ldr	r3, [pc, #296]	; (8008238 <astronode_send_msn_rr+0x144>)
 8008110:	26cc      	movs	r6, #204	; 0xcc
 8008112:	0076      	lsls	r6, r6, #1
 8008114:	199b      	adds	r3, r3, r6
 8008116:	2218      	movs	r2, #24
 8008118:	4694      	mov	ip, r2
 800811a:	44bc      	add	ip, r7
 800811c:	4463      	add	r3, ip
 800811e:	0018      	movs	r0, r3
 8008120:	23c6      	movs	r3, #198	; 0xc6
 8008122:	001a      	movs	r2, r3
 8008124:	2100      	movs	r1, #0
 8008126:	f004 f82f 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800812a:	21c8      	movs	r1, #200	; 0xc8
 800812c:	2318      	movs	r3, #24
 800812e:	18cb      	adds	r3, r1, r3
 8008130:	19db      	adds	r3, r3, r7
 8008132:	221a      	movs	r2, #26
 8008134:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008136:	2318      	movs	r3, #24
 8008138:	18fa      	adds	r2, r7, r3
 800813a:	2318      	movs	r3, #24
 800813c:	18cb      	adds	r3, r1, r3
 800813e:	19db      	adds	r3, r3, r7
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f001 f8ee 	bl	8009324 <astronode_transport_send_receive>
 8008148:	0003      	movs	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d16f      	bne.n	800822e <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800814e:	4b3a      	ldr	r3, [pc, #232]	; (8008238 <astronode_send_msn_rr+0x144>)
 8008150:	0032      	movs	r2, r6
 8008152:	189b      	adds	r3, r3, r2
 8008154:	2118      	movs	r1, #24
 8008156:	468c      	mov	ip, r1
 8008158:	44bc      	add	ip, r7
 800815a:	4463      	add	r3, ip
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b9a      	cmp	r3, #154	; 0x9a
 8008160:	d161      	bne.n	8008226 <astronode_send_msn_rr+0x132>
        {
 8008162:	466b      	mov	r3, sp
 8008164:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8008166:	4b34      	ldr	r3, [pc, #208]	; (8008238 <astronode_send_msn_rr+0x144>)
 8008168:	189b      	adds	r3, r3, r2
 800816a:	2218      	movs	r2, #24
 800816c:	4694      	mov	ip, r2
 800816e:	44bc      	add	ip, r7
 8008170:	4463      	add	r3, ip
 8008172:	22c4      	movs	r2, #196	; 0xc4
 8008174:	5a9b      	ldrh	r3, [r3, r2]
 8008176:	001a      	movs	r2, r3
 8008178:	3a01      	subs	r2, #1
 800817a:	21ca      	movs	r1, #202	; 0xca
 800817c:	0049      	lsls	r1, r1, #1
 800817e:	2018      	movs	r0, #24
 8008180:	1809      	adds	r1, r1, r0
 8008182:	19c9      	adds	r1, r1, r7
 8008184:	600a      	str	r2, [r1, #0]
 8008186:	001c      	movs	r4, r3
 8008188:	2200      	movs	r2, #0
 800818a:	0015      	movs	r5, r2
 800818c:	0020      	movs	r0, r4
 800818e:	0029      	movs	r1, r5
 8008190:	0004      	movs	r4, r0
 8008192:	0f62      	lsrs	r2, r4, #29
 8008194:	000c      	movs	r4, r1
 8008196:	00e4      	lsls	r4, r4, #3
 8008198:	617c      	str	r4, [r7, #20]
 800819a:	697c      	ldr	r4, [r7, #20]
 800819c:	4314      	orrs	r4, r2
 800819e:	617c      	str	r4, [r7, #20]
 80081a0:	0001      	movs	r1, r0
 80081a2:	00c9      	lsls	r1, r1, #3
 80081a4:	6139      	str	r1, [r7, #16]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	6838      	ldr	r0, [r7, #0]
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	0004      	movs	r4, r0
 80081b2:	0f62      	lsrs	r2, r4, #29
 80081b4:	000c      	movs	r4, r1
 80081b6:	00e4      	lsls	r4, r4, #3
 80081b8:	60fc      	str	r4, [r7, #12]
 80081ba:	68fc      	ldr	r4, [r7, #12]
 80081bc:	4314      	orrs	r4, r2
 80081be:	60fc      	str	r4, [r7, #12]
 80081c0:	0001      	movs	r1, r0
 80081c2:	00ca      	lsls	r2, r1, #3
 80081c4:	60ba      	str	r2, [r7, #8]
 80081c6:	3307      	adds	r3, #7
 80081c8:	08db      	lsrs	r3, r3, #3
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4669      	mov	r1, sp
 80081ce:	1acb      	subs	r3, r1, r3
 80081d0:	469d      	mov	sp, r3
 80081d2:	466b      	mov	r3, sp
 80081d4:	3300      	adds	r3, #0
 80081d6:	24c8      	movs	r4, #200	; 0xc8
 80081d8:	0064      	lsls	r4, r4, #1
 80081da:	2218      	movs	r2, #24
 80081dc:	18a2      	adds	r2, r4, r2
 80081de:	19d1      	adds	r1, r2, r7
 80081e0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80081e2:	4b16      	ldr	r3, [pc, #88]	; (800823c <astronode_send_msn_rr+0x148>)
 80081e4:	0018      	movs	r0, r3
 80081e6:	f7fa ff47 	bl	8003078 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <astronode_send_msn_rr+0x144>)
 80081ec:	22cc      	movs	r2, #204	; 0xcc
 80081ee:	0052      	lsls	r2, r2, #1
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	2218      	movs	r2, #24
 80081f4:	4694      	mov	ip, r2
 80081f6:	44bc      	add	ip, r7
 80081f8:	4463      	add	r3, ip
 80081fa:	22c4      	movs	r2, #196	; 0xc4
 80081fc:	5a9b      	ldrh	r3, [r3, r2]
 80081fe:	0019      	movs	r1, r3
 8008200:	2318      	movs	r3, #24
 8008202:	18fb      	adds	r3, r7, r3
 8008204:	3301      	adds	r3, #1
 8008206:	4a0e      	ldr	r2, [pc, #56]	; (8008240 <astronode_send_msn_rr+0x14c>)
 8008208:	2018      	movs	r0, #24
 800820a:	1820      	adds	r0, r4, r0
 800820c:	19c0      	adds	r0, r0, r7
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	f003 fef0 	bl	800bff4 <snprintf>
            send_debug_logs(serial_number);
 8008214:	2318      	movs	r3, #24
 8008216:	18e3      	adds	r3, r4, r3
 8008218:	19db      	adds	r3, r3, r7
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	0018      	movs	r0, r3
 800821e:	f7fa ff2b 	bl	8003078 <send_debug_logs>
 8008222:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008224:	e003      	b.n	800822e <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008226:	4b07      	ldr	r3, [pc, #28]	; (8008244 <astronode_send_msn_rr+0x150>)
 8008228:	0018      	movs	r0, r3
 800822a:	f7fa ff25 	bl	8003078 <send_debug_logs>
}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b06d      	add	sp, #436	; 0x1b4
 8008234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	fffffe68 	.word	0xfffffe68
 800823c:	080133a0 	.word	0x080133a0
 8008240:	08013380 	.word	0x08013380
 8008244:	080133bc 	.word	0x080133bc

08008248 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8008248:	b5b0      	push	{r4, r5, r7, lr}
 800824a:	b0e4      	sub	sp, #400	; 0x190
 800824c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800824e:	24c8      	movs	r4, #200	; 0xc8
 8008250:	193b      	adds	r3, r7, r4
 8008252:	0018      	movs	r0, r3
 8008254:	23c6      	movs	r3, #198	; 0xc6
 8008256:	001a      	movs	r2, r3
 8008258:	2100      	movs	r1, #0
 800825a:	f003 ff95 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 800825e:	4b31      	ldr	r3, [pc, #196]	; (8008324 <astronode_send_evt_rr+0xdc>)
 8008260:	25c8      	movs	r5, #200	; 0xc8
 8008262:	006d      	lsls	r5, r5, #1
 8008264:	195b      	adds	r3, r3, r5
 8008266:	19db      	adds	r3, r3, r7
 8008268:	0018      	movs	r0, r3
 800826a:	23c6      	movs	r3, #198	; 0xc6
 800826c:	001a      	movs	r2, r3
 800826e:	2100      	movs	r1, #0
 8008270:	f003 ff8a 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008274:	193b      	adds	r3, r7, r4
 8008276:	2265      	movs	r2, #101	; 0x65
 8008278:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800827a:	003a      	movs	r2, r7
 800827c:	193b      	adds	r3, r7, r4
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f001 f84f 	bl	8009324 <astronode_transport_send_receive>
 8008286:	0003      	movs	r3, r0
 8008288:	2b01      	cmp	r3, #1
 800828a:	d147      	bne.n	800831c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 800828c:	4b25      	ldr	r3, [pc, #148]	; (8008324 <astronode_send_evt_rr+0xdc>)
 800828e:	195b      	adds	r3, r3, r5
 8008290:	19db      	adds	r3, r3, r7
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2be5      	cmp	r3, #229	; 0xe5
 8008296:	d141      	bne.n	800831c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8008298:	4b22      	ldr	r3, [pc, #136]	; (8008324 <astronode_send_evt_rr+0xdc>)
 800829a:	195b      	adds	r3, r3, r5
 800829c:	19db      	adds	r3, r3, r7
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	001a      	movs	r2, r3
 80082a2:	2301      	movs	r3, #1
 80082a4:	4013      	ands	r3, r2
 80082a6:	d006      	beq.n	80082b6 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <astronode_send_evt_rr+0xe0>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <astronode_send_evt_rr+0xe4>)
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7fa fee1 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80082b6:	4b1b      	ldr	r3, [pc, #108]	; (8008324 <astronode_send_evt_rr+0xdc>)
 80082b8:	22c8      	movs	r2, #200	; 0xc8
 80082ba:	0052      	lsls	r2, r2, #1
 80082bc:	189b      	adds	r3, r3, r2
 80082be:	19db      	adds	r3, r3, r7
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	001a      	movs	r2, r3
 80082c4:	2302      	movs	r3, #2
 80082c6:	4013      	ands	r3, r2
 80082c8:	d006      	beq.n	80082d8 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80082ca:	4b19      	ldr	r3, [pc, #100]	; (8008330 <astronode_send_evt_rr+0xe8>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80082d0:	4b18      	ldr	r3, [pc, #96]	; (8008334 <astronode_send_evt_rr+0xec>)
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7fa fed0 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <astronode_send_evt_rr+0xdc>)
 80082da:	22c8      	movs	r2, #200	; 0xc8
 80082dc:	0052      	lsls	r2, r2, #1
 80082de:	189b      	adds	r3, r3, r2
 80082e0:	19db      	adds	r3, r3, r7
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	001a      	movs	r2, r3
 80082e6:	2304      	movs	r3, #4
 80082e8:	4013      	ands	r3, r2
 80082ea:	d006      	beq.n	80082fa <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80082ec:	4b12      	ldr	r3, [pc, #72]	; (8008338 <astronode_send_evt_rr+0xf0>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <astronode_send_evt_rr+0xf4>)
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7fa febf 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <astronode_send_evt_rr+0xdc>)
 80082fc:	22c8      	movs	r2, #200	; 0xc8
 80082fe:	0052      	lsls	r2, r2, #1
 8008300:	189b      	adds	r3, r3, r2
 8008302:	19db      	adds	r3, r3, r7
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	001a      	movs	r2, r3
 8008308:	2308      	movs	r3, #8
 800830a:	4013      	ands	r3, r2
 800830c:	d006      	beq.n	800831c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <astronode_send_evt_rr+0xf8>)
 8008310:	2201      	movs	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008314:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <astronode_send_evt_rr+0xfc>)
 8008316:	0018      	movs	r0, r3
 8008318:	f7fa feae 	bl	8003078 <send_debug_logs>
            }

        }
    }
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b064      	add	sp, #400	; 0x190
 8008322:	bdb0      	pop	{r4, r5, r7, pc}
 8008324:	fffffe70 	.word	0xfffffe70
 8008328:	20000b0c 	.word	0x20000b0c
 800832c:	08013464 	.word	0x08013464
 8008330:	20000b0d 	.word	0x20000b0d
 8008334:	08013488 	.word	0x08013488
 8008338:	20000b0e 	.word	0x20000b0e
 800833c:	080134a0 	.word	0x080134a0
 8008340:	20000b0f 	.word	0x20000b0f
 8008344:	080134b4 	.word	0x080134b4

08008348 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	b0e7      	sub	sp, #412	; 0x19c
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008352:	24d0      	movs	r4, #208	; 0xd0
 8008354:	193b      	adds	r3, r7, r4
 8008356:	0018      	movs	r0, r3
 8008358:	23c6      	movs	r3, #198	; 0xc6
 800835a:	001a      	movs	r2, r3
 800835c:	2100      	movs	r1, #0
 800835e:	f003 ff13 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8008362:	4b56      	ldr	r3, [pc, #344]	; (80084bc <astronode_send_geo_wr+0x174>)
 8008364:	26cc      	movs	r6, #204	; 0xcc
 8008366:	0076      	lsls	r6, r6, #1
 8008368:	199b      	adds	r3, r3, r6
 800836a:	19db      	adds	r3, r3, r7
 800836c:	0018      	movs	r0, r3
 800836e:	23c6      	movs	r3, #198	; 0xc6
 8008370:	001a      	movs	r2, r3
 8008372:	2100      	movs	r1, #0
 8008374:	f003 ff08 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008378:	193b      	adds	r3, r7, r4
 800837a:	2235      	movs	r2, #53	; 0x35
 800837c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800837e:	193b      	adds	r3, r7, r4
 8008380:	22c4      	movs	r2, #196	; 0xc4
 8008382:	5a9b      	ldrh	r3, [r3, r2]
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	b290      	uxth	r0, r2
 8008388:	193a      	adds	r2, r7, r4
 800838a:	21c4      	movs	r1, #196	; 0xc4
 800838c:	5250      	strh	r0, [r2, r1]
 800838e:	0019      	movs	r1, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	b2da      	uxtb	r2, r3
 8008394:	193b      	adds	r3, r7, r4
 8008396:	185b      	adds	r3, r3, r1
 8008398:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	1218      	asrs	r0, r3, #8
 800839e:	0025      	movs	r5, r4
 80083a0:	197b      	adds	r3, r7, r5
 80083a2:	22c4      	movs	r2, #196	; 0xc4
 80083a4:	5a9b      	ldrh	r3, [r3, r2]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	b294      	uxth	r4, r2
 80083aa:	197a      	adds	r2, r7, r5
 80083ac:	21c4      	movs	r1, #196	; 0xc4
 80083ae:	5254      	strh	r4, [r2, r1]
 80083b0:	0019      	movs	r1, r3
 80083b2:	b2c2      	uxtb	r2, r0
 80083b4:	002c      	movs	r4, r5
 80083b6:	193b      	adds	r3, r7, r4
 80083b8:	185b      	adds	r3, r3, r1
 80083ba:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	1418      	asrs	r0, r3, #16
 80083c0:	0025      	movs	r5, r4
 80083c2:	197b      	adds	r3, r7, r5
 80083c4:	22c4      	movs	r2, #196	; 0xc4
 80083c6:	5a9b      	ldrh	r3, [r3, r2]
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	b294      	uxth	r4, r2
 80083cc:	197a      	adds	r2, r7, r5
 80083ce:	21c4      	movs	r1, #196	; 0xc4
 80083d0:	5254      	strh	r4, [r2, r1]
 80083d2:	0019      	movs	r1, r3
 80083d4:	b2c2      	uxtb	r2, r0
 80083d6:	002c      	movs	r4, r5
 80083d8:	193b      	adds	r3, r7, r4
 80083da:	185b      	adds	r3, r3, r1
 80083dc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	1618      	asrs	r0, r3, #24
 80083e2:	0025      	movs	r5, r4
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	22c4      	movs	r2, #196	; 0xc4
 80083e8:	5a9b      	ldrh	r3, [r3, r2]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	b294      	uxth	r4, r2
 80083ee:	197a      	adds	r2, r7, r5
 80083f0:	21c4      	movs	r1, #196	; 0xc4
 80083f2:	5254      	strh	r4, [r2, r1]
 80083f4:	0019      	movs	r1, r3
 80083f6:	b2c2      	uxtb	r2, r0
 80083f8:	002c      	movs	r4, r5
 80083fa:	193b      	adds	r3, r7, r4
 80083fc:	185b      	adds	r3, r3, r1
 80083fe:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008400:	193b      	adds	r3, r7, r4
 8008402:	22c4      	movs	r2, #196	; 0xc4
 8008404:	5a9b      	ldrh	r3, [r3, r2]
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	b290      	uxth	r0, r2
 800840a:	193a      	adds	r2, r7, r4
 800840c:	21c4      	movs	r1, #196	; 0xc4
 800840e:	5250      	strh	r0, [r2, r1]
 8008410:	0019      	movs	r1, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	b2da      	uxtb	r2, r3
 8008416:	193b      	adds	r3, r7, r4
 8008418:	185b      	adds	r3, r3, r1
 800841a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	1218      	asrs	r0, r3, #8
 8008420:	0025      	movs	r5, r4
 8008422:	197b      	adds	r3, r7, r5
 8008424:	22c4      	movs	r2, #196	; 0xc4
 8008426:	5a9b      	ldrh	r3, [r3, r2]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	b294      	uxth	r4, r2
 800842c:	197a      	adds	r2, r7, r5
 800842e:	21c4      	movs	r1, #196	; 0xc4
 8008430:	5254      	strh	r4, [r2, r1]
 8008432:	0019      	movs	r1, r3
 8008434:	b2c2      	uxtb	r2, r0
 8008436:	002c      	movs	r4, r5
 8008438:	193b      	adds	r3, r7, r4
 800843a:	185b      	adds	r3, r3, r1
 800843c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	1418      	asrs	r0, r3, #16
 8008442:	0025      	movs	r5, r4
 8008444:	197b      	adds	r3, r7, r5
 8008446:	22c4      	movs	r2, #196	; 0xc4
 8008448:	5a9b      	ldrh	r3, [r3, r2]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	b294      	uxth	r4, r2
 800844e:	197a      	adds	r2, r7, r5
 8008450:	21c4      	movs	r1, #196	; 0xc4
 8008452:	5254      	strh	r4, [r2, r1]
 8008454:	0019      	movs	r1, r3
 8008456:	b2c2      	uxtb	r2, r0
 8008458:	002c      	movs	r4, r5
 800845a:	193b      	adds	r3, r7, r4
 800845c:	185b      	adds	r3, r3, r1
 800845e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	1618      	asrs	r0, r3, #24
 8008464:	0025      	movs	r5, r4
 8008466:	197b      	adds	r3, r7, r5
 8008468:	22c4      	movs	r2, #196	; 0xc4
 800846a:	5a9b      	ldrh	r3, [r3, r2]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	b294      	uxth	r4, r2
 8008470:	197a      	adds	r2, r7, r5
 8008472:	21c4      	movs	r1, #196	; 0xc4
 8008474:	5254      	strh	r4, [r2, r1]
 8008476:	0019      	movs	r1, r3
 8008478:	b2c2      	uxtb	r2, r0
 800847a:	0028      	movs	r0, r5
 800847c:	183b      	adds	r3, r7, r0
 800847e:	185b      	adds	r3, r3, r1
 8008480:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008482:	2308      	movs	r3, #8
 8008484:	18fa      	adds	r2, r7, r3
 8008486:	183b      	adds	r3, r7, r0
 8008488:	0011      	movs	r1, r2
 800848a:	0018      	movs	r0, r3
 800848c:	f000 ff4a 	bl	8009324 <astronode_transport_send_receive>
 8008490:	0003      	movs	r3, r0
 8008492:	2b01      	cmp	r3, #1
 8008494:	d10e      	bne.n	80084b4 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <astronode_send_geo_wr+0x174>)
 8008498:	199b      	adds	r3, r3, r6
 800849a:	19db      	adds	r3, r3, r7
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2bb5      	cmp	r3, #181	; 0xb5
 80084a0:	d104      	bne.n	80084ac <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <astronode_send_geo_wr+0x178>)
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fa fde7 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80084aa:	e003      	b.n	80084b4 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <astronode_send_geo_wr+0x17c>)
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7fa fde2 	bl	8003078 <send_debug_logs>
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b067      	add	sp, #412	; 0x19c
 80084ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084bc:	fffffe70 	.word	0xfffffe70
 80084c0:	080134c8 	.word	0x080134c8
 80084c4:	080134f4 	.word	0x080134f4

080084c8 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	b0fd      	sub	sp, #500	; 0x1f4
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	6039      	str	r1, [r7, #0]
 80084d0:	0011      	movs	r1, r2
 80084d2:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <astronode_send_pld_er+0x13c>)
 80084d4:	26f4      	movs	r6, #244	; 0xf4
 80084d6:	0076      	lsls	r6, r6, #1
 80084d8:	199b      	adds	r3, r3, r6
 80084da:	19db      	adds	r3, r3, r7
 80084dc:	1c02      	adds	r2, r0, #0
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	4b49      	ldr	r3, [pc, #292]	; (8008608 <astronode_send_pld_er+0x140>)
 80084e2:	199b      	adds	r3, r3, r6
 80084e4:	19db      	adds	r3, r3, r7
 80084e6:	1c0a      	adds	r2, r1, #0
 80084e8:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80084ea:	2490      	movs	r4, #144	; 0x90
 80084ec:	0064      	lsls	r4, r4, #1
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	0018      	movs	r0, r3
 80084f2:	23c6      	movs	r3, #198	; 0xc6
 80084f4:	001a      	movs	r2, r3
 80084f6:	2100      	movs	r1, #0
 80084f8:	f003 fe46 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 80084fc:	4b43      	ldr	r3, [pc, #268]	; (800860c <astronode_send_pld_er+0x144>)
 80084fe:	199b      	adds	r3, r3, r6
 8008500:	19db      	adds	r3, r3, r7
 8008502:	0018      	movs	r0, r3
 8008504:	23c6      	movs	r3, #198	; 0xc6
 8008506:	001a      	movs	r2, r3
 8008508:	2100      	movs	r1, #0
 800850a:	f003 fe3d 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800850e:	193b      	adds	r3, r7, r4
 8008510:	2225      	movs	r2, #37	; 0x25
 8008512:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008514:	193b      	adds	r3, r7, r4
 8008516:	22c4      	movs	r2, #196	; 0xc4
 8008518:	5a9b      	ldrh	r3, [r3, r2]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	b290      	uxth	r0, r2
 800851e:	193a      	adds	r2, r7, r4
 8008520:	21c4      	movs	r1, #196	; 0xc4
 8008522:	5250      	strh	r0, [r2, r1]
 8008524:	0019      	movs	r1, r3
 8008526:	4b37      	ldr	r3, [pc, #220]	; (8008604 <astronode_send_pld_er+0x13c>)
 8008528:	199b      	adds	r3, r3, r6
 800852a:	19db      	adds	r3, r3, r7
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b2da      	uxtb	r2, r3
 8008530:	193b      	adds	r3, r7, r4
 8008532:	185b      	adds	r3, r3, r1
 8008534:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008536:	4b33      	ldr	r3, [pc, #204]	; (8008604 <astronode_send_pld_er+0x13c>)
 8008538:	199b      	adds	r3, r3, r6
 800853a:	19db      	adds	r3, r3, r7
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b298      	uxth	r0, r3
 8008542:	0025      	movs	r5, r4
 8008544:	197b      	adds	r3, r7, r5
 8008546:	22c4      	movs	r2, #196	; 0xc4
 8008548:	5a9b      	ldrh	r3, [r3, r2]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	b294      	uxth	r4, r2
 800854e:	197a      	adds	r2, r7, r5
 8008550:	21c4      	movs	r1, #196	; 0xc4
 8008552:	5254      	strh	r4, [r2, r1]
 8008554:	0019      	movs	r1, r3
 8008556:	b2c2      	uxtb	r2, r0
 8008558:	002c      	movs	r4, r5
 800855a:	193b      	adds	r3, r7, r4
 800855c:	185b      	adds	r3, r3, r1
 800855e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008560:	193b      	adds	r3, r7, r4
 8008562:	22c4      	movs	r2, #196	; 0xc4
 8008564:	5a9b      	ldrh	r3, [r3, r2]
 8008566:	001a      	movs	r2, r3
 8008568:	193b      	adds	r3, r7, r4
 800856a:	189b      	adds	r3, r3, r2
 800856c:	1c58      	adds	r0, r3, #1
 800856e:	4b26      	ldr	r3, [pc, #152]	; (8008608 <astronode_send_pld_er+0x140>)
 8008570:	199b      	adds	r3, r3, r6
 8008572:	19db      	adds	r3, r3, r7
 8008574:	881a      	ldrh	r2, [r3, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	0019      	movs	r1, r3
 800857a:	f003 ff32 	bl	800c3e2 <memcpy>
    request.payload_len = 2 + payload_length;
 800857e:	4b22      	ldr	r3, [pc, #136]	; (8008608 <astronode_send_pld_er+0x140>)
 8008580:	199b      	adds	r3, r3, r6
 8008582:	19db      	adds	r3, r3, r7
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	3302      	adds	r3, #2
 8008588:	b299      	uxth	r1, r3
 800858a:	193b      	adds	r3, r7, r4
 800858c:	22c4      	movs	r2, #196	; 0xc4
 800858e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008590:	2358      	movs	r3, #88	; 0x58
 8008592:	18fa      	adds	r2, r7, r3
 8008594:	193b      	adds	r3, r7, r4
 8008596:	0011      	movs	r1, r2
 8008598:	0018      	movs	r0, r3
 800859a:	f000 fec3 	bl	8009324 <astronode_transport_send_receive>
 800859e:	0003      	movs	r3, r0
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d12a      	bne.n	80085fa <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80085a4:	4b19      	ldr	r3, [pc, #100]	; (800860c <astronode_send_pld_er+0x144>)
 80085a6:	199b      	adds	r3, r3, r6
 80085a8:	19db      	adds	r3, r3, r7
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2ba5      	cmp	r3, #165	; 0xa5
 80085ae:	d114      	bne.n	80085da <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <astronode_send_pld_er+0x13c>)
 80085b2:	199b      	adds	r3, r3, r6
 80085b4:	19db      	adds	r3, r3, r7
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	22ea      	movs	r2, #234	; 0xea
 80085ba:	32ff      	adds	r2, #255	; 0xff
 80085bc:	0014      	movs	r4, r2
 80085be:	4a14      	ldr	r2, [pc, #80]	; (8008610 <astronode_send_pld_er+0x148>)
 80085c0:	4914      	ldr	r1, [pc, #80]	; (8008614 <astronode_send_pld_er+0x14c>)
 80085c2:	2508      	movs	r5, #8
 80085c4:	1978      	adds	r0, r7, r5
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	0023      	movs	r3, r4
 80085ca:	f003 fd47 	bl	800c05c <sprintf>
            send_debug_logs ( s ) ;
 80085ce:	197b      	adds	r3, r7, r5
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7fa fd51 	bl	8003078 <send_debug_logs>
            return true ;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e010      	b.n	80085fc <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80085da:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <astronode_send_pld_er+0x13c>)
 80085dc:	22f4      	movs	r2, #244	; 0xf4
 80085de:	0052      	lsls	r2, r2, #1
 80085e0:	189b      	adds	r3, r3, r2
 80085e2:	19db      	adds	r3, r3, r7
 80085e4:	881a      	ldrh	r2, [r3, #0]
 80085e6:	490c      	ldr	r1, [pc, #48]	; (8008618 <astronode_send_pld_er+0x150>)
 80085e8:	2408      	movs	r4, #8
 80085ea:	193b      	adds	r3, r7, r4
 80085ec:	0018      	movs	r0, r3
 80085ee:	f003 fd35 	bl	800c05c <sprintf>
            send_debug_logs ( s ) ;
 80085f2:	193b      	adds	r3, r7, r4
 80085f4:	0018      	movs	r0, r3
 80085f6:	f7fa fd3f 	bl	8003078 <send_debug_logs>
        }
    }
    return false ;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	0018      	movs	r0, r3
 80085fe:	46bd      	mov	sp, r7
 8008600:	b07b      	add	sp, #492	; 0x1ec
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	fffffe1e 	.word	0xfffffe1e
 8008608:	fffffe1c 	.word	0xfffffe1c
 800860c:	fffffe70 	.word	0xfffffe70
 8008610:	0801356c 	.word	0x0801356c
 8008614:	08013598 	.word	0x08013598
 8008618:	080135b4 	.word	0x080135b4

0800861c <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 800861c:	b5b0      	push	{r4, r5, r7, lr}
 800861e:	b0e4      	sub	sp, #400	; 0x190
 8008620:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008622:	24c8      	movs	r4, #200	; 0xc8
 8008624:	193b      	adds	r3, r7, r4
 8008626:	0018      	movs	r0, r3
 8008628:	23c6      	movs	r3, #198	; 0xc6
 800862a:	001a      	movs	r2, r3
 800862c:	2100      	movs	r1, #0
 800862e:	f003 fdab 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <astronode_send_pld_fr+0x6c>)
 8008634:	25c8      	movs	r5, #200	; 0xc8
 8008636:	006d      	lsls	r5, r5, #1
 8008638:	195b      	adds	r3, r3, r5
 800863a:	19db      	adds	r3, r3, r7
 800863c:	0018      	movs	r0, r3
 800863e:	23c6      	movs	r3, #198	; 0xc6
 8008640:	001a      	movs	r2, r3
 8008642:	2100      	movs	r1, #0
 8008644:	f003 fda0 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008648:	193b      	adds	r3, r7, r4
 800864a:	2227      	movs	r2, #39	; 0x27
 800864c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800864e:	003a      	movs	r2, r7
 8008650:	193b      	adds	r3, r7, r4
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f000 fe65 	bl	8009324 <astronode_transport_send_receive>
 800865a:	0003      	movs	r3, r0
 800865c:	2b01      	cmp	r3, #1
 800865e:	d10e      	bne.n	800867e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008660:	4b09      	ldr	r3, [pc, #36]	; (8008688 <astronode_send_pld_fr+0x6c>)
 8008662:	195b      	adds	r3, r3, r5
 8008664:	19db      	adds	r3, r3, r7
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2ba7      	cmp	r3, #167	; 0xa7
 800866a:	d104      	bne.n	8008676 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800866c:	4b07      	ldr	r3, [pc, #28]	; (800868c <astronode_send_pld_fr+0x70>)
 800866e:	0018      	movs	r0, r3
 8008670:	f7fa fd02 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008674:	e003      	b.n	800867e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <astronode_send_pld_fr+0x74>)
 8008678:	0018      	movs	r0, r3
 800867a:	f7fa fcfd 	bl	8003078 <send_debug_logs>
}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	46bd      	mov	sp, r7
 8008682:	b064      	add	sp, #400	; 0x190
 8008684:	bdb0      	pop	{r4, r5, r7, pc}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	fffffe70 	.word	0xfffffe70
 800868c:	080135e4 	.word	0x080135e4
 8008690:	0801361c 	.word	0x0801361c

08008694 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008694:	b5b0      	push	{r4, r5, r7, lr}
 8008696:	b0e4      	sub	sp, #400	; 0x190
 8008698:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800869a:	24c8      	movs	r4, #200	; 0xc8
 800869c:	193b      	adds	r3, r7, r4
 800869e:	0018      	movs	r0, r3
 80086a0:	23c6      	movs	r3, #198	; 0xc6
 80086a2:	001a      	movs	r2, r3
 80086a4:	2100      	movs	r1, #0
 80086a6:	f003 fd6f 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <astronode_send_res_cr+0x70>)
 80086ac:	25c8      	movs	r5, #200	; 0xc8
 80086ae:	006d      	lsls	r5, r5, #1
 80086b0:	195b      	adds	r3, r3, r5
 80086b2:	19db      	adds	r3, r3, r7
 80086b4:	0018      	movs	r0, r3
 80086b6:	23c6      	movs	r3, #198	; 0xc6
 80086b8:	001a      	movs	r2, r3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f003 fd64 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80086c0:	193b      	adds	r3, r7, r4
 80086c2:	2255      	movs	r2, #85	; 0x55
 80086c4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086c6:	003a      	movs	r2, r7
 80086c8:	193b      	adds	r3, r7, r4
 80086ca:	0011      	movs	r1, r2
 80086cc:	0018      	movs	r0, r3
 80086ce:	f000 fe29 	bl	8009324 <astronode_transport_send_receive>
 80086d2:	0003      	movs	r3, r0
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d111      	bne.n	80086fc <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <astronode_send_res_cr+0x70>)
 80086da:	195b      	adds	r3, r3, r5
 80086dc:	19db      	adds	r3, r3, r7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2bd5      	cmp	r3, #213	; 0xd5
 80086e2:	d107      	bne.n	80086f4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80086e4:	4b08      	ldr	r3, [pc, #32]	; (8008708 <astronode_send_res_cr+0x74>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80086ea:	4b08      	ldr	r3, [pc, #32]	; (800870c <astronode_send_res_cr+0x78>)
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fa fcc3 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80086f2:	e003      	b.n	80086fc <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <astronode_send_res_cr+0x7c>)
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fa fcbe 	bl	8003078 <send_debug_logs>
}
 80086fc:	46c0      	nop			; (mov r8, r8)
 80086fe:	46bd      	mov	sp, r7
 8008700:	b064      	add	sp, #400	; 0x190
 8008702:	bdb0      	pop	{r4, r5, r7, pc}
 8008704:	fffffe70 	.word	0xfffffe70
 8008708:	20000b0d 	.word	0x20000b0d
 800870c:	08013658 	.word	0x08013658
 8008710:	0801368c 	.word	0x0801368c

08008714 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008714:	b5b0      	push	{r4, r5, r7, lr}
 8008716:	b0fa      	sub	sp, #488	; 0x1e8
 8008718:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800871a:	258e      	movs	r5, #142	; 0x8e
 800871c:	006d      	lsls	r5, r5, #1
 800871e:	197b      	adds	r3, r7, r5
 8008720:	0018      	movs	r0, r3
 8008722:	23c6      	movs	r3, #198	; 0xc6
 8008724:	001a      	movs	r2, r3
 8008726:	2100      	movs	r1, #0
 8008728:	f003 fd2e 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0} ;
 800872c:	4b28      	ldr	r3, [pc, #160]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 800872e:	24f4      	movs	r4, #244	; 0xf4
 8008730:	0064      	lsls	r4, r4, #1
 8008732:	191b      	adds	r3, r3, r4
 8008734:	19db      	adds	r3, r3, r7
 8008736:	0018      	movs	r0, r3
 8008738:	23c6      	movs	r3, #198	; 0xc6
 800873a:	001a      	movs	r2, r3
 800873c:	2100      	movs	r1, #0
 800873e:	f003 fd23 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008742:	197b      	adds	r3, r7, r5
 8008744:	2217      	movs	r2, #23
 8008746:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008748:	2354      	movs	r3, #84	; 0x54
 800874a:	18fa      	adds	r2, r7, r3
 800874c:	197b      	adds	r3, r7, r5
 800874e:	0011      	movs	r1, r2
 8008750:	0018      	movs	r0, r3
 8008752:	f000 fde7 	bl	8009324 <astronode_transport_send_receive>
 8008756:	0003      	movs	r3, r0
 8008758:	2b01      	cmp	r3, #1
 800875a:	d133      	bne.n	80087c4 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 800875c:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 800875e:	0021      	movs	r1, r4
 8008760:	185b      	adds	r3, r3, r1
 8008762:	19db      	adds	r3, r3, r7
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b97      	cmp	r3, #151	; 0x97
 8008768:	d128      	bne.n	80087bc <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800876a:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 800876c:	185b      	adds	r3, r3, r1
 800876e:	19db      	adds	r3, r3, r7
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008774:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 8008776:	185b      	adds	r3, r3, r1
 8008778:	19db      	adds	r3, r3, r7
 800877a:	789b      	ldrb	r3, [r3, #2]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008780:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 8008782:	185b      	adds	r3, r3, r1
 8008784:	19db      	adds	r3, r3, r7
 8008786:	78db      	ldrb	r3, [r3, #3]
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800878c:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <astronode_send_rtc_rr+0xbc>)
 800878e:	185b      	adds	r3, r3, r1
 8008790:	19db      	adds	r3, r3, r7
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	061b      	lsls	r3, r3, #24
 8008796:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008798:	24f2      	movs	r4, #242	; 0xf2
 800879a:	0064      	lsls	r4, r4, #1
 800879c:	193a      	adds	r2, r7, r4
 800879e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80087a0:	193b      	adds	r3, r7, r4
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	490b      	ldr	r1, [pc, #44]	; (80087d4 <astronode_send_rtc_rr+0xc0>)
 80087a6:	1d3b      	adds	r3, r7, #4
 80087a8:	0018      	movs	r0, r3
 80087aa:	f003 fc57 	bl	800c05c <sprintf>
            send_debug_logs ( str ) ;
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7fa fc61 	bl	8003078 <send_debug_logs>
            return rtc_time ;
 80087b6:	193b      	adds	r3, r7, r4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	e004      	b.n	80087c6 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <astronode_send_rtc_rr+0xc4>)
 80087be:	0018      	movs	r0, r3
 80087c0:	f7fa fc5a 	bl	8003078 <send_debug_logs>
        }
    }
    return 0 ;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	0018      	movs	r0, r3
 80087c8:	46bd      	mov	sp, r7
 80087ca:	b07a      	add	sp, #488	; 0x1e8
 80087cc:	bdb0      	pop	{r4, r5, r7, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	fffffe6c 	.word	0xfffffe6c
 80087d4:	080136b8 	.word	0x080136b8
 80087d8:	080136f8 	.word	0x080136f8

080087dc <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b0f8      	sub	sp, #480	; 0x1e0
 80087e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80087e2:	258c      	movs	r5, #140	; 0x8c
 80087e4:	006d      	lsls	r5, r5, #1
 80087e6:	197b      	adds	r3, r7, r5
 80087e8:	0018      	movs	r0, r3
 80087ea:	23c6      	movs	r3, #198	; 0xc6
 80087ec:	001a      	movs	r2, r3
 80087ee:	2100      	movs	r1, #0
 80087f0:	f003 fcca 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 80087f4:	4b21      	ldr	r3, [pc, #132]	; (800887c <astronode_send_sak_rr+0xa0>)
 80087f6:	24f0      	movs	r4, #240	; 0xf0
 80087f8:	0064      	lsls	r4, r4, #1
 80087fa:	191b      	adds	r3, r3, r4
 80087fc:	19db      	adds	r3, r3, r7
 80087fe:	0018      	movs	r0, r3
 8008800:	23c6      	movs	r3, #198	; 0xc6
 8008802:	001a      	movs	r2, r3
 8008804:	2100      	movs	r1, #0
 8008806:	f003 fcbf 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800880a:	197b      	adds	r3, r7, r5
 800880c:	2245      	movs	r2, #69	; 0x45
 800880e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008810:	2350      	movs	r3, #80	; 0x50
 8008812:	18fa      	adds	r2, r7, r3
 8008814:	197b      	adds	r3, r7, r5
 8008816:	0011      	movs	r1, r2
 8008818:	0018      	movs	r0, r3
 800881a:	f000 fd83 	bl	8009324 <astronode_transport_send_receive>
 800881e:	0003      	movs	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d126      	bne.n	8008872 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008824:	4b15      	ldr	r3, [pc, #84]	; (800887c <astronode_send_sak_rr+0xa0>)
 8008826:	191b      	adds	r3, r3, r4
 8008828:	19db      	adds	r3, r3, r7
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2bc5      	cmp	r3, #197	; 0xc5
 800882e:	d11c      	bne.n	800886a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008830:	4b12      	ldr	r3, [pc, #72]	; (800887c <astronode_send_sak_rr+0xa0>)
 8008832:	191b      	adds	r3, r3, r4
 8008834:	19db      	adds	r3, r3, r7
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	b299      	uxth	r1, r3
 800883a:	4b10      	ldr	r3, [pc, #64]	; (800887c <astronode_send_sak_rr+0xa0>)
 800883c:	191b      	adds	r3, r3, r4
 800883e:	19db      	adds	r3, r3, r7
 8008840:	789b      	ldrb	r3, [r3, #2]
 8008842:	b29b      	uxth	r3, r3
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	b29a      	uxth	r2, r3
 8008848:	20ef      	movs	r0, #239	; 0xef
 800884a:	0040      	lsls	r0, r0, #1
 800884c:	183b      	adds	r3, r7, r0
 800884e:	188a      	adds	r2, r1, r2
 8008850:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008852:	183b      	adds	r3, r7, r0
 8008854:	881a      	ldrh	r2, [r3, #0]
 8008856:	490a      	ldr	r1, [pc, #40]	; (8008880 <astronode_send_sak_rr+0xa4>)
 8008858:	003b      	movs	r3, r7
 800885a:	0018      	movs	r0, r3
 800885c:	f003 fbfe 	bl	800c05c <sprintf>
            send_debug_logs(str);
 8008860:	003b      	movs	r3, r7
 8008862:	0018      	movs	r0, r3
 8008864:	f7fa fc08 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008868:	e003      	b.n	8008872 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <astronode_send_sak_rr+0xa8>)
 800886c:	0018      	movs	r0, r3
 800886e:	f7fa fc03 	bl	8003078 <send_debug_logs>
}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	46bd      	mov	sp, r7
 8008876:	b078      	add	sp, #480	; 0x1e0
 8008878:	bdb0      	pop	{r4, r5, r7, pc}
 800887a:	46c0      	nop			; (mov r8, r8)
 800887c:	fffffe70 	.word	0xfffffe70
 8008880:	08013714 	.word	0x08013714
 8008884:	08013740 	.word	0x08013740

08008888 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008888:	b5b0      	push	{r4, r5, r7, lr}
 800888a:	b0e4      	sub	sp, #400	; 0x190
 800888c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800888e:	24c8      	movs	r4, #200	; 0xc8
 8008890:	193b      	adds	r3, r7, r4
 8008892:	0018      	movs	r0, r3
 8008894:	23c6      	movs	r3, #198	; 0xc6
 8008896:	001a      	movs	r2, r3
 8008898:	2100      	movs	r1, #0
 800889a:	f003 fc75 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <astronode_send_sak_cr+0x70>)
 80088a0:	25c8      	movs	r5, #200	; 0xc8
 80088a2:	006d      	lsls	r5, r5, #1
 80088a4:	195b      	adds	r3, r3, r5
 80088a6:	19db      	adds	r3, r3, r7
 80088a8:	0018      	movs	r0, r3
 80088aa:	23c6      	movs	r3, #198	; 0xc6
 80088ac:	001a      	movs	r2, r3
 80088ae:	2100      	movs	r1, #0
 80088b0:	f003 fc6a 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80088b4:	193b      	adds	r3, r7, r4
 80088b6:	2246      	movs	r2, #70	; 0x46
 80088b8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088ba:	003a      	movs	r2, r7
 80088bc:	193b      	adds	r3, r7, r4
 80088be:	0011      	movs	r1, r2
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 fd2f 	bl	8009324 <astronode_transport_send_receive>
 80088c6:	0003      	movs	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d111      	bne.n	80088f0 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <astronode_send_sak_cr+0x70>)
 80088ce:	195b      	adds	r3, r3, r5
 80088d0:	19db      	adds	r3, r3, r7
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2bc6      	cmp	r3, #198	; 0xc6
 80088d6:	d107      	bne.n	80088e8 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <astronode_send_sak_cr+0x74>)
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <astronode_send_sak_cr+0x78>)
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7fa fbc9 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80088e6:	e003      	b.n	80088f0 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <astronode_send_sak_cr+0x7c>)
 80088ea:	0018      	movs	r0, r3
 80088ec:	f7fa fbc4 	bl	8003078 <send_debug_logs>
}
 80088f0:	46c0      	nop			; (mov r8, r8)
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b064      	add	sp, #400	; 0x190
 80088f6:	bdb0      	pop	{r4, r5, r7, pc}
 80088f8:	fffffe70 	.word	0xfffffe70
 80088fc:	20000b0c 	.word	0x20000b0c
 8008900:	08013774 	.word	0x08013774
 8008904:	0801379c 	.word	0x0801379c

08008908 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890a:	b0ed      	sub	sp, #436	; 0x1b4
 800890c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800890e:	21c8      	movs	r1, #200	; 0xc8
 8008910:	2318      	movs	r3, #24
 8008912:	18cb      	adds	r3, r1, r3
 8008914:	19db      	adds	r3, r3, r7
 8008916:	0018      	movs	r0, r3
 8008918:	23c6      	movs	r3, #198	; 0xc6
 800891a:	001a      	movs	r2, r3
 800891c:	2100      	movs	r1, #0
 800891e:	f003 fc33 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8008922:	4b4a      	ldr	r3, [pc, #296]	; (8008a4c <astronode_send_mpn_rr+0x144>)
 8008924:	26cc      	movs	r6, #204	; 0xcc
 8008926:	0076      	lsls	r6, r6, #1
 8008928:	199b      	adds	r3, r3, r6
 800892a:	2218      	movs	r2, #24
 800892c:	4694      	mov	ip, r2
 800892e:	44bc      	add	ip, r7
 8008930:	4463      	add	r3, ip
 8008932:	0018      	movs	r0, r3
 8008934:	23c6      	movs	r3, #198	; 0xc6
 8008936:	001a      	movs	r2, r3
 8008938:	2100      	movs	r1, #0
 800893a:	f003 fc25 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800893e:	21c8      	movs	r1, #200	; 0xc8
 8008940:	2318      	movs	r3, #24
 8008942:	18cb      	adds	r3, r1, r3
 8008944:	19db      	adds	r3, r3, r7
 8008946:	221b      	movs	r2, #27
 8008948:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800894a:	2318      	movs	r3, #24
 800894c:	18fa      	adds	r2, r7, r3
 800894e:	2318      	movs	r3, #24
 8008950:	18cb      	adds	r3, r1, r3
 8008952:	19db      	adds	r3, r3, r7
 8008954:	0011      	movs	r1, r2
 8008956:	0018      	movs	r0, r3
 8008958:	f000 fce4 	bl	8009324 <astronode_transport_send_receive>
 800895c:	0003      	movs	r3, r0
 800895e:	2b01      	cmp	r3, #1
 8008960:	d16f      	bne.n	8008a42 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008962:	4b3a      	ldr	r3, [pc, #232]	; (8008a4c <astronode_send_mpn_rr+0x144>)
 8008964:	0032      	movs	r2, r6
 8008966:	189b      	adds	r3, r3, r2
 8008968:	2118      	movs	r1, #24
 800896a:	468c      	mov	ip, r1
 800896c:	44bc      	add	ip, r7
 800896e:	4463      	add	r3, ip
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b9b      	cmp	r3, #155	; 0x9b
 8008974:	d161      	bne.n	8008a3a <astronode_send_mpn_rr+0x132>
        {
 8008976:	466b      	mov	r3, sp
 8008978:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800897a:	4b34      	ldr	r3, [pc, #208]	; (8008a4c <astronode_send_mpn_rr+0x144>)
 800897c:	189b      	adds	r3, r3, r2
 800897e:	2218      	movs	r2, #24
 8008980:	4694      	mov	ip, r2
 8008982:	44bc      	add	ip, r7
 8008984:	4463      	add	r3, ip
 8008986:	22c4      	movs	r2, #196	; 0xc4
 8008988:	5a9b      	ldrh	r3, [r3, r2]
 800898a:	001a      	movs	r2, r3
 800898c:	3a01      	subs	r2, #1
 800898e:	21ca      	movs	r1, #202	; 0xca
 8008990:	0049      	lsls	r1, r1, #1
 8008992:	2018      	movs	r0, #24
 8008994:	1809      	adds	r1, r1, r0
 8008996:	19c9      	adds	r1, r1, r7
 8008998:	600a      	str	r2, [r1, #0]
 800899a:	001c      	movs	r4, r3
 800899c:	2200      	movs	r2, #0
 800899e:	0015      	movs	r5, r2
 80089a0:	0020      	movs	r0, r4
 80089a2:	0029      	movs	r1, r5
 80089a4:	0004      	movs	r4, r0
 80089a6:	0f62      	lsrs	r2, r4, #29
 80089a8:	000c      	movs	r4, r1
 80089aa:	00e4      	lsls	r4, r4, #3
 80089ac:	617c      	str	r4, [r7, #20]
 80089ae:	697c      	ldr	r4, [r7, #20]
 80089b0:	4314      	orrs	r4, r2
 80089b2:	617c      	str	r4, [r7, #20]
 80089b4:	0001      	movs	r1, r0
 80089b6:	00c9      	lsls	r1, r1, #3
 80089b8:	6139      	str	r1, [r7, #16]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	2200      	movs	r2, #0
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	6838      	ldr	r0, [r7, #0]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	0004      	movs	r4, r0
 80089c6:	0f62      	lsrs	r2, r4, #29
 80089c8:	000c      	movs	r4, r1
 80089ca:	00e4      	lsls	r4, r4, #3
 80089cc:	60fc      	str	r4, [r7, #12]
 80089ce:	68fc      	ldr	r4, [r7, #12]
 80089d0:	4314      	orrs	r4, r2
 80089d2:	60fc      	str	r4, [r7, #12]
 80089d4:	0001      	movs	r1, r0
 80089d6:	00ca      	lsls	r2, r1, #3
 80089d8:	60ba      	str	r2, [r7, #8]
 80089da:	3307      	adds	r3, #7
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	4669      	mov	r1, sp
 80089e2:	1acb      	subs	r3, r1, r3
 80089e4:	469d      	mov	sp, r3
 80089e6:	466b      	mov	r3, sp
 80089e8:	3300      	adds	r3, #0
 80089ea:	24c8      	movs	r4, #200	; 0xc8
 80089ec:	0064      	lsls	r4, r4, #1
 80089ee:	2218      	movs	r2, #24
 80089f0:	18a2      	adds	r2, r4, r2
 80089f2:	19d1      	adds	r1, r2, r7
 80089f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80089f6:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <astronode_send_mpn_rr+0x148>)
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7fa fb3d 	bl	8003078 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <astronode_send_mpn_rr+0x144>)
 8008a00:	22cc      	movs	r2, #204	; 0xcc
 8008a02:	0052      	lsls	r2, r2, #1
 8008a04:	189b      	adds	r3, r3, r2
 8008a06:	2218      	movs	r2, #24
 8008a08:	4694      	mov	ip, r2
 8008a0a:	44bc      	add	ip, r7
 8008a0c:	4463      	add	r3, ip
 8008a0e:	22c4      	movs	r2, #196	; 0xc4
 8008a10:	5a9b      	ldrh	r3, [r3, r2]
 8008a12:	0019      	movs	r1, r3
 8008a14:	2318      	movs	r3, #24
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	3301      	adds	r3, #1
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	; (8008a54 <astronode_send_mpn_rr+0x14c>)
 8008a1c:	2018      	movs	r0, #24
 8008a1e:	1820      	adds	r0, r4, r0
 8008a20:	19c0      	adds	r0, r0, r7
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	f003 fae6 	bl	800bff4 <snprintf>
            send_debug_logs(product_number);
 8008a28:	2318      	movs	r3, #24
 8008a2a:	18e3      	adds	r3, r4, r3
 8008a2c:	19db      	adds	r3, r3, r7
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	0018      	movs	r0, r3
 8008a32:	f7fa fb21 	bl	8003078 <send_debug_logs>
 8008a36:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008a38:	e003      	b.n	8008a42 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <astronode_send_mpn_rr+0x150>)
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fa fb1b 	bl	8003078 <send_debug_logs>
}
 8008a42:	46c0      	nop			; (mov r8, r8)
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b06d      	add	sp, #436	; 0x1b4
 8008a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	fffffe68 	.word	0xfffffe68
 8008a50:	08013864 	.word	0x08013864
 8008a54:	08013380 	.word	0x08013380
 8008a58:	080133bc 	.word	0x080133bc

08008a5c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008a5c:	b5b0      	push	{r4, r5, r7, lr}
 8008a5e:	b0e4      	sub	sp, #400	; 0x190
 8008a60:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a62:	24c8      	movs	r4, #200	; 0xc8
 8008a64:	193b      	adds	r3, r7, r4
 8008a66:	0018      	movs	r0, r3
 8008a68:	23c6      	movs	r3, #198	; 0xc6
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f003 fb8b 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <astronode_send_cmd_cr+0x70>)
 8008a74:	25c8      	movs	r5, #200	; 0xc8
 8008a76:	006d      	lsls	r5, r5, #1
 8008a78:	195b      	adds	r3, r3, r5
 8008a7a:	19db      	adds	r3, r3, r7
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	23c6      	movs	r3, #198	; 0xc6
 8008a80:	001a      	movs	r2, r3
 8008a82:	2100      	movs	r1, #0
 8008a84:	f003 fb80 	bl	800c188 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008a88:	193b      	adds	r3, r7, r4
 8008a8a:	2248      	movs	r2, #72	; 0x48
 8008a8c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a8e:	003a      	movs	r2, r7
 8008a90:	193b      	adds	r3, r7, r4
 8008a92:	0011      	movs	r1, r2
 8008a94:	0018      	movs	r0, r3
 8008a96:	f000 fc45 	bl	8009324 <astronode_transport_send_receive>
 8008a9a:	0003      	movs	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d111      	bne.n	8008ac4 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <astronode_send_cmd_cr+0x70>)
 8008aa2:	195b      	adds	r3, r3, r5
 8008aa4:	19db      	adds	r3, r3, r7
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2bc8      	cmp	r3, #200	; 0xc8
 8008aaa:	d107      	bne.n	8008abc <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008aac:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <astronode_send_cmd_cr+0x74>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <astronode_send_cmd_cr+0x78>)
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7fa fadf 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008aba:	e003      	b.n	8008ac4 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <astronode_send_cmd_cr+0x7c>)
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fa fada 	bl	8003078 <send_debug_logs>
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b064      	add	sp, #400	; 0x190
 8008aca:	bdb0      	pop	{r4, r5, r7, pc}
 8008acc:	fffffe70 	.word	0xfffffe70
 8008ad0:	20000b0e 	.word	0x20000b0e
 8008ad4:	08013cb4 	.word	0x08013cb4
 8008ad8:	08013cd8 	.word	0x08013cd8

08008adc <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	4cc6      	ldr	r4, [pc, #792]	; (8008df8 <astronode_send_cmd_rr+0x31c>)
 8008ae0:	44a5      	add	sp, r4
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008ae6:	2190      	movs	r1, #144	; 0x90
 8008ae8:	0049      	lsls	r1, r1, #1
 8008aea:	2318      	movs	r3, #24
 8008aec:	18cb      	adds	r3, r1, r3
 8008aee:	19db      	adds	r3, r3, r7
 8008af0:	0018      	movs	r0, r3
 8008af2:	23c6      	movs	r3, #198	; 0xc6
 8008af4:	001a      	movs	r2, r3
 8008af6:	2100      	movs	r1, #0
 8008af8:	f003 fb46 	bl	800c188 <memset>
    astronode_app_msg_t answer = {0};
 8008afc:	4bbf      	ldr	r3, [pc, #764]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008afe:	26fc      	movs	r6, #252	; 0xfc
 8008b00:	0076      	lsls	r6, r6, #1
 8008b02:	199b      	adds	r3, r3, r6
 8008b04:	2218      	movs	r2, #24
 8008b06:	4694      	mov	ip, r2
 8008b08:	44bc      	add	ip, r7
 8008b0a:	4463      	add	r3, ip
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	23c6      	movs	r3, #198	; 0xc6
 8008b10:	001a      	movs	r2, r3
 8008b12:	2100      	movs	r1, #0
 8008b14:	f003 fb38 	bl	800c188 <memset>
    bool result = false ;
 8008b18:	23f8      	movs	r3, #248	; 0xf8
 8008b1a:	33ff      	adds	r3, #255	; 0xff
 8008b1c:	2218      	movs	r2, #24
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	19db      	adds	r3, r3, r7
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008b26:	2190      	movs	r1, #144	; 0x90
 8008b28:	0049      	lsls	r1, r1, #1
 8008b2a:	2318      	movs	r3, #24
 8008b2c:	18cb      	adds	r3, r1, r3
 8008b2e:	19db      	adds	r3, r3, r7
 8008b30:	2247      	movs	r2, #71	; 0x47
 8008b32:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008b34:	2258      	movs	r2, #88	; 0x58
 8008b36:	2318      	movs	r3, #24
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	19da      	adds	r2, r3, r7
 8008b3c:	2318      	movs	r3, #24
 8008b3e:	18cb      	adds	r3, r1, r3
 8008b40:	19db      	adds	r3, r3, r7
 8008b42:	0011      	movs	r1, r2
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fbed 	bl	8009324 <astronode_transport_send_receive>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d000      	beq.n	8008b52 <astronode_send_cmd_rr+0x76>
 8008b50:	e146      	b.n	8008de0 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008b52:	4baa      	ldr	r3, [pc, #680]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008b54:	199a      	adds	r2, r3, r6
 8008b56:	2318      	movs	r3, #24
 8008b58:	18fb      	adds	r3, r7, r3
 8008b5a:	18d3      	adds	r3, r2, r3
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2bc7      	cmp	r3, #199	; 0xc7
 8008b60:	d000      	beq.n	8008b64 <astronode_send_cmd_rr+0x88>
 8008b62:	e139      	b.n	8008dd8 <astronode_send_cmd_rr+0x2fc>
        {
 8008b64:	466b      	mov	r3, sp
 8008b66:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008b68:	4ba5      	ldr	r3, [pc, #660]	; (8008e00 <astronode_send_cmd_rr+0x324>)
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f7fa fa84 	bl	8003078 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008b70:	4ba2      	ldr	r3, [pc, #648]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008b72:	21fc      	movs	r1, #252	; 0xfc
 8008b74:	0049      	lsls	r1, r1, #1
 8008b76:	185a      	adds	r2, r3, r1
 8008b78:	2318      	movs	r3, #24
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	18d3      	adds	r3, r2, r3
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008b82:	4b9e      	ldr	r3, [pc, #632]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008b84:	1858      	adds	r0, r3, r1
 8008b86:	2318      	movs	r3, #24
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	18c3      	adds	r3, r0, r3
 8008b8c:	789b      	ldrb	r3, [r3, #2]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008b92:	4b9a      	ldr	r3, [pc, #616]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008b94:	1858      	adds	r0, r3, r1
 8008b96:	2318      	movs	r3, #24
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	18c3      	adds	r3, r0, r3
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008ba2:	4b96      	ldr	r3, [pc, #600]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008ba4:	1858      	adds	r0, r3, r1
 8008ba6:	2318      	movs	r3, #24
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	18c3      	adds	r3, r0, r3
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008bb2:	22f8      	movs	r2, #248	; 0xf8
 8008bb4:	0052      	lsls	r2, r2, #1
 8008bb6:	2118      	movs	r1, #24
 8008bb8:	1851      	adds	r1, r2, r1
 8008bba:	19c8      	adds	r0, r1, r7
 8008bbc:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008bbe:	2318      	movs	r3, #24
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	19da      	adds	r2, r3, r7
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	498f      	ldr	r1, [pc, #572]	; (8008e04 <astronode_send_cmd_rr+0x328>)
 8008bc8:	2008      	movs	r0, #8
 8008bca:	2318      	movs	r3, #24
 8008bcc:	18c3      	adds	r3, r0, r3
 8008bce:	19db      	adds	r3, r3, r7
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f003 fa43 	bl	800c05c <sprintf>
            send_debug_logs(str);
 8008bd6:	2008      	movs	r0, #8
 8008bd8:	2318      	movs	r3, #24
 8008bda:	18c3      	adds	r3, r0, r3
 8008bdc:	19db      	adds	r3, r3, r7
 8008bde:	0018      	movs	r0, r3
 8008be0:	f7fa fa4a 	bl	8003078 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008be4:	4b85      	ldr	r3, [pc, #532]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008be6:	21fc      	movs	r1, #252	; 0xfc
 8008be8:	0049      	lsls	r1, r1, #1
 8008bea:	185a      	adds	r2, r3, r1
 8008bec:	2318      	movs	r3, #24
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	18d3      	adds	r3, r2, r3
 8008bf2:	22c4      	movs	r2, #196	; 0xc4
 8008bf4:	5a9b      	ldrh	r3, [r3, r2]
 8008bf6:	2b2c      	cmp	r3, #44	; 0x2c
 8008bf8:	d013      	beq.n	8008c22 <astronode_send_cmd_rr+0x146>
 8008bfa:	4b80      	ldr	r3, [pc, #512]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008bfc:	185a      	adds	r2, r3, r1
 8008bfe:	2318      	movs	r3, #24
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	18d3      	adds	r3, r2, r3
 8008c04:	22c4      	movs	r2, #196	; 0xc4
 8008c06:	5a9b      	ldrh	r3, [r3, r2]
 8008c08:	2b0c      	cmp	r3, #12
 8008c0a:	d00a      	beq.n	8008c22 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8008c0c:	4b7e      	ldr	r3, [pc, #504]	; (8008e08 <astronode_send_cmd_rr+0x32c>)
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7fa fa32 	bl	8003078 <send_debug_logs>
                return result ;
 8008c14:	23f8      	movs	r3, #248	; 0xf8
 8008c16:	33ff      	adds	r3, #255	; 0xff
 8008c18:	2218      	movs	r2, #24
 8008c1a:	189b      	adds	r3, r3, r2
 8008c1c:	19db      	adds	r3, r3, r7
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	e0d8      	b.n	8008dd4 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008c22:	4b76      	ldr	r3, [pc, #472]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008c24:	22fc      	movs	r2, #252	; 0xfc
 8008c26:	0052      	lsls	r2, r2, #1
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	2218      	movs	r2, #24
 8008c2c:	4694      	mov	ip, r2
 8008c2e:	44bc      	add	ip, r7
 8008c30:	4463      	add	r3, ip
 8008c32:	22c4      	movs	r2, #196	; 0xc4
 8008c34:	5a9b      	ldrh	r3, [r3, r2]
 8008c36:	001a      	movs	r2, r3
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	21f6      	movs	r1, #246	; 0xf6
 8008c3c:	0049      	lsls	r1, r1, #1
 8008c3e:	2018      	movs	r0, #24
 8008c40:	1809      	adds	r1, r1, r0
 8008c42:	19c9      	adds	r1, r1, r7
 8008c44:	600a      	str	r2, [r1, #0]
 8008c46:	001c      	movs	r4, r3
 8008c48:	2200      	movs	r2, #0
 8008c4a:	0015      	movs	r5, r2
 8008c4c:	0020      	movs	r0, r4
 8008c4e:	0029      	movs	r1, r5
 8008c50:	0004      	movs	r4, r0
 8008c52:	0f62      	lsrs	r2, r4, #29
 8008c54:	000c      	movs	r4, r1
 8008c56:	00e4      	lsls	r4, r4, #3
 8008c58:	617c      	str	r4, [r7, #20]
 8008c5a:	697c      	ldr	r4, [r7, #20]
 8008c5c:	4314      	orrs	r4, r2
 8008c5e:	617c      	str	r4, [r7, #20]
 8008c60:	0001      	movs	r1, r0
 8008c62:	00c9      	lsls	r1, r1, #3
 8008c64:	6139      	str	r1, [r7, #16]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	6838      	ldr	r0, [r7, #0]
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	0004      	movs	r4, r0
 8008c72:	0f62      	lsrs	r2, r4, #29
 8008c74:	000c      	movs	r4, r1
 8008c76:	00e4      	lsls	r4, r4, #3
 8008c78:	60fc      	str	r4, [r7, #12]
 8008c7a:	68fc      	ldr	r4, [r7, #12]
 8008c7c:	4314      	orrs	r4, r2
 8008c7e:	60fc      	str	r4, [r7, #12]
 8008c80:	0001      	movs	r1, r0
 8008c82:	00ca      	lsls	r2, r1, #3
 8008c84:	60ba      	str	r2, [r7, #8]
 8008c86:	3307      	adds	r3, #7
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4669      	mov	r1, sp
 8008c8e:	1acb      	subs	r3, r1, r3
 8008c90:	469d      	mov	sp, r3
 8008c92:	466b      	mov	r3, sp
 8008c94:	3300      	adds	r3, #0
 8008c96:	20f4      	movs	r0, #244	; 0xf4
 8008c98:	0040      	lsls	r0, r0, #1
 8008c9a:	2218      	movs	r2, #24
 8008c9c:	1882      	adds	r2, r0, r2
 8008c9e:	19d1      	adds	r1, r2, r7
 8008ca0:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008ca2:	4b56      	ldr	r3, [pc, #344]	; (8008dfc <astronode_send_cmd_rr+0x320>)
 8008ca4:	22fc      	movs	r2, #252	; 0xfc
 8008ca6:	0052      	lsls	r2, r2, #1
 8008ca8:	189b      	adds	r3, r3, r2
 8008caa:	2218      	movs	r2, #24
 8008cac:	4694      	mov	ip, r2
 8008cae:	44bc      	add	ip, r7
 8008cb0:	4463      	add	r3, ip
 8008cb2:	22c4      	movs	r2, #196	; 0xc4
 8008cb4:	5a9b      	ldrh	r3, [r3, r2]
 8008cb6:	3b03      	subs	r3, #3
 8008cb8:	0019      	movs	r1, r3
 8008cba:	2358      	movs	r3, #88	; 0x58
 8008cbc:	2218      	movs	r2, #24
 8008cbe:	189b      	adds	r3, r3, r2
 8008cc0:	19db      	adds	r3, r3, r7
 8008cc2:	3305      	adds	r3, #5
 8008cc4:	4a51      	ldr	r2, [pc, #324]	; (8008e0c <astronode_send_cmd_rr+0x330>)
 8008cc6:	2418      	movs	r4, #24
 8008cc8:	1900      	adds	r0, r0, r4
 8008cca:	19c0      	adds	r0, r0, r7
 8008ccc:	6800      	ldr	r0, [r0, #0]
 8008cce:	f003 f991 	bl	800bff4 <snprintf>
 8008cd2:	0002      	movs	r2, r0
 8008cd4:	23f3      	movs	r3, #243	; 0xf3
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	2118      	movs	r1, #24
 8008cda:	185b      	adds	r3, r3, r1
 8008cdc:	19db      	adds	r3, r3, r7
 8008cde:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008ce0:	23fb      	movs	r3, #251	; 0xfb
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	2218      	movs	r2, #24
 8008ce6:	189b      	adds	r3, r3, r2
 8008ce8:	19db      	adds	r3, r3, r7
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e037      	b.n	8008d60 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008cf0:	23fb      	movs	r3, #251	; 0xfb
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	2218      	movs	r2, #24
 8008cf6:	189b      	adds	r3, r3, r2
 8008cf8:	19db      	adds	r3, r3, r7
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	22f4      	movs	r2, #244	; 0xf4
 8008cfe:	0052      	lsls	r2, r2, #1
 8008d00:	2118      	movs	r1, #24
 8008d02:	1852      	adds	r2, r2, r1
 8008d04:	19d2      	adds	r2, r2, r7
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	5cd3      	ldrb	r3, [r2, r3]
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	4b40      	ldr	r3, [pc, #256]	; (8008e10 <astronode_send_cmd_rr+0x334>)
 8008d0e:	18d3      	adds	r3, r2, r3
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	001a      	movs	r2, r3
 8008d14:	2397      	movs	r3, #151	; 0x97
 8008d16:	4013      	ands	r3, r2
 8008d18:	d105      	bne.n	8008d26 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008d1a:	4b3e      	ldr	r3, [pc, #248]	; (8008e14 <astronode_send_cmd_rr+0x338>)
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f7fa f9ab 	bl	8003078 <send_debug_logs>
                    return false;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e056      	b.n	8008dd4 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008d26:	20fb      	movs	r0, #251	; 0xfb
 8008d28:	0040      	lsls	r0, r0, #1
 8008d2a:	2318      	movs	r3, #24
 8008d2c:	18c3      	adds	r3, r0, r3
 8008d2e:	19db      	adds	r3, r3, r7
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	2318      	movs	r3, #24
 8008d34:	18c3      	adds	r3, r0, r3
 8008d36:	19db      	adds	r3, r3, r7
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	69f9      	ldr	r1, [r7, #28]
 8008d3c:	18cb      	adds	r3, r1, r3
 8008d3e:	21f4      	movs	r1, #244	; 0xf4
 8008d40:	0049      	lsls	r1, r1, #1
 8008d42:	2418      	movs	r4, #24
 8008d44:	1909      	adds	r1, r1, r4
 8008d46:	19c9      	adds	r1, r1, r7
 8008d48:	6809      	ldr	r1, [r1, #0]
 8008d4a:	5c8a      	ldrb	r2, [r1, r2]
 8008d4c:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008d4e:	2318      	movs	r3, #24
 8008d50:	18c3      	adds	r3, r0, r3
 8008d52:	19db      	adds	r3, r3, r7
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	2318      	movs	r3, #24
 8008d58:	18c3      	adds	r3, r0, r3
 8008d5a:	19db      	adds	r3, r3, r7
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	23fb      	movs	r3, #251	; 0xfb
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	2218      	movs	r2, #24
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	19db      	adds	r3, r3, r7
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	21f3      	movs	r1, #243	; 0xf3
 8008d70:	0049      	lsls	r1, r1, #1
 8008d72:	2218      	movs	r2, #24
 8008d74:	188a      	adds	r2, r1, r2
 8008d76:	19d2      	adds	r2, r2, r7
 8008d78:	8812      	ldrh	r2, [r2, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d8b8      	bhi.n	8008cf0 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8008d7e:	23f8      	movs	r3, #248	; 0xf8
 8008d80:	33ff      	adds	r3, #255	; 0xff
 8008d82:	2218      	movs	r2, #24
 8008d84:	189b      	adds	r3, r3, r2
 8008d86:	19db      	adds	r3, r3, r7
 8008d88:	2201      	movs	r2, #1
 8008d8a:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008d8c:	2318      	movs	r3, #24
 8008d8e:	18cb      	adds	r3, r1, r3
 8008d90:	19db      	adds	r3, r3, r7
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	18d3      	adds	r3, r2, r3
 8008d98:	2200      	movs	r2, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	; (8008e18 <astronode_send_cmd_rr+0x33c>)
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f7fa f96a 	bl	8003078 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008da4:	2358      	movs	r3, #88	; 0x58
 8008da6:	2218      	movs	r2, #24
 8008da8:	189b      	adds	r3, r3, r2
 8008daa:	19db      	adds	r3, r3, r7
 8008dac:	1d5a      	adds	r2, r3, #5
 8008dae:	491b      	ldr	r1, [pc, #108]	; (8008e1c <astronode_send_cmd_rr+0x340>)
 8008db0:	24f4      	movs	r4, #244	; 0xf4
 8008db2:	0064      	lsls	r4, r4, #1
 8008db4:	2318      	movs	r3, #24
 8008db6:	18e3      	adds	r3, r4, r3
 8008db8:	19db      	adds	r3, r3, r7
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f003 f94d 	bl	800c05c <sprintf>
            send_debug_logs(command_content);
 8008dc2:	2318      	movs	r3, #24
 8008dc4:	18e3      	adds	r3, r4, r3
 8008dc6:	19db      	adds	r3, r3, r7
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7fa f954 	bl	8003078 <send_debug_logs>
 8008dd0:	46b5      	mov	sp, r6
 8008dd2:	e005      	b.n	8008de0 <astronode_send_cmd_rr+0x304>
                return result ;
 8008dd4:	46b5      	mov	sp, r6
 8008dd6:	e009      	b.n	8008dec <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <astronode_send_cmd_rr+0x344>)
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7fa f94c 	bl	8003078 <send_debug_logs>
        }
    }
    return result ;
 8008de0:	23f8      	movs	r3, #248	; 0xf8
 8008de2:	33ff      	adds	r3, #255	; 0xff
 8008de4:	2218      	movs	r2, #24
 8008de6:	189b      	adds	r3, r3, r2
 8008de8:	19db      	adds	r3, r3, r7
 8008dea:	781b      	ldrb	r3, [r3, #0]
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	2385      	movs	r3, #133	; 0x85
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	449d      	add	sp, r3
 8008df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df8:	fffffdec 	.word	0xfffffdec
 8008dfc:	fffffe60 	.word	0xfffffe60
 8008e00:	08013cf0 	.word	0x08013cf0
 8008e04:	08013d0c 	.word	0x08013d0c
 8008e08:	08013d5c 	.word	0x08013d5c
 8008e0c:	08013380 	.word	0x08013380
 8008e10:	080148c8 	.word	0x080148c8
 8008e14:	08013d70 	.word	0x08013d70
 8008e18:	08013d9c 	.word	0x08013d9c
 8008e1c:	08013db4 	.word	0x08013db4
 8008e20:	08013db8 	.word	0x08013db8

08008e24 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <is_sak_available+0x10>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
}
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	20000b0c 	.word	0x20000b0c

08008e38 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <is_astronode_reset+0x10>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
}
 8008e40:	0018      	movs	r0, r3
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	20000b0d 	.word	0x20000b0d

08008e4c <is_command_available>:

bool is_command_available()
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <is_command_available+0x10>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
}
 8008e54:	0018      	movs	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	20000b0e 	.word	0x20000b0e

08008e60 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	0002      	movs	r2, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	1dfb      	adds	r3, r7, #7
 8008e6c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008e6e:	1dfb      	adds	r3, r7, #7
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b2f      	cmp	r3, #47	; 0x2f
 8008e74:	d90b      	bls.n	8008e8e <ascii_to_value+0x2e>
 8008e76:	1dfb      	adds	r3, r7, #7
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b39      	cmp	r3, #57	; 0x39
 8008e7c:	d807      	bhi.n	8008e8e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008e7e:	1dfb      	adds	r3, r7, #7
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	3b30      	subs	r3, #48	; 0x30
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
        return true;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e010      	b.n	8008eb0 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008e8e:	1dfb      	adds	r3, r7, #7
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b40      	cmp	r3, #64	; 0x40
 8008e94:	d90b      	bls.n	8008eae <ascii_to_value+0x4e>
 8008e96:	1dfb      	adds	r3, r7, #7
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b46      	cmp	r3, #70	; 0x46
 8008e9c:	d807      	bhi.n	8008eae <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008e9e:	1dfb      	adds	r3, r7, #7
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	3b37      	subs	r3, #55	; 0x37
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	701a      	strb	r2, [r3, #0]
        return true;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008eae:	2300      	movs	r3, #0
    }
}
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	b002      	add	sp, #8
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008ec2:	250e      	movs	r5, #14
 8008ec4:	197b      	adds	r3, r7, r5
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008eca:	197b      	adds	r3, r7, r5
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	197a      	adds	r2, r7, r5
 8008ed0:	1c59      	adds	r1, r3, #1
 8008ed2:	8011      	strh	r1, [r2, #0]
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	2202      	movs	r2, #2
 8008edc:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	260a      	movs	r6, #10
 8008ee2:	19bc      	adds	r4, r7, r6
 8008ee4:	4a44      	ldr	r2, [pc, #272]	; (8008ff8 <astronode_create_request_transport+0x140>)
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f000 fa7d 	bl	80093e8 <calculate_crc>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	1c58      	adds	r0, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	22c4      	movs	r2, #196	; 0xc4
 8008efa:	5a99      	ldrh	r1, [r3, r2]
 8008efc:	19bc      	adds	r4, r7, r6
 8008efe:	19bb      	adds	r3, r7, r6
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	001a      	movs	r2, r3
 8008f04:	f000 fa70 	bl	80093e8 <calculate_crc>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008f0c:	19bb      	adds	r3, r7, r6
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	b21a      	sxth	r2, r3
 8008f14:	0031      	movs	r1, r6
 8008f16:	19bb      	adds	r3, r7, r6
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	b21b      	sxth	r3, r3
 8008f20:	4313      	orrs	r3, r2
 8008f22:	b21a      	sxth	r2, r3
 8008f24:	187b      	adds	r3, r7, r1
 8008f26:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7818      	ldrb	r0, [r3, #0]
 8008f2c:	197b      	adds	r3, r7, r5
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	18d3      	adds	r3, r2, r3
 8008f34:	0019      	movs	r1, r3
 8008f36:	f000 fbeb 	bl	8009710 <uint8_to_ascii_buffer>
    index += 2;
 8008f3a:	197b      	adds	r3, r7, r5
 8008f3c:	197a      	adds	r2, r7, r5
 8008f3e:	8812      	ldrh	r2, [r2, #0]
 8008f40:	3202      	adds	r2, #2
 8008f42:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008f44:	230c      	movs	r3, #12
 8008f46:	18fb      	adds	r3, r7, r3
 8008f48:	2200      	movs	r2, #0
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	e017      	b.n	8008f7e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008f4e:	240c      	movs	r4, #12
 8008f50:	193b      	adds	r3, r7, r4
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	18d3      	adds	r3, r2, r3
 8008f58:	7858      	ldrb	r0, [r3, #1]
 8008f5a:	250e      	movs	r5, #14
 8008f5c:	197b      	adds	r3, r7, r5
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	18d3      	adds	r3, r2, r3
 8008f64:	0019      	movs	r1, r3
 8008f66:	f000 fbd3 	bl	8009710 <uint8_to_ascii_buffer>
        index += 2;
 8008f6a:	197b      	adds	r3, r7, r5
 8008f6c:	197a      	adds	r2, r7, r5
 8008f6e:	8812      	ldrh	r2, [r2, #0]
 8008f70:	3202      	adds	r2, #2
 8008f72:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008f74:	193b      	adds	r3, r7, r4
 8008f76:	881a      	ldrh	r2, [r3, #0]
 8008f78:	193b      	adds	r3, r7, r4
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	22c4      	movs	r2, #196	; 0xc4
 8008f82:	5a9b      	ldrh	r3, [r3, r2]
 8008f84:	220c      	movs	r2, #12
 8008f86:	18ba      	adds	r2, r7, r2
 8008f88:	8812      	ldrh	r2, [r2, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d3df      	bcc.n	8008f4e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008f8e:	250a      	movs	r5, #10
 8008f90:	197b      	adds	r3, r7, r5
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	0a1b      	lsrs	r3, r3, #8
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	b2d8      	uxtb	r0, r3
 8008f9a:	240e      	movs	r4, #14
 8008f9c:	193b      	adds	r3, r7, r4
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	f000 fbb3 	bl	8009710 <uint8_to_ascii_buffer>
    index += 2;
 8008faa:	0021      	movs	r1, r4
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	187a      	adds	r2, r7, r1
 8008fb0:	8812      	ldrh	r2, [r2, #0]
 8008fb2:	3202      	adds	r2, #2
 8008fb4:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008fb6:	197b      	adds	r3, r7, r5
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b2d8      	uxtb	r0, r3
 8008fbc:	000c      	movs	r4, r1
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	18d3      	adds	r3, r2, r3
 8008fc6:	0019      	movs	r1, r3
 8008fc8:	f000 fba2 	bl	8009710 <uint8_to_ascii_buffer>
    index += 2;
 8008fcc:	0020      	movs	r0, r4
 8008fce:	183b      	adds	r3, r7, r0
 8008fd0:	183a      	adds	r2, r7, r0
 8008fd2:	8812      	ldrh	r2, [r2, #0]
 8008fd4:	3202      	adds	r2, #2
 8008fd6:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008fd8:	183b      	adds	r3, r7, r0
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	183a      	adds	r2, r7, r0
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	8011      	strh	r1, [r2, #0]
 8008fe2:	001a      	movs	r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	2203      	movs	r2, #3
 8008fea:	701a      	strb	r2, [r3, #0]

    return index;
 8008fec:	183b      	adds	r3, r7, r0
 8008fee:	881b      	ldrh	r3, [r3, #0]
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b005      	add	sp, #20
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff8:	0000ffff 	.word	0x0000ffff

08008ffc <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b089      	sub	sp, #36	; 0x24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	230a      	movs	r3, #10
 8009008:	18fb      	adds	r3, r7, r3
 800900a:	1c0a      	adds	r2, r1, #0
 800900c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d005      	beq.n	8009022 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009016:	4bbd      	ldr	r3, [pc, #756]	; (800930c <astronode_decode_answer_transport+0x310>)
 8009018:	0018      	movs	r0, r3
 800901a:	f7fa f82d 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800901e:	2300      	movs	r3, #0
 8009020:	e170      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8009022:	210a      	movs	r1, #10
 8009024:	187b      	adds	r3, r7, r1
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	2201      	movs	r2, #1
 800902a:	4013      	ands	r3, r2
 800902c:	b29b      	uxth	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <astronode_decode_answer_transport+0x3e>
 8009032:	187b      	adds	r3, r7, r1
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	2b07      	cmp	r3, #7
 8009038:	d805      	bhi.n	8009046 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800903a:	4bb5      	ldr	r3, [pc, #724]	; (8009310 <astronode_decode_answer_transport+0x314>)
 800903c:	0018      	movs	r0, r3
 800903e:	f7fa f81b 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 8009042:	2300      	movs	r3, #0
 8009044:	e15e      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8009046:	230a      	movs	r3, #10
 8009048:	18fb      	adds	r3, r7, r3
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	3b08      	subs	r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	da00      	bge.n	8009054 <astronode_decode_answer_transport+0x58>
 8009052:	3301      	adds	r3, #1
 8009054:	105b      	asrs	r3, r3, #1
 8009056:	b299      	uxth	r1, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	22c4      	movs	r2, #196	; 0xc4
 800905c:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800905e:	230a      	movs	r3, #10
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	3b01      	subs	r3, #1
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d005      	beq.n	800907c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8009070:	4ba8      	ldr	r3, [pc, #672]	; (8009314 <astronode_decode_answer_transport+0x318>)
 8009072:	0018      	movs	r0, r3
 8009074:	f7fa f800 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 8009078:	2300      	movs	r3, #0
 800907a:	e143      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800907c:	2117      	movs	r1, #23
 800907e:	187b      	adds	r3, r7, r1
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8009084:	2416      	movs	r4, #22
 8009086:	193b      	adds	r3, r7, r4
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	187a      	adds	r2, r7, r1
 8009094:	0011      	movs	r1, r2
 8009096:	0018      	movs	r0, r3
 8009098:	f7ff fee2 	bl	8008e60 <ascii_to_value>
 800909c:	0003      	movs	r3, r0
 800909e:	001a      	movs	r2, r3
 80090a0:	2301      	movs	r3, #1
 80090a2:	4053      	eors	r3, r2
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10e      	bne.n	80090c8 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3302      	adds	r3, #2
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	193a      	adds	r2, r7, r4
 80090b2:	0011      	movs	r1, r2
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7ff fed3 	bl	8008e60 <ascii_to_value>
 80090ba:	0003      	movs	r3, r0
 80090bc:	001a      	movs	r2, r3
 80090be:	2301      	movs	r3, #1
 80090c0:	4053      	eors	r3, r2
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80090c8:	4b93      	ldr	r3, [pc, #588]	; (8009318 <astronode_decode_answer_transport+0x31c>)
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7f9 ffd4 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e117      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80090d4:	2317      	movs	r3, #23
 80090d6:	18fb      	adds	r3, r7, r3
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	2316      	movs	r3, #22
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	18d3      	adds	r3, r2, r3
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80090ec:	231e      	movs	r3, #30
 80090ee:	18fb      	adds	r3, r7, r3
 80090f0:	2203      	movs	r2, #3
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	231c      	movs	r3, #28
 80090f6:	18fb      	adds	r3, r7, r3
 80090f8:	2200      	movs	r2, #0
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	e045      	b.n	800918a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80090fe:	241e      	movs	r4, #30
 8009100:	193b      	adds	r3, r7, r4
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	18d3      	adds	r3, r2, r3
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2217      	movs	r2, #23
 800910c:	18ba      	adds	r2, r7, r2
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f7ff fea5 	bl	8008e60 <ascii_to_value>
 8009116:	0003      	movs	r3, r0
 8009118:	001a      	movs	r2, r3
 800911a:	2301      	movs	r3, #1
 800911c:	4053      	eors	r3, r2
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	d112      	bne.n	800914a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009124:	193b      	adds	r3, r7, r4
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	18d3      	adds	r3, r2, r3
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2216      	movs	r2, #22
 8009132:	18ba      	adds	r2, r7, r2
 8009134:	0011      	movs	r1, r2
 8009136:	0018      	movs	r0, r3
 8009138:	f7ff fe92 	bl	8008e60 <ascii_to_value>
 800913c:	0003      	movs	r3, r0
 800913e:	001a      	movs	r2, r3
 8009140:	2301      	movs	r3, #1
 8009142:	4053      	eors	r3, r2
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800914a:	4b73      	ldr	r3, [pc, #460]	; (8009318 <astronode_decode_answer_transport+0x31c>)
 800914c:	0018      	movs	r0, r3
 800914e:	f7f9 ff93 	bl	8003078 <send_debug_logs>
            return RS_FAILURE;
 8009152:	2300      	movs	r3, #0
 8009154:	e0d6      	b.n	8009304 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8009156:	2317      	movs	r3, #23
 8009158:	18fb      	adds	r3, r7, r3
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	b2d9      	uxtb	r1, r3
 8009160:	2316      	movs	r3, #22
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	201c      	movs	r0, #28
 8009168:	183b      	adds	r3, r7, r0
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	1838      	adds	r0, r7, r0
 800916e:	1c5c      	adds	r4, r3, #1
 8009170:	8004      	strh	r4, [r0, #0]
 8009172:	0018      	movs	r0, r3
 8009174:	188b      	adds	r3, r1, r2
 8009176:	b2da      	uxtb	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	181b      	adds	r3, r3, r0
 800917c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800917e:	221e      	movs	r2, #30
 8009180:	18bb      	adds	r3, r7, r2
 8009182:	18ba      	adds	r2, r7, r2
 8009184:	8812      	ldrh	r2, [r2, #0]
 8009186:	3202      	adds	r2, #2
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	231e      	movs	r3, #30
 800918c:	18fb      	adds	r3, r7, r3
 800918e:	881a      	ldrh	r2, [r3, #0]
 8009190:	260a      	movs	r6, #10
 8009192:	19bb      	adds	r3, r7, r6
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	3b05      	subs	r3, #5
 8009198:	429a      	cmp	r2, r3
 800919a:	dbb0      	blt.n	80090fe <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	251a      	movs	r5, #26
 80091a0:	197c      	adds	r4, r7, r5
 80091a2:	4a5e      	ldr	r2, [pc, #376]	; (800931c <astronode_decode_answer_transport+0x320>)
 80091a4:	2101      	movs	r1, #1
 80091a6:	0018      	movs	r0, r3
 80091a8:	f000 f91e 	bl	80093e8 <calculate_crc>
 80091ac:	0003      	movs	r3, r0
 80091ae:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	1c58      	adds	r0, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	22c4      	movs	r2, #196	; 0xc4
 80091b8:	5a99      	ldrh	r1, [r3, r2]
 80091ba:	197c      	adds	r4, r7, r5
 80091bc:	197b      	adds	r3, r7, r5
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	001a      	movs	r2, r3
 80091c2:	f000 f911 	bl	80093e8 <calculate_crc>
 80091c6:	0003      	movs	r3, r0
 80091c8:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80091ca:	197b      	adds	r3, r7, r5
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	b21a      	sxth	r2, r3
 80091d2:	0029      	movs	r1, r5
 80091d4:	197b      	adds	r3, r7, r5
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	0a1b      	lsrs	r3, r3, #8
 80091da:	b29b      	uxth	r3, r3
 80091dc:	b21b      	sxth	r3, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	b21a      	sxth	r2, r3
 80091e2:	187b      	adds	r3, r7, r1
 80091e4:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80091e6:	19bb      	adds	r3, r7, r6
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	3b05      	subs	r3, #5
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	18d3      	adds	r3, r2, r3
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2217      	movs	r2, #23
 80091f4:	18ba      	adds	r2, r7, r2
 80091f6:	0011      	movs	r1, r2
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7ff fe31 	bl	8008e60 <ascii_to_value>
 80091fe:	0003      	movs	r3, r0
 8009200:	001a      	movs	r2, r3
 8009202:	2301      	movs	r3, #1
 8009204:	4053      	eors	r3, r2
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d112      	bne.n	8009232 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800920c:	19bb      	adds	r3, r7, r6
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	3b04      	subs	r3, #4
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	18d3      	adds	r3, r2, r3
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2216      	movs	r2, #22
 800921a:	18ba      	adds	r2, r7, r2
 800921c:	0011      	movs	r1, r2
 800921e:	0018      	movs	r0, r3
 8009220:	f7ff fe1e 	bl	8008e60 <ascii_to_value>
 8009224:	0003      	movs	r3, r0
 8009226:	001a      	movs	r2, r3
 8009228:	2301      	movs	r3, #1
 800922a:	4053      	eors	r3, r2
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009232:	4b39      	ldr	r3, [pc, #228]	; (8009318 <astronode_decode_answer_transport+0x31c>)
 8009234:	0018      	movs	r0, r3
 8009236:	f7f9 ff1f 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800923a:	2300      	movs	r3, #0
 800923c:	e062      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800923e:	2017      	movs	r0, #23
 8009240:	183b      	adds	r3, r7, r0
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	031b      	lsls	r3, r3, #12
 8009248:	b299      	uxth	r1, r3
 800924a:	2416      	movs	r4, #22
 800924c:	193b      	adds	r3, r7, r4
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	b29a      	uxth	r2, r3
 8009256:	2318      	movs	r3, #24
 8009258:	18fb      	adds	r3, r7, r3
 800925a:	188a      	adds	r2, r1, r2
 800925c:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800925e:	250a      	movs	r5, #10
 8009260:	197b      	adds	r3, r7, r5
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	3b03      	subs	r3, #3
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	18d3      	adds	r3, r2, r3
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	183a      	adds	r2, r7, r0
 800926e:	0011      	movs	r1, r2
 8009270:	0018      	movs	r0, r3
 8009272:	f7ff fdf5 	bl	8008e60 <ascii_to_value>
 8009276:	0003      	movs	r3, r0
 8009278:	001a      	movs	r2, r3
 800927a:	2301      	movs	r3, #1
 800927c:	4053      	eors	r3, r2
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d111      	bne.n	80092a8 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009284:	197b      	adds	r3, r7, r5
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	3b02      	subs	r3, #2
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	18d3      	adds	r3, r2, r3
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	193a      	adds	r2, r7, r4
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f7ff fde3 	bl	8008e60 <ascii_to_value>
 800929a:	0003      	movs	r3, r0
 800929c:	001a      	movs	r2, r3
 800929e:	2301      	movs	r3, #1
 80092a0:	4053      	eors	r3, r2
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80092a8:	4b1b      	ldr	r3, [pc, #108]	; (8009318 <astronode_decode_answer_transport+0x31c>)
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7f9 fee4 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e027      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80092b4:	2317      	movs	r3, #23
 80092b6:	18fb      	adds	r3, r7, r3
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	b29a      	uxth	r2, r3
 80092c0:	2316      	movs	r3, #22
 80092c2:	18fb      	adds	r3, r7, r3
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	18d3      	adds	r3, r2, r3
 80092ca:	b299      	uxth	r1, r3
 80092cc:	2018      	movs	r0, #24
 80092ce:	183b      	adds	r3, r7, r0
 80092d0:	183a      	adds	r2, r7, r0
 80092d2:	8812      	ldrh	r2, [r2, #0]
 80092d4:	188a      	adds	r2, r1, r2
 80092d6:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80092d8:	183a      	adds	r2, r7, r0
 80092da:	231a      	movs	r3, #26
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	8812      	ldrh	r2, [r2, #0]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d005      	beq.n	80092f2 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80092e6:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <astronode_decode_answer_transport+0x324>)
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7f9 fec5 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e008      	b.n	8009304 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2bff      	cmp	r3, #255	; 0xff
 80092f8:	d103      	bne.n	8009302 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	0018      	movs	r0, r3
 80092fe:	f000 f8c3 	bl	8009488 <check_for_error>
    }

    return RS_SUCCESS;
 8009302:	2301      	movs	r3, #1
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b009      	add	sp, #36	; 0x24
 800930a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930c:	08013e48 	.word	0x08013e48
 8009310:	08013e98 	.word	0x08013e98
 8009314:	08013ee8 	.word	0x08013ee8
 8009318:	08013f38 	.word	0x08013f38
 800931c:	0000ffff 	.word	0x0000ffff
 8009320:	08013f84 	.word	0x08013f84

08009324 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009326:	4c2b      	ldr	r4, [pc, #172]	; (80093d4 <astronode_transport_send_receive+0xb0>)
 8009328:	44a5      	add	sp, r4
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009330:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <astronode_transport_send_receive+0xb4>)
 8009332:	25ca      	movs	r5, #202	; 0xca
 8009334:	00ad      	lsls	r5, r5, #2
 8009336:	195b      	adds	r3, r3, r5
 8009338:	19db      	adds	r3, r3, r7
 800933a:	2200      	movs	r2, #0
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	22c4      	movs	r2, #196	; 0xc4
 8009342:	0052      	lsls	r2, r2, #1
 8009344:	2100      	movs	r1, #0
 8009346:	0018      	movs	r0, r3
 8009348:	f002 ff1e 	bl	800c188 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800934c:	4b23      	ldr	r3, [pc, #140]	; (80093dc <astronode_transport_send_receive+0xb8>)
 800934e:	195b      	adds	r3, r3, r5
 8009350:	19db      	adds	r3, r3, r7
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	3304      	adds	r3, #4
 8009358:	22c4      	movs	r2, #196	; 0xc4
 800935a:	0052      	lsls	r2, r2, #1
 800935c:	2100      	movs	r1, #0
 800935e:	0018      	movs	r0, r3
 8009360:	f002 ff12 	bl	800c188 <memset>
    uint16_t answer_length =  0;
 8009364:	4b1e      	ldr	r3, [pc, #120]	; (80093e0 <astronode_transport_send_receive+0xbc>)
 8009366:	195b      	adds	r3, r3, r5
 8009368:	19db      	adds	r3, r3, r7
 800936a:	2200      	movs	r2, #0
 800936c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800936e:	4e1d      	ldr	r6, [pc, #116]	; (80093e4 <astronode_transport_send_receive+0xc0>)
 8009370:	19bc      	adds	r4, r7, r6
 8009372:	23cc      	movs	r3, #204	; 0xcc
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	18fa      	adds	r2, r7, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	0011      	movs	r1, r2
 800937c:	0018      	movs	r0, r3
 800937e:	f7ff fd9b 	bl	8008eb8 <astronode_create_request_transport>
 8009382:	0003      	movs	r3, r0
 8009384:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009386:	19bb      	adds	r3, r7, r6
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	23cc      	movs	r3, #204	; 0xcc
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	0011      	movs	r1, r2
 8009392:	0018      	movs	r0, r3
 8009394:	f7fa fa34 	bl	8003800 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009398:	230a      	movs	r3, #10
 800939a:	18fa      	adds	r2, r7, r3
 800939c:	240c      	movs	r4, #12
 800939e:	193b      	adds	r3, r7, r4
 80093a0:	0011      	movs	r1, r2
 80093a2:	0018      	movs	r0, r3
 80093a4:	f000 f92c 	bl	8009600 <receive_astronode_answer>
 80093a8:	0003      	movs	r3, r0
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d10a      	bne.n	80093c4 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80093ae:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <astronode_transport_send_receive+0xbc>)
 80093b0:	195b      	adds	r3, r3, r5
 80093b2:	19db      	adds	r3, r3, r7
 80093b4:	8819      	ldrh	r1, [r3, #0]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	193b      	adds	r3, r7, r4
 80093ba:	0018      	movs	r0, r3
 80093bc:	f7ff fe1e 	bl	8008ffc <astronode_decode_answer_transport>
 80093c0:	0003      	movs	r3, r0
 80093c2:	e000      	b.n	80093c6 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80093c4:	2300      	movs	r3, #0
    }
}
 80093c6:	0018      	movs	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	23cb      	movs	r3, #203	; 0xcb
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	449d      	add	sp, r3
 80093d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	fffffcd4 	.word	0xfffffcd4
 80093d8:	fffffe70 	.word	0xfffffe70
 80093dc:	fffffce4 	.word	0xfffffce4
 80093e0:	fffffce2 	.word	0xfffffce2
 80093e4:	00000326 	.word	0x00000326

080093e8 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	0008      	movs	r0, r1
 80093f2:	0011      	movs	r1, r2
 80093f4:	1cbb      	adds	r3, r7, #2
 80093f6:	1c02      	adds	r2, r0, #0
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	003b      	movs	r3, r7
 80093fc:	1c0a      	adds	r2, r1, #0
 80093fe:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009400:	230e      	movs	r3, #14
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	003a      	movs	r2, r7
 8009406:	8812      	ldrh	r2, [r2, #0]
 8009408:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800940a:	e02e      	b.n	800946a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800940c:	240e      	movs	r4, #14
 800940e:	193b      	adds	r3, r7, r4
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	0a1b      	lsrs	r3, r3, #8
 8009414:	b299      	uxth	r1, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b29a      	uxth	r2, r3
 8009420:	200c      	movs	r0, #12
 8009422:	183b      	adds	r3, r7, r0
 8009424:	404a      	eors	r2, r1
 8009426:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009428:	183b      	adds	r3, r7, r0
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	091b      	lsrs	r3, r3, #4
 800942e:	b299      	uxth	r1, r3
 8009430:	183b      	adds	r3, r7, r0
 8009432:	183a      	adds	r2, r7, r0
 8009434:	8812      	ldrh	r2, [r2, #0]
 8009436:	404a      	eors	r2, r1
 8009438:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800943a:	0021      	movs	r1, r4
 800943c:	187b      	adds	r3, r7, r1
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b21a      	sxth	r2, r3
 8009444:	183b      	adds	r3, r7, r0
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	031b      	lsls	r3, r3, #12
 800944a:	b21b      	sxth	r3, r3
 800944c:	4053      	eors	r3, r2
 800944e:	b21a      	sxth	r2, r3
 8009450:	183b      	adds	r3, r7, r0
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	015b      	lsls	r3, r3, #5
 8009456:	b21b      	sxth	r3, r3
 8009458:	4053      	eors	r3, r2
 800945a:	b21a      	sxth	r2, r3
 800945c:	183b      	adds	r3, r7, r0
 800945e:	2000      	movs	r0, #0
 8009460:	5e1b      	ldrsh	r3, [r3, r0]
 8009462:	4053      	eors	r3, r2
 8009464:	b21a      	sxth	r2, r3
 8009466:	187b      	adds	r3, r7, r1
 8009468:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800946a:	1cbb      	adds	r3, r7, #2
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	1cba      	adds	r2, r7, #2
 8009470:	1e59      	subs	r1, r3, #1
 8009472:	8011      	strh	r1, [r2, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1c9      	bne.n	800940c <calculate_crc+0x24>
    }
    return crc;
 8009478:	230e      	movs	r3, #14
 800947a:	18fb      	adds	r3, r7, r3
 800947c:	881b      	ldrh	r3, [r3, #0]
}
 800947e:	0018      	movs	r0, r3
 8009480:	46bd      	mov	sp, r7
 8009482:	b005      	add	sp, #20
 8009484:	bd90      	pop	{r4, r7, pc}
	...

08009488 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	b299      	uxth	r1, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	789b      	ldrb	r3, [r3, #2]
 800949a:	b29b      	uxth	r3, r3
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	b29a      	uxth	r2, r3
 80094a0:	200e      	movs	r0, #14
 80094a2:	183b      	adds	r3, r7, r0
 80094a4:	188a      	adds	r2, r1, r2
 80094a6:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80094a8:	183b      	adds	r3, r7, r0
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	4a40      	ldr	r2, [pc, #256]	; (80095b0 <check_for_error+0x128>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d100      	bne.n	80094b4 <check_for_error+0x2c>
 80094b2:	e06f      	b.n	8009594 <check_for_error+0x10c>
 80094b4:	4a3e      	ldr	r2, [pc, #248]	; (80095b0 <check_for_error+0x128>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	dd00      	ble.n	80094bc <check_for_error+0x34>
 80094ba:	e070      	b.n	800959e <check_for_error+0x116>
 80094bc:	4a3d      	ldr	r2, [pc, #244]	; (80095b4 <check_for_error+0x12c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d100      	bne.n	80094c4 <check_for_error+0x3c>
 80094c2:	e062      	b.n	800958a <check_for_error+0x102>
 80094c4:	4a3b      	ldr	r2, [pc, #236]	; (80095b4 <check_for_error+0x12c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	dd00      	ble.n	80094cc <check_for_error+0x44>
 80094ca:	e068      	b.n	800959e <check_for_error+0x116>
 80094cc:	4a3a      	ldr	r2, [pc, #232]	; (80095b8 <check_for_error+0x130>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d056      	beq.n	8009580 <check_for_error+0xf8>
 80094d2:	4a39      	ldr	r2, [pc, #228]	; (80095b8 <check_for_error+0x130>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dd00      	ble.n	80094da <check_for_error+0x52>
 80094d8:	e061      	b.n	800959e <check_for_error+0x116>
 80094da:	4a38      	ldr	r2, [pc, #224]	; (80095bc <check_for_error+0x134>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d04a      	beq.n	8009576 <check_for_error+0xee>
 80094e0:	4a36      	ldr	r2, [pc, #216]	; (80095bc <check_for_error+0x134>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	dc5b      	bgt.n	800959e <check_for_error+0x116>
 80094e6:	4a36      	ldr	r2, [pc, #216]	; (80095c0 <check_for_error+0x138>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d03f      	beq.n	800956c <check_for_error+0xe4>
 80094ec:	4a34      	ldr	r2, [pc, #208]	; (80095c0 <check_for_error+0x138>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	dc55      	bgt.n	800959e <check_for_error+0x116>
 80094f2:	4a34      	ldr	r2, [pc, #208]	; (80095c4 <check_for_error+0x13c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d034      	beq.n	8009562 <check_for_error+0xda>
 80094f8:	4a32      	ldr	r2, [pc, #200]	; (80095c4 <check_for_error+0x13c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	dc4f      	bgt.n	800959e <check_for_error+0x116>
 80094fe:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <check_for_error+0x140>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d029      	beq.n	8009558 <check_for_error+0xd0>
 8009504:	4a30      	ldr	r2, [pc, #192]	; (80095c8 <check_for_error+0x140>)
 8009506:	4293      	cmp	r3, r2
 8009508:	dc49      	bgt.n	800959e <check_for_error+0x116>
 800950a:	4a30      	ldr	r2, [pc, #192]	; (80095cc <check_for_error+0x144>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d01e      	beq.n	800954e <check_for_error+0xc6>
 8009510:	4a2e      	ldr	r2, [pc, #184]	; (80095cc <check_for_error+0x144>)
 8009512:	4293      	cmp	r3, r2
 8009514:	dc43      	bgt.n	800959e <check_for_error+0x116>
 8009516:	2222      	movs	r2, #34	; 0x22
 8009518:	32ff      	adds	r2, #255	; 0xff
 800951a:	4293      	cmp	r3, r2
 800951c:	d012      	beq.n	8009544 <check_for_error+0xbc>
 800951e:	2291      	movs	r2, #145	; 0x91
 8009520:	0052      	lsls	r2, r2, #1
 8009522:	4293      	cmp	r3, r2
 8009524:	da3b      	bge.n	800959e <check_for_error+0x116>
 8009526:	2b01      	cmp	r3, #1
 8009528:	d002      	beq.n	8009530 <check_for_error+0xa8>
 800952a:	2b11      	cmp	r3, #17
 800952c:	d005      	beq.n	800953a <check_for_error+0xb2>
 800952e:	e036      	b.n	800959e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009530:	4b27      	ldr	r3, [pc, #156]	; (80095d0 <check_for_error+0x148>)
 8009532:	0018      	movs	r0, r3
 8009534:	f7f9 fda0 	bl	8003078 <send_debug_logs>
            break;
 8009538:	e036      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800953a:	4b26      	ldr	r3, [pc, #152]	; (80095d4 <check_for_error+0x14c>)
 800953c:	0018      	movs	r0, r3
 800953e:	f7f9 fd9b 	bl	8003078 <send_debug_logs>
            break;
 8009542:	e031      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009544:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <check_for_error+0x150>)
 8009546:	0018      	movs	r0, r3
 8009548:	f7f9 fd96 	bl	8003078 <send_debug_logs>
            break;
 800954c:	e02c      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800954e:	4b23      	ldr	r3, [pc, #140]	; (80095dc <check_for_error+0x154>)
 8009550:	0018      	movs	r0, r3
 8009552:	f7f9 fd91 	bl	8003078 <send_debug_logs>
            break;
 8009556:	e027      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009558:	4b21      	ldr	r3, [pc, #132]	; (80095e0 <check_for_error+0x158>)
 800955a:	0018      	movs	r0, r3
 800955c:	f7f9 fd8c 	bl	8003078 <send_debug_logs>
            break;
 8009560:	e022      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009562:	4b20      	ldr	r3, [pc, #128]	; (80095e4 <check_for_error+0x15c>)
 8009564:	0018      	movs	r0, r3
 8009566:	f7f9 fd87 	bl	8003078 <send_debug_logs>
            break;
 800956a:	e01d      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <check_for_error+0x160>)
 800956e:	0018      	movs	r0, r3
 8009570:	f7f9 fd82 	bl	8003078 <send_debug_logs>
            break;
 8009574:	e018      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009576:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <check_for_error+0x164>)
 8009578:	0018      	movs	r0, r3
 800957a:	f7f9 fd7d 	bl	8003078 <send_debug_logs>
            break;
 800957e:	e013      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009580:	4b1b      	ldr	r3, [pc, #108]	; (80095f0 <check_for_error+0x168>)
 8009582:	0018      	movs	r0, r3
 8009584:	f7f9 fd78 	bl	8003078 <send_debug_logs>
            break;
 8009588:	e00e      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800958a:	4b1a      	ldr	r3, [pc, #104]	; (80095f4 <check_for_error+0x16c>)
 800958c:	0018      	movs	r0, r3
 800958e:	f7f9 fd73 	bl	8003078 <send_debug_logs>
            break;
 8009592:	e009      	b.n	80095a8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009594:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <check_for_error+0x170>)
 8009596:	0018      	movs	r0, r3
 8009598:	f7f9 fd6e 	bl	8003078 <send_debug_logs>
            break;
 800959c:	e004      	b.n	80095a8 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800959e:	4b17      	ldr	r3, [pc, #92]	; (80095fc <check_for_error+0x174>)
 80095a0:	0018      	movs	r0, r3
 80095a2:	f7f9 fd69 	bl	8003078 <send_debug_logs>
            break;
 80095a6:	46c0      	nop			; (mov r8, r8)
    }
}
 80095a8:	46c0      	nop			; (mov r8, r8)
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b004      	add	sp, #16
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	00004601 	.word	0x00004601
 80095b4:	00004501 	.word	0x00004501
 80095b8:	00003501 	.word	0x00003501
 80095bc:	00002601 	.word	0x00002601
 80095c0:	00002511 	.word	0x00002511
 80095c4:	00002501 	.word	0x00002501
 80095c8:	00000611 	.word	0x00000611
 80095cc:	00000601 	.word	0x00000601
 80095d0:	08013fc8 	.word	0x08013fc8
 80095d4:	08014014 	.word	0x08014014
 80095d8:	08014078 	.word	0x08014078
 80095dc:	080140b0 	.word	0x080140b0
 80095e0:	08014154 	.word	0x08014154
 80095e4:	080141bc 	.word	0x080141bc
 80095e8:	0801421c 	.word	0x0801421c
 80095ec:	080142a8 	.word	0x080142a8
 80095f0:	08014308 	.word	0x08014308
 80095f4:	080143b4 	.word	0x080143b4
 80095f8:	08014400 	.word	0x08014400
 80095fc:	08014448 	.word	0x08014448

08009600 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009600:	b5b0      	push	{r4, r5, r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800960a:	230f      	movs	r3, #15
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009612:	2316      	movs	r3, #22
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800961a:	f7fa f90f 	bl	800383c <get_systick>
 800961e:	0003      	movs	r3, r0
 8009620:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009622:	2315      	movs	r3, #21
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800962a:	e054      	b.n	80096d6 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800962c:	4a34      	ldr	r2, [pc, #208]	; (8009700 <receive_astronode_answer+0x100>)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	0011      	movs	r1, r2
 8009632:	0018      	movs	r0, r3
 8009634:	f7fa f90a 	bl	800384c <is_systick_timeout_over>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d005      	beq.n	8009648 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800963c:	4b31      	ldr	r3, [pc, #196]	; (8009704 <receive_astronode_answer+0x104>)
 800963e:	0018      	movs	r0, r3
 8009640:	f7f9 fd1a 	bl	8003078 <send_debug_logs>
            return RS_FAILURE;
 8009644:	2300      	movs	r3, #0
 8009646:	e057      	b.n	80096f8 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009648:	250f      	movs	r5, #15
 800964a:	197b      	adds	r3, r7, r5
 800964c:	0018      	movs	r0, r3
 800964e:	f7fa f913 	bl	8003878 <is_astronode_character_received>
 8009652:	0003      	movs	r3, r0
 8009654:	0019      	movs	r1, r3
 8009656:	2016      	movs	r0, #22
 8009658:	183b      	adds	r3, r7, r0
 800965a:	183a      	adds	r2, r7, r0
 800965c:	8812      	ldrh	r2, [r2, #0]
 800965e:	801a      	strh	r2, [r3, #0]
 8009660:	2415      	movs	r4, #21
 8009662:	193b      	adds	r3, r7, r4
 8009664:	193a      	adds	r2, r7, r4
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	2900      	cmp	r1, #0
 800966c:	d033      	beq.n	80096d6 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800966e:	197b      	adds	r3, r7, r5
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d105      	bne.n	8009682 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009676:	193b      	adds	r3, r7, r4
 8009678:	2200      	movs	r2, #0
 800967a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800967c:	183b      	adds	r3, r7, r0
 800967e:	2200      	movs	r2, #0
 8009680:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009682:	2116      	movs	r1, #22
 8009684:	187b      	adds	r3, r7, r1
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	18d3      	adds	r3, r2, r3
 800968c:	220f      	movs	r2, #15
 800968e:	18ba      	adds	r2, r7, r2
 8009690:	7812      	ldrb	r2, [r2, #0]
 8009692:	701a      	strb	r2, [r3, #0]
            length++;
 8009694:	187b      	adds	r3, r7, r1
 8009696:	881a      	ldrh	r2, [r3, #0]
 8009698:	187b      	adds	r3, r7, r1
 800969a:	3201      	adds	r2, #1
 800969c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800969e:	187b      	adds	r3, r7, r1
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2bb2      	cmp	r3, #178	; 0xb2
 80096a4:	d905      	bls.n	80096b2 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80096a6:	4b18      	ldr	r3, [pc, #96]	; (8009708 <receive_astronode_answer+0x108>)
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7f9 fce5 	bl	8003078 <send_debug_logs>
                return RS_FAILURE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e022      	b.n	80096f8 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80096b2:	230f      	movs	r3, #15
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d10c      	bne.n	80096d6 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80096bc:	2216      	movs	r2, #22
 80096be:	18bb      	adds	r3, r7, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d907      	bls.n	80096d6 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	18ba      	adds	r2, r7, r2
 80096ca:	8812      	ldrh	r2, [r2, #0]
 80096cc:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80096ce:	2315      	movs	r3, #21
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	2201      	movs	r2, #1
 80096d4:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80096d6:	2315      	movs	r3, #21
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2201      	movs	r2, #1
 80096de:	4053      	eors	r3, r2
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1a2      	bne.n	800962c <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80096e6:	4b09      	ldr	r3, [pc, #36]	; (800970c <receive_astronode_answer+0x10c>)
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7f9 fcc5 	bl	8003078 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7f9 fcc1 	bl	8003078 <send_debug_logs>

    return RS_SUCCESS;
 80096f6:	2301      	movs	r3, #1
}
 80096f8:	0018      	movs	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b006      	add	sp, #24
 80096fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009700:	000005dc 	.word	0x000005dc
 8009704:	0801446c 	.word	0x0801446c
 8009708:	08014490 	.word	0x08014490
 800970c:	080144dc 	.word	0x080144dc

08009710 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	0002      	movs	r2, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	1dfb      	adds	r3, r7, #7
 800971c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800971e:	1dfb      	adds	r3, r7, #7
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	091b      	lsrs	r3, r3, #4
 8009724:	b2db      	uxtb	r3, r3
 8009726:	001a      	movs	r2, r3
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <uint8_to_ascii_buffer+0x3c>)
 800972a:	5c9a      	ldrb	r2, [r3, r2]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009730:	1dfb      	adds	r3, r7, #7
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	220f      	movs	r2, #15
 8009736:	401a      	ands	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	4903      	ldr	r1, [pc, #12]	; (800974c <uint8_to_ascii_buffer+0x3c>)
 800973e:	5c8a      	ldrb	r2, [r1, r2]
 8009740:	701a      	strb	r2, [r3, #0]
}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	46bd      	mov	sp, r7
 8009746:	b002      	add	sp, #8
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	0801483c 	.word	0x0801483c

08009750 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b087      	sub	sp, #28
 8009754:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009756:	1dfb      	adds	r3, r7, #7
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800975c:	e012      	b.n	8009784 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800975e:	f7fa f835 	bl	80037cc <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009762:	1dfc      	adds	r4, r7, #7
 8009764:	2300      	movs	r3, #0
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	2301      	movs	r3, #1
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	2301      	movs	r3, #1
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	2301      	movs	r3, #1
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	2201      	movs	r2, #1
 8009778:	2101      	movs	r1, #1
 800977a:	2001      	movs	r0, #1
 800977c:	f7fe fb64 	bl	8007e48 <astronode_send_cfg_wr>
 8009780:	0003      	movs	r3, r0
 8009782:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8009784:	1dfb      	adds	r3, r7, #7
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2201      	movs	r2, #1
 800978a:	4053      	eors	r3, r2
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8009792:	1dfb      	adds	r3, r7, #7
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800979a:	f7fe ffbb 	bl	8008714 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800979e:	f7fe fb1b 	bl	8007dd8 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80097a2:	f7ff f8b1 	bl	8008908 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80097a6:	f7fe fca5 	bl	80080f4 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80097aa:	f7fe fbf9 	bl	8007fa0 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80097ae:	f7fe ff35 	bl	800861c <astronode_send_pld_fr>
		return true ;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80097b6:	2300      	movs	r3, #0
	}
}
 80097b8:	0018      	movs	r0, r3
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b003      	add	sp, #12
 80097be:	bd90      	pop	{r4, r7, pc}

080097c0 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	0002      	movs	r2, r0
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	1dbb      	adds	r3, r7, #6
 80097cc:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7f6 fc97 	bl	8000104 <strlen>
 80097d6:	0003      	movs	r3, r0
 80097d8:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2ba0      	cmp	r3, #160	; 0xa0
 80097de:	d80b      	bhi.n	80097f8 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	1dbb      	adds	r3, r7, #6
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7fe fe6c 	bl	80084c8 <astronode_send_pld_er>
 80097f0:	1e03      	subs	r3, r0, #0
 80097f2:	d005      	beq.n	8009800 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e004      	b.n	8009802 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 80097f8:	4b04      	ldr	r3, [pc, #16]	; (800980c <my_astro_add_payload_2_queue+0x4c>)
 80097fa:	0018      	movs	r0, r3
 80097fc:	f7f9 fc3c 	bl	8003078 <send_debug_logs>
	}
	return false ;
 8009800:	2300      	movs	r3, #0
}
 8009802:	0018      	movs	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	b004      	add	sp, #16
 8009808:	bd80      	pop	{r7, pc}
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	08014508 	.word	0x08014508

08009810 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009814:	4b19      	ldr	r3, [pc, #100]	; (800987c <my_astro_handle_evt+0x6c>)
 8009816:	0018      	movs	r0, r3
 8009818:	f7f9 fc2e 	bl	8003078 <send_debug_logs>
	astronode_send_evt_rr () ;
 800981c:	f7fe fd14 	bl	8008248 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009820:	f7ff fb00 	bl	8008e24 <is_sak_available>
 8009824:	1e03      	subs	r3, r0, #0
 8009826:	d007      	beq.n	8009838 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009828:	f7fe ffd8 	bl	80087dc <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800982c:	f7ff f82c 	bl	8008888 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009830:	4b13      	ldr	r3, [pc, #76]	; (8009880 <my_astro_handle_evt+0x70>)
 8009832:	0018      	movs	r0, r3
 8009834:	f7f9 fc20 	bl	8003078 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009838:	f7ff fafe 	bl	8008e38 <is_astronode_reset>
 800983c:	1e03      	subs	r3, r0, #0
 800983e:	d005      	beq.n	800984c <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009840:	4b10      	ldr	r3, [pc, #64]	; (8009884 <my_astro_handle_evt+0x74>)
 8009842:	0018      	movs	r0, r3
 8009844:	f7f9 fc18 	bl	8003078 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009848:	f7fe ff24 	bl	8008694 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800984c:	f7ff fafe 	bl	8008e4c <is_command_available>
 8009850:	1e03      	subs	r3, r0, #0
 8009852:	d00e      	beq.n	8009872 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009854:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <my_astro_handle_evt+0x78>)
 8009856:	0018      	movs	r0, r3
 8009858:	f7f9 fc0e 	bl	8003078 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800985c:	4b0b      	ldr	r3, [pc, #44]	; (800988c <my_astro_handle_evt+0x7c>)
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff f93c 	bl	8008adc <astronode_send_cmd_rr>
 8009864:	1e03      	subs	r3, r0, #0
 8009866:	d002      	beq.n	800986e <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <my_astro_handle_evt+0x80>)
 800986a:	2201      	movs	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800986e:	f7ff f8f5 	bl	8008a5c <astronode_send_cmd_cr>
	}
	return true ;
 8009872:	2301      	movs	r3, #1
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	08014570 	.word	0x08014570
 8009880:	080145a4 	.word	0x080145a4
 8009884:	080145e8 	.word	0x080145e8
 8009888:	08014624 	.word	0x08014624
 800988c:	20000c0c 	.word	0x20000c0c
 8009890:	20000c0a 	.word	0x20000c0a

08009894 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	0011      	movs	r1, r2
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7fe fd4f 	bl	8008348 <astronode_send_geo_wr>
}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b002      	add	sp, #8
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	4ca5      	ldr	r4, [pc, #660]	; (8009b4c <my_gnss_acq_coordinates+0x298>)
 80098b8:	44a5      	add	sp, r4
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 80098be:	4ba4      	ldr	r3, [pc, #656]	; (8009b50 <my_gnss_acq_coordinates+0x29c>)
 80098c0:	18fb      	adds	r3, r7, r3
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 80098c6:	4ba3      	ldr	r3, [pc, #652]	; (8009b54 <my_gnss_acq_coordinates+0x2a0>)
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 80098ce:	4ba2      	ldr	r3, [pc, #648]	; (8009b58 <my_gnss_acq_coordinates+0x2a4>)
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 80098d6:	4ba1      	ldr	r3, [pc, #644]	; (8009b5c <my_gnss_acq_coordinates+0x2a8>)
 80098d8:	18fb      	adds	r3, r7, r3
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 80098de:	4ba0      	ldr	r3, [pc, #640]	; (8009b60 <my_gnss_acq_coordinates+0x2ac>)
 80098e0:	18fb      	adds	r3, r7, r3
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 80098e6:	4b9f      	ldr	r3, [pc, #636]	; (8009b64 <my_gnss_acq_coordinates+0x2b0>)
 80098e8:	2486      	movs	r4, #134	; 0x86
 80098ea:	00a4      	lsls	r4, r4, #2
 80098ec:	191b      	adds	r3, r3, r4
 80098ee:	19db      	adds	r3, r3, r7
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	3304      	adds	r3, #4
 80098f6:	22f6      	movs	r2, #246	; 0xf6
 80098f8:	2100      	movs	r1, #0
 80098fa:	0018      	movs	r0, r3
 80098fc:	f002 fc44 	bl	800c188 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009900:	4b99      	ldr	r3, [pc, #612]	; (8009b68 <my_gnss_acq_coordinates+0x2b4>)
 8009902:	191b      	adds	r3, r3, r4
 8009904:	19db      	adds	r3, r3, r7
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	3304      	adds	r3, #4
 800990c:	22f6      	movs	r2, #246	; 0xf6
 800990e:	2100      	movs	r1, #0
 8009910:	0018      	movs	r0, r3
 8009912:	f002 fc39 	bl	800c188 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009916:	4b95      	ldr	r3, [pc, #596]	; (8009b6c <my_gnss_acq_coordinates+0x2b8>)
 8009918:	2284      	movs	r2, #132	; 0x84
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	18ba      	adds	r2, r7, r2
 800991e:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009920:	4b93      	ldr	r3, [pc, #588]	; (8009b70 <my_gnss_acq_coordinates+0x2bc>)
 8009922:	2283      	movs	r2, #131	; 0x83
 8009924:	0092      	lsls	r2, r2, #2
 8009926:	18ba      	adds	r2, r7, r2
 8009928:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800992a:	4b92      	ldr	r3, [pc, #584]	; (8009b74 <my_gnss_acq_coordinates+0x2c0>)
 800992c:	2282      	movs	r2, #130	; 0x82
 800992e:	0092      	lsls	r2, r2, #2
 8009930:	18ba      	adds	r2, r7, r2
 8009932:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009934:	4b90      	ldr	r3, [pc, #576]	; (8009b78 <my_gnss_acq_coordinates+0x2c4>)
 8009936:	2281      	movs	r2, #129	; 0x81
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	18ba      	adds	r2, r7, r2
 800993c:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2230      	movs	r2, #48	; 0x30
 8009942:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	4b8c      	ldr	r3, [pc, #560]	; (8009b7c <my_gnss_acq_coordinates+0x2c8>)
 800994a:	608a      	str	r2, [r1, #8]
 800994c:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800994e:	f7f9 ffc5 	bl	80038dc <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009952:	e0c4      	b.n	8009ade <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009954:	4c80      	ldr	r4, [pc, #512]	; (8009b58 <my_gnss_acq_coordinates+0x2a4>)
 8009956:	193b      	adds	r3, r7, r4
 8009958:	2101      	movs	r1, #1
 800995a:	0018      	movs	r0, r3
 800995c:	f7f9 ff12 	bl	8003784 <my_gnss_receive_byte>
		if ( rx_byte )
 8009960:	0020      	movs	r0, r4
 8009962:	183b      	adds	r3, r7, r0
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	4c7b      	ldr	r4, [pc, #492]	; (8009b54 <my_gnss_acq_coordinates+0x2a0>)
 8009968:	193a      	adds	r2, r7, r4
 800996a:	1939      	adds	r1, r7, r4
 800996c:	7809      	ldrb	r1, [r1, #0]
 800996e:	7011      	strb	r1, [r2, #0]
 8009970:	4d7b      	ldr	r5, [pc, #492]	; (8009b60 <my_gnss_acq_coordinates+0x2ac>)
 8009972:	197a      	adds	r2, r7, r5
 8009974:	1979      	adds	r1, r7, r5
 8009976:	7809      	ldrb	r1, [r1, #0]
 8009978:	7011      	strb	r1, [r2, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d100      	bne.n	8009980 <my_gnss_acq_coordinates+0xcc>
 800997e:	e0ae      	b.n	8009ade <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009980:	4b76      	ldr	r3, [pc, #472]	; (8009b5c <my_gnss_acq_coordinates+0x2a8>)
 8009982:	18fa      	adds	r2, r7, r3
 8009984:	2684      	movs	r6, #132	; 0x84
 8009986:	0076      	lsls	r6, r6, #1
 8009988:	19b9      	adds	r1, r7, r6
 800998a:	183b      	adds	r3, r7, r0
 800998c:	0018      	movs	r0, r3
 800998e:	f000 fbf9 	bl	800a184 <my_nmea_message>
 8009992:	0001      	movs	r1, r0
 8009994:	193b      	adds	r3, r7, r4
 8009996:	193a      	adds	r2, r7, r4
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	197b      	adds	r3, r7, r5
 800999e:	197a      	adds	r2, r7, r5
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	701a      	strb	r2, [r3, #0]
 80099a4:	2902      	cmp	r1, #2
 80099a6:	d000      	beq.n	80099aa <my_gnss_acq_coordinates+0xf6>
 80099a8:	e099      	b.n	8009ade <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80099aa:	19bb      	adds	r3, r7, r6
 80099ac:	0018      	movs	r0, r3
 80099ae:	f000 fca9 	bl	800a304 <is_my_nmea_checksum_ok>
 80099b2:	0003      	movs	r3, r0
 80099b4:	0019      	movs	r1, r3
 80099b6:	193b      	adds	r3, r7, r4
 80099b8:	193a      	adds	r2, r7, r4
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	197b      	adds	r3, r7, r5
 80099c0:	197a      	adds	r2, r7, r5
 80099c2:	7812      	ldrb	r2, [r2, #0]
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d100      	bne.n	80099cc <my_gnss_acq_coordinates+0x118>
 80099ca:	e088      	b.n	8009ade <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 80099cc:	193b      	adds	r3, r7, r4
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2201      	movs	r2, #1
 80099d2:	4053      	eors	r3, r2
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d015      	beq.n	8009a06 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	7c1b      	ldrb	r3, [r3, #16]
 80099de:	2b33      	cmp	r3, #51	; 0x33
 80099e0:	d111      	bne.n	8009a06 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 80099e2:	2383      	movs	r3, #131	; 0x83
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	19bb      	adds	r3, r7, r6
 80099ec:	0011      	movs	r1, r2
 80099ee:	0018      	movs	r0, r3
 80099f0:	f002 fc3f 	bl	800c272 <strstr>
 80099f4:	1e03      	subs	r3, r0, #0
 80099f6:	d006      	beq.n	8009a06 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 80099f8:	19bb      	adds	r3, r7, r6
 80099fa:	0018      	movs	r0, r3
 80099fc:	f000 f9a6 	bl	8009d4c <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009a00:	193b      	adds	r3, r7, r4
 8009a02:	2201      	movs	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009a06:	2384      	movs	r3, #132	; 0x84
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	18fb      	adds	r3, r7, r3
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	2484      	movs	r4, #132	; 0x84
 8009a10:	0064      	lsls	r4, r4, #1
 8009a12:	193b      	adds	r3, r7, r4
 8009a14:	0011      	movs	r1, r2
 8009a16:	0018      	movs	r0, r3
 8009a18:	f002 fc2b 	bl	800c272 <strstr>
 8009a1c:	1e03      	subs	r3, r0, #0
 8009a1e:	d012      	beq.n	8009a46 <my_gnss_acq_coordinates+0x192>
 8009a20:	4d4f      	ldr	r5, [pc, #316]	; (8009b60 <my_gnss_acq_coordinates+0x2ac>)
 8009a22:	197b      	adds	r3, r7, r5
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d80d      	bhi.n	8009a46 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 8009a2a:	4b55      	ldr	r3, [pc, #340]	; (8009b80 <my_gnss_acq_coordinates+0x2cc>)
 8009a2c:	881a      	ldrh	r2, [r3, #0]
 8009a2e:	4b55      	ldr	r3, [pc, #340]	; (8009b84 <my_gnss_acq_coordinates+0x2d0>)
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d85b      	bhi.n	8009aee <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009a36:	193b      	adds	r3, r7, r4
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f000 fe09 	bl	800a650 <my_nmea_get_gsv_tns>
 8009a3e:	0003      	movs	r3, r0
 8009a40:	001a      	movs	r2, r3
 8009a42:	197b      	adds	r3, r7, r5
 8009a44:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 8009a46:	2382      	movs	r3, #130	; 0x82
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	18fb      	adds	r3, r7, r3
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	2484      	movs	r4, #132	; 0x84
 8009a50:	0064      	lsls	r4, r4, #1
 8009a52:	193b      	adds	r3, r7, r4
 8009a54:	0011      	movs	r1, r2
 8009a56:	0018      	movs	r0, r3
 8009a58:	f002 fc0b 	bl	800c272 <strstr>
 8009a5c:	1e03      	subs	r3, r0, #0
 8009a5e:	d010      	beq.n	8009a82 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009a60:	193b      	adds	r3, r7, r4
 8009a62:	0018      	movs	r0, r3
 8009a64:	f000 fbfa 	bl	800a25c <get_my_nmea_gngsa_fixed_mode_s>
 8009a68:	0003      	movs	r3, r0
 8009a6a:	001a      	movs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009a70:	193b      	adds	r3, r7, r4
 8009a72:	0018      	movs	r0, r3
 8009a74:	f000 fbfd 	bl	800a272 <get_my_nmea_gngsa_pdop_d>
 8009a78:	0002      	movs	r2, r0
 8009a7a:	000b      	movs	r3, r1
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	608a      	str	r2, [r1, #8]
 8009a80:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009a82:	2381      	movs	r3, #129	; 0x81
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	18fb      	adds	r3, r7, r3
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	2384      	movs	r3, #132	; 0x84
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	18fb      	adds	r3, r7, r3
 8009a90:	0011      	movs	r1, r2
 8009a92:	0018      	movs	r0, r3
 8009a94:	f002 fbed 	bl	800c272 <strstr>
 8009a98:	1e03      	subs	r3, r0, #0
 8009a9a:	d020      	beq.n	8009ade <my_gnss_acq_coordinates+0x22a>
 8009a9c:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <my_gnss_acq_coordinates+0x2a0>)
 8009a9e:	18fb      	adds	r3, r7, r3
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01b      	beq.n	8009ade <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7c1b      	ldrb	r3, [r3, #16]
 8009aaa:	2b33      	cmp	r3, #51	; 0x33
 8009aac:	d121      	bne.n	8009af2 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009aae:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <my_gnss_acq_coordinates+0x2b4>)
 8009ab0:	2186      	movs	r1, #134	; 0x86
 8009ab2:	0089      	lsls	r1, r1, #2
 8009ab4:	185b      	adds	r3, r3, r1
 8009ab6:	19da      	adds	r2, r3, r7
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <my_gnss_acq_coordinates+0x2b0>)
 8009aba:	185b      	adds	r3, r3, r1
 8009abc:	19db      	adds	r3, r3, r7
 8009abe:	0010      	movs	r0, r2
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	23fa      	movs	r3, #250	; 0xfa
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	f002 fc8c 	bl	800c3e2 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6898      	ldr	r0, [r3, #8]
 8009ace:	68d9      	ldr	r1, [r3, #12]
 8009ad0:	4b2d      	ldr	r3, [pc, #180]	; (8009b88 <my_gnss_acq_coordinates+0x2d4>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f7f6 fcc7 	bl	8000468 <__aeabi_dcmple>
 8009ada:	1e03      	subs	r3, r0, #0
 8009adc:	d10b      	bne.n	8009af6 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009ade:	4b28      	ldr	r3, [pc, #160]	; (8009b80 <my_gnss_acq_coordinates+0x2cc>)
 8009ae0:	881a      	ldrh	r2, [r3, #0]
 8009ae2:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <my_gnss_acq_coordinates+0x2d8>)
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d200      	bcs.n	8009aec <my_gnss_acq_coordinates+0x238>
 8009aea:	e733      	b.n	8009954 <my_gnss_acq_coordinates+0xa0>
 8009aec:	e004      	b.n	8009af8 <my_gnss_acq_coordinates+0x244>
							break ;
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	e002      	b.n	8009af8 <my_gnss_acq_coordinates+0x244>
							break ;
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	e000      	b.n	8009af8 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009af6:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009af8:	f7f9 ff00 	bl	80038fc <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009afc:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <my_gnss_acq_coordinates+0x2b4>)
 8009afe:	2286      	movs	r2, #134	; 0x86
 8009b00:	0092      	lsls	r2, r2, #2
 8009b02:	189b      	adds	r3, r3, r2
 8009b04:	19db      	adds	r3, r3, r7
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	230c      	movs	r3, #12
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	0011      	movs	r1, r2
 8009b14:	0018      	movs	r0, r3
 8009b16:	f000 fcb1 	bl	800a47c <my_nmea_get_gngll_coordinates>
		r = true ;
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <my_gnss_acq_coordinates+0x29c>)
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	2201      	movs	r2, #1
 8009b20:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009b22:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <my_gnss_acq_coordinates+0x2cc>)
 8009b24:	881a      	ldrh	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	4a14      	ldr	r2, [pc, #80]	; (8009b80 <my_gnss_acq_coordinates+0x2cc>)
 8009b30:	8812      	ldrh	r2, [r2, #0]
 8009b32:	189a      	adds	r2, r3, r2
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	615a      	str	r2, [r3, #20]
	return r ;
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <my_gnss_acq_coordinates+0x29c>)
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
}
 8009b3e:	0018      	movs	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	2387      	movs	r3, #135	; 0x87
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	449d      	add	sp, r3
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	fffffde4 	.word	0xfffffde4
 8009b50:	00000217 	.word	0x00000217
 8009b54:	00000216 	.word	0x00000216
 8009b58:	00000203 	.word	0x00000203
 8009b5c:	00000202 	.word	0x00000202
 8009b60:	00000215 	.word	0x00000215
 8009b64:	fffffef0 	.word	0xfffffef0
 8009b68:	fffffdf4 	.word	0xfffffdf4
 8009b6c:	08014664 	.word	0x08014664
 8009b70:	0801466c 	.word	0x0801466c
 8009b74:	08014674 	.word	0x08014674
 8009b78:	0801467c 	.word	0x0801467c
 8009b7c:	408f4000 	.word	0x408f4000
 8009b80:	20000c34 	.word	0x20000c34
 8009b84:	2000001c 	.word	0x2000001c
 8009b88:	20000020 	.word	0x20000020
 8009b8c:	2000001a 	.word	0x2000001a

08009b90 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <my_rtc_get_dt+0x2c>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f7fc f939 	bl	8005e18 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	4b04      	ldr	r3, [pc, #16]	; (8009bbc <my_rtc_get_dt+0x2c>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	0018      	movs	r0, r3
 8009bae:	f7fc f845 	bl	8005c3c <HAL_RTC_GetTime>
}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b002      	add	sp, #8
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	200006f4 	.word	0x200006f4

08009bc0 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bc2:	b08d      	sub	sp, #52	; 0x34
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009bc8:	2508      	movs	r5, #8
 8009bca:	1979      	adds	r1, r7, r5
 8009bcc:	4b1b      	ldr	r3, [pc, #108]	; (8009c3c <my_rtc_get_dt_s+0x7c>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f7fc f833 	bl	8005c3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009bd6:	241c      	movs	r4, #28
 8009bd8:	1939      	adds	r1, r7, r4
 8009bda:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <my_rtc_get_dt_s+0x7c>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	0018      	movs	r0, r3
 8009be0:	f7fc f91a 	bl	8005e18 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009be4:	0021      	movs	r1, r4
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	78db      	ldrb	r3, [r3, #3]
 8009bea:	22fa      	movs	r2, #250	; 0xfa
 8009bec:	00d2      	lsls	r2, r2, #3
 8009bee:	189a      	adds	r2, r3, r2
 8009bf0:	187b      	adds	r3, r7, r1
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	469c      	mov	ip, r3
 8009bf6:	187b      	adds	r3, r7, r1
 8009bf8:	789b      	ldrb	r3, [r3, #2]
 8009bfa:	001c      	movs	r4, r3
 8009bfc:	0028      	movs	r0, r5
 8009bfe:	183b      	adds	r3, r7, r0
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	001d      	movs	r5, r3
 8009c04:	183b      	adds	r3, r7, r0
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	001e      	movs	r6, r3
 8009c0a:	183b      	adds	r3, r7, r0
 8009c0c:	789b      	ldrb	r3, [r3, #2]
 8009c0e:	490c      	ldr	r1, [pc, #48]	; (8009c40 <my_rtc_get_dt_s+0x80>)
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	9303      	str	r3, [sp, #12]
 8009c14:	9602      	str	r6, [sp, #8]
 8009c16:	9501      	str	r5, [sp, #4]
 8009c18:	9400      	str	r4, [sp, #0]
 8009c1a:	4663      	mov	r3, ip
 8009c1c:	f002 fa1e 	bl	800c05c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009c20:	211c      	movs	r1, #28
 8009c22:	187b      	adds	r3, r7, r1
 8009c24:	78db      	ldrb	r3, [r3, #3]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	22fa      	movs	r2, #250	; 0xfa
 8009c2a:	00d2      	lsls	r2, r2, #3
 8009c2c:	4694      	mov	ip, r2
 8009c2e:	4463      	add	r3, ip
 8009c30:	b29b      	uxth	r3, r3
}
 8009c32:	0018      	movs	r0, r3
 8009c34:	46bd      	mov	sp, r7
 8009c36:	b009      	add	sp, #36	; 0x24
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	200006f4 	.word	0x200006f4
 8009c40:	080146cc 	.word	0x080146cc

08009c44 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b0a9      	sub	sp, #164	; 0xa4
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009c4c:	2434      	movs	r4, #52	; 0x34
 8009c4e:	193a      	adds	r2, r7, r4
 8009c50:	2548      	movs	r5, #72	; 0x48
 8009c52:	197b      	adds	r3, r7, r5
 8009c54:	0011      	movs	r1, r2
 8009c56:	0018      	movs	r0, r3
 8009c58:	f7ff ff9a 	bl	8009b90 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009c5c:	2680      	movs	r6, #128	; 0x80
 8009c5e:	19bb      	adds	r3, r7, r6
 8009c60:	0018      	movs	r0, r3
 8009c62:	f7ff ffad 	bl	8009bc0 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009c66:	4a36      	ldr	r2, [pc, #216]	; (8009d40 <my_rtc_set_alarm+0xfc>)
 8009c68:	4936      	ldr	r1, [pc, #216]	; (8009d44 <my_rtc_set_alarm+0x100>)
 8009c6a:	234c      	movs	r3, #76	; 0x4c
 8009c6c:	18f8      	adds	r0, r7, r3
 8009c6e:	19bb      	adds	r3, r7, r6
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	232d      	movs	r3, #45	; 0x2d
 8009c74:	f002 f9f2 	bl	800c05c <sprintf>
	send_debug_logs ( m ) ;
 8009c78:	234c      	movs	r3, #76	; 0x4c
 8009c7a:	18fb      	adds	r3, r7, r3
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f7f9 f9fb 	bl	8003078 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009c82:	193a      	adds	r2, r7, r4
 8009c84:	197b      	adds	r3, r7, r5
 8009c86:	0011      	movs	r1, r2
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 f90d 	bl	8009ea8 <my_conv_rtc2timestamp>
 8009c8e:	0002      	movs	r2, r0
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	189b      	adds	r3, r3, r2
 8009c94:	2094      	movs	r0, #148	; 0x94
 8009c96:	183a      	adds	r2, r7, r0
 8009c98:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8009c9a:	193a      	adds	r2, r7, r4
 8009c9c:	1979      	adds	r1, r7, r5
 8009c9e:	1838      	adds	r0, r7, r0
 8009ca0:	6803      	ldr	r3, [r0, #0]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 f974 	bl	8009f90 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009ca8:	193b      	adds	r3, r7, r4
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	210c      	movs	r1, #12
 8009cae:	187b      	adds	r3, r7, r1
 8009cb0:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009cb2:	193b      	adds	r3, r7, r4
 8009cb4:	785a      	ldrb	r2, [r3, #1]
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8009cba:	193b      	adds	r3, r7, r4
 8009cbc:	789a      	ldrb	r2, [r3, #2]
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009cc2:	0008      	movs	r0, r1
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8009cca:	183b      	adds	r3, r7, r0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009cd0:	183b      	adds	r3, r7, r0
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009cd6:	183b      	adds	r3, r7, r0
 8009cd8:	2200      	movs	r2, #0
 8009cda:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009cdc:	183b      	adds	r3, r7, r0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009ce2:	183b      	adds	r3, r7, r0
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009ce8:	197b      	adds	r3, r7, r5
 8009cea:	7899      	ldrb	r1, [r3, #2]
 8009cec:	183b      	adds	r3, r7, r0
 8009cee:	2220      	movs	r2, #32
 8009cf0:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009cf2:	183b      	adds	r3, r7, r0
 8009cf4:	2280      	movs	r2, #128	; 0x80
 8009cf6:	0052      	lsls	r2, r2, #1
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009cfa:	1839      	adds	r1, r7, r0
 8009cfc:	4b12      	ldr	r3, [pc, #72]	; (8009d48 <my_rtc_set_alarm+0x104>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7fc f8d7 	bl	8005eb4 <HAL_RTC_SetAlarm_IT>
 8009d06:	1e03      	subs	r3, r0, #0
 8009d08:	d114      	bne.n	8009d34 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009d0a:	19ba      	adds	r2, r7, r6
 8009d0c:	1939      	adds	r1, r7, r4
 8009d0e:	197b      	adds	r3, r7, r5
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 f9ff 	bl	800a114 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009d16:	4a0a      	ldr	r2, [pc, #40]	; (8009d40 <my_rtc_set_alarm+0xfc>)
 8009d18:	490a      	ldr	r1, [pc, #40]	; (8009d44 <my_rtc_set_alarm+0x100>)
 8009d1a:	244c      	movs	r4, #76	; 0x4c
 8009d1c:	1938      	adds	r0, r7, r4
 8009d1e:	19bb      	adds	r3, r7, r6
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	2341      	movs	r3, #65	; 0x41
 8009d24:	f002 f99a 	bl	800c05c <sprintf>
		send_debug_logs ( m ) ;
 8009d28:	193b      	adds	r3, r7, r4
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f7f9 f9a4 	bl	8003078 <send_debug_logs>
		return true ;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e000      	b.n	8009d36 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	0018      	movs	r0, r3
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	b027      	add	sp, #156	; 0x9c
 8009d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	080146ec 	.word	0x080146ec
 8009d44:	08014708 	.word	0x08014708
 8009d48:	200006f4 	.word	0x200006f4

08009d4c <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009d4c:	b5b0      	push	{r4, r5, r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009d54:	2508      	movs	r5, #8
 8009d56:	197b      	adds	r3, r7, r5
 8009d58:	1cda      	adds	r2, r3, #3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 fcae 	bl	800a6c0 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009d64:	197b      	adds	r3, r7, r5
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	0011      	movs	r1, r2
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f000 fce1 	bl	800a734 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009d72:	197b      	adds	r3, r7, r5
 8009d74:	1c9a      	adds	r2, r3, #2
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	0011      	movs	r1, r2
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f000 fd14 	bl	800a7a8 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009d80:	240c      	movs	r4, #12
 8009d82:	193a      	adds	r2, r7, r4
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	0011      	movs	r1, r2
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f000 fd47 	bl	800a81c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009d8e:	193b      	adds	r3, r7, r4
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	0011      	movs	r1, r2
 8009d96:	0018      	movs	r0, r3
 8009d98:	f000 fd7a 	bl	800a890 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009d9c:	193b      	adds	r3, r7, r4
 8009d9e:	1c9a      	adds	r2, r3, #2
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	0011      	movs	r1, r2
 8009da4:	0018      	movs	r0, r3
 8009da6:	f000 fdad 	bl	800a904 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009daa:	193b      	adds	r3, r7, r4
 8009dac:	1d1a      	adds	r2, r3, #4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	0011      	movs	r1, r2
 8009db2:	0018      	movs	r0, r3
 8009db4:	f000 fde0 	bl	800a978 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009db8:	193b      	adds	r3, r7, r4
 8009dba:	2200      	movs	r2, #0
 8009dbc:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009dbe:	193b      	adds	r3, r7, r4
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7fc fae3 	bl	8006392 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009dcc:	1939      	adds	r1, r7, r4
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f7fb fe8a 	bl	8005aec <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009dd8:	1979      	adds	r1, r7, r5
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	0018      	movs	r0, r3
 8009de0:	f7fb ff88 	bl	8005cf4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009de4:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009de6:	0018      	movs	r0, r3
 8009de8:	f7fc fb07 	bl	80063fa <HAL_RTCEx_DisableBypassShadow>
}
 8009dec:	46c0      	nop			; (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b008      	add	sp, #32
 8009df2:	bdb0      	pop	{r4, r5, r7, pc}
 8009df4:	200006f4 	.word	0x200006f4

08009df8 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2100      	movs	r1, #0
 8009e04:	0018      	movs	r0, r3
 8009e06:	f001 fefb 	bl	800bc00 <strtod>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	000b      	movs	r3, r1
 8009e0e:	60ba      	str	r2, [r7, #8]
 8009e10:	60fb      	str	r3, [r7, #12]
    return d ;
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
}
 8009e16:	0010      	movs	r0, r2
 8009e18:	0019      	movs	r1, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b004      	add	sp, #16
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	0008      	movs	r0, r1
 8009e2a:	0011      	movs	r1, r2
 8009e2c:	1cfb      	adds	r3, r7, #3
 8009e2e:	1c02      	adds	r2, r0, #0
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	1cbb      	adds	r3, r7, #2
 8009e34:	1c0a      	adds	r2, r1, #0
 8009e36:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009e38:	230f      	movs	r3, #15
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009e40:	230e      	movs	r3, #14
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	2200      	movs	r2, #0
 8009e46:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009e48:	e01c      	b.n	8009e84 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009e4a:	230f      	movs	r3, #15
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	1cfa      	adds	r2, r7, #3
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d105      	bne.n	8009e6a <my_find_char_position+0x4a>
			p++ ;
 8009e5e:	210e      	movs	r1, #14
 8009e60:	187b      	adds	r3, r7, r1
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	187b      	adds	r3, r7, r1
 8009e66:	3201      	adds	r2, #1
 8009e68:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009e6a:	230e      	movs	r3, #14
 8009e6c:	18fa      	adds	r2, r7, r3
 8009e6e:	1cbb      	adds	r3, r7, #2
 8009e70:	7812      	ldrb	r2, [r2, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d00e      	beq.n	8009e96 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009e78:	210f      	movs	r1, #15
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	781a      	ldrb	r2, [r3, #0]
 8009e7e:	187b      	adds	r3, r7, r1
 8009e80:	3201      	adds	r2, #1
 8009e82:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009e84:	230f      	movs	r3, #15
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	18d3      	adds	r3, r2, r3
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1da      	bne.n	8009e4a <my_find_char_position+0x2a>
 8009e94:	e000      	b.n	8009e98 <my_find_char_position+0x78>
			break ;
 8009e96:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009e98:	230f      	movs	r3, #15
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	781b      	ldrb	r3, [r3, #0]
}
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	b004      	add	sp, #16
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	78db      	ldrb	r3, [r3, #3]
 8009eb6:	22fa      	movs	r2, #250	; 0xfa
 8009eb8:	00d2      	lsls	r2, r2, #3
 8009eba:	4694      	mov	ip, r2
 8009ebc:	4463      	add	r3, ip
 8009ebe:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	0013      	movs	r3, r2
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	189b      	adds	r3, r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	189b      	adds	r3, r3, r2
 8009ecc:	009a      	lsls	r2, r3, #2
 8009ece:	189a      	adds	r2, r3, r2
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	492c      	ldr	r1, [pc, #176]	; (8009f84 <my_conv_rtc2timestamp+0xdc>)
 8009ed4:	468c      	mov	ip, r1
 8009ed6:	4463      	add	r3, ip
 8009ed8:	089b      	lsrs	r3, r3, #2
 8009eda:	18d3      	adds	r3, r2, r3
 8009edc:	4a2a      	ldr	r2, [pc, #168]	; (8009f88 <my_conv_rtc2timestamp+0xe0>)
 8009ede:	4694      	mov	ip, r2
 8009ee0:	4463      	add	r3, ip
 8009ee2:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	e00a      	b.n	8009f00 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009eea:	4a28      	ldr	r2, [pc, #160]	; (8009f8c <my_conv_rtc2timestamp+0xe4>)
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	18d3      	adds	r3, r2, r3
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	001a      	movs	r2, r3
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	189b      	adds	r3, r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3301      	adds	r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	dbee      	blt.n	8009eea <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d908      	bls.n	8009f26 <my_conv_rtc2timestamp+0x7e>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	0018      	movs	r0, r3
 8009f18:	f000 f8de 	bl	800a0d8 <my_conv_is_leap_year>
 8009f1c:	1e03      	subs	r3, r0, #0
 8009f1e:	d002      	beq.n	8009f26 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3301      	adds	r3, #1
 8009f24:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	789b      	ldrb	r3, [r3, #2]
 8009f2a:	001a      	movs	r2, r3
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	18d3      	adds	r3, r2, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	0013      	movs	r3, r2
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	189b      	adds	r3, r3, r2
 8009f3c:	011a      	lsls	r2, r3, #4
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	0113      	lsls	r3, r2, #4
 8009f42:	1a9b      	subs	r3, r3, r2
 8009f44:	01db      	lsls	r3, r3, #7
 8009f46:	0019      	movs	r1, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	0013      	movs	r3, r2
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	011a      	lsls	r2, r3, #4
 8009f56:	1ad2      	subs	r2, r2, r3
 8009f58:	0113      	lsls	r3, r2, #4
 8009f5a:	001a      	movs	r2, r3
 8009f5c:	0013      	movs	r3, r2
 8009f5e:	18ca      	adds	r2, r1, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	0019      	movs	r1, r3
 8009f66:	000b      	movs	r3, r1
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	1a5b      	subs	r3, r3, r1
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	18d3      	adds	r3, r2, r3
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	7892      	ldrb	r2, [r2, #2]
 8009f74:	189b      	adds	r3, r3, r2
 8009f76:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009f78:	68bb      	ldr	r3, [r7, #8]
}
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	b006      	add	sp, #24
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	46c0      	nop			; (mov r8, r8)
 8009f84:	fffff84f 	.word	0xfffff84f
 8009f88:	fff50736 	.word	0xfff50736
 8009f8c:	0801484c 	.word	0x0801484c

08009f90 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009f90:	b590      	push	{r4, r7, lr}
 8009f92:	b08b      	sub	sp, #44	; 0x2c
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	213c      	movs	r1, #60	; 0x3c
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7f6 f951 	bl	8000248 <__aeabi_uidivmod>
 8009fa6:	000b      	movs	r3, r1
 8009fa8:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	213c      	movs	r1, #60	; 0x3c
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f7f6 f8c4 	bl	800013c <__udivsi3>
 8009fb4:	0003      	movs	r3, r0
 8009fb6:	213c      	movs	r1, #60	; 0x3c
 8009fb8:	0018      	movs	r0, r3
 8009fba:	f7f6 f945 	bl	8000248 <__aeabi_uidivmod>
 8009fbe:	000b      	movs	r3, r1
 8009fc0:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	22e1      	movs	r2, #225	; 0xe1
 8009fc6:	0111      	lsls	r1, r2, #4
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7f6 f8b7 	bl	800013c <__udivsi3>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	2118      	movs	r1, #24
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f7f6 f938 	bl	8000248 <__aeabi_uidivmod>
 8009fd8:	000b      	movs	r3, r1
 8009fda:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	493b      	ldr	r1, [pc, #236]	; (800a0cc <my_conv_timestamp2rtc+0x13c>)
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f7f6 f8ab 	bl	800013c <__udivsi3>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009fea:	4b39      	ldr	r3, [pc, #228]	; (800a0d0 <my_conv_timestamp2rtc+0x140>)
 8009fec:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009fee:	e00d      	b.n	800a00c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f000 f870 	bl	800a0d8 <my_conv_is_leap_year>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	336e      	adds	r3, #110	; 0x6e
 8009ffc:	33ff      	adds	r3, #255	; 0xff
 8009ffe:	001a      	movs	r2, r3
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	3301      	adds	r3, #1
 800a00a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	0018      	movs	r0, r3
 800a010:	f000 f862 	bl	800a0d8 <my_conv_is_leap_year>
 800a014:	0003      	movs	r3, r0
 800a016:	336e      	adds	r3, #110	; 0x6e
 800a018:	33ff      	adds	r3, #255	; 0xff
 800a01a:	001a      	movs	r2, r3
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	4293      	cmp	r3, r2
 800a020:	d2e6      	bcs.n	8009ff0 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a022:	2300      	movs	r3, #0
 800a024:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a026:	e018      	b.n	800a05a <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a028:	4b2a      	ldr	r3, [pc, #168]	; (800a0d4 <my_conv_timestamp2rtc+0x144>)
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	0052      	lsls	r2, r2, #1
 800a02e:	5ad3      	ldrh	r3, [r2, r3]
 800a030:	001c      	movs	r4, r3
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d107      	bne.n	800a048 <my_conv_timestamp2rtc+0xb8>
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 f84c 	bl	800a0d8 <my_conv_is_leap_year>
 800a040:	1e03      	subs	r3, r0, #0
 800a042:	d001      	beq.n	800a048 <my_conv_timestamp2rtc+0xb8>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <my_conv_timestamp2rtc+0xba>
 800a048:	2300      	movs	r3, #0
 800a04a:	191b      	adds	r3, r3, r4
 800a04c:	001a      	movs	r2, r3
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3301      	adds	r3, #1
 800a058:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <my_conv_timestamp2rtc+0x144>)
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	0052      	lsls	r2, r2, #1
 800a060:	5ad3      	ldrh	r3, [r2, r3]
 800a062:	001c      	movs	r4, r3
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d107      	bne.n	800a07a <my_conv_timestamp2rtc+0xea>
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 f833 	bl	800a0d8 <my_conv_is_leap_year>
 800a072:	1e03      	subs	r3, r0, #0
 800a074:	d001      	beq.n	800a07a <my_conv_timestamp2rtc+0xea>
 800a076:	2301      	movs	r3, #1
 800a078:	e000      	b.n	800a07c <my_conv_timestamp2rtc+0xec>
 800a07a:	2300      	movs	r3, #0
 800a07c:	191b      	adds	r3, r3, r4
 800a07e:	001a      	movs	r2, r3
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	4293      	cmp	r3, r2
 800a084:	d2d0      	bcs.n	800a028 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	3330      	adds	r3, #48	; 0x30
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	3301      	adds	r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	709a      	strb	r2, [r3, #2]
}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b00b      	add	sp, #44	; 0x2c
 800a0c8:	bd90      	pop	{r4, r7, pc}
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	00015180 	.word	0x00015180
 800a0d0:	000007b2 	.word	0x000007b2
 800a0d4:	08014858 	.word	0x08014858

0800a0d8 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d106      	bne.n	800a0f6 <my_conv_is_leap_year+0x1e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2164      	movs	r1, #100	; 0x64
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f7f6 f995 	bl	800041c <__aeabi_idivmod>
 800a0f2:	1e0b      	subs	r3, r1, #0
 800a0f4:	d107      	bne.n	800a106 <my_conv_is_leap_year+0x2e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	22c8      	movs	r2, #200	; 0xc8
 800a0fa:	0051      	lsls	r1, r2, #1
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7f6 f98d 	bl	800041c <__aeabi_idivmod>
 800a102:	1e0b      	subs	r3, r1, #0
 800a104:	d101      	bne.n	800a10a <my_conv_is_leap_year+0x32>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <my_conv_is_leap_year+0x34>
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	0018      	movs	r0, r3
 800a10e:	46bd      	mov	sp, r7
 800a110:	b002      	add	sp, #8
 800a112:	bd80      	pop	{r7, pc}

0800a114 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	b089      	sub	sp, #36	; 0x24
 800a118:	af04      	add	r7, sp, #16
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	78db      	ldrb	r3, [r3, #3]
 800a124:	22fa      	movs	r2, #250	; 0xfa
 800a126:	00d2      	lsls	r2, r2, #3
 800a128:	189a      	adds	r2, r3, r2
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	785b      	ldrb	r3, [r3, #1]
 800a12e:	469c      	mov	ip, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	789b      	ldrb	r3, [r3, #2]
 800a134:	001c      	movs	r4, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	001d      	movs	r5, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	001e      	movs	r6, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	4906      	ldr	r1, [pc, #24]	; (800a160 <my_conv_dt_2_dts+0x4c>)
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	9602      	str	r6, [sp, #8]
 800a14e:	9501      	str	r5, [sp, #4]
 800a150:	9400      	str	r4, [sp, #0]
 800a152:	4663      	mov	r3, ip
 800a154:	f001 ff82 	bl	800c05c <sprintf>
}
 800a158:	46c0      	nop			; (mov r8, r8)
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b005      	add	sp, #20
 800a15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a160:	08014714 	.word	0x08014714

0800a164 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800a16c:	230c      	movs	r3, #12
 800a16e:	18f9      	adds	r1, r7, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	220a      	movs	r2, #10
 800a174:	0018      	movs	r0, r3
 800a176:	f001 fe6d 	bl	800be54 <strtoul>
 800a17a:	0003      	movs	r3, r0
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b004      	add	sp, #16
 800a182:	bd80      	pop	{r7, pc}

0800a184 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b24      	cmp	r3, #36	; 0x24
 800a196:	d117      	bne.n	800a1c8 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	b2d1      	uxtb	r1, r2
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	7011      	strb	r1, [r2, #0]
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	189b      	adds	r3, r3, r2
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	7812      	ldrb	r2, [r2, #0]
 800a1b4:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	001a      	movs	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	189b      	adds	r3, r3, r2
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e045      	b.n	800a254 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b1f      	cmp	r3, #31
 800a1ce:	d907      	bls.n	800a1e0 <my_nmea_message+0x5c>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b7e      	cmp	r3, #126	; 0x7e
 800a1d6:	d803      	bhi.n	800a1e0 <my_nmea_message+0x5c>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <my_nmea_message+0x64>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b0d      	cmp	r3, #13
 800a1e6:	d114      	bne.n	800a212 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	b2d1      	uxtb	r1, r2
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7011      	strb	r1, [r2, #0]
 800a1f4:	001a      	movs	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	189b      	adds	r3, r3, r2
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	7812      	ldrb	r2, [r2, #0]
 800a1fe:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	001a      	movs	r2, r3
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	189b      	adds	r3, r3, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a20e:	2301      	movs	r3, #1
 800a210:	e020      	b.n	800a254 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b0a      	cmp	r3, #10
 800a218:	d11a      	bne.n	800a250 <my_nmea_message+0xcc>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d916      	bls.n	800a250 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	3b01      	subs	r3, #1
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	001a      	movs	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	189b      	adds	r3, r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b0d      	cmp	r3, #13
 800a23c:	d108      	bne.n	800a250 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	001a      	movs	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	189b      	adds	r3, r3, r2
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a24c:	2302      	movs	r3, #2
 800a24e:	e001      	b.n	800a254 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a250:	2301      	movs	r3, #1
 800a252:	425b      	negs	r3, r3
}
 800a254:	0018      	movs	r0, r3
 800a256:	46bd      	mov	sp, r7
 800a258:	b004      	add	sp, #16
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3309      	adds	r3, #9
 800a268:	781b      	ldrb	r3, [r3, #0]
}
 800a26a:	0018      	movs	r0, r3
 800a26c:	46bd      	mov	sp, r7
 800a26e:	b002      	add	sp, #8
 800a270:	bd80      	pop	{r7, pc}

0800a272 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a272:	b5b0      	push	{r4, r5, r7, lr}
 800a274:	b086      	sub	sp, #24
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	220f      	movs	r2, #15
 800a27e:	212c      	movs	r1, #44	; 0x2c
 800a280:	0018      	movs	r0, r3
 800a282:	f7ff fdcd 	bl	8009e20 <my_find_char_position>
 800a286:	0003      	movs	r3, r0
 800a288:	001a      	movs	r2, r3
 800a28a:	2517      	movs	r5, #23
 800a28c:	197b      	adds	r3, r7, r5
 800a28e:	3201      	adds	r2, #1
 800a290:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2210      	movs	r2, #16
 800a296:	212c      	movs	r1, #44	; 0x2c
 800a298:	0018      	movs	r0, r3
 800a29a:	f7ff fdc1 	bl	8009e20 <my_find_char_position>
 800a29e:	0003      	movs	r3, r0
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	2416      	movs	r4, #22
 800a2a4:	193b      	adds	r3, r7, r4
 800a2a6:	197a      	adds	r2, r7, r5
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	1a8a      	subs	r2, r1, r2
 800a2ac:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a2ae:	193b      	adds	r3, r7, r4
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 fc41 	bl	800ab3c <malloc>
 800a2ba:	0003      	movs	r3, r0
 800a2bc:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a2be:	197b      	adds	r3, r7, r5
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	18d1      	adds	r1, r2, r3
 800a2c6:	193b      	adds	r3, r7, r4
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f001 ff82 	bl	800c1d6 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a2d2:	193b      	adds	r3, r7, r4
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	18d3      	adds	r3, r2, r3
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f7ff fd89 	bl	8009df8 <my_string2double_conv>
 800a2e6:	0002      	movs	r2, r0
 800a2e8:	000b      	movs	r3, r1
 800a2ea:	60ba      	str	r2, [r7, #8]
 800a2ec:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 fc2d 	bl	800ab50 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	0010      	movs	r0, r2
 800a2fc:	0019      	movs	r1, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	b006      	add	sp, #24
 800a302:	bdb0      	pop	{r4, r5, r7, pc}

0800a304 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a30c:	230f      	movs	r3, #15
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a314:	230e      	movs	r3, #14
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a31c:	e00f      	b.n	800a33e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a31e:	220e      	movs	r2, #14
 800a320:	18bb      	adds	r3, r7, r2
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	18ba      	adds	r2, r7, r2
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	7011      	strb	r1, [r2, #0]
 800a32a:	001a      	movs	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	189b      	adds	r3, r3, r2
 800a330:	7819      	ldrb	r1, [r3, #0]
 800a332:	220f      	movs	r2, #15
 800a334:	18bb      	adds	r3, r7, r2
 800a336:	18ba      	adds	r2, r7, r2
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	404a      	eors	r2, r1
 800a33c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a33e:	210e      	movs	r1, #14
 800a340:	187b      	adds	r3, r7, r1
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	18d3      	adds	r3, r2, r3
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b2a      	cmp	r3, #42	; 0x2a
 800a34c:	d00a      	beq.n	800a364 <is_my_nmea_checksum_ok+0x60>
 800a34e:	187b      	adds	r3, r7, r1
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	18d3      	adds	r3, r2, r3
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <is_my_nmea_checksum_ok+0x60>
 800a35c:	187b      	adds	r3, r7, r1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1dc      	bne.n	800a31e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a364:	230f      	movs	r3, #15
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	781c      	ldrb	r4, [r3, #0]
 800a36a:	210e      	movs	r1, #14
 800a36c:	187b      	adds	r3, r7, r1
 800a36e:	187a      	adds	r2, r7, r1
 800a370:	7812      	ldrb	r2, [r2, #0]
 800a372:	3201      	adds	r2, #1
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	187b      	adds	r3, r7, r1
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	18d3      	adds	r3, r2, r3
 800a37e:	2210      	movs	r2, #16
 800a380:	2100      	movs	r1, #0
 800a382:	0018      	movs	r0, r3
 800a384:	f001 fcd4 	bl	800bd30 <strtol>
 800a388:	0003      	movs	r3, r0
 800a38a:	1ae3      	subs	r3, r4, r3
 800a38c:	425a      	negs	r2, r3
 800a38e:	4153      	adcs	r3, r2
 800a390:	b2db      	uxtb	r3, r3
}
 800a392:	0018      	movs	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	b005      	add	sp, #20
 800a398:	bd90      	pop	{r4, r7, pc}
	...

0800a39c <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a39c:	b5b0      	push	{r4, r5, r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	000a      	movs	r2, r1
 800a3a6:	1cfb      	adds	r3, r7, #3
 800a3a8:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	18fa      	adds	r2, r7, r3
 800a3ae:	492f      	ldr	r1, [pc, #188]	; (800a46c <nmea2decimal+0xd0>)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f001 fe72 	bl	800c09c <sscanf>
    min = deg / 100 ;
 800a3b8:	68b8      	ldr	r0, [r7, #8]
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <nmea2decimal+0xd4>)
 800a3c0:	f7f6 fd5a 	bl	8000e78 <__aeabi_ddiv>
 800a3c4:	0002      	movs	r2, r0
 800a3c6:	000b      	movs	r3, r1
 800a3c8:	613a      	str	r2, [r7, #16]
 800a3ca:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a3cc:	6938      	ldr	r0, [r7, #16]
 800a3ce:	6979      	ldr	r1, [r7, #20]
 800a3d0:	f7f7 ffae 	bl	8002330 <__aeabi_d2iz>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7f7 ffe0 	bl	800239c <__aeabi_i2d>
 800a3dc:	0002      	movs	r2, r0
 800a3de:	000b      	movs	r3, r1
 800a3e0:	60ba      	str	r2, [r7, #8]
 800a3e2:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6938      	ldr	r0, [r7, #16]
 800a3ea:	6979      	ldr	r1, [r7, #20]
 800a3ec:	f7f7 fc00 	bl	8001bf0 <__aeabi_dsub>
 800a3f0:	0002      	movs	r2, r0
 800a3f2:	000b      	movs	r3, r1
 800a3f4:	0010      	movs	r0, r2
 800a3f6:	0019      	movs	r1, r3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4b1e      	ldr	r3, [pc, #120]	; (800a474 <nmea2decimal+0xd8>)
 800a3fc:	f7f7 f936 	bl	800166c <__aeabi_dmul>
 800a400:	0002      	movs	r2, r0
 800a402:	000b      	movs	r3, r1
 800a404:	613a      	str	r2, [r7, #16]
 800a406:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a408:	2200      	movs	r2, #0
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <nmea2decimal+0xdc>)
 800a40c:	6938      	ldr	r0, [r7, #16]
 800a40e:	6979      	ldr	r1, [r7, #20]
 800a410:	f7f6 fd32 	bl	8000e78 <__aeabi_ddiv>
 800a414:	0002      	movs	r2, r0
 800a416:	000b      	movs	r3, r1
 800a418:	613a      	str	r2, [r7, #16]
 800a41a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a41c:	1cfb      	adds	r3, r7, #3
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b53      	cmp	r3, #83	; 0x53
 800a422:	d003      	beq.n	800a42c <nmea2decimal+0x90>
 800a424:	1cfb      	adds	r3, r7, #3
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b57      	cmp	r3, #87	; 0x57
 800a42a:	d10e      	bne.n	800a44a <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a42c:	68b8      	ldr	r0, [r7, #8]
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f7f6 f9c0 	bl	80007b8 <__aeabi_dadd>
 800a438:	0002      	movs	r2, r0
 800a43a:	000b      	movs	r3, r1
 800a43c:	0011      	movs	r1, r2
 800a43e:	000c      	movs	r4, r1
 800a440:	2180      	movs	r1, #128	; 0x80
 800a442:	0609      	lsls	r1, r1, #24
 800a444:	4059      	eors	r1, r3
 800a446:	000d      	movs	r5, r1
 800a448:	e009      	b.n	800a45e <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a44a:	68b8      	ldr	r0, [r7, #8]
 800a44c:	68f9      	ldr	r1, [r7, #12]
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f7f6 f9b1 	bl	80007b8 <__aeabi_dadd>
 800a456:	0002      	movs	r2, r0
 800a458:	000b      	movs	r3, r1
 800a45a:	0014      	movs	r4, r2
 800a45c:	001d      	movs	r5, r3
}
 800a45e:	0022      	movs	r2, r4
 800a460:	002b      	movs	r3, r5
 800a462:	0010      	movs	r0, r2
 800a464:	0019      	movs	r1, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	b006      	add	sp, #24
 800a46a:	bdb0      	pop	{r4, r5, r7, pc}
 800a46c:	08014734 	.word	0x08014734
 800a470:	40590000 	.word	0x40590000
 800a474:	40240000 	.word	0x40240000
 800a478:	40180000 	.word	0x40180000

0800a47c <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47e:	b08d      	sub	sp, #52	; 0x34
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	212c      	movs	r1, #44	; 0x2c
 800a48c:	0018      	movs	r0, r3
 800a48e:	f7ff fcc7 	bl	8009e20 <my_find_char_position>
 800a492:	0003      	movs	r3, r0
 800a494:	001a      	movs	r2, r3
 800a496:	252f      	movs	r5, #47	; 0x2f
 800a498:	197b      	adds	r3, r7, r5
 800a49a:	3201      	adds	r2, #1
 800a49c:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	212c      	movs	r1, #44	; 0x2c
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7ff fcbb 	bl	8009e20 <my_find_char_position>
 800a4aa:	0003      	movs	r3, r0
 800a4ac:	0019      	movs	r1, r3
 800a4ae:	242e      	movs	r4, #46	; 0x2e
 800a4b0:	193b      	adds	r3, r7, r4
 800a4b2:	197a      	adds	r2, r7, r5
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	1a8a      	subs	r2, r1, r2
 800a4b8:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a4ba:	193b      	adds	r3, r7, r4
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f000 fb3b 	bl	800ab3c <malloc>
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a4ca:	197b      	adds	r3, r7, r5
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	18d1      	adds	r1, r2, r3
 800a4d2:	193b      	adds	r3, r7, r4
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f001 fe7c 	bl	800c1d6 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a4de:	193b      	adds	r3, r7, r4
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e4:	18d3      	adds	r3, r2, r3
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a4ea:	197b      	adds	r3, r7, r5
 800a4ec:	781a      	ldrb	r2, [r3, #0]
 800a4ee:	193b      	adds	r3, r7, r4
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	18d3      	adds	r3, r2, r3
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	18d2      	adds	r2, r2, r3
 800a4fa:	2627      	movs	r6, #39	; 0x27
 800a4fc:	19bb      	adds	r3, r7, r6
 800a4fe:	7812      	ldrb	r2, [r2, #0]
 800a500:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a502:	19bb      	adds	r3, r7, r6
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	0011      	movs	r1, r2
 800a50a:	0018      	movs	r0, r3
 800a50c:	f7ff ff46 	bl	800a39c <nmea2decimal>
 800a510:	0002      	movs	r2, r0
 800a512:	000b      	movs	r3, r1
 800a514:	61ba      	str	r2, [r7, #24]
 800a516:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	0018      	movs	r0, r3
 800a51c:	f000 fb18 	bl	800ab50 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a520:	2200      	movs	r2, #0
 800a522:	4b49      	ldr	r3, [pc, #292]	; (800a648 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a524:	69b8      	ldr	r0, [r7, #24]
 800a526:	69f9      	ldr	r1, [r7, #28]
 800a528:	f7f7 f8a0 	bl	800166c <__aeabi_dmul>
 800a52c:	0002      	movs	r2, r0
 800a52e:	000b      	movs	r3, r1
 800a530:	0010      	movs	r0, r2
 800a532:	0019      	movs	r1, r3
 800a534:	f008 fb20 	bl	8012b78 <round>
 800a538:	2200      	movs	r2, #0
 800a53a:	4b43      	ldr	r3, [pc, #268]	; (800a648 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a53c:	f7f6 fc9c 	bl	8000e78 <__aeabi_ddiv>
 800a540:	0002      	movs	r2, r0
 800a542:	000b      	movs	r3, r1
 800a544:	61ba      	str	r2, [r7, #24]
 800a546:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a548:	2200      	movs	r2, #0
 800a54a:	4b40      	ldr	r3, [pc, #256]	; (800a64c <my_nmea_get_gngll_coordinates+0x1d0>)
 800a54c:	69b8      	ldr	r0, [r7, #24]
 800a54e:	69f9      	ldr	r1, [r7, #28]
 800a550:	f7f7 f88c 	bl	800166c <__aeabi_dmul>
 800a554:	0002      	movs	r2, r0
 800a556:	000b      	movs	r3, r1
 800a558:	0010      	movs	r0, r2
 800a55a:	0019      	movs	r1, r3
 800a55c:	f7f7 fee8 	bl	8002330 <__aeabi_d2iz>
 800a560:	0002      	movs	r2, r0
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2203      	movs	r2, #3
 800a56a:	212c      	movs	r1, #44	; 0x2c
 800a56c:	0018      	movs	r0, r3
 800a56e:	f7ff fc57 	bl	8009e20 <my_find_char_position>
 800a572:	0003      	movs	r3, r0
 800a574:	001a      	movs	r2, r3
 800a576:	197b      	adds	r3, r7, r5
 800a578:	3201      	adds	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2204      	movs	r2, #4
 800a580:	212c      	movs	r1, #44	; 0x2c
 800a582:	0018      	movs	r0, r3
 800a584:	f7ff fc4c 	bl	8009e20 <my_find_char_position>
 800a588:	0003      	movs	r3, r0
 800a58a:	0019      	movs	r1, r3
 800a58c:	193b      	adds	r3, r7, r4
 800a58e:	197a      	adds	r2, r7, r5
 800a590:	7812      	ldrb	r2, [r2, #0]
 800a592:	1a8a      	subs	r2, r1, r2
 800a594:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a596:	193b      	adds	r3, r7, r4
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	0018      	movs	r0, r3
 800a59e:	f000 facd 	bl	800ab3c <malloc>
 800a5a2:	0003      	movs	r3, r0
 800a5a4:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a5a6:	197b      	adds	r3, r7, r5
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	18d1      	adds	r1, r2, r3
 800a5ae:	193b      	adds	r3, r7, r4
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f001 fe0e 	bl	800c1d6 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a5ba:	193b      	adds	r3, r7, r4
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	18d3      	adds	r3, r2, r3
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a5c6:	197b      	adds	r3, r7, r5
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	193b      	adds	r3, r7, r4
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	18d3      	adds	r3, r2, r3
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	18d2      	adds	r2, r2, r3
 800a5d6:	19bb      	adds	r3, r7, r6
 800a5d8:	7812      	ldrb	r2, [r2, #0]
 800a5da:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a5dc:	19bb      	adds	r3, r7, r6
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	0011      	movs	r1, r2
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f7ff fed9 	bl	800a39c <nmea2decimal>
 800a5ea:	0002      	movs	r2, r0
 800a5ec:	000b      	movs	r3, r1
 800a5ee:	60ba      	str	r2, [r7, #8]
 800a5f0:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	f000 faab 	bl	800ab50 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a5fe:	68b8      	ldr	r0, [r7, #8]
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	f7f7 f833 	bl	800166c <__aeabi_dmul>
 800a606:	0002      	movs	r2, r0
 800a608:	000b      	movs	r3, r1
 800a60a:	0010      	movs	r0, r2
 800a60c:	0019      	movs	r1, r3
 800a60e:	f008 fab3 	bl	8012b78 <round>
 800a612:	2200      	movs	r2, #0
 800a614:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a616:	f7f6 fc2f 	bl	8000e78 <__aeabi_ddiv>
 800a61a:	0002      	movs	r2, r0
 800a61c:	000b      	movs	r3, r1
 800a61e:	60ba      	str	r2, [r7, #8]
 800a620:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a622:	2200      	movs	r2, #0
 800a624:	4b09      	ldr	r3, [pc, #36]	; (800a64c <my_nmea_get_gngll_coordinates+0x1d0>)
 800a626:	68b8      	ldr	r0, [r7, #8]
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	f7f7 f81f 	bl	800166c <__aeabi_dmul>
 800a62e:	0002      	movs	r2, r0
 800a630:	000b      	movs	r3, r1
 800a632:	0010      	movs	r0, r2
 800a634:	0019      	movs	r1, r3
 800a636:	f7f7 fe7b 	bl	8002330 <__aeabi_d2iz>
 800a63a:	0002      	movs	r2, r0
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	605a      	str	r2, [r3, #4]
}
 800a640:	46c0      	nop			; (mov r8, r8)
 800a642:	46bd      	mov	sp, r7
 800a644:	b00d      	add	sp, #52	; 0x34
 800a646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a648:	412e8480 	.word	0x412e8480
 800a64c:	416312d0 	.word	0x416312d0

0800a650 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a650:	b5b0      	push	{r4, r5, r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a658:	240e      	movs	r4, #14
 800a65a:	193b      	adds	r3, r7, r4
 800a65c:	2200      	movs	r2, #0
 800a65e:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2203      	movs	r2, #3
 800a664:	212c      	movs	r1, #44	; 0x2c
 800a666:	0018      	movs	r0, r3
 800a668:	f7ff fbda 	bl	8009e20 <my_find_char_position>
 800a66c:	0003      	movs	r3, r0
 800a66e:	001a      	movs	r2, r3
 800a670:	2517      	movs	r5, #23
 800a672:	197b      	adds	r3, r7, r5
 800a674:	3201      	adds	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a678:	2003      	movs	r0, #3
 800a67a:	f000 fa5f 	bl	800ab3c <malloc>
 800a67e:	0003      	movs	r3, r0
 800a680:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a682:	197b      	adds	r3, r7, r5
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	18d1      	adds	r1, r2, r3
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	2202      	movs	r2, #2
 800a68e:	0018      	movs	r0, r3
 800a690:	f001 fda1 	bl	800c1d6 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	3302      	adds	r3, #2
 800a698:	2200      	movs	r2, #0
 800a69a:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a69c:	193a      	adds	r2, r7, r4
 800a69e:	4907      	ldr	r1, [pc, #28]	; (800a6bc <my_nmea_get_gsv_tns+0x6c>)
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f001 fcfa 	bl	800c09c <sscanf>
	free ( s ) ;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f000 fa50 	bl	800ab50 <free>
	return tns ;
 800a6b0:	193b      	adds	r3, r7, r4
 800a6b2:	881b      	ldrh	r3, [r3, #0]
}
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	b006      	add	sp, #24
 800a6ba:	bdb0      	pop	{r4, r5, r7, pc}
 800a6bc:	08014740 	.word	0x08014740

0800a6c0 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2209      	movs	r2, #9
 800a6ce:	212c      	movs	r1, #44	; 0x2c
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f7ff fba5 	bl	8009e20 <my_find_char_position>
 800a6d6:	0003      	movs	r3, r0
 800a6d8:	001a      	movs	r2, r3
 800a6da:	2417      	movs	r4, #23
 800a6dc:	193b      	adds	r3, r7, r4
 800a6de:	3205      	adds	r2, #5
 800a6e0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a6e2:	2003      	movs	r0, #3
 800a6e4:	f000 fa2a 	bl	800ab3c <malloc>
 800a6e8:	0003      	movs	r3, r0
 800a6ea:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a6ec:	193b      	adds	r3, r7, r4
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	18d1      	adds	r1, r2, r3
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f001 fd6c 	bl	800c1d6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	3302      	adds	r3, #2
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a706:	240e      	movs	r4, #14
 800a708:	193a      	adds	r2, r7, r4
 800a70a:	4909      	ldr	r1, [pc, #36]	; (800a730 <my_nmea_get_rmc_date_yy+0x70>)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	0018      	movs	r0, r3
 800a710:	f001 fcc4 	bl	800c09c <sscanf>
	free ( s ) ;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	0018      	movs	r0, r3
 800a718:	f000 fa1a 	bl	800ab50 <free>
	*yy = (uint8_t) temp ;
 800a71c:	193b      	adds	r3, r7, r4
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	701a      	strb	r2, [r3, #0]

}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	46bd      	mov	sp, r7
 800a72a:	b007      	add	sp, #28
 800a72c:	bd90      	pop	{r4, r7, pc}
 800a72e:	46c0      	nop			; (mov r8, r8)
 800a730:	08014740 	.word	0x08014740

0800a734 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a734:	b590      	push	{r4, r7, lr}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2209      	movs	r2, #9
 800a742:	212c      	movs	r1, #44	; 0x2c
 800a744:	0018      	movs	r0, r3
 800a746:	f7ff fb6b 	bl	8009e20 <my_find_char_position>
 800a74a:	0003      	movs	r3, r0
 800a74c:	001a      	movs	r2, r3
 800a74e:	2417      	movs	r4, #23
 800a750:	193b      	adds	r3, r7, r4
 800a752:	3203      	adds	r2, #3
 800a754:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a756:	2003      	movs	r0, #3
 800a758:	f000 f9f0 	bl	800ab3c <malloc>
 800a75c:	0003      	movs	r3, r0
 800a75e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a760:	193b      	adds	r3, r7, r4
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	18d1      	adds	r1, r2, r3
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2202      	movs	r2, #2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f001 fd32 	bl	800c1d6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	3302      	adds	r3, #2
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a77a:	240e      	movs	r4, #14
 800a77c:	193a      	adds	r2, r7, r4
 800a77e:	4909      	ldr	r1, [pc, #36]	; (800a7a4 <my_nmea_get_rmc_date_mm+0x70>)
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	0018      	movs	r0, r3
 800a784:	f001 fc8a 	bl	800c09c <sscanf>
	free ( s ) ;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	0018      	movs	r0, r3
 800a78c:	f000 f9e0 	bl	800ab50 <free>
	*mm = (uint8_t) temp ;
 800a790:	193b      	adds	r3, r7, r4
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	b2da      	uxtb	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	701a      	strb	r2, [r3, #0]

}
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b007      	add	sp, #28
 800a7a0:	bd90      	pop	{r4, r7, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	08014740 	.word	0x08014740

0800a7a8 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2209      	movs	r2, #9
 800a7b6:	212c      	movs	r1, #44	; 0x2c
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f7ff fb31 	bl	8009e20 <my_find_char_position>
 800a7be:	0003      	movs	r3, r0
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	2417      	movs	r4, #23
 800a7c4:	193b      	adds	r3, r7, r4
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a7ca:	2003      	movs	r0, #3
 800a7cc:	f000 f9b6 	bl	800ab3c <malloc>
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a7d4:	193b      	adds	r3, r7, r4
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	18d1      	adds	r1, r2, r3
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f001 fcf8 	bl	800c1d6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a7ee:	240e      	movs	r4, #14
 800a7f0:	193a      	adds	r2, r7, r4
 800a7f2:	4909      	ldr	r1, [pc, #36]	; (800a818 <my_nmea_get_rmc_date_dd+0x70>)
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f001 fc50 	bl	800c09c <sscanf>
	free ( s ) ;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	0018      	movs	r0, r3
 800a800:	f000 f9a6 	bl	800ab50 <free>
	*dd = (uint8_t) temp ;
 800a804:	193b      	adds	r3, r7, r4
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	701a      	strb	r2, [r3, #0]

}
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	46bd      	mov	sp, r7
 800a812:	b007      	add	sp, #28
 800a814:	bd90      	pop	{r4, r7, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	08014740 	.word	0x08014740

0800a81c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	212c      	movs	r1, #44	; 0x2c
 800a82c:	0018      	movs	r0, r3
 800a82e:	f7ff faf7 	bl	8009e20 <my_find_char_position>
 800a832:	0003      	movs	r3, r0
 800a834:	001a      	movs	r2, r3
 800a836:	2417      	movs	r4, #23
 800a838:	193b      	adds	r3, r7, r4
 800a83a:	3201      	adds	r2, #1
 800a83c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a83e:	2003      	movs	r0, #3
 800a840:	f000 f97c 	bl	800ab3c <malloc>
 800a844:	0003      	movs	r3, r0
 800a846:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a848:	193b      	adds	r3, r7, r4
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	18d1      	adds	r1, r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2202      	movs	r2, #2
 800a854:	0018      	movs	r0, r3
 800a856:	f001 fcbe 	bl	800c1d6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	3302      	adds	r3, #2
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a862:	240e      	movs	r4, #14
 800a864:	193a      	adds	r2, r7, r4
 800a866:	4909      	ldr	r1, [pc, #36]	; (800a88c <my_nmea_get_rmc_utc_hh+0x70>)
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	0018      	movs	r0, r3
 800a86c:	f001 fc16 	bl	800c09c <sscanf>
	free ( s ) ;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	0018      	movs	r0, r3
 800a874:	f000 f96c 	bl	800ab50 <free>
	*hh = (uint8_t) temp ;
 800a878:	193b      	adds	r3, r7, r4
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	701a      	strb	r2, [r3, #0]

}
 800a882:	46c0      	nop			; (mov r8, r8)
 800a884:	46bd      	mov	sp, r7
 800a886:	b007      	add	sp, #28
 800a888:	bd90      	pop	{r4, r7, pc}
 800a88a:	46c0      	nop			; (mov r8, r8)
 800a88c:	08014740 	.word	0x08014740

0800a890 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	212c      	movs	r1, #44	; 0x2c
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f7ff fabd 	bl	8009e20 <my_find_char_position>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	001a      	movs	r2, r3
 800a8aa:	2417      	movs	r4, #23
 800a8ac:	193b      	adds	r3, r7, r4
 800a8ae:	3203      	adds	r2, #3
 800a8b0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a8b2:	2003      	movs	r0, #3
 800a8b4:	f000 f942 	bl	800ab3c <malloc>
 800a8b8:	0003      	movs	r3, r0
 800a8ba:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a8bc:	193b      	adds	r3, r7, r4
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	18d1      	adds	r1, r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	f001 fc84 	bl	800c1d6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3302      	adds	r3, #2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a8d6:	240e      	movs	r4, #14
 800a8d8:	193a      	adds	r2, r7, r4
 800a8da:	4909      	ldr	r1, [pc, #36]	; (800a900 <my_nmea_get_rmc_utc_mm+0x70>)
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f001 fbdc 	bl	800c09c <sscanf>
	free ( s ) ;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f000 f932 	bl	800ab50 <free>
	*mm = (uint8_t) temp ;
 800a8ec:	193b      	adds	r3, r7, r4
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	701a      	strb	r2, [r3, #0]

}
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b007      	add	sp, #28
 800a8fc:	bd90      	pop	{r4, r7, pc}
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	08014740 	.word	0x08014740

0800a904 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	212c      	movs	r1, #44	; 0x2c
 800a914:	0018      	movs	r0, r3
 800a916:	f7ff fa83 	bl	8009e20 <my_find_char_position>
 800a91a:	0003      	movs	r3, r0
 800a91c:	001a      	movs	r2, r3
 800a91e:	2417      	movs	r4, #23
 800a920:	193b      	adds	r3, r7, r4
 800a922:	3205      	adds	r2, #5
 800a924:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a926:	2003      	movs	r0, #3
 800a928:	f000 f908 	bl	800ab3c <malloc>
 800a92c:	0003      	movs	r3, r0
 800a92e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a930:	193b      	adds	r3, r7, r4
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	18d1      	adds	r1, r2, r3
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2202      	movs	r2, #2
 800a93c:	0018      	movs	r0, r3
 800a93e:	f001 fc4a 	bl	800c1d6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	3302      	adds	r3, #2
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a94a:	240e      	movs	r4, #14
 800a94c:	193a      	adds	r2, r7, r4
 800a94e:	4909      	ldr	r1, [pc, #36]	; (800a974 <my_nmea_get_rmc_utc_ss+0x70>)
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	0018      	movs	r0, r3
 800a954:	f001 fba2 	bl	800c09c <sscanf>
	free ( s ) ;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	0018      	movs	r0, r3
 800a95c:	f000 f8f8 	bl	800ab50 <free>
	*ss = (uint8_t) temp ;
 800a960:	193b      	adds	r3, r7, r4
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b2da      	uxtb	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	701a      	strb	r2, [r3, #0]

}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	46bd      	mov	sp, r7
 800a96e:	b007      	add	sp, #28
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	46c0      	nop			; (mov r8, r8)
 800a974:	08014740 	.word	0x08014740

0800a978 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a978:	b590      	push	{r4, r7, lr}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	212c      	movs	r1, #44	; 0x2c
 800a988:	0018      	movs	r0, r3
 800a98a:	f7ff fa49 	bl	8009e20 <my_find_char_position>
 800a98e:	0003      	movs	r3, r0
 800a990:	001a      	movs	r2, r3
 800a992:	240f      	movs	r4, #15
 800a994:	193b      	adds	r3, r7, r4
 800a996:	3208      	adds	r2, #8
 800a998:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a99a:	2004      	movs	r0, #4
 800a99c:	f000 f8ce 	bl	800ab3c <malloc>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a9a4:	193b      	adds	r3, r7, r4
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	18d1      	adds	r1, r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f001 fc10 	bl	800c1d6 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3303      	adds	r3, #3
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	4906      	ldr	r1, [pc, #24]	; (800a9dc <my_nmea_get_rmc_utc_sss+0x64>)
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f001 fb69 	bl	800c09c <sscanf>
	free ( s ) ;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f000 f8bf 	bl	800ab50 <free>
}
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b005      	add	sp, #20
 800a9d8:	bd90      	pop	{r4, r7, pc}
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	08014744 	.word	0x08014744

0800a9e0 <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( const char* c )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f7f5 fb8a 	bl	8000104 <strlen>
 800a9f0:	0003      	movs	r3, r0
 800a9f2:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800a9f4:	2317      	movs	r3, #23
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800a9fc:	2316      	movs	r3, #22
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	2200      	movs	r2, #0
 800aa02:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d902      	bls.n	800aa10 <my_tracker_api_is_cmd+0x30>
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b09      	cmp	r3, #9
 800aa0e:	d901      	bls.n	800aa14 <my_tracker_api_is_cmd+0x34>
		return false ;
 800aa10:	2300      	movs	r3, #0
 800aa12:	e04b      	b.n	800aaac <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800aa14:	2317      	movs	r3, #23
 800aa16:	18fb      	adds	r3, r7, r3
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e025      	b.n	800aa6a <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800aa1e:	2317      	movs	r3, #23
 800aa20:	18fb      	adds	r3, r7, r3
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	18d3      	adds	r3, r2, r3
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b2c      	cmp	r3, #44	; 0x2c
 800aa2c:	d106      	bne.n	800aa3c <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800aa2e:	2116      	movs	r1, #22
 800aa30:	187b      	adds	r3, r7, r1
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	187b      	adds	r3, r7, r1
 800aa36:	3201      	adds	r2, #1
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e010      	b.n	800aa5e <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800aa3c:	2117      	movs	r1, #23
 800aa3e:	187b      	adds	r3, r7, r1
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	18d3      	adds	r3, r2, r3
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b2f      	cmp	r3, #47	; 0x2f
 800aa4a:	d906      	bls.n	800aa5a <my_tracker_api_is_cmd+0x7a>
 800aa4c:	187b      	adds	r3, r7, r1
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	18d3      	adds	r3, r2, r3
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b39      	cmp	r3, #57	; 0x39
 800aa58:	d901      	bls.n	800aa5e <my_tracker_api_is_cmd+0x7e>
			return false;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e026      	b.n	800aaac <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800aa5e:	2117      	movs	r1, #23
 800aa60:	187b      	adds	r3, r7, r1
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	187b      	adds	r3, r7, r1
 800aa66:	3201      	adds	r2, #1
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	2317      	movs	r3, #23
 800aa6c:	18fb      	adds	r3, r7, r3
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d8d3      	bhi.n	800aa1e <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800aa76:	2316      	movs	r3, #22
 800aa78:	18fb      	adds	r3, r7, r3
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d901      	bls.n	800aa84 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e013      	b.n	800aaac <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	212c      	movs	r1, #44	; 0x2c
 800aa88:	0018      	movs	r0, r3
 800aa8a:	f001 fb85 	bl	800c198 <strchr>
 800aa8e:	0003      	movs	r3, r0
 800aa90:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d802      	bhi.n	800aaa6 <my_tracker_api_is_cmd+0xc6>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <my_tracker_api_is_cmd+0xca>
		return false ;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <my_tracker_api_is_cmd+0xcc>

	return true ;
 800aaaa:	2301      	movs	r3, #1
}
 800aaac:	0018      	movs	r0, r3
 800aaae:	46bd      	mov	sp, r7
 800aab0:	b006      	add	sp, #24
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800aad0:	4a19      	ldr	r2, [pc, #100]	; (800ab38 <my_tracker_api_parse_cmd+0x84>)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	0011      	movs	r1, r2
 800aad6:	0018      	movs	r0, r3
 800aad8:	f001 fb92 	bl	800c200 <strtok>
 800aadc:	0003      	movs	r3, r0
 800aade:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7ff fb3e 	bl	800a164 <my_conv_string_2_uint32_t>
 800aae8:	0003      	movs	r3, r0
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <my_tracker_api_parse_cmd+0x84>)
 800aaf2:	0019      	movs	r1, r3
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f001 fb83 	bl	800c200 <strtok>
 800aafa:	0003      	movs	r3, r0
 800aafc:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7ff fb2f 	bl	800a164 <my_conv_string_2_uint32_t>
 800ab06:	0002      	movs	r2, r0
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <my_tracker_api_parse_cmd+0x84>)
 800ab0e:	0019      	movs	r1, r3
 800ab10:	2000      	movs	r0, #0
 800ab12:	f001 fb75 	bl	800c200 <strtok>
 800ab16:	0003      	movs	r3, r0
 800ab18:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <my_tracker_api_parse_cmd+0x74>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <my_tracker_api_parse_cmd+0x78>
		return false ;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e000      	b.n	800ab2e <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800ab2c:	2301      	movs	r3, #1
}
 800ab2e:	0018      	movs	r0, r3
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b004      	add	sp, #16
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	08014748 	.word	0x08014748

0800ab3c <malloc>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <malloc+0x10>)
 800ab40:	0001      	movs	r1, r0
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	f000 f80e 	bl	800ab64 <_malloc_r>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	200006d0 	.word	0x200006d0

0800ab50 <free>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	4b03      	ldr	r3, [pc, #12]	; (800ab60 <free+0x10>)
 800ab54:	0001      	movs	r1, r0
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	f001 fcbe 	bl	800c4d8 <_free_r>
 800ab5c:	bd10      	pop	{r4, pc}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	200006d0 	.word	0x200006d0

0800ab64 <_malloc_r>:
 800ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab66:	000d      	movs	r5, r1
 800ab68:	b087      	sub	sp, #28
 800ab6a:	350b      	adds	r5, #11
 800ab6c:	9001      	str	r0, [sp, #4]
 800ab6e:	2d16      	cmp	r5, #22
 800ab70:	d908      	bls.n	800ab84 <_malloc_r+0x20>
 800ab72:	2207      	movs	r2, #7
 800ab74:	4395      	bics	r5, r2
 800ab76:	d506      	bpl.n	800ab86 <_malloc_r+0x22>
 800ab78:	230c      	movs	r3, #12
 800ab7a:	9a01      	ldr	r2, [sp, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	2000      	movs	r0, #0
 800ab80:	b007      	add	sp, #28
 800ab82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab84:	2510      	movs	r5, #16
 800ab86:	42a9      	cmp	r1, r5
 800ab88:	d8f6      	bhi.n	800ab78 <_malloc_r+0x14>
 800ab8a:	9801      	ldr	r0, [sp, #4]
 800ab8c:	f000 f9fe 	bl	800af8c <__malloc_lock>
 800ab90:	23fc      	movs	r3, #252	; 0xfc
 800ab92:	4ebe      	ldr	r6, [pc, #760]	; (800ae8c <_malloc_r+0x328>)
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	429d      	cmp	r5, r3
 800ab98:	d219      	bcs.n	800abce <_malloc_r+0x6a>
 800ab9a:	002a      	movs	r2, r5
 800ab9c:	3208      	adds	r2, #8
 800ab9e:	18b2      	adds	r2, r6, r2
 800aba0:	0011      	movs	r1, r2
 800aba2:	6854      	ldr	r4, [r2, #4]
 800aba4:	3908      	subs	r1, #8
 800aba6:	08eb      	lsrs	r3, r5, #3
 800aba8:	428c      	cmp	r4, r1
 800abaa:	d103      	bne.n	800abb4 <_malloc_r+0x50>
 800abac:	68d4      	ldr	r4, [r2, #12]
 800abae:	3302      	adds	r3, #2
 800abb0:	42a2      	cmp	r2, r4
 800abb2:	d022      	beq.n	800abfa <_malloc_r+0x96>
 800abb4:	2203      	movs	r2, #3
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	68a1      	ldr	r1, [r4, #8]
 800abba:	4393      	bics	r3, r2
 800abbc:	68e2      	ldr	r2, [r4, #12]
 800abbe:	18e3      	adds	r3, r4, r3
 800abc0:	60ca      	str	r2, [r1, #12]
 800abc2:	6091      	str	r1, [r2, #8]
 800abc4:	2201      	movs	r2, #1
 800abc6:	6859      	ldr	r1, [r3, #4]
 800abc8:	430a      	orrs	r2, r1
 800abca:	605a      	str	r2, [r3, #4]
 800abcc:	e02a      	b.n	800ac24 <_malloc_r+0xc0>
 800abce:	233f      	movs	r3, #63	; 0x3f
 800abd0:	0a6a      	lsrs	r2, r5, #9
 800abd2:	d003      	beq.n	800abdc <_malloc_r+0x78>
 800abd4:	2a04      	cmp	r2, #4
 800abd6:	d82b      	bhi.n	800ac30 <_malloc_r+0xcc>
 800abd8:	09ab      	lsrs	r3, r5, #6
 800abda:	3338      	adds	r3, #56	; 0x38
 800abdc:	2203      	movs	r2, #3
 800abde:	4694      	mov	ip, r2
 800abe0:	00d9      	lsls	r1, r3, #3
 800abe2:	1989      	adds	r1, r1, r6
 800abe4:	68cc      	ldr	r4, [r1, #12]
 800abe6:	428c      	cmp	r4, r1
 800abe8:	d006      	beq.n	800abf8 <_malloc_r+0x94>
 800abea:	4660      	mov	r0, ip
 800abec:	6862      	ldr	r2, [r4, #4]
 800abee:	4382      	bics	r2, r0
 800abf0:	1b57      	subs	r7, r2, r5
 800abf2:	2f0f      	cmp	r7, #15
 800abf4:	dd34      	ble.n	800ac60 <_malloc_r+0xfc>
 800abf6:	3b01      	subs	r3, #1
 800abf8:	3301      	adds	r3, #1
 800abfa:	6934      	ldr	r4, [r6, #16]
 800abfc:	49a4      	ldr	r1, [pc, #656]	; (800ae90 <_malloc_r+0x32c>)
 800abfe:	428c      	cmp	r4, r1
 800ac00:	d055      	beq.n	800acae <_malloc_r+0x14a>
 800ac02:	2003      	movs	r0, #3
 800ac04:	6862      	ldr	r2, [r4, #4]
 800ac06:	4382      	bics	r2, r0
 800ac08:	1b50      	subs	r0, r2, r5
 800ac0a:	280f      	cmp	r0, #15
 800ac0c:	dd36      	ble.n	800ac7c <_malloc_r+0x118>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	1967      	adds	r7, r4, r5
 800ac12:	431d      	orrs	r5, r3
 800ac14:	4303      	orrs	r3, r0
 800ac16:	6065      	str	r5, [r4, #4]
 800ac18:	6177      	str	r7, [r6, #20]
 800ac1a:	6137      	str	r7, [r6, #16]
 800ac1c:	60f9      	str	r1, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	50a0      	str	r0, [r4, r2]
 800ac24:	9801      	ldr	r0, [sp, #4]
 800ac26:	f000 f9b9 	bl	800af9c <__malloc_unlock>
 800ac2a:	0020      	movs	r0, r4
 800ac2c:	3008      	adds	r0, #8
 800ac2e:	e7a7      	b.n	800ab80 <_malloc_r+0x1c>
 800ac30:	2a14      	cmp	r2, #20
 800ac32:	d802      	bhi.n	800ac3a <_malloc_r+0xd6>
 800ac34:	0013      	movs	r3, r2
 800ac36:	335b      	adds	r3, #91	; 0x5b
 800ac38:	e7d0      	b.n	800abdc <_malloc_r+0x78>
 800ac3a:	2a54      	cmp	r2, #84	; 0x54
 800ac3c:	d802      	bhi.n	800ac44 <_malloc_r+0xe0>
 800ac3e:	0b2b      	lsrs	r3, r5, #12
 800ac40:	336e      	adds	r3, #110	; 0x6e
 800ac42:	e7cb      	b.n	800abdc <_malloc_r+0x78>
 800ac44:	23aa      	movs	r3, #170	; 0xaa
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d802      	bhi.n	800ac52 <_malloc_r+0xee>
 800ac4c:	0beb      	lsrs	r3, r5, #15
 800ac4e:	3377      	adds	r3, #119	; 0x77
 800ac50:	e7c4      	b.n	800abdc <_malloc_r+0x78>
 800ac52:	4990      	ldr	r1, [pc, #576]	; (800ae94 <_malloc_r+0x330>)
 800ac54:	237e      	movs	r3, #126	; 0x7e
 800ac56:	428a      	cmp	r2, r1
 800ac58:	d8c0      	bhi.n	800abdc <_malloc_r+0x78>
 800ac5a:	0cab      	lsrs	r3, r5, #18
 800ac5c:	337c      	adds	r3, #124	; 0x7c
 800ac5e:	e7bd      	b.n	800abdc <_malloc_r+0x78>
 800ac60:	68e0      	ldr	r0, [r4, #12]
 800ac62:	2f00      	cmp	r7, #0
 800ac64:	db08      	blt.n	800ac78 <_malloc_r+0x114>
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	60d8      	str	r0, [r3, #12]
 800ac6a:	6083      	str	r3, [r0, #8]
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	18a2      	adds	r2, r4, r2
 800ac70:	6851      	ldr	r1, [r2, #4]
 800ac72:	430b      	orrs	r3, r1
 800ac74:	6053      	str	r3, [r2, #4]
 800ac76:	e7d5      	b.n	800ac24 <_malloc_r+0xc0>
 800ac78:	0004      	movs	r4, r0
 800ac7a:	e7b4      	b.n	800abe6 <_malloc_r+0x82>
 800ac7c:	6171      	str	r1, [r6, #20]
 800ac7e:	6131      	str	r1, [r6, #16]
 800ac80:	2800      	cmp	r0, #0
 800ac82:	daf3      	bge.n	800ac6c <_malloc_r+0x108>
 800ac84:	6871      	ldr	r1, [r6, #4]
 800ac86:	468c      	mov	ip, r1
 800ac88:	2180      	movs	r1, #128	; 0x80
 800ac8a:	0089      	lsls	r1, r1, #2
 800ac8c:	428a      	cmp	r2, r1
 800ac8e:	d300      	bcc.n	800ac92 <_malloc_r+0x12e>
 800ac90:	e08c      	b.n	800adac <_malloc_r+0x248>
 800ac92:	08d1      	lsrs	r1, r2, #3
 800ac94:	0950      	lsrs	r0, r2, #5
 800ac96:	2201      	movs	r2, #1
 800ac98:	4082      	lsls	r2, r0
 800ac9a:	4660      	mov	r0, ip
 800ac9c:	4302      	orrs	r2, r0
 800ac9e:	6072      	str	r2, [r6, #4]
 800aca0:	00ca      	lsls	r2, r1, #3
 800aca2:	1992      	adds	r2, r2, r6
 800aca4:	6891      	ldr	r1, [r2, #8]
 800aca6:	60e2      	str	r2, [r4, #12]
 800aca8:	60a1      	str	r1, [r4, #8]
 800acaa:	6094      	str	r4, [r2, #8]
 800acac:	60cc      	str	r4, [r1, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	4876      	ldr	r0, [pc, #472]	; (800ae8c <_malloc_r+0x328>)
 800acb2:	1099      	asrs	r1, r3, #2
 800acb4:	408a      	lsls	r2, r1
 800acb6:	6841      	ldr	r1, [r0, #4]
 800acb8:	4291      	cmp	r1, r2
 800acba:	d328      	bcc.n	800ad0e <_malloc_r+0x1aa>
 800acbc:	420a      	tst	r2, r1
 800acbe:	d105      	bne.n	800accc <_malloc_r+0x168>
 800acc0:	2403      	movs	r4, #3
 800acc2:	43a3      	bics	r3, r4
 800acc4:	0052      	lsls	r2, r2, #1
 800acc6:	3304      	adds	r3, #4
 800acc8:	420a      	tst	r2, r1
 800acca:	d0fb      	beq.n	800acc4 <_malloc_r+0x160>
 800accc:	496f      	ldr	r1, [pc, #444]	; (800ae8c <_malloc_r+0x328>)
 800acce:	9104      	str	r1, [sp, #16]
 800acd0:	00d9      	lsls	r1, r3, #3
 800acd2:	1841      	adds	r1, r0, r1
 800acd4:	468c      	mov	ip, r1
 800acd6:	000f      	movs	r7, r1
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	68fc      	ldr	r4, [r7, #12]
 800acdc:	42bc      	cmp	r4, r7
 800acde:	d000      	beq.n	800ace2 <_malloc_r+0x17e>
 800ace0:	e09b      	b.n	800ae1a <_malloc_r+0x2b6>
 800ace2:	2403      	movs	r4, #3
 800ace4:	9902      	ldr	r1, [sp, #8]
 800ace6:	3708      	adds	r7, #8
 800ace8:	3101      	adds	r1, #1
 800acea:	9102      	str	r1, [sp, #8]
 800acec:	4221      	tst	r1, r4
 800acee:	d1f4      	bne.n	800acda <_malloc_r+0x176>
 800acf0:	2103      	movs	r1, #3
 800acf2:	420b      	tst	r3, r1
 800acf4:	d000      	beq.n	800acf8 <_malloc_r+0x194>
 800acf6:	e0b7      	b.n	800ae68 <_malloc_r+0x304>
 800acf8:	6843      	ldr	r3, [r0, #4]
 800acfa:	4393      	bics	r3, r2
 800acfc:	6043      	str	r3, [r0, #4]
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	0052      	lsls	r2, r2, #1
 800ad02:	6859      	ldr	r1, [r3, #4]
 800ad04:	4291      	cmp	r1, r2
 800ad06:	d302      	bcc.n	800ad0e <_malloc_r+0x1aa>
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d000      	beq.n	800ad0e <_malloc_r+0x1aa>
 800ad0c:	e0bb      	b.n	800ae86 <_malloc_r+0x322>
 800ad0e:	2203      	movs	r2, #3
 800ad10:	6883      	ldr	r3, [r0, #8]
 800ad12:	9302      	str	r3, [sp, #8]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4393      	bics	r3, r2
 800ad18:	9303      	str	r3, [sp, #12]
 800ad1a:	42ab      	cmp	r3, r5
 800ad1c:	d303      	bcc.n	800ad26 <_malloc_r+0x1c2>
 800ad1e:	1b59      	subs	r1, r3, r5
 800ad20:	290f      	cmp	r1, #15
 800ad22:	dd00      	ble.n	800ad26 <_malloc_r+0x1c2>
 800ad24:	e123      	b.n	800af6e <_malloc_r+0x40a>
 800ad26:	9b02      	ldr	r3, [sp, #8]
 800ad28:	9a03      	ldr	r2, [sp, #12]
 800ad2a:	2008      	movs	r0, #8
 800ad2c:	189e      	adds	r6, r3, r2
 800ad2e:	4b5a      	ldr	r3, [pc, #360]	; (800ae98 <_malloc_r+0x334>)
 800ad30:	681f      	ldr	r7, [r3, #0]
 800ad32:	f001 fb4b 	bl	800c3cc <sysconf>
 800ad36:	4b59      	ldr	r3, [pc, #356]	; (800ae9c <_malloc_r+0x338>)
 800ad38:	3710      	adds	r7, #16
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	197f      	adds	r7, r7, r5
 800ad3e:	9004      	str	r0, [sp, #16]
 800ad40:	3301      	adds	r3, #1
 800ad42:	d003      	beq.n	800ad4c <_malloc_r+0x1e8>
 800ad44:	1e7b      	subs	r3, r7, #1
 800ad46:	181b      	adds	r3, r3, r0
 800ad48:	4247      	negs	r7, r0
 800ad4a:	401f      	ands	r7, r3
 800ad4c:	0039      	movs	r1, r7
 800ad4e:	9801      	ldr	r0, [sp, #4]
 800ad50:	f001 fae8 	bl	800c324 <_sbrk_r>
 800ad54:	0004      	movs	r4, r0
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	d100      	bne.n	800ad5c <_malloc_r+0x1f8>
 800ad5a:	e0de      	b.n	800af1a <_malloc_r+0x3b6>
 800ad5c:	4286      	cmp	r6, r0
 800ad5e:	d904      	bls.n	800ad6a <_malloc_r+0x206>
 800ad60:	4b4a      	ldr	r3, [pc, #296]	; (800ae8c <_malloc_r+0x328>)
 800ad62:	9a02      	ldr	r2, [sp, #8]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d000      	beq.n	800ad6a <_malloc_r+0x206>
 800ad68:	e0d7      	b.n	800af1a <_malloc_r+0x3b6>
 800ad6a:	4a4d      	ldr	r2, [pc, #308]	; (800aea0 <_malloc_r+0x33c>)
 800ad6c:	6813      	ldr	r3, [r2, #0]
 800ad6e:	18fb      	adds	r3, r7, r3
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	9a04      	ldr	r2, [sp, #16]
 800ad74:	3a01      	subs	r2, #1
 800ad76:	42a6      	cmp	r6, r4
 800ad78:	d000      	beq.n	800ad7c <_malloc_r+0x218>
 800ad7a:	e097      	b.n	800aeac <_malloc_r+0x348>
 800ad7c:	4216      	tst	r6, r2
 800ad7e:	d000      	beq.n	800ad82 <_malloc_r+0x21e>
 800ad80:	e094      	b.n	800aeac <_malloc_r+0x348>
 800ad82:	4b42      	ldr	r3, [pc, #264]	; (800ae8c <_malloc_r+0x328>)
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	9b03      	ldr	r3, [sp, #12]
 800ad88:	19df      	adds	r7, r3, r7
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	433b      	orrs	r3, r7
 800ad8e:	6053      	str	r3, [r2, #4]
 800ad90:	4b43      	ldr	r3, [pc, #268]	; (800aea0 <_malloc_r+0x33c>)
 800ad92:	4a44      	ldr	r2, [pc, #272]	; (800aea4 <_malloc_r+0x340>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6811      	ldr	r1, [r2, #0]
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	d900      	bls.n	800ad9e <_malloc_r+0x23a>
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	4a42      	ldr	r2, [pc, #264]	; (800aea8 <_malloc_r+0x344>)
 800ada0:	6811      	ldr	r1, [r2, #0]
 800ada2:	428b      	cmp	r3, r1
 800ada4:	d800      	bhi.n	800ada8 <_malloc_r+0x244>
 800ada6:	e0b8      	b.n	800af1a <_malloc_r+0x3b6>
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	e0b6      	b.n	800af1a <_malloc_r+0x3b6>
 800adac:	0a50      	lsrs	r0, r2, #9
 800adae:	2804      	cmp	r0, #4
 800adb0:	d811      	bhi.n	800add6 <_malloc_r+0x272>
 800adb2:	0991      	lsrs	r1, r2, #6
 800adb4:	3138      	adds	r1, #56	; 0x38
 800adb6:	00cf      	lsls	r7, r1, #3
 800adb8:	19bf      	adds	r7, r7, r6
 800adba:	68b8      	ldr	r0, [r7, #8]
 800adbc:	4287      	cmp	r7, r0
 800adbe:	d125      	bne.n	800ae0c <_malloc_r+0x2a8>
 800adc0:	2201      	movs	r2, #1
 800adc2:	1089      	asrs	r1, r1, #2
 800adc4:	408a      	lsls	r2, r1
 800adc6:	4661      	mov	r1, ip
 800adc8:	430a      	orrs	r2, r1
 800adca:	6072      	str	r2, [r6, #4]
 800adcc:	60e7      	str	r7, [r4, #12]
 800adce:	60a0      	str	r0, [r4, #8]
 800add0:	60bc      	str	r4, [r7, #8]
 800add2:	60c4      	str	r4, [r0, #12]
 800add4:	e76b      	b.n	800acae <_malloc_r+0x14a>
 800add6:	2814      	cmp	r0, #20
 800add8:	d802      	bhi.n	800ade0 <_malloc_r+0x27c>
 800adda:	0001      	movs	r1, r0
 800addc:	315b      	adds	r1, #91	; 0x5b
 800adde:	e7ea      	b.n	800adb6 <_malloc_r+0x252>
 800ade0:	2854      	cmp	r0, #84	; 0x54
 800ade2:	d802      	bhi.n	800adea <_malloc_r+0x286>
 800ade4:	0b11      	lsrs	r1, r2, #12
 800ade6:	316e      	adds	r1, #110	; 0x6e
 800ade8:	e7e5      	b.n	800adb6 <_malloc_r+0x252>
 800adea:	21aa      	movs	r1, #170	; 0xaa
 800adec:	0049      	lsls	r1, r1, #1
 800adee:	4288      	cmp	r0, r1
 800adf0:	d802      	bhi.n	800adf8 <_malloc_r+0x294>
 800adf2:	0bd1      	lsrs	r1, r2, #15
 800adf4:	3177      	adds	r1, #119	; 0x77
 800adf6:	e7de      	b.n	800adb6 <_malloc_r+0x252>
 800adf8:	4f26      	ldr	r7, [pc, #152]	; (800ae94 <_malloc_r+0x330>)
 800adfa:	217e      	movs	r1, #126	; 0x7e
 800adfc:	42b8      	cmp	r0, r7
 800adfe:	d8da      	bhi.n	800adb6 <_malloc_r+0x252>
 800ae00:	0c91      	lsrs	r1, r2, #18
 800ae02:	317c      	adds	r1, #124	; 0x7c
 800ae04:	e7d7      	b.n	800adb6 <_malloc_r+0x252>
 800ae06:	6880      	ldr	r0, [r0, #8]
 800ae08:	4287      	cmp	r7, r0
 800ae0a:	d004      	beq.n	800ae16 <_malloc_r+0x2b2>
 800ae0c:	2603      	movs	r6, #3
 800ae0e:	6841      	ldr	r1, [r0, #4]
 800ae10:	43b1      	bics	r1, r6
 800ae12:	4291      	cmp	r1, r2
 800ae14:	d8f7      	bhi.n	800ae06 <_malloc_r+0x2a2>
 800ae16:	68c7      	ldr	r7, [r0, #12]
 800ae18:	e7d8      	b.n	800adcc <_malloc_r+0x268>
 800ae1a:	2603      	movs	r6, #3
 800ae1c:	6861      	ldr	r1, [r4, #4]
 800ae1e:	43b1      	bics	r1, r6
 800ae20:	9103      	str	r1, [sp, #12]
 800ae22:	68e6      	ldr	r6, [r4, #12]
 800ae24:	1b49      	subs	r1, r1, r5
 800ae26:	290f      	cmp	r1, #15
 800ae28:	dd10      	ble.n	800ae4c <_malloc_r+0x2e8>
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	1963      	adds	r3, r4, r5
 800ae2e:	4315      	orrs	r5, r2
 800ae30:	6065      	str	r5, [r4, #4]
 800ae32:	68a5      	ldr	r5, [r4, #8]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	60ee      	str	r6, [r5, #12]
 800ae38:	60b5      	str	r5, [r6, #8]
 800ae3a:	6143      	str	r3, [r0, #20]
 800ae3c:	6103      	str	r3, [r0, #16]
 800ae3e:	4814      	ldr	r0, [pc, #80]	; (800ae90 <_malloc_r+0x32c>)
 800ae40:	605a      	str	r2, [r3, #4]
 800ae42:	60d8      	str	r0, [r3, #12]
 800ae44:	6098      	str	r0, [r3, #8]
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	50e1      	str	r1, [r4, r3]
 800ae4a:	e6eb      	b.n	800ac24 <_malloc_r+0xc0>
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	db09      	blt.n	800ae64 <_malloc_r+0x300>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	18e1      	adds	r1, r4, r3
 800ae54:	2301      	movs	r3, #1
 800ae56:	684a      	ldr	r2, [r1, #4]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	68a3      	ldr	r3, [r4, #8]
 800ae5e:	60de      	str	r6, [r3, #12]
 800ae60:	60b3      	str	r3, [r6, #8]
 800ae62:	e6df      	b.n	800ac24 <_malloc_r+0xc0>
 800ae64:	0034      	movs	r4, r6
 800ae66:	e739      	b.n	800acdc <_malloc_r+0x178>
 800ae68:	2108      	movs	r1, #8
 800ae6a:	4249      	negs	r1, r1
 800ae6c:	448c      	add	ip, r1
 800ae6e:	4661      	mov	r1, ip
 800ae70:	6889      	ldr	r1, [r1, #8]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	4561      	cmp	r1, ip
 800ae76:	d100      	bne.n	800ae7a <_malloc_r+0x316>
 800ae78:	e73a      	b.n	800acf0 <_malloc_r+0x18c>
 800ae7a:	e740      	b.n	800acfe <_malloc_r+0x19a>
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	0052      	lsls	r2, r2, #1
 800ae80:	420a      	tst	r2, r1
 800ae82:	d0fb      	beq.n	800ae7c <_malloc_r+0x318>
 800ae84:	e724      	b.n	800acd0 <_malloc_r+0x16c>
 800ae86:	9b02      	ldr	r3, [sp, #8]
 800ae88:	e7fa      	b.n	800ae80 <_malloc_r+0x31c>
 800ae8a:	46c0      	nop			; (mov r8, r8)
 800ae8c:	20000028 	.word	0x20000028
 800ae90:	20000030 	.word	0x20000030
 800ae94:	00000554 	.word	0x00000554
 800ae98:	20000c68 	.word	0x20000c68
 800ae9c:	20000430 	.word	0x20000430
 800aea0:	20000c38 	.word	0x20000c38
 800aea4:	20000c60 	.word	0x20000c60
 800aea8:	20000c64 	.word	0x20000c64
 800aeac:	4934      	ldr	r1, [pc, #208]	; (800af80 <_malloc_r+0x41c>)
 800aeae:	6808      	ldr	r0, [r1, #0]
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d140      	bne.n	800af36 <_malloc_r+0x3d2>
 800aeb4:	600c      	str	r4, [r1, #0]
 800aeb6:	2107      	movs	r1, #7
 800aeb8:	0026      	movs	r6, r4
 800aeba:	2300      	movs	r3, #0
 800aebc:	400e      	ands	r6, r1
 800aebe:	420c      	tst	r4, r1
 800aec0:	d002      	beq.n	800aec8 <_malloc_r+0x364>
 800aec2:	3308      	adds	r3, #8
 800aec4:	1b9b      	subs	r3, r3, r6
 800aec6:	18e4      	adds	r4, r4, r3
 800aec8:	19e1      	adds	r1, r4, r7
 800aeca:	9105      	str	r1, [sp, #20]
 800aecc:	9f05      	ldr	r7, [sp, #20]
 800aece:	9904      	ldr	r1, [sp, #16]
 800aed0:	4017      	ands	r7, r2
 800aed2:	18cb      	adds	r3, r1, r3
 800aed4:	1bdf      	subs	r7, r3, r7
 800aed6:	4017      	ands	r7, r2
 800aed8:	0039      	movs	r1, r7
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	f001 fa22 	bl	800c324 <_sbrk_r>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d107      	bne.n	800aef4 <_malloc_r+0x390>
 800aee4:	1e37      	subs	r7, r6, #0
 800aee6:	9805      	ldr	r0, [sp, #20]
 800aee8:	d004      	beq.n	800aef4 <_malloc_r+0x390>
 800aeea:	0030      	movs	r0, r6
 800aeec:	2700      	movs	r7, #0
 800aeee:	9b05      	ldr	r3, [sp, #20]
 800aef0:	3808      	subs	r0, #8
 800aef2:	1818      	adds	r0, r3, r0
 800aef4:	4a23      	ldr	r2, [pc, #140]	; (800af84 <_malloc_r+0x420>)
 800aef6:	1b00      	subs	r0, r0, r4
 800aef8:	6813      	ldr	r3, [r2, #0]
 800aefa:	19c0      	adds	r0, r0, r7
 800aefc:	19db      	adds	r3, r3, r7
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	2201      	movs	r2, #1
 800af02:	4b21      	ldr	r3, [pc, #132]	; (800af88 <_malloc_r+0x424>)
 800af04:	9902      	ldr	r1, [sp, #8]
 800af06:	4310      	orrs	r0, r2
 800af08:	609c      	str	r4, [r3, #8]
 800af0a:	6060      	str	r0, [r4, #4]
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d100      	bne.n	800af12 <_malloc_r+0x3ae>
 800af10:	e73e      	b.n	800ad90 <_malloc_r+0x22c>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	2b0f      	cmp	r3, #15
 800af16:	d813      	bhi.n	800af40 <_malloc_r+0x3dc>
 800af18:	6062      	str	r2, [r4, #4]
 800af1a:	2203      	movs	r2, #3
 800af1c:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <_malloc_r+0x424>)
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	4393      	bics	r3, r2
 800af24:	1b59      	subs	r1, r3, r5
 800af26:	42ab      	cmp	r3, r5
 800af28:	d301      	bcc.n	800af2e <_malloc_r+0x3ca>
 800af2a:	290f      	cmp	r1, #15
 800af2c:	dc1f      	bgt.n	800af6e <_malloc_r+0x40a>
 800af2e:	9801      	ldr	r0, [sp, #4]
 800af30:	f000 f834 	bl	800af9c <__malloc_unlock>
 800af34:	e623      	b.n	800ab7e <_malloc_r+0x1a>
 800af36:	4913      	ldr	r1, [pc, #76]	; (800af84 <_malloc_r+0x420>)
 800af38:	1ba6      	subs	r6, r4, r6
 800af3a:	18f6      	adds	r6, r6, r3
 800af3c:	600e      	str	r6, [r1, #0]
 800af3e:	e7ba      	b.n	800aeb6 <_malloc_r+0x352>
 800af40:	2107      	movs	r1, #7
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	3b0c      	subs	r3, #12
 800af46:	438b      	bics	r3, r1
 800af48:	9902      	ldr	r1, [sp, #8]
 800af4a:	6849      	ldr	r1, [r1, #4]
 800af4c:	400a      	ands	r2, r1
 800af4e:	9902      	ldr	r1, [sp, #8]
 800af50:	431a      	orrs	r2, r3
 800af52:	604a      	str	r2, [r1, #4]
 800af54:	18ca      	adds	r2, r1, r3
 800af56:	2105      	movs	r1, #5
 800af58:	6051      	str	r1, [r2, #4]
 800af5a:	6091      	str	r1, [r2, #8]
 800af5c:	2b0f      	cmp	r3, #15
 800af5e:	d800      	bhi.n	800af62 <_malloc_r+0x3fe>
 800af60:	e716      	b.n	800ad90 <_malloc_r+0x22c>
 800af62:	9902      	ldr	r1, [sp, #8]
 800af64:	9801      	ldr	r0, [sp, #4]
 800af66:	3108      	adds	r1, #8
 800af68:	f001 fab6 	bl	800c4d8 <_free_r>
 800af6c:	e710      	b.n	800ad90 <_malloc_r+0x22c>
 800af6e:	2201      	movs	r2, #1
 800af70:	0013      	movs	r3, r2
 800af72:	4805      	ldr	r0, [pc, #20]	; (800af88 <_malloc_r+0x424>)
 800af74:	432b      	orrs	r3, r5
 800af76:	6884      	ldr	r4, [r0, #8]
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	1963      	adds	r3, r4, r5
 800af7c:	6083      	str	r3, [r0, #8]
 800af7e:	e623      	b.n	800abc8 <_malloc_r+0x64>
 800af80:	20000430 	.word	0x20000430
 800af84:	20000c38 	.word	0x20000c38
 800af88:	20000028 	.word	0x20000028

0800af8c <__malloc_lock>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	4802      	ldr	r0, [pc, #8]	; (800af98 <__malloc_lock+0xc>)
 800af90:	f001 fa1a 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 800af94:	bd10      	pop	{r4, pc}
 800af96:	46c0      	nop			; (mov r8, r8)
 800af98:	20000dad 	.word	0x20000dad

0800af9c <__malloc_unlock>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4802      	ldr	r0, [pc, #8]	; (800afa8 <__malloc_unlock+0xc>)
 800afa0:	f001 fa13 	bl	800c3ca <__retarget_lock_release_recursive>
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	20000dad 	.word	0x20000dad

0800afac <sulp>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	0016      	movs	r6, r2
 800afb0:	000d      	movs	r5, r1
 800afb2:	f002 f9e7 	bl	800d384 <__ulp>
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	d00d      	beq.n	800afd6 <sulp+0x2a>
 800afba:	236b      	movs	r3, #107	; 0x6b
 800afbc:	006a      	lsls	r2, r5, #1
 800afbe:	0d52      	lsrs	r2, r2, #21
 800afc0:	1a9b      	subs	r3, r3, r2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd07      	ble.n	800afd6 <sulp+0x2a>
 800afc6:	2400      	movs	r4, #0
 800afc8:	4a03      	ldr	r2, [pc, #12]	; (800afd8 <sulp+0x2c>)
 800afca:	051b      	lsls	r3, r3, #20
 800afcc:	189d      	adds	r5, r3, r2
 800afce:	002b      	movs	r3, r5
 800afd0:	0022      	movs	r2, r4
 800afd2:	f7f6 fb4b 	bl	800166c <__aeabi_dmul>
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	3ff00000 	.word	0x3ff00000

0800afdc <_strtod_l>:
 800afdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afde:	b0a1      	sub	sp, #132	; 0x84
 800afe0:	9219      	str	r2, [sp, #100]	; 0x64
 800afe2:	2200      	movs	r2, #0
 800afe4:	2600      	movs	r6, #0
 800afe6:	2700      	movs	r7, #0
 800afe8:	9004      	str	r0, [sp, #16]
 800afea:	9107      	str	r1, [sp, #28]
 800afec:	921c      	str	r2, [sp, #112]	; 0x70
 800afee:	911b      	str	r1, [sp, #108]	; 0x6c
 800aff0:	780a      	ldrb	r2, [r1, #0]
 800aff2:	2a2b      	cmp	r2, #43	; 0x2b
 800aff4:	d055      	beq.n	800b0a2 <_strtod_l+0xc6>
 800aff6:	d841      	bhi.n	800b07c <_strtod_l+0xa0>
 800aff8:	2a0d      	cmp	r2, #13
 800affa:	d83b      	bhi.n	800b074 <_strtod_l+0x98>
 800affc:	2a08      	cmp	r2, #8
 800affe:	d83b      	bhi.n	800b078 <_strtod_l+0x9c>
 800b000:	2a00      	cmp	r2, #0
 800b002:	d044      	beq.n	800b08e <_strtod_l+0xb2>
 800b004:	2200      	movs	r2, #0
 800b006:	920f      	str	r2, [sp, #60]	; 0x3c
 800b008:	2100      	movs	r1, #0
 800b00a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b00c:	9109      	str	r1, [sp, #36]	; 0x24
 800b00e:	782a      	ldrb	r2, [r5, #0]
 800b010:	2a30      	cmp	r2, #48	; 0x30
 800b012:	d000      	beq.n	800b016 <_strtod_l+0x3a>
 800b014:	e085      	b.n	800b122 <_strtod_l+0x146>
 800b016:	786a      	ldrb	r2, [r5, #1]
 800b018:	3120      	adds	r1, #32
 800b01a:	438a      	bics	r2, r1
 800b01c:	2a58      	cmp	r2, #88	; 0x58
 800b01e:	d000      	beq.n	800b022 <_strtod_l+0x46>
 800b020:	e075      	b.n	800b10e <_strtod_l+0x132>
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b026:	4a97      	ldr	r2, [pc, #604]	; (800b284 <_strtod_l+0x2a8>)
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	ab1c      	add	r3, sp, #112	; 0x70
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	9804      	ldr	r0, [sp, #16]
 800b030:	ab1d      	add	r3, sp, #116	; 0x74
 800b032:	a91b      	add	r1, sp, #108	; 0x6c
 800b034:	f001 fb6c 	bl	800c710 <__gethex>
 800b038:	230f      	movs	r3, #15
 800b03a:	0002      	movs	r2, r0
 800b03c:	401a      	ands	r2, r3
 800b03e:	0004      	movs	r4, r0
 800b040:	9205      	str	r2, [sp, #20]
 800b042:	4218      	tst	r0, r3
 800b044:	d005      	beq.n	800b052 <_strtod_l+0x76>
 800b046:	2a06      	cmp	r2, #6
 800b048:	d12d      	bne.n	800b0a6 <_strtod_l+0xca>
 800b04a:	1c6b      	adds	r3, r5, #1
 800b04c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b04e:	2300      	movs	r3, #0
 800b050:	930f      	str	r3, [sp, #60]	; 0x3c
 800b052:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <_strtod_l+0x82>
 800b058:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b05a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01b      	beq.n	800b09c <_strtod_l+0xc0>
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	0032      	movs	r2, r6
 800b068:	061b      	lsls	r3, r3, #24
 800b06a:	18fb      	adds	r3, r7, r3
 800b06c:	0010      	movs	r0, r2
 800b06e:	0019      	movs	r1, r3
 800b070:	b021      	add	sp, #132	; 0x84
 800b072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b074:	2a20      	cmp	r2, #32
 800b076:	d1c5      	bne.n	800b004 <_strtod_l+0x28>
 800b078:	3101      	adds	r1, #1
 800b07a:	e7b8      	b.n	800afee <_strtod_l+0x12>
 800b07c:	2a2d      	cmp	r2, #45	; 0x2d
 800b07e:	d1c1      	bne.n	800b004 <_strtod_l+0x28>
 800b080:	3a2c      	subs	r2, #44	; 0x2c
 800b082:	920f      	str	r2, [sp, #60]	; 0x3c
 800b084:	1c4a      	adds	r2, r1, #1
 800b086:	921b      	str	r2, [sp, #108]	; 0x6c
 800b088:	784a      	ldrb	r2, [r1, #1]
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	d1bc      	bne.n	800b008 <_strtod_l+0x2c>
 800b08e:	9b07      	ldr	r3, [sp, #28]
 800b090:	931b      	str	r3, [sp, #108]	; 0x6c
 800b092:	2300      	movs	r3, #0
 800b094:	930f      	str	r3, [sp, #60]	; 0x3c
 800b096:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1dd      	bne.n	800b058 <_strtod_l+0x7c>
 800b09c:	0032      	movs	r2, r6
 800b09e:	003b      	movs	r3, r7
 800b0a0:	e7e4      	b.n	800b06c <_strtod_l+0x90>
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	e7ed      	b.n	800b082 <_strtod_l+0xa6>
 800b0a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	d007      	beq.n	800b0bc <_strtod_l+0xe0>
 800b0ac:	2135      	movs	r1, #53	; 0x35
 800b0ae:	a81e      	add	r0, sp, #120	; 0x78
 800b0b0:	f002 fa59 	bl	800d566 <__copybits>
 800b0b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0b6:	9804      	ldr	r0, [sp, #16]
 800b0b8:	f001 fe56 	bl	800cd68 <_Bfree>
 800b0bc:	9805      	ldr	r0, [sp, #20]
 800b0be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0c0:	3801      	subs	r0, #1
 800b0c2:	2804      	cmp	r0, #4
 800b0c4:	d806      	bhi.n	800b0d4 <_strtod_l+0xf8>
 800b0c6:	f7f5 f825 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b0ca:	0312      	.short	0x0312
 800b0cc:	1e1c      	.short	0x1e1c
 800b0ce:	12          	.byte	0x12
 800b0cf:	00          	.byte	0x00
 800b0d0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b0d2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b0d4:	05e4      	lsls	r4, r4, #23
 800b0d6:	d502      	bpl.n	800b0de <_strtod_l+0x102>
 800b0d8:	2380      	movs	r3, #128	; 0x80
 800b0da:	061b      	lsls	r3, r3, #24
 800b0dc:	431f      	orrs	r7, r3
 800b0de:	4b6a      	ldr	r3, [pc, #424]	; (800b288 <_strtod_l+0x2ac>)
 800b0e0:	423b      	tst	r3, r7
 800b0e2:	d1b6      	bne.n	800b052 <_strtod_l+0x76>
 800b0e4:	f001 f944 	bl	800c370 <__errno>
 800b0e8:	2322      	movs	r3, #34	; 0x22
 800b0ea:	6003      	str	r3, [r0, #0]
 800b0ec:	e7b1      	b.n	800b052 <_strtod_l+0x76>
 800b0ee:	4967      	ldr	r1, [pc, #412]	; (800b28c <_strtod_l+0x2b0>)
 800b0f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b0f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b0f4:	400a      	ands	r2, r1
 800b0f6:	4966      	ldr	r1, [pc, #408]	; (800b290 <_strtod_l+0x2b4>)
 800b0f8:	185b      	adds	r3, r3, r1
 800b0fa:	051b      	lsls	r3, r3, #20
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	0017      	movs	r7, r2
 800b100:	e7e8      	b.n	800b0d4 <_strtod_l+0xf8>
 800b102:	4f61      	ldr	r7, [pc, #388]	; (800b288 <_strtod_l+0x2ac>)
 800b104:	e7e6      	b.n	800b0d4 <_strtod_l+0xf8>
 800b106:	2601      	movs	r6, #1
 800b108:	4f62      	ldr	r7, [pc, #392]	; (800b294 <_strtod_l+0x2b8>)
 800b10a:	4276      	negs	r6, r6
 800b10c:	e7e2      	b.n	800b0d4 <_strtod_l+0xf8>
 800b10e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	921b      	str	r2, [sp, #108]	; 0x6c
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b30      	cmp	r3, #48	; 0x30
 800b118:	d0f9      	beq.n	800b10e <_strtod_l+0x132>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d099      	beq.n	800b052 <_strtod_l+0x76>
 800b11e:	2301      	movs	r3, #1
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	2500      	movs	r5, #0
 800b124:	220a      	movs	r2, #10
 800b126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b128:	950d      	str	r5, [sp, #52]	; 0x34
 800b12a:	9310      	str	r3, [sp, #64]	; 0x40
 800b12c:	9508      	str	r5, [sp, #32]
 800b12e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b130:	7804      	ldrb	r4, [r0, #0]
 800b132:	0023      	movs	r3, r4
 800b134:	3b30      	subs	r3, #48	; 0x30
 800b136:	b2d9      	uxtb	r1, r3
 800b138:	2909      	cmp	r1, #9
 800b13a:	d927      	bls.n	800b18c <_strtod_l+0x1b0>
 800b13c:	2201      	movs	r2, #1
 800b13e:	4956      	ldr	r1, [pc, #344]	; (800b298 <_strtod_l+0x2bc>)
 800b140:	f001 f838 	bl	800c1b4 <strncmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	d031      	beq.n	800b1ac <_strtod_l+0x1d0>
 800b148:	2000      	movs	r0, #0
 800b14a:	0023      	movs	r3, r4
 800b14c:	4684      	mov	ip, r0
 800b14e:	9a08      	ldr	r2, [sp, #32]
 800b150:	900c      	str	r0, [sp, #48]	; 0x30
 800b152:	9205      	str	r2, [sp, #20]
 800b154:	2220      	movs	r2, #32
 800b156:	0019      	movs	r1, r3
 800b158:	4391      	bics	r1, r2
 800b15a:	000a      	movs	r2, r1
 800b15c:	2100      	movs	r1, #0
 800b15e:	9106      	str	r1, [sp, #24]
 800b160:	2a45      	cmp	r2, #69	; 0x45
 800b162:	d000      	beq.n	800b166 <_strtod_l+0x18a>
 800b164:	e0c2      	b.n	800b2ec <_strtod_l+0x310>
 800b166:	9b05      	ldr	r3, [sp, #20]
 800b168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b16a:	4303      	orrs	r3, r0
 800b16c:	4313      	orrs	r3, r2
 800b16e:	428b      	cmp	r3, r1
 800b170:	d08d      	beq.n	800b08e <_strtod_l+0xb2>
 800b172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	3301      	adds	r3, #1
 800b178:	931b      	str	r3, [sp, #108]	; 0x6c
 800b17a:	9b07      	ldr	r3, [sp, #28]
 800b17c:	785b      	ldrb	r3, [r3, #1]
 800b17e:	2b2b      	cmp	r3, #43	; 0x2b
 800b180:	d071      	beq.n	800b266 <_strtod_l+0x28a>
 800b182:	000c      	movs	r4, r1
 800b184:	2b2d      	cmp	r3, #45	; 0x2d
 800b186:	d174      	bne.n	800b272 <_strtod_l+0x296>
 800b188:	2401      	movs	r4, #1
 800b18a:	e06d      	b.n	800b268 <_strtod_l+0x28c>
 800b18c:	9908      	ldr	r1, [sp, #32]
 800b18e:	2908      	cmp	r1, #8
 800b190:	dc09      	bgt.n	800b1a6 <_strtod_l+0x1ca>
 800b192:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b194:	4351      	muls	r1, r2
 800b196:	185b      	adds	r3, r3, r1
 800b198:	930d      	str	r3, [sp, #52]	; 0x34
 800b19a:	9b08      	ldr	r3, [sp, #32]
 800b19c:	3001      	adds	r0, #1
 800b19e:	3301      	adds	r3, #1
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b1a4:	e7c3      	b.n	800b12e <_strtod_l+0x152>
 800b1a6:	4355      	muls	r5, r2
 800b1a8:	195d      	adds	r5, r3, r5
 800b1aa:	e7f6      	b.n	800b19a <_strtod_l+0x1be>
 800b1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1b2:	9a08      	ldr	r2, [sp, #32]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d03a      	beq.n	800b230 <_strtod_l+0x254>
 800b1ba:	900c      	str	r0, [sp, #48]	; 0x30
 800b1bc:	9205      	str	r2, [sp, #20]
 800b1be:	001a      	movs	r2, r3
 800b1c0:	3a30      	subs	r2, #48	; 0x30
 800b1c2:	2a09      	cmp	r2, #9
 800b1c4:	d912      	bls.n	800b1ec <_strtod_l+0x210>
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	4694      	mov	ip, r2
 800b1ca:	e7c3      	b.n	800b154 <_strtod_l+0x178>
 800b1cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b30      	cmp	r3, #48	; 0x30
 800b1d8:	d0f8      	beq.n	800b1cc <_strtod_l+0x1f0>
 800b1da:	001a      	movs	r2, r3
 800b1dc:	3a31      	subs	r2, #49	; 0x31
 800b1de:	2a08      	cmp	r2, #8
 800b1e0:	d83c      	bhi.n	800b25c <_strtod_l+0x280>
 800b1e2:	900c      	str	r0, [sp, #48]	; 0x30
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b1e8:	9005      	str	r0, [sp, #20]
 800b1ea:	9210      	str	r2, [sp, #64]	; 0x40
 800b1ec:	001a      	movs	r2, r3
 800b1ee:	1c41      	adds	r1, r0, #1
 800b1f0:	3a30      	subs	r2, #48	; 0x30
 800b1f2:	2b30      	cmp	r3, #48	; 0x30
 800b1f4:	d016      	beq.n	800b224 <_strtod_l+0x248>
 800b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f8:	185b      	adds	r3, r3, r1
 800b1fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b1fc:	9b05      	ldr	r3, [sp, #20]
 800b1fe:	210a      	movs	r1, #10
 800b200:	469c      	mov	ip, r3
 800b202:	4484      	add	ip, r0
 800b204:	4563      	cmp	r3, ip
 800b206:	d115      	bne.n	800b234 <_strtod_l+0x258>
 800b208:	9905      	ldr	r1, [sp, #20]
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	3101      	adds	r1, #1
 800b20e:	1809      	adds	r1, r1, r0
 800b210:	181b      	adds	r3, r3, r0
 800b212:	9105      	str	r1, [sp, #20]
 800b214:	2b08      	cmp	r3, #8
 800b216:	dc19      	bgt.n	800b24c <_strtod_l+0x270>
 800b218:	230a      	movs	r3, #10
 800b21a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b21c:	434b      	muls	r3, r1
 800b21e:	2100      	movs	r1, #0
 800b220:	18d3      	adds	r3, r2, r3
 800b222:	930d      	str	r3, [sp, #52]	; 0x34
 800b224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b226:	0008      	movs	r0, r1
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b22c:	785b      	ldrb	r3, [r3, #1]
 800b22e:	e7c6      	b.n	800b1be <_strtod_l+0x1e2>
 800b230:	9808      	ldr	r0, [sp, #32]
 800b232:	e7d0      	b.n	800b1d6 <_strtod_l+0x1fa>
 800b234:	1c5c      	adds	r4, r3, #1
 800b236:	2b08      	cmp	r3, #8
 800b238:	dc04      	bgt.n	800b244 <_strtod_l+0x268>
 800b23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b23c:	434b      	muls	r3, r1
 800b23e:	930d      	str	r3, [sp, #52]	; 0x34
 800b240:	0023      	movs	r3, r4
 800b242:	e7df      	b.n	800b204 <_strtod_l+0x228>
 800b244:	2c10      	cmp	r4, #16
 800b246:	dcfb      	bgt.n	800b240 <_strtod_l+0x264>
 800b248:	434d      	muls	r5, r1
 800b24a:	e7f9      	b.n	800b240 <_strtod_l+0x264>
 800b24c:	9b05      	ldr	r3, [sp, #20]
 800b24e:	2100      	movs	r1, #0
 800b250:	2b10      	cmp	r3, #16
 800b252:	dce7      	bgt.n	800b224 <_strtod_l+0x248>
 800b254:	230a      	movs	r3, #10
 800b256:	435d      	muls	r5, r3
 800b258:	1955      	adds	r5, r2, r5
 800b25a:	e7e3      	b.n	800b224 <_strtod_l+0x248>
 800b25c:	2200      	movs	r2, #0
 800b25e:	920c      	str	r2, [sp, #48]	; 0x30
 800b260:	9205      	str	r2, [sp, #20]
 800b262:	3201      	adds	r2, #1
 800b264:	e7b0      	b.n	800b1c8 <_strtod_l+0x1ec>
 800b266:	2400      	movs	r4, #0
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	3302      	adds	r3, #2
 800b26c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b26e:	9b07      	ldr	r3, [sp, #28]
 800b270:	789b      	ldrb	r3, [r3, #2]
 800b272:	001a      	movs	r2, r3
 800b274:	3a30      	subs	r2, #48	; 0x30
 800b276:	2a09      	cmp	r2, #9
 800b278:	d914      	bls.n	800b2a4 <_strtod_l+0x2c8>
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b27e:	2200      	movs	r2, #0
 800b280:	e033      	b.n	800b2ea <_strtod_l+0x30e>
 800b282:	46c0      	nop			; (mov r8, r8)
 800b284:	08014874 	.word	0x08014874
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	ffefffff 	.word	0xffefffff
 800b290:	00000433 	.word	0x00000433
 800b294:	7fffffff 	.word	0x7fffffff
 800b298:	08014870 	.word	0x08014870
 800b29c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b30      	cmp	r3, #48	; 0x30
 800b2a6:	d0f9      	beq.n	800b29c <_strtod_l+0x2c0>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	9206      	str	r2, [sp, #24]
 800b2ac:	001a      	movs	r2, r3
 800b2ae:	3a31      	subs	r2, #49	; 0x31
 800b2b0:	2a08      	cmp	r2, #8
 800b2b2:	d81b      	bhi.n	800b2ec <_strtod_l+0x310>
 800b2b4:	3b30      	subs	r3, #48	; 0x30
 800b2b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b2b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2ba:	9306      	str	r3, [sp, #24]
 800b2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2be:	1c59      	adds	r1, r3, #1
 800b2c0:	911b      	str	r1, [sp, #108]	; 0x6c
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	001a      	movs	r2, r3
 800b2c6:	3a30      	subs	r2, #48	; 0x30
 800b2c8:	2a09      	cmp	r2, #9
 800b2ca:	d93a      	bls.n	800b342 <_strtod_l+0x366>
 800b2cc:	9a06      	ldr	r2, [sp, #24]
 800b2ce:	1a8a      	subs	r2, r1, r2
 800b2d0:	49b2      	ldr	r1, [pc, #712]	; (800b59c <_strtod_l+0x5c0>)
 800b2d2:	9106      	str	r1, [sp, #24]
 800b2d4:	2a08      	cmp	r2, #8
 800b2d6:	dc04      	bgt.n	800b2e2 <_strtod_l+0x306>
 800b2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2da:	9206      	str	r2, [sp, #24]
 800b2dc:	428a      	cmp	r2, r1
 800b2de:	dd00      	ble.n	800b2e2 <_strtod_l+0x306>
 800b2e0:	9106      	str	r1, [sp, #24]
 800b2e2:	2c00      	cmp	r4, #0
 800b2e4:	d002      	beq.n	800b2ec <_strtod_l+0x310>
 800b2e6:	9a06      	ldr	r2, [sp, #24]
 800b2e8:	4252      	negs	r2, r2
 800b2ea:	9206      	str	r2, [sp, #24]
 800b2ec:	9a05      	ldr	r2, [sp, #20]
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d14d      	bne.n	800b38e <_strtod_l+0x3b2>
 800b2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f4:	4310      	orrs	r0, r2
 800b2f6:	d000      	beq.n	800b2fa <_strtod_l+0x31e>
 800b2f8:	e6ab      	b.n	800b052 <_strtod_l+0x76>
 800b2fa:	4662      	mov	r2, ip
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	d000      	beq.n	800b302 <_strtod_l+0x326>
 800b300:	e6c5      	b.n	800b08e <_strtod_l+0xb2>
 800b302:	2b69      	cmp	r3, #105	; 0x69
 800b304:	d027      	beq.n	800b356 <_strtod_l+0x37a>
 800b306:	dc23      	bgt.n	800b350 <_strtod_l+0x374>
 800b308:	2b49      	cmp	r3, #73	; 0x49
 800b30a:	d024      	beq.n	800b356 <_strtod_l+0x37a>
 800b30c:	2b4e      	cmp	r3, #78	; 0x4e
 800b30e:	d000      	beq.n	800b312 <_strtod_l+0x336>
 800b310:	e6bd      	b.n	800b08e <_strtod_l+0xb2>
 800b312:	49a3      	ldr	r1, [pc, #652]	; (800b5a0 <_strtod_l+0x5c4>)
 800b314:	a81b      	add	r0, sp, #108	; 0x6c
 800b316:	f001 fc31 	bl	800cb7c <__match>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d100      	bne.n	800b320 <_strtod_l+0x344>
 800b31e:	e6b6      	b.n	800b08e <_strtod_l+0xb2>
 800b320:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b28      	cmp	r3, #40	; 0x28
 800b326:	d12c      	bne.n	800b382 <_strtod_l+0x3a6>
 800b328:	499e      	ldr	r1, [pc, #632]	; (800b5a4 <_strtod_l+0x5c8>)
 800b32a:	aa1e      	add	r2, sp, #120	; 0x78
 800b32c:	a81b      	add	r0, sp, #108	; 0x6c
 800b32e:	f001 fc39 	bl	800cba4 <__hexnan>
 800b332:	2805      	cmp	r0, #5
 800b334:	d125      	bne.n	800b382 <_strtod_l+0x3a6>
 800b336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b338:	4a9b      	ldr	r2, [pc, #620]	; (800b5a8 <_strtod_l+0x5cc>)
 800b33a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b33c:	431a      	orrs	r2, r3
 800b33e:	0017      	movs	r7, r2
 800b340:	e687      	b.n	800b052 <_strtod_l+0x76>
 800b342:	220a      	movs	r2, #10
 800b344:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b346:	434a      	muls	r2, r1
 800b348:	18d2      	adds	r2, r2, r3
 800b34a:	3a30      	subs	r2, #48	; 0x30
 800b34c:	920e      	str	r2, [sp, #56]	; 0x38
 800b34e:	e7b5      	b.n	800b2bc <_strtod_l+0x2e0>
 800b350:	2b6e      	cmp	r3, #110	; 0x6e
 800b352:	d0de      	beq.n	800b312 <_strtod_l+0x336>
 800b354:	e69b      	b.n	800b08e <_strtod_l+0xb2>
 800b356:	4995      	ldr	r1, [pc, #596]	; (800b5ac <_strtod_l+0x5d0>)
 800b358:	a81b      	add	r0, sp, #108	; 0x6c
 800b35a:	f001 fc0f 	bl	800cb7c <__match>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d100      	bne.n	800b364 <_strtod_l+0x388>
 800b362:	e694      	b.n	800b08e <_strtod_l+0xb2>
 800b364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b366:	4992      	ldr	r1, [pc, #584]	; (800b5b0 <_strtod_l+0x5d4>)
 800b368:	3b01      	subs	r3, #1
 800b36a:	a81b      	add	r0, sp, #108	; 0x6c
 800b36c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b36e:	f001 fc05 	bl	800cb7c <__match>
 800b372:	2800      	cmp	r0, #0
 800b374:	d102      	bne.n	800b37c <_strtod_l+0x3a0>
 800b376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b378:	3301      	adds	r3, #1
 800b37a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b37c:	2600      	movs	r6, #0
 800b37e:	4f8a      	ldr	r7, [pc, #552]	; (800b5a8 <_strtod_l+0x5cc>)
 800b380:	e667      	b.n	800b052 <_strtod_l+0x76>
 800b382:	488c      	ldr	r0, [pc, #560]	; (800b5b4 <_strtod_l+0x5d8>)
 800b384:	f001 f836 	bl	800c3f4 <nan>
 800b388:	0006      	movs	r6, r0
 800b38a:	000f      	movs	r7, r1
 800b38c:	e661      	b.n	800b052 <_strtod_l+0x76>
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
 800b396:	9b08      	ldr	r3, [sp, #32]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <_strtod_l+0x3c4>
 800b39c:	9b05      	ldr	r3, [sp, #20]
 800b39e:	9308      	str	r3, [sp, #32]
 800b3a0:	9c05      	ldr	r4, [sp, #20]
 800b3a2:	2c10      	cmp	r4, #16
 800b3a4:	dd00      	ble.n	800b3a8 <_strtod_l+0x3cc>
 800b3a6:	2410      	movs	r4, #16
 800b3a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3aa:	f7f7 f827 	bl	80023fc <__aeabi_ui2d>
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	0006      	movs	r6, r0
 800b3b2:	000f      	movs	r7, r1
 800b3b4:	2b09      	cmp	r3, #9
 800b3b6:	dd15      	ble.n	800b3e4 <_strtod_l+0x408>
 800b3b8:	0022      	movs	r2, r4
 800b3ba:	4b7f      	ldr	r3, [pc, #508]	; (800b5b8 <_strtod_l+0x5dc>)
 800b3bc:	3a09      	subs	r2, #9
 800b3be:	00d2      	lsls	r2, r2, #3
 800b3c0:	189b      	adds	r3, r3, r2
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f7f6 f951 	bl	800166c <__aeabi_dmul>
 800b3ca:	0006      	movs	r6, r0
 800b3cc:	0028      	movs	r0, r5
 800b3ce:	000f      	movs	r7, r1
 800b3d0:	f7f7 f814 	bl	80023fc <__aeabi_ui2d>
 800b3d4:	0002      	movs	r2, r0
 800b3d6:	000b      	movs	r3, r1
 800b3d8:	0030      	movs	r0, r6
 800b3da:	0039      	movs	r1, r7
 800b3dc:	f7f5 f9ec 	bl	80007b8 <__aeabi_dadd>
 800b3e0:	0006      	movs	r6, r0
 800b3e2:	000f      	movs	r7, r1
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	2b0f      	cmp	r3, #15
 800b3e8:	dc39      	bgt.n	800b45e <_strtod_l+0x482>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d100      	bne.n	800b3f2 <_strtod_l+0x416>
 800b3f0:	e62f      	b.n	800b052 <_strtod_l+0x76>
 800b3f2:	dd24      	ble.n	800b43e <_strtod_l+0x462>
 800b3f4:	2b16      	cmp	r3, #22
 800b3f6:	dc09      	bgt.n	800b40c <_strtod_l+0x430>
 800b3f8:	496f      	ldr	r1, [pc, #444]	; (800b5b8 <_strtod_l+0x5dc>)
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	18c9      	adds	r1, r1, r3
 800b3fe:	0032      	movs	r2, r6
 800b400:	6808      	ldr	r0, [r1, #0]
 800b402:	6849      	ldr	r1, [r1, #4]
 800b404:	003b      	movs	r3, r7
 800b406:	f7f6 f931 	bl	800166c <__aeabi_dmul>
 800b40a:	e7bd      	b.n	800b388 <_strtod_l+0x3ac>
 800b40c:	2325      	movs	r3, #37	; 0x25
 800b40e:	9a05      	ldr	r2, [sp, #20]
 800b410:	1a9b      	subs	r3, r3, r2
 800b412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b414:	4293      	cmp	r3, r2
 800b416:	db22      	blt.n	800b45e <_strtod_l+0x482>
 800b418:	240f      	movs	r4, #15
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	4d66      	ldr	r5, [pc, #408]	; (800b5b8 <_strtod_l+0x5dc>)
 800b41e:	1ae4      	subs	r4, r4, r3
 800b420:	00e1      	lsls	r1, r4, #3
 800b422:	1869      	adds	r1, r5, r1
 800b424:	0032      	movs	r2, r6
 800b426:	6808      	ldr	r0, [r1, #0]
 800b428:	6849      	ldr	r1, [r1, #4]
 800b42a:	003b      	movs	r3, r7
 800b42c:	f7f6 f91e 	bl	800166c <__aeabi_dmul>
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	1b1c      	subs	r4, r3, r4
 800b434:	00e4      	lsls	r4, r4, #3
 800b436:	192d      	adds	r5, r5, r4
 800b438:	682a      	ldr	r2, [r5, #0]
 800b43a:	686b      	ldr	r3, [r5, #4]
 800b43c:	e7e3      	b.n	800b406 <_strtod_l+0x42a>
 800b43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b440:	3316      	adds	r3, #22
 800b442:	db0c      	blt.n	800b45e <_strtod_l+0x482>
 800b444:	9906      	ldr	r1, [sp, #24]
 800b446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b448:	4b5b      	ldr	r3, [pc, #364]	; (800b5b8 <_strtod_l+0x5dc>)
 800b44a:	1a52      	subs	r2, r2, r1
 800b44c:	00d2      	lsls	r2, r2, #3
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	0030      	movs	r0, r6
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	0039      	movs	r1, r7
 800b458:	f7f5 fd0e 	bl	8000e78 <__aeabi_ddiv>
 800b45c:	e794      	b.n	800b388 <_strtod_l+0x3ac>
 800b45e:	9b05      	ldr	r3, [sp, #20]
 800b460:	1b1c      	subs	r4, r3, r4
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	18e4      	adds	r4, r4, r3
 800b466:	2c00      	cmp	r4, #0
 800b468:	dd72      	ble.n	800b550 <_strtod_l+0x574>
 800b46a:	220f      	movs	r2, #15
 800b46c:	0023      	movs	r3, r4
 800b46e:	4013      	ands	r3, r2
 800b470:	4214      	tst	r4, r2
 800b472:	d00a      	beq.n	800b48a <_strtod_l+0x4ae>
 800b474:	4950      	ldr	r1, [pc, #320]	; (800b5b8 <_strtod_l+0x5dc>)
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	18c9      	adds	r1, r1, r3
 800b47a:	0032      	movs	r2, r6
 800b47c:	6808      	ldr	r0, [r1, #0]
 800b47e:	6849      	ldr	r1, [r1, #4]
 800b480:	003b      	movs	r3, r7
 800b482:	f7f6 f8f3 	bl	800166c <__aeabi_dmul>
 800b486:	0006      	movs	r6, r0
 800b488:	000f      	movs	r7, r1
 800b48a:	230f      	movs	r3, #15
 800b48c:	439c      	bics	r4, r3
 800b48e:	d04a      	beq.n	800b526 <_strtod_l+0x54a>
 800b490:	3326      	adds	r3, #38	; 0x26
 800b492:	33ff      	adds	r3, #255	; 0xff
 800b494:	429c      	cmp	r4, r3
 800b496:	dd22      	ble.n	800b4de <_strtod_l+0x502>
 800b498:	2300      	movs	r3, #0
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	9306      	str	r3, [sp, #24]
 800b49e:	930d      	str	r3, [sp, #52]	; 0x34
 800b4a0:	9308      	str	r3, [sp, #32]
 800b4a2:	2322      	movs	r3, #34	; 0x22
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	9a04      	ldr	r2, [sp, #16]
 800b4a8:	4f3f      	ldr	r7, [pc, #252]	; (800b5a8 <_strtod_l+0x5cc>)
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ae:	42b3      	cmp	r3, r6
 800b4b0:	d100      	bne.n	800b4b4 <_strtod_l+0x4d8>
 800b4b2:	e5ce      	b.n	800b052 <_strtod_l+0x76>
 800b4b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4b6:	9804      	ldr	r0, [sp, #16]
 800b4b8:	f001 fc56 	bl	800cd68 <_Bfree>
 800b4bc:	9908      	ldr	r1, [sp, #32]
 800b4be:	9804      	ldr	r0, [sp, #16]
 800b4c0:	f001 fc52 	bl	800cd68 <_Bfree>
 800b4c4:	9906      	ldr	r1, [sp, #24]
 800b4c6:	9804      	ldr	r0, [sp, #16]
 800b4c8:	f001 fc4e 	bl	800cd68 <_Bfree>
 800b4cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4ce:	9804      	ldr	r0, [sp, #16]
 800b4d0:	f001 fc4a 	bl	800cd68 <_Bfree>
 800b4d4:	9905      	ldr	r1, [sp, #20]
 800b4d6:	9804      	ldr	r0, [sp, #16]
 800b4d8:	f001 fc46 	bl	800cd68 <_Bfree>
 800b4dc:	e5b9      	b.n	800b052 <_strtod_l+0x76>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	0030      	movs	r0, r6
 800b4e2:	0039      	movs	r1, r7
 800b4e4:	4d35      	ldr	r5, [pc, #212]	; (800b5bc <_strtod_l+0x5e0>)
 800b4e6:	1124      	asrs	r4, r4, #4
 800b4e8:	9307      	str	r3, [sp, #28]
 800b4ea:	2c01      	cmp	r4, #1
 800b4ec:	dc1e      	bgt.n	800b52c <_strtod_l+0x550>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <_strtod_l+0x51a>
 800b4f2:	0006      	movs	r6, r0
 800b4f4:	000f      	movs	r7, r1
 800b4f6:	4b32      	ldr	r3, [pc, #200]	; (800b5c0 <_strtod_l+0x5e4>)
 800b4f8:	9a07      	ldr	r2, [sp, #28]
 800b4fa:	18ff      	adds	r7, r7, r3
 800b4fc:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <_strtod_l+0x5e0>)
 800b4fe:	00d2      	lsls	r2, r2, #3
 800b500:	189d      	adds	r5, r3, r2
 800b502:	6828      	ldr	r0, [r5, #0]
 800b504:	6869      	ldr	r1, [r5, #4]
 800b506:	0032      	movs	r2, r6
 800b508:	003b      	movs	r3, r7
 800b50a:	f7f6 f8af 	bl	800166c <__aeabi_dmul>
 800b50e:	4b26      	ldr	r3, [pc, #152]	; (800b5a8 <_strtod_l+0x5cc>)
 800b510:	4a2c      	ldr	r2, [pc, #176]	; (800b5c4 <_strtod_l+0x5e8>)
 800b512:	0006      	movs	r6, r0
 800b514:	400b      	ands	r3, r1
 800b516:	4293      	cmp	r3, r2
 800b518:	d8be      	bhi.n	800b498 <_strtod_l+0x4bc>
 800b51a:	4a2b      	ldr	r2, [pc, #172]	; (800b5c8 <_strtod_l+0x5ec>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d913      	bls.n	800b548 <_strtod_l+0x56c>
 800b520:	2601      	movs	r6, #1
 800b522:	4f2a      	ldr	r7, [pc, #168]	; (800b5cc <_strtod_l+0x5f0>)
 800b524:	4276      	negs	r6, r6
 800b526:	2300      	movs	r3, #0
 800b528:	9307      	str	r3, [sp, #28]
 800b52a:	e088      	b.n	800b63e <_strtod_l+0x662>
 800b52c:	2201      	movs	r2, #1
 800b52e:	4214      	tst	r4, r2
 800b530:	d004      	beq.n	800b53c <_strtod_l+0x560>
 800b532:	682a      	ldr	r2, [r5, #0]
 800b534:	686b      	ldr	r3, [r5, #4]
 800b536:	f7f6 f899 	bl	800166c <__aeabi_dmul>
 800b53a:	2301      	movs	r3, #1
 800b53c:	9a07      	ldr	r2, [sp, #28]
 800b53e:	1064      	asrs	r4, r4, #1
 800b540:	3201      	adds	r2, #1
 800b542:	9207      	str	r2, [sp, #28]
 800b544:	3508      	adds	r5, #8
 800b546:	e7d0      	b.n	800b4ea <_strtod_l+0x50e>
 800b548:	23d4      	movs	r3, #212	; 0xd4
 800b54a:	049b      	lsls	r3, r3, #18
 800b54c:	18cf      	adds	r7, r1, r3
 800b54e:	e7ea      	b.n	800b526 <_strtod_l+0x54a>
 800b550:	2c00      	cmp	r4, #0
 800b552:	d0e8      	beq.n	800b526 <_strtod_l+0x54a>
 800b554:	4264      	negs	r4, r4
 800b556:	230f      	movs	r3, #15
 800b558:	0022      	movs	r2, r4
 800b55a:	401a      	ands	r2, r3
 800b55c:	421c      	tst	r4, r3
 800b55e:	d00a      	beq.n	800b576 <_strtod_l+0x59a>
 800b560:	4b15      	ldr	r3, [pc, #84]	; (800b5b8 <_strtod_l+0x5dc>)
 800b562:	00d2      	lsls	r2, r2, #3
 800b564:	189b      	adds	r3, r3, r2
 800b566:	0030      	movs	r0, r6
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	0039      	movs	r1, r7
 800b56e:	f7f5 fc83 	bl	8000e78 <__aeabi_ddiv>
 800b572:	0006      	movs	r6, r0
 800b574:	000f      	movs	r7, r1
 800b576:	1124      	asrs	r4, r4, #4
 800b578:	d0d5      	beq.n	800b526 <_strtod_l+0x54a>
 800b57a:	2c1f      	cmp	r4, #31
 800b57c:	dd28      	ble.n	800b5d0 <_strtod_l+0x5f4>
 800b57e:	2300      	movs	r3, #0
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	9306      	str	r3, [sp, #24]
 800b584:	930d      	str	r3, [sp, #52]	; 0x34
 800b586:	9308      	str	r3, [sp, #32]
 800b588:	2322      	movs	r3, #34	; 0x22
 800b58a:	9a04      	ldr	r2, [sp, #16]
 800b58c:	2600      	movs	r6, #0
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b592:	2700      	movs	r7, #0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d18d      	bne.n	800b4b4 <_strtod_l+0x4d8>
 800b598:	e55b      	b.n	800b052 <_strtod_l+0x76>
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	00004e1f 	.word	0x00004e1f
 800b5a0:	08014ba9 	.word	0x08014ba9
 800b5a4:	08014888 	.word	0x08014888
 800b5a8:	7ff00000 	.word	0x7ff00000
 800b5ac:	08014ba1 	.word	0x08014ba1
 800b5b0:	08014c57 	.word	0x08014c57
 800b5b4:	08014c53 	.word	0x08014c53
 800b5b8:	08014ac8 	.word	0x08014ac8
 800b5bc:	08014aa0 	.word	0x08014aa0
 800b5c0:	fcb00000 	.word	0xfcb00000
 800b5c4:	7ca00000 	.word	0x7ca00000
 800b5c8:	7c900000 	.word	0x7c900000
 800b5cc:	7fefffff 	.word	0x7fefffff
 800b5d0:	2310      	movs	r3, #16
 800b5d2:	0022      	movs	r2, r4
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	9207      	str	r2, [sp, #28]
 800b5d8:	421c      	tst	r4, r3
 800b5da:	d001      	beq.n	800b5e0 <_strtod_l+0x604>
 800b5dc:	335a      	adds	r3, #90	; 0x5a
 800b5de:	9307      	str	r3, [sp, #28]
 800b5e0:	0030      	movs	r0, r6
 800b5e2:	0039      	movs	r1, r7
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4dc4      	ldr	r5, [pc, #784]	; (800b8f8 <_strtod_l+0x91c>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	4214      	tst	r4, r2
 800b5ec:	d004      	beq.n	800b5f8 <_strtod_l+0x61c>
 800b5ee:	682a      	ldr	r2, [r5, #0]
 800b5f0:	686b      	ldr	r3, [r5, #4]
 800b5f2:	f7f6 f83b 	bl	800166c <__aeabi_dmul>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	1064      	asrs	r4, r4, #1
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	d1f3      	bne.n	800b5e8 <_strtod_l+0x60c>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <_strtod_l+0x62c>
 800b604:	0006      	movs	r6, r0
 800b606:	000f      	movs	r7, r1
 800b608:	9b07      	ldr	r3, [sp, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00f      	beq.n	800b62e <_strtod_l+0x652>
 800b60e:	236b      	movs	r3, #107	; 0x6b
 800b610:	007a      	lsls	r2, r7, #1
 800b612:	0d52      	lsrs	r2, r2, #21
 800b614:	0039      	movs	r1, r7
 800b616:	1a9b      	subs	r3, r3, r2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dd08      	ble.n	800b62e <_strtod_l+0x652>
 800b61c:	2b1f      	cmp	r3, #31
 800b61e:	dc00      	bgt.n	800b622 <_strtod_l+0x646>
 800b620:	e121      	b.n	800b866 <_strtod_l+0x88a>
 800b622:	2600      	movs	r6, #0
 800b624:	2b34      	cmp	r3, #52	; 0x34
 800b626:	dc00      	bgt.n	800b62a <_strtod_l+0x64e>
 800b628:	e116      	b.n	800b858 <_strtod_l+0x87c>
 800b62a:	27dc      	movs	r7, #220	; 0xdc
 800b62c:	04bf      	lsls	r7, r7, #18
 800b62e:	2200      	movs	r2, #0
 800b630:	2300      	movs	r3, #0
 800b632:	0030      	movs	r0, r6
 800b634:	0039      	movs	r1, r7
 800b636:	f7f4 ff07 	bl	8000448 <__aeabi_dcmpeq>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d19f      	bne.n	800b57e <_strtod_l+0x5a2>
 800b63e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b640:	9a08      	ldr	r2, [sp, #32]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	9804      	ldr	r0, [sp, #16]
 800b64a:	f001 fbdb 	bl	800ce04 <__s2b>
 800b64e:	900d      	str	r0, [sp, #52]	; 0x34
 800b650:	2800      	cmp	r0, #0
 800b652:	d100      	bne.n	800b656 <_strtod_l+0x67a>
 800b654:	e720      	b.n	800b498 <_strtod_l+0x4bc>
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	9906      	ldr	r1, [sp, #24]
 800b65a:	17da      	asrs	r2, r3, #31
 800b65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b65e:	1a5b      	subs	r3, r3, r1
 800b660:	401a      	ands	r2, r3
 800b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b664:	9215      	str	r2, [sp, #84]	; 0x54
 800b666:	43db      	mvns	r3, r3
 800b668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66a:	17db      	asrs	r3, r3, #31
 800b66c:	401a      	ands	r2, r3
 800b66e:	2300      	movs	r3, #0
 800b670:	9218      	str	r2, [sp, #96]	; 0x60
 800b672:	9305      	str	r3, [sp, #20]
 800b674:	9306      	str	r3, [sp, #24]
 800b676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b678:	9804      	ldr	r0, [sp, #16]
 800b67a:	6859      	ldr	r1, [r3, #4]
 800b67c:	f001 fb4c 	bl	800cd18 <_Balloc>
 800b680:	9008      	str	r0, [sp, #32]
 800b682:	2800      	cmp	r0, #0
 800b684:	d100      	bne.n	800b688 <_strtod_l+0x6ac>
 800b686:	e70c      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68a:	300c      	adds	r0, #12
 800b68c:	0019      	movs	r1, r3
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	310c      	adds	r1, #12
 800b692:	3202      	adds	r2, #2
 800b694:	0092      	lsls	r2, r2, #2
 800b696:	f000 fea4 	bl	800c3e2 <memcpy>
 800b69a:	ab1e      	add	r3, sp, #120	; 0x78
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	ab1d      	add	r3, sp, #116	; 0x74
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	0032      	movs	r2, r6
 800b6a4:	003b      	movs	r3, r7
 800b6a6:	9804      	ldr	r0, [sp, #16]
 800b6a8:	9610      	str	r6, [sp, #64]	; 0x40
 800b6aa:	9711      	str	r7, [sp, #68]	; 0x44
 800b6ac:	f001 fed2 	bl	800d454 <__d2b>
 800b6b0:	901c      	str	r0, [sp, #112]	; 0x70
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d100      	bne.n	800b6b8 <_strtod_l+0x6dc>
 800b6b6:	e6f4      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	9804      	ldr	r0, [sp, #16]
 800b6bc:	f001 fc36 	bl	800cf2c <__i2b>
 800b6c0:	9006      	str	r0, [sp, #24]
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d100      	bne.n	800b6c8 <_strtod_l+0x6ec>
 800b6c6:	e6ec      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b6c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b6ce:	1ad4      	subs	r4, r2, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	db01      	blt.n	800b6d8 <_strtod_l+0x6fc>
 800b6d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b6d6:	195d      	adds	r5, r3, r5
 800b6d8:	9907      	ldr	r1, [sp, #28]
 800b6da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b6dc:	1a5b      	subs	r3, r3, r1
 800b6de:	2136      	movs	r1, #54	; 0x36
 800b6e0:	189b      	adds	r3, r3, r2
 800b6e2:	1a8a      	subs	r2, r1, r2
 800b6e4:	4985      	ldr	r1, [pc, #532]	; (800b8fc <_strtod_l+0x920>)
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	468c      	mov	ip, r1
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	9114      	str	r1, [sp, #80]	; 0x50
 800b6f0:	9012      	str	r0, [sp, #72]	; 0x48
 800b6f2:	4563      	cmp	r3, ip
 800b6f4:	da07      	bge.n	800b706 <_strtod_l+0x72a>
 800b6f6:	4661      	mov	r1, ip
 800b6f8:	1ac9      	subs	r1, r1, r3
 800b6fa:	1a52      	subs	r2, r2, r1
 800b6fc:	291f      	cmp	r1, #31
 800b6fe:	dd00      	ble.n	800b702 <_strtod_l+0x726>
 800b700:	e0b6      	b.n	800b870 <_strtod_l+0x894>
 800b702:	4088      	lsls	r0, r1
 800b704:	9012      	str	r0, [sp, #72]	; 0x48
 800b706:	18ab      	adds	r3, r5, r2
 800b708:	930c      	str	r3, [sp, #48]	; 0x30
 800b70a:	18a4      	adds	r4, r4, r2
 800b70c:	9b07      	ldr	r3, [sp, #28]
 800b70e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b710:	191c      	adds	r4, r3, r4
 800b712:	002b      	movs	r3, r5
 800b714:	4295      	cmp	r5, r2
 800b716:	dd00      	ble.n	800b71a <_strtod_l+0x73e>
 800b718:	0013      	movs	r3, r2
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	dd00      	ble.n	800b720 <_strtod_l+0x744>
 800b71e:	0023      	movs	r3, r4
 800b720:	2b00      	cmp	r3, #0
 800b722:	dd04      	ble.n	800b72e <_strtod_l+0x752>
 800b724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b726:	1ae4      	subs	r4, r4, r3
 800b728:	1ad2      	subs	r2, r2, r3
 800b72a:	920c      	str	r2, [sp, #48]	; 0x30
 800b72c:	1aed      	subs	r5, r5, r3
 800b72e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b730:	2b00      	cmp	r3, #0
 800b732:	dd17      	ble.n	800b764 <_strtod_l+0x788>
 800b734:	001a      	movs	r2, r3
 800b736:	9906      	ldr	r1, [sp, #24]
 800b738:	9804      	ldr	r0, [sp, #16]
 800b73a:	f001 fcbf 	bl	800d0bc <__pow5mult>
 800b73e:	9006      	str	r0, [sp, #24]
 800b740:	2800      	cmp	r0, #0
 800b742:	d100      	bne.n	800b746 <_strtod_l+0x76a>
 800b744:	e6ad      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b746:	0001      	movs	r1, r0
 800b748:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b74a:	9804      	ldr	r0, [sp, #16]
 800b74c:	f001 fc06 	bl	800cf5c <__multiply>
 800b750:	900e      	str	r0, [sp, #56]	; 0x38
 800b752:	2800      	cmp	r0, #0
 800b754:	d100      	bne.n	800b758 <_strtod_l+0x77c>
 800b756:	e6a4      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b758:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b75a:	9804      	ldr	r0, [sp, #16]
 800b75c:	f001 fb04 	bl	800cd68 <_Bfree>
 800b760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b762:	931c      	str	r3, [sp, #112]	; 0x70
 800b764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b766:	2b00      	cmp	r3, #0
 800b768:	dd00      	ble.n	800b76c <_strtod_l+0x790>
 800b76a:	e087      	b.n	800b87c <_strtod_l+0x8a0>
 800b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dd08      	ble.n	800b784 <_strtod_l+0x7a8>
 800b772:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b774:	9908      	ldr	r1, [sp, #32]
 800b776:	9804      	ldr	r0, [sp, #16]
 800b778:	f001 fca0 	bl	800d0bc <__pow5mult>
 800b77c:	9008      	str	r0, [sp, #32]
 800b77e:	2800      	cmp	r0, #0
 800b780:	d100      	bne.n	800b784 <_strtod_l+0x7a8>
 800b782:	e68e      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b784:	2c00      	cmp	r4, #0
 800b786:	dd08      	ble.n	800b79a <_strtod_l+0x7be>
 800b788:	0022      	movs	r2, r4
 800b78a:	9908      	ldr	r1, [sp, #32]
 800b78c:	9804      	ldr	r0, [sp, #16]
 800b78e:	f001 fcd7 	bl	800d140 <__lshift>
 800b792:	9008      	str	r0, [sp, #32]
 800b794:	2800      	cmp	r0, #0
 800b796:	d100      	bne.n	800b79a <_strtod_l+0x7be>
 800b798:	e683      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	dd08      	ble.n	800b7b0 <_strtod_l+0x7d4>
 800b79e:	002a      	movs	r2, r5
 800b7a0:	9906      	ldr	r1, [sp, #24]
 800b7a2:	9804      	ldr	r0, [sp, #16]
 800b7a4:	f001 fccc 	bl	800d140 <__lshift>
 800b7a8:	9006      	str	r0, [sp, #24]
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d100      	bne.n	800b7b0 <_strtod_l+0x7d4>
 800b7ae:	e678      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b7b0:	9a08      	ldr	r2, [sp, #32]
 800b7b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7b4:	9804      	ldr	r0, [sp, #16]
 800b7b6:	f001 fd4d 	bl	800d254 <__mdiff>
 800b7ba:	9005      	str	r0, [sp, #20]
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d100      	bne.n	800b7c2 <_strtod_l+0x7e6>
 800b7c0:	e66f      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	68c3      	ldr	r3, [r0, #12]
 800b7c6:	9906      	ldr	r1, [sp, #24]
 800b7c8:	60c2      	str	r2, [r0, #12]
 800b7ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b7cc:	f001 fd26 	bl	800d21c <__mcmp>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	da5d      	bge.n	800b890 <_strtod_l+0x8b4>
 800b7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d6:	4333      	orrs	r3, r6
 800b7d8:	d000      	beq.n	800b7dc <_strtod_l+0x800>
 800b7da:	e088      	b.n	800b8ee <_strtod_l+0x912>
 800b7dc:	033b      	lsls	r3, r7, #12
 800b7de:	d000      	beq.n	800b7e2 <_strtod_l+0x806>
 800b7e0:	e085      	b.n	800b8ee <_strtod_l+0x912>
 800b7e2:	22d6      	movs	r2, #214	; 0xd6
 800b7e4:	4b46      	ldr	r3, [pc, #280]	; (800b900 <_strtod_l+0x924>)
 800b7e6:	04d2      	lsls	r2, r2, #19
 800b7e8:	403b      	ands	r3, r7
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d97f      	bls.n	800b8ee <_strtod_l+0x912>
 800b7ee:	9b05      	ldr	r3, [sp, #20]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d103      	bne.n	800b7fe <_strtod_l+0x822>
 800b7f6:	9b05      	ldr	r3, [sp, #20]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	dd77      	ble.n	800b8ee <_strtod_l+0x912>
 800b7fe:	9905      	ldr	r1, [sp, #20]
 800b800:	2201      	movs	r2, #1
 800b802:	9804      	ldr	r0, [sp, #16]
 800b804:	f001 fc9c 	bl	800d140 <__lshift>
 800b808:	9906      	ldr	r1, [sp, #24]
 800b80a:	9005      	str	r0, [sp, #20]
 800b80c:	f001 fd06 	bl	800d21c <__mcmp>
 800b810:	2800      	cmp	r0, #0
 800b812:	dd6c      	ble.n	800b8ee <_strtod_l+0x912>
 800b814:	9907      	ldr	r1, [sp, #28]
 800b816:	003b      	movs	r3, r7
 800b818:	4a39      	ldr	r2, [pc, #228]	; (800b900 <_strtod_l+0x924>)
 800b81a:	2900      	cmp	r1, #0
 800b81c:	d100      	bne.n	800b820 <_strtod_l+0x844>
 800b81e:	e094      	b.n	800b94a <_strtod_l+0x96e>
 800b820:	0011      	movs	r1, r2
 800b822:	20d6      	movs	r0, #214	; 0xd6
 800b824:	4039      	ands	r1, r7
 800b826:	04c0      	lsls	r0, r0, #19
 800b828:	4281      	cmp	r1, r0
 800b82a:	dd00      	ble.n	800b82e <_strtod_l+0x852>
 800b82c:	e08d      	b.n	800b94a <_strtod_l+0x96e>
 800b82e:	23dc      	movs	r3, #220	; 0xdc
 800b830:	049b      	lsls	r3, r3, #18
 800b832:	4299      	cmp	r1, r3
 800b834:	dc00      	bgt.n	800b838 <_strtod_l+0x85c>
 800b836:	e6a7      	b.n	800b588 <_strtod_l+0x5ac>
 800b838:	0030      	movs	r0, r6
 800b83a:	0039      	movs	r1, r7
 800b83c:	4b31      	ldr	r3, [pc, #196]	; (800b904 <_strtod_l+0x928>)
 800b83e:	2200      	movs	r2, #0
 800b840:	f7f5 ff14 	bl	800166c <__aeabi_dmul>
 800b844:	4b2e      	ldr	r3, [pc, #184]	; (800b900 <_strtod_l+0x924>)
 800b846:	0006      	movs	r6, r0
 800b848:	000f      	movs	r7, r1
 800b84a:	420b      	tst	r3, r1
 800b84c:	d000      	beq.n	800b850 <_strtod_l+0x874>
 800b84e:	e631      	b.n	800b4b4 <_strtod_l+0x4d8>
 800b850:	2322      	movs	r3, #34	; 0x22
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	e62d      	b.n	800b4b4 <_strtod_l+0x4d8>
 800b858:	234b      	movs	r3, #75	; 0x4b
 800b85a:	1a9a      	subs	r2, r3, r2
 800b85c:	3b4c      	subs	r3, #76	; 0x4c
 800b85e:	4093      	lsls	r3, r2
 800b860:	4019      	ands	r1, r3
 800b862:	000f      	movs	r7, r1
 800b864:	e6e3      	b.n	800b62e <_strtod_l+0x652>
 800b866:	2201      	movs	r2, #1
 800b868:	4252      	negs	r2, r2
 800b86a:	409a      	lsls	r2, r3
 800b86c:	4016      	ands	r6, r2
 800b86e:	e6de      	b.n	800b62e <_strtod_l+0x652>
 800b870:	4925      	ldr	r1, [pc, #148]	; (800b908 <_strtod_l+0x92c>)
 800b872:	1acb      	subs	r3, r1, r3
 800b874:	0001      	movs	r1, r0
 800b876:	4099      	lsls	r1, r3
 800b878:	9114      	str	r1, [sp, #80]	; 0x50
 800b87a:	e743      	b.n	800b704 <_strtod_l+0x728>
 800b87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b87e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b880:	9804      	ldr	r0, [sp, #16]
 800b882:	f001 fc5d 	bl	800d140 <__lshift>
 800b886:	901c      	str	r0, [sp, #112]	; 0x70
 800b888:	2800      	cmp	r0, #0
 800b88a:	d000      	beq.n	800b88e <_strtod_l+0x8b2>
 800b88c:	e76e      	b.n	800b76c <_strtod_l+0x790>
 800b88e:	e608      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b890:	970e      	str	r7, [sp, #56]	; 0x38
 800b892:	2800      	cmp	r0, #0
 800b894:	d177      	bne.n	800b986 <_strtod_l+0x9aa>
 800b896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b898:	033b      	lsls	r3, r7, #12
 800b89a:	0b1b      	lsrs	r3, r3, #12
 800b89c:	2a00      	cmp	r2, #0
 800b89e:	d039      	beq.n	800b914 <_strtod_l+0x938>
 800b8a0:	4a1a      	ldr	r2, [pc, #104]	; (800b90c <_strtod_l+0x930>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d139      	bne.n	800b91a <_strtod_l+0x93e>
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	9b07      	ldr	r3, [sp, #28]
 800b8aa:	4249      	negs	r1, r1
 800b8ac:	0032      	movs	r2, r6
 800b8ae:	0008      	movs	r0, r1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <_strtod_l+0x8f0>
 800b8b4:	24d4      	movs	r4, #212	; 0xd4
 800b8b6:	4b12      	ldr	r3, [pc, #72]	; (800b900 <_strtod_l+0x924>)
 800b8b8:	0008      	movs	r0, r1
 800b8ba:	403b      	ands	r3, r7
 800b8bc:	04e4      	lsls	r4, r4, #19
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d804      	bhi.n	800b8cc <_strtod_l+0x8f0>
 800b8c2:	306c      	adds	r0, #108	; 0x6c
 800b8c4:	0d1b      	lsrs	r3, r3, #20
 800b8c6:	1ac3      	subs	r3, r0, r3
 800b8c8:	4099      	lsls	r1, r3
 800b8ca:	0008      	movs	r0, r1
 800b8cc:	4282      	cmp	r2, r0
 800b8ce:	d124      	bne.n	800b91a <_strtod_l+0x93e>
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <_strtod_l+0x934>)
 800b8d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b8d4:	4299      	cmp	r1, r3
 800b8d6:	d102      	bne.n	800b8de <_strtod_l+0x902>
 800b8d8:	3201      	adds	r2, #1
 800b8da:	d100      	bne.n	800b8de <_strtod_l+0x902>
 800b8dc:	e5e1      	b.n	800b4a2 <_strtod_l+0x4c6>
 800b8de:	4b08      	ldr	r3, [pc, #32]	; (800b900 <_strtod_l+0x924>)
 800b8e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8e2:	2600      	movs	r6, #0
 800b8e4:	401a      	ands	r2, r3
 800b8e6:	0013      	movs	r3, r2
 800b8e8:	2280      	movs	r2, #128	; 0x80
 800b8ea:	0352      	lsls	r2, r2, #13
 800b8ec:	189f      	adds	r7, r3, r2
 800b8ee:	9b07      	ldr	r3, [sp, #28]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1a1      	bne.n	800b838 <_strtod_l+0x85c>
 800b8f4:	e5de      	b.n	800b4b4 <_strtod_l+0x4d8>
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	080148a0 	.word	0x080148a0
 800b8fc:	fffffc02 	.word	0xfffffc02
 800b900:	7ff00000 	.word	0x7ff00000
 800b904:	39500000 	.word	0x39500000
 800b908:	fffffbe2 	.word	0xfffffbe2
 800b90c:	000fffff 	.word	0x000fffff
 800b910:	7fefffff 	.word	0x7fefffff
 800b914:	4333      	orrs	r3, r6
 800b916:	d100      	bne.n	800b91a <_strtod_l+0x93e>
 800b918:	e77c      	b.n	800b814 <_strtod_l+0x838>
 800b91a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01d      	beq.n	800b95c <_strtod_l+0x980>
 800b920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b924:	4213      	tst	r3, r2
 800b926:	d0e2      	beq.n	800b8ee <_strtod_l+0x912>
 800b928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b92a:	0030      	movs	r0, r6
 800b92c:	0039      	movs	r1, r7
 800b92e:	9a07      	ldr	r2, [sp, #28]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d017      	beq.n	800b964 <_strtod_l+0x988>
 800b934:	f7ff fb3a 	bl	800afac <sulp>
 800b938:	0002      	movs	r2, r0
 800b93a:	000b      	movs	r3, r1
 800b93c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b93e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b940:	f7f4 ff3a 	bl	80007b8 <__aeabi_dadd>
 800b944:	0006      	movs	r6, r0
 800b946:	000f      	movs	r7, r1
 800b948:	e7d1      	b.n	800b8ee <_strtod_l+0x912>
 800b94a:	2601      	movs	r6, #1
 800b94c:	4013      	ands	r3, r2
 800b94e:	4a98      	ldr	r2, [pc, #608]	; (800bbb0 <_strtod_l+0xbd4>)
 800b950:	4276      	negs	r6, r6
 800b952:	189b      	adds	r3, r3, r2
 800b954:	4a97      	ldr	r2, [pc, #604]	; (800bbb4 <_strtod_l+0xbd8>)
 800b956:	431a      	orrs	r2, r3
 800b958:	0017      	movs	r7, r2
 800b95a:	e7c8      	b.n	800b8ee <_strtod_l+0x912>
 800b95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b95e:	4233      	tst	r3, r6
 800b960:	d0c5      	beq.n	800b8ee <_strtod_l+0x912>
 800b962:	e7e1      	b.n	800b928 <_strtod_l+0x94c>
 800b964:	f7ff fb22 	bl	800afac <sulp>
 800b968:	0002      	movs	r2, r0
 800b96a:	000b      	movs	r3, r1
 800b96c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b96e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b970:	f7f6 f93e 	bl	8001bf0 <__aeabi_dsub>
 800b974:	2200      	movs	r2, #0
 800b976:	2300      	movs	r3, #0
 800b978:	0006      	movs	r6, r0
 800b97a:	000f      	movs	r7, r1
 800b97c:	f7f4 fd64 	bl	8000448 <__aeabi_dcmpeq>
 800b980:	2800      	cmp	r0, #0
 800b982:	d0b4      	beq.n	800b8ee <_strtod_l+0x912>
 800b984:	e600      	b.n	800b588 <_strtod_l+0x5ac>
 800b986:	9906      	ldr	r1, [sp, #24]
 800b988:	9805      	ldr	r0, [sp, #20]
 800b98a:	f001 fdc3 	bl	800d514 <__ratio>
 800b98e:	2380      	movs	r3, #128	; 0x80
 800b990:	2200      	movs	r2, #0
 800b992:	05db      	lsls	r3, r3, #23
 800b994:	0004      	movs	r4, r0
 800b996:	000d      	movs	r5, r1
 800b998:	f7f4 fd66 	bl	8000468 <__aeabi_dcmple>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d06d      	beq.n	800ba7c <_strtod_l+0xaa0>
 800b9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d000      	beq.n	800b9a8 <_strtod_l+0x9cc>
 800b9a6:	e07e      	b.n	800baa6 <_strtod_l+0xaca>
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	d158      	bne.n	800ba5e <_strtod_l+0xa82>
 800b9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ae:	031b      	lsls	r3, r3, #12
 800b9b0:	d000      	beq.n	800b9b4 <_strtod_l+0x9d8>
 800b9b2:	e07f      	b.n	800bab4 <_strtod_l+0xad8>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	0020      	movs	r0, r4
 800b9b8:	0029      	movs	r1, r5
 800b9ba:	4b7f      	ldr	r3, [pc, #508]	; (800bbb8 <_strtod_l+0xbdc>)
 800b9bc:	f7f4 fd4a 	bl	8000454 <__aeabi_dcmplt>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d158      	bne.n	800ba76 <_strtod_l+0xa9a>
 800b9c4:	0020      	movs	r0, r4
 800b9c6:	0029      	movs	r1, r5
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4b7c      	ldr	r3, [pc, #496]	; (800bbbc <_strtod_l+0xbe0>)
 800b9cc:	f7f5 fe4e 	bl	800166c <__aeabi_dmul>
 800b9d0:	0004      	movs	r4, r0
 800b9d2:	000d      	movs	r5, r1
 800b9d4:	2380      	movs	r3, #128	; 0x80
 800b9d6:	061b      	lsls	r3, r3, #24
 800b9d8:	940a      	str	r4, [sp, #40]	; 0x28
 800b9da:	18eb      	adds	r3, r5, r3
 800b9dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e2:	9212      	str	r2, [sp, #72]	; 0x48
 800b9e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9e6:	4a76      	ldr	r2, [pc, #472]	; (800bbc0 <_strtod_l+0xbe4>)
 800b9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	9314      	str	r3, [sp, #80]	; 0x50
 800b9ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9f0:	4b74      	ldr	r3, [pc, #464]	; (800bbc4 <_strtod_l+0xbe8>)
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d000      	beq.n	800b9f8 <_strtod_l+0xa1c>
 800b9f6:	e091      	b.n	800bb1c <_strtod_l+0xb40>
 800b9f8:	4a73      	ldr	r2, [pc, #460]	; (800bbc8 <_strtod_l+0xbec>)
 800b9fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9fc:	4694      	mov	ip, r2
 800b9fe:	4463      	add	r3, ip
 800ba00:	001f      	movs	r7, r3
 800ba02:	0030      	movs	r0, r6
 800ba04:	0019      	movs	r1, r3
 800ba06:	f001 fcbd 	bl	800d384 <__ulp>
 800ba0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba0e:	f7f5 fe2d 	bl	800166c <__aeabi_dmul>
 800ba12:	0032      	movs	r2, r6
 800ba14:	003b      	movs	r3, r7
 800ba16:	f7f4 fecf 	bl	80007b8 <__aeabi_dadd>
 800ba1a:	4a69      	ldr	r2, [pc, #420]	; (800bbc0 <_strtod_l+0xbe4>)
 800ba1c:	4b6b      	ldr	r3, [pc, #428]	; (800bbcc <_strtod_l+0xbf0>)
 800ba1e:	0006      	movs	r6, r0
 800ba20:	400a      	ands	r2, r1
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d949      	bls.n	800baba <_strtod_l+0xade>
 800ba26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba28:	4b69      	ldr	r3, [pc, #420]	; (800bbd0 <_strtod_l+0xbf4>)
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d103      	bne.n	800ba36 <_strtod_l+0xa5a>
 800ba2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba30:	3301      	adds	r3, #1
 800ba32:	d100      	bne.n	800ba36 <_strtod_l+0xa5a>
 800ba34:	e535      	b.n	800b4a2 <_strtod_l+0x4c6>
 800ba36:	2601      	movs	r6, #1
 800ba38:	4f65      	ldr	r7, [pc, #404]	; (800bbd0 <_strtod_l+0xbf4>)
 800ba3a:	4276      	negs	r6, r6
 800ba3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba3e:	9804      	ldr	r0, [sp, #16]
 800ba40:	f001 f992 	bl	800cd68 <_Bfree>
 800ba44:	9908      	ldr	r1, [sp, #32]
 800ba46:	9804      	ldr	r0, [sp, #16]
 800ba48:	f001 f98e 	bl	800cd68 <_Bfree>
 800ba4c:	9906      	ldr	r1, [sp, #24]
 800ba4e:	9804      	ldr	r0, [sp, #16]
 800ba50:	f001 f98a 	bl	800cd68 <_Bfree>
 800ba54:	9905      	ldr	r1, [sp, #20]
 800ba56:	9804      	ldr	r0, [sp, #16]
 800ba58:	f001 f986 	bl	800cd68 <_Bfree>
 800ba5c:	e60b      	b.n	800b676 <_strtod_l+0x69a>
 800ba5e:	2e01      	cmp	r6, #1
 800ba60:	d103      	bne.n	800ba6a <_strtod_l+0xa8e>
 800ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d100      	bne.n	800ba6a <_strtod_l+0xa8e>
 800ba68:	e58e      	b.n	800b588 <_strtod_l+0x5ac>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	4c59      	ldr	r4, [pc, #356]	; (800bbd4 <_strtod_l+0xbf8>)
 800ba6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba70:	940b      	str	r4, [sp, #44]	; 0x2c
 800ba72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ba74:	e01c      	b.n	800bab0 <_strtod_l+0xad4>
 800ba76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ba78:	4d50      	ldr	r5, [pc, #320]	; (800bbbc <_strtod_l+0xbe0>)
 800ba7a:	e7ab      	b.n	800b9d4 <_strtod_l+0x9f8>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	0020      	movs	r0, r4
 800ba80:	0029      	movs	r1, r5
 800ba82:	4b4e      	ldr	r3, [pc, #312]	; (800bbbc <_strtod_l+0xbe0>)
 800ba84:	f7f5 fdf2 	bl	800166c <__aeabi_dmul>
 800ba88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba8a:	0004      	movs	r4, r0
 800ba8c:	000b      	movs	r3, r1
 800ba8e:	000d      	movs	r5, r1
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	d104      	bne.n	800ba9e <_strtod_l+0xac2>
 800ba94:	2280      	movs	r2, #128	; 0x80
 800ba96:	0612      	lsls	r2, r2, #24
 800ba98:	900a      	str	r0, [sp, #40]	; 0x28
 800ba9a:	188b      	adds	r3, r1, r2
 800ba9c:	e79e      	b.n	800b9dc <_strtod_l+0xa00>
 800ba9e:	0002      	movs	r2, r0
 800baa0:	920a      	str	r2, [sp, #40]	; 0x28
 800baa2:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa4:	e79b      	b.n	800b9de <_strtod_l+0xa02>
 800baa6:	2300      	movs	r3, #0
 800baa8:	4c43      	ldr	r4, [pc, #268]	; (800bbb8 <_strtod_l+0xbdc>)
 800baaa:	930a      	str	r3, [sp, #40]	; 0x28
 800baac:	940b      	str	r4, [sp, #44]	; 0x2c
 800baae:	2400      	movs	r4, #0
 800bab0:	4d41      	ldr	r5, [pc, #260]	; (800bbb8 <_strtod_l+0xbdc>)
 800bab2:	e794      	b.n	800b9de <_strtod_l+0xa02>
 800bab4:	2300      	movs	r3, #0
 800bab6:	4c47      	ldr	r4, [pc, #284]	; (800bbd4 <_strtod_l+0xbf8>)
 800bab8:	e7f7      	b.n	800baaa <_strtod_l+0xace>
 800baba:	23d4      	movs	r3, #212	; 0xd4
 800babc:	049b      	lsls	r3, r3, #18
 800babe:	18cf      	adds	r7, r1, r3
 800bac0:	9b07      	ldr	r3, [sp, #28]
 800bac2:	970e      	str	r7, [sp, #56]	; 0x38
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1b9      	bne.n	800ba3c <_strtod_l+0xa60>
 800bac8:	4b3d      	ldr	r3, [pc, #244]	; (800bbc0 <_strtod_l+0xbe4>)
 800baca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bacc:	403b      	ands	r3, r7
 800bace:	429a      	cmp	r2, r3
 800bad0:	d1b4      	bne.n	800ba3c <_strtod_l+0xa60>
 800bad2:	0020      	movs	r0, r4
 800bad4:	0029      	movs	r1, r5
 800bad6:	f7f4 fd51 	bl	800057c <__aeabi_d2lz>
 800bada:	f7f4 fd8b 	bl	80005f4 <__aeabi_l2d>
 800bade:	0002      	movs	r2, r0
 800bae0:	000b      	movs	r3, r1
 800bae2:	0020      	movs	r0, r4
 800bae4:	0029      	movs	r1, r5
 800bae6:	f7f6 f883 	bl	8001bf0 <__aeabi_dsub>
 800baea:	033b      	lsls	r3, r7, #12
 800baec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baee:	0b1b      	lsrs	r3, r3, #12
 800baf0:	4333      	orrs	r3, r6
 800baf2:	4313      	orrs	r3, r2
 800baf4:	0004      	movs	r4, r0
 800baf6:	000d      	movs	r5, r1
 800baf8:	4a37      	ldr	r2, [pc, #220]	; (800bbd8 <_strtod_l+0xbfc>)
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d054      	beq.n	800bba8 <_strtod_l+0xbcc>
 800bafe:	4b37      	ldr	r3, [pc, #220]	; (800bbdc <_strtod_l+0xc00>)
 800bb00:	f7f4 fca8 	bl	8000454 <__aeabi_dcmplt>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d000      	beq.n	800bb0a <_strtod_l+0xb2e>
 800bb08:	e4d4      	b.n	800b4b4 <_strtod_l+0x4d8>
 800bb0a:	0020      	movs	r0, r4
 800bb0c:	0029      	movs	r1, r5
 800bb0e:	4a34      	ldr	r2, [pc, #208]	; (800bbe0 <_strtod_l+0xc04>)
 800bb10:	4b2a      	ldr	r3, [pc, #168]	; (800bbbc <_strtod_l+0xbe0>)
 800bb12:	f7f4 fcb3 	bl	800047c <__aeabi_dcmpgt>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d090      	beq.n	800ba3c <_strtod_l+0xa60>
 800bb1a:	e4cb      	b.n	800b4b4 <_strtod_l+0x4d8>
 800bb1c:	9b07      	ldr	r3, [sp, #28]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d02b      	beq.n	800bb7a <_strtod_l+0xb9e>
 800bb22:	23d4      	movs	r3, #212	; 0xd4
 800bb24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb26:	04db      	lsls	r3, r3, #19
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d826      	bhi.n	800bb7a <_strtod_l+0xb9e>
 800bb2c:	0020      	movs	r0, r4
 800bb2e:	0029      	movs	r1, r5
 800bb30:	4a2c      	ldr	r2, [pc, #176]	; (800bbe4 <_strtod_l+0xc08>)
 800bb32:	4b2d      	ldr	r3, [pc, #180]	; (800bbe8 <_strtod_l+0xc0c>)
 800bb34:	f7f4 fc98 	bl	8000468 <__aeabi_dcmple>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d017      	beq.n	800bb6c <_strtod_l+0xb90>
 800bb3c:	0020      	movs	r0, r4
 800bb3e:	0029      	movs	r1, r5
 800bb40:	f7f4 fcfe 	bl	8000540 <__aeabi_d2uiz>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d100      	bne.n	800bb4a <_strtod_l+0xb6e>
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f7f6 fc57 	bl	80023fc <__aeabi_ui2d>
 800bb4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb50:	0004      	movs	r4, r0
 800bb52:	000b      	movs	r3, r1
 800bb54:	000d      	movs	r5, r1
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d122      	bne.n	800bba0 <_strtod_l+0xbc4>
 800bb5a:	2280      	movs	r2, #128	; 0x80
 800bb5c:	0612      	lsls	r2, r2, #24
 800bb5e:	188b      	adds	r3, r1, r2
 800bb60:	9016      	str	r0, [sp, #88]	; 0x58
 800bb62:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb68:	9212      	str	r2, [sp, #72]	; 0x48
 800bb6a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb6c:	22d6      	movs	r2, #214	; 0xd6
 800bb6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb70:	04d2      	lsls	r2, r2, #19
 800bb72:	189b      	adds	r3, r3, r2
 800bb74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb7e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bb80:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bb82:	f001 fbff 	bl	800d384 <__ulp>
 800bb86:	0002      	movs	r2, r0
 800bb88:	000b      	movs	r3, r1
 800bb8a:	0030      	movs	r0, r6
 800bb8c:	0039      	movs	r1, r7
 800bb8e:	f7f5 fd6d 	bl	800166c <__aeabi_dmul>
 800bb92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb96:	f7f4 fe0f 	bl	80007b8 <__aeabi_dadd>
 800bb9a:	0006      	movs	r6, r0
 800bb9c:	000f      	movs	r7, r1
 800bb9e:	e78f      	b.n	800bac0 <_strtod_l+0xae4>
 800bba0:	0002      	movs	r2, r0
 800bba2:	9216      	str	r2, [sp, #88]	; 0x58
 800bba4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bba6:	e7dd      	b.n	800bb64 <_strtod_l+0xb88>
 800bba8:	4b10      	ldr	r3, [pc, #64]	; (800bbec <_strtod_l+0xc10>)
 800bbaa:	f7f4 fc53 	bl	8000454 <__aeabi_dcmplt>
 800bbae:	e7b2      	b.n	800bb16 <_strtod_l+0xb3a>
 800bbb0:	fff00000 	.word	0xfff00000
 800bbb4:	000fffff 	.word	0x000fffff
 800bbb8:	3ff00000 	.word	0x3ff00000
 800bbbc:	3fe00000 	.word	0x3fe00000
 800bbc0:	7ff00000 	.word	0x7ff00000
 800bbc4:	7fe00000 	.word	0x7fe00000
 800bbc8:	fcb00000 	.word	0xfcb00000
 800bbcc:	7c9fffff 	.word	0x7c9fffff
 800bbd0:	7fefffff 	.word	0x7fefffff
 800bbd4:	bff00000 	.word	0xbff00000
 800bbd8:	94a03595 	.word	0x94a03595
 800bbdc:	3fdfffff 	.word	0x3fdfffff
 800bbe0:	35afe535 	.word	0x35afe535
 800bbe4:	ffc00000 	.word	0xffc00000
 800bbe8:	41dfffff 	.word	0x41dfffff
 800bbec:	3fcfffff 	.word	0x3fcfffff

0800bbf0 <_strtod_r>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <_strtod_r+0xc>)
 800bbf4:	f7ff f9f2 	bl	800afdc <_strtod_l>
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	20000444 	.word	0x20000444

0800bc00 <strtod>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4c04      	ldr	r4, [pc, #16]	; (800bc14 <strtod+0x14>)
 800bc04:	000a      	movs	r2, r1
 800bc06:	0001      	movs	r1, r0
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <strtod+0x18>)
 800bc0a:	6820      	ldr	r0, [r4, #0]
 800bc0c:	f7ff f9e6 	bl	800afdc <_strtod_l>
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	200006d0 	.word	0x200006d0
 800bc18:	20000444 	.word	0x20000444

0800bc1c <_strtol_l.constprop.0>:
 800bc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	001e      	movs	r6, r3
 800bc22:	9005      	str	r0, [sp, #20]
 800bc24:	9101      	str	r1, [sp, #4]
 800bc26:	9202      	str	r2, [sp, #8]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d048      	beq.n	800bcbe <_strtol_l.constprop.0+0xa2>
 800bc2c:	000b      	movs	r3, r1
 800bc2e:	2e24      	cmp	r6, #36	; 0x24
 800bc30:	d845      	bhi.n	800bcbe <_strtol_l.constprop.0+0xa2>
 800bc32:	4a3b      	ldr	r2, [pc, #236]	; (800bd20 <_strtol_l.constprop.0+0x104>)
 800bc34:	2108      	movs	r1, #8
 800bc36:	4694      	mov	ip, r2
 800bc38:	001a      	movs	r2, r3
 800bc3a:	4660      	mov	r0, ip
 800bc3c:	7814      	ldrb	r4, [r2, #0]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	5d00      	ldrb	r0, [r0, r4]
 800bc42:	001d      	movs	r5, r3
 800bc44:	0007      	movs	r7, r0
 800bc46:	400f      	ands	r7, r1
 800bc48:	4208      	tst	r0, r1
 800bc4a:	d1f5      	bne.n	800bc38 <_strtol_l.constprop.0+0x1c>
 800bc4c:	2c2d      	cmp	r4, #45	; 0x2d
 800bc4e:	d13d      	bne.n	800bccc <_strtol_l.constprop.0+0xb0>
 800bc50:	2701      	movs	r7, #1
 800bc52:	781c      	ldrb	r4, [r3, #0]
 800bc54:	1c95      	adds	r5, r2, #2
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d05e      	beq.n	800bd18 <_strtol_l.constprop.0+0xfc>
 800bc5a:	2e10      	cmp	r6, #16
 800bc5c:	d109      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bc5e:	2c30      	cmp	r4, #48	; 0x30
 800bc60:	d107      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bc62:	2220      	movs	r2, #32
 800bc64:	782b      	ldrb	r3, [r5, #0]
 800bc66:	4393      	bics	r3, r2
 800bc68:	2b58      	cmp	r3, #88	; 0x58
 800bc6a:	d150      	bne.n	800bd0e <_strtol_l.constprop.0+0xf2>
 800bc6c:	2610      	movs	r6, #16
 800bc6e:	786c      	ldrb	r4, [r5, #1]
 800bc70:	3502      	adds	r5, #2
 800bc72:	4b2c      	ldr	r3, [pc, #176]	; (800bd24 <_strtol_l.constprop.0+0x108>)
 800bc74:	0031      	movs	r1, r6
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	0018      	movs	r0, r3
 800bc7a:	9303      	str	r3, [sp, #12]
 800bc7c:	f7f4 fae4 	bl	8000248 <__aeabi_uidivmod>
 800bc80:	2200      	movs	r2, #0
 800bc82:	9104      	str	r1, [sp, #16]
 800bc84:	2101      	movs	r1, #1
 800bc86:	4684      	mov	ip, r0
 800bc88:	0010      	movs	r0, r2
 800bc8a:	4249      	negs	r1, r1
 800bc8c:	0023      	movs	r3, r4
 800bc8e:	3b30      	subs	r3, #48	; 0x30
 800bc90:	2b09      	cmp	r3, #9
 800bc92:	d903      	bls.n	800bc9c <_strtol_l.constprop.0+0x80>
 800bc94:	3b11      	subs	r3, #17
 800bc96:	2b19      	cmp	r3, #25
 800bc98:	d81d      	bhi.n	800bcd6 <_strtol_l.constprop.0+0xba>
 800bc9a:	330a      	adds	r3, #10
 800bc9c:	429e      	cmp	r6, r3
 800bc9e:	dd1e      	ble.n	800bcde <_strtol_l.constprop.0+0xc2>
 800bca0:	1c54      	adds	r4, r2, #1
 800bca2:	d009      	beq.n	800bcb8 <_strtol_l.constprop.0+0x9c>
 800bca4:	000a      	movs	r2, r1
 800bca6:	4584      	cmp	ip, r0
 800bca8:	d306      	bcc.n	800bcb8 <_strtol_l.constprop.0+0x9c>
 800bcaa:	d102      	bne.n	800bcb2 <_strtol_l.constprop.0+0x96>
 800bcac:	9c04      	ldr	r4, [sp, #16]
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	db02      	blt.n	800bcb8 <_strtol_l.constprop.0+0x9c>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	4370      	muls	r0, r6
 800bcb6:	1818      	adds	r0, r3, r0
 800bcb8:	782c      	ldrb	r4, [r5, #0]
 800bcba:	3501      	adds	r5, #1
 800bcbc:	e7e6      	b.n	800bc8c <_strtol_l.constprop.0+0x70>
 800bcbe:	f000 fb57 	bl	800c370 <__errno>
 800bcc2:	2316      	movs	r3, #22
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	b007      	add	sp, #28
 800bcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bccc:	2c2b      	cmp	r4, #43	; 0x2b
 800bcce:	d1c2      	bne.n	800bc56 <_strtol_l.constprop.0+0x3a>
 800bcd0:	781c      	ldrb	r4, [r3, #0]
 800bcd2:	1c95      	adds	r5, r2, #2
 800bcd4:	e7bf      	b.n	800bc56 <_strtol_l.constprop.0+0x3a>
 800bcd6:	0023      	movs	r3, r4
 800bcd8:	3b61      	subs	r3, #97	; 0x61
 800bcda:	2b19      	cmp	r3, #25
 800bcdc:	d9dd      	bls.n	800bc9a <_strtol_l.constprop.0+0x7e>
 800bcde:	1c53      	adds	r3, r2, #1
 800bce0:	d109      	bne.n	800bcf6 <_strtol_l.constprop.0+0xda>
 800bce2:	2322      	movs	r3, #34	; 0x22
 800bce4:	9a05      	ldr	r2, [sp, #20]
 800bce6:	9803      	ldr	r0, [sp, #12]
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	9b02      	ldr	r3, [sp, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0eb      	beq.n	800bcc8 <_strtol_l.constprop.0+0xac>
 800bcf0:	1e6b      	subs	r3, r5, #1
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	e007      	b.n	800bd06 <_strtol_l.constprop.0+0xea>
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d000      	beq.n	800bcfc <_strtol_l.constprop.0+0xe0>
 800bcfa:	4240      	negs	r0, r0
 800bcfc:	9b02      	ldr	r3, [sp, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0e2      	beq.n	800bcc8 <_strtol_l.constprop.0+0xac>
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d1f4      	bne.n	800bcf0 <_strtol_l.constprop.0+0xd4>
 800bd06:	9b02      	ldr	r3, [sp, #8]
 800bd08:	9a01      	ldr	r2, [sp, #4]
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	e7dc      	b.n	800bcc8 <_strtol_l.constprop.0+0xac>
 800bd0e:	2430      	movs	r4, #48	; 0x30
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	d1ae      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd14:	3608      	adds	r6, #8
 800bd16:	e7ac      	b.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd18:	2c30      	cmp	r4, #48	; 0x30
 800bd1a:	d0a2      	beq.n	800bc62 <_strtol_l.constprop.0+0x46>
 800bd1c:	260a      	movs	r6, #10
 800bd1e:	e7a8      	b.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd20:	080148c9 	.word	0x080148c9
 800bd24:	7fffffff 	.word	0x7fffffff

0800bd28 <_strtol_r>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	f7ff ff77 	bl	800bc1c <_strtol_l.constprop.0>
 800bd2e:	bd10      	pop	{r4, pc}

0800bd30 <strtol>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	4c04      	ldr	r4, [pc, #16]	; (800bd44 <strtol+0x14>)
 800bd34:	0013      	movs	r3, r2
 800bd36:	000a      	movs	r2, r1
 800bd38:	0001      	movs	r1, r0
 800bd3a:	6820      	ldr	r0, [r4, #0]
 800bd3c:	f7ff ff6e 	bl	800bc1c <_strtol_l.constprop.0>
 800bd40:	bd10      	pop	{r4, pc}
 800bd42:	46c0      	nop			; (mov r8, r8)
 800bd44:	200006d0 	.word	0x200006d0

0800bd48 <_strtoul_l.constprop.0>:
 800bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	9202      	str	r2, [sp, #8]
 800bd4e:	4a3e      	ldr	r2, [pc, #248]	; (800be48 <_strtoul_l.constprop.0+0x100>)
 800bd50:	001e      	movs	r6, r3
 800bd52:	9101      	str	r1, [sp, #4]
 800bd54:	000b      	movs	r3, r1
 800bd56:	4694      	mov	ip, r2
 800bd58:	2108      	movs	r1, #8
 800bd5a:	9005      	str	r0, [sp, #20]
 800bd5c:	001a      	movs	r2, r3
 800bd5e:	4660      	mov	r0, ip
 800bd60:	7814      	ldrb	r4, [r2, #0]
 800bd62:	3301      	adds	r3, #1
 800bd64:	5d00      	ldrb	r0, [r0, r4]
 800bd66:	001d      	movs	r5, r3
 800bd68:	0007      	movs	r7, r0
 800bd6a:	400f      	ands	r7, r1
 800bd6c:	4208      	tst	r0, r1
 800bd6e:	d1f5      	bne.n	800bd5c <_strtoul_l.constprop.0+0x14>
 800bd70:	2c2d      	cmp	r4, #45	; 0x2d
 800bd72:	d13d      	bne.n	800bdf0 <_strtoul_l.constprop.0+0xa8>
 800bd74:	2701      	movs	r7, #1
 800bd76:	781c      	ldrb	r4, [r3, #0]
 800bd78:	1c95      	adds	r5, r2, #2
 800bd7a:	2e00      	cmp	r6, #0
 800bd7c:	d05f      	beq.n	800be3e <_strtoul_l.constprop.0+0xf6>
 800bd7e:	2e10      	cmp	r6, #16
 800bd80:	d109      	bne.n	800bd96 <_strtoul_l.constprop.0+0x4e>
 800bd82:	2c30      	cmp	r4, #48	; 0x30
 800bd84:	d107      	bne.n	800bd96 <_strtoul_l.constprop.0+0x4e>
 800bd86:	2220      	movs	r2, #32
 800bd88:	782b      	ldrb	r3, [r5, #0]
 800bd8a:	4393      	bics	r3, r2
 800bd8c:	2b58      	cmp	r3, #88	; 0x58
 800bd8e:	d151      	bne.n	800be34 <_strtoul_l.constprop.0+0xec>
 800bd90:	2610      	movs	r6, #16
 800bd92:	786c      	ldrb	r4, [r5, #1]
 800bd94:	3502      	adds	r5, #2
 800bd96:	2001      	movs	r0, #1
 800bd98:	0031      	movs	r1, r6
 800bd9a:	4240      	negs	r0, r0
 800bd9c:	f7f4 f9ce 	bl	800013c <__udivsi3>
 800bda0:	9003      	str	r0, [sp, #12]
 800bda2:	2001      	movs	r0, #1
 800bda4:	0031      	movs	r1, r6
 800bda6:	4240      	negs	r0, r0
 800bda8:	f7f4 fa4e 	bl	8000248 <__aeabi_uidivmod>
 800bdac:	2300      	movs	r3, #0
 800bdae:	2201      	movs	r2, #1
 800bdb0:	9104      	str	r1, [sp, #16]
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	4694      	mov	ip, r2
 800bdb8:	4249      	negs	r1, r1
 800bdba:	0022      	movs	r2, r4
 800bdbc:	3a30      	subs	r2, #48	; 0x30
 800bdbe:	2a09      	cmp	r2, #9
 800bdc0:	d903      	bls.n	800bdca <_strtoul_l.constprop.0+0x82>
 800bdc2:	3a11      	subs	r2, #17
 800bdc4:	2a19      	cmp	r2, #25
 800bdc6:	d818      	bhi.n	800bdfa <_strtoul_l.constprop.0+0xb2>
 800bdc8:	320a      	adds	r2, #10
 800bdca:	4296      	cmp	r6, r2
 800bdcc:	dd19      	ble.n	800be02 <_strtoul_l.constprop.0+0xba>
 800bdce:	1c5c      	adds	r4, r3, #1
 800bdd0:	d00b      	beq.n	800bdea <_strtoul_l.constprop.0+0xa2>
 800bdd2:	9c03      	ldr	r4, [sp, #12]
 800bdd4:	000b      	movs	r3, r1
 800bdd6:	4284      	cmp	r4, r0
 800bdd8:	d307      	bcc.n	800bdea <_strtoul_l.constprop.0+0xa2>
 800bdda:	d103      	bne.n	800bde4 <_strtoul_l.constprop.0+0x9c>
 800bddc:	9c04      	ldr	r4, [sp, #16]
 800bdde:	000b      	movs	r3, r1
 800bde0:	4294      	cmp	r4, r2
 800bde2:	db02      	blt.n	800bdea <_strtoul_l.constprop.0+0xa2>
 800bde4:	4663      	mov	r3, ip
 800bde6:	4370      	muls	r0, r6
 800bde8:	1810      	adds	r0, r2, r0
 800bdea:	782c      	ldrb	r4, [r5, #0]
 800bdec:	3501      	adds	r5, #1
 800bdee:	e7e4      	b.n	800bdba <_strtoul_l.constprop.0+0x72>
 800bdf0:	2c2b      	cmp	r4, #43	; 0x2b
 800bdf2:	d1c2      	bne.n	800bd7a <_strtoul_l.constprop.0+0x32>
 800bdf4:	781c      	ldrb	r4, [r3, #0]
 800bdf6:	1c95      	adds	r5, r2, #2
 800bdf8:	e7bf      	b.n	800bd7a <_strtoul_l.constprop.0+0x32>
 800bdfa:	0022      	movs	r2, r4
 800bdfc:	3a61      	subs	r2, #97	; 0x61
 800bdfe:	2a19      	cmp	r2, #25
 800be00:	d9e2      	bls.n	800bdc8 <_strtoul_l.constprop.0+0x80>
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	d108      	bne.n	800be18 <_strtoul_l.constprop.0+0xd0>
 800be06:	2222      	movs	r2, #34	; 0x22
 800be08:	9905      	ldr	r1, [sp, #20]
 800be0a:	0018      	movs	r0, r3
 800be0c:	600a      	str	r2, [r1, #0]
 800be0e:	9a02      	ldr	r2, [sp, #8]
 800be10:	2a00      	cmp	r2, #0
 800be12:	d109      	bne.n	800be28 <_strtoul_l.constprop.0+0xe0>
 800be14:	b007      	add	sp, #28
 800be16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be18:	2f00      	cmp	r7, #0
 800be1a:	d000      	beq.n	800be1e <_strtoul_l.constprop.0+0xd6>
 800be1c:	4240      	negs	r0, r0
 800be1e:	9a02      	ldr	r2, [sp, #8]
 800be20:	2a00      	cmp	r2, #0
 800be22:	d0f7      	beq.n	800be14 <_strtoul_l.constprop.0+0xcc>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <_strtoul_l.constprop.0+0xe4>
 800be28:	1e6b      	subs	r3, r5, #1
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	9b02      	ldr	r3, [sp, #8]
 800be2e:	9a01      	ldr	r2, [sp, #4]
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	e7ef      	b.n	800be14 <_strtoul_l.constprop.0+0xcc>
 800be34:	2430      	movs	r4, #48	; 0x30
 800be36:	2e00      	cmp	r6, #0
 800be38:	d1ad      	bne.n	800bd96 <_strtoul_l.constprop.0+0x4e>
 800be3a:	3608      	adds	r6, #8
 800be3c:	e7ab      	b.n	800bd96 <_strtoul_l.constprop.0+0x4e>
 800be3e:	2c30      	cmp	r4, #48	; 0x30
 800be40:	d0a1      	beq.n	800bd86 <_strtoul_l.constprop.0+0x3e>
 800be42:	260a      	movs	r6, #10
 800be44:	e7a7      	b.n	800bd96 <_strtoul_l.constprop.0+0x4e>
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	080148c9 	.word	0x080148c9

0800be4c <_strtoul_r>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	f7ff ff7b 	bl	800bd48 <_strtoul_l.constprop.0>
 800be52:	bd10      	pop	{r4, pc}

0800be54 <strtoul>:
 800be54:	b510      	push	{r4, lr}
 800be56:	4c04      	ldr	r4, [pc, #16]	; (800be68 <strtoul+0x14>)
 800be58:	0013      	movs	r3, r2
 800be5a:	000a      	movs	r2, r1
 800be5c:	0001      	movs	r1, r0
 800be5e:	6820      	ldr	r0, [r4, #0]
 800be60:	f7ff ff72 	bl	800bd48 <_strtoul_l.constprop.0>
 800be64:	bd10      	pop	{r4, pc}
 800be66:	46c0      	nop			; (mov r8, r8)
 800be68:	200006d0 	.word	0x200006d0

0800be6c <std>:
 800be6c:	2300      	movs	r3, #0
 800be6e:	b510      	push	{r4, lr}
 800be70:	0004      	movs	r4, r0
 800be72:	6003      	str	r3, [r0, #0]
 800be74:	6043      	str	r3, [r0, #4]
 800be76:	6083      	str	r3, [r0, #8]
 800be78:	8181      	strh	r1, [r0, #12]
 800be7a:	6643      	str	r3, [r0, #100]	; 0x64
 800be7c:	81c2      	strh	r2, [r0, #14]
 800be7e:	6103      	str	r3, [r0, #16]
 800be80:	6143      	str	r3, [r0, #20]
 800be82:	6183      	str	r3, [r0, #24]
 800be84:	0019      	movs	r1, r3
 800be86:	2208      	movs	r2, #8
 800be88:	305c      	adds	r0, #92	; 0x5c
 800be8a:	f000 f97d 	bl	800c188 <memset>
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <std+0x50>)
 800be90:	61e4      	str	r4, [r4, #28]
 800be92:	6223      	str	r3, [r4, #32]
 800be94:	4b0a      	ldr	r3, [pc, #40]	; (800bec0 <std+0x54>)
 800be96:	6263      	str	r3, [r4, #36]	; 0x24
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <std+0x58>)
 800be9a:	62a3      	str	r3, [r4, #40]	; 0x28
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <std+0x5c>)
 800be9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bea0:	4b0a      	ldr	r3, [pc, #40]	; (800becc <std+0x60>)
 800bea2:	429c      	cmp	r4, r3
 800bea4:	d005      	beq.n	800beb2 <std+0x46>
 800bea6:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <std+0x64>)
 800bea8:	429c      	cmp	r4, r3
 800beaa:	d002      	beq.n	800beb2 <std+0x46>
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <std+0x68>)
 800beae:	429c      	cmp	r4, r3
 800beb0:	d103      	bne.n	800beba <std+0x4e>
 800beb2:	0020      	movs	r0, r4
 800beb4:	3058      	adds	r0, #88	; 0x58
 800beb6:	f000 fa85 	bl	800c3c4 <__retarget_lock_init_recursive>
 800beba:	bd10      	pop	{r4, pc}
 800bebc:	0800c0ed 	.word	0x0800c0ed
 800bec0:	0800c119 	.word	0x0800c119
 800bec4:	0800c151 	.word	0x0800c151
 800bec8:	0800c17d 	.word	0x0800c17d
 800becc:	20000c6c 	.word	0x20000c6c
 800bed0:	20000cd4 	.word	0x20000cd4
 800bed4:	20000d3c 	.word	0x20000d3c

0800bed8 <stdio_exit_handler>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	4a03      	ldr	r2, [pc, #12]	; (800bee8 <stdio_exit_handler+0x10>)
 800bedc:	4903      	ldr	r1, [pc, #12]	; (800beec <stdio_exit_handler+0x14>)
 800bede:	4804      	ldr	r0, [pc, #16]	; (800bef0 <stdio_exit_handler+0x18>)
 800bee0:	f000 f86c 	bl	800bfbc <_fwalk_sglue>
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	20000438 	.word	0x20000438
 800beec:	0800fec5 	.word	0x0800fec5
 800bef0:	200005b0 	.word	0x200005b0

0800bef4 <cleanup_stdio>:
 800bef4:	6841      	ldr	r1, [r0, #4]
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <cleanup_stdio+0x30>)
 800bef8:	b510      	push	{r4, lr}
 800befa:	0004      	movs	r4, r0
 800befc:	4299      	cmp	r1, r3
 800befe:	d001      	beq.n	800bf04 <cleanup_stdio+0x10>
 800bf00:	f003 ffe0 	bl	800fec4 <_fclose_r>
 800bf04:	68a1      	ldr	r1, [r4, #8]
 800bf06:	4b08      	ldr	r3, [pc, #32]	; (800bf28 <cleanup_stdio+0x34>)
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d002      	beq.n	800bf12 <cleanup_stdio+0x1e>
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	f003 ffd9 	bl	800fec4 <_fclose_r>
 800bf12:	68e1      	ldr	r1, [r4, #12]
 800bf14:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <cleanup_stdio+0x38>)
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d002      	beq.n	800bf20 <cleanup_stdio+0x2c>
 800bf1a:	0020      	movs	r0, r4
 800bf1c:	f003 ffd2 	bl	800fec4 <_fclose_r>
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	20000c6c 	.word	0x20000c6c
 800bf28:	20000cd4 	.word	0x20000cd4
 800bf2c:	20000d3c 	.word	0x20000d3c

0800bf30 <global_stdio_init.part.0>:
 800bf30:	b510      	push	{r4, lr}
 800bf32:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <global_stdio_init.part.0+0x28>)
 800bf34:	4a09      	ldr	r2, [pc, #36]	; (800bf5c <global_stdio_init.part.0+0x2c>)
 800bf36:	2104      	movs	r1, #4
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	4809      	ldr	r0, [pc, #36]	; (800bf60 <global_stdio_init.part.0+0x30>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f7ff ff95 	bl	800be6c <std>
 800bf42:	2201      	movs	r2, #1
 800bf44:	2109      	movs	r1, #9
 800bf46:	4807      	ldr	r0, [pc, #28]	; (800bf64 <global_stdio_init.part.0+0x34>)
 800bf48:	f7ff ff90 	bl	800be6c <std>
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	2112      	movs	r1, #18
 800bf50:	4805      	ldr	r0, [pc, #20]	; (800bf68 <global_stdio_init.part.0+0x38>)
 800bf52:	f7ff ff8b 	bl	800be6c <std>
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	20000da4 	.word	0x20000da4
 800bf5c:	0800bed9 	.word	0x0800bed9
 800bf60:	20000c6c 	.word	0x20000c6c
 800bf64:	20000cd4 	.word	0x20000cd4
 800bf68:	20000d3c 	.word	0x20000d3c

0800bf6c <__sfp_lock_acquire>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	4802      	ldr	r0, [pc, #8]	; (800bf78 <__sfp_lock_acquire+0xc>)
 800bf70:	f000 fa2a 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	20000dae 	.word	0x20000dae

0800bf7c <__sfp_lock_release>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	4802      	ldr	r0, [pc, #8]	; (800bf88 <__sfp_lock_release+0xc>)
 800bf80:	f000 fa23 	bl	800c3ca <__retarget_lock_release_recursive>
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	20000dae 	.word	0x20000dae

0800bf8c <__sinit>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	0004      	movs	r4, r0
 800bf90:	f7ff ffec 	bl	800bf6c <__sfp_lock_acquire>
 800bf94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <__sinit+0x14>
 800bf9a:	f7ff ffef 	bl	800bf7c <__sfp_lock_release>
 800bf9e:	bd10      	pop	{r4, pc}
 800bfa0:	4b04      	ldr	r3, [pc, #16]	; (800bfb4 <__sinit+0x28>)
 800bfa2:	6363      	str	r3, [r4, #52]	; 0x34
 800bfa4:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <__sinit+0x2c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1f6      	bne.n	800bf9a <__sinit+0xe>
 800bfac:	f7ff ffc0 	bl	800bf30 <global_stdio_init.part.0>
 800bfb0:	e7f3      	b.n	800bf9a <__sinit+0xe>
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	0800bef5 	.word	0x0800bef5
 800bfb8:	20000da4 	.word	0x20000da4

0800bfbc <_fwalk_sglue>:
 800bfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfbe:	0014      	movs	r4, r2
 800bfc0:	2600      	movs	r6, #0
 800bfc2:	9000      	str	r0, [sp, #0]
 800bfc4:	9101      	str	r1, [sp, #4]
 800bfc6:	68a5      	ldr	r5, [r4, #8]
 800bfc8:	6867      	ldr	r7, [r4, #4]
 800bfca:	3f01      	subs	r7, #1
 800bfcc:	d504      	bpl.n	800bfd8 <_fwalk_sglue+0x1c>
 800bfce:	6824      	ldr	r4, [r4, #0]
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	d1f8      	bne.n	800bfc6 <_fwalk_sglue+0xa>
 800bfd4:	0030      	movs	r0, r6
 800bfd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfd8:	89ab      	ldrh	r3, [r5, #12]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d908      	bls.n	800bff0 <_fwalk_sglue+0x34>
 800bfde:	220e      	movs	r2, #14
 800bfe0:	5eab      	ldrsh	r3, [r5, r2]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	d004      	beq.n	800bff0 <_fwalk_sglue+0x34>
 800bfe6:	0029      	movs	r1, r5
 800bfe8:	9800      	ldr	r0, [sp, #0]
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	4798      	blx	r3
 800bfee:	4306      	orrs	r6, r0
 800bff0:	3568      	adds	r5, #104	; 0x68
 800bff2:	e7ea      	b.n	800bfca <_fwalk_sglue+0xe>

0800bff4 <snprintf>:
 800bff4:	b40c      	push	{r2, r3}
 800bff6:	b530      	push	{r4, r5, lr}
 800bff8:	4b17      	ldr	r3, [pc, #92]	; (800c058 <snprintf+0x64>)
 800bffa:	000c      	movs	r4, r1
 800bffc:	681d      	ldr	r5, [r3, #0]
 800bffe:	b09d      	sub	sp, #116	; 0x74
 800c000:	2900      	cmp	r1, #0
 800c002:	da08      	bge.n	800c016 <snprintf+0x22>
 800c004:	238b      	movs	r3, #139	; 0x8b
 800c006:	2001      	movs	r0, #1
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	4240      	negs	r0, r0
 800c00c:	b01d      	add	sp, #116	; 0x74
 800c00e:	bc30      	pop	{r4, r5}
 800c010:	bc08      	pop	{r3}
 800c012:	b002      	add	sp, #8
 800c014:	4718      	bx	r3
 800c016:	2382      	movs	r3, #130	; 0x82
 800c018:	466a      	mov	r2, sp
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	8293      	strh	r3, [r2, #20]
 800c01e:	2300      	movs	r3, #0
 800c020:	9002      	str	r0, [sp, #8]
 800c022:	9006      	str	r0, [sp, #24]
 800c024:	4299      	cmp	r1, r3
 800c026:	d000      	beq.n	800c02a <snprintf+0x36>
 800c028:	1e4b      	subs	r3, r1, #1
 800c02a:	9304      	str	r3, [sp, #16]
 800c02c:	9307      	str	r3, [sp, #28]
 800c02e:	2301      	movs	r3, #1
 800c030:	466a      	mov	r2, sp
 800c032:	425b      	negs	r3, r3
 800c034:	82d3      	strh	r3, [r2, #22]
 800c036:	0028      	movs	r0, r5
 800c038:	ab21      	add	r3, sp, #132	; 0x84
 800c03a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c03c:	a902      	add	r1, sp, #8
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f001 fae2 	bl	800d608 <_svfprintf_r>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	da01      	bge.n	800c04c <snprintf+0x58>
 800c048:	238b      	movs	r3, #139	; 0x8b
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	2c00      	cmp	r4, #0
 800c04e:	d0dd      	beq.n	800c00c <snprintf+0x18>
 800c050:	2200      	movs	r2, #0
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e7d9      	b.n	800c00c <snprintf+0x18>
 800c058:	200006d0 	.word	0x200006d0

0800c05c <sprintf>:
 800c05c:	b40e      	push	{r1, r2, r3}
 800c05e:	b500      	push	{lr}
 800c060:	490b      	ldr	r1, [pc, #44]	; (800c090 <sprintf+0x34>)
 800c062:	b09c      	sub	sp, #112	; 0x70
 800c064:	ab1d      	add	r3, sp, #116	; 0x74
 800c066:	9002      	str	r0, [sp, #8]
 800c068:	9006      	str	r0, [sp, #24]
 800c06a:	9107      	str	r1, [sp, #28]
 800c06c:	9104      	str	r1, [sp, #16]
 800c06e:	4809      	ldr	r0, [pc, #36]	; (800c094 <sprintf+0x38>)
 800c070:	4909      	ldr	r1, [pc, #36]	; (800c098 <sprintf+0x3c>)
 800c072:	cb04      	ldmia	r3!, {r2}
 800c074:	9105      	str	r1, [sp, #20]
 800c076:	6800      	ldr	r0, [r0, #0]
 800c078:	a902      	add	r1, sp, #8
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	f001 fac4 	bl	800d608 <_svfprintf_r>
 800c080:	2200      	movs	r2, #0
 800c082:	9b02      	ldr	r3, [sp, #8]
 800c084:	701a      	strb	r2, [r3, #0]
 800c086:	b01c      	add	sp, #112	; 0x70
 800c088:	bc08      	pop	{r3}
 800c08a:	b003      	add	sp, #12
 800c08c:	4718      	bx	r3
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	7fffffff 	.word	0x7fffffff
 800c094:	200006d0 	.word	0x200006d0
 800c098:	ffff0208 	.word	0xffff0208

0800c09c <sscanf>:
 800c09c:	b40e      	push	{r1, r2, r3}
 800c09e:	b530      	push	{r4, r5, lr}
 800c0a0:	2381      	movs	r3, #129	; 0x81
 800c0a2:	b09c      	sub	sp, #112	; 0x70
 800c0a4:	466a      	mov	r2, sp
 800c0a6:	ac1f      	add	r4, sp, #124	; 0x7c
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	cc20      	ldmia	r4!, {r5}
 800c0ac:	8293      	strh	r3, [r2, #20]
 800c0ae:	9002      	str	r0, [sp, #8]
 800c0b0:	9006      	str	r0, [sp, #24]
 800c0b2:	f7f4 f827 	bl	8000104 <strlen>
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <sscanf+0x48>)
 800c0b8:	466a      	mov	r2, sp
 800c0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9003      	str	r0, [sp, #12]
 800c0c0:	9007      	str	r0, [sp, #28]
 800c0c2:	4809      	ldr	r0, [pc, #36]	; (800c0e8 <sscanf+0x4c>)
 800c0c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c0c6:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	82d3      	strh	r3, [r2, #22]
 800c0cc:	a902      	add	r1, sp, #8
 800c0ce:	0023      	movs	r3, r4
 800c0d0:	002a      	movs	r2, r5
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	9401      	str	r4, [sp, #4]
 800c0d6:	f002 fcd9 	bl	800ea8c <__ssvfscanf_r>
 800c0da:	b01c      	add	sp, #112	; 0x70
 800c0dc:	bc30      	pop	{r4, r5}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	b003      	add	sp, #12
 800c0e2:	4718      	bx	r3
 800c0e4:	0800c115 	.word	0x0800c115
 800c0e8:	200006d0 	.word	0x200006d0

0800c0ec <__sread>:
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	000c      	movs	r4, r1
 800c0f0:	250e      	movs	r5, #14
 800c0f2:	5f49      	ldrsh	r1, [r1, r5]
 800c0f4:	f000 f902 	bl	800c2fc <_read_r>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	db03      	blt.n	800c104 <__sread+0x18>
 800c0fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c0fe:	181b      	adds	r3, r3, r0
 800c100:	6523      	str	r3, [r4, #80]	; 0x50
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	4a02      	ldr	r2, [pc, #8]	; (800c110 <__sread+0x24>)
 800c108:	4013      	ands	r3, r2
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	e7f9      	b.n	800c102 <__sread+0x16>
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	ffffefff 	.word	0xffffefff

0800c114 <__seofread>:
 800c114:	2000      	movs	r0, #0
 800c116:	4770      	bx	lr

0800c118 <__swrite>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	001f      	movs	r7, r3
 800c11c:	898b      	ldrh	r3, [r1, #12]
 800c11e:	0005      	movs	r5, r0
 800c120:	000c      	movs	r4, r1
 800c122:	0016      	movs	r6, r2
 800c124:	05db      	lsls	r3, r3, #23
 800c126:	d505      	bpl.n	800c134 <__swrite+0x1c>
 800c128:	230e      	movs	r3, #14
 800c12a:	5ec9      	ldrsh	r1, [r1, r3]
 800c12c:	2200      	movs	r2, #0
 800c12e:	2302      	movs	r3, #2
 800c130:	f000 f8d0 	bl	800c2d4 <_lseek_r>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	4a05      	ldr	r2, [pc, #20]	; (800c14c <__swrite+0x34>)
 800c138:	0028      	movs	r0, r5
 800c13a:	4013      	ands	r3, r2
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	0032      	movs	r2, r6
 800c140:	230e      	movs	r3, #14
 800c142:	5ee1      	ldrsh	r1, [r4, r3]
 800c144:	003b      	movs	r3, r7
 800c146:	f000 f8ff 	bl	800c348 <_write_r>
 800c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c14c:	ffffefff 	.word	0xffffefff

0800c150 <__sseek>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	000c      	movs	r4, r1
 800c154:	250e      	movs	r5, #14
 800c156:	5f49      	ldrsh	r1, [r1, r5]
 800c158:	f000 f8bc 	bl	800c2d4 <_lseek_r>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	1c42      	adds	r2, r0, #1
 800c160:	d103      	bne.n	800c16a <__sseek+0x1a>
 800c162:	4a05      	ldr	r2, [pc, #20]	; (800c178 <__sseek+0x28>)
 800c164:	4013      	ands	r3, r2
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	bd70      	pop	{r4, r5, r6, pc}
 800c16a:	2280      	movs	r2, #128	; 0x80
 800c16c:	0152      	lsls	r2, r2, #5
 800c16e:	4313      	orrs	r3, r2
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	6520      	str	r0, [r4, #80]	; 0x50
 800c174:	e7f8      	b.n	800c168 <__sseek+0x18>
 800c176:	46c0      	nop			; (mov r8, r8)
 800c178:	ffffefff 	.word	0xffffefff

0800c17c <__sclose>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	230e      	movs	r3, #14
 800c180:	5ec9      	ldrsh	r1, [r1, r3]
 800c182:	f000 f895 	bl	800c2b0 <_close_r>
 800c186:	bd10      	pop	{r4, pc}

0800c188 <memset>:
 800c188:	0003      	movs	r3, r0
 800c18a:	1882      	adds	r2, r0, r2
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d100      	bne.n	800c192 <memset+0xa>
 800c190:	4770      	bx	lr
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	3301      	adds	r3, #1
 800c196:	e7f9      	b.n	800c18c <memset+0x4>

0800c198 <strchr>:
 800c198:	b2c9      	uxtb	r1, r1
 800c19a:	7803      	ldrb	r3, [r0, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d004      	beq.n	800c1aa <strchr+0x12>
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	d100      	bne.n	800c1a6 <strchr+0xe>
 800c1a4:	4770      	bx	lr
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	e7f7      	b.n	800c19a <strchr+0x2>
 800c1aa:	424b      	negs	r3, r1
 800c1ac:	4159      	adcs	r1, r3
 800c1ae:	4249      	negs	r1, r1
 800c1b0:	4008      	ands	r0, r1
 800c1b2:	e7f7      	b.n	800c1a4 <strchr+0xc>

0800c1b4 <strncmp>:
 800c1b4:	b530      	push	{r4, r5, lr}
 800c1b6:	0005      	movs	r5, r0
 800c1b8:	1e10      	subs	r0, r2, #0
 800c1ba:	d00b      	beq.n	800c1d4 <strncmp+0x20>
 800c1bc:	2400      	movs	r4, #0
 800c1be:	3a01      	subs	r2, #1
 800c1c0:	5d2b      	ldrb	r3, [r5, r4]
 800c1c2:	5d08      	ldrb	r0, [r1, r4]
 800c1c4:	4283      	cmp	r3, r0
 800c1c6:	d104      	bne.n	800c1d2 <strncmp+0x1e>
 800c1c8:	42a2      	cmp	r2, r4
 800c1ca:	d002      	beq.n	800c1d2 <strncmp+0x1e>
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1f6      	bne.n	800c1c0 <strncmp+0xc>
 800c1d2:	1a18      	subs	r0, r3, r0
 800c1d4:	bd30      	pop	{r4, r5, pc}

0800c1d6 <strncpy>:
 800c1d6:	0003      	movs	r3, r0
 800c1d8:	b530      	push	{r4, r5, lr}
 800c1da:	001d      	movs	r5, r3
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	d006      	beq.n	800c1ee <strncpy+0x18>
 800c1e0:	780c      	ldrb	r4, [r1, #0]
 800c1e2:	3a01      	subs	r2, #1
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	702c      	strb	r4, [r5, #0]
 800c1e8:	3101      	adds	r1, #1
 800c1ea:	2c00      	cmp	r4, #0
 800c1ec:	d1f5      	bne.n	800c1da <strncpy+0x4>
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	189a      	adds	r2, r3, r2
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d100      	bne.n	800c1f8 <strncpy+0x22>
 800c1f6:	bd30      	pop	{r4, r5, pc}
 800c1f8:	7019      	strb	r1, [r3, #0]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	e7f9      	b.n	800c1f2 <strncpy+0x1c>
	...

0800c200 <strtok>:
 800c200:	4b03      	ldr	r3, [pc, #12]	; (800c210 <strtok+0x10>)
 800c202:	b510      	push	{r4, lr}
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	2301      	movs	r3, #1
 800c208:	3250      	adds	r2, #80	; 0x50
 800c20a:	f000 f803 	bl	800c214 <__strtok_r>
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	200006d0 	.word	0x200006d0

0800c214 <__strtok_r>:
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	2800      	cmp	r0, #0
 800c218:	d102      	bne.n	800c220 <__strtok_r+0xc>
 800c21a:	6810      	ldr	r0, [r2, #0]
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d013      	beq.n	800c248 <__strtok_r+0x34>
 800c220:	0004      	movs	r4, r0
 800c222:	0020      	movs	r0, r4
 800c224:	000e      	movs	r6, r1
 800c226:	7805      	ldrb	r5, [r0, #0]
 800c228:	3401      	adds	r4, #1
 800c22a:	7837      	ldrb	r7, [r6, #0]
 800c22c:	2f00      	cmp	r7, #0
 800c22e:	d104      	bne.n	800c23a <__strtok_r+0x26>
 800c230:	2d00      	cmp	r5, #0
 800c232:	d10f      	bne.n	800c254 <__strtok_r+0x40>
 800c234:	0028      	movs	r0, r5
 800c236:	6015      	str	r5, [r2, #0]
 800c238:	e006      	b.n	800c248 <__strtok_r+0x34>
 800c23a:	3601      	adds	r6, #1
 800c23c:	42bd      	cmp	r5, r7
 800c23e:	d1f4      	bne.n	800c22a <__strtok_r+0x16>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1ee      	bne.n	800c222 <__strtok_r+0xe>
 800c244:	6014      	str	r4, [r2, #0]
 800c246:	7003      	strb	r3, [r0, #0]
 800c248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c24a:	002f      	movs	r7, r5
 800c24c:	e00f      	b.n	800c26e <__strtok_r+0x5a>
 800c24e:	3301      	adds	r3, #1
 800c250:	2e00      	cmp	r6, #0
 800c252:	d104      	bne.n	800c25e <__strtok_r+0x4a>
 800c254:	0023      	movs	r3, r4
 800c256:	3401      	adds	r4, #1
 800c258:	781d      	ldrb	r5, [r3, #0]
 800c25a:	0027      	movs	r7, r4
 800c25c:	000b      	movs	r3, r1
 800c25e:	781e      	ldrb	r6, [r3, #0]
 800c260:	42b5      	cmp	r5, r6
 800c262:	d1f4      	bne.n	800c24e <__strtok_r+0x3a>
 800c264:	2d00      	cmp	r5, #0
 800c266:	d0f0      	beq.n	800c24a <__strtok_r+0x36>
 800c268:	2300      	movs	r3, #0
 800c26a:	3c01      	subs	r4, #1
 800c26c:	7023      	strb	r3, [r4, #0]
 800c26e:	6017      	str	r7, [r2, #0]
 800c270:	e7ea      	b.n	800c248 <__strtok_r+0x34>

0800c272 <strstr>:
 800c272:	780a      	ldrb	r2, [r1, #0]
 800c274:	b530      	push	{r4, r5, lr}
 800c276:	2a00      	cmp	r2, #0
 800c278:	d10c      	bne.n	800c294 <strstr+0x22>
 800c27a:	bd30      	pop	{r4, r5, pc}
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d108      	bne.n	800c292 <strstr+0x20>
 800c280:	2301      	movs	r3, #1
 800c282:	5ccc      	ldrb	r4, [r1, r3]
 800c284:	2c00      	cmp	r4, #0
 800c286:	d0f8      	beq.n	800c27a <strstr+0x8>
 800c288:	5cc5      	ldrb	r5, [r0, r3]
 800c28a:	42a5      	cmp	r5, r4
 800c28c:	d101      	bne.n	800c292 <strstr+0x20>
 800c28e:	3301      	adds	r3, #1
 800c290:	e7f7      	b.n	800c282 <strstr+0x10>
 800c292:	3001      	adds	r0, #1
 800c294:	7803      	ldrb	r3, [r0, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1f0      	bne.n	800c27c <strstr+0xa>
 800c29a:	0018      	movs	r0, r3
 800c29c:	e7ed      	b.n	800c27a <strstr+0x8>
	...

0800c2a0 <__locale_mb_cur_max>:
 800c2a0:	2294      	movs	r2, #148	; 0x94
 800c2a2:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <__locale_mb_cur_max+0xc>)
 800c2a4:	0052      	lsls	r2, r2, #1
 800c2a6:	5c98      	ldrb	r0, [r3, r2]
 800c2a8:	4770      	bx	lr
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	20000444 	.word	0x20000444

0800c2b0 <_close_r>:
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	b570      	push	{r4, r5, r6, lr}
 800c2b4:	4d06      	ldr	r5, [pc, #24]	; (800c2d0 <_close_r+0x20>)
 800c2b6:	0004      	movs	r4, r0
 800c2b8:	0008      	movs	r0, r1
 800c2ba:	602b      	str	r3, [r5, #0]
 800c2bc:	f7f7 fe6d 	bl	8003f9a <_close>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	d103      	bne.n	800c2cc <_close_r+0x1c>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d000      	beq.n	800c2cc <_close_r+0x1c>
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	20000da8 	.word	0x20000da8

0800c2d4 <_lseek_r>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	0004      	movs	r4, r0
 800c2d8:	0008      	movs	r0, r1
 800c2da:	0011      	movs	r1, r2
 800c2dc:	001a      	movs	r2, r3
 800c2de:	2300      	movs	r3, #0
 800c2e0:	4d05      	ldr	r5, [pc, #20]	; (800c2f8 <_lseek_r+0x24>)
 800c2e2:	602b      	str	r3, [r5, #0]
 800c2e4:	f7f7 fe7a 	bl	8003fdc <_lseek>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d103      	bne.n	800c2f4 <_lseek_r+0x20>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d000      	beq.n	800c2f4 <_lseek_r+0x20>
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	bd70      	pop	{r4, r5, r6, pc}
 800c2f6:	46c0      	nop			; (mov r8, r8)
 800c2f8:	20000da8 	.word	0x20000da8

0800c2fc <_read_r>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	0004      	movs	r4, r0
 800c300:	0008      	movs	r0, r1
 800c302:	0011      	movs	r1, r2
 800c304:	001a      	movs	r2, r3
 800c306:	2300      	movs	r3, #0
 800c308:	4d05      	ldr	r5, [pc, #20]	; (800c320 <_read_r+0x24>)
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	f7f7 fe0c 	bl	8003f28 <_read>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d103      	bne.n	800c31c <_read_r+0x20>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d000      	beq.n	800c31c <_read_r+0x20>
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	20000da8 	.word	0x20000da8

0800c324 <_sbrk_r>:
 800c324:	2300      	movs	r3, #0
 800c326:	b570      	push	{r4, r5, r6, lr}
 800c328:	4d06      	ldr	r5, [pc, #24]	; (800c344 <_sbrk_r+0x20>)
 800c32a:	0004      	movs	r4, r0
 800c32c:	0008      	movs	r0, r1
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	f7f7 fe60 	bl	8003ff4 <_sbrk>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d103      	bne.n	800c340 <_sbrk_r+0x1c>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d000      	beq.n	800c340 <_sbrk_r+0x1c>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20000da8 	.word	0x20000da8

0800c348 <_write_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	0004      	movs	r4, r0
 800c34c:	0008      	movs	r0, r1
 800c34e:	0011      	movs	r1, r2
 800c350:	001a      	movs	r2, r3
 800c352:	2300      	movs	r3, #0
 800c354:	4d05      	ldr	r5, [pc, #20]	; (800c36c <_write_r+0x24>)
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f7 fe03 	bl	8003f62 <_write>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d103      	bne.n	800c368 <_write_r+0x20>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d000      	beq.n	800c368 <_write_r+0x20>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	20000da8 	.word	0x20000da8

0800c370 <__errno>:
 800c370:	4b01      	ldr	r3, [pc, #4]	; (800c378 <__errno+0x8>)
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	4770      	bx	lr
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	200006d0 	.word	0x200006d0

0800c37c <__libc_init_array>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	2600      	movs	r6, #0
 800c380:	4c0c      	ldr	r4, [pc, #48]	; (800c3b4 <__libc_init_array+0x38>)
 800c382:	4d0d      	ldr	r5, [pc, #52]	; (800c3b8 <__libc_init_array+0x3c>)
 800c384:	1b64      	subs	r4, r4, r5
 800c386:	10a4      	asrs	r4, r4, #2
 800c388:	42a6      	cmp	r6, r4
 800c38a:	d109      	bne.n	800c3a0 <__libc_init_array+0x24>
 800c38c:	2600      	movs	r6, #0
 800c38e:	f006 fc3f 	bl	8012c10 <_init>
 800c392:	4c0a      	ldr	r4, [pc, #40]	; (800c3bc <__libc_init_array+0x40>)
 800c394:	4d0a      	ldr	r5, [pc, #40]	; (800c3c0 <__libc_init_array+0x44>)
 800c396:	1b64      	subs	r4, r4, r5
 800c398:	10a4      	asrs	r4, r4, #2
 800c39a:	42a6      	cmp	r6, r4
 800c39c:	d105      	bne.n	800c3aa <__libc_init_array+0x2e>
 800c39e:	bd70      	pop	{r4, r5, r6, pc}
 800c3a0:	00b3      	lsls	r3, r6, #2
 800c3a2:	58eb      	ldr	r3, [r5, r3]
 800c3a4:	4798      	blx	r3
 800c3a6:	3601      	adds	r6, #1
 800c3a8:	e7ee      	b.n	800c388 <__libc_init_array+0xc>
 800c3aa:	00b3      	lsls	r3, r6, #2
 800c3ac:	58eb      	ldr	r3, [r5, r3]
 800c3ae:	4798      	blx	r3
 800c3b0:	3601      	adds	r6, #1
 800c3b2:	e7f2      	b.n	800c39a <__libc_init_array+0x1e>
 800c3b4:	08014ce4 	.word	0x08014ce4
 800c3b8:	08014ce4 	.word	0x08014ce4
 800c3bc:	08014cec 	.word	0x08014cec
 800c3c0:	08014ce4 	.word	0x08014ce4

0800c3c4 <__retarget_lock_init_recursive>:
 800c3c4:	4770      	bx	lr

0800c3c6 <__retarget_lock_close_recursive>:
 800c3c6:	4770      	bx	lr

0800c3c8 <__retarget_lock_acquire_recursive>:
 800c3c8:	4770      	bx	lr

0800c3ca <__retarget_lock_release_recursive>:
 800c3ca:	4770      	bx	lr

0800c3cc <sysconf>:
 800c3cc:	2380      	movs	r3, #128	; 0x80
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	2808      	cmp	r0, #8
 800c3d2:	d004      	beq.n	800c3de <sysconf+0x12>
 800c3d4:	f7ff ffcc 	bl	800c370 <__errno>
 800c3d8:	2316      	movs	r3, #22
 800c3da:	6003      	str	r3, [r0, #0]
 800c3dc:	3b17      	subs	r3, #23
 800c3de:	0018      	movs	r0, r3
 800c3e0:	bd10      	pop	{r4, pc}

0800c3e2 <memcpy>:
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d100      	bne.n	800c3ec <memcpy+0xa>
 800c3ea:	bd10      	pop	{r4, pc}
 800c3ec:	5ccc      	ldrb	r4, [r1, r3]
 800c3ee:	54c4      	strb	r4, [r0, r3]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	e7f8      	b.n	800c3e6 <memcpy+0x4>

0800c3f4 <nan>:
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	4901      	ldr	r1, [pc, #4]	; (800c3fc <nan+0x8>)
 800c3f8:	4770      	bx	lr
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	7ff80000 	.word	0x7ff80000

0800c400 <nanf>:
 800c400:	4800      	ldr	r0, [pc, #0]	; (800c404 <nanf+0x4>)
 800c402:	4770      	bx	lr
 800c404:	7fc00000 	.word	0x7fc00000

0800c408 <register_fini>:
 800c408:	4b03      	ldr	r3, [pc, #12]	; (800c418 <register_fini+0x10>)
 800c40a:	b510      	push	{r4, lr}
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <register_fini+0xe>
 800c410:	4802      	ldr	r0, [pc, #8]	; (800c41c <register_fini+0x14>)
 800c412:	f000 f805 	bl	800c420 <atexit>
 800c416:	bd10      	pop	{r4, pc}
 800c418:	00000000 	.word	0x00000000
 800c41c:	0801017d 	.word	0x0801017d

0800c420 <atexit>:
 800c420:	2300      	movs	r3, #0
 800c422:	b510      	push	{r4, lr}
 800c424:	0001      	movs	r1, r0
 800c426:	001a      	movs	r2, r3
 800c428:	0018      	movs	r0, r3
 800c42a:	f003 fef9 	bl	8010220 <__register_exitproc>
 800c42e:	bd10      	pop	{r4, pc}

0800c430 <_malloc_trim_r>:
 800c430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c432:	0004      	movs	r4, r0
 800c434:	2008      	movs	r0, #8
 800c436:	000d      	movs	r5, r1
 800c438:	f7ff ffc8 	bl	800c3cc <sysconf>
 800c43c:	0006      	movs	r6, r0
 800c43e:	0020      	movs	r0, r4
 800c440:	f7fe fda4 	bl	800af8c <__malloc_lock>
 800c444:	2203      	movs	r2, #3
 800c446:	4f21      	ldr	r7, [pc, #132]	; (800c4cc <_malloc_trim_r+0x9c>)
 800c448:	0031      	movs	r1, r6
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	4393      	bics	r3, r2
 800c450:	1b58      	subs	r0, r3, r5
 800c452:	3811      	subs	r0, #17
 800c454:	1980      	adds	r0, r0, r6
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	f7f3 fe70 	bl	800013c <__udivsi3>
 800c45c:	1e45      	subs	r5, r0, #1
 800c45e:	4375      	muls	r5, r6
 800c460:	42ae      	cmp	r6, r5
 800c462:	dd04      	ble.n	800c46e <_malloc_trim_r+0x3e>
 800c464:	0020      	movs	r0, r4
 800c466:	f7fe fd99 	bl	800af9c <__malloc_unlock>
 800c46a:	2000      	movs	r0, #0
 800c46c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c46e:	2100      	movs	r1, #0
 800c470:	0020      	movs	r0, r4
 800c472:	f7ff ff57 	bl	800c324 <_sbrk_r>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	9a01      	ldr	r2, [sp, #4]
 800c47a:	189b      	adds	r3, r3, r2
 800c47c:	4298      	cmp	r0, r3
 800c47e:	d1f1      	bne.n	800c464 <_malloc_trim_r+0x34>
 800c480:	0020      	movs	r0, r4
 800c482:	4269      	negs	r1, r5
 800c484:	f7ff ff4e 	bl	800c324 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d110      	bne.n	800c4ae <_malloc_trim_r+0x7e>
 800c48c:	2100      	movs	r1, #0
 800c48e:	0020      	movs	r0, r4
 800c490:	f7ff ff48 	bl	800c324 <_sbrk_r>
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	1a81      	subs	r1, r0, r2
 800c498:	290f      	cmp	r1, #15
 800c49a:	dde3      	ble.n	800c464 <_malloc_trim_r+0x34>
 800c49c:	4d0c      	ldr	r5, [pc, #48]	; (800c4d0 <_malloc_trim_r+0xa0>)
 800c49e:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <_malloc_trim_r+0xa4>)
 800c4a0:	682d      	ldr	r5, [r5, #0]
 800c4a2:	1b40      	subs	r0, r0, r5
 800c4a4:	6018      	str	r0, [r3, #0]
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	430b      	orrs	r3, r1
 800c4aa:	6053      	str	r3, [r2, #4]
 800c4ac:	e7da      	b.n	800c464 <_malloc_trim_r+0x34>
 800c4ae:	2601      	movs	r6, #1
 800c4b0:	9b01      	ldr	r3, [sp, #4]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	1b5b      	subs	r3, r3, r5
 800c4b6:	4333      	orrs	r3, r6
 800c4b8:	6053      	str	r3, [r2, #4]
 800c4ba:	4a06      	ldr	r2, [pc, #24]	; (800c4d4 <_malloc_trim_r+0xa4>)
 800c4bc:	0020      	movs	r0, r4
 800c4be:	6813      	ldr	r3, [r2, #0]
 800c4c0:	1b5b      	subs	r3, r3, r5
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	f7fe fd6a 	bl	800af9c <__malloc_unlock>
 800c4c8:	0030      	movs	r0, r6
 800c4ca:	e7cf      	b.n	800c46c <_malloc_trim_r+0x3c>
 800c4cc:	20000028 	.word	0x20000028
 800c4d0:	20000430 	.word	0x20000430
 800c4d4:	20000c38 	.word	0x20000c38

0800c4d8 <_free_r>:
 800c4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4da:	1e0d      	subs	r5, r1, #0
 800c4dc:	9001      	str	r0, [sp, #4]
 800c4de:	d02d      	beq.n	800c53c <_free_r+0x64>
 800c4e0:	f7fe fd54 	bl	800af8c <__malloc_lock>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	0029      	movs	r1, r5
 800c4e8:	469c      	mov	ip, r3
 800c4ea:	3908      	subs	r1, #8
 800c4ec:	684f      	ldr	r7, [r1, #4]
 800c4ee:	4662      	mov	r2, ip
 800c4f0:	003b      	movs	r3, r7
 800c4f2:	4664      	mov	r4, ip
 800c4f4:	4393      	bics	r3, r2
 800c4f6:	18c8      	adds	r0, r1, r3
 800c4f8:	6845      	ldr	r5, [r0, #4]
 800c4fa:	3202      	adds	r2, #2
 800c4fc:	4395      	bics	r5, r2
 800c4fe:	4a4a      	ldr	r2, [pc, #296]	; (800c628 <_free_r+0x150>)
 800c500:	4027      	ands	r7, r4
 800c502:	6896      	ldr	r6, [r2, #8]
 800c504:	4286      	cmp	r6, r0
 800c506:	d11a      	bne.n	800c53e <_free_r+0x66>
 800c508:	195b      	adds	r3, r3, r5
 800c50a:	2f00      	cmp	r7, #0
 800c50c:	d106      	bne.n	800c51c <_free_r+0x44>
 800c50e:	6808      	ldr	r0, [r1, #0]
 800c510:	1a09      	subs	r1, r1, r0
 800c512:	688d      	ldr	r5, [r1, #8]
 800c514:	181b      	adds	r3, r3, r0
 800c516:	68c8      	ldr	r0, [r1, #12]
 800c518:	60e8      	str	r0, [r5, #12]
 800c51a:	6085      	str	r5, [r0, #8]
 800c51c:	2001      	movs	r0, #1
 800c51e:	4318      	orrs	r0, r3
 800c520:	6048      	str	r0, [r1, #4]
 800c522:	6091      	str	r1, [r2, #8]
 800c524:	4a41      	ldr	r2, [pc, #260]	; (800c62c <_free_r+0x154>)
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d804      	bhi.n	800c536 <_free_r+0x5e>
 800c52c:	4b40      	ldr	r3, [pc, #256]	; (800c630 <_free_r+0x158>)
 800c52e:	9801      	ldr	r0, [sp, #4]
 800c530:	6819      	ldr	r1, [r3, #0]
 800c532:	f7ff ff7d 	bl	800c430 <_malloc_trim_r>
 800c536:	9801      	ldr	r0, [sp, #4]
 800c538:	f7fe fd30 	bl	800af9c <__malloc_unlock>
 800c53c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c53e:	2600      	movs	r6, #0
 800c540:	6045      	str	r5, [r0, #4]
 800c542:	42b7      	cmp	r7, r6
 800c544:	d109      	bne.n	800c55a <_free_r+0x82>
 800c546:	680f      	ldr	r7, [r1, #0]
 800c548:	4c3a      	ldr	r4, [pc, #232]	; (800c634 <_free_r+0x15c>)
 800c54a:	1bc9      	subs	r1, r1, r7
 800c54c:	19db      	adds	r3, r3, r7
 800c54e:	688f      	ldr	r7, [r1, #8]
 800c550:	42a7      	cmp	r7, r4
 800c552:	d02c      	beq.n	800c5ae <_free_r+0xd6>
 800c554:	68cc      	ldr	r4, [r1, #12]
 800c556:	60fc      	str	r4, [r7, #12]
 800c558:	60a7      	str	r7, [r4, #8]
 800c55a:	1947      	adds	r7, r0, r5
 800c55c:	687c      	ldr	r4, [r7, #4]
 800c55e:	2701      	movs	r7, #1
 800c560:	423c      	tst	r4, r7
 800c562:	d10b      	bne.n	800c57c <_free_r+0xa4>
 800c564:	195b      	adds	r3, r3, r5
 800c566:	6885      	ldr	r5, [r0, #8]
 800c568:	2e00      	cmp	r6, #0
 800c56a:	d122      	bne.n	800c5b2 <_free_r+0xda>
 800c56c:	4c31      	ldr	r4, [pc, #196]	; (800c634 <_free_r+0x15c>)
 800c56e:	42a5      	cmp	r5, r4
 800c570:	d11f      	bne.n	800c5b2 <_free_r+0xda>
 800c572:	003e      	movs	r6, r7
 800c574:	6151      	str	r1, [r2, #20]
 800c576:	6111      	str	r1, [r2, #16]
 800c578:	60cd      	str	r5, [r1, #12]
 800c57a:	608d      	str	r5, [r1, #8]
 800c57c:	2501      	movs	r5, #1
 800c57e:	0028      	movs	r0, r5
 800c580:	4318      	orrs	r0, r3
 800c582:	6048      	str	r0, [r1, #4]
 800c584:	50cb      	str	r3, [r1, r3]
 800c586:	2e00      	cmp	r6, #0
 800c588:	d1d5      	bne.n	800c536 <_free_r+0x5e>
 800c58a:	2080      	movs	r0, #128	; 0x80
 800c58c:	0080      	lsls	r0, r0, #2
 800c58e:	4283      	cmp	r3, r0
 800c590:	d213      	bcs.n	800c5ba <_free_r+0xe2>
 800c592:	08d8      	lsrs	r0, r3, #3
 800c594:	095b      	lsrs	r3, r3, #5
 800c596:	409d      	lsls	r5, r3
 800c598:	6853      	ldr	r3, [r2, #4]
 800c59a:	431d      	orrs	r5, r3
 800c59c:	00c3      	lsls	r3, r0, #3
 800c59e:	189b      	adds	r3, r3, r2
 800c5a0:	6055      	str	r5, [r2, #4]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	60cb      	str	r3, [r1, #12]
 800c5a6:	608a      	str	r2, [r1, #8]
 800c5a8:	6099      	str	r1, [r3, #8]
 800c5aa:	60d1      	str	r1, [r2, #12]
 800c5ac:	e7c3      	b.n	800c536 <_free_r+0x5e>
 800c5ae:	4666      	mov	r6, ip
 800c5b0:	e7d3      	b.n	800c55a <_free_r+0x82>
 800c5b2:	68c0      	ldr	r0, [r0, #12]
 800c5b4:	60e8      	str	r0, [r5, #12]
 800c5b6:	6085      	str	r5, [r0, #8]
 800c5b8:	e7e0      	b.n	800c57c <_free_r+0xa4>
 800c5ba:	0a5d      	lsrs	r5, r3, #9
 800c5bc:	2d04      	cmp	r5, #4
 800c5be:	d812      	bhi.n	800c5e6 <_free_r+0x10e>
 800c5c0:	0998      	lsrs	r0, r3, #6
 800c5c2:	3038      	adds	r0, #56	; 0x38
 800c5c4:	00c6      	lsls	r6, r0, #3
 800c5c6:	18b6      	adds	r6, r6, r2
 800c5c8:	68b5      	ldr	r5, [r6, #8]
 800c5ca:	2703      	movs	r7, #3
 800c5cc:	42ae      	cmp	r6, r5
 800c5ce:	d125      	bne.n	800c61c <_free_r+0x144>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	1080      	asrs	r0, r0, #2
 800c5d4:	4083      	lsls	r3, r0
 800c5d6:	6850      	ldr	r0, [r2, #4]
 800c5d8:	4303      	orrs	r3, r0
 800c5da:	6053      	str	r3, [r2, #4]
 800c5dc:	60ce      	str	r6, [r1, #12]
 800c5de:	608d      	str	r5, [r1, #8]
 800c5e0:	60b1      	str	r1, [r6, #8]
 800c5e2:	60e9      	str	r1, [r5, #12]
 800c5e4:	e7a7      	b.n	800c536 <_free_r+0x5e>
 800c5e6:	2d14      	cmp	r5, #20
 800c5e8:	d802      	bhi.n	800c5f0 <_free_r+0x118>
 800c5ea:	0028      	movs	r0, r5
 800c5ec:	305b      	adds	r0, #91	; 0x5b
 800c5ee:	e7e9      	b.n	800c5c4 <_free_r+0xec>
 800c5f0:	2d54      	cmp	r5, #84	; 0x54
 800c5f2:	d802      	bhi.n	800c5fa <_free_r+0x122>
 800c5f4:	0b18      	lsrs	r0, r3, #12
 800c5f6:	306e      	adds	r0, #110	; 0x6e
 800c5f8:	e7e4      	b.n	800c5c4 <_free_r+0xec>
 800c5fa:	20aa      	movs	r0, #170	; 0xaa
 800c5fc:	0040      	lsls	r0, r0, #1
 800c5fe:	4285      	cmp	r5, r0
 800c600:	d802      	bhi.n	800c608 <_free_r+0x130>
 800c602:	0bd8      	lsrs	r0, r3, #15
 800c604:	3077      	adds	r0, #119	; 0x77
 800c606:	e7dd      	b.n	800c5c4 <_free_r+0xec>
 800c608:	4e0b      	ldr	r6, [pc, #44]	; (800c638 <_free_r+0x160>)
 800c60a:	207e      	movs	r0, #126	; 0x7e
 800c60c:	42b5      	cmp	r5, r6
 800c60e:	d8d9      	bhi.n	800c5c4 <_free_r+0xec>
 800c610:	0c98      	lsrs	r0, r3, #18
 800c612:	307c      	adds	r0, #124	; 0x7c
 800c614:	e7d6      	b.n	800c5c4 <_free_r+0xec>
 800c616:	68ad      	ldr	r5, [r5, #8]
 800c618:	42ae      	cmp	r6, r5
 800c61a:	d003      	beq.n	800c624 <_free_r+0x14c>
 800c61c:	686a      	ldr	r2, [r5, #4]
 800c61e:	43ba      	bics	r2, r7
 800c620:	429a      	cmp	r2, r3
 800c622:	d8f8      	bhi.n	800c616 <_free_r+0x13e>
 800c624:	68ee      	ldr	r6, [r5, #12]
 800c626:	e7d9      	b.n	800c5dc <_free_r+0x104>
 800c628:	20000028 	.word	0x20000028
 800c62c:	20000434 	.word	0x20000434
 800c630:	20000c68 	.word	0x20000c68
 800c634:	20000030 	.word	0x20000030
 800c638:	00000554 	.word	0x00000554

0800c63c <rshift>:
 800c63c:	0002      	movs	r2, r0
 800c63e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c640:	6904      	ldr	r4, [r0, #16]
 800c642:	114b      	asrs	r3, r1, #5
 800c644:	b085      	sub	sp, #20
 800c646:	3214      	adds	r2, #20
 800c648:	9302      	str	r3, [sp, #8]
 800c64a:	114d      	asrs	r5, r1, #5
 800c64c:	0013      	movs	r3, r2
 800c64e:	42ac      	cmp	r4, r5
 800c650:	dd32      	ble.n	800c6b8 <rshift+0x7c>
 800c652:	261f      	movs	r6, #31
 800c654:	000f      	movs	r7, r1
 800c656:	114b      	asrs	r3, r1, #5
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	00a5      	lsls	r5, r4, #2
 800c65c:	18d3      	adds	r3, r2, r3
 800c65e:	4037      	ands	r7, r6
 800c660:	1955      	adds	r5, r2, r5
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	9701      	str	r7, [sp, #4]
 800c666:	4231      	tst	r1, r6
 800c668:	d10d      	bne.n	800c686 <rshift+0x4a>
 800c66a:	0016      	movs	r6, r2
 800c66c:	0019      	movs	r1, r3
 800c66e:	428d      	cmp	r5, r1
 800c670:	d836      	bhi.n	800c6e0 <rshift+0xa4>
 800c672:	9900      	ldr	r1, [sp, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	3903      	subs	r1, #3
 800c678:	428d      	cmp	r5, r1
 800c67a:	d302      	bcc.n	800c682 <rshift+0x46>
 800c67c:	9b02      	ldr	r3, [sp, #8]
 800c67e:	1ae4      	subs	r4, r4, r3
 800c680:	00a3      	lsls	r3, r4, #2
 800c682:	18d3      	adds	r3, r2, r3
 800c684:	e018      	b.n	800c6b8 <rshift+0x7c>
 800c686:	2120      	movs	r1, #32
 800c688:	9e01      	ldr	r6, [sp, #4]
 800c68a:	9f01      	ldr	r7, [sp, #4]
 800c68c:	1b89      	subs	r1, r1, r6
 800c68e:	9e00      	ldr	r6, [sp, #0]
 800c690:	9103      	str	r1, [sp, #12]
 800c692:	ce02      	ldmia	r6!, {r1}
 800c694:	4694      	mov	ip, r2
 800c696:	40f9      	lsrs	r1, r7
 800c698:	42b5      	cmp	r5, r6
 800c69a:	d816      	bhi.n	800c6ca <rshift+0x8e>
 800c69c:	9e00      	ldr	r6, [sp, #0]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	3601      	adds	r6, #1
 800c6a2:	42b5      	cmp	r5, r6
 800c6a4:	d303      	bcc.n	800c6ae <rshift+0x72>
 800c6a6:	9b02      	ldr	r3, [sp, #8]
 800c6a8:	1ae3      	subs	r3, r4, r3
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	3b04      	subs	r3, #4
 800c6ae:	18d3      	adds	r3, r2, r3
 800c6b0:	6019      	str	r1, [r3, #0]
 800c6b2:	2900      	cmp	r1, #0
 800c6b4:	d000      	beq.n	800c6b8 <rshift+0x7c>
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	1a99      	subs	r1, r3, r2
 800c6ba:	1089      	asrs	r1, r1, #2
 800c6bc:	6101      	str	r1, [r0, #16]
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d101      	bne.n	800c6c6 <rshift+0x8a>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6143      	str	r3, [r0, #20]
 800c6c6:	b005      	add	sp, #20
 800c6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ca:	6837      	ldr	r7, [r6, #0]
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	409f      	lsls	r7, r3
 800c6d0:	430f      	orrs	r7, r1
 800c6d2:	4661      	mov	r1, ip
 800c6d4:	c180      	stmia	r1!, {r7}
 800c6d6:	468c      	mov	ip, r1
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	ce02      	ldmia	r6!, {r1}
 800c6dc:	40d9      	lsrs	r1, r3
 800c6de:	e7db      	b.n	800c698 <rshift+0x5c>
 800c6e0:	c980      	ldmia	r1!, {r7}
 800c6e2:	c680      	stmia	r6!, {r7}
 800c6e4:	e7c3      	b.n	800c66e <rshift+0x32>

0800c6e6 <__hexdig_fun>:
 800c6e6:	0002      	movs	r2, r0
 800c6e8:	3a30      	subs	r2, #48	; 0x30
 800c6ea:	0003      	movs	r3, r0
 800c6ec:	2a09      	cmp	r2, #9
 800c6ee:	d802      	bhi.n	800c6f6 <__hexdig_fun+0x10>
 800c6f0:	3b20      	subs	r3, #32
 800c6f2:	b2d8      	uxtb	r0, r3
 800c6f4:	4770      	bx	lr
 800c6f6:	0002      	movs	r2, r0
 800c6f8:	3a61      	subs	r2, #97	; 0x61
 800c6fa:	2a05      	cmp	r2, #5
 800c6fc:	d801      	bhi.n	800c702 <__hexdig_fun+0x1c>
 800c6fe:	3b47      	subs	r3, #71	; 0x47
 800c700:	e7f7      	b.n	800c6f2 <__hexdig_fun+0xc>
 800c702:	001a      	movs	r2, r3
 800c704:	3a41      	subs	r2, #65	; 0x41
 800c706:	2000      	movs	r0, #0
 800c708:	2a05      	cmp	r2, #5
 800c70a:	d8f3      	bhi.n	800c6f4 <__hexdig_fun+0xe>
 800c70c:	3b27      	subs	r3, #39	; 0x27
 800c70e:	e7f0      	b.n	800c6f2 <__hexdig_fun+0xc>

0800c710 <__gethex>:
 800c710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c712:	b089      	sub	sp, #36	; 0x24
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	2302      	movs	r3, #2
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	680a      	ldr	r2, [r1, #0]
 800c71c:	425b      	negs	r3, r3
 800c71e:	9003      	str	r0, [sp, #12]
 800c720:	9106      	str	r1, [sp, #24]
 800c722:	1c96      	adds	r6, r2, #2
 800c724:	1a9b      	subs	r3, r3, r2
 800c726:	199a      	adds	r2, r3, r6
 800c728:	9600      	str	r6, [sp, #0]
 800c72a:	9205      	str	r2, [sp, #20]
 800c72c:	9a00      	ldr	r2, [sp, #0]
 800c72e:	3601      	adds	r6, #1
 800c730:	7810      	ldrb	r0, [r2, #0]
 800c732:	2830      	cmp	r0, #48	; 0x30
 800c734:	d0f7      	beq.n	800c726 <__gethex+0x16>
 800c736:	f7ff ffd6 	bl	800c6e6 <__hexdig_fun>
 800c73a:	2300      	movs	r3, #0
 800c73c:	001d      	movs	r5, r3
 800c73e:	9302      	str	r3, [sp, #8]
 800c740:	4298      	cmp	r0, r3
 800c742:	d11d      	bne.n	800c780 <__gethex+0x70>
 800c744:	2201      	movs	r2, #1
 800c746:	49a6      	ldr	r1, [pc, #664]	; (800c9e0 <__gethex+0x2d0>)
 800c748:	9800      	ldr	r0, [sp, #0]
 800c74a:	f7ff fd33 	bl	800c1b4 <strncmp>
 800c74e:	0007      	movs	r7, r0
 800c750:	42a8      	cmp	r0, r5
 800c752:	d169      	bne.n	800c828 <__gethex+0x118>
 800c754:	9b00      	ldr	r3, [sp, #0]
 800c756:	0034      	movs	r4, r6
 800c758:	7858      	ldrb	r0, [r3, #1]
 800c75a:	f7ff ffc4 	bl	800c6e6 <__hexdig_fun>
 800c75e:	2301      	movs	r3, #1
 800c760:	9302      	str	r3, [sp, #8]
 800c762:	42a8      	cmp	r0, r5
 800c764:	d02f      	beq.n	800c7c6 <__gethex+0xb6>
 800c766:	9600      	str	r6, [sp, #0]
 800c768:	9b00      	ldr	r3, [sp, #0]
 800c76a:	7818      	ldrb	r0, [r3, #0]
 800c76c:	2830      	cmp	r0, #48	; 0x30
 800c76e:	d009      	beq.n	800c784 <__gethex+0x74>
 800c770:	f7ff ffb9 	bl	800c6e6 <__hexdig_fun>
 800c774:	4242      	negs	r2, r0
 800c776:	4142      	adcs	r2, r0
 800c778:	2301      	movs	r3, #1
 800c77a:	0035      	movs	r5, r6
 800c77c:	9202      	str	r2, [sp, #8]
 800c77e:	9305      	str	r3, [sp, #20]
 800c780:	9c00      	ldr	r4, [sp, #0]
 800c782:	e004      	b.n	800c78e <__gethex+0x7e>
 800c784:	9b00      	ldr	r3, [sp, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	e7ed      	b.n	800c768 <__gethex+0x58>
 800c78c:	3401      	adds	r4, #1
 800c78e:	7820      	ldrb	r0, [r4, #0]
 800c790:	f7ff ffa9 	bl	800c6e6 <__hexdig_fun>
 800c794:	1e07      	subs	r7, r0, #0
 800c796:	d1f9      	bne.n	800c78c <__gethex+0x7c>
 800c798:	2201      	movs	r2, #1
 800c79a:	0020      	movs	r0, r4
 800c79c:	4990      	ldr	r1, [pc, #576]	; (800c9e0 <__gethex+0x2d0>)
 800c79e:	f7ff fd09 	bl	800c1b4 <strncmp>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d10d      	bne.n	800c7c2 <__gethex+0xb2>
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	d106      	bne.n	800c7b8 <__gethex+0xa8>
 800c7aa:	3401      	adds	r4, #1
 800c7ac:	0025      	movs	r5, r4
 800c7ae:	7820      	ldrb	r0, [r4, #0]
 800c7b0:	f7ff ff99 	bl	800c6e6 <__hexdig_fun>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d102      	bne.n	800c7be <__gethex+0xae>
 800c7b8:	1b2d      	subs	r5, r5, r4
 800c7ba:	00af      	lsls	r7, r5, #2
 800c7bc:	e003      	b.n	800c7c6 <__gethex+0xb6>
 800c7be:	3401      	adds	r4, #1
 800c7c0:	e7f5      	b.n	800c7ae <__gethex+0x9e>
 800c7c2:	2d00      	cmp	r5, #0
 800c7c4:	d1f8      	bne.n	800c7b8 <__gethex+0xa8>
 800c7c6:	2220      	movs	r2, #32
 800c7c8:	7823      	ldrb	r3, [r4, #0]
 800c7ca:	0026      	movs	r6, r4
 800c7cc:	4393      	bics	r3, r2
 800c7ce:	2b50      	cmp	r3, #80	; 0x50
 800c7d0:	d11d      	bne.n	800c80e <__gethex+0xfe>
 800c7d2:	7863      	ldrb	r3, [r4, #1]
 800c7d4:	2b2b      	cmp	r3, #43	; 0x2b
 800c7d6:	d02c      	beq.n	800c832 <__gethex+0x122>
 800c7d8:	2b2d      	cmp	r3, #45	; 0x2d
 800c7da:	d02e      	beq.n	800c83a <__gethex+0x12a>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	1c66      	adds	r6, r4, #1
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	7830      	ldrb	r0, [r6, #0]
 800c7e4:	f7ff ff7f 	bl	800c6e6 <__hexdig_fun>
 800c7e8:	1e43      	subs	r3, r0, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b18      	cmp	r3, #24
 800c7ee:	d82b      	bhi.n	800c848 <__gethex+0x138>
 800c7f0:	3810      	subs	r0, #16
 800c7f2:	0005      	movs	r5, r0
 800c7f4:	7870      	ldrb	r0, [r6, #1]
 800c7f6:	f7ff ff76 	bl	800c6e6 <__hexdig_fun>
 800c7fa:	1e43      	subs	r3, r0, #1
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	3601      	adds	r6, #1
 800c800:	2b18      	cmp	r3, #24
 800c802:	d91c      	bls.n	800c83e <__gethex+0x12e>
 800c804:	9b04      	ldr	r3, [sp, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d000      	beq.n	800c80c <__gethex+0xfc>
 800c80a:	426d      	negs	r5, r5
 800c80c:	197f      	adds	r7, r7, r5
 800c80e:	9b06      	ldr	r3, [sp, #24]
 800c810:	601e      	str	r6, [r3, #0]
 800c812:	9b02      	ldr	r3, [sp, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d019      	beq.n	800c84c <__gethex+0x13c>
 800c818:	2600      	movs	r6, #0
 800c81a:	9b05      	ldr	r3, [sp, #20]
 800c81c:	42b3      	cmp	r3, r6
 800c81e:	d100      	bne.n	800c822 <__gethex+0x112>
 800c820:	3606      	adds	r6, #6
 800c822:	0030      	movs	r0, r6
 800c824:	b009      	add	sp, #36	; 0x24
 800c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c828:	2301      	movs	r3, #1
 800c82a:	2700      	movs	r7, #0
 800c82c:	9c00      	ldr	r4, [sp, #0]
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	e7c9      	b.n	800c7c6 <__gethex+0xb6>
 800c832:	2300      	movs	r3, #0
 800c834:	9304      	str	r3, [sp, #16]
 800c836:	1ca6      	adds	r6, r4, #2
 800c838:	e7d3      	b.n	800c7e2 <__gethex+0xd2>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e7fa      	b.n	800c834 <__gethex+0x124>
 800c83e:	230a      	movs	r3, #10
 800c840:	435d      	muls	r5, r3
 800c842:	182d      	adds	r5, r5, r0
 800c844:	3d10      	subs	r5, #16
 800c846:	e7d5      	b.n	800c7f4 <__gethex+0xe4>
 800c848:	0026      	movs	r6, r4
 800c84a:	e7e0      	b.n	800c80e <__gethex+0xfe>
 800c84c:	9b00      	ldr	r3, [sp, #0]
 800c84e:	9902      	ldr	r1, [sp, #8]
 800c850:	1ae3      	subs	r3, r4, r3
 800c852:	3b01      	subs	r3, #1
 800c854:	2b07      	cmp	r3, #7
 800c856:	dc0a      	bgt.n	800c86e <__gethex+0x15e>
 800c858:	9803      	ldr	r0, [sp, #12]
 800c85a:	f000 fa5d 	bl	800cd18 <_Balloc>
 800c85e:	1e05      	subs	r5, r0, #0
 800c860:	d108      	bne.n	800c874 <__gethex+0x164>
 800c862:	002a      	movs	r2, r5
 800c864:	21e4      	movs	r1, #228	; 0xe4
 800c866:	4b5f      	ldr	r3, [pc, #380]	; (800c9e4 <__gethex+0x2d4>)
 800c868:	485f      	ldr	r0, [pc, #380]	; (800c9e8 <__gethex+0x2d8>)
 800c86a:	f003 fd19 	bl	80102a0 <__assert_func>
 800c86e:	3101      	adds	r1, #1
 800c870:	105b      	asrs	r3, r3, #1
 800c872:	e7ef      	b.n	800c854 <__gethex+0x144>
 800c874:	0003      	movs	r3, r0
 800c876:	3314      	adds	r3, #20
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	2300      	movs	r3, #0
 800c87e:	001e      	movs	r6, r3
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	9b00      	ldr	r3, [sp, #0]
 800c884:	42a3      	cmp	r3, r4
 800c886:	d33f      	bcc.n	800c908 <__gethex+0x1f8>
 800c888:	9c05      	ldr	r4, [sp, #20]
 800c88a:	9b02      	ldr	r3, [sp, #8]
 800c88c:	c440      	stmia	r4!, {r6}
 800c88e:	1ae4      	subs	r4, r4, r3
 800c890:	10a4      	asrs	r4, r4, #2
 800c892:	0030      	movs	r0, r6
 800c894:	612c      	str	r4, [r5, #16]
 800c896:	f000 fb01 	bl	800ce9c <__hi0bits>
 800c89a:	9b01      	ldr	r3, [sp, #4]
 800c89c:	0164      	lsls	r4, r4, #5
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	1a26      	subs	r6, r4, r0
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	429e      	cmp	r6, r3
 800c8a6:	dd51      	ble.n	800c94c <__gethex+0x23c>
 800c8a8:	1af6      	subs	r6, r6, r3
 800c8aa:	0031      	movs	r1, r6
 800c8ac:	0028      	movs	r0, r5
 800c8ae:	f000 fe7b 	bl	800d5a8 <__any_on>
 800c8b2:	1e04      	subs	r4, r0, #0
 800c8b4:	d016      	beq.n	800c8e4 <__gethex+0x1d4>
 800c8b6:	2401      	movs	r4, #1
 800c8b8:	231f      	movs	r3, #31
 800c8ba:	0020      	movs	r0, r4
 800c8bc:	1e72      	subs	r2, r6, #1
 800c8be:	4013      	ands	r3, r2
 800c8c0:	4098      	lsls	r0, r3
 800c8c2:	0003      	movs	r3, r0
 800c8c4:	1151      	asrs	r1, r2, #5
 800c8c6:	9802      	ldr	r0, [sp, #8]
 800c8c8:	0089      	lsls	r1, r1, #2
 800c8ca:	5809      	ldr	r1, [r1, r0]
 800c8cc:	4219      	tst	r1, r3
 800c8ce:	d009      	beq.n	800c8e4 <__gethex+0x1d4>
 800c8d0:	42a2      	cmp	r2, r4
 800c8d2:	dd06      	ble.n	800c8e2 <__gethex+0x1d2>
 800c8d4:	0028      	movs	r0, r5
 800c8d6:	1eb1      	subs	r1, r6, #2
 800c8d8:	f000 fe66 	bl	800d5a8 <__any_on>
 800c8dc:	3402      	adds	r4, #2
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d100      	bne.n	800c8e4 <__gethex+0x1d4>
 800c8e2:	2402      	movs	r4, #2
 800c8e4:	0031      	movs	r1, r6
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	f7ff fea8 	bl	800c63c <rshift>
 800c8ec:	19bf      	adds	r7, r7, r6
 800c8ee:	9b01      	ldr	r3, [sp, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	42bb      	cmp	r3, r7
 800c8f4:	da3a      	bge.n	800c96c <__gethex+0x25c>
 800c8f6:	0029      	movs	r1, r5
 800c8f8:	9803      	ldr	r0, [sp, #12]
 800c8fa:	f000 fa35 	bl	800cd68 <_Bfree>
 800c8fe:	2300      	movs	r3, #0
 800c900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c902:	26a3      	movs	r6, #163	; 0xa3
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	e78c      	b.n	800c822 <__gethex+0x112>
 800c908:	3c01      	subs	r4, #1
 800c90a:	7823      	ldrb	r3, [r4, #0]
 800c90c:	2b2e      	cmp	r3, #46	; 0x2e
 800c90e:	d012      	beq.n	800c936 <__gethex+0x226>
 800c910:	9b04      	ldr	r3, [sp, #16]
 800c912:	2b20      	cmp	r3, #32
 800c914:	d104      	bne.n	800c920 <__gethex+0x210>
 800c916:	9b05      	ldr	r3, [sp, #20]
 800c918:	c340      	stmia	r3!, {r6}
 800c91a:	2600      	movs	r6, #0
 800c91c:	9305      	str	r3, [sp, #20]
 800c91e:	9604      	str	r6, [sp, #16]
 800c920:	7820      	ldrb	r0, [r4, #0]
 800c922:	f7ff fee0 	bl	800c6e6 <__hexdig_fun>
 800c926:	230f      	movs	r3, #15
 800c928:	4018      	ands	r0, r3
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	4098      	lsls	r0, r3
 800c92e:	3304      	adds	r3, #4
 800c930:	4306      	orrs	r6, r0
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	e7a5      	b.n	800c882 <__gethex+0x172>
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d8e9      	bhi.n	800c910 <__gethex+0x200>
 800c93c:	2201      	movs	r2, #1
 800c93e:	0020      	movs	r0, r4
 800c940:	4927      	ldr	r1, [pc, #156]	; (800c9e0 <__gethex+0x2d0>)
 800c942:	f7ff fc37 	bl	800c1b4 <strncmp>
 800c946:	2800      	cmp	r0, #0
 800c948:	d1e2      	bne.n	800c910 <__gethex+0x200>
 800c94a:	e79a      	b.n	800c882 <__gethex+0x172>
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	2400      	movs	r4, #0
 800c950:	429e      	cmp	r6, r3
 800c952:	dacc      	bge.n	800c8ee <__gethex+0x1de>
 800c954:	1b9e      	subs	r6, r3, r6
 800c956:	0029      	movs	r1, r5
 800c958:	0032      	movs	r2, r6
 800c95a:	9803      	ldr	r0, [sp, #12]
 800c95c:	f000 fbf0 	bl	800d140 <__lshift>
 800c960:	0003      	movs	r3, r0
 800c962:	3314      	adds	r3, #20
 800c964:	0005      	movs	r5, r0
 800c966:	1bbf      	subs	r7, r7, r6
 800c968:	9302      	str	r3, [sp, #8]
 800c96a:	e7c0      	b.n	800c8ee <__gethex+0x1de>
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	685e      	ldr	r6, [r3, #4]
 800c970:	42be      	cmp	r6, r7
 800c972:	dd70      	ble.n	800ca56 <__gethex+0x346>
 800c974:	9b00      	ldr	r3, [sp, #0]
 800c976:	1bf6      	subs	r6, r6, r7
 800c978:	42b3      	cmp	r3, r6
 800c97a:	dc37      	bgt.n	800c9ec <__gethex+0x2dc>
 800c97c:	9b01      	ldr	r3, [sp, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	2b02      	cmp	r3, #2
 800c982:	d024      	beq.n	800c9ce <__gethex+0x2be>
 800c984:	2b03      	cmp	r3, #3
 800c986:	d026      	beq.n	800c9d6 <__gethex+0x2c6>
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d117      	bne.n	800c9bc <__gethex+0x2ac>
 800c98c:	9b00      	ldr	r3, [sp, #0]
 800c98e:	42b3      	cmp	r3, r6
 800c990:	d114      	bne.n	800c9bc <__gethex+0x2ac>
 800c992:	2b01      	cmp	r3, #1
 800c994:	d10b      	bne.n	800c9ae <__gethex+0x29e>
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	9a07      	ldr	r2, [sp, #28]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2662      	movs	r6, #98	; 0x62
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	9a02      	ldr	r2, [sp, #8]
 800c9a4:	612b      	str	r3, [r5, #16]
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9aa:	601d      	str	r5, [r3, #0]
 800c9ac:	e739      	b.n	800c822 <__gethex+0x112>
 800c9ae:	9900      	ldr	r1, [sp, #0]
 800c9b0:	0028      	movs	r0, r5
 800c9b2:	3901      	subs	r1, #1
 800c9b4:	f000 fdf8 	bl	800d5a8 <__any_on>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d1ec      	bne.n	800c996 <__gethex+0x286>
 800c9bc:	0029      	movs	r1, r5
 800c9be:	9803      	ldr	r0, [sp, #12]
 800c9c0:	f000 f9d2 	bl	800cd68 <_Bfree>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9c8:	2650      	movs	r6, #80	; 0x50
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	e729      	b.n	800c822 <__gethex+0x112>
 800c9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1f3      	bne.n	800c9bc <__gethex+0x2ac>
 800c9d4:	e7df      	b.n	800c996 <__gethex+0x286>
 800c9d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1dc      	bne.n	800c996 <__gethex+0x286>
 800c9dc:	e7ee      	b.n	800c9bc <__gethex+0x2ac>
 800c9de:	46c0      	nop			; (mov r8, r8)
 800c9e0:	08014870 	.word	0x08014870
 800c9e4:	080149d1 	.word	0x080149d1
 800c9e8:	080149e2 	.word	0x080149e2
 800c9ec:	1e77      	subs	r7, r6, #1
 800c9ee:	2c00      	cmp	r4, #0
 800c9f0:	d12f      	bne.n	800ca52 <__gethex+0x342>
 800c9f2:	2f00      	cmp	r7, #0
 800c9f4:	d004      	beq.n	800ca00 <__gethex+0x2f0>
 800c9f6:	0039      	movs	r1, r7
 800c9f8:	0028      	movs	r0, r5
 800c9fa:	f000 fdd5 	bl	800d5a8 <__any_on>
 800c9fe:	0004      	movs	r4, r0
 800ca00:	231f      	movs	r3, #31
 800ca02:	117a      	asrs	r2, r7, #5
 800ca04:	401f      	ands	r7, r3
 800ca06:	3b1e      	subs	r3, #30
 800ca08:	40bb      	lsls	r3, r7
 800ca0a:	9902      	ldr	r1, [sp, #8]
 800ca0c:	0092      	lsls	r2, r2, #2
 800ca0e:	5852      	ldr	r2, [r2, r1]
 800ca10:	421a      	tst	r2, r3
 800ca12:	d001      	beq.n	800ca18 <__gethex+0x308>
 800ca14:	2302      	movs	r3, #2
 800ca16:	431c      	orrs	r4, r3
 800ca18:	9b00      	ldr	r3, [sp, #0]
 800ca1a:	0031      	movs	r1, r6
 800ca1c:	1b9b      	subs	r3, r3, r6
 800ca1e:	2602      	movs	r6, #2
 800ca20:	0028      	movs	r0, r5
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	f7ff fe0a 	bl	800c63c <rshift>
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	685f      	ldr	r7, [r3, #4]
 800ca2c:	2c00      	cmp	r4, #0
 800ca2e:	d041      	beq.n	800cab4 <__gethex+0x3a4>
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d010      	beq.n	800ca5a <__gethex+0x34a>
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d012      	beq.n	800ca62 <__gethex+0x352>
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d106      	bne.n	800ca4e <__gethex+0x33e>
 800ca40:	07a2      	lsls	r2, r4, #30
 800ca42:	d504      	bpl.n	800ca4e <__gethex+0x33e>
 800ca44:	9a02      	ldr	r2, [sp, #8]
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	4314      	orrs	r4, r2
 800ca4a:	421c      	tst	r4, r3
 800ca4c:	d10c      	bne.n	800ca68 <__gethex+0x358>
 800ca4e:	2310      	movs	r3, #16
 800ca50:	e02f      	b.n	800cab2 <__gethex+0x3a2>
 800ca52:	2401      	movs	r4, #1
 800ca54:	e7d4      	b.n	800ca00 <__gethex+0x2f0>
 800ca56:	2601      	movs	r6, #1
 800ca58:	e7e8      	b.n	800ca2c <__gethex+0x31c>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d0f2      	beq.n	800ca4e <__gethex+0x33e>
 800ca68:	692b      	ldr	r3, [r5, #16]
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	9302      	str	r3, [sp, #8]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	002b      	movs	r3, r5
 800ca74:	9a04      	ldr	r2, [sp, #16]
 800ca76:	3314      	adds	r3, #20
 800ca78:	1899      	adds	r1, r3, r2
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	1c54      	adds	r4, r2, #1
 800ca7e:	d01e      	beq.n	800cabe <__gethex+0x3ae>
 800ca80:	3201      	adds	r2, #1
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	002b      	movs	r3, r5
 800ca86:	3314      	adds	r3, #20
 800ca88:	2e02      	cmp	r6, #2
 800ca8a:	d141      	bne.n	800cb10 <__gethex+0x400>
 800ca8c:	9a01      	ldr	r2, [sp, #4]
 800ca8e:	9900      	ldr	r1, [sp, #0]
 800ca90:	6812      	ldr	r2, [r2, #0]
 800ca92:	3a01      	subs	r2, #1
 800ca94:	428a      	cmp	r2, r1
 800ca96:	d10b      	bne.n	800cab0 <__gethex+0x3a0>
 800ca98:	221f      	movs	r2, #31
 800ca9a:	9800      	ldr	r0, [sp, #0]
 800ca9c:	1149      	asrs	r1, r1, #5
 800ca9e:	4002      	ands	r2, r0
 800caa0:	2001      	movs	r0, #1
 800caa2:	0004      	movs	r4, r0
 800caa4:	4094      	lsls	r4, r2
 800caa6:	0089      	lsls	r1, r1, #2
 800caa8:	58cb      	ldr	r3, [r1, r3]
 800caaa:	4223      	tst	r3, r4
 800caac:	d000      	beq.n	800cab0 <__gethex+0x3a0>
 800caae:	2601      	movs	r6, #1
 800cab0:	2320      	movs	r3, #32
 800cab2:	431e      	orrs	r6, r3
 800cab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cab6:	601d      	str	r5, [r3, #0]
 800cab8:	9b07      	ldr	r3, [sp, #28]
 800caba:	601f      	str	r7, [r3, #0]
 800cabc:	e6b1      	b.n	800c822 <__gethex+0x112>
 800cabe:	c301      	stmia	r3!, {r0}
 800cac0:	4299      	cmp	r1, r3
 800cac2:	d8da      	bhi.n	800ca7a <__gethex+0x36a>
 800cac4:	68ab      	ldr	r3, [r5, #8]
 800cac6:	9a02      	ldr	r2, [sp, #8]
 800cac8:	429a      	cmp	r2, r3
 800caca:	db18      	blt.n	800cafe <__gethex+0x3ee>
 800cacc:	6869      	ldr	r1, [r5, #4]
 800cace:	9803      	ldr	r0, [sp, #12]
 800cad0:	3101      	adds	r1, #1
 800cad2:	f000 f921 	bl	800cd18 <_Balloc>
 800cad6:	1e04      	subs	r4, r0, #0
 800cad8:	d104      	bne.n	800cae4 <__gethex+0x3d4>
 800cada:	0022      	movs	r2, r4
 800cadc:	2184      	movs	r1, #132	; 0x84
 800cade:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <__gethex+0x440>)
 800cae0:	481c      	ldr	r0, [pc, #112]	; (800cb54 <__gethex+0x444>)
 800cae2:	e6c2      	b.n	800c86a <__gethex+0x15a>
 800cae4:	0029      	movs	r1, r5
 800cae6:	692a      	ldr	r2, [r5, #16]
 800cae8:	310c      	adds	r1, #12
 800caea:	3202      	adds	r2, #2
 800caec:	0092      	lsls	r2, r2, #2
 800caee:	300c      	adds	r0, #12
 800caf0:	f7ff fc77 	bl	800c3e2 <memcpy>
 800caf4:	0029      	movs	r1, r5
 800caf6:	9803      	ldr	r0, [sp, #12]
 800caf8:	f000 f936 	bl	800cd68 <_Bfree>
 800cafc:	0025      	movs	r5, r4
 800cafe:	692b      	ldr	r3, [r5, #16]
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	612a      	str	r2, [r5, #16]
 800cb04:	2201      	movs	r2, #1
 800cb06:	3304      	adds	r3, #4
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	18eb      	adds	r3, r5, r3
 800cb0c:	605a      	str	r2, [r3, #4]
 800cb0e:	e7b9      	b.n	800ca84 <__gethex+0x374>
 800cb10:	692a      	ldr	r2, [r5, #16]
 800cb12:	9902      	ldr	r1, [sp, #8]
 800cb14:	428a      	cmp	r2, r1
 800cb16:	dd09      	ble.n	800cb2c <__gethex+0x41c>
 800cb18:	2101      	movs	r1, #1
 800cb1a:	0028      	movs	r0, r5
 800cb1c:	f7ff fd8e 	bl	800c63c <rshift>
 800cb20:	9b01      	ldr	r3, [sp, #4]
 800cb22:	3701      	adds	r7, #1
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	42bb      	cmp	r3, r7
 800cb28:	dac1      	bge.n	800caae <__gethex+0x39e>
 800cb2a:	e6e4      	b.n	800c8f6 <__gethex+0x1e6>
 800cb2c:	221f      	movs	r2, #31
 800cb2e:	9c00      	ldr	r4, [sp, #0]
 800cb30:	9900      	ldr	r1, [sp, #0]
 800cb32:	2601      	movs	r6, #1
 800cb34:	4014      	ands	r4, r2
 800cb36:	4211      	tst	r1, r2
 800cb38:	d0ba      	beq.n	800cab0 <__gethex+0x3a0>
 800cb3a:	9a04      	ldr	r2, [sp, #16]
 800cb3c:	189b      	adds	r3, r3, r2
 800cb3e:	3b04      	subs	r3, #4
 800cb40:	6818      	ldr	r0, [r3, #0]
 800cb42:	f000 f9ab 	bl	800ce9c <__hi0bits>
 800cb46:	2320      	movs	r3, #32
 800cb48:	1b1b      	subs	r3, r3, r4
 800cb4a:	4298      	cmp	r0, r3
 800cb4c:	dbe4      	blt.n	800cb18 <__gethex+0x408>
 800cb4e:	e7af      	b.n	800cab0 <__gethex+0x3a0>
 800cb50:	080149d1 	.word	0x080149d1
 800cb54:	080149e2 	.word	0x080149e2

0800cb58 <L_shift>:
 800cb58:	2308      	movs	r3, #8
 800cb5a:	b570      	push	{r4, r5, r6, lr}
 800cb5c:	2520      	movs	r5, #32
 800cb5e:	1a9a      	subs	r2, r3, r2
 800cb60:	0092      	lsls	r2, r2, #2
 800cb62:	1aad      	subs	r5, r5, r2
 800cb64:	6843      	ldr	r3, [r0, #4]
 800cb66:	6804      	ldr	r4, [r0, #0]
 800cb68:	001e      	movs	r6, r3
 800cb6a:	40ae      	lsls	r6, r5
 800cb6c:	40d3      	lsrs	r3, r2
 800cb6e:	4334      	orrs	r4, r6
 800cb70:	6004      	str	r4, [r0, #0]
 800cb72:	6043      	str	r3, [r0, #4]
 800cb74:	3004      	adds	r0, #4
 800cb76:	4288      	cmp	r0, r1
 800cb78:	d3f4      	bcc.n	800cb64 <L_shift+0xc>
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}

0800cb7c <__match>:
 800cb7c:	b530      	push	{r4, r5, lr}
 800cb7e:	6803      	ldr	r3, [r0, #0]
 800cb80:	780c      	ldrb	r4, [r1, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	2c00      	cmp	r4, #0
 800cb86:	d102      	bne.n	800cb8e <__match+0x12>
 800cb88:	6003      	str	r3, [r0, #0]
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	bd30      	pop	{r4, r5, pc}
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	0015      	movs	r5, r2
 800cb92:	3d41      	subs	r5, #65	; 0x41
 800cb94:	2d19      	cmp	r5, #25
 800cb96:	d800      	bhi.n	800cb9a <__match+0x1e>
 800cb98:	3220      	adds	r2, #32
 800cb9a:	3101      	adds	r1, #1
 800cb9c:	42a2      	cmp	r2, r4
 800cb9e:	d0ef      	beq.n	800cb80 <__match+0x4>
 800cba0:	2000      	movs	r0, #0
 800cba2:	e7f3      	b.n	800cb8c <__match+0x10>

0800cba4 <__hexnan>:
 800cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba6:	680b      	ldr	r3, [r1, #0]
 800cba8:	b08b      	sub	sp, #44	; 0x2c
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	9901      	ldr	r1, [sp, #4]
 800cbae:	115a      	asrs	r2, r3, #5
 800cbb0:	0092      	lsls	r2, r2, #2
 800cbb2:	188a      	adds	r2, r1, r2
 800cbb4:	9202      	str	r2, [sp, #8]
 800cbb6:	0019      	movs	r1, r3
 800cbb8:	221f      	movs	r2, #31
 800cbba:	4011      	ands	r1, r2
 800cbbc:	9008      	str	r0, [sp, #32]
 800cbbe:	9106      	str	r1, [sp, #24]
 800cbc0:	4213      	tst	r3, r2
 800cbc2:	d002      	beq.n	800cbca <__hexnan+0x26>
 800cbc4:	9b02      	ldr	r3, [sp, #8]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	9302      	str	r3, [sp, #8]
 800cbca:	9b02      	ldr	r3, [sp, #8]
 800cbcc:	2500      	movs	r5, #0
 800cbce:	1f1f      	subs	r7, r3, #4
 800cbd0:	003e      	movs	r6, r7
 800cbd2:	003c      	movs	r4, r7
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	603d      	str	r5, [r7, #0]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	9507      	str	r5, [sp, #28]
 800cbdc:	9305      	str	r3, [sp, #20]
 800cbde:	9503      	str	r5, [sp, #12]
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe6:	9b05      	ldr	r3, [sp, #20]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d028      	beq.n	800cc42 <__hexnan+0x9e>
 800cbf0:	9804      	ldr	r0, [sp, #16]
 800cbf2:	f7ff fd78 	bl	800c6e6 <__hexdig_fun>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d154      	bne.n	800cca4 <__hexnan+0x100>
 800cbfa:	9b04      	ldr	r3, [sp, #16]
 800cbfc:	2b20      	cmp	r3, #32
 800cbfe:	d819      	bhi.n	800cc34 <__hexnan+0x90>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	9a07      	ldr	r2, [sp, #28]
 800cc04:	4293      	cmp	r3, r2
 800cc06:	dd12      	ble.n	800cc2e <__hexnan+0x8a>
 800cc08:	42b4      	cmp	r4, r6
 800cc0a:	d206      	bcs.n	800cc1a <__hexnan+0x76>
 800cc0c:	2d07      	cmp	r5, #7
 800cc0e:	dc04      	bgt.n	800cc1a <__hexnan+0x76>
 800cc10:	002a      	movs	r2, r5
 800cc12:	0031      	movs	r1, r6
 800cc14:	0020      	movs	r0, r4
 800cc16:	f7ff ff9f 	bl	800cb58 <L_shift>
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	2508      	movs	r5, #8
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d905      	bls.n	800cc2e <__hexnan+0x8a>
 800cc22:	1f26      	subs	r6, r4, #4
 800cc24:	2500      	movs	r5, #0
 800cc26:	0034      	movs	r4, r6
 800cc28:	9b03      	ldr	r3, [sp, #12]
 800cc2a:	6035      	str	r5, [r6, #0]
 800cc2c:	9307      	str	r3, [sp, #28]
 800cc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	e7d5      	b.n	800cbe0 <__hexnan+0x3c>
 800cc34:	9b04      	ldr	r3, [sp, #16]
 800cc36:	2b29      	cmp	r3, #41	; 0x29
 800cc38:	d159      	bne.n	800ccee <__hexnan+0x14a>
 800cc3a:	9b05      	ldr	r3, [sp, #20]
 800cc3c:	9a08      	ldr	r2, [sp, #32]
 800cc3e:	3302      	adds	r3, #2
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d052      	beq.n	800ccee <__hexnan+0x14a>
 800cc48:	42b4      	cmp	r4, r6
 800cc4a:	d206      	bcs.n	800cc5a <__hexnan+0xb6>
 800cc4c:	2d07      	cmp	r5, #7
 800cc4e:	dc04      	bgt.n	800cc5a <__hexnan+0xb6>
 800cc50:	002a      	movs	r2, r5
 800cc52:	0031      	movs	r1, r6
 800cc54:	0020      	movs	r0, r4
 800cc56:	f7ff ff7f 	bl	800cb58 <L_shift>
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	d935      	bls.n	800cccc <__hexnan+0x128>
 800cc60:	001a      	movs	r2, r3
 800cc62:	0023      	movs	r3, r4
 800cc64:	cb02      	ldmia	r3!, {r1}
 800cc66:	c202      	stmia	r2!, {r1}
 800cc68:	429f      	cmp	r7, r3
 800cc6a:	d2fb      	bcs.n	800cc64 <__hexnan+0xc0>
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	1c62      	adds	r2, r4, #1
 800cc70:	1ed9      	subs	r1, r3, #3
 800cc72:	2304      	movs	r3, #4
 800cc74:	4291      	cmp	r1, r2
 800cc76:	d305      	bcc.n	800cc84 <__hexnan+0xe0>
 800cc78:	9b02      	ldr	r3, [sp, #8]
 800cc7a:	3b04      	subs	r3, #4
 800cc7c:	1b1b      	subs	r3, r3, r4
 800cc7e:	089b      	lsrs	r3, r3, #2
 800cc80:	3301      	adds	r3, #1
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	9a01      	ldr	r2, [sp, #4]
 800cc86:	18d3      	adds	r3, r2, r3
 800cc88:	2200      	movs	r2, #0
 800cc8a:	c304      	stmia	r3!, {r2}
 800cc8c:	429f      	cmp	r7, r3
 800cc8e:	d2fc      	bcs.n	800cc8a <__hexnan+0xe6>
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d104      	bne.n	800cca0 <__hexnan+0xfc>
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	429f      	cmp	r7, r3
 800cc9a:	d126      	bne.n	800ccea <__hexnan+0x146>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	2005      	movs	r0, #5
 800cca2:	e025      	b.n	800ccf0 <__hexnan+0x14c>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	3501      	adds	r5, #1
 800cca8:	3301      	adds	r3, #1
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	2d08      	cmp	r5, #8
 800ccae:	dd06      	ble.n	800ccbe <__hexnan+0x11a>
 800ccb0:	9b01      	ldr	r3, [sp, #4]
 800ccb2:	429c      	cmp	r4, r3
 800ccb4:	d9bb      	bls.n	800cc2e <__hexnan+0x8a>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	2501      	movs	r5, #1
 800ccba:	3c04      	subs	r4, #4
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	220f      	movs	r2, #15
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	4010      	ands	r0, r2
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	4303      	orrs	r3, r0
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	e7b0      	b.n	800cc2e <__hexnan+0x8a>
 800cccc:	9b06      	ldr	r3, [sp, #24]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0de      	beq.n	800cc90 <__hexnan+0xec>
 800ccd2:	2320      	movs	r3, #32
 800ccd4:	9a06      	ldr	r2, [sp, #24]
 800ccd6:	9902      	ldr	r1, [sp, #8]
 800ccd8:	1a9b      	subs	r3, r3, r2
 800ccda:	2201      	movs	r2, #1
 800ccdc:	4252      	negs	r2, r2
 800ccde:	40da      	lsrs	r2, r3
 800cce0:	3904      	subs	r1, #4
 800cce2:	680b      	ldr	r3, [r1, #0]
 800cce4:	4013      	ands	r3, r2
 800cce6:	600b      	str	r3, [r1, #0]
 800cce8:	e7d2      	b.n	800cc90 <__hexnan+0xec>
 800ccea:	3f04      	subs	r7, #4
 800ccec:	e7d0      	b.n	800cc90 <__hexnan+0xec>
 800ccee:	2004      	movs	r0, #4
 800ccf0:	b00b      	add	sp, #44	; 0x2c
 800ccf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccf4 <__ascii_mbtowc>:
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	d100      	bne.n	800ccfc <__ascii_mbtowc+0x8>
 800ccfa:	a901      	add	r1, sp, #4
 800ccfc:	1e10      	subs	r0, r2, #0
 800ccfe:	d006      	beq.n	800cd0e <__ascii_mbtowc+0x1a>
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <__ascii_mbtowc+0x1e>
 800cd04:	7813      	ldrb	r3, [r2, #0]
 800cd06:	600b      	str	r3, [r1, #0]
 800cd08:	7810      	ldrb	r0, [r2, #0]
 800cd0a:	1e43      	subs	r3, r0, #1
 800cd0c:	4198      	sbcs	r0, r3
 800cd0e:	b002      	add	sp, #8
 800cd10:	4770      	bx	lr
 800cd12:	2002      	movs	r0, #2
 800cd14:	4240      	negs	r0, r0
 800cd16:	e7fa      	b.n	800cd0e <__ascii_mbtowc+0x1a>

0800cd18 <_Balloc>:
 800cd18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cd1a:	b570      	push	{r4, r5, r6, lr}
 800cd1c:	0006      	movs	r6, r0
 800cd1e:	000c      	movs	r4, r1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d012      	beq.n	800cd4a <_Balloc+0x32>
 800cd24:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800cd26:	00a2      	lsls	r2, r4, #2
 800cd28:	189b      	adds	r3, r3, r2
 800cd2a:	6818      	ldr	r0, [r3, #0]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d115      	bne.n	800cd5c <_Balloc+0x44>
 800cd30:	2101      	movs	r1, #1
 800cd32:	000d      	movs	r5, r1
 800cd34:	40a5      	lsls	r5, r4
 800cd36:	1d6a      	adds	r2, r5, #5
 800cd38:	0030      	movs	r0, r6
 800cd3a:	0092      	lsls	r2, r2, #2
 800cd3c:	f003 face 	bl	80102dc <_calloc_r>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d009      	beq.n	800cd58 <_Balloc+0x40>
 800cd44:	6044      	str	r4, [r0, #4]
 800cd46:	6085      	str	r5, [r0, #8]
 800cd48:	e00a      	b.n	800cd60 <_Balloc+0x48>
 800cd4a:	2221      	movs	r2, #33	; 0x21
 800cd4c:	2104      	movs	r1, #4
 800cd4e:	f003 fac5 	bl	80102dc <_calloc_r>
 800cd52:	6470      	str	r0, [r6, #68]	; 0x44
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d1e5      	bne.n	800cd24 <_Balloc+0xc>
 800cd58:	2000      	movs	r0, #0
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	6802      	ldr	r2, [r0, #0]
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	6103      	str	r3, [r0, #16]
 800cd64:	60c3      	str	r3, [r0, #12]
 800cd66:	e7f8      	b.n	800cd5a <_Balloc+0x42>

0800cd68 <_Bfree>:
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	d006      	beq.n	800cd7a <_Bfree+0x12>
 800cd6c:	684a      	ldr	r2, [r1, #4]
 800cd6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cd70:	0092      	lsls	r2, r2, #2
 800cd72:	189b      	adds	r3, r3, r2
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	600a      	str	r2, [r1, #0]
 800cd78:	6019      	str	r1, [r3, #0]
 800cd7a:	4770      	bx	lr

0800cd7c <__multadd>:
 800cd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd7e:	000e      	movs	r6, r1
 800cd80:	9001      	str	r0, [sp, #4]
 800cd82:	000c      	movs	r4, r1
 800cd84:	001d      	movs	r5, r3
 800cd86:	2000      	movs	r0, #0
 800cd88:	690f      	ldr	r7, [r1, #16]
 800cd8a:	3614      	adds	r6, #20
 800cd8c:	6833      	ldr	r3, [r6, #0]
 800cd8e:	3001      	adds	r0, #1
 800cd90:	b299      	uxth	r1, r3
 800cd92:	4351      	muls	r1, r2
 800cd94:	0c1b      	lsrs	r3, r3, #16
 800cd96:	4353      	muls	r3, r2
 800cd98:	1949      	adds	r1, r1, r5
 800cd9a:	0c0d      	lsrs	r5, r1, #16
 800cd9c:	195b      	adds	r3, r3, r5
 800cd9e:	0c1d      	lsrs	r5, r3, #16
 800cda0:	b289      	uxth	r1, r1
 800cda2:	041b      	lsls	r3, r3, #16
 800cda4:	185b      	adds	r3, r3, r1
 800cda6:	c608      	stmia	r6!, {r3}
 800cda8:	4287      	cmp	r7, r0
 800cdaa:	dcef      	bgt.n	800cd8c <__multadd+0x10>
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	d022      	beq.n	800cdf6 <__multadd+0x7a>
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	42bb      	cmp	r3, r7
 800cdb4:	dc19      	bgt.n	800cdea <__multadd+0x6e>
 800cdb6:	6861      	ldr	r1, [r4, #4]
 800cdb8:	9801      	ldr	r0, [sp, #4]
 800cdba:	3101      	adds	r1, #1
 800cdbc:	f7ff ffac 	bl	800cd18 <_Balloc>
 800cdc0:	1e06      	subs	r6, r0, #0
 800cdc2:	d105      	bne.n	800cdd0 <__multadd+0x54>
 800cdc4:	0032      	movs	r2, r6
 800cdc6:	21ba      	movs	r1, #186	; 0xba
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <__multadd+0x80>)
 800cdca:	480d      	ldr	r0, [pc, #52]	; (800ce00 <__multadd+0x84>)
 800cdcc:	f003 fa68 	bl	80102a0 <__assert_func>
 800cdd0:	0021      	movs	r1, r4
 800cdd2:	6922      	ldr	r2, [r4, #16]
 800cdd4:	310c      	adds	r1, #12
 800cdd6:	3202      	adds	r2, #2
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	300c      	adds	r0, #12
 800cddc:	f7ff fb01 	bl	800c3e2 <memcpy>
 800cde0:	0021      	movs	r1, r4
 800cde2:	9801      	ldr	r0, [sp, #4]
 800cde4:	f7ff ffc0 	bl	800cd68 <_Bfree>
 800cde8:	0034      	movs	r4, r6
 800cdea:	1d3b      	adds	r3, r7, #4
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	18e3      	adds	r3, r4, r3
 800cdf0:	605d      	str	r5, [r3, #4]
 800cdf2:	1c7b      	adds	r3, r7, #1
 800cdf4:	6123      	str	r3, [r4, #16]
 800cdf6:	0020      	movs	r0, r4
 800cdf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdfa:	46c0      	nop			; (mov r8, r8)
 800cdfc:	080149d1 	.word	0x080149d1
 800ce00:	08014a42 	.word	0x08014a42

0800ce04 <__s2b>:
 800ce04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce06:	0006      	movs	r6, r0
 800ce08:	0018      	movs	r0, r3
 800ce0a:	000c      	movs	r4, r1
 800ce0c:	3008      	adds	r0, #8
 800ce0e:	2109      	movs	r1, #9
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	0015      	movs	r5, r2
 800ce14:	f7f3 fa1c 	bl	8000250 <__divsi3>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	4283      	cmp	r3, r0
 800ce1e:	db0a      	blt.n	800ce36 <__s2b+0x32>
 800ce20:	0030      	movs	r0, r6
 800ce22:	f7ff ff79 	bl	800cd18 <_Balloc>
 800ce26:	1e01      	subs	r1, r0, #0
 800ce28:	d108      	bne.n	800ce3c <__s2b+0x38>
 800ce2a:	000a      	movs	r2, r1
 800ce2c:	4b19      	ldr	r3, [pc, #100]	; (800ce94 <__s2b+0x90>)
 800ce2e:	481a      	ldr	r0, [pc, #104]	; (800ce98 <__s2b+0x94>)
 800ce30:	31d3      	adds	r1, #211	; 0xd3
 800ce32:	f003 fa35 	bl	80102a0 <__assert_func>
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	3101      	adds	r1, #1
 800ce3a:	e7ef      	b.n	800ce1c <__s2b+0x18>
 800ce3c:	9b08      	ldr	r3, [sp, #32]
 800ce3e:	6143      	str	r3, [r0, #20]
 800ce40:	2301      	movs	r3, #1
 800ce42:	6103      	str	r3, [r0, #16]
 800ce44:	2d09      	cmp	r5, #9
 800ce46:	dd18      	ble.n	800ce7a <__s2b+0x76>
 800ce48:	0023      	movs	r3, r4
 800ce4a:	3309      	adds	r3, #9
 800ce4c:	001f      	movs	r7, r3
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	1964      	adds	r4, r4, r5
 800ce52:	783b      	ldrb	r3, [r7, #0]
 800ce54:	220a      	movs	r2, #10
 800ce56:	0030      	movs	r0, r6
 800ce58:	3b30      	subs	r3, #48	; 0x30
 800ce5a:	f7ff ff8f 	bl	800cd7c <__multadd>
 800ce5e:	3701      	adds	r7, #1
 800ce60:	0001      	movs	r1, r0
 800ce62:	42a7      	cmp	r7, r4
 800ce64:	d1f5      	bne.n	800ce52 <__s2b+0x4e>
 800ce66:	002c      	movs	r4, r5
 800ce68:	9b00      	ldr	r3, [sp, #0]
 800ce6a:	3c08      	subs	r4, #8
 800ce6c:	191c      	adds	r4, r3, r4
 800ce6e:	002f      	movs	r7, r5
 800ce70:	9b01      	ldr	r3, [sp, #4]
 800ce72:	429f      	cmp	r7, r3
 800ce74:	db04      	blt.n	800ce80 <__s2b+0x7c>
 800ce76:	0008      	movs	r0, r1
 800ce78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce7a:	2509      	movs	r5, #9
 800ce7c:	340a      	adds	r4, #10
 800ce7e:	e7f6      	b.n	800ce6e <__s2b+0x6a>
 800ce80:	1b63      	subs	r3, r4, r5
 800ce82:	5ddb      	ldrb	r3, [r3, r7]
 800ce84:	220a      	movs	r2, #10
 800ce86:	0030      	movs	r0, r6
 800ce88:	3b30      	subs	r3, #48	; 0x30
 800ce8a:	f7ff ff77 	bl	800cd7c <__multadd>
 800ce8e:	3701      	adds	r7, #1
 800ce90:	0001      	movs	r1, r0
 800ce92:	e7ed      	b.n	800ce70 <__s2b+0x6c>
 800ce94:	080149d1 	.word	0x080149d1
 800ce98:	08014a42 	.word	0x08014a42

0800ce9c <__hi0bits>:
 800ce9c:	0003      	movs	r3, r0
 800ce9e:	0c02      	lsrs	r2, r0, #16
 800cea0:	2000      	movs	r0, #0
 800cea2:	4282      	cmp	r2, r0
 800cea4:	d101      	bne.n	800ceaa <__hi0bits+0xe>
 800cea6:	041b      	lsls	r3, r3, #16
 800cea8:	3010      	adds	r0, #16
 800ceaa:	0e1a      	lsrs	r2, r3, #24
 800ceac:	d101      	bne.n	800ceb2 <__hi0bits+0x16>
 800ceae:	3008      	adds	r0, #8
 800ceb0:	021b      	lsls	r3, r3, #8
 800ceb2:	0f1a      	lsrs	r2, r3, #28
 800ceb4:	d101      	bne.n	800ceba <__hi0bits+0x1e>
 800ceb6:	3004      	adds	r0, #4
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	0f9a      	lsrs	r2, r3, #30
 800cebc:	d101      	bne.n	800cec2 <__hi0bits+0x26>
 800cebe:	3002      	adds	r0, #2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	db03      	blt.n	800cece <__hi0bits+0x32>
 800cec6:	3001      	adds	r0, #1
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	d400      	bmi.n	800cece <__hi0bits+0x32>
 800cecc:	2020      	movs	r0, #32
 800cece:	4770      	bx	lr

0800ced0 <__lo0bits>:
 800ced0:	6803      	ldr	r3, [r0, #0]
 800ced2:	0001      	movs	r1, r0
 800ced4:	2207      	movs	r2, #7
 800ced6:	0018      	movs	r0, r3
 800ced8:	4010      	ands	r0, r2
 800ceda:	4213      	tst	r3, r2
 800cedc:	d00d      	beq.n	800cefa <__lo0bits+0x2a>
 800cede:	3a06      	subs	r2, #6
 800cee0:	2000      	movs	r0, #0
 800cee2:	4213      	tst	r3, r2
 800cee4:	d105      	bne.n	800cef2 <__lo0bits+0x22>
 800cee6:	3002      	adds	r0, #2
 800cee8:	4203      	tst	r3, r0
 800ceea:	d003      	beq.n	800cef4 <__lo0bits+0x24>
 800ceec:	40d3      	lsrs	r3, r2
 800ceee:	0010      	movs	r0, r2
 800cef0:	600b      	str	r3, [r1, #0]
 800cef2:	4770      	bx	lr
 800cef4:	089b      	lsrs	r3, r3, #2
 800cef6:	600b      	str	r3, [r1, #0]
 800cef8:	e7fb      	b.n	800cef2 <__lo0bits+0x22>
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	2a00      	cmp	r2, #0
 800cefe:	d101      	bne.n	800cf04 <__lo0bits+0x34>
 800cf00:	2010      	movs	r0, #16
 800cf02:	0c1b      	lsrs	r3, r3, #16
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	d101      	bne.n	800cf0e <__lo0bits+0x3e>
 800cf0a:	3008      	adds	r0, #8
 800cf0c:	0a1b      	lsrs	r3, r3, #8
 800cf0e:	071a      	lsls	r2, r3, #28
 800cf10:	d101      	bne.n	800cf16 <__lo0bits+0x46>
 800cf12:	3004      	adds	r0, #4
 800cf14:	091b      	lsrs	r3, r3, #4
 800cf16:	079a      	lsls	r2, r3, #30
 800cf18:	d101      	bne.n	800cf1e <__lo0bits+0x4e>
 800cf1a:	3002      	adds	r0, #2
 800cf1c:	089b      	lsrs	r3, r3, #2
 800cf1e:	07da      	lsls	r2, r3, #31
 800cf20:	d4e9      	bmi.n	800cef6 <__lo0bits+0x26>
 800cf22:	3001      	adds	r0, #1
 800cf24:	085b      	lsrs	r3, r3, #1
 800cf26:	d1e6      	bne.n	800cef6 <__lo0bits+0x26>
 800cf28:	2020      	movs	r0, #32
 800cf2a:	e7e2      	b.n	800cef2 <__lo0bits+0x22>

0800cf2c <__i2b>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	000c      	movs	r4, r1
 800cf30:	2101      	movs	r1, #1
 800cf32:	f7ff fef1 	bl	800cd18 <_Balloc>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d107      	bne.n	800cf4a <__i2b+0x1e>
 800cf3a:	2146      	movs	r1, #70	; 0x46
 800cf3c:	4c05      	ldr	r4, [pc, #20]	; (800cf54 <__i2b+0x28>)
 800cf3e:	0002      	movs	r2, r0
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <__i2b+0x2c>)
 800cf42:	0020      	movs	r0, r4
 800cf44:	31ff      	adds	r1, #255	; 0xff
 800cf46:	f003 f9ab 	bl	80102a0 <__assert_func>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	6144      	str	r4, [r0, #20]
 800cf4e:	6103      	str	r3, [r0, #16]
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	46c0      	nop			; (mov r8, r8)
 800cf54:	08014a42 	.word	0x08014a42
 800cf58:	080149d1 	.word	0x080149d1

0800cf5c <__multiply>:
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5e:	0015      	movs	r5, r2
 800cf60:	690a      	ldr	r2, [r1, #16]
 800cf62:	692b      	ldr	r3, [r5, #16]
 800cf64:	000c      	movs	r4, r1
 800cf66:	b08b      	sub	sp, #44	; 0x2c
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	da01      	bge.n	800cf70 <__multiply+0x14>
 800cf6c:	002c      	movs	r4, r5
 800cf6e:	000d      	movs	r5, r1
 800cf70:	6927      	ldr	r7, [r4, #16]
 800cf72:	692e      	ldr	r6, [r5, #16]
 800cf74:	6861      	ldr	r1, [r4, #4]
 800cf76:	19bb      	adds	r3, r7, r6
 800cf78:	9303      	str	r3, [sp, #12]
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	19ba      	adds	r2, r7, r6
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	da00      	bge.n	800cf84 <__multiply+0x28>
 800cf82:	3101      	adds	r1, #1
 800cf84:	f7ff fec8 	bl	800cd18 <_Balloc>
 800cf88:	9002      	str	r0, [sp, #8]
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d106      	bne.n	800cf9c <__multiply+0x40>
 800cf8e:	21b1      	movs	r1, #177	; 0xb1
 800cf90:	4b48      	ldr	r3, [pc, #288]	; (800d0b4 <__multiply+0x158>)
 800cf92:	4849      	ldr	r0, [pc, #292]	; (800d0b8 <__multiply+0x15c>)
 800cf94:	9a02      	ldr	r2, [sp, #8]
 800cf96:	0049      	lsls	r1, r1, #1
 800cf98:	f003 f982 	bl	80102a0 <__assert_func>
 800cf9c:	9b02      	ldr	r3, [sp, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	3314      	adds	r3, #20
 800cfa2:	469c      	mov	ip, r3
 800cfa4:	19bb      	adds	r3, r7, r6
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4463      	add	r3, ip
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	4663      	mov	r3, ip
 800cfae:	9904      	ldr	r1, [sp, #16]
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d32a      	bcc.n	800d00a <__multiply+0xae>
 800cfb4:	0023      	movs	r3, r4
 800cfb6:	00bf      	lsls	r7, r7, #2
 800cfb8:	3314      	adds	r3, #20
 800cfba:	3514      	adds	r5, #20
 800cfbc:	9308      	str	r3, [sp, #32]
 800cfbe:	00b6      	lsls	r6, r6, #2
 800cfc0:	19db      	adds	r3, r3, r7
 800cfc2:	9305      	str	r3, [sp, #20]
 800cfc4:	19ab      	adds	r3, r5, r6
 800cfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc8:	2304      	movs	r3, #4
 800cfca:	9306      	str	r3, [sp, #24]
 800cfcc:	0023      	movs	r3, r4
 800cfce:	9a05      	ldr	r2, [sp, #20]
 800cfd0:	3315      	adds	r3, #21
 800cfd2:	9501      	str	r5, [sp, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d305      	bcc.n	800cfe4 <__multiply+0x88>
 800cfd8:	1b13      	subs	r3, r2, r4
 800cfda:	3b15      	subs	r3, #21
 800cfdc:	089b      	lsrs	r3, r3, #2
 800cfde:	3301      	adds	r3, #1
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	9306      	str	r3, [sp, #24]
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d310      	bcc.n	800d00e <__multiply+0xb2>
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	dd05      	ble.n	800cffe <__multiply+0xa2>
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	3b04      	subs	r3, #4
 800cff6:	9304      	str	r3, [sp, #16]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d056      	beq.n	800d0ac <__multiply+0x150>
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	9a03      	ldr	r2, [sp, #12]
 800d002:	0018      	movs	r0, r3
 800d004:	611a      	str	r2, [r3, #16]
 800d006:	b00b      	add	sp, #44	; 0x2c
 800d008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d00a:	c304      	stmia	r3!, {r2}
 800d00c:	e7cf      	b.n	800cfae <__multiply+0x52>
 800d00e:	9b01      	ldr	r3, [sp, #4]
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	b280      	uxth	r0, r0
 800d014:	2800      	cmp	r0, #0
 800d016:	d01e      	beq.n	800d056 <__multiply+0xfa>
 800d018:	4667      	mov	r7, ip
 800d01a:	2500      	movs	r5, #0
 800d01c:	9e08      	ldr	r6, [sp, #32]
 800d01e:	ce02      	ldmia	r6!, {r1}
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	b28b      	uxth	r3, r1
 800d026:	4343      	muls	r3, r0
 800d028:	001a      	movs	r2, r3
 800d02a:	466b      	mov	r3, sp
 800d02c:	8b9b      	ldrh	r3, [r3, #28]
 800d02e:	18d3      	adds	r3, r2, r3
 800d030:	195b      	adds	r3, r3, r5
 800d032:	0c0d      	lsrs	r5, r1, #16
 800d034:	4345      	muls	r5, r0
 800d036:	9a07      	ldr	r2, [sp, #28]
 800d038:	0c11      	lsrs	r1, r2, #16
 800d03a:	1869      	adds	r1, r5, r1
 800d03c:	0c1a      	lsrs	r2, r3, #16
 800d03e:	188a      	adds	r2, r1, r2
 800d040:	b29b      	uxth	r3, r3
 800d042:	0c15      	lsrs	r5, r2, #16
 800d044:	0412      	lsls	r2, r2, #16
 800d046:	431a      	orrs	r2, r3
 800d048:	9b05      	ldr	r3, [sp, #20]
 800d04a:	c704      	stmia	r7!, {r2}
 800d04c:	42b3      	cmp	r3, r6
 800d04e:	d8e6      	bhi.n	800d01e <__multiply+0xc2>
 800d050:	4663      	mov	r3, ip
 800d052:	9a06      	ldr	r2, [sp, #24]
 800d054:	509d      	str	r5, [r3, r2]
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	0c00      	lsrs	r0, r0, #16
 800d05c:	d020      	beq.n	800d0a0 <__multiply+0x144>
 800d05e:	4663      	mov	r3, ip
 800d060:	0025      	movs	r5, r4
 800d062:	4661      	mov	r1, ip
 800d064:	2700      	movs	r7, #0
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3514      	adds	r5, #20
 800d06a:	682a      	ldr	r2, [r5, #0]
 800d06c:	680e      	ldr	r6, [r1, #0]
 800d06e:	b292      	uxth	r2, r2
 800d070:	4342      	muls	r2, r0
 800d072:	0c36      	lsrs	r6, r6, #16
 800d074:	1992      	adds	r2, r2, r6
 800d076:	19d2      	adds	r2, r2, r7
 800d078:	0416      	lsls	r6, r2, #16
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	431e      	orrs	r6, r3
 800d07e:	600e      	str	r6, [r1, #0]
 800d080:	cd40      	ldmia	r5!, {r6}
 800d082:	684b      	ldr	r3, [r1, #4]
 800d084:	0c36      	lsrs	r6, r6, #16
 800d086:	4346      	muls	r6, r0
 800d088:	b29b      	uxth	r3, r3
 800d08a:	0c12      	lsrs	r2, r2, #16
 800d08c:	18f3      	adds	r3, r6, r3
 800d08e:	189b      	adds	r3, r3, r2
 800d090:	9a05      	ldr	r2, [sp, #20]
 800d092:	0c1f      	lsrs	r7, r3, #16
 800d094:	3104      	adds	r1, #4
 800d096:	42aa      	cmp	r2, r5
 800d098:	d8e7      	bhi.n	800d06a <__multiply+0x10e>
 800d09a:	4662      	mov	r2, ip
 800d09c:	9906      	ldr	r1, [sp, #24]
 800d09e:	5053      	str	r3, [r2, r1]
 800d0a0:	9b01      	ldr	r3, [sp, #4]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	2304      	movs	r3, #4
 800d0a8:	449c      	add	ip, r3
 800d0aa:	e79b      	b.n	800cfe4 <__multiply+0x88>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	9303      	str	r3, [sp, #12]
 800d0b2:	e79b      	b.n	800cfec <__multiply+0x90>
 800d0b4:	080149d1 	.word	0x080149d1
 800d0b8:	08014a42 	.word	0x08014a42

0800d0bc <__pow5mult>:
 800d0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0be:	2303      	movs	r3, #3
 800d0c0:	0015      	movs	r5, r2
 800d0c2:	0007      	movs	r7, r0
 800d0c4:	000e      	movs	r6, r1
 800d0c6:	401a      	ands	r2, r3
 800d0c8:	421d      	tst	r5, r3
 800d0ca:	d008      	beq.n	800d0de <__pow5mult+0x22>
 800d0cc:	491a      	ldr	r1, [pc, #104]	; (800d138 <__pow5mult+0x7c>)
 800d0ce:	3a01      	subs	r2, #1
 800d0d0:	0092      	lsls	r2, r2, #2
 800d0d2:	5852      	ldr	r2, [r2, r1]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	0031      	movs	r1, r6
 800d0d8:	f7ff fe50 	bl	800cd7c <__multadd>
 800d0dc:	0006      	movs	r6, r0
 800d0de:	10ad      	asrs	r5, r5, #2
 800d0e0:	d027      	beq.n	800d132 <__pow5mult+0x76>
 800d0e2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d0e4:	2c00      	cmp	r4, #0
 800d0e6:	d107      	bne.n	800d0f8 <__pow5mult+0x3c>
 800d0e8:	0038      	movs	r0, r7
 800d0ea:	4914      	ldr	r1, [pc, #80]	; (800d13c <__pow5mult+0x80>)
 800d0ec:	f7ff ff1e 	bl	800cf2c <__i2b>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	0004      	movs	r4, r0
 800d0f4:	6438      	str	r0, [r7, #64]	; 0x40
 800d0f6:	6003      	str	r3, [r0, #0]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	421d      	tst	r5, r3
 800d0fc:	d00a      	beq.n	800d114 <__pow5mult+0x58>
 800d0fe:	0031      	movs	r1, r6
 800d100:	0022      	movs	r2, r4
 800d102:	0038      	movs	r0, r7
 800d104:	f7ff ff2a 	bl	800cf5c <__multiply>
 800d108:	0031      	movs	r1, r6
 800d10a:	9001      	str	r0, [sp, #4]
 800d10c:	0038      	movs	r0, r7
 800d10e:	f7ff fe2b 	bl	800cd68 <_Bfree>
 800d112:	9e01      	ldr	r6, [sp, #4]
 800d114:	106d      	asrs	r5, r5, #1
 800d116:	d00c      	beq.n	800d132 <__pow5mult+0x76>
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d107      	bne.n	800d12e <__pow5mult+0x72>
 800d11e:	0022      	movs	r2, r4
 800d120:	0021      	movs	r1, r4
 800d122:	0038      	movs	r0, r7
 800d124:	f7ff ff1a 	bl	800cf5c <__multiply>
 800d128:	2300      	movs	r3, #0
 800d12a:	6020      	str	r0, [r4, #0]
 800d12c:	6003      	str	r3, [r0, #0]
 800d12e:	0004      	movs	r4, r0
 800d130:	e7e2      	b.n	800d0f8 <__pow5mult+0x3c>
 800d132:	0030      	movs	r0, r6
 800d134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	08014b90 	.word	0x08014b90
 800d13c:	00000271 	.word	0x00000271

0800d140 <__lshift>:
 800d140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d142:	000c      	movs	r4, r1
 800d144:	0017      	movs	r7, r2
 800d146:	6923      	ldr	r3, [r4, #16]
 800d148:	1155      	asrs	r5, r2, #5
 800d14a:	b087      	sub	sp, #28
 800d14c:	18eb      	adds	r3, r5, r3
 800d14e:	9302      	str	r3, [sp, #8]
 800d150:	3301      	adds	r3, #1
 800d152:	9301      	str	r3, [sp, #4]
 800d154:	6849      	ldr	r1, [r1, #4]
 800d156:	68a3      	ldr	r3, [r4, #8]
 800d158:	9004      	str	r0, [sp, #16]
 800d15a:	9a01      	ldr	r2, [sp, #4]
 800d15c:	4293      	cmp	r3, r2
 800d15e:	db10      	blt.n	800d182 <__lshift+0x42>
 800d160:	9804      	ldr	r0, [sp, #16]
 800d162:	f7ff fdd9 	bl	800cd18 <_Balloc>
 800d166:	2300      	movs	r3, #0
 800d168:	0002      	movs	r2, r0
 800d16a:	0006      	movs	r6, r0
 800d16c:	0019      	movs	r1, r3
 800d16e:	3214      	adds	r2, #20
 800d170:	4298      	cmp	r0, r3
 800d172:	d10c      	bne.n	800d18e <__lshift+0x4e>
 800d174:	31df      	adds	r1, #223	; 0xdf
 800d176:	0032      	movs	r2, r6
 800d178:	4b26      	ldr	r3, [pc, #152]	; (800d214 <__lshift+0xd4>)
 800d17a:	4827      	ldr	r0, [pc, #156]	; (800d218 <__lshift+0xd8>)
 800d17c:	31ff      	adds	r1, #255	; 0xff
 800d17e:	f003 f88f 	bl	80102a0 <__assert_func>
 800d182:	3101      	adds	r1, #1
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	e7e8      	b.n	800d15a <__lshift+0x1a>
 800d188:	0098      	lsls	r0, r3, #2
 800d18a:	5011      	str	r1, [r2, r0]
 800d18c:	3301      	adds	r3, #1
 800d18e:	42ab      	cmp	r3, r5
 800d190:	dbfa      	blt.n	800d188 <__lshift+0x48>
 800d192:	43eb      	mvns	r3, r5
 800d194:	17db      	asrs	r3, r3, #31
 800d196:	401d      	ands	r5, r3
 800d198:	211f      	movs	r1, #31
 800d19a:	0023      	movs	r3, r4
 800d19c:	0038      	movs	r0, r7
 800d19e:	00ad      	lsls	r5, r5, #2
 800d1a0:	1955      	adds	r5, r2, r5
 800d1a2:	6922      	ldr	r2, [r4, #16]
 800d1a4:	3314      	adds	r3, #20
 800d1a6:	0092      	lsls	r2, r2, #2
 800d1a8:	4008      	ands	r0, r1
 800d1aa:	4684      	mov	ip, r0
 800d1ac:	189a      	adds	r2, r3, r2
 800d1ae:	420f      	tst	r7, r1
 800d1b0:	d02a      	beq.n	800d208 <__lshift+0xc8>
 800d1b2:	3101      	adds	r1, #1
 800d1b4:	1a09      	subs	r1, r1, r0
 800d1b6:	9105      	str	r1, [sp, #20]
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	9503      	str	r5, [sp, #12]
 800d1bc:	4667      	mov	r7, ip
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	40b8      	lsls	r0, r7
 800d1c2:	4308      	orrs	r0, r1
 800d1c4:	9903      	ldr	r1, [sp, #12]
 800d1c6:	c101      	stmia	r1!, {r0}
 800d1c8:	9103      	str	r1, [sp, #12]
 800d1ca:	9805      	ldr	r0, [sp, #20]
 800d1cc:	cb02      	ldmia	r3!, {r1}
 800d1ce:	40c1      	lsrs	r1, r0
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d8f3      	bhi.n	800d1bc <__lshift+0x7c>
 800d1d4:	0020      	movs	r0, r4
 800d1d6:	3015      	adds	r0, #21
 800d1d8:	2304      	movs	r3, #4
 800d1da:	4282      	cmp	r2, r0
 800d1dc:	d304      	bcc.n	800d1e8 <__lshift+0xa8>
 800d1de:	1b13      	subs	r3, r2, r4
 800d1e0:	3b15      	subs	r3, #21
 800d1e2:	089b      	lsrs	r3, r3, #2
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	50e9      	str	r1, [r5, r3]
 800d1ea:	2900      	cmp	r1, #0
 800d1ec:	d002      	beq.n	800d1f4 <__lshift+0xb4>
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	3302      	adds	r3, #2
 800d1f2:	9301      	str	r3, [sp, #4]
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	9804      	ldr	r0, [sp, #16]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	0021      	movs	r1, r4
 800d1fc:	6133      	str	r3, [r6, #16]
 800d1fe:	f7ff fdb3 	bl	800cd68 <_Bfree>
 800d202:	0030      	movs	r0, r6
 800d204:	b007      	add	sp, #28
 800d206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d208:	cb02      	ldmia	r3!, {r1}
 800d20a:	c502      	stmia	r5!, {r1}
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d8fb      	bhi.n	800d208 <__lshift+0xc8>
 800d210:	e7f0      	b.n	800d1f4 <__lshift+0xb4>
 800d212:	46c0      	nop			; (mov r8, r8)
 800d214:	080149d1 	.word	0x080149d1
 800d218:	08014a42 	.word	0x08014a42

0800d21c <__mcmp>:
 800d21c:	b530      	push	{r4, r5, lr}
 800d21e:	690b      	ldr	r3, [r1, #16]
 800d220:	6904      	ldr	r4, [r0, #16]
 800d222:	0002      	movs	r2, r0
 800d224:	1ae0      	subs	r0, r4, r3
 800d226:	429c      	cmp	r4, r3
 800d228:	d10e      	bne.n	800d248 <__mcmp+0x2c>
 800d22a:	3214      	adds	r2, #20
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	3114      	adds	r1, #20
 800d230:	0014      	movs	r4, r2
 800d232:	18c9      	adds	r1, r1, r3
 800d234:	18d2      	adds	r2, r2, r3
 800d236:	3a04      	subs	r2, #4
 800d238:	3904      	subs	r1, #4
 800d23a:	6815      	ldr	r5, [r2, #0]
 800d23c:	680b      	ldr	r3, [r1, #0]
 800d23e:	429d      	cmp	r5, r3
 800d240:	d003      	beq.n	800d24a <__mcmp+0x2e>
 800d242:	2001      	movs	r0, #1
 800d244:	429d      	cmp	r5, r3
 800d246:	d303      	bcc.n	800d250 <__mcmp+0x34>
 800d248:	bd30      	pop	{r4, r5, pc}
 800d24a:	4294      	cmp	r4, r2
 800d24c:	d3f3      	bcc.n	800d236 <__mcmp+0x1a>
 800d24e:	e7fb      	b.n	800d248 <__mcmp+0x2c>
 800d250:	4240      	negs	r0, r0
 800d252:	e7f9      	b.n	800d248 <__mcmp+0x2c>

0800d254 <__mdiff>:
 800d254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d256:	000e      	movs	r6, r1
 800d258:	0007      	movs	r7, r0
 800d25a:	0011      	movs	r1, r2
 800d25c:	0030      	movs	r0, r6
 800d25e:	b087      	sub	sp, #28
 800d260:	0014      	movs	r4, r2
 800d262:	f7ff ffdb 	bl	800d21c <__mcmp>
 800d266:	1e05      	subs	r5, r0, #0
 800d268:	d110      	bne.n	800d28c <__mdiff+0x38>
 800d26a:	0001      	movs	r1, r0
 800d26c:	0038      	movs	r0, r7
 800d26e:	f7ff fd53 	bl	800cd18 <_Balloc>
 800d272:	1e02      	subs	r2, r0, #0
 800d274:	d104      	bne.n	800d280 <__mdiff+0x2c>
 800d276:	4b3f      	ldr	r3, [pc, #252]	; (800d374 <__mdiff+0x120>)
 800d278:	483f      	ldr	r0, [pc, #252]	; (800d378 <__mdiff+0x124>)
 800d27a:	4940      	ldr	r1, [pc, #256]	; (800d37c <__mdiff+0x128>)
 800d27c:	f003 f810 	bl	80102a0 <__assert_func>
 800d280:	2301      	movs	r3, #1
 800d282:	6145      	str	r5, [r0, #20]
 800d284:	6103      	str	r3, [r0, #16]
 800d286:	0010      	movs	r0, r2
 800d288:	b007      	add	sp, #28
 800d28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d28c:	2301      	movs	r3, #1
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	2800      	cmp	r0, #0
 800d292:	db04      	blt.n	800d29e <__mdiff+0x4a>
 800d294:	0023      	movs	r3, r4
 800d296:	0034      	movs	r4, r6
 800d298:	001e      	movs	r6, r3
 800d29a:	2300      	movs	r3, #0
 800d29c:	9301      	str	r3, [sp, #4]
 800d29e:	0038      	movs	r0, r7
 800d2a0:	6861      	ldr	r1, [r4, #4]
 800d2a2:	f7ff fd39 	bl	800cd18 <_Balloc>
 800d2a6:	1e02      	subs	r2, r0, #0
 800d2a8:	d103      	bne.n	800d2b2 <__mdiff+0x5e>
 800d2aa:	4b32      	ldr	r3, [pc, #200]	; (800d374 <__mdiff+0x120>)
 800d2ac:	4832      	ldr	r0, [pc, #200]	; (800d378 <__mdiff+0x124>)
 800d2ae:	4934      	ldr	r1, [pc, #208]	; (800d380 <__mdiff+0x12c>)
 800d2b0:	e7e4      	b.n	800d27c <__mdiff+0x28>
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	2700      	movs	r7, #0
 800d2b6:	60c3      	str	r3, [r0, #12]
 800d2b8:	6920      	ldr	r0, [r4, #16]
 800d2ba:	3414      	adds	r4, #20
 800d2bc:	0083      	lsls	r3, r0, #2
 800d2be:	18e3      	adds	r3, r4, r3
 800d2c0:	0021      	movs	r1, r4
 800d2c2:	9401      	str	r4, [sp, #4]
 800d2c4:	0034      	movs	r4, r6
 800d2c6:	9302      	str	r3, [sp, #8]
 800d2c8:	6933      	ldr	r3, [r6, #16]
 800d2ca:	3414      	adds	r4, #20
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	18e3      	adds	r3, r4, r3
 800d2d0:	9303      	str	r3, [sp, #12]
 800d2d2:	0013      	movs	r3, r2
 800d2d4:	3314      	adds	r3, #20
 800d2d6:	469c      	mov	ip, r3
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	9104      	str	r1, [sp, #16]
 800d2dc:	9b04      	ldr	r3, [sp, #16]
 800d2de:	cc02      	ldmia	r4!, {r1}
 800d2e0:	cb20      	ldmia	r3!, {r5}
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	b2ab      	uxth	r3, r5
 800d2e6:	19df      	adds	r7, r3, r7
 800d2e8:	b28b      	uxth	r3, r1
 800d2ea:	1afb      	subs	r3, r7, r3
 800d2ec:	0c09      	lsrs	r1, r1, #16
 800d2ee:	0c2d      	lsrs	r5, r5, #16
 800d2f0:	1a6d      	subs	r5, r5, r1
 800d2f2:	1419      	asrs	r1, r3, #16
 800d2f4:	1869      	adds	r1, r5, r1
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	140f      	asrs	r7, r1, #16
 800d2fa:	0409      	lsls	r1, r1, #16
 800d2fc:	4319      	orrs	r1, r3
 800d2fe:	4663      	mov	r3, ip
 800d300:	c302      	stmia	r3!, {r1}
 800d302:	469c      	mov	ip, r3
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	42a3      	cmp	r3, r4
 800d308:	d8e8      	bhi.n	800d2dc <__mdiff+0x88>
 800d30a:	0031      	movs	r1, r6
 800d30c:	9c03      	ldr	r4, [sp, #12]
 800d30e:	3115      	adds	r1, #21
 800d310:	2304      	movs	r3, #4
 800d312:	428c      	cmp	r4, r1
 800d314:	d304      	bcc.n	800d320 <__mdiff+0xcc>
 800d316:	1ba3      	subs	r3, r4, r6
 800d318:	3b15      	subs	r3, #21
 800d31a:	089b      	lsrs	r3, r3, #2
 800d31c:	3301      	adds	r3, #1
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	9901      	ldr	r1, [sp, #4]
 800d322:	18cd      	adds	r5, r1, r3
 800d324:	9905      	ldr	r1, [sp, #20]
 800d326:	002e      	movs	r6, r5
 800d328:	18cb      	adds	r3, r1, r3
 800d32a:	469c      	mov	ip, r3
 800d32c:	9902      	ldr	r1, [sp, #8]
 800d32e:	428e      	cmp	r6, r1
 800d330:	d310      	bcc.n	800d354 <__mdiff+0x100>
 800d332:	9e02      	ldr	r6, [sp, #8]
 800d334:	1ee9      	subs	r1, r5, #3
 800d336:	2400      	movs	r4, #0
 800d338:	428e      	cmp	r6, r1
 800d33a:	d304      	bcc.n	800d346 <__mdiff+0xf2>
 800d33c:	0031      	movs	r1, r6
 800d33e:	3103      	adds	r1, #3
 800d340:	1b49      	subs	r1, r1, r5
 800d342:	0889      	lsrs	r1, r1, #2
 800d344:	008c      	lsls	r4, r1, #2
 800d346:	191b      	adds	r3, r3, r4
 800d348:	3b04      	subs	r3, #4
 800d34a:	6819      	ldr	r1, [r3, #0]
 800d34c:	2900      	cmp	r1, #0
 800d34e:	d00f      	beq.n	800d370 <__mdiff+0x11c>
 800d350:	6110      	str	r0, [r2, #16]
 800d352:	e798      	b.n	800d286 <__mdiff+0x32>
 800d354:	ce02      	ldmia	r6!, {r1}
 800d356:	b28c      	uxth	r4, r1
 800d358:	19e4      	adds	r4, r4, r7
 800d35a:	0c0f      	lsrs	r7, r1, #16
 800d35c:	1421      	asrs	r1, r4, #16
 800d35e:	1879      	adds	r1, r7, r1
 800d360:	b2a4      	uxth	r4, r4
 800d362:	140f      	asrs	r7, r1, #16
 800d364:	0409      	lsls	r1, r1, #16
 800d366:	4321      	orrs	r1, r4
 800d368:	4664      	mov	r4, ip
 800d36a:	c402      	stmia	r4!, {r1}
 800d36c:	46a4      	mov	ip, r4
 800d36e:	e7dd      	b.n	800d32c <__mdiff+0xd8>
 800d370:	3801      	subs	r0, #1
 800d372:	e7e9      	b.n	800d348 <__mdiff+0xf4>
 800d374:	080149d1 	.word	0x080149d1
 800d378:	08014a42 	.word	0x08014a42
 800d37c:	00000237 	.word	0x00000237
 800d380:	00000245 	.word	0x00000245

0800d384 <__ulp>:
 800d384:	2000      	movs	r0, #0
 800d386:	4b0b      	ldr	r3, [pc, #44]	; (800d3b4 <__ulp+0x30>)
 800d388:	4019      	ands	r1, r3
 800d38a:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <__ulp+0x34>)
 800d38c:	18c9      	adds	r1, r1, r3
 800d38e:	4281      	cmp	r1, r0
 800d390:	dc06      	bgt.n	800d3a0 <__ulp+0x1c>
 800d392:	4249      	negs	r1, r1
 800d394:	150b      	asrs	r3, r1, #20
 800d396:	2b13      	cmp	r3, #19
 800d398:	dc03      	bgt.n	800d3a2 <__ulp+0x1e>
 800d39a:	2180      	movs	r1, #128	; 0x80
 800d39c:	0309      	lsls	r1, r1, #12
 800d39e:	4119      	asrs	r1, r3
 800d3a0:	4770      	bx	lr
 800d3a2:	3b14      	subs	r3, #20
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	2b1e      	cmp	r3, #30
 800d3a8:	dc02      	bgt.n	800d3b0 <__ulp+0x2c>
 800d3aa:	2080      	movs	r0, #128	; 0x80
 800d3ac:	0600      	lsls	r0, r0, #24
 800d3ae:	40d8      	lsrs	r0, r3
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	e7f5      	b.n	800d3a0 <__ulp+0x1c>
 800d3b4:	7ff00000 	.word	0x7ff00000
 800d3b8:	fcc00000 	.word	0xfcc00000

0800d3bc <__b2d>:
 800d3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3be:	0006      	movs	r6, r0
 800d3c0:	6903      	ldr	r3, [r0, #16]
 800d3c2:	3614      	adds	r6, #20
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	18f3      	adds	r3, r6, r3
 800d3c8:	1f1d      	subs	r5, r3, #4
 800d3ca:	682c      	ldr	r4, [r5, #0]
 800d3cc:	000f      	movs	r7, r1
 800d3ce:	0020      	movs	r0, r4
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f7ff fd63 	bl	800ce9c <__hi0bits>
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	1a12      	subs	r2, r2, r0
 800d3da:	603a      	str	r2, [r7, #0]
 800d3dc:	0003      	movs	r3, r0
 800d3de:	4a1c      	ldr	r2, [pc, #112]	; (800d450 <__b2d+0x94>)
 800d3e0:	280a      	cmp	r0, #10
 800d3e2:	dc15      	bgt.n	800d410 <__b2d+0x54>
 800d3e4:	210b      	movs	r1, #11
 800d3e6:	0027      	movs	r7, r4
 800d3e8:	1a09      	subs	r1, r1, r0
 800d3ea:	40cf      	lsrs	r7, r1
 800d3ec:	433a      	orrs	r2, r7
 800d3ee:	468c      	mov	ip, r1
 800d3f0:	0011      	movs	r1, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	42ae      	cmp	r6, r5
 800d3f6:	d202      	bcs.n	800d3fe <__b2d+0x42>
 800d3f8:	9a01      	ldr	r2, [sp, #4]
 800d3fa:	3a08      	subs	r2, #8
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	3315      	adds	r3, #21
 800d400:	409c      	lsls	r4, r3
 800d402:	4663      	mov	r3, ip
 800d404:	0027      	movs	r7, r4
 800d406:	40da      	lsrs	r2, r3
 800d408:	4317      	orrs	r7, r2
 800d40a:	0038      	movs	r0, r7
 800d40c:	b003      	add	sp, #12
 800d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d410:	2700      	movs	r7, #0
 800d412:	42ae      	cmp	r6, r5
 800d414:	d202      	bcs.n	800d41c <__b2d+0x60>
 800d416:	9d01      	ldr	r5, [sp, #4]
 800d418:	3d08      	subs	r5, #8
 800d41a:	682f      	ldr	r7, [r5, #0]
 800d41c:	210b      	movs	r1, #11
 800d41e:	4249      	negs	r1, r1
 800d420:	468c      	mov	ip, r1
 800d422:	449c      	add	ip, r3
 800d424:	2b0b      	cmp	r3, #11
 800d426:	d010      	beq.n	800d44a <__b2d+0x8e>
 800d428:	4661      	mov	r1, ip
 800d42a:	2320      	movs	r3, #32
 800d42c:	408c      	lsls	r4, r1
 800d42e:	1a5b      	subs	r3, r3, r1
 800d430:	0039      	movs	r1, r7
 800d432:	40d9      	lsrs	r1, r3
 800d434:	430c      	orrs	r4, r1
 800d436:	4322      	orrs	r2, r4
 800d438:	0011      	movs	r1, r2
 800d43a:	2200      	movs	r2, #0
 800d43c:	42b5      	cmp	r5, r6
 800d43e:	d901      	bls.n	800d444 <__b2d+0x88>
 800d440:	3d04      	subs	r5, #4
 800d442:	682a      	ldr	r2, [r5, #0]
 800d444:	4664      	mov	r4, ip
 800d446:	40a7      	lsls	r7, r4
 800d448:	e7dd      	b.n	800d406 <__b2d+0x4a>
 800d44a:	4322      	orrs	r2, r4
 800d44c:	0011      	movs	r1, r2
 800d44e:	e7dc      	b.n	800d40a <__b2d+0x4e>
 800d450:	3ff00000 	.word	0x3ff00000

0800d454 <__d2b>:
 800d454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d456:	2101      	movs	r1, #1
 800d458:	0014      	movs	r4, r2
 800d45a:	001d      	movs	r5, r3
 800d45c:	9f08      	ldr	r7, [sp, #32]
 800d45e:	f7ff fc5b 	bl	800cd18 <_Balloc>
 800d462:	1e06      	subs	r6, r0, #0
 800d464:	d105      	bne.n	800d472 <__d2b+0x1e>
 800d466:	0032      	movs	r2, r6
 800d468:	4b24      	ldr	r3, [pc, #144]	; (800d4fc <__d2b+0xa8>)
 800d46a:	4825      	ldr	r0, [pc, #148]	; (800d500 <__d2b+0xac>)
 800d46c:	4925      	ldr	r1, [pc, #148]	; (800d504 <__d2b+0xb0>)
 800d46e:	f002 ff17 	bl	80102a0 <__assert_func>
 800d472:	032b      	lsls	r3, r5, #12
 800d474:	006d      	lsls	r5, r5, #1
 800d476:	0b1b      	lsrs	r3, r3, #12
 800d478:	0d6d      	lsrs	r5, r5, #21
 800d47a:	d125      	bne.n	800d4c8 <__d2b+0x74>
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	2c00      	cmp	r4, #0
 800d480:	d028      	beq.n	800d4d4 <__d2b+0x80>
 800d482:	4668      	mov	r0, sp
 800d484:	9400      	str	r4, [sp, #0]
 800d486:	f7ff fd23 	bl	800ced0 <__lo0bits>
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	9900      	ldr	r1, [sp, #0]
 800d48e:	2800      	cmp	r0, #0
 800d490:	d01e      	beq.n	800d4d0 <__d2b+0x7c>
 800d492:	2220      	movs	r2, #32
 800d494:	001c      	movs	r4, r3
 800d496:	1a12      	subs	r2, r2, r0
 800d498:	4094      	lsls	r4, r2
 800d49a:	0022      	movs	r2, r4
 800d49c:	40c3      	lsrs	r3, r0
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	6172      	str	r2, [r6, #20]
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	9c01      	ldr	r4, [sp, #4]
 800d4a6:	61b4      	str	r4, [r6, #24]
 800d4a8:	1e63      	subs	r3, r4, #1
 800d4aa:	419c      	sbcs	r4, r3
 800d4ac:	3401      	adds	r4, #1
 800d4ae:	6134      	str	r4, [r6, #16]
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	d017      	beq.n	800d4e4 <__d2b+0x90>
 800d4b4:	2435      	movs	r4, #53	; 0x35
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <__d2b+0xb4>)
 800d4b8:	18ed      	adds	r5, r5, r3
 800d4ba:	182d      	adds	r5, r5, r0
 800d4bc:	603d      	str	r5, [r7, #0]
 800d4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c0:	1a24      	subs	r4, r4, r0
 800d4c2:	601c      	str	r4, [r3, #0]
 800d4c4:	0030      	movs	r0, r6
 800d4c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4c8:	2280      	movs	r2, #128	; 0x80
 800d4ca:	0352      	lsls	r2, r2, #13
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	e7d5      	b.n	800d47c <__d2b+0x28>
 800d4d0:	6171      	str	r1, [r6, #20]
 800d4d2:	e7e7      	b.n	800d4a4 <__d2b+0x50>
 800d4d4:	a801      	add	r0, sp, #4
 800d4d6:	f7ff fcfb 	bl	800ced0 <__lo0bits>
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	2401      	movs	r4, #1
 800d4de:	6173      	str	r3, [r6, #20]
 800d4e0:	3020      	adds	r0, #32
 800d4e2:	e7e4      	b.n	800d4ae <__d2b+0x5a>
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <__d2b+0xb8>)
 800d4e6:	18c0      	adds	r0, r0, r3
 800d4e8:	4b09      	ldr	r3, [pc, #36]	; (800d510 <__d2b+0xbc>)
 800d4ea:	6038      	str	r0, [r7, #0]
 800d4ec:	18e3      	adds	r3, r4, r3
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	18f3      	adds	r3, r6, r3
 800d4f2:	6958      	ldr	r0, [r3, #20]
 800d4f4:	f7ff fcd2 	bl	800ce9c <__hi0bits>
 800d4f8:	0164      	lsls	r4, r4, #5
 800d4fa:	e7e0      	b.n	800d4be <__d2b+0x6a>
 800d4fc:	080149d1 	.word	0x080149d1
 800d500:	08014a42 	.word	0x08014a42
 800d504:	0000030f 	.word	0x0000030f
 800d508:	fffffbcd 	.word	0xfffffbcd
 800d50c:	fffffbce 	.word	0xfffffbce
 800d510:	3fffffff 	.word	0x3fffffff

0800d514 <__ratio>:
 800d514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d516:	b087      	sub	sp, #28
 800d518:	000f      	movs	r7, r1
 800d51a:	a904      	add	r1, sp, #16
 800d51c:	0006      	movs	r6, r0
 800d51e:	f7ff ff4d 	bl	800d3bc <__b2d>
 800d522:	9000      	str	r0, [sp, #0]
 800d524:	9101      	str	r1, [sp, #4]
 800d526:	9c00      	ldr	r4, [sp, #0]
 800d528:	9d01      	ldr	r5, [sp, #4]
 800d52a:	0038      	movs	r0, r7
 800d52c:	a905      	add	r1, sp, #20
 800d52e:	f7ff ff45 	bl	800d3bc <__b2d>
 800d532:	9002      	str	r0, [sp, #8]
 800d534:	9103      	str	r1, [sp, #12]
 800d536:	9a02      	ldr	r2, [sp, #8]
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	6930      	ldr	r0, [r6, #16]
 800d53c:	6939      	ldr	r1, [r7, #16]
 800d53e:	9e04      	ldr	r6, [sp, #16]
 800d540:	1a40      	subs	r0, r0, r1
 800d542:	9905      	ldr	r1, [sp, #20]
 800d544:	0140      	lsls	r0, r0, #5
 800d546:	1a71      	subs	r1, r6, r1
 800d548:	1841      	adds	r1, r0, r1
 800d54a:	0508      	lsls	r0, r1, #20
 800d54c:	2900      	cmp	r1, #0
 800d54e:	dd07      	ble.n	800d560 <__ratio+0x4c>
 800d550:	9901      	ldr	r1, [sp, #4]
 800d552:	1845      	adds	r5, r0, r1
 800d554:	0020      	movs	r0, r4
 800d556:	0029      	movs	r1, r5
 800d558:	f7f3 fc8e 	bl	8000e78 <__aeabi_ddiv>
 800d55c:	b007      	add	sp, #28
 800d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d560:	9903      	ldr	r1, [sp, #12]
 800d562:	1a0b      	subs	r3, r1, r0
 800d564:	e7f6      	b.n	800d554 <__ratio+0x40>

0800d566 <__copybits>:
 800d566:	b570      	push	{r4, r5, r6, lr}
 800d568:	0014      	movs	r4, r2
 800d56a:	0005      	movs	r5, r0
 800d56c:	3901      	subs	r1, #1
 800d56e:	6913      	ldr	r3, [r2, #16]
 800d570:	1149      	asrs	r1, r1, #5
 800d572:	3101      	adds	r1, #1
 800d574:	0089      	lsls	r1, r1, #2
 800d576:	3414      	adds	r4, #20
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	1841      	adds	r1, r0, r1
 800d57c:	18e3      	adds	r3, r4, r3
 800d57e:	42a3      	cmp	r3, r4
 800d580:	d80d      	bhi.n	800d59e <__copybits+0x38>
 800d582:	0014      	movs	r4, r2
 800d584:	3411      	adds	r4, #17
 800d586:	2500      	movs	r5, #0
 800d588:	429c      	cmp	r4, r3
 800d58a:	d803      	bhi.n	800d594 <__copybits+0x2e>
 800d58c:	1a9b      	subs	r3, r3, r2
 800d58e:	3b11      	subs	r3, #17
 800d590:	089b      	lsrs	r3, r3, #2
 800d592:	009d      	lsls	r5, r3, #2
 800d594:	2300      	movs	r3, #0
 800d596:	1940      	adds	r0, r0, r5
 800d598:	4281      	cmp	r1, r0
 800d59a:	d803      	bhi.n	800d5a4 <__copybits+0x3e>
 800d59c:	bd70      	pop	{r4, r5, r6, pc}
 800d59e:	cc40      	ldmia	r4!, {r6}
 800d5a0:	c540      	stmia	r5!, {r6}
 800d5a2:	e7ec      	b.n	800d57e <__copybits+0x18>
 800d5a4:	c008      	stmia	r0!, {r3}
 800d5a6:	e7f7      	b.n	800d598 <__copybits+0x32>

0800d5a8 <__any_on>:
 800d5a8:	0002      	movs	r2, r0
 800d5aa:	6900      	ldr	r0, [r0, #16]
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	3214      	adds	r2, #20
 800d5b0:	114b      	asrs	r3, r1, #5
 800d5b2:	4298      	cmp	r0, r3
 800d5b4:	db13      	blt.n	800d5de <__any_on+0x36>
 800d5b6:	dd0c      	ble.n	800d5d2 <__any_on+0x2a>
 800d5b8:	241f      	movs	r4, #31
 800d5ba:	0008      	movs	r0, r1
 800d5bc:	4020      	ands	r0, r4
 800d5be:	4221      	tst	r1, r4
 800d5c0:	d007      	beq.n	800d5d2 <__any_on+0x2a>
 800d5c2:	0099      	lsls	r1, r3, #2
 800d5c4:	588c      	ldr	r4, [r1, r2]
 800d5c6:	0021      	movs	r1, r4
 800d5c8:	40c1      	lsrs	r1, r0
 800d5ca:	4081      	lsls	r1, r0
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	428c      	cmp	r4, r1
 800d5d0:	d104      	bne.n	800d5dc <__any_on+0x34>
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	18d3      	adds	r3, r2, r3
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d803      	bhi.n	800d5e2 <__any_on+0x3a>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	0003      	movs	r3, r0
 800d5e0:	e7f7      	b.n	800d5d2 <__any_on+0x2a>
 800d5e2:	3b04      	subs	r3, #4
 800d5e4:	6819      	ldr	r1, [r3, #0]
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d0f5      	beq.n	800d5d6 <__any_on+0x2e>
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7f6      	b.n	800d5dc <__any_on+0x34>

0800d5ee <__ascii_wctomb>:
 800d5ee:	0003      	movs	r3, r0
 800d5f0:	1e08      	subs	r0, r1, #0
 800d5f2:	d005      	beq.n	800d600 <__ascii_wctomb+0x12>
 800d5f4:	2aff      	cmp	r2, #255	; 0xff
 800d5f6:	d904      	bls.n	800d602 <__ascii_wctomb+0x14>
 800d5f8:	228a      	movs	r2, #138	; 0x8a
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	4240      	negs	r0, r0
 800d600:	4770      	bx	lr
 800d602:	2001      	movs	r0, #1
 800d604:	700a      	strb	r2, [r1, #0]
 800d606:	e7fb      	b.n	800d600 <__ascii_wctomb+0x12>

0800d608 <_svfprintf_r>:
 800d608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d60a:	b0d9      	sub	sp, #356	; 0x164
 800d60c:	001c      	movs	r4, r3
 800d60e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d610:	9208      	str	r2, [sp, #32]
 800d612:	900a      	str	r0, [sp, #40]	; 0x28
 800d614:	f002 fdae 	bl	8010174 <_localeconv_r>
 800d618:	6803      	ldr	r3, [r0, #0]
 800d61a:	0018      	movs	r0, r3
 800d61c:	931c      	str	r3, [sp, #112]	; 0x70
 800d61e:	f7f2 fd71 	bl	8000104 <strlen>
 800d622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d624:	9016      	str	r0, [sp, #88]	; 0x58
 800d626:	899b      	ldrh	r3, [r3, #12]
 800d628:	061b      	lsls	r3, r3, #24
 800d62a:	d517      	bpl.n	800d65c <_svfprintf_r+0x54>
 800d62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d113      	bne.n	800d65c <_svfprintf_r+0x54>
 800d634:	2140      	movs	r1, #64	; 0x40
 800d636:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d638:	f7fd fa94 	bl	800ab64 <_malloc_r>
 800d63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d63e:	6018      	str	r0, [r3, #0]
 800d640:	6118      	str	r0, [r3, #16]
 800d642:	2800      	cmp	r0, #0
 800d644:	d107      	bne.n	800d656 <_svfprintf_r+0x4e>
 800d646:	230c      	movs	r3, #12
 800d648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	3b0d      	subs	r3, #13
 800d64e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d650:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d652:	b059      	add	sp, #356	; 0x164
 800d654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d656:	2340      	movs	r3, #64	; 0x40
 800d658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d65a:	6153      	str	r3, [r2, #20]
 800d65c:	2300      	movs	r3, #0
 800d65e:	2200      	movs	r2, #0
 800d660:	932e      	str	r3, [sp, #184]	; 0xb8
 800d662:	932d      	str	r3, [sp, #180]	; 0xb4
 800d664:	930e      	str	r3, [sp, #56]	; 0x38
 800d666:	2300      	movs	r3, #0
 800d668:	9214      	str	r2, [sp, #80]	; 0x50
 800d66a:	9315      	str	r3, [sp, #84]	; 0x54
 800d66c:	2300      	movs	r3, #0
 800d66e:	af2f      	add	r7, sp, #188	; 0xbc
 800d670:	972c      	str	r7, [sp, #176]	; 0xb0
 800d672:	931f      	str	r3, [sp, #124]	; 0x7c
 800d674:	931e      	str	r3, [sp, #120]	; 0x78
 800d676:	9312      	str	r3, [sp, #72]	; 0x48
 800d678:	931b      	str	r3, [sp, #108]	; 0x6c
 800d67a:	931d      	str	r3, [sp, #116]	; 0x74
 800d67c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d67e:	9d08      	ldr	r5, [sp, #32]
 800d680:	782b      	ldrb	r3, [r5, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <_svfprintf_r+0x84>
 800d686:	2b25      	cmp	r3, #37	; 0x25
 800d688:	d000      	beq.n	800d68c <_svfprintf_r+0x84>
 800d68a:	e091      	b.n	800d7b0 <_svfprintf_r+0x1a8>
 800d68c:	9b08      	ldr	r3, [sp, #32]
 800d68e:	1aee      	subs	r6, r5, r3
 800d690:	429d      	cmp	r5, r3
 800d692:	d016      	beq.n	800d6c2 <_svfprintf_r+0xba>
 800d694:	603b      	str	r3, [r7, #0]
 800d696:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d698:	607e      	str	r6, [r7, #4]
 800d69a:	199b      	adds	r3, r3, r6
 800d69c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d69e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6a6:	2b07      	cmp	r3, #7
 800d6a8:	dd08      	ble.n	800d6bc <_svfprintf_r+0xb4>
 800d6aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800d6b0:	f004 f83a 	bl	8011728 <__ssprint_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d000      	beq.n	800d6ba <_svfprintf_r+0xb2>
 800d6b8:	e1cf      	b.n	800da5a <_svfprintf_r+0x452>
 800d6ba:	af2f      	add	r7, sp, #188	; 0xbc
 800d6bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6be:	199b      	adds	r3, r3, r6
 800d6c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6c2:	782b      	ldrb	r3, [r5, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <_svfprintf_r+0xc4>
 800d6c8:	f001 f99e 	bl	800ea08 <_svfprintf_r+0x1400>
 800d6cc:	221b      	movs	r2, #27
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	a91e      	add	r1, sp, #120	; 0x78
 800d6d2:	1852      	adds	r2, r2, r1
 800d6d4:	7013      	strb	r3, [r2, #0]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	001e      	movs	r6, r3
 800d6da:	4252      	negs	r2, r2
 800d6dc:	3501      	adds	r5, #1
 800d6de:	9209      	str	r2, [sp, #36]	; 0x24
 800d6e0:	9318      	str	r3, [sp, #96]	; 0x60
 800d6e2:	1c6b      	adds	r3, r5, #1
 800d6e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d6e6:	782b      	ldrb	r3, [r5, #0]
 800d6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d6ec:	3820      	subs	r0, #32
 800d6ee:	285a      	cmp	r0, #90	; 0x5a
 800d6f0:	d901      	bls.n	800d6f6 <_svfprintf_r+0xee>
 800d6f2:	f000 fe20 	bl	800e336 <_svfprintf_r+0xd2e>
 800d6f6:	f7f2 fd17 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d6fa:	0078      	.short	0x0078
 800d6fc:	061e061e 	.word	0x061e061e
 800d700:	061e0082 	.word	0x061e0082
 800d704:	061e061e 	.word	0x061e061e
 800d708:	061e005d 	.word	0x061e005d
 800d70c:	0084061e 	.word	0x0084061e
 800d710:	061e008c 	.word	0x061e008c
 800d714:	0091008a 	.word	0x0091008a
 800d718:	00b2061e 	.word	0x00b2061e
 800d71c:	00b400b4 	.word	0x00b400b4
 800d720:	00b400b4 	.word	0x00b400b4
 800d724:	00b400b4 	.word	0x00b400b4
 800d728:	00b400b4 	.word	0x00b400b4
 800d72c:	061e00b4 	.word	0x061e00b4
 800d730:	061e061e 	.word	0x061e061e
 800d734:	061e061e 	.word	0x061e061e
 800d738:	061e061e 	.word	0x061e061e
 800d73c:	061e013b 	.word	0x061e013b
 800d740:	00f400e0 	.word	0x00f400e0
 800d744:	013b013b 	.word	0x013b013b
 800d748:	061e013b 	.word	0x061e013b
 800d74c:	061e061e 	.word	0x061e061e
 800d750:	00c7061e 	.word	0x00c7061e
 800d754:	061e061e 	.word	0x061e061e
 800d758:	061e04c7 	.word	0x061e04c7
 800d75c:	061e061e 	.word	0x061e061e
 800d760:	061e050a 	.word	0x061e050a
 800d764:	061e052a 	.word	0x061e052a
 800d768:	055c061e 	.word	0x055c061e
 800d76c:	061e061e 	.word	0x061e061e
 800d770:	061e061e 	.word	0x061e061e
 800d774:	061e061e 	.word	0x061e061e
 800d778:	061e061e 	.word	0x061e061e
 800d77c:	061e013b 	.word	0x061e013b
 800d780:	00f600e0 	.word	0x00f600e0
 800d784:	013b013b 	.word	0x013b013b
 800d788:	00c9013b 	.word	0x00c9013b
 800d78c:	00dc00f6 	.word	0x00dc00f6
 800d790:	00d5061e 	.word	0x00d5061e
 800d794:	04a7061e 	.word	0x04a7061e
 800d798:	04fa04c9 	.word	0x04fa04c9
 800d79c:	061e00dc 	.word	0x061e00dc
 800d7a0:	0080050a 	.word	0x0080050a
 800d7a4:	061e052c 	.word	0x061e052c
 800d7a8:	057c061e 	.word	0x057c061e
 800d7ac:	0080061e 	.word	0x0080061e
 800d7b0:	3501      	adds	r5, #1
 800d7b2:	e765      	b.n	800d680 <_svfprintf_r+0x78>
 800d7b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7b6:	f002 fcdd 	bl	8010174 <_localeconv_r>
 800d7ba:	6843      	ldr	r3, [r0, #4]
 800d7bc:	0018      	movs	r0, r3
 800d7be:	931d      	str	r3, [sp, #116]	; 0x74
 800d7c0:	f7f2 fca0 	bl	8000104 <strlen>
 800d7c4:	901b      	str	r0, [sp, #108]	; 0x6c
 800d7c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7c8:	f002 fcd4 	bl	8010174 <_localeconv_r>
 800d7cc:	6883      	ldr	r3, [r0, #8]
 800d7ce:	9312      	str	r3, [sp, #72]	; 0x48
 800d7d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d011      	beq.n	800d7fa <_svfprintf_r+0x1f2>
 800d7d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00e      	beq.n	800d7fa <_svfprintf_r+0x1f2>
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00b      	beq.n	800d7fa <_svfprintf_r+0x1f2>
 800d7e2:	2380      	movs	r3, #128	; 0x80
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	431e      	orrs	r6, r3
 800d7e8:	e007      	b.n	800d7fa <_svfprintf_r+0x1f2>
 800d7ea:	231b      	movs	r3, #27
 800d7ec:	aa1e      	add	r2, sp, #120	; 0x78
 800d7ee:	189b      	adds	r3, r3, r2
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	d101      	bne.n	800d7fa <_svfprintf_r+0x1f2>
 800d7f6:	3220      	adds	r2, #32
 800d7f8:	701a      	strb	r2, [r3, #0]
 800d7fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d7fc:	e771      	b.n	800d6e2 <_svfprintf_r+0xda>
 800d7fe:	2301      	movs	r3, #1
 800d800:	e7f1      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d802:	cc08      	ldmia	r4!, {r3}
 800d804:	9318      	str	r3, [sp, #96]	; 0x60
 800d806:	2b00      	cmp	r3, #0
 800d808:	daf7      	bge.n	800d7fa <_svfprintf_r+0x1f2>
 800d80a:	425b      	negs	r3, r3
 800d80c:	9318      	str	r3, [sp, #96]	; 0x60
 800d80e:	2304      	movs	r3, #4
 800d810:	e7e9      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d812:	231b      	movs	r3, #27
 800d814:	aa1e      	add	r2, sp, #120	; 0x78
 800d816:	189b      	adds	r3, r3, r2
 800d818:	222b      	movs	r2, #43	; 0x2b
 800d81a:	e7ed      	b.n	800d7f8 <_svfprintf_r+0x1f0>
 800d81c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d81e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d820:	7812      	ldrb	r2, [r2, #0]
 800d822:	3301      	adds	r3, #1
 800d824:	920f      	str	r2, [sp, #60]	; 0x3c
 800d826:	2a2a      	cmp	r2, #42	; 0x2a
 800d828:	d010      	beq.n	800d84c <_svfprintf_r+0x244>
 800d82a:	2200      	movs	r2, #0
 800d82c:	9209      	str	r2, [sp, #36]	; 0x24
 800d82e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d830:	9313      	str	r3, [sp, #76]	; 0x4c
 800d832:	3a30      	subs	r2, #48	; 0x30
 800d834:	2a09      	cmp	r2, #9
 800d836:	d900      	bls.n	800d83a <_svfprintf_r+0x232>
 800d838:	e757      	b.n	800d6ea <_svfprintf_r+0xe2>
 800d83a:	200a      	movs	r0, #10
 800d83c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d83e:	4341      	muls	r1, r0
 800d840:	188a      	adds	r2, r1, r2
 800d842:	9209      	str	r2, [sp, #36]	; 0x24
 800d844:	781a      	ldrb	r2, [r3, #0]
 800d846:	3301      	adds	r3, #1
 800d848:	920f      	str	r2, [sp, #60]	; 0x3c
 800d84a:	e7f0      	b.n	800d82e <_svfprintf_r+0x226>
 800d84c:	cc04      	ldmia	r4!, {r2}
 800d84e:	9209      	str	r2, [sp, #36]	; 0x24
 800d850:	2a00      	cmp	r2, #0
 800d852:	da02      	bge.n	800d85a <_svfprintf_r+0x252>
 800d854:	2201      	movs	r2, #1
 800d856:	4252      	negs	r2, r2
 800d858:	9209      	str	r2, [sp, #36]	; 0x24
 800d85a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d85c:	e7cd      	b.n	800d7fa <_svfprintf_r+0x1f2>
 800d85e:	2380      	movs	r3, #128	; 0x80
 800d860:	e7c1      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d862:	2200      	movs	r2, #0
 800d864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d866:	9218      	str	r2, [sp, #96]	; 0x60
 800d868:	210a      	movs	r1, #10
 800d86a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d86c:	434a      	muls	r2, r1
 800d86e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d870:	3930      	subs	r1, #48	; 0x30
 800d872:	188a      	adds	r2, r1, r2
 800d874:	9218      	str	r2, [sp, #96]	; 0x60
 800d876:	001a      	movs	r2, r3
 800d878:	7812      	ldrb	r2, [r2, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d87e:	3a30      	subs	r2, #48	; 0x30
 800d880:	9313      	str	r3, [sp, #76]	; 0x4c
 800d882:	2a09      	cmp	r2, #9
 800d884:	d9f0      	bls.n	800d868 <_svfprintf_r+0x260>
 800d886:	e730      	b.n	800d6ea <_svfprintf_r+0xe2>
 800d888:	2308      	movs	r3, #8
 800d88a:	e7ac      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b68      	cmp	r3, #104	; 0x68
 800d892:	d105      	bne.n	800d8a0 <_svfprintf_r+0x298>
 800d894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d896:	3301      	adds	r3, #1
 800d898:	9313      	str	r3, [sp, #76]	; 0x4c
 800d89a:	2380      	movs	r3, #128	; 0x80
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	e7a2      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d8a0:	2340      	movs	r3, #64	; 0x40
 800d8a2:	e7a0      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d8a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b6c      	cmp	r3, #108	; 0x6c
 800d8aa:	d104      	bne.n	800d8b6 <_svfprintf_r+0x2ae>
 800d8ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8b2:	2320      	movs	r3, #32
 800d8b4:	e797      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d8b6:	2310      	movs	r3, #16
 800d8b8:	e795      	b.n	800d7e6 <_svfprintf_r+0x1de>
 800d8ba:	0021      	movs	r1, r4
 800d8bc:	c904      	ldmia	r1!, {r2}
 800d8be:	ab3f      	add	r3, sp, #252	; 0xfc
 800d8c0:	910d      	str	r1, [sp, #52]	; 0x34
 800d8c2:	211b      	movs	r1, #27
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	a81e      	add	r0, sp, #120	; 0x78
 800d8ca:	1809      	adds	r1, r1, r0
 800d8cc:	700a      	strb	r2, [r1, #0]
 800d8ce:	920c      	str	r2, [sp, #48]	; 0x30
 800d8d0:	3201      	adds	r2, #1
 800d8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	9308      	str	r3, [sp, #32]
 800d8d8:	0015      	movs	r5, r2
 800d8da:	9219      	str	r2, [sp, #100]	; 0x64
 800d8dc:	9210      	str	r2, [sp, #64]	; 0x40
 800d8de:	9211      	str	r2, [sp, #68]	; 0x44
 800d8e0:	e1f1      	b.n	800dcc6 <_svfprintf_r+0x6be>
 800d8e2:	2310      	movs	r3, #16
 800d8e4:	431e      	orrs	r6, r3
 800d8e6:	06b3      	lsls	r3, r6, #26
 800d8e8:	d531      	bpl.n	800d94e <_svfprintf_r+0x346>
 800d8ea:	2307      	movs	r3, #7
 800d8ec:	3407      	adds	r4, #7
 800d8ee:	439c      	bics	r4, r3
 800d8f0:	0022      	movs	r2, r4
 800d8f2:	ca18      	ldmia	r2!, {r3, r4}
 800d8f4:	9306      	str	r3, [sp, #24]
 800d8f6:	9407      	str	r4, [sp, #28]
 800d8f8:	920d      	str	r2, [sp, #52]	; 0x34
 800d8fa:	9a07      	ldr	r2, [sp, #28]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	da0b      	bge.n	800d91a <_svfprintf_r+0x312>
 800d902:	9c06      	ldr	r4, [sp, #24]
 800d904:	9d07      	ldr	r5, [sp, #28]
 800d906:	2200      	movs	r2, #0
 800d908:	4261      	negs	r1, r4
 800d90a:	41aa      	sbcs	r2, r5
 800d90c:	9106      	str	r1, [sp, #24]
 800d90e:	9207      	str	r2, [sp, #28]
 800d910:	221b      	movs	r2, #27
 800d912:	a91e      	add	r1, sp, #120	; 0x78
 800d914:	1852      	adds	r2, r2, r1
 800d916:	212d      	movs	r1, #45	; 0x2d
 800d918:	7011      	strb	r1, [r2, #0]
 800d91a:	9907      	ldr	r1, [sp, #28]
 800d91c:	9a06      	ldr	r2, [sp, #24]
 800d91e:	430a      	orrs	r2, r1
 800d920:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d922:	3101      	adds	r1, #1
 800d924:	d101      	bne.n	800d92a <_svfprintf_r+0x322>
 800d926:	f001 f87b 	bl	800ea20 <_svfprintf_r+0x1418>
 800d92a:	2180      	movs	r1, #128	; 0x80
 800d92c:	0034      	movs	r4, r6
 800d92e:	438c      	bics	r4, r1
 800d930:	2a00      	cmp	r2, #0
 800d932:	d001      	beq.n	800d938 <_svfprintf_r+0x330>
 800d934:	f001 f879 	bl	800ea2a <_svfprintf_r+0x1422>
 800d938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93a:	2a00      	cmp	r2, #0
 800d93c:	d101      	bne.n	800d942 <_svfprintf_r+0x33a>
 800d93e:	f000 fcef 	bl	800e320 <_svfprintf_r+0xd18>
 800d942:	2b01      	cmp	r3, #1
 800d944:	d001      	beq.n	800d94a <_svfprintf_r+0x342>
 800d946:	f001 f874 	bl	800ea32 <_svfprintf_r+0x142a>
 800d94a:	f000 fc79 	bl	800e240 <_svfprintf_r+0xc38>
 800d94e:	0022      	movs	r2, r4
 800d950:	ca08      	ldmia	r2!, {r3}
 800d952:	920d      	str	r2, [sp, #52]	; 0x34
 800d954:	06f2      	lsls	r2, r6, #27
 800d956:	d503      	bpl.n	800d960 <_svfprintf_r+0x358>
 800d958:	9306      	str	r3, [sp, #24]
 800d95a:	17db      	asrs	r3, r3, #31
 800d95c:	9307      	str	r3, [sp, #28]
 800d95e:	e7cc      	b.n	800d8fa <_svfprintf_r+0x2f2>
 800d960:	0672      	lsls	r2, r6, #25
 800d962:	d501      	bpl.n	800d968 <_svfprintf_r+0x360>
 800d964:	b21b      	sxth	r3, r3
 800d966:	e7f7      	b.n	800d958 <_svfprintf_r+0x350>
 800d968:	05b2      	lsls	r2, r6, #22
 800d96a:	d5f5      	bpl.n	800d958 <_svfprintf_r+0x350>
 800d96c:	b25b      	sxtb	r3, r3
 800d96e:	e7f3      	b.n	800d958 <_svfprintf_r+0x350>
 800d970:	2307      	movs	r3, #7
 800d972:	3407      	adds	r4, #7
 800d974:	439c      	bics	r4, r3
 800d976:	0022      	movs	r2, r4
 800d978:	ca18      	ldmia	r2!, {r3, r4}
 800d97a:	920d      	str	r2, [sp, #52]	; 0x34
 800d97c:	2201      	movs	r2, #1
 800d97e:	9314      	str	r3, [sp, #80]	; 0x50
 800d980:	9415      	str	r4, [sp, #84]	; 0x54
 800d982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d984:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d986:	005c      	lsls	r4, r3, #1
 800d988:	0864      	lsrs	r4, r4, #1
 800d98a:	0028      	movs	r0, r5
 800d98c:	0021      	movs	r1, r4
 800d98e:	4b3e      	ldr	r3, [pc, #248]	; (800da88 <_svfprintf_r+0x480>)
 800d990:	4252      	negs	r2, r2
 800d992:	f7f4 fcaf 	bl	80022f4 <__aeabi_dcmpun>
 800d996:	2800      	cmp	r0, #0
 800d998:	d126      	bne.n	800d9e8 <_svfprintf_r+0x3e0>
 800d99a:	2201      	movs	r2, #1
 800d99c:	0028      	movs	r0, r5
 800d99e:	0021      	movs	r1, r4
 800d9a0:	4b39      	ldr	r3, [pc, #228]	; (800da88 <_svfprintf_r+0x480>)
 800d9a2:	4252      	negs	r2, r2
 800d9a4:	f7f2 fd60 	bl	8000468 <__aeabi_dcmple>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d11d      	bne.n	800d9e8 <_svfprintf_r+0x3e0>
 800d9ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d9ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	f7f2 fd4e 	bl	8000454 <__aeabi_dcmplt>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d004      	beq.n	800d9c6 <_svfprintf_r+0x3be>
 800d9bc:	231b      	movs	r3, #27
 800d9be:	aa1e      	add	r2, sp, #120	; 0x78
 800d9c0:	189b      	adds	r3, r3, r2
 800d9c2:	222d      	movs	r2, #45	; 0x2d
 800d9c4:	701a      	strb	r2, [r3, #0]
 800d9c6:	4b31      	ldr	r3, [pc, #196]	; (800da8c <_svfprintf_r+0x484>)
 800d9c8:	9308      	str	r3, [sp, #32]
 800d9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9cc:	2b47      	cmp	r3, #71	; 0x47
 800d9ce:	dd01      	ble.n	800d9d4 <_svfprintf_r+0x3cc>
 800d9d0:	4b2f      	ldr	r3, [pc, #188]	; (800da90 <_svfprintf_r+0x488>)
 800d9d2:	9308      	str	r3, [sp, #32]
 800d9d4:	2380      	movs	r3, #128	; 0x80
 800d9d6:	439e      	bics	r6, r3
 800d9d8:	2300      	movs	r3, #0
 800d9da:	930c      	str	r3, [sp, #48]	; 0x30
 800d9dc:	3303      	adds	r3, #3
 800d9de:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	9319      	str	r3, [sp, #100]	; 0x64
 800d9e4:	f000 fc78 	bl	800e2d8 <_svfprintf_r+0xcd0>
 800d9e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9ec:	0010      	movs	r0, r2
 800d9ee:	0019      	movs	r1, r3
 800d9f0:	f7f4 fc80 	bl	80022f4 <__aeabi_dcmpun>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d00e      	beq.n	800da16 <_svfprintf_r+0x40e>
 800d9f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	da04      	bge.n	800da08 <_svfprintf_r+0x400>
 800d9fe:	231b      	movs	r3, #27
 800da00:	aa1e      	add	r2, sp, #120	; 0x78
 800da02:	189b      	adds	r3, r3, r2
 800da04:	222d      	movs	r2, #45	; 0x2d
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	4b22      	ldr	r3, [pc, #136]	; (800da94 <_svfprintf_r+0x48c>)
 800da0a:	9308      	str	r3, [sp, #32]
 800da0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da0e:	2b47      	cmp	r3, #71	; 0x47
 800da10:	dde0      	ble.n	800d9d4 <_svfprintf_r+0x3cc>
 800da12:	4b21      	ldr	r3, [pc, #132]	; (800da98 <_svfprintf_r+0x490>)
 800da14:	e7dd      	b.n	800d9d2 <_svfprintf_r+0x3ca>
 800da16:	2320      	movs	r3, #32
 800da18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da1a:	439a      	bics	r2, r3
 800da1c:	9210      	str	r2, [sp, #64]	; 0x40
 800da1e:	2a41      	cmp	r2, #65	; 0x41
 800da20:	d123      	bne.n	800da6a <_svfprintf_r+0x462>
 800da22:	2230      	movs	r2, #48	; 0x30
 800da24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da26:	ab25      	add	r3, sp, #148	; 0x94
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	3248      	adds	r2, #72	; 0x48
 800da2c:	2961      	cmp	r1, #97	; 0x61
 800da2e:	d000      	beq.n	800da32 <_svfprintf_r+0x42a>
 800da30:	3a20      	subs	r2, #32
 800da32:	705a      	strb	r2, [r3, #1]
 800da34:	2302      	movs	r3, #2
 800da36:	431e      	orrs	r6, r3
 800da38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3a:	2b63      	cmp	r3, #99	; 0x63
 800da3c:	dd2e      	ble.n	800da9c <_svfprintf_r+0x494>
 800da3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da40:	1c59      	adds	r1, r3, #1
 800da42:	f7fd f88f 	bl	800ab64 <_malloc_r>
 800da46:	9008      	str	r0, [sp, #32]
 800da48:	2800      	cmp	r0, #0
 800da4a:	d000      	beq.n	800da4e <_svfprintf_r+0x446>
 800da4c:	e216      	b.n	800de7c <_svfprintf_r+0x874>
 800da4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da50:	899a      	ldrh	r2, [r3, #12]
 800da52:	2340      	movs	r3, #64	; 0x40
 800da54:	4313      	orrs	r3, r2
 800da56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da58:	8193      	strh	r3, [r2, #12]
 800da5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da5c:	899b      	ldrh	r3, [r3, #12]
 800da5e:	065b      	lsls	r3, r3, #25
 800da60:	d400      	bmi.n	800da64 <_svfprintf_r+0x45c>
 800da62:	e5f5      	b.n	800d650 <_svfprintf_r+0x48>
 800da64:	2301      	movs	r3, #1
 800da66:	425b      	negs	r3, r3
 800da68:	e5f1      	b.n	800d64e <_svfprintf_r+0x46>
 800da6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da6c:	900c      	str	r0, [sp, #48]	; 0x30
 800da6e:	3301      	adds	r3, #1
 800da70:	d100      	bne.n	800da74 <_svfprintf_r+0x46c>
 800da72:	e206      	b.n	800de82 <_svfprintf_r+0x87a>
 800da74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da76:	2b47      	cmp	r3, #71	; 0x47
 800da78:	d114      	bne.n	800daa4 <_svfprintf_r+0x49c>
 800da7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d111      	bne.n	800daa4 <_svfprintf_r+0x49c>
 800da80:	3301      	adds	r3, #1
 800da82:	9309      	str	r3, [sp, #36]	; 0x24
 800da84:	e00e      	b.n	800daa4 <_svfprintf_r+0x49c>
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	7fefffff 	.word	0x7fefffff
 800da8c:	08014b9c 	.word	0x08014b9c
 800da90:	08014ba0 	.word	0x08014ba0
 800da94:	08014ba4 	.word	0x08014ba4
 800da98:	08014ba8 	.word	0x08014ba8
 800da9c:	2300      	movs	r3, #0
 800da9e:	930c      	str	r3, [sp, #48]	; 0x30
 800daa0:	ab3f      	add	r3, sp, #252	; 0xfc
 800daa2:	9308      	str	r3, [sp, #32]
 800daa4:	2380      	movs	r3, #128	; 0x80
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	4333      	orrs	r3, r6
 800daaa:	931a      	str	r3, [sp, #104]	; 0x68
 800daac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	db00      	blt.n	800dab6 <_svfprintf_r+0x4ae>
 800dab4:	e1e7      	b.n	800de86 <_svfprintf_r+0x87e>
 800dab6:	2280      	movs	r2, #128	; 0x80
 800dab8:	0612      	lsls	r2, r2, #24
 800daba:	4694      	mov	ip, r2
 800dabc:	4463      	add	r3, ip
 800dabe:	930e      	str	r3, [sp, #56]	; 0x38
 800dac0:	232d      	movs	r3, #45	; 0x2d
 800dac2:	9322      	str	r3, [sp, #136]	; 0x88
 800dac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dac6:	2b41      	cmp	r3, #65	; 0x41
 800dac8:	d000      	beq.n	800dacc <_svfprintf_r+0x4c4>
 800daca:	e1f5      	b.n	800deb8 <_svfprintf_r+0x8b0>
 800dacc:	0028      	movs	r0, r5
 800dace:	aa26      	add	r2, sp, #152	; 0x98
 800dad0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dad2:	f002 fb73 	bl	80101bc <frexp>
 800dad6:	23ff      	movs	r3, #255	; 0xff
 800dad8:	2200      	movs	r2, #0
 800dada:	059b      	lsls	r3, r3, #22
 800dadc:	f7f3 fdc6 	bl	800166c <__aeabi_dmul>
 800dae0:	2200      	movs	r2, #0
 800dae2:	2300      	movs	r3, #0
 800dae4:	0004      	movs	r4, r0
 800dae6:	000d      	movs	r5, r1
 800dae8:	f7f2 fcae 	bl	8000448 <__aeabi_dcmpeq>
 800daec:	2800      	cmp	r0, #0
 800daee:	d001      	beq.n	800daf4 <_svfprintf_r+0x4ec>
 800daf0:	2301      	movs	r3, #1
 800daf2:	9326      	str	r3, [sp, #152]	; 0x98
 800daf4:	4bda      	ldr	r3, [pc, #872]	; (800de60 <_svfprintf_r+0x858>)
 800daf6:	9319      	str	r3, [sp, #100]	; 0x64
 800daf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dafa:	2b61      	cmp	r3, #97	; 0x61
 800dafc:	d001      	beq.n	800db02 <_svfprintf_r+0x4fa>
 800dafe:	4bd9      	ldr	r3, [pc, #868]	; (800de64 <_svfprintf_r+0x85c>)
 800db00:	9319      	str	r3, [sp, #100]	; 0x64
 800db02:	9b08      	ldr	r3, [sp, #32]
 800db04:	930e      	str	r3, [sp, #56]	; 0x38
 800db06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db08:	3b01      	subs	r3, #1
 800db0a:	9311      	str	r3, [sp, #68]	; 0x44
 800db0c:	2200      	movs	r2, #0
 800db0e:	4bd6      	ldr	r3, [pc, #856]	; (800de68 <_svfprintf_r+0x860>)
 800db10:	0020      	movs	r0, r4
 800db12:	0029      	movs	r1, r5
 800db14:	f7f3 fdaa 	bl	800166c <__aeabi_dmul>
 800db18:	000d      	movs	r5, r1
 800db1a:	0004      	movs	r4, r0
 800db1c:	f7f4 fc08 	bl	8002330 <__aeabi_d2iz>
 800db20:	9021      	str	r0, [sp, #132]	; 0x84
 800db22:	f7f4 fc3b 	bl	800239c <__aeabi_i2d>
 800db26:	0002      	movs	r2, r0
 800db28:	000b      	movs	r3, r1
 800db2a:	0020      	movs	r0, r4
 800db2c:	0029      	movs	r1, r5
 800db2e:	f7f4 f85f 	bl	8001bf0 <__aeabi_dsub>
 800db32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db34:	000d      	movs	r5, r1
 800db36:	001a      	movs	r2, r3
 800db38:	3201      	adds	r2, #1
 800db3a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800db3c:	920e      	str	r2, [sp, #56]	; 0x38
 800db3e:	9223      	str	r2, [sp, #140]	; 0x8c
 800db40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db42:	0004      	movs	r4, r0
 800db44:	5c52      	ldrb	r2, [r2, r1]
 800db46:	701a      	strb	r2, [r3, #0]
 800db48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db4a:	9320      	str	r3, [sp, #128]	; 0x80
 800db4c:	3301      	adds	r3, #1
 800db4e:	d00a      	beq.n	800db66 <_svfprintf_r+0x55e>
 800db50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db52:	2200      	movs	r2, #0
 800db54:	3b01      	subs	r3, #1
 800db56:	9311      	str	r3, [sp, #68]	; 0x44
 800db58:	0020      	movs	r0, r4
 800db5a:	2300      	movs	r3, #0
 800db5c:	0029      	movs	r1, r5
 800db5e:	f7f2 fc73 	bl	8000448 <__aeabi_dcmpeq>
 800db62:	2800      	cmp	r0, #0
 800db64:	d0d2      	beq.n	800db0c <_svfprintf_r+0x504>
 800db66:	2200      	movs	r2, #0
 800db68:	0020      	movs	r0, r4
 800db6a:	0029      	movs	r1, r5
 800db6c:	4bbf      	ldr	r3, [pc, #764]	; (800de6c <_svfprintf_r+0x864>)
 800db6e:	f7f2 fc85 	bl	800047c <__aeabi_dcmpgt>
 800db72:	2800      	cmp	r0, #0
 800db74:	d10c      	bne.n	800db90 <_svfprintf_r+0x588>
 800db76:	2200      	movs	r2, #0
 800db78:	0020      	movs	r0, r4
 800db7a:	0029      	movs	r1, r5
 800db7c:	4bbb      	ldr	r3, [pc, #748]	; (800de6c <_svfprintf_r+0x864>)
 800db7e:	f7f2 fc63 	bl	8000448 <__aeabi_dcmpeq>
 800db82:	2800      	cmp	r0, #0
 800db84:	d100      	bne.n	800db88 <_svfprintf_r+0x580>
 800db86:	e191      	b.n	800deac <_svfprintf_r+0x8a4>
 800db88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db8a:	07db      	lsls	r3, r3, #31
 800db8c:	d400      	bmi.n	800db90 <_svfprintf_r+0x588>
 800db8e:	e18d      	b.n	800deac <_svfprintf_r+0x8a4>
 800db90:	2030      	movs	r0, #48	; 0x30
 800db92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db94:	932a      	str	r3, [sp, #168]	; 0xa8
 800db96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db98:	7bdb      	ldrb	r3, [r3, #15]
 800db9a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800db9c:	3a01      	subs	r2, #1
 800db9e:	922a      	str	r2, [sp, #168]	; 0xa8
 800dba0:	7811      	ldrb	r1, [r2, #0]
 800dba2:	4299      	cmp	r1, r3
 800dba4:	d100      	bne.n	800dba8 <_svfprintf_r+0x5a0>
 800dba6:	e171      	b.n	800de8c <_svfprintf_r+0x884>
 800dba8:	1c4b      	adds	r3, r1, #1
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	2939      	cmp	r1, #57	; 0x39
 800dbae:	d101      	bne.n	800dbb4 <_svfprintf_r+0x5ac>
 800dbb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbb2:	7a9b      	ldrb	r3, [r3, #10]
 800dbb4:	7013      	strb	r3, [r2, #0]
 800dbb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbb8:	9a08      	ldr	r2, [sp, #32]
 800dbba:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	930e      	str	r3, [sp, #56]	; 0x38
 800dbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbc2:	2b47      	cmp	r3, #71	; 0x47
 800dbc4:	d000      	beq.n	800dbc8 <_svfprintf_r+0x5c0>
 800dbc6:	e1c4      	b.n	800df52 <_svfprintf_r+0x94a>
 800dbc8:	1ceb      	adds	r3, r5, #3
 800dbca:	db03      	blt.n	800dbd4 <_svfprintf_r+0x5cc>
 800dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbce:	42ab      	cmp	r3, r5
 800dbd0:	db00      	blt.n	800dbd4 <_svfprintf_r+0x5cc>
 800dbd2:	e1e6      	b.n	800dfa2 <_svfprintf_r+0x99a>
 800dbd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd6:	3b02      	subs	r3, #2
 800dbd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbda:	223c      	movs	r2, #60	; 0x3c
 800dbdc:	466b      	mov	r3, sp
 800dbde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbe0:	189b      	adds	r3, r3, r2
 800dbe2:	1e6c      	subs	r4, r5, #1
 800dbe4:	3a1c      	subs	r2, #28
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	9426      	str	r4, [sp, #152]	; 0x98
 800dbec:	4391      	bics	r1, r2
 800dbee:	2941      	cmp	r1, #65	; 0x41
 800dbf0:	d102      	bne.n	800dbf8 <_svfprintf_r+0x5f0>
 800dbf2:	330f      	adds	r3, #15
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	a928      	add	r1, sp, #160	; 0xa0
 800dbfa:	700b      	strb	r3, [r1, #0]
 800dbfc:	232b      	movs	r3, #43	; 0x2b
 800dbfe:	2c00      	cmp	r4, #0
 800dc00:	da02      	bge.n	800dc08 <_svfprintf_r+0x600>
 800dc02:	2401      	movs	r4, #1
 800dc04:	3302      	adds	r3, #2
 800dc06:	1b64      	subs	r4, r4, r5
 800dc08:	704b      	strb	r3, [r1, #1]
 800dc0a:	2c09      	cmp	r4, #9
 800dc0c:	dc00      	bgt.n	800dc10 <_svfprintf_r+0x608>
 800dc0e:	e1ba      	b.n	800df86 <_svfprintf_r+0x97e>
 800dc10:	2337      	movs	r3, #55	; 0x37
 800dc12:	250a      	movs	r5, #10
 800dc14:	aa1e      	add	r2, sp, #120	; 0x78
 800dc16:	189b      	adds	r3, r3, r2
 800dc18:	9310      	str	r3, [sp, #64]	; 0x40
 800dc1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc1c:	0020      	movs	r0, r4
 800dc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc20:	0029      	movs	r1, r5
 800dc22:	3b01      	subs	r3, #1
 800dc24:	9310      	str	r3, [sp, #64]	; 0x40
 800dc26:	f7f2 fbf9 	bl	800041c <__aeabi_idivmod>
 800dc2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc2c:	3130      	adds	r1, #48	; 0x30
 800dc2e:	7019      	strb	r1, [r3, #0]
 800dc30:	0020      	movs	r0, r4
 800dc32:	0029      	movs	r1, r5
 800dc34:	9411      	str	r4, [sp, #68]	; 0x44
 800dc36:	f7f2 fb0b 	bl	8000250 <__divsi3>
 800dc3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc3c:	0004      	movs	r4, r0
 800dc3e:	2b63      	cmp	r3, #99	; 0x63
 800dc40:	dceb      	bgt.n	800dc1a <_svfprintf_r+0x612>
 800dc42:	222a      	movs	r2, #42	; 0x2a
 800dc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc46:	a81e      	add	r0, sp, #120	; 0x78
 800dc48:	1e99      	subs	r1, r3, #2
 800dc4a:	1812      	adds	r2, r2, r0
 800dc4c:	2037      	movs	r0, #55	; 0x37
 800dc4e:	000b      	movs	r3, r1
 800dc50:	3430      	adds	r4, #48	; 0x30
 800dc52:	700c      	strb	r4, [r1, #0]
 800dc54:	ac1e      	add	r4, sp, #120	; 0x78
 800dc56:	1900      	adds	r0, r0, r4
 800dc58:	4283      	cmp	r3, r0
 800dc5a:	d200      	bcs.n	800dc5e <_svfprintf_r+0x656>
 800dc5c:	e18e      	b.n	800df7c <_svfprintf_r+0x974>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	4281      	cmp	r1, r0
 800dc62:	d804      	bhi.n	800dc6e <_svfprintf_r+0x666>
 800dc64:	aa1e      	add	r2, sp, #120	; 0x78
 800dc66:	3339      	adds	r3, #57	; 0x39
 800dc68:	189b      	adds	r3, r3, r2
 800dc6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc6c:	1a9b      	subs	r3, r3, r2
 800dc6e:	222a      	movs	r2, #42	; 0x2a
 800dc70:	a91e      	add	r1, sp, #120	; 0x78
 800dc72:	1852      	adds	r2, r2, r1
 800dc74:	18d3      	adds	r3, r2, r3
 800dc76:	aa28      	add	r2, sp, #160	; 0xa0
 800dc78:	1a9b      	subs	r3, r3, r2
 800dc7a:	931e      	str	r3, [sp, #120]	; 0x78
 800dc7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc80:	4694      	mov	ip, r2
 800dc82:	4463      	add	r3, ip
 800dc84:	9309      	str	r3, [sp, #36]	; 0x24
 800dc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	dc01      	bgt.n	800dc90 <_svfprintf_r+0x688>
 800dc8c:	07f3      	lsls	r3, r6, #31
 800dc8e:	d504      	bpl.n	800dc9a <_svfprintf_r+0x692>
 800dc90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc94:	4694      	mov	ip, r2
 800dc96:	4463      	add	r3, ip
 800dc98:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9a:	2280      	movs	r2, #128	; 0x80
 800dc9c:	4b74      	ldr	r3, [pc, #464]	; (800de70 <_svfprintf_r+0x868>)
 800dc9e:	0052      	lsls	r2, r2, #1
 800dca0:	4033      	ands	r3, r6
 800dca2:	431a      	orrs	r2, r3
 800dca4:	2300      	movs	r3, #0
 800dca6:	001d      	movs	r5, r3
 800dca8:	921a      	str	r2, [sp, #104]	; 0x68
 800dcaa:	9310      	str	r3, [sp, #64]	; 0x40
 800dcac:	9311      	str	r3, [sp, #68]	; 0x44
 800dcae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcb0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dcb2:	9319      	str	r3, [sp, #100]	; 0x64
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <_svfprintf_r+0x6be>
 800dcb8:	231b      	movs	r3, #27
 800dcba:	aa1e      	add	r2, sp, #120	; 0x78
 800dcbc:	189b      	adds	r3, r3, r2
 800dcbe:	222d      	movs	r2, #45	; 0x2d
 800dcc0:	701a      	strb	r2, [r3, #0]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9319      	str	r3, [sp, #100]	; 0x64
 800dcc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcca:	931a      	str	r3, [sp, #104]	; 0x68
 800dccc:	4293      	cmp	r3, r2
 800dcce:	da00      	bge.n	800dcd2 <_svfprintf_r+0x6ca>
 800dcd0:	921a      	str	r2, [sp, #104]	; 0x68
 800dcd2:	231b      	movs	r3, #27
 800dcd4:	aa1e      	add	r2, sp, #120	; 0x78
 800dcd6:	189b      	adds	r3, r3, r2
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	1e5a      	subs	r2, r3, #1
 800dcdc:	4193      	sbcs	r3, r2
 800dcde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dce0:	18d3      	adds	r3, r2, r3
 800dce2:	931a      	str	r3, [sp, #104]	; 0x68
 800dce4:	0032      	movs	r2, r6
 800dce6:	2302      	movs	r3, #2
 800dce8:	401a      	ands	r2, r3
 800dcea:	9220      	str	r2, [sp, #128]	; 0x80
 800dcec:	421e      	tst	r6, r3
 800dcee:	d002      	beq.n	800dcf6 <_svfprintf_r+0x6ee>
 800dcf0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcf2:	3302      	adds	r3, #2
 800dcf4:	931a      	str	r3, [sp, #104]	; 0x68
 800dcf6:	2384      	movs	r3, #132	; 0x84
 800dcf8:	0032      	movs	r2, r6
 800dcfa:	401a      	ands	r2, r3
 800dcfc:	9221      	str	r2, [sp, #132]	; 0x84
 800dcfe:	421e      	tst	r6, r3
 800dd00:	d11f      	bne.n	800dd42 <_svfprintf_r+0x73a>
 800dd02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd06:	1a9c      	subs	r4, r3, r2
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	dd1a      	ble.n	800dd42 <_svfprintf_r+0x73a>
 800dd0c:	0039      	movs	r1, r7
 800dd0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd10:	4858      	ldr	r0, [pc, #352]	; (800de74 <_svfprintf_r+0x86c>)
 800dd12:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd14:	3301      	adds	r3, #1
 800dd16:	3108      	adds	r1, #8
 800dd18:	6038      	str	r0, [r7, #0]
 800dd1a:	2c10      	cmp	r4, #16
 800dd1c:	dd00      	ble.n	800dd20 <_svfprintf_r+0x718>
 800dd1e:	e31c      	b.n	800e35a <_svfprintf_r+0xd52>
 800dd20:	607c      	str	r4, [r7, #4]
 800dd22:	18a4      	adds	r4, r4, r2
 800dd24:	000f      	movs	r7, r1
 800dd26:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd28:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd2a:	2b07      	cmp	r3, #7
 800dd2c:	dd09      	ble.n	800dd42 <_svfprintf_r+0x73a>
 800dd2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd32:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd34:	f003 fcf8 	bl	8011728 <__ssprint_r>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d001      	beq.n	800dd40 <_svfprintf_r+0x738>
 800dd3c:	f000 fe43 	bl	800e9c6 <_svfprintf_r+0x13be>
 800dd40:	af2f      	add	r7, sp, #188	; 0xbc
 800dd42:	221b      	movs	r2, #27
 800dd44:	a91e      	add	r1, sp, #120	; 0x78
 800dd46:	1852      	adds	r2, r2, r1
 800dd48:	7811      	ldrb	r1, [r2, #0]
 800dd4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d014      	beq.n	800dd7a <_svfprintf_r+0x772>
 800dd50:	603a      	str	r2, [r7, #0]
 800dd52:	2201      	movs	r2, #1
 800dd54:	189b      	adds	r3, r3, r2
 800dd56:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	189b      	adds	r3, r3, r2
 800dd5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd60:	3708      	adds	r7, #8
 800dd62:	2b07      	cmp	r3, #7
 800dd64:	dd09      	ble.n	800dd7a <_svfprintf_r+0x772>
 800dd66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd6c:	f003 fcdc 	bl	8011728 <__ssprint_r>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d001      	beq.n	800dd78 <_svfprintf_r+0x770>
 800dd74:	f000 fe27 	bl	800e9c6 <_svfprintf_r+0x13be>
 800dd78:	af2f      	add	r7, sp, #188	; 0xbc
 800dd7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd7e:	2a00      	cmp	r2, #0
 800dd80:	d015      	beq.n	800ddae <_svfprintf_r+0x7a6>
 800dd82:	aa25      	add	r2, sp, #148	; 0x94
 800dd84:	603a      	str	r2, [r7, #0]
 800dd86:	2202      	movs	r2, #2
 800dd88:	189b      	adds	r3, r3, r2
 800dd8a:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	3301      	adds	r3, #1
 800dd92:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd94:	3708      	adds	r7, #8
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	dd09      	ble.n	800ddae <_svfprintf_r+0x7a6>
 800dd9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800dda0:	f003 fcc2 	bl	8011728 <__ssprint_r>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d001      	beq.n	800ddac <_svfprintf_r+0x7a4>
 800dda8:	f000 fe0d 	bl	800e9c6 <_svfprintf_r+0x13be>
 800ddac:	af2f      	add	r7, sp, #188	; 0xbc
 800ddae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddb0:	2b80      	cmp	r3, #128	; 0x80
 800ddb2:	d11f      	bne.n	800ddf4 <_svfprintf_r+0x7ec>
 800ddb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ddb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ddb8:	1a9c      	subs	r4, r3, r2
 800ddba:	2c00      	cmp	r4, #0
 800ddbc:	dd1a      	ble.n	800ddf4 <_svfprintf_r+0x7ec>
 800ddbe:	0039      	movs	r1, r7
 800ddc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddc2:	482d      	ldr	r0, [pc, #180]	; (800de78 <_svfprintf_r+0x870>)
 800ddc4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	3108      	adds	r1, #8
 800ddca:	6038      	str	r0, [r7, #0]
 800ddcc:	2c10      	cmp	r4, #16
 800ddce:	dd00      	ble.n	800ddd2 <_svfprintf_r+0x7ca>
 800ddd0:	e2d6      	b.n	800e380 <_svfprintf_r+0xd78>
 800ddd2:	607c      	str	r4, [r7, #4]
 800ddd4:	18a4      	adds	r4, r4, r2
 800ddd6:	000f      	movs	r7, r1
 800ddd8:	942e      	str	r4, [sp, #184]	; 0xb8
 800ddda:	932d      	str	r3, [sp, #180]	; 0xb4
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	dd09      	ble.n	800ddf4 <_svfprintf_r+0x7ec>
 800dde0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dde2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dde4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dde6:	f003 fc9f 	bl	8011728 <__ssprint_r>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d001      	beq.n	800ddf2 <_svfprintf_r+0x7ea>
 800ddee:	f000 fdea 	bl	800e9c6 <_svfprintf_r+0x13be>
 800ddf2:	af2f      	add	r7, sp, #188	; 0xbc
 800ddf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddf8:	1a9c      	subs	r4, r3, r2
 800ddfa:	2c00      	cmp	r4, #0
 800ddfc:	dd1a      	ble.n	800de34 <_svfprintf_r+0x82c>
 800ddfe:	0039      	movs	r1, r7
 800de00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de02:	481d      	ldr	r0, [pc, #116]	; (800de78 <_svfprintf_r+0x870>)
 800de04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de06:	3301      	adds	r3, #1
 800de08:	3108      	adds	r1, #8
 800de0a:	6038      	str	r0, [r7, #0]
 800de0c:	2c10      	cmp	r4, #16
 800de0e:	dd00      	ble.n	800de12 <_svfprintf_r+0x80a>
 800de10:	e2c9      	b.n	800e3a6 <_svfprintf_r+0xd9e>
 800de12:	18a2      	adds	r2, r4, r2
 800de14:	607c      	str	r4, [r7, #4]
 800de16:	922e      	str	r2, [sp, #184]	; 0xb8
 800de18:	000f      	movs	r7, r1
 800de1a:	932d      	str	r3, [sp, #180]	; 0xb4
 800de1c:	2b07      	cmp	r3, #7
 800de1e:	dd09      	ble.n	800de34 <_svfprintf_r+0x82c>
 800de20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de24:	aa2c      	add	r2, sp, #176	; 0xb0
 800de26:	f003 fc7f 	bl	8011728 <__ssprint_r>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d001      	beq.n	800de32 <_svfprintf_r+0x82a>
 800de2e:	f000 fdca 	bl	800e9c6 <_svfprintf_r+0x13be>
 800de32:	af2f      	add	r7, sp, #188	; 0xbc
 800de34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de36:	9319      	str	r3, [sp, #100]	; 0x64
 800de38:	05f3      	lsls	r3, r6, #23
 800de3a:	d500      	bpl.n	800de3e <_svfprintf_r+0x836>
 800de3c:	e2ce      	b.n	800e3dc <_svfprintf_r+0xdd4>
 800de3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de40:	9b08      	ldr	r3, [sp, #32]
 800de42:	4694      	mov	ip, r2
 800de44:	603b      	str	r3, [r7, #0]
 800de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de48:	607b      	str	r3, [r7, #4]
 800de4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de4c:	4463      	add	r3, ip
 800de4e:	932e      	str	r3, [sp, #184]	; 0xb8
 800de50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de52:	3301      	adds	r3, #1
 800de54:	932d      	str	r3, [sp, #180]	; 0xb4
 800de56:	2b07      	cmp	r3, #7
 800de58:	dd00      	ble.n	800de5c <_svfprintf_r+0x854>
 800de5a:	e3a3      	b.n	800e5a4 <_svfprintf_r+0xf9c>
 800de5c:	3708      	adds	r7, #8
 800de5e:	e301      	b.n	800e464 <_svfprintf_r+0xe5c>
 800de60:	08014bac 	.word	0x08014bac
 800de64:	08014bbd 	.word	0x08014bbd
 800de68:	40300000 	.word	0x40300000
 800de6c:	3fe00000 	.word	0x3fe00000
 800de70:	fffffbff 	.word	0xfffffbff
 800de74:	08014bd0 	.word	0x08014bd0
 800de78:	08014be0 	.word	0x08014be0
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	930c      	str	r3, [sp, #48]	; 0x30
 800de80:	e610      	b.n	800daa4 <_svfprintf_r+0x49c>
 800de82:	2306      	movs	r3, #6
 800de84:	e5fd      	b.n	800da82 <_svfprintf_r+0x47a>
 800de86:	930e      	str	r3, [sp, #56]	; 0x38
 800de88:	2300      	movs	r3, #0
 800de8a:	e61a      	b.n	800dac2 <_svfprintf_r+0x4ba>
 800de8c:	7010      	strb	r0, [r2, #0]
 800de8e:	e684      	b.n	800db9a <_svfprintf_r+0x592>
 800de90:	7018      	strb	r0, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	1aca      	subs	r2, r1, r3
 800de96:	d5fb      	bpl.n	800de90 <_svfprintf_r+0x888>
 800de98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de9a:	2300      	movs	r3, #0
 800de9c:	3201      	adds	r2, #1
 800de9e:	db01      	blt.n	800dea4 <_svfprintf_r+0x89c>
 800dea0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dea2:	3301      	adds	r3, #1
 800dea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dea6:	18d3      	adds	r3, r2, r3
 800dea8:	9323      	str	r3, [sp, #140]	; 0x8c
 800deaa:	e684      	b.n	800dbb6 <_svfprintf_r+0x5ae>
 800deac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deae:	9920      	ldr	r1, [sp, #128]	; 0x80
 800deb0:	2030      	movs	r0, #48	; 0x30
 800deb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800deb4:	1851      	adds	r1, r2, r1
 800deb6:	e7ed      	b.n	800de94 <_svfprintf_r+0x88c>
 800deb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800deba:	2303      	movs	r3, #3
 800debc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800debe:	2a46      	cmp	r2, #70	; 0x46
 800dec0:	d006      	beq.n	800ded0 <_svfprintf_r+0x8c8>
 800dec2:	0014      	movs	r4, r2
 800dec4:	3c45      	subs	r4, #69	; 0x45
 800dec6:	4262      	negs	r2, r4
 800dec8:	4154      	adcs	r4, r2
 800deca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800decc:	3b01      	subs	r3, #1
 800dece:	1914      	adds	r4, r2, r4
 800ded0:	aa2a      	add	r2, sp, #168	; 0xa8
 800ded2:	9204      	str	r2, [sp, #16]
 800ded4:	aa27      	add	r2, sp, #156	; 0x9c
 800ded6:	9203      	str	r2, [sp, #12]
 800ded8:	aa26      	add	r2, sp, #152	; 0x98
 800deda:	9202      	str	r2, [sp, #8]
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	002a      	movs	r2, r5
 800dee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dee2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dee4:	9401      	str	r4, [sp, #4]
 800dee6:	f002 fad7 	bl	8010498 <_dtoa_r>
 800deea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deec:	9008      	str	r0, [sp, #32]
 800deee:	2b47      	cmp	r3, #71	; 0x47
 800def0:	d103      	bne.n	800defa <_svfprintf_r+0x8f2>
 800def2:	07f3      	lsls	r3, r6, #31
 800def4:	d401      	bmi.n	800defa <_svfprintf_r+0x8f2>
 800def6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800def8:	e65e      	b.n	800dbb8 <_svfprintf_r+0x5b0>
 800defa:	9b08      	ldr	r3, [sp, #32]
 800defc:	191b      	adds	r3, r3, r4
 800defe:	9311      	str	r3, [sp, #68]	; 0x44
 800df00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df02:	2b46      	cmp	r3, #70	; 0x46
 800df04:	d112      	bne.n	800df2c <_svfprintf_r+0x924>
 800df06:	9b08      	ldr	r3, [sp, #32]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	2b30      	cmp	r3, #48	; 0x30
 800df0c:	d10a      	bne.n	800df24 <_svfprintf_r+0x91c>
 800df0e:	2200      	movs	r2, #0
 800df10:	2300      	movs	r3, #0
 800df12:	0028      	movs	r0, r5
 800df14:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df16:	f7f2 fa97 	bl	8000448 <__aeabi_dcmpeq>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d102      	bne.n	800df24 <_svfprintf_r+0x91c>
 800df1e:	2301      	movs	r3, #1
 800df20:	1b1b      	subs	r3, r3, r4
 800df22:	9326      	str	r3, [sp, #152]	; 0x98
 800df24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df28:	18d3      	adds	r3, r2, r3
 800df2a:	9311      	str	r3, [sp, #68]	; 0x44
 800df2c:	2200      	movs	r2, #0
 800df2e:	2300      	movs	r3, #0
 800df30:	0028      	movs	r0, r5
 800df32:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df34:	f7f2 fa88 	bl	8000448 <__aeabi_dcmpeq>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d001      	beq.n	800df40 <_svfprintf_r+0x938>
 800df3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df3e:	932a      	str	r3, [sp, #168]	; 0xa8
 800df40:	2230      	movs	r2, #48	; 0x30
 800df42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800df44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800df46:	4299      	cmp	r1, r3
 800df48:	d9d5      	bls.n	800def6 <_svfprintf_r+0x8ee>
 800df4a:	1c59      	adds	r1, r3, #1
 800df4c:	912a      	str	r1, [sp, #168]	; 0xa8
 800df4e:	701a      	strb	r2, [r3, #0]
 800df50:	e7f7      	b.n	800df42 <_svfprintf_r+0x93a>
 800df52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df54:	2b46      	cmp	r3, #70	; 0x46
 800df56:	d000      	beq.n	800df5a <_svfprintf_r+0x952>
 800df58:	e63f      	b.n	800dbda <_svfprintf_r+0x5d2>
 800df5a:	2201      	movs	r2, #1
 800df5c:	0033      	movs	r3, r6
 800df5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df60:	4013      	ands	r3, r2
 800df62:	430b      	orrs	r3, r1
 800df64:	2d00      	cmp	r5, #0
 800df66:	dd2c      	ble.n	800dfc2 <_svfprintf_r+0x9ba>
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d046      	beq.n	800dffa <_svfprintf_r+0x9f2>
 800df6c:	000a      	movs	r2, r1
 800df6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df70:	18eb      	adds	r3, r5, r3
 800df72:	18d3      	adds	r3, r2, r3
 800df74:	9309      	str	r3, [sp, #36]	; 0x24
 800df76:	2366      	movs	r3, #102	; 0x66
 800df78:	930f      	str	r3, [sp, #60]	; 0x3c
 800df7a:	e030      	b.n	800dfde <_svfprintf_r+0x9d6>
 800df7c:	781c      	ldrb	r4, [r3, #0]
 800df7e:	3301      	adds	r3, #1
 800df80:	7014      	strb	r4, [r2, #0]
 800df82:	3201      	adds	r2, #1
 800df84:	e668      	b.n	800dc58 <_svfprintf_r+0x650>
 800df86:	222a      	movs	r2, #42	; 0x2a
 800df88:	ab1e      	add	r3, sp, #120	; 0x78
 800df8a:	18d2      	adds	r2, r2, r3
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d104      	bne.n	800df9a <_svfprintf_r+0x992>
 800df90:	2330      	movs	r3, #48	; 0x30
 800df92:	222b      	movs	r2, #43	; 0x2b
 800df94:	708b      	strb	r3, [r1, #2]
 800df96:	ab1e      	add	r3, sp, #120	; 0x78
 800df98:	18d2      	adds	r2, r2, r3
 800df9a:	3430      	adds	r4, #48	; 0x30
 800df9c:	1c53      	adds	r3, r2, #1
 800df9e:	7014      	strb	r4, [r2, #0]
 800dfa0:	e669      	b.n	800dc76 <_svfprintf_r+0x66e>
 800dfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfa4:	42ab      	cmp	r3, r5
 800dfa6:	dd12      	ble.n	800dfce <_svfprintf_r+0x9c6>
 800dfa8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dfaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfac:	4694      	mov	ip, r2
 800dfae:	4463      	add	r3, ip
 800dfb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb2:	2367      	movs	r3, #103	; 0x67
 800dfb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfb6:	2d00      	cmp	r5, #0
 800dfb8:	dc11      	bgt.n	800dfde <_svfprintf_r+0x9d6>
 800dfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfbc:	1b5b      	subs	r3, r3, r5
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	e00c      	b.n	800dfdc <_svfprintf_r+0x9d4>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01b      	beq.n	800dffe <_svfprintf_r+0x9f6>
 800dfc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfca:	3301      	adds	r3, #1
 800dfcc:	e7d1      	b.n	800df72 <_svfprintf_r+0x96a>
 800dfce:	2367      	movs	r3, #103	; 0x67
 800dfd0:	9509      	str	r5, [sp, #36]	; 0x24
 800dfd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfd4:	07f3      	lsls	r3, r6, #31
 800dfd6:	d502      	bpl.n	800dfde <_svfprintf_r+0x9d6>
 800dfd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfda:	18eb      	adds	r3, r5, r3
 800dfdc:	9309      	str	r3, [sp, #36]	; 0x24
 800dfde:	2380      	movs	r3, #128	; 0x80
 800dfe0:	0032      	movs	r2, r6
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	401a      	ands	r2, r3
 800dfe6:	9211      	str	r2, [sp, #68]	; 0x44
 800dfe8:	2200      	movs	r2, #0
 800dfea:	9210      	str	r2, [sp, #64]	; 0x40
 800dfec:	421e      	tst	r6, r3
 800dfee:	d100      	bne.n	800dff2 <_svfprintf_r+0x9ea>
 800dff0:	e65d      	b.n	800dcae <_svfprintf_r+0x6a6>
 800dff2:	4295      	cmp	r5, r2
 800dff4:	dc25      	bgt.n	800e042 <_svfprintf_r+0xa3a>
 800dff6:	9211      	str	r2, [sp, #68]	; 0x44
 800dff8:	e659      	b.n	800dcae <_svfprintf_r+0x6a6>
 800dffa:	9509      	str	r5, [sp, #36]	; 0x24
 800dffc:	e7bb      	b.n	800df76 <_svfprintf_r+0x96e>
 800dffe:	2366      	movs	r3, #102	; 0x66
 800e000:	9209      	str	r2, [sp, #36]	; 0x24
 800e002:	930f      	str	r3, [sp, #60]	; 0x3c
 800e004:	e7eb      	b.n	800dfde <_svfprintf_r+0x9d6>
 800e006:	42ab      	cmp	r3, r5
 800e008:	da0e      	bge.n	800e028 <_svfprintf_r+0xa20>
 800e00a:	1aed      	subs	r5, r5, r3
 800e00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d012      	beq.n	800e03a <_svfprintf_r+0xa32>
 800e014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e016:	3301      	adds	r3, #1
 800e018:	9311      	str	r3, [sp, #68]	; 0x44
 800e01a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e01c:	3301      	adds	r3, #1
 800e01e:	9312      	str	r3, [sp, #72]	; 0x48
 800e020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2bff      	cmp	r3, #255	; 0xff
 800e026:	d1ee      	bne.n	800e006 <_svfprintf_r+0x9fe>
 800e028:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e02a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e02c:	189b      	adds	r3, r3, r2
 800e02e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e030:	4353      	muls	r3, r2
 800e032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e034:	189b      	adds	r3, r3, r2
 800e036:	9309      	str	r3, [sp, #36]	; 0x24
 800e038:	e639      	b.n	800dcae <_svfprintf_r+0x6a6>
 800e03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e03c:	3301      	adds	r3, #1
 800e03e:	9310      	str	r3, [sp, #64]	; 0x40
 800e040:	e7ee      	b.n	800e020 <_svfprintf_r+0xa18>
 800e042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e044:	9311      	str	r3, [sp, #68]	; 0x44
 800e046:	e7eb      	b.n	800e020 <_svfprintf_r+0xa18>
 800e048:	1d23      	adds	r3, r4, #4
 800e04a:	930d      	str	r3, [sp, #52]	; 0x34
 800e04c:	06b3      	lsls	r3, r6, #26
 800e04e:	d509      	bpl.n	800e064 <_svfprintf_r+0xa5c>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	17d2      	asrs	r2, r2, #31
 800e058:	605a      	str	r2, [r3, #4]
 800e05a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e05c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e05e:	9308      	str	r3, [sp, #32]
 800e060:	f7ff fb0d 	bl	800d67e <_svfprintf_r+0x76>
 800e064:	06f3      	lsls	r3, r6, #27
 800e066:	d503      	bpl.n	800e070 <_svfprintf_r+0xa68>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	e7f4      	b.n	800e05a <_svfprintf_r+0xa52>
 800e070:	0673      	lsls	r3, r6, #25
 800e072:	d503      	bpl.n	800e07c <_svfprintf_r+0xa74>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e078:	801a      	strh	r2, [r3, #0]
 800e07a:	e7ee      	b.n	800e05a <_svfprintf_r+0xa52>
 800e07c:	05b6      	lsls	r6, r6, #22
 800e07e:	d5f3      	bpl.n	800e068 <_svfprintf_r+0xa60>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	e7e8      	b.n	800e05a <_svfprintf_r+0xa52>
 800e088:	2310      	movs	r3, #16
 800e08a:	431e      	orrs	r6, r3
 800e08c:	2320      	movs	r3, #32
 800e08e:	0030      	movs	r0, r6
 800e090:	4018      	ands	r0, r3
 800e092:	421e      	tst	r6, r3
 800e094:	d00f      	beq.n	800e0b6 <_svfprintf_r+0xaae>
 800e096:	3b19      	subs	r3, #25
 800e098:	3407      	adds	r4, #7
 800e09a:	439c      	bics	r4, r3
 800e09c:	0022      	movs	r2, r4
 800e09e:	ca18      	ldmia	r2!, {r3, r4}
 800e0a0:	9306      	str	r3, [sp, #24]
 800e0a2:	9407      	str	r4, [sp, #28]
 800e0a4:	920d      	str	r2, [sp, #52]	; 0x34
 800e0a6:	4bc9      	ldr	r3, [pc, #804]	; (800e3cc <_svfprintf_r+0xdc4>)
 800e0a8:	401e      	ands	r6, r3
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	221b      	movs	r2, #27
 800e0ae:	a91e      	add	r1, sp, #120	; 0x78
 800e0b0:	1852      	adds	r2, r2, r1
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	e430      	b.n	800d918 <_svfprintf_r+0x310>
 800e0b6:	0022      	movs	r2, r4
 800e0b8:	ca08      	ldmia	r2!, {r3}
 800e0ba:	0031      	movs	r1, r6
 800e0bc:	920d      	str	r2, [sp, #52]	; 0x34
 800e0be:	2210      	movs	r2, #16
 800e0c0:	4011      	ands	r1, r2
 800e0c2:	4216      	tst	r6, r2
 800e0c4:	d002      	beq.n	800e0cc <_svfprintf_r+0xac4>
 800e0c6:	9306      	str	r3, [sp, #24]
 800e0c8:	9007      	str	r0, [sp, #28]
 800e0ca:	e7ec      	b.n	800e0a6 <_svfprintf_r+0xa9e>
 800e0cc:	2240      	movs	r2, #64	; 0x40
 800e0ce:	0030      	movs	r0, r6
 800e0d0:	4010      	ands	r0, r2
 800e0d2:	4216      	tst	r6, r2
 800e0d4:	d003      	beq.n	800e0de <_svfprintf_r+0xad6>
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	9306      	str	r3, [sp, #24]
 800e0da:	9107      	str	r1, [sp, #28]
 800e0dc:	e7e3      	b.n	800e0a6 <_svfprintf_r+0xa9e>
 800e0de:	2280      	movs	r2, #128	; 0x80
 800e0e0:	0031      	movs	r1, r6
 800e0e2:	0092      	lsls	r2, r2, #2
 800e0e4:	4011      	ands	r1, r2
 800e0e6:	4216      	tst	r6, r2
 800e0e8:	d0f6      	beq.n	800e0d8 <_svfprintf_r+0xad0>
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	e7eb      	b.n	800e0c6 <_svfprintf_r+0xabe>
 800e0ee:	0023      	movs	r3, r4
 800e0f0:	cb04      	ldmia	r3!, {r2}
 800e0f2:	49b7      	ldr	r1, [pc, #732]	; (800e3d0 <_svfprintf_r+0xdc8>)
 800e0f4:	9206      	str	r2, [sp, #24]
 800e0f6:	aa25      	add	r2, sp, #148	; 0x94
 800e0f8:	8011      	strh	r1, [r2, #0]
 800e0fa:	4ab6      	ldr	r2, [pc, #728]	; (800e3d4 <_svfprintf_r+0xdcc>)
 800e0fc:	930d      	str	r3, [sp, #52]	; 0x34
 800e0fe:	2300      	movs	r3, #0
 800e100:	921f      	str	r2, [sp, #124]	; 0x7c
 800e102:	2278      	movs	r2, #120	; 0x78
 800e104:	9307      	str	r3, [sp, #28]
 800e106:	3302      	adds	r3, #2
 800e108:	431e      	orrs	r6, r3
 800e10a:	920f      	str	r2, [sp, #60]	; 0x3c
 800e10c:	e7ce      	b.n	800e0ac <_svfprintf_r+0xaa4>
 800e10e:	0023      	movs	r3, r4
 800e110:	cb04      	ldmia	r3!, {r2}
 800e112:	2400      	movs	r4, #0
 800e114:	930d      	str	r3, [sp, #52]	; 0x34
 800e116:	231b      	movs	r3, #27
 800e118:	9208      	str	r2, [sp, #32]
 800e11a:	aa1e      	add	r2, sp, #120	; 0x78
 800e11c:	189b      	adds	r3, r3, r2
 800e11e:	701c      	strb	r4, [r3, #0]
 800e120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e122:	3301      	adds	r3, #1
 800e124:	d00e      	beq.n	800e144 <_svfprintf_r+0xb3c>
 800e126:	0021      	movs	r1, r4
 800e128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e12a:	9808      	ldr	r0, [sp, #32]
 800e12c:	f002 f83a 	bl	80101a4 <memchr>
 800e130:	900c      	str	r0, [sp, #48]	; 0x30
 800e132:	42a0      	cmp	r0, r4
 800e134:	d100      	bne.n	800e138 <_svfprintf_r+0xb30>
 800e136:	e10d      	b.n	800e354 <_svfprintf_r+0xd4c>
 800e138:	9a08      	ldr	r2, [sp, #32]
 800e13a:	1a83      	subs	r3, r0, r2
 800e13c:	9309      	str	r3, [sp, #36]	; 0x24
 800e13e:	0023      	movs	r3, r4
 800e140:	940c      	str	r4, [sp, #48]	; 0x30
 800e142:	e44e      	b.n	800d9e2 <_svfprintf_r+0x3da>
 800e144:	9808      	ldr	r0, [sp, #32]
 800e146:	f7f1 ffdd 	bl	8000104 <strlen>
 800e14a:	9009      	str	r0, [sp, #36]	; 0x24
 800e14c:	e7f7      	b.n	800e13e <_svfprintf_r+0xb36>
 800e14e:	2310      	movs	r3, #16
 800e150:	431e      	orrs	r6, r3
 800e152:	2320      	movs	r3, #32
 800e154:	0030      	movs	r0, r6
 800e156:	4018      	ands	r0, r3
 800e158:	421e      	tst	r6, r3
 800e15a:	d009      	beq.n	800e170 <_svfprintf_r+0xb68>
 800e15c:	3b19      	subs	r3, #25
 800e15e:	3407      	adds	r4, #7
 800e160:	439c      	bics	r4, r3
 800e162:	0022      	movs	r2, r4
 800e164:	ca18      	ldmia	r2!, {r3, r4}
 800e166:	9306      	str	r3, [sp, #24]
 800e168:	9407      	str	r4, [sp, #28]
 800e16a:	920d      	str	r2, [sp, #52]	; 0x34
 800e16c:	2301      	movs	r3, #1
 800e16e:	e79d      	b.n	800e0ac <_svfprintf_r+0xaa4>
 800e170:	0023      	movs	r3, r4
 800e172:	cb04      	ldmia	r3!, {r2}
 800e174:	0031      	movs	r1, r6
 800e176:	930d      	str	r3, [sp, #52]	; 0x34
 800e178:	2310      	movs	r3, #16
 800e17a:	4019      	ands	r1, r3
 800e17c:	421e      	tst	r6, r3
 800e17e:	d003      	beq.n	800e188 <_svfprintf_r+0xb80>
 800e180:	9206      	str	r2, [sp, #24]
 800e182:	9007      	str	r0, [sp, #28]
 800e184:	3b0f      	subs	r3, #15
 800e186:	e791      	b.n	800e0ac <_svfprintf_r+0xaa4>
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	0030      	movs	r0, r6
 800e18c:	4018      	ands	r0, r3
 800e18e:	421e      	tst	r6, r3
 800e190:	d003      	beq.n	800e19a <_svfprintf_r+0xb92>
 800e192:	b293      	uxth	r3, r2
 800e194:	9306      	str	r3, [sp, #24]
 800e196:	9107      	str	r1, [sp, #28]
 800e198:	e7e8      	b.n	800e16c <_svfprintf_r+0xb64>
 800e19a:	2380      	movs	r3, #128	; 0x80
 800e19c:	0031      	movs	r1, r6
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4019      	ands	r1, r3
 800e1a2:	421e      	tst	r6, r3
 800e1a4:	d003      	beq.n	800e1ae <_svfprintf_r+0xba6>
 800e1a6:	b2d3      	uxtb	r3, r2
 800e1a8:	9306      	str	r3, [sp, #24]
 800e1aa:	9007      	str	r0, [sp, #28]
 800e1ac:	e7de      	b.n	800e16c <_svfprintf_r+0xb64>
 800e1ae:	9206      	str	r2, [sp, #24]
 800e1b0:	e7f1      	b.n	800e196 <_svfprintf_r+0xb8e>
 800e1b2:	4b89      	ldr	r3, [pc, #548]	; (800e3d8 <_svfprintf_r+0xdd0>)
 800e1b4:	0030      	movs	r0, r6
 800e1b6:	931f      	str	r3, [sp, #124]	; 0x7c
 800e1b8:	2320      	movs	r3, #32
 800e1ba:	4018      	ands	r0, r3
 800e1bc:	421e      	tst	r6, r3
 800e1be:	d01a      	beq.n	800e1f6 <_svfprintf_r+0xbee>
 800e1c0:	3b19      	subs	r3, #25
 800e1c2:	3407      	adds	r4, #7
 800e1c4:	439c      	bics	r4, r3
 800e1c6:	0022      	movs	r2, r4
 800e1c8:	ca18      	ldmia	r2!, {r3, r4}
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	9407      	str	r4, [sp, #28]
 800e1ce:	920d      	str	r2, [sp, #52]	; 0x34
 800e1d0:	07f3      	lsls	r3, r6, #31
 800e1d2:	d50a      	bpl.n	800e1ea <_svfprintf_r+0xbe2>
 800e1d4:	9b06      	ldr	r3, [sp, #24]
 800e1d6:	9a07      	ldr	r2, [sp, #28]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	d006      	beq.n	800e1ea <_svfprintf_r+0xbe2>
 800e1dc:	2230      	movs	r2, #48	; 0x30
 800e1de:	ab25      	add	r3, sp, #148	; 0x94
 800e1e0:	701a      	strb	r2, [r3, #0]
 800e1e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1e4:	705a      	strb	r2, [r3, #1]
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	431e      	orrs	r6, r3
 800e1ea:	4b78      	ldr	r3, [pc, #480]	; (800e3cc <_svfprintf_r+0xdc4>)
 800e1ec:	401e      	ands	r6, r3
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e75c      	b.n	800e0ac <_svfprintf_r+0xaa4>
 800e1f2:	4b78      	ldr	r3, [pc, #480]	; (800e3d4 <_svfprintf_r+0xdcc>)
 800e1f4:	e7de      	b.n	800e1b4 <_svfprintf_r+0xbac>
 800e1f6:	0023      	movs	r3, r4
 800e1f8:	cb04      	ldmia	r3!, {r2}
 800e1fa:	0031      	movs	r1, r6
 800e1fc:	930d      	str	r3, [sp, #52]	; 0x34
 800e1fe:	2310      	movs	r3, #16
 800e200:	4019      	ands	r1, r3
 800e202:	421e      	tst	r6, r3
 800e204:	d002      	beq.n	800e20c <_svfprintf_r+0xc04>
 800e206:	9206      	str	r2, [sp, #24]
 800e208:	9007      	str	r0, [sp, #28]
 800e20a:	e7e1      	b.n	800e1d0 <_svfprintf_r+0xbc8>
 800e20c:	2340      	movs	r3, #64	; 0x40
 800e20e:	0030      	movs	r0, r6
 800e210:	4018      	ands	r0, r3
 800e212:	421e      	tst	r6, r3
 800e214:	d003      	beq.n	800e21e <_svfprintf_r+0xc16>
 800e216:	b293      	uxth	r3, r2
 800e218:	9306      	str	r3, [sp, #24]
 800e21a:	9107      	str	r1, [sp, #28]
 800e21c:	e7d8      	b.n	800e1d0 <_svfprintf_r+0xbc8>
 800e21e:	2380      	movs	r3, #128	; 0x80
 800e220:	0031      	movs	r1, r6
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4019      	ands	r1, r3
 800e226:	421e      	tst	r6, r3
 800e228:	d002      	beq.n	800e230 <_svfprintf_r+0xc28>
 800e22a:	b2d3      	uxtb	r3, r2
 800e22c:	9306      	str	r3, [sp, #24]
 800e22e:	e7eb      	b.n	800e208 <_svfprintf_r+0xc00>
 800e230:	9206      	str	r2, [sp, #24]
 800e232:	e7f2      	b.n	800e21a <_svfprintf_r+0xc12>
 800e234:	9b07      	ldr	r3, [sp, #28]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10a      	bne.n	800e250 <_svfprintf_r+0xc48>
 800e23a:	9b06      	ldr	r3, [sp, #24]
 800e23c:	2b09      	cmp	r3, #9
 800e23e:	d807      	bhi.n	800e250 <_svfprintf_r+0xc48>
 800e240:	23e7      	movs	r3, #231	; 0xe7
 800e242:	aa1e      	add	r2, sp, #120	; 0x78
 800e244:	189b      	adds	r3, r3, r2
 800e246:	9a06      	ldr	r2, [sp, #24]
 800e248:	3230      	adds	r2, #48	; 0x30
 800e24a:	701a      	strb	r2, [r3, #0]
 800e24c:	f000 fc18 	bl	800ea80 <_svfprintf_r+0x1478>
 800e250:	2680      	movs	r6, #128	; 0x80
 800e252:	2300      	movs	r3, #0
 800e254:	00f6      	lsls	r6, r6, #3
 800e256:	930e      	str	r3, [sp, #56]	; 0x38
 800e258:	ad58      	add	r5, sp, #352	; 0x160
 800e25a:	4026      	ands	r6, r4
 800e25c:	220a      	movs	r2, #10
 800e25e:	9806      	ldr	r0, [sp, #24]
 800e260:	9907      	ldr	r1, [sp, #28]
 800e262:	2300      	movs	r3, #0
 800e264:	f7f2 f91e 	bl	80004a4 <__aeabi_uldivmod>
 800e268:	1e6b      	subs	r3, r5, #1
 800e26a:	3230      	adds	r2, #48	; 0x30
 800e26c:	9308      	str	r3, [sp, #32]
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e272:	900c      	str	r0, [sp, #48]	; 0x30
 800e274:	3301      	adds	r3, #1
 800e276:	9110      	str	r1, [sp, #64]	; 0x40
 800e278:	930e      	str	r3, [sp, #56]	; 0x38
 800e27a:	2e00      	cmp	r6, #0
 800e27c:	d01d      	beq.n	800e2ba <_svfprintf_r+0xcb2>
 800e27e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	429a      	cmp	r2, r3
 800e286:	d118      	bne.n	800e2ba <_svfprintf_r+0xcb2>
 800e288:	2aff      	cmp	r2, #255	; 0xff
 800e28a:	d016      	beq.n	800e2ba <_svfprintf_r+0xcb2>
 800e28c:	9b07      	ldr	r3, [sp, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d102      	bne.n	800e298 <_svfprintf_r+0xc90>
 800e292:	9b06      	ldr	r3, [sp, #24]
 800e294:	2b09      	cmp	r3, #9
 800e296:	d910      	bls.n	800e2ba <_svfprintf_r+0xcb2>
 800e298:	9b08      	ldr	r3, [sp, #32]
 800e29a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e29c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e29e:	1a9b      	subs	r3, r3, r2
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	9308      	str	r3, [sp, #32]
 800e2a4:	f7fd ff97 	bl	800c1d6 <strncpy>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2ac:	920e      	str	r2, [sp, #56]	; 0x38
 800e2ae:	785b      	ldrb	r3, [r3, #1]
 800e2b0:	1e5a      	subs	r2, r3, #1
 800e2b2:	4193      	sbcs	r3, r2
 800e2b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e2b6:	18d3      	adds	r3, r2, r3
 800e2b8:	9312      	str	r3, [sp, #72]	; 0x48
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10f      	bne.n	800e2e0 <_svfprintf_r+0xcd8>
 800e2c0:	9b06      	ldr	r3, [sp, #24]
 800e2c2:	2b09      	cmp	r3, #9
 800e2c4:	d80c      	bhi.n	800e2e0 <_svfprintf_r+0xcd8>
 800e2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c8:	9a08      	ldr	r2, [sp, #32]
 800e2ca:	9319      	str	r3, [sp, #100]	; 0x64
 800e2cc:	ab58      	add	r3, sp, #352	; 0x160
 800e2ce:	1a9b      	subs	r3, r3, r2
 800e2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	0026      	movs	r6, r4
 800e2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d8:	001d      	movs	r5, r3
 800e2da:	9310      	str	r3, [sp, #64]	; 0x40
 800e2dc:	9311      	str	r3, [sp, #68]	; 0x44
 800e2de:	e4f2      	b.n	800dcc6 <_svfprintf_r+0x6be>
 800e2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2e2:	9d08      	ldr	r5, [sp, #32]
 800e2e4:	9306      	str	r3, [sp, #24]
 800e2e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2e8:	9307      	str	r3, [sp, #28]
 800e2ea:	e7b7      	b.n	800e25c <_svfprintf_r+0xc54>
 800e2ec:	200f      	movs	r0, #15
 800e2ee:	ab58      	add	r3, sp, #352	; 0x160
 800e2f0:	9308      	str	r3, [sp, #32]
 800e2f2:	9b08      	ldr	r3, [sp, #32]
 800e2f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	9308      	str	r3, [sp, #32]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	4003      	ands	r3, r0
 800e2fe:	5cd3      	ldrb	r3, [r2, r3]
 800e300:	9a08      	ldr	r2, [sp, #32]
 800e302:	7013      	strb	r3, [r2, #0]
 800e304:	9b07      	ldr	r3, [sp, #28]
 800e306:	0719      	lsls	r1, r3, #28
 800e308:	9b06      	ldr	r3, [sp, #24]
 800e30a:	091a      	lsrs	r2, r3, #4
 800e30c:	9b07      	ldr	r3, [sp, #28]
 800e30e:	4311      	orrs	r1, r2
 800e310:	091b      	lsrs	r3, r3, #4
 800e312:	9307      	str	r3, [sp, #28]
 800e314:	000b      	movs	r3, r1
 800e316:	9a07      	ldr	r2, [sp, #28]
 800e318:	9106      	str	r1, [sp, #24]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	d1e9      	bne.n	800e2f2 <_svfprintf_r+0xcea>
 800e31e:	e7d2      	b.n	800e2c6 <_svfprintf_r+0xcbe>
 800e320:	aa58      	add	r2, sp, #352	; 0x160
 800e322:	9208      	str	r2, [sp, #32]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1ce      	bne.n	800e2c6 <_svfprintf_r+0xcbe>
 800e328:	07f6      	lsls	r6, r6, #31
 800e32a:	d5cc      	bpl.n	800e2c6 <_svfprintf_r+0xcbe>
 800e32c:	aa1e      	add	r2, sp, #120	; 0x78
 800e32e:	33e7      	adds	r3, #231	; 0xe7
 800e330:	189b      	adds	r3, r3, r2
 800e332:	2230      	movs	r2, #48	; 0x30
 800e334:	e789      	b.n	800e24a <_svfprintf_r+0xc42>
 800e336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d100      	bne.n	800e33e <_svfprintf_r+0xd36>
 800e33c:	e364      	b.n	800ea08 <_svfprintf_r+0x1400>
 800e33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e340:	211b      	movs	r1, #27
 800e342:	ab3f      	add	r3, sp, #252	; 0xfc
 800e344:	701a      	strb	r2, [r3, #0]
 800e346:	2200      	movs	r2, #0
 800e348:	a81e      	add	r0, sp, #120	; 0x78
 800e34a:	1809      	adds	r1, r1, r0
 800e34c:	700a      	strb	r2, [r1, #0]
 800e34e:	940d      	str	r4, [sp, #52]	; 0x34
 800e350:	f7ff fabd 	bl	800d8ce <_svfprintf_r+0x2c6>
 800e354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e356:	f7ff fb44 	bl	800d9e2 <_svfprintf_r+0x3da>
 800e35a:	2010      	movs	r0, #16
 800e35c:	1812      	adds	r2, r2, r0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	922e      	str	r2, [sp, #184]	; 0xb8
 800e362:	932d      	str	r3, [sp, #180]	; 0xb4
 800e364:	2b07      	cmp	r3, #7
 800e366:	dd08      	ble.n	800e37a <_svfprintf_r+0xd72>
 800e368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e36a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e36c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e36e:	f003 f9db 	bl	8011728 <__ssprint_r>
 800e372:	2800      	cmp	r0, #0
 800e374:	d000      	beq.n	800e378 <_svfprintf_r+0xd70>
 800e376:	e326      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e378:	a92f      	add	r1, sp, #188	; 0xbc
 800e37a:	000f      	movs	r7, r1
 800e37c:	3c10      	subs	r4, #16
 800e37e:	e4c5      	b.n	800dd0c <_svfprintf_r+0x704>
 800e380:	2010      	movs	r0, #16
 800e382:	1812      	adds	r2, r2, r0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	922e      	str	r2, [sp, #184]	; 0xb8
 800e388:	932d      	str	r3, [sp, #180]	; 0xb4
 800e38a:	2b07      	cmp	r3, #7
 800e38c:	dd08      	ble.n	800e3a0 <_svfprintf_r+0xd98>
 800e38e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e390:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e392:	aa2c      	add	r2, sp, #176	; 0xb0
 800e394:	f003 f9c8 	bl	8011728 <__ssprint_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d000      	beq.n	800e39e <_svfprintf_r+0xd96>
 800e39c:	e313      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e39e:	a92f      	add	r1, sp, #188	; 0xbc
 800e3a0:	000f      	movs	r7, r1
 800e3a2:	3c10      	subs	r4, #16
 800e3a4:	e50b      	b.n	800ddbe <_svfprintf_r+0x7b6>
 800e3a6:	2010      	movs	r0, #16
 800e3a8:	1812      	adds	r2, r2, r0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3b0:	2b07      	cmp	r3, #7
 800e3b2:	dd08      	ble.n	800e3c6 <_svfprintf_r+0xdbe>
 800e3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3ba:	f003 f9b5 	bl	8011728 <__ssprint_r>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d000      	beq.n	800e3c4 <_svfprintf_r+0xdbc>
 800e3c2:	e300      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e3c4:	a92f      	add	r1, sp, #188	; 0xbc
 800e3c6:	000f      	movs	r7, r1
 800e3c8:	3c10      	subs	r4, #16
 800e3ca:	e518      	b.n	800ddfe <_svfprintf_r+0x7f6>
 800e3cc:	fffffbff 	.word	0xfffffbff
 800e3d0:	00007830 	.word	0x00007830
 800e3d4:	08014bac 	.word	0x08014bac
 800e3d8:	08014bbd 	.word	0x08014bbd
 800e3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3de:	2b65      	cmp	r3, #101	; 0x65
 800e3e0:	dc00      	bgt.n	800e3e4 <_svfprintf_r+0xddc>
 800e3e2:	e241      	b.n	800e868 <_svfprintf_r+0x1260>
 800e3e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e3e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	f7f2 f82c 	bl	8000448 <__aeabi_dcmpeq>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d077      	beq.n	800e4e4 <_svfprintf_r+0xedc>
 800e3f4:	4bca      	ldr	r3, [pc, #808]	; (800e720 <_svfprintf_r+0x1118>)
 800e3f6:	603b      	str	r3, [r7, #0]
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	607b      	str	r3, [r7, #4]
 800e3fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3fe:	3708      	adds	r7, #8
 800e400:	3301      	adds	r3, #1
 800e402:	932e      	str	r3, [sp, #184]	; 0xb8
 800e404:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e406:	3301      	adds	r3, #1
 800e408:	932d      	str	r3, [sp, #180]	; 0xb4
 800e40a:	2b07      	cmp	r3, #7
 800e40c:	dd08      	ble.n	800e420 <_svfprintf_r+0xe18>
 800e40e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e410:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e412:	aa2c      	add	r2, sp, #176	; 0xb0
 800e414:	f003 f988 	bl	8011728 <__ssprint_r>
 800e418:	2800      	cmp	r0, #0
 800e41a:	d000      	beq.n	800e41e <_svfprintf_r+0xe16>
 800e41c:	e2d3      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e41e:	af2f      	add	r7, sp, #188	; 0xbc
 800e420:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e424:	4293      	cmp	r3, r2
 800e426:	db01      	blt.n	800e42c <_svfprintf_r+0xe24>
 800e428:	07f3      	lsls	r3, r6, #31
 800e42a:	d51b      	bpl.n	800e464 <_svfprintf_r+0xe5c>
 800e42c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e42e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e430:	603b      	str	r3, [r7, #0]
 800e432:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e434:	607b      	str	r3, [r7, #4]
 800e436:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e438:	3708      	adds	r7, #8
 800e43a:	189b      	adds	r3, r3, r2
 800e43c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e43e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e440:	3301      	adds	r3, #1
 800e442:	932d      	str	r3, [sp, #180]	; 0xb4
 800e444:	2b07      	cmp	r3, #7
 800e446:	dd08      	ble.n	800e45a <_svfprintf_r+0xe52>
 800e448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e44a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e44c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e44e:	f003 f96b 	bl	8011728 <__ssprint_r>
 800e452:	2800      	cmp	r0, #0
 800e454:	d000      	beq.n	800e458 <_svfprintf_r+0xe50>
 800e456:	e2b6      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e458:	af2f      	add	r7, sp, #188	; 0xbc
 800e45a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e45c:	2510      	movs	r5, #16
 800e45e:	1e5c      	subs	r4, r3, #1
 800e460:	2c00      	cmp	r4, #0
 800e462:	dc2e      	bgt.n	800e4c2 <_svfprintf_r+0xeba>
 800e464:	0776      	lsls	r6, r6, #29
 800e466:	d500      	bpl.n	800e46a <_svfprintf_r+0xe62>
 800e468:	e290      	b.n	800e98c <_svfprintf_r+0x1384>
 800e46a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e46c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e46e:	4293      	cmp	r3, r2
 800e470:	da00      	bge.n	800e474 <_svfprintf_r+0xe6c>
 800e472:	0013      	movs	r3, r2
 800e474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e476:	18d3      	adds	r3, r2, r3
 800e478:	9317      	str	r3, [sp, #92]	; 0x5c
 800e47a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <_svfprintf_r+0xe88>
 800e480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e482:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e484:	aa2c      	add	r2, sp, #176	; 0xb0
 800e486:	f003 f94f 	bl	8011728 <__ssprint_r>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d000      	beq.n	800e490 <_svfprintf_r+0xe88>
 800e48e:	e29a      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e490:	2300      	movs	r3, #0
 800e492:	932d      	str	r3, [sp, #180]	; 0xb4
 800e494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e496:	2b00      	cmp	r3, #0
 800e498:	d000      	beq.n	800e49c <_svfprintf_r+0xe94>
 800e49a:	e2b0      	b.n	800e9fe <_svfprintf_r+0x13f6>
 800e49c:	af2f      	add	r7, sp, #188	; 0xbc
 800e49e:	e5dc      	b.n	800e05a <_svfprintf_r+0xa52>
 800e4a0:	3210      	adds	r2, #16
 800e4a2:	607d      	str	r5, [r7, #4]
 800e4a4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4a8:	2b07      	cmp	r3, #7
 800e4aa:	dd08      	ble.n	800e4be <_svfprintf_r+0xeb6>
 800e4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4b2:	f003 f939 	bl	8011728 <__ssprint_r>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d000      	beq.n	800e4bc <_svfprintf_r+0xeb4>
 800e4ba:	e284      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e4bc:	a92f      	add	r1, sp, #188	; 0xbc
 800e4be:	000f      	movs	r7, r1
 800e4c0:	3c10      	subs	r4, #16
 800e4c2:	0039      	movs	r1, r7
 800e4c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4c6:	4897      	ldr	r0, [pc, #604]	; (800e724 <_svfprintf_r+0x111c>)
 800e4c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	3108      	adds	r1, #8
 800e4ce:	6038      	str	r0, [r7, #0]
 800e4d0:	2c10      	cmp	r4, #16
 800e4d2:	dce5      	bgt.n	800e4a0 <_svfprintf_r+0xe98>
 800e4d4:	607c      	str	r4, [r7, #4]
 800e4d6:	18a4      	adds	r4, r4, r2
 800e4d8:	942e      	str	r4, [sp, #184]	; 0xb8
 800e4da:	000f      	movs	r7, r1
 800e4dc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4de:	2b07      	cmp	r3, #7
 800e4e0:	ddc0      	ble.n	800e464 <_svfprintf_r+0xe5c>
 800e4e2:	e05f      	b.n	800e5a4 <_svfprintf_r+0xf9c>
 800e4e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	dc78      	bgt.n	800e5dc <_svfprintf_r+0xfd4>
 800e4ea:	4b8d      	ldr	r3, [pc, #564]	; (800e720 <_svfprintf_r+0x1118>)
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e4fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800e500:	2b07      	cmp	r3, #7
 800e502:	dd08      	ble.n	800e516 <_svfprintf_r+0xf0e>
 800e504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e506:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e508:	aa2c      	add	r2, sp, #176	; 0xb0
 800e50a:	f003 f90d 	bl	8011728 <__ssprint_r>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d000      	beq.n	800e514 <_svfprintf_r+0xf0c>
 800e512:	e258      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e514:	af2f      	add	r7, sp, #188	; 0xbc
 800e516:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e518:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e51a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e51c:	430b      	orrs	r3, r1
 800e51e:	2101      	movs	r1, #1
 800e520:	4031      	ands	r1, r6
 800e522:	430b      	orrs	r3, r1
 800e524:	d09e      	beq.n	800e464 <_svfprintf_r+0xe5c>
 800e526:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e528:	603b      	str	r3, [r7, #0]
 800e52a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e52c:	607b      	str	r3, [r7, #4]
 800e52e:	189a      	adds	r2, r3, r2
 800e530:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e532:	922e      	str	r2, [sp, #184]	; 0xb8
 800e534:	3301      	adds	r3, #1
 800e536:	932d      	str	r3, [sp, #180]	; 0xb4
 800e538:	3708      	adds	r7, #8
 800e53a:	2b07      	cmp	r3, #7
 800e53c:	dd08      	ble.n	800e550 <_svfprintf_r+0xf48>
 800e53e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e540:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e542:	aa2c      	add	r2, sp, #176	; 0xb0
 800e544:	f003 f8f0 	bl	8011728 <__ssprint_r>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d000      	beq.n	800e54e <_svfprintf_r+0xf46>
 800e54c:	e23b      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e54e:	af2f      	add	r7, sp, #188	; 0xbc
 800e550:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e552:	2c00      	cmp	r4, #0
 800e554:	da19      	bge.n	800e58a <_svfprintf_r+0xf82>
 800e556:	0038      	movs	r0, r7
 800e558:	2510      	movs	r5, #16
 800e55a:	4264      	negs	r4, r4
 800e55c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e55e:	4a71      	ldr	r2, [pc, #452]	; (800e724 <_svfprintf_r+0x111c>)
 800e560:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e562:	3101      	adds	r1, #1
 800e564:	3708      	adds	r7, #8
 800e566:	6002      	str	r2, [r0, #0]
 800e568:	2c10      	cmp	r4, #16
 800e56a:	dc25      	bgt.n	800e5b8 <_svfprintf_r+0xfb0>
 800e56c:	6044      	str	r4, [r0, #4]
 800e56e:	18e4      	adds	r4, r4, r3
 800e570:	942e      	str	r4, [sp, #184]	; 0xb8
 800e572:	912d      	str	r1, [sp, #180]	; 0xb4
 800e574:	2907      	cmp	r1, #7
 800e576:	dd08      	ble.n	800e58a <_svfprintf_r+0xf82>
 800e578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e57a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e57c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e57e:	f003 f8d3 	bl	8011728 <__ssprint_r>
 800e582:	2800      	cmp	r0, #0
 800e584:	d000      	beq.n	800e588 <_svfprintf_r+0xf80>
 800e586:	e21e      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e588:	af2f      	add	r7, sp, #188	; 0xbc
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e58e:	603b      	str	r3, [r7, #0]
 800e590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e592:	18d2      	adds	r2, r2, r3
 800e594:	922e      	str	r2, [sp, #184]	; 0xb8
 800e596:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e598:	607b      	str	r3, [r7, #4]
 800e59a:	3201      	adds	r2, #1
 800e59c:	922d      	str	r2, [sp, #180]	; 0xb4
 800e59e:	2a07      	cmp	r2, #7
 800e5a0:	dc00      	bgt.n	800e5a4 <_svfprintf_r+0xf9c>
 800e5a2:	e45b      	b.n	800de5c <_svfprintf_r+0x854>
 800e5a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5a8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5aa:	f003 f8bd 	bl	8011728 <__ssprint_r>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d000      	beq.n	800e5b4 <_svfprintf_r+0xfac>
 800e5b2:	e208      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e5b4:	af2f      	add	r7, sp, #188	; 0xbc
 800e5b6:	e755      	b.n	800e464 <_svfprintf_r+0xe5c>
 800e5b8:	3310      	adds	r3, #16
 800e5ba:	6045      	str	r5, [r0, #4]
 800e5bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5be:	912d      	str	r1, [sp, #180]	; 0xb4
 800e5c0:	2907      	cmp	r1, #7
 800e5c2:	dd08      	ble.n	800e5d6 <_svfprintf_r+0xfce>
 800e5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5ca:	f003 f8ad 	bl	8011728 <__ssprint_r>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d000      	beq.n	800e5d4 <_svfprintf_r+0xfcc>
 800e5d2:	e1f8      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e5d4:	af2f      	add	r7, sp, #188	; 0xbc
 800e5d6:	0038      	movs	r0, r7
 800e5d8:	3c10      	subs	r4, #16
 800e5da:	e7bf      	b.n	800e55c <_svfprintf_r+0xf54>
 800e5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5de:	002c      	movs	r4, r5
 800e5e0:	429d      	cmp	r5, r3
 800e5e2:	dd00      	ble.n	800e5e6 <_svfprintf_r+0xfde>
 800e5e4:	001c      	movs	r4, r3
 800e5e6:	2c00      	cmp	r4, #0
 800e5e8:	dd14      	ble.n	800e614 <_svfprintf_r+0x100c>
 800e5ea:	9b08      	ldr	r3, [sp, #32]
 800e5ec:	607c      	str	r4, [r7, #4]
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	18e3      	adds	r3, r4, r3
 800e5f6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5fe:	2b07      	cmp	r3, #7
 800e600:	dd08      	ble.n	800e614 <_svfprintf_r+0x100c>
 800e602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e604:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e606:	aa2c      	add	r2, sp, #176	; 0xb0
 800e608:	f003 f88e 	bl	8011728 <__ssprint_r>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d000      	beq.n	800e612 <_svfprintf_r+0x100a>
 800e610:	e1d9      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e612:	af2f      	add	r7, sp, #188	; 0xbc
 800e614:	43e3      	mvns	r3, r4
 800e616:	17db      	asrs	r3, r3, #31
 800e618:	401c      	ands	r4, r3
 800e61a:	1b2c      	subs	r4, r5, r4
 800e61c:	2c00      	cmp	r4, #0
 800e61e:	dd18      	ble.n	800e652 <_svfprintf_r+0x104a>
 800e620:	0039      	movs	r1, r7
 800e622:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e624:	483f      	ldr	r0, [pc, #252]	; (800e724 <_svfprintf_r+0x111c>)
 800e626:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e628:	3301      	adds	r3, #1
 800e62a:	3108      	adds	r1, #8
 800e62c:	6038      	str	r0, [r7, #0]
 800e62e:	2c10      	cmp	r4, #16
 800e630:	dc7a      	bgt.n	800e728 <_svfprintf_r+0x1120>
 800e632:	607c      	str	r4, [r7, #4]
 800e634:	18a4      	adds	r4, r4, r2
 800e636:	000f      	movs	r7, r1
 800e638:	942e      	str	r4, [sp, #184]	; 0xb8
 800e63a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e63c:	2b07      	cmp	r3, #7
 800e63e:	dd08      	ble.n	800e652 <_svfprintf_r+0x104a>
 800e640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e642:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e644:	aa2c      	add	r2, sp, #176	; 0xb0
 800e646:	f003 f86f 	bl	8011728 <__ssprint_r>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d000      	beq.n	800e650 <_svfprintf_r+0x1048>
 800e64e:	e1ba      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e650:	af2f      	add	r7, sp, #188	; 0xbc
 800e652:	9b08      	ldr	r3, [sp, #32]
 800e654:	195d      	adds	r5, r3, r5
 800e656:	0573      	lsls	r3, r6, #21
 800e658:	d50b      	bpl.n	800e672 <_svfprintf_r+0x106a>
 800e65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d176      	bne.n	800e74e <_svfprintf_r+0x1146>
 800e660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e662:	2b00      	cmp	r3, #0
 800e664:	d176      	bne.n	800e754 <_svfprintf_r+0x114c>
 800e666:	9b08      	ldr	r3, [sp, #32]
 800e668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e66a:	189b      	adds	r3, r3, r2
 800e66c:	429d      	cmp	r5, r3
 800e66e:	d900      	bls.n	800e672 <_svfprintf_r+0x106a>
 800e670:	001d      	movs	r5, r3
 800e672:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e676:	4293      	cmp	r3, r2
 800e678:	db01      	blt.n	800e67e <_svfprintf_r+0x1076>
 800e67a:	07f3      	lsls	r3, r6, #31
 800e67c:	d516      	bpl.n	800e6ac <_svfprintf_r+0x10a4>
 800e67e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e680:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e686:	607b      	str	r3, [r7, #4]
 800e688:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e68a:	3708      	adds	r7, #8
 800e68c:	189b      	adds	r3, r3, r2
 800e68e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e690:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e692:	3301      	adds	r3, #1
 800e694:	932d      	str	r3, [sp, #180]	; 0xb4
 800e696:	2b07      	cmp	r3, #7
 800e698:	dd08      	ble.n	800e6ac <_svfprintf_r+0x10a4>
 800e69a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e69c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e69e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6a0:	f003 f842 	bl	8011728 <__ssprint_r>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d000      	beq.n	800e6aa <_svfprintf_r+0x10a2>
 800e6a8:	e18d      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e6aa:	af2f      	add	r7, sp, #188	; 0xbc
 800e6ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6ae:	9b08      	ldr	r3, [sp, #32]
 800e6b0:	4694      	mov	ip, r2
 800e6b2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e6b4:	4463      	add	r3, ip
 800e6b6:	1b5b      	subs	r3, r3, r5
 800e6b8:	1b14      	subs	r4, r2, r4
 800e6ba:	429c      	cmp	r4, r3
 800e6bc:	dd00      	ble.n	800e6c0 <_svfprintf_r+0x10b8>
 800e6be:	001c      	movs	r4, r3
 800e6c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6c2:	2c00      	cmp	r4, #0
 800e6c4:	dd12      	ble.n	800e6ec <_svfprintf_r+0x10e4>
 800e6c6:	18e3      	adds	r3, r4, r3
 800e6c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e6ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6cc:	603d      	str	r5, [r7, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	607c      	str	r4, [r7, #4]
 800e6d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	2b07      	cmp	r3, #7
 800e6d8:	dd08      	ble.n	800e6ec <_svfprintf_r+0x10e4>
 800e6da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6de:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6e0:	f003 f822 	bl	8011728 <__ssprint_r>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d000      	beq.n	800e6ea <_svfprintf_r+0x10e2>
 800e6e8:	e16d      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e6ea:	af2f      	add	r7, sp, #188	; 0xbc
 800e6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6f0:	2510      	movs	r5, #16
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	43e2      	mvns	r2, r4
 800e6f6:	17d2      	asrs	r2, r2, #31
 800e6f8:	4014      	ands	r4, r2
 800e6fa:	1b1c      	subs	r4, r3, r4
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	dc00      	bgt.n	800e702 <_svfprintf_r+0x10fa>
 800e700:	e6b0      	b.n	800e464 <_svfprintf_r+0xe5c>
 800e702:	0039      	movs	r1, r7
 800e704:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e706:	4807      	ldr	r0, [pc, #28]	; (800e724 <_svfprintf_r+0x111c>)
 800e708:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e70a:	3301      	adds	r3, #1
 800e70c:	3108      	adds	r1, #8
 800e70e:	6038      	str	r0, [r7, #0]
 800e710:	2c10      	cmp	r4, #16
 800e712:	dd00      	ble.n	800e716 <_svfprintf_r+0x110e>
 800e714:	e096      	b.n	800e844 <_svfprintf_r+0x123c>
 800e716:	1912      	adds	r2, r2, r4
 800e718:	607c      	str	r4, [r7, #4]
 800e71a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e71c:	e6dd      	b.n	800e4da <_svfprintf_r+0xed2>
 800e71e:	46c0      	nop			; (mov r8, r8)
 800e720:	08014bce 	.word	0x08014bce
 800e724:	08014be0 	.word	0x08014be0
 800e728:	2010      	movs	r0, #16
 800e72a:	1812      	adds	r2, r2, r0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e730:	932d      	str	r3, [sp, #180]	; 0xb4
 800e732:	2b07      	cmp	r3, #7
 800e734:	dd08      	ble.n	800e748 <_svfprintf_r+0x1140>
 800e736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e738:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e73a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e73c:	f002 fff4 	bl	8011728 <__ssprint_r>
 800e740:	2800      	cmp	r0, #0
 800e742:	d000      	beq.n	800e746 <_svfprintf_r+0x113e>
 800e744:	e13f      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e746:	a92f      	add	r1, sp, #188	; 0xbc
 800e748:	000f      	movs	r7, r1
 800e74a:	3c10      	subs	r4, #16
 800e74c:	e768      	b.n	800e620 <_svfprintf_r+0x1018>
 800e74e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e750:	2b00      	cmp	r3, #0
 800e752:	d05d      	beq.n	800e810 <_svfprintf_r+0x1208>
 800e754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e756:	3b01      	subs	r3, #1
 800e758:	9310      	str	r3, [sp, #64]	; 0x40
 800e75a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e75c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e762:	607b      	str	r3, [r7, #4]
 800e764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e766:	3708      	adds	r7, #8
 800e768:	189b      	adds	r3, r3, r2
 800e76a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e76c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e76e:	3301      	adds	r3, #1
 800e770:	932d      	str	r3, [sp, #180]	; 0xb4
 800e772:	2b07      	cmp	r3, #7
 800e774:	dd08      	ble.n	800e788 <_svfprintf_r+0x1180>
 800e776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e778:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e77a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e77c:	f002 ffd4 	bl	8011728 <__ssprint_r>
 800e780:	2800      	cmp	r0, #0
 800e782:	d000      	beq.n	800e786 <_svfprintf_r+0x117e>
 800e784:	e11f      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e786:	af2f      	add	r7, sp, #188	; 0xbc
 800e788:	9b08      	ldr	r3, [sp, #32]
 800e78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e78c:	189c      	adds	r4, r3, r2
 800e78e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e790:	1b64      	subs	r4, r4, r5
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	429c      	cmp	r4, r3
 800e796:	dd00      	ble.n	800e79a <_svfprintf_r+0x1192>
 800e798:	001c      	movs	r4, r3
 800e79a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	dd12      	ble.n	800e7c6 <_svfprintf_r+0x11be>
 800e7a0:	18e3      	adds	r3, r4, r3
 800e7a2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7a6:	603d      	str	r5, [r7, #0]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	607c      	str	r4, [r7, #4]
 800e7ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	2b07      	cmp	r3, #7
 800e7b2:	dd08      	ble.n	800e7c6 <_svfprintf_r+0x11be>
 800e7b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7ba:	f002 ffb5 	bl	8011728 <__ssprint_r>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d000      	beq.n	800e7c4 <_svfprintf_r+0x11bc>
 800e7c2:	e100      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e7c4:	af2f      	add	r7, sp, #188	; 0xbc
 800e7c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	43e3      	mvns	r3, r4
 800e7cc:	17db      	asrs	r3, r3, #31
 800e7ce:	401c      	ands	r4, r3
 800e7d0:	1b14      	subs	r4, r2, r4
 800e7d2:	2c00      	cmp	r4, #0
 800e7d4:	dd18      	ble.n	800e808 <_svfprintf_r+0x1200>
 800e7d6:	0039      	movs	r1, r7
 800e7d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7da:	48aa      	ldr	r0, [pc, #680]	; (800ea84 <_svfprintf_r+0x147c>)
 800e7dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e7de:	3301      	adds	r3, #1
 800e7e0:	3108      	adds	r1, #8
 800e7e2:	6038      	str	r0, [r7, #0]
 800e7e4:	2c10      	cmp	r4, #16
 800e7e6:	dc1a      	bgt.n	800e81e <_svfprintf_r+0x1216>
 800e7e8:	1912      	adds	r2, r2, r4
 800e7ea:	607c      	str	r4, [r7, #4]
 800e7ec:	922e      	str	r2, [sp, #184]	; 0xb8
 800e7ee:	000f      	movs	r7, r1
 800e7f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7f2:	2b07      	cmp	r3, #7
 800e7f4:	dd08      	ble.n	800e808 <_svfprintf_r+0x1200>
 800e7f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7fc:	f002 ff94 	bl	8011728 <__ssprint_r>
 800e800:	2800      	cmp	r0, #0
 800e802:	d000      	beq.n	800e806 <_svfprintf_r+0x11fe>
 800e804:	e0df      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e806:	af2f      	add	r7, sp, #188	; 0xbc
 800e808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	18ed      	adds	r5, r5, r3
 800e80e:	e724      	b.n	800e65a <_svfprintf_r+0x1052>
 800e810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e812:	3b01      	subs	r3, #1
 800e814:	9312      	str	r3, [sp, #72]	; 0x48
 800e816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e818:	3b01      	subs	r3, #1
 800e81a:	9311      	str	r3, [sp, #68]	; 0x44
 800e81c:	e79d      	b.n	800e75a <_svfprintf_r+0x1152>
 800e81e:	2010      	movs	r0, #16
 800e820:	1812      	adds	r2, r2, r0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	922e      	str	r2, [sp, #184]	; 0xb8
 800e826:	932d      	str	r3, [sp, #180]	; 0xb4
 800e828:	2b07      	cmp	r3, #7
 800e82a:	dd08      	ble.n	800e83e <_svfprintf_r+0x1236>
 800e82c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e82e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e830:	aa2c      	add	r2, sp, #176	; 0xb0
 800e832:	f002 ff79 	bl	8011728 <__ssprint_r>
 800e836:	2800      	cmp	r0, #0
 800e838:	d000      	beq.n	800e83c <_svfprintf_r+0x1234>
 800e83a:	e0c4      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e83c:	a92f      	add	r1, sp, #188	; 0xbc
 800e83e:	000f      	movs	r7, r1
 800e840:	3c10      	subs	r4, #16
 800e842:	e7c8      	b.n	800e7d6 <_svfprintf_r+0x11ce>
 800e844:	3210      	adds	r2, #16
 800e846:	607d      	str	r5, [r7, #4]
 800e848:	922e      	str	r2, [sp, #184]	; 0xb8
 800e84a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e84c:	2b07      	cmp	r3, #7
 800e84e:	dd08      	ble.n	800e862 <_svfprintf_r+0x125a>
 800e850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e852:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e854:	aa2c      	add	r2, sp, #176	; 0xb0
 800e856:	f002 ff67 	bl	8011728 <__ssprint_r>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d000      	beq.n	800e860 <_svfprintf_r+0x1258>
 800e85e:	e0b2      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e860:	a92f      	add	r1, sp, #188	; 0xbc
 800e862:	000f      	movs	r7, r1
 800e864:	3c10      	subs	r4, #16
 800e866:	e74c      	b.n	800e702 <_svfprintf_r+0x10fa>
 800e868:	003c      	movs	r4, r7
 800e86a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e86c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e870:	3101      	adds	r1, #1
 800e872:	3301      	adds	r3, #1
 800e874:	3408      	adds	r4, #8
 800e876:	2a01      	cmp	r2, #1
 800e878:	dc03      	bgt.n	800e882 <_svfprintf_r+0x127a>
 800e87a:	2201      	movs	r2, #1
 800e87c:	4216      	tst	r6, r2
 800e87e:	d100      	bne.n	800e882 <_svfprintf_r+0x127a>
 800e880:	e07f      	b.n	800e982 <_svfprintf_r+0x137a>
 800e882:	9a08      	ldr	r2, [sp, #32]
 800e884:	912e      	str	r1, [sp, #184]	; 0xb8
 800e886:	603a      	str	r2, [r7, #0]
 800e888:	2201      	movs	r2, #1
 800e88a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e88c:	607a      	str	r2, [r7, #4]
 800e88e:	2b07      	cmp	r3, #7
 800e890:	dd08      	ble.n	800e8a4 <_svfprintf_r+0x129c>
 800e892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e894:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e896:	aa2c      	add	r2, sp, #176	; 0xb0
 800e898:	f002 ff46 	bl	8011728 <__ssprint_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d000      	beq.n	800e8a2 <_svfprintf_r+0x129a>
 800e8a0:	e091      	b.n	800e9c6 <_svfprintf_r+0x13be>
 800e8a2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e8a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8ac:	6063      	str	r3, [r4, #4]
 800e8ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8b0:	3408      	adds	r4, #8
 800e8b2:	189b      	adds	r3, r3, r2
 800e8b4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8bc:	2b07      	cmp	r3, #7
 800e8be:	dd07      	ble.n	800e8d0 <_svfprintf_r+0x12c8>
 800e8c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8c4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8c6:	f002 ff2f 	bl	8011728 <__ssprint_r>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d17b      	bne.n	800e9c6 <_svfprintf_r+0x13be>
 800e8ce:	ac2f      	add	r4, sp, #188	; 0xbc
 800e8d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e8d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8dc:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e8de:	1e5d      	subs	r5, r3, #1
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f7f1 fdb1 	bl	8000448 <__aeabi_dcmpeq>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d126      	bne.n	800e938 <_svfprintf_r+0x1330>
 800e8ea:	9b08      	ldr	r3, [sp, #32]
 800e8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	1e7b      	subs	r3, r7, #1
 800e8f6:	3201      	adds	r2, #1
 800e8f8:	185b      	adds	r3, r3, r1
 800e8fa:	6065      	str	r5, [r4, #4]
 800e8fc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8fe:	922d      	str	r2, [sp, #180]	; 0xb4
 800e900:	3408      	adds	r4, #8
 800e902:	2a07      	cmp	r2, #7
 800e904:	dd07      	ble.n	800e916 <_svfprintf_r+0x130e>
 800e906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e908:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e90a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e90c:	f002 ff0c 	bl	8011728 <__ssprint_r>
 800e910:	2800      	cmp	r0, #0
 800e912:	d158      	bne.n	800e9c6 <_svfprintf_r+0x13be>
 800e914:	ac2f      	add	r4, sp, #188	; 0xbc
 800e916:	ab28      	add	r3, sp, #160	; 0xa0
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e91c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e91e:	6063      	str	r3, [r4, #4]
 800e920:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e922:	189b      	adds	r3, r3, r2
 800e924:	932e      	str	r3, [sp, #184]	; 0xb8
 800e926:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e928:	3301      	adds	r3, #1
 800e92a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e92c:	2b07      	cmp	r3, #7
 800e92e:	dd00      	ble.n	800e932 <_svfprintf_r+0x132a>
 800e930:	e638      	b.n	800e5a4 <_svfprintf_r+0xf9c>
 800e932:	3408      	adds	r4, #8
 800e934:	0027      	movs	r7, r4
 800e936:	e595      	b.n	800e464 <_svfprintf_r+0xe5c>
 800e938:	2710      	movs	r7, #16
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	ddeb      	ble.n	800e916 <_svfprintf_r+0x130e>
 800e93e:	0021      	movs	r1, r4
 800e940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e942:	4850      	ldr	r0, [pc, #320]	; (800ea84 <_svfprintf_r+0x147c>)
 800e944:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e946:	3301      	adds	r3, #1
 800e948:	3108      	adds	r1, #8
 800e94a:	6020      	str	r0, [r4, #0]
 800e94c:	2d10      	cmp	r5, #16
 800e94e:	dc07      	bgt.n	800e960 <_svfprintf_r+0x1358>
 800e950:	6065      	str	r5, [r4, #4]
 800e952:	000c      	movs	r4, r1
 800e954:	18ad      	adds	r5, r5, r2
 800e956:	952e      	str	r5, [sp, #184]	; 0xb8
 800e958:	932d      	str	r3, [sp, #180]	; 0xb4
 800e95a:	2b07      	cmp	r3, #7
 800e95c:	dddb      	ble.n	800e916 <_svfprintf_r+0x130e>
 800e95e:	e7d2      	b.n	800e906 <_svfprintf_r+0x12fe>
 800e960:	3210      	adds	r2, #16
 800e962:	6067      	str	r7, [r4, #4]
 800e964:	922e      	str	r2, [sp, #184]	; 0xb8
 800e966:	932d      	str	r3, [sp, #180]	; 0xb4
 800e968:	2b07      	cmp	r3, #7
 800e96a:	dd07      	ble.n	800e97c <_svfprintf_r+0x1374>
 800e96c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e96e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e970:	aa2c      	add	r2, sp, #176	; 0xb0
 800e972:	f002 fed9 	bl	8011728 <__ssprint_r>
 800e976:	2800      	cmp	r0, #0
 800e978:	d125      	bne.n	800e9c6 <_svfprintf_r+0x13be>
 800e97a:	a92f      	add	r1, sp, #188	; 0xbc
 800e97c:	000c      	movs	r4, r1
 800e97e:	3d10      	subs	r5, #16
 800e980:	e7dd      	b.n	800e93e <_svfprintf_r+0x1336>
 800e982:	9808      	ldr	r0, [sp, #32]
 800e984:	912e      	str	r1, [sp, #184]	; 0xb8
 800e986:	c705      	stmia	r7!, {r0, r2}
 800e988:	932d      	str	r3, [sp, #180]	; 0xb4
 800e98a:	e7e6      	b.n	800e95a <_svfprintf_r+0x1352>
 800e98c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e98e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e990:	2510      	movs	r5, #16
 800e992:	1a9c      	subs	r4, r3, r2
 800e994:	2c00      	cmp	r4, #0
 800e996:	dc00      	bgt.n	800e99a <_svfprintf_r+0x1392>
 800e998:	e567      	b.n	800e46a <_svfprintf_r+0xe62>
 800e99a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e99c:	493a      	ldr	r1, [pc, #232]	; (800ea88 <_svfprintf_r+0x1480>)
 800e99e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	6039      	str	r1, [r7, #0]
 800e9a4:	2c10      	cmp	r4, #16
 800e9a6:	dc19      	bgt.n	800e9dc <_svfprintf_r+0x13d4>
 800e9a8:	607c      	str	r4, [r7, #4]
 800e9aa:	18a4      	adds	r4, r4, r2
 800e9ac:	942e      	str	r4, [sp, #184]	; 0xb8
 800e9ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9b0:	2b07      	cmp	r3, #7
 800e9b2:	dc00      	bgt.n	800e9b6 <_svfprintf_r+0x13ae>
 800e9b4:	e559      	b.n	800e46a <_svfprintf_r+0xe62>
 800e9b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9bc:	f002 feb4 	bl	8011728 <__ssprint_r>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d100      	bne.n	800e9c6 <_svfprintf_r+0x13be>
 800e9c4:	e551      	b.n	800e46a <_svfprintf_r+0xe62>
 800e9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <_svfprintf_r+0x13c8>
 800e9cc:	f7ff f845 	bl	800da5a <_svfprintf_r+0x452>
 800e9d0:	0019      	movs	r1, r3
 800e9d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9d4:	f7fd fd80 	bl	800c4d8 <_free_r>
 800e9d8:	f7ff f83f 	bl	800da5a <_svfprintf_r+0x452>
 800e9dc:	3210      	adds	r2, #16
 800e9de:	607d      	str	r5, [r7, #4]
 800e9e0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	2b07      	cmp	r3, #7
 800e9e8:	dd07      	ble.n	800e9fa <_svfprintf_r+0x13f2>
 800e9ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9f0:	f002 fe9a 	bl	8011728 <__ssprint_r>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d1e6      	bne.n	800e9c6 <_svfprintf_r+0x13be>
 800e9f8:	af2f      	add	r7, sp, #188	; 0xbc
 800e9fa:	3c10      	subs	r4, #16
 800e9fc:	e7cd      	b.n	800e99a <_svfprintf_r+0x1392>
 800e9fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea00:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea02:	f7fd fd69 	bl	800c4d8 <_free_r>
 800ea06:	e549      	b.n	800e49c <_svfprintf_r+0xe94>
 800ea08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <_svfprintf_r+0x140a>
 800ea0e:	f7ff f824 	bl	800da5a <_svfprintf_r+0x452>
 800ea12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea16:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea18:	f002 fe86 	bl	8011728 <__ssprint_r>
 800ea1c:	f7ff f81d 	bl	800da5a <_svfprintf_r+0x452>
 800ea20:	0034      	movs	r4, r6
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	d101      	bne.n	800ea2a <_svfprintf_r+0x1422>
 800ea26:	f7fe ff8c 	bl	800d942 <_svfprintf_r+0x33a>
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d101      	bne.n	800ea32 <_svfprintf_r+0x142a>
 800ea2e:	f7ff fc01 	bl	800e234 <_svfprintf_r+0xc2c>
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d100      	bne.n	800ea38 <_svfprintf_r+0x1430>
 800ea36:	e459      	b.n	800e2ec <_svfprintf_r+0xce4>
 800ea38:	2507      	movs	r5, #7
 800ea3a:	ab58      	add	r3, sp, #352	; 0x160
 800ea3c:	9308      	str	r3, [sp, #32]
 800ea3e:	9a08      	ldr	r2, [sp, #32]
 800ea40:	0013      	movs	r3, r2
 800ea42:	3b01      	subs	r3, #1
 800ea44:	9308      	str	r3, [sp, #32]
 800ea46:	9b06      	ldr	r3, [sp, #24]
 800ea48:	9908      	ldr	r1, [sp, #32]
 800ea4a:	402b      	ands	r3, r5
 800ea4c:	3330      	adds	r3, #48	; 0x30
 800ea4e:	700b      	strb	r3, [r1, #0]
 800ea50:	9907      	ldr	r1, [sp, #28]
 800ea52:	074e      	lsls	r6, r1, #29
 800ea54:	9906      	ldr	r1, [sp, #24]
 800ea56:	08c8      	lsrs	r0, r1, #3
 800ea58:	9907      	ldr	r1, [sp, #28]
 800ea5a:	4306      	orrs	r6, r0
 800ea5c:	08c9      	lsrs	r1, r1, #3
 800ea5e:	9107      	str	r1, [sp, #28]
 800ea60:	0031      	movs	r1, r6
 800ea62:	9807      	ldr	r0, [sp, #28]
 800ea64:	9606      	str	r6, [sp, #24]
 800ea66:	4301      	orrs	r1, r0
 800ea68:	d1e9      	bne.n	800ea3e <_svfprintf_r+0x1436>
 800ea6a:	07e1      	lsls	r1, r4, #31
 800ea6c:	d400      	bmi.n	800ea70 <_svfprintf_r+0x1468>
 800ea6e:	e42a      	b.n	800e2c6 <_svfprintf_r+0xcbe>
 800ea70:	2b30      	cmp	r3, #48	; 0x30
 800ea72:	d100      	bne.n	800ea76 <_svfprintf_r+0x146e>
 800ea74:	e427      	b.n	800e2c6 <_svfprintf_r+0xcbe>
 800ea76:	2130      	movs	r1, #48	; 0x30
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	7019      	strb	r1, [r3, #0]
 800ea7e:	1e93      	subs	r3, r2, #2
 800ea80:	9308      	str	r3, [sp, #32]
 800ea82:	e420      	b.n	800e2c6 <_svfprintf_r+0xcbe>
 800ea84:	08014be0 	.word	0x08014be0
 800ea88:	08014bd0 	.word	0x08014bd0

0800ea8c <__ssvfscanf_r>:
 800ea8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea8e:	4ca7      	ldr	r4, [pc, #668]	; (800ed2c <__ssvfscanf_r+0x2a0>)
 800ea90:	44a5      	add	sp, r4
 800ea92:	af02      	add	r7, sp, #8
 800ea94:	633b      	str	r3, [r7, #48]	; 0x30
 800ea96:	000b      	movs	r3, r1
 800ea98:	6378      	str	r0, [r7, #52]	; 0x34
 800ea9a:	6479      	str	r1, [r7, #68]	; 0x44
 800ea9c:	61ba      	str	r2, [r7, #24]
 800ea9e:	220c      	movs	r2, #12
 800eaa0:	5e9a      	ldrsh	r2, [r3, r2]
 800eaa2:	2380      	movs	r3, #128	; 0x80
 800eaa4:	019b      	lsls	r3, r3, #6
 800eaa6:	421a      	tst	r2, r3
 800eaa8:	d105      	bne.n	800eab6 <__ssvfscanf_r+0x2a>
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	818b      	strh	r3, [r1, #12]
 800eaae:	4aa0      	ldr	r2, [pc, #640]	; (800ed30 <__ssvfscanf_r+0x2a4>)
 800eab0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eab2:	4013      	ands	r3, r2
 800eab4:	664b      	str	r3, [r1, #100]	; 0x64
 800eab6:	2300      	movs	r3, #0
 800eab8:	617b      	str	r3, [r7, #20]
 800eaba:	643b      	str	r3, [r7, #64]	; 0x40
 800eabc:	62bb      	str	r3, [r7, #40]	; 0x28
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
 800eac0:	63bb      	str	r3, [r7, #56]	; 0x38
 800eac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	3201      	adds	r2, #1
 800eacc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eace:	61ba      	str	r2, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d100      	bne.n	800ead6 <__ssvfscanf_r+0x4a>
 800ead4:	e0d7      	b.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ead6:	2608      	movs	r6, #8
 800ead8:	2108      	movs	r1, #8
 800eada:	4a96      	ldr	r2, [pc, #600]	; (800ed34 <__ssvfscanf_r+0x2a8>)
 800eadc:	5cd2      	ldrb	r2, [r2, r3]
 800eade:	4016      	ands	r6, r2
 800eae0:	420a      	tst	r2, r1
 800eae2:	d01d      	beq.n	800eb20 <__ssvfscanf_r+0x94>
 800eae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	dd12      	ble.n	800eb12 <__ssvfscanf_r+0x86>
 800eaec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaee:	4991      	ldr	r1, [pc, #580]	; (800ed34 <__ssvfscanf_r+0x2a8>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	781a      	ldrb	r2, [r3, #0]
 800eaf4:	5c8a      	ldrb	r2, [r1, r2]
 800eaf6:	2108      	movs	r1, #8
 800eaf8:	420a      	tst	r2, r1
 800eafa:	d0e3      	beq.n	800eac4 <__ssvfscanf_r+0x38>
 800eafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eafe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb00:	3201      	adds	r2, #1
 800eb02:	63ba      	str	r2, [r7, #56]	; 0x38
 800eb04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb06:	3301      	adds	r3, #1
 800eb08:	6852      	ldr	r2, [r2, #4]
 800eb0a:	600b      	str	r3, [r1, #0]
 800eb0c:	3a01      	subs	r2, #1
 800eb0e:	604a      	str	r2, [r1, #4]
 800eb10:	e7e8      	b.n	800eae4 <__ssvfscanf_r+0x58>
 800eb12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb16:	f002 fec7 	bl	80118a8 <__ssrefill_r>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d0e6      	beq.n	800eaec <__ssvfscanf_r+0x60>
 800eb1e:	e7d1      	b.n	800eac4 <__ssvfscanf_r+0x38>
 800eb20:	2b25      	cmp	r3, #37	; 0x25
 800eb22:	d165      	bne.n	800ebf0 <__ssvfscanf_r+0x164>
 800eb24:	250a      	movs	r5, #10
 800eb26:	2480      	movs	r4, #128	; 0x80
 800eb28:	69ba      	ldr	r2, [r7, #24]
 800eb2a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800eb2c:	3b16      	subs	r3, #22
 800eb2e:	69b9      	ldr	r1, [r7, #24]
 800eb30:	3101      	adds	r1, #1
 800eb32:	61b9      	str	r1, [r7, #24]
 800eb34:	7811      	ldrb	r1, [r2, #0]
 800eb36:	0008      	movs	r0, r1
 800eb38:	3825      	subs	r0, #37	; 0x25
 800eb3a:	2855      	cmp	r0, #85	; 0x55
 800eb3c:	d900      	bls.n	800eb40 <__ssvfscanf_r+0xb4>
 800eb3e:	e170      	b.n	800ee22 <__ssvfscanf_r+0x396>
 800eb40:	f7f1 faf2 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eb44:	016f0056 	.word	0x016f0056
 800eb48:	016f016f 	.word	0x016f016f
 800eb4c:	0081016f 	.word	0x0081016f
 800eb50:	016f016f 	.word	0x016f016f
 800eb54:	016f016f 	.word	0x016f016f
 800eb58:	00b8016f 	.word	0x00b8016f
 800eb5c:	00b800b8 	.word	0x00b800b8
 800eb60:	00b800b8 	.word	0x00b800b8
 800eb64:	00b800b8 	.word	0x00b800b8
 800eb68:	00b800b8 	.word	0x00b800b8
 800eb6c:	016f00b8 	.word	0x016f00b8
 800eb70:	016f016f 	.word	0x016f016f
 800eb74:	016f016f 	.word	0x016f016f
 800eb78:	016f016f 	.word	0x016f016f
 800eb7c:	016f00d8 	.word	0x016f00d8
 800eb80:	00c1010a 	.word	0x00c1010a
 800eb84:	00d800d8 	.word	0x00d800d8
 800eb88:	016f00d8 	.word	0x016f00d8
 800eb8c:	016f016f 	.word	0x016f016f
 800eb90:	009f016f 	.word	0x009f016f
 800eb94:	016f016f 	.word	0x016f016f
 800eb98:	016f00c9 	.word	0x016f00c9
 800eb9c:	016f016f 	.word	0x016f016f
 800eba0:	016f00f0 	.word	0x016f00f0
 800eba4:	016f016f 	.word	0x016f016f
 800eba8:	00d1016f 	.word	0x00d1016f
 800ebac:	016f016f 	.word	0x016f016f
 800ebb0:	016f00fe 	.word	0x016f00fe
 800ebb4:	016f016f 	.word	0x016f016f
 800ebb8:	016f016f 	.word	0x016f016f
 800ebbc:	016f00d8 	.word	0x016f00d8
 800ebc0:	00c3010c 	.word	0x00c3010c
 800ebc4:	00d800d8 	.word	0x00d800d8
 800ebc8:	009400d8 	.word	0x009400d8
 800ebcc:	009f012f 	.word	0x009f012f
 800ebd0:	0088016f 	.word	0x0088016f
 800ebd4:	011200a9 	.word	0x011200a9
 800ebd8:	011000cb 	.word	0x011000cb
 800ebdc:	016f016f 	.word	0x016f016f
 800ebe0:	00a600f2 	.word	0x00a600f2
 800ebe4:	016f00cf 	.word	0x016f00cf
 800ebe8:	00d1016f 	.word	0x00d1016f
 800ebec:	00a6016f 	.word	0x00a6016f
 800ebf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd12      	ble.n	800ec1e <__ssvfscanf_r+0x192>
 800ebf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3a01      	subs	r2, #1
 800ec00:	7819      	ldrb	r1, [r3, #0]
 800ec02:	7812      	ldrb	r2, [r2, #0]
 800ec04:	4291      	cmp	r1, r2
 800ec06:	d13e      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec0c:	6852      	ldr	r2, [r2, #4]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	600b      	str	r3, [r1, #0]
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	3a01      	subs	r2, #1
 800ec16:	604a      	str	r2, [r1, #4]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec1c:	e752      	b.n	800eac4 <__ssvfscanf_r+0x38>
 800ec1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec22:	f002 fe41 	bl	80118a8 <__ssrefill_r>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d0e6      	beq.n	800ebf8 <__ssvfscanf_r+0x16c>
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <__ssvfscanf_r+0x1ac>
 800ec30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec32:	899b      	ldrh	r3, [r3, #12]
 800ec34:	065b      	lsls	r3, r3, #25
 800ec36:	d526      	bpl.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d000      	beq.n	800ec40 <__ssvfscanf_r+0x1b4>
 800ec3e:	e0f6      	b.n	800ee2e <__ssvfscanf_r+0x3a2>
 800ec40:	3b01      	subs	r3, #1
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec44:	e104      	b.n	800ee50 <__ssvfscanf_r+0x3c4>
 800ec46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec48:	4332      	orrs	r2, r6
 800ec4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec4c:	d11b      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec4e:	2610      	movs	r6, #16
 800ec50:	69ba      	ldr	r2, [r7, #24]
 800ec52:	e76c      	b.n	800eb2e <__ssvfscanf_r+0xa2>
 800ec54:	421e      	tst	r6, r3
 800ec56:	d116      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec58:	7851      	ldrb	r1, [r2, #1]
 800ec5a:	296c      	cmp	r1, #108	; 0x6c
 800ec5c:	d103      	bne.n	800ec66 <__ssvfscanf_r+0x1da>
 800ec5e:	3202      	adds	r2, #2
 800ec60:	61ba      	str	r2, [r7, #24]
 800ec62:	2202      	movs	r2, #2
 800ec64:	e000      	b.n	800ec68 <__ssvfscanf_r+0x1dc>
 800ec66:	2201      	movs	r2, #1
 800ec68:	4316      	orrs	r6, r2
 800ec6a:	e7f1      	b.n	800ec50 <__ssvfscanf_r+0x1c4>
 800ec6c:	421e      	tst	r6, r3
 800ec6e:	d10a      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec70:	7851      	ldrb	r1, [r2, #1]
 800ec72:	2968      	cmp	r1, #104	; 0x68
 800ec74:	d103      	bne.n	800ec7e <__ssvfscanf_r+0x1f2>
 800ec76:	3202      	adds	r2, #2
 800ec78:	61ba      	str	r2, [r7, #24]
 800ec7a:	2208      	movs	r2, #8
 800ec7c:	e7f4      	b.n	800ec68 <__ssvfscanf_r+0x1dc>
 800ec7e:	2204      	movs	r2, #4
 800ec80:	e7f2      	b.n	800ec68 <__ssvfscanf_r+0x1dc>
 800ec82:	421e      	tst	r6, r3
 800ec84:	d0ed      	beq.n	800ec62 <__ssvfscanf_r+0x1d6>
 800ec86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d000      	beq.n	800ec8e <__ssvfscanf_r+0x202>
 800ec8c:	e0da      	b.n	800ee44 <__ssvfscanf_r+0x3b8>
 800ec8e:	e0df      	b.n	800ee50 <__ssvfscanf_r+0x3c4>
 800ec90:	421e      	tst	r6, r3
 800ec92:	d0dd      	beq.n	800ec50 <__ssvfscanf_r+0x1c4>
 800ec94:	e7f7      	b.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ec96:	228f      	movs	r2, #143	; 0x8f
 800ec98:	218f      	movs	r1, #143	; 0x8f
 800ec9a:	4032      	ands	r2, r6
 800ec9c:	420e      	tst	r6, r1
 800ec9e:	d1f2      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800eca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eca2:	2900      	cmp	r1, #0
 800eca4:	d104      	bne.n	800ecb0 <__ssvfscanf_r+0x224>
 800eca6:	b082      	sub	sp, #8
 800eca8:	a902      	add	r1, sp, #8
 800ecaa:	6439      	str	r1, [r7, #64]	; 0x40
 800ecac:	600a      	str	r2, [r1, #0]
 800ecae:	604a      	str	r2, [r1, #4]
 800ecb0:	4326      	orrs	r6, r4
 800ecb2:	e7cd      	b.n	800ec50 <__ssvfscanf_r+0x1c4>
 800ecb4:	228f      	movs	r2, #143	; 0x8f
 800ecb6:	4216      	tst	r6, r2
 800ecb8:	d1e5      	bne.n	800ec86 <__ssvfscanf_r+0x1fa>
 800ecba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecbc:	436a      	muls	r2, r5
 800ecbe:	3a30      	subs	r2, #48	; 0x30
 800ecc0:	188a      	adds	r2, r1, r2
 800ecc2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ecc4:	e7c4      	b.n	800ec50 <__ssvfscanf_r+0x1c4>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	431e      	orrs	r6, r3
 800ecca:	4b1b      	ldr	r3, [pc, #108]	; (800ed38 <__ssvfscanf_r+0x2ac>)
 800eccc:	617b      	str	r3, [r7, #20]
 800ecce:	230a      	movs	r3, #10
 800ecd0:	2403      	movs	r4, #3
 800ecd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd4:	e00f      	b.n	800ecf6 <__ssvfscanf_r+0x26a>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	431e      	orrs	r6, r3
 800ecda:	4b18      	ldr	r3, [pc, #96]	; (800ed3c <__ssvfscanf_r+0x2b0>)
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	2308      	movs	r3, #8
 800ece0:	e7f6      	b.n	800ecd0 <__ssvfscanf_r+0x244>
 800ece2:	4b16      	ldr	r3, [pc, #88]	; (800ed3c <__ssvfscanf_r+0x2b0>)
 800ece4:	e7f2      	b.n	800eccc <__ssvfscanf_r+0x240>
 800ece6:	2380      	movs	r3, #128	; 0x80
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	431e      	orrs	r6, r3
 800ecec:	4b13      	ldr	r3, [pc, #76]	; (800ed3c <__ssvfscanf_r+0x2b0>)
 800ecee:	617b      	str	r3, [r7, #20]
 800ecf0:	2310      	movs	r3, #16
 800ecf2:	e7ed      	b.n	800ecd0 <__ssvfscanf_r+0x244>
 800ecf4:	2404      	movs	r4, #4
 800ecf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	dd55      	ble.n	800edaa <__ssvfscanf_r+0x31e>
 800ecfe:	0673      	lsls	r3, r6, #25
 800ed00:	d407      	bmi.n	800ed12 <__ssvfscanf_r+0x286>
 800ed02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed04:	490b      	ldr	r1, [pc, #44]	; (800ed34 <__ssvfscanf_r+0x2a8>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	781a      	ldrb	r2, [r3, #0]
 800ed0a:	5c8a      	ldrb	r2, [r1, r2]
 800ed0c:	2108      	movs	r1, #8
 800ed0e:	420a      	tst	r2, r1
 800ed10:	d152      	bne.n	800edb8 <__ssvfscanf_r+0x32c>
 800ed12:	1e60      	subs	r0, r4, #1
 800ed14:	2803      	cmp	r0, #3
 800ed16:	d863      	bhi.n	800ede0 <__ssvfscanf_r+0x354>
 800ed18:	f7f1 fa06 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ed1c:	03bd01da 	.word	0x03bd01da
 800ed20:	068a0579 	.word	0x068a0579
 800ed24:	2301      	movs	r3, #1
 800ed26:	431e      	orrs	r6, r3
 800ed28:	2402      	movs	r4, #2
 800ed2a:	e7e4      	b.n	800ecf6 <__ssvfscanf_r+0x26a>
 800ed2c:	fffffd34 	.word	0xfffffd34
 800ed30:	ffffdfff 	.word	0xffffdfff
 800ed34:	080148c9 	.word	0x080148c9
 800ed38:	0800bd29 	.word	0x0800bd29
 800ed3c:	0800be4d 	.word	0x0800be4d
 800ed40:	2248      	movs	r2, #72	; 0x48
 800ed42:	2318      	movs	r3, #24
 800ed44:	189b      	adds	r3, r3, r2
 800ed46:	19d8      	adds	r0, r3, r7
 800ed48:	69b9      	ldr	r1, [r7, #24]
 800ed4a:	f001 f9d7 	bl	80100fc <__sccl>
 800ed4e:	2340      	movs	r3, #64	; 0x40
 800ed50:	2401      	movs	r4, #1
 800ed52:	61b8      	str	r0, [r7, #24]
 800ed54:	431e      	orrs	r6, r3
 800ed56:	e7ce      	b.n	800ecf6 <__ssvfscanf_r+0x26a>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	431e      	orrs	r6, r3
 800ed5c:	2340      	movs	r3, #64	; 0x40
 800ed5e:	2400      	movs	r4, #0
 800ed60:	431e      	orrs	r6, r3
 800ed62:	e7c8      	b.n	800ecf6 <__ssvfscanf_r+0x26a>
 800ed64:	2388      	movs	r3, #136	; 0x88
 800ed66:	e7bf      	b.n	800ece8 <__ssvfscanf_r+0x25c>
 800ed68:	06f3      	lsls	r3, r6, #27
 800ed6a:	d500      	bpl.n	800ed6e <__ssvfscanf_r+0x2e2>
 800ed6c:	e6aa      	b.n	800eac4 <__ssvfscanf_r+0x38>
 800ed6e:	2108      	movs	r1, #8
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	cb04      	ldmia	r3!, {r2}
 800ed74:	420e      	tst	r6, r1
 800ed76:	d003      	beq.n	800ed80 <__ssvfscanf_r+0x2f4>
 800ed78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed7a:	7011      	strb	r1, [r2, #0]
 800ed7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ed7e:	e6a1      	b.n	800eac4 <__ssvfscanf_r+0x38>
 800ed80:	0771      	lsls	r1, r6, #29
 800ed82:	d502      	bpl.n	800ed8a <__ssvfscanf_r+0x2fe>
 800ed84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed86:	8011      	strh	r1, [r2, #0]
 800ed88:	e7f8      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800ed8a:	07f1      	lsls	r1, r6, #31
 800ed8c:	d502      	bpl.n	800ed94 <__ssvfscanf_r+0x308>
 800ed8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed90:	6011      	str	r1, [r2, #0]
 800ed92:	e7f3      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800ed94:	07b6      	lsls	r6, r6, #30
 800ed96:	d5fa      	bpl.n	800ed8e <__ssvfscanf_r+0x302>
 800ed98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed9a:	6011      	str	r1, [r2, #0]
 800ed9c:	17c9      	asrs	r1, r1, #31
 800ed9e:	6051      	str	r1, [r2, #4]
 800eda0:	e7ec      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800eda2:	4ba2      	ldr	r3, [pc, #648]	; (800f02c <__ssvfscanf_r+0x5a0>)
 800eda4:	617b      	str	r3, [r7, #20]
 800eda6:	2300      	movs	r3, #0
 800eda8:	e792      	b.n	800ecd0 <__ssvfscanf_r+0x244>
 800edaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edae:	f002 fd7b 	bl	80118a8 <__ssrefill_r>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0a3      	beq.n	800ecfe <__ssvfscanf_r+0x272>
 800edb6:	e738      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800edb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edbc:	3201      	adds	r2, #1
 800edbe:	63ba      	str	r2, [r7, #56]	; 0x38
 800edc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edc2:	6852      	ldr	r2, [r2, #4]
 800edc4:	3a01      	subs	r2, #1
 800edc6:	604a      	str	r2, [r1, #4]
 800edc8:	2a00      	cmp	r2, #0
 800edca:	dd02      	ble.n	800edd2 <__ssvfscanf_r+0x346>
 800edcc:	3301      	adds	r3, #1
 800edce:	600b      	str	r3, [r1, #0]
 800edd0:	e797      	b.n	800ed02 <__ssvfscanf_r+0x276>
 800edd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edd6:	f002 fd67 	bl	80118a8 <__ssrefill_r>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d091      	beq.n	800ed02 <__ssvfscanf_r+0x276>
 800edde:	e724      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800ede0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ede2:	2301      	movs	r3, #1
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	d100      	bne.n	800edea <__ssvfscanf_r+0x35e>
 800ede8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edea:	2210      	movs	r2, #16
 800edec:	0034      	movs	r4, r6
 800edee:	4032      	ands	r2, r6
 800edf0:	623a      	str	r2, [r7, #32]
 800edf2:	401c      	ands	r4, r3
 800edf4:	421e      	tst	r6, r3
 800edf6:	d100      	bne.n	800edfa <__ssvfscanf_r+0x36e>
 800edf8:	e0f3      	b.n	800efe2 <__ssvfscanf_r+0x556>
 800edfa:	2a00      	cmp	r2, #0
 800edfc:	d000      	beq.n	800ee00 <__ssvfscanf_r+0x374>
 800edfe:	e0b6      	b.n	800ef6e <__ssvfscanf_r+0x4e2>
 800ee00:	2080      	movs	r0, #128	; 0x80
 800ee02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee04:	cb10      	ldmia	r3!, {r4}
 800ee06:	613b      	str	r3, [r7, #16]
 800ee08:	4206      	tst	r6, r0
 800ee0a:	d100      	bne.n	800ee0e <__ssvfscanf_r+0x382>
 800ee0c:	e0b7      	b.n	800ef7e <__ssvfscanf_r+0x4f2>
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	d007      	beq.n	800ee22 <__ssvfscanf_r+0x396>
 800ee12:	f7fb fe93 	bl	800ab3c <malloc>
 800ee16:	6338      	str	r0, [r7, #48]	; 0x30
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d11f      	bne.n	800ee5c <__ssvfscanf_r+0x3d0>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	425b      	negs	r3, r3
 800ee20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d013      	beq.n	800ee50 <__ssvfscanf_r+0x3c4>
 800ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	d10a      	bne.n	800ee44 <__ssvfscanf_r+0x3b8>
 800ee2e:	2400      	movs	r4, #0
 800ee30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee32:	681d      	ldr	r5, [r3, #0]
 800ee34:	88db      	ldrh	r3, [r3, #6]
 800ee36:	42a3      	cmp	r3, r4
 800ee38:	dd01      	ble.n	800ee3e <__ssvfscanf_r+0x3b2>
 800ee3a:	f001 f82a 	bl	800fe92 <__ssvfscanf_r+0x1406>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	425b      	negs	r3, r3
 800ee42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee46:	6818      	ldr	r0, [r3, #0]
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d001      	beq.n	800ee50 <__ssvfscanf_r+0x3c4>
 800ee4c:	f7fb fe80 	bl	800ab50 <free>
 800ee50:	46bd      	mov	sp, r7
 800ee52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee54:	23b1      	movs	r3, #177	; 0xb1
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	449d      	add	sp, r3
 800ee5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5e:	6023      	str	r3, [r4, #0]
 800ee60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee62:	88de      	ldrh	r6, [r3, #6]
 800ee64:	889d      	ldrh	r5, [r3, #4]
 800ee66:	42ae      	cmp	r6, r5
 800ee68:	d30e      	bcc.n	800ee88 <__ssvfscanf_r+0x3fc>
 800ee6a:	4b71      	ldr	r3, [pc, #452]	; (800f030 <__ssvfscanf_r+0x5a4>)
 800ee6c:	429d      	cmp	r5, r3
 800ee6e:	d8d5      	bhi.n	800ee1c <__ssvfscanf_r+0x390>
 800ee70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee72:	3508      	adds	r5, #8
 800ee74:	b2ad      	uxth	r5, r5
 800ee76:	6818      	ldr	r0, [r3, #0]
 800ee78:	00a9      	lsls	r1, r5, #2
 800ee7a:	f002 f901 	bl	8011080 <realloc>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d0cc      	beq.n	800ee1c <__ssvfscanf_r+0x390>
 800ee82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee84:	6018      	str	r0, [r3, #0]
 800ee86:	809d      	strh	r5, [r3, #4]
 800ee88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee8a:	1c72      	adds	r2, r6, #1
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	00b6      	lsls	r6, r6, #2
 800ee90:	50f4      	str	r4, [r6, r3]
 800ee92:	2320      	movs	r3, #32
 800ee94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee96:	0026      	movs	r6, r4
 800ee98:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ee9a:	80ca      	strh	r2, [r1, #6]
 800ee9c:	61fb      	str	r3, [r7, #28]
 800ee9e:	2500      	movs	r5, #0
 800eea0:	f7fd f9fe 	bl	800c2a0 <__locale_mb_cur_max>
 800eea4:	42a8      	cmp	r0, r5
 800eea6:	d100      	bne.n	800eeaa <__ssvfscanf_r+0x41e>
 800eea8:	e6bf      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800eeaa:	1c6a      	adds	r2, r5, #1
 800eeac:	60fa      	str	r2, [r7, #12]
 800eeae:	228c      	movs	r2, #140	; 0x8c
 800eeb0:	2048      	movs	r0, #72	; 0x48
 800eeb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeb4:	0052      	lsls	r2, r2, #1
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	1812      	adds	r2, r2, r0
 800eeba:	7819      	ldrb	r1, [r3, #0]
 800eebc:	19d2      	adds	r2, r2, r7
 800eebe:	5551      	strb	r1, [r2, r5]
 800eec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eec4:	6852      	ldr	r2, [r2, #4]
 800eec6:	3301      	adds	r3, #1
 800eec8:	600b      	str	r3, [r1, #0]
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	3a01      	subs	r2, #1
 800eece:	604a      	str	r2, [r1, #4]
 800eed0:	2b03      	cmp	r3, #3
 800eed2:	d102      	bne.n	800eeda <__ssvfscanf_r+0x44e>
 800eed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eed6:	2b04      	cmp	r3, #4
 800eed8:	d007      	beq.n	800eeea <__ssvfscanf_r+0x45e>
 800eeda:	2048      	movs	r0, #72	; 0x48
 800eedc:	2310      	movs	r3, #16
 800eede:	181b      	adds	r3, r3, r0
 800eee0:	2208      	movs	r2, #8
 800eee2:	2100      	movs	r1, #0
 800eee4:	19d8      	adds	r0, r3, r7
 800eee6:	f7fd f94f 	bl	800c188 <memset>
 800eeea:	2148      	movs	r1, #72	; 0x48
 800eeec:	2310      	movs	r3, #16
 800eeee:	228c      	movs	r2, #140	; 0x8c
 800eef0:	185b      	adds	r3, r3, r1
 800eef2:	0052      	lsls	r2, r2, #1
 800eef4:	19db      	adds	r3, r3, r7
 800eef6:	1852      	adds	r2, r2, r1
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	0021      	movs	r1, r4
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef00:	19d2      	adds	r2, r2, r7
 800ef02:	f002 fbd1 	bl	80116a8 <_mbrtowc_r>
 800ef06:	0003      	movs	r3, r0
 800ef08:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	d100      	bne.n	800ef10 <__ssvfscanf_r+0x484>
 800ef0e:	e68c      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d139      	bne.n	800ef88 <__ssvfscanf_r+0x4fc>
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d100      	bne.n	800ef1c <__ssvfscanf_r+0x490>
 800ef1a:	6023      	str	r3, [r4, #0]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef20:	4694      	mov	ip, r2
 800ef22:	4463      	add	r3, ip
 800ef24:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	2b03      	cmp	r3, #3
 800ef2a:	d102      	bne.n	800ef32 <__ssvfscanf_r+0x4a6>
 800ef2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d002      	beq.n	800ef38 <__ssvfscanf_r+0x4ac>
 800ef32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef34:	3b01      	subs	r3, #1
 800ef36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d115      	bne.n	800ef6a <__ssvfscanf_r+0x4de>
 800ef3e:	2e00      	cmp	r6, #0
 800ef40:	d012      	beq.n	800ef68 <__ssvfscanf_r+0x4dc>
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	69fa      	ldr	r2, [r7, #28]
 800ef46:	1ae5      	subs	r5, r4, r3
 800ef48:	10ab      	asrs	r3, r5, #2
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d30c      	bcc.n	800ef68 <__ssvfscanf_r+0x4dc>
 800ef4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef50:	00d1      	lsls	r1, r2, #3
 800ef52:	f002 f895 	bl	8011080 <realloc>
 800ef56:	6338      	str	r0, [r7, #48]	; 0x30
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d100      	bne.n	800ef5e <__ssvfscanf_r+0x4d2>
 800ef5c:	e75e      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	1944      	adds	r4, r0, r5
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	6030      	str	r0, [r6, #0]
 800ef66:	61fb      	str	r3, [r7, #28]
 800ef68:	3404      	adds	r4, #4
 800ef6a:	2500      	movs	r5, #0
 800ef6c:	e010      	b.n	800ef90 <__ssvfscanf_r+0x504>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	613b      	str	r3, [r7, #16]
 800ef72:	2300      	movs	r3, #0
 800ef74:	001e      	movs	r6, r3
 800ef76:	001c      	movs	r4, r3
 800ef78:	61fb      	str	r3, [r7, #28]
 800ef7a:	633b      	str	r3, [r7, #48]	; 0x30
 800ef7c:	e78f      	b.n	800ee9e <__ssvfscanf_r+0x412>
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	001e      	movs	r6, r3
 800ef82:	61fb      	str	r3, [r7, #28]
 800ef84:	633b      	str	r3, [r7, #48]	; 0x30
 800ef86:	e78a      	b.n	800ee9e <__ssvfscanf_r+0x412>
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	68fd      	ldr	r5, [r7, #12]
 800ef8c:	3302      	adds	r3, #2
 800ef8e:	d1c5      	bne.n	800ef1c <__ssvfscanf_r+0x490>
 800ef90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dc12      	bgt.n	800efbe <__ssvfscanf_r+0x532>
 800ef98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef9c:	f002 fc84 	bl	80118a8 <__ssrefill_r>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d00c      	beq.n	800efbe <__ssvfscanf_r+0x532>
 800efa4:	2d00      	cmp	r5, #0
 800efa6:	d000      	beq.n	800efaa <__ssvfscanf_r+0x51e>
 800efa8:	e63f      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800efaa:	2e00      	cmp	r6, #0
 800efac:	d10c      	bne.n	800efc8 <__ssvfscanf_r+0x53c>
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	425a      	negs	r2, r3
 800efb2:	4153      	adcs	r3, r2
 800efb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efb6:	18d3      	adds	r3, r2, r3
 800efb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	e6de      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800efbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d000      	beq.n	800efc6 <__ssvfscanf_r+0x53a>
 800efc4:	e76c      	b.n	800eea0 <__ssvfscanf_r+0x414>
 800efc6:	e7f0      	b.n	800efaa <__ssvfscanf_r+0x51e>
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	1ae1      	subs	r1, r4, r3
 800efce:	108b      	asrs	r3, r1, #2
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d9ec      	bls.n	800efae <__ssvfscanf_r+0x522>
 800efd4:	6830      	ldr	r0, [r6, #0]
 800efd6:	f002 f853 	bl	8011080 <realloc>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d0e7      	beq.n	800efae <__ssvfscanf_r+0x522>
 800efde:	6030      	str	r0, [r6, #0]
 800efe0:	e7e5      	b.n	800efae <__ssvfscanf_r+0x522>
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d025      	beq.n	800f034 <__ssvfscanf_r+0x5a8>
 800efe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eff0:	6812      	ldr	r2, [r2, #0]
 800eff2:	4299      	cmp	r1, r3
 800eff4:	dd11      	ble.n	800f01a <__ssvfscanf_r+0x58e>
 800eff6:	1ac9      	subs	r1, r1, r3
 800eff8:	18d2      	adds	r2, r2, r3
 800effa:	18e4      	adds	r4, r4, r3
 800effc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800effe:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f000:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f002:	0019      	movs	r1, r3
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	f002 fc4f 	bl	80118a8 <__ssrefill_r>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d0ec      	beq.n	800efe8 <__ssvfscanf_r+0x55c>
 800f00e:	2c00      	cmp	r4, #0
 800f010:	d100      	bne.n	800f014 <__ssvfscanf_r+0x588>
 800f012:	e60a      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	191b      	adds	r3, r3, r4
 800f018:	e5ff      	b.n	800ec1a <__ssvfscanf_r+0x18e>
 800f01a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f01c:	1a5b      	subs	r3, r3, r1
 800f01e:	1864      	adds	r4, r4, r1
 800f020:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f022:	604b      	str	r3, [r1, #4]
 800f024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f026:	18d2      	adds	r2, r2, r3
 800f028:	600a      	str	r2, [r1, #0]
 800f02a:	e7f3      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f02c:	0800bd29 	.word	0x0800bd29
 800f030:	0000fff6 	.word	0x0000fff6
 800f034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f036:	0034      	movs	r4, r6
 800f038:	cb20      	ldmia	r3!, {r5}
 800f03a:	633b      	str	r3, [r7, #48]	; 0x30
 800f03c:	2380      	movs	r3, #128	; 0x80
 800f03e:	401c      	ands	r4, r3
 800f040:	421e      	tst	r6, r3
 800f042:	d028      	beq.n	800f096 <__ssvfscanf_r+0x60a>
 800f044:	2d00      	cmp	r5, #0
 800f046:	d100      	bne.n	800f04a <__ssvfscanf_r+0x5be>
 800f048:	e61d      	b.n	800ec86 <__ssvfscanf_r+0x1fa>
 800f04a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f04c:	f7fb fd76 	bl	800ab3c <malloc>
 800f050:	6238      	str	r0, [r7, #32]
 800f052:	2800      	cmp	r0, #0
 800f054:	d100      	bne.n	800f058 <__ssvfscanf_r+0x5cc>
 800f056:	e5ef      	b.n	800ec38 <__ssvfscanf_r+0x1ac>
 800f058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f05a:	6028      	str	r0, [r5, #0]
 800f05c:	88de      	ldrh	r6, [r3, #6]
 800f05e:	889c      	ldrh	r4, [r3, #4]
 800f060:	6818      	ldr	r0, [r3, #0]
 800f062:	42a6      	cmp	r6, r4
 800f064:	d30e      	bcc.n	800f084 <__ssvfscanf_r+0x5f8>
 800f066:	4bbf      	ldr	r3, [pc, #764]	; (800f364 <__ssvfscanf_r+0x8d8>)
 800f068:	429c      	cmp	r4, r3
 800f06a:	d900      	bls.n	800f06e <__ssvfscanf_r+0x5e2>
 800f06c:	e6df      	b.n	800ee2e <__ssvfscanf_r+0x3a2>
 800f06e:	3408      	adds	r4, #8
 800f070:	b2a4      	uxth	r4, r4
 800f072:	00a1      	lsls	r1, r4, #2
 800f074:	f002 f804 	bl	8011080 <realloc>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d100      	bne.n	800f07e <__ssvfscanf_r+0x5f2>
 800f07c:	e6d7      	b.n	800ee2e <__ssvfscanf_r+0x3a2>
 800f07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f080:	6018      	str	r0, [r3, #0]
 800f082:	809c      	strh	r4, [r3, #4]
 800f084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f086:	1c72      	adds	r2, r6, #1
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f08c:	00b6      	lsls	r6, r6, #2
 800f08e:	002c      	movs	r4, r5
 800f090:	50f5      	str	r5, [r6, r3]
 800f092:	6a3d      	ldr	r5, [r7, #32]
 800f094:	80ca      	strh	r2, [r1, #6]
 800f096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f098:	0029      	movs	r1, r5
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	2201      	movs	r2, #1
 800f09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0a2:	f002 fc20 	bl	80118e6 <_sfread_r>
 800f0a6:	1e05      	subs	r5, r0, #0
 800f0a8:	d100      	bne.n	800f0ac <__ssvfscanf_r+0x620>
 800f0aa:	e5be      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d009      	beq.n	800f0c4 <__ssvfscanf_r+0x638>
 800f0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b2:	4283      	cmp	r3, r0
 800f0b4:	d906      	bls.n	800f0c4 <__ssvfscanf_r+0x638>
 800f0b6:	0001      	movs	r1, r0
 800f0b8:	6820      	ldr	r0, [r4, #0]
 800f0ba:	f001 ffe1 	bl	8011080 <realloc>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d000      	beq.n	800f0c4 <__ssvfscanf_r+0x638>
 800f0c2:	6020      	str	r0, [r4, #0]
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	195b      	adds	r3, r3, r5
 800f0c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	e4f8      	b.n	800eac2 <__ssvfscanf_r+0x36>
 800f0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d101      	bne.n	800f0da <__ssvfscanf_r+0x64e>
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0da:	2210      	movs	r2, #16
 800f0dc:	2301      	movs	r3, #1
 800f0de:	0034      	movs	r4, r6
 800f0e0:	4032      	ands	r2, r6
 800f0e2:	401c      	ands	r4, r3
 800f0e4:	623a      	str	r2, [r7, #32]
 800f0e6:	421e      	tst	r6, r3
 800f0e8:	d100      	bne.n	800f0ec <__ssvfscanf_r+0x660>
 800f0ea:	e116      	b.n	800f31a <__ssvfscanf_r+0x88e>
 800f0ec:	2a00      	cmp	r2, #0
 800f0ee:	d000      	beq.n	800f0f2 <__ssvfscanf_r+0x666>
 800f0f0:	e0b0      	b.n	800f254 <__ssvfscanf_r+0x7c8>
 800f0f2:	2080      	movs	r0, #128	; 0x80
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	cb10      	ldmia	r3!, {r4}
 800f0f8:	60fb      	str	r3, [r7, #12]
 800f0fa:	4206      	tst	r6, r0
 800f0fc:	d100      	bne.n	800f100 <__ssvfscanf_r+0x674>
 800f0fe:	e0b2      	b.n	800f266 <__ssvfscanf_r+0x7da>
 800f100:	2c00      	cmp	r4, #0
 800f102:	d100      	bne.n	800f106 <__ssvfscanf_r+0x67a>
 800f104:	e68d      	b.n	800ee22 <__ssvfscanf_r+0x396>
 800f106:	f7fb fd19 	bl	800ab3c <malloc>
 800f10a:	6338      	str	r0, [r7, #48]	; 0x30
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d100      	bne.n	800f112 <__ssvfscanf_r+0x686>
 800f110:	e684      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f118:	88de      	ldrh	r6, [r3, #6]
 800f11a:	889d      	ldrh	r5, [r3, #4]
 800f11c:	42ae      	cmp	r6, r5
 800f11e:	d310      	bcc.n	800f142 <__ssvfscanf_r+0x6b6>
 800f120:	4b90      	ldr	r3, [pc, #576]	; (800f364 <__ssvfscanf_r+0x8d8>)
 800f122:	429d      	cmp	r5, r3
 800f124:	d900      	bls.n	800f128 <__ssvfscanf_r+0x69c>
 800f126:	e679      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f12a:	3508      	adds	r5, #8
 800f12c:	b2ad      	uxth	r5, r5
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	00a9      	lsls	r1, r5, #2
 800f132:	f001 ffa5 	bl	8011080 <realloc>
 800f136:	2800      	cmp	r0, #0
 800f138:	d100      	bne.n	800f13c <__ssvfscanf_r+0x6b0>
 800f13a:	e66f      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13e:	6018      	str	r0, [r3, #0]
 800f140:	809d      	strh	r5, [r3, #4]
 800f142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f144:	1c72      	adds	r2, r6, #1
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	00b6      	lsls	r6, r6, #2
 800f14a:	50f4      	str	r4, [r6, r3]
 800f14c:	2320      	movs	r3, #32
 800f14e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f150:	0026      	movs	r6, r4
 800f152:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f154:	80ca      	strh	r2, [r1, #6]
 800f156:	613b      	str	r3, [r7, #16]
 800f158:	2500      	movs	r5, #0
 800f15a:	f7fd f8a1 	bl	800c2a0 <__locale_mb_cur_max>
 800f15e:	42a8      	cmp	r0, r5
 800f160:	d100      	bne.n	800f164 <__ssvfscanf_r+0x6d8>
 800f162:	e562      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800f164:	1c6a      	adds	r2, r5, #1
 800f166:	61fa      	str	r2, [r7, #28]
 800f168:	228c      	movs	r2, #140	; 0x8c
 800f16a:	2048      	movs	r0, #72	; 0x48
 800f16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f16e:	0052      	lsls	r2, r2, #1
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	1812      	adds	r2, r2, r0
 800f174:	7819      	ldrb	r1, [r3, #0]
 800f176:	19d2      	adds	r2, r2, r7
 800f178:	5551      	strb	r1, [r2, r5]
 800f17a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f17c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f17e:	6852      	ldr	r2, [r2, #4]
 800f180:	3301      	adds	r3, #1
 800f182:	600b      	str	r3, [r1, #0]
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	3a01      	subs	r2, #1
 800f188:	604a      	str	r2, [r1, #4]
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d102      	bne.n	800f194 <__ssvfscanf_r+0x708>
 800f18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f190:	2b04      	cmp	r3, #4
 800f192:	d006      	beq.n	800f1a2 <__ssvfscanf_r+0x716>
 800f194:	2048      	movs	r0, #72	; 0x48
 800f196:	2208      	movs	r2, #8
 800f198:	1813      	adds	r3, r2, r0
 800f19a:	2100      	movs	r1, #0
 800f19c:	19d8      	adds	r0, r3, r7
 800f19e:	f7fc fff3 	bl	800c188 <memset>
 800f1a2:	2148      	movs	r1, #72	; 0x48
 800f1a4:	2308      	movs	r3, #8
 800f1a6:	228c      	movs	r2, #140	; 0x8c
 800f1a8:	185b      	adds	r3, r3, r1
 800f1aa:	0052      	lsls	r2, r2, #1
 800f1ac:	19db      	adds	r3, r3, r7
 800f1ae:	1852      	adds	r2, r2, r1
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	0021      	movs	r1, r4
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1b8:	19d2      	adds	r2, r2, r7
 800f1ba:	f002 fa75 	bl	80116a8 <_mbrtowc_r>
 800f1be:	0003      	movs	r3, r0
 800f1c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	d100      	bne.n	800f1c8 <__ssvfscanf_r+0x73c>
 800f1c6:	e530      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d151      	bne.n	800f270 <__ssvfscanf_r+0x7e4>
 800f1cc:	6020      	str	r0, [r4, #0]
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	6825      	ldr	r5, [r4, #0]
 800f1d2:	425b      	negs	r3, r3
 800f1d4:	1c6a      	adds	r2, r5, #1
 800f1d6:	d01a      	beq.n	800f20e <__ssvfscanf_r+0x782>
 800f1d8:	2048      	movs	r0, #72	; 0x48
 800f1da:	3311      	adds	r3, #17
 800f1dc:	181b      	adds	r3, r3, r0
 800f1de:	2208      	movs	r2, #8
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	19d8      	adds	r0, r3, r7
 800f1e4:	f7fc ffd0 	bl	800c188 <memset>
 800f1e8:	4b5f      	ldr	r3, [pc, #380]	; (800f368 <__ssvfscanf_r+0x8dc>)
 800f1ea:	2148      	movs	r1, #72	; 0x48
 800f1ec:	33e0      	adds	r3, #224	; 0xe0
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	2310      	movs	r3, #16
 800f1f2:	4694      	mov	ip, r2
 800f1f4:	185b      	adds	r3, r3, r1
 800f1f6:	002a      	movs	r2, r5
 800f1f8:	19db      	adds	r3, r3, r7
 800f1fa:	4665      	mov	r5, ip
 800f1fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1fe:	1879      	adds	r1, r7, r1
 800f200:	47a8      	blx	r5
 800f202:	2300      	movs	r3, #0
 800f204:	2801      	cmp	r0, #1
 800f206:	d102      	bne.n	800f20e <__ssvfscanf_r+0x782>
 800f208:	3348      	adds	r3, #72	; 0x48
 800f20a:	18fb      	adds	r3, r7, r3
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	2218      	movs	r2, #24
 800f210:	2148      	movs	r1, #72	; 0x48
 800f212:	1852      	adds	r2, r2, r1
 800f214:	19d2      	adds	r2, r2, r7
 800f216:	5cd3      	ldrb	r3, [r2, r3]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d149      	bne.n	800f2b0 <__ssvfscanf_r+0x824>
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d137      	bne.n	800f292 <__ssvfscanf_r+0x806>
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d113      	bne.n	800f250 <__ssvfscanf_r+0x7c4>
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	2e00      	cmp	r6, #0
 800f22c:	d00d      	beq.n	800f24a <__ssvfscanf_r+0x7be>
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	1ae4      	subs	r4, r4, r3
 800f234:	10a3      	asrs	r3, r4, #2
 800f236:	3301      	adds	r3, #1
 800f238:	429a      	cmp	r2, r3
 800f23a:	d906      	bls.n	800f24a <__ssvfscanf_r+0x7be>
 800f23c:	6830      	ldr	r0, [r6, #0]
 800f23e:	1d21      	adds	r1, r4, #4
 800f240:	f001 ff1e 	bl	8011080 <realloc>
 800f244:	2800      	cmp	r0, #0
 800f246:	d000      	beq.n	800f24a <__ssvfscanf_r+0x7be>
 800f248:	6030      	str	r0, [r6, #0]
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	3301      	adds	r3, #1
 800f24e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	e593      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800f254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	2300      	movs	r3, #0
 800f25a:	001e      	movs	r6, r3
 800f25c:	613b      	str	r3, [r7, #16]
 800f25e:	633b      	str	r3, [r7, #48]	; 0x30
 800f260:	334c      	adds	r3, #76	; 0x4c
 800f262:	18fc      	adds	r4, r7, r3
 800f264:	e778      	b.n	800f158 <__ssvfscanf_r+0x6cc>
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	001e      	movs	r6, r3
 800f26a:	613b      	str	r3, [r7, #16]
 800f26c:	633b      	str	r3, [r7, #48]	; 0x30
 800f26e:	e773      	b.n	800f158 <__ssvfscanf_r+0x6cc>
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	69fd      	ldr	r5, [r7, #28]
 800f274:	3302      	adds	r3, #2
 800f276:	d1aa      	bne.n	800f1ce <__ssvfscanf_r+0x742>
 800f278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	dc47      	bgt.n	800f310 <__ssvfscanf_r+0x884>
 800f280:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f282:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f284:	f002 fb10 	bl	80118a8 <__ssrefill_r>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d041      	beq.n	800f310 <__ssvfscanf_r+0x884>
 800f28c:	2d00      	cmp	r5, #0
 800f28e:	d0c8      	beq.n	800f222 <__ssvfscanf_r+0x796>
 800f290:	e4cb      	b.n	800ec2a <__ssvfscanf_r+0x19e>
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	2248      	movs	r2, #72	; 0x48
 800f296:	3b01      	subs	r3, #1
 800f298:	61fb      	str	r3, [r7, #28]
 800f29a:	238c      	movs	r3, #140	; 0x8c
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	189b      	adds	r3, r3, r2
 800f2a0:	69fa      	ldr	r2, [r7, #28]
 800f2a2:	19db      	adds	r3, r3, r7
 800f2a4:	5cd1      	ldrb	r1, [r2, r3]
 800f2a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2aa:	f002 fac1 	bl	8011830 <_sungetc_r>
 800f2ae:	e7b5      	b.n	800f21c <__ssvfscanf_r+0x790>
 800f2b0:	69fa      	ldr	r2, [r7, #28]
 800f2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b4:	4694      	mov	ip, r2
 800f2b6:	4463      	add	r3, ip
 800f2b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	2b03      	cmp	r3, #3
 800f2be:	d102      	bne.n	800f2c6 <__ssvfscanf_r+0x83a>
 800f2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c2:	2b04      	cmp	r3, #4
 800f2c4:	d002      	beq.n	800f2cc <__ssvfscanf_r+0x840>
 800f2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d11a      	bne.n	800f308 <__ssvfscanf_r+0x87c>
 800f2d2:	3404      	adds	r4, #4
 800f2d4:	2e00      	cmp	r6, #0
 800f2d6:	d019      	beq.n	800f30c <__ssvfscanf_r+0x880>
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	693a      	ldr	r2, [r7, #16]
 800f2dc:	1ae3      	subs	r3, r4, r3
 800f2de:	61fb      	str	r3, [r7, #28]
 800f2e0:	6a3d      	ldr	r5, [r7, #32]
 800f2e2:	109b      	asrs	r3, r3, #2
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d3c7      	bcc.n	800f278 <__ssvfscanf_r+0x7ec>
 800f2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2ea:	00d1      	lsls	r1, r2, #3
 800f2ec:	f001 fec8 	bl	8011080 <realloc>
 800f2f0:	6338      	str	r0, [r7, #48]	; 0x30
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d100      	bne.n	800f2f8 <__ssvfscanf_r+0x86c>
 800f2f6:	e591      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f2f8:	4684      	mov	ip, r0
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	69fc      	ldr	r4, [r7, #28]
 800f2fe:	005b      	lsls	r3, r3, #1
 800f300:	4464      	add	r4, ip
 800f302:	6030      	str	r0, [r6, #0]
 800f304:	613b      	str	r3, [r7, #16]
 800f306:	e7b7      	b.n	800f278 <__ssvfscanf_r+0x7ec>
 800f308:	2500      	movs	r5, #0
 800f30a:	e7b5      	b.n	800f278 <__ssvfscanf_r+0x7ec>
 800f30c:	0035      	movs	r5, r6
 800f30e:	e7b3      	b.n	800f278 <__ssvfscanf_r+0x7ec>
 800f310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f312:	2b00      	cmp	r3, #0
 800f314:	d000      	beq.n	800f318 <__ssvfscanf_r+0x88c>
 800f316:	e720      	b.n	800f15a <__ssvfscanf_r+0x6ce>
 800f318:	e783      	b.n	800f222 <__ssvfscanf_r+0x796>
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d025      	beq.n	800f36c <__ssvfscanf_r+0x8e0>
 800f320:	2118      	movs	r1, #24
 800f322:	2048      	movs	r0, #72	; 0x48
 800f324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f326:	1809      	adds	r1, r1, r0
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	19c9      	adds	r1, r1, r7
 800f32c:	781a      	ldrb	r2, [r3, #0]
 800f32e:	5c8a      	ldrb	r2, [r1, r2]
 800f330:	2a00      	cmp	r2, #0
 800f332:	d103      	bne.n	800f33c <__ssvfscanf_r+0x8b0>
 800f334:	2c00      	cmp	r4, #0
 800f336:	d000      	beq.n	800f33a <__ssvfscanf_r+0x8ae>
 800f338:	e66c      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f33a:	e4a4      	b.n	800ec86 <__ssvfscanf_r+0x1fa>
 800f33c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f33e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f340:	6852      	ldr	r2, [r2, #4]
 800f342:	3301      	adds	r3, #1
 800f344:	600b      	str	r3, [r1, #0]
 800f346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f348:	3a01      	subs	r2, #1
 800f34a:	3401      	adds	r4, #1
 800f34c:	604a      	str	r2, [r1, #4]
 800f34e:	429c      	cmp	r4, r3
 800f350:	d100      	bne.n	800f354 <__ssvfscanf_r+0x8c8>
 800f352:	e65f      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f354:	2a00      	cmp	r2, #0
 800f356:	dce3      	bgt.n	800f320 <__ssvfscanf_r+0x894>
 800f358:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f35a:	f002 faa5 	bl	80118a8 <__ssrefill_r>
 800f35e:	2800      	cmp	r0, #0
 800f360:	d0de      	beq.n	800f320 <__ssvfscanf_r+0x894>
 800f362:	e657      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f364:	0000fff6 	.word	0x0000fff6
 800f368:	20000444 	.word	0x20000444
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	0032      	movs	r2, r6
 800f370:	cb20      	ldmia	r3!, {r5}
 800f372:	61fb      	str	r3, [r7, #28]
 800f374:	2380      	movs	r3, #128	; 0x80
 800f376:	401a      	ands	r2, r3
 800f378:	421e      	tst	r6, r3
 800f37a:	d100      	bne.n	800f37e <__ssvfscanf_r+0x8f2>
 800f37c:	e086      	b.n	800f48c <__ssvfscanf_r+0xa00>
 800f37e:	2d00      	cmp	r5, #0
 800f380:	d100      	bne.n	800f384 <__ssvfscanf_r+0x8f8>
 800f382:	e480      	b.n	800ec86 <__ssvfscanf_r+0x1fa>
 800f384:	2020      	movs	r0, #32
 800f386:	f7fb fbd9 	bl	800ab3c <malloc>
 800f38a:	6338      	str	r0, [r7, #48]	; 0x30
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d100      	bne.n	800f392 <__ssvfscanf_r+0x906>
 800f390:	e452      	b.n	800ec38 <__ssvfscanf_r+0x1ac>
 800f392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f394:	6028      	str	r0, [r5, #0]
 800f396:	88de      	ldrh	r6, [r3, #6]
 800f398:	889c      	ldrh	r4, [r3, #4]
 800f39a:	6818      	ldr	r0, [r3, #0]
 800f39c:	42a6      	cmp	r6, r4
 800f39e:	d30e      	bcc.n	800f3be <__ssvfscanf_r+0x932>
 800f3a0:	4bc3      	ldr	r3, [pc, #780]	; (800f6b0 <__ssvfscanf_r+0xc24>)
 800f3a2:	429c      	cmp	r4, r3
 800f3a4:	d900      	bls.n	800f3a8 <__ssvfscanf_r+0x91c>
 800f3a6:	e542      	b.n	800ee2e <__ssvfscanf_r+0x3a2>
 800f3a8:	3408      	adds	r4, #8
 800f3aa:	b2a4      	uxth	r4, r4
 800f3ac:	00a1      	lsls	r1, r4, #2
 800f3ae:	f001 fe67 	bl	8011080 <realloc>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d100      	bne.n	800f3b8 <__ssvfscanf_r+0x92c>
 800f3b6:	e53a      	b.n	800ee2e <__ssvfscanf_r+0x3a2>
 800f3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3ba:	6018      	str	r0, [r3, #0]
 800f3bc:	809c      	strh	r4, [r3, #4]
 800f3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3c0:	1c72      	adds	r2, r6, #1
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	00b6      	lsls	r6, r6, #2
 800f3c6:	50f5      	str	r5, [r6, r3]
 800f3c8:	2320      	movs	r3, #32
 800f3ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3cc:	002e      	movs	r6, r5
 800f3ce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f3d0:	80ca      	strh	r2, [r1, #6]
 800f3d2:	623b      	str	r3, [r7, #32]
 800f3d4:	002c      	movs	r4, r5
 800f3d6:	2118      	movs	r1, #24
 800f3d8:	2048      	movs	r0, #72	; 0x48
 800f3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3dc:	1809      	adds	r1, r1, r0
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	19c9      	adds	r1, r1, r7
 800f3e2:	781a      	ldrb	r2, [r3, #0]
 800f3e4:	5c8a      	ldrb	r2, [r1, r2]
 800f3e6:	2a00      	cmp	r2, #0
 800f3e8:	d101      	bne.n	800f3ee <__ssvfscanf_r+0x962>
 800f3ea:	633d      	str	r5, [r7, #48]	; 0x30
 800f3ec:	e031      	b.n	800f452 <__ssvfscanf_r+0x9c6>
 800f3ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3f2:	6852      	ldr	r2, [r2, #4]
 800f3f4:	3a01      	subs	r2, #1
 800f3f6:	604a      	str	r2, [r1, #4]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	600a      	str	r2, [r1, #0]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	1c6a      	adds	r2, r5, #1
 800f400:	633a      	str	r2, [r7, #48]	; 0x30
 800f402:	702b      	strb	r3, [r5, #0]
 800f404:	2e00      	cmp	r6, #0
 800f406:	d010      	beq.n	800f42a <__ssvfscanf_r+0x99e>
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	1b15      	subs	r5, r2, r4
 800f40c:	429d      	cmp	r5, r3
 800f40e:	d30c      	bcc.n	800f42a <__ssvfscanf_r+0x99e>
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	0020      	movs	r0, r4
 800f414:	0019      	movs	r1, r3
 800f416:	623b      	str	r3, [r7, #32]
 800f418:	f001 fe32 	bl	8011080 <realloc>
 800f41c:	1e04      	subs	r4, r0, #0
 800f41e:	d101      	bne.n	800f424 <__ssvfscanf_r+0x998>
 800f420:	f7ff fc0a 	bl	800ec38 <__ssvfscanf_r+0x1ac>
 800f424:	1943      	adds	r3, r0, r5
 800f426:	633b      	str	r3, [r7, #48]	; 0x30
 800f428:	6030      	str	r0, [r6, #0]
 800f42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42c:	3b01      	subs	r3, #1
 800f42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00e      	beq.n	800f452 <__ssvfscanf_r+0x9c6>
 800f434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	dc2a      	bgt.n	800f492 <__ssvfscanf_r+0xa06>
 800f43c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f43e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f440:	f002 fa32 	bl	80118a8 <__ssrefill_r>
 800f444:	2800      	cmp	r0, #0
 800f446:	d024      	beq.n	800f492 <__ssvfscanf_r+0xa06>
 800f448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44a:	42a3      	cmp	r3, r4
 800f44c:	d101      	bne.n	800f452 <__ssvfscanf_r+0x9c6>
 800f44e:	f7ff fbec 	bl	800ec2a <__ssvfscanf_r+0x19e>
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	1b1d      	subs	r5, r3, r4
 800f456:	42a3      	cmp	r3, r4
 800f458:	d101      	bne.n	800f45e <__ssvfscanf_r+0x9d2>
 800f45a:	f7ff fc14 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800f45e:	2300      	movs	r3, #0
 800f460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f462:	7013      	strb	r3, [r2, #0]
 800f464:	429e      	cmp	r6, r3
 800f466:	d009      	beq.n	800f47c <__ssvfscanf_r+0x9f0>
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	1c69      	adds	r1, r5, #1
 800f46c:	428b      	cmp	r3, r1
 800f46e:	d905      	bls.n	800f47c <__ssvfscanf_r+0x9f0>
 800f470:	6830      	ldr	r0, [r6, #0]
 800f472:	f001 fe05 	bl	8011080 <realloc>
 800f476:	2800      	cmp	r0, #0
 800f478:	d000      	beq.n	800f47c <__ssvfscanf_r+0x9f0>
 800f47a:	6030      	str	r0, [r6, #0]
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	3301      	adds	r3, #1
 800f480:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	195b      	adds	r3, r3, r5
 800f486:	63bb      	str	r3, [r7, #56]	; 0x38
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	e477      	b.n	800ed7c <__ssvfscanf_r+0x2f0>
 800f48c:	0016      	movs	r6, r2
 800f48e:	623a      	str	r2, [r7, #32]
 800f490:	e7a0      	b.n	800f3d4 <__ssvfscanf_r+0x948>
 800f492:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f494:	e79f      	b.n	800f3d6 <__ssvfscanf_r+0x94a>
 800f496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d101      	bne.n	800f4a0 <__ssvfscanf_r+0xa14>
 800f49c:	3b01      	subs	r3, #1
 800f49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4a0:	2210      	movs	r2, #16
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	0034      	movs	r4, r6
 800f4a6:	4032      	ands	r2, r6
 800f4a8:	401c      	ands	r4, r3
 800f4aa:	61fa      	str	r2, [r7, #28]
 800f4ac:	421e      	tst	r6, r3
 800f4ae:	d100      	bne.n	800f4b2 <__ssvfscanf_r+0xa26>
 800f4b0:	e102      	b.n	800f6b8 <__ssvfscanf_r+0xc2c>
 800f4b2:	2a00      	cmp	r2, #0
 800f4b4:	d000      	beq.n	800f4b8 <__ssvfscanf_r+0xa2c>
 800f4b6:	e09f      	b.n	800f5f8 <__ssvfscanf_r+0xb6c>
 800f4b8:	2080      	movs	r0, #128	; 0x80
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	cb10      	ldmia	r3!, {r4}
 800f4be:	60fb      	str	r3, [r7, #12]
 800f4c0:	4206      	tst	r6, r0
 800f4c2:	d100      	bne.n	800f4c6 <__ssvfscanf_r+0xa3a>
 800f4c4:	e0a1      	b.n	800f60a <__ssvfscanf_r+0xb7e>
 800f4c6:	2c00      	cmp	r4, #0
 800f4c8:	d100      	bne.n	800f4cc <__ssvfscanf_r+0xa40>
 800f4ca:	e4aa      	b.n	800ee22 <__ssvfscanf_r+0x396>
 800f4cc:	f7fb fb36 	bl	800ab3c <malloc>
 800f4d0:	6338      	str	r0, [r7, #48]	; 0x30
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d100      	bne.n	800f4d8 <__ssvfscanf_r+0xa4c>
 800f4d6:	e4a1      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4de:	88de      	ldrh	r6, [r3, #6]
 800f4e0:	889d      	ldrh	r5, [r3, #4]
 800f4e2:	42ae      	cmp	r6, r5
 800f4e4:	d310      	bcc.n	800f508 <__ssvfscanf_r+0xa7c>
 800f4e6:	4b72      	ldr	r3, [pc, #456]	; (800f6b0 <__ssvfscanf_r+0xc24>)
 800f4e8:	429d      	cmp	r5, r3
 800f4ea:	d900      	bls.n	800f4ee <__ssvfscanf_r+0xa62>
 800f4ec:	e496      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f0:	3508      	adds	r5, #8
 800f4f2:	b2ad      	uxth	r5, r5
 800f4f4:	6818      	ldr	r0, [r3, #0]
 800f4f6:	00a9      	lsls	r1, r5, #2
 800f4f8:	f001 fdc2 	bl	8011080 <realloc>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d100      	bne.n	800f502 <__ssvfscanf_r+0xa76>
 800f500:	e48c      	b.n	800ee1c <__ssvfscanf_r+0x390>
 800f502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f504:	6018      	str	r0, [r3, #0]
 800f506:	809d      	strh	r5, [r3, #4]
 800f508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f50a:	1c72      	adds	r2, r6, #1
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	00b6      	lsls	r6, r6, #2
 800f510:	50f4      	str	r4, [r6, r3]
 800f512:	2320      	movs	r3, #32
 800f514:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f516:	0025      	movs	r5, r4
 800f518:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f51a:	80ca      	strh	r2, [r1, #6]
 800f51c:	613b      	str	r3, [r7, #16]
 800f51e:	2300      	movs	r3, #0
 800f520:	623b      	str	r3, [r7, #32]
 800f522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f524:	4a63      	ldr	r2, [pc, #396]	; (800f6b4 <__ssvfscanf_r+0xc28>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	5cd3      	ldrb	r3, [r2, r3]
 800f52c:	2208      	movs	r2, #8
 800f52e:	4213      	tst	r3, r2
 800f530:	d149      	bne.n	800f5c6 <__ssvfscanf_r+0xb3a>
 800f532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d046      	beq.n	800f5c6 <__ssvfscanf_r+0xb3a>
 800f538:	f7fc feb2 	bl	800c2a0 <__locale_mb_cur_max>
 800f53c:	6a3b      	ldr	r3, [r7, #32]
 800f53e:	4298      	cmp	r0, r3
 800f540:	d101      	bne.n	800f546 <__ssvfscanf_r+0xaba>
 800f542:	f7ff fb72 	bl	800ec2a <__ssvfscanf_r+0x19e>
 800f546:	6a3a      	ldr	r2, [r7, #32]
 800f548:	2048      	movs	r0, #72	; 0x48
 800f54a:	1c56      	adds	r6, r2, #1
 800f54c:	228c      	movs	r2, #140	; 0x8c
 800f54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f550:	0052      	lsls	r2, r2, #1
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	1812      	adds	r2, r2, r0
 800f556:	7819      	ldrb	r1, [r3, #0]
 800f558:	6a38      	ldr	r0, [r7, #32]
 800f55a:	19d2      	adds	r2, r2, r7
 800f55c:	5411      	strb	r1, [r2, r0]
 800f55e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f560:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f562:	6852      	ldr	r2, [r2, #4]
 800f564:	3301      	adds	r3, #1
 800f566:	600b      	str	r3, [r1, #0]
 800f568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56a:	3a01      	subs	r2, #1
 800f56c:	604a      	str	r2, [r1, #4]
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d102      	bne.n	800f578 <__ssvfscanf_r+0xaec>
 800f572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f574:	2b04      	cmp	r3, #4
 800f576:	d007      	beq.n	800f588 <__ssvfscanf_r+0xafc>
 800f578:	2048      	movs	r0, #72	; 0x48
 800f57a:	2310      	movs	r3, #16
 800f57c:	181b      	adds	r3, r3, r0
 800f57e:	2208      	movs	r2, #8
 800f580:	2100      	movs	r1, #0
 800f582:	19d8      	adds	r0, r3, r7
 800f584:	f7fc fe00 	bl	800c188 <memset>
 800f588:	2148      	movs	r1, #72	; 0x48
 800f58a:	2310      	movs	r3, #16
 800f58c:	228c      	movs	r2, #140	; 0x8c
 800f58e:	185b      	adds	r3, r3, r1
 800f590:	0052      	lsls	r2, r2, #1
 800f592:	19db      	adds	r3, r3, r7
 800f594:	1852      	adds	r2, r2, r1
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	0021      	movs	r1, r4
 800f59a:	0033      	movs	r3, r6
 800f59c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f59e:	19d2      	adds	r2, r2, r7
 800f5a0:	f002 f882 	bl	80116a8 <_mbrtowc_r>
 800f5a4:	0003      	movs	r3, r0
 800f5a6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	d101      	bne.n	800f5b0 <__ssvfscanf_r+0xb24>
 800f5ac:	f7ff fb3d 	bl	800ec2a <__ssvfscanf_r+0x19e>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d12f      	bne.n	800f614 <__ssvfscanf_r+0xb88>
 800f5b4:	6020      	str	r0, [r4, #0]
 800f5b6:	6820      	ldr	r0, [r4, #0]
 800f5b8:	f002 f894 	bl	80116e4 <iswspace>
 800f5bc:	6238      	str	r0, [r7, #32]
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	d04a      	beq.n	800f658 <__ssvfscanf_r+0xbcc>
 800f5c2:	2e00      	cmp	r6, #0
 800f5c4:	d13c      	bne.n	800f640 <__ssvfscanf_r+0xbb4>
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d000      	beq.n	800f5ce <__ssvfscanf_r+0xb42>
 800f5cc:	e640      	b.n	800f250 <__ssvfscanf_r+0x7c4>
 800f5ce:	6023      	str	r3, [r4, #0]
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	d100      	bne.n	800f5d6 <__ssvfscanf_r+0xb4a>
 800f5d4:	e639      	b.n	800f24a <__ssvfscanf_r+0x7be>
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	693a      	ldr	r2, [r7, #16]
 800f5da:	1ae4      	subs	r4, r4, r3
 800f5dc:	10a3      	asrs	r3, r4, #2
 800f5de:	3301      	adds	r3, #1
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d800      	bhi.n	800f5e6 <__ssvfscanf_r+0xb5a>
 800f5e4:	e631      	b.n	800f24a <__ssvfscanf_r+0x7be>
 800f5e6:	6828      	ldr	r0, [r5, #0]
 800f5e8:	1d21      	adds	r1, r4, #4
 800f5ea:	f001 fd49 	bl	8011080 <realloc>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d100      	bne.n	800f5f4 <__ssvfscanf_r+0xb68>
 800f5f2:	e62a      	b.n	800f24a <__ssvfscanf_r+0x7be>
 800f5f4:	6028      	str	r0, [r5, #0]
 800f5f6:	e628      	b.n	800f24a <__ssvfscanf_r+0x7be>
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	60fb      	str	r3, [r7, #12]
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	001d      	movs	r5, r3
 800f600:	613b      	str	r3, [r7, #16]
 800f602:	633b      	str	r3, [r7, #48]	; 0x30
 800f604:	334c      	adds	r3, #76	; 0x4c
 800f606:	18fc      	adds	r4, r7, r3
 800f608:	e789      	b.n	800f51e <__ssvfscanf_r+0xa92>
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	001d      	movs	r5, r3
 800f60e:	613b      	str	r3, [r7, #16]
 800f610:	633b      	str	r3, [r7, #48]	; 0x30
 800f612:	e784      	b.n	800f51e <__ssvfscanf_r+0xa92>
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	623e      	str	r6, [r7, #32]
 800f618:	3302      	adds	r3, #2
 800f61a:	d1cc      	bne.n	800f5b6 <__ssvfscanf_r+0xb2a>
 800f61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	dd00      	ble.n	800f626 <__ssvfscanf_r+0xb9a>
 800f624:	e77d      	b.n	800f522 <__ssvfscanf_r+0xa96>
 800f626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f628:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f62a:	f002 f93d 	bl	80118a8 <__ssrefill_r>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d100      	bne.n	800f634 <__ssvfscanf_r+0xba8>
 800f632:	e776      	b.n	800f522 <__ssvfscanf_r+0xa96>
 800f634:	6a3b      	ldr	r3, [r7, #32]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <__ssvfscanf_r+0xbb2>
 800f63a:	f7ff faf6 	bl	800ec2a <__ssvfscanf_r+0x19e>
 800f63e:	e7c2      	b.n	800f5c6 <__ssvfscanf_r+0xb3a>
 800f640:	238c      	movs	r3, #140	; 0x8c
 800f642:	2248      	movs	r2, #72	; 0x48
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	189b      	adds	r3, r3, r2
 800f648:	3e01      	subs	r6, #1
 800f64a:	19db      	adds	r3, r3, r7
 800f64c:	5cf1      	ldrb	r1, [r6, r3]
 800f64e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f652:	f002 f8ed 	bl	8011830 <_sungetc_r>
 800f656:	e7b4      	b.n	800f5c2 <__ssvfscanf_r+0xb36>
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	199b      	adds	r3, r3, r6
 800f65c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	2b03      	cmp	r3, #3
 800f662:	d102      	bne.n	800f66a <__ssvfscanf_r+0xbde>
 800f664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f666:	2b04      	cmp	r3, #4
 800f668:	d002      	beq.n	800f670 <__ssvfscanf_r+0xbe4>
 800f66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66c:	3b01      	subs	r3, #1
 800f66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1d2      	bne.n	800f61c <__ssvfscanf_r+0xb90>
 800f676:	3404      	adds	r4, #4
 800f678:	2d00      	cmp	r5, #0
 800f67a:	d016      	beq.n	800f6aa <__ssvfscanf_r+0xc1e>
 800f67c:	69fa      	ldr	r2, [r7, #28]
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	623a      	str	r2, [r7, #32]
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	1ae6      	subs	r6, r4, r3
 800f686:	10b3      	asrs	r3, r6, #2
 800f688:	4293      	cmp	r3, r2
 800f68a:	d3c7      	bcc.n	800f61c <__ssvfscanf_r+0xb90>
 800f68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f68e:	00d1      	lsls	r1, r2, #3
 800f690:	f001 fcf6 	bl	8011080 <realloc>
 800f694:	6338      	str	r0, [r7, #48]	; 0x30
 800f696:	2800      	cmp	r0, #0
 800f698:	d101      	bne.n	800f69e <__ssvfscanf_r+0xc12>
 800f69a:	f7ff fbbf 	bl	800ee1c <__ssvfscanf_r+0x390>
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	1984      	adds	r4, r0, r6
 800f6a2:	005b      	lsls	r3, r3, #1
 800f6a4:	6028      	str	r0, [r5, #0]
 800f6a6:	613b      	str	r3, [r7, #16]
 800f6a8:	e7b8      	b.n	800f61c <__ssvfscanf_r+0xb90>
 800f6aa:	623d      	str	r5, [r7, #32]
 800f6ac:	e7b6      	b.n	800f61c <__ssvfscanf_r+0xb90>
 800f6ae:	46c0      	nop			; (mov r8, r8)
 800f6b0:	0000fff6 	.word	0x0000fff6
 800f6b4:	080148c9 	.word	0x080148c9
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d01c      	beq.n	800f6f8 <__ssvfscanf_r+0xc6c>
 800f6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c0:	49bf      	ldr	r1, [pc, #764]	; (800f9c0 <__ssvfscanf_r+0xf34>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	781a      	ldrb	r2, [r3, #0]
 800f6c6:	5c8a      	ldrb	r2, [r1, r2]
 800f6c8:	2108      	movs	r1, #8
 800f6ca:	420a      	tst	r2, r1
 800f6cc:	d000      	beq.n	800f6d0 <__ssvfscanf_r+0xc44>
 800f6ce:	e4a1      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f6d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6d4:	6852      	ldr	r2, [r2, #4]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	600b      	str	r3, [r1, #0]
 800f6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6dc:	3a01      	subs	r2, #1
 800f6de:	3401      	adds	r4, #1
 800f6e0:	604a      	str	r2, [r1, #4]
 800f6e2:	429c      	cmp	r4, r3
 800f6e4:	d100      	bne.n	800f6e8 <__ssvfscanf_r+0xc5c>
 800f6e6:	e495      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f6e8:	2a00      	cmp	r2, #0
 800f6ea:	dce8      	bgt.n	800f6be <__ssvfscanf_r+0xc32>
 800f6ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6ee:	f002 f8db 	bl	80118a8 <__ssrefill_r>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d0e3      	beq.n	800f6be <__ssvfscanf_r+0xc32>
 800f6f6:	e48d      	b.n	800f014 <__ssvfscanf_r+0x588>
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	0032      	movs	r2, r6
 800f6fc:	cb10      	ldmia	r3!, {r4}
 800f6fe:	61fb      	str	r3, [r7, #28]
 800f700:	2380      	movs	r3, #128	; 0x80
 800f702:	401a      	ands	r2, r3
 800f704:	421e      	tst	r6, r3
 800f706:	d039      	beq.n	800f77c <__ssvfscanf_r+0xcf0>
 800f708:	2c00      	cmp	r4, #0
 800f70a:	d101      	bne.n	800f710 <__ssvfscanf_r+0xc84>
 800f70c:	f7ff fabb 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800f710:	2020      	movs	r0, #32
 800f712:	f7fb fa13 	bl	800ab3c <malloc>
 800f716:	6338      	str	r0, [r7, #48]	; 0x30
 800f718:	2800      	cmp	r0, #0
 800f71a:	d101      	bne.n	800f720 <__ssvfscanf_r+0xc94>
 800f71c:	f7ff fa8c 	bl	800ec38 <__ssvfscanf_r+0x1ac>
 800f720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f722:	6020      	str	r0, [r4, #0]
 800f724:	88de      	ldrh	r6, [r3, #6]
 800f726:	889d      	ldrh	r5, [r3, #4]
 800f728:	6818      	ldr	r0, [r3, #0]
 800f72a:	42ae      	cmp	r6, r5
 800f72c:	d310      	bcc.n	800f750 <__ssvfscanf_r+0xcc4>
 800f72e:	4ba5      	ldr	r3, [pc, #660]	; (800f9c4 <__ssvfscanf_r+0xf38>)
 800f730:	429d      	cmp	r5, r3
 800f732:	d901      	bls.n	800f738 <__ssvfscanf_r+0xcac>
 800f734:	f7ff fb7b 	bl	800ee2e <__ssvfscanf_r+0x3a2>
 800f738:	3508      	adds	r5, #8
 800f73a:	b2ad      	uxth	r5, r5
 800f73c:	00a9      	lsls	r1, r5, #2
 800f73e:	f001 fc9f 	bl	8011080 <realloc>
 800f742:	2800      	cmp	r0, #0
 800f744:	d101      	bne.n	800f74a <__ssvfscanf_r+0xcbe>
 800f746:	f7ff fb72 	bl	800ee2e <__ssvfscanf_r+0x3a2>
 800f74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74c:	6018      	str	r0, [r3, #0]
 800f74e:	809d      	strh	r5, [r3, #4]
 800f750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f752:	1c72      	adds	r2, r6, #1
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	00b6      	lsls	r6, r6, #2
 800f758:	50f4      	str	r4, [r6, r3]
 800f75a:	2320      	movs	r3, #32
 800f75c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f75e:	0026      	movs	r6, r4
 800f760:	80ca      	strh	r2, [r1, #6]
 800f762:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f764:	633b      	str	r3, [r7, #48]	; 0x30
 800f766:	0025      	movs	r5, r4
 800f768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f76a:	4995      	ldr	r1, [pc, #596]	; (800f9c0 <__ssvfscanf_r+0xf34>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	781a      	ldrb	r2, [r3, #0]
 800f770:	5c8a      	ldrb	r2, [r1, r2]
 800f772:	2108      	movs	r1, #8
 800f774:	420a      	tst	r2, r1
 800f776:	d004      	beq.n	800f782 <__ssvfscanf_r+0xcf6>
 800f778:	623c      	str	r4, [r7, #32]
 800f77a:	e031      	b.n	800f7e0 <__ssvfscanf_r+0xd54>
 800f77c:	0016      	movs	r6, r2
 800f77e:	633a      	str	r2, [r7, #48]	; 0x30
 800f780:	e7f1      	b.n	800f766 <__ssvfscanf_r+0xcda>
 800f782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f784:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f786:	6852      	ldr	r2, [r2, #4]
 800f788:	3a01      	subs	r2, #1
 800f78a:	604a      	str	r2, [r1, #4]
 800f78c:	1c5a      	adds	r2, r3, #1
 800f78e:	600a      	str	r2, [r1, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	1c62      	adds	r2, r4, #1
 800f794:	623a      	str	r2, [r7, #32]
 800f796:	7023      	strb	r3, [r4, #0]
 800f798:	2e00      	cmp	r6, #0
 800f79a:	d010      	beq.n	800f7be <__ssvfscanf_r+0xd32>
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	1b54      	subs	r4, r2, r5
 800f7a0:	429c      	cmp	r4, r3
 800f7a2:	d30c      	bcc.n	800f7be <__ssvfscanf_r+0xd32>
 800f7a4:	005b      	lsls	r3, r3, #1
 800f7a6:	0028      	movs	r0, r5
 800f7a8:	0019      	movs	r1, r3
 800f7aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f7ac:	f001 fc68 	bl	8011080 <realloc>
 800f7b0:	1e05      	subs	r5, r0, #0
 800f7b2:	d101      	bne.n	800f7b8 <__ssvfscanf_r+0xd2c>
 800f7b4:	f7ff fa40 	bl	800ec38 <__ssvfscanf_r+0x1ac>
 800f7b8:	1903      	adds	r3, r0, r4
 800f7ba:	623b      	str	r3, [r7, #32]
 800f7bc:	6030      	str	r0, [r6, #0]
 800f7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00b      	beq.n	800f7e0 <__ssvfscanf_r+0xd54>
 800f7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	dd01      	ble.n	800f7d4 <__ssvfscanf_r+0xd48>
 800f7d0:	6a3c      	ldr	r4, [r7, #32]
 800f7d2:	e7c9      	b.n	800f768 <__ssvfscanf_r+0xcdc>
 800f7d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7d8:	f002 f866 	bl	80118a8 <__ssrefill_r>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d0f7      	beq.n	800f7d0 <__ssvfscanf_r+0xd44>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	6a3a      	ldr	r2, [r7, #32]
 800f7e4:	7013      	strb	r3, [r2, #0]
 800f7e6:	1b55      	subs	r5, r2, r5
 800f7e8:	2e00      	cmp	r6, #0
 800f7ea:	d009      	beq.n	800f800 <__ssvfscanf_r+0xd74>
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ee:	1c69      	adds	r1, r5, #1
 800f7f0:	428b      	cmp	r3, r1
 800f7f2:	d905      	bls.n	800f800 <__ssvfscanf_r+0xd74>
 800f7f4:	6830      	ldr	r0, [r6, #0]
 800f7f6:	f001 fc43 	bl	8011080 <realloc>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d000      	beq.n	800f800 <__ssvfscanf_r+0xd74>
 800f7fe:	6030      	str	r0, [r6, #0]
 800f800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f802:	195b      	adds	r3, r3, r5
 800f804:	63bb      	str	r3, [r7, #56]	; 0x38
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	3301      	adds	r3, #1
 800f80a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f80c:	e63c      	b.n	800f488 <__ssvfscanf_r+0x9fc>
 800f80e:	22ae      	movs	r2, #174	; 0xae
 800f810:	2100      	movs	r1, #0
 800f812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f814:	0052      	lsls	r2, r2, #1
 800f816:	3b01      	subs	r3, #1
 800f818:	6239      	str	r1, [r7, #32]
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d906      	bls.n	800f82c <__ssvfscanf_r+0xda0>
 800f81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f820:	3b5e      	subs	r3, #94	; 0x5e
 800f822:	3bff      	subs	r3, #255	; 0xff
 800f824:	623b      	str	r3, [r7, #32]
 800f826:	235e      	movs	r3, #94	; 0x5e
 800f828:	33ff      	adds	r3, #255	; 0xff
 800f82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f82c:	24d8      	movs	r4, #216	; 0xd8
 800f82e:	2300      	movs	r3, #0
 800f830:	2248      	movs	r2, #72	; 0x48
 800f832:	0124      	lsls	r4, r4, #4
 800f834:	4334      	orrs	r4, r6
 800f836:	2680      	movs	r6, #128	; 0x80
 800f838:	61fb      	str	r3, [r7, #28]
 800f83a:	3319      	adds	r3, #25
 800f83c:	33ff      	adds	r3, #255	; 0xff
 800f83e:	189b      	adds	r3, r3, r2
 800f840:	19dd      	adds	r5, r3, r7
 800f842:	00b6      	lsls	r6, r6, #2
 800f844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	7813      	ldrb	r3, [r2, #0]
 800f84a:	2b39      	cmp	r3, #57	; 0x39
 800f84c:	d80f      	bhi.n	800f86e <__ssvfscanf_r+0xde2>
 800f84e:	2b2a      	cmp	r3, #42	; 0x2a
 800f850:	d91b      	bls.n	800f88a <__ssvfscanf_r+0xdfe>
 800f852:	0018      	movs	r0, r3
 800f854:	382b      	subs	r0, #43	; 0x2b
 800f856:	280e      	cmp	r0, #14
 800f858:	d817      	bhi.n	800f88a <__ssvfscanf_r+0xdfe>
 800f85a:	f7f0 fc5b 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f85e:	168f      	.short	0x168f
 800f860:	5416168f 	.word	0x5416168f
 800f864:	80808080 	.word	0x80808080
 800f868:	87808080 	.word	0x87808080
 800f86c:	87          	.byte	0x87
 800f86d:	00          	.byte	0x00
 800f86e:	2b66      	cmp	r3, #102	; 0x66
 800f870:	d83a      	bhi.n	800f8e8 <__ssvfscanf_r+0xe5c>
 800f872:	2b60      	cmp	r3, #96	; 0x60
 800f874:	d803      	bhi.n	800f87e <__ssvfscanf_r+0xdf2>
 800f876:	2b46      	cmp	r3, #70	; 0x46
 800f878:	d805      	bhi.n	800f886 <__ssvfscanf_r+0xdfa>
 800f87a:	2b40      	cmp	r3, #64	; 0x40
 800f87c:	d905      	bls.n	800f88a <__ssvfscanf_r+0xdfe>
 800f87e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f880:	290a      	cmp	r1, #10
 800f882:	dc71      	bgt.n	800f968 <__ssvfscanf_r+0xedc>
 800f884:	e001      	b.n	800f88a <__ssvfscanf_r+0xdfe>
 800f886:	2b58      	cmp	r3, #88	; 0x58
 800f888:	d030      	beq.n	800f8ec <__ssvfscanf_r+0xe60>
 800f88a:	05e3      	lsls	r3, r4, #23
 800f88c:	d515      	bpl.n	800f8ba <__ssvfscanf_r+0xe2e>
 800f88e:	238c      	movs	r3, #140	; 0x8c
 800f890:	2248      	movs	r2, #72	; 0x48
 800f892:	005b      	lsls	r3, r3, #1
 800f894:	189b      	adds	r3, r3, r2
 800f896:	19db      	adds	r3, r3, r7
 800f898:	429d      	cmp	r5, r3
 800f89a:	d905      	bls.n	800f8a8 <__ssvfscanf_r+0xe1c>
 800f89c:	3d01      	subs	r5, #1
 800f89e:	7829      	ldrb	r1, [r5, #0]
 800f8a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8a4:	f001 ffc4 	bl	8011830 <_sungetc_r>
 800f8a8:	238c      	movs	r3, #140	; 0x8c
 800f8aa:	2248      	movs	r2, #72	; 0x48
 800f8ac:	005b      	lsls	r3, r3, #1
 800f8ae:	189b      	adds	r3, r3, r2
 800f8b0:	19db      	adds	r3, r3, r7
 800f8b2:	429d      	cmp	r5, r3
 800f8b4:	d101      	bne.n	800f8ba <__ssvfscanf_r+0xe2e>
 800f8b6:	f7ff f9e6 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800f8ba:	2310      	movs	r3, #16
 800f8bc:	0022      	movs	r2, r4
 800f8be:	401a      	ands	r2, r3
 800f8c0:	421c      	tst	r4, r3
 800f8c2:	d171      	bne.n	800f9a8 <__ssvfscanf_r+0xf1c>
 800f8c4:	218c      	movs	r1, #140	; 0x8c
 800f8c6:	2048      	movs	r0, #72	; 0x48
 800f8c8:	0049      	lsls	r1, r1, #1
 800f8ca:	1809      	adds	r1, r1, r0
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	697e      	ldr	r6, [r7, #20]
 800f8d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8d2:	19c9      	adds	r1, r1, r7
 800f8d4:	702a      	strb	r2, [r5, #0]
 800f8d6:	47b0      	blx	r6
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8da:	1d1e      	adds	r6, r3, #4
 800f8dc:	06a3      	lsls	r3, r4, #26
 800f8de:	d559      	bpl.n	800f994 <__ssvfscanf_r+0xf08>
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6018      	str	r0, [r3, #0]
 800f8e6:	e05b      	b.n	800f9a0 <__ssvfscanf_r+0xf14>
 800f8e8:	2b78      	cmp	r3, #120	; 0x78
 800f8ea:	d1ce      	bne.n	800f88a <__ssvfscanf_r+0xdfe>
 800f8ec:	21c0      	movs	r1, #192	; 0xc0
 800f8ee:	00c9      	lsls	r1, r1, #3
 800f8f0:	4021      	ands	r1, r4
 800f8f2:	42b1      	cmp	r1, r6
 800f8f4:	d1c9      	bne.n	800f88a <__ssvfscanf_r+0xdfe>
 800f8f6:	4934      	ldr	r1, [pc, #208]	; (800f9c8 <__ssvfscanf_r+0xf3c>)
 800f8f8:	4021      	ands	r1, r4
 800f8fa:	24a0      	movs	r4, #160	; 0xa0
 800f8fc:	00e4      	lsls	r4, r4, #3
 800f8fe:	430c      	orrs	r4, r1
 800f900:	2110      	movs	r1, #16
 800f902:	6279      	str	r1, [r7, #36]	; 0x24
 800f904:	e00b      	b.n	800f91e <__ssvfscanf_r+0xe92>
 800f906:	0521      	lsls	r1, r4, #20
 800f908:	d509      	bpl.n	800f91e <__ssvfscanf_r+0xe92>
 800f90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f90c:	2900      	cmp	r1, #0
 800f90e:	d102      	bne.n	800f916 <__ssvfscanf_r+0xe8a>
 800f910:	3108      	adds	r1, #8
 800f912:	4334      	orrs	r4, r6
 800f914:	6279      	str	r1, [r7, #36]	; 0x24
 800f916:	0561      	lsls	r1, r4, #21
 800f918:	d504      	bpl.n	800f924 <__ssvfscanf_r+0xe98>
 800f91a:	492c      	ldr	r1, [pc, #176]	; (800f9cc <__ssvfscanf_r+0xf40>)
 800f91c:	400c      	ands	r4, r1
 800f91e:	702b      	strb	r3, [r5, #0]
 800f920:	3501      	adds	r5, #1
 800f922:	e00c      	b.n	800f93e <__ssvfscanf_r+0xeb2>
 800f924:	4b2a      	ldr	r3, [pc, #168]	; (800f9d0 <__ssvfscanf_r+0xf44>)
 800f926:	401c      	ands	r4, r3
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d004      	beq.n	800f938 <__ssvfscanf_r+0xeac>
 800f92e:	3b01      	subs	r3, #1
 800f930:	623b      	str	r3, [r7, #32]
 800f932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f934:	3301      	adds	r3, #1
 800f936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	3301      	adds	r3, #1
 800f93c:	61fb      	str	r3, [r7, #28]
 800f93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f940:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	3b01      	subs	r3, #1
 800f946:	604b      	str	r3, [r1, #4]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	dd1c      	ble.n	800f986 <__ssvfscanf_r+0xefa>
 800f94c:	3201      	adds	r2, #1
 800f94e:	600a      	str	r2, [r1, #0]
 800f950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f952:	3b01      	subs	r3, #1
 800f954:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d000      	beq.n	800f95c <__ssvfscanf_r+0xed0>
 800f95a:	e773      	b.n	800f844 <__ssvfscanf_r+0xdb8>
 800f95c:	e795      	b.n	800f88a <__ssvfscanf_r+0xdfe>
 800f95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f960:	491c      	ldr	r1, [pc, #112]	; (800f9d4 <__ssvfscanf_r+0xf48>)
 800f962:	0040      	lsls	r0, r0, #1
 800f964:	5e41      	ldrsh	r1, [r0, r1]
 800f966:	6279      	str	r1, [r7, #36]	; 0x24
 800f968:	491b      	ldr	r1, [pc, #108]	; (800f9d8 <__ssvfscanf_r+0xf4c>)
 800f96a:	e7d7      	b.n	800f91c <__ssvfscanf_r+0xe90>
 800f96c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f96e:	4919      	ldr	r1, [pc, #100]	; (800f9d4 <__ssvfscanf_r+0xf48>)
 800f970:	0040      	lsls	r0, r0, #1
 800f972:	5e41      	ldrsh	r1, [r0, r1]
 800f974:	6279      	str	r1, [r7, #36]	; 0x24
 800f976:	2908      	cmp	r1, #8
 800f978:	dcf6      	bgt.n	800f968 <__ssvfscanf_r+0xedc>
 800f97a:	e786      	b.n	800f88a <__ssvfscanf_r+0xdfe>
 800f97c:	2180      	movs	r1, #128	; 0x80
 800f97e:	420c      	tst	r4, r1
 800f980:	d083      	beq.n	800f88a <__ssvfscanf_r+0xdfe>
 800f982:	438c      	bics	r4, r1
 800f984:	e7cb      	b.n	800f91e <__ssvfscanf_r+0xe92>
 800f986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f988:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f98a:	f001 ff8d 	bl	80118a8 <__ssrefill_r>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d0de      	beq.n	800f950 <__ssvfscanf_r+0xec4>
 800f992:	e77a      	b.n	800f88a <__ssvfscanf_r+0xdfe>
 800f994:	2308      	movs	r3, #8
 800f996:	421c      	tst	r4, r3
 800f998:	d020      	beq.n	800f9dc <__ssvfscanf_r+0xf50>
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	7018      	strb	r0, [r3, #0]
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	633e      	str	r6, [r7, #48]	; 0x30
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9a8:	238c      	movs	r3, #140	; 0x8c
 800f9aa:	2248      	movs	r2, #72	; 0x48
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	189b      	adds	r3, r3, r2
 800f9b0:	19db      	adds	r3, r3, r7
 800f9b2:	1aed      	subs	r5, r5, r3
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	18ed      	adds	r5, r5, r3
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	195b      	adds	r3, r3, r5
 800f9bc:	f7ff f92d 	bl	800ec1a <__ssvfscanf_r+0x18e>
 800f9c0:	080148c9 	.word	0x080148c9
 800f9c4:	0000fff6 	.word	0x0000fff6
 800f9c8:	fffffdff 	.word	0xfffffdff
 800f9cc:	fffffa7f 	.word	0xfffffa7f
 800f9d0:	fffffc7f 	.word	0xfffffc7f
 800f9d4:	08014bf6 	.word	0x08014bf6
 800f9d8:	fffff47f 	.word	0xfffff47f
 800f9dc:	0763      	lsls	r3, r4, #29
 800f9de:	d503      	bpl.n	800f9e8 <__ssvfscanf_r+0xf5c>
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	8018      	strh	r0, [r3, #0]
 800f9e6:	e7db      	b.n	800f9a0 <__ssvfscanf_r+0xf14>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	0022      	movs	r2, r4
 800f9ec:	401a      	ands	r2, r3
 800f9ee:	421c      	tst	r4, r3
 800f9f0:	d000      	beq.n	800f9f4 <__ssvfscanf_r+0xf68>
 800f9f2:	e775      	b.n	800f8e0 <__ssvfscanf_r+0xe54>
 800f9f4:	07a4      	lsls	r4, r4, #30
 800f9f6:	d400      	bmi.n	800f9fa <__ssvfscanf_r+0xf6e>
 800f9f8:	e772      	b.n	800f8e0 <__ssvfscanf_r+0xe54>
 800f9fa:	4ba8      	ldr	r3, [pc, #672]	; (800fc9c <__ssvfscanf_r+0x1210>)
 800f9fc:	6979      	ldr	r1, [r7, #20]
 800f9fe:	4299      	cmp	r1, r3
 800fa00:	d10c      	bne.n	800fa1c <__ssvfscanf_r+0xf90>
 800fa02:	218c      	movs	r1, #140	; 0x8c
 800fa04:	2048      	movs	r0, #72	; 0x48
 800fa06:	0049      	lsls	r1, r1, #1
 800fa08:	1809      	adds	r1, r1, r0
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa0e:	19c9      	adds	r1, r1, r7
 800fa10:	f001 fe46 	bl	80116a0 <_strtoull_r>
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	c303      	stmia	r3!, {r0, r1}
 800fa1a:	e7c1      	b.n	800f9a0 <__ssvfscanf_r+0xf14>
 800fa1c:	218c      	movs	r1, #140	; 0x8c
 800fa1e:	2048      	movs	r0, #72	; 0x48
 800fa20:	0049      	lsls	r1, r1, #1
 800fa22:	1809      	adds	r1, r1, r0
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa28:	19c9      	adds	r1, r1, r7
 800fa2a:	f001 fd87 	bl	801153c <_strtoll_r>
 800fa2e:	e7f1      	b.n	800fa14 <__ssvfscanf_r+0xf88>
 800fa30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa32:	f000 fb9f 	bl	8010174 <_localeconv_r>
 800fa36:	22ae      	movs	r2, #174	; 0xae
 800fa38:	2100      	movs	r1, #0
 800fa3a:	6803      	ldr	r3, [r0, #0]
 800fa3c:	0052      	lsls	r2, r2, #1
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa42:	60f9      	str	r1, [r7, #12]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d906      	bls.n	800fa58 <__ssvfscanf_r+0xfcc>
 800fa4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4c:	3b5e      	subs	r3, #94	; 0x5e
 800fa4e:	3bff      	subs	r3, #255	; 0xff
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	235e      	movs	r3, #94	; 0x5e
 800fa54:	33ff      	adds	r3, #255	; 0xff
 800fa56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa58:	23f0      	movs	r3, #240	; 0xf0
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	431e      	orrs	r6, r3
 800fa5e:	238c      	movs	r3, #140	; 0x8c
 800fa60:	2248      	movs	r2, #72	; 0x48
 800fa62:	2400      	movs	r4, #0
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	189b      	adds	r3, r3, r2
 800fa68:	623c      	str	r4, [r7, #32]
 800fa6a:	607c      	str	r4, [r7, #4]
 800fa6c:	60bc      	str	r4, [r7, #8]
 800fa6e:	61fc      	str	r4, [r7, #28]
 800fa70:	613c      	str	r4, [r7, #16]
 800fa72:	19dd      	adds	r5, r3, r7
 800fa74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	781a      	ldrb	r2, [r3, #0]
 800fa7a:	0010      	movs	r0, r2
 800fa7c:	382b      	subs	r0, #43	; 0x2b
 800fa7e:	284e      	cmp	r0, #78	; 0x4e
 800fa80:	d900      	bls.n	800fa84 <__ssvfscanf_r+0xff8>
 800fa82:	e133      	b.n	800fcec <__ssvfscanf_r+0x1260>
 800fa84:	f7f0 fb50 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fa88:	0132009b 	.word	0x0132009b
 800fa8c:	0132009b 	.word	0x0132009b
 800fa90:	004f0132 	.word	0x004f0132
 800fa94:	00720072 	.word	0x00720072
 800fa98:	00720072 	.word	0x00720072
 800fa9c:	00720072 	.word	0x00720072
 800faa0:	00720072 	.word	0x00720072
 800faa4:	01320072 	.word	0x01320072
 800faa8:	01320132 	.word	0x01320132
 800faac:	01320132 	.word	0x01320132
 800fab0:	01320132 	.word	0x01320132
 800fab4:	007b00bc 	.word	0x007b00bc
 800fab8:	007b007b 	.word	0x007b007b
 800fabc:	00f7012f 	.word	0x00f7012f
 800fac0:	01320132 	.word	0x01320132
 800fac4:	013200e3 	.word	0x013200e3
 800fac8:	01320132 	.word	0x01320132
 800facc:	00a00132 	.word	0x00a00132
 800fad0:	01120132 	.word	0x01120132
 800fad4:	01320132 	.word	0x01320132
 800fad8:	01010132 	.word	0x01010132
 800fadc:	01320132 	.word	0x01320132
 800fae0:	00820132 	.word	0x00820132
 800fae4:	01320105 	.word	0x01320105
 800fae8:	01320132 	.word	0x01320132
 800faec:	01320132 	.word	0x01320132
 800faf0:	01320132 	.word	0x01320132
 800faf4:	007b00bc 	.word	0x007b00bc
 800faf8:	007b007b 	.word	0x007b007b
 800fafc:	00f7012f 	.word	0x00f7012f
 800fb00:	01320132 	.word	0x01320132
 800fb04:	013200e3 	.word	0x013200e3
 800fb08:	01320132 	.word	0x01320132
 800fb0c:	00a00132 	.word	0x00a00132
 800fb10:	01120132 	.word	0x01120132
 800fb14:	01320132 	.word	0x01320132
 800fb18:	01010132 	.word	0x01010132
 800fb1c:	01320132 	.word	0x01320132
 800fb20:	00820132 	.word	0x00820132
 800fb24:	0105      	.short	0x0105
 800fb26:	05f1      	lsls	r1, r6, #23
 800fb28:	d520      	bpl.n	800fb6c <__ssvfscanf_r+0x10e0>
 800fb2a:	2280      	movs	r2, #128	; 0x80
 800fb2c:	4396      	bics	r6, r2
 800fb2e:	69fa      	ldr	r2, [r7, #28]
 800fb30:	3201      	adds	r2, #1
 800fb32:	61fa      	str	r2, [r7, #28]
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	2a00      	cmp	r2, #0
 800fb38:	d004      	beq.n	800fb44 <__ssvfscanf_r+0x10b8>
 800fb3a:	3a01      	subs	r2, #1
 800fb3c:	60fa      	str	r2, [r7, #12]
 800fb3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb40:	3201      	adds	r2, #1
 800fb42:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fb44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb48:	3a01      	subs	r2, #1
 800fb4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb4e:	3201      	adds	r2, #1
 800fb50:	63ba      	str	r2, [r7, #56]	; 0x38
 800fb52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb54:	6852      	ldr	r2, [r2, #4]
 800fb56:	3a01      	subs	r2, #1
 800fb58:	604a      	str	r2, [r1, #4]
 800fb5a:	2a00      	cmp	r2, #0
 800fb5c:	dc00      	bgt.n	800fb60 <__ssvfscanf_r+0x10d4>
 800fb5e:	e0d6      	b.n	800fd0e <__ssvfscanf_r+0x1282>
 800fb60:	3301      	adds	r3, #1
 800fb62:	600b      	str	r3, [r1, #0]
 800fb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d184      	bne.n	800fa74 <__ssvfscanf_r+0xfe8>
 800fb6a:	e057      	b.n	800fc1c <__ssvfscanf_r+0x1190>
 800fb6c:	6a39      	ldr	r1, [r7, #32]
 800fb6e:	1909      	adds	r1, r1, r4
 800fb70:	2900      	cmp	r1, #0
 800fb72:	d153      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fb74:	494a      	ldr	r1, [pc, #296]	; (800fca0 <__ssvfscanf_r+0x1214>)
 800fb76:	400e      	ands	r6, r1
 800fb78:	702a      	strb	r2, [r5, #0]
 800fb7a:	3501      	adds	r5, #1
 800fb7c:	e7e2      	b.n	800fb44 <__ssvfscanf_r+0x10b8>
 800fb7e:	0531      	lsls	r1, r6, #20
 800fb80:	d54c      	bpl.n	800fc1c <__ssvfscanf_r+0x1190>
 800fb82:	6a39      	ldr	r1, [r7, #32]
 800fb84:	1909      	adds	r1, r1, r4
 800fb86:	2900      	cmp	r1, #0
 800fb88:	d040      	beq.n	800fc0c <__ssvfscanf_r+0x1180>
 800fb8a:	e047      	b.n	800fc1c <__ssvfscanf_r+0x1190>
 800fb8c:	2198      	movs	r1, #152	; 0x98
 800fb8e:	2080      	movs	r0, #128	; 0x80
 800fb90:	0109      	lsls	r1, r1, #4
 800fb92:	4031      	ands	r1, r6
 800fb94:	0040      	lsls	r0, r0, #1
 800fb96:	4281      	cmp	r1, r0
 800fb98:	d140      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fb9a:	69f9      	ldr	r1, [r7, #28]
 800fb9c:	2901      	cmp	r1, #1
 800fb9e:	d13d      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fba0:	2080      	movs	r0, #128	; 0x80
 800fba2:	4940      	ldr	r1, [pc, #256]	; (800fca4 <__ssvfscanf_r+0x1218>)
 800fba4:	0100      	lsls	r0, r0, #4
 800fba6:	400e      	ands	r6, r1
 800fba8:	3132      	adds	r1, #50	; 0x32
 800fbaa:	31ff      	adds	r1, #255	; 0xff
 800fbac:	7029      	strb	r1, [r5, #0]
 800fbae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbb0:	4306      	orrs	r6, r0
 800fbb2:	3901      	subs	r1, #1
 800fbb4:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fbb6:	3501      	adds	r5, #1
 800fbb8:	2100      	movs	r1, #0
 800fbba:	61f9      	str	r1, [r7, #28]
 800fbbc:	e7dc      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fbbe:	2180      	movs	r1, #128	; 0x80
 800fbc0:	420e      	tst	r6, r1
 800fbc2:	d02b      	beq.n	800fc1c <__ssvfscanf_r+0x1190>
 800fbc4:	438e      	bics	r6, r1
 800fbc6:	e7d7      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fbc8:	6a39      	ldr	r1, [r7, #32]
 800fbca:	2900      	cmp	r1, #0
 800fbcc:	d10d      	bne.n	800fbea <__ssvfscanf_r+0x115e>
 800fbce:	69f9      	ldr	r1, [r7, #28]
 800fbd0:	2900      	cmp	r1, #0
 800fbd2:	d10e      	bne.n	800fbf2 <__ssvfscanf_r+0x1166>
 800fbd4:	21e0      	movs	r1, #224	; 0xe0
 800fbd6:	0030      	movs	r0, r6
 800fbd8:	00c9      	lsls	r1, r1, #3
 800fbda:	4008      	ands	r0, r1
 800fbdc:	4288      	cmp	r0, r1
 800fbde:	d108      	bne.n	800fbf2 <__ssvfscanf_r+0x1166>
 800fbe0:	4931      	ldr	r1, [pc, #196]	; (800fca8 <__ssvfscanf_r+0x121c>)
 800fbe2:	400e      	ands	r6, r1
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	6239      	str	r1, [r7, #32]
 800fbe8:	e7c6      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fbea:	6a39      	ldr	r1, [r7, #32]
 800fbec:	2902      	cmp	r1, #2
 800fbee:	d100      	bne.n	800fbf2 <__ssvfscanf_r+0x1166>
 800fbf0:	e089      	b.n	800fd06 <__ssvfscanf_r+0x127a>
 800fbf2:	2c01      	cmp	r4, #1
 800fbf4:	d001      	beq.n	800fbfa <__ssvfscanf_r+0x116e>
 800fbf6:	2c04      	cmp	r4, #4
 800fbf8:	d110      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fbfa:	3401      	adds	r4, #1
 800fbfc:	b2e4      	uxtb	r4, r4
 800fbfe:	e7bb      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc00:	0531      	lsls	r1, r6, #20
 800fc02:	d508      	bpl.n	800fc16 <__ssvfscanf_r+0x118a>
 800fc04:	6a39      	ldr	r1, [r7, #32]
 800fc06:	1909      	adds	r1, r1, r4
 800fc08:	2900      	cmp	r1, #0
 800fc0a:	d104      	bne.n	800fc16 <__ssvfscanf_r+0x118a>
 800fc0c:	4824      	ldr	r0, [pc, #144]	; (800fca0 <__ssvfscanf_r+0x1214>)
 800fc0e:	000c      	movs	r4, r1
 800fc10:	4006      	ands	r6, r0
 800fc12:	6239      	str	r1, [r7, #32]
 800fc14:	e7b0      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc16:	6a39      	ldr	r1, [r7, #32]
 800fc18:	2901      	cmp	r1, #1
 800fc1a:	d076      	beq.n	800fd0a <__ssvfscanf_r+0x127e>
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <__ssvfscanf_r+0x119a>
 800fc22:	4b20      	ldr	r3, [pc, #128]	; (800fca4 <__ssvfscanf_r+0x1218>)
 800fc24:	401e      	ands	r6, r3
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	3b01      	subs	r3, #1
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d877      	bhi.n	800fd1e <__ssvfscanf_r+0x1292>
 800fc2e:	238c      	movs	r3, #140	; 0x8c
 800fc30:	2248      	movs	r2, #72	; 0x48
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	189b      	adds	r3, r3, r2
 800fc36:	19db      	adds	r3, r3, r7
 800fc38:	429d      	cmp	r5, r3
 800fc3a:	d801      	bhi.n	800fc40 <__ssvfscanf_r+0x11b4>
 800fc3c:	f7ff f823 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800fc40:	3d01      	subs	r5, #1
 800fc42:	7829      	ldrb	r1, [r5, #0]
 800fc44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc48:	f001 fdf2 	bl	8011830 <_sungetc_r>
 800fc4c:	e7ef      	b.n	800fc2e <__ssvfscanf_r+0x11a2>
 800fc4e:	2c00      	cmp	r4, #0
 800fc50:	d10c      	bne.n	800fc6c <__ssvfscanf_r+0x11e0>
 800fc52:	69f9      	ldr	r1, [r7, #28]
 800fc54:	2900      	cmp	r1, #0
 800fc56:	d1e4      	bne.n	800fc22 <__ssvfscanf_r+0x1196>
 800fc58:	21e0      	movs	r1, #224	; 0xe0
 800fc5a:	0030      	movs	r0, r6
 800fc5c:	00c9      	lsls	r1, r1, #3
 800fc5e:	4008      	ands	r0, r1
 800fc60:	4288      	cmp	r0, r1
 800fc62:	d1e0      	bne.n	800fc26 <__ssvfscanf_r+0x119a>
 800fc64:	4910      	ldr	r1, [pc, #64]	; (800fca8 <__ssvfscanf_r+0x121c>)
 800fc66:	3401      	adds	r4, #1
 800fc68:	400e      	ands	r6, r1
 800fc6a:	e785      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc6c:	20fd      	movs	r0, #253	; 0xfd
 800fc6e:	1ee1      	subs	r1, r4, #3
 800fc70:	4201      	tst	r1, r0
 800fc72:	d1d3      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fc74:	e7c1      	b.n	800fbfa <__ssvfscanf_r+0x116e>
 800fc76:	0531      	lsls	r1, r6, #20
 800fc78:	d503      	bpl.n	800fc82 <__ssvfscanf_r+0x11f6>
 800fc7a:	6a39      	ldr	r1, [r7, #32]
 800fc7c:	1909      	adds	r1, r1, r4
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	d0c4      	beq.n	800fc0c <__ssvfscanf_r+0x1180>
 800fc82:	2c02      	cmp	r4, #2
 800fc84:	d1ca      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fc86:	2403      	movs	r4, #3
 800fc88:	e776      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc8a:	2c06      	cmp	r4, #6
 800fc8c:	d1c6      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fc8e:	2407      	movs	r4, #7
 800fc90:	e772      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc92:	2c07      	cmp	r4, #7
 800fc94:	d1c2      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fc96:	2408      	movs	r4, #8
 800fc98:	e76e      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fc9a:	46c0      	nop			; (mov r8, r8)
 800fc9c:	0800be4d 	.word	0x0800be4d
 800fca0:	fffffe7f 	.word	0xfffffe7f
 800fca4:	fffffeff 	.word	0xfffffeff
 800fca8:	fffff87f 	.word	0xfffff87f
 800fcac:	0531      	lsls	r1, r6, #20
 800fcae:	d5b5      	bpl.n	800fc1c <__ssvfscanf_r+0x1190>
 800fcb0:	21a0      	movs	r1, #160	; 0xa0
 800fcb2:	2080      	movs	r0, #128	; 0x80
 800fcb4:	00c9      	lsls	r1, r1, #3
 800fcb6:	00c0      	lsls	r0, r0, #3
 800fcb8:	4031      	ands	r1, r6
 800fcba:	4281      	cmp	r1, r0
 800fcbc:	d004      	beq.n	800fcc8 <__ssvfscanf_r+0x123c>
 800fcbe:	4206      	tst	r6, r0
 800fcc0:	d0ac      	beq.n	800fc1c <__ssvfscanf_r+0x1190>
 800fcc2:	69f9      	ldr	r1, [r7, #28]
 800fcc4:	2900      	cmp	r1, #0
 800fcc6:	d0ae      	beq.n	800fc26 <__ssvfscanf_r+0x119a>
 800fcc8:	2180      	movs	r1, #128	; 0x80
 800fcca:	0089      	lsls	r1, r1, #2
 800fccc:	420e      	tst	r6, r1
 800fcce:	d104      	bne.n	800fcda <__ssvfscanf_r+0x124e>
 800fcd0:	69f9      	ldr	r1, [r7, #28]
 800fcd2:	6938      	ldr	r0, [r7, #16]
 800fcd4:	607d      	str	r5, [r7, #4]
 800fcd6:	1a09      	subs	r1, r1, r0
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	20c0      	movs	r0, #192	; 0xc0
 800fcdc:	4973      	ldr	r1, [pc, #460]	; (800feac <__ssvfscanf_r+0x1420>)
 800fcde:	0040      	lsls	r0, r0, #1
 800fce0:	400e      	ands	r6, r1
 800fce2:	4306      	orrs	r6, r0
 800fce4:	e768      	b.n	800fbb8 <__ssvfscanf_r+0x112c>
 800fce6:	0531      	lsls	r1, r6, #20
 800fce8:	d5e2      	bpl.n	800fcb0 <__ssvfscanf_r+0x1224>
 800fcea:	e74a      	b.n	800fb82 <__ssvfscanf_r+0x10f6>
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	7809      	ldrb	r1, [r1, #0]
 800fcf0:	4291      	cmp	r1, r2
 800fcf2:	d193      	bne.n	800fc1c <__ssvfscanf_r+0x1190>
 800fcf4:	2180      	movs	r1, #128	; 0x80
 800fcf6:	0089      	lsls	r1, r1, #2
 800fcf8:	420e      	tst	r6, r1
 800fcfa:	d08f      	beq.n	800fc1c <__ssvfscanf_r+0x1190>
 800fcfc:	496c      	ldr	r1, [pc, #432]	; (800feb0 <__ssvfscanf_r+0x1424>)
 800fcfe:	400e      	ands	r6, r1
 800fd00:	69f9      	ldr	r1, [r7, #28]
 800fd02:	6139      	str	r1, [r7, #16]
 800fd04:	e738      	b.n	800fb78 <__ssvfscanf_r+0x10ec>
 800fd06:	2103      	movs	r1, #3
 800fd08:	e76d      	b.n	800fbe6 <__ssvfscanf_r+0x115a>
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	e76b      	b.n	800fbe6 <__ssvfscanf_r+0x115a>
 800fd0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd12:	f001 fdc9 	bl	80118a8 <__ssrefill_r>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	d100      	bne.n	800fd1c <__ssvfscanf_r+0x1290>
 800fd1a:	e723      	b.n	800fb64 <__ssvfscanf_r+0x10d8>
 800fd1c:	e77e      	b.n	800fc1c <__ssvfscanf_r+0x1190>
 800fd1e:	1e63      	subs	r3, r4, #1
 800fd20:	2b06      	cmp	r3, #6
 800fd22:	d825      	bhi.n	800fd70 <__ssvfscanf_r+0x12e4>
 800fd24:	2c02      	cmp	r4, #2
 800fd26:	d837      	bhi.n	800fd98 <__ssvfscanf_r+0x130c>
 800fd28:	238c      	movs	r3, #140	; 0x8c
 800fd2a:	2248      	movs	r2, #72	; 0x48
 800fd2c:	005b      	lsls	r3, r3, #1
 800fd2e:	189b      	adds	r3, r3, r2
 800fd30:	19db      	adds	r3, r3, r7
 800fd32:	429d      	cmp	r5, r3
 800fd34:	d801      	bhi.n	800fd3a <__ssvfscanf_r+0x12ae>
 800fd36:	f7fe ffa6 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800fd3a:	3d01      	subs	r5, #1
 800fd3c:	7829      	ldrb	r1, [r5, #0]
 800fd3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd42:	f001 fd75 	bl	8011830 <_sungetc_r>
 800fd46:	e7ef      	b.n	800fd28 <__ssvfscanf_r+0x129c>
 800fd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	7819      	ldrb	r1, [r3, #0]
 800fd50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd54:	f001 fd6c 	bl	8011830 <_sungetc_r>
 800fd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5a:	6a3a      	ldr	r2, [r7, #32]
 800fd5c:	189b      	adds	r3, r3, r2
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d8f1      	bhi.n	800fd48 <__ssvfscanf_r+0x12bc>
 800fd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd66:	3c03      	subs	r4, #3
 800fd68:	b2e4      	uxtb	r4, r4
 800fd6a:	1b1b      	subs	r3, r3, r4
 800fd6c:	1b2d      	subs	r5, r5, r4
 800fd6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd70:	05f3      	lsls	r3, r6, #23
 800fd72:	d52f      	bpl.n	800fdd4 <__ssvfscanf_r+0x1348>
 800fd74:	0573      	lsls	r3, r6, #21
 800fd76:	d514      	bpl.n	800fda2 <__ssvfscanf_r+0x1316>
 800fd78:	238c      	movs	r3, #140	; 0x8c
 800fd7a:	2248      	movs	r2, #72	; 0x48
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	189b      	adds	r3, r3, r2
 800fd80:	19db      	adds	r3, r3, r7
 800fd82:	429d      	cmp	r5, r3
 800fd84:	d801      	bhi.n	800fd8a <__ssvfscanf_r+0x12fe>
 800fd86:	f7fe ff7e 	bl	800ec86 <__ssvfscanf_r+0x1fa>
 800fd8a:	3d01      	subs	r5, #1
 800fd8c:	7829      	ldrb	r1, [r5, #0]
 800fd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd92:	f001 fd4d 	bl	8011830 <_sungetc_r>
 800fd96:	e7ef      	b.n	800fd78 <__ssvfscanf_r+0x12ec>
 800fd98:	1b63      	subs	r3, r4, r5
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fd9e:	623b      	str	r3, [r7, #32]
 800fda0:	e7da      	b.n	800fd58 <__ssvfscanf_r+0x12cc>
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	1e6c      	subs	r4, r5, #1
 800fda6:	7821      	ldrb	r1, [r4, #0]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdac:	2965      	cmp	r1, #101	; 0x65
 800fdae:	d00a      	beq.n	800fdc6 <__ssvfscanf_r+0x133a>
 800fdb0:	2945      	cmp	r1, #69	; 0x45
 800fdb2:	d008      	beq.n	800fdc6 <__ssvfscanf_r+0x133a>
 800fdb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdb8:	f001 fd3a 	bl	8011830 <_sungetc_r>
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	1eac      	subs	r4, r5, #2
 800fdc0:	3b02      	subs	r3, #2
 800fdc2:	7821      	ldrb	r1, [r4, #0]
 800fdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdc6:	0025      	movs	r5, r4
 800fdc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdcc:	f001 fd30 	bl	8011830 <_sungetc_r>
 800fdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdd4:	2310      	movs	r3, #16
 800fdd6:	0032      	movs	r2, r6
 800fdd8:	401a      	ands	r2, r3
 800fdda:	421e      	tst	r6, r3
 800fddc:	d001      	beq.n	800fde2 <__ssvfscanf_r+0x1356>
 800fdde:	f7fe fe71 	bl	800eac4 <__ssvfscanf_r+0x38>
 800fde2:	23c0      	movs	r3, #192	; 0xc0
 800fde4:	2180      	movs	r1, #128	; 0x80
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	702a      	strb	r2, [r5, #0]
 800fdea:	4033      	ands	r3, r6
 800fdec:	00c9      	lsls	r1, r1, #3
 800fdee:	428b      	cmp	r3, r1
 800fdf0:	d11f      	bne.n	800fe32 <__ssvfscanf_r+0x13a6>
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	69fa      	ldr	r2, [r7, #28]
 800fdf6:	69f9      	ldr	r1, [r7, #28]
 800fdf8:	1a9a      	subs	r2, r3, r2
 800fdfa:	428b      	cmp	r3, r1
 800fdfc:	d125      	bne.n	800fe4a <__ssvfscanf_r+0x13be>
 800fdfe:	238c      	movs	r3, #140	; 0x8c
 800fe00:	2148      	movs	r1, #72	; 0x48
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	185b      	adds	r3, r3, r1
 800fe06:	19d9      	adds	r1, r3, r7
 800fe08:	2200      	movs	r2, #0
 800fe0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe0c:	f7fb fef0 	bl	800bbf0 <_strtod_r>
 800fe10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe12:	0004      	movs	r4, r0
 800fe14:	3304      	adds	r3, #4
 800fe16:	000d      	movs	r5, r1
 800fe18:	623b      	str	r3, [r7, #32]
 800fe1a:	07f3      	lsls	r3, r6, #31
 800fe1c:	d523      	bpl.n	800fe66 <__ssvfscanf_r+0x13da>
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	601c      	str	r4, [r3, #0]
 800fe24:	605d      	str	r5, [r3, #4]
 800fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe28:	3301      	adds	r3, #1
 800fe2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe2c:	6a3b      	ldr	r3, [r7, #32]
 800fe2e:	f7fe ffa5 	bl	800ed7c <__ssvfscanf_r+0x2f0>
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d0e2      	beq.n	800fdfe <__ssvfscanf_r+0x1372>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe3c:	1c59      	adds	r1, r3, #1
 800fe3e:	230a      	movs	r3, #10
 800fe40:	f7fb ff72 	bl	800bd28 <_strtol_r>
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	687d      	ldr	r5, [r7, #4]
 800fe48:	1ac2      	subs	r2, r0, r3
 800fe4a:	2148      	movs	r1, #72	; 0x48
 800fe4c:	4b19      	ldr	r3, [pc, #100]	; (800feb4 <__ssvfscanf_r+0x1428>)
 800fe4e:	185b      	adds	r3, r3, r1
 800fe50:	19db      	adds	r3, r3, r7
 800fe52:	429d      	cmp	r5, r3
 800fe54:	d302      	bcc.n	800fe5c <__ssvfscanf_r+0x13d0>
 800fe56:	4b18      	ldr	r3, [pc, #96]	; (800feb8 <__ssvfscanf_r+0x142c>)
 800fe58:	185b      	adds	r3, r3, r1
 800fe5a:	19dd      	adds	r5, r3, r7
 800fe5c:	0028      	movs	r0, r5
 800fe5e:	4917      	ldr	r1, [pc, #92]	; (800febc <__ssvfscanf_r+0x1430>)
 800fe60:	f7fc f8fc 	bl	800c05c <sprintf>
 800fe64:	e7cb      	b.n	800fdfe <__ssvfscanf_r+0x1372>
 800fe66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe6c:	07b6      	lsls	r6, r6, #30
 800fe6e:	d4d8      	bmi.n	800fe22 <__ssvfscanf_r+0x1396>
 800fe70:	0002      	movs	r2, r0
 800fe72:	000b      	movs	r3, r1
 800fe74:	f7f2 fa3e 	bl	80022f4 <__aeabi_dcmpun>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d005      	beq.n	800fe88 <__ssvfscanf_r+0x13fc>
 800fe7c:	4810      	ldr	r0, [pc, #64]	; (800fec0 <__ssvfscanf_r+0x1434>)
 800fe7e:	f7fc fabf 	bl	800c400 <nanf>
 800fe82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe84:	6018      	str	r0, [r3, #0]
 800fe86:	e7ce      	b.n	800fe26 <__ssvfscanf_r+0x139a>
 800fe88:	0020      	movs	r0, r4
 800fe8a:	0029      	movs	r1, r5
 800fe8c:	f7f2 fadc 	bl	8002448 <__aeabi_d2f>
 800fe90:	e7f7      	b.n	800fe82 <__ssvfscanf_r+0x13f6>
 800fe92:	00a3      	lsls	r3, r4, #2
 800fe94:	18ed      	adds	r5, r5, r3
 800fe96:	682b      	ldr	r3, [r5, #0]
 800fe98:	3401      	adds	r4, #1
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	f7fa fe58 	bl	800ab50 <free>
 800fea0:	2200      	movs	r2, #0
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	f7fe ffc3 	bl	800ee30 <__ssvfscanf_r+0x3a4>
 800feaa:	46c0      	nop			; (mov r8, r8)
 800feac:	fffff07f 	.word	0xfffff07f
 800feb0:	fffffd7f 	.word	0xfffffd7f
 800feb4:	0000026b 	.word	0x0000026b
 800feb8:	0000026a 	.word	0x0000026a
 800febc:	08014bf0 	.word	0x08014bf0
 800fec0:	08014c53 	.word	0x08014c53

0800fec4 <_fclose_r>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	0005      	movs	r5, r0
 800fec8:	1e0c      	subs	r4, r1, #0
 800feca:	d102      	bne.n	800fed2 <_fclose_r+0xe>
 800fecc:	2600      	movs	r6, #0
 800fece:	0030      	movs	r0, r6
 800fed0:	bd70      	pop	{r4, r5, r6, pc}
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d004      	beq.n	800fee0 <_fclose_r+0x1c>
 800fed6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d101      	bne.n	800fee0 <_fclose_r+0x1c>
 800fedc:	f7fc f856 	bl	800bf8c <__sinit>
 800fee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fee2:	07db      	lsls	r3, r3, #31
 800fee4:	d405      	bmi.n	800fef2 <_fclose_r+0x2e>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	059b      	lsls	r3, r3, #22
 800feea:	d402      	bmi.n	800fef2 <_fclose_r+0x2e>
 800feec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feee:	f7fc fa6b 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 800fef2:	220c      	movs	r2, #12
 800fef4:	5ea3      	ldrsh	r3, [r4, r2]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d109      	bne.n	800ff0e <_fclose_r+0x4a>
 800fefa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fefc:	3301      	adds	r3, #1
 800fefe:	0016      	movs	r6, r2
 800ff00:	401e      	ands	r6, r3
 800ff02:	421a      	tst	r2, r3
 800ff04:	d1e2      	bne.n	800fecc <_fclose_r+0x8>
 800ff06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff08:	f7fc fa5f 	bl	800c3ca <__retarget_lock_release_recursive>
 800ff0c:	e7df      	b.n	800fece <_fclose_r+0xa>
 800ff0e:	0021      	movs	r1, r4
 800ff10:	0028      	movs	r0, r5
 800ff12:	f000 f837 	bl	800ff84 <__sflush_r>
 800ff16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff18:	0006      	movs	r6, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d006      	beq.n	800ff2c <_fclose_r+0x68>
 800ff1e:	0028      	movs	r0, r5
 800ff20:	69e1      	ldr	r1, [r4, #28]
 800ff22:	4798      	blx	r3
 800ff24:	2800      	cmp	r0, #0
 800ff26:	da01      	bge.n	800ff2c <_fclose_r+0x68>
 800ff28:	2601      	movs	r6, #1
 800ff2a:	4276      	negs	r6, r6
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	061b      	lsls	r3, r3, #24
 800ff30:	d503      	bpl.n	800ff3a <_fclose_r+0x76>
 800ff32:	0028      	movs	r0, r5
 800ff34:	6921      	ldr	r1, [r4, #16]
 800ff36:	f7fc facf 	bl	800c4d8 <_free_r>
 800ff3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ff3c:	2900      	cmp	r1, #0
 800ff3e:	d008      	beq.n	800ff52 <_fclose_r+0x8e>
 800ff40:	0023      	movs	r3, r4
 800ff42:	3340      	adds	r3, #64	; 0x40
 800ff44:	4299      	cmp	r1, r3
 800ff46:	d002      	beq.n	800ff4e <_fclose_r+0x8a>
 800ff48:	0028      	movs	r0, r5
 800ff4a:	f7fc fac5 	bl	800c4d8 <_free_r>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	6323      	str	r3, [r4, #48]	; 0x30
 800ff52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ff54:	2900      	cmp	r1, #0
 800ff56:	d004      	beq.n	800ff62 <_fclose_r+0x9e>
 800ff58:	0028      	movs	r0, r5
 800ff5a:	f7fc fabd 	bl	800c4d8 <_free_r>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6463      	str	r3, [r4, #68]	; 0x44
 800ff62:	f7fc f803 	bl	800bf6c <__sfp_lock_acquire>
 800ff66:	2300      	movs	r3, #0
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff6c:	07db      	lsls	r3, r3, #31
 800ff6e:	d402      	bmi.n	800ff76 <_fclose_r+0xb2>
 800ff70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff72:	f7fc fa2a 	bl	800c3ca <__retarget_lock_release_recursive>
 800ff76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff78:	f7fc fa25 	bl	800c3c6 <__retarget_lock_close_recursive>
 800ff7c:	f7fb fffe 	bl	800bf7c <__sfp_lock_release>
 800ff80:	e7a5      	b.n	800fece <_fclose_r+0xa>
	...

0800ff84 <__sflush_r>:
 800ff84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff86:	230c      	movs	r3, #12
 800ff88:	5eca      	ldrsh	r2, [r1, r3]
 800ff8a:	000c      	movs	r4, r1
 800ff8c:	0005      	movs	r5, r0
 800ff8e:	b291      	uxth	r1, r2
 800ff90:	0713      	lsls	r3, r2, #28
 800ff92:	d464      	bmi.n	801005e <__sflush_r+0xda>
 800ff94:	2380      	movs	r3, #128	; 0x80
 800ff96:	011b      	lsls	r3, r3, #4
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	6862      	ldr	r2, [r4, #4]
 800ff9c:	81a3      	strh	r3, [r4, #12]
 800ff9e:	2a00      	cmp	r2, #0
 800ffa0:	dc04      	bgt.n	800ffac <__sflush_r+0x28>
 800ffa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ffa4:	2a00      	cmp	r2, #0
 800ffa6:	dc01      	bgt.n	800ffac <__sflush_r+0x28>
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ffac:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800ffae:	2f00      	cmp	r7, #0
 800ffb0:	d0fa      	beq.n	800ffa8 <__sflush_r+0x24>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	2080      	movs	r0, #128	; 0x80
 800ffb6:	682e      	ldr	r6, [r5, #0]
 800ffb8:	602a      	str	r2, [r5, #0]
 800ffba:	001a      	movs	r2, r3
 800ffbc:	0140      	lsls	r0, r0, #5
 800ffbe:	69e1      	ldr	r1, [r4, #28]
 800ffc0:	4002      	ands	r2, r0
 800ffc2:	4203      	tst	r3, r0
 800ffc4:	d038      	beq.n	8010038 <__sflush_r+0xb4>
 800ffc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ffc8:	89a3      	ldrh	r3, [r4, #12]
 800ffca:	075b      	lsls	r3, r3, #29
 800ffcc:	d506      	bpl.n	800ffdc <__sflush_r+0x58>
 800ffce:	6863      	ldr	r3, [r4, #4]
 800ffd0:	1ac0      	subs	r0, r0, r3
 800ffd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d001      	beq.n	800ffdc <__sflush_r+0x58>
 800ffd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ffda:	1ac0      	subs	r0, r0, r3
 800ffdc:	0002      	movs	r2, r0
 800ffde:	2300      	movs	r3, #0
 800ffe0:	0028      	movs	r0, r5
 800ffe2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800ffe4:	69e1      	ldr	r1, [r4, #28]
 800ffe6:	47b8      	blx	r7
 800ffe8:	89a2      	ldrh	r2, [r4, #12]
 800ffea:	1c43      	adds	r3, r0, #1
 800ffec:	d106      	bne.n	800fffc <__sflush_r+0x78>
 800ffee:	6829      	ldr	r1, [r5, #0]
 800fff0:	291d      	cmp	r1, #29
 800fff2:	d830      	bhi.n	8010056 <__sflush_r+0xd2>
 800fff4:	4b2c      	ldr	r3, [pc, #176]	; (80100a8 <__sflush_r+0x124>)
 800fff6:	410b      	asrs	r3, r1
 800fff8:	07db      	lsls	r3, r3, #31
 800fffa:	d42c      	bmi.n	8010056 <__sflush_r+0xd2>
 800fffc:	4b2b      	ldr	r3, [pc, #172]	; (80100ac <__sflush_r+0x128>)
 800fffe:	4013      	ands	r3, r2
 8010000:	2200      	movs	r2, #0
 8010002:	6062      	str	r2, [r4, #4]
 8010004:	6922      	ldr	r2, [r4, #16]
 8010006:	b21b      	sxth	r3, r3
 8010008:	81a3      	strh	r3, [r4, #12]
 801000a:	6022      	str	r2, [r4, #0]
 801000c:	04db      	lsls	r3, r3, #19
 801000e:	d505      	bpl.n	801001c <__sflush_r+0x98>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d102      	bne.n	801001a <__sflush_r+0x96>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d100      	bne.n	801001c <__sflush_r+0x98>
 801001a:	6520      	str	r0, [r4, #80]	; 0x50
 801001c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801001e:	602e      	str	r6, [r5, #0]
 8010020:	2900      	cmp	r1, #0
 8010022:	d0c1      	beq.n	800ffa8 <__sflush_r+0x24>
 8010024:	0023      	movs	r3, r4
 8010026:	3340      	adds	r3, #64	; 0x40
 8010028:	4299      	cmp	r1, r3
 801002a:	d002      	beq.n	8010032 <__sflush_r+0xae>
 801002c:	0028      	movs	r0, r5
 801002e:	f7fc fa53 	bl	800c4d8 <_free_r>
 8010032:	2000      	movs	r0, #0
 8010034:	6320      	str	r0, [r4, #48]	; 0x30
 8010036:	e7b8      	b.n	800ffaa <__sflush_r+0x26>
 8010038:	2301      	movs	r3, #1
 801003a:	0028      	movs	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	1c43      	adds	r3, r0, #1
 8010040:	d1c2      	bne.n	800ffc8 <__sflush_r+0x44>
 8010042:	682b      	ldr	r3, [r5, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d0bf      	beq.n	800ffc8 <__sflush_r+0x44>
 8010048:	2b1d      	cmp	r3, #29
 801004a:	d001      	beq.n	8010050 <__sflush_r+0xcc>
 801004c:	2b16      	cmp	r3, #22
 801004e:	d101      	bne.n	8010054 <__sflush_r+0xd0>
 8010050:	602e      	str	r6, [r5, #0]
 8010052:	e7a9      	b.n	800ffa8 <__sflush_r+0x24>
 8010054:	89a2      	ldrh	r2, [r4, #12]
 8010056:	2340      	movs	r3, #64	; 0x40
 8010058:	4313      	orrs	r3, r2
 801005a:	81a3      	strh	r3, [r4, #12]
 801005c:	e7a5      	b.n	800ffaa <__sflush_r+0x26>
 801005e:	6926      	ldr	r6, [r4, #16]
 8010060:	2e00      	cmp	r6, #0
 8010062:	d0a1      	beq.n	800ffa8 <__sflush_r+0x24>
 8010064:	6827      	ldr	r7, [r4, #0]
 8010066:	6026      	str	r6, [r4, #0]
 8010068:	1bbb      	subs	r3, r7, r6
 801006a:	9301      	str	r3, [sp, #4]
 801006c:	2300      	movs	r3, #0
 801006e:	0789      	lsls	r1, r1, #30
 8010070:	d100      	bne.n	8010074 <__sflush_r+0xf0>
 8010072:	6963      	ldr	r3, [r4, #20]
 8010074:	60a3      	str	r3, [r4, #8]
 8010076:	9b01      	ldr	r3, [sp, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	dc00      	bgt.n	801007e <__sflush_r+0xfa>
 801007c:	e794      	b.n	800ffa8 <__sflush_r+0x24>
 801007e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010080:	0032      	movs	r2, r6
 8010082:	001f      	movs	r7, r3
 8010084:	0028      	movs	r0, r5
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	69e1      	ldr	r1, [r4, #28]
 801008a:	47b8      	blx	r7
 801008c:	2800      	cmp	r0, #0
 801008e:	dc06      	bgt.n	801009e <__sflush_r+0x11a>
 8010090:	2340      	movs	r3, #64	; 0x40
 8010092:	2001      	movs	r0, #1
 8010094:	89a2      	ldrh	r2, [r4, #12]
 8010096:	4240      	negs	r0, r0
 8010098:	4313      	orrs	r3, r2
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	e785      	b.n	800ffaa <__sflush_r+0x26>
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	1836      	adds	r6, r6, r0
 80100a2:	1a1b      	subs	r3, r3, r0
 80100a4:	9301      	str	r3, [sp, #4]
 80100a6:	e7e6      	b.n	8010076 <__sflush_r+0xf2>
 80100a8:	dfbffffe 	.word	0xdfbffffe
 80100ac:	fffff7ff 	.word	0xfffff7ff

080100b0 <_fflush_r>:
 80100b0:	b570      	push	{r4, r5, r6, lr}
 80100b2:	0005      	movs	r5, r0
 80100b4:	000c      	movs	r4, r1
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d004      	beq.n	80100c4 <_fflush_r+0x14>
 80100ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <_fflush_r+0x14>
 80100c0:	f7fb ff64 	bl	800bf8c <__sinit>
 80100c4:	220c      	movs	r2, #12
 80100c6:	5ea3      	ldrsh	r3, [r4, r2]
 80100c8:	1e1e      	subs	r6, r3, #0
 80100ca:	d015      	beq.n	80100f8 <_fflush_r+0x48>
 80100cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100ce:	07d2      	lsls	r2, r2, #31
 80100d0:	d404      	bmi.n	80100dc <_fflush_r+0x2c>
 80100d2:	059b      	lsls	r3, r3, #22
 80100d4:	d402      	bmi.n	80100dc <_fflush_r+0x2c>
 80100d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100d8:	f7fc f976 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 80100dc:	0021      	movs	r1, r4
 80100de:	0028      	movs	r0, r5
 80100e0:	f7ff ff50 	bl	800ff84 <__sflush_r>
 80100e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100e6:	0006      	movs	r6, r0
 80100e8:	07db      	lsls	r3, r3, #31
 80100ea:	d405      	bmi.n	80100f8 <_fflush_r+0x48>
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	059b      	lsls	r3, r3, #22
 80100f0:	d402      	bmi.n	80100f8 <_fflush_r+0x48>
 80100f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100f4:	f7fc f969 	bl	800c3ca <__retarget_lock_release_recursive>
 80100f8:	0030      	movs	r0, r6
 80100fa:	bd70      	pop	{r4, r5, r6, pc}

080100fc <__sccl>:
 80100fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fe:	780b      	ldrb	r3, [r1, #0]
 8010100:	0004      	movs	r4, r0
 8010102:	2b5e      	cmp	r3, #94	; 0x5e
 8010104:	d019      	beq.n	801013a <__sccl+0x3e>
 8010106:	2200      	movs	r2, #0
 8010108:	1c4d      	adds	r5, r1, #1
 801010a:	0021      	movs	r1, r4
 801010c:	1c60      	adds	r0, r4, #1
 801010e:	30ff      	adds	r0, #255	; 0xff
 8010110:	700a      	strb	r2, [r1, #0]
 8010112:	3101      	adds	r1, #1
 8010114:	4281      	cmp	r1, r0
 8010116:	d1fb      	bne.n	8010110 <__sccl+0x14>
 8010118:	1e68      	subs	r0, r5, #1
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00c      	beq.n	8010138 <__sccl+0x3c>
 801011e:	2101      	movs	r1, #1
 8010120:	262d      	movs	r6, #45	; 0x2d
 8010122:	404a      	eors	r2, r1
 8010124:	0028      	movs	r0, r5
 8010126:	54e2      	strb	r2, [r4, r3]
 8010128:	7801      	ldrb	r1, [r0, #0]
 801012a:	1c45      	adds	r5, r0, #1
 801012c:	292d      	cmp	r1, #45	; 0x2d
 801012e:	d00c      	beq.n	801014a <__sccl+0x4e>
 8010130:	295d      	cmp	r1, #93	; 0x5d
 8010132:	d01d      	beq.n	8010170 <__sccl+0x74>
 8010134:	2900      	cmp	r1, #0
 8010136:	d104      	bne.n	8010142 <__sccl+0x46>
 8010138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013a:	2201      	movs	r2, #1
 801013c:	784b      	ldrb	r3, [r1, #1]
 801013e:	1c8d      	adds	r5, r1, #2
 8010140:	e7e3      	b.n	801010a <__sccl+0xe>
 8010142:	000b      	movs	r3, r1
 8010144:	e7ee      	b.n	8010124 <__sccl+0x28>
 8010146:	0033      	movs	r3, r6
 8010148:	e7ec      	b.n	8010124 <__sccl+0x28>
 801014a:	7841      	ldrb	r1, [r0, #1]
 801014c:	295d      	cmp	r1, #93	; 0x5d
 801014e:	d0fa      	beq.n	8010146 <__sccl+0x4a>
 8010150:	428b      	cmp	r3, r1
 8010152:	dcf8      	bgt.n	8010146 <__sccl+0x4a>
 8010154:	001d      	movs	r5, r3
 8010156:	3002      	adds	r0, #2
 8010158:	3501      	adds	r5, #1
 801015a:	5562      	strb	r2, [r4, r5]
 801015c:	42a9      	cmp	r1, r5
 801015e:	dcfb      	bgt.n	8010158 <__sccl+0x5c>
 8010160:	2500      	movs	r5, #0
 8010162:	1c5f      	adds	r7, r3, #1
 8010164:	428b      	cmp	r3, r1
 8010166:	da01      	bge.n	801016c <__sccl+0x70>
 8010168:	1acd      	subs	r5, r1, r3
 801016a:	3d01      	subs	r5, #1
 801016c:	197b      	adds	r3, r7, r5
 801016e:	e7db      	b.n	8010128 <__sccl+0x2c>
 8010170:	0028      	movs	r0, r5
 8010172:	e7e1      	b.n	8010138 <__sccl+0x3c>

08010174 <_localeconv_r>:
 8010174:	4800      	ldr	r0, [pc, #0]	; (8010178 <_localeconv_r+0x4>)
 8010176:	4770      	bx	lr
 8010178:	20000534 	.word	0x20000534

0801017c <__libc_fini_array>:
 801017c:	b570      	push	{r4, r5, r6, lr}
 801017e:	4c07      	ldr	r4, [pc, #28]	; (801019c <__libc_fini_array+0x20>)
 8010180:	4d07      	ldr	r5, [pc, #28]	; (80101a0 <__libc_fini_array+0x24>)
 8010182:	1b64      	subs	r4, r4, r5
 8010184:	10a4      	asrs	r4, r4, #2
 8010186:	2c00      	cmp	r4, #0
 8010188:	d102      	bne.n	8010190 <__libc_fini_array+0x14>
 801018a:	f002 fd47 	bl	8012c1c <_fini>
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	3c01      	subs	r4, #1
 8010192:	00a3      	lsls	r3, r4, #2
 8010194:	58eb      	ldr	r3, [r5, r3]
 8010196:	4798      	blx	r3
 8010198:	e7f5      	b.n	8010186 <__libc_fini_array+0xa>
 801019a:	46c0      	nop			; (mov r8, r8)
 801019c:	08014cf0 	.word	0x08014cf0
 80101a0:	08014cec 	.word	0x08014cec

080101a4 <memchr>:
 80101a4:	b2c9      	uxtb	r1, r1
 80101a6:	1882      	adds	r2, r0, r2
 80101a8:	4290      	cmp	r0, r2
 80101aa:	d101      	bne.n	80101b0 <memchr+0xc>
 80101ac:	2000      	movs	r0, #0
 80101ae:	4770      	bx	lr
 80101b0:	7803      	ldrb	r3, [r0, #0]
 80101b2:	428b      	cmp	r3, r1
 80101b4:	d0fb      	beq.n	80101ae <memchr+0xa>
 80101b6:	3001      	adds	r0, #1
 80101b8:	e7f6      	b.n	80101a8 <memchr+0x4>
	...

080101bc <frexp>:
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	0014      	movs	r4, r2
 80101c0:	2500      	movs	r5, #0
 80101c2:	6025      	str	r5, [r4, #0]
 80101c4:	4d10      	ldr	r5, [pc, #64]	; (8010208 <frexp+0x4c>)
 80101c6:	004b      	lsls	r3, r1, #1
 80101c8:	000a      	movs	r2, r1
 80101ca:	085b      	lsrs	r3, r3, #1
 80101cc:	42ab      	cmp	r3, r5
 80101ce:	dc1a      	bgt.n	8010206 <frexp+0x4a>
 80101d0:	001d      	movs	r5, r3
 80101d2:	4305      	orrs	r5, r0
 80101d4:	d017      	beq.n	8010206 <frexp+0x4a>
 80101d6:	4d0d      	ldr	r5, [pc, #52]	; (801020c <frexp+0x50>)
 80101d8:	4229      	tst	r1, r5
 80101da:	d109      	bne.n	80101f0 <frexp+0x34>
 80101dc:	2200      	movs	r2, #0
 80101de:	4b0c      	ldr	r3, [pc, #48]	; (8010210 <frexp+0x54>)
 80101e0:	f7f1 fa44 	bl	800166c <__aeabi_dmul>
 80101e4:	2536      	movs	r5, #54	; 0x36
 80101e6:	000a      	movs	r2, r1
 80101e8:	004b      	lsls	r3, r1, #1
 80101ea:	426d      	negs	r5, r5
 80101ec:	085b      	lsrs	r3, r3, #1
 80101ee:	6025      	str	r5, [r4, #0]
 80101f0:	4d08      	ldr	r5, [pc, #32]	; (8010214 <frexp+0x58>)
 80101f2:	151b      	asrs	r3, r3, #20
 80101f4:	195b      	adds	r3, r3, r5
 80101f6:	6825      	ldr	r5, [r4, #0]
 80101f8:	18eb      	adds	r3, r5, r3
 80101fa:	6023      	str	r3, [r4, #0]
 80101fc:	4b06      	ldr	r3, [pc, #24]	; (8010218 <frexp+0x5c>)
 80101fe:	401a      	ands	r2, r3
 8010200:	4b06      	ldr	r3, [pc, #24]	; (801021c <frexp+0x60>)
 8010202:	4313      	orrs	r3, r2
 8010204:	0019      	movs	r1, r3
 8010206:	bd70      	pop	{r4, r5, r6, pc}
 8010208:	7fefffff 	.word	0x7fefffff
 801020c:	7ff00000 	.word	0x7ff00000
 8010210:	43500000 	.word	0x43500000
 8010214:	fffffc02 	.word	0xfffffc02
 8010218:	800fffff 	.word	0x800fffff
 801021c:	3fe00000 	.word	0x3fe00000

08010220 <__register_exitproc>:
 8010220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010222:	4f1c      	ldr	r7, [pc, #112]	; (8010294 <__register_exitproc+0x74>)
 8010224:	0004      	movs	r4, r0
 8010226:	6838      	ldr	r0, [r7, #0]
 8010228:	0016      	movs	r6, r2
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	9100      	str	r1, [sp, #0]
 801022e:	f7fc f8cb 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 8010232:	4a19      	ldr	r2, [pc, #100]	; (8010298 <__register_exitproc+0x78>)
 8010234:	6813      	ldr	r3, [r2, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d101      	bne.n	801023e <__register_exitproc+0x1e>
 801023a:	4b18      	ldr	r3, [pc, #96]	; (801029c <__register_exitproc+0x7c>)
 801023c:	6013      	str	r3, [r2, #0]
 801023e:	685a      	ldr	r2, [r3, #4]
 8010240:	6838      	ldr	r0, [r7, #0]
 8010242:	2a1f      	cmp	r2, #31
 8010244:	dd04      	ble.n	8010250 <__register_exitproc+0x30>
 8010246:	f7fc f8c0 	bl	800c3ca <__retarget_lock_release_recursive>
 801024a:	2001      	movs	r0, #1
 801024c:	4240      	negs	r0, r0
 801024e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010250:	2c00      	cmp	r4, #0
 8010252:	d014      	beq.n	801027e <__register_exitproc+0x5e>
 8010254:	0091      	lsls	r1, r2, #2
 8010256:	1859      	adds	r1, r3, r1
 8010258:	000f      	movs	r7, r1
 801025a:	3788      	adds	r7, #136	; 0x88
 801025c:	603e      	str	r6, [r7, #0]
 801025e:	2701      	movs	r7, #1
 8010260:	001e      	movs	r6, r3
 8010262:	4097      	lsls	r7, r2
 8010264:	3685      	adds	r6, #133	; 0x85
 8010266:	36ff      	adds	r6, #255	; 0xff
 8010268:	6875      	ldr	r5, [r6, #4]
 801026a:	31fc      	adds	r1, #252	; 0xfc
 801026c:	433d      	orrs	r5, r7
 801026e:	6075      	str	r5, [r6, #4]
 8010270:	9d01      	ldr	r5, [sp, #4]
 8010272:	60cd      	str	r5, [r1, #12]
 8010274:	2c02      	cmp	r4, #2
 8010276:	d102      	bne.n	801027e <__register_exitproc+0x5e>
 8010278:	68b1      	ldr	r1, [r6, #8]
 801027a:	4339      	orrs	r1, r7
 801027c:	60b1      	str	r1, [r6, #8]
 801027e:	1c51      	adds	r1, r2, #1
 8010280:	6059      	str	r1, [r3, #4]
 8010282:	3202      	adds	r2, #2
 8010284:	9900      	ldr	r1, [sp, #0]
 8010286:	0092      	lsls	r2, r2, #2
 8010288:	50d1      	str	r1, [r2, r3]
 801028a:	f7fc f89e 	bl	800c3ca <__retarget_lock_release_recursive>
 801028e:	2000      	movs	r0, #0
 8010290:	e7dd      	b.n	801024e <__register_exitproc+0x2e>
 8010292:	46c0      	nop			; (mov r8, r8)
 8010294:	200006d4 	.word	0x200006d4
 8010298:	20000db0 	.word	0x20000db0
 801029c:	20000db4 	.word	0x20000db4

080102a0 <__assert_func>:
 80102a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80102a2:	0014      	movs	r4, r2
 80102a4:	001a      	movs	r2, r3
 80102a6:	4b09      	ldr	r3, [pc, #36]	; (80102cc <__assert_func+0x2c>)
 80102a8:	0005      	movs	r5, r0
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	000e      	movs	r6, r1
 80102ae:	68d8      	ldr	r0, [r3, #12]
 80102b0:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <__assert_func+0x30>)
 80102b2:	2c00      	cmp	r4, #0
 80102b4:	d101      	bne.n	80102ba <__assert_func+0x1a>
 80102b6:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <__assert_func+0x34>)
 80102b8:	001c      	movs	r4, r3
 80102ba:	4907      	ldr	r1, [pc, #28]	; (80102d8 <__assert_func+0x38>)
 80102bc:	9301      	str	r3, [sp, #4]
 80102be:	9402      	str	r4, [sp, #8]
 80102c0:	002b      	movs	r3, r5
 80102c2:	9600      	str	r6, [sp, #0]
 80102c4:	f001 fa20 	bl	8011708 <fiprintf>
 80102c8:	f002 fb08 	bl	80128dc <abort>
 80102cc:	200006d0 	.word	0x200006d0
 80102d0:	08014c18 	.word	0x08014c18
 80102d4:	08014c53 	.word	0x08014c53
 80102d8:	08014c25 	.word	0x08014c25

080102dc <_calloc_r>:
 80102dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102de:	2400      	movs	r4, #0
 80102e0:	0c0b      	lsrs	r3, r1, #16
 80102e2:	0c16      	lsrs	r6, r2, #16
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	d133      	bne.n	8010350 <_calloc_r+0x74>
 80102e8:	42a6      	cmp	r6, r4
 80102ea:	d121      	bne.n	8010330 <_calloc_r+0x54>
 80102ec:	b28b      	uxth	r3, r1
 80102ee:	b291      	uxth	r1, r2
 80102f0:	4359      	muls	r1, r3
 80102f2:	f7fa fc37 	bl	800ab64 <_malloc_r>
 80102f6:	1e05      	subs	r5, r0, #0
 80102f8:	d033      	beq.n	8010362 <_calloc_r+0x86>
 80102fa:	0003      	movs	r3, r0
 80102fc:	3b08      	subs	r3, #8
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	2303      	movs	r3, #3
 8010302:	439a      	bics	r2, r3
 8010304:	3a04      	subs	r2, #4
 8010306:	2a24      	cmp	r2, #36	; 0x24
 8010308:	d832      	bhi.n	8010370 <_calloc_r+0x94>
 801030a:	0003      	movs	r3, r0
 801030c:	2a13      	cmp	r2, #19
 801030e:	d90a      	bls.n	8010326 <_calloc_r+0x4a>
 8010310:	6004      	str	r4, [r0, #0]
 8010312:	6044      	str	r4, [r0, #4]
 8010314:	3308      	adds	r3, #8
 8010316:	2a1b      	cmp	r2, #27
 8010318:	d905      	bls.n	8010326 <_calloc_r+0x4a>
 801031a:	6084      	str	r4, [r0, #8]
 801031c:	60c4      	str	r4, [r0, #12]
 801031e:	2a24      	cmp	r2, #36	; 0x24
 8010320:	d021      	beq.n	8010366 <_calloc_r+0x8a>
 8010322:	0003      	movs	r3, r0
 8010324:	3310      	adds	r3, #16
 8010326:	2200      	movs	r2, #0
 8010328:	601a      	str	r2, [r3, #0]
 801032a:	605a      	str	r2, [r3, #4]
 801032c:	609a      	str	r2, [r3, #8]
 801032e:	e018      	b.n	8010362 <_calloc_r+0x86>
 8010330:	1c33      	adds	r3, r6, #0
 8010332:	1c0d      	adds	r5, r1, #0
 8010334:	b289      	uxth	r1, r1
 8010336:	b292      	uxth	r2, r2
 8010338:	434a      	muls	r2, r1
 801033a:	b2ad      	uxth	r5, r5
 801033c:	b299      	uxth	r1, r3
 801033e:	4369      	muls	r1, r5
 8010340:	0c13      	lsrs	r3, r2, #16
 8010342:	18c9      	adds	r1, r1, r3
 8010344:	0c0b      	lsrs	r3, r1, #16
 8010346:	d107      	bne.n	8010358 <_calloc_r+0x7c>
 8010348:	0409      	lsls	r1, r1, #16
 801034a:	b292      	uxth	r2, r2
 801034c:	4311      	orrs	r1, r2
 801034e:	e7d0      	b.n	80102f2 <_calloc_r+0x16>
 8010350:	2e00      	cmp	r6, #0
 8010352:	d101      	bne.n	8010358 <_calloc_r+0x7c>
 8010354:	1c15      	adds	r5, r2, #0
 8010356:	e7ed      	b.n	8010334 <_calloc_r+0x58>
 8010358:	f7fc f80a 	bl	800c370 <__errno>
 801035c:	230c      	movs	r3, #12
 801035e:	2500      	movs	r5, #0
 8010360:	6003      	str	r3, [r0, #0]
 8010362:	0028      	movs	r0, r5
 8010364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010366:	0003      	movs	r3, r0
 8010368:	6104      	str	r4, [r0, #16]
 801036a:	3318      	adds	r3, #24
 801036c:	6144      	str	r4, [r0, #20]
 801036e:	e7da      	b.n	8010326 <_calloc_r+0x4a>
 8010370:	2100      	movs	r1, #0
 8010372:	f7fb ff09 	bl	800c188 <memset>
 8010376:	e7f4      	b.n	8010362 <_calloc_r+0x86>

08010378 <quorem>:
 8010378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801037a:	6902      	ldr	r2, [r0, #16]
 801037c:	690b      	ldr	r3, [r1, #16]
 801037e:	b089      	sub	sp, #36	; 0x24
 8010380:	0007      	movs	r7, r0
 8010382:	9104      	str	r1, [sp, #16]
 8010384:	2000      	movs	r0, #0
 8010386:	429a      	cmp	r2, r3
 8010388:	db69      	blt.n	801045e <quorem+0xe6>
 801038a:	3b01      	subs	r3, #1
 801038c:	009c      	lsls	r4, r3, #2
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	000b      	movs	r3, r1
 8010392:	3314      	adds	r3, #20
 8010394:	9306      	str	r3, [sp, #24]
 8010396:	191b      	adds	r3, r3, r4
 8010398:	9305      	str	r3, [sp, #20]
 801039a:	003b      	movs	r3, r7
 801039c:	3314      	adds	r3, #20
 801039e:	9303      	str	r3, [sp, #12]
 80103a0:	191c      	adds	r4, r3, r4
 80103a2:	9b05      	ldr	r3, [sp, #20]
 80103a4:	6826      	ldr	r6, [r4, #0]
 80103a6:	681d      	ldr	r5, [r3, #0]
 80103a8:	0030      	movs	r0, r6
 80103aa:	3501      	adds	r5, #1
 80103ac:	0029      	movs	r1, r5
 80103ae:	f7ef fec5 	bl	800013c <__udivsi3>
 80103b2:	9002      	str	r0, [sp, #8]
 80103b4:	42ae      	cmp	r6, r5
 80103b6:	d329      	bcc.n	801040c <quorem+0x94>
 80103b8:	9b06      	ldr	r3, [sp, #24]
 80103ba:	2600      	movs	r6, #0
 80103bc:	469c      	mov	ip, r3
 80103be:	9d03      	ldr	r5, [sp, #12]
 80103c0:	9606      	str	r6, [sp, #24]
 80103c2:	4662      	mov	r2, ip
 80103c4:	ca08      	ldmia	r2!, {r3}
 80103c6:	6828      	ldr	r0, [r5, #0]
 80103c8:	4694      	mov	ip, r2
 80103ca:	9a02      	ldr	r2, [sp, #8]
 80103cc:	b299      	uxth	r1, r3
 80103ce:	4351      	muls	r1, r2
 80103d0:	0c1b      	lsrs	r3, r3, #16
 80103d2:	4353      	muls	r3, r2
 80103d4:	1989      	adds	r1, r1, r6
 80103d6:	0c0a      	lsrs	r2, r1, #16
 80103d8:	189b      	adds	r3, r3, r2
 80103da:	9307      	str	r3, [sp, #28]
 80103dc:	0c1e      	lsrs	r6, r3, #16
 80103de:	9b06      	ldr	r3, [sp, #24]
 80103e0:	b282      	uxth	r2, r0
 80103e2:	18d2      	adds	r2, r2, r3
 80103e4:	466b      	mov	r3, sp
 80103e6:	b289      	uxth	r1, r1
 80103e8:	8b9b      	ldrh	r3, [r3, #28]
 80103ea:	1a52      	subs	r2, r2, r1
 80103ec:	0c01      	lsrs	r1, r0, #16
 80103ee:	1ac9      	subs	r1, r1, r3
 80103f0:	1413      	asrs	r3, r2, #16
 80103f2:	18cb      	adds	r3, r1, r3
 80103f4:	1419      	asrs	r1, r3, #16
 80103f6:	b292      	uxth	r2, r2
 80103f8:	041b      	lsls	r3, r3, #16
 80103fa:	4313      	orrs	r3, r2
 80103fc:	c508      	stmia	r5!, {r3}
 80103fe:	9b05      	ldr	r3, [sp, #20]
 8010400:	9106      	str	r1, [sp, #24]
 8010402:	4563      	cmp	r3, ip
 8010404:	d2dd      	bcs.n	80103c2 <quorem+0x4a>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d030      	beq.n	801046e <quorem+0xf6>
 801040c:	0038      	movs	r0, r7
 801040e:	9904      	ldr	r1, [sp, #16]
 8010410:	f7fc ff04 	bl	800d21c <__mcmp>
 8010414:	2800      	cmp	r0, #0
 8010416:	db21      	blt.n	801045c <quorem+0xe4>
 8010418:	0038      	movs	r0, r7
 801041a:	2600      	movs	r6, #0
 801041c:	9b02      	ldr	r3, [sp, #8]
 801041e:	9c04      	ldr	r4, [sp, #16]
 8010420:	3301      	adds	r3, #1
 8010422:	9302      	str	r3, [sp, #8]
 8010424:	3014      	adds	r0, #20
 8010426:	3414      	adds	r4, #20
 8010428:	6803      	ldr	r3, [r0, #0]
 801042a:	cc02      	ldmia	r4!, {r1}
 801042c:	b29d      	uxth	r5, r3
 801042e:	19ad      	adds	r5, r5, r6
 8010430:	b28a      	uxth	r2, r1
 8010432:	1aaa      	subs	r2, r5, r2
 8010434:	0c09      	lsrs	r1, r1, #16
 8010436:	0c1b      	lsrs	r3, r3, #16
 8010438:	1a5b      	subs	r3, r3, r1
 801043a:	1411      	asrs	r1, r2, #16
 801043c:	185b      	adds	r3, r3, r1
 801043e:	141e      	asrs	r6, r3, #16
 8010440:	b292      	uxth	r2, r2
 8010442:	041b      	lsls	r3, r3, #16
 8010444:	4313      	orrs	r3, r2
 8010446:	c008      	stmia	r0!, {r3}
 8010448:	9b05      	ldr	r3, [sp, #20]
 801044a:	42a3      	cmp	r3, r4
 801044c:	d2ec      	bcs.n	8010428 <quorem+0xb0>
 801044e:	9b01      	ldr	r3, [sp, #4]
 8010450:	9a03      	ldr	r2, [sp, #12]
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	18d3      	adds	r3, r2, r3
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	2a00      	cmp	r2, #0
 801045a:	d015      	beq.n	8010488 <quorem+0x110>
 801045c:	9802      	ldr	r0, [sp, #8]
 801045e:	b009      	add	sp, #36	; 0x24
 8010460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <quorem+0xfe>
 8010468:	9b01      	ldr	r3, [sp, #4]
 801046a:	3b01      	subs	r3, #1
 801046c:	9301      	str	r3, [sp, #4]
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	3c04      	subs	r4, #4
 8010472:	42a3      	cmp	r3, r4
 8010474:	d3f5      	bcc.n	8010462 <quorem+0xea>
 8010476:	9b01      	ldr	r3, [sp, #4]
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	e7c7      	b.n	801040c <quorem+0x94>
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	2a00      	cmp	r2, #0
 8010480:	d106      	bne.n	8010490 <quorem+0x118>
 8010482:	9a01      	ldr	r2, [sp, #4]
 8010484:	3a01      	subs	r2, #1
 8010486:	9201      	str	r2, [sp, #4]
 8010488:	9a03      	ldr	r2, [sp, #12]
 801048a:	3b04      	subs	r3, #4
 801048c:	429a      	cmp	r2, r3
 801048e:	d3f5      	bcc.n	801047c <quorem+0x104>
 8010490:	9b01      	ldr	r3, [sp, #4]
 8010492:	613b      	str	r3, [r7, #16]
 8010494:	e7e2      	b.n	801045c <quorem+0xe4>
	...

08010498 <_dtoa_r>:
 8010498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801049a:	0014      	movs	r4, r2
 801049c:	001d      	movs	r5, r3
 801049e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80104a0:	b09d      	sub	sp, #116	; 0x74
 80104a2:	9408      	str	r4, [sp, #32]
 80104a4:	9509      	str	r5, [sp, #36]	; 0x24
 80104a6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80104a8:	9004      	str	r0, [sp, #16]
 80104aa:	2900      	cmp	r1, #0
 80104ac:	d009      	beq.n	80104c2 <_dtoa_r+0x2a>
 80104ae:	2301      	movs	r3, #1
 80104b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80104b2:	4093      	lsls	r3, r2
 80104b4:	604a      	str	r2, [r1, #4]
 80104b6:	608b      	str	r3, [r1, #8]
 80104b8:	f7fc fc56 	bl	800cd68 <_Bfree>
 80104bc:	2300      	movs	r3, #0
 80104be:	9a04      	ldr	r2, [sp, #16]
 80104c0:	6393      	str	r3, [r2, #56]	; 0x38
 80104c2:	2d00      	cmp	r5, #0
 80104c4:	da1e      	bge.n	8010504 <_dtoa_r+0x6c>
 80104c6:	2301      	movs	r3, #1
 80104c8:	6033      	str	r3, [r6, #0]
 80104ca:	006b      	lsls	r3, r5, #1
 80104cc:	085b      	lsrs	r3, r3, #1
 80104ce:	9309      	str	r3, [sp, #36]	; 0x24
 80104d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80104d2:	4bb5      	ldr	r3, [pc, #724]	; (80107a8 <_dtoa_r+0x310>)
 80104d4:	4ab4      	ldr	r2, [pc, #720]	; (80107a8 <_dtoa_r+0x310>)
 80104d6:	403b      	ands	r3, r7
 80104d8:	4293      	cmp	r3, r2
 80104da:	d116      	bne.n	801050a <_dtoa_r+0x72>
 80104dc:	4bb3      	ldr	r3, [pc, #716]	; (80107ac <_dtoa_r+0x314>)
 80104de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80104e0:	6013      	str	r3, [r2, #0]
 80104e2:	033b      	lsls	r3, r7, #12
 80104e4:	0b1b      	lsrs	r3, r3, #12
 80104e6:	4323      	orrs	r3, r4
 80104e8:	d101      	bne.n	80104ee <_dtoa_r+0x56>
 80104ea:	f000 fdb2 	bl	8011052 <_dtoa_r+0xbba>
 80104ee:	4bb0      	ldr	r3, [pc, #704]	; (80107b0 <_dtoa_r+0x318>)
 80104f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80104f2:	9306      	str	r3, [sp, #24]
 80104f4:	2a00      	cmp	r2, #0
 80104f6:	d002      	beq.n	80104fe <_dtoa_r+0x66>
 80104f8:	4bae      	ldr	r3, [pc, #696]	; (80107b4 <_dtoa_r+0x31c>)
 80104fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80104fc:	6013      	str	r3, [r2, #0]
 80104fe:	9806      	ldr	r0, [sp, #24]
 8010500:	b01d      	add	sp, #116	; 0x74
 8010502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010504:	2300      	movs	r3, #0
 8010506:	6033      	str	r3, [r6, #0]
 8010508:	e7e2      	b.n	80104d0 <_dtoa_r+0x38>
 801050a:	9a08      	ldr	r2, [sp, #32]
 801050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050e:	9210      	str	r2, [sp, #64]	; 0x40
 8010510:	9311      	str	r3, [sp, #68]	; 0x44
 8010512:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010514:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010516:	2200      	movs	r2, #0
 8010518:	2300      	movs	r3, #0
 801051a:	f7ef ff95 	bl	8000448 <__aeabi_dcmpeq>
 801051e:	1e06      	subs	r6, r0, #0
 8010520:	d009      	beq.n	8010536 <_dtoa_r+0x9e>
 8010522:	2301      	movs	r3, #1
 8010524:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010526:	6013      	str	r3, [r2, #0]
 8010528:	4ba3      	ldr	r3, [pc, #652]	; (80107b8 <_dtoa_r+0x320>)
 801052a:	9306      	str	r3, [sp, #24]
 801052c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801052e:	2b00      	cmp	r3, #0
 8010530:	d0e5      	beq.n	80104fe <_dtoa_r+0x66>
 8010532:	4ba2      	ldr	r3, [pc, #648]	; (80107bc <_dtoa_r+0x324>)
 8010534:	e7e1      	b.n	80104fa <_dtoa_r+0x62>
 8010536:	ab1a      	add	r3, sp, #104	; 0x68
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	ab1b      	add	r3, sp, #108	; 0x6c
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	9804      	ldr	r0, [sp, #16]
 8010540:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010544:	f7fc ff86 	bl	800d454 <__d2b>
 8010548:	007a      	lsls	r2, r7, #1
 801054a:	9005      	str	r0, [sp, #20]
 801054c:	0d52      	lsrs	r2, r2, #21
 801054e:	d100      	bne.n	8010552 <_dtoa_r+0xba>
 8010550:	e07b      	b.n	801064a <_dtoa_r+0x1b2>
 8010552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010554:	9617      	str	r6, [sp, #92]	; 0x5c
 8010556:	0319      	lsls	r1, r3, #12
 8010558:	4b99      	ldr	r3, [pc, #612]	; (80107c0 <_dtoa_r+0x328>)
 801055a:	0b09      	lsrs	r1, r1, #12
 801055c:	430b      	orrs	r3, r1
 801055e:	4999      	ldr	r1, [pc, #612]	; (80107c4 <_dtoa_r+0x32c>)
 8010560:	1857      	adds	r7, r2, r1
 8010562:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010564:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010566:	0019      	movs	r1, r3
 8010568:	2200      	movs	r2, #0
 801056a:	4b97      	ldr	r3, [pc, #604]	; (80107c8 <_dtoa_r+0x330>)
 801056c:	f7f1 fb40 	bl	8001bf0 <__aeabi_dsub>
 8010570:	4a96      	ldr	r2, [pc, #600]	; (80107cc <_dtoa_r+0x334>)
 8010572:	4b97      	ldr	r3, [pc, #604]	; (80107d0 <_dtoa_r+0x338>)
 8010574:	f7f1 f87a 	bl	800166c <__aeabi_dmul>
 8010578:	4a96      	ldr	r2, [pc, #600]	; (80107d4 <_dtoa_r+0x33c>)
 801057a:	4b97      	ldr	r3, [pc, #604]	; (80107d8 <_dtoa_r+0x340>)
 801057c:	f7f0 f91c 	bl	80007b8 <__aeabi_dadd>
 8010580:	0004      	movs	r4, r0
 8010582:	0038      	movs	r0, r7
 8010584:	000d      	movs	r5, r1
 8010586:	f7f1 ff09 	bl	800239c <__aeabi_i2d>
 801058a:	4a94      	ldr	r2, [pc, #592]	; (80107dc <_dtoa_r+0x344>)
 801058c:	4b94      	ldr	r3, [pc, #592]	; (80107e0 <_dtoa_r+0x348>)
 801058e:	f7f1 f86d 	bl	800166c <__aeabi_dmul>
 8010592:	0002      	movs	r2, r0
 8010594:	000b      	movs	r3, r1
 8010596:	0020      	movs	r0, r4
 8010598:	0029      	movs	r1, r5
 801059a:	f7f0 f90d 	bl	80007b8 <__aeabi_dadd>
 801059e:	0004      	movs	r4, r0
 80105a0:	000d      	movs	r5, r1
 80105a2:	f7f1 fec5 	bl	8002330 <__aeabi_d2iz>
 80105a6:	2200      	movs	r2, #0
 80105a8:	9003      	str	r0, [sp, #12]
 80105aa:	2300      	movs	r3, #0
 80105ac:	0020      	movs	r0, r4
 80105ae:	0029      	movs	r1, r5
 80105b0:	f7ef ff50 	bl	8000454 <__aeabi_dcmplt>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d00b      	beq.n	80105d0 <_dtoa_r+0x138>
 80105b8:	9803      	ldr	r0, [sp, #12]
 80105ba:	f7f1 feef 	bl	800239c <__aeabi_i2d>
 80105be:	002b      	movs	r3, r5
 80105c0:	0022      	movs	r2, r4
 80105c2:	f7ef ff41 	bl	8000448 <__aeabi_dcmpeq>
 80105c6:	4243      	negs	r3, r0
 80105c8:	4158      	adcs	r0, r3
 80105ca:	9b03      	ldr	r3, [sp, #12]
 80105cc:	1a1b      	subs	r3, r3, r0
 80105ce:	9303      	str	r3, [sp, #12]
 80105d0:	2301      	movs	r3, #1
 80105d2:	9316      	str	r3, [sp, #88]	; 0x58
 80105d4:	9b03      	ldr	r3, [sp, #12]
 80105d6:	2b16      	cmp	r3, #22
 80105d8:	d810      	bhi.n	80105fc <_dtoa_r+0x164>
 80105da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80105dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80105de:	9a03      	ldr	r2, [sp, #12]
 80105e0:	4b80      	ldr	r3, [pc, #512]	; (80107e4 <_dtoa_r+0x34c>)
 80105e2:	00d2      	lsls	r2, r2, #3
 80105e4:	189b      	adds	r3, r3, r2
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	f7ef ff33 	bl	8000454 <__aeabi_dcmplt>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d047      	beq.n	8010682 <_dtoa_r+0x1ea>
 80105f2:	9b03      	ldr	r3, [sp, #12]
 80105f4:	3b01      	subs	r3, #1
 80105f6:	9303      	str	r3, [sp, #12]
 80105f8:	2300      	movs	r3, #0
 80105fa:	9316      	str	r3, [sp, #88]	; 0x58
 80105fc:	2200      	movs	r2, #0
 80105fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010600:	920a      	str	r2, [sp, #40]	; 0x28
 8010602:	1bdb      	subs	r3, r3, r7
 8010604:	1e5a      	subs	r2, r3, #1
 8010606:	d53e      	bpl.n	8010686 <_dtoa_r+0x1ee>
 8010608:	2201      	movs	r2, #1
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	930a      	str	r3, [sp, #40]	; 0x28
 801060e:	2300      	movs	r3, #0
 8010610:	930c      	str	r3, [sp, #48]	; 0x30
 8010612:	9b03      	ldr	r3, [sp, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	db38      	blt.n	801068a <_dtoa_r+0x1f2>
 8010618:	9a03      	ldr	r2, [sp, #12]
 801061a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801061c:	4694      	mov	ip, r2
 801061e:	4463      	add	r3, ip
 8010620:	930c      	str	r3, [sp, #48]	; 0x30
 8010622:	2300      	movs	r3, #0
 8010624:	9213      	str	r2, [sp, #76]	; 0x4c
 8010626:	930d      	str	r3, [sp, #52]	; 0x34
 8010628:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801062a:	2401      	movs	r4, #1
 801062c:	2b09      	cmp	r3, #9
 801062e:	d867      	bhi.n	8010700 <_dtoa_r+0x268>
 8010630:	2b05      	cmp	r3, #5
 8010632:	dd02      	ble.n	801063a <_dtoa_r+0x1a2>
 8010634:	2400      	movs	r4, #0
 8010636:	3b04      	subs	r3, #4
 8010638:	9322      	str	r3, [sp, #136]	; 0x88
 801063a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801063c:	1e98      	subs	r0, r3, #2
 801063e:	2803      	cmp	r0, #3
 8010640:	d867      	bhi.n	8010712 <_dtoa_r+0x27a>
 8010642:	f7ef fd67 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010646:	3a2b      	.short	0x3a2b
 8010648:	5b38      	.short	0x5b38
 801064a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801064c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801064e:	18f6      	adds	r6, r6, r3
 8010650:	4b65      	ldr	r3, [pc, #404]	; (80107e8 <_dtoa_r+0x350>)
 8010652:	18f2      	adds	r2, r6, r3
 8010654:	2a20      	cmp	r2, #32
 8010656:	dd0f      	ble.n	8010678 <_dtoa_r+0x1e0>
 8010658:	2340      	movs	r3, #64	; 0x40
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	409f      	lsls	r7, r3
 801065e:	4b63      	ldr	r3, [pc, #396]	; (80107ec <_dtoa_r+0x354>)
 8010660:	0038      	movs	r0, r7
 8010662:	18f3      	adds	r3, r6, r3
 8010664:	40dc      	lsrs	r4, r3
 8010666:	4320      	orrs	r0, r4
 8010668:	f7f1 fec8 	bl	80023fc <__aeabi_ui2d>
 801066c:	2201      	movs	r2, #1
 801066e:	4b60      	ldr	r3, [pc, #384]	; (80107f0 <_dtoa_r+0x358>)
 8010670:	1e77      	subs	r7, r6, #1
 8010672:	18cb      	adds	r3, r1, r3
 8010674:	9217      	str	r2, [sp, #92]	; 0x5c
 8010676:	e776      	b.n	8010566 <_dtoa_r+0xce>
 8010678:	2320      	movs	r3, #32
 801067a:	0020      	movs	r0, r4
 801067c:	1a9b      	subs	r3, r3, r2
 801067e:	4098      	lsls	r0, r3
 8010680:	e7f2      	b.n	8010668 <_dtoa_r+0x1d0>
 8010682:	9016      	str	r0, [sp, #88]	; 0x58
 8010684:	e7ba      	b.n	80105fc <_dtoa_r+0x164>
 8010686:	920c      	str	r2, [sp, #48]	; 0x30
 8010688:	e7c3      	b.n	8010612 <_dtoa_r+0x17a>
 801068a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801068c:	9a03      	ldr	r2, [sp, #12]
 801068e:	1a9b      	subs	r3, r3, r2
 8010690:	930a      	str	r3, [sp, #40]	; 0x28
 8010692:	4253      	negs	r3, r2
 8010694:	930d      	str	r3, [sp, #52]	; 0x34
 8010696:	2300      	movs	r3, #0
 8010698:	9313      	str	r3, [sp, #76]	; 0x4c
 801069a:	e7c5      	b.n	8010628 <_dtoa_r+0x190>
 801069c:	2300      	movs	r3, #0
 801069e:	930f      	str	r3, [sp, #60]	; 0x3c
 80106a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80106a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80106a4:	9307      	str	r3, [sp, #28]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	dc13      	bgt.n	80106d2 <_dtoa_r+0x23a>
 80106aa:	2301      	movs	r3, #1
 80106ac:	001a      	movs	r2, r3
 80106ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80106b0:	9307      	str	r3, [sp, #28]
 80106b2:	9223      	str	r2, [sp, #140]	; 0x8c
 80106b4:	e00d      	b.n	80106d2 <_dtoa_r+0x23a>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e7f1      	b.n	801069e <_dtoa_r+0x206>
 80106ba:	2300      	movs	r3, #0
 80106bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80106be:	930f      	str	r3, [sp, #60]	; 0x3c
 80106c0:	4694      	mov	ip, r2
 80106c2:	9b03      	ldr	r3, [sp, #12]
 80106c4:	4463      	add	r3, ip
 80106c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80106c8:	3301      	adds	r3, #1
 80106ca:	9307      	str	r3, [sp, #28]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	dc00      	bgt.n	80106d2 <_dtoa_r+0x23a>
 80106d0:	2301      	movs	r3, #1
 80106d2:	2100      	movs	r1, #0
 80106d4:	2204      	movs	r2, #4
 80106d6:	0010      	movs	r0, r2
 80106d8:	3014      	adds	r0, #20
 80106da:	4298      	cmp	r0, r3
 80106dc:	d91d      	bls.n	801071a <_dtoa_r+0x282>
 80106de:	9b04      	ldr	r3, [sp, #16]
 80106e0:	0018      	movs	r0, r3
 80106e2:	63d9      	str	r1, [r3, #60]	; 0x3c
 80106e4:	f7fc fb18 	bl	800cd18 <_Balloc>
 80106e8:	9006      	str	r0, [sp, #24]
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d118      	bne.n	8010720 <_dtoa_r+0x288>
 80106ee:	21b0      	movs	r1, #176	; 0xb0
 80106f0:	4b40      	ldr	r3, [pc, #256]	; (80107f4 <_dtoa_r+0x35c>)
 80106f2:	4841      	ldr	r0, [pc, #260]	; (80107f8 <_dtoa_r+0x360>)
 80106f4:	9a06      	ldr	r2, [sp, #24]
 80106f6:	31ff      	adds	r1, #255	; 0xff
 80106f8:	f7ff fdd2 	bl	80102a0 <__assert_func>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e7dd      	b.n	80106bc <_dtoa_r+0x224>
 8010700:	2300      	movs	r3, #0
 8010702:	940f      	str	r4, [sp, #60]	; 0x3c
 8010704:	9322      	str	r3, [sp, #136]	; 0x88
 8010706:	3b01      	subs	r3, #1
 8010708:	930b      	str	r3, [sp, #44]	; 0x2c
 801070a:	9307      	str	r3, [sp, #28]
 801070c:	2200      	movs	r2, #0
 801070e:	3313      	adds	r3, #19
 8010710:	e7cf      	b.n	80106b2 <_dtoa_r+0x21a>
 8010712:	2301      	movs	r3, #1
 8010714:	930f      	str	r3, [sp, #60]	; 0x3c
 8010716:	3b02      	subs	r3, #2
 8010718:	e7f6      	b.n	8010708 <_dtoa_r+0x270>
 801071a:	3101      	adds	r1, #1
 801071c:	0052      	lsls	r2, r2, #1
 801071e:	e7da      	b.n	80106d6 <_dtoa_r+0x23e>
 8010720:	9b04      	ldr	r3, [sp, #16]
 8010722:	9a06      	ldr	r2, [sp, #24]
 8010724:	639a      	str	r2, [r3, #56]	; 0x38
 8010726:	9b07      	ldr	r3, [sp, #28]
 8010728:	2b0e      	cmp	r3, #14
 801072a:	d900      	bls.n	801072e <_dtoa_r+0x296>
 801072c:	e0e3      	b.n	80108f6 <_dtoa_r+0x45e>
 801072e:	2c00      	cmp	r4, #0
 8010730:	d100      	bne.n	8010734 <_dtoa_r+0x29c>
 8010732:	e0e0      	b.n	80108f6 <_dtoa_r+0x45e>
 8010734:	9b03      	ldr	r3, [sp, #12]
 8010736:	2b00      	cmp	r3, #0
 8010738:	dd62      	ble.n	8010800 <_dtoa_r+0x368>
 801073a:	210f      	movs	r1, #15
 801073c:	9a03      	ldr	r2, [sp, #12]
 801073e:	4b29      	ldr	r3, [pc, #164]	; (80107e4 <_dtoa_r+0x34c>)
 8010740:	400a      	ands	r2, r1
 8010742:	00d2      	lsls	r2, r2, #3
 8010744:	189b      	adds	r3, r3, r2
 8010746:	681e      	ldr	r6, [r3, #0]
 8010748:	685f      	ldr	r7, [r3, #4]
 801074a:	9b03      	ldr	r3, [sp, #12]
 801074c:	2402      	movs	r4, #2
 801074e:	111d      	asrs	r5, r3, #4
 8010750:	05db      	lsls	r3, r3, #23
 8010752:	d50a      	bpl.n	801076a <_dtoa_r+0x2d2>
 8010754:	4b29      	ldr	r3, [pc, #164]	; (80107fc <_dtoa_r+0x364>)
 8010756:	400d      	ands	r5, r1
 8010758:	6a1a      	ldr	r2, [r3, #32]
 801075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801075c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801075e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010760:	f7f0 fb8a 	bl	8000e78 <__aeabi_ddiv>
 8010764:	9008      	str	r0, [sp, #32]
 8010766:	9109      	str	r1, [sp, #36]	; 0x24
 8010768:	3401      	adds	r4, #1
 801076a:	4b24      	ldr	r3, [pc, #144]	; (80107fc <_dtoa_r+0x364>)
 801076c:	930e      	str	r3, [sp, #56]	; 0x38
 801076e:	2d00      	cmp	r5, #0
 8010770:	d108      	bne.n	8010784 <_dtoa_r+0x2ec>
 8010772:	9808      	ldr	r0, [sp, #32]
 8010774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010776:	0032      	movs	r2, r6
 8010778:	003b      	movs	r3, r7
 801077a:	f7f0 fb7d 	bl	8000e78 <__aeabi_ddiv>
 801077e:	9008      	str	r0, [sp, #32]
 8010780:	9109      	str	r1, [sp, #36]	; 0x24
 8010782:	e058      	b.n	8010836 <_dtoa_r+0x39e>
 8010784:	2301      	movs	r3, #1
 8010786:	421d      	tst	r5, r3
 8010788:	d009      	beq.n	801079e <_dtoa_r+0x306>
 801078a:	18e4      	adds	r4, r4, r3
 801078c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801078e:	0030      	movs	r0, r6
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	0039      	movs	r1, r7
 8010796:	f7f0 ff69 	bl	800166c <__aeabi_dmul>
 801079a:	0006      	movs	r6, r0
 801079c:	000f      	movs	r7, r1
 801079e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107a0:	106d      	asrs	r5, r5, #1
 80107a2:	3308      	adds	r3, #8
 80107a4:	e7e2      	b.n	801076c <_dtoa_r+0x2d4>
 80107a6:	46c0      	nop			; (mov r8, r8)
 80107a8:	7ff00000 	.word	0x7ff00000
 80107ac:	0000270f 	.word	0x0000270f
 80107b0:	08014c5d 	.word	0x08014c5d
 80107b4:	08014c60 	.word	0x08014c60
 80107b8:	08014bce 	.word	0x08014bce
 80107bc:	08014bcf 	.word	0x08014bcf
 80107c0:	3ff00000 	.word	0x3ff00000
 80107c4:	fffffc01 	.word	0xfffffc01
 80107c8:	3ff80000 	.word	0x3ff80000
 80107cc:	636f4361 	.word	0x636f4361
 80107d0:	3fd287a7 	.word	0x3fd287a7
 80107d4:	8b60c8b3 	.word	0x8b60c8b3
 80107d8:	3fc68a28 	.word	0x3fc68a28
 80107dc:	509f79fb 	.word	0x509f79fb
 80107e0:	3fd34413 	.word	0x3fd34413
 80107e4:	08014ac8 	.word	0x08014ac8
 80107e8:	00000432 	.word	0x00000432
 80107ec:	00000412 	.word	0x00000412
 80107f0:	fe100000 	.word	0xfe100000
 80107f4:	080149d1 	.word	0x080149d1
 80107f8:	08014c61 	.word	0x08014c61
 80107fc:	08014aa0 	.word	0x08014aa0
 8010800:	9b03      	ldr	r3, [sp, #12]
 8010802:	2402      	movs	r4, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	d016      	beq.n	8010836 <_dtoa_r+0x39e>
 8010808:	9810      	ldr	r0, [sp, #64]	; 0x40
 801080a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801080c:	220f      	movs	r2, #15
 801080e:	425d      	negs	r5, r3
 8010810:	402a      	ands	r2, r5
 8010812:	4bdd      	ldr	r3, [pc, #884]	; (8010b88 <_dtoa_r+0x6f0>)
 8010814:	00d2      	lsls	r2, r2, #3
 8010816:	189b      	adds	r3, r3, r2
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	f7f0 ff26 	bl	800166c <__aeabi_dmul>
 8010820:	2701      	movs	r7, #1
 8010822:	2300      	movs	r3, #0
 8010824:	9008      	str	r0, [sp, #32]
 8010826:	9109      	str	r1, [sp, #36]	; 0x24
 8010828:	4ed8      	ldr	r6, [pc, #864]	; (8010b8c <_dtoa_r+0x6f4>)
 801082a:	112d      	asrs	r5, r5, #4
 801082c:	2d00      	cmp	r5, #0
 801082e:	d000      	beq.n	8010832 <_dtoa_r+0x39a>
 8010830:	e091      	b.n	8010956 <_dtoa_r+0x4be>
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1a3      	bne.n	801077e <_dtoa_r+0x2e6>
 8010836:	9e08      	ldr	r6, [sp, #32]
 8010838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801083a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801083c:	2b00      	cmp	r3, #0
 801083e:	d100      	bne.n	8010842 <_dtoa_r+0x3aa>
 8010840:	e094      	b.n	801096c <_dtoa_r+0x4d4>
 8010842:	2200      	movs	r2, #0
 8010844:	0030      	movs	r0, r6
 8010846:	0039      	movs	r1, r7
 8010848:	4bd1      	ldr	r3, [pc, #836]	; (8010b90 <_dtoa_r+0x6f8>)
 801084a:	f7ef fe03 	bl	8000454 <__aeabi_dcmplt>
 801084e:	2800      	cmp	r0, #0
 8010850:	d100      	bne.n	8010854 <_dtoa_r+0x3bc>
 8010852:	e08b      	b.n	801096c <_dtoa_r+0x4d4>
 8010854:	9b07      	ldr	r3, [sp, #28]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d100      	bne.n	801085c <_dtoa_r+0x3c4>
 801085a:	e087      	b.n	801096c <_dtoa_r+0x4d4>
 801085c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801085e:	2b00      	cmp	r3, #0
 8010860:	dd45      	ble.n	80108ee <_dtoa_r+0x456>
 8010862:	9b03      	ldr	r3, [sp, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	3b01      	subs	r3, #1
 8010868:	930e      	str	r3, [sp, #56]	; 0x38
 801086a:	0030      	movs	r0, r6
 801086c:	4bc9      	ldr	r3, [pc, #804]	; (8010b94 <_dtoa_r+0x6fc>)
 801086e:	0039      	movs	r1, r7
 8010870:	f7f0 fefc 	bl	800166c <__aeabi_dmul>
 8010874:	9008      	str	r0, [sp, #32]
 8010876:	9109      	str	r1, [sp, #36]	; 0x24
 8010878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801087a:	3401      	adds	r4, #1
 801087c:	0020      	movs	r0, r4
 801087e:	9e08      	ldr	r6, [sp, #32]
 8010880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010882:	9312      	str	r3, [sp, #72]	; 0x48
 8010884:	f7f1 fd8a 	bl	800239c <__aeabi_i2d>
 8010888:	0032      	movs	r2, r6
 801088a:	003b      	movs	r3, r7
 801088c:	f7f0 feee 	bl	800166c <__aeabi_dmul>
 8010890:	2200      	movs	r2, #0
 8010892:	4bc1      	ldr	r3, [pc, #772]	; (8010b98 <_dtoa_r+0x700>)
 8010894:	f7ef ff90 	bl	80007b8 <__aeabi_dadd>
 8010898:	4ac0      	ldr	r2, [pc, #768]	; (8010b9c <_dtoa_r+0x704>)
 801089a:	9014      	str	r0, [sp, #80]	; 0x50
 801089c:	9115      	str	r1, [sp, #84]	; 0x54
 801089e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80108a2:	4694      	mov	ip, r2
 80108a4:	9308      	str	r3, [sp, #32]
 80108a6:	9409      	str	r4, [sp, #36]	; 0x24
 80108a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108aa:	4463      	add	r3, ip
 80108ac:	9318      	str	r3, [sp, #96]	; 0x60
 80108ae:	9309      	str	r3, [sp, #36]	; 0x24
 80108b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d15e      	bne.n	8010974 <_dtoa_r+0x4dc>
 80108b6:	2200      	movs	r2, #0
 80108b8:	4bb9      	ldr	r3, [pc, #740]	; (8010ba0 <_dtoa_r+0x708>)
 80108ba:	0030      	movs	r0, r6
 80108bc:	0039      	movs	r1, r7
 80108be:	f7f1 f997 	bl	8001bf0 <__aeabi_dsub>
 80108c2:	9a08      	ldr	r2, [sp, #32]
 80108c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80108c6:	0004      	movs	r4, r0
 80108c8:	000d      	movs	r5, r1
 80108ca:	f7ef fdd7 	bl	800047c <__aeabi_dcmpgt>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d000      	beq.n	80108d4 <_dtoa_r+0x43c>
 80108d2:	e2b3      	b.n	8010e3c <_dtoa_r+0x9a4>
 80108d4:	48b3      	ldr	r0, [pc, #716]	; (8010ba4 <_dtoa_r+0x70c>)
 80108d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80108d8:	4684      	mov	ip, r0
 80108da:	4461      	add	r1, ip
 80108dc:	000b      	movs	r3, r1
 80108de:	0020      	movs	r0, r4
 80108e0:	0029      	movs	r1, r5
 80108e2:	9a08      	ldr	r2, [sp, #32]
 80108e4:	f7ef fdb6 	bl	8000454 <__aeabi_dcmplt>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d000      	beq.n	80108ee <_dtoa_r+0x456>
 80108ec:	e2a3      	b.n	8010e36 <_dtoa_r+0x99e>
 80108ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80108f2:	9308      	str	r3, [sp, #32]
 80108f4:	9409      	str	r4, [sp, #36]	; 0x24
 80108f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	da00      	bge.n	80108fe <_dtoa_r+0x466>
 80108fc:	e179      	b.n	8010bf2 <_dtoa_r+0x75a>
 80108fe:	9a03      	ldr	r2, [sp, #12]
 8010900:	2a0e      	cmp	r2, #14
 8010902:	dd00      	ble.n	8010906 <_dtoa_r+0x46e>
 8010904:	e175      	b.n	8010bf2 <_dtoa_r+0x75a>
 8010906:	4ba0      	ldr	r3, [pc, #640]	; (8010b88 <_dtoa_r+0x6f0>)
 8010908:	00d2      	lsls	r2, r2, #3
 801090a:	189b      	adds	r3, r3, r2
 801090c:	681e      	ldr	r6, [r3, #0]
 801090e:	685f      	ldr	r7, [r3, #4]
 8010910:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010912:	2b00      	cmp	r3, #0
 8010914:	db00      	blt.n	8010918 <_dtoa_r+0x480>
 8010916:	e0e5      	b.n	8010ae4 <_dtoa_r+0x64c>
 8010918:	9b07      	ldr	r3, [sp, #28]
 801091a:	2b00      	cmp	r3, #0
 801091c:	dd00      	ble.n	8010920 <_dtoa_r+0x488>
 801091e:	e0e1      	b.n	8010ae4 <_dtoa_r+0x64c>
 8010920:	d000      	beq.n	8010924 <_dtoa_r+0x48c>
 8010922:	e288      	b.n	8010e36 <_dtoa_r+0x99e>
 8010924:	2200      	movs	r2, #0
 8010926:	0030      	movs	r0, r6
 8010928:	0039      	movs	r1, r7
 801092a:	4b9d      	ldr	r3, [pc, #628]	; (8010ba0 <_dtoa_r+0x708>)
 801092c:	f7f0 fe9e 	bl	800166c <__aeabi_dmul>
 8010930:	9a08      	ldr	r2, [sp, #32]
 8010932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010934:	f7ef fdac 	bl	8000490 <__aeabi_dcmpge>
 8010938:	9e07      	ldr	r6, [sp, #28]
 801093a:	0037      	movs	r7, r6
 801093c:	2800      	cmp	r0, #0
 801093e:	d000      	beq.n	8010942 <_dtoa_r+0x4aa>
 8010940:	e25f      	b.n	8010e02 <_dtoa_r+0x96a>
 8010942:	9b06      	ldr	r3, [sp, #24]
 8010944:	9a06      	ldr	r2, [sp, #24]
 8010946:	3301      	adds	r3, #1
 8010948:	9308      	str	r3, [sp, #32]
 801094a:	2331      	movs	r3, #49	; 0x31
 801094c:	7013      	strb	r3, [r2, #0]
 801094e:	9b03      	ldr	r3, [sp, #12]
 8010950:	3301      	adds	r3, #1
 8010952:	9303      	str	r3, [sp, #12]
 8010954:	e25a      	b.n	8010e0c <_dtoa_r+0x974>
 8010956:	423d      	tst	r5, r7
 8010958:	d005      	beq.n	8010966 <_dtoa_r+0x4ce>
 801095a:	6832      	ldr	r2, [r6, #0]
 801095c:	6873      	ldr	r3, [r6, #4]
 801095e:	f7f0 fe85 	bl	800166c <__aeabi_dmul>
 8010962:	003b      	movs	r3, r7
 8010964:	3401      	adds	r4, #1
 8010966:	106d      	asrs	r5, r5, #1
 8010968:	3608      	adds	r6, #8
 801096a:	e75f      	b.n	801082c <_dtoa_r+0x394>
 801096c:	9b03      	ldr	r3, [sp, #12]
 801096e:	930e      	str	r3, [sp, #56]	; 0x38
 8010970:	9b07      	ldr	r3, [sp, #28]
 8010972:	e783      	b.n	801087c <_dtoa_r+0x3e4>
 8010974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010976:	4b84      	ldr	r3, [pc, #528]	; (8010b88 <_dtoa_r+0x6f0>)
 8010978:	3a01      	subs	r2, #1
 801097a:	00d2      	lsls	r2, r2, #3
 801097c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801097e:	189b      	adds	r3, r3, r2
 8010980:	9c08      	ldr	r4, [sp, #32]
 8010982:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	2900      	cmp	r1, #0
 801098a:	d051      	beq.n	8010a30 <_dtoa_r+0x598>
 801098c:	2000      	movs	r0, #0
 801098e:	4986      	ldr	r1, [pc, #536]	; (8010ba8 <_dtoa_r+0x710>)
 8010990:	f7f0 fa72 	bl	8000e78 <__aeabi_ddiv>
 8010994:	0022      	movs	r2, r4
 8010996:	002b      	movs	r3, r5
 8010998:	f7f1 f92a 	bl	8001bf0 <__aeabi_dsub>
 801099c:	9a06      	ldr	r2, [sp, #24]
 801099e:	0004      	movs	r4, r0
 80109a0:	4694      	mov	ip, r2
 80109a2:	000d      	movs	r5, r1
 80109a4:	9b06      	ldr	r3, [sp, #24]
 80109a6:	9314      	str	r3, [sp, #80]	; 0x50
 80109a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109aa:	4463      	add	r3, ip
 80109ac:	9318      	str	r3, [sp, #96]	; 0x60
 80109ae:	0039      	movs	r1, r7
 80109b0:	0030      	movs	r0, r6
 80109b2:	f7f1 fcbd 	bl	8002330 <__aeabi_d2iz>
 80109b6:	9012      	str	r0, [sp, #72]	; 0x48
 80109b8:	f7f1 fcf0 	bl	800239c <__aeabi_i2d>
 80109bc:	0002      	movs	r2, r0
 80109be:	000b      	movs	r3, r1
 80109c0:	0030      	movs	r0, r6
 80109c2:	0039      	movs	r1, r7
 80109c4:	f7f1 f914 	bl	8001bf0 <__aeabi_dsub>
 80109c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80109cc:	3301      	adds	r3, #1
 80109ce:	9308      	str	r3, [sp, #32]
 80109d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109d2:	0006      	movs	r6, r0
 80109d4:	3330      	adds	r3, #48	; 0x30
 80109d6:	7013      	strb	r3, [r2, #0]
 80109d8:	0022      	movs	r2, r4
 80109da:	002b      	movs	r3, r5
 80109dc:	000f      	movs	r7, r1
 80109de:	f7ef fd39 	bl	8000454 <__aeabi_dcmplt>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d174      	bne.n	8010ad0 <_dtoa_r+0x638>
 80109e6:	0032      	movs	r2, r6
 80109e8:	003b      	movs	r3, r7
 80109ea:	2000      	movs	r0, #0
 80109ec:	4968      	ldr	r1, [pc, #416]	; (8010b90 <_dtoa_r+0x6f8>)
 80109ee:	f7f1 f8ff 	bl	8001bf0 <__aeabi_dsub>
 80109f2:	0022      	movs	r2, r4
 80109f4:	002b      	movs	r3, r5
 80109f6:	f7ef fd2d 	bl	8000454 <__aeabi_dcmplt>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d000      	beq.n	8010a00 <_dtoa_r+0x568>
 80109fe:	e0d7      	b.n	8010bb0 <_dtoa_r+0x718>
 8010a00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a02:	9a08      	ldr	r2, [sp, #32]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d100      	bne.n	8010a0a <_dtoa_r+0x572>
 8010a08:	e771      	b.n	80108ee <_dtoa_r+0x456>
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	0020      	movs	r0, r4
 8010a0e:	0029      	movs	r1, r5
 8010a10:	4b60      	ldr	r3, [pc, #384]	; (8010b94 <_dtoa_r+0x6fc>)
 8010a12:	f7f0 fe2b 	bl	800166c <__aeabi_dmul>
 8010a16:	4b5f      	ldr	r3, [pc, #380]	; (8010b94 <_dtoa_r+0x6fc>)
 8010a18:	0004      	movs	r4, r0
 8010a1a:	000d      	movs	r5, r1
 8010a1c:	0030      	movs	r0, r6
 8010a1e:	0039      	movs	r1, r7
 8010a20:	2200      	movs	r2, #0
 8010a22:	f7f0 fe23 	bl	800166c <__aeabi_dmul>
 8010a26:	9b08      	ldr	r3, [sp, #32]
 8010a28:	0006      	movs	r6, r0
 8010a2a:	000f      	movs	r7, r1
 8010a2c:	9314      	str	r3, [sp, #80]	; 0x50
 8010a2e:	e7be      	b.n	80109ae <_dtoa_r+0x516>
 8010a30:	0020      	movs	r0, r4
 8010a32:	0029      	movs	r1, r5
 8010a34:	f7f0 fe1a 	bl	800166c <__aeabi_dmul>
 8010a38:	9a06      	ldr	r2, [sp, #24]
 8010a3a:	9b06      	ldr	r3, [sp, #24]
 8010a3c:	4694      	mov	ip, r2
 8010a3e:	9308      	str	r3, [sp, #32]
 8010a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a42:	9014      	str	r0, [sp, #80]	; 0x50
 8010a44:	9115      	str	r1, [sp, #84]	; 0x54
 8010a46:	4463      	add	r3, ip
 8010a48:	9319      	str	r3, [sp, #100]	; 0x64
 8010a4a:	0030      	movs	r0, r6
 8010a4c:	0039      	movs	r1, r7
 8010a4e:	f7f1 fc6f 	bl	8002330 <__aeabi_d2iz>
 8010a52:	9018      	str	r0, [sp, #96]	; 0x60
 8010a54:	f7f1 fca2 	bl	800239c <__aeabi_i2d>
 8010a58:	0002      	movs	r2, r0
 8010a5a:	000b      	movs	r3, r1
 8010a5c:	0030      	movs	r0, r6
 8010a5e:	0039      	movs	r1, r7
 8010a60:	f7f1 f8c6 	bl	8001bf0 <__aeabi_dsub>
 8010a64:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010a66:	9b08      	ldr	r3, [sp, #32]
 8010a68:	3630      	adds	r6, #48	; 0x30
 8010a6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a6c:	701e      	strb	r6, [r3, #0]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	0004      	movs	r4, r0
 8010a72:	000d      	movs	r5, r1
 8010a74:	9308      	str	r3, [sp, #32]
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d12d      	bne.n	8010ad6 <_dtoa_r+0x63e>
 8010a7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010a7c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a7e:	9a06      	ldr	r2, [sp, #24]
 8010a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a82:	4694      	mov	ip, r2
 8010a84:	4463      	add	r3, ip
 8010a86:	2200      	movs	r2, #0
 8010a88:	9308      	str	r3, [sp, #32]
 8010a8a:	4b47      	ldr	r3, [pc, #284]	; (8010ba8 <_dtoa_r+0x710>)
 8010a8c:	f7ef fe94 	bl	80007b8 <__aeabi_dadd>
 8010a90:	0002      	movs	r2, r0
 8010a92:	000b      	movs	r3, r1
 8010a94:	0020      	movs	r0, r4
 8010a96:	0029      	movs	r1, r5
 8010a98:	f7ef fcf0 	bl	800047c <__aeabi_dcmpgt>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d000      	beq.n	8010aa2 <_dtoa_r+0x60a>
 8010aa0:	e086      	b.n	8010bb0 <_dtoa_r+0x718>
 8010aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	493f      	ldr	r1, [pc, #252]	; (8010ba8 <_dtoa_r+0x710>)
 8010aaa:	f7f1 f8a1 	bl	8001bf0 <__aeabi_dsub>
 8010aae:	0002      	movs	r2, r0
 8010ab0:	000b      	movs	r3, r1
 8010ab2:	0020      	movs	r0, r4
 8010ab4:	0029      	movs	r1, r5
 8010ab6:	f7ef fccd 	bl	8000454 <__aeabi_dcmplt>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d100      	bne.n	8010ac0 <_dtoa_r+0x628>
 8010abe:	e716      	b.n	80108ee <_dtoa_r+0x456>
 8010ac0:	9b08      	ldr	r3, [sp, #32]
 8010ac2:	001a      	movs	r2, r3
 8010ac4:	3a01      	subs	r2, #1
 8010ac6:	9208      	str	r2, [sp, #32]
 8010ac8:	7812      	ldrb	r2, [r2, #0]
 8010aca:	2a30      	cmp	r2, #48	; 0x30
 8010acc:	d0f8      	beq.n	8010ac0 <_dtoa_r+0x628>
 8010ace:	9308      	str	r3, [sp, #32]
 8010ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ad2:	9303      	str	r3, [sp, #12]
 8010ad4:	e046      	b.n	8010b64 <_dtoa_r+0x6cc>
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	4b2e      	ldr	r3, [pc, #184]	; (8010b94 <_dtoa_r+0x6fc>)
 8010ada:	f7f0 fdc7 	bl	800166c <__aeabi_dmul>
 8010ade:	0006      	movs	r6, r0
 8010ae0:	000f      	movs	r7, r1
 8010ae2:	e7b2      	b.n	8010a4a <_dtoa_r+0x5b2>
 8010ae4:	9b06      	ldr	r3, [sp, #24]
 8010ae6:	9a06      	ldr	r2, [sp, #24]
 8010ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8010aea:	9b07      	ldr	r3, [sp, #28]
 8010aec:	9c08      	ldr	r4, [sp, #32]
 8010aee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010af0:	3b01      	subs	r3, #1
 8010af2:	189b      	adds	r3, r3, r2
 8010af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010af6:	0032      	movs	r2, r6
 8010af8:	003b      	movs	r3, r7
 8010afa:	0020      	movs	r0, r4
 8010afc:	0029      	movs	r1, r5
 8010afe:	f7f0 f9bb 	bl	8000e78 <__aeabi_ddiv>
 8010b02:	f7f1 fc15 	bl	8002330 <__aeabi_d2iz>
 8010b06:	9007      	str	r0, [sp, #28]
 8010b08:	f7f1 fc48 	bl	800239c <__aeabi_i2d>
 8010b0c:	0032      	movs	r2, r6
 8010b0e:	003b      	movs	r3, r7
 8010b10:	f7f0 fdac 	bl	800166c <__aeabi_dmul>
 8010b14:	0002      	movs	r2, r0
 8010b16:	000b      	movs	r3, r1
 8010b18:	0020      	movs	r0, r4
 8010b1a:	0029      	movs	r1, r5
 8010b1c:	f7f1 f868 	bl	8001bf0 <__aeabi_dsub>
 8010b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b22:	001a      	movs	r2, r3
 8010b24:	3201      	adds	r2, #1
 8010b26:	920a      	str	r2, [sp, #40]	; 0x28
 8010b28:	9208      	str	r2, [sp, #32]
 8010b2a:	9a07      	ldr	r2, [sp, #28]
 8010b2c:	3230      	adds	r2, #48	; 0x30
 8010b2e:	701a      	strb	r2, [r3, #0]
 8010b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d14f      	bne.n	8010bd6 <_dtoa_r+0x73e>
 8010b36:	0002      	movs	r2, r0
 8010b38:	000b      	movs	r3, r1
 8010b3a:	f7ef fe3d 	bl	80007b8 <__aeabi_dadd>
 8010b3e:	0032      	movs	r2, r6
 8010b40:	003b      	movs	r3, r7
 8010b42:	0004      	movs	r4, r0
 8010b44:	000d      	movs	r5, r1
 8010b46:	f7ef fc99 	bl	800047c <__aeabi_dcmpgt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d12e      	bne.n	8010bac <_dtoa_r+0x714>
 8010b4e:	0032      	movs	r2, r6
 8010b50:	003b      	movs	r3, r7
 8010b52:	0020      	movs	r0, r4
 8010b54:	0029      	movs	r1, r5
 8010b56:	f7ef fc77 	bl	8000448 <__aeabi_dcmpeq>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d002      	beq.n	8010b64 <_dtoa_r+0x6cc>
 8010b5e:	9b07      	ldr	r3, [sp, #28]
 8010b60:	07de      	lsls	r6, r3, #31
 8010b62:	d423      	bmi.n	8010bac <_dtoa_r+0x714>
 8010b64:	9905      	ldr	r1, [sp, #20]
 8010b66:	9804      	ldr	r0, [sp, #16]
 8010b68:	f7fc f8fe 	bl	800cd68 <_Bfree>
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	9a08      	ldr	r2, [sp, #32]
 8010b70:	7013      	strb	r3, [r2, #0]
 8010b72:	9b03      	ldr	r3, [sp, #12]
 8010b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b76:	3301      	adds	r3, #1
 8010b78:	6013      	str	r3, [r2, #0]
 8010b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d100      	bne.n	8010b82 <_dtoa_r+0x6ea>
 8010b80:	e4bd      	b.n	80104fe <_dtoa_r+0x66>
 8010b82:	9a08      	ldr	r2, [sp, #32]
 8010b84:	601a      	str	r2, [r3, #0]
 8010b86:	e4ba      	b.n	80104fe <_dtoa_r+0x66>
 8010b88:	08014ac8 	.word	0x08014ac8
 8010b8c:	08014aa0 	.word	0x08014aa0
 8010b90:	3ff00000 	.word	0x3ff00000
 8010b94:	40240000 	.word	0x40240000
 8010b98:	401c0000 	.word	0x401c0000
 8010b9c:	fcc00000 	.word	0xfcc00000
 8010ba0:	40140000 	.word	0x40140000
 8010ba4:	7cc00000 	.word	0x7cc00000
 8010ba8:	3fe00000 	.word	0x3fe00000
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	930e      	str	r3, [sp, #56]	; 0x38
 8010bb0:	9b08      	ldr	r3, [sp, #32]
 8010bb2:	9308      	str	r3, [sp, #32]
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	781a      	ldrb	r2, [r3, #0]
 8010bb8:	2a39      	cmp	r2, #57	; 0x39
 8010bba:	d108      	bne.n	8010bce <_dtoa_r+0x736>
 8010bbc:	9a06      	ldr	r2, [sp, #24]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d1f7      	bne.n	8010bb2 <_dtoa_r+0x71a>
 8010bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010bc4:	9906      	ldr	r1, [sp, #24]
 8010bc6:	3201      	adds	r2, #1
 8010bc8:	920e      	str	r2, [sp, #56]	; 0x38
 8010bca:	2230      	movs	r2, #48	; 0x30
 8010bcc:	700a      	strb	r2, [r1, #0]
 8010bce:	781a      	ldrb	r2, [r3, #0]
 8010bd0:	3201      	adds	r2, #1
 8010bd2:	701a      	strb	r2, [r3, #0]
 8010bd4:	e77c      	b.n	8010ad0 <_dtoa_r+0x638>
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	4ba9      	ldr	r3, [pc, #676]	; (8010e80 <_dtoa_r+0x9e8>)
 8010bda:	f7f0 fd47 	bl	800166c <__aeabi_dmul>
 8010bde:	2200      	movs	r2, #0
 8010be0:	2300      	movs	r3, #0
 8010be2:	0004      	movs	r4, r0
 8010be4:	000d      	movs	r5, r1
 8010be6:	f7ef fc2f 	bl	8000448 <__aeabi_dcmpeq>
 8010bea:	2800      	cmp	r0, #0
 8010bec:	d100      	bne.n	8010bf0 <_dtoa_r+0x758>
 8010bee:	e782      	b.n	8010af6 <_dtoa_r+0x65e>
 8010bf0:	e7b8      	b.n	8010b64 <_dtoa_r+0x6cc>
 8010bf2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010bf4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010bf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010bf8:	2f00      	cmp	r7, #0
 8010bfa:	d012      	beq.n	8010c22 <_dtoa_r+0x78a>
 8010bfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010bfe:	2a01      	cmp	r2, #1
 8010c00:	dc6e      	bgt.n	8010ce0 <_dtoa_r+0x848>
 8010c02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	d065      	beq.n	8010cd4 <_dtoa_r+0x83c>
 8010c08:	4a9e      	ldr	r2, [pc, #632]	; (8010e84 <_dtoa_r+0x9ec>)
 8010c0a:	189b      	adds	r3, r3, r2
 8010c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c0e:	2101      	movs	r1, #1
 8010c10:	18d2      	adds	r2, r2, r3
 8010c12:	920a      	str	r2, [sp, #40]	; 0x28
 8010c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c16:	9804      	ldr	r0, [sp, #16]
 8010c18:	18d3      	adds	r3, r2, r3
 8010c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8010c1c:	f7fc f986 	bl	800cf2c <__i2b>
 8010c20:	0007      	movs	r7, r0
 8010c22:	2c00      	cmp	r4, #0
 8010c24:	d00e      	beq.n	8010c44 <_dtoa_r+0x7ac>
 8010c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dd0b      	ble.n	8010c44 <_dtoa_r+0x7ac>
 8010c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c2e:	0023      	movs	r3, r4
 8010c30:	4294      	cmp	r4, r2
 8010c32:	dd00      	ble.n	8010c36 <_dtoa_r+0x79e>
 8010c34:	0013      	movs	r3, r2
 8010c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c38:	1ae4      	subs	r4, r4, r3
 8010c3a:	1ad2      	subs	r2, r2, r3
 8010c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c40:	1ad3      	subs	r3, r2, r3
 8010c42:	930c      	str	r3, [sp, #48]	; 0x30
 8010c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d01e      	beq.n	8010c88 <_dtoa_r+0x7f0>
 8010c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d05c      	beq.n	8010d0a <_dtoa_r+0x872>
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	dd10      	ble.n	8010c76 <_dtoa_r+0x7de>
 8010c54:	0039      	movs	r1, r7
 8010c56:	002a      	movs	r2, r5
 8010c58:	9804      	ldr	r0, [sp, #16]
 8010c5a:	f7fc fa2f 	bl	800d0bc <__pow5mult>
 8010c5e:	9a05      	ldr	r2, [sp, #20]
 8010c60:	0001      	movs	r1, r0
 8010c62:	0007      	movs	r7, r0
 8010c64:	9804      	ldr	r0, [sp, #16]
 8010c66:	f7fc f979 	bl	800cf5c <__multiply>
 8010c6a:	0006      	movs	r6, r0
 8010c6c:	9905      	ldr	r1, [sp, #20]
 8010c6e:	9804      	ldr	r0, [sp, #16]
 8010c70:	f7fc f87a 	bl	800cd68 <_Bfree>
 8010c74:	9605      	str	r6, [sp, #20]
 8010c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c78:	1b5a      	subs	r2, r3, r5
 8010c7a:	42ab      	cmp	r3, r5
 8010c7c:	d004      	beq.n	8010c88 <_dtoa_r+0x7f0>
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	9804      	ldr	r0, [sp, #16]
 8010c82:	f7fc fa1b 	bl	800d0bc <__pow5mult>
 8010c86:	9005      	str	r0, [sp, #20]
 8010c88:	2101      	movs	r1, #1
 8010c8a:	9804      	ldr	r0, [sp, #16]
 8010c8c:	f7fc f94e 	bl	800cf2c <__i2b>
 8010c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c92:	0006      	movs	r6, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	dd3a      	ble.n	8010d0e <_dtoa_r+0x876>
 8010c98:	001a      	movs	r2, r3
 8010c9a:	0001      	movs	r1, r0
 8010c9c:	9804      	ldr	r0, [sp, #16]
 8010c9e:	f7fc fa0d 	bl	800d0bc <__pow5mult>
 8010ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ca4:	0006      	movs	r6, r0
 8010ca6:	2500      	movs	r5, #0
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	dc38      	bgt.n	8010d1e <_dtoa_r+0x886>
 8010cac:	2500      	movs	r5, #0
 8010cae:	9b08      	ldr	r3, [sp, #32]
 8010cb0:	42ab      	cmp	r3, r5
 8010cb2:	d130      	bne.n	8010d16 <_dtoa_r+0x87e>
 8010cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cb6:	031b      	lsls	r3, r3, #12
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	d12c      	bne.n	8010d16 <_dtoa_r+0x87e>
 8010cbc:	4b72      	ldr	r3, [pc, #456]	; (8010e88 <_dtoa_r+0x9f0>)
 8010cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cc0:	4213      	tst	r3, r2
 8010cc2:	d028      	beq.n	8010d16 <_dtoa_r+0x87e>
 8010cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc6:	3501      	adds	r5, #1
 8010cc8:	3301      	adds	r3, #1
 8010cca:	930a      	str	r3, [sp, #40]	; 0x28
 8010ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cce:	3301      	adds	r3, #1
 8010cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8010cd2:	e020      	b.n	8010d16 <_dtoa_r+0x87e>
 8010cd4:	2336      	movs	r3, #54	; 0x36
 8010cd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010cd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010cda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cdc:	1a9b      	subs	r3, r3, r2
 8010cde:	e795      	b.n	8010c0c <_dtoa_r+0x774>
 8010ce0:	9b07      	ldr	r3, [sp, #28]
 8010ce2:	1e5d      	subs	r5, r3, #1
 8010ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ce6:	42ab      	cmp	r3, r5
 8010ce8:	db07      	blt.n	8010cfa <_dtoa_r+0x862>
 8010cea:	1b5d      	subs	r5, r3, r5
 8010cec:	9b07      	ldr	r3, [sp, #28]
 8010cee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da8b      	bge.n	8010c0c <_dtoa_r+0x774>
 8010cf4:	1ae4      	subs	r4, r4, r3
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e788      	b.n	8010c0c <_dtoa_r+0x774>
 8010cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cfe:	1aeb      	subs	r3, r5, r3
 8010d00:	18d3      	adds	r3, r2, r3
 8010d02:	950d      	str	r5, [sp, #52]	; 0x34
 8010d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d06:	2500      	movs	r5, #0
 8010d08:	e7f0      	b.n	8010cec <_dtoa_r+0x854>
 8010d0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d0c:	e7b7      	b.n	8010c7e <_dtoa_r+0x7e6>
 8010d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d10:	2500      	movs	r5, #0
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	ddca      	ble.n	8010cac <_dtoa_r+0x814>
 8010d16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d18:	2001      	movs	r0, #1
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d008      	beq.n	8010d30 <_dtoa_r+0x898>
 8010d1e:	6933      	ldr	r3, [r6, #16]
 8010d20:	3303      	adds	r3, #3
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	18f3      	adds	r3, r6, r3
 8010d26:	6858      	ldr	r0, [r3, #4]
 8010d28:	f7fc f8b8 	bl	800ce9c <__hi0bits>
 8010d2c:	2320      	movs	r3, #32
 8010d2e:	1a18      	subs	r0, r3, r0
 8010d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d32:	1818      	adds	r0, r3, r0
 8010d34:	0002      	movs	r2, r0
 8010d36:	231f      	movs	r3, #31
 8010d38:	401a      	ands	r2, r3
 8010d3a:	4218      	tst	r0, r3
 8010d3c:	d047      	beq.n	8010dce <_dtoa_r+0x936>
 8010d3e:	3301      	adds	r3, #1
 8010d40:	1a9b      	subs	r3, r3, r2
 8010d42:	2b04      	cmp	r3, #4
 8010d44:	dd3f      	ble.n	8010dc6 <_dtoa_r+0x92e>
 8010d46:	231c      	movs	r3, #28
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d4c:	18e4      	adds	r4, r4, r3
 8010d4e:	18d2      	adds	r2, r2, r3
 8010d50:	920a      	str	r2, [sp, #40]	; 0x28
 8010d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d54:	18d3      	adds	r3, r2, r3
 8010d56:	930c      	str	r3, [sp, #48]	; 0x30
 8010d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	dd05      	ble.n	8010d6a <_dtoa_r+0x8d2>
 8010d5e:	001a      	movs	r2, r3
 8010d60:	9905      	ldr	r1, [sp, #20]
 8010d62:	9804      	ldr	r0, [sp, #16]
 8010d64:	f7fc f9ec 	bl	800d140 <__lshift>
 8010d68:	9005      	str	r0, [sp, #20]
 8010d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	dd05      	ble.n	8010d7c <_dtoa_r+0x8e4>
 8010d70:	0031      	movs	r1, r6
 8010d72:	001a      	movs	r2, r3
 8010d74:	9804      	ldr	r0, [sp, #16]
 8010d76:	f7fc f9e3 	bl	800d140 <__lshift>
 8010d7a:	0006      	movs	r6, r0
 8010d7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d027      	beq.n	8010dd2 <_dtoa_r+0x93a>
 8010d82:	0031      	movs	r1, r6
 8010d84:	9805      	ldr	r0, [sp, #20]
 8010d86:	f7fc fa49 	bl	800d21c <__mcmp>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	da21      	bge.n	8010dd2 <_dtoa_r+0x93a>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	220a      	movs	r2, #10
 8010d92:	3b01      	subs	r3, #1
 8010d94:	9303      	str	r3, [sp, #12]
 8010d96:	9905      	ldr	r1, [sp, #20]
 8010d98:	2300      	movs	r3, #0
 8010d9a:	9804      	ldr	r0, [sp, #16]
 8010d9c:	f7fb ffee 	bl	800cd7c <__multadd>
 8010da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010da2:	9005      	str	r0, [sp, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d100      	bne.n	8010daa <_dtoa_r+0x912>
 8010da8:	e15d      	b.n	8011066 <_dtoa_r+0xbce>
 8010daa:	2300      	movs	r3, #0
 8010dac:	0039      	movs	r1, r7
 8010dae:	220a      	movs	r2, #10
 8010db0:	9804      	ldr	r0, [sp, #16]
 8010db2:	f7fb ffe3 	bl	800cd7c <__multadd>
 8010db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010db8:	0007      	movs	r7, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	dc49      	bgt.n	8010e52 <_dtoa_r+0x9ba>
 8010dbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	dc0e      	bgt.n	8010de2 <_dtoa_r+0x94a>
 8010dc4:	e045      	b.n	8010e52 <_dtoa_r+0x9ba>
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d0c6      	beq.n	8010d58 <_dtoa_r+0x8c0>
 8010dca:	331c      	adds	r3, #28
 8010dcc:	e7bd      	b.n	8010d4a <_dtoa_r+0x8b2>
 8010dce:	0013      	movs	r3, r2
 8010dd0:	e7fb      	b.n	8010dca <_dtoa_r+0x932>
 8010dd2:	9b07      	ldr	r3, [sp, #28]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	dc36      	bgt.n	8010e46 <_dtoa_r+0x9ae>
 8010dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010dda:	2b02      	cmp	r3, #2
 8010ddc:	dd33      	ble.n	8010e46 <_dtoa_r+0x9ae>
 8010dde:	9b07      	ldr	r3, [sp, #28]
 8010de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10c      	bne.n	8010e02 <_dtoa_r+0x96a>
 8010de8:	0031      	movs	r1, r6
 8010dea:	2205      	movs	r2, #5
 8010dec:	9804      	ldr	r0, [sp, #16]
 8010dee:	f7fb ffc5 	bl	800cd7c <__multadd>
 8010df2:	0006      	movs	r6, r0
 8010df4:	0001      	movs	r1, r0
 8010df6:	9805      	ldr	r0, [sp, #20]
 8010df8:	f7fc fa10 	bl	800d21c <__mcmp>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	dd00      	ble.n	8010e02 <_dtoa_r+0x96a>
 8010e00:	e59f      	b.n	8010942 <_dtoa_r+0x4aa>
 8010e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010e04:	43db      	mvns	r3, r3
 8010e06:	9303      	str	r3, [sp, #12]
 8010e08:	9b06      	ldr	r3, [sp, #24]
 8010e0a:	9308      	str	r3, [sp, #32]
 8010e0c:	2500      	movs	r5, #0
 8010e0e:	0031      	movs	r1, r6
 8010e10:	9804      	ldr	r0, [sp, #16]
 8010e12:	f7fb ffa9 	bl	800cd68 <_Bfree>
 8010e16:	2f00      	cmp	r7, #0
 8010e18:	d100      	bne.n	8010e1c <_dtoa_r+0x984>
 8010e1a:	e6a3      	b.n	8010b64 <_dtoa_r+0x6cc>
 8010e1c:	2d00      	cmp	r5, #0
 8010e1e:	d005      	beq.n	8010e2c <_dtoa_r+0x994>
 8010e20:	42bd      	cmp	r5, r7
 8010e22:	d003      	beq.n	8010e2c <_dtoa_r+0x994>
 8010e24:	0029      	movs	r1, r5
 8010e26:	9804      	ldr	r0, [sp, #16]
 8010e28:	f7fb ff9e 	bl	800cd68 <_Bfree>
 8010e2c:	0039      	movs	r1, r7
 8010e2e:	9804      	ldr	r0, [sp, #16]
 8010e30:	f7fb ff9a 	bl	800cd68 <_Bfree>
 8010e34:	e696      	b.n	8010b64 <_dtoa_r+0x6cc>
 8010e36:	2600      	movs	r6, #0
 8010e38:	0037      	movs	r7, r6
 8010e3a:	e7e2      	b.n	8010e02 <_dtoa_r+0x96a>
 8010e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010e40:	9303      	str	r3, [sp, #12]
 8010e42:	0037      	movs	r7, r6
 8010e44:	e57d      	b.n	8010942 <_dtoa_r+0x4aa>
 8010e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d100      	bne.n	8010e4e <_dtoa_r+0x9b6>
 8010e4c:	e0c3      	b.n	8010fd6 <_dtoa_r+0xb3e>
 8010e4e:	9b07      	ldr	r3, [sp, #28]
 8010e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e52:	2c00      	cmp	r4, #0
 8010e54:	dd05      	ble.n	8010e62 <_dtoa_r+0x9ca>
 8010e56:	0039      	movs	r1, r7
 8010e58:	0022      	movs	r2, r4
 8010e5a:	9804      	ldr	r0, [sp, #16]
 8010e5c:	f7fc f970 	bl	800d140 <__lshift>
 8010e60:	0007      	movs	r7, r0
 8010e62:	0038      	movs	r0, r7
 8010e64:	2d00      	cmp	r5, #0
 8010e66:	d024      	beq.n	8010eb2 <_dtoa_r+0xa1a>
 8010e68:	6879      	ldr	r1, [r7, #4]
 8010e6a:	9804      	ldr	r0, [sp, #16]
 8010e6c:	f7fb ff54 	bl	800cd18 <_Balloc>
 8010e70:	1e04      	subs	r4, r0, #0
 8010e72:	d111      	bne.n	8010e98 <_dtoa_r+0xa00>
 8010e74:	0022      	movs	r2, r4
 8010e76:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <_dtoa_r+0x9f4>)
 8010e78:	4805      	ldr	r0, [pc, #20]	; (8010e90 <_dtoa_r+0x9f8>)
 8010e7a:	4906      	ldr	r1, [pc, #24]	; (8010e94 <_dtoa_r+0x9fc>)
 8010e7c:	e43c      	b.n	80106f8 <_dtoa_r+0x260>
 8010e7e:	46c0      	nop			; (mov r8, r8)
 8010e80:	40240000 	.word	0x40240000
 8010e84:	00000433 	.word	0x00000433
 8010e88:	7ff00000 	.word	0x7ff00000
 8010e8c:	080149d1 	.word	0x080149d1
 8010e90:	08014c61 	.word	0x08014c61
 8010e94:	000002ef 	.word	0x000002ef
 8010e98:	0039      	movs	r1, r7
 8010e9a:	693a      	ldr	r2, [r7, #16]
 8010e9c:	310c      	adds	r1, #12
 8010e9e:	3202      	adds	r2, #2
 8010ea0:	0092      	lsls	r2, r2, #2
 8010ea2:	300c      	adds	r0, #12
 8010ea4:	f7fb fa9d 	bl	800c3e2 <memcpy>
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	0021      	movs	r1, r4
 8010eac:	9804      	ldr	r0, [sp, #16]
 8010eae:	f7fc f947 	bl	800d140 <__lshift>
 8010eb2:	9b06      	ldr	r3, [sp, #24]
 8010eb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010eb6:	9307      	str	r3, [sp, #28]
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	189b      	adds	r3, r3, r2
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	003d      	movs	r5, r7
 8010ec0:	0007      	movs	r7, r0
 8010ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8010ec4:	9b08      	ldr	r3, [sp, #32]
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8010eca:	0031      	movs	r1, r6
 8010ecc:	9805      	ldr	r0, [sp, #20]
 8010ece:	f7ff fa53 	bl	8010378 <quorem>
 8010ed2:	0029      	movs	r1, r5
 8010ed4:	0004      	movs	r4, r0
 8010ed6:	900b      	str	r0, [sp, #44]	; 0x2c
 8010ed8:	9805      	ldr	r0, [sp, #20]
 8010eda:	f7fc f99f 	bl	800d21c <__mcmp>
 8010ede:	003a      	movs	r2, r7
 8010ee0:	900c      	str	r0, [sp, #48]	; 0x30
 8010ee2:	0031      	movs	r1, r6
 8010ee4:	9804      	ldr	r0, [sp, #16]
 8010ee6:	f7fc f9b5 	bl	800d254 <__mdiff>
 8010eea:	2201      	movs	r2, #1
 8010eec:	68c3      	ldr	r3, [r0, #12]
 8010eee:	3430      	adds	r4, #48	; 0x30
 8010ef0:	9008      	str	r0, [sp, #32]
 8010ef2:	920a      	str	r2, [sp, #40]	; 0x28
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d104      	bne.n	8010f02 <_dtoa_r+0xa6a>
 8010ef8:	0001      	movs	r1, r0
 8010efa:	9805      	ldr	r0, [sp, #20]
 8010efc:	f7fc f98e 	bl	800d21c <__mcmp>
 8010f00:	900a      	str	r0, [sp, #40]	; 0x28
 8010f02:	9908      	ldr	r1, [sp, #32]
 8010f04:	9804      	ldr	r0, [sp, #16]
 8010f06:	f7fb ff2f 	bl	800cd68 <_Bfree>
 8010f0a:	9b07      	ldr	r3, [sp, #28]
 8010f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f0e:	3301      	adds	r3, #1
 8010f10:	9308      	str	r3, [sp, #32]
 8010f12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f14:	4313      	orrs	r3, r2
 8010f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	d109      	bne.n	8010f30 <_dtoa_r+0xa98>
 8010f1c:	2c39      	cmp	r4, #57	; 0x39
 8010f1e:	d022      	beq.n	8010f66 <_dtoa_r+0xace>
 8010f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	dd01      	ble.n	8010f2a <_dtoa_r+0xa92>
 8010f26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010f28:	3431      	adds	r4, #49	; 0x31
 8010f2a:	9b07      	ldr	r3, [sp, #28]
 8010f2c:	701c      	strb	r4, [r3, #0]
 8010f2e:	e76e      	b.n	8010e0e <_dtoa_r+0x976>
 8010f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	db04      	blt.n	8010f40 <_dtoa_r+0xaa8>
 8010f36:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	d11e      	bne.n	8010f7e <_dtoa_r+0xae6>
 8010f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	ddf1      	ble.n	8010f2a <_dtoa_r+0xa92>
 8010f46:	9905      	ldr	r1, [sp, #20]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	9804      	ldr	r0, [sp, #16]
 8010f4c:	f7fc f8f8 	bl	800d140 <__lshift>
 8010f50:	0031      	movs	r1, r6
 8010f52:	9005      	str	r0, [sp, #20]
 8010f54:	f7fc f962 	bl	800d21c <__mcmp>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	dc02      	bgt.n	8010f62 <_dtoa_r+0xaca>
 8010f5c:	d1e5      	bne.n	8010f2a <_dtoa_r+0xa92>
 8010f5e:	07e3      	lsls	r3, r4, #31
 8010f60:	d5e3      	bpl.n	8010f2a <_dtoa_r+0xa92>
 8010f62:	2c39      	cmp	r4, #57	; 0x39
 8010f64:	d1df      	bne.n	8010f26 <_dtoa_r+0xa8e>
 8010f66:	2339      	movs	r3, #57	; 0x39
 8010f68:	9a07      	ldr	r2, [sp, #28]
 8010f6a:	7013      	strb	r3, [r2, #0]
 8010f6c:	9b08      	ldr	r3, [sp, #32]
 8010f6e:	9308      	str	r3, [sp, #32]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	781a      	ldrb	r2, [r3, #0]
 8010f74:	2a39      	cmp	r2, #57	; 0x39
 8010f76:	d063      	beq.n	8011040 <_dtoa_r+0xba8>
 8010f78:	3201      	adds	r2, #1
 8010f7a:	701a      	strb	r2, [r3, #0]
 8010f7c:	e747      	b.n	8010e0e <_dtoa_r+0x976>
 8010f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	dd03      	ble.n	8010f8c <_dtoa_r+0xaf4>
 8010f84:	2c39      	cmp	r4, #57	; 0x39
 8010f86:	d0ee      	beq.n	8010f66 <_dtoa_r+0xace>
 8010f88:	3401      	adds	r4, #1
 8010f8a:	e7ce      	b.n	8010f2a <_dtoa_r+0xa92>
 8010f8c:	9b07      	ldr	r3, [sp, #28]
 8010f8e:	9a07      	ldr	r2, [sp, #28]
 8010f90:	701c      	strb	r4, [r3, #0]
 8010f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d03e      	beq.n	8011016 <_dtoa_r+0xb7e>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	220a      	movs	r2, #10
 8010f9c:	9905      	ldr	r1, [sp, #20]
 8010f9e:	9804      	ldr	r0, [sp, #16]
 8010fa0:	f7fb feec 	bl	800cd7c <__multadd>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9005      	str	r0, [sp, #20]
 8010fa8:	220a      	movs	r2, #10
 8010faa:	0029      	movs	r1, r5
 8010fac:	9804      	ldr	r0, [sp, #16]
 8010fae:	42bd      	cmp	r5, r7
 8010fb0:	d106      	bne.n	8010fc0 <_dtoa_r+0xb28>
 8010fb2:	f7fb fee3 	bl	800cd7c <__multadd>
 8010fb6:	0005      	movs	r5, r0
 8010fb8:	0007      	movs	r7, r0
 8010fba:	9b08      	ldr	r3, [sp, #32]
 8010fbc:	9307      	str	r3, [sp, #28]
 8010fbe:	e784      	b.n	8010eca <_dtoa_r+0xa32>
 8010fc0:	f7fb fedc 	bl	800cd7c <__multadd>
 8010fc4:	0039      	movs	r1, r7
 8010fc6:	0005      	movs	r5, r0
 8010fc8:	2300      	movs	r3, #0
 8010fca:	220a      	movs	r2, #10
 8010fcc:	9804      	ldr	r0, [sp, #16]
 8010fce:	f7fb fed5 	bl	800cd7c <__multadd>
 8010fd2:	0007      	movs	r7, r0
 8010fd4:	e7f1      	b.n	8010fba <_dtoa_r+0xb22>
 8010fd6:	9b07      	ldr	r3, [sp, #28]
 8010fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fda:	2500      	movs	r5, #0
 8010fdc:	0031      	movs	r1, r6
 8010fde:	9805      	ldr	r0, [sp, #20]
 8010fe0:	f7ff f9ca 	bl	8010378 <quorem>
 8010fe4:	9b06      	ldr	r3, [sp, #24]
 8010fe6:	3030      	adds	r0, #48	; 0x30
 8010fe8:	5558      	strb	r0, [r3, r5]
 8010fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fec:	3501      	adds	r5, #1
 8010fee:	0004      	movs	r4, r0
 8010ff0:	42ab      	cmp	r3, r5
 8010ff2:	dd07      	ble.n	8011004 <_dtoa_r+0xb6c>
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	220a      	movs	r2, #10
 8010ff8:	9905      	ldr	r1, [sp, #20]
 8010ffa:	9804      	ldr	r0, [sp, #16]
 8010ffc:	f7fb febe 	bl	800cd7c <__multadd>
 8011000:	9005      	str	r0, [sp, #20]
 8011002:	e7eb      	b.n	8010fdc <_dtoa_r+0xb44>
 8011004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011006:	2301      	movs	r3, #1
 8011008:	2a00      	cmp	r2, #0
 801100a:	dd00      	ble.n	801100e <_dtoa_r+0xb76>
 801100c:	0013      	movs	r3, r2
 801100e:	2500      	movs	r5, #0
 8011010:	9a06      	ldr	r2, [sp, #24]
 8011012:	18d3      	adds	r3, r2, r3
 8011014:	9308      	str	r3, [sp, #32]
 8011016:	9905      	ldr	r1, [sp, #20]
 8011018:	2201      	movs	r2, #1
 801101a:	9804      	ldr	r0, [sp, #16]
 801101c:	f7fc f890 	bl	800d140 <__lshift>
 8011020:	0031      	movs	r1, r6
 8011022:	9005      	str	r0, [sp, #20]
 8011024:	f7fc f8fa 	bl	800d21c <__mcmp>
 8011028:	2800      	cmp	r0, #0
 801102a:	dc9f      	bgt.n	8010f6c <_dtoa_r+0xad4>
 801102c:	d101      	bne.n	8011032 <_dtoa_r+0xb9a>
 801102e:	07e4      	lsls	r4, r4, #31
 8011030:	d49c      	bmi.n	8010f6c <_dtoa_r+0xad4>
 8011032:	9b08      	ldr	r3, [sp, #32]
 8011034:	9308      	str	r3, [sp, #32]
 8011036:	3b01      	subs	r3, #1
 8011038:	781a      	ldrb	r2, [r3, #0]
 801103a:	2a30      	cmp	r2, #48	; 0x30
 801103c:	d0fa      	beq.n	8011034 <_dtoa_r+0xb9c>
 801103e:	e6e6      	b.n	8010e0e <_dtoa_r+0x976>
 8011040:	9a06      	ldr	r2, [sp, #24]
 8011042:	429a      	cmp	r2, r3
 8011044:	d193      	bne.n	8010f6e <_dtoa_r+0xad6>
 8011046:	9b03      	ldr	r3, [sp, #12]
 8011048:	3301      	adds	r3, #1
 801104a:	9303      	str	r3, [sp, #12]
 801104c:	2331      	movs	r3, #49	; 0x31
 801104e:	7013      	strb	r3, [r2, #0]
 8011050:	e6dd      	b.n	8010e0e <_dtoa_r+0x976>
 8011052:	4b09      	ldr	r3, [pc, #36]	; (8011078 <_dtoa_r+0xbe0>)
 8011054:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011056:	9306      	str	r3, [sp, #24]
 8011058:	4b08      	ldr	r3, [pc, #32]	; (801107c <_dtoa_r+0xbe4>)
 801105a:	2a00      	cmp	r2, #0
 801105c:	d001      	beq.n	8011062 <_dtoa_r+0xbca>
 801105e:	f7ff fa4c 	bl	80104fa <_dtoa_r+0x62>
 8011062:	f7ff fa4c 	bl	80104fe <_dtoa_r+0x66>
 8011066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011068:	2b00      	cmp	r3, #0
 801106a:	dcb6      	bgt.n	8010fda <_dtoa_r+0xb42>
 801106c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801106e:	2b02      	cmp	r3, #2
 8011070:	dd00      	ble.n	8011074 <_dtoa_r+0xbdc>
 8011072:	e6b6      	b.n	8010de2 <_dtoa_r+0x94a>
 8011074:	e7b1      	b.n	8010fda <_dtoa_r+0xb42>
 8011076:	46c0      	nop			; (mov r8, r8)
 8011078:	08014c54 	.word	0x08014c54
 801107c:	08014c5c 	.word	0x08014c5c

08011080 <realloc>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4b03      	ldr	r3, [pc, #12]	; (8011090 <realloc+0x10>)
 8011084:	000a      	movs	r2, r1
 8011086:	0001      	movs	r1, r0
 8011088:	6818      	ldr	r0, [r3, #0]
 801108a:	f000 f803 	bl	8011094 <_realloc_r>
 801108e:	bd10      	pop	{r4, pc}
 8011090:	200006d0 	.word	0x200006d0

08011094 <_realloc_r>:
 8011094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011096:	b087      	sub	sp, #28
 8011098:	1e0c      	subs	r4, r1, #0
 801109a:	9001      	str	r0, [sp, #4]
 801109c:	9205      	str	r2, [sp, #20]
 801109e:	d106      	bne.n	80110ae <_realloc_r+0x1a>
 80110a0:	0011      	movs	r1, r2
 80110a2:	f7f9 fd5f 	bl	800ab64 <_malloc_r>
 80110a6:	0007      	movs	r7, r0
 80110a8:	0038      	movs	r0, r7
 80110aa:	b007      	add	sp, #28
 80110ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ae:	9801      	ldr	r0, [sp, #4]
 80110b0:	f7f9 ff6c 	bl	800af8c <__malloc_lock>
 80110b4:	0023      	movs	r3, r4
 80110b6:	3b08      	subs	r3, #8
 80110b8:	685f      	ldr	r7, [r3, #4]
 80110ba:	9304      	str	r3, [sp, #16]
 80110bc:	9b05      	ldr	r3, [sp, #20]
 80110be:	330b      	adds	r3, #11
 80110c0:	2b16      	cmp	r3, #22
 80110c2:	d908      	bls.n	80110d6 <_realloc_r+0x42>
 80110c4:	2207      	movs	r2, #7
 80110c6:	4393      	bics	r3, r2
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	d506      	bpl.n	80110da <_realloc_r+0x46>
 80110cc:	230c      	movs	r3, #12
 80110ce:	9a01      	ldr	r2, [sp, #4]
 80110d0:	2700      	movs	r7, #0
 80110d2:	6013      	str	r3, [r2, #0]
 80110d4:	e7e8      	b.n	80110a8 <_realloc_r+0x14>
 80110d6:	2310      	movs	r3, #16
 80110d8:	9300      	str	r3, [sp, #0]
 80110da:	9b00      	ldr	r3, [sp, #0]
 80110dc:	9a05      	ldr	r2, [sp, #20]
 80110de:	4293      	cmp	r3, r2
 80110e0:	d3f4      	bcc.n	80110cc <_realloc_r+0x38>
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	003a      	movs	r2, r7
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	2303      	movs	r3, #3
 80110ea:	439a      	bics	r2, r3
 80110ec:	9b00      	ldr	r3, [sp, #0]
 80110ee:	9203      	str	r2, [sp, #12]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	dc00      	bgt.n	80110f6 <_realloc_r+0x62>
 80110f4:	e169      	b.n	80113ca <_realloc_r+0x336>
 80110f6:	9b04      	ldr	r3, [sp, #16]
 80110f8:	48b8      	ldr	r0, [pc, #736]	; (80113dc <_realloc_r+0x348>)
 80110fa:	189b      	adds	r3, r3, r2
 80110fc:	6882      	ldr	r2, [r0, #8]
 80110fe:	4694      	mov	ip, r2
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	459c      	cmp	ip, r3
 8011104:	d006      	beq.n	8011114 <_realloc_r+0x80>
 8011106:	2501      	movs	r5, #1
 8011108:	0011      	movs	r1, r2
 801110a:	43a9      	bics	r1, r5
 801110c:	1859      	adds	r1, r3, r1
 801110e:	6849      	ldr	r1, [r1, #4]
 8011110:	4229      	tst	r1, r5
 8011112:	d144      	bne.n	801119e <_realloc_r+0x10a>
 8011114:	2103      	movs	r1, #3
 8011116:	438a      	bics	r2, r1
 8011118:	9903      	ldr	r1, [sp, #12]
 801111a:	188e      	adds	r6, r1, r2
 801111c:	9900      	ldr	r1, [sp, #0]
 801111e:	459c      	cmp	ip, r3
 8011120:	d117      	bne.n	8011152 <_realloc_r+0xbe>
 8011122:	3110      	adds	r1, #16
 8011124:	42b1      	cmp	r1, r6
 8011126:	dc3c      	bgt.n	80111a2 <_realloc_r+0x10e>
 8011128:	9a00      	ldr	r2, [sp, #0]
 801112a:	2101      	movs	r1, #1
 801112c:	4694      	mov	ip, r2
 801112e:	1ab6      	subs	r6, r6, r2
 8011130:	0022      	movs	r2, r4
 8011132:	9b04      	ldr	r3, [sp, #16]
 8011134:	430e      	orrs	r6, r1
 8011136:	4463      	add	r3, ip
 8011138:	6083      	str	r3, [r0, #8]
 801113a:	3a08      	subs	r2, #8
 801113c:	605e      	str	r6, [r3, #4]
 801113e:	6853      	ldr	r3, [r2, #4]
 8011140:	9801      	ldr	r0, [sp, #4]
 8011142:	400b      	ands	r3, r1
 8011144:	4661      	mov	r1, ip
 8011146:	430b      	orrs	r3, r1
 8011148:	6053      	str	r3, [r2, #4]
 801114a:	f7f9 ff27 	bl	800af9c <__malloc_unlock>
 801114e:	0027      	movs	r7, r4
 8011150:	e7aa      	b.n	80110a8 <_realloc_r+0x14>
 8011152:	42b1      	cmp	r1, r6
 8011154:	dc25      	bgt.n	80111a2 <_realloc_r+0x10e>
 8011156:	68da      	ldr	r2, [r3, #12]
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	60da      	str	r2, [r3, #12]
 801115c:	6093      	str	r3, [r2, #8]
 801115e:	9b00      	ldr	r3, [sp, #0]
 8011160:	9a02      	ldr	r2, [sp, #8]
 8011162:	1af4      	subs	r4, r6, r3
 8011164:	9b02      	ldr	r3, [sp, #8]
 8011166:	1992      	adds	r2, r2, r6
 8011168:	6858      	ldr	r0, [r3, #4]
 801116a:	2301      	movs	r3, #1
 801116c:	4018      	ands	r0, r3
 801116e:	2c0f      	cmp	r4, #15
 8011170:	d800      	bhi.n	8011174 <_realloc_r+0xe0>
 8011172:	e12c      	b.n	80113ce <_realloc_r+0x33a>
 8011174:	9d00      	ldr	r5, [sp, #0]
 8011176:	9902      	ldr	r1, [sp, #8]
 8011178:	4328      	orrs	r0, r5
 801117a:	1949      	adds	r1, r1, r5
 801117c:	9d02      	ldr	r5, [sp, #8]
 801117e:	431c      	orrs	r4, r3
 8011180:	6068      	str	r0, [r5, #4]
 8011182:	604c      	str	r4, [r1, #4]
 8011184:	6850      	ldr	r0, [r2, #4]
 8011186:	3108      	adds	r1, #8
 8011188:	4303      	orrs	r3, r0
 801118a:	6053      	str	r3, [r2, #4]
 801118c:	9801      	ldr	r0, [sp, #4]
 801118e:	f7fb f9a3 	bl	800c4d8 <_free_r>
 8011192:	9801      	ldr	r0, [sp, #4]
 8011194:	f7f9 ff02 	bl	800af9c <__malloc_unlock>
 8011198:	9f02      	ldr	r7, [sp, #8]
 801119a:	3708      	adds	r7, #8
 801119c:	e784      	b.n	80110a8 <_realloc_r+0x14>
 801119e:	2200      	movs	r2, #0
 80111a0:	0013      	movs	r3, r2
 80111a2:	07ff      	lsls	r7, r7, #31
 80111a4:	d500      	bpl.n	80111a8 <_realloc_r+0x114>
 80111a6:	e0c6      	b.n	8011336 <_realloc_r+0x2a2>
 80111a8:	0021      	movs	r1, r4
 80111aa:	2003      	movs	r0, #3
 80111ac:	3908      	subs	r1, #8
 80111ae:	680d      	ldr	r5, [r1, #0]
 80111b0:	9904      	ldr	r1, [sp, #16]
 80111b2:	1b4d      	subs	r5, r1, r5
 80111b4:	6869      	ldr	r1, [r5, #4]
 80111b6:	4381      	bics	r1, r0
 80111b8:	9803      	ldr	r0, [sp, #12]
 80111ba:	180f      	adds	r7, r1, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d100      	bne.n	80111c2 <_realloc_r+0x12e>
 80111c0:	e084      	b.n	80112cc <_realloc_r+0x238>
 80111c2:	19d6      	adds	r6, r2, r7
 80111c4:	459c      	cmp	ip, r3
 80111c6:	d148      	bne.n	801125a <_realloc_r+0x1c6>
 80111c8:	9b00      	ldr	r3, [sp, #0]
 80111ca:	3310      	adds	r3, #16
 80111cc:	42b3      	cmp	r3, r6
 80111ce:	dc7d      	bgt.n	80112cc <_realloc_r+0x238>
 80111d0:	68aa      	ldr	r2, [r5, #8]
 80111d2:	68eb      	ldr	r3, [r5, #12]
 80111d4:	002f      	movs	r7, r5
 80111d6:	60d3      	str	r3, [r2, #12]
 80111d8:	609a      	str	r2, [r3, #8]
 80111da:	0002      	movs	r2, r0
 80111dc:	3a04      	subs	r2, #4
 80111de:	3708      	adds	r7, #8
 80111e0:	2a24      	cmp	r2, #36	; 0x24
 80111e2:	d835      	bhi.n	8011250 <_realloc_r+0x1bc>
 80111e4:	003b      	movs	r3, r7
 80111e6:	2a13      	cmp	r2, #19
 80111e8:	d908      	bls.n	80111fc <_realloc_r+0x168>
 80111ea:	6823      	ldr	r3, [r4, #0]
 80111ec:	60ab      	str	r3, [r5, #8]
 80111ee:	6863      	ldr	r3, [r4, #4]
 80111f0:	60eb      	str	r3, [r5, #12]
 80111f2:	2a1b      	cmp	r2, #27
 80111f4:	d81a      	bhi.n	801122c <_realloc_r+0x198>
 80111f6:	002b      	movs	r3, r5
 80111f8:	3408      	adds	r4, #8
 80111fa:	3310      	adds	r3, #16
 80111fc:	6822      	ldr	r2, [r4, #0]
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	6862      	ldr	r2, [r4, #4]
 8011202:	605a      	str	r2, [r3, #4]
 8011204:	68a2      	ldr	r2, [r4, #8]
 8011206:	609a      	str	r2, [r3, #8]
 8011208:	9b00      	ldr	r3, [sp, #0]
 801120a:	4a74      	ldr	r2, [pc, #464]	; (80113dc <_realloc_r+0x348>)
 801120c:	18eb      	adds	r3, r5, r3
 801120e:	6093      	str	r3, [r2, #8]
 8011210:	9a00      	ldr	r2, [sp, #0]
 8011212:	1ab6      	subs	r6, r6, r2
 8011214:	2201      	movs	r2, #1
 8011216:	4316      	orrs	r6, r2
 8011218:	605e      	str	r6, [r3, #4]
 801121a:	686b      	ldr	r3, [r5, #4]
 801121c:	4013      	ands	r3, r2
 801121e:	9a00      	ldr	r2, [sp, #0]
 8011220:	4313      	orrs	r3, r2
 8011222:	606b      	str	r3, [r5, #4]
 8011224:	9801      	ldr	r0, [sp, #4]
 8011226:	f7f9 feb9 	bl	800af9c <__malloc_unlock>
 801122a:	e73d      	b.n	80110a8 <_realloc_r+0x14>
 801122c:	68a3      	ldr	r3, [r4, #8]
 801122e:	612b      	str	r3, [r5, #16]
 8011230:	68e3      	ldr	r3, [r4, #12]
 8011232:	616b      	str	r3, [r5, #20]
 8011234:	2a24      	cmp	r2, #36	; 0x24
 8011236:	d003      	beq.n	8011240 <_realloc_r+0x1ac>
 8011238:	002b      	movs	r3, r5
 801123a:	3410      	adds	r4, #16
 801123c:	3318      	adds	r3, #24
 801123e:	e7dd      	b.n	80111fc <_realloc_r+0x168>
 8011240:	6923      	ldr	r3, [r4, #16]
 8011242:	61ab      	str	r3, [r5, #24]
 8011244:	002b      	movs	r3, r5
 8011246:	6962      	ldr	r2, [r4, #20]
 8011248:	3320      	adds	r3, #32
 801124a:	61ea      	str	r2, [r5, #28]
 801124c:	3418      	adds	r4, #24
 801124e:	e7d5      	b.n	80111fc <_realloc_r+0x168>
 8011250:	0021      	movs	r1, r4
 8011252:	0038      	movs	r0, r7
 8011254:	f001 fb2f 	bl	80128b6 <memmove>
 8011258:	e7d6      	b.n	8011208 <_realloc_r+0x174>
 801125a:	9a00      	ldr	r2, [sp, #0]
 801125c:	42b2      	cmp	r2, r6
 801125e:	dc35      	bgt.n	80112cc <_realloc_r+0x238>
 8011260:	0028      	movs	r0, r5
 8011262:	68da      	ldr	r2, [r3, #12]
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	3008      	adds	r0, #8
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	6093      	str	r3, [r2, #8]
 801126c:	68aa      	ldr	r2, [r5, #8]
 801126e:	68eb      	ldr	r3, [r5, #12]
 8011270:	60d3      	str	r3, [r2, #12]
 8011272:	609a      	str	r2, [r3, #8]
 8011274:	9a03      	ldr	r2, [sp, #12]
 8011276:	3a04      	subs	r2, #4
 8011278:	2a24      	cmp	r2, #36	; 0x24
 801127a:	d823      	bhi.n	80112c4 <_realloc_r+0x230>
 801127c:	2a13      	cmp	r2, #19
 801127e:	d907      	bls.n	8011290 <_realloc_r+0x1fc>
 8011280:	6823      	ldr	r3, [r4, #0]
 8011282:	60ab      	str	r3, [r5, #8]
 8011284:	6863      	ldr	r3, [r4, #4]
 8011286:	60eb      	str	r3, [r5, #12]
 8011288:	2a1b      	cmp	r2, #27
 801128a:	d809      	bhi.n	80112a0 <_realloc_r+0x20c>
 801128c:	3408      	adds	r4, #8
 801128e:	3008      	adds	r0, #8
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	6003      	str	r3, [r0, #0]
 8011294:	6863      	ldr	r3, [r4, #4]
 8011296:	6043      	str	r3, [r0, #4]
 8011298:	68a3      	ldr	r3, [r4, #8]
 801129a:	6083      	str	r3, [r0, #8]
 801129c:	9502      	str	r5, [sp, #8]
 801129e:	e75e      	b.n	801115e <_realloc_r+0xca>
 80112a0:	68a3      	ldr	r3, [r4, #8]
 80112a2:	612b      	str	r3, [r5, #16]
 80112a4:	68e3      	ldr	r3, [r4, #12]
 80112a6:	616b      	str	r3, [r5, #20]
 80112a8:	2a24      	cmp	r2, #36	; 0x24
 80112aa:	d003      	beq.n	80112b4 <_realloc_r+0x220>
 80112ac:	0028      	movs	r0, r5
 80112ae:	3410      	adds	r4, #16
 80112b0:	3018      	adds	r0, #24
 80112b2:	e7ed      	b.n	8011290 <_realloc_r+0x1fc>
 80112b4:	0028      	movs	r0, r5
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	3020      	adds	r0, #32
 80112ba:	61ab      	str	r3, [r5, #24]
 80112bc:	6963      	ldr	r3, [r4, #20]
 80112be:	3418      	adds	r4, #24
 80112c0:	61eb      	str	r3, [r5, #28]
 80112c2:	e7e5      	b.n	8011290 <_realloc_r+0x1fc>
 80112c4:	0021      	movs	r1, r4
 80112c6:	f001 faf6 	bl	80128b6 <memmove>
 80112ca:	e7e7      	b.n	801129c <_realloc_r+0x208>
 80112cc:	9b00      	ldr	r3, [sp, #0]
 80112ce:	42bb      	cmp	r3, r7
 80112d0:	dc31      	bgt.n	8011336 <_realloc_r+0x2a2>
 80112d2:	0028      	movs	r0, r5
 80112d4:	68aa      	ldr	r2, [r5, #8]
 80112d6:	68eb      	ldr	r3, [r5, #12]
 80112d8:	3008      	adds	r0, #8
 80112da:	60d3      	str	r3, [r2, #12]
 80112dc:	609a      	str	r2, [r3, #8]
 80112de:	9a03      	ldr	r2, [sp, #12]
 80112e0:	3a04      	subs	r2, #4
 80112e2:	2a24      	cmp	r2, #36	; 0x24
 80112e4:	d823      	bhi.n	801132e <_realloc_r+0x29a>
 80112e6:	2a13      	cmp	r2, #19
 80112e8:	d907      	bls.n	80112fa <_realloc_r+0x266>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	60ab      	str	r3, [r5, #8]
 80112ee:	6863      	ldr	r3, [r4, #4]
 80112f0:	60eb      	str	r3, [r5, #12]
 80112f2:	2a1b      	cmp	r2, #27
 80112f4:	d809      	bhi.n	801130a <_realloc_r+0x276>
 80112f6:	3408      	adds	r4, #8
 80112f8:	3008      	adds	r0, #8
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	6003      	str	r3, [r0, #0]
 80112fe:	6863      	ldr	r3, [r4, #4]
 8011300:	6043      	str	r3, [r0, #4]
 8011302:	68a3      	ldr	r3, [r4, #8]
 8011304:	6083      	str	r3, [r0, #8]
 8011306:	003e      	movs	r6, r7
 8011308:	e7c8      	b.n	801129c <_realloc_r+0x208>
 801130a:	68a3      	ldr	r3, [r4, #8]
 801130c:	612b      	str	r3, [r5, #16]
 801130e:	68e3      	ldr	r3, [r4, #12]
 8011310:	616b      	str	r3, [r5, #20]
 8011312:	2a24      	cmp	r2, #36	; 0x24
 8011314:	d003      	beq.n	801131e <_realloc_r+0x28a>
 8011316:	0028      	movs	r0, r5
 8011318:	3410      	adds	r4, #16
 801131a:	3018      	adds	r0, #24
 801131c:	e7ed      	b.n	80112fa <_realloc_r+0x266>
 801131e:	0028      	movs	r0, r5
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	3020      	adds	r0, #32
 8011324:	61ab      	str	r3, [r5, #24]
 8011326:	6963      	ldr	r3, [r4, #20]
 8011328:	3418      	adds	r4, #24
 801132a:	61eb      	str	r3, [r5, #28]
 801132c:	e7e5      	b.n	80112fa <_realloc_r+0x266>
 801132e:	0021      	movs	r1, r4
 8011330:	f001 fac1 	bl	80128b6 <memmove>
 8011334:	e7e7      	b.n	8011306 <_realloc_r+0x272>
 8011336:	9905      	ldr	r1, [sp, #20]
 8011338:	9801      	ldr	r0, [sp, #4]
 801133a:	f7f9 fc13 	bl	800ab64 <_malloc_r>
 801133e:	1e07      	subs	r7, r0, #0
 8011340:	d100      	bne.n	8011344 <_realloc_r+0x2b0>
 8011342:	e76f      	b.n	8011224 <_realloc_r+0x190>
 8011344:	0023      	movs	r3, r4
 8011346:	2201      	movs	r2, #1
 8011348:	3b08      	subs	r3, #8
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	4393      	bics	r3, r2
 801134e:	9a04      	ldr	r2, [sp, #16]
 8011350:	18d3      	adds	r3, r2, r3
 8011352:	0002      	movs	r2, r0
 8011354:	3a08      	subs	r2, #8
 8011356:	4293      	cmp	r3, r2
 8011358:	d105      	bne.n	8011366 <_realloc_r+0x2d2>
 801135a:	685e      	ldr	r6, [r3, #4]
 801135c:	2303      	movs	r3, #3
 801135e:	439e      	bics	r6, r3
 8011360:	9b03      	ldr	r3, [sp, #12]
 8011362:	18f6      	adds	r6, r6, r3
 8011364:	e6fb      	b.n	801115e <_realloc_r+0xca>
 8011366:	9a03      	ldr	r2, [sp, #12]
 8011368:	3a04      	subs	r2, #4
 801136a:	2a24      	cmp	r2, #36	; 0x24
 801136c:	d829      	bhi.n	80113c2 <_realloc_r+0x32e>
 801136e:	0003      	movs	r3, r0
 8011370:	0021      	movs	r1, r4
 8011372:	2a13      	cmp	r2, #19
 8011374:	d908      	bls.n	8011388 <_realloc_r+0x2f4>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	6863      	ldr	r3, [r4, #4]
 801137c:	6043      	str	r3, [r0, #4]
 801137e:	2a1b      	cmp	r2, #27
 8011380:	d80d      	bhi.n	801139e <_realloc_r+0x30a>
 8011382:	0003      	movs	r3, r0
 8011384:	3108      	adds	r1, #8
 8011386:	3308      	adds	r3, #8
 8011388:	680a      	ldr	r2, [r1, #0]
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	684a      	ldr	r2, [r1, #4]
 801138e:	605a      	str	r2, [r3, #4]
 8011390:	688a      	ldr	r2, [r1, #8]
 8011392:	609a      	str	r2, [r3, #8]
 8011394:	0021      	movs	r1, r4
 8011396:	9801      	ldr	r0, [sp, #4]
 8011398:	f7fb f89e 	bl	800c4d8 <_free_r>
 801139c:	e742      	b.n	8011224 <_realloc_r+0x190>
 801139e:	68a3      	ldr	r3, [r4, #8]
 80113a0:	6083      	str	r3, [r0, #8]
 80113a2:	68e3      	ldr	r3, [r4, #12]
 80113a4:	60c3      	str	r3, [r0, #12]
 80113a6:	2a24      	cmp	r2, #36	; 0x24
 80113a8:	d003      	beq.n	80113b2 <_realloc_r+0x31e>
 80113aa:	0003      	movs	r3, r0
 80113ac:	3110      	adds	r1, #16
 80113ae:	3310      	adds	r3, #16
 80113b0:	e7ea      	b.n	8011388 <_realloc_r+0x2f4>
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	3118      	adds	r1, #24
 80113b6:	6103      	str	r3, [r0, #16]
 80113b8:	0003      	movs	r3, r0
 80113ba:	6962      	ldr	r2, [r4, #20]
 80113bc:	3318      	adds	r3, #24
 80113be:	6142      	str	r2, [r0, #20]
 80113c0:	e7e2      	b.n	8011388 <_realloc_r+0x2f4>
 80113c2:	0021      	movs	r1, r4
 80113c4:	f001 fa77 	bl	80128b6 <memmove>
 80113c8:	e7e4      	b.n	8011394 <_realloc_r+0x300>
 80113ca:	9e03      	ldr	r6, [sp, #12]
 80113cc:	e6c7      	b.n	801115e <_realloc_r+0xca>
 80113ce:	9902      	ldr	r1, [sp, #8]
 80113d0:	4306      	orrs	r6, r0
 80113d2:	604e      	str	r6, [r1, #4]
 80113d4:	6851      	ldr	r1, [r2, #4]
 80113d6:	430b      	orrs	r3, r1
 80113d8:	6053      	str	r3, [r2, #4]
 80113da:	e6da      	b.n	8011192 <_realloc_r+0xfe>
 80113dc:	20000028 	.word	0x20000028

080113e0 <_strtoll_l.constprop.0>:
 80113e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113e2:	b08d      	sub	sp, #52	; 0x34
 80113e4:	9203      	str	r2, [sp, #12]
 80113e6:	4a53      	ldr	r2, [pc, #332]	; (8011534 <_strtoll_l.constprop.0+0x154>)
 80113e8:	001e      	movs	r6, r3
 80113ea:	9102      	str	r1, [sp, #8]
 80113ec:	000b      	movs	r3, r1
 80113ee:	4694      	mov	ip, r2
 80113f0:	2108      	movs	r1, #8
 80113f2:	900a      	str	r0, [sp, #40]	; 0x28
 80113f4:	001a      	movs	r2, r3
 80113f6:	4660      	mov	r0, ip
 80113f8:	7814      	ldrb	r4, [r2, #0]
 80113fa:	3301      	adds	r3, #1
 80113fc:	5d00      	ldrb	r0, [r0, r4]
 80113fe:	001d      	movs	r5, r3
 8011400:	0007      	movs	r7, r0
 8011402:	400f      	ands	r7, r1
 8011404:	4208      	tst	r0, r1
 8011406:	d1f5      	bne.n	80113f4 <_strtoll_l.constprop.0+0x14>
 8011408:	2c2d      	cmp	r4, #45	; 0x2d
 801140a:	d153      	bne.n	80114b4 <_strtoll_l.constprop.0+0xd4>
 801140c:	781c      	ldrb	r4, [r3, #0]
 801140e:	2301      	movs	r3, #1
 8011410:	1c95      	adds	r5, r2, #2
 8011412:	9301      	str	r3, [sp, #4]
 8011414:	2e00      	cmp	r6, #0
 8011416:	d100      	bne.n	801141a <_strtoll_l.constprop.0+0x3a>
 8011418:	e086      	b.n	8011528 <_strtoll_l.constprop.0+0x148>
 801141a:	2e10      	cmp	r6, #16
 801141c:	d10a      	bne.n	8011434 <_strtoll_l.constprop.0+0x54>
 801141e:	2c30      	cmp	r4, #48	; 0x30
 8011420:	d108      	bne.n	8011434 <_strtoll_l.constprop.0+0x54>
 8011422:	2220      	movs	r2, #32
 8011424:	782b      	ldrb	r3, [r5, #0]
 8011426:	4393      	bics	r3, r2
 8011428:	2b58      	cmp	r3, #88	; 0x58
 801142a:	d000      	beq.n	801142e <_strtoll_l.constprop.0+0x4e>
 801142c:	e076      	b.n	801151c <_strtoll_l.constprop.0+0x13c>
 801142e:	2610      	movs	r6, #16
 8011430:	786c      	ldrb	r4, [r5, #1]
 8011432:	3502      	adds	r5, #2
 8011434:	2001      	movs	r0, #1
 8011436:	2300      	movs	r3, #0
 8011438:	493f      	ldr	r1, [pc, #252]	; (8011538 <_strtoll_l.constprop.0+0x158>)
 801143a:	9a01      	ldr	r2, [sp, #4]
 801143c:	4240      	negs	r0, r0
 801143e:	1812      	adds	r2, r2, r0
 8011440:	414b      	adcs	r3, r1
 8011442:	9204      	str	r2, [sp, #16]
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	9804      	ldr	r0, [sp, #16]
 8011448:	9905      	ldr	r1, [sp, #20]
 801144a:	17f3      	asrs	r3, r6, #31
 801144c:	0032      	movs	r2, r6
 801144e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011450:	f7ef f828 	bl	80004a4 <__aeabi_uldivmod>
 8011454:	2300      	movs	r3, #0
 8011456:	000f      	movs	r7, r1
 8011458:	9008      	str	r0, [sp, #32]
 801145a:	2100      	movs	r1, #0
 801145c:	2000      	movs	r0, #0
 801145e:	9209      	str	r2, [sp, #36]	; 0x24
 8011460:	0022      	movs	r2, r4
 8011462:	3a30      	subs	r2, #48	; 0x30
 8011464:	2a09      	cmp	r2, #9
 8011466:	d82b      	bhi.n	80114c0 <_strtoll_l.constprop.0+0xe0>
 8011468:	0014      	movs	r4, r2
 801146a:	42a6      	cmp	r6, r4
 801146c:	dd37      	ble.n	80114de <_strtoll_l.constprop.0+0xfe>
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	d01d      	beq.n	80114ae <_strtoll_l.constprop.0+0xce>
 8011472:	42b9      	cmp	r1, r7
 8011474:	d830      	bhi.n	80114d8 <_strtoll_l.constprop.0+0xf8>
 8011476:	d102      	bne.n	801147e <_strtoll_l.constprop.0+0x9e>
 8011478:	9b08      	ldr	r3, [sp, #32]
 801147a:	4298      	cmp	r0, r3
 801147c:	d82c      	bhi.n	80114d8 <_strtoll_l.constprop.0+0xf8>
 801147e:	9b08      	ldr	r3, [sp, #32]
 8011480:	4283      	cmp	r3, r0
 8011482:	d106      	bne.n	8011492 <_strtoll_l.constprop.0+0xb2>
 8011484:	428f      	cmp	r7, r1
 8011486:	d104      	bne.n	8011492 <_strtoll_l.constprop.0+0xb2>
 8011488:	2301      	movs	r3, #1
 801148a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801148c:	425b      	negs	r3, r3
 801148e:	42a2      	cmp	r2, r4
 8011490:	db0d      	blt.n	80114ae <_strtoll_l.constprop.0+0xce>
 8011492:	000b      	movs	r3, r1
 8011494:	0002      	movs	r2, r0
 8011496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011498:	0030      	movs	r0, r6
 801149a:	f7ef f823 	bl	80004e4 <__aeabi_lmul>
 801149e:	17e3      	asrs	r3, r4, #31
 80114a0:	9406      	str	r4, [sp, #24]
 80114a2:	9307      	str	r3, [sp, #28]
 80114a4:	9b06      	ldr	r3, [sp, #24]
 80114a6:	9c07      	ldr	r4, [sp, #28]
 80114a8:	18c0      	adds	r0, r0, r3
 80114aa:	4161      	adcs	r1, r4
 80114ac:	2301      	movs	r3, #1
 80114ae:	782c      	ldrb	r4, [r5, #0]
 80114b0:	3501      	adds	r5, #1
 80114b2:	e7d5      	b.n	8011460 <_strtoll_l.constprop.0+0x80>
 80114b4:	9701      	str	r7, [sp, #4]
 80114b6:	2c2b      	cmp	r4, #43	; 0x2b
 80114b8:	d1ac      	bne.n	8011414 <_strtoll_l.constprop.0+0x34>
 80114ba:	781c      	ldrb	r4, [r3, #0]
 80114bc:	1c95      	adds	r5, r2, #2
 80114be:	e7a9      	b.n	8011414 <_strtoll_l.constprop.0+0x34>
 80114c0:	0022      	movs	r2, r4
 80114c2:	3a41      	subs	r2, #65	; 0x41
 80114c4:	2a19      	cmp	r2, #25
 80114c6:	d801      	bhi.n	80114cc <_strtoll_l.constprop.0+0xec>
 80114c8:	3c37      	subs	r4, #55	; 0x37
 80114ca:	e7ce      	b.n	801146a <_strtoll_l.constprop.0+0x8a>
 80114cc:	0022      	movs	r2, r4
 80114ce:	3a61      	subs	r2, #97	; 0x61
 80114d0:	2a19      	cmp	r2, #25
 80114d2:	d804      	bhi.n	80114de <_strtoll_l.constprop.0+0xfe>
 80114d4:	3c57      	subs	r4, #87	; 0x57
 80114d6:	e7c8      	b.n	801146a <_strtoll_l.constprop.0+0x8a>
 80114d8:	2301      	movs	r3, #1
 80114da:	425b      	negs	r3, r3
 80114dc:	e7e7      	b.n	80114ae <_strtoll_l.constprop.0+0xce>
 80114de:	1c5a      	adds	r2, r3, #1
 80114e0:	d109      	bne.n	80114f6 <_strtoll_l.constprop.0+0x116>
 80114e2:	9804      	ldr	r0, [sp, #16]
 80114e4:	9905      	ldr	r1, [sp, #20]
 80114e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114e8:	3323      	adds	r3, #35	; 0x23
 80114ea:	6013      	str	r3, [r2, #0]
 80114ec:	9b03      	ldr	r3, [sp, #12]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10e      	bne.n	8011510 <_strtoll_l.constprop.0+0x130>
 80114f2:	b00d      	add	sp, #52	; 0x34
 80114f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114f6:	9a01      	ldr	r2, [sp, #4]
 80114f8:	2a00      	cmp	r2, #0
 80114fa:	d004      	beq.n	8011506 <_strtoll_l.constprop.0+0x126>
 80114fc:	0006      	movs	r6, r0
 80114fe:	000f      	movs	r7, r1
 8011500:	2100      	movs	r1, #0
 8011502:	4270      	negs	r0, r6
 8011504:	41b9      	sbcs	r1, r7
 8011506:	9a03      	ldr	r2, [sp, #12]
 8011508:	2a00      	cmp	r2, #0
 801150a:	d0f2      	beq.n	80114f2 <_strtoll_l.constprop.0+0x112>
 801150c:	2b00      	cmp	r3, #0
 801150e:	d001      	beq.n	8011514 <_strtoll_l.constprop.0+0x134>
 8011510:	1e6b      	subs	r3, r5, #1
 8011512:	9302      	str	r3, [sp, #8]
 8011514:	9b03      	ldr	r3, [sp, #12]
 8011516:	9a02      	ldr	r2, [sp, #8]
 8011518:	601a      	str	r2, [r3, #0]
 801151a:	e7ea      	b.n	80114f2 <_strtoll_l.constprop.0+0x112>
 801151c:	2430      	movs	r4, #48	; 0x30
 801151e:	2e00      	cmp	r6, #0
 8011520:	d000      	beq.n	8011524 <_strtoll_l.constprop.0+0x144>
 8011522:	e787      	b.n	8011434 <_strtoll_l.constprop.0+0x54>
 8011524:	3608      	adds	r6, #8
 8011526:	e785      	b.n	8011434 <_strtoll_l.constprop.0+0x54>
 8011528:	2c30      	cmp	r4, #48	; 0x30
 801152a:	d100      	bne.n	801152e <_strtoll_l.constprop.0+0x14e>
 801152c:	e779      	b.n	8011422 <_strtoll_l.constprop.0+0x42>
 801152e:	260a      	movs	r6, #10
 8011530:	e780      	b.n	8011434 <_strtoll_l.constprop.0+0x54>
 8011532:	46c0      	nop			; (mov r8, r8)
 8011534:	080148c9 	.word	0x080148c9
 8011538:	7fffffff 	.word	0x7fffffff

0801153c <_strtoll_r>:
 801153c:	b510      	push	{r4, lr}
 801153e:	f7ff ff4f 	bl	80113e0 <_strtoll_l.constprop.0>
 8011542:	bd10      	pop	{r4, pc}

08011544 <_strtoull_l.constprop.0>:
 8011544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011546:	b08b      	sub	sp, #44	; 0x2c
 8011548:	9202      	str	r2, [sp, #8]
 801154a:	4a54      	ldr	r2, [pc, #336]	; (801169c <_strtoull_l.constprop.0+0x158>)
 801154c:	001e      	movs	r6, r3
 801154e:	9101      	str	r1, [sp, #4]
 8011550:	000b      	movs	r3, r1
 8011552:	4694      	mov	ip, r2
 8011554:	2108      	movs	r1, #8
 8011556:	9009      	str	r0, [sp, #36]	; 0x24
 8011558:	001a      	movs	r2, r3
 801155a:	4660      	mov	r0, ip
 801155c:	7814      	ldrb	r4, [r2, #0]
 801155e:	3301      	adds	r3, #1
 8011560:	5d00      	ldrb	r0, [r0, r4]
 8011562:	001d      	movs	r5, r3
 8011564:	0007      	movs	r7, r0
 8011566:	400f      	ands	r7, r1
 8011568:	4208      	tst	r0, r1
 801156a:	d1f5      	bne.n	8011558 <_strtoull_l.constprop.0+0x14>
 801156c:	2c2d      	cmp	r4, #45	; 0x2d
 801156e:	d154      	bne.n	801161a <_strtoull_l.constprop.0+0xd6>
 8011570:	781c      	ldrb	r4, [r3, #0]
 8011572:	2301      	movs	r3, #1
 8011574:	1c95      	adds	r5, r2, #2
 8011576:	9306      	str	r3, [sp, #24]
 8011578:	2e00      	cmp	r6, #0
 801157a:	d100      	bne.n	801157e <_strtoull_l.constprop.0+0x3a>
 801157c:	e088      	b.n	8011690 <_strtoull_l.constprop.0+0x14c>
 801157e:	2e10      	cmp	r6, #16
 8011580:	d10a      	bne.n	8011598 <_strtoull_l.constprop.0+0x54>
 8011582:	2c30      	cmp	r4, #48	; 0x30
 8011584:	d108      	bne.n	8011598 <_strtoull_l.constprop.0+0x54>
 8011586:	2220      	movs	r2, #32
 8011588:	782b      	ldrb	r3, [r5, #0]
 801158a:	4393      	bics	r3, r2
 801158c:	2b58      	cmp	r3, #88	; 0x58
 801158e:	d000      	beq.n	8011592 <_strtoull_l.constprop.0+0x4e>
 8011590:	e078      	b.n	8011684 <_strtoull_l.constprop.0+0x140>
 8011592:	2610      	movs	r6, #16
 8011594:	786c      	ldrb	r4, [r5, #1]
 8011596:	3502      	adds	r5, #2
 8011598:	17f7      	asrs	r7, r6, #31
 801159a:	0032      	movs	r2, r6
 801159c:	003b      	movs	r3, r7
 801159e:	2001      	movs	r0, #1
 80115a0:	4240      	negs	r0, r0
 80115a2:	17c1      	asrs	r1, r0, #31
 80115a4:	f7ee ff7e 	bl	80004a4 <__aeabi_uldivmod>
 80115a8:	0032      	movs	r2, r6
 80115aa:	9007      	str	r0, [sp, #28]
 80115ac:	9103      	str	r1, [sp, #12]
 80115ae:	003b      	movs	r3, r7
 80115b0:	2001      	movs	r0, #1
 80115b2:	4240      	negs	r0, r0
 80115b4:	17c1      	asrs	r1, r0, #31
 80115b6:	f7ee ff75 	bl	80004a4 <__aeabi_uldivmod>
 80115ba:	2300      	movs	r3, #0
 80115bc:	2000      	movs	r0, #0
 80115be:	2100      	movs	r1, #0
 80115c0:	9208      	str	r2, [sp, #32]
 80115c2:	0022      	movs	r2, r4
 80115c4:	3a30      	subs	r2, #48	; 0x30
 80115c6:	2a09      	cmp	r2, #9
 80115c8:	d82d      	bhi.n	8011626 <_strtoull_l.constprop.0+0xe2>
 80115ca:	0014      	movs	r4, r2
 80115cc:	42a6      	cmp	r6, r4
 80115ce:	dd39      	ble.n	8011644 <_strtoull_l.constprop.0+0x100>
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	d01f      	beq.n	8011614 <_strtoull_l.constprop.0+0xd0>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	4299      	cmp	r1, r3
 80115d8:	d831      	bhi.n	801163e <_strtoull_l.constprop.0+0xfa>
 80115da:	d102      	bne.n	80115e2 <_strtoull_l.constprop.0+0x9e>
 80115dc:	9b07      	ldr	r3, [sp, #28]
 80115de:	4298      	cmp	r0, r3
 80115e0:	d82d      	bhi.n	801163e <_strtoull_l.constprop.0+0xfa>
 80115e2:	9b07      	ldr	r3, [sp, #28]
 80115e4:	4283      	cmp	r3, r0
 80115e6:	d107      	bne.n	80115f8 <_strtoull_l.constprop.0+0xb4>
 80115e8:	9b03      	ldr	r3, [sp, #12]
 80115ea:	428b      	cmp	r3, r1
 80115ec:	d104      	bne.n	80115f8 <_strtoull_l.constprop.0+0xb4>
 80115ee:	2301      	movs	r3, #1
 80115f0:	9a08      	ldr	r2, [sp, #32]
 80115f2:	425b      	negs	r3, r3
 80115f4:	42a2      	cmp	r2, r4
 80115f6:	db0d      	blt.n	8011614 <_strtoull_l.constprop.0+0xd0>
 80115f8:	000b      	movs	r3, r1
 80115fa:	0002      	movs	r2, r0
 80115fc:	0039      	movs	r1, r7
 80115fe:	0030      	movs	r0, r6
 8011600:	f7ee ff70 	bl	80004e4 <__aeabi_lmul>
 8011604:	17e3      	asrs	r3, r4, #31
 8011606:	9404      	str	r4, [sp, #16]
 8011608:	9305      	str	r3, [sp, #20]
 801160a:	9b04      	ldr	r3, [sp, #16]
 801160c:	9c05      	ldr	r4, [sp, #20]
 801160e:	18c0      	adds	r0, r0, r3
 8011610:	4161      	adcs	r1, r4
 8011612:	2301      	movs	r3, #1
 8011614:	782c      	ldrb	r4, [r5, #0]
 8011616:	3501      	adds	r5, #1
 8011618:	e7d3      	b.n	80115c2 <_strtoull_l.constprop.0+0x7e>
 801161a:	9706      	str	r7, [sp, #24]
 801161c:	2c2b      	cmp	r4, #43	; 0x2b
 801161e:	d1ab      	bne.n	8011578 <_strtoull_l.constprop.0+0x34>
 8011620:	781c      	ldrb	r4, [r3, #0]
 8011622:	1c95      	adds	r5, r2, #2
 8011624:	e7a8      	b.n	8011578 <_strtoull_l.constprop.0+0x34>
 8011626:	0022      	movs	r2, r4
 8011628:	3a41      	subs	r2, #65	; 0x41
 801162a:	2a19      	cmp	r2, #25
 801162c:	d801      	bhi.n	8011632 <_strtoull_l.constprop.0+0xee>
 801162e:	3c37      	subs	r4, #55	; 0x37
 8011630:	e7cc      	b.n	80115cc <_strtoull_l.constprop.0+0x88>
 8011632:	0022      	movs	r2, r4
 8011634:	3a61      	subs	r2, #97	; 0x61
 8011636:	2a19      	cmp	r2, #25
 8011638:	d804      	bhi.n	8011644 <_strtoull_l.constprop.0+0x100>
 801163a:	3c57      	subs	r4, #87	; 0x57
 801163c:	e7c6      	b.n	80115cc <_strtoull_l.constprop.0+0x88>
 801163e:	2301      	movs	r3, #1
 8011640:	425b      	negs	r3, r3
 8011642:	e7e7      	b.n	8011614 <_strtoull_l.constprop.0+0xd0>
 8011644:	1c5a      	adds	r2, r3, #1
 8011646:	d10a      	bne.n	801165e <_strtoull_l.constprop.0+0x11a>
 8011648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801164a:	3323      	adds	r3, #35	; 0x23
 801164c:	6013      	str	r3, [r2, #0]
 801164e:	9b02      	ldr	r3, [sp, #8]
 8011650:	2001      	movs	r0, #1
 8011652:	4240      	negs	r0, r0
 8011654:	17c1      	asrs	r1, r0, #31
 8011656:	2b00      	cmp	r3, #0
 8011658:	d10e      	bne.n	8011678 <_strtoull_l.constprop.0+0x134>
 801165a:	b00b      	add	sp, #44	; 0x2c
 801165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801165e:	9a06      	ldr	r2, [sp, #24]
 8011660:	2a00      	cmp	r2, #0
 8011662:	d004      	beq.n	801166e <_strtoull_l.constprop.0+0x12a>
 8011664:	0006      	movs	r6, r0
 8011666:	000f      	movs	r7, r1
 8011668:	2100      	movs	r1, #0
 801166a:	4270      	negs	r0, r6
 801166c:	41b9      	sbcs	r1, r7
 801166e:	9a02      	ldr	r2, [sp, #8]
 8011670:	2a00      	cmp	r2, #0
 8011672:	d0f2      	beq.n	801165a <_strtoull_l.constprop.0+0x116>
 8011674:	2b00      	cmp	r3, #0
 8011676:	d001      	beq.n	801167c <_strtoull_l.constprop.0+0x138>
 8011678:	1e6b      	subs	r3, r5, #1
 801167a:	9301      	str	r3, [sp, #4]
 801167c:	9b02      	ldr	r3, [sp, #8]
 801167e:	9a01      	ldr	r2, [sp, #4]
 8011680:	601a      	str	r2, [r3, #0]
 8011682:	e7ea      	b.n	801165a <_strtoull_l.constprop.0+0x116>
 8011684:	2430      	movs	r4, #48	; 0x30
 8011686:	2e00      	cmp	r6, #0
 8011688:	d000      	beq.n	801168c <_strtoull_l.constprop.0+0x148>
 801168a:	e785      	b.n	8011598 <_strtoull_l.constprop.0+0x54>
 801168c:	3608      	adds	r6, #8
 801168e:	e783      	b.n	8011598 <_strtoull_l.constprop.0+0x54>
 8011690:	2c30      	cmp	r4, #48	; 0x30
 8011692:	d100      	bne.n	8011696 <_strtoull_l.constprop.0+0x152>
 8011694:	e777      	b.n	8011586 <_strtoull_l.constprop.0+0x42>
 8011696:	260a      	movs	r6, #10
 8011698:	e77e      	b.n	8011598 <_strtoull_l.constprop.0+0x54>
 801169a:	46c0      	nop			; (mov r8, r8)
 801169c:	080148c9 	.word	0x080148c9

080116a0 <_strtoull_r>:
 80116a0:	b510      	push	{r4, lr}
 80116a2:	f7ff ff4f 	bl	8011544 <_strtoull_l.constprop.0>
 80116a6:	bd10      	pop	{r4, pc}

080116a8 <_mbrtowc_r>:
 80116a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116aa:	0004      	movs	r4, r0
 80116ac:	0010      	movs	r0, r2
 80116ae:	4a0b      	ldr	r2, [pc, #44]	; (80116dc <_mbrtowc_r+0x34>)
 80116b0:	9d06      	ldr	r5, [sp, #24]
 80116b2:	32e4      	adds	r2, #228	; 0xe4
 80116b4:	6816      	ldr	r6, [r2, #0]
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d10c      	bne.n	80116d4 <_mbrtowc_r+0x2c>
 80116ba:	2301      	movs	r3, #1
 80116bc:	0001      	movs	r1, r0
 80116be:	4a08      	ldr	r2, [pc, #32]	; (80116e0 <_mbrtowc_r+0x38>)
 80116c0:	9500      	str	r5, [sp, #0]
 80116c2:	0020      	movs	r0, r4
 80116c4:	47b0      	blx	r6
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d103      	bne.n	80116d2 <_mbrtowc_r+0x2a>
 80116ca:	2300      	movs	r3, #0
 80116cc:	602b      	str	r3, [r5, #0]
 80116ce:	338a      	adds	r3, #138	; 0x8a
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80116d4:	0002      	movs	r2, r0
 80116d6:	9500      	str	r5, [sp, #0]
 80116d8:	e7f3      	b.n	80116c2 <_mbrtowc_r+0x1a>
 80116da:	46c0      	nop			; (mov r8, r8)
 80116dc:	20000444 	.word	0x20000444
 80116e0:	08014c53 	.word	0x08014c53

080116e4 <iswspace>:
 80116e4:	b510      	push	{r4, lr}
 80116e6:	2100      	movs	r1, #0
 80116e8:	f000 f802 	bl	80116f0 <iswspace_l>
 80116ec:	bd10      	pop	{r4, pc}
	...

080116f0 <iswspace_l>:
 80116f0:	0003      	movs	r3, r0
 80116f2:	2000      	movs	r0, #0
 80116f4:	2bff      	cmp	r3, #255	; 0xff
 80116f6:	d803      	bhi.n	8011700 <iswspace_l+0x10>
 80116f8:	4a02      	ldr	r2, [pc, #8]	; (8011704 <iswspace_l+0x14>)
 80116fa:	5cd0      	ldrb	r0, [r2, r3]
 80116fc:	2308      	movs	r3, #8
 80116fe:	4018      	ands	r0, r3
 8011700:	4770      	bx	lr
 8011702:	46c0      	nop			; (mov r8, r8)
 8011704:	080148c9 	.word	0x080148c9

08011708 <fiprintf>:
 8011708:	b40e      	push	{r1, r2, r3}
 801170a:	b517      	push	{r0, r1, r2, r4, lr}
 801170c:	4c05      	ldr	r4, [pc, #20]	; (8011724 <fiprintf+0x1c>)
 801170e:	ab05      	add	r3, sp, #20
 8011710:	cb04      	ldmia	r3!, {r2}
 8011712:	0001      	movs	r1, r0
 8011714:	6820      	ldr	r0, [r4, #0]
 8011716:	9301      	str	r3, [sp, #4]
 8011718:	f000 f954 	bl	80119c4 <_vfiprintf_r>
 801171c:	bc1e      	pop	{r1, r2, r3, r4}
 801171e:	bc08      	pop	{r3}
 8011720:	b003      	add	sp, #12
 8011722:	4718      	bx	r3
 8011724:	200006d0 	.word	0x200006d0

08011728 <__ssprint_r>:
 8011728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801172a:	6813      	ldr	r3, [r2, #0]
 801172c:	b087      	sub	sp, #28
 801172e:	0017      	movs	r7, r2
 8011730:	9303      	str	r3, [sp, #12]
 8011732:	6893      	ldr	r3, [r2, #8]
 8011734:	2200      	movs	r2, #0
 8011736:	000c      	movs	r4, r1
 8011738:	9005      	str	r0, [sp, #20]
 801173a:	9202      	str	r2, [sp, #8]
 801173c:	9201      	str	r2, [sp, #4]
 801173e:	4293      	cmp	r3, r2
 8011740:	d10d      	bne.n	801175e <__ssprint_r+0x36>
 8011742:	2000      	movs	r0, #0
 8011744:	2300      	movs	r3, #0
 8011746:	607b      	str	r3, [r7, #4]
 8011748:	b007      	add	sp, #28
 801174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	9302      	str	r3, [sp, #8]
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	9301      	str	r3, [sp, #4]
 8011758:	9b03      	ldr	r3, [sp, #12]
 801175a:	3308      	adds	r3, #8
 801175c:	9303      	str	r3, [sp, #12]
 801175e:	9a01      	ldr	r2, [sp, #4]
 8011760:	68a6      	ldr	r6, [r4, #8]
 8011762:	6823      	ldr	r3, [r4, #0]
 8011764:	2a00      	cmp	r2, #0
 8011766:	d0f1      	beq.n	801174c <__ssprint_r+0x24>
 8011768:	42b2      	cmp	r2, r6
 801176a:	d32e      	bcc.n	80117ca <__ssprint_r+0xa2>
 801176c:	2190      	movs	r1, #144	; 0x90
 801176e:	89a2      	ldrh	r2, [r4, #12]
 8011770:	00c9      	lsls	r1, r1, #3
 8011772:	420a      	tst	r2, r1
 8011774:	d029      	beq.n	80117ca <__ssprint_r+0xa2>
 8011776:	2003      	movs	r0, #3
 8011778:	6921      	ldr	r1, [r4, #16]
 801177a:	1a5b      	subs	r3, r3, r1
 801177c:	9304      	str	r3, [sp, #16]
 801177e:	6963      	ldr	r3, [r4, #20]
 8011780:	4343      	muls	r3, r0
 8011782:	0fdd      	lsrs	r5, r3, #31
 8011784:	18ed      	adds	r5, r5, r3
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	9801      	ldr	r0, [sp, #4]
 801178a:	3301      	adds	r3, #1
 801178c:	181b      	adds	r3, r3, r0
 801178e:	106d      	asrs	r5, r5, #1
 8011790:	42ab      	cmp	r3, r5
 8011792:	d900      	bls.n	8011796 <__ssprint_r+0x6e>
 8011794:	001d      	movs	r5, r3
 8011796:	0552      	lsls	r2, r2, #21
 8011798:	d532      	bpl.n	8011800 <__ssprint_r+0xd8>
 801179a:	0029      	movs	r1, r5
 801179c:	9805      	ldr	r0, [sp, #20]
 801179e:	f7f9 f9e1 	bl	800ab64 <_malloc_r>
 80117a2:	1e06      	subs	r6, r0, #0
 80117a4:	d036      	beq.n	8011814 <__ssprint_r+0xec>
 80117a6:	9a04      	ldr	r2, [sp, #16]
 80117a8:	6921      	ldr	r1, [r4, #16]
 80117aa:	f7fa fe1a 	bl	800c3e2 <memcpy>
 80117ae:	89a2      	ldrh	r2, [r4, #12]
 80117b0:	4b1e      	ldr	r3, [pc, #120]	; (801182c <__ssprint_r+0x104>)
 80117b2:	401a      	ands	r2, r3
 80117b4:	2380      	movs	r3, #128	; 0x80
 80117b6:	4313      	orrs	r3, r2
 80117b8:	81a3      	strh	r3, [r4, #12]
 80117ba:	9b04      	ldr	r3, [sp, #16]
 80117bc:	6126      	str	r6, [r4, #16]
 80117be:	18f6      	adds	r6, r6, r3
 80117c0:	6026      	str	r6, [r4, #0]
 80117c2:	6165      	str	r5, [r4, #20]
 80117c4:	9e01      	ldr	r6, [sp, #4]
 80117c6:	1aed      	subs	r5, r5, r3
 80117c8:	60a5      	str	r5, [r4, #8]
 80117ca:	9b01      	ldr	r3, [sp, #4]
 80117cc:	429e      	cmp	r6, r3
 80117ce:	d900      	bls.n	80117d2 <__ssprint_r+0xaa>
 80117d0:	001e      	movs	r6, r3
 80117d2:	0032      	movs	r2, r6
 80117d4:	9902      	ldr	r1, [sp, #8]
 80117d6:	6820      	ldr	r0, [r4, #0]
 80117d8:	f001 f86d 	bl	80128b6 <memmove>
 80117dc:	9a01      	ldr	r2, [sp, #4]
 80117de:	68a3      	ldr	r3, [r4, #8]
 80117e0:	4694      	mov	ip, r2
 80117e2:	1b9b      	subs	r3, r3, r6
 80117e4:	60a3      	str	r3, [r4, #8]
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	199b      	adds	r3, r3, r6
 80117ea:	6023      	str	r3, [r4, #0]
 80117ec:	9b02      	ldr	r3, [sp, #8]
 80117ee:	4463      	add	r3, ip
 80117f0:	9302      	str	r3, [sp, #8]
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	1a9b      	subs	r3, r3, r2
 80117f6:	60bb      	str	r3, [r7, #8]
 80117f8:	d0a3      	beq.n	8011742 <__ssprint_r+0x1a>
 80117fa:	2300      	movs	r3, #0
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	e7ae      	b.n	801175e <__ssprint_r+0x36>
 8011800:	002a      	movs	r2, r5
 8011802:	9805      	ldr	r0, [sp, #20]
 8011804:	f7ff fc46 	bl	8011094 <_realloc_r>
 8011808:	1e06      	subs	r6, r0, #0
 801180a:	d1d6      	bne.n	80117ba <__ssprint_r+0x92>
 801180c:	6921      	ldr	r1, [r4, #16]
 801180e:	9805      	ldr	r0, [sp, #20]
 8011810:	f7fa fe62 	bl	800c4d8 <_free_r>
 8011814:	230c      	movs	r3, #12
 8011816:	9a05      	ldr	r2, [sp, #20]
 8011818:	2001      	movs	r0, #1
 801181a:	6013      	str	r3, [r2, #0]
 801181c:	89a2      	ldrh	r2, [r4, #12]
 801181e:	3334      	adds	r3, #52	; 0x34
 8011820:	4313      	orrs	r3, r2
 8011822:	81a3      	strh	r3, [r4, #12]
 8011824:	2300      	movs	r3, #0
 8011826:	4240      	negs	r0, r0
 8011828:	60bb      	str	r3, [r7, #8]
 801182a:	e78b      	b.n	8011744 <__ssprint_r+0x1c>
 801182c:	fffffb7f 	.word	0xfffffb7f

08011830 <_sungetc_r>:
 8011830:	b570      	push	{r4, r5, r6, lr}
 8011832:	0014      	movs	r4, r2
 8011834:	1c4b      	adds	r3, r1, #1
 8011836:	d103      	bne.n	8011840 <_sungetc_r+0x10>
 8011838:	2501      	movs	r5, #1
 801183a:	426d      	negs	r5, r5
 801183c:	0028      	movs	r0, r5
 801183e:	bd70      	pop	{r4, r5, r6, pc}
 8011840:	8993      	ldrh	r3, [r2, #12]
 8011842:	2220      	movs	r2, #32
 8011844:	4393      	bics	r3, r2
 8011846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011848:	81a3      	strh	r3, [r4, #12]
 801184a:	b2ce      	uxtb	r6, r1
 801184c:	6863      	ldr	r3, [r4, #4]
 801184e:	b2cd      	uxtb	r5, r1
 8011850:	2a00      	cmp	r2, #0
 8011852:	d010      	beq.n	8011876 <_sungetc_r+0x46>
 8011854:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011856:	429a      	cmp	r2, r3
 8011858:	dd07      	ble.n	801186a <_sungetc_r+0x3a>
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	3b01      	subs	r3, #1
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	701e      	strb	r6, [r3, #0]
 8011862:	6863      	ldr	r3, [r4, #4]
 8011864:	3301      	adds	r3, #1
 8011866:	6063      	str	r3, [r4, #4]
 8011868:	e7e8      	b.n	801183c <_sungetc_r+0xc>
 801186a:	0021      	movs	r1, r4
 801186c:	f000 ff1a 	bl	80126a4 <__submore>
 8011870:	2800      	cmp	r0, #0
 8011872:	d0f2      	beq.n	801185a <_sungetc_r+0x2a>
 8011874:	e7e0      	b.n	8011838 <_sungetc_r+0x8>
 8011876:	6921      	ldr	r1, [r4, #16]
 8011878:	6822      	ldr	r2, [r4, #0]
 801187a:	2900      	cmp	r1, #0
 801187c:	d007      	beq.n	801188e <_sungetc_r+0x5e>
 801187e:	4291      	cmp	r1, r2
 8011880:	d205      	bcs.n	801188e <_sungetc_r+0x5e>
 8011882:	1e51      	subs	r1, r2, #1
 8011884:	7808      	ldrb	r0, [r1, #0]
 8011886:	42a8      	cmp	r0, r5
 8011888:	d101      	bne.n	801188e <_sungetc_r+0x5e>
 801188a:	6021      	str	r1, [r4, #0]
 801188c:	e7ea      	b.n	8011864 <_sungetc_r+0x34>
 801188e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011890:	0023      	movs	r3, r4
 8011892:	3340      	adds	r3, #64	; 0x40
 8011894:	6323      	str	r3, [r4, #48]	; 0x30
 8011896:	2303      	movs	r3, #3
 8011898:	6363      	str	r3, [r4, #52]	; 0x34
 801189a:	0023      	movs	r3, r4
 801189c:	3342      	adds	r3, #66	; 0x42
 801189e:	63a2      	str	r2, [r4, #56]	; 0x38
 80118a0:	701e      	strb	r6, [r3, #0]
 80118a2:	6023      	str	r3, [r4, #0]
 80118a4:	2301      	movs	r3, #1
 80118a6:	e7de      	b.n	8011866 <_sungetc_r+0x36>

080118a8 <__ssrefill_r>:
 80118a8:	b510      	push	{r4, lr}
 80118aa:	000c      	movs	r4, r1
 80118ac:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80118ae:	2900      	cmp	r1, #0
 80118b0:	d00e      	beq.n	80118d0 <__ssrefill_r+0x28>
 80118b2:	0023      	movs	r3, r4
 80118b4:	3340      	adds	r3, #64	; 0x40
 80118b6:	4299      	cmp	r1, r3
 80118b8:	d001      	beq.n	80118be <__ssrefill_r+0x16>
 80118ba:	f7fa fe0d 	bl	800c4d8 <_free_r>
 80118be:	2000      	movs	r0, #0
 80118c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80118c2:	6320      	str	r0, [r4, #48]	; 0x30
 80118c4:	6063      	str	r3, [r4, #4]
 80118c6:	4283      	cmp	r3, r0
 80118c8:	d002      	beq.n	80118d0 <__ssrefill_r+0x28>
 80118ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80118cc:	6023      	str	r3, [r4, #0]
 80118ce:	bd10      	pop	{r4, pc}
 80118d0:	6923      	ldr	r3, [r4, #16]
 80118d2:	2001      	movs	r0, #1
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	2300      	movs	r3, #0
 80118d8:	89a2      	ldrh	r2, [r4, #12]
 80118da:	6063      	str	r3, [r4, #4]
 80118dc:	3320      	adds	r3, #32
 80118de:	4313      	orrs	r3, r2
 80118e0:	81a3      	strh	r3, [r4, #12]
 80118e2:	4240      	negs	r0, r0
 80118e4:	e7f3      	b.n	80118ce <__ssrefill_r+0x26>

080118e6 <_sfread_r>:
 80118e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118e8:	0014      	movs	r4, r2
 80118ea:	435c      	muls	r4, r3
 80118ec:	b087      	sub	sp, #28
 80118ee:	1e26      	subs	r6, r4, #0
 80118f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80118f2:	9005      	str	r0, [sp, #20]
 80118f4:	9101      	str	r1, [sp, #4]
 80118f6:	9202      	str	r2, [sp, #8]
 80118f8:	9303      	str	r3, [sp, #12]
 80118fa:	d11e      	bne.n	801193a <_sfread_r+0x54>
 80118fc:	0020      	movs	r0, r4
 80118fe:	b007      	add	sp, #28
 8011900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011902:	003a      	movs	r2, r7
 8011904:	9801      	ldr	r0, [sp, #4]
 8011906:	f7fa fd6c 	bl	800c3e2 <memcpy>
 801190a:	682b      	ldr	r3, [r5, #0]
 801190c:	0029      	movs	r1, r5
 801190e:	19db      	adds	r3, r3, r7
 8011910:	602b      	str	r3, [r5, #0]
 8011912:	2300      	movs	r3, #0
 8011914:	606b      	str	r3, [r5, #4]
 8011916:	9b01      	ldr	r3, [sp, #4]
 8011918:	9805      	ldr	r0, [sp, #20]
 801191a:	19db      	adds	r3, r3, r7
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	1bf3      	subs	r3, r6, r7
 8011920:	9304      	str	r3, [sp, #16]
 8011922:	f7ff ffc1 	bl	80118a8 <__ssrefill_r>
 8011926:	2800      	cmp	r0, #0
 8011928:	d006      	beq.n	8011938 <_sfread_r+0x52>
 801192a:	193c      	adds	r4, r7, r4
 801192c:	1ba0      	subs	r0, r4, r6
 801192e:	9902      	ldr	r1, [sp, #8]
 8011930:	f7ee fc04 	bl	800013c <__udivsi3>
 8011934:	0004      	movs	r4, r0
 8011936:	e7e1      	b.n	80118fc <_sfread_r+0x16>
 8011938:	9e04      	ldr	r6, [sp, #16]
 801193a:	686f      	ldr	r7, [r5, #4]
 801193c:	6829      	ldr	r1, [r5, #0]
 801193e:	42b7      	cmp	r7, r6
 8011940:	d3df      	bcc.n	8011902 <_sfread_r+0x1c>
 8011942:	0032      	movs	r2, r6
 8011944:	9801      	ldr	r0, [sp, #4]
 8011946:	f7fa fd4c 	bl	800c3e2 <memcpy>
 801194a:	686b      	ldr	r3, [r5, #4]
 801194c:	9c03      	ldr	r4, [sp, #12]
 801194e:	1b9b      	subs	r3, r3, r6
 8011950:	606b      	str	r3, [r5, #4]
 8011952:	682b      	ldr	r3, [r5, #0]
 8011954:	199b      	adds	r3, r3, r6
 8011956:	602b      	str	r3, [r5, #0]
 8011958:	e7d0      	b.n	80118fc <_sfread_r+0x16>

0801195a <__sprint_r>:
 801195a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801195c:	6893      	ldr	r3, [r2, #8]
 801195e:	b085      	sub	sp, #20
 8011960:	9001      	str	r0, [sp, #4]
 8011962:	000d      	movs	r5, r1
 8011964:	0014      	movs	r4, r2
 8011966:	1e18      	subs	r0, r3, #0
 8011968:	d018      	beq.n	801199c <__sprint_r+0x42>
 801196a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801196c:	049b      	lsls	r3, r3, #18
 801196e:	d524      	bpl.n	80119ba <__sprint_r+0x60>
 8011970:	6817      	ldr	r7, [r2, #0]
 8011972:	2600      	movs	r6, #0
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	9302      	str	r3, [sp, #8]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	089b      	lsrs	r3, r3, #2
 801197e:	9303      	str	r3, [sp, #12]
 8011980:	9b03      	ldr	r3, [sp, #12]
 8011982:	42b3      	cmp	r3, r6
 8011984:	dc0e      	bgt.n	80119a4 <__sprint_r+0x4a>
 8011986:	2203      	movs	r2, #3
 8011988:	9b00      	ldr	r3, [sp, #0]
 801198a:	68a0      	ldr	r0, [r4, #8]
 801198c:	4393      	bics	r3, r2
 801198e:	1ac0      	subs	r0, r0, r3
 8011990:	60a0      	str	r0, [r4, #8]
 8011992:	3708      	adds	r7, #8
 8011994:	2800      	cmp	r0, #0
 8011996:	d1ec      	bne.n	8011972 <__sprint_r+0x18>
 8011998:	2300      	movs	r3, #0
 801199a:	60a3      	str	r3, [r4, #8]
 801199c:	2300      	movs	r3, #0
 801199e:	6063      	str	r3, [r4, #4]
 80119a0:	b005      	add	sp, #20
 80119a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a4:	9902      	ldr	r1, [sp, #8]
 80119a6:	00b3      	lsls	r3, r6, #2
 80119a8:	58c9      	ldr	r1, [r1, r3]
 80119aa:	002a      	movs	r2, r5
 80119ac:	9801      	ldr	r0, [sp, #4]
 80119ae:	f000 ff59 	bl	8012864 <_fputwc_r>
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	d0f0      	beq.n	8011998 <__sprint_r+0x3e>
 80119b6:	3601      	adds	r6, #1
 80119b8:	e7e2      	b.n	8011980 <__sprint_r+0x26>
 80119ba:	9801      	ldr	r0, [sp, #4]
 80119bc:	f000 fd14 	bl	80123e8 <__sfvwrite_r>
 80119c0:	e7ea      	b.n	8011998 <__sprint_r+0x3e>
	...

080119c4 <_vfiprintf_r>:
 80119c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119c6:	b0c1      	sub	sp, #260	; 0x104
 80119c8:	001c      	movs	r4, r3
 80119ca:	001f      	movs	r7, r3
 80119cc:	9006      	str	r0, [sp, #24]
 80119ce:	9103      	str	r1, [sp, #12]
 80119d0:	9207      	str	r2, [sp, #28]
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d004      	beq.n	80119e0 <_vfiprintf_r+0x1c>
 80119d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d101      	bne.n	80119e0 <_vfiprintf_r+0x1c>
 80119dc:	f7fa fad6 	bl	800bf8c <__sinit>
 80119e0:	9b03      	ldr	r3, [sp, #12]
 80119e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119e4:	07db      	lsls	r3, r3, #31
 80119e6:	d407      	bmi.n	80119f8 <_vfiprintf_r+0x34>
 80119e8:	9b03      	ldr	r3, [sp, #12]
 80119ea:	899b      	ldrh	r3, [r3, #12]
 80119ec:	059b      	lsls	r3, r3, #22
 80119ee:	d403      	bmi.n	80119f8 <_vfiprintf_r+0x34>
 80119f0:	9b03      	ldr	r3, [sp, #12]
 80119f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80119f4:	f7fa fce8 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 80119f8:	9b03      	ldr	r3, [sp, #12]
 80119fa:	220c      	movs	r2, #12
 80119fc:	5e9a      	ldrsh	r2, [r3, r2]
 80119fe:	2380      	movs	r3, #128	; 0x80
 8011a00:	019b      	lsls	r3, r3, #6
 8011a02:	421a      	tst	r2, r3
 8011a04:	d107      	bne.n	8011a16 <_vfiprintf_r+0x52>
 8011a06:	4313      	orrs	r3, r2
 8011a08:	9a03      	ldr	r2, [sp, #12]
 8011a0a:	8193      	strh	r3, [r2, #12]
 8011a0c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011a0e:	4aa3      	ldr	r2, [pc, #652]	; (8011c9c <_vfiprintf_r+0x2d8>)
 8011a10:	4013      	ands	r3, r2
 8011a12:	9a03      	ldr	r2, [sp, #12]
 8011a14:	6653      	str	r3, [r2, #100]	; 0x64
 8011a16:	9b03      	ldr	r3, [sp, #12]
 8011a18:	899b      	ldrh	r3, [r3, #12]
 8011a1a:	071b      	lsls	r3, r3, #28
 8011a1c:	d503      	bpl.n	8011a26 <_vfiprintf_r+0x62>
 8011a1e:	9b03      	ldr	r3, [sp, #12]
 8011a20:	691b      	ldr	r3, [r3, #16]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d118      	bne.n	8011a58 <_vfiprintf_r+0x94>
 8011a26:	9903      	ldr	r1, [sp, #12]
 8011a28:	9806      	ldr	r0, [sp, #24]
 8011a2a:	f000 fe79 	bl	8012720 <__swsetup_r>
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d012      	beq.n	8011a58 <_vfiprintf_r+0x94>
 8011a32:	9b03      	ldr	r3, [sp, #12]
 8011a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a36:	07db      	lsls	r3, r3, #31
 8011a38:	d505      	bpl.n	8011a46 <_vfiprintf_r+0x82>
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	425b      	negs	r3, r3
 8011a3e:	9308      	str	r3, [sp, #32]
 8011a40:	9808      	ldr	r0, [sp, #32]
 8011a42:	b041      	add	sp, #260	; 0x104
 8011a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a46:	9b03      	ldr	r3, [sp, #12]
 8011a48:	899b      	ldrh	r3, [r3, #12]
 8011a4a:	059b      	lsls	r3, r3, #22
 8011a4c:	d4f5      	bmi.n	8011a3a <_vfiprintf_r+0x76>
 8011a4e:	9b03      	ldr	r3, [sp, #12]
 8011a50:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011a52:	f7fa fcba 	bl	800c3ca <__retarget_lock_release_recursive>
 8011a56:	e7f0      	b.n	8011a3a <_vfiprintf_r+0x76>
 8011a58:	221a      	movs	r2, #26
 8011a5a:	9b03      	ldr	r3, [sp, #12]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	401a      	ands	r2, r3
 8011a60:	2a0a      	cmp	r2, #10
 8011a62:	d116      	bne.n	8011a92 <_vfiprintf_r+0xce>
 8011a64:	9a03      	ldr	r2, [sp, #12]
 8011a66:	210e      	movs	r1, #14
 8011a68:	5e52      	ldrsh	r2, [r2, r1]
 8011a6a:	2a00      	cmp	r2, #0
 8011a6c:	db11      	blt.n	8011a92 <_vfiprintf_r+0xce>
 8011a6e:	9a03      	ldr	r2, [sp, #12]
 8011a70:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011a72:	07d2      	lsls	r2, r2, #31
 8011a74:	d405      	bmi.n	8011a82 <_vfiprintf_r+0xbe>
 8011a76:	059b      	lsls	r3, r3, #22
 8011a78:	d403      	bmi.n	8011a82 <_vfiprintf_r+0xbe>
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011a7e:	f7fa fca4 	bl	800c3ca <__retarget_lock_release_recursive>
 8011a82:	0023      	movs	r3, r4
 8011a84:	9a07      	ldr	r2, [sp, #28]
 8011a86:	9903      	ldr	r1, [sp, #12]
 8011a88:	9806      	ldr	r0, [sp, #24]
 8011a8a:	f000 fc69 	bl	8012360 <__sbprintf>
 8011a8e:	9008      	str	r0, [sp, #32]
 8011a90:	e7d6      	b.n	8011a40 <_vfiprintf_r+0x7c>
 8011a92:	2300      	movs	r3, #0
 8011a94:	ad17      	add	r5, sp, #92	; 0x5c
 8011a96:	9514      	str	r5, [sp, #80]	; 0x50
 8011a98:	9316      	str	r3, [sp, #88]	; 0x58
 8011a9a:	9315      	str	r3, [sp, #84]	; 0x54
 8011a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8011a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8011aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8011aa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011aa4:	9308      	str	r3, [sp, #32]
 8011aa6:	9c07      	ldr	r4, [sp, #28]
 8011aa8:	7823      	ldrb	r3, [r4, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d002      	beq.n	8011ab4 <_vfiprintf_r+0xf0>
 8011aae:	2b25      	cmp	r3, #37	; 0x25
 8011ab0:	d000      	beq.n	8011ab4 <_vfiprintf_r+0xf0>
 8011ab2:	e08d      	b.n	8011bd0 <_vfiprintf_r+0x20c>
 8011ab4:	9b07      	ldr	r3, [sp, #28]
 8011ab6:	1ae6      	subs	r6, r4, r3
 8011ab8:	429c      	cmp	r4, r3
 8011aba:	d016      	beq.n	8011aea <_vfiprintf_r+0x126>
 8011abc:	602b      	str	r3, [r5, #0]
 8011abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ac0:	606e      	str	r6, [r5, #4]
 8011ac2:	199b      	adds	r3, r3, r6
 8011ac4:	9316      	str	r3, [sp, #88]	; 0x58
 8011ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ac8:	3508      	adds	r5, #8
 8011aca:	3301      	adds	r3, #1
 8011acc:	9315      	str	r3, [sp, #84]	; 0x54
 8011ace:	2b07      	cmp	r3, #7
 8011ad0:	dd08      	ble.n	8011ae4 <_vfiprintf_r+0x120>
 8011ad2:	9903      	ldr	r1, [sp, #12]
 8011ad4:	9806      	ldr	r0, [sp, #24]
 8011ad6:	aa14      	add	r2, sp, #80	; 0x50
 8011ad8:	f7ff ff3f 	bl	801195a <__sprint_r>
 8011adc:	2800      	cmp	r0, #0
 8011ade:	d000      	beq.n	8011ae2 <_vfiprintf_r+0x11e>
 8011ae0:	e3d9      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011ae2:	ad17      	add	r5, sp, #92	; 0x5c
 8011ae4:	9b08      	ldr	r3, [sp, #32]
 8011ae6:	199b      	adds	r3, r3, r6
 8011ae8:	9308      	str	r3, [sp, #32]
 8011aea:	7823      	ldrb	r3, [r4, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d101      	bne.n	8011af4 <_vfiprintf_r+0x130>
 8011af0:	f000 fbf6 	bl	80122e0 <_vfiprintf_r+0x91c>
 8011af4:	2200      	movs	r2, #0
 8011af6:	a912      	add	r1, sp, #72	; 0x48
 8011af8:	70ca      	strb	r2, [r1, #3]
 8011afa:	2101      	movs	r1, #1
 8011afc:	1c63      	adds	r3, r4, #1
 8011afe:	0014      	movs	r4, r2
 8011b00:	4249      	negs	r1, r1
 8011b02:	9105      	str	r1, [sp, #20]
 8011b04:	9209      	str	r2, [sp, #36]	; 0x24
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	9207      	str	r2, [sp, #28]
 8011b0c:	0018      	movs	r0, r3
 8011b0e:	3820      	subs	r0, #32
 8011b10:	285a      	cmp	r0, #90	; 0x5a
 8011b12:	d900      	bls.n	8011b16 <_vfiprintf_r+0x152>
 8011b14:	e362      	b.n	80121dc <_vfiprintf_r+0x818>
 8011b16:	f7ee fb07 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011b1a:	0078      	.short	0x0078
 8011b1c:	03610361 	.word	0x03610361
 8011b20:	03610081 	.word	0x03610081
 8011b24:	03610361 	.word	0x03610361
 8011b28:	0361005d 	.word	0x0361005d
 8011b2c:	00830361 	.word	0x00830361
 8011b30:	0361008b 	.word	0x0361008b
 8011b34:	008f0089 	.word	0x008f0089
 8011b38:	00ad0361 	.word	0x00ad0361
 8011b3c:	00af00af 	.word	0x00af00af
 8011b40:	00af00af 	.word	0x00af00af
 8011b44:	00af00af 	.word	0x00af00af
 8011b48:	00af00af 	.word	0x00af00af
 8011b4c:	036100af 	.word	0x036100af
 8011b50:	03610361 	.word	0x03610361
 8011b54:	03610361 	.word	0x03610361
 8011b58:	03610361 	.word	0x03610361
 8011b5c:	03610361 	.word	0x03610361
 8011b60:	00e600da 	.word	0x00e600da
 8011b64:	03610361 	.word	0x03610361
 8011b68:	03610361 	.word	0x03610361
 8011b6c:	03610361 	.word	0x03610361
 8011b70:	03610361 	.word	0x03610361
 8011b74:	03610361 	.word	0x03610361
 8011b78:	03610143 	.word	0x03610143
 8011b7c:	03610361 	.word	0x03610361
 8011b80:	03610182 	.word	0x03610182
 8011b84:	0361027c 	.word	0x0361027c
 8011b88:	02ae0361 	.word	0x02ae0361
 8011b8c:	03610361 	.word	0x03610361
 8011b90:	03610361 	.word	0x03610361
 8011b94:	03610361 	.word	0x03610361
 8011b98:	03610361 	.word	0x03610361
 8011b9c:	03610361 	.word	0x03610361
 8011ba0:	00e800da 	.word	0x00e800da
 8011ba4:	03610361 	.word	0x03610361
 8011ba8:	00c30361 	.word	0x00c30361
 8011bac:	00d600e8 	.word	0x00d600e8
 8011bb0:	00cf0361 	.word	0x00cf0361
 8011bb4:	01260361 	.word	0x01260361
 8011bb8:	01740145 	.word	0x01740145
 8011bbc:	036100d6 	.word	0x036100d6
 8011bc0:	007f0182 	.word	0x007f0182
 8011bc4:	0361027e 	.word	0x0361027e
 8011bc8:	02cd0361 	.word	0x02cd0361
 8011bcc:	007f0361 	.word	0x007f0361
 8011bd0:	3401      	adds	r4, #1
 8011bd2:	e769      	b.n	8011aa8 <_vfiprintf_r+0xe4>
 8011bd4:	9806      	ldr	r0, [sp, #24]
 8011bd6:	f7fe facd 	bl	8010174 <_localeconv_r>
 8011bda:	6843      	ldr	r3, [r0, #4]
 8011bdc:	0018      	movs	r0, r3
 8011bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8011be0:	f7ee fa90 	bl	8000104 <strlen>
 8011be4:	900e      	str	r0, [sp, #56]	; 0x38
 8011be6:	9806      	ldr	r0, [sp, #24]
 8011be8:	f7fe fac4 	bl	8010174 <_localeconv_r>
 8011bec:	6883      	ldr	r3, [r0, #8]
 8011bee:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d010      	beq.n	8011c18 <_vfiprintf_r+0x254>
 8011bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00d      	beq.n	8011c18 <_vfiprintf_r+0x254>
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d00a      	beq.n	8011c18 <_vfiprintf_r+0x254>
 8011c02:	2380      	movs	r3, #128	; 0x80
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	431c      	orrs	r4, r3
 8011c08:	e006      	b.n	8011c18 <_vfiprintf_r+0x254>
 8011c0a:	ab12      	add	r3, sp, #72	; 0x48
 8011c0c:	78da      	ldrb	r2, [r3, #3]
 8011c0e:	3303      	adds	r3, #3
 8011c10:	2a00      	cmp	r2, #0
 8011c12:	d101      	bne.n	8011c18 <_vfiprintf_r+0x254>
 8011c14:	3220      	adds	r2, #32
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	9b07      	ldr	r3, [sp, #28]
 8011c1a:	e774      	b.n	8011b06 <_vfiprintf_r+0x142>
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e7f2      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011c20:	cf08      	ldmia	r7!, {r3}
 8011c22:	9309      	str	r3, [sp, #36]	; 0x24
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	daf7      	bge.n	8011c18 <_vfiprintf_r+0x254>
 8011c28:	425b      	negs	r3, r3
 8011c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c2c:	2304      	movs	r3, #4
 8011c2e:	e7ea      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011c30:	222b      	movs	r2, #43	; 0x2b
 8011c32:	ab12      	add	r3, sp, #72	; 0x48
 8011c34:	70da      	strb	r2, [r3, #3]
 8011c36:	e7ef      	b.n	8011c18 <_vfiprintf_r+0x254>
 8011c38:	9b07      	ldr	r3, [sp, #28]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8011c40:	d00f      	beq.n	8011c62 <_vfiprintf_r+0x29e>
 8011c42:	2100      	movs	r1, #0
 8011c44:	9105      	str	r1, [sp, #20]
 8011c46:	0019      	movs	r1, r3
 8011c48:	3930      	subs	r1, #48	; 0x30
 8011c4a:	9207      	str	r2, [sp, #28]
 8011c4c:	2909      	cmp	r1, #9
 8011c4e:	d900      	bls.n	8011c52 <_vfiprintf_r+0x28e>
 8011c50:	e75c      	b.n	8011b0c <_vfiprintf_r+0x148>
 8011c52:	200a      	movs	r0, #10
 8011c54:	9b05      	ldr	r3, [sp, #20]
 8011c56:	4343      	muls	r3, r0
 8011c58:	185b      	adds	r3, r3, r1
 8011c5a:	9305      	str	r3, [sp, #20]
 8011c5c:	7813      	ldrb	r3, [r2, #0]
 8011c5e:	3201      	adds	r2, #1
 8011c60:	e7f1      	b.n	8011c46 <_vfiprintf_r+0x282>
 8011c62:	cf08      	ldmia	r7!, {r3}
 8011c64:	9305      	str	r3, [sp, #20]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	da02      	bge.n	8011c70 <_vfiprintf_r+0x2ac>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	425b      	negs	r3, r3
 8011c6e:	9305      	str	r3, [sp, #20]
 8011c70:	9207      	str	r2, [sp, #28]
 8011c72:	e7d1      	b.n	8011c18 <_vfiprintf_r+0x254>
 8011c74:	2380      	movs	r3, #128	; 0x80
 8011c76:	e7c6      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011c78:	2100      	movs	r1, #0
 8011c7a:	9a07      	ldr	r2, [sp, #28]
 8011c7c:	9109      	str	r1, [sp, #36]	; 0x24
 8011c7e:	200a      	movs	r0, #10
 8011c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c82:	3b30      	subs	r3, #48	; 0x30
 8011c84:	4341      	muls	r1, r0
 8011c86:	185b      	adds	r3, r3, r1
 8011c88:	9309      	str	r3, [sp, #36]	; 0x24
 8011c8a:	0013      	movs	r3, r2
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	3201      	adds	r2, #1
 8011c90:	0019      	movs	r1, r3
 8011c92:	3930      	subs	r1, #48	; 0x30
 8011c94:	9207      	str	r2, [sp, #28]
 8011c96:	2909      	cmp	r1, #9
 8011c98:	d9f1      	bls.n	8011c7e <_vfiprintf_r+0x2ba>
 8011c9a:	e737      	b.n	8011b0c <_vfiprintf_r+0x148>
 8011c9c:	ffffdfff 	.word	0xffffdfff
 8011ca0:	9b07      	ldr	r3, [sp, #28]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	2b68      	cmp	r3, #104	; 0x68
 8011ca6:	d105      	bne.n	8011cb4 <_vfiprintf_r+0x2f0>
 8011ca8:	9b07      	ldr	r3, [sp, #28]
 8011caa:	3301      	adds	r3, #1
 8011cac:	9307      	str	r3, [sp, #28]
 8011cae:	2380      	movs	r3, #128	; 0x80
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	e7a8      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011cb4:	2340      	movs	r3, #64	; 0x40
 8011cb6:	e7a6      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011cb8:	9b07      	ldr	r3, [sp, #28]
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	2b6c      	cmp	r3, #108	; 0x6c
 8011cbe:	d104      	bne.n	8011cca <_vfiprintf_r+0x306>
 8011cc0:	9b07      	ldr	r3, [sp, #28]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	9307      	str	r3, [sp, #28]
 8011cc6:	2320      	movs	r3, #32
 8011cc8:	e79d      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011cca:	2310      	movs	r3, #16
 8011ccc:	e79b      	b.n	8011c06 <_vfiprintf_r+0x242>
 8011cce:	003a      	movs	r2, r7
 8011cd0:	ca08      	ldmia	r2!, {r3}
 8011cd2:	ae27      	add	r6, sp, #156	; 0x9c
 8011cd4:	7033      	strb	r3, [r6, #0]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	9204      	str	r2, [sp, #16]
 8011cda:	aa12      	add	r2, sp, #72	; 0x48
 8011cdc:	70d3      	strb	r3, [r2, #3]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ce2:	9205      	str	r2, [sp, #20]
 8011ce4:	e0b0      	b.n	8011e48 <_vfiprintf_r+0x484>
 8011ce6:	2310      	movs	r3, #16
 8011ce8:	431c      	orrs	r4, r3
 8011cea:	06a3      	lsls	r3, r4, #26
 8011cec:	d52a      	bpl.n	8011d44 <_vfiprintf_r+0x380>
 8011cee:	2307      	movs	r3, #7
 8011cf0:	3707      	adds	r7, #7
 8011cf2:	439f      	bics	r7, r3
 8011cf4:	0039      	movs	r1, r7
 8011cf6:	c90c      	ldmia	r1!, {r2, r3}
 8011cf8:	9200      	str	r2, [sp, #0]
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	9104      	str	r1, [sp, #16]
 8011cfe:	9a01      	ldr	r2, [sp, #4]
 8011d00:	2301      	movs	r3, #1
 8011d02:	2a00      	cmp	r2, #0
 8011d04:	da09      	bge.n	8011d1a <_vfiprintf_r+0x356>
 8011d06:	9e00      	ldr	r6, [sp, #0]
 8011d08:	9f01      	ldr	r7, [sp, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	4271      	negs	r1, r6
 8011d0e:	41ba      	sbcs	r2, r7
 8011d10:	9100      	str	r1, [sp, #0]
 8011d12:	9201      	str	r2, [sp, #4]
 8011d14:	212d      	movs	r1, #45	; 0x2d
 8011d16:	aa12      	add	r2, sp, #72	; 0x48
 8011d18:	70d1      	strb	r1, [r2, #3]
 8011d1a:	9901      	ldr	r1, [sp, #4]
 8011d1c:	9a00      	ldr	r2, [sp, #0]
 8011d1e:	430a      	orrs	r2, r1
 8011d20:	9905      	ldr	r1, [sp, #20]
 8011d22:	3101      	adds	r1, #1
 8011d24:	d100      	bne.n	8011d28 <_vfiprintf_r+0x364>
 8011d26:	e2e9      	b.n	80122fc <_vfiprintf_r+0x938>
 8011d28:	2180      	movs	r1, #128	; 0x80
 8011d2a:	0027      	movs	r7, r4
 8011d2c:	438f      	bics	r7, r1
 8011d2e:	2a00      	cmp	r2, #0
 8011d30:	d000      	beq.n	8011d34 <_vfiprintf_r+0x370>
 8011d32:	e2e7      	b.n	8012304 <_vfiprintf_r+0x940>
 8011d34:	9a05      	ldr	r2, [sp, #20]
 8011d36:	2a00      	cmp	r2, #0
 8011d38:	d100      	bne.n	8011d3c <_vfiprintf_r+0x378>
 8011d3a:	e243      	b.n	80121c4 <_vfiprintf_r+0x800>
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d000      	beq.n	8011d42 <_vfiprintf_r+0x37e>
 8011d40:	e2e3      	b.n	801230a <_vfiprintf_r+0x946>
 8011d42:	e1e7      	b.n	8012114 <_vfiprintf_r+0x750>
 8011d44:	003a      	movs	r2, r7
 8011d46:	ca08      	ldmia	r2!, {r3}
 8011d48:	9204      	str	r2, [sp, #16]
 8011d4a:	06e2      	lsls	r2, r4, #27
 8011d4c:	d503      	bpl.n	8011d56 <_vfiprintf_r+0x392>
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	17db      	asrs	r3, r3, #31
 8011d52:	9301      	str	r3, [sp, #4]
 8011d54:	e7d3      	b.n	8011cfe <_vfiprintf_r+0x33a>
 8011d56:	0662      	lsls	r2, r4, #25
 8011d58:	d501      	bpl.n	8011d5e <_vfiprintf_r+0x39a>
 8011d5a:	b21b      	sxth	r3, r3
 8011d5c:	e7f7      	b.n	8011d4e <_vfiprintf_r+0x38a>
 8011d5e:	05a2      	lsls	r2, r4, #22
 8011d60:	d5f5      	bpl.n	8011d4e <_vfiprintf_r+0x38a>
 8011d62:	b25b      	sxtb	r3, r3
 8011d64:	e7f3      	b.n	8011d4e <_vfiprintf_r+0x38a>
 8011d66:	1d3b      	adds	r3, r7, #4
 8011d68:	9304      	str	r3, [sp, #16]
 8011d6a:	06a3      	lsls	r3, r4, #26
 8011d6c:	d506      	bpl.n	8011d7c <_vfiprintf_r+0x3b8>
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	9a08      	ldr	r2, [sp, #32]
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	17d2      	asrs	r2, r2, #31
 8011d76:	605a      	str	r2, [r3, #4]
 8011d78:	9f04      	ldr	r7, [sp, #16]
 8011d7a:	e694      	b.n	8011aa6 <_vfiprintf_r+0xe2>
 8011d7c:	06e3      	lsls	r3, r4, #27
 8011d7e:	d503      	bpl.n	8011d88 <_vfiprintf_r+0x3c4>
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	9a08      	ldr	r2, [sp, #32]
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	e7f7      	b.n	8011d78 <_vfiprintf_r+0x3b4>
 8011d88:	0663      	lsls	r3, r4, #25
 8011d8a:	d503      	bpl.n	8011d94 <_vfiprintf_r+0x3d0>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	9a08      	ldr	r2, [sp, #32]
 8011d90:	801a      	strh	r2, [r3, #0]
 8011d92:	e7f1      	b.n	8011d78 <_vfiprintf_r+0x3b4>
 8011d94:	05a4      	lsls	r4, r4, #22
 8011d96:	d5f3      	bpl.n	8011d80 <_vfiprintf_r+0x3bc>
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	9a08      	ldr	r2, [sp, #32]
 8011d9c:	701a      	strb	r2, [r3, #0]
 8011d9e:	e7eb      	b.n	8011d78 <_vfiprintf_r+0x3b4>
 8011da0:	2310      	movs	r3, #16
 8011da2:	431c      	orrs	r4, r3
 8011da4:	2320      	movs	r3, #32
 8011da6:	0020      	movs	r0, r4
 8011da8:	4018      	ands	r0, r3
 8011daa:	421c      	tst	r4, r3
 8011dac:	d00d      	beq.n	8011dca <_vfiprintf_r+0x406>
 8011dae:	3b19      	subs	r3, #25
 8011db0:	3707      	adds	r7, #7
 8011db2:	439f      	bics	r7, r3
 8011db4:	0039      	movs	r1, r7
 8011db6:	c90c      	ldmia	r1!, {r2, r3}
 8011db8:	9200      	str	r2, [sp, #0]
 8011dba:	9301      	str	r3, [sp, #4]
 8011dbc:	9104      	str	r1, [sp, #16]
 8011dbe:	4bcc      	ldr	r3, [pc, #816]	; (80120f0 <_vfiprintf_r+0x72c>)
 8011dc0:	401c      	ands	r4, r3
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	aa12      	add	r2, sp, #72	; 0x48
 8011dc8:	e7a6      	b.n	8011d18 <_vfiprintf_r+0x354>
 8011dca:	003a      	movs	r2, r7
 8011dcc:	ca08      	ldmia	r2!, {r3}
 8011dce:	0021      	movs	r1, r4
 8011dd0:	9204      	str	r2, [sp, #16]
 8011dd2:	2210      	movs	r2, #16
 8011dd4:	4011      	ands	r1, r2
 8011dd6:	4214      	tst	r4, r2
 8011dd8:	d002      	beq.n	8011de0 <_vfiprintf_r+0x41c>
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	9001      	str	r0, [sp, #4]
 8011dde:	e7ee      	b.n	8011dbe <_vfiprintf_r+0x3fa>
 8011de0:	2240      	movs	r2, #64	; 0x40
 8011de2:	0020      	movs	r0, r4
 8011de4:	4010      	ands	r0, r2
 8011de6:	4214      	tst	r4, r2
 8011de8:	d003      	beq.n	8011df2 <_vfiprintf_r+0x42e>
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	9300      	str	r3, [sp, #0]
 8011dee:	9101      	str	r1, [sp, #4]
 8011df0:	e7e5      	b.n	8011dbe <_vfiprintf_r+0x3fa>
 8011df2:	2280      	movs	r2, #128	; 0x80
 8011df4:	0021      	movs	r1, r4
 8011df6:	0092      	lsls	r2, r2, #2
 8011df8:	4011      	ands	r1, r2
 8011dfa:	4214      	tst	r4, r2
 8011dfc:	d0f6      	beq.n	8011dec <_vfiprintf_r+0x428>
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	e7eb      	b.n	8011dda <_vfiprintf_r+0x416>
 8011e02:	003b      	movs	r3, r7
 8011e04:	cb04      	ldmia	r3!, {r2}
 8011e06:	49bb      	ldr	r1, [pc, #748]	; (80120f4 <_vfiprintf_r+0x730>)
 8011e08:	9304      	str	r3, [sp, #16]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9200      	str	r2, [sp, #0]
 8011e0e:	aa13      	add	r2, sp, #76	; 0x4c
 8011e10:	8011      	strh	r1, [r2, #0]
 8011e12:	4ab9      	ldr	r2, [pc, #740]	; (80120f8 <_vfiprintf_r+0x734>)
 8011e14:	9301      	str	r3, [sp, #4]
 8011e16:	3302      	adds	r3, #2
 8011e18:	431c      	orrs	r4, r3
 8011e1a:	920c      	str	r2, [sp, #48]	; 0x30
 8011e1c:	e7d2      	b.n	8011dc4 <_vfiprintf_r+0x400>
 8011e1e:	003b      	movs	r3, r7
 8011e20:	2700      	movs	r7, #0
 8011e22:	cb40      	ldmia	r3!, {r6}
 8011e24:	9304      	str	r3, [sp, #16]
 8011e26:	ab12      	add	r3, sp, #72	; 0x48
 8011e28:	70df      	strb	r7, [r3, #3]
 8011e2a:	9b05      	ldr	r3, [sp, #20]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	d100      	bne.n	8011e32 <_vfiprintf_r+0x46e>
 8011e30:	e0ea      	b.n	8012008 <_vfiprintf_r+0x644>
 8011e32:	0039      	movs	r1, r7
 8011e34:	0030      	movs	r0, r6
 8011e36:	9a05      	ldr	r2, [sp, #20]
 8011e38:	f7fe f9b4 	bl	80101a4 <memchr>
 8011e3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e3e:	42b8      	cmp	r0, r7
 8011e40:	d002      	beq.n	8011e48 <_vfiprintf_r+0x484>
 8011e42:	1b83      	subs	r3, r0, r6
 8011e44:	9305      	str	r3, [sp, #20]
 8011e46:	970b      	str	r7, [sp, #44]	; 0x2c
 8011e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e4a:	9a05      	ldr	r2, [sp, #20]
 8011e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	da00      	bge.n	8011e54 <_vfiprintf_r+0x490>
 8011e52:	920a      	str	r2, [sp, #40]	; 0x28
 8011e54:	ab12      	add	r3, sp, #72	; 0x48
 8011e56:	3303      	adds	r3, #3
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	1e5a      	subs	r2, r3, #1
 8011e5c:	4193      	sbcs	r3, r2
 8011e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e60:	18d3      	adds	r3, r2, r3
 8011e62:	930a      	str	r3, [sp, #40]	; 0x28
 8011e64:	0022      	movs	r2, r4
 8011e66:	2302      	movs	r3, #2
 8011e68:	401a      	ands	r2, r3
 8011e6a:	9210      	str	r2, [sp, #64]	; 0x40
 8011e6c:	421c      	tst	r4, r3
 8011e6e:	d002      	beq.n	8011e76 <_vfiprintf_r+0x4b2>
 8011e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e72:	3302      	adds	r3, #2
 8011e74:	930a      	str	r3, [sp, #40]	; 0x28
 8011e76:	2384      	movs	r3, #132	; 0x84
 8011e78:	0022      	movs	r2, r4
 8011e7a:	401a      	ands	r2, r3
 8011e7c:	9211      	str	r2, [sp, #68]	; 0x44
 8011e7e:	421c      	tst	r4, r3
 8011e80:	d11e      	bne.n	8011ec0 <_vfiprintf_r+0x4fc>
 8011e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e86:	1a9f      	subs	r7, r3, r2
 8011e88:	2f00      	cmp	r7, #0
 8011e8a:	dd19      	ble.n	8011ec0 <_vfiprintf_r+0x4fc>
 8011e8c:	0029      	movs	r1, r5
 8011e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e90:	489a      	ldr	r0, [pc, #616]	; (80120fc <_vfiprintf_r+0x738>)
 8011e92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011e94:	3301      	adds	r3, #1
 8011e96:	3108      	adds	r1, #8
 8011e98:	6028      	str	r0, [r5, #0]
 8011e9a:	2f10      	cmp	r7, #16
 8011e9c:	dd00      	ble.n	8011ea0 <_vfiprintf_r+0x4dc>
 8011e9e:	e1a7      	b.n	80121f0 <_vfiprintf_r+0x82c>
 8011ea0:	606f      	str	r7, [r5, #4]
 8011ea2:	18bf      	adds	r7, r7, r2
 8011ea4:	000d      	movs	r5, r1
 8011ea6:	9716      	str	r7, [sp, #88]	; 0x58
 8011ea8:	9315      	str	r3, [sp, #84]	; 0x54
 8011eaa:	2b07      	cmp	r3, #7
 8011eac:	dd08      	ble.n	8011ec0 <_vfiprintf_r+0x4fc>
 8011eae:	9903      	ldr	r1, [sp, #12]
 8011eb0:	9806      	ldr	r0, [sp, #24]
 8011eb2:	aa14      	add	r2, sp, #80	; 0x50
 8011eb4:	f7ff fd51 	bl	801195a <__sprint_r>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d000      	beq.n	8011ebe <_vfiprintf_r+0x4fa>
 8011ebc:	e1eb      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011ebe:	ad17      	add	r5, sp, #92	; 0x5c
 8011ec0:	a912      	add	r1, sp, #72	; 0x48
 8011ec2:	78c8      	ldrb	r0, [r1, #3]
 8011ec4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ec8:	3103      	adds	r1, #3
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d012      	beq.n	8011ef4 <_vfiprintf_r+0x530>
 8011ece:	6029      	str	r1, [r5, #0]
 8011ed0:	2101      	movs	r1, #1
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	1852      	adds	r2, r2, r1
 8011ed6:	6069      	str	r1, [r5, #4]
 8011ed8:	9216      	str	r2, [sp, #88]	; 0x58
 8011eda:	9315      	str	r3, [sp, #84]	; 0x54
 8011edc:	3508      	adds	r5, #8
 8011ede:	2b07      	cmp	r3, #7
 8011ee0:	dd08      	ble.n	8011ef4 <_vfiprintf_r+0x530>
 8011ee2:	9903      	ldr	r1, [sp, #12]
 8011ee4:	9806      	ldr	r0, [sp, #24]
 8011ee6:	aa14      	add	r2, sp, #80	; 0x50
 8011ee8:	f7ff fd37 	bl	801195a <__sprint_r>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d000      	beq.n	8011ef2 <_vfiprintf_r+0x52e>
 8011ef0:	e1d1      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011ef2:	ad17      	add	r5, sp, #92	; 0x5c
 8011ef4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011ef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011efa:	2900      	cmp	r1, #0
 8011efc:	d013      	beq.n	8011f26 <_vfiprintf_r+0x562>
 8011efe:	a913      	add	r1, sp, #76	; 0x4c
 8011f00:	6029      	str	r1, [r5, #0]
 8011f02:	2102      	movs	r1, #2
 8011f04:	3301      	adds	r3, #1
 8011f06:	1852      	adds	r2, r2, r1
 8011f08:	6069      	str	r1, [r5, #4]
 8011f0a:	9216      	str	r2, [sp, #88]	; 0x58
 8011f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8011f0e:	3508      	adds	r5, #8
 8011f10:	2b07      	cmp	r3, #7
 8011f12:	dd08      	ble.n	8011f26 <_vfiprintf_r+0x562>
 8011f14:	9903      	ldr	r1, [sp, #12]
 8011f16:	9806      	ldr	r0, [sp, #24]
 8011f18:	aa14      	add	r2, sp, #80	; 0x50
 8011f1a:	f7ff fd1e 	bl	801195a <__sprint_r>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d000      	beq.n	8011f24 <_vfiprintf_r+0x560>
 8011f22:	e1b8      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011f24:	ad17      	add	r5, sp, #92	; 0x5c
 8011f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f28:	2b80      	cmp	r3, #128	; 0x80
 8011f2a:	d11e      	bne.n	8011f6a <_vfiprintf_r+0x5a6>
 8011f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f30:	1a9f      	subs	r7, r3, r2
 8011f32:	2f00      	cmp	r7, #0
 8011f34:	dd19      	ble.n	8011f6a <_vfiprintf_r+0x5a6>
 8011f36:	0029      	movs	r1, r5
 8011f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f3a:	4871      	ldr	r0, [pc, #452]	; (8012100 <_vfiprintf_r+0x73c>)
 8011f3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f3e:	3301      	adds	r3, #1
 8011f40:	3108      	adds	r1, #8
 8011f42:	6028      	str	r0, [r5, #0]
 8011f44:	2f10      	cmp	r7, #16
 8011f46:	dd00      	ble.n	8011f4a <_vfiprintf_r+0x586>
 8011f48:	e164      	b.n	8012214 <_vfiprintf_r+0x850>
 8011f4a:	606f      	str	r7, [r5, #4]
 8011f4c:	18bf      	adds	r7, r7, r2
 8011f4e:	000d      	movs	r5, r1
 8011f50:	9716      	str	r7, [sp, #88]	; 0x58
 8011f52:	9315      	str	r3, [sp, #84]	; 0x54
 8011f54:	2b07      	cmp	r3, #7
 8011f56:	dd08      	ble.n	8011f6a <_vfiprintf_r+0x5a6>
 8011f58:	9903      	ldr	r1, [sp, #12]
 8011f5a:	9806      	ldr	r0, [sp, #24]
 8011f5c:	aa14      	add	r2, sp, #80	; 0x50
 8011f5e:	f7ff fcfc 	bl	801195a <__sprint_r>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	d000      	beq.n	8011f68 <_vfiprintf_r+0x5a4>
 8011f66:	e196      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011f68:	ad17      	add	r5, sp, #92	; 0x5c
 8011f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f6c:	9a05      	ldr	r2, [sp, #20]
 8011f6e:	1a9f      	subs	r7, r3, r2
 8011f70:	2f00      	cmp	r7, #0
 8011f72:	dd19      	ble.n	8011fa8 <_vfiprintf_r+0x5e4>
 8011f74:	0029      	movs	r1, r5
 8011f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f78:	4861      	ldr	r0, [pc, #388]	; (8012100 <_vfiprintf_r+0x73c>)
 8011f7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	3108      	adds	r1, #8
 8011f80:	6028      	str	r0, [r5, #0]
 8011f82:	2f10      	cmp	r7, #16
 8011f84:	dd00      	ble.n	8011f88 <_vfiprintf_r+0x5c4>
 8011f86:	e157      	b.n	8012238 <_vfiprintf_r+0x874>
 8011f88:	606f      	str	r7, [r5, #4]
 8011f8a:	18bf      	adds	r7, r7, r2
 8011f8c:	000d      	movs	r5, r1
 8011f8e:	9716      	str	r7, [sp, #88]	; 0x58
 8011f90:	9315      	str	r3, [sp, #84]	; 0x54
 8011f92:	2b07      	cmp	r3, #7
 8011f94:	dd08      	ble.n	8011fa8 <_vfiprintf_r+0x5e4>
 8011f96:	9903      	ldr	r1, [sp, #12]
 8011f98:	9806      	ldr	r0, [sp, #24]
 8011f9a:	aa14      	add	r2, sp, #80	; 0x50
 8011f9c:	f7ff fcdd 	bl	801195a <__sprint_r>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d000      	beq.n	8011fa6 <_vfiprintf_r+0x5e2>
 8011fa4:	e177      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011fa6:	ad17      	add	r5, sp, #92	; 0x5c
 8011fa8:	9b05      	ldr	r3, [sp, #20]
 8011faa:	9a05      	ldr	r2, [sp, #20]
 8011fac:	606b      	str	r3, [r5, #4]
 8011fae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011fb0:	602e      	str	r6, [r5, #0]
 8011fb2:	189b      	adds	r3, r3, r2
 8011fb4:	9316      	str	r3, [sp, #88]	; 0x58
 8011fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fb8:	3508      	adds	r5, #8
 8011fba:	3301      	adds	r3, #1
 8011fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8011fbe:	2b07      	cmp	r3, #7
 8011fc0:	dd08      	ble.n	8011fd4 <_vfiprintf_r+0x610>
 8011fc2:	9903      	ldr	r1, [sp, #12]
 8011fc4:	9806      	ldr	r0, [sp, #24]
 8011fc6:	aa14      	add	r2, sp, #80	; 0x50
 8011fc8:	f7ff fcc7 	bl	801195a <__sprint_r>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d000      	beq.n	8011fd2 <_vfiprintf_r+0x60e>
 8011fd0:	e161      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8011fd2:	ad17      	add	r5, sp, #92	; 0x5c
 8011fd4:	0764      	lsls	r4, r4, #29
 8011fd6:	d500      	bpl.n	8011fda <_vfiprintf_r+0x616>
 8011fd8:	e140      	b.n	801225c <_vfiprintf_r+0x898>
 8011fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	da00      	bge.n	8011fe4 <_vfiprintf_r+0x620>
 8011fe2:	0013      	movs	r3, r2
 8011fe4:	9a08      	ldr	r2, [sp, #32]
 8011fe6:	18d3      	adds	r3, r2, r3
 8011fe8:	9308      	str	r3, [sp, #32]
 8011fea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d007      	beq.n	8012000 <_vfiprintf_r+0x63c>
 8011ff0:	9903      	ldr	r1, [sp, #12]
 8011ff2:	9806      	ldr	r0, [sp, #24]
 8011ff4:	aa14      	add	r2, sp, #80	; 0x50
 8011ff6:	f7ff fcb0 	bl	801195a <__sprint_r>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d000      	beq.n	8012000 <_vfiprintf_r+0x63c>
 8011ffe:	e14a      	b.n	8012296 <_vfiprintf_r+0x8d2>
 8012000:	2300      	movs	r3, #0
 8012002:	ad17      	add	r5, sp, #92	; 0x5c
 8012004:	9315      	str	r3, [sp, #84]	; 0x54
 8012006:	e6b7      	b.n	8011d78 <_vfiprintf_r+0x3b4>
 8012008:	0030      	movs	r0, r6
 801200a:	f7ee f87b 	bl	8000104 <strlen>
 801200e:	9005      	str	r0, [sp, #20]
 8012010:	e719      	b.n	8011e46 <_vfiprintf_r+0x482>
 8012012:	2310      	movs	r3, #16
 8012014:	431c      	orrs	r4, r3
 8012016:	2320      	movs	r3, #32
 8012018:	0020      	movs	r0, r4
 801201a:	4018      	ands	r0, r3
 801201c:	421c      	tst	r4, r3
 801201e:	d009      	beq.n	8012034 <_vfiprintf_r+0x670>
 8012020:	3b19      	subs	r3, #25
 8012022:	3707      	adds	r7, #7
 8012024:	439f      	bics	r7, r3
 8012026:	0039      	movs	r1, r7
 8012028:	c90c      	ldmia	r1!, {r2, r3}
 801202a:	9200      	str	r2, [sp, #0]
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	9104      	str	r1, [sp, #16]
 8012030:	2301      	movs	r3, #1
 8012032:	e6c7      	b.n	8011dc4 <_vfiprintf_r+0x400>
 8012034:	003b      	movs	r3, r7
 8012036:	cb04      	ldmia	r3!, {r2}
 8012038:	0021      	movs	r1, r4
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	2310      	movs	r3, #16
 801203e:	4019      	ands	r1, r3
 8012040:	421c      	tst	r4, r3
 8012042:	d003      	beq.n	801204c <_vfiprintf_r+0x688>
 8012044:	9200      	str	r2, [sp, #0]
 8012046:	9001      	str	r0, [sp, #4]
 8012048:	3b0f      	subs	r3, #15
 801204a:	e6bb      	b.n	8011dc4 <_vfiprintf_r+0x400>
 801204c:	2340      	movs	r3, #64	; 0x40
 801204e:	0020      	movs	r0, r4
 8012050:	4018      	ands	r0, r3
 8012052:	421c      	tst	r4, r3
 8012054:	d003      	beq.n	801205e <_vfiprintf_r+0x69a>
 8012056:	b293      	uxth	r3, r2
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	9101      	str	r1, [sp, #4]
 801205c:	e7e8      	b.n	8012030 <_vfiprintf_r+0x66c>
 801205e:	2380      	movs	r3, #128	; 0x80
 8012060:	0021      	movs	r1, r4
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	4019      	ands	r1, r3
 8012066:	421c      	tst	r4, r3
 8012068:	d003      	beq.n	8012072 <_vfiprintf_r+0x6ae>
 801206a:	b2d3      	uxtb	r3, r2
 801206c:	9300      	str	r3, [sp, #0]
 801206e:	9001      	str	r0, [sp, #4]
 8012070:	e7de      	b.n	8012030 <_vfiprintf_r+0x66c>
 8012072:	9200      	str	r2, [sp, #0]
 8012074:	e7f1      	b.n	801205a <_vfiprintf_r+0x696>
 8012076:	4a23      	ldr	r2, [pc, #140]	; (8012104 <_vfiprintf_r+0x740>)
 8012078:	0020      	movs	r0, r4
 801207a:	920c      	str	r2, [sp, #48]	; 0x30
 801207c:	2220      	movs	r2, #32
 801207e:	4010      	ands	r0, r2
 8012080:	4214      	tst	r4, r2
 8012082:	d019      	beq.n	80120b8 <_vfiprintf_r+0x6f4>
 8012084:	3a19      	subs	r2, #25
 8012086:	3707      	adds	r7, #7
 8012088:	4397      	bics	r7, r2
 801208a:	0038      	movs	r0, r7
 801208c:	c806      	ldmia	r0!, {r1, r2}
 801208e:	9100      	str	r1, [sp, #0]
 8012090:	9201      	str	r2, [sp, #4]
 8012092:	9004      	str	r0, [sp, #16]
 8012094:	07e2      	lsls	r2, r4, #31
 8012096:	d509      	bpl.n	80120ac <_vfiprintf_r+0x6e8>
 8012098:	9a00      	ldr	r2, [sp, #0]
 801209a:	9901      	ldr	r1, [sp, #4]
 801209c:	430a      	orrs	r2, r1
 801209e:	d005      	beq.n	80120ac <_vfiprintf_r+0x6e8>
 80120a0:	aa13      	add	r2, sp, #76	; 0x4c
 80120a2:	2130      	movs	r1, #48	; 0x30
 80120a4:	7053      	strb	r3, [r2, #1]
 80120a6:	2302      	movs	r3, #2
 80120a8:	7011      	strb	r1, [r2, #0]
 80120aa:	431c      	orrs	r4, r3
 80120ac:	4b10      	ldr	r3, [pc, #64]	; (80120f0 <_vfiprintf_r+0x72c>)
 80120ae:	401c      	ands	r4, r3
 80120b0:	2302      	movs	r3, #2
 80120b2:	e687      	b.n	8011dc4 <_vfiprintf_r+0x400>
 80120b4:	4a10      	ldr	r2, [pc, #64]	; (80120f8 <_vfiprintf_r+0x734>)
 80120b6:	e7df      	b.n	8012078 <_vfiprintf_r+0x6b4>
 80120b8:	0039      	movs	r1, r7
 80120ba:	c904      	ldmia	r1!, {r2}
 80120bc:	0026      	movs	r6, r4
 80120be:	9104      	str	r1, [sp, #16]
 80120c0:	2110      	movs	r1, #16
 80120c2:	400e      	ands	r6, r1
 80120c4:	420c      	tst	r4, r1
 80120c6:	d002      	beq.n	80120ce <_vfiprintf_r+0x70a>
 80120c8:	9200      	str	r2, [sp, #0]
 80120ca:	9001      	str	r0, [sp, #4]
 80120cc:	e7e2      	b.n	8012094 <_vfiprintf_r+0x6d0>
 80120ce:	2140      	movs	r1, #64	; 0x40
 80120d0:	0020      	movs	r0, r4
 80120d2:	4008      	ands	r0, r1
 80120d4:	420c      	tst	r4, r1
 80120d6:	d003      	beq.n	80120e0 <_vfiprintf_r+0x71c>
 80120d8:	b292      	uxth	r2, r2
 80120da:	9200      	str	r2, [sp, #0]
 80120dc:	9601      	str	r6, [sp, #4]
 80120de:	e7d9      	b.n	8012094 <_vfiprintf_r+0x6d0>
 80120e0:	2180      	movs	r1, #128	; 0x80
 80120e2:	0026      	movs	r6, r4
 80120e4:	0089      	lsls	r1, r1, #2
 80120e6:	400e      	ands	r6, r1
 80120e8:	420c      	tst	r4, r1
 80120ea:	d0f6      	beq.n	80120da <_vfiprintf_r+0x716>
 80120ec:	b2d2      	uxtb	r2, r2
 80120ee:	e7eb      	b.n	80120c8 <_vfiprintf_r+0x704>
 80120f0:	fffffbff 	.word	0xfffffbff
 80120f4:	00007830 	.word	0x00007830
 80120f8:	08014bac 	.word	0x08014bac
 80120fc:	08014cb9 	.word	0x08014cb9
 8012100:	08014cc9 	.word	0x08014cc9
 8012104:	08014bbd 	.word	0x08014bbd
 8012108:	9b01      	ldr	r3, [sp, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d109      	bne.n	8012122 <_vfiprintf_r+0x75e>
 801210e:	9b00      	ldr	r3, [sp, #0]
 8012110:	2b09      	cmp	r3, #9
 8012112:	d806      	bhi.n	8012122 <_vfiprintf_r+0x75e>
 8012114:	26b7      	movs	r6, #183	; 0xb7
 8012116:	ab12      	add	r3, sp, #72	; 0x48
 8012118:	18f6      	adds	r6, r6, r3
 801211a:	9b00      	ldr	r3, [sp, #0]
 801211c:	3330      	adds	r3, #48	; 0x30
 801211e:	7033      	strb	r3, [r6, #0]
 8012120:	e115      	b.n	801234e <_vfiprintf_r+0x98a>
 8012122:	2380      	movs	r3, #128	; 0x80
 8012124:	2400      	movs	r4, #0
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	403b      	ands	r3, r7
 801212a:	ae40      	add	r6, sp, #256	; 0x100
 801212c:	930a      	str	r3, [sp, #40]	; 0x28
 801212e:	220a      	movs	r2, #10
 8012130:	9800      	ldr	r0, [sp, #0]
 8012132:	9901      	ldr	r1, [sp, #4]
 8012134:	2300      	movs	r3, #0
 8012136:	f7ee f9b5 	bl	80004a4 <__aeabi_uldivmod>
 801213a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801213c:	3e01      	subs	r6, #1
 801213e:	3230      	adds	r2, #48	; 0x30
 8012140:	900b      	str	r0, [sp, #44]	; 0x2c
 8012142:	9110      	str	r1, [sp, #64]	; 0x40
 8012144:	7032      	strb	r2, [r6, #0]
 8012146:	3401      	adds	r4, #1
 8012148:	2b00      	cmp	r3, #0
 801214a:	d01a      	beq.n	8012182 <_vfiprintf_r+0x7be>
 801214c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	42a3      	cmp	r3, r4
 8012152:	d116      	bne.n	8012182 <_vfiprintf_r+0x7be>
 8012154:	2cff      	cmp	r4, #255	; 0xff
 8012156:	d014      	beq.n	8012182 <_vfiprintf_r+0x7be>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d102      	bne.n	8012164 <_vfiprintf_r+0x7a0>
 801215e:	9b00      	ldr	r3, [sp, #0]
 8012160:	2b09      	cmp	r3, #9
 8012162:	d90e      	bls.n	8012182 <_vfiprintf_r+0x7be>
 8012164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012166:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012168:	1af6      	subs	r6, r6, r3
 801216a:	001a      	movs	r2, r3
 801216c:	0030      	movs	r0, r6
 801216e:	f7fa f832 	bl	800c1d6 <strncpy>
 8012172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012174:	2400      	movs	r4, #0
 8012176:	785b      	ldrb	r3, [r3, #1]
 8012178:	1e5a      	subs	r2, r3, #1
 801217a:	4193      	sbcs	r3, r2
 801217c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801217e:	18d3      	adds	r3, r2, r3
 8012180:	930d      	str	r3, [sp, #52]	; 0x34
 8012182:	9b01      	ldr	r3, [sp, #4]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d103      	bne.n	8012190 <_vfiprintf_r+0x7cc>
 8012188:	9b00      	ldr	r3, [sp, #0]
 801218a:	2b09      	cmp	r3, #9
 801218c:	d800      	bhi.n	8012190 <_vfiprintf_r+0x7cc>
 801218e:	e0de      	b.n	801234e <_vfiprintf_r+0x98a>
 8012190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	e7c9      	b.n	801212e <_vfiprintf_r+0x76a>
 801219a:	200f      	movs	r0, #15
 801219c:	9b00      	ldr	r3, [sp, #0]
 801219e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121a0:	4003      	ands	r3, r0
 80121a2:	5cd3      	ldrb	r3, [r2, r3]
 80121a4:	3e01      	subs	r6, #1
 80121a6:	7033      	strb	r3, [r6, #0]
 80121a8:	9b01      	ldr	r3, [sp, #4]
 80121aa:	0719      	lsls	r1, r3, #28
 80121ac:	9b00      	ldr	r3, [sp, #0]
 80121ae:	091a      	lsrs	r2, r3, #4
 80121b0:	9b01      	ldr	r3, [sp, #4]
 80121b2:	4311      	orrs	r1, r2
 80121b4:	091b      	lsrs	r3, r3, #4
 80121b6:	9301      	str	r3, [sp, #4]
 80121b8:	000b      	movs	r3, r1
 80121ba:	9a01      	ldr	r2, [sp, #4]
 80121bc:	9100      	str	r1, [sp, #0]
 80121be:	4313      	orrs	r3, r2
 80121c0:	d1ec      	bne.n	801219c <_vfiprintf_r+0x7d8>
 80121c2:	e0c4      	b.n	801234e <_vfiprintf_r+0x98a>
 80121c4:	ae40      	add	r6, sp, #256	; 0x100
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d000      	beq.n	80121cc <_vfiprintf_r+0x808>
 80121ca:	e0c0      	b.n	801234e <_vfiprintf_r+0x98a>
 80121cc:	07e4      	lsls	r4, r4, #31
 80121ce:	d400      	bmi.n	80121d2 <_vfiprintf_r+0x80e>
 80121d0:	e0bd      	b.n	801234e <_vfiprintf_r+0x98a>
 80121d2:	26b7      	movs	r6, #183	; 0xb7
 80121d4:	ab12      	add	r3, sp, #72	; 0x48
 80121d6:	18f6      	adds	r6, r6, r3
 80121d8:	2330      	movs	r3, #48	; 0x30
 80121da:	e7a0      	b.n	801211e <_vfiprintf_r+0x75a>
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d100      	bne.n	80121e2 <_vfiprintf_r+0x81e>
 80121e0:	e07e      	b.n	80122e0 <_vfiprintf_r+0x91c>
 80121e2:	ae27      	add	r6, sp, #156	; 0x9c
 80121e4:	7033      	strb	r3, [r6, #0]
 80121e6:	2300      	movs	r3, #0
 80121e8:	aa12      	add	r2, sp, #72	; 0x48
 80121ea:	70d3      	strb	r3, [r2, #3]
 80121ec:	9704      	str	r7, [sp, #16]
 80121ee:	e576      	b.n	8011cde <_vfiprintf_r+0x31a>
 80121f0:	2010      	movs	r0, #16
 80121f2:	1812      	adds	r2, r2, r0
 80121f4:	6068      	str	r0, [r5, #4]
 80121f6:	9216      	str	r2, [sp, #88]	; 0x58
 80121f8:	9315      	str	r3, [sp, #84]	; 0x54
 80121fa:	2b07      	cmp	r3, #7
 80121fc:	dd07      	ble.n	801220e <_vfiprintf_r+0x84a>
 80121fe:	9903      	ldr	r1, [sp, #12]
 8012200:	9806      	ldr	r0, [sp, #24]
 8012202:	aa14      	add	r2, sp, #80	; 0x50
 8012204:	f7ff fba9 	bl	801195a <__sprint_r>
 8012208:	2800      	cmp	r0, #0
 801220a:	d144      	bne.n	8012296 <_vfiprintf_r+0x8d2>
 801220c:	a917      	add	r1, sp, #92	; 0x5c
 801220e:	000d      	movs	r5, r1
 8012210:	3f10      	subs	r7, #16
 8012212:	e63b      	b.n	8011e8c <_vfiprintf_r+0x4c8>
 8012214:	2010      	movs	r0, #16
 8012216:	1812      	adds	r2, r2, r0
 8012218:	6068      	str	r0, [r5, #4]
 801221a:	9216      	str	r2, [sp, #88]	; 0x58
 801221c:	9315      	str	r3, [sp, #84]	; 0x54
 801221e:	2b07      	cmp	r3, #7
 8012220:	dd07      	ble.n	8012232 <_vfiprintf_r+0x86e>
 8012222:	9903      	ldr	r1, [sp, #12]
 8012224:	9806      	ldr	r0, [sp, #24]
 8012226:	aa14      	add	r2, sp, #80	; 0x50
 8012228:	f7ff fb97 	bl	801195a <__sprint_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d132      	bne.n	8012296 <_vfiprintf_r+0x8d2>
 8012230:	a917      	add	r1, sp, #92	; 0x5c
 8012232:	000d      	movs	r5, r1
 8012234:	3f10      	subs	r7, #16
 8012236:	e67e      	b.n	8011f36 <_vfiprintf_r+0x572>
 8012238:	2010      	movs	r0, #16
 801223a:	1812      	adds	r2, r2, r0
 801223c:	6068      	str	r0, [r5, #4]
 801223e:	9216      	str	r2, [sp, #88]	; 0x58
 8012240:	9315      	str	r3, [sp, #84]	; 0x54
 8012242:	2b07      	cmp	r3, #7
 8012244:	dd07      	ble.n	8012256 <_vfiprintf_r+0x892>
 8012246:	9903      	ldr	r1, [sp, #12]
 8012248:	9806      	ldr	r0, [sp, #24]
 801224a:	aa14      	add	r2, sp, #80	; 0x50
 801224c:	f7ff fb85 	bl	801195a <__sprint_r>
 8012250:	2800      	cmp	r0, #0
 8012252:	d120      	bne.n	8012296 <_vfiprintf_r+0x8d2>
 8012254:	a917      	add	r1, sp, #92	; 0x5c
 8012256:	000d      	movs	r5, r1
 8012258:	3f10      	subs	r7, #16
 801225a:	e68b      	b.n	8011f74 <_vfiprintf_r+0x5b0>
 801225c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801225e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012260:	2610      	movs	r6, #16
 8012262:	1a9c      	subs	r4, r3, r2
 8012264:	2c00      	cmp	r4, #0
 8012266:	dc00      	bgt.n	801226a <_vfiprintf_r+0x8a6>
 8012268:	e6b7      	b.n	8011fda <_vfiprintf_r+0x616>
 801226a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801226c:	4a3b      	ldr	r2, [pc, #236]	; (801235c <_vfiprintf_r+0x998>)
 801226e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012270:	3101      	adds	r1, #1
 8012272:	602a      	str	r2, [r5, #0]
 8012274:	2c10      	cmp	r4, #16
 8012276:	dc22      	bgt.n	80122be <_vfiprintf_r+0x8fa>
 8012278:	606c      	str	r4, [r5, #4]
 801227a:	18e4      	adds	r4, r4, r3
 801227c:	9416      	str	r4, [sp, #88]	; 0x58
 801227e:	9115      	str	r1, [sp, #84]	; 0x54
 8012280:	2907      	cmp	r1, #7
 8012282:	dc00      	bgt.n	8012286 <_vfiprintf_r+0x8c2>
 8012284:	e6a9      	b.n	8011fda <_vfiprintf_r+0x616>
 8012286:	9903      	ldr	r1, [sp, #12]
 8012288:	9806      	ldr	r0, [sp, #24]
 801228a:	aa14      	add	r2, sp, #80	; 0x50
 801228c:	f7ff fb65 	bl	801195a <__sprint_r>
 8012290:	2800      	cmp	r0, #0
 8012292:	d100      	bne.n	8012296 <_vfiprintf_r+0x8d2>
 8012294:	e6a1      	b.n	8011fda <_vfiprintf_r+0x616>
 8012296:	9b03      	ldr	r3, [sp, #12]
 8012298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801229a:	07db      	lsls	r3, r3, #31
 801229c:	d407      	bmi.n	80122ae <_vfiprintf_r+0x8ea>
 801229e:	9b03      	ldr	r3, [sp, #12]
 80122a0:	899b      	ldrh	r3, [r3, #12]
 80122a2:	059b      	lsls	r3, r3, #22
 80122a4:	d403      	bmi.n	80122ae <_vfiprintf_r+0x8ea>
 80122a6:	9b03      	ldr	r3, [sp, #12]
 80122a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80122aa:	f7fa f88e 	bl	800c3ca <__retarget_lock_release_recursive>
 80122ae:	9b03      	ldr	r3, [sp, #12]
 80122b0:	899b      	ldrh	r3, [r3, #12]
 80122b2:	065b      	lsls	r3, r3, #25
 80122b4:	d401      	bmi.n	80122ba <_vfiprintf_r+0x8f6>
 80122b6:	f7ff fbc3 	bl	8011a40 <_vfiprintf_r+0x7c>
 80122ba:	f7ff fbbe 	bl	8011a3a <_vfiprintf_r+0x76>
 80122be:	3310      	adds	r3, #16
 80122c0:	606e      	str	r6, [r5, #4]
 80122c2:	9316      	str	r3, [sp, #88]	; 0x58
 80122c4:	9115      	str	r1, [sp, #84]	; 0x54
 80122c6:	3508      	adds	r5, #8
 80122c8:	2907      	cmp	r1, #7
 80122ca:	dd07      	ble.n	80122dc <_vfiprintf_r+0x918>
 80122cc:	9903      	ldr	r1, [sp, #12]
 80122ce:	9806      	ldr	r0, [sp, #24]
 80122d0:	aa14      	add	r2, sp, #80	; 0x50
 80122d2:	f7ff fb42 	bl	801195a <__sprint_r>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d1dd      	bne.n	8012296 <_vfiprintf_r+0x8d2>
 80122da:	ad17      	add	r5, sp, #92	; 0x5c
 80122dc:	3c10      	subs	r4, #16
 80122de:	e7c4      	b.n	801226a <_vfiprintf_r+0x8a6>
 80122e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d102      	bne.n	80122ec <_vfiprintf_r+0x928>
 80122e6:	2300      	movs	r3, #0
 80122e8:	9315      	str	r3, [sp, #84]	; 0x54
 80122ea:	e7d4      	b.n	8012296 <_vfiprintf_r+0x8d2>
 80122ec:	9903      	ldr	r1, [sp, #12]
 80122ee:	9806      	ldr	r0, [sp, #24]
 80122f0:	aa14      	add	r2, sp, #80	; 0x50
 80122f2:	f7ff fb32 	bl	801195a <__sprint_r>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d0f5      	beq.n	80122e6 <_vfiprintf_r+0x922>
 80122fa:	e7cc      	b.n	8012296 <_vfiprintf_r+0x8d2>
 80122fc:	0027      	movs	r7, r4
 80122fe:	2a00      	cmp	r2, #0
 8012300:	d100      	bne.n	8012304 <_vfiprintf_r+0x940>
 8012302:	e51b      	b.n	8011d3c <_vfiprintf_r+0x378>
 8012304:	2b01      	cmp	r3, #1
 8012306:	d100      	bne.n	801230a <_vfiprintf_r+0x946>
 8012308:	e6fe      	b.n	8012108 <_vfiprintf_r+0x744>
 801230a:	ae40      	add	r6, sp, #256	; 0x100
 801230c:	2b02      	cmp	r3, #2
 801230e:	d100      	bne.n	8012312 <_vfiprintf_r+0x94e>
 8012310:	e743      	b.n	801219a <_vfiprintf_r+0x7d6>
 8012312:	2307      	movs	r3, #7
 8012314:	469c      	mov	ip, r3
 8012316:	4663      	mov	r3, ip
 8012318:	9900      	ldr	r1, [sp, #0]
 801231a:	0032      	movs	r2, r6
 801231c:	400b      	ands	r3, r1
 801231e:	9901      	ldr	r1, [sp, #4]
 8012320:	3e01      	subs	r6, #1
 8012322:	074c      	lsls	r4, r1, #29
 8012324:	9900      	ldr	r1, [sp, #0]
 8012326:	3330      	adds	r3, #48	; 0x30
 8012328:	08c8      	lsrs	r0, r1, #3
 801232a:	9901      	ldr	r1, [sp, #4]
 801232c:	4304      	orrs	r4, r0
 801232e:	08c9      	lsrs	r1, r1, #3
 8012330:	9101      	str	r1, [sp, #4]
 8012332:	0021      	movs	r1, r4
 8012334:	9801      	ldr	r0, [sp, #4]
 8012336:	7033      	strb	r3, [r6, #0]
 8012338:	9400      	str	r4, [sp, #0]
 801233a:	4301      	orrs	r1, r0
 801233c:	d1eb      	bne.n	8012316 <_vfiprintf_r+0x952>
 801233e:	07f9      	lsls	r1, r7, #31
 8012340:	d505      	bpl.n	801234e <_vfiprintf_r+0x98a>
 8012342:	2b30      	cmp	r3, #48	; 0x30
 8012344:	d003      	beq.n	801234e <_vfiprintf_r+0x98a>
 8012346:	2330      	movs	r3, #48	; 0x30
 8012348:	3e01      	subs	r6, #1
 801234a:	7033      	strb	r3, [r6, #0]
 801234c:	1e96      	subs	r6, r2, #2
 801234e:	9b05      	ldr	r3, [sp, #20]
 8012350:	003c      	movs	r4, r7
 8012352:	930b      	str	r3, [sp, #44]	; 0x2c
 8012354:	ab40      	add	r3, sp, #256	; 0x100
 8012356:	1b9b      	subs	r3, r3, r6
 8012358:	9305      	str	r3, [sp, #20]
 801235a:	e575      	b.n	8011e48 <_vfiprintf_r+0x484>
 801235c:	08014cb9 	.word	0x08014cb9

08012360 <__sbprintf>:
 8012360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012362:	0015      	movs	r5, r2
 8012364:	2202      	movs	r2, #2
 8012366:	4c1e      	ldr	r4, [pc, #120]	; (80123e0 <__sbprintf+0x80>)
 8012368:	001f      	movs	r7, r3
 801236a:	898b      	ldrh	r3, [r1, #12]
 801236c:	44a5      	add	sp, r4
 801236e:	4393      	bics	r3, r2
 8012370:	466a      	mov	r2, sp
 8012372:	8193      	strh	r3, [r2, #12]
 8012374:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012376:	0006      	movs	r6, r0
 8012378:	9319      	str	r3, [sp, #100]	; 0x64
 801237a:	89cb      	ldrh	r3, [r1, #14]
 801237c:	a816      	add	r0, sp, #88	; 0x58
 801237e:	81d3      	strh	r3, [r2, #14]
 8012380:	69cb      	ldr	r3, [r1, #28]
 8012382:	000c      	movs	r4, r1
 8012384:	9307      	str	r3, [sp, #28]
 8012386:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012388:	9309      	str	r3, [sp, #36]	; 0x24
 801238a:	ab1a      	add	r3, sp, #104	; 0x68
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	9304      	str	r3, [sp, #16]
 8012390:	2380      	movs	r3, #128	; 0x80
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	9302      	str	r3, [sp, #8]
 8012396:	9305      	str	r3, [sp, #20]
 8012398:	2300      	movs	r3, #0
 801239a:	9306      	str	r3, [sp, #24]
 801239c:	f7fa f812 	bl	800c3c4 <__retarget_lock_init_recursive>
 80123a0:	002a      	movs	r2, r5
 80123a2:	003b      	movs	r3, r7
 80123a4:	4669      	mov	r1, sp
 80123a6:	0030      	movs	r0, r6
 80123a8:	f7ff fb0c 	bl	80119c4 <_vfiprintf_r>
 80123ac:	1e05      	subs	r5, r0, #0
 80123ae:	db07      	blt.n	80123c0 <__sbprintf+0x60>
 80123b0:	4669      	mov	r1, sp
 80123b2:	0030      	movs	r0, r6
 80123b4:	f7fd fe7c 	bl	80100b0 <_fflush_r>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d001      	beq.n	80123c0 <__sbprintf+0x60>
 80123bc:	2501      	movs	r5, #1
 80123be:	426d      	negs	r5, r5
 80123c0:	466b      	mov	r3, sp
 80123c2:	899a      	ldrh	r2, [r3, #12]
 80123c4:	2340      	movs	r3, #64	; 0x40
 80123c6:	421a      	tst	r2, r3
 80123c8:	d002      	beq.n	80123d0 <__sbprintf+0x70>
 80123ca:	89a2      	ldrh	r2, [r4, #12]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80123d2:	f7f9 fff8 	bl	800c3c6 <__retarget_lock_close_recursive>
 80123d6:	0028      	movs	r0, r5
 80123d8:	4b02      	ldr	r3, [pc, #8]	; (80123e4 <__sbprintf+0x84>)
 80123da:	449d      	add	sp, r3
 80123dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123de:	46c0      	nop			; (mov r8, r8)
 80123e0:	fffffb94 	.word	0xfffffb94
 80123e4:	0000046c 	.word	0x0000046c

080123e8 <__sfvwrite_r>:
 80123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ea:	6893      	ldr	r3, [r2, #8]
 80123ec:	b087      	sub	sp, #28
 80123ee:	000c      	movs	r4, r1
 80123f0:	9002      	str	r0, [sp, #8]
 80123f2:	9204      	str	r2, [sp, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d102      	bne.n	80123fe <__sfvwrite_r+0x16>
 80123f8:	2000      	movs	r0, #0
 80123fa:	b007      	add	sp, #28
 80123fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123fe:	898b      	ldrh	r3, [r1, #12]
 8012400:	071b      	lsls	r3, r3, #28
 8012402:	d557      	bpl.n	80124b4 <__sfvwrite_r+0xcc>
 8012404:	690b      	ldr	r3, [r1, #16]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d054      	beq.n	80124b4 <__sfvwrite_r+0xcc>
 801240a:	9b04      	ldr	r3, [sp, #16]
 801240c:	2202      	movs	r2, #2
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	9301      	str	r3, [sp, #4]
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	001f      	movs	r7, r3
 8012416:	4017      	ands	r7, r2
 8012418:	4213      	tst	r3, r2
 801241a:	d171      	bne.n	8012500 <__sfvwrite_r+0x118>
 801241c:	2201      	movs	r2, #1
 801241e:	2101      	movs	r1, #1
 8012420:	401a      	ands	r2, r3
 8012422:	420b      	tst	r3, r1
 8012424:	d100      	bne.n	8012428 <__sfvwrite_r+0x40>
 8012426:	e0a5      	b.n	8012574 <__sfvwrite_r+0x18c>
 8012428:	0038      	movs	r0, r7
 801242a:	003e      	movs	r6, r7
 801242c:	9703      	str	r7, [sp, #12]
 801242e:	9b03      	ldr	r3, [sp, #12]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d100      	bne.n	8012436 <__sfvwrite_r+0x4e>
 8012434:	e10b      	b.n	801264e <__sfvwrite_r+0x266>
 8012436:	2800      	cmp	r0, #0
 8012438:	d10a      	bne.n	8012450 <__sfvwrite_r+0x68>
 801243a:	001a      	movs	r2, r3
 801243c:	210a      	movs	r1, #10
 801243e:	0030      	movs	r0, r6
 8012440:	f7fd feb0 	bl	80101a4 <memchr>
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	1c5f      	adds	r7, r3, #1
 8012448:	2800      	cmp	r0, #0
 801244a:	d001      	beq.n	8012450 <__sfvwrite_r+0x68>
 801244c:	3001      	adds	r0, #1
 801244e:	1b87      	subs	r7, r0, r6
 8012450:	9b03      	ldr	r3, [sp, #12]
 8012452:	9705      	str	r7, [sp, #20]
 8012454:	429f      	cmp	r7, r3
 8012456:	d900      	bls.n	801245a <__sfvwrite_r+0x72>
 8012458:	9305      	str	r3, [sp, #20]
 801245a:	6820      	ldr	r0, [r4, #0]
 801245c:	6922      	ldr	r2, [r4, #16]
 801245e:	68a5      	ldr	r5, [r4, #8]
 8012460:	6963      	ldr	r3, [r4, #20]
 8012462:	4290      	cmp	r0, r2
 8012464:	d800      	bhi.n	8012468 <__sfvwrite_r+0x80>
 8012466:	e0fb      	b.n	8012660 <__sfvwrite_r+0x278>
 8012468:	9a05      	ldr	r2, [sp, #20]
 801246a:	18ed      	adds	r5, r5, r3
 801246c:	42aa      	cmp	r2, r5
 801246e:	dc00      	bgt.n	8012472 <__sfvwrite_r+0x8a>
 8012470:	e0f6      	b.n	8012660 <__sfvwrite_r+0x278>
 8012472:	0031      	movs	r1, r6
 8012474:	002a      	movs	r2, r5
 8012476:	f000 fa1e 	bl	80128b6 <memmove>
 801247a:	6823      	ldr	r3, [r4, #0]
 801247c:	0021      	movs	r1, r4
 801247e:	195b      	adds	r3, r3, r5
 8012480:	9802      	ldr	r0, [sp, #8]
 8012482:	6023      	str	r3, [r4, #0]
 8012484:	f7fd fe14 	bl	80100b0 <_fflush_r>
 8012488:	2800      	cmp	r0, #0
 801248a:	d16e      	bne.n	801256a <__sfvwrite_r+0x182>
 801248c:	2001      	movs	r0, #1
 801248e:	1b7f      	subs	r7, r7, r5
 8012490:	d105      	bne.n	801249e <__sfvwrite_r+0xb6>
 8012492:	0021      	movs	r1, r4
 8012494:	9802      	ldr	r0, [sp, #8]
 8012496:	f7fd fe0b 	bl	80100b0 <_fflush_r>
 801249a:	2800      	cmp	r0, #0
 801249c:	d165      	bne.n	801256a <__sfvwrite_r+0x182>
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	9a04      	ldr	r2, [sp, #16]
 80124a2:	1b5b      	subs	r3, r3, r5
 80124a4:	9303      	str	r3, [sp, #12]
 80124a6:	9b04      	ldr	r3, [sp, #16]
 80124a8:	1976      	adds	r6, r6, r5
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	1b5b      	subs	r3, r3, r5
 80124ae:	6093      	str	r3, [r2, #8]
 80124b0:	d1bd      	bne.n	801242e <__sfvwrite_r+0x46>
 80124b2:	e7a1      	b.n	80123f8 <__sfvwrite_r+0x10>
 80124b4:	0021      	movs	r1, r4
 80124b6:	9802      	ldr	r0, [sp, #8]
 80124b8:	f000 f932 	bl	8012720 <__swsetup_r>
 80124bc:	2800      	cmp	r0, #0
 80124be:	d0a4      	beq.n	801240a <__sfvwrite_r+0x22>
 80124c0:	2001      	movs	r0, #1
 80124c2:	4240      	negs	r0, r0
 80124c4:	e799      	b.n	80123fa <__sfvwrite_r+0x12>
 80124c6:	9b01      	ldr	r3, [sp, #4]
 80124c8:	681e      	ldr	r6, [r3, #0]
 80124ca:	685d      	ldr	r5, [r3, #4]
 80124cc:	3308      	adds	r3, #8
 80124ce:	9301      	str	r3, [sp, #4]
 80124d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80124d2:	69e1      	ldr	r1, [r4, #28]
 80124d4:	2d00      	cmp	r5, #0
 80124d6:	d0f6      	beq.n	80124c6 <__sfvwrite_r+0xde>
 80124d8:	4a6e      	ldr	r2, [pc, #440]	; (8012694 <__sfvwrite_r+0x2ac>)
 80124da:	002b      	movs	r3, r5
 80124dc:	4295      	cmp	r5, r2
 80124de:	d900      	bls.n	80124e2 <__sfvwrite_r+0xfa>
 80124e0:	0013      	movs	r3, r2
 80124e2:	0032      	movs	r2, r6
 80124e4:	9802      	ldr	r0, [sp, #8]
 80124e6:	47b8      	blx	r7
 80124e8:	2800      	cmp	r0, #0
 80124ea:	dd3e      	ble.n	801256a <__sfvwrite_r+0x182>
 80124ec:	9b04      	ldr	r3, [sp, #16]
 80124ee:	9a04      	ldr	r2, [sp, #16]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	1836      	adds	r6, r6, r0
 80124f4:	1a1b      	subs	r3, r3, r0
 80124f6:	1a2d      	subs	r5, r5, r0
 80124f8:	6093      	str	r3, [r2, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1e8      	bne.n	80124d0 <__sfvwrite_r+0xe8>
 80124fe:	e77b      	b.n	80123f8 <__sfvwrite_r+0x10>
 8012500:	2600      	movs	r6, #0
 8012502:	0035      	movs	r5, r6
 8012504:	e7e4      	b.n	80124d0 <__sfvwrite_r+0xe8>
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	9303      	str	r3, [sp, #12]
 801250c:	9b01      	ldr	r3, [sp, #4]
 801250e:	685d      	ldr	r5, [r3, #4]
 8012510:	3308      	adds	r3, #8
 8012512:	9301      	str	r3, [sp, #4]
 8012514:	220c      	movs	r2, #12
 8012516:	5ea3      	ldrsh	r3, [r4, r2]
 8012518:	6820      	ldr	r0, [r4, #0]
 801251a:	68a6      	ldr	r6, [r4, #8]
 801251c:	2d00      	cmp	r5, #0
 801251e:	d0f2      	beq.n	8012506 <__sfvwrite_r+0x11e>
 8012520:	2180      	movs	r1, #128	; 0x80
 8012522:	0089      	lsls	r1, r1, #2
 8012524:	b29a      	uxth	r2, r3
 8012526:	420b      	tst	r3, r1
 8012528:	d062      	beq.n	80125f0 <__sfvwrite_r+0x208>
 801252a:	42ae      	cmp	r6, r5
 801252c:	d837      	bhi.n	801259e <__sfvwrite_r+0x1b6>
 801252e:	2390      	movs	r3, #144	; 0x90
 8012530:	00db      	lsls	r3, r3, #3
 8012532:	421a      	tst	r2, r3
 8012534:	d033      	beq.n	801259e <__sfvwrite_r+0x1b6>
 8012536:	6921      	ldr	r1, [r4, #16]
 8012538:	1a43      	subs	r3, r0, r1
 801253a:	2003      	movs	r0, #3
 801253c:	9305      	str	r3, [sp, #20]
 801253e:	6963      	ldr	r3, [r4, #20]
 8012540:	4343      	muls	r3, r0
 8012542:	0fdf      	lsrs	r7, r3, #31
 8012544:	18ff      	adds	r7, r7, r3
 8012546:	9b05      	ldr	r3, [sp, #20]
 8012548:	107f      	asrs	r7, r7, #1
 801254a:	3301      	adds	r3, #1
 801254c:	195b      	adds	r3, r3, r5
 801254e:	42bb      	cmp	r3, r7
 8012550:	d900      	bls.n	8012554 <__sfvwrite_r+0x16c>
 8012552:	001f      	movs	r7, r3
 8012554:	0552      	lsls	r2, r2, #21
 8012556:	d53c      	bpl.n	80125d2 <__sfvwrite_r+0x1ea>
 8012558:	0039      	movs	r1, r7
 801255a:	9802      	ldr	r0, [sp, #8]
 801255c:	f7f8 fb02 	bl	800ab64 <_malloc_r>
 8012560:	1e06      	subs	r6, r0, #0
 8012562:	d10a      	bne.n	801257a <__sfvwrite_r+0x192>
 8012564:	230c      	movs	r3, #12
 8012566:	9a02      	ldr	r2, [sp, #8]
 8012568:	6013      	str	r3, [r2, #0]
 801256a:	2340      	movs	r3, #64	; 0x40
 801256c:	89a2      	ldrh	r2, [r4, #12]
 801256e:	4313      	orrs	r3, r2
 8012570:	81a3      	strh	r3, [r4, #12]
 8012572:	e7a5      	b.n	80124c0 <__sfvwrite_r+0xd8>
 8012574:	0015      	movs	r5, r2
 8012576:	9203      	str	r2, [sp, #12]
 8012578:	e7cc      	b.n	8012514 <__sfvwrite_r+0x12c>
 801257a:	9a05      	ldr	r2, [sp, #20]
 801257c:	6921      	ldr	r1, [r4, #16]
 801257e:	f7f9 ff30 	bl	800c3e2 <memcpy>
 8012582:	89a2      	ldrh	r2, [r4, #12]
 8012584:	4b44      	ldr	r3, [pc, #272]	; (8012698 <__sfvwrite_r+0x2b0>)
 8012586:	401a      	ands	r2, r3
 8012588:	2380      	movs	r3, #128	; 0x80
 801258a:	4313      	orrs	r3, r2
 801258c:	81a3      	strh	r3, [r4, #12]
 801258e:	9b05      	ldr	r3, [sp, #20]
 8012590:	6126      	str	r6, [r4, #16]
 8012592:	18f6      	adds	r6, r6, r3
 8012594:	6026      	str	r6, [r4, #0]
 8012596:	002e      	movs	r6, r5
 8012598:	6167      	str	r7, [r4, #20]
 801259a:	1aff      	subs	r7, r7, r3
 801259c:	60a7      	str	r7, [r4, #8]
 801259e:	002f      	movs	r7, r5
 80125a0:	42ae      	cmp	r6, r5
 80125a2:	d900      	bls.n	80125a6 <__sfvwrite_r+0x1be>
 80125a4:	002e      	movs	r6, r5
 80125a6:	0032      	movs	r2, r6
 80125a8:	9903      	ldr	r1, [sp, #12]
 80125aa:	6820      	ldr	r0, [r4, #0]
 80125ac:	f000 f983 	bl	80128b6 <memmove>
 80125b0:	68a3      	ldr	r3, [r4, #8]
 80125b2:	1b9b      	subs	r3, r3, r6
 80125b4:	60a3      	str	r3, [r4, #8]
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	199b      	adds	r3, r3, r6
 80125ba:	6023      	str	r3, [r4, #0]
 80125bc:	9b03      	ldr	r3, [sp, #12]
 80125be:	9a04      	ldr	r2, [sp, #16]
 80125c0:	19db      	adds	r3, r3, r7
 80125c2:	9303      	str	r3, [sp, #12]
 80125c4:	9b04      	ldr	r3, [sp, #16]
 80125c6:	1bed      	subs	r5, r5, r7
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	1bdb      	subs	r3, r3, r7
 80125cc:	6093      	str	r3, [r2, #8]
 80125ce:	d1a1      	bne.n	8012514 <__sfvwrite_r+0x12c>
 80125d0:	e712      	b.n	80123f8 <__sfvwrite_r+0x10>
 80125d2:	003a      	movs	r2, r7
 80125d4:	9802      	ldr	r0, [sp, #8]
 80125d6:	f7fe fd5d 	bl	8011094 <_realloc_r>
 80125da:	1e06      	subs	r6, r0, #0
 80125dc:	d1d7      	bne.n	801258e <__sfvwrite_r+0x1a6>
 80125de:	6921      	ldr	r1, [r4, #16]
 80125e0:	9802      	ldr	r0, [sp, #8]
 80125e2:	f7f9 ff79 	bl	800c4d8 <_free_r>
 80125e6:	2280      	movs	r2, #128	; 0x80
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	4393      	bics	r3, r2
 80125ec:	81a3      	strh	r3, [r4, #12]
 80125ee:	e7b9      	b.n	8012564 <__sfvwrite_r+0x17c>
 80125f0:	6923      	ldr	r3, [r4, #16]
 80125f2:	4283      	cmp	r3, r0
 80125f4:	d302      	bcc.n	80125fc <__sfvwrite_r+0x214>
 80125f6:	6967      	ldr	r7, [r4, #20]
 80125f8:	42af      	cmp	r7, r5
 80125fa:	d916      	bls.n	801262a <__sfvwrite_r+0x242>
 80125fc:	42ae      	cmp	r6, r5
 80125fe:	d900      	bls.n	8012602 <__sfvwrite_r+0x21a>
 8012600:	002e      	movs	r6, r5
 8012602:	0032      	movs	r2, r6
 8012604:	9903      	ldr	r1, [sp, #12]
 8012606:	f000 f956 	bl	80128b6 <memmove>
 801260a:	68a3      	ldr	r3, [r4, #8]
 801260c:	6822      	ldr	r2, [r4, #0]
 801260e:	1b9b      	subs	r3, r3, r6
 8012610:	1992      	adds	r2, r2, r6
 8012612:	0037      	movs	r7, r6
 8012614:	60a3      	str	r3, [r4, #8]
 8012616:	6022      	str	r2, [r4, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1cf      	bne.n	80125bc <__sfvwrite_r+0x1d4>
 801261c:	0021      	movs	r1, r4
 801261e:	9802      	ldr	r0, [sp, #8]
 8012620:	f7fd fd46 	bl	80100b0 <_fflush_r>
 8012624:	2800      	cmp	r0, #0
 8012626:	d0c9      	beq.n	80125bc <__sfvwrite_r+0x1d4>
 8012628:	e79f      	b.n	801256a <__sfvwrite_r+0x182>
 801262a:	4b1c      	ldr	r3, [pc, #112]	; (801269c <__sfvwrite_r+0x2b4>)
 801262c:	0028      	movs	r0, r5
 801262e:	429d      	cmp	r5, r3
 8012630:	d900      	bls.n	8012634 <__sfvwrite_r+0x24c>
 8012632:	481b      	ldr	r0, [pc, #108]	; (80126a0 <__sfvwrite_r+0x2b8>)
 8012634:	0039      	movs	r1, r7
 8012636:	f7ed fe0b 	bl	8000250 <__divsi3>
 801263a:	003b      	movs	r3, r7
 801263c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801263e:	4343      	muls	r3, r0
 8012640:	9a03      	ldr	r2, [sp, #12]
 8012642:	69e1      	ldr	r1, [r4, #28]
 8012644:	9802      	ldr	r0, [sp, #8]
 8012646:	47b0      	blx	r6
 8012648:	1e07      	subs	r7, r0, #0
 801264a:	dcb7      	bgt.n	80125bc <__sfvwrite_r+0x1d4>
 801264c:	e78d      	b.n	801256a <__sfvwrite_r+0x182>
 801264e:	9b01      	ldr	r3, [sp, #4]
 8012650:	2000      	movs	r0, #0
 8012652:	681e      	ldr	r6, [r3, #0]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	9303      	str	r3, [sp, #12]
 8012658:	9b01      	ldr	r3, [sp, #4]
 801265a:	3308      	adds	r3, #8
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	e6e6      	b.n	801242e <__sfvwrite_r+0x46>
 8012660:	9a05      	ldr	r2, [sp, #20]
 8012662:	4293      	cmp	r3, r2
 8012664:	dc08      	bgt.n	8012678 <__sfvwrite_r+0x290>
 8012666:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012668:	0032      	movs	r2, r6
 801266a:	69e1      	ldr	r1, [r4, #28]
 801266c:	9802      	ldr	r0, [sp, #8]
 801266e:	47a8      	blx	r5
 8012670:	1e05      	subs	r5, r0, #0
 8012672:	dd00      	ble.n	8012676 <__sfvwrite_r+0x28e>
 8012674:	e70a      	b.n	801248c <__sfvwrite_r+0xa4>
 8012676:	e778      	b.n	801256a <__sfvwrite_r+0x182>
 8012678:	9a05      	ldr	r2, [sp, #20]
 801267a:	0031      	movs	r1, r6
 801267c:	f000 f91b 	bl	80128b6 <memmove>
 8012680:	9a05      	ldr	r2, [sp, #20]
 8012682:	68a3      	ldr	r3, [r4, #8]
 8012684:	0015      	movs	r5, r2
 8012686:	1a9b      	subs	r3, r3, r2
 8012688:	60a3      	str	r3, [r4, #8]
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	189b      	adds	r3, r3, r2
 801268e:	6023      	str	r3, [r4, #0]
 8012690:	e6fc      	b.n	801248c <__sfvwrite_r+0xa4>
 8012692:	46c0      	nop			; (mov r8, r8)
 8012694:	7ffffc00 	.word	0x7ffffc00
 8012698:	fffffb7f 	.word	0xfffffb7f
 801269c:	7ffffffe 	.word	0x7ffffffe
 80126a0:	7fffffff 	.word	0x7fffffff

080126a4 <__submore>:
 80126a4:	000b      	movs	r3, r1
 80126a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126a8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80126aa:	3340      	adds	r3, #64	; 0x40
 80126ac:	000c      	movs	r4, r1
 80126ae:	429d      	cmp	r5, r3
 80126b0:	d11c      	bne.n	80126ec <__submore+0x48>
 80126b2:	2680      	movs	r6, #128	; 0x80
 80126b4:	00f6      	lsls	r6, r6, #3
 80126b6:	0031      	movs	r1, r6
 80126b8:	f7f8 fa54 	bl	800ab64 <_malloc_r>
 80126bc:	2800      	cmp	r0, #0
 80126be:	d102      	bne.n	80126c6 <__submore+0x22>
 80126c0:	2001      	movs	r0, #1
 80126c2:	4240      	negs	r0, r0
 80126c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80126c6:	0023      	movs	r3, r4
 80126c8:	6320      	str	r0, [r4, #48]	; 0x30
 80126ca:	6366      	str	r6, [r4, #52]	; 0x34
 80126cc:	3342      	adds	r3, #66	; 0x42
 80126ce:	781a      	ldrb	r2, [r3, #0]
 80126d0:	4b10      	ldr	r3, [pc, #64]	; (8012714 <__submore+0x70>)
 80126d2:	54c2      	strb	r2, [r0, r3]
 80126d4:	0023      	movs	r3, r4
 80126d6:	3341      	adds	r3, #65	; 0x41
 80126d8:	781a      	ldrb	r2, [r3, #0]
 80126da:	4b0f      	ldr	r3, [pc, #60]	; (8012718 <__submore+0x74>)
 80126dc:	54c2      	strb	r2, [r0, r3]
 80126de:	782a      	ldrb	r2, [r5, #0]
 80126e0:	4b0e      	ldr	r3, [pc, #56]	; (801271c <__submore+0x78>)
 80126e2:	54c2      	strb	r2, [r0, r3]
 80126e4:	18c0      	adds	r0, r0, r3
 80126e6:	6020      	str	r0, [r4, #0]
 80126e8:	2000      	movs	r0, #0
 80126ea:	e7eb      	b.n	80126c4 <__submore+0x20>
 80126ec:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80126ee:	0029      	movs	r1, r5
 80126f0:	0073      	lsls	r3, r6, #1
 80126f2:	001a      	movs	r2, r3
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	f7fe fccd 	bl	8011094 <_realloc_r>
 80126fa:	1e05      	subs	r5, r0, #0
 80126fc:	d0e0      	beq.n	80126c0 <__submore+0x1c>
 80126fe:	1987      	adds	r7, r0, r6
 8012700:	0001      	movs	r1, r0
 8012702:	0032      	movs	r2, r6
 8012704:	0038      	movs	r0, r7
 8012706:	f7f9 fe6c 	bl	800c3e2 <memcpy>
 801270a:	9b01      	ldr	r3, [sp, #4]
 801270c:	6027      	str	r7, [r4, #0]
 801270e:	6325      	str	r5, [r4, #48]	; 0x30
 8012710:	6363      	str	r3, [r4, #52]	; 0x34
 8012712:	e7e9      	b.n	80126e8 <__submore+0x44>
 8012714:	000003ff 	.word	0x000003ff
 8012718:	000003fe 	.word	0x000003fe
 801271c:	000003fd 	.word	0x000003fd

08012720 <__swsetup_r>:
 8012720:	4b30      	ldr	r3, [pc, #192]	; (80127e4 <__swsetup_r+0xc4>)
 8012722:	b570      	push	{r4, r5, r6, lr}
 8012724:	0005      	movs	r5, r0
 8012726:	6818      	ldr	r0, [r3, #0]
 8012728:	000c      	movs	r4, r1
 801272a:	2800      	cmp	r0, #0
 801272c:	d004      	beq.n	8012738 <__swsetup_r+0x18>
 801272e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012730:	2b00      	cmp	r3, #0
 8012732:	d101      	bne.n	8012738 <__swsetup_r+0x18>
 8012734:	f7f9 fc2a 	bl	800bf8c <__sinit>
 8012738:	230c      	movs	r3, #12
 801273a:	5ee2      	ldrsh	r2, [r4, r3]
 801273c:	b293      	uxth	r3, r2
 801273e:	0711      	lsls	r1, r2, #28
 8012740:	d423      	bmi.n	801278a <__swsetup_r+0x6a>
 8012742:	06d9      	lsls	r1, r3, #27
 8012744:	d407      	bmi.n	8012756 <__swsetup_r+0x36>
 8012746:	2309      	movs	r3, #9
 8012748:	2001      	movs	r0, #1
 801274a:	602b      	str	r3, [r5, #0]
 801274c:	3337      	adds	r3, #55	; 0x37
 801274e:	4313      	orrs	r3, r2
 8012750:	81a3      	strh	r3, [r4, #12]
 8012752:	4240      	negs	r0, r0
 8012754:	bd70      	pop	{r4, r5, r6, pc}
 8012756:	075b      	lsls	r3, r3, #29
 8012758:	d513      	bpl.n	8012782 <__swsetup_r+0x62>
 801275a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801275c:	2900      	cmp	r1, #0
 801275e:	d008      	beq.n	8012772 <__swsetup_r+0x52>
 8012760:	0023      	movs	r3, r4
 8012762:	3340      	adds	r3, #64	; 0x40
 8012764:	4299      	cmp	r1, r3
 8012766:	d002      	beq.n	801276e <__swsetup_r+0x4e>
 8012768:	0028      	movs	r0, r5
 801276a:	f7f9 feb5 	bl	800c4d8 <_free_r>
 801276e:	2300      	movs	r3, #0
 8012770:	6323      	str	r3, [r4, #48]	; 0x30
 8012772:	2224      	movs	r2, #36	; 0x24
 8012774:	89a3      	ldrh	r3, [r4, #12]
 8012776:	4393      	bics	r3, r2
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	2300      	movs	r3, #0
 801277c:	6063      	str	r3, [r4, #4]
 801277e:	6923      	ldr	r3, [r4, #16]
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	2308      	movs	r3, #8
 8012784:	89a2      	ldrh	r2, [r4, #12]
 8012786:	4313      	orrs	r3, r2
 8012788:	81a3      	strh	r3, [r4, #12]
 801278a:	6923      	ldr	r3, [r4, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10b      	bne.n	80127a8 <__swsetup_r+0x88>
 8012790:	21a0      	movs	r1, #160	; 0xa0
 8012792:	2280      	movs	r2, #128	; 0x80
 8012794:	89a3      	ldrh	r3, [r4, #12]
 8012796:	0089      	lsls	r1, r1, #2
 8012798:	0092      	lsls	r2, r2, #2
 801279a:	400b      	ands	r3, r1
 801279c:	4293      	cmp	r3, r2
 801279e:	d003      	beq.n	80127a8 <__swsetup_r+0x88>
 80127a0:	0021      	movs	r1, r4
 80127a2:	0028      	movs	r0, r5
 80127a4:	f000 f8e8 	bl	8012978 <__smakebuf_r>
 80127a8:	220c      	movs	r2, #12
 80127aa:	5ea3      	ldrsh	r3, [r4, r2]
 80127ac:	2001      	movs	r0, #1
 80127ae:	001a      	movs	r2, r3
 80127b0:	b299      	uxth	r1, r3
 80127b2:	4002      	ands	r2, r0
 80127b4:	4203      	tst	r3, r0
 80127b6:	d00f      	beq.n	80127d8 <__swsetup_r+0xb8>
 80127b8:	2200      	movs	r2, #0
 80127ba:	60a2      	str	r2, [r4, #8]
 80127bc:	6962      	ldr	r2, [r4, #20]
 80127be:	4252      	negs	r2, r2
 80127c0:	61a2      	str	r2, [r4, #24]
 80127c2:	2000      	movs	r0, #0
 80127c4:	6922      	ldr	r2, [r4, #16]
 80127c6:	4282      	cmp	r2, r0
 80127c8:	d1c4      	bne.n	8012754 <__swsetup_r+0x34>
 80127ca:	0609      	lsls	r1, r1, #24
 80127cc:	d5c2      	bpl.n	8012754 <__swsetup_r+0x34>
 80127ce:	2240      	movs	r2, #64	; 0x40
 80127d0:	4313      	orrs	r3, r2
 80127d2:	81a3      	strh	r3, [r4, #12]
 80127d4:	3801      	subs	r0, #1
 80127d6:	e7bd      	b.n	8012754 <__swsetup_r+0x34>
 80127d8:	0788      	lsls	r0, r1, #30
 80127da:	d400      	bmi.n	80127de <__swsetup_r+0xbe>
 80127dc:	6962      	ldr	r2, [r4, #20]
 80127de:	60a2      	str	r2, [r4, #8]
 80127e0:	e7ef      	b.n	80127c2 <__swsetup_r+0xa2>
 80127e2:	46c0      	nop			; (mov r8, r8)
 80127e4:	200006d0 	.word	0x200006d0

080127e8 <__fputwc>:
 80127e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ea:	b085      	sub	sp, #20
 80127ec:	000e      	movs	r6, r1
 80127ee:	0015      	movs	r5, r2
 80127f0:	9001      	str	r0, [sp, #4]
 80127f2:	f7f9 fd55 	bl	800c2a0 <__locale_mb_cur_max>
 80127f6:	0004      	movs	r4, r0
 80127f8:	2801      	cmp	r0, #1
 80127fa:	d119      	bne.n	8012830 <__fputwc+0x48>
 80127fc:	1e73      	subs	r3, r6, #1
 80127fe:	2bfe      	cmp	r3, #254	; 0xfe
 8012800:	d816      	bhi.n	8012830 <__fputwc+0x48>
 8012802:	ab02      	add	r3, sp, #8
 8012804:	711e      	strb	r6, [r3, #4]
 8012806:	2700      	movs	r7, #0
 8012808:	42a7      	cmp	r7, r4
 801280a:	d020      	beq.n	801284e <__fputwc+0x66>
 801280c:	ab03      	add	r3, sp, #12
 801280e:	5dd9      	ldrb	r1, [r3, r7]
 8012810:	68ab      	ldr	r3, [r5, #8]
 8012812:	3b01      	subs	r3, #1
 8012814:	60ab      	str	r3, [r5, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	da04      	bge.n	8012824 <__fputwc+0x3c>
 801281a:	69aa      	ldr	r2, [r5, #24]
 801281c:	4293      	cmp	r3, r2
 801281e:	db19      	blt.n	8012854 <__fputwc+0x6c>
 8012820:	290a      	cmp	r1, #10
 8012822:	d017      	beq.n	8012854 <__fputwc+0x6c>
 8012824:	682b      	ldr	r3, [r5, #0]
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	602a      	str	r2, [r5, #0]
 801282a:	7019      	strb	r1, [r3, #0]
 801282c:	3701      	adds	r7, #1
 801282e:	e7eb      	b.n	8012808 <__fputwc+0x20>
 8012830:	002b      	movs	r3, r5
 8012832:	0032      	movs	r2, r6
 8012834:	9801      	ldr	r0, [sp, #4]
 8012836:	335c      	adds	r3, #92	; 0x5c
 8012838:	a903      	add	r1, sp, #12
 801283a:	f000 f857 	bl	80128ec <_wcrtomb_r>
 801283e:	0004      	movs	r4, r0
 8012840:	1c43      	adds	r3, r0, #1
 8012842:	d1e0      	bne.n	8012806 <__fputwc+0x1e>
 8012844:	2340      	movs	r3, #64	; 0x40
 8012846:	0006      	movs	r6, r0
 8012848:	89aa      	ldrh	r2, [r5, #12]
 801284a:	4313      	orrs	r3, r2
 801284c:	81ab      	strh	r3, [r5, #12]
 801284e:	0030      	movs	r0, r6
 8012850:	b005      	add	sp, #20
 8012852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012854:	002a      	movs	r2, r5
 8012856:	9801      	ldr	r0, [sp, #4]
 8012858:	f000 f8cc 	bl	80129f4 <__swbuf_r>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d1e5      	bne.n	801282c <__fputwc+0x44>
 8012860:	0006      	movs	r6, r0
 8012862:	e7f4      	b.n	801284e <__fputwc+0x66>

08012864 <_fputwc_r>:
 8012864:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012866:	b570      	push	{r4, r5, r6, lr}
 8012868:	0005      	movs	r5, r0
 801286a:	000e      	movs	r6, r1
 801286c:	0014      	movs	r4, r2
 801286e:	07db      	lsls	r3, r3, #31
 8012870:	d405      	bmi.n	801287e <_fputwc_r+0x1a>
 8012872:	8993      	ldrh	r3, [r2, #12]
 8012874:	059b      	lsls	r3, r3, #22
 8012876:	d402      	bmi.n	801287e <_fputwc_r+0x1a>
 8012878:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801287a:	f7f9 fda5 	bl	800c3c8 <__retarget_lock_acquire_recursive>
 801287e:	230c      	movs	r3, #12
 8012880:	5ee2      	ldrsh	r2, [r4, r3]
 8012882:	2380      	movs	r3, #128	; 0x80
 8012884:	019b      	lsls	r3, r3, #6
 8012886:	421a      	tst	r2, r3
 8012888:	d104      	bne.n	8012894 <_fputwc_r+0x30>
 801288a:	431a      	orrs	r2, r3
 801288c:	81a2      	strh	r2, [r4, #12]
 801288e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012890:	4313      	orrs	r3, r2
 8012892:	6663      	str	r3, [r4, #100]	; 0x64
 8012894:	0028      	movs	r0, r5
 8012896:	0022      	movs	r2, r4
 8012898:	0031      	movs	r1, r6
 801289a:	f7ff ffa5 	bl	80127e8 <__fputwc>
 801289e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128a0:	0005      	movs	r5, r0
 80128a2:	07db      	lsls	r3, r3, #31
 80128a4:	d405      	bmi.n	80128b2 <_fputwc_r+0x4e>
 80128a6:	89a3      	ldrh	r3, [r4, #12]
 80128a8:	059b      	lsls	r3, r3, #22
 80128aa:	d402      	bmi.n	80128b2 <_fputwc_r+0x4e>
 80128ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ae:	f7f9 fd8c 	bl	800c3ca <__retarget_lock_release_recursive>
 80128b2:	0028      	movs	r0, r5
 80128b4:	bd70      	pop	{r4, r5, r6, pc}

080128b6 <memmove>:
 80128b6:	b510      	push	{r4, lr}
 80128b8:	4288      	cmp	r0, r1
 80128ba:	d902      	bls.n	80128c2 <memmove+0xc>
 80128bc:	188b      	adds	r3, r1, r2
 80128be:	4298      	cmp	r0, r3
 80128c0:	d303      	bcc.n	80128ca <memmove+0x14>
 80128c2:	2300      	movs	r3, #0
 80128c4:	e007      	b.n	80128d6 <memmove+0x20>
 80128c6:	5c8b      	ldrb	r3, [r1, r2]
 80128c8:	5483      	strb	r3, [r0, r2]
 80128ca:	3a01      	subs	r2, #1
 80128cc:	d2fb      	bcs.n	80128c6 <memmove+0x10>
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	5ccc      	ldrb	r4, [r1, r3]
 80128d2:	54c4      	strb	r4, [r0, r3]
 80128d4:	3301      	adds	r3, #1
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d1fa      	bne.n	80128d0 <memmove+0x1a>
 80128da:	e7f8      	b.n	80128ce <memmove+0x18>

080128dc <abort>:
 80128dc:	2006      	movs	r0, #6
 80128de:	b510      	push	{r4, lr}
 80128e0:	f000 f906 	bl	8012af0 <raise>
 80128e4:	2001      	movs	r0, #1
 80128e6:	f7f1 fb13 	bl	8003f10 <_exit>
	...

080128ec <_wcrtomb_r>:
 80128ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80128ee:	001d      	movs	r5, r3
 80128f0:	4b09      	ldr	r3, [pc, #36]	; (8012918 <_wcrtomb_r+0x2c>)
 80128f2:	0004      	movs	r4, r0
 80128f4:	33e0      	adds	r3, #224	; 0xe0
 80128f6:	681e      	ldr	r6, [r3, #0]
 80128f8:	002b      	movs	r3, r5
 80128fa:	2900      	cmp	r1, #0
 80128fc:	d101      	bne.n	8012902 <_wcrtomb_r+0x16>
 80128fe:	000a      	movs	r2, r1
 8012900:	a901      	add	r1, sp, #4
 8012902:	0020      	movs	r0, r4
 8012904:	47b0      	blx	r6
 8012906:	1c43      	adds	r3, r0, #1
 8012908:	d103      	bne.n	8012912 <_wcrtomb_r+0x26>
 801290a:	2300      	movs	r3, #0
 801290c:	602b      	str	r3, [r5, #0]
 801290e:	338a      	adds	r3, #138	; 0x8a
 8012910:	6023      	str	r3, [r4, #0]
 8012912:	b004      	add	sp, #16
 8012914:	bd70      	pop	{r4, r5, r6, pc}
 8012916:	46c0      	nop			; (mov r8, r8)
 8012918:	20000444 	.word	0x20000444

0801291c <__swhatbuf_r>:
 801291c:	b570      	push	{r4, r5, r6, lr}
 801291e:	000e      	movs	r6, r1
 8012920:	001d      	movs	r5, r3
 8012922:	230e      	movs	r3, #14
 8012924:	5ec9      	ldrsh	r1, [r1, r3]
 8012926:	0014      	movs	r4, r2
 8012928:	b096      	sub	sp, #88	; 0x58
 801292a:	2900      	cmp	r1, #0
 801292c:	da09      	bge.n	8012942 <__swhatbuf_r+0x26>
 801292e:	89b2      	ldrh	r2, [r6, #12]
 8012930:	2380      	movs	r3, #128	; 0x80
 8012932:	0011      	movs	r1, r2
 8012934:	4019      	ands	r1, r3
 8012936:	421a      	tst	r2, r3
 8012938:	d018      	beq.n	801296c <__swhatbuf_r+0x50>
 801293a:	2100      	movs	r1, #0
 801293c:	3b40      	subs	r3, #64	; 0x40
 801293e:	0008      	movs	r0, r1
 8012940:	e010      	b.n	8012964 <__swhatbuf_r+0x48>
 8012942:	466a      	mov	r2, sp
 8012944:	f000 f8de 	bl	8012b04 <_fstat_r>
 8012948:	2800      	cmp	r0, #0
 801294a:	dbf0      	blt.n	801292e <__swhatbuf_r+0x12>
 801294c:	23f0      	movs	r3, #240	; 0xf0
 801294e:	9901      	ldr	r1, [sp, #4]
 8012950:	021b      	lsls	r3, r3, #8
 8012952:	4019      	ands	r1, r3
 8012954:	4b07      	ldr	r3, [pc, #28]	; (8012974 <__swhatbuf_r+0x58>)
 8012956:	2080      	movs	r0, #128	; 0x80
 8012958:	18c9      	adds	r1, r1, r3
 801295a:	424b      	negs	r3, r1
 801295c:	4159      	adcs	r1, r3
 801295e:	2380      	movs	r3, #128	; 0x80
 8012960:	0100      	lsls	r0, r0, #4
 8012962:	00db      	lsls	r3, r3, #3
 8012964:	6029      	str	r1, [r5, #0]
 8012966:	6023      	str	r3, [r4, #0]
 8012968:	b016      	add	sp, #88	; 0x58
 801296a:	bd70      	pop	{r4, r5, r6, pc}
 801296c:	2380      	movs	r3, #128	; 0x80
 801296e:	00db      	lsls	r3, r3, #3
 8012970:	e7e5      	b.n	801293e <__swhatbuf_r+0x22>
 8012972:	46c0      	nop			; (mov r8, r8)
 8012974:	ffffe000 	.word	0xffffe000

08012978 <__smakebuf_r>:
 8012978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801297a:	2602      	movs	r6, #2
 801297c:	898b      	ldrh	r3, [r1, #12]
 801297e:	0005      	movs	r5, r0
 8012980:	000c      	movs	r4, r1
 8012982:	4233      	tst	r3, r6
 8012984:	d006      	beq.n	8012994 <__smakebuf_r+0x1c>
 8012986:	0023      	movs	r3, r4
 8012988:	3343      	adds	r3, #67	; 0x43
 801298a:	6023      	str	r3, [r4, #0]
 801298c:	6123      	str	r3, [r4, #16]
 801298e:	2301      	movs	r3, #1
 8012990:	6163      	str	r3, [r4, #20]
 8012992:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012994:	466a      	mov	r2, sp
 8012996:	ab01      	add	r3, sp, #4
 8012998:	f7ff ffc0 	bl	801291c <__swhatbuf_r>
 801299c:	9900      	ldr	r1, [sp, #0]
 801299e:	0007      	movs	r7, r0
 80129a0:	0028      	movs	r0, r5
 80129a2:	f7f8 f8df 	bl	800ab64 <_malloc_r>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d108      	bne.n	80129bc <__smakebuf_r+0x44>
 80129aa:	220c      	movs	r2, #12
 80129ac:	5ea3      	ldrsh	r3, [r4, r2]
 80129ae:	059a      	lsls	r2, r3, #22
 80129b0:	d4ef      	bmi.n	8012992 <__smakebuf_r+0x1a>
 80129b2:	2203      	movs	r2, #3
 80129b4:	4393      	bics	r3, r2
 80129b6:	431e      	orrs	r6, r3
 80129b8:	81a6      	strh	r6, [r4, #12]
 80129ba:	e7e4      	b.n	8012986 <__smakebuf_r+0xe>
 80129bc:	2380      	movs	r3, #128	; 0x80
 80129be:	89a2      	ldrh	r2, [r4, #12]
 80129c0:	6020      	str	r0, [r4, #0]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	81a3      	strh	r3, [r4, #12]
 80129c6:	9b00      	ldr	r3, [sp, #0]
 80129c8:	6120      	str	r0, [r4, #16]
 80129ca:	6163      	str	r3, [r4, #20]
 80129cc:	9b01      	ldr	r3, [sp, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00c      	beq.n	80129ec <__smakebuf_r+0x74>
 80129d2:	0028      	movs	r0, r5
 80129d4:	230e      	movs	r3, #14
 80129d6:	5ee1      	ldrsh	r1, [r4, r3]
 80129d8:	f000 f8a6 	bl	8012b28 <_isatty_r>
 80129dc:	2800      	cmp	r0, #0
 80129de:	d005      	beq.n	80129ec <__smakebuf_r+0x74>
 80129e0:	2303      	movs	r3, #3
 80129e2:	89a2      	ldrh	r2, [r4, #12]
 80129e4:	439a      	bics	r2, r3
 80129e6:	3b02      	subs	r3, #2
 80129e8:	4313      	orrs	r3, r2
 80129ea:	81a3      	strh	r3, [r4, #12]
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	433b      	orrs	r3, r7
 80129f0:	81a3      	strh	r3, [r4, #12]
 80129f2:	e7ce      	b.n	8012992 <__smakebuf_r+0x1a>

080129f4 <__swbuf_r>:
 80129f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f6:	0006      	movs	r6, r0
 80129f8:	000d      	movs	r5, r1
 80129fa:	0014      	movs	r4, r2
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d004      	beq.n	8012a0a <__swbuf_r+0x16>
 8012a00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <__swbuf_r+0x16>
 8012a06:	f7f9 fac1 	bl	800bf8c <__sinit>
 8012a0a:	69a3      	ldr	r3, [r4, #24]
 8012a0c:	60a3      	str	r3, [r4, #8]
 8012a0e:	89a3      	ldrh	r3, [r4, #12]
 8012a10:	071b      	lsls	r3, r3, #28
 8012a12:	d52e      	bpl.n	8012a72 <__swbuf_r+0x7e>
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d02b      	beq.n	8012a72 <__swbuf_r+0x7e>
 8012a1a:	230c      	movs	r3, #12
 8012a1c:	5ee2      	ldrsh	r2, [r4, r3]
 8012a1e:	2380      	movs	r3, #128	; 0x80
 8012a20:	019b      	lsls	r3, r3, #6
 8012a22:	b2ef      	uxtb	r7, r5
 8012a24:	b2ed      	uxtb	r5, r5
 8012a26:	421a      	tst	r2, r3
 8012a28:	d02c      	beq.n	8012a84 <__swbuf_r+0x90>
 8012a2a:	6923      	ldr	r3, [r4, #16]
 8012a2c:	6820      	ldr	r0, [r4, #0]
 8012a2e:	1ac0      	subs	r0, r0, r3
 8012a30:	6963      	ldr	r3, [r4, #20]
 8012a32:	4283      	cmp	r3, r0
 8012a34:	dc05      	bgt.n	8012a42 <__swbuf_r+0x4e>
 8012a36:	0021      	movs	r1, r4
 8012a38:	0030      	movs	r0, r6
 8012a3a:	f7fd fb39 	bl	80100b0 <_fflush_r>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d11d      	bne.n	8012a7e <__swbuf_r+0x8a>
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	3001      	adds	r0, #1
 8012a46:	3b01      	subs	r3, #1
 8012a48:	60a3      	str	r3, [r4, #8]
 8012a4a:	6823      	ldr	r3, [r4, #0]
 8012a4c:	1c5a      	adds	r2, r3, #1
 8012a4e:	6022      	str	r2, [r4, #0]
 8012a50:	701f      	strb	r7, [r3, #0]
 8012a52:	6963      	ldr	r3, [r4, #20]
 8012a54:	4283      	cmp	r3, r0
 8012a56:	d004      	beq.n	8012a62 <__swbuf_r+0x6e>
 8012a58:	89a3      	ldrh	r3, [r4, #12]
 8012a5a:	07db      	lsls	r3, r3, #31
 8012a5c:	d507      	bpl.n	8012a6e <__swbuf_r+0x7a>
 8012a5e:	2d0a      	cmp	r5, #10
 8012a60:	d105      	bne.n	8012a6e <__swbuf_r+0x7a>
 8012a62:	0021      	movs	r1, r4
 8012a64:	0030      	movs	r0, r6
 8012a66:	f7fd fb23 	bl	80100b0 <_fflush_r>
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	d107      	bne.n	8012a7e <__swbuf_r+0x8a>
 8012a6e:	0028      	movs	r0, r5
 8012a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a72:	0021      	movs	r1, r4
 8012a74:	0030      	movs	r0, r6
 8012a76:	f7ff fe53 	bl	8012720 <__swsetup_r>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	d0cd      	beq.n	8012a1a <__swbuf_r+0x26>
 8012a7e:	2501      	movs	r5, #1
 8012a80:	426d      	negs	r5, r5
 8012a82:	e7f4      	b.n	8012a6e <__swbuf_r+0x7a>
 8012a84:	4313      	orrs	r3, r2
 8012a86:	81a3      	strh	r3, [r4, #12]
 8012a88:	4a02      	ldr	r2, [pc, #8]	; (8012a94 <__swbuf_r+0xa0>)
 8012a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a8c:	4013      	ands	r3, r2
 8012a8e:	6663      	str	r3, [r4, #100]	; 0x64
 8012a90:	e7cb      	b.n	8012a2a <__swbuf_r+0x36>
 8012a92:	46c0      	nop			; (mov r8, r8)
 8012a94:	ffffdfff 	.word	0xffffdfff

08012a98 <_raise_r>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	0004      	movs	r4, r0
 8012a9c:	000d      	movs	r5, r1
 8012a9e:	291f      	cmp	r1, #31
 8012aa0:	d904      	bls.n	8012aac <_raise_r+0x14>
 8012aa2:	2316      	movs	r3, #22
 8012aa4:	6003      	str	r3, [r0, #0]
 8012aa6:	2001      	movs	r0, #1
 8012aa8:	4240      	negs	r0, r0
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}
 8012aac:	0003      	movs	r3, r0
 8012aae:	33fc      	adds	r3, #252	; 0xfc
 8012ab0:	69db      	ldr	r3, [r3, #28]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d004      	beq.n	8012ac0 <_raise_r+0x28>
 8012ab6:	008a      	lsls	r2, r1, #2
 8012ab8:	189b      	adds	r3, r3, r2
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	2a00      	cmp	r2, #0
 8012abe:	d108      	bne.n	8012ad2 <_raise_r+0x3a>
 8012ac0:	0020      	movs	r0, r4
 8012ac2:	f000 f855 	bl	8012b70 <_getpid_r>
 8012ac6:	002a      	movs	r2, r5
 8012ac8:	0001      	movs	r1, r0
 8012aca:	0020      	movs	r0, r4
 8012acc:	f000 f83e 	bl	8012b4c <_kill_r>
 8012ad0:	e7eb      	b.n	8012aaa <_raise_r+0x12>
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	2a01      	cmp	r2, #1
 8012ad6:	d0e8      	beq.n	8012aaa <_raise_r+0x12>
 8012ad8:	1c51      	adds	r1, r2, #1
 8012ada:	d103      	bne.n	8012ae4 <_raise_r+0x4c>
 8012adc:	2316      	movs	r3, #22
 8012ade:	3001      	adds	r0, #1
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	e7e2      	b.n	8012aaa <_raise_r+0x12>
 8012ae4:	2400      	movs	r4, #0
 8012ae6:	0028      	movs	r0, r5
 8012ae8:	601c      	str	r4, [r3, #0]
 8012aea:	4790      	blx	r2
 8012aec:	0020      	movs	r0, r4
 8012aee:	e7dc      	b.n	8012aaa <_raise_r+0x12>

08012af0 <raise>:
 8012af0:	b510      	push	{r4, lr}
 8012af2:	4b03      	ldr	r3, [pc, #12]	; (8012b00 <raise+0x10>)
 8012af4:	0001      	movs	r1, r0
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	f7ff ffce 	bl	8012a98 <_raise_r>
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	46c0      	nop			; (mov r8, r8)
 8012b00:	200006d0 	.word	0x200006d0

08012b04 <_fstat_r>:
 8012b04:	2300      	movs	r3, #0
 8012b06:	b570      	push	{r4, r5, r6, lr}
 8012b08:	4d06      	ldr	r5, [pc, #24]	; (8012b24 <_fstat_r+0x20>)
 8012b0a:	0004      	movs	r4, r0
 8012b0c:	0008      	movs	r0, r1
 8012b0e:	0011      	movs	r1, r2
 8012b10:	602b      	str	r3, [r5, #0]
 8012b12:	f7f1 fa4c 	bl	8003fae <_fstat>
 8012b16:	1c43      	adds	r3, r0, #1
 8012b18:	d103      	bne.n	8012b22 <_fstat_r+0x1e>
 8012b1a:	682b      	ldr	r3, [r5, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d000      	beq.n	8012b22 <_fstat_r+0x1e>
 8012b20:	6023      	str	r3, [r4, #0]
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	20000da8 	.word	0x20000da8

08012b28 <_isatty_r>:
 8012b28:	2300      	movs	r3, #0
 8012b2a:	b570      	push	{r4, r5, r6, lr}
 8012b2c:	4d06      	ldr	r5, [pc, #24]	; (8012b48 <_isatty_r+0x20>)
 8012b2e:	0004      	movs	r4, r0
 8012b30:	0008      	movs	r0, r1
 8012b32:	602b      	str	r3, [r5, #0]
 8012b34:	f7f1 fa49 	bl	8003fca <_isatty>
 8012b38:	1c43      	adds	r3, r0, #1
 8012b3a:	d103      	bne.n	8012b44 <_isatty_r+0x1c>
 8012b3c:	682b      	ldr	r3, [r5, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d000      	beq.n	8012b44 <_isatty_r+0x1c>
 8012b42:	6023      	str	r3, [r4, #0]
 8012b44:	bd70      	pop	{r4, r5, r6, pc}
 8012b46:	46c0      	nop			; (mov r8, r8)
 8012b48:	20000da8 	.word	0x20000da8

08012b4c <_kill_r>:
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	b570      	push	{r4, r5, r6, lr}
 8012b50:	4d06      	ldr	r5, [pc, #24]	; (8012b6c <_kill_r+0x20>)
 8012b52:	0004      	movs	r4, r0
 8012b54:	0008      	movs	r0, r1
 8012b56:	0011      	movs	r1, r2
 8012b58:	602b      	str	r3, [r5, #0]
 8012b5a:	f7f1 f9c9 	bl	8003ef0 <_kill>
 8012b5e:	1c43      	adds	r3, r0, #1
 8012b60:	d103      	bne.n	8012b6a <_kill_r+0x1e>
 8012b62:	682b      	ldr	r3, [r5, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d000      	beq.n	8012b6a <_kill_r+0x1e>
 8012b68:	6023      	str	r3, [r4, #0]
 8012b6a:	bd70      	pop	{r4, r5, r6, pc}
 8012b6c:	20000da8 	.word	0x20000da8

08012b70 <_getpid_r>:
 8012b70:	b510      	push	{r4, lr}
 8012b72:	f7f1 f9b7 	bl	8003ee4 <_getpid>
 8012b76:	bd10      	pop	{r4, pc}

08012b78 <round>:
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	004a      	lsls	r2, r1, #1
 8012b7c:	000d      	movs	r5, r1
 8012b7e:	4920      	ldr	r1, [pc, #128]	; (8012c00 <round+0x88>)
 8012b80:	0d52      	lsrs	r2, r2, #21
 8012b82:	1851      	adds	r1, r2, r1
 8012b84:	0006      	movs	r6, r0
 8012b86:	2913      	cmp	r1, #19
 8012b88:	dc18      	bgt.n	8012bbc <round+0x44>
 8012b8a:	2900      	cmp	r1, #0
 8012b8c:	da09      	bge.n	8012ba2 <round+0x2a>
 8012b8e:	0feb      	lsrs	r3, r5, #31
 8012b90:	2200      	movs	r2, #0
 8012b92:	07db      	lsls	r3, r3, #31
 8012b94:	3101      	adds	r1, #1
 8012b96:	d101      	bne.n	8012b9c <round+0x24>
 8012b98:	491a      	ldr	r1, [pc, #104]	; (8012c04 <round+0x8c>)
 8012b9a:	430b      	orrs	r3, r1
 8012b9c:	0019      	movs	r1, r3
 8012b9e:	0010      	movs	r0, r2
 8012ba0:	e017      	b.n	8012bd2 <round+0x5a>
 8012ba2:	4c19      	ldr	r4, [pc, #100]	; (8012c08 <round+0x90>)
 8012ba4:	410c      	asrs	r4, r1
 8012ba6:	0022      	movs	r2, r4
 8012ba8:	402a      	ands	r2, r5
 8012baa:	4302      	orrs	r2, r0
 8012bac:	d013      	beq.n	8012bd6 <round+0x5e>
 8012bae:	2280      	movs	r2, #128	; 0x80
 8012bb0:	0312      	lsls	r2, r2, #12
 8012bb2:	410a      	asrs	r2, r1
 8012bb4:	1953      	adds	r3, r2, r5
 8012bb6:	43a3      	bics	r3, r4
 8012bb8:	2200      	movs	r2, #0
 8012bba:	e7ef      	b.n	8012b9c <round+0x24>
 8012bbc:	2933      	cmp	r1, #51	; 0x33
 8012bbe:	dd0d      	ble.n	8012bdc <round+0x64>
 8012bc0:	2380      	movs	r3, #128	; 0x80
 8012bc2:	00db      	lsls	r3, r3, #3
 8012bc4:	4299      	cmp	r1, r3
 8012bc6:	d106      	bne.n	8012bd6 <round+0x5e>
 8012bc8:	0002      	movs	r2, r0
 8012bca:	002b      	movs	r3, r5
 8012bcc:	0029      	movs	r1, r5
 8012bce:	f7ed fdf3 	bl	80007b8 <__aeabi_dadd>
 8012bd2:	0006      	movs	r6, r0
 8012bd4:	000d      	movs	r5, r1
 8012bd6:	0030      	movs	r0, r6
 8012bd8:	0029      	movs	r1, r5
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	4c0b      	ldr	r4, [pc, #44]	; (8012c0c <round+0x94>)
 8012bde:	1912      	adds	r2, r2, r4
 8012be0:	2401      	movs	r4, #1
 8012be2:	4264      	negs	r4, r4
 8012be4:	40d4      	lsrs	r4, r2
 8012be6:	4220      	tst	r0, r4
 8012be8:	d0f5      	beq.n	8012bd6 <round+0x5e>
 8012bea:	2233      	movs	r2, #51	; 0x33
 8012bec:	1a51      	subs	r1, r2, r1
 8012bee:	3a32      	subs	r2, #50	; 0x32
 8012bf0:	408a      	lsls	r2, r1
 8012bf2:	1812      	adds	r2, r2, r0
 8012bf4:	4282      	cmp	r2, r0
 8012bf6:	4180      	sbcs	r0, r0
 8012bf8:	4240      	negs	r0, r0
 8012bfa:	182b      	adds	r3, r5, r0
 8012bfc:	43a2      	bics	r2, r4
 8012bfe:	e7cd      	b.n	8012b9c <round+0x24>
 8012c00:	fffffc01 	.word	0xfffffc01
 8012c04:	3ff00000 	.word	0x3ff00000
 8012c08:	000fffff 	.word	0x000fffff
 8012c0c:	fffffbed 	.word	0xfffffbed

08012c10 <_init>:
 8012c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c12:	46c0      	nop			; (mov r8, r8)
 8012c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c16:	bc08      	pop	{r3}
 8012c18:	469e      	mov	lr, r3
 8012c1a:	4770      	bx	lr

08012c1c <_fini>:
 8012c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1e:	46c0      	nop			; (mov r8, r8)
 8012c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c22:	bc08      	pop	{r3}
 8012c24:	469e      	mov	lr, r3
 8012c26:	4770      	bx	lr
