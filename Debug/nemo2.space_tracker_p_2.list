
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004480  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000010  080045e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  080045e8  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001536d  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293e  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00039078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d035  00000000  00000000  00039fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b7e  00000000  00000000  00056fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c11e4  00000000  00000000  0006db61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004848  00000000  00000000  0012ed48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00133590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004524 	.word	0x08004524

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004524 	.word	0x08004524

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fda8 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f812 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 faa4 	bl	8000b74 <MX_GPIO_Init>
  MX_RTC_Init();
 800062c:	f000 f864 	bl	80006f8 <MX_RTC_Init>
  MX_TIM6_Init();
 8000630:	f000 f944 	bl	80008bc <MX_TIM6_Init>
  MX_SPI1_Init();
 8000634:	f000 f904 	bl	8000840 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000638:	f000 f97e 	bl	8000938 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f9ca 	bl	80009d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 fa16 	bl	8000a70 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000644:	f000 fa62 	bl	8000b0c <MX_USART5_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x2c>
	...

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b095      	sub	sp, #84	; 0x54
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2414      	movs	r4, #20
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	233c      	movs	r3, #60	; 0x3c
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 fecb 	bl	80043f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	2310      	movs	r3, #16
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 fec4 	bl	80043f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f001 f88f 	bl	8001798 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067a:	f001 f87f 	bl	800177c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <SystemClock_Config+0xa8>)
 8000680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <SystemClock_Config+0xa8>)
 8000684:	2118      	movs	r1, #24
 8000686:	438a      	bics	r2, r1
 8000688:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2206      	movs	r2, #6
 800068e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2240      	movs	r2, #64	; 0x40
 80006a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f8bc 	bl	8001830 <HAL_RCC_OscConfig>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006bc:	f000 faea 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2207      	movs	r2, #7
 80006c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fc07 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 fad5 	bl	8000c94 <Error_Handler>
  }
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b015      	add	sp, #84	; 0x54
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b090      	sub	sp, #64	; 0x40
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006fe:	232c      	movs	r3, #44	; 0x2c
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2314      	movs	r3, #20
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f003 fe75 	bl	80043f8 <memset>
  RTC_DateTypeDef sDate = {0};
 800070e:	2328      	movs	r3, #40	; 0x28
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2328      	movs	r3, #40	; 0x28
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fe6a 	bl	80043f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000724:	4b44      	ldr	r3, [pc, #272]	; (8000838 <MX_RTC_Init+0x140>)
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <MX_RTC_Init+0x144>)
 8000728:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <MX_RTC_Init+0x140>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <MX_RTC_Init+0x140>)
 8000732:	227f      	movs	r2, #127	; 0x7f
 8000734:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000736:	4b40      	ldr	r3, [pc, #256]	; (8000838 <MX_RTC_Init+0x140>)
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <MX_RTC_Init+0x140>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <MX_RTC_Init+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <MX_RTC_Init+0x140>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_RTC_Init+0x140>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	05d2      	lsls	r2, r2, #23
 8000754:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <MX_RTC_Init+0x140>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_RTC_Init+0x140>)
 800075e:	0018      	movs	r0, r3
 8000760:	f001 ffac 	bl	80026bc <HAL_RTC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000768:	f000 fa94 	bl	8000c94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800076c:	212c      	movs	r1, #44	; 0x2c
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000792:	1879      	adds	r1, r7, r1
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_RTC_Init+0x140>)
 8000796:	2201      	movs	r2, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f002 f831 	bl	8002800 <HAL_RTC_SetTime>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80007a2:	f000 fa77 	bl	8000c94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80007a6:	2128      	movs	r1, #40	; 0x28
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2206      	movs	r2, #6
 80007ac:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007c0:	1879      	adds	r1, r7, r1
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_RTC_Init+0x140>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 f8c2 	bl	8002950 <HAL_RTC_SetDate>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80007d0:	f000 fa60 	bl	8000c94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007da:	003b      	movs	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ec:	003b      	movs	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007f2:	003b      	movs	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007f8:	003b      	movs	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800080a:	003b      	movs	r3, r7
 800080c:	2220      	movs	r2, #32
 800080e:	2101      	movs	r1, #1
 8000810:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000812:	003b      	movs	r3, r7
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800081a:	0039      	movs	r1, r7
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_RTC_Init+0x140>)
 800081e:	2201      	movs	r2, #1
 8000820:	0018      	movs	r0, r3
 8000822:	f002 f927 	bl	8002a74 <HAL_RTC_SetAlarm_IT>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800082a:	f000 fa33 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b010      	add	sp, #64	; 0x40
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	2000002c 	.word	0x2000002c
 800083c:	40002800 	.word	0x40002800

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_SPI1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_SPI1_Init+0x74>)
 800084c:	2282      	movs	r2, #130	; 0x82
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x74>)
 800085a:	22e0      	movs	r2, #224	; 0xe0
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x74>)
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x74>)
 800089a:	2208      	movs	r2, #8
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <MX_SPI1_Init+0x74>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fb49 	bl	8002f38 <HAL_SPI_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 f9f3 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000058 	.word	0x20000058
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	0018      	movs	r0, r3
 80008c6:	230c      	movs	r3, #12
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fd94 	bl	80043f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <MX_TIM6_Init+0x70>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_TIM6_Init+0x74>)
 80008da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_TIM6_Init+0x78>)
 80008e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_TIM6_Init+0x6c>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fbd9 	bl	80030a8 <HAL_TIM_Base_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 f9cb 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800090a:	1d3a      	adds	r2, r7, #4
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_TIM6_Init+0x6c>)
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fde9 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800091a:	f000 f9bb 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200000bc 	.word	0x200000bc
 800092c:	40001000 	.word	0x40001000
 8000930:	00003e7f 	.word	0x00003e7f
 8000934:	000003e7 	.word	0x000003e7

08000938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_USART1_UART_Init+0x94>)
 800093e:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <MX_USART1_UART_Init+0x98>)
 8000940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000944:	22e1      	movs	r2, #225	; 0xe1
 8000946:	0252      	lsls	r2, r2, #9
 8000948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_USART1_UART_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_USART1_UART_Init+0x94>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_USART1_UART_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART1_UART_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fe3e 	bl	8003604 <HAL_UART_Init>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f982 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x94>)
 8000992:	2100      	movs	r1, #0
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fc4f 	bl	8004238 <HAL_UARTEx_SetTxFifoThreshold>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f000 f979 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USART1_UART_Init+0x94>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fc86 	bl	80042b8 <HAL_UARTEx_SetRxFifoThreshold>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f970 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x94>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 fc04 	bl	80041c4 <HAL_UARTEx_DisableFifoMode>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f968 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000108 	.word	0x20000108
 80009d0:	40013800 	.word	0x40013800

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009da:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <MX_USART2_UART_Init+0x98>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009e0:	22e1      	movs	r2, #225	; 0xe1
 80009e2:	0252      	lsls	r2, r2, #9
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fdf0 	bl	8003604 <HAL_UART_Init>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a28:	f000 f934 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f003 fc01 	bl	8004238 <HAL_UARTEx_SetTxFifoThreshold>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3a:	f000 f92b 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f003 fc38 	bl	80042b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f000 f922 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f003 fbb6 	bl	80041c4 <HAL_UARTEx_DisableFifoMode>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 f91a 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	2000019c 	.word	0x2000019c
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a76:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <MX_USART3_UART_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a7c:	2296      	movs	r2, #150	; 0x96
 8000a7e:	0192      	lsls	r2, r2, #6
 8000a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fda2 	bl	8003604 <HAL_UART_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f8e6 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 fbb3 	bl	8004238 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 f8dd 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000adc:	2100      	movs	r1, #0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f003 fbea 	bl	80042b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 f8d4 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f003 fb68 	bl	80041c4 <HAL_UARTEx_DisableFifoMode>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f8cc 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000230 	.word	0x20000230
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_USART5_UART_Init+0x64>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b18:	22e1      	movs	r2, #225	; 0xe1
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <MX_USART5_UART_Init+0x60>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 fd54 	bl	8003604 <HAL_UART_Init>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f898 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	200002c4 	.word	0x200002c4
 8000b70:	40005000 	.word	0x40005000

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	240c      	movs	r4, #12
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2314      	movs	r3, #20
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f003 fc37 	bl	80043f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000b90:	2104      	movs	r1, #4
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	430a      	orrs	r2, r1
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_GPIO_Init+0x110>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 fdb0 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000be0:	4929      	ldr	r1, [pc, #164]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fdaa 	bl	8001740 <HAL_GPIO_WritePin>
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2210      	movs	r2, #16
 8000bf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	193a      	adds	r2, r7, r4
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fc2b 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000c16:	601a      	str	r2, [r3, #0]
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000c2e:	0019      	movs	r1, r3
 8000c30:	0010      	movs	r0, r2
 8000c32:	f000 fc19 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8000c36:	0021      	movs	r1, r4
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2224      	movs	r2, #36	; 0x24
 8000c3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2288      	movs	r2, #136	; 0x88
 8000c42:	0352      	lsls	r2, r2, #13
 8000c44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000c52:	0019      	movs	r1, r3
 8000c54:	0010      	movs	r0, r2
 8000c56:	f000 fc07 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <MX_GPIO_Init+0x11c>)
 8000c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000c72:	0019      	movs	r1, r3
 8000c74:	0010      	movs	r0, r2
 8000c76:	f000 fbf7 	bl	8001468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b009      	add	sp, #36	; 0x24
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40021000 	.word	0x40021000
 8000c88:	0000ac03 	.word	0x0000ac03
 8000c8c:	50000400 	.word	0x50000400
 8000c90:	00004040 	.word	0x00004040

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_MspInit+0x4c>)
 8000ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0549      	lsls	r1, r1, #21
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_MspInit+0x4c>)
 8000cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	055b      	lsls	r3, r3, #21
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 face 	bl	8001280 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b097      	sub	sp, #92	; 0x5c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	240c      	movs	r4, #12
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	234c      	movs	r3, #76	; 0x4c
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f003 fb78 	bl	80043f8 <memset>
  if(hrtc->Instance==RTC)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_RTC_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0292      	lsls	r2, r2, #10
 8000d18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0052      	lsls	r2, r2, #1
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fa8d 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d2e:	f7ff ffb1 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_RTC_MspInit+0x88>)
 8000d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_RTC_MspInit+0x88>)
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	0209      	lsls	r1, r1, #8
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_RTC_MspInit+0x88>)
 8000d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_RTC_MspInit+0x88>)
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	00c9      	lsls	r1, r1, #3
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_RTC_MspInit+0x88>)
 8000d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4013      	ands	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2103      	movs	r1, #3
 8000d60:	2002      	movs	r0, #2
 8000d62:	f000 fb4f 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f000 fb61 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b017      	add	sp, #92	; 0x5c
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	40002800 	.word	0x40002800
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b08b      	sub	sp, #44	; 0x2c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	2414      	movs	r4, #20
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f003 fb32 	bl	80043f8 <memset>
  if(hspi->Instance==SPI1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d130      	bne.n	8000e00 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0149      	lsls	r1, r1, #5
 8000da8:	430a      	orrs	r2, r1
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_SPI_MspInit+0x90>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8000dd2:	0021      	movs	r1, r4
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	22e0      	movs	r2, #224	; 0xe0
 8000dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	187a      	adds	r2, r7, r1
 8000df4:	23a0      	movs	r3, #160	; 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fb34 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b00b      	add	sp, #44	; 0x2c
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_TIM_Base_MspInit+0x44>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d113      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e28:	2110      	movs	r1, #16
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2210      	movs	r2, #16
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	2011      	movs	r0, #17
 8000e40:	f000 fae0 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000e44:	2011      	movs	r0, #17
 8000e46:	f000 faf2 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40001000 	.word	0x40001000
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b0a3      	sub	sp, #140	; 0x8c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	2374      	movs	r3, #116	; 0x74
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f003 fac2 	bl	80043f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	2428      	movs	r4, #40	; 0x28
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	234c      	movs	r3, #76	; 0x4c
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f003 faba 	bl	80043f8 <memset>
  if(huart->Instance==USART1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a84      	ldr	r2, [pc, #528]	; (800109c <HAL_UART_MspInit+0x240>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d140      	bne.n	8000f10 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 f9d1 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ea6:	f7ff fef5 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eaa:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eae:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	01c9      	lsls	r1, r1, #7
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb8:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	01db      	lsls	r3, r3, #7
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eca:	4b75      	ldr	r3, [pc, #468]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8000ede:	2174      	movs	r1, #116	; 0x74
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	22c0      	movs	r2, #192	; 0xc0
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2202      	movs	r2, #2
 8000eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2201      	movs	r2, #1
 8000efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	187a      	adds	r2, r7, r1
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 faad 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000f0e:	e0c0      	b.n	8001092 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a63      	ldr	r2, [pc, #396]	; (80010a4 <HAL_UART_MspInit+0x248>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d140      	bne.n	8000f9c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f1a:	2128      	movs	r1, #40	; 0x28
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2202      	movs	r2, #2
 8000f20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 f98a 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8000f34:	f7ff feae 	bl	8000c94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f38:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	0289      	lsls	r1, r1, #10
 8000f42:	430a      	orrs	r2, r1
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f58:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000f6c:	2174      	movs	r1, #116	; 0x74
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	220c      	movs	r2, #12
 8000f72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	187a      	adds	r2, r7, r1
 8000f8e:	23a0      	movs	r3, #160	; 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fa67 	bl	8001468 <HAL_GPIO_Init>
}
 8000f9a:	e07a      	b.n	8001092 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <HAL_UART_MspInit+0x24c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d140      	bne.n	8001028 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fa6:	2128      	movs	r1, #40	; 0x28
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2204      	movs	r2, #4
 8000fac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 f944 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8000fc0:	f7ff fe68 	bl	8000c94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	02c9      	lsls	r1, r1, #11
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	02db      	lsls	r3, r3, #11
 8000fda:	4013      	ands	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000ff8:	2174      	movs	r1, #116	; 0x74
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	22c0      	movs	r2, #192	; 0xc0
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2204      	movs	r2, #4
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	187b      	adds	r3, r7, r1
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <HAL_UART_MspInit+0x250>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 fa21 	bl	8001468 <HAL_GPIO_Init>
}
 8001026:	e034      	b.n	8001092 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0x254>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12f      	bne.n	8001092 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8001034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0049      	lsls	r1, r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8001042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_UART_MspInit+0x244>)
 8001054:	2102      	movs	r1, #2
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_MspInit+0x244>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8001066:	2174      	movs	r1, #116	; 0x74
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2218      	movs	r2, #24
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2203      	movs	r2, #3
 8001084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	187b      	adds	r3, r7, r1
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_UART_MspInit+0x250>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f000 f9eb 	bl	8001468 <HAL_GPIO_Init>
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b023      	add	sp, #140	; 0x8c
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40013800 	.word	0x40013800
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40004800 	.word	0x40004800
 80010ac:	50000400 	.word	0x50000400
 80010b0:	40005000 	.word	0x40005000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 f8b6 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <RTC_TAMP_IRQHandler+0x14>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 fe02 	bl	8002cf4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	2000002c 	.word	0x2000002c

080010fc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001102:	0018      	movs	r0, r3
 8001104:	f002 f828 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	200000bc 	.word	0x200000bc

08001114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001122:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff fff6 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114e:	f003 f95b 	bl	8004408 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001152:	f7ff fa63 	bl	800061c <main>

08001156 <LoopForever>:

LoopForever:
  b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   r0, =_estack
 8001158:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001164:	080045d8 	.word	0x080045d8
  ldr r2, =_sbss
 8001168:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800116c:	200004f4 	.word	0x200004f4

08001170 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_COMP_IRQHandler>
	...

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_Init+0x3c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_Init+0x3c>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0049      	lsls	r1, r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2003      	movs	r0, #3
 8001190:	f000 f810 	bl	80011b4 <HAL_InitTick>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d003      	beq.n	80011a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fd7e 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	781b      	ldrb	r3, [r3, #0]
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_InitTick+0x88>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d02b      	beq.n	8001224 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_InitTick+0x8c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_InitTick+0x88>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0019      	movs	r1, r3
 80011d6:	23fa      	movs	r3, #250	; 0xfa
 80011d8:	0098      	lsls	r0, r3, #2
 80011da:	f7fe ff93 	bl	8000104 <__udivsi3>
 80011de:	0003      	movs	r3, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7fe ff8e 	bl	8000104 <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f92f 	bl	800144e <HAL_SYSTICK_Config>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d112      	bne.n	800121a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d80a      	bhi.n	8001210 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	2301      	movs	r3, #1
 80011fe:	425b      	negs	r3, r3
 8001200:	2200      	movs	r2, #0
 8001202:	0018      	movs	r0, r3
 8001204:	f000 f8fe 	bl	8001404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_InitTick+0x90>)
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e00d      	b.n	800122c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001210:	230f      	movs	r3, #15
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e008      	b.n	800122c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121a:	230f      	movs	r3, #15
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e003      	b.n	800122c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b005      	add	sp, #20
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000008 	.word	0x20000008
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	001a      	movs	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	18d2      	adds	r2, r2, r3
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_IncTick+0x20>)
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000008 	.word	0x20000008
 8001268:	20000358 	.word	0x20000358

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	20000358 	.word	0x20000358

08001280 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800128e:	4013      	ands	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	40010000 	.word	0x40010000
 80012a8:	fffff9ff 	.word	0xfffff9ff

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	0002      	movs	r2, r0
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b7f      	cmp	r3, #127	; 0x7f
 80012be:	d809      	bhi.n	80012d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	231f      	movs	r3, #31
 80012c8:	401a      	ands	r2, r3
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_EnableIRQ+0x30>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	4091      	lsls	r1, r2
 80012d0:	000a      	movs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	0002      	movs	r2, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b7f      	cmp	r3, #127	; 0x7f
 80012f4:	d828      	bhi.n	8001348 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <__NVIC_SetPriority+0xd4>)
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	33c0      	adds	r3, #192	; 0xc0
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	589b      	ldr	r3, [r3, r2]
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	0011      	movs	r1, r2
 800130c:	2203      	movs	r2, #3
 800130e:	400a      	ands	r2, r1
 8001310:	00d2      	lsls	r2, r2, #3
 8001312:	21ff      	movs	r1, #255	; 0xff
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	43d2      	mvns	r2, r2
 800131a:	401a      	ands	r2, r3
 800131c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	019b      	lsls	r3, r3, #6
 8001322:	22ff      	movs	r2, #255	; 0xff
 8001324:	401a      	ands	r2, r3
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0018      	movs	r0, r3
 800132c:	2303      	movs	r3, #3
 800132e:	4003      	ands	r3, r0
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001334:	481f      	ldr	r0, [pc, #124]	; (80013b4 <__NVIC_SetPriority+0xd4>)
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	430a      	orrs	r2, r1
 8001340:	33c0      	adds	r3, #192	; 0xc0
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001346:	e031      	b.n	80013ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <__NVIC_SetPriority+0xd8>)
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	0019      	movs	r1, r3
 8001350:	230f      	movs	r3, #15
 8001352:	400b      	ands	r3, r1
 8001354:	3b08      	subs	r3, #8
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3306      	adds	r3, #6
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	3304      	adds	r3, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1dfa      	adds	r2, r7, #7
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	0011      	movs	r1, r2
 8001368:	2203      	movs	r2, #3
 800136a:	400a      	ands	r2, r1
 800136c:	00d2      	lsls	r2, r2, #3
 800136e:	21ff      	movs	r1, #255	; 0xff
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	43d2      	mvns	r2, r2
 8001376:	401a      	ands	r2, r3
 8001378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	401a      	ands	r2, r3
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	0018      	movs	r0, r3
 8001388:	2303      	movs	r3, #3
 800138a:	4003      	ands	r3, r0
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <__NVIC_SetPriority+0xd8>)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	001c      	movs	r4, r3
 8001398:	230f      	movs	r3, #15
 800139a:	4023      	ands	r3, r4
 800139c:	3b08      	subs	r3, #8
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	430a      	orrs	r2, r1
 80013a2:	3306      	adds	r3, #6
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	18c3      	adds	r3, r0, r3
 80013a8:	3304      	adds	r3, #4
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b003      	add	sp, #12
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	045b      	lsls	r3, r3, #17
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d301      	bcc.n	80013d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d0:	2301      	movs	r3, #1
 80013d2:	e010      	b.n	80013f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <SysTick_Config+0x44>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	3a01      	subs	r2, #1
 80013da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
 80013e0:	2103      	movs	r1, #3
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff ff7c 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x44>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x44>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	210f      	movs	r1, #15
 8001410:	187b      	adds	r3, r7, r1
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	187b      	adds	r3, r7, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff ff5d 	bl	80012e0 <__NVIC_SetPriority>
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	0002      	movs	r2, r0
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b25b      	sxtb	r3, r3
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff33 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ffaf 	bl	80013bc <SysTick_Config>
 800145e:	0003      	movs	r3, r0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e14d      	b.n	8001714 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d100      	bne.n	8001490 <HAL_GPIO_Init+0x28>
 800148e:	e13e      	b.n	800170e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	4013      	ands	r3, r2
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x40>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	4013      	ands	r3, r2
 8001512:	2b03      	cmp	r3, #3
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	4013      	ands	r3, r2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	58d3      	ldr	r3, [r2, r3]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2207      	movs	r2, #7
 8001564:	4013      	ands	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2107      	movs	r1, #7
 800157e:	400b      	ands	r3, r1
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	6939      	ldr	r1, [r7, #16]
 8001598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	401a      	ands	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	23c0      	movs	r3, #192	; 0xc0
 80015d4:	029b      	lsls	r3, r3, #10
 80015d6:	4013      	ands	r3, r2
 80015d8:	d100      	bne.n	80015dc <HAL_GPIO_Init+0x174>
 80015da:	e098      	b.n	800170e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015dc:	4a53      	ldr	r2, [pc, #332]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3318      	adds	r3, #24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	589b      	ldr	r3, [r3, r2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4013      	ands	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	220f      	movs	r2, #15
 80015f4:	409a      	lsls	r2, r3
 80015f6:	0013      	movs	r3, r2
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	23a0      	movs	r3, #160	; 0xa0
 8001604:	05db      	lsls	r3, r3, #23
 8001606:	429a      	cmp	r2, r3
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x1d6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x1d2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a47      	ldr	r2, [pc, #284]	; (8001734 <HAL_GPIO_Init+0x2cc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x1ce>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_GPIO_Init+0x2d0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x1ca>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_GPIO_Init+0x2d4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x1c6>
 800162a:	2304      	movs	r3, #4
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x1d8>
 800162e:	2305      	movs	r3, #5
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x1d8>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x1d8>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x1d8>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x1d8>
 800163e:	2300      	movs	r3, #0
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	2103      	movs	r1, #3
 8001644:	400a      	ands	r2, r1
 8001646:	00d2      	lsls	r2, r2, #3
 8001648:	4093      	lsls	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001650:	4936      	ldr	r1, [pc, #216]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3318      	adds	r3, #24
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	035b      	lsls	r3, r3, #13
 8001676:	4013      	ands	r3, r2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_GPIO_Init+0x2c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43da      	mvns	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	039b      	lsls	r3, r3, #14
 80016a0:	4013      	ands	r3, r2
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80016b4:	2384      	movs	r3, #132	; 0x84
 80016b6:	58d3      	ldr	r3, [r2, r3]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d8:	4914      	ldr	r1, [pc, #80]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80016da:	2284      	movs	r2, #132	; 0x84
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	58d3      	ldr	r3, [r2, r3]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4013      	ands	r3, r2
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001706:	4909      	ldr	r1, [pc, #36]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	40da      	lsrs	r2, r3
 800171c:	1e13      	subs	r3, r2, #0
 800171e:	d000      	beq.n	8001722 <HAL_GPIO_Init+0x2ba>
 8001720:	e6aa      	b.n	8001478 <HAL_GPIO_Init+0x10>
  }
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b006      	add	sp, #24
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021800 	.word	0x40021800
 8001730:	50000400 	.word	0x50000400
 8001734:	50000800 	.word	0x50000800
 8001738:	50000c00 	.word	0x50000c00
 800173c:	50001000 	.word	0x50001000

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	0008      	movs	r0, r1
 800174a:	0011      	movs	r1, r2
 800174c:	1cbb      	adds	r3, r7, #2
 800174e:	1c02      	adds	r2, r0, #0
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	1c7b      	adds	r3, r7, #1
 8001754:	1c0a      	adds	r2, r1, #0
 8001756:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	1c7b      	adds	r3, r7, #1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001760:	1cbb      	adds	r3, r7, #2
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176a:	1cbb      	adds	r3, r7, #2
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0049      	lsls	r1, r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40007000 	.word	0x40007000

08001798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d11f      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	0013      	movs	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7fe fc9a 	bl	8000104 <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d6:	e008      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e001      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e009      	b.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	401a      	ands	r2, r3
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d0ed      	beq.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40007000 	.word	0x40007000
 800180c:	fffff9ff 	.word	0xfffff9ff
 8001810:	20000000 	.word	0x20000000
 8001814:	000f4240 	.word	0x000f4240

08001818 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <LL_RCC_GetAPB1Prescaler+0x14>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	23e0      	movs	r3, #224	; 0xe0
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4013      	ands	r3, r2
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f000 fb50 	bl	8001ee4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d100      	bne.n	8001850 <HAL_RCC_OscConfig+0x20>
 800184e:	e07c      	b.n	800194a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001850:	4bc3      	ldr	r3, [pc, #780]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2238      	movs	r2, #56	; 0x38
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185a:	4bc1      	ldr	r3, [pc, #772]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2203      	movs	r2, #3
 8001860:	4013      	ands	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d102      	bne.n	8001870 <HAL_RCC_OscConfig+0x40>
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d002      	beq.n	8001876 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	4bba      	ldr	r3, [pc, #744]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d062      	beq.n	8001948 <HAL_RCC_OscConfig+0x118>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d15e      	bne.n	8001948 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e32a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	429a      	cmp	r2, r3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_OscConfig+0x7a>
 800189a:	4bb1      	ldr	r3, [pc, #708]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0249      	lsls	r1, r1, #9
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e020      	b.n	80018ec <HAL_RCC_OscConfig+0xbc>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	23a0      	movs	r3, #160	; 0xa0
 80018b0:	02db      	lsls	r3, r3, #11
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d10e      	bne.n	80018d4 <HAL_RCC_OscConfig+0xa4>
 80018b6:	4baa      	ldr	r3, [pc, #680]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4ba9      	ldr	r3, [pc, #676]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	02c9      	lsls	r1, r1, #11
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4ba6      	ldr	r3, [pc, #664]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4ba5      	ldr	r3, [pc, #660]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0249      	lsls	r1, r1, #9
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xbc>
 80018d4:	4ba2      	ldr	r3, [pc, #648]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4ba1      	ldr	r3, [pc, #644]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018da:	49a2      	ldr	r1, [pc, #648]	; (8001b64 <HAL_RCC_OscConfig+0x334>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	4b9f      	ldr	r3, [pc, #636]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80018e6:	49a0      	ldr	r1, [pc, #640]	; (8001b68 <HAL_RCC_OscConfig+0x338>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d014      	beq.n	800191e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fcba 	bl	800126c <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fe:	f7ff fcb5 	bl	800126c <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e2e9      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001910:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0xce>
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff fca5 	bl	800126c <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fca0 	bl	800126c <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2d4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193a:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0xf8>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_OscConfig+0x126>
 8001954:	e099      	b.n	8001a8a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001956:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001960:	4b7f      	ldr	r3, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b10      	cmp	r3, #16
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x146>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d002      	beq.n	800197c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d135      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4013      	ands	r3, r2
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x164>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e2a7      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <HAL_RCC_OscConfig+0x33c>)
 800199a:	4013      	ands	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	021a      	lsls	r2, r3, #8
 80019a4:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d112      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x340>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0adb      	lsrs	r3, r3, #11
 80019ca:	2207      	movs	r2, #7
 80019cc:	4013      	ands	r3, r2
 80019ce:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x344>)
 80019d0:	40da      	lsrs	r2, r3
 80019d2:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x348>)
 80019d4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019d6:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <HAL_RCC_OscConfig+0x34c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fbea 	bl	80011b4 <HAL_InitTick>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d051      	beq.n	8001a88 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e27d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d030      	beq.n	8001a52 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019f0:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x340>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0049      	lsls	r1, r1, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fc2b 	bl	800126c <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fc26 	bl	800126c <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e25a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a4b      	ldr	r2, [pc, #300]	; (8001b6c <HAL_RCC_OscConfig+0x33c>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	021a      	lsls	r2, r3, #8
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	e01b      	b.n	8001a8a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a58:	4949      	ldr	r1, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x350>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fc05 	bl	800126c <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc00 	bl	800126c <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e234      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x238>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	d047      	beq.n	8001b24 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2238      	movs	r2, #56	; 0x38
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b18      	cmp	r3, #24
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d03c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x2f4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d138      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e216      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d019      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fbcf 	bl	800126c <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fbca 	bl	800126c <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1fe      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f1      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2a4>
 8001af0:	e018      	b.n	8001b24 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	438a      	bics	r2, r1
 8001afc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fbb5 	bl	800126c <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fbb0 	bl	800126c <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1e4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d1f1      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d100      	bne.n	8001b30 <HAL_RCC_OscConfig+0x300>
 8001b2e:	e0c7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b30:	231f      	movs	r3, #31
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2238      	movs	r2, #56	; 0x38
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d11f      	bne.n	8001b84 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x330>)
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d100      	bne.n	8001b50 <HAL_RCC_OscConfig+0x320>
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x490>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d000      	beq.n	8001b5a <HAL_RCC_OscConfig+0x32a>
 8001b58:	e0b2      	b.n	8001cc0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c2      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	fffeffff 	.word	0xfffeffff
 8001b68:	fffbffff 	.word	0xfffbffff
 8001b6c:	ffff80ff 	.word	0xffff80ff
 8001b70:	ffffc7ff 	.word	0xffffc7ff
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b84:	4bb5      	ldr	r3, [pc, #724]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x364>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x366>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d011      	beq.n	8001bbe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4bb0      	ldr	r3, [pc, #704]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b9e:	4baf      	ldr	r3, [pc, #700]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0549      	lsls	r1, r1, #21
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba8:	4bac      	ldr	r3, [pc, #688]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bb6:	231f      	movs	r3, #31
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbe:	4ba8      	ldr	r3, [pc, #672]	; (8001e60 <HAL_RCC_OscConfig+0x630>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bca:	4ba5      	ldr	r3, [pc, #660]	; (8001e60 <HAL_RCC_OscConfig+0x630>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4ba4      	ldr	r3, [pc, #656]	; (8001e60 <HAL_RCC_OscConfig+0x630>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0049      	lsls	r1, r1, #1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fb48 	bl	800126c <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff fb43 	bl	800126c <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e177      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	4b9a      	ldr	r3, [pc, #616]	; (8001e60 <HAL_RCC_OscConfig+0x630>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3e6>
 8001c08:	4b94      	ldr	r3, [pc, #592]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0c:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x420>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x408>
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c24:	2104      	movs	r1, #4
 8001c26:	430a      	orrs	r2, r1
 8001c28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c2a:	4b8c      	ldr	r3, [pc, #560]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0x420>
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c3c:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c44:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c48:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d014      	beq.n	8001c82 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb08 	bl	800126c <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fb03 	bl	800126c <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4a7d      	ldr	r2, [pc, #500]	; (8001e64 <HAL_RCC_OscConfig+0x634>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e136      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c76:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x432>
 8001c80:	e013      	b.n	8001caa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff faf3 	bl	800126c <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c8a:	e009      	b.n	8001ca0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff faee 	bl	800126c <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4a73      	ldr	r2, [pc, #460]	; (8001e64 <HAL_RCC_OscConfig+0x634>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e121      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b6e      	ldr	r3, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001cba:	496b      	ldr	r1, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x638>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d039      	beq.n	8001d3e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	03c9      	lsls	r1, r1, #15
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fac4 	bl	800126c <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cea:	f7ff fabf 	bl	800126c <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0f3      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cfc:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	4013      	ands	r3, r2
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x4ba>
 8001d08:	e019      	b.n	8001d3e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d0a:	4b54      	ldr	r3, [pc, #336]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d10:	4956      	ldr	r1, [pc, #344]	; (8001e6c <HAL_RCC_OscConfig+0x63c>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff faa9 	bl	800126c <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7ff faa4 	bl	800126c <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0d8      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d100      	bne.n	8001d48 <HAL_RCC_OscConfig+0x518>
 8001d46:	e0cc      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2238      	movs	r2, #56	; 0x38
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x526>
 8001d54:	e07b      	b.n	8001e4e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d156      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d64:	4942      	ldr	r1, [pc, #264]	; (8001e70 <HAL_RCC_OscConfig+0x640>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fa7f 	bl	800126c <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fa7a 	bl	800126c <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0ae      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a37      	ldr	r2, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x644>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0449      	lsls	r1, r1, #17
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0549      	lsls	r1, r1, #21
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa43 	bl	800126c <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa3e 	bl	800126c <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e072      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	049b      	lsls	r3, r3, #18
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x5bc>
 8001e0a:	e06a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e12:	4917      	ldr	r1, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x640>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa28 	bl	800126c <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fa23 	bl	800126c <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e057      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	049b      	lsls	r3, r3, #18
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_OscConfig+0x62c>)
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <HAL_RCC_OscConfig+0x648>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	e049      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e044      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	00001388 	.word	0x00001388
 8001e68:	efffffff 	.word	0xefffffff
 8001e6c:	ffbfffff 	.word	0xffbfffff
 8001e70:	feffffff 	.word	0xfeffffff
 8001e74:	11c1808c 	.word	0x11c1808c
 8001e78:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x6bc>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2203      	movs	r2, #3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d126      	bne.n	8001ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2270      	movs	r2, #112	; 0x70
 8001e94:	401a      	ands	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11f      	bne.n	8001ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	23fe      	movs	r3, #254	; 0xfe
 8001ea2:	01db      	lsls	r3, r3, #7
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d116      	bne.n	8001ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	23f8      	movs	r3, #248	; 0xf8
 8001eb4:	039b      	lsls	r3, r3, #14
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10e      	bne.n	8001ede <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	23e0      	movs	r3, #224	; 0xe0
 8001ec4:	051b      	lsls	r3, r3, #20
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	0f5b      	lsrs	r3, r3, #29
 8001ed4:	075a      	lsls	r2, r3, #29
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b008      	add	sp, #32
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0e9      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d91e      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2207      	movs	r2, #7
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f9a2 	bl	800126c <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff f99d 	bl	800126c <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0ca      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	d006      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f64:	4b60      	ldr	r3, [pc, #384]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	21e0      	movs	r1, #224	; 0xe0
 8001f6c:	01c9      	lsls	r1, r1, #7
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f72:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_RCC_ClockConfig+0x1fc>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d057      	beq.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d12b      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e097      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	049b      	lsls	r3, r3, #18
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d11f      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e08b      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d113      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e07f      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e074      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2207      	movs	r2, #7
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7ff f92c 	bl	800126c <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	e009      	b.n	800202e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f7ff f927 	bl	800126c <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e054      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	; 0x38
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	429a      	cmp	r2, r3
 800203e:	d1ec      	bne.n	800201a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2207      	movs	r2, #7
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d21e      	bcs.n	800208c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2207      	movs	r2, #7
 8002054:	4393      	bics	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002060:	f7ff f904 	bl	800126c <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002068:	e009      	b.n	800207e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7ff f8ff 	bl	800126c <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e02c      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2207      	movs	r2, #7
 8002084:	4013      	ands	r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_RCC_ClockConfig+0x200>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020aa:	f000 f829 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020ae:	0001      	movs	r1, r0
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	220f      	movs	r2, #15
 80020b8:	401a      	ands	r2, r3
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_RCC_ClockConfig+0x204>)
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	58d3      	ldr	r3, [r2, r3]
 80020c0:	221f      	movs	r2, #31
 80020c2:	4013      	ands	r3, r2
 80020c4:	000a      	movs	r2, r1
 80020c6:	40da      	lsrs	r2, r3
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x208>)
 80020ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x20c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff f86f 	bl	80011b4 <HAL_InitTick>
 80020d6:	0003      	movs	r3, r0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40022000 	.word	0x40022000
 80020e4:	00001388 	.word	0x00001388
 80020e8:	40021000 	.word	0x40021000
 80020ec:	fffff0ff 	.word	0xfffff0ff
 80020f0:	ffff8fff 	.word	0xffff8fff
 80020f4:	0800453c 	.word	0x0800453c
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2238      	movs	r2, #56	; 0x38
 800210c:	4013      	ands	r3, r2
 800210e:	d10f      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0adb      	lsrs	r3, r3, #11
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	2201      	movs	r2, #1
 800211c:	409a      	lsls	r2, r3
 800211e:	0013      	movs	r3, r2
 8002120:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	4835      	ldr	r0, [pc, #212]	; (80021fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002126:	f7fd ffed 	bl	8000104 <__udivsi3>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e05d      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2238      	movs	r2, #56	; 0x38
 8002136:	4013      	ands	r3, r2
 8002138:	2b08      	cmp	r3, #8
 800213a:	d102      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_GetSysClockFreq+0x100>)
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e054      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2238      	movs	r2, #56	; 0x38
 8002148:	4013      	ands	r3, r2
 800214a:	2b10      	cmp	r3, #16
 800214c:	d138      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2203      	movs	r2, #3
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	2207      	movs	r2, #7
 8002160:	4013      	ands	r3, r2
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d10d      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	4824      	ldr	r0, [pc, #144]	; (8002200 <HAL_RCC_GetSysClockFreq+0x100>)
 8002170:	f7fd ffc8 	bl	8000104 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	0019      	movs	r1, r3
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	227f      	movs	r2, #127	; 0x7f
 8002180:	4013      	ands	r3, r2
 8002182:	434b      	muls	r3, r1
 8002184:	617b      	str	r3, [r7, #20]
        break;
 8002186:	e00d      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	481c      	ldr	r0, [pc, #112]	; (80021fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800218c:	f7fd ffba 	bl	8000104 <__udivsi3>
 8002190:	0003      	movs	r3, r0
 8002192:	0019      	movs	r1, r3
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	227f      	movs	r2, #127	; 0x7f
 800219c:	4013      	ands	r3, r2
 800219e:	434b      	muls	r3, r1
 80021a0:	617b      	str	r3, [r7, #20]
        break;
 80021a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0f5b      	lsrs	r3, r3, #29
 80021aa:	2207      	movs	r2, #7
 80021ac:	4013      	ands	r3, r2
 80021ae:	3301      	adds	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f7fd ffa5 	bl	8000104 <__udivsi3>
 80021ba:	0003      	movs	r3, r0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e015      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2238      	movs	r2, #56	; 0x38
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d103      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2238      	movs	r2, #56	; 0x38
 80021da:	4013      	ands	r3, r2
 80021dc:	2b18      	cmp	r3, #24
 80021de:	d103      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021e0:	23fa      	movs	r3, #250	; 0xfa
 80021e2:	01db      	lsls	r3, r3, #7
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e001      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021ec:	693b      	ldr	r3, [r7, #16]
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b006      	add	sp, #24
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	007a1200 	.word	0x007a1200

08002204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_RCC_GetHCLKFreq+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800221c:	f7ff fff2 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002220:	0004      	movs	r4, r0
 8002222:	f7ff faf9 	bl	8001818 <LL_RCC_GetAPB1Prescaler>
 8002226:	0003      	movs	r3, r0
 8002228:	0b1a      	lsrs	r2, r3, #12
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	58d3      	ldr	r3, [r2, r3]
 8002230:	221f      	movs	r2, #31
 8002232:	4013      	ands	r3, r2
 8002234:	40dc      	lsrs	r4, r3
 8002236:	0023      	movs	r3, r4
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	0800457c 	.word	0x0800457c

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800224c:	2313      	movs	r3, #19
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002254:	2312      	movs	r3, #18
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	d100      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002268:	e0ad      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2011      	movs	r0, #17
 800226c:	183b      	adds	r3, r7, r0
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	055b      	lsls	r3, r3, #21
 800227a:	4013      	ands	r3, r2
 800227c:	d110      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002282:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0549      	lsls	r1, r1, #21
 8002288:	430a      	orrs	r2, r1
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	055b      	lsls	r3, r3, #21
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	183b      	adds	r3, r7, r0
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	0049      	lsls	r1, r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ae:	f7fe ffdd 	bl	800126c <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b6:	e00b      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7fe ffd8 	bl	800126c <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d904      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022c6:	2313      	movs	r3, #19
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2203      	movs	r2, #3
 80022cc:	701a      	strb	r2, [r3, #0]
        break;
 80022ce:	e005      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d0ed      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022dc:	2313      	movs	r3, #19
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d15e      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d019      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d014      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800230e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	0249      	lsls	r1, r1, #9
 8002316:	430a      	orrs	r2, r1
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800231c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002320:	491e      	ldr	r1, [pc, #120]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002322:	400a      	ands	r2, r1
 8002324:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d016      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe ff9a 	bl	800126c <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e00c      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe ff95 	bl	800126c <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d904      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800234e:	2313      	movs	r3, #19
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2203      	movs	r2, #3
 8002354:	701a      	strb	r2, [r3, #0]
            break;
 8002356:	e004      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d0ed      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002362:	2313      	movs	r3, #19
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800237c:	430a      	orrs	r2, r1
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002380:	e016      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002382:	2312      	movs	r3, #18
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2213      	movs	r2, #19
 8002388:	18ba      	adds	r2, r7, r2
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e00f      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	fffffcff 	.word	0xfffffcff
 800239c:	fffeffff 	.word	0xfffeffff
 80023a0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a4:	2312      	movs	r3, #18
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	2213      	movs	r2, #19
 80023aa:	18ba      	adds	r2, r7, r2
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b0:	2311      	movs	r3, #17
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4bb6      	ldr	r3, [pc, #728]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023be:	4bb5      	ldr	r3, [pc, #724]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c0:	49b5      	ldr	r1, [pc, #724]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d0:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	2203      	movs	r2, #3
 80023d6:	4393      	bics	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4bad      	ldr	r3, [pc, #692]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2202      	movs	r2, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ee:	4ba9      	ldr	r3, [pc, #676]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	220c      	movs	r2, #12
 80023f4:	4393      	bics	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4ba5      	ldr	r3, [pc, #660]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2204      	movs	r2, #4
 8002408:	4013      	ands	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800240c:	4ba1      	ldr	r3, [pc, #644]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	2230      	movs	r2, #48	; 0x30
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4b9e      	ldr	r3, [pc, #632]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800241c:	430a      	orrs	r2, r1
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	4013      	ands	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800242a:	4b9a      	ldr	r3, [pc, #616]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	4a9b      	ldr	r2, [pc, #620]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	4b96      	ldr	r3, [pc, #600]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243a:	430a      	orrs	r2, r1
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	015b      	lsls	r3, r3, #5
 8002446:	4013      	ands	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800244a:	4b92      	ldr	r3, [pc, #584]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	4a94      	ldr	r2, [pc, #592]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002450:	4013      	ands	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800245a:	430a      	orrs	r2, r1
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246a:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	4a8d      	ldr	r2, [pc, #564]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002478:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800247a:	430a      	orrs	r2, r1
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	4a86      	ldr	r2, [pc, #536]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249a:	430a      	orrs	r2, r1
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2220      	movs	r2, #32
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a8:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	4a7f      	ldr	r2, [pc, #508]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	4013      	ands	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c6:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	4a79      	ldr	r2, [pc, #484]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	01db      	lsls	r3, r3, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	d015      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e6:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	0899      	lsrs	r1, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f2:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	05db      	lsls	r3, r3, #23
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0249      	lsls	r1, r1, #9
 800250e:	430a      	orrs	r2, r1
 8002510:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	031b      	lsls	r3, r3, #12
 800251a:	4013      	ands	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800251e:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	4393      	bics	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252e:	430a      	orrs	r2, r1
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	039b      	lsls	r3, r3, #14
 800253a:	4013      	ands	r3, r2
 800253c:	d016      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800253e:	4b55      	ldr	r3, [pc, #340]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	4a5c      	ldr	r2, [pc, #368]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002544:	4013      	ands	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254c:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254e:	430a      	orrs	r2, r1
 8002550:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	03db      	lsls	r3, r3, #15
 800255a:	429a      	cmp	r2, r3
 800255c:	d106      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0449      	lsls	r1, r1, #17
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	03db      	lsls	r3, r3, #15
 8002574:	4013      	ands	r3, r2
 8002576:	d016      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800257e:	4013      	ands	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002586:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002588:	430a      	orrs	r2, r1
 800258a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	045b      	lsls	r3, r3, #17
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	0449      	lsls	r1, r1, #17
 80025a2:	430a      	orrs	r2, r1
 80025a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	d014      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	2203      	movs	r2, #3
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0249      	lsls	r1, r1, #9
 80025d8:	430a      	orrs	r2, r1
 80025da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	019b      	lsls	r3, r3, #6
 80025e4:	4013      	ands	r3, r2
 80025e6:	d014      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	220c      	movs	r2, #12
 80025ee:	4393      	bics	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f6:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2b04      	cmp	r3, #4
 8002602:	d106      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	0249      	lsls	r1, r1, #9
 800260e:	430a      	orrs	r2, r1
 8002610:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	045b      	lsls	r3, r3, #17
 800261a:	4013      	ands	r3, r2
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262e:	430a      	orrs	r2, r1
 8002630:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	019b      	lsls	r3, r3, #6
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0449      	lsls	r1, r1, #17
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	049b      	lsls	r3, r3, #18
 8002654:	4013      	ands	r3, r2
 8002656:	d016      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002668:	430a      	orrs	r2, r1
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0449      	lsls	r1, r1, #17
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002686:	2312      	movs	r3, #18
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	efffffff 	.word	0xefffffff
 800269c:	fffff3ff 	.word	0xfffff3ff
 80026a0:	fffffcff 	.word	0xfffffcff
 80026a4:	fff3ffff 	.word	0xfff3ffff
 80026a8:	ffcfffff 	.word	0xffcfffff
 80026ac:	ffffcfff 	.word	0xffffcfff
 80026b0:	ffff3fff 	.word	0xffff3fff
 80026b4:	ffbfffff 	.word	0xffbfffff
 80026b8:	feffffff 	.word	0xfeffffff

080026bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <HAL_RTC_Init+0x18>
 80026d2:	e08c      	b.n	80027ee <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2229      	movs	r2, #41	; 0x29
 80026d8:	5c9b      	ldrb	r3, [r3, r2]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2228      	movs	r2, #40	; 0x28
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2288      	movs	r2, #136	; 0x88
 80026ec:	0212      	lsls	r2, r2, #8
 80026ee:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe fafc 	bl	8000cf0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2229      	movs	r2, #41	; 0x29
 80026fc:	2102      	movs	r1, #2
 80026fe:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2210      	movs	r2, #16
 8002708:	4013      	ands	r3, r2
 800270a:	2b10      	cmp	r3, #16
 800270c:	d062      	beq.n	80027d4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	22ca      	movs	r2, #202	; 0xca
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2253      	movs	r2, #83	; 0x53
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800271e:	250f      	movs	r5, #15
 8002720:	197c      	adds	r4, r7, r5
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fb51 	bl	8002dcc <RTC_EnterInitMode>
 800272a:	0003      	movs	r3, r0
 800272c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800272e:	0028      	movs	r0, r5
 8002730:	183b      	adds	r3, r7, r0
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12c      	bne.n	8002792 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	492e      	ldr	r1, [pc, #184]	; (80027fc <HAL_RTC_Init+0x140>)
 8002744:	400a      	ands	r2, r1
 8002746:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6912      	ldr	r2, [r2, #16]
 800276e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	041a      	lsls	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002784:	183c      	adds	r4, r7, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fb61 	bl	8002e50 <RTC_ExitInitMode>
 800278e:	0003      	movs	r3, r0
 8002790:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002792:	230f      	movs	r3, #15
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d116      	bne.n	80027ca <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	00d2      	lsls	r2, r2, #3
 80027a8:	08d2      	lsrs	r2, r2, #3
 80027aa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6999      	ldr	r1, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	22ff      	movs	r2, #255	; 0xff
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
 80027d2:	e003      	b.n	80027dc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80027dc:	230f      	movs	r3, #15
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2229      	movs	r2, #41	; 0x29
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027ee:	230f      	movs	r3, #15
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	fb8fffbf 	.word	0xfb8fffbf

08002800 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2228      	movs	r2, #40	; 0x28
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_RTC_SetTime+0x1a>
 8002816:	2302      	movs	r3, #2
 8002818:	e092      	b.n	8002940 <HAL_RTC_SetTime+0x140>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2228      	movs	r2, #40	; 0x28
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2229      	movs	r2, #41	; 0x29
 8002826:	2102      	movs	r1, #2
 8002828:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	22ca      	movs	r2, #202	; 0xca
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2253      	movs	r2, #83	; 0x53
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800283a:	2513      	movs	r5, #19
 800283c:	197c      	adds	r4, r7, r5
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fac3 	bl	8002dcc <RTC_EnterInitMode>
 8002846:	0003      	movs	r3, r0
 8002848:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800284a:	197b      	adds	r3, r7, r5
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d162      	bne.n	8002918 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d125      	bne.n	80028a4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	4013      	ands	r3, r2
 8002862:	d102      	bne.n	800286a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 fb32 	bl	8002ed8 <RTC_ByteToBcd2>
 8002874:	0003      	movs	r3, r0
 8002876:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fb2b 	bl	8002ed8 <RTC_ByteToBcd2>
 8002882:	0003      	movs	r3, r0
 8002884:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002886:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	789b      	ldrb	r3, [r3, #2]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 fb23 	bl	8002ed8 <RTC_ByteToBcd2>
 8002892:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002894:	0022      	movs	r2, r4
 8002896:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	78db      	ldrb	r3, [r3, #3]
 800289c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e017      	b.n	80028d4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	4013      	ands	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	78db      	ldrb	r3, [r3, #3]
 80028ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	491b      	ldr	r1, [pc, #108]	; (8002948 <HAL_RTC_SetTime+0x148>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_RTC_SetTime+0x14c>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	431a      	orrs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002908:	2313      	movs	r3, #19
 800290a:	18fc      	adds	r4, r7, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 fa9e 	bl	8002e50 <RTC_ExitInitMode>
 8002914:	0003      	movs	r3, r0
 8002916:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002920:	2313      	movs	r3, #19
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2229      	movs	r2, #41	; 0x29
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2228      	movs	r2, #40	; 0x28
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

  return status;
 800293a:	2313      	movs	r3, #19
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b006      	add	sp, #24
 8002946:	bdb0      	pop	{r4, r5, r7, pc}
 8002948:	007f7f7f 	.word	0x007f7f7f
 800294c:	fffbffff 	.word	0xfffbffff

08002950 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_RTC_SetDate+0x1a>
 8002966:	2302      	movs	r3, #2
 8002968:	e07e      	b.n	8002a68 <HAL_RTC_SetDate+0x118>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2228      	movs	r2, #40	; 0x28
 800296e:	2101      	movs	r1, #1
 8002970:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2229      	movs	r2, #41	; 0x29
 8002976:	2102      	movs	r1, #2
 8002978:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10e      	bne.n	800299e <HAL_RTC_SetDate+0x4e>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	001a      	movs	r2, r3
 8002986:	2310      	movs	r3, #16
 8002988:	4013      	ands	r3, r2
 800298a:	d008      	beq.n	800299e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	2210      	movs	r2, #16
 8002992:	4393      	bics	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	330a      	adds	r3, #10
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11c      	bne.n	80029de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fa95 	bl	8002ed8 <RTC_ByteToBcd2>
 80029ae:	0003      	movs	r3, r0
 80029b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fa8e 	bl	8002ed8 <RTC_ByteToBcd2>
 80029bc:	0003      	movs	r3, r0
 80029be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	789b      	ldrb	r3, [r3, #2]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fa86 	bl	8002ed8 <RTC_ByteToBcd2>
 80029cc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029ce:	0022      	movs	r2, r4
 80029d0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e00e      	b.n	80029fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	78db      	ldrb	r3, [r3, #3]
 80029e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	22ca      	movs	r2, #202	; 0xca
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2253      	movs	r2, #83	; 0x53
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a0c:	2513      	movs	r5, #19
 8002a0e:	197c      	adds	r4, r7, r5
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f9da 	bl	8002dcc <RTC_EnterInitMode>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002a1c:	0028      	movs	r0, r5
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4910      	ldr	r1, [pc, #64]	; (8002a70 <HAL_RTC_SetDate+0x120>)
 8002a2e:	400a      	ands	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a32:	183c      	adds	r4, r7, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fa0a 	bl	8002e50 <RTC_ExitInitMode>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a48:	2313      	movs	r3, #19
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2229      	movs	r2, #41	; 0x29
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2228      	movs	r2, #40	; 0x28
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

  return status;
 8002a62:	2313      	movs	r3, #19
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	781b      	ldrb	r3, [r3, #0]
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b006      	add	sp, #24
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	00ffff3f 	.word	0x00ffff3f

08002a74 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2228      	movs	r2, #40	; 0x28
 8002a84:	5c9b      	ldrb	r3, [r3, r2]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_RTC_SetAlarm_IT+0x1a>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e127      	b.n	8002cde <HAL_RTC_SetAlarm_IT+0x26a>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2228      	movs	r2, #40	; 0x28
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2229      	movs	r2, #41	; 0x29
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d136      	bne.n	8002b12 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	4013      	ands	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 fa0c 	bl	8002ed8 <RTC_ByteToBcd2>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 fa05 	bl	8002ed8 <RTC_ByteToBcd2>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ad2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	789b      	ldrb	r3, [r3, #2]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f9fd 	bl	8002ed8 <RTC_ByteToBcd2>
 8002ade:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	78db      	ldrb	r3, [r3, #3]
 8002ae8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002aea:	431a      	orrs	r2, r3
 8002aec:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2220      	movs	r2, #32
 8002af2:	5c9b      	ldrb	r3, [r3, r2]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f9ef 	bl	8002ed8 <RTC_ByteToBcd2>
 8002afa:	0003      	movs	r3, r0
 8002afc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002afe:	0022      	movs	r2, r4
 8002b00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b06:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	e022      	b.n	8002b58 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d102      	bne.n	8002b24 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b30:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	78db      	ldrb	r3, [r3, #3]
 8002b3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002b3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2120      	movs	r1, #32
 8002b44:	5c5b      	ldrb	r3, [r3, r1]
 8002b46:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	22ca      	movs	r2, #202	; 0xca
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2253      	movs	r2, #83	; 0x53
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d14c      	bne.n	8002c1a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4957      	ldr	r1, [pc, #348]	; (8002ce8 <HAL_RTC_SetAlarm_IT+0x274>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002ba0:	f7fe fb64 	bl	800126c <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ba8:	e016      	b.n	8002bd8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002baa:	f7fe fb5f 	bl	800126c <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	23fa      	movs	r3, #250	; 0xfa
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d90d      	bls.n	8002bd8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2229      	movs	r2, #41	; 0x29
 8002bc8:	2103      	movs	r1, #3
 8002bca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2228      	movs	r2, #40	; 0x28
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e082      	b.n	8002cde <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	d0e2      	beq.n	8002baa <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	0049      	lsls	r1, r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0149      	lsls	r1, r1, #5
 8002c14:	430a      	orrs	r2, r1
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	e04b      	b.n	8002cb2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4931      	ldr	r1, [pc, #196]	; (8002cec <HAL_RTC_SetAlarm_IT+0x278>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2102      	movs	r1, #2
 8002c36:	430a      	orrs	r2, r1
 8002c38:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002c3a:	f7fe fb17 	bl	800126c <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c42:	e016      	b.n	8002c72 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c44:	f7fe fb12 	bl	800126c <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	23fa      	movs	r3, #250	; 0xfa
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d90d      	bls.n	8002c72 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2229      	movs	r2, #41	; 0x29
 8002c62:	2103      	movs	r1, #3
 8002c64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2228      	movs	r2, #40	; 0x28
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e035      	b.n	8002cde <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0e2      	beq.n	8002c44 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0089      	lsls	r1, r1, #2
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	0189      	lsls	r1, r1, #6
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	58d3      	ldr	r3, [r2, r3]
 8002cb8:	490d      	ldr	r1, [pc, #52]	; (8002cf0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0312      	lsls	r2, r2, #12
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2229      	movs	r2, #41	; 0x29
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2228      	movs	r2, #40	; 0x28
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b009      	add	sp, #36	; 0x24
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	fffffeff 	.word	0xfffffeff
 8002cec:	fffffdff 	.word	0xfffffdff
 8002cf0:	40021800 	.word	0x40021800

08002cf4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	4013      	ands	r3, r2
 8002d08:	d011      	beq.n	8002d2e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	019b      	lsls	r3, r3, #6
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d011      	beq.n	8002d60 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2102      	movs	r1, #2
 8002d54:	430a      	orrs	r2, r1
 8002d56:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f8e4 	bl	8002f28 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2229      	movs	r2, #41	; 0x29
 8002d64:	2101      	movs	r1, #1
 8002d66:	5499      	strb	r1, [r3, r2]
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_RTC_WaitForSynchro+0x48>)
 8002d8e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d90:	f7fe fa6c 	bl	800126c <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002d98:	e00a      	b.n	8002db0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d9a:	f7fe fa67 	bl	800126c <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	23fa      	movs	r3, #250	; 0xfa
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d901      	bls.n	8002db0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	0001005f 	.word	0x0001005f

08002dcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	4013      	ands	r3, r2
 8002de6:	d12c      	bne.n	8002e42 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002df8:	f7fe fa38 	bl	800126c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e00:	e014      	b.n	8002e2c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e02:	f7fe fa33 	bl	800126c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	200f      	movs	r0, #15
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	1839      	adds	r1, r7, r0
 8002e12:	7809      	ldrb	r1, [r1, #0]
 8002e14:	7019      	strb	r1, [r3, #0]
 8002e16:	23fa      	movs	r3, #250	; 0xfa
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d906      	bls.n	8002e2c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	2203      	movs	r2, #3
 8002e22:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2229      	movs	r2, #41	; 0x29
 8002e28:	2103      	movs	r1, #3
 8002e2a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d104      	bne.n	8002e42 <RTC_EnterInitMode+0x76>
 8002e38:	230f      	movs	r3, #15
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d1df      	bne.n	8002e02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	240f      	movs	r4, #15
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	438a      	bics	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2220      	movs	r2, #32
 8002e72:	4013      	ands	r3, r2
 8002e74:	d10d      	bne.n	8002e92 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ff81 	bl	8002d80 <HAL_RTC_WaitForSynchro>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d021      	beq.n	8002ec6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2229      	movs	r2, #41	; 0x29
 8002e86:	2103      	movs	r1, #3
 8002e88:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002e8a:	193b      	adds	r3, r7, r4
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e019      	b.n	8002ec6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002e98:	2120      	movs	r1, #32
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff ff6d 	bl	8002d80 <HAL_RTC_WaitForSynchro>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d007      	beq.n	8002eba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2229      	movs	r2, #41	; 0x29
 8002eae:	2103      	movs	r1, #3
 8002eb0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002eb2:	230f      	movs	r3, #15
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <RTC_ExitInitMode+0x84>)
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b005      	add	sp, #20
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	40002800 	.word	0x40002800

08002ed8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002ee8:	230b      	movs	r3, #11
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	1dfa      	adds	r2, r7, #7
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002ef2:	e008      	b.n	8002f06 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002efa:	220b      	movs	r2, #11
 8002efc:	18bb      	adds	r3, r7, r2
 8002efe:	18ba      	adds	r2, r7, r2
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	3a0a      	subs	r2, #10
 8002f04:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002f06:	210b      	movs	r1, #11
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b09      	cmp	r3, #9
 8002f0e:	d8f1      	bhi.n	8002ef4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a8      	b.n	800309c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	2382      	movs	r3, #130	; 0x82
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d009      	beq.n	8002f72 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
 8002f64:	e005      	b.n	8002f72 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	225d      	movs	r2, #93	; 0x5d
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	225c      	movs	r2, #92	; 0x5c
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd fef4 	bl	8000d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	225d      	movs	r2, #93	; 0x5d
 8002f98:	2102      	movs	r1, #2
 8002f9a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	438a      	bics	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	23e0      	movs	r3, #224	; 0xe0
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d902      	bls.n	8002fbe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e002      	b.n	8002fc4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	23f0      	movs	r3, #240	; 0xf0
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d008      	beq.n	8002fe2 <HAL_SPI_Init+0xaa>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	23e0      	movs	r3, #224	; 0xe0
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	2382      	movs	r3, #130	; 0x82
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	2384      	movs	r3, #132	; 0x84
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	400b      	ands	r3, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2101      	movs	r1, #1
 8003008:	400b      	ands	r3, r1
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	400b      	ands	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2138      	movs	r1, #56	; 0x38
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	400b      	ands	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	0011      	movs	r1, r2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	401a      	ands	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	2204      	movs	r2, #4
 8003048:	401a      	ands	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2110      	movs	r1, #16
 8003050:	400b      	ands	r3, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	2108      	movs	r1, #8
 800305a:	400b      	ands	r3, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	23f0      	movs	r3, #240	; 0xf0
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	400b      	ands	r3, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	0011      	movs	r1, r2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	015b      	lsls	r3, r3, #5
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4907      	ldr	r1, [pc, #28]	; (80030a4 <HAL_SPI_Init+0x16c>)
 8003088:	400a      	ands	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	225d      	movs	r2, #93	; 0x5d
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	fffff7ff 	.word	0xfffff7ff

080030a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e04a      	b.n	8003150 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223d      	movs	r2, #61	; 0x3d
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	223c      	movs	r2, #60	; 0x3c
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fd fe9d 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	223d      	movs	r2, #61	; 0x3d
 80030da:	2102      	movs	r1, #2
 80030dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	0019      	movs	r1, r3
 80030e8:	0010      	movs	r0, r2
 80030ea:	f000 f965 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2248      	movs	r2, #72	; 0x48
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	223e      	movs	r2, #62	; 0x3e
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	223f      	movs	r2, #63	; 0x3f
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2241      	movs	r2, #65	; 0x41
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2242      	movs	r2, #66	; 0x42
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2243      	movs	r2, #67	; 0x43
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2244      	movs	r2, #68	; 0x44
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2245      	movs	r2, #69	; 0x45
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2246      	movs	r2, #70	; 0x46
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2247      	movs	r2, #71	; 0x47
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	223d      	movs	r2, #61	; 0x3d
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d021      	beq.n	80031bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2202      	movs	r2, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d01d      	beq.n	80031bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2203      	movs	r2, #3
 8003186:	4252      	negs	r2, r2
 8003188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2203      	movs	r2, #3
 8003198:	4013      	ands	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f8f2 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e007      	b.n	80031b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f8e5 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f8f1 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d01e      	beq.n	800320a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2205      	movs	r2, #5
 80031d2:	4252      	negs	r2, r2
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f8cb 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 80031f2:	e007      	b.n	8003204 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f8be 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f8ca 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2208      	movs	r2, #8
 800320e:	4013      	ands	r3, r2
 8003210:	d021      	beq.n	8003256 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2208      	movs	r2, #8
 8003216:	4013      	ands	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2209      	movs	r2, #9
 8003220:	4252      	negs	r2, r2
 8003222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2204      	movs	r2, #4
 8003228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2203      	movs	r2, #3
 8003232:	4013      	ands	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f8a5 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 800323e:	e007      	b.n	8003250 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f898 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f8a4 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2210      	movs	r2, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d022      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2210      	movs	r2, #16
 8003262:	4013      	ands	r3, r2
 8003264:	d01e      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2211      	movs	r2, #17
 800326c:	4252      	negs	r2, r2
 800326e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2208      	movs	r2, #8
 8003274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	23c0      	movs	r3, #192	; 0xc0
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4013      	ands	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f87e 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 800328c:	e007      	b.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f871 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 f87d 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2201      	movs	r2, #1
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00c      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d008      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2202      	movs	r2, #2
 80032ba:	4252      	negs	r2, r2
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 f851 	bl	8003368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	4013      	ands	r3, r2
 80032cc:	d104      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032d6:	d00b      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	4013      	ands	r3, r2
 80032de:	d007      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <HAL_TIM_IRQHandler+0x208>)
 80032e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f97a 	bl	80035e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d00b      	beq.n	8003312 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	4013      	ands	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_TIM_IRQHandler+0x20c>)
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f971 	bl	80035f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	4013      	ands	r3, r2
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	4013      	ands	r3, r2
 8003320:	d008      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2241      	movs	r2, #65	; 0x41
 8003328:	4252      	negs	r2, r2
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 f83a 	bl	80033a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2220      	movs	r2, #32
 8003338:	4013      	ands	r3, r2
 800333a:	d00c      	beq.n	8003356 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	4013      	ands	r3, r2
 8003342:	d008      	beq.n	8003356 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	4252      	negs	r2, r2
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 f93f 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	ffffdf7f 	.word	0xffffdf7f
 8003364:	fffffeff 	.word	0xfffffeff

08003368 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <TIM_Base_SetConfig+0x110>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00c      	beq.n	80033ea <TIM_Base_SetConfig+0x32>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x32>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a3b      	ldr	r2, [pc, #236]	; (80034cc <TIM_Base_SetConfig+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x32>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a3a      	ldr	r2, [pc, #232]	; (80034d0 <TIM_Base_SetConfig+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2270      	movs	r2, #112	; 0x70
 80033ee:	4393      	bics	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <TIM_Base_SetConfig+0x110>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01c      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	429a      	cmp	r2, r3
 800340c:	d017      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <TIM_Base_SetConfig+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <TIM_Base_SetConfig+0x118>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00f      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <TIM_Base_SetConfig+0x11c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <TIM_Base_SetConfig+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <TIM_Base_SetConfig+0x124>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0x86>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <TIM_Base_SetConfig+0x128>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <TIM_Base_SetConfig+0x12c>)
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	4393      	bics	r3, r2
 8003456:	001a      	movs	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <TIM_Base_SetConfig+0x110>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0xde>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0xde>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0xde>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d103      	bne.n	800349e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4393      	bics	r3, r2
 80034b8:	001a      	movs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]
  }
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40002000 	.word	0x40002000
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	fffffcff 	.word	0xfffffcff

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223c      	movs	r2, #60	; 0x3c
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e05a      	b.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	; 0x3c
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223d      	movs	r2, #61	; 0x3d
 800350c:	2102      	movs	r1, #2
 800350e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2270      	movs	r2, #112	; 0x70
 8003540:	4393      	bics	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d014      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	429a      	cmp	r2, r3
 800356a:	d00e      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10c      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	4393      	bics	r3, r2
 8003590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223d      	movs	r2, #61	; 0x3d
 80035a8:	2101      	movs	r1, #1
 80035aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	223c      	movs	r2, #60	; 0x3c
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	ff0fffff 	.word	0xff0fffff
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40014000 	.word	0x40014000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e046      	b.n	80036a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2288      	movs	r2, #136	; 0x88
 800361a:	589b      	ldr	r3, [r3, r2]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2284      	movs	r2, #132	; 0x84
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f7fd fc16 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2288      	movs	r2, #136	; 0x88
 8003634:	2124      	movs	r1, #36	; 0x24
 8003636:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fb82 	bl	8003d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 f828 	bl	80036b0 <UART_SetConfig>
 8003660:	0003      	movs	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01c      	b.n	80036a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	490d      	ldr	r1, [pc, #52]	; (80036ac <HAL_UART_Init+0xa8>)
 8003676:	400a      	ands	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	212a      	movs	r1, #42	; 0x2a
 8003686:	438a      	bics	r2, r1
 8003688:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 fc11 	bl	8003ec4 <UART_CheckIdleState>
 80036a2:	0003      	movs	r3, r0
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	ffffb7ff 	.word	0xffffb7ff

080036b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b090      	sub	sp, #64	; 0x40
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b8:	231a      	movs	r3, #26
 80036ba:	2220      	movs	r2, #32
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	19db      	adds	r3, r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4ac1      	ldr	r2, [pc, #772]	; (80039e8 <UART_SetConfig+0x338>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	430b      	orrs	r3, r1
 80036f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4abc      	ldr	r2, [pc, #752]	; (80039ec <UART_SetConfig+0x33c>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0018      	movs	r0, r3
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	0003      	movs	r3, r0
 8003708:	430b      	orrs	r3, r1
 800370a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4ab6      	ldr	r2, [pc, #728]	; (80039f0 <UART_SetConfig+0x340>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <UART_SetConfig+0x80>
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4ab4      	ldr	r2, [pc, #720]	; (80039f4 <UART_SetConfig+0x344>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800372c:	4313      	orrs	r3, r2
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4ab0      	ldr	r2, [pc, #704]	; (80039f8 <UART_SetConfig+0x348>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003742:	430b      	orrs	r3, r1
 8003744:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	220f      	movs	r2, #15
 800374e:	4393      	bics	r3, r2
 8003750:	0018      	movs	r0, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	0003      	movs	r3, r0
 800375c:	430b      	orrs	r3, r1
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4aa5      	ldr	r2, [pc, #660]	; (80039fc <UART_SetConfig+0x34c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d131      	bne.n	80037ce <UART_SetConfig+0x11e>
 800376a:	4ba5      	ldr	r3, [pc, #660]	; (8003a00 <UART_SetConfig+0x350>)
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	2203      	movs	r2, #3
 8003770:	4013      	ands	r3, r2
 8003772:	2b03      	cmp	r3, #3
 8003774:	d01d      	beq.n	80037b2 <UART_SetConfig+0x102>
 8003776:	d823      	bhi.n	80037c0 <UART_SetConfig+0x110>
 8003778:	2b02      	cmp	r3, #2
 800377a:	d00c      	beq.n	8003796 <UART_SetConfig+0xe6>
 800377c:	d820      	bhi.n	80037c0 <UART_SetConfig+0x110>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <UART_SetConfig+0xd8>
 8003782:	2b01      	cmp	r3, #1
 8003784:	d00e      	beq.n	80037a4 <UART_SetConfig+0xf4>
 8003786:	e01b      	b.n	80037c0 <UART_SetConfig+0x110>
 8003788:	231b      	movs	r3, #27
 800378a:	2220      	movs	r2, #32
 800378c:	189b      	adds	r3, r3, r2
 800378e:	19db      	adds	r3, r3, r7
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e154      	b.n	8003a40 <UART_SetConfig+0x390>
 8003796:	231b      	movs	r3, #27
 8003798:	2220      	movs	r2, #32
 800379a:	189b      	adds	r3, r3, r2
 800379c:	19db      	adds	r3, r3, r7
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e14d      	b.n	8003a40 <UART_SetConfig+0x390>
 80037a4:	231b      	movs	r3, #27
 80037a6:	2220      	movs	r2, #32
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2204      	movs	r2, #4
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e146      	b.n	8003a40 <UART_SetConfig+0x390>
 80037b2:	231b      	movs	r3, #27
 80037b4:	2220      	movs	r2, #32
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	2208      	movs	r2, #8
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e13f      	b.n	8003a40 <UART_SetConfig+0x390>
 80037c0:	231b      	movs	r3, #27
 80037c2:	2220      	movs	r2, #32
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	19db      	adds	r3, r3, r7
 80037c8:	2210      	movs	r2, #16
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e138      	b.n	8003a40 <UART_SetConfig+0x390>
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a8c      	ldr	r2, [pc, #560]	; (8003a04 <UART_SetConfig+0x354>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d131      	bne.n	800383c <UART_SetConfig+0x18c>
 80037d8:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <UART_SetConfig+0x350>)
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	220c      	movs	r2, #12
 80037de:	4013      	ands	r3, r2
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d01d      	beq.n	8003820 <UART_SetConfig+0x170>
 80037e4:	d823      	bhi.n	800382e <UART_SetConfig+0x17e>
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d00c      	beq.n	8003804 <UART_SetConfig+0x154>
 80037ea:	d820      	bhi.n	800382e <UART_SetConfig+0x17e>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <UART_SetConfig+0x146>
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00e      	beq.n	8003812 <UART_SetConfig+0x162>
 80037f4:	e01b      	b.n	800382e <UART_SetConfig+0x17e>
 80037f6:	231b      	movs	r3, #27
 80037f8:	2220      	movs	r2, #32
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	19db      	adds	r3, r3, r7
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e11d      	b.n	8003a40 <UART_SetConfig+0x390>
 8003804:	231b      	movs	r3, #27
 8003806:	2220      	movs	r2, #32
 8003808:	189b      	adds	r3, r3, r2
 800380a:	19db      	adds	r3, r3, r7
 800380c:	2202      	movs	r2, #2
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e116      	b.n	8003a40 <UART_SetConfig+0x390>
 8003812:	231b      	movs	r3, #27
 8003814:	2220      	movs	r2, #32
 8003816:	189b      	adds	r3, r3, r2
 8003818:	19db      	adds	r3, r3, r7
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e10f      	b.n	8003a40 <UART_SetConfig+0x390>
 8003820:	231b      	movs	r3, #27
 8003822:	2220      	movs	r2, #32
 8003824:	189b      	adds	r3, r3, r2
 8003826:	19db      	adds	r3, r3, r7
 8003828:	2208      	movs	r2, #8
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e108      	b.n	8003a40 <UART_SetConfig+0x390>
 800382e:	231b      	movs	r3, #27
 8003830:	2220      	movs	r2, #32
 8003832:	189b      	adds	r3, r3, r2
 8003834:	19db      	adds	r3, r3, r7
 8003836:	2210      	movs	r2, #16
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e101      	b.n	8003a40 <UART_SetConfig+0x390>
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <UART_SetConfig+0x358>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d131      	bne.n	80038aa <UART_SetConfig+0x1fa>
 8003846:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <UART_SetConfig+0x350>)
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	2230      	movs	r2, #48	; 0x30
 800384c:	4013      	ands	r3, r2
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d01d      	beq.n	800388e <UART_SetConfig+0x1de>
 8003852:	d823      	bhi.n	800389c <UART_SetConfig+0x1ec>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d00c      	beq.n	8003872 <UART_SetConfig+0x1c2>
 8003858:	d820      	bhi.n	800389c <UART_SetConfig+0x1ec>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <UART_SetConfig+0x1b4>
 800385e:	2b10      	cmp	r3, #16
 8003860:	d00e      	beq.n	8003880 <UART_SetConfig+0x1d0>
 8003862:	e01b      	b.n	800389c <UART_SetConfig+0x1ec>
 8003864:	231b      	movs	r3, #27
 8003866:	2220      	movs	r2, #32
 8003868:	189b      	adds	r3, r3, r2
 800386a:	19db      	adds	r3, r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e0e6      	b.n	8003a40 <UART_SetConfig+0x390>
 8003872:	231b      	movs	r3, #27
 8003874:	2220      	movs	r2, #32
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e0df      	b.n	8003a40 <UART_SetConfig+0x390>
 8003880:	231b      	movs	r3, #27
 8003882:	2220      	movs	r2, #32
 8003884:	189b      	adds	r3, r3, r2
 8003886:	19db      	adds	r3, r3, r7
 8003888:	2204      	movs	r2, #4
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e0d8      	b.n	8003a40 <UART_SetConfig+0x390>
 800388e:	231b      	movs	r3, #27
 8003890:	2220      	movs	r2, #32
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	2208      	movs	r2, #8
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e0d1      	b.n	8003a40 <UART_SetConfig+0x390>
 800389c:	231b      	movs	r3, #27
 800389e:	2220      	movs	r2, #32
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2210      	movs	r2, #16
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e0ca      	b.n	8003a40 <UART_SetConfig+0x390>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a57      	ldr	r2, [pc, #348]	; (8003a0c <UART_SetConfig+0x35c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d106      	bne.n	80038c2 <UART_SetConfig+0x212>
 80038b4:	231b      	movs	r3, #27
 80038b6:	2220      	movs	r2, #32
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e0be      	b.n	8003a40 <UART_SetConfig+0x390>
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <UART_SetConfig+0x360>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d106      	bne.n	80038da <UART_SetConfig+0x22a>
 80038cc:	231b      	movs	r3, #27
 80038ce:	2220      	movs	r2, #32
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	19db      	adds	r3, r3, r7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e0b2      	b.n	8003a40 <UART_SetConfig+0x390>
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <UART_SetConfig+0x364>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d106      	bne.n	80038f2 <UART_SetConfig+0x242>
 80038e4:	231b      	movs	r3, #27
 80038e6:	2220      	movs	r2, #32
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e0a6      	b.n	8003a40 <UART_SetConfig+0x390>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3e      	ldr	r2, [pc, #248]	; (80039f0 <UART_SetConfig+0x340>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d13e      	bne.n	800397a <UART_SetConfig+0x2ca>
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <UART_SetConfig+0x350>)
 80038fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003900:	23c0      	movs	r3, #192	; 0xc0
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4013      	ands	r3, r2
 8003906:	22c0      	movs	r2, #192	; 0xc0
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	4293      	cmp	r3, r2
 800390c:	d027      	beq.n	800395e <UART_SetConfig+0x2ae>
 800390e:	22c0      	movs	r2, #192	; 0xc0
 8003910:	0112      	lsls	r2, r2, #4
 8003912:	4293      	cmp	r3, r2
 8003914:	d82a      	bhi.n	800396c <UART_SetConfig+0x2bc>
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	4293      	cmp	r3, r2
 800391c:	d011      	beq.n	8003942 <UART_SetConfig+0x292>
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	4293      	cmp	r3, r2
 8003924:	d822      	bhi.n	800396c <UART_SetConfig+0x2bc>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <UART_SetConfig+0x284>
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <UART_SetConfig+0x2a0>
 8003932:	e01b      	b.n	800396c <UART_SetConfig+0x2bc>
 8003934:	231b      	movs	r3, #27
 8003936:	2220      	movs	r2, #32
 8003938:	189b      	adds	r3, r3, r2
 800393a:	19db      	adds	r3, r3, r7
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e07e      	b.n	8003a40 <UART_SetConfig+0x390>
 8003942:	231b      	movs	r3, #27
 8003944:	2220      	movs	r2, #32
 8003946:	189b      	adds	r3, r3, r2
 8003948:	19db      	adds	r3, r3, r7
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e077      	b.n	8003a40 <UART_SetConfig+0x390>
 8003950:	231b      	movs	r3, #27
 8003952:	2220      	movs	r2, #32
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2204      	movs	r2, #4
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e070      	b.n	8003a40 <UART_SetConfig+0x390>
 800395e:	231b      	movs	r3, #27
 8003960:	2220      	movs	r2, #32
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	2208      	movs	r2, #8
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e069      	b.n	8003a40 <UART_SetConfig+0x390>
 800396c:	231b      	movs	r3, #27
 800396e:	2220      	movs	r2, #32
 8003970:	189b      	adds	r3, r3, r2
 8003972:	19db      	adds	r3, r3, r7
 8003974:	2210      	movs	r2, #16
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e062      	b.n	8003a40 <UART_SetConfig+0x390>
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <UART_SetConfig+0x344>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d157      	bne.n	8003a34 <UART_SetConfig+0x384>
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <UART_SetConfig+0x350>)
 8003986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003988:	23c0      	movs	r3, #192	; 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4013      	ands	r3, r2
 800398e:	22c0      	movs	r2, #192	; 0xc0
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4293      	cmp	r3, r2
 8003994:	d040      	beq.n	8003a18 <UART_SetConfig+0x368>
 8003996:	22c0      	movs	r2, #192	; 0xc0
 8003998:	0092      	lsls	r2, r2, #2
 800399a:	4293      	cmp	r3, r2
 800399c:	d843      	bhi.n	8003a26 <UART_SetConfig+0x376>
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d011      	beq.n	80039ca <UART_SetConfig+0x31a>
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d83b      	bhi.n	8003a26 <UART_SetConfig+0x376>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <UART_SetConfig+0x30c>
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	0052      	lsls	r2, r2, #1
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <UART_SetConfig+0x328>
 80039ba:	e034      	b.n	8003a26 <UART_SetConfig+0x376>
 80039bc:	231b      	movs	r3, #27
 80039be:	2220      	movs	r2, #32
 80039c0:	189b      	adds	r3, r3, r2
 80039c2:	19db      	adds	r3, r3, r7
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e03a      	b.n	8003a40 <UART_SetConfig+0x390>
 80039ca:	231b      	movs	r3, #27
 80039cc:	2220      	movs	r2, #32
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e033      	b.n	8003a40 <UART_SetConfig+0x390>
 80039d8:	231b      	movs	r3, #27
 80039da:	2220      	movs	r2, #32
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	19db      	adds	r3, r3, r7
 80039e0:	2204      	movs	r2, #4
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e02c      	b.n	8003a40 <UART_SetConfig+0x390>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	cfff69f3 	.word	0xcfff69f3
 80039ec:	ffffcfff 	.word	0xffffcfff
 80039f0:	40008000 	.word	0x40008000
 80039f4:	40008400 	.word	0x40008400
 80039f8:	11fff4ff 	.word	0x11fff4ff
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40004400 	.word	0x40004400
 8003a08:	40004800 	.word	0x40004800
 8003a0c:	40004c00 	.word	0x40004c00
 8003a10:	40005000 	.word	0x40005000
 8003a14:	40013c00 	.word	0x40013c00
 8003a18:	231b      	movs	r3, #27
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	19db      	adds	r3, r3, r7
 8003a20:	2208      	movs	r2, #8
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e00c      	b.n	8003a40 <UART_SetConfig+0x390>
 8003a26:	231b      	movs	r3, #27
 8003a28:	2220      	movs	r2, #32
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	2210      	movs	r2, #16
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e005      	b.n	8003a40 <UART_SetConfig+0x390>
 8003a34:	231b      	movs	r3, #27
 8003a36:	2220      	movs	r2, #32
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4ac1      	ldr	r2, [pc, #772]	; (8003d4c <UART_SetConfig+0x69c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d005      	beq.n	8003a56 <UART_SetConfig+0x3a6>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4ac0      	ldr	r2, [pc, #768]	; (8003d50 <UART_SetConfig+0x6a0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d000      	beq.n	8003a56 <UART_SetConfig+0x3a6>
 8003a54:	e093      	b.n	8003b7e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a56:	231b      	movs	r3, #27
 8003a58:	2220      	movs	r2, #32
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	19db      	adds	r3, r3, r7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d015      	beq.n	8003a90 <UART_SetConfig+0x3e0>
 8003a64:	dc18      	bgt.n	8003a98 <UART_SetConfig+0x3e8>
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00d      	beq.n	8003a86 <UART_SetConfig+0x3d6>
 8003a6a:	dc15      	bgt.n	8003a98 <UART_SetConfig+0x3e8>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <UART_SetConfig+0x3c6>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0x3d0>
 8003a74:	e010      	b.n	8003a98 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a76:	f7fe fbcf 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a7e:	e014      	b.n	8003aaa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a80:	4bb4      	ldr	r3, [pc, #720]	; (8003d54 <UART_SetConfig+0x6a4>)
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a84:	e011      	b.n	8003aaa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a86:	f7fe fb3b 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a8e:	e00c      	b.n	8003aaa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a96:	e008      	b.n	8003aaa <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a9c:	231a      	movs	r3, #26
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
        break;
 8003aa8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d100      	bne.n	8003ab2 <UART_SetConfig+0x402>
 8003ab0:	e135      	b.n	8003d1e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab6:	4ba8      	ldr	r3, [pc, #672]	; (8003d58 <UART_SetConfig+0x6a8>)
 8003ab8:	0052      	lsls	r2, r2, #1
 8003aba:	5ad3      	ldrh	r3, [r2, r3]
 8003abc:	0019      	movs	r1, r3
 8003abe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ac0:	f7fc fb20 	bl	8000104 <__udivsi3>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	0013      	movs	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	189b      	adds	r3, r3, r2
 8003ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d305      	bcc.n	8003ae4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d906      	bls.n	8003af2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003ae4:	231a      	movs	r3, #26
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	e044      	b.n	8003b7c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afe:	4b96      	ldr	r3, [pc, #600]	; (8003d58 <UART_SetConfig+0x6a8>)
 8003b00:	0052      	lsls	r2, r2, #1
 8003b02:	5ad3      	ldrh	r3, [r2, r3]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	69b8      	ldr	r0, [r7, #24]
 8003b10:	69f9      	ldr	r1, [r7, #28]
 8003b12:	f7fc fc6d 	bl	80003f0 <__aeabi_uldivmod>
 8003b16:	0002      	movs	r2, r0
 8003b18:	000b      	movs	r3, r1
 8003b1a:	0e11      	lsrs	r1, r2, #24
 8003b1c:	021d      	lsls	r5, r3, #8
 8003b1e:	430d      	orrs	r5, r1
 8003b20:	0214      	lsls	r4, r2, #8
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68b8      	ldr	r0, [r7, #8]
 8003b30:	68f9      	ldr	r1, [r7, #12]
 8003b32:	1900      	adds	r0, r0, r4
 8003b34:	4169      	adcs	r1, r5
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f7fc fc54 	bl	80003f0 <__aeabi_uldivmod>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	000b      	movs	r3, r1
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	23c0      	movs	r3, #192	; 0xc0
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d309      	bcc.n	8003b6e <UART_SetConfig+0x4be>
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	035b      	lsls	r3, r3, #13
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d204      	bcs.n	8003b6e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e006      	b.n	8003b7c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6e:	231a      	movs	r3, #26
 8003b70:	2220      	movs	r2, #32
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	19db      	adds	r3, r3, r7
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003b7a:	e0d0      	b.n	8003d1e <UART_SetConfig+0x66e>
 8003b7c:	e0cf      	b.n	8003d1e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d000      	beq.n	8003b8c <UART_SetConfig+0x4dc>
 8003b8a:	e070      	b.n	8003c6e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003b8c:	231b      	movs	r3, #27
 8003b8e:	2220      	movs	r2, #32
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d015      	beq.n	8003bc6 <UART_SetConfig+0x516>
 8003b9a:	dc18      	bgt.n	8003bce <UART_SetConfig+0x51e>
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00d      	beq.n	8003bbc <UART_SetConfig+0x50c>
 8003ba0:	dc15      	bgt.n	8003bce <UART_SetConfig+0x51e>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <UART_SetConfig+0x4fc>
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d005      	beq.n	8003bb6 <UART_SetConfig+0x506>
 8003baa:	e010      	b.n	8003bce <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe fb34 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bb4:	e014      	b.n	8003be0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <UART_SetConfig+0x6a4>)
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bba:	e011      	b.n	8003be0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbc:	f7fe faa0 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bc4:	e00c      	b.n	8003be0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bcc:	e008      	b.n	8003be0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bd2:	231a      	movs	r3, #26
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
        break;
 8003bde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d100      	bne.n	8003be8 <UART_SetConfig+0x538>
 8003be6:	e09a      	b.n	8003d1e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <UART_SetConfig+0x6a8>)
 8003bee:	0052      	lsls	r2, r2, #1
 8003bf0:	5ad3      	ldrh	r3, [r2, r3]
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bf6:	f7fc fa85 	bl	8000104 <__udivsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	18d2      	adds	r2, r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f7fc fa79 	bl	8000104 <__udivsi3>
 8003c12:	0003      	movs	r3, r0
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d921      	bls.n	8003c60 <UART_SetConfig+0x5b0>
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	025b      	lsls	r3, r3, #9
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d21c      	bcs.n	8003c60 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	200e      	movs	r0, #14
 8003c2c:	2420      	movs	r4, #32
 8003c2e:	1903      	adds	r3, r0, r4
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	210f      	movs	r1, #15
 8003c34:	438a      	bics	r2, r1
 8003c36:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2207      	movs	r2, #7
 8003c40:	4013      	ands	r3, r2
 8003c42:	b299      	uxth	r1, r3
 8003c44:	1903      	adds	r3, r0, r4
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	1902      	adds	r2, r0, r4
 8003c4a:	19d2      	adds	r2, r2, r7
 8003c4c:	8812      	ldrh	r2, [r2, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1902      	adds	r2, r0, r4
 8003c58:	19d2      	adds	r2, r2, r7
 8003c5a:	8812      	ldrh	r2, [r2, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	e05e      	b.n	8003d1e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003c60:	231a      	movs	r3, #26
 8003c62:	2220      	movs	r2, #32
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e057      	b.n	8003d1e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6e:	231b      	movs	r3, #27
 8003c70:	2220      	movs	r2, #32
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	19db      	adds	r3, r3, r7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d015      	beq.n	8003ca8 <UART_SetConfig+0x5f8>
 8003c7c:	dc18      	bgt.n	8003cb0 <UART_SetConfig+0x600>
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00d      	beq.n	8003c9e <UART_SetConfig+0x5ee>
 8003c82:	dc15      	bgt.n	8003cb0 <UART_SetConfig+0x600>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <UART_SetConfig+0x5de>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0x5e8>
 8003c8c:	e010      	b.n	8003cb0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8e:	f7fe fac3 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003c92:	0003      	movs	r3, r0
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c96:	e014      	b.n	8003cc2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <UART_SetConfig+0x6a4>)
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c9c:	e011      	b.n	8003cc2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe fa2f 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ca6:	e00c      	b.n	8003cc2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cae:	e008      	b.n	8003cc2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cb4:	231a      	movs	r3, #26
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
        break;
 8003cc0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02a      	beq.n	8003d1e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <UART_SetConfig+0x6a8>)
 8003cce:	0052      	lsls	r2, r2, #1
 8003cd0:	5ad3      	ldrh	r3, [r2, r3]
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cd6:	f7fc fa15 	bl	8000104 <__udivsi3>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	001a      	movs	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	18d2      	adds	r2, r2, r3
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	0019      	movs	r1, r3
 8003cec:	0010      	movs	r0, r2
 8003cee:	f7fc fa09 	bl	8000104 <__udivsi3>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d90a      	bls.n	8003d12 <UART_SetConfig+0x662>
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	025b      	lsls	r3, r3, #9
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d205      	bcs.n	8003d12 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e005      	b.n	8003d1e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003d12:	231a      	movs	r3, #26
 8003d14:	2220      	movs	r2, #32
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	226a      	movs	r2, #106	; 0x6a
 8003d22:	2101      	movs	r1, #1
 8003d24:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2268      	movs	r2, #104	; 0x68
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	2200      	movs	r2, #0
 8003d32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	2200      	movs	r2, #0
 8003d38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003d3a:	231a      	movs	r3, #26
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	19db      	adds	r3, r3, r7
 8003d42:	781b      	ldrb	r3, [r3, #0]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b010      	add	sp, #64	; 0x40
 8003d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4c:	40008000 	.word	0x40008000
 8003d50:	40008400 	.word	0x40008400
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	0800459c 	.word	0x0800459c

08003d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	2208      	movs	r2, #8
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <UART_AdvFeatureConfig+0x144>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <UART_AdvFeatureConfig+0x148>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d00b      	beq.n	8003dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a3b      	ldr	r2, [pc, #236]	; (8003ea8 <UART_AdvFeatureConfig+0x14c>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4a34      	ldr	r2, [pc, #208]	; (8003eac <UART_AdvFeatureConfig+0x150>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	2210      	movs	r2, #16
 8003df2:	4013      	ands	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <UART_AdvFeatureConfig+0x154>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	2220      	movs	r2, #32
 8003e14:	4013      	ands	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <UART_AdvFeatureConfig+0x158>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	2240      	movs	r2, #64	; 0x40
 8003e36:	4013      	ands	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <UART_AdvFeatureConfig+0x15c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	035b      	lsls	r3, r3, #13
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10b      	bne.n	8003e76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <UART_AdvFeatureConfig+0x160>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <UART_AdvFeatureConfig+0x164>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	ffff7fff 	.word	0xffff7fff
 8003ea4:	fffdffff 	.word	0xfffdffff
 8003ea8:	fffeffff 	.word	0xfffeffff
 8003eac:	fffbffff 	.word	0xfffbffff
 8003eb0:	ffffefff 	.word	0xffffefff
 8003eb4:	ffffdfff 	.word	0xffffdfff
 8003eb8:	ffefffff 	.word	0xffefffff
 8003ebc:	ff9fffff 	.word	0xff9fffff
 8003ec0:	fff7ffff 	.word	0xfff7ffff

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b092      	sub	sp, #72	; 0x48
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2290      	movs	r2, #144	; 0x90
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ed4:	f7fd f9ca 	bl	800126c <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d12d      	bne.n	8003f46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	0391      	lsls	r1, r2, #14
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4a47      	ldr	r2, [pc, #284]	; (8004010 <UART_CheckIdleState+0x14c>)
 8003ef4:	9200      	str	r2, [sp, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f000 f88e 	bl	8004018 <UART_WaitOnFlagUntilTimeout>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d022      	beq.n	8003f46 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f00:	f3ef 8310 	mrs	r3, PRIMASK
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	438a      	bics	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	f383 8810 	msr	PRIMASK, r3
}
 8003f30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2288      	movs	r2, #136	; 0x88
 8003f36:	2120      	movs	r1, #32
 8003f38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2284      	movs	r2, #132	; 0x84
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e060      	b.n	8004008 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d146      	bne.n	8003fe2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	03d1      	lsls	r1, r2, #15
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <UART_CheckIdleState+0x14c>)
 8003f5e:	9200      	str	r2, [sp, #0]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f000 f859 	bl	8004018 <UART_WaitOnFlagUntilTimeout>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d03b      	beq.n	8003fe2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4922      	ldr	r1, [pc, #136]	; (8004014 <UART_CheckIdleState+0x150>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	228c      	movs	r2, #140	; 0x8c
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2284      	movs	r2, #132	; 0x84
 8003fda:	2100      	movs	r1, #0
 8003fdc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e012      	b.n	8004008 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2288      	movs	r2, #136	; 0x88
 8003fe6:	2120      	movs	r1, #32
 8003fe8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	228c      	movs	r2, #140	; 0x8c
 8003fee:	2120      	movs	r1, #32
 8003ff0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2284      	movs	r2, #132	; 0x84
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b010      	add	sp, #64	; 0x40
 800400e:	bd80      	pop	{r7, pc}
 8004010:	01ffffff 	.word	0x01ffffff
 8004014:	fffffedf 	.word	0xfffffedf

08004018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	1dfb      	adds	r3, r7, #7
 8004026:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	e051      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3301      	adds	r3, #1
 800402e:	d04e      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fd f91c 	bl	800126c <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e051      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2204      	movs	r2, #4
 8004052:	4013      	ands	r3, r2
 8004054:	d03b      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d038      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d035      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2208      	movs	r2, #8
 800406a:	4013      	ands	r3, r2
 800406c:	2b08      	cmp	r3, #8
 800406e:	d111      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2208      	movs	r2, #8
 8004076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f83c 	bl	80040f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2290      	movs	r2, #144	; 0x90
 8004084:	2108      	movs	r1, #8
 8004086:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2284      	movs	r2, #132	; 0x84
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e02c      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	401a      	ands	r2, r3
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d112      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f81f 	bl	80040f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2290      	movs	r2, #144	; 0x90
 80040be:	2120      	movs	r1, #32
 80040c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2284      	movs	r2, #132	; 0x84
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	425a      	negs	r2, r3
 80040de:	4153      	adcs	r3, r2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	001a      	movs	r2, r3
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d09e      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004100:	f3ef 8310 	mrs	r3, PRIMASK
 8004104:	617b      	str	r3, [r7, #20]
  return(result);
 8004106:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f383 8810 	msr	PRIMASK, r3
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4926      	ldr	r1, [pc, #152]	; (80041bc <UART_EndRxTransfer+0xc4>)
 8004122:	400a      	ands	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004132:	f3ef 8310 	mrs	r3, PRIMASK
 8004136:	623b      	str	r3, [r7, #32]
  return(result);
 8004138:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
 800413c:	2301      	movs	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	491b      	ldr	r1, [pc, #108]	; (80041c0 <UART_EndRxTransfer+0xc8>)
 8004154:	400a      	ands	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d118      	bne.n	800419e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416c:	f3ef 8310 	mrs	r3, PRIMASK
 8004170:	60bb      	str	r3, [r7, #8]
  return(result);
 8004172:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004176:	2301      	movs	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f383 8810 	msr	PRIMASK, r3
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2110      	movs	r1, #16
 800418e:	438a      	bics	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	228c      	movs	r2, #140	; 0x8c
 80041a2:	2120      	movs	r1, #32
 80041a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b00e      	add	sp, #56	; 0x38
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	fffffedf 	.word	0xfffffedf
 80041c0:	effffffe 	.word	0xeffffffe

080041c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2284      	movs	r2, #132	; 0x84
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_UARTEx_DisableFifoMode+0x16>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e027      	b.n	800422a <HAL_UARTEx_DisableFifoMode+0x66>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2284      	movs	r2, #132	; 0x84
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2288      	movs	r2, #136	; 0x88
 80041e6:	2124      	movs	r1, #36	; 0x24
 80041e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	438a      	bics	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004206:	4013      	ands	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2288      	movs	r2, #136	; 0x88
 800421c:	2120      	movs	r1, #32
 800421e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2284      	movs	r2, #132	; 0x84
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	dfffffff 	.word	0xdfffffff

08004238 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2284      	movs	r2, #132	; 0x84
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e02e      	b.n	80042ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2284      	movs	r2, #132	; 0x84
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2288      	movs	r2, #136	; 0x88
 800425c:	2124      	movs	r1, #36	; 0x24
 800425e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2101      	movs	r1, #1
 8004274:	438a      	bics	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	08d9      	lsrs	r1, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f000 f854 	bl	800433c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2288      	movs	r2, #136	; 0x88
 80042a0:	2120      	movs	r1, #32
 80042a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2284      	movs	r2, #132	; 0x84
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2284      	movs	r2, #132	; 0x84
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e02f      	b.n	8004330 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2284      	movs	r2, #132	; 0x84
 80042d4:	2101      	movs	r1, #1
 80042d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2288      	movs	r2, #136	; 0x88
 80042dc:	2124      	movs	r1, #36	; 0x24
 80042de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2101      	movs	r1, #1
 80042f4:	438a      	bics	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 f813 	bl	800433c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2288      	movs	r2, #136	; 0x88
 8004322:	2120      	movs	r1, #32
 8004324:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2284      	movs	r2, #132	; 0x84
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b004      	add	sp, #16
 8004336:	bd80      	pop	{r7, pc}
 8004338:	f1ffffff 	.word	0xf1ffffff

0800433c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	226a      	movs	r2, #106	; 0x6a
 8004350:	2101      	movs	r1, #1
 8004352:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2268      	movs	r2, #104	; 0x68
 8004358:	2101      	movs	r1, #1
 800435a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800435c:	e043      	b.n	80043e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800435e:	260f      	movs	r6, #15
 8004360:	19bb      	adds	r3, r7, r6
 8004362:	2208      	movs	r2, #8
 8004364:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004366:	200e      	movs	r0, #14
 8004368:	183b      	adds	r3, r7, r0
 800436a:	2208      	movs	r2, #8
 800436c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	0e5b      	lsrs	r3, r3, #25
 8004376:	b2da      	uxtb	r2, r3
 8004378:	240d      	movs	r4, #13
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2107      	movs	r1, #7
 800437e:	400a      	ands	r2, r1
 8004380:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	0f5b      	lsrs	r3, r3, #29
 800438a:	b2da      	uxtb	r2, r3
 800438c:	250c      	movs	r5, #12
 800438e:	197b      	adds	r3, r7, r5
 8004390:	2107      	movs	r1, #7
 8004392:	400a      	ands	r2, r1
 8004394:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004396:	183b      	adds	r3, r7, r0
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	197a      	adds	r2, r7, r5
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	4914      	ldr	r1, [pc, #80]	; (80043f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80043a0:	5c8a      	ldrb	r2, [r1, r2]
 80043a2:	435a      	muls	r2, r3
 80043a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80043a6:	197b      	adds	r3, r7, r5
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ae:	0019      	movs	r1, r3
 80043b0:	f7fb ff32 	bl	8000218 <__divsi3>
 80043b4:	0003      	movs	r3, r0
 80043b6:	b299      	uxth	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	226a      	movs	r2, #106	; 0x6a
 80043bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043be:	19bb      	adds	r3, r7, r6
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	193a      	adds	r2, r7, r4
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80043c8:	5c8a      	ldrb	r2, [r1, r2]
 80043ca:	435a      	muls	r2, r3
 80043cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80043d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043d6:	0019      	movs	r1, r3
 80043d8:	f7fb ff1e 	bl	8000218 <__divsi3>
 80043dc:	0003      	movs	r3, r0
 80043de:	b299      	uxth	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2268      	movs	r2, #104	; 0x68
 80043e4:	5299      	strh	r1, [r3, r2]
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b005      	add	sp, #20
 80043ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	080045b4 	.word	0x080045b4
 80043f4:	080045bc 	.word	0x080045bc

080043f8 <memset>:
 80043f8:	0003      	movs	r3, r0
 80043fa:	1882      	adds	r2, r0, r2
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d100      	bne.n	8004402 <memset+0xa>
 8004400:	4770      	bx	lr
 8004402:	7019      	strb	r1, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	e7f9      	b.n	80043fc <memset+0x4>

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	2600      	movs	r6, #0
 800440c:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x38>)
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	2600      	movs	r6, #0
 800441a:	f000 f883 	bl	8004524 <_init>
 800441e:	4c0a      	ldr	r4, [pc, #40]	; (8004448 <__libc_init_array+0x40>)
 8004420:	4d0a      	ldr	r5, [pc, #40]	; (800444c <__libc_init_array+0x44>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	00b3      	lsls	r3, r6, #2
 800442e:	58eb      	ldr	r3, [r5, r3]
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	00b3      	lsls	r3, r6, #2
 8004438:	58eb      	ldr	r3, [r5, r3]
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	080045cc 	.word	0x080045cc
 8004444:	080045cc 	.word	0x080045cc
 8004448:	080045d4 	.word	0x080045d4
 800444c:	080045cc 	.word	0x080045cc

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <register_fini>:
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <register_fini+0x10>)
 8004456:	b510      	push	{r4, lr}
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <register_fini+0xe>
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <register_fini+0x14>)
 800445e:	f000 f805 	bl	800446c <atexit>
 8004462:	bd10      	pop	{r4, pc}
 8004464:	00000000 	.word	0x00000000
 8004468:	0800447d 	.word	0x0800447d

0800446c <atexit>:
 800446c:	2300      	movs	r3, #0
 800446e:	b510      	push	{r4, lr}
 8004470:	0001      	movs	r1, r0
 8004472:	001a      	movs	r2, r3
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f815 	bl	80044a4 <__register_exitproc>
 800447a:	bd10      	pop	{r4, pc}

0800447c <__libc_fini_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4c07      	ldr	r4, [pc, #28]	; (800449c <__libc_fini_array+0x20>)
 8004480:	4d07      	ldr	r5, [pc, #28]	; (80044a0 <__libc_fini_array+0x24>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	2c00      	cmp	r4, #0
 8004488:	d102      	bne.n	8004490 <__libc_fini_array+0x14>
 800448a:	f000 f851 	bl	8004530 <_fini>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	3c01      	subs	r4, #1
 8004492:	00a3      	lsls	r3, r4, #2
 8004494:	58eb      	ldr	r3, [r5, r3]
 8004496:	4798      	blx	r3
 8004498:	e7f5      	b.n	8004486 <__libc_fini_array+0xa>
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	080045d8 	.word	0x080045d8
 80044a0:	080045d4 	.word	0x080045d4

080044a4 <__register_exitproc>:
 80044a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044a6:	4f1c      	ldr	r7, [pc, #112]	; (8004518 <__register_exitproc+0x74>)
 80044a8:	0004      	movs	r4, r0
 80044aa:	6838      	ldr	r0, [r7, #0]
 80044ac:	0016      	movs	r6, r2
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	9100      	str	r1, [sp, #0]
 80044b2:	f7ff ffcd 	bl	8004450 <__retarget_lock_acquire_recursive>
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <__register_exitproc+0x78>)
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <__register_exitproc+0x1e>
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <__register_exitproc+0x7c>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	6838      	ldr	r0, [r7, #0]
 80044c6:	2a1f      	cmp	r2, #31
 80044c8:	dd04      	ble.n	80044d4 <__register_exitproc+0x30>
 80044ca:	f7ff ffc2 	bl	8004452 <__retarget_lock_release_recursive>
 80044ce:	2001      	movs	r0, #1
 80044d0:	4240      	negs	r0, r0
 80044d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044d4:	2c00      	cmp	r4, #0
 80044d6:	d014      	beq.n	8004502 <__register_exitproc+0x5e>
 80044d8:	0091      	lsls	r1, r2, #2
 80044da:	1859      	adds	r1, r3, r1
 80044dc:	000f      	movs	r7, r1
 80044de:	3788      	adds	r7, #136	; 0x88
 80044e0:	603e      	str	r6, [r7, #0]
 80044e2:	2701      	movs	r7, #1
 80044e4:	001e      	movs	r6, r3
 80044e6:	4097      	lsls	r7, r2
 80044e8:	3685      	adds	r6, #133	; 0x85
 80044ea:	36ff      	adds	r6, #255	; 0xff
 80044ec:	6875      	ldr	r5, [r6, #4]
 80044ee:	31fc      	adds	r1, #252	; 0xfc
 80044f0:	433d      	orrs	r5, r7
 80044f2:	6075      	str	r5, [r6, #4]
 80044f4:	9d01      	ldr	r5, [sp, #4]
 80044f6:	60cd      	str	r5, [r1, #12]
 80044f8:	2c02      	cmp	r4, #2
 80044fa:	d102      	bne.n	8004502 <__register_exitproc+0x5e>
 80044fc:	68b1      	ldr	r1, [r6, #8]
 80044fe:	4339      	orrs	r1, r7
 8004500:	60b1      	str	r1, [r6, #8]
 8004502:	1c51      	adds	r1, r2, #1
 8004504:	6059      	str	r1, [r3, #4]
 8004506:	3202      	adds	r2, #2
 8004508:	9900      	ldr	r1, [sp, #0]
 800450a:	0092      	lsls	r2, r2, #2
 800450c:	50d1      	str	r1, [r2, r3]
 800450e:	f7ff ffa0 	bl	8004452 <__retarget_lock_release_recursive>
 8004512:	2000      	movs	r0, #0
 8004514:	e7dd      	b.n	80044d2 <__register_exitproc+0x2e>
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	2000000c 	.word	0x2000000c
 800451c:	20000360 	.word	0x20000360
 8004520:	20000364 	.word	0x20000364

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
