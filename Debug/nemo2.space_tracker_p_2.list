
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012274  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f94  08012330  08012330  00022330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142c4  080142c4  000306d0  2**0
                  CONTENTS
  4 .ARM          00000008  080142c4  080142c4  000242c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142cc  080142cc  000306d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080142cc  080142cc  000242cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142d4  080142d4  000242d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d0  20000000  080142d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200006d0  080149a8  000306d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  080149a8  00030f08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019800  00000000  00000000  0003073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398d  00000000  00000000  00049f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0004d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ce  00000000  00000000  0004f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217b0  00000000  00000000  0005039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4cf  00000000  00000000  00071b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad43  00000000  00000000  0009001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071b4  00000000  00000000  0015ad60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00161f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d0 	.word	0x200006d0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012318 	.word	0x08012318

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006d4 	.word	0x200006d4
 8000100:	08012318 	.word	0x08012318

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08013d60 	.word	0x08013d60
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 faa1 	bl	8003af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f9af 	bl	8002914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fc41 	bl	8002e3c <MX_GPIO_Init>
  MX_RTC_Init();
 80025ba:	f000 fa01 	bl	80029c0 <MX_RTC_Init>
  MX_TIM6_Init();
 80025be:	f000 fae1 	bl	8002b84 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c2:	f000 faa1 	bl	8002b08 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c6:	f000 fb1b 	bl	8002c00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ca:	f000 fb67 	bl	8002c9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025ce:	f000 fbb3 	bl	8002d38 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d2:	f000 fbff 	bl	8002dd4 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025d6:	4bbf      	ldr	r3, [pc, #764]	; (80028d4 <main+0x32c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fd32 	bl	8003044 <send_debug_logs>

  my_tim_init () ;
 80025e0:	f000 fe84 	bl	80032ec <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 80025e4:	2002      	movs	r0, #2
 80025e6:	f000 fd79 	bl	80030dc <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  while ( !is_system_initialized () )
 80025ea:	e049      	b.n	8002680 <main+0xd8>
  {
	  my_gnss_sw_on () ;
 80025ec:	f000 fda8 	bl	8003140 <my_gnss_sw_on>
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80025f0:	4bb9      	ldr	r3, [pc, #740]	; (80028d8 <main+0x330>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f006 fde4 	bl	80091c0 <my_gnss_acq_coordinates>
	  my_gnss_sw_off () ;
 80025f8:	f000 fdbc 	bl	8003174 <my_gnss_sw_off>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80025fc:	4bb7      	ldr	r3, [pc, #732]	; (80028dc <main+0x334>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f006 ff58 	bl	80094b4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002604:	4ab6      	ldr	r2, [pc, #728]	; (80028e0 <main+0x338>)
 8002606:	49b7      	ldr	r1, [pc, #732]	; (80028e4 <main+0x33c>)
 8002608:	48b7      	ldr	r0, [pc, #732]	; (80028e8 <main+0x340>)
 800260a:	4bb4      	ldr	r3, [pc, #720]	; (80028dc <main+0x334>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	23a6      	movs	r3, #166	; 0xa6
 8002610:	f009 f86a 	bl	800b6e8 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002614:	4bb4      	ldr	r3, [pc, #720]	; (80028e8 <main+0x340>)
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fd14 	bl	8003044 <send_debug_logs>
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 800261c:	23e1      	movs	r3, #225	; 0xe1
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	0018      	movs	r0, r3
 8002622:	f006 ff89 	bl	8009538 <my_rtc_set_alarm>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d02a      	beq.n	8002680 <main+0xd8>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800262a:	4bac      	ldr	r3, [pc, #688]	; (80028dc <main+0x334>)
 800262c:	0018      	movs	r0, r3
 800262e:	f006 ff41 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002632:	4aab      	ldr	r2, [pc, #684]	; (80028e0 <main+0x338>)
 8002634:	49ad      	ldr	r1, [pc, #692]	; (80028ec <main+0x344>)
 8002636:	48ac      	ldr	r0, [pc, #688]	; (80028e8 <main+0x340>)
 8002638:	4ba8      	ldr	r3, [pc, #672]	; (80028dc <main+0x334>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	23ab      	movs	r3, #171	; 0xab
 800263e:	f009 f853 	bl	800b6e8 <sprintf>
		  my_tim_stop () ;
 8002642:	f000 fe6f 	bl	8003324 <my_tim_stop>
		  HAL_SuspendTick () ;
 8002646:	f001 faff 	bl	8003c48 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 800264a:	4ba9      	ldr	r3, [pc, #676]	; (80028f0 <main+0x348>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	2102      	movs	r1, #2
 8002656:	0018      	movs	r0, r3
 8002658:	f001 fea8 	bl	80043ac <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 800265c:	f001 fb02 	bl	8003c64 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002660:	4b9e      	ldr	r3, [pc, #632]	; (80028dc <main+0x334>)
 8002662:	0018      	movs	r0, r3
 8002664:	f006 ff26 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002668:	4a9d      	ldr	r2, [pc, #628]	; (80028e0 <main+0x338>)
 800266a:	499e      	ldr	r1, [pc, #632]	; (80028e4 <main+0x33c>)
 800266c:	489e      	ldr	r0, [pc, #632]	; (80028e8 <main+0x340>)
 800266e:	4b9b      	ldr	r3, [pc, #620]	; (80028dc <main+0x334>)
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	23b2      	movs	r3, #178	; 0xb2
 8002674:	f009 f838 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002678:	4b9b      	ldr	r3, [pc, #620]	; (80028e8 <main+0x340>)
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fce2 	bl	8003044 <send_debug_logs>
  while ( !is_system_initialized () )
 8002680:	f000 fd10 	bl	80030a4 <is_system_initialized>
 8002684:	0003      	movs	r3, r0
 8002686:	001a      	movs	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	4053      	eors	r3, r2
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ac      	bne.n	80025ec <main+0x44>
	  }
  }
  if ( !my_astro_init () )
 8002692:	f006 fcef 	bl	8009074 <my_astro_init>
 8002696:	0003      	movs	r3, r0
 8002698:	001a      	movs	r2, r3
 800269a:	2301      	movs	r3, #1
 800269c:	4053      	eors	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01e      	beq.n	80026e2 <main+0x13a>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026a4:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <main+0x334>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f006 ff04 	bl	80094b4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026ac:	4a8c      	ldr	r2, [pc, #560]	; (80028e0 <main+0x338>)
 80026ae:	4991      	ldr	r1, [pc, #580]	; (80028f4 <main+0x34c>)
 80026b0:	488d      	ldr	r0, [pc, #564]	; (80028e8 <main+0x340>)
 80026b2:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <main+0x334>)
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	23b9      	movs	r3, #185	; 0xb9
 80026b8:	f009 f816 	bl	800b6e8 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80026bc:	4b8a      	ldr	r3, [pc, #552]	; (80028e8 <main+0x340>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fcc0 	bl	8003044 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 80026c4:	f001 fbd5 	bl	8003e72 <HAL_NVIC_SystemReset>
 80026c8:	e081      	b.n	80027ce <main+0x226>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026ca:	4a85      	ldr	r2, [pc, #532]	; (80028e0 <main+0x338>)
 80026cc:	498a      	ldr	r1, [pc, #552]	; (80028f8 <main+0x350>)
 80026ce:	4886      	ldr	r0, [pc, #536]	; (80028e8 <main+0x340>)
 80026d0:	23c1      	movs	r3, #193	; 0xc1
 80026d2:	f009 f809 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026d6:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <main+0x340>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fcb3 	bl	8003044 <send_debug_logs>
		  my_astro_handle_evt () ;
 80026de:	f006 fd29 	bl	8009134 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80026e2:	f000 fdf1 	bl	80032c8 <my_astro_evt_pin>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d1ef      	bne.n	80026ca <main+0x122>
	  }
	  sprintf ( my_astro_payload , "%u,fv=%s" , (uint16_t) fix3d.pdop , fv ) ;
 80026ea:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <main+0x330>)
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0010      	movs	r0, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	f7fd ff24 	bl	8000540 <__aeabi_d2uiz>
 80026f8:	0003      	movs	r3, r0
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	001a      	movs	r2, r3
 80026fe:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <main+0x354>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	497f      	ldr	r1, [pc, #508]	; (8002900 <main+0x358>)
 8002704:	487f      	ldr	r0, [pc, #508]	; (8002904 <main+0x35c>)
 8002706:	f008 ffef 	bl	800b6e8 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload_id,payload,%u %s" , __FILE__ , __LINE__ , my_astro_payload_id , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <main+0x360>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	001c      	movs	r4, r3
 8002710:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <main+0x338>)
 8002712:	497e      	ldr	r1, [pc, #504]	; (800290c <main+0x364>)
 8002714:	4874      	ldr	r0, [pc, #464]	; (80028e8 <main+0x340>)
 8002716:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <main+0x35c>)
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9400      	str	r4, [sp, #0]
 800271c:	23c6      	movs	r3, #198	; 0xc6
 800271e:	f008 ffe3 	bl	800b6e8 <sprintf>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002722:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <main+0x330>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <main+0x330>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f006 fd37 	bl	80091a0 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002732:	4b75      	ldr	r3, [pc, #468]	; (8002908 <main+0x360>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	b291      	uxth	r1, r2
 800273a:	4a73      	ldr	r2, [pc, #460]	; (8002908 <main+0x360>)
 800273c:	8011      	strh	r1, [r2, #0]
 800273e:	4a71      	ldr	r2, [pc, #452]	; (8002904 <main+0x35c>)
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f006 fcce 	bl	80090e4 <my_astro_add_payload_2_queue>
	  send_debug_logs ( dbg_payload ) ;
 8002748:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <main+0x340>)
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fc7a 	bl	8003044 <send_debug_logs>
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 8002750:	23e1      	movs	r3, #225	; 0xe1
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	0018      	movs	r0, r3
 8002756:	f006 feef 	bl	8009538 <my_rtc_set_alarm>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d037      	beq.n	80027ce <main+0x226>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <main+0x334>)
 8002760:	0018      	movs	r0, r3
 8002762:	f006 fea7 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002766:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <main+0x338>)
 8002768:	4960      	ldr	r1, [pc, #384]	; (80028ec <main+0x344>)
 800276a:	485f      	ldr	r0, [pc, #380]	; (80028e8 <main+0x340>)
 800276c:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <main+0x334>)
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	23cd      	movs	r3, #205	; 0xcd
 8002772:	f008 ffb9 	bl	800b6e8 <sprintf>
		  my_tim_stop () ;
 8002776:	f000 fdd5 	bl	8003324 <my_tim_stop>
		  HAL_SuspendTick () ;
 800277a:	f001 fa65 	bl	8003c48 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <main+0x348>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	2102      	movs	r1, #2
 800278a:	0018      	movs	r0, r3
 800278c:	f001 fe0e 	bl	80043ac <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002790:	f001 fa68 	bl	8003c64 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002794:	4b51      	ldr	r3, [pc, #324]	; (80028dc <main+0x334>)
 8002796:	0018      	movs	r0, r3
 8002798:	f006 fe8c 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <main+0x338>)
 800279e:	4951      	ldr	r1, [pc, #324]	; (80028e4 <main+0x33c>)
 80027a0:	4851      	ldr	r0, [pc, #324]	; (80028e8 <main+0x340>)
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <main+0x334>)
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	23d4      	movs	r3, #212	; 0xd4
 80027a8:	f008 ff9e 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <main+0x340>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fc48 	bl	8003044 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027b4:	e00b      	b.n	80027ce <main+0x226>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <main+0x338>)
 80027b8:	494f      	ldr	r1, [pc, #316]	; (80028f8 <main+0x350>)
 80027ba:	484b      	ldr	r0, [pc, #300]	; (80028e8 <main+0x340>)
 80027bc:	23e1      	movs	r3, #225	; 0xe1
 80027be:	f008 ff93 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <main+0x340>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fc3d 	bl	8003044 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027ca:	f006 fcb3 	bl	8009134 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027ce:	f000 fd7b 	bl	80032c8 <my_astro_evt_pin>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d1ef      	bne.n	80027b6 <main+0x20e>
	  }
	  if ( my_rtc_alarm_flag )
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <main+0x348>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d046      	beq.n	800286c <main+0x2c4>
	  {
		  my_rtc_alarm_flag = false ;
 80027de:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <main+0x348>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 80027e4:	f000 fcac 	bl	8003140 <my_gnss_sw_on>
		  my_gnss_acq_coordinates ( &fix3d ) ;
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <main+0x330>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f006 fce8 	bl	80091c0 <my_gnss_acq_coordinates>
		  my_gnss_sw_off () ;
 80027f0:	f000 fcc0 	bl	8003174 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <main+0x334>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f006 fe5c 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80027fc:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <main+0x338>)
 80027fe:	4939      	ldr	r1, [pc, #228]	; (80028e4 <main+0x33c>)
 8002800:	4839      	ldr	r0, [pc, #228]	; (80028e8 <main+0x340>)
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <main+0x334>)
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	23ec      	movs	r3, #236	; 0xec
 8002808:	f008 ff6e 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <main+0x340>)
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fc18 	bl	8003044 <send_debug_logs>
		  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <main+0x330>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <main+0x330>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f006 fcbe 	bl	80091a0 <my_astro_write_coordinates>
		  sprintf ( my_astro_payload , "%u,%ld,%ld" , (uint16_t) fix3d.pdop , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <main+0x330>)
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0010      	movs	r0, r2
 800282c:	0019      	movs	r1, r3
 800282e:	f7fd fe87 	bl	8000540 <__aeabi_d2uiz>
 8002832:	0003      	movs	r3, r0
 8002834:	b29b      	uxth	r3, r3
 8002836:	001c      	movs	r4, r3
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <main+0x330>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <main+0x330>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4933      	ldr	r1, [pc, #204]	; (8002910 <main+0x368>)
 8002842:	4830      	ldr	r0, [pc, #192]	; (8002904 <main+0x35c>)
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0013      	movs	r3, r2
 8002848:	0022      	movs	r2, r4
 800284a:	f008 ff4d 	bl	800b6e8 <sprintf>
		  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <main+0x360>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	b291      	uxth	r1, r2
 8002856:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <main+0x360>)
 8002858:	8011      	strh	r1, [r2, #0]
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <main+0x35c>)
 800285c:	0011      	movs	r1, r2
 800285e:	0018      	movs	r0, r3
 8002860:	f006 fc40 	bl	80090e4 <my_astro_add_payload_2_queue>
		  send_debug_logs ( dbg_payload ) ;
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <main+0x340>)
 8002866:	0018      	movs	r0, r3
 8002868:	f000 fbec 	bl	8003044 <send_debug_logs>
	  }
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 800286c:	23e1      	movs	r3, #225	; 0xe1
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	0018      	movs	r0, r3
 8002872:	f006 fe61 	bl	8009538 <my_rtc_set_alarm>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d0a9      	beq.n	80027ce <main+0x226>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <main+0x334>)
 800287c:	0018      	movs	r0, r3
 800287e:	f006 fe19 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <main+0x338>)
 8002884:	4919      	ldr	r1, [pc, #100]	; (80028ec <main+0x344>)
 8002886:	4818      	ldr	r0, [pc, #96]	; (80028e8 <main+0x340>)
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <main+0x334>)
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	23f6      	movs	r3, #246	; 0xf6
 800288e:	f008 ff2b 	bl	800b6e8 <sprintf>
		  my_tim_stop () ;
 8002892:	f000 fd47 	bl	8003324 <my_tim_stop>
		  HAL_SuspendTick () ;
 8002896:	f001 f9d7 	bl	8003c48 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <main+0x348>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	2102      	movs	r1, #2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f001 fd80 	bl	80043ac <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80028ac:	f001 f9da 	bl	8003c64 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <main+0x334>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f006 fdfe 	bl	80094b4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <main+0x338>)
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <main+0x33c>)
 80028bc:	480a      	ldr	r0, [pc, #40]	; (80028e8 <main+0x340>)
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <main+0x334>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	23fd      	movs	r3, #253	; 0xfd
 80028c4:	f008 ff10 	bl	800b6e8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <main+0x340>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 fbba 	bl	8003044 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 80028d0:	e77d      	b.n	80027ce <main+0x226>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000bd0 	.word	0x20000bd0
 80028dc:	20000b14 	.word	0x20000b14
 80028e0:	08012358 	.word	0x08012358
 80028e4:	0801236c 	.word	0x0801236c
 80028e8:	20000a18 	.word	0x20000a18
 80028ec:	08012378 	.word	0x08012378
 80028f0:	20000be8 	.word	0x20000be8
 80028f4:	080123ac 	.word	0x080123ac
 80028f8:	080123cc 	.word	0x080123cc
 80028fc:	20000004 	.word	0x20000004
 8002900:	080123e4 	.word	0x080123e4
 8002904:	20000b2c 	.word	0x20000b2c
 8002908:	20000b28 	.word	0x20000b28
 800290c:	080123f0 	.word	0x080123f0
 8002910:	08012410 	.word	0x08012410

08002914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b095      	sub	sp, #84	; 0x54
 8002918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291a:	2414      	movs	r4, #20
 800291c:	193b      	adds	r3, r7, r4
 800291e:	0018      	movs	r0, r3
 8002920:	233c      	movs	r3, #60	; 0x3c
 8002922:	001a      	movs	r2, r3
 8002924:	2100      	movs	r1, #0
 8002926:	f008 ff75 	bl	800b814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	0018      	movs	r0, r3
 800292e:	2310      	movs	r3, #16
 8002930:	001a      	movs	r2, r3
 8002932:	2100      	movs	r1, #0
 8002934:	f008 ff6e 	bl	800b814 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	0018      	movs	r0, r3
 800293e:	f001 fd6d 	bl	800441c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002942:	f001 fd25 	bl	8004390 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <SystemClock_Config+0xa8>)
 8002948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <SystemClock_Config+0xa8>)
 800294c:	2118      	movs	r1, #24
 800294e:	438a      	bics	r2, r1
 8002950:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002952:	193b      	adds	r3, r7, r4
 8002954:	2206      	movs	r2, #6
 8002956:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2201      	movs	r2, #1
 800295c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002972:	193b      	adds	r3, r7, r4
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002978:	193b      	adds	r3, r7, r4
 800297a:	0018      	movs	r0, r3
 800297c:	f001 fd9a 	bl	80044b4 <HAL_RCC_OscConfig>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002984:	f000 fd22 	bl	80033cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2207      	movs	r2, #7
 800298c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2100      	movs	r1, #0
 80029a4:	0018      	movs	r0, r3
 80029a6:	f002 f8e5 	bl	8004b74 <HAL_RCC_ClockConfig>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029ae:	f000 fd0d 	bl	80033cc <Error_Handler>
  }
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b015      	add	sp, #84	; 0x54
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000

080029c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b090      	sub	sp, #64	; 0x40
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029c6:	232c      	movs	r3, #44	; 0x2c
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	0018      	movs	r0, r3
 80029cc:	2314      	movs	r3, #20
 80029ce:	001a      	movs	r2, r3
 80029d0:	2100      	movs	r1, #0
 80029d2:	f008 ff1f 	bl	800b814 <memset>
  RTC_DateTypeDef sDate = {0};
 80029d6:	2328      	movs	r3, #40	; 0x28
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80029de:	003b      	movs	r3, r7
 80029e0:	0018      	movs	r0, r3
 80029e2:	2328      	movs	r3, #40	; 0x28
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f008 ff14 	bl	800b814 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029ec:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <MX_RTC_Init+0x140>)
 80029ee:	4a45      	ldr	r2, [pc, #276]	; (8002b04 <MX_RTC_Init+0x144>)
 80029f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <MX_RTC_Init+0x140>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <MX_RTC_Init+0x140>)
 80029fa:	227f      	movs	r2, #127	; 0x7f
 80029fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	05d2      	lsls	r2, r2, #23
 8002a1c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a26:	0018      	movs	r0, r3
 8002a28:	f002 fc8a 	bl	8005340 <HAL_RTC_Init>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002a30:	f000 fccc 	bl	80033cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2200      	movs	r2, #0
 8002a46:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a5a:	1879      	adds	r1, r7, r1
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	0018      	movs	r0, r3
 8002a62:	f002 fd0f 	bl	8005484 <HAL_RTC_SetTime>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d001      	beq.n	8002a6e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002a6a:	f000 fcaf 	bl	80033cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002a6e:	2128      	movs	r1, #40	; 0x28
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2206      	movs	r2, #6
 8002a74:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	2201      	movs	r2, #1
 8002a7a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	2201      	movs	r2, #1
 8002a80:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2200      	movs	r2, #0
 8002a86:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a88:	1879      	adds	r1, r7, r1
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <MX_RTC_Init+0x140>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f002 fdfc 	bl	800568c <HAL_RTC_SetDate>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d001      	beq.n	8002a9c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002a98:	f000 fc98 	bl	80033cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a9c:	003b      	movs	r3, r7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002aa2:	003b      	movs	r3, r7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002aa8:	003b      	movs	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002aae:	003b      	movs	r3, r7
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002aba:	003b      	movs	r3, r7
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ac6:	003b      	movs	r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002acc:	003b      	movs	r3, r7
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002ada:	003b      	movs	r3, r7
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	0052      	lsls	r2, r2, #1
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002ae2:	0039      	movs	r1, r7
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_RTC_Init+0x140>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f002 feaf 	bl	800584c <HAL_RTC_SetAlarm_IT>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002af2:	f000 fc6b 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b010      	add	sp, #64	; 0x40
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	200006ec 	.word	0x200006ec
 8002b04:	40002800 	.word	0x40002800

08002b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <MX_SPI1_Init+0x78>)
 8002b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b14:	2282      	movs	r2, #130	; 0x82
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b22:	22e0      	movs	r2, #224	; 0xe0
 8002b24:	00d2      	lsls	r2, r2, #3
 8002b26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b62:	2208      	movs	r2, #8
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f003 f94f 	bl	8005e0c <HAL_SPI_Init>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b72:	f000 fc2b 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000718 	.word	0x20000718
 8002b80:	40013000 	.word	0x40013000

08002b84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	230c      	movs	r3, #12
 8002b90:	001a      	movs	r2, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	f008 fe3e 	bl	800b814 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <MX_TIM6_Init+0x70>)
 8002b9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <MX_TIM6_Init+0x74>)
 8002ba2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002bac:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <MX_TIM6_Init+0x78>)
 8002bae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f003 f9df 	bl	8005f7c <HAL_TIM_Base_Init>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002bc2:	f000 fc03 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bd2:	1d3a      	adds	r2, r7, #4
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_TIM6_Init+0x6c>)
 8002bd6:	0011      	movs	r1, r2
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f003 fc77 	bl	80064cc <HAL_TIMEx_MasterConfigSynchronization>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002be2:	f000 fbf3 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	2000077c 	.word	0x2000077c
 8002bf4:	40001000 	.word	0x40001000
 8002bf8:	00003e7f 	.word	0x00003e7f
 8002bfc:	000003e7 	.word	0x000003e7

08002c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <MX_USART1_UART_Init+0x98>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c0c:	22e1      	movs	r2, #225	; 0xe1
 8002c0e:	0252      	lsls	r2, r2, #9
 8002c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f003 fccc 	bl	80065e8 <HAL_UART_Init>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d001      	beq.n	8002c58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c54:	f000 fbba 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f004 fca7 	bl	80075b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c66:	f000 fbb1 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f004 fcde 	bl	8007630 <HAL_UARTEx_SetRxFifoThreshold>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c78:	f000 fba8 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <MX_USART1_UART_Init+0x94>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f004 fc5c 	bl	800753c <HAL_UARTEx_DisableFifoMode>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c88:	f000 fba0 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	200007c8 	.word	0x200007c8
 8002c98:	40013800 	.word	0x40013800

08002c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002ca2:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <MX_USART2_UART_Init+0x98>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002ca8:	22e1      	movs	r2, #225	; 0xe1
 8002caa:	0252      	lsls	r2, r2, #9
 8002cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f003 fc7e 	bl	80065e8 <HAL_UART_Init>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002cf0:	f000 fb6c 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f004 fc59 	bl	80075b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d02:	f000 fb63 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f004 fc90 	bl	8007630 <HAL_UARTEx_SetRxFifoThreshold>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d14:	f000 fb5a 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <MX_USART2_UART_Init+0x94>)
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f004 fc0e 	bl	800753c <HAL_UARTEx_DisableFifoMode>
 8002d20:	1e03      	subs	r3, r0, #0
 8002d22:	d001      	beq.n	8002d28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d24:	f000 fb52 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	2000085c 	.word	0x2000085c
 8002d34:	40004400 	.word	0x40004400

08002d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <MX_USART3_UART_Init+0x98>)
 8002d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d44:	2296      	movs	r2, #150	; 0x96
 8002d46:	0192      	lsls	r2, r2, #6
 8002d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d5e:	220c      	movs	r2, #12
 8002d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f003 fc30 	bl	80065e8 <HAL_UART_Init>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d8c:	f000 fb1e 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002d92:	2100      	movs	r1, #0
 8002d94:	0018      	movs	r0, r3
 8002d96:	f004 fc0b 	bl	80075b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002d9e:	f000 fb15 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002da4:	2100      	movs	r1, #0
 8002da6:	0018      	movs	r0, r3
 8002da8:	f004 fc42 	bl	8007630 <HAL_UARTEx_SetRxFifoThreshold>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002db0:	f000 fb0c 	bl	80033cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <MX_USART3_UART_Init+0x94>)
 8002db6:	0018      	movs	r0, r3
 8002db8:	f004 fbc0 	bl	800753c <HAL_UARTEx_DisableFifoMode>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002dc0:	f000 fb04 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	200008f0 	.word	0x200008f0
 8002dd0:	40004800 	.word	0x40004800

08002dd4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <MX_USART5_UART_Init+0x64>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002de0:	2296      	movs	r2, #150	; 0x96
 8002de2:	0192      	lsls	r2, r2, #6
 8002de4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <MX_USART5_UART_Init+0x60>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f003 fbe2 	bl	80065e8 <HAL_UART_Init>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002e28:	f000 fad0 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	20000984 	.word	0x20000984
 8002e38:	40005000 	.word	0x40005000

08002e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b08b      	sub	sp, #44	; 0x2c
 8002e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	2414      	movs	r4, #20
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	0018      	movs	r0, r3
 8002e48:	2314      	movs	r3, #20
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f008 fce1 	bl	800b814 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e56:	4b75      	ldr	r3, [pc, #468]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e58:	2104      	movs	r1, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b70      	ldr	r3, [pc, #448]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	4b6f      	ldr	r3, [pc, #444]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	4b69      	ldr	r3, [pc, #420]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e88:	2102      	movs	r1, #2
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002ea0:	2108      	movs	r1, #8
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <MX_GPIO_Init+0x1f0>)
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	2208      	movs	r2, #8
 8002eac:	4013      	ands	r3, r2
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002eb2:	23a0      	movs	r3, #160	; 0xa0
 8002eb4:	05db      	lsls	r3, r3, #23
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2110      	movs	r1, #16
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f001 fa4b 	bl	8004356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002ec0:	495b      	ldr	r1, [pc, #364]	; (8003030 <MX_GPIO_Init+0x1f4>)
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f001 fa45 	bl	8004356 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	4858      	ldr	r0, [pc, #352]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	f001 fa3e 	bl	8004356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <MX_GPIO_Init+0x1fc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	2103      	movs	r1, #3
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f001 fa38 	bl	8004356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	2288      	movs	r2, #136	; 0x88
 8002ef0:	0352      	lsls	r2, r2, #13
 8002ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002efa:	193a      	adds	r2, r7, r4
 8002efc:	23a0      	movs	r3, #160	; 0xa0
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	0011      	movs	r1, r2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 ffc6 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	193a      	adds	r2, r7, r4
 8002f1c:	23a0      	movs	r3, #160	; 0xa0
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 ffb6 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2201      	movs	r2, #1
 8002f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f40:	193a      	adds	r2, r7, r4
 8002f42:	23a0      	movs	r3, #160	; 0xa0
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	0011      	movs	r1, r2
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 ffa3 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <MX_GPIO_Init+0x200>)
 8002f52:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	2201      	movs	r2, #1
 8002f58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	4a32      	ldr	r2, [pc, #200]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	f000 ff91 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002f72:	0021      	movs	r1, r4
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2288      	movs	r2, #136	; 0x88
 8002f7e:	0352      	lsls	r2, r2, #13
 8002f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	187b      	adds	r3, r7, r1
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	000c      	movs	r4, r1
 8002f8a:	187b      	adds	r3, r7, r1
 8002f8c:	4a29      	ldr	r2, [pc, #164]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f000 ff7f 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0192      	lsls	r2, r2, #6
 8002f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002fa0:	000c      	movs	r4, r1
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2211      	movs	r2, #17
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0010      	movs	r0, r2
 8002fbc:	f000 ff6a 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <MX_GPIO_Init+0x204>)
 8002fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	4a17      	ldr	r2, [pc, #92]	; (8003034 <MX_GPIO_Init+0x1f8>)
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f000 ff5b 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <MX_GPIO_Init+0x1fc>)
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f000 ff49 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003002:	0021      	movs	r1, r4
 8003004:	187b      	adds	r3, r7, r1
 8003006:	220c      	movs	r2, #12
 8003008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003016:	187b      	adds	r3, r7, r1
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <MX_GPIO_Init+0x1fc>)
 800301a:	0019      	movs	r1, r3
 800301c:	0010      	movs	r0, r2
 800301e:	f000 ff39 	bl	8003e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b00b      	add	sp, #44	; 0x2c
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	0000a403 	.word	0x0000a403
 8003034:	50000400 	.word	0x50000400
 8003038:	50000c00 	.word	0x50000c00
 800303c:	00008c03 	.word	0x00008c03
 8003040:	00004040 	.word	0x00004040

08003044 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7fd f858 	bl	8000104 <strlen>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2bfa      	cmp	r3, #250	; 0xfa
 800305c:	d908      	bls.n	8003070 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800305e:	23fa      	movs	r3, #250	; 0xfa
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <send_debug_logs+0x54>)
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <send_debug_logs+0x58>)
 8003066:	222a      	movs	r2, #42	; 0x2a
 8003068:	f003 fb54 	bl	8006714 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800306c:	23fa      	movs	r3, #250	; 0xfa
 800306e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	b29a      	uxth	r2, r3
 8003074:	23fa      	movs	r3, #250	; 0xfa
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4808      	ldr	r0, [pc, #32]	; (800309c <send_debug_logs+0x58>)
 800307c:	f003 fb4a 	bl	8006714 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003080:	23fa      	movs	r3, #250	; 0xfa
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4906      	ldr	r1, [pc, #24]	; (80030a0 <send_debug_logs+0x5c>)
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <send_debug_logs+0x58>)
 8003088:	2201      	movs	r2, #1
 800308a:	f003 fb43 	bl	8006714 <HAL_UART_Transmit>
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	0801241c 	.word	0x0801241c
 800309c:	2000085c 	.word	0x2000085c
 80030a0:	08012448 	.word	0x08012448

080030a4 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 80030aa:	1dbc      	adds	r4, r7, #6
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <is_system_initialized+0x34>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f006 fa00 	bl	80094b4 <my_rtc_get_dt_s>
 80030b4:	0003      	movs	r3, r0
 80030b6:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <is_system_initialized+0x34>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7ff ffc2 	bl	8003044 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	8819      	ldrh	r1, [r3, #0]
 80030c4:	23fd      	movs	r3, #253	; 0xfd
 80030c6:	00da      	lsls	r2, r3, #3
 80030c8:	2300      	movs	r3, #0
 80030ca:	4291      	cmp	r1, r2
 80030cc:	415b      	adcs	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b003      	add	sp, #12
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	20000b14 	.word	0x20000b14

080030dc <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	0002      	movs	r2, r0
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10e      	bne.n	800310e <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4811      	ldr	r0, [pc, #68]	; (800313c <my_ant_sw_pos+0x60>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	0019      	movs	r1, r3
 80030fa:	f001 f92c 	bl	8004356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	480e      	ldr	r0, [pc, #56]	; (800313c <my_ant_sw_pos+0x60>)
 8003104:	2201      	movs	r2, #1
 8003106:	0019      	movs	r1, r3
 8003108:	f001 f925 	bl	8004356 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 800310c:	e011      	b.n	8003132 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d10d      	bne.n	8003132 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	4808      	ldr	r0, [pc, #32]	; (800313c <my_ant_sw_pos+0x60>)
 800311c:	2201      	movs	r2, #1
 800311e:	0019      	movs	r1, r3
 8003120:	f001 f919 	bl	8004356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4804      	ldr	r0, [pc, #16]	; (800313c <my_ant_sw_pos+0x60>)
 800312a:	2200      	movs	r2, #0
 800312c:	0019      	movs	r1, r3
 800312e:	f001 f912 	bl	8004356 <HAL_GPIO_WritePin>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	50000400 	.word	0x50000400

08003140 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003144:	2001      	movs	r0, #1
 8003146:	f7ff ffc9 	bl	80030dc <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	4808      	ldr	r0, [pc, #32]	; (8003170 <my_gnss_sw_on+0x30>)
 8003150:	2201      	movs	r2, #1
 8003152:	0019      	movs	r1, r3
 8003154:	f001 f8ff 	bl	8004356 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	019b      	lsls	r3, r3, #6
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <my_gnss_sw_on+0x30>)
 800315e:	2201      	movs	r2, #1
 8003160:	0019      	movs	r1, r3
 8003162:	f001 f8f8 	bl	8004356 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8003166:	f7ff fe35 	bl	8002dd4 <MX_USART5_UART_Init>
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	50000400 	.word	0x50000400

08003174 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003178:	2002      	movs	r0, #2
 800317a:	f7ff ffaf 	bl	80030dc <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	4809      	ldr	r0, [pc, #36]	; (80031a8 <my_gnss_sw_off+0x34>)
 8003184:	2200      	movs	r2, #0
 8003186:	0019      	movs	r1, r3
 8003188:	f001 f8e5 	bl	8004356 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	4805      	ldr	r0, [pc, #20]	; (80031a8 <my_gnss_sw_off+0x34>)
 8003192:	2200      	movs	r2, #0
 8003194:	0019      	movs	r1, r3
 8003196:	f001 f8de 	bl	8004356 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &HUART_GNSS ) ;
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <my_gnss_sw_off+0x38>)
 800319c:	0018      	movs	r0, r3
 800319e:	f003 fa79 	bl	8006694 <HAL_UART_DeInit>

}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	50000400 	.word	0x50000400
 80031ac:	20000984 	.word	0x20000984

080031b0 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	000a      	movs	r2, r1
 80031ba:	1cfb      	adds	r3, r7, #3
 80031bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80031be:	23fa      	movs	r3, #250	; 0xfa
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <my_gnss_receive_byte+0x3c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	f003 fb48 	bl	800685c <HAL_UART_Receive>
	if ( verbose )
 80031cc:	1cfb      	adds	r3, r7, #3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80031d4:	23fa      	movs	r3, #250	; 0xfa
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <my_gnss_receive_byte+0x40>)
 80031dc:	2201      	movs	r2, #1
 80031de:	f003 fa99 	bl	8006714 <HAL_UART_Transmit>
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	20000984 	.word	0x20000984
 80031f0:	2000085c 	.word	0x2000085c

080031f4 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <my_astronode_reset+0x30>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	2102      	movs	r1, #2
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 f8a9 	bl	8004356 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003204:	2001      	movs	r0, #1
 8003206:	f000 fcfb 	bl	8003c00 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <my_astronode_reset+0x30>)
 800320c:	2200      	movs	r2, #0
 800320e:	2102      	movs	r1, #2
 8003210:	0018      	movs	r0, r3
 8003212:	f001 f8a0 	bl	8004356 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003216:	20fa      	movs	r0, #250	; 0xfa
 8003218:	f000 fcf2 	bl	8003c00 <HAL_Delay>
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	50000400 	.word	0x50000400

08003228 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <send_astronode_request+0x34>)
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff ff05 	bl	8003044 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff ff01 	bl	8003044 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	23fa      	movs	r3, #250	; 0xfa
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <send_astronode_request+0x38>)
 800324e:	f003 fa61 	bl	8006714 <HAL_UART_Transmit>
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	08012454 	.word	0x08012454
 8003260:	200008f0 	.word	0x200008f0

08003264 <get_systick>:
uint32_t get_systick ( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003268:	f000 fcc0 	bl	8003bec <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	000a      	movs	r2, r1
 800327e:	1cbb      	adds	r3, r7, #2
 8003280:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003282:	f7ff ffef 	bl	8003264 <get_systick>
 8003286:	0002      	movs	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	1cba      	adds	r2, r7, #2
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	419b      	sbcs	r3, r3
 8003294:	425b      	negs	r3, r3
 8003296:	b2db      	uxtb	r3, r3
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <is_astronode_character_received+0x24>)
 80032ac:	2364      	movs	r3, #100	; 0x64
 80032ae:	2201      	movs	r2, #1
 80032b0:	f003 fad4 	bl	800685c <HAL_UART_Receive>
 80032b4:	0003      	movs	r3, r0
 80032b6:	425a      	negs	r2, r3
 80032b8:	4153      	adcs	r3, r2
 80032ba:	b2db      	uxtb	r3, r3
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200008f0 	.word	0x200008f0

080032c8 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <my_astro_evt_pin+0x20>)
 80032ce:	2104      	movs	r1, #4
 80032d0:	0018      	movs	r0, r3
 80032d2:	f001 f823 	bl	800431c <HAL_GPIO_ReadPin>
 80032d6:	0003      	movs	r3, r0
 80032d8:	3b01      	subs	r3, #1
 80032da:	425a      	negs	r2, r3
 80032dc:	4153      	adcs	r3, r2
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	50000400 	.word	0x50000400

080032ec <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <my_tim_init+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2202      	movs	r2, #2
 80032f6:	4252      	negs	r2, r2
 80032f8:	611a      	str	r2, [r3, #16]
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000077c 	.word	0x2000077c

08003304 <my_tim_start>:

void my_tim_start ()
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <my_tim_start+0x18>)
 800330a:	2200      	movs	r2, #0
 800330c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <my_tim_start+0x1c>)
 8003310:	0018      	movs	r0, r3
 8003312:	f002 fe8b 	bl	800602c <HAL_TIM_Base_Start_IT>
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000bf8 	.word	0x20000bf8
 8003320:	2000077c 	.word	0x2000077c

08003324 <my_tim_stop>:

void my_tim_stop ()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <my_tim_stop+0x14>)
 800332a:	0018      	movs	r0, r3
 800332c:	f002 fee0 	bl	80060f0 <HAL_TIM_Base_Stop_IT>
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	2000077c 	.word	0x2000077c

0800333c <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d11e      	bne.n	800338c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003358:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	2396      	movs	r3, #150	; 0x96
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	429a      	cmp	r2, r3
 8003364:	d912      	bls.n	800338c <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003368:	0018      	movs	r0, r3
 800336a:	f006 f8a3 	bl	80094b4 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800336e:	4c0c      	ldr	r4, [pc, #48]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003372:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003374:	480d      	ldr	r0, [pc, #52]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0023      	movs	r3, r4
 800337c:	f008 f9b4 	bl	800b6e8 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff fe5e 	bl	8003044 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8003388:	f000 fd73 	bl	8003e72 <HAL_NVIC_SystemReset>
		}
	}
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b003      	add	sp, #12
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	40001000 	.word	0x40001000
 8003398:	20000bf8 	.word	0x20000bf8
 800339c:	20000b14 	.word	0x20000b14
 80033a0:	000003a3 	.word	0x000003a3
 80033a4:	08012358 	.word	0x08012358
 80033a8:	080123ac 	.word	0x080123ac
 80033ac:	20000a18 	.word	0x20000a18

080033b0 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RTC_AlarmAEventCallback+0x18>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000be8 	.word	0x20000be8

080033cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d0:	b672      	cpsid	i
}
 80033d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <Error_Handler+0x8>
	...

080033d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_MspInit+0x4c>)
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_MspInit+0x4c>)
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_MspInit+0x4c>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_MspInit+0x4c>)
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	0549      	lsls	r1, r1, #21
 8003400:	430a      	orrs	r2, r1
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <HAL_MspInit+0x4c>)
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	055b      	lsls	r3, r3, #21
 800340c:	4013      	ands	r3, r2
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003412:	23c0      	movs	r3, #192	; 0xc0
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fc32 	bl	8003c80 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b097      	sub	sp, #92	; 0x5c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	240c      	movs	r4, #12
 8003432:	193b      	adds	r3, r7, r4
 8003434:	0018      	movs	r0, r3
 8003436:	234c      	movs	r3, #76	; 0x4c
 8003438:	001a      	movs	r2, r3
 800343a:	2100      	movs	r1, #0
 800343c:	f008 f9ea 	bl	800b814 <memset>
  if(hrtc->Instance==RTC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_RTC_MspInit+0x84>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12c      	bne.n	80034a4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800344a:	193b      	adds	r3, r7, r4
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0292      	lsls	r2, r2, #10
 8003450:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003452:	193b      	adds	r3, r7, r4
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	0052      	lsls	r2, r2, #1
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800345a:	193b      	adds	r3, r7, r4
 800345c:	0018      	movs	r0, r3
 800345e:	f001 fd33 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003466:	f7ff ffb1 	bl	80033cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RTC_MspInit+0x88>)
 800346c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RTC_MspInit+0x88>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	0209      	lsls	r1, r1, #8
 8003474:	430a      	orrs	r2, r1
 8003476:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RTC_MspInit+0x88>)
 800347a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RTC_MspInit+0x88>)
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	00c9      	lsls	r1, r1, #3
 8003482:	430a      	orrs	r2, r1
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RTC_MspInit+0x88>)
 8003488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4013      	ands	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2103      	movs	r1, #3
 8003498:	2002      	movs	r0, #2
 800349a:	f000 fcc5 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800349e:	2002      	movs	r0, #2
 80034a0:	f000 fcd7 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b017      	add	sp, #92	; 0x5c
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40002800 	.word	0x40002800
 80034b0:	40021000 	.word	0x40021000

080034b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b08b      	sub	sp, #44	; 0x2c
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	2414      	movs	r4, #20
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	0018      	movs	r0, r3
 80034c2:	2314      	movs	r3, #20
 80034c4:	001a      	movs	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f008 f9a4 	bl	800b814 <memset>
  if(hspi->Instance==SPI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_SPI_MspInit+0x8c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d130      	bne.n	8003538 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_SPI_MspInit+0x90>)
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_SPI_MspInit+0x90>)
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	0149      	lsls	r1, r1, #5
 80034e0:	430a      	orrs	r2, r1
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_SPI_MspInit+0x90>)
 80034e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_SPI_MspInit+0x90>)
 80034f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_SPI_MspInit+0x90>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_SPI_MspInit+0x90>)
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 800350a:	0021      	movs	r1, r4
 800350c:	187b      	adds	r3, r7, r1
 800350e:	22e0      	movs	r2, #224	; 0xe0
 8003510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2202      	movs	r2, #2
 8003516:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	187b      	adds	r3, r7, r1
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003524:	187b      	adds	r3, r7, r1
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	187a      	adds	r2, r7, r1
 800352c:	23a0      	movs	r3, #160	; 0xa0
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f000 fcae 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b00b      	add	sp, #44	; 0x2c
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	40013000 	.word	0x40013000
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_TIM_Base_MspInit+0x44>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_TIM_Base_MspInit+0x48>)
 800355c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_TIM_Base_MspInit+0x48>)
 8003560:	2110      	movs	r1, #16
 8003562:	430a      	orrs	r2, r1
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_TIM_Base_MspInit+0x48>)
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2210      	movs	r2, #16
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2102      	movs	r1, #2
 8003576:	2011      	movs	r0, #17
 8003578:	f000 fc56 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800357c:	2011      	movs	r0, #17
 800357e:	f000 fc68 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	40001000 	.word	0x40001000
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b0a3      	sub	sp, #140	; 0x8c
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	2374      	movs	r3, #116	; 0x74
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	0018      	movs	r0, r3
 80035a2:	2314      	movs	r3, #20
 80035a4:	001a      	movs	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	f008 f934 	bl	800b814 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ac:	2428      	movs	r4, #40	; 0x28
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	0018      	movs	r0, r3
 80035b2:	234c      	movs	r3, #76	; 0x4c
 80035b4:	001a      	movs	r2, r3
 80035b6:	2100      	movs	r1, #0
 80035b8:	f008 f92c 	bl	800b814 <memset>
  if(huart->Instance==USART1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a84      	ldr	r2, [pc, #528]	; (80037d4 <HAL_UART_MspInit+0x240>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d140      	bne.n	8003648 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	0018      	movs	r0, r3
 80035d6:	f001 fc77 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035de:	f7ff fef5 	bl	80033cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035e2:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <HAL_UART_MspInit+0x244>)
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <HAL_UART_MspInit+0x244>)
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	01c9      	lsls	r1, r1, #7
 80035ec:	430a      	orrs	r2, r1
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
 80035f0:	4b79      	ldr	r3, [pc, #484]	; (80037d8 <HAL_UART_MspInit+0x244>)
 80035f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	01db      	lsls	r3, r3, #7
 80035f8:	4013      	ands	r3, r2
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003604:	2101      	movs	r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	635a      	str	r2, [r3, #52]	; 0x34
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003616:	2174      	movs	r1, #116	; 0x74
 8003618:	187b      	adds	r3, r7, r1
 800361a:	22c0      	movs	r2, #192	; 0xc0
 800361c:	00d2      	lsls	r2, r2, #3
 800361e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	187b      	adds	r3, r7, r1
 8003622:	2202      	movs	r2, #2
 8003624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2201      	movs	r2, #1
 8003636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	187a      	adds	r2, r7, r1
 800363a:	23a0      	movs	r3, #160	; 0xa0
 800363c:	05db      	lsls	r3, r3, #23
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f000 fc27 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003646:	e0c0      	b.n	80037ca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a63      	ldr	r2, [pc, #396]	; (80037dc <HAL_UART_MspInit+0x248>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d140      	bne.n	80036d4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003652:	2128      	movs	r1, #40	; 0x28
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800365a:	187b      	adds	r3, r7, r1
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003660:	187b      	adds	r3, r7, r1
 8003662:	0018      	movs	r0, r3
 8003664:	f001 fc30 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800366c:	f7ff feae 	bl	80033cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	0289      	lsls	r1, r1, #10
 800367a:	430a      	orrs	r2, r1
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
 800367e:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	4013      	ands	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003692:	2101      	movs	r1, #1
 8003694:	430a      	orrs	r2, r1
 8003696:	635a      	str	r2, [r3, #52]	; 0x34
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	2201      	movs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80036a4:	2174      	movs	r1, #116	; 0x74
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	220c      	movs	r2, #12
 80036aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2202      	movs	r2, #2
 80036b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2201      	movs	r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	23a0      	movs	r3, #160	; 0xa0
 80036c8:	05db      	lsls	r3, r3, #23
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 fbe1 	bl	8003e94 <HAL_GPIO_Init>
}
 80036d2:	e07a      	b.n	80037ca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a41      	ldr	r2, [pc, #260]	; (80037e0 <HAL_UART_MspInit+0x24c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d140      	bne.n	8003760 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036de:	2128      	movs	r1, #40	; 0x28
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	2204      	movs	r2, #4
 80036e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	0018      	movs	r0, r3
 80036f0:	f001 fbea 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_MspInit+0x168>
      Error_Handler();
 80036f8:	f7ff fe68 	bl	80033cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_UART_MspInit+0x244>)
 80036fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	02c9      	lsls	r1, r1, #11
 8003706:	430a      	orrs	r2, r1
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800370c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	02db      	lsls	r3, r3, #11
 8003712:	4013      	ands	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800371a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800371e:	2102      	movs	r1, #2
 8003720:	430a      	orrs	r2, r1
 8003722:	635a      	str	r2, [r3, #52]	; 0x34
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	2202      	movs	r2, #2
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003730:	2174      	movs	r1, #116	; 0x74
 8003732:	187b      	adds	r3, r7, r1
 8003734:	22c0      	movs	r2, #192	; 0xc0
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2202      	movs	r2, #2
 800373e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800374c:	187b      	adds	r3, r7, r1
 800374e:	2204      	movs	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	187b      	adds	r3, r7, r1
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_UART_MspInit+0x250>)
 8003756:	0019      	movs	r1, r3
 8003758:	0010      	movs	r0, r2
 800375a:	f000 fb9b 	bl	8003e94 <HAL_GPIO_Init>
}
 800375e:	e034      	b.n	80037ca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <HAL_UART_MspInit+0x254>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12f      	bne.n	80037ca <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800376c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	0049      	lsls	r1, r1, #1
 8003774:	430a      	orrs	r2, r1
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800377a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_UART_MspInit+0x244>)
 800378c:	2102      	movs	r1, #2
 800378e:	430a      	orrs	r2, r1
 8003790:	635a      	str	r2, [r3, #52]	; 0x34
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_UART_MspInit+0x244>)
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800379e:	2174      	movs	r1, #116	; 0x74
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2218      	movs	r2, #24
 80037a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2202      	movs	r2, #2
 80037aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	2203      	movs	r2, #3
 80037bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_UART_MspInit+0x250>)
 80037c2:	0019      	movs	r1, r3
 80037c4:	0010      	movs	r0, r2
 80037c6:	f000 fb65 	bl	8003e94 <HAL_GPIO_Init>
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b023      	add	sp, #140	; 0x8c
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40004800 	.word	0x40004800
 80037e4:	50000400 	.word	0x50000400
 80037e8:	40005000 	.word	0x40005000

080037ec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <HAL_UART_MspDeInit+0xa4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10e      	bne.n	800381c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003804:	4924      	ldr	r1, [pc, #144]	; (8003898 <HAL_UART_MspDeInit+0xac>)
 8003806:	400a      	ands	r2, r1
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 800380a:	23c0      	movs	r3, #192	; 0xc0
 800380c:	00da      	lsls	r2, r3, #3
 800380e:	23a0      	movs	r3, #160	; 0xa0
 8003810:	05db      	lsls	r3, r3, #23
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fca9 	bl	800416c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 800381a:	e034      	b.n	8003886 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1e      	ldr	r2, [pc, #120]	; (800389c <HAL_UART_MspDeInit+0xb0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 800382c:	491c      	ldr	r1, [pc, #112]	; (80038a0 <HAL_UART_MspDeInit+0xb4>)
 800382e:	400a      	ands	r2, r1
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003832:	23a0      	movs	r3, #160	; 0xa0
 8003834:	05db      	lsls	r3, r3, #23
 8003836:	210c      	movs	r1, #12
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fc97 	bl	800416c <HAL_GPIO_DeInit>
}
 800383e:	e022      	b.n	8003886 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_UART_MspDeInit+0xb8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10d      	bne.n	8003866 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 800384c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003850:	4915      	ldr	r1, [pc, #84]	; (80038a8 <HAL_UART_MspDeInit+0xbc>)
 8003852:	400a      	ands	r2, r1
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003856:	23c0      	movs	r3, #192	; 0xc0
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4a14      	ldr	r2, [pc, #80]	; (80038ac <HAL_UART_MspDeInit+0xc0>)
 800385c:	0019      	movs	r1, r3
 800385e:	0010      	movs	r0, r2
 8003860:	f000 fc84 	bl	800416c <HAL_GPIO_DeInit>
}
 8003864:	e00f      	b.n	8003886 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <HAL_UART_MspDeInit+0xc4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10a      	bne.n	8003886 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_UART_MspDeInit+0xa8>)
 8003876:	490f      	ldr	r1, [pc, #60]	; (80038b4 <HAL_UART_MspDeInit+0xc8>)
 8003878:	400a      	ands	r2, r1
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_UART_MspDeInit+0xc0>)
 800387e:	2118      	movs	r1, #24
 8003880:	0018      	movs	r0, r3
 8003882:	f000 fc73 	bl	800416c <HAL_GPIO_DeInit>
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	40013800 	.word	0x40013800
 8003894:	40021000 	.word	0x40021000
 8003898:	ffffbfff 	.word	0xffffbfff
 800389c:	40004400 	.word	0x40004400
 80038a0:	fffdffff 	.word	0xfffdffff
 80038a4:	40004800 	.word	0x40004800
 80038a8:	fffbffff 	.word	0xfffbffff
 80038ac:	50000400 	.word	0x50000400
 80038b0:	40005000 	.word	0x40005000
 80038b4:	fffffeff 	.word	0xfffffeff

080038b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038bc:	e7fe      	b.n	80038bc <NMI_Handler+0x4>

080038be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <HardFault_Handler+0x4>

080038c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038dc:	f000 f974 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <RTC_TAMP_IRQHandler+0x14>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f002 f8ec 	bl	8005acc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	200006ec 	.word	0x200006ec

08003900 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003906:	0018      	movs	r0, r3
 8003908:	f002 fc20 	bl	800614c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	2000077c 	.word	0x2000077c

08003918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  return 1;
 800391c:	2301      	movs	r3, #1
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_kill>:

int _kill(int pid, int sig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392e:	f008 f81d 	bl	800b96c <__errno>
 8003932:	0003      	movs	r3, r0
 8003934:	2216      	movs	r2, #22
 8003936:	601a      	str	r2, [r3, #0]
  return -1;
 8003938:	2301      	movs	r3, #1
 800393a:	425b      	negs	r3, r3
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800394c:	2301      	movs	r3, #1
 800394e:	425a      	negs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0011      	movs	r1, r2
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff ffe5 	bl	8003924 <_kill>
  while (1) {}    /* Make sure we hang here */
 800395a:	e7fe      	b.n	800395a <_exit+0x16>

0800395c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e00a      	b.n	8003984 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800396e:	e000      	b.n	8003972 <_read+0x16>
 8003970:	bf00      	nop
 8003972:	0001      	movs	r1, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	60ba      	str	r2, [r7, #8]
 800397a:	b2ca      	uxtb	r2, r1
 800397c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	dbf0      	blt.n	800396e <_read+0x12>
  }

  return len;
 800398c:	687b      	ldr	r3, [r7, #4]
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bd80      	pop	{r7, pc}

08003996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e009      	b.n	80039bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60ba      	str	r2, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	0018      	movs	r0, r3
 80039b2:	e000      	b.n	80039b6 <_write+0x20>
 80039b4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3301      	adds	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dbf1      	blt.n	80039a8 <_write+0x12>
  }
  return len;
 80039c4:	687b      	ldr	r3, [r7, #4]
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_close>:

int _close(int file)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	425b      	negs	r3, r3
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b002      	add	sp, #8
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	0192      	lsls	r2, r2, #6
 80039f2:	605a      	str	r2, [r3, #4]
  return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_isatty>:

int _isatty(int file)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <_sbrk+0x5c>)
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <_sbrk+0x60>)
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <_sbrk+0x64>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <_sbrk+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a58:	f007 ff88 	bl	800b96c <__errno>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	220c      	movs	r2, #12
 8003a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	425b      	negs	r3, r3
 8003a66:	e009      	b.n	8003a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	18d2      	adds	r2, r2, r3
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <_sbrk+0x64>)
 8003a78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b006      	add	sp, #24
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20024000 	.word	0x20024000
 8003a88:	00000400 	.word	0x00000400
 8003a8c:	20000bec 	.word	0x20000bec
 8003a90:	20000f08 	.word	0x20000f08

08003a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003aa0:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003aa4:	f7ff fff6 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa8:	480c      	ldr	r0, [pc, #48]	; (8003adc <LoopForever+0x6>)
  ldr r1, =_edata
 8003aaa:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <LoopForever+0xe>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab0:	e002      	b.n	8003ab8 <LoopCopyDataInit>

08003ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab6:	3304      	adds	r3, #4

08003ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003abc:	d3f9      	bcc.n	8003ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <LoopForever+0x16>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac4:	e001      	b.n	8003aca <LoopFillZerobss>

08003ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac8:	3204      	adds	r2, #4

08003aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003acc:	d3fb      	bcc.n	8003ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ace:	f007 ff53 	bl	800b978 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003ad2:	f7fe fd69 	bl	80025a8 <main>

08003ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8003ad6:	e7fe      	b.n	8003ad6 <LoopForever>
  ldr   r0, =_estack
 8003ad8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae0:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 8003ae4:	080142d8 	.word	0x080142d8
  ldr r2, =_sbss
 8003ae8:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8003aec:	20000f08 	.word	0x20000f08

08003af0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003af0:	e7fe      	b.n	8003af0 <ADC1_COMP_IRQHandler>
	...

08003af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_Init+0x3c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_Init+0x3c>)
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	0049      	lsls	r1, r1, #1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b0e:	2003      	movs	r0, #3
 8003b10:	f000 f810 	bl	8003b34 <HAL_InitTick>
 8003b14:	1e03      	subs	r3, r0, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e001      	b.n	8003b24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003b20:	f7ff fc5a 	bl	80033d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	781b      	ldrb	r3, [r3, #0]
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40022000 	.word	0x40022000

08003b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_InitTick+0x88>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02b      	beq.n	8003ba4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_InitTick+0x8c>)
 8003b4e:	681c      	ldr	r4, [r3, #0]
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_InitTick+0x88>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	0019      	movs	r1, r3
 8003b56:	23fa      	movs	r3, #250	; 0xfa
 8003b58:	0098      	lsls	r0, r3, #2
 8003b5a:	f7fc faef 	bl	800013c <__udivsi3>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	0019      	movs	r1, r3
 8003b62:	0020      	movs	r0, r4
 8003b64:	f7fc faea 	bl	800013c <__udivsi3>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f985 	bl	8003e7a <HAL_SYSTICK_Config>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d112      	bne.n	8003b9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d80a      	bhi.n	8003b90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	425b      	negs	r3, r3
 8003b80:	2200      	movs	r2, #0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f950 	bl	8003e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_InitTick+0x90>)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e00d      	b.n	8003bac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b90:	230f      	movs	r3, #15
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e008      	b.n	8003bac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e003      	b.n	8003bac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003bac:	230f      	movs	r3, #15
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	781b      	ldrb	r3, [r3, #0]
}
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b005      	add	sp, #20
 8003bb8:	bd90      	pop	{r4, r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000010 	.word	0x20000010
 8003bc0:	20000008 	.word	0x20000008
 8003bc4:	2000000c 	.word	0x2000000c

08003bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_IncTick+0x1c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	001a      	movs	r2, r3
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_IncTick+0x20>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	18d2      	adds	r2, r2, r3
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_IncTick+0x20>)
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	20000010 	.word	0x20000010
 8003be8:	20000bf0 	.word	0x20000bf0

08003bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf0:	4b02      	ldr	r3, [pc, #8]	; (8003bfc <HAL_GetTick+0x10>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	20000bf0 	.word	0x20000bf0

08003c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff fff0 	bl	8003bec <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	d005      	beq.n	8003c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_Delay+0x44>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	001a      	movs	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	f7ff ffe0 	bl	8003bec <HAL_GetTick>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d8f7      	bhi.n	8003c28 <HAL_Delay+0x28>
  {
  }
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000010 	.word	0x20000010

08003c48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_SuspendTick+0x18>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_SuspendTick+0x18>)
 8003c52:	2102      	movs	r1, #2
 8003c54:	438a      	bics	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	e000e010 	.word	0xe000e010

08003c64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_ResumeTick+0x18>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_ResumeTick+0x18>)
 8003c6e:	2102      	movs	r1, #2
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b002      	add	sp, #8
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	fffff9ff 	.word	0xfffff9ff

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	1dfb      	adds	r3, r7, #7
 8003cb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cbe:	d809      	bhi.n	8003cd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc0:	1dfb      	adds	r3, r7, #7
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	231f      	movs	r3, #31
 8003cc8:	401a      	ands	r2, r3
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <__NVIC_EnableIRQ+0x30>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4091      	lsls	r1, r2
 8003cd0:	000a      	movs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cee:	1dfb      	adds	r3, r7, #7
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf4:	d828      	bhi.n	8003d48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <__NVIC_SetPriority+0xd4>)
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	33c0      	adds	r3, #192	; 0xc0
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	589b      	ldr	r3, [r3, r2]
 8003d06:	1dfa      	adds	r2, r7, #7
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	400a      	ands	r2, r1
 8003d10:	00d2      	lsls	r2, r2, #3
 8003d12:	21ff      	movs	r1, #255	; 0xff
 8003d14:	4091      	lsls	r1, r2
 8003d16:	000a      	movs	r2, r1
 8003d18:	43d2      	mvns	r2, r2
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	019b      	lsls	r3, r3, #6
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	401a      	ands	r2, r3
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	4003      	ands	r3, r0
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d34:	481f      	ldr	r0, [pc, #124]	; (8003db4 <__NVIC_SetPriority+0xd4>)
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	33c0      	adds	r3, #192	; 0xc0
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d46:	e031      	b.n	8003dac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <__NVIC_SetPriority+0xd8>)
 8003d4a:	1dfb      	adds	r3, r7, #7
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	0019      	movs	r1, r3
 8003d50:	230f      	movs	r3, #15
 8003d52:	400b      	ands	r3, r1
 8003d54:	3b08      	subs	r3, #8
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3306      	adds	r3, #6
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	3304      	adds	r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	1dfa      	adds	r2, r7, #7
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	0011      	movs	r1, r2
 8003d68:	2203      	movs	r2, #3
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	00d2      	lsls	r2, r2, #3
 8003d6e:	21ff      	movs	r1, #255	; 0xff
 8003d70:	4091      	lsls	r1, r2
 8003d72:	000a      	movs	r2, r1
 8003d74:	43d2      	mvns	r2, r2
 8003d76:	401a      	ands	r2, r3
 8003d78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	401a      	ands	r2, r3
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	0018      	movs	r0, r3
 8003d88:	2303      	movs	r3, #3
 8003d8a:	4003      	ands	r3, r0
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d90:	4809      	ldr	r0, [pc, #36]	; (8003db8 <__NVIC_SetPriority+0xd8>)
 8003d92:	1dfb      	adds	r3, r7, #7
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	001c      	movs	r4, r3
 8003d98:	230f      	movs	r3, #15
 8003d9a:	4023      	ands	r3, r4
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	430a      	orrs	r2, r1
 8003da2:	3306      	adds	r3, #6
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	18c3      	adds	r3, r0, r3
 8003da8:	3304      	adds	r3, #4
 8003daa:	601a      	str	r2, [r3, #0]
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b003      	add	sp, #12
 8003db2:	bd90      	pop	{r4, r7, pc}
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003dc0:	f3bf 8f4f 	dsb	sy
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_SystemReset+0x1c>)
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <__NVIC_SystemReset+0x20>)
 8003dca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dcc:	f3bf 8f4f 	dsb	sy
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	e7fd      	b.n	8003dd2 <__NVIC_SystemReset+0x16>
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	e000ed00 	.word	0xe000ed00
 8003ddc:	05fa0004 	.word	0x05fa0004

08003de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	045b      	lsls	r3, r3, #17
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d301      	bcc.n	8003df8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df4:	2301      	movs	r3, #1
 8003df6:	e010      	b.n	8003e1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <SysTick_Config+0x44>)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e00:	2301      	movs	r3, #1
 8003e02:	425b      	negs	r3, r3
 8003e04:	2103      	movs	r1, #3
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff ff6a 	bl	8003ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SysTick_Config+0x44>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <SysTick_Config+0x44>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	210f      	movs	r1, #15
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	1c02      	adds	r2, r0, #0
 8003e38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ff4b 	bl	8003ce0 <__NVIC_SetPriority>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b004      	add	sp, #16
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	0002      	movs	r2, r0
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff ff21 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003e76:	f7ff ffa1 	bl	8003dbc <__NVIC_SystemReset>

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff ffab 	bl	8003de0 <SysTick_Config>
 8003e8a:	0003      	movs	r3, r0
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	e14d      	b.n	8004140 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4091      	lsls	r1, r2
 8003eae:	000a      	movs	r2, r1
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d100      	bne.n	8003ebc <HAL_GPIO_Init+0x28>
 8003eba:	e13e      	b.n	800413a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x40>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d130      	bne.n	8003f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	0013      	movs	r3, r2
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	0013      	movs	r3, r2
 8003f12:	43da      	mvns	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	2201      	movs	r2, #1
 8003f22:	401a      	ands	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	409a      	lsls	r2, r3
 8003f28:	0013      	movs	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d017      	beq.n	8003f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	0013      	movs	r3, r2
 8003f52:	43da      	mvns	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2203      	movs	r2, #3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d123      	bne.n	8003fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	58d3      	ldr	r3, [r2, r3]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2207      	movs	r2, #7
 8003f90:	4013      	ands	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2107      	movs	r1, #7
 8003faa:	400b      	ands	r3, r1
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	0092      	lsls	r2, r2, #2
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	0013      	movs	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	23c0      	movs	r3, #192	; 0xc0
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	4013      	ands	r3, r2
 8004004:	d100      	bne.n	8004008 <HAL_GPIO_Init+0x174>
 8004006:	e098      	b.n	800413a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004008:	4a53      	ldr	r2, [pc, #332]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	3318      	adds	r3, #24
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	589b      	ldr	r3, [r3, r2]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2203      	movs	r2, #3
 800401a:	4013      	ands	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	220f      	movs	r2, #15
 8004020:	409a      	lsls	r2, r3
 8004022:	0013      	movs	r3, r2
 8004024:	43da      	mvns	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	23a0      	movs	r3, #160	; 0xa0
 8004030:	05db      	lsls	r3, r3, #23
 8004032:	429a      	cmp	r2, r3
 8004034:	d019      	beq.n	800406a <HAL_GPIO_Init+0x1d6>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a48      	ldr	r2, [pc, #288]	; (800415c <HAL_GPIO_Init+0x2c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_GPIO_Init+0x1d2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a47      	ldr	r2, [pc, #284]	; (8004160 <HAL_GPIO_Init+0x2cc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_GPIO_Init+0x1ce>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_GPIO_Init+0x2d0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <HAL_GPIO_Init+0x1ca>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a45      	ldr	r2, [pc, #276]	; (8004168 <HAL_GPIO_Init+0x2d4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_GPIO_Init+0x1c6>
 8004056:	2304      	movs	r3, #4
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x1d8>
 800405a:	2305      	movs	r3, #5
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x1d8>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x1d8>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x1d8>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x1d8>
 800406a:	2300      	movs	r3, #0
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	2103      	movs	r1, #3
 8004070:	400a      	ands	r2, r1
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4093      	lsls	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800407c:	4936      	ldr	r1, [pc, #216]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3318      	adds	r3, #24
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43da      	mvns	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	035b      	lsls	r3, r3, #13
 80040a2:	4013      	ands	r3, r2
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43da      	mvns	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	039b      	lsls	r3, r3, #14
 80040cc:	4013      	ands	r3, r2
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 80040e0:	2384      	movs	r3, #132	; 0x84
 80040e2:	58d3      	ldr	r3, [r2, r3]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	4013      	ands	r3, r2
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 8004106:	2284      	movs	r2, #132	; 0x84
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	58d3      	ldr	r3, [r2, r3]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43da      	mvns	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	025b      	lsls	r3, r3, #9
 8004126:	4013      	ands	r3, r2
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004132:	4909      	ldr	r1, [pc, #36]	; (8004158 <HAL_GPIO_Init+0x2c4>)
 8004134:	2280      	movs	r2, #128	; 0x80
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3301      	adds	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	40da      	lsrs	r2, r3
 8004148:	1e13      	subs	r3, r2, #0
 800414a:	d000      	beq.n	800414e <HAL_GPIO_Init+0x2ba>
 800414c:	e6aa      	b.n	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021800 	.word	0x40021800
 800415c:	50000400 	.word	0x50000400
 8004160:	50000800 	.word	0x50000800
 8004164:	50000c00 	.word	0x50000c00
 8004168:	50001000 	.word	0x50001000

0800416c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800417a:	e0ba      	b.n	80042f2 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800417c:	2201      	movs	r2, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	409a      	lsls	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d100      	bne.n	8004190 <HAL_GPIO_DeInit+0x24>
 800418e:	e0ad      	b.n	80042ec <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004190:	4a5d      	ldr	r2, [pc, #372]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3318      	adds	r3, #24
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	589b      	ldr	r3, [r3, r2]
 800419c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	220f      	movs	r2, #15
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	23a0      	movs	r3, #160	; 0xa0
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d019      	beq.n	80041ee <HAL_GPIO_DeInit+0x82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a53      	ldr	r2, [pc, #332]	; (800430c <HAL_GPIO_DeInit+0x1a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_DeInit+0x7e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a52      	ldr	r2, [pc, #328]	; (8004310 <HAL_GPIO_DeInit+0x1a4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_GPIO_DeInit+0x7a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a51      	ldr	r2, [pc, #324]	; (8004314 <HAL_GPIO_DeInit+0x1a8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_GPIO_DeInit+0x76>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a50      	ldr	r2, [pc, #320]	; (8004318 <HAL_GPIO_DeInit+0x1ac>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_GPIO_DeInit+0x72>
 80041da:	2304      	movs	r3, #4
 80041dc:	e008      	b.n	80041f0 <HAL_GPIO_DeInit+0x84>
 80041de:	2305      	movs	r3, #5
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_DeInit+0x84>
 80041e2:	2303      	movs	r3, #3
 80041e4:	e004      	b.n	80041f0 <HAL_GPIO_DeInit+0x84>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_DeInit+0x84>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_GPIO_DeInit+0x84>
 80041ee:	2300      	movs	r3, #0
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	2103      	movs	r1, #3
 80041f4:	400a      	ands	r2, r1
 80041f6:	00d2      	lsls	r2, r2, #3
 80041f8:	4093      	lsls	r3, r2
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d136      	bne.n	800426e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004200:	4a41      	ldr	r2, [pc, #260]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	58d3      	ldr	r3, [r2, r3]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	43d2      	mvns	r2, r2
 800420a:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 800420c:	4013      	ands	r3, r2
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004212:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004214:	2384      	movs	r3, #132	; 0x84
 8004216:	58d3      	ldr	r3, [r2, r3]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	43d2      	mvns	r2, r2
 800421c:	493a      	ldr	r1, [pc, #232]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 800421e:	4013      	ands	r3, r2
 8004220:	2284      	movs	r2, #132	; 0x84
 8004222:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004224:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43d9      	mvns	r1, r3
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 800422e:	400a      	ands	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43d9      	mvns	r1, r3
 800423a:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2203      	movs	r2, #3
 8004244:	4013      	ands	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	220f      	movs	r2, #15
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004250:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	3318      	adds	r3, #24
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	589a      	ldr	r2, [r3, r2]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43d9      	mvns	r1, r3
 8004260:	4829      	ldr	r0, [pc, #164]	; (8004308 <HAL_GPIO_DeInit+0x19c>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	400a      	ands	r2, r1
 8004268:	3318      	adds	r3, #24
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	2103      	movs	r1, #3
 8004278:	4099      	lsls	r1, r3
 800427a:	000b      	movs	r3, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	58d3      	ldr	r3, [r2, r3]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	2107      	movs	r1, #7
 8004292:	400a      	ands	r2, r1
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	210f      	movs	r1, #15
 8004298:	4091      	lsls	r1, r2
 800429a:	000a      	movs	r2, r1
 800429c:	43d1      	mvns	r1, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	08d2      	lsrs	r2, r2, #3
 80042a2:	4019      	ands	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	0052      	lsls	r2, r2, #1
 80042b4:	2103      	movs	r1, #3
 80042b6:	4091      	lsls	r1, r2
 80042b8:	000a      	movs	r2, r1
 80042ba:	43d2      	mvns	r2, r2
 80042bc:	401a      	ands	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2101      	movs	r1, #1
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4091      	lsls	r1, r2
 80042cc:	000a      	movs	r2, r1
 80042ce:	43d2      	mvns	r2, r2
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	0052      	lsls	r2, r2, #1
 80042de:	2103      	movs	r1, #3
 80042e0:	4091      	lsls	r1, r2
 80042e2:	000a      	movs	r2, r1
 80042e4:	43d2      	mvns	r2, r2
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
    }

    position++;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3301      	adds	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	40da      	lsrs	r2, r3
 80042f8:	1e13      	subs	r3, r2, #0
 80042fa:	d000      	beq.n	80042fe <HAL_GPIO_DeInit+0x192>
 80042fc:	e73e      	b.n	800417c <HAL_GPIO_DeInit+0x10>
  }
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b006      	add	sp, #24
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021800 	.word	0x40021800
 800430c:	50000400 	.word	0x50000400
 8004310:	50000800 	.word	0x50000800
 8004314:	50000c00 	.word	0x50000c00
 8004318:	50001000 	.word	0x50001000

0800431c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	000a      	movs	r2, r1
 8004326:	1cbb      	adds	r3, r7, #2
 8004328:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	1cba      	adds	r2, r7, #2
 8004330:	8812      	ldrh	r2, [r2, #0]
 8004332:	4013      	ands	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004336:	230f      	movs	r3, #15
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e003      	b.n	8004348 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004340:	230f      	movs	r3, #15
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	0008      	movs	r0, r1
 8004360:	0011      	movs	r1, r2
 8004362:	1cbb      	adds	r3, r7, #2
 8004364:	1c02      	adds	r2, r0, #0
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	1c7b      	adds	r3, r7, #1
 800436a:	1c0a      	adds	r2, r1, #0
 800436c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800436e:	1c7b      	adds	r3, r7, #1
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004376:	1cbb      	adds	r3, r7, #2
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800437e:	e003      	b.n	8004388 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004380:	1cbb      	adds	r3, r7, #2
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	0049      	lsls	r1, r1, #1
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40007000 	.word	0x40007000

080043ac <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	000a      	movs	r2, r1
 80043b6:	1cfb      	adds	r3, r7, #3
 80043b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_PWR_EnterSTOPMode+0x68>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2207      	movs	r2, #7
 80043c6:	4393      	bics	r3, r2
 80043c8:	001a      	movs	r2, r3
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_PWR_EnterSTOPMode+0x68>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e005      	b.n	80043e0 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_PWR_EnterSTOPMode+0x68>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_PWR_EnterSTOPMode+0x68>)
 80043da:	2107      	movs	r1, #7
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043e6:	2104      	movs	r1, #4
 80043e8:	430a      	orrs	r2, r1
 80043ea:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80043ec:	1cfb      	adds	r3, r7, #3
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80043f4:	bf30      	wfi
 80043f6:	e002      	b.n	80043fe <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80043f8:	bf40      	sev
    __WFE();
 80043fa:	bf20      	wfe
    __WFE();
 80043fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004404:	2104      	movs	r1, #4
 8004406:	438a      	bics	r2, r1
 8004408:	611a      	str	r2, [r3, #16]
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40007000 	.word	0x40007000
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800442a:	4013      	ands	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d11f      	bne.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	0013      	movs	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	189b      	adds	r3, r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4912      	ldr	r1, [pc, #72]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800444e:	0018      	movs	r0, r3
 8004450:	f7fb fe74 	bl	800013c <__udivsi3>
 8004454:	0003      	movs	r3, r0
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800445a:	e008      	b.n	800446e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b01      	subs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e001      	b.n	800446e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e009      	b.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	401a      	ands	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	429a      	cmp	r2, r3
 800447e:	d0ed      	beq.n	800445c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	40007000 	.word	0x40007000
 8004490:	fffff9ff 	.word	0xfffff9ff
 8004494:	20000008 	.word	0x20000008
 8004498:	000f4240 	.word	0x000f4240

0800449c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	23e0      	movs	r3, #224	; 0xe0
 80044a6:	01db      	lsls	r3, r3, #7
 80044a8:	4013      	ands	r3, r2
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f000 fb50 	bl	8004b68 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d100      	bne.n	80044d4 <HAL_RCC_OscConfig+0x20>
 80044d2:	e07c      	b.n	80045ce <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d4:	4bc3      	ldr	r3, [pc, #780]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2238      	movs	r2, #56	; 0x38
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044de:	4bc1      	ldr	r3, [pc, #772]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2203      	movs	r2, #3
 80044e4:	4013      	ands	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d102      	bne.n	80044f4 <HAL_RCC_OscConfig+0x40>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d002      	beq.n	80044fa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10b      	bne.n	8004512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fa:	4bba      	ldr	r3, [pc, #744]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	4013      	ands	r3, r2
 8004504:	d062      	beq.n	80045cc <HAL_RCC_OscConfig+0x118>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d15e      	bne.n	80045cc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e32a      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	429a      	cmp	r2, r3
 800451c:	d107      	bne.n	800452e <HAL_RCC_OscConfig+0x7a>
 800451e:	4bb1      	ldr	r3, [pc, #708]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4bb0      	ldr	r3, [pc, #704]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0249      	lsls	r1, r1, #9
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e020      	b.n	8004570 <HAL_RCC_OscConfig+0xbc>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	23a0      	movs	r3, #160	; 0xa0
 8004534:	02db      	lsls	r3, r3, #11
 8004536:	429a      	cmp	r2, r3
 8004538:	d10e      	bne.n	8004558 <HAL_RCC_OscConfig+0xa4>
 800453a:	4baa      	ldr	r3, [pc, #680]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4ba9      	ldr	r3, [pc, #676]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	02c9      	lsls	r1, r1, #11
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	4ba6      	ldr	r3, [pc, #664]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4ba5      	ldr	r3, [pc, #660]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	0249      	lsls	r1, r1, #9
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xbc>
 8004558:	4ba2      	ldr	r3, [pc, #648]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4ba1      	ldr	r3, [pc, #644]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800455e:	49a2      	ldr	r1, [pc, #648]	; (80047e8 <HAL_RCC_OscConfig+0x334>)
 8004560:	400a      	ands	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	4b9f      	ldr	r3, [pc, #636]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b9e      	ldr	r3, [pc, #632]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800456a:	49a0      	ldr	r1, [pc, #640]	; (80047ec <HAL_RCC_OscConfig+0x338>)
 800456c:	400a      	ands	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7ff fb38 	bl	8003bec <HAL_GetTick>
 800457c:	0003      	movs	r3, r0
 800457e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004582:	f7ff fb33 	bl	8003bec <HAL_GetTick>
 8004586:	0002      	movs	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e2e9      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004594:	4b93      	ldr	r3, [pc, #588]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	4013      	ands	r3, r2
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0xce>
 80045a0:	e015      	b.n	80045ce <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7ff fb23 	bl	8003bec <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7ff fb1e 	bl	8003bec <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e2d4      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045be:	4b89      	ldr	r3, [pc, #548]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4013      	ands	r3, r2
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0xf8>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2202      	movs	r2, #2
 80045d4:	4013      	ands	r3, r2
 80045d6:	d100      	bne.n	80045da <HAL_RCC_OscConfig+0x126>
 80045d8:	e099      	b.n	800470e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2238      	movs	r2, #56	; 0x38
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e4:	4b7f      	ldr	r3, [pc, #508]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2203      	movs	r2, #3
 80045ea:	4013      	ands	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d102      	bne.n	80045fa <HAL_RCC_OscConfig+0x146>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d135      	bne.n	800466c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	4b78      	ldr	r3, [pc, #480]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4013      	ands	r3, r2
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x164>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e2a7      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a74      	ldr	r2, [pc, #464]	; (80047f0 <HAL_RCC_OscConfig+0x33c>)
 800461e:	4013      	ands	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	4b6e      	ldr	r3, [pc, #440]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d112      	bne.n	800465a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004634:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a6e      	ldr	r2, [pc, #440]	; (80047f4 <HAL_RCC_OscConfig+0x340>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0adb      	lsrs	r3, r3, #11
 800464e:	2207      	movs	r2, #7
 8004650:	4013      	ands	r3, r2
 8004652:	4a69      	ldr	r2, [pc, #420]	; (80047f8 <HAL_RCC_OscConfig+0x344>)
 8004654:	40da      	lsrs	r2, r3
 8004656:	4b69      	ldr	r3, [pc, #420]	; (80047fc <HAL_RCC_OscConfig+0x348>)
 8004658:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800465a:	4b69      	ldr	r3, [pc, #420]	; (8004800 <HAL_RCC_OscConfig+0x34c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0018      	movs	r0, r3
 8004660:	f7ff fa68 	bl	8003b34 <HAL_InitTick>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d051      	beq.n	800470c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e27d      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d030      	beq.n	80046d6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004674:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_RCC_OscConfig+0x340>)
 800467a:	4013      	ands	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	4b58      	ldr	r3, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004688:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	0049      	lsls	r1, r1, #1
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7ff faa9 	bl	8003bec <HAL_GetTick>
 800469a:	0003      	movs	r3, r0
 800469c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a0:	f7ff faa4 	bl	8003bec <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e25a      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b2:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4013      	ands	r3, r2
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_RCC_OscConfig+0x33c>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	0019      	movs	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	021a      	lsls	r2, r3, #8
 80046ce:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	e01b      	b.n	800470e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046dc:	4949      	ldr	r1, [pc, #292]	; (8004804 <HAL_RCC_OscConfig+0x350>)
 80046de:	400a      	ands	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7ff fa83 	bl	8003bec <HAL_GetTick>
 80046e6:	0003      	movs	r3, r0
 80046e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ec:	f7ff fa7e 	bl	8003bec <HAL_GetTick>
 80046f0:	0002      	movs	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e234      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4013      	ands	r3, r2
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x238>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800470c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2208      	movs	r2, #8
 8004714:	4013      	ands	r3, r2
 8004716:	d047      	beq.n	80047a8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2238      	movs	r2, #56	; 0x38
 800471e:	4013      	ands	r3, r2
 8004720:	2b18      	cmp	r3, #24
 8004722:	d10a      	bne.n	800473a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004724:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d03c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x2f4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d138      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e216      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004742:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004748:	2101      	movs	r1, #1
 800474a:	430a      	orrs	r2, r1
 800474c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7ff fa4d 	bl	8003bec <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7ff fa48 	bl	8003bec <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1fe      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476a:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	2202      	movs	r2, #2
 8004770:	4013      	ands	r3, r2
 8004772:	d0f1      	beq.n	8004758 <HAL_RCC_OscConfig+0x2a4>
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 800477c:	2101      	movs	r1, #1
 800477e:	438a      	bics	r2, r1
 8004780:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7ff fa33 	bl	8003bec <HAL_GetTick>
 8004786:	0003      	movs	r3, r0
 8004788:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7ff fa2e 	bl	8003bec <HAL_GetTick>
 8004790:	0002      	movs	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1e4      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	2202      	movs	r2, #2
 80047a4:	4013      	ands	r3, r2
 80047a6:	d1f1      	bne.n	800478c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2204      	movs	r2, #4
 80047ae:	4013      	ands	r3, r2
 80047b0:	d100      	bne.n	80047b4 <HAL_RCC_OscConfig+0x300>
 80047b2:	e0c7      	b.n	8004944 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	231f      	movs	r3, #31
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2238      	movs	r2, #56	; 0x38
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d11f      	bne.n	8004808 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	2202      	movs	r2, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	d100      	bne.n	80047d4 <HAL_RCC_OscConfig+0x320>
 80047d2:	e0b7      	b.n	8004944 <HAL_RCC_OscConfig+0x490>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d000      	beq.n	80047de <HAL_RCC_OscConfig+0x32a>
 80047dc:	e0b2      	b.n	8004944 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1c2      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	40021000 	.word	0x40021000
 80047e8:	fffeffff 	.word	0xfffeffff
 80047ec:	fffbffff 	.word	0xfffbffff
 80047f0:	ffff80ff 	.word	0xffff80ff
 80047f4:	ffffc7ff 	.word	0xffffc7ff
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	20000008 	.word	0x20000008
 8004800:	2000000c 	.word	0x2000000c
 8004804:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004808:	4bb5      	ldr	r3, [pc, #724]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	055b      	lsls	r3, r3, #21
 8004810:	4013      	ands	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x364>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x366>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4bb0      	ldr	r3, [pc, #704]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004822:	4baf      	ldr	r3, [pc, #700]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	0549      	lsls	r1, r1, #21
 8004828:	430a      	orrs	r2, r1
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c
 800482c:	4bac      	ldr	r3, [pc, #688]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	055b      	lsls	r3, r3, #21
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800483a:	231f      	movs	r3, #31
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004842:	4ba8      	ldr	r3, [pc, #672]	; (8004ae4 <HAL_RCC_OscConfig+0x630>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484e:	4ba5      	ldr	r3, [pc, #660]	; (8004ae4 <HAL_RCC_OscConfig+0x630>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4ba4      	ldr	r3, [pc, #656]	; (8004ae4 <HAL_RCC_OscConfig+0x630>)
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0049      	lsls	r1, r1, #1
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800485c:	f7ff f9c6 	bl	8003bec <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7ff f9c1 	bl	8003bec <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e177      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	4b9a      	ldr	r3, [pc, #616]	; (8004ae4 <HAL_RCC_OscConfig+0x630>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x3e6>
 800488c:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800488e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004890:	4b93      	ldr	r3, [pc, #588]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004892:	2101      	movs	r1, #1
 8004894:	430a      	orrs	r2, r1
 8004896:	65da      	str	r2, [r3, #92]	; 0x5c
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x420>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x408>
 80048a2:	4b8f      	ldr	r3, [pc, #572]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048a6:	4b8e      	ldr	r3, [pc, #568]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048a8:	2104      	movs	r1, #4
 80048aa:	430a      	orrs	r2, r1
 80048ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ae:	4b8c      	ldr	r3, [pc, #560]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b2:	4b8b      	ldr	r3, [pc, #556]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048b4:	2101      	movs	r1, #1
 80048b6:	430a      	orrs	r2, r1
 80048b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x420>
 80048bc:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c0:	4b87      	ldr	r3, [pc, #540]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80048c8:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048cc:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048ce:	2104      	movs	r1, #4
 80048d0:	438a      	bics	r2, r1
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7ff f986 	bl	8003bec <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e4:	e009      	b.n	80048fa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7ff f981 	bl	8003bec <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	4a7d      	ldr	r2, [pc, #500]	; (8004ae8 <HAL_RCC_OscConfig+0x634>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e136      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	4b79      	ldr	r3, [pc, #484]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x432>
 8004904:	e013      	b.n	800492e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7ff f971 	bl	8003bec <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490e:	e009      	b.n	8004924 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7ff f96c 	bl	8003bec <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	4a73      	ldr	r2, [pc, #460]	; (8004ae8 <HAL_RCC_OscConfig+0x634>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e121      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	4b6e      	ldr	r3, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	2202      	movs	r2, #2
 800492a:	4013      	ands	r3, r2
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800492e:	231f      	movs	r3, #31
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b69      	ldr	r3, [pc, #420]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493c:	4b68      	ldr	r3, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800493e:	496b      	ldr	r1, [pc, #428]	; (8004aec <HAL_RCC_OscConfig+0x638>)
 8004940:	400a      	ands	r2, r1
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2220      	movs	r2, #32
 800494a:	4013      	ands	r3, r2
 800494c:	d039      	beq.n	80049c2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01b      	beq.n	800498e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004956:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b61      	ldr	r3, [pc, #388]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	03c9      	lsls	r1, r1, #15
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004964:	f7ff f942 	bl	8003bec <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800496e:	f7ff f93d 	bl	8003bec <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0f3      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004980:	4b57      	ldr	r3, [pc, #348]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	4013      	ands	r3, r2
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x4ba>
 800498c:	e019      	b.n	80049c2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004994:	4956      	ldr	r1, [pc, #344]	; (8004af0 <HAL_RCC_OscConfig+0x63c>)
 8004996:	400a      	ands	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7ff f927 	bl	8003bec <HAL_GetTick>
 800499e:	0003      	movs	r3, r0
 80049a0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a4:	f7ff f922 	bl	8003bec <HAL_GetTick>
 80049a8:	0002      	movs	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0d8      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049b6:	4b4a      	ldr	r3, [pc, #296]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	4013      	ands	r3, r2
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d100      	bne.n	80049cc <HAL_RCC_OscConfig+0x518>
 80049ca:	e0cc      	b.n	8004b66 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049cc:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2238      	movs	r2, #56	; 0x38
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d100      	bne.n	80049da <HAL_RCC_OscConfig+0x526>
 80049d8:	e07b      	b.n	8004ad2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d156      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80049e8:	4942      	ldr	r1, [pc, #264]	; (8004af4 <HAL_RCC_OscConfig+0x640>)
 80049ea:	400a      	ands	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7ff f8fd 	bl	8003bec <HAL_GetTick>
 80049f2:	0003      	movs	r3, r0
 80049f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7ff f8f8 	bl	8003bec <HAL_GetTick>
 80049fc:	0002      	movs	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0ae      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0a:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	049b      	lsls	r3, r3, #18
 8004a12:	4013      	ands	r3, r2
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a16:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a37      	ldr	r2, [pc, #220]	; (8004af8 <HAL_RCC_OscConfig+0x644>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	431a      	orrs	r2, r3
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a46:	430a      	orrs	r2, r1
 8004a48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4a:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0449      	lsls	r1, r1, #17
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	0549      	lsls	r1, r1, #21
 8004a62:	430a      	orrs	r2, r1
 8004a64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7ff f8c1 	bl	8003bec <HAL_GetTick>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7ff f8bc 	bl	8003bec <HAL_GetTick>
 8004a74:	0002      	movs	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e072      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	049b      	lsls	r3, r3, #18
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x5bc>
 8004a8e:	e06a      	b.n	8004b66 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a96:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x640>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7ff f8a6 	bl	8003bec <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7ff f8a1 	bl	8003bec <HAL_GetTick>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e057      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	049b      	lsls	r3, r3, #18
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d1f0      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004aca:	490c      	ldr	r1, [pc, #48]	; (8004afc <HAL_RCC_OscConfig+0x648>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e049      	b.n	8004b66 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d112      	bne.n	8004b00 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e044      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	00001388 	.word	0x00001388
 8004aec:	efffffff 	.word	0xefffffff
 8004af0:	ffbfffff 	.word	0xffbfffff
 8004af4:	feffffff 	.word	0xfeffffff
 8004af8:	11c1808c 	.word	0x11c1808c
 8004afc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x6bc>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d126      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2270      	movs	r2, #112	; 0x70
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d11f      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	23fe      	movs	r3, #254	; 0xfe
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d116      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	23f8      	movs	r3, #248	; 0xf8
 8004b38:	039b      	lsls	r3, r3, #14
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d10e      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	23e0      	movs	r3, #224	; 0xe0
 8004b48:	051b      	lsls	r3, r3, #20
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	0f5b      	lsrs	r3, r3, #29
 8004b58:	075a      	lsls	r2, r3, #29
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	0018      	movs	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b008      	add	sp, #32
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0e9      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	4013      	ands	r3, r2
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d91e      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	4393      	bics	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	4b70      	ldr	r3, [pc, #448]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ba8:	f7ff f820 	bl	8003bec <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bb0:	e009      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb2:	f7ff f81b 	bl	8003bec <HAL_GetTick>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	4a6a      	ldr	r2, [pc, #424]	; (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0ca      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bc6:	4b67      	ldr	r3, [pc, #412]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2207      	movs	r2, #7
 8004bcc:	4013      	ands	r3, r2
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d015      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2204      	movs	r2, #4
 8004be4:	4013      	ands	r3, r2
 8004be6:	d006      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004be8:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b5f      	ldr	r3, [pc, #380]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004bee:	21e0      	movs	r1, #224	; 0xe0
 8004bf0:	01c9      	lsls	r1, r1, #7
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf6:	4b5d      	ldr	r3, [pc, #372]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4a5d      	ldr	r2, [pc, #372]	; (8004d70 <HAL_RCC_ClockConfig+0x1fc>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4013      	ands	r3, r2
 8004c12:	d057      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	029b      	lsls	r3, r3, #10
 8004c24:	4013      	ands	r3, r2
 8004c26:	d12b      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e097      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c34:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	049b      	lsls	r3, r3, #18
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d11f      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e08b      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4c:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4013      	ands	r3, r2
 8004c56:	d113      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e07f      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c64:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c68:	2202      	movs	r2, #2
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e074      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	2202      	movs	r2, #2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e06d      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c80:	4b3a      	ldr	r3, [pc, #232]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2207      	movs	r2, #7
 8004c86:	4393      	bics	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fe ffaa 	bl	8003bec <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9e:	f7fe ffa5 	bl	8003bec <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e054      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2238      	movs	r2, #56	; 0x38
 8004cb8:	401a      	ands	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1ec      	bne.n	8004c9e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2207      	movs	r2, #7
 8004cca:	4013      	ands	r3, r2
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d21e      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2207      	movs	r2, #7
 8004cd8:	4393      	bics	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ce4:	f7fe ff82 	bl	8003bec <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cec:	e009      	b.n	8004d02 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cee:	f7fe ff7d 	bl	8003bec <HAL_GetTick>
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e02c      	b.n	8004d5c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2207      	movs	r2, #7
 8004d08:	4013      	ands	r3, r2
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2204      	movs	r2, #4
 8004d16:	4013      	ands	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_RCC_ClockConfig+0x200>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d2e:	f000 f829 	bl	8004d84 <HAL_RCC_GetSysClockFreq>
 8004d32:	0001      	movs	r1, r0
 8004d34:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	220f      	movs	r2, #15
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x204>)
 8004d40:	0092      	lsls	r2, r2, #2
 8004d42:	58d3      	ldr	r3, [r2, r3]
 8004d44:	221f      	movs	r2, #31
 8004d46:	4013      	ands	r3, r2
 8004d48:	000a      	movs	r2, r1
 8004d4a:	40da      	lsrs	r2, r3
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_ClockConfig+0x208>)
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_ClockConfig+0x20c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe feed 	bl	8003b34 <HAL_InitTick>
 8004d5a:	0003      	movs	r3, r0
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40022000 	.word	0x40022000
 8004d68:	00001388 	.word	0x00001388
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	fffff0ff 	.word	0xfffff0ff
 8004d74:	ffff8fff 	.word	0xffff8fff
 8004d78:	08013da0 	.word	0x08013da0
 8004d7c:	20000008 	.word	0x20000008
 8004d80:	2000000c 	.word	0x2000000c

08004d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2238      	movs	r2, #56	; 0x38
 8004d90:	4013      	ands	r3, r2
 8004d92:	d10f      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0adb      	lsrs	r3, r3, #11
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2201      	movs	r2, #1
 8004da0:	409a      	lsls	r2, r3
 8004da2:	0013      	movs	r3, r2
 8004da4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	4835      	ldr	r0, [pc, #212]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004daa:	f7fb f9c7 	bl	800013c <__udivsi3>
 8004dae:	0003      	movs	r3, r0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e05d      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2238      	movs	r2, #56	; 0x38
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x100>)
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e054      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2238      	movs	r2, #56	; 0x38
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d138      	bne.n	8004e44 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	2207      	movs	r2, #7
 8004de4:	4013      	ands	r3, r2
 8004de6:	3301      	adds	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10d      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4824      	ldr	r0, [pc, #144]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x100>)
 8004df4:	f7fb f9a2 	bl	800013c <__udivsi3>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	227f      	movs	r2, #127	; 0x7f
 8004e04:	4013      	ands	r3, r2
 8004e06:	434b      	muls	r3, r1
 8004e08:	617b      	str	r3, [r7, #20]
        break;
 8004e0a:	e00d      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	481c      	ldr	r0, [pc, #112]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e10:	f7fb f994 	bl	800013c <__udivsi3>
 8004e14:	0003      	movs	r3, r0
 8004e16:	0019      	movs	r1, r3
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	227f      	movs	r2, #127	; 0x7f
 8004e20:	4013      	ands	r3, r2
 8004e22:	434b      	muls	r3, r1
 8004e24:	617b      	str	r3, [r7, #20]
        break;
 8004e26:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0f5b      	lsrs	r3, r3, #29
 8004e2e:	2207      	movs	r2, #7
 8004e30:	4013      	ands	r3, r2
 8004e32:	3301      	adds	r3, #1
 8004e34:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	6978      	ldr	r0, [r7, #20]
 8004e3a:	f7fb f97f 	bl	800013c <__udivsi3>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e015      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2238      	movs	r2, #56	; 0x38
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d103      	bne.n	8004e58 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2238      	movs	r2, #56	; 0x38
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b18      	cmp	r3, #24
 8004e62:	d103      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004e64:	23fa      	movs	r3, #250	; 0xfa
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e001      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e70:	693b      	ldr	r3, [r7, #16]
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	00f42400 	.word	0x00f42400
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	20000008 	.word	0x20000008

08004e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ea0:	f7ff fff2 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea4:	0004      	movs	r4, r0
 8004ea6:	f7ff faf9 	bl	800449c <LL_RCC_GetAPB1Prescaler>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	0b1a      	lsrs	r2, r3, #12
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	58d3      	ldr	r3, [r2, r3]
 8004eb4:	221f      	movs	r2, #31
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	40dc      	lsrs	r4, r3
 8004eba:	0023      	movs	r3, r4
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	08013de0 	.word	0x08013de0

08004ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004ed0:	2313      	movs	r3, #19
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ed8:	2312      	movs	r3, #18
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d100      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004eec:	e0ad      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eee:	2011      	movs	r0, #17
 8004ef0:	183b      	adds	r3, r7, r0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	055b      	lsls	r3, r3, #21
 8004efe:	4013      	ands	r3, r2
 8004f00:	d110      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f06:	4b43      	ldr	r3, [pc, #268]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	0549      	lsls	r1, r1, #21
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f10:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	055b      	lsls	r3, r3, #21
 8004f18:	4013      	ands	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	0049      	lsls	r1, r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f32:	f7fe fe5b 	bl	8003bec <HAL_GetTick>
 8004f36:	0003      	movs	r3, r0
 8004f38:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fe fe56 	bl	8003bec <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d904      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004f4a:	2313      	movs	r3, #19
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2203      	movs	r2, #3
 8004f50:	701a      	strb	r2, [r3, #0]
        break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0ed      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004f60:	2313      	movs	r3, #19
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d15e      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f6e:	23c0      	movs	r3, #192	; 0xc0
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4013      	ands	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d019      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d014      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f86:	4b23      	ldr	r3, [pc, #140]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	4a24      	ldr	r2, [pc, #144]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	0249      	lsls	r1, r1, #9
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004fa4:	491e      	ldr	r1, [pc, #120]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004faa:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d016      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fe fe18 	bl	8003bec <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc0:	e00c      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fe fe13 	bl	8003bec <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d904      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004fd2:	2313      	movs	r3, #19
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	701a      	strb	r2, [r3, #0]
            break;
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d0ed      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004fe6:	2313      	movs	r3, #19
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005000:	430a      	orrs	r2, r1
 8005002:	65da      	str	r2, [r3, #92]	; 0x5c
 8005004:	e016      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005006:	2312      	movs	r3, #18
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2213      	movs	r2, #19
 800500c:	18ba      	adds	r2, r7, r2
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e00f      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005014:	40021000 	.word	0x40021000
 8005018:	40007000 	.word	0x40007000
 800501c:	fffffcff 	.word	0xfffffcff
 8005020:	fffeffff 	.word	0xfffeffff
 8005024:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	2312      	movs	r3, #18
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2213      	movs	r2, #19
 800502e:	18ba      	adds	r2, r7, r2
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005034:	2311      	movs	r3, #17
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503e:	4bb6      	ldr	r3, [pc, #728]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005042:	4bb5      	ldr	r3, [pc, #724]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005044:	49b5      	ldr	r1, [pc, #724]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005046:	400a      	ands	r2, r1
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005054:	4bb0      	ldr	r3, [pc, #704]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	2203      	movs	r2, #3
 800505a:	4393      	bics	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	4bad      	ldr	r3, [pc, #692]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005064:	430a      	orrs	r2, r1
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2202      	movs	r2, #2
 800506e:	4013      	ands	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005072:	4ba9      	ldr	r3, [pc, #676]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	220c      	movs	r2, #12
 8005078:	4393      	bics	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	4ba5      	ldr	r3, [pc, #660]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005082:	430a      	orrs	r2, r1
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2204      	movs	r2, #4
 800508c:	4013      	ands	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005090:	4ba1      	ldr	r3, [pc, #644]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	2230      	movs	r2, #48	; 0x30
 8005096:	4393      	bics	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	4b9e      	ldr	r3, [pc, #632]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050a0:	430a      	orrs	r2, r1
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2210      	movs	r2, #16
 80050aa:	4013      	ands	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ae:	4b9a      	ldr	r3, [pc, #616]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	4a9b      	ldr	r2, [pc, #620]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	4b96      	ldr	r3, [pc, #600]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050be:	430a      	orrs	r2, r1
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	015b      	lsls	r3, r3, #5
 80050ca:	4013      	ands	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80050ce:	4b92      	ldr	r3, [pc, #584]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	4a94      	ldr	r2, [pc, #592]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	4b8e      	ldr	r3, [pc, #568]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050de:	430a      	orrs	r2, r1
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4013      	ands	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ee:	4b8a      	ldr	r3, [pc, #552]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	4a8d      	ldr	r2, [pc, #564]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fc:	4b86      	ldr	r3, [pc, #536]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4013      	ands	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800510e:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	4a86      	ldr	r2, [pc, #536]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4b7e      	ldr	r3, [pc, #504]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800511e:	430a      	orrs	r2, r1
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2220      	movs	r2, #32
 8005128:	4013      	ands	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800512c:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	4a7f      	ldr	r2, [pc, #508]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	4b77      	ldr	r3, [pc, #476]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800513c:	430a      	orrs	r2, r1
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2240      	movs	r2, #64	; 0x40
 8005146:	4013      	ands	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800514a:	4b73      	ldr	r3, [pc, #460]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	4a79      	ldr	r2, [pc, #484]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	4b6f      	ldr	r3, [pc, #444]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515a:	430a      	orrs	r2, r1
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	4013      	ands	r3, r2
 8005168:	d015      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800516a:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	0899      	lsrs	r1, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005176:	4b68      	ldr	r3, [pc, #416]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005178:	430a      	orrs	r2, r1
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	05db      	lsls	r3, r3, #23
 8005184:	429a      	cmp	r2, r3
 8005186:	d106      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005188:	4b63      	ldr	r3, [pc, #396]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	4b62      	ldr	r3, [pc, #392]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	0249      	lsls	r1, r1, #9
 8005192:	430a      	orrs	r2, r1
 8005194:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	4013      	ands	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051a2:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	2240      	movs	r2, #64	; 0x40
 80051a8:	4393      	bics	r3, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	039b      	lsls	r3, r3, #14
 80051be:	4013      	ands	r3, r2
 80051c0:	d016      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051c2:	4b55      	ldr	r3, [pc, #340]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	4a5c      	ldr	r2, [pc, #368]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d0:	4b51      	ldr	r3, [pc, #324]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d2:	430a      	orrs	r2, r1
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	03db      	lsls	r3, r3, #15
 80051de:	429a      	cmp	r2, r3
 80051e0:	d106      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80051e2:	4b4d      	ldr	r3, [pc, #308]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	4b4c      	ldr	r3, [pc, #304]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	0449      	lsls	r1, r1, #17
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	03db      	lsls	r3, r3, #15
 80051f8:	4013      	ands	r3, r2
 80051fa:	d016      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80051fc:	4b46      	ldr	r3, [pc, #280]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	4a4e      	ldr	r2, [pc, #312]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005202:	4013      	ands	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800520a:	4b43      	ldr	r3, [pc, #268]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800520c:	430a      	orrs	r2, r1
 800520e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	045b      	lsls	r3, r3, #17
 8005218:	429a      	cmp	r2, r3
 800521a:	d106      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	4b3d      	ldr	r3, [pc, #244]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005222:	2180      	movs	r1, #128	; 0x80
 8005224:	0449      	lsls	r1, r1, #17
 8005226:	430a      	orrs	r2, r1
 8005228:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4013      	ands	r3, r2
 8005234:	d014      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005236:	4b38      	ldr	r3, [pc, #224]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	2203      	movs	r2, #3
 800523c:	4393      	bics	r3, r2
 800523e:	0019      	movs	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	4b34      	ldr	r3, [pc, #208]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005246:	430a      	orrs	r2, r1
 8005248:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d106      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005252:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	0249      	lsls	r1, r1, #9
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	4013      	ands	r3, r2
 800526a:	d014      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800526c:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	220c      	movs	r2, #12
 8005272:	4393      	bics	r3, r2
 8005274:	0019      	movs	r1, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800527c:	430a      	orrs	r2, r1
 800527e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b04      	cmp	r3, #4
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005288:	4b23      	ldr	r3, [pc, #140]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	0249      	lsls	r1, r1, #9
 8005292:	430a      	orrs	r2, r1
 8005294:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	045b      	lsls	r3, r3, #17
 800529e:	4013      	ands	r3, r2
 80052a0:	d016      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a2:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052b2:	430a      	orrs	r2, r1
 80052b4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	429a      	cmp	r2, r3
 80052c0:	d106      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	0449      	lsls	r1, r1, #17
 80052cc:	430a      	orrs	r2, r1
 80052ce:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	049b      	lsls	r3, r3, #18
 80052d8:	4013      	ands	r3, r2
 80052da:	d016      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	0019      	movs	r1, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ec:	430a      	orrs	r2, r1
 80052ee:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d106      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	0449      	lsls	r1, r1, #17
 8005306:	430a      	orrs	r2, r1
 8005308:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800530a:	2312      	movs	r3, #18
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	781b      	ldrb	r3, [r3, #0]
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b006      	add	sp, #24
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	efffffff 	.word	0xefffffff
 8005320:	fffff3ff 	.word	0xfffff3ff
 8005324:	fffffcff 	.word	0xfffffcff
 8005328:	fff3ffff 	.word	0xfff3ffff
 800532c:	ffcfffff 	.word	0xffcfffff
 8005330:	ffffcfff 	.word	0xffffcfff
 8005334:	ffff3fff 	.word	0xffff3fff
 8005338:	ffbfffff 	.word	0xffbfffff
 800533c:	feffffff 	.word	0xfeffffff

08005340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005348:	230f      	movs	r3, #15
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d100      	bne.n	8005358 <HAL_RTC_Init+0x18>
 8005356:	e08c      	b.n	8005472 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2229      	movs	r2, #41	; 0x29
 800535c:	5c9b      	ldrb	r3, [r3, r2]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2228      	movs	r2, #40	; 0x28
 8005368:	2100      	movs	r1, #0
 800536a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2288      	movs	r2, #136	; 0x88
 8005370:	0212      	lsls	r2, r2, #8
 8005372:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f7fe f856 	bl	8003428 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2229      	movs	r2, #41	; 0x29
 8005380:	2102      	movs	r1, #2
 8005382:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2210      	movs	r2, #16
 800538c:	4013      	ands	r3, r2
 800538e:	2b10      	cmp	r3, #16
 8005390:	d062      	beq.n	8005458 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	22ca      	movs	r2, #202	; 0xca
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2253      	movs	r2, #83	; 0x53
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80053a2:	250f      	movs	r5, #15
 80053a4:	197c      	adds	r4, r7, r5
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fbf3 	bl	8005b94 <RTC_EnterInitMode>
 80053ae:	0003      	movs	r3, r0
 80053b0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80053b2:	0028      	movs	r0, r5
 80053b4:	183b      	adds	r3, r7, r0
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d12c      	bne.n	8005416 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	492e      	ldr	r1, [pc, #184]	; (8005480 <HAL_RTC_Init+0x140>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6912      	ldr	r2, [r2, #16]
 80053f2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6919      	ldr	r1, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	041a      	lsls	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005408:	183c      	adds	r4, r7, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fc03 	bl	8005c18 <RTC_ExitInitMode>
 8005412:	0003      	movs	r3, r0
 8005414:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005416:	230f      	movs	r3, #15
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d116      	bne.n	800544e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	00d2      	lsls	r2, r2, #3
 800542c:	08d2      	lsrs	r2, r2, #3
 800542e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	22ff      	movs	r2, #255	; 0xff
 8005454:	625a      	str	r2, [r3, #36]	; 0x24
 8005456:	e003      	b.n	8005460 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005458:	230f      	movs	r3, #15
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005460:	230f      	movs	r3, #15
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2229      	movs	r2, #41	; 0x29
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005472:	230f      	movs	r3, #15
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	781b      	ldrb	r3, [r3, #0]
}
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b004      	add	sp, #16
 800547e:	bdb0      	pop	{r4, r5, r7, pc}
 8005480:	fb8fffbf 	.word	0xfb8fffbf

08005484 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2228      	movs	r2, #40	; 0x28
 8005494:	5c9b      	ldrb	r3, [r3, r2]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_RTC_SetTime+0x1a>
 800549a:	2302      	movs	r3, #2
 800549c:	e092      	b.n	80055c4 <HAL_RTC_SetTime+0x140>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2228      	movs	r2, #40	; 0x28
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2229      	movs	r2, #41	; 0x29
 80054aa:	2102      	movs	r1, #2
 80054ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	22ca      	movs	r2, #202	; 0xca
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2253      	movs	r2, #83	; 0x53
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054be:	2513      	movs	r5, #19
 80054c0:	197c      	adds	r4, r7, r5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fb65 	bl	8005b94 <RTC_EnterInitMode>
 80054ca:	0003      	movs	r3, r0
 80054cc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80054ce:	197b      	adds	r3, r7, r5
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d162      	bne.n	800559c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d125      	bne.n	8005528 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2240      	movs	r2, #64	; 0x40
 80054e4:	4013      	ands	r3, r2
 80054e6:	d102      	bne.n	80054ee <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 fbd4 	bl	8005ca0 <RTC_ByteToBcd2>
 80054f8:	0003      	movs	r3, r0
 80054fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	0018      	movs	r0, r3
 8005502:	f000 fbcd 	bl	8005ca0 <RTC_ByteToBcd2>
 8005506:	0003      	movs	r3, r0
 8005508:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800550a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	789b      	ldrb	r3, [r3, #2]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 fbc5 	bl	8005ca0 <RTC_ByteToBcd2>
 8005516:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005518:	0022      	movs	r2, r4
 800551a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e017      	b.n	8005558 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	4013      	ands	r3, r2
 8005532:	d102      	bne.n	800553a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2200      	movs	r2, #0
 8005538:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005546:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800554c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	491b      	ldr	r1, [pc, #108]	; (80055cc <HAL_RTC_SetTime+0x148>)
 8005560:	400a      	ands	r2, r1
 8005562:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4918      	ldr	r1, [pc, #96]	; (80055d0 <HAL_RTC_SetTime+0x14c>)
 8005570:	400a      	ands	r2, r1
 8005572:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	431a      	orrs	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800558c:	2313      	movs	r3, #19
 800558e:	18fc      	adds	r4, r7, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0018      	movs	r0, r3
 8005594:	f000 fb40 	bl	8005c18 <RTC_ExitInitMode>
 8005598:	0003      	movs	r3, r0
 800559a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	22ff      	movs	r2, #255	; 0xff
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80055a4:	2313      	movs	r3, #19
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2229      	movs	r2, #41	; 0x29
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2228      	movs	r2, #40	; 0x28
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

  return status;
 80055be:	2313      	movs	r3, #19
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	781b      	ldrb	r3, [r3, #0]
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b006      	add	sp, #24
 80055ca:	bdb0      	pop	{r4, r5, r7, pc}
 80055cc:	007f7f7f 	.word	0x007f7f7f
 80055d0:	fffbffff 	.word	0xfffbffff

080055d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	045b      	lsls	r3, r3, #17
 80055f2:	0c5a      	lsrs	r2, r3, #17
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a22      	ldr	r2, [pc, #136]	; (8005688 <HAL_RTC_GetTime+0xb4>)
 8005600:	4013      	ands	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	b2db      	uxtb	r3, r3
 800560a:	223f      	movs	r2, #63	; 0x3f
 800560c:	4013      	ands	r3, r2
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b2db      	uxtb	r3, r3
 800561a:	227f      	movs	r2, #127	; 0x7f
 800561c:	4013      	ands	r3, r2
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	227f      	movs	r2, #127	; 0x7f
 800562a:	4013      	ands	r3, r2
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	0d9b      	lsrs	r3, r3, #22
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2201      	movs	r2, #1
 800563a:	4013      	ands	r3, r2
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11a      	bne.n	800567e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 fb4f 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005652:	0003      	movs	r3, r0
 8005654:	001a      	movs	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	0018      	movs	r0, r3
 8005660:	f000 fb46 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005664:	0003      	movs	r3, r0
 8005666:	001a      	movs	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	789b      	ldrb	r3, [r3, #2]
 8005670:	0018      	movs	r0, r3
 8005672:	f000 fb3d 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005676:	0003      	movs	r3, r0
 8005678:	001a      	movs	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	0018      	movs	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	b006      	add	sp, #24
 8005686:	bd80      	pop	{r7, pc}
 8005688:	007f7f7f 	.word	0x007f7f7f

0800568c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800568c:	b5b0      	push	{r4, r5, r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2228      	movs	r2, #40	; 0x28
 800569c:	5c9b      	ldrb	r3, [r3, r2]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_RTC_SetDate+0x1a>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e07e      	b.n	80057a4 <HAL_RTC_SetDate+0x118>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2228      	movs	r2, #40	; 0x28
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2229      	movs	r2, #41	; 0x29
 80056b2:	2102      	movs	r1, #2
 80056b4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10e      	bne.n	80056da <HAL_RTC_SetDate+0x4e>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	001a      	movs	r2, r3
 80056c2:	2310      	movs	r3, #16
 80056c4:	4013      	ands	r3, r2
 80056c6:	d008      	beq.n	80056da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2210      	movs	r2, #16
 80056ce:	4393      	bics	r3, r2
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	330a      	adds	r3, #10
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11c      	bne.n	800571a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 fadb 	bl	8005ca0 <RTC_ByteToBcd2>
 80056ea:	0003      	movs	r3, r0
 80056ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fad4 	bl	8005ca0 <RTC_ByteToBcd2>
 80056f8:	0003      	movs	r3, r0
 80056fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 facc 	bl	8005ca0 <RTC_ByteToBcd2>
 8005708:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800570a:	0022      	movs	r2, r4
 800570c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e00e      	b.n	8005738 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	78db      	ldrb	r3, [r3, #3]
 800571e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005726:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800572c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	22ca      	movs	r2, #202	; 0xca
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2253      	movs	r2, #83	; 0x53
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005748:	2513      	movs	r5, #19
 800574a:	197c      	adds	r4, r7, r5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fa20 	bl	8005b94 <RTC_EnterInitMode>
 8005754:	0003      	movs	r3, r0
 8005756:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005758:	0028      	movs	r0, r5
 800575a:	183b      	adds	r3, r7, r0
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4910      	ldr	r1, [pc, #64]	; (80057ac <HAL_RTC_SetDate+0x120>)
 800576a:	400a      	ands	r2, r1
 800576c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800576e:	183c      	adds	r4, r7, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	0018      	movs	r0, r3
 8005774:	f000 fa50 	bl	8005c18 <RTC_ExitInitMode>
 8005778:	0003      	movs	r3, r0
 800577a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	22ff      	movs	r2, #255	; 0xff
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005784:	2313      	movs	r3, #19
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2229      	movs	r2, #41	; 0x29
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2228      	movs	r2, #40	; 0x28
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

  return status;
 800579e:	2313      	movs	r3, #19
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	781b      	ldrb	r3, [r3, #0]
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b006      	add	sp, #24
 80057aa:	bdb0      	pop	{r4, r5, r7, pc}
 80057ac:	00ffff3f 	.word	0x00ffff3f

080057b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <HAL_RTC_GetDate+0x98>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	221f      	movs	r2, #31
 80057da:	4013      	ands	r3, r2
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	223f      	movs	r2, #63	; 0x3f
 80057e8:	4013      	ands	r3, r2
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	0b5b      	lsrs	r3, r3, #13
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2207      	movs	r2, #7
 80057f8:	4013      	ands	r3, r2
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11a      	bne.n	800583c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	78db      	ldrb	r3, [r3, #3]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fa70 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005810:	0003      	movs	r3, r0
 8005812:	001a      	movs	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	0018      	movs	r0, r3
 800581e:	f000 fa67 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005822:	0003      	movs	r3, r0
 8005824:	001a      	movs	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	789b      	ldrb	r3, [r3, #2]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 fa5e 	bl	8005cf0 <RTC_Bcd2ToByte>
 8005834:	0003      	movs	r3, r0
 8005836:	001a      	movs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b006      	add	sp, #24
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	00ffff3f 	.word	0x00ffff3f

0800584c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2228      	movs	r2, #40	; 0x28
 800585c:	5c9b      	ldrb	r3, [r3, r2]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_RTC_SetAlarm_IT+0x1a>
 8005862:	2302      	movs	r3, #2
 8005864:	e127      	b.n	8005ab6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2228      	movs	r2, #40	; 0x28
 800586a:	2101      	movs	r1, #1
 800586c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2229      	movs	r2, #41	; 0x29
 8005872:	2102      	movs	r1, #2
 8005874:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d136      	bne.n	80058ea <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	4013      	ands	r3, r2
 8005886:	d102      	bne.n	800588e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	0018      	movs	r0, r3
 8005894:	f000 fa04 	bl	8005ca0 <RTC_ByteToBcd2>
 8005898:	0003      	movs	r3, r0
 800589a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 f9fd 	bl	8005ca0 <RTC_ByteToBcd2>
 80058a6:	0003      	movs	r3, r0
 80058a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058aa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	789b      	ldrb	r3, [r3, #2]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f000 f9f5 	bl	8005ca0 <RTC_ByteToBcd2>
 80058b6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058b8:	0022      	movs	r2, r4
 80058ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058c2:	431a      	orrs	r2, r3
 80058c4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2220      	movs	r2, #32
 80058ca:	5c9b      	ldrb	r3, [r3, r2]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f000 f9e7 	bl	8005ca0 <RTC_ByteToBcd2>
 80058d2:	0003      	movs	r3, r0
 80058d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058d6:	0022      	movs	r2, r4
 80058d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e022      	b.n	8005930 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	4013      	ands	r3, r2
 80058f4:	d102      	bne.n	80058fc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005908:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800590e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	78db      	ldrb	r3, [r3, #3]
 8005914:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005916:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2120      	movs	r1, #32
 800591c:	5c5b      	ldrb	r3, [r3, r1]
 800591e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005920:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005926:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800592c:	4313      	orrs	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	22ca      	movs	r2, #202	; 0xca
 8005942:	625a      	str	r2, [r3, #36]	; 0x24
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2253      	movs	r2, #83	; 0x53
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	429a      	cmp	r2, r3
 8005956:	d14c      	bne.n	80059f2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4957      	ldr	r1, [pc, #348]	; (8005ac0 <HAL_RTC_SetAlarm_IT+0x274>)
 8005964:	400a      	ands	r2, r1
 8005966:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	430a      	orrs	r2, r1
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005978:	f7fe f938 	bl	8003bec <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005980:	e016      	b.n	80059b0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005982:	f7fe f933 	bl	8003bec <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	23fa      	movs	r3, #250	; 0xfa
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	429a      	cmp	r2, r3
 8005992:	d90d      	bls.n	80059b0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2229      	movs	r2, #41	; 0x29
 80059a0:	2103      	movs	r1, #3
 80059a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2228      	movs	r2, #40	; 0x28
 80059a8:	2100      	movs	r1, #0
 80059aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e082      	b.n	8005ab6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d0e2      	beq.n	8005982 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	0049      	lsls	r1, r1, #1
 80059da:	430a      	orrs	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	0149      	lsls	r1, r1, #5
 80059ec:	430a      	orrs	r2, r1
 80059ee:	619a      	str	r2, [r3, #24]
 80059f0:	e04b      	b.n	8005a8a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4931      	ldr	r1, [pc, #196]	; (8005ac4 <HAL_RTC_SetAlarm_IT+0x278>)
 80059fe:	400a      	ands	r2, r1
 8005a00:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005a12:	f7fe f8eb 	bl	8003bec <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005a1a:	e016      	b.n	8005a4a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a1c:	f7fe f8e6 	bl	8003bec <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	23fa      	movs	r3, #250	; 0xfa
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90d      	bls.n	8005a4a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	22ff      	movs	r2, #255	; 0xff
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2229      	movs	r2, #41	; 0x29
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2228      	movs	r2, #40	; 0x28
 8005a42:	2100      	movs	r1, #0
 8005a44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e035      	b.n	8005ab6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2202      	movs	r2, #2
 8005a52:	4013      	ands	r3, r2
 8005a54:	d0e2      	beq.n	8005a1c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	0089      	lsls	r1, r1, #2
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	0189      	lsls	r1, r1, #6
 8005a86:	430a      	orrs	r2, r1
 8005a88:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	58d3      	ldr	r3, [r2, r3]
 8005a90:	490d      	ldr	r1, [pc, #52]	; (8005ac8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	0312      	lsls	r2, r2, #12
 8005a96:	4313      	orrs	r3, r2
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2229      	movs	r2, #41	; 0x29
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2228      	movs	r2, #40	; 0x28
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b009      	add	sp, #36	; 0x24
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	fffffeff 	.word	0xfffffeff
 8005ac4:	fffffdff 	.word	0xfffffdff
 8005ac8:	40021800 	.word	0x40021800

08005acc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	015b      	lsls	r3, r3, #5
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d011      	beq.n	8005b06 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2101      	movs	r1, #1
 8005afa:	430a      	orrs	r2, r1
 8005afc:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7fd fc55 	bl	80033b0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	019b      	lsls	r3, r3, #6
 8005b10:	4013      	ands	r3, r2
 8005b12:	d011      	beq.n	8005b38 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f961 	bl	8005dfa <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2229      	movs	r2, #41	; 0x29
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5499      	strb	r1, [r3, r2]
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0e      	ldr	r2, [pc, #56]	; (8005b90 <HAL_RTC_WaitForSynchro+0x48>)
 8005b56:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b58:	f7fe f848 	bl	8003bec <HAL_GetTick>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005b60:	e00a      	b.n	8005b78 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b62:	f7fe f843 	bl	8003bec <HAL_GetTick>
 8005b66:	0002      	movs	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	23fa      	movs	r3, #250	; 0xfa
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d901      	bls.n	8005b78 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e006      	b.n	8005b86 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	4013      	ands	r3, r2
 8005b82:	d0ee      	beq.n	8005b62 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	0018      	movs	r0, r3
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b004      	add	sp, #16
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	0001005f 	.word	0x0001005f

08005b94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005b9c:	230f      	movs	r3, #15
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2240      	movs	r2, #64	; 0x40
 8005bac:	4013      	ands	r3, r2
 8005bae:	d12c      	bne.n	8005c0a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005bc0:	f7fe f814 	bl	8003bec <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bc8:	e014      	b.n	8005bf4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bca:	f7fe f80f 	bl	8003bec <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	200f      	movs	r0, #15
 8005bd6:	183b      	adds	r3, r7, r0
 8005bd8:	1839      	adds	r1, r7, r0
 8005bda:	7809      	ldrb	r1, [r1, #0]
 8005bdc:	7019      	strb	r1, [r3, #0]
 8005bde:	23fa      	movs	r3, #250	; 0xfa
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d906      	bls.n	8005bf4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005be6:	183b      	adds	r3, r7, r0
 8005be8:	2203      	movs	r2, #3
 8005bea:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2229      	movs	r2, #41	; 0x29
 8005bf0:	2103      	movs	r1, #3
 8005bf2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2240      	movs	r2, #64	; 0x40
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d104      	bne.n	8005c0a <RTC_EnterInitMode+0x76>
 8005c00:	230f      	movs	r3, #15
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d1df      	bne.n	8005bca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c0a:	230f      	movs	r3, #15
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	781b      	ldrb	r3, [r3, #0]
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	240f      	movs	r4, #15
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c28:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	438a      	bics	r2, r1
 8005c32:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d10d      	bne.n	8005c5a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff ff81 	bl	8005b48 <HAL_RTC_WaitForSynchro>
 8005c46:	1e03      	subs	r3, r0, #0
 8005c48:	d021      	beq.n	8005c8e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2229      	movs	r2, #41	; 0x29
 8005c4e:	2103      	movs	r1, #3
 8005c50:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005c52:	193b      	adds	r3, r7, r4
 8005c54:	2203      	movs	r2, #3
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e019      	b.n	8005c8e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c60:	2120      	movs	r1, #32
 8005c62:	438a      	bics	r2, r1
 8005c64:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff ff6d 	bl	8005b48 <HAL_RTC_WaitForSynchro>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d007      	beq.n	8005c82 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2229      	movs	r2, #41	; 0x29
 8005c76:	2103      	movs	r1, #3
 8005c78:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005c7a:	230f      	movs	r3, #15
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	2203      	movs	r2, #3
 8005c80:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <RTC_ExitInitMode+0x84>)
 8005c88:	2120      	movs	r1, #32
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005c8e:	230f      	movs	r3, #15
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	781b      	ldrb	r3, [r3, #0]
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b005      	add	sp, #20
 8005c9a:	bd90      	pop	{r4, r7, pc}
 8005c9c:	40002800 	.word	0x40002800

08005ca0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	1dfb      	adds	r3, r7, #7
 8005caa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005cb0:	230b      	movs	r3, #11
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	1dfa      	adds	r2, r7, #7
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005cba:	e008      	b.n	8005cce <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005cc2:	220b      	movs	r2, #11
 8005cc4:	18bb      	adds	r3, r7, r2
 8005cc6:	18ba      	adds	r2, r7, r2
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	3a0a      	subs	r2, #10
 8005ccc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005cce:	210b      	movs	r1, #11
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d8f1      	bhi.n	8005cbc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b004      	add	sp, #16
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	1dfb      	adds	r3, r7, #7
 8005cfa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	001a      	movs	r2, r3
 8005d06:	0013      	movs	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	189b      	adds	r3, r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	210f      	movs	r1, #15
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	18d3      	adds	r3, r2, r3
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	0018      	movs	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b004      	add	sp, #16
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2228      	movs	r2, #40	; 0x28
 8005d36:	5c9b      	ldrb	r3, [r3, r2]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e024      	b.n	8005d8a <HAL_RTCEx_EnableBypassShadow+0x60>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2228      	movs	r2, #40	; 0x28
 8005d44:	2101      	movs	r1, #1
 8005d46:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2229      	movs	r2, #41	; 0x29
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	22ca      	movs	r2, #202	; 0xca
 8005d56:	625a      	str	r2, [r3, #36]	; 0x24
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2253      	movs	r2, #83	; 0x53
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2120      	movs	r1, #32
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2229      	movs	r2, #41	; 0x29
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2228      	movs	r2, #40	; 0x28
 8005d84:	2100      	movs	r1, #0
 8005d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b002      	add	sp, #8
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2228      	movs	r2, #40	; 0x28
 8005d9e:	5c9b      	ldrb	r3, [r3, r2]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e024      	b.n	8005df2 <HAL_RTCEx_DisableBypassShadow+0x60>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2228      	movs	r2, #40	; 0x28
 8005dac:	2101      	movs	r1, #1
 8005dae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2229      	movs	r2, #41	; 0x29
 8005db4:	2102      	movs	r1, #2
 8005db6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	22ca      	movs	r2, #202	; 0xca
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2253      	movs	r2, #83	; 0x53
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	21df      	movs	r1, #223	; 0xdf
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2229      	movs	r2, #41	; 0x29
 8005de4:	2101      	movs	r1, #1
 8005de6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2228      	movs	r2, #40	; 0x28
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b002      	add	sp, #8
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0a8      	b.n	8005f70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	2382      	movs	r3, #130	; 0x82
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d009      	beq.n	8005e46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	61da      	str	r2, [r3, #28]
 8005e38:	e005      	b.n	8005e46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	225d      	movs	r2, #93	; 0x5d
 8005e50:	5c9b      	ldrb	r3, [r3, r2]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d107      	bne.n	8005e68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	225c      	movs	r2, #92	; 0x5c
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7fd fb26 	bl	80034b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	225d      	movs	r2, #93	; 0x5d
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2140      	movs	r1, #64	; 0x40
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	23e0      	movs	r3, #224	; 0xe0
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d902      	bls.n	8005e92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e002      	b.n	8005e98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	015b      	lsls	r3, r3, #5
 8005e96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	23f0      	movs	r3, #240	; 0xf0
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d008      	beq.n	8005eb6 <HAL_SPI_Init+0xaa>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	23e0      	movs	r3, #224	; 0xe0
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d002      	beq.n	8005eb6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	2382      	movs	r3, #130	; 0x82
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	2384      	movs	r3, #132	; 0x84
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	400b      	ands	r3, r1
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2101      	movs	r1, #1
 8005edc:	400b      	ands	r3, r1
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6999      	ldr	r1, [r3, #24]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	400b      	ands	r3, r1
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2138      	movs	r1, #56	; 0x38
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	400b      	ands	r3, r1
 8005efe:	431a      	orrs	r2, r3
 8005f00:	0011      	movs	r1, r2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2110      	movs	r1, #16
 8005f24:	400b      	ands	r3, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	400b      	ands	r3, r1
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	23f0      	movs	r3, #240	; 0xf0
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	0011      	movs	r1, r2
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	015b      	lsls	r3, r3, #5
 8005f46:	401a      	ands	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4907      	ldr	r1, [pc, #28]	; (8005f78 <HAL_SPI_Init+0x16c>)
 8005f5c:	400a      	ands	r2, r1
 8005f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	225d      	movs	r2, #93	; 0x5d
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	0018      	movs	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b004      	add	sp, #16
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	fffff7ff 	.word	0xfffff7ff

08005f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e04a      	b.n	8006024 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	223d      	movs	r2, #61	; 0x3d
 8005f92:	5c9b      	ldrb	r3, [r3, r2]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	223c      	movs	r2, #60	; 0x3c
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fd facf 	bl	8003548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	223d      	movs	r2, #61	; 0x3d
 8005fae:	2102      	movs	r1, #2
 8005fb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	0019      	movs	r1, r3
 8005fbc:	0010      	movs	r0, r2
 8005fbe:	f000 f9ed 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2248      	movs	r2, #72	; 0x48
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223e      	movs	r2, #62	; 0x3e
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	223f      	movs	r2, #63	; 0x3f
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2240      	movs	r2, #64	; 0x40
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2241      	movs	r2, #65	; 0x41
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2242      	movs	r2, #66	; 0x42
 8005fee:	2101      	movs	r1, #1
 8005ff0:	5499      	strb	r1, [r3, r2]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2243      	movs	r2, #67	; 0x43
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2244      	movs	r2, #68	; 0x44
 8005ffe:	2101      	movs	r1, #1
 8006000:	5499      	strb	r1, [r3, r2]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2245      	movs	r2, #69	; 0x45
 8006006:	2101      	movs	r1, #1
 8006008:	5499      	strb	r1, [r3, r2]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2246      	movs	r2, #70	; 0x46
 800600e:	2101      	movs	r1, #1
 8006010:	5499      	strb	r1, [r3, r2]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2247      	movs	r2, #71	; 0x47
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	223d      	movs	r2, #61	; 0x3d
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	0018      	movs	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	b002      	add	sp, #8
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	223d      	movs	r2, #61	; 0x3d
 8006038:	5c9b      	ldrb	r3, [r3, r2]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e047      	b.n	80060d4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	223d      	movs	r2, #61	; 0x3d
 8006048:	2102      	movs	r1, #2
 800604a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2101      	movs	r1, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <HAL_TIM_Base_Start_IT+0xb0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d014      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	05db      	lsls	r3, r3, #23
 800606e:	429a      	cmp	r2, r3
 8006070:	d00e      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d116      	bne.n	80060be <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4a15      	ldr	r2, [pc, #84]	; (80060ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d016      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	025b      	lsls	r3, r3, #9
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d011      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2101      	movs	r1, #1
 80060b8:	430a      	orrs	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	e008      	b.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e000      	b.n	80060d2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b004      	add	sp, #16
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40014000 	.word	0x40014000
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	438a      	bics	r2, r1
 8006106:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <HAL_TIM_Base_Stop_IT+0x54>)
 8006110:	4013      	ands	r3, r2
 8006112:	d10d      	bne.n	8006130 <HAL_TIM_Base_Stop_IT+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <HAL_TIM_Base_Stop_IT+0x58>)
 800611c:	4013      	ands	r3, r2
 800611e:	d107      	bne.n	8006130 <HAL_TIM_Base_Stop_IT+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2101      	movs	r1, #1
 800612c:	438a      	bics	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	223d      	movs	r2, #61	; 0x3d
 8006134:	2101      	movs	r1, #1
 8006136:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	00001111 	.word	0x00001111
 8006148:	00000444 	.word	0x00000444

0800614c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	4013      	ands	r3, r2
 800616a:	d021      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2202      	movs	r2, #2
 8006170:	4013      	ands	r3, r2
 8006172:	d01d      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2203      	movs	r2, #3
 800617a:	4252      	negs	r2, r2
 800617c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2203      	movs	r2, #3
 800618c:	4013      	ands	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f000 f8ea 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 8006198:	e007      	b.n	80061aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f8dd 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 f8e9 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2204      	movs	r2, #4
 80061b4:	4013      	ands	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	4013      	ands	r3, r2
 80061be:	d01e      	beq.n	80061fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2205      	movs	r2, #5
 80061c6:	4252      	negs	r2, r2
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	23c0      	movs	r3, #192	; 0xc0
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4013      	ands	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 f8c3 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 80061e6:	e007      	b.n	80061f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f8b6 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 f8c2 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2208      	movs	r2, #8
 8006202:	4013      	ands	r3, r2
 8006204:	d021      	beq.n	800624a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2208      	movs	r2, #8
 800620a:	4013      	ands	r3, r2
 800620c:	d01d      	beq.n	800624a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2209      	movs	r2, #9
 8006214:	4252      	negs	r2, r2
 8006216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2204      	movs	r2, #4
 800621c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	2203      	movs	r2, #3
 8006226:	4013      	ands	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0018      	movs	r0, r3
 800622e:	f000 f89d 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 8006232:	e007      	b.n	8006244 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0018      	movs	r0, r3
 8006238:	f000 f890 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	0018      	movs	r0, r3
 8006240:	f000 f89c 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2210      	movs	r2, #16
 800624e:	4013      	ands	r3, r2
 8006250:	d022      	beq.n	8006298 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2210      	movs	r2, #16
 8006256:	4013      	ands	r3, r2
 8006258:	d01e      	beq.n	8006298 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2211      	movs	r2, #17
 8006260:	4252      	negs	r2, r2
 8006262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2208      	movs	r2, #8
 8006268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	23c0      	movs	r3, #192	; 0xc0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4013      	ands	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 f876 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 8006280:	e007      	b.n	8006292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 f869 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0018      	movs	r0, r3
 800628e:	f000 f875 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2201      	movs	r2, #1
 800629c:	4013      	ands	r3, r2
 800629e:	d00c      	beq.n	80062ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	4013      	ands	r3, r2
 80062a6:	d008      	beq.n	80062ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2202      	movs	r2, #2
 80062ae:	4252      	negs	r2, r2
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7fd f841 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2280      	movs	r2, #128	; 0x80
 80062be:	4013      	ands	r3, r2
 80062c0:	d104      	bne.n	80062cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	019b      	lsls	r3, r3, #6
 80062c8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062ca:	d00b      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	4013      	ands	r3, r2
 80062d2:	d007      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <HAL_TIM_IRQHandler+0x208>)
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	0018      	movs	r0, r3
 80062e0:	f000 f972 	bl	80065c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4013      	ands	r3, r2
 80062ec:	d00b      	beq.n	8006306 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2280      	movs	r2, #128	; 0x80
 80062f2:	4013      	ands	r3, r2
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <HAL_TIM_IRQHandler+0x20c>)
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f000 f969 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2240      	movs	r2, #64	; 0x40
 800630a:	4013      	ands	r3, r2
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2240      	movs	r2, #64	; 0x40
 8006312:	4013      	ands	r3, r2
 8006314:	d008      	beq.n	8006328 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2241      	movs	r2, #65	; 0x41
 800631c:	4252      	negs	r2, r2
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	0018      	movs	r0, r3
 8006324:	f000 f832 	bl	800638c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2220      	movs	r2, #32
 800632c:	4013      	ands	r3, r2
 800632e:	d00c      	beq.n	800634a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	4013      	ands	r3, r2
 8006336:	d008      	beq.n	800634a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2221      	movs	r2, #33	; 0x21
 800633e:	4252      	negs	r2, r2
 8006340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0018      	movs	r0, r3
 8006346:	f000 f937 	bl	80065b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	ffffdf7f 	.word	0xffffdf7f
 8006358:	fffffeff 	.word	0xfffffeff

0800635c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b002      	add	sp, #8
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006374:	46c0      	nop			; (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	b002      	add	sp, #8
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b002      	add	sp, #8
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	b002      	add	sp, #8
 800639a:	bd80      	pop	{r7, pc}

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <TIM_Base_SetConfig+0x110>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00c      	beq.n	80063ce <TIM_Base_SetConfig+0x32>
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	05db      	lsls	r3, r3, #23
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d007      	beq.n	80063ce <TIM_Base_SetConfig+0x32>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a3b      	ldr	r2, [pc, #236]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_Base_SetConfig+0x32>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a3a      	ldr	r2, [pc, #232]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d108      	bne.n	80063e0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2270      	movs	r2, #112	; 0x70
 80063d2:	4393      	bics	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a32      	ldr	r2, [pc, #200]	; (80064ac <TIM_Base_SetConfig+0x110>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01c      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	05db      	lsls	r3, r3, #23
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2e      	ldr	r2, [pc, #184]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <TIM_Base_SetConfig+0x11c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <TIM_Base_SetConfig+0x120>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2a      	ldr	r2, [pc, #168]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x86>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <TIM_Base_SetConfig+0x128>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2280      	movs	r2, #128	; 0x80
 8006438:	4393      	bics	r3, r2
 800643a:	001a      	movs	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <TIM_Base_SetConfig+0x110>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00b      	beq.n	800647a <TIM_Base_SetConfig+0xde>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a15      	ldr	r2, [pc, #84]	; (80064bc <TIM_Base_SetConfig+0x120>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d007      	beq.n	800647a <TIM_Base_SetConfig+0xde>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d003      	beq.n	800647a <TIM_Base_SetConfig+0xde>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <TIM_Base_SetConfig+0x128>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d103      	bne.n	8006482 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2201      	movs	r2, #1
 800648e:	4013      	ands	r3, r2
 8006490:	2b01      	cmp	r3, #1
 8006492:	d106      	bne.n	80064a2 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2201      	movs	r2, #1
 800649a:	4393      	bics	r3, r2
 800649c:	001a      	movs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]
  }
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b004      	add	sp, #16
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40002000 	.word	0x40002000
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800
 80064c8:	fffffcff 	.word	0xfffffcff

080064cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	223c      	movs	r2, #60	; 0x3c
 80064da:	5c9b      	ldrb	r3, [r3, r2]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e05a      	b.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	223c      	movs	r2, #60	; 0x3c
 80064e8:	2101      	movs	r1, #1
 80064ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	223d      	movs	r2, #61	; 0x3d
 80064f0:	2102      	movs	r1, #2
 80064f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006512:	4013      	ands	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2270      	movs	r2, #112	; 0x70
 8006524:	4393      	bics	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d014      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	2380      	movs	r3, #128	; 0x80
 800654a:	05db      	lsls	r3, r3, #23
 800654c:	429a      	cmp	r2, r3
 800654e:	d00e      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a15      	ldr	r2, [pc, #84]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d009      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a14      	ldr	r2, [pc, #80]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d10c      	bne.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2280      	movs	r2, #128	; 0x80
 8006572:	4393      	bics	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4313      	orrs	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	223d      	movs	r2, #61	; 0x3d
 800658c:	2101      	movs	r1, #1
 800658e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	223c      	movs	r2, #60	; 0x3c
 8006594:	2100      	movs	r1, #0
 8006596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b004      	add	sp, #16
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	ff0fffff 	.word	0xff0fffff
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40014000 	.word	0x40014000

080065b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b002      	add	sp, #8
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b002      	add	sp, #8
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e046      	b.n	8006688 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2288      	movs	r2, #136	; 0x88
 80065fe:	589b      	ldr	r3, [r3, r2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2284      	movs	r2, #132	; 0x84
 8006608:	2100      	movs	r1, #0
 800660a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	0018      	movs	r0, r3
 8006610:	f7fc ffc0 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2288      	movs	r2, #136	; 0x88
 8006618:	2124      	movs	r1, #36	; 0x24
 800661a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2101      	movs	r1, #1
 8006628:	438a      	bics	r2, r1
 800662a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fd4c 	bl	80070d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f9f2 	bl	8006a28 <UART_SetConfig>
 8006644:	0003      	movs	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e01c      	b.n	8006688 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	490d      	ldr	r1, [pc, #52]	; (8006690 <HAL_UART_Init+0xa8>)
 800665a:	400a      	ands	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	212a      	movs	r1, #42	; 0x2a
 800666a:	438a      	bics	r2, r1
 800666c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2101      	movs	r1, #1
 800667a:	430a      	orrs	r2, r1
 800667c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 fddb 	bl	800723c <UART_CheckIdleState>
 8006686:	0003      	movs	r3, r0
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b002      	add	sp, #8
 800668e:	bd80      	pop	{r7, pc}
 8006690:	ffffb7ff 	.word	0xffffb7ff

08006694 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e032      	b.n	800670c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2288      	movs	r2, #136	; 0x88
 80066aa:	2124      	movs	r1, #36	; 0x24
 80066ac:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2101      	movs	r1, #1
 80066ba:	438a      	bics	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fd f887 	bl	80037ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2290      	movs	r2, #144	; 0x90
 80066e2:	2100      	movs	r1, #0
 80066e4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2288      	movs	r2, #136	; 0x88
 80066ea:	2100      	movs	r1, #0
 80066ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	228c      	movs	r2, #140	; 0x8c
 80066f2:	2100      	movs	r1, #0
 80066f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2284      	movs	r2, #132	; 0x84
 8006706:	2100      	movs	r1, #0
 8006708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	; 0x28
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	1dbb      	adds	r3, r7, #6
 8006722:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2288      	movs	r2, #136	; 0x88
 8006728:	589b      	ldr	r3, [r3, r2]
 800672a:	2b20      	cmp	r3, #32
 800672c:	d000      	beq.n	8006730 <HAL_UART_Transmit+0x1c>
 800672e:	e090      	b.n	8006852 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_UART_Transmit+0x2a>
 8006736:	1dbb      	adds	r3, r7, #6
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e088      	b.n	8006854 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	015b      	lsls	r3, r3, #5
 800674a:	429a      	cmp	r2, r3
 800674c:	d109      	bne.n	8006762 <HAL_UART_Transmit+0x4e>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2201      	movs	r2, #1
 800675a:	4013      	ands	r3, r2
 800675c:	d001      	beq.n	8006762 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e078      	b.n	8006854 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2290      	movs	r2, #144	; 0x90
 8006766:	2100      	movs	r1, #0
 8006768:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2288      	movs	r2, #136	; 0x88
 800676e:	2121      	movs	r1, #33	; 0x21
 8006770:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006772:	f7fd fa3b 	bl	8003bec <HAL_GetTick>
 8006776:	0003      	movs	r3, r0
 8006778:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1dba      	adds	r2, r7, #6
 800677e:	2154      	movs	r1, #84	; 0x54
 8006780:	8812      	ldrh	r2, [r2, #0]
 8006782:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1dba      	adds	r2, r7, #6
 8006788:	2156      	movs	r1, #86	; 0x56
 800678a:	8812      	ldrh	r2, [r2, #0]
 800678c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	015b      	lsls	r3, r3, #5
 8006796:	429a      	cmp	r2, r3
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x98>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b4:	e030      	b.n	8006818 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	0013      	movs	r3, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	f000 fde4 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80067c8:	1e03      	subs	r3, r0, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2288      	movs	r2, #136	; 0x88
 80067d0:	2120      	movs	r1, #32
 80067d2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e03d      	b.n	8006854 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	001a      	movs	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	05d2      	lsls	r2, r2, #23
 80067ea:	0dd2      	lsrs	r2, r2, #23
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2256      	movs	r2, #86	; 0x56
 800680a:	5a9b      	ldrh	r3, [r3, r2]
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b299      	uxth	r1, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2256      	movs	r2, #86	; 0x56
 8006816:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2256      	movs	r2, #86	; 0x56
 800681c:	5a9b      	ldrh	r3, [r3, r2]
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1c8      	bne.n	80067b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	0013      	movs	r3, r2
 800682e:	2200      	movs	r2, #0
 8006830:	2140      	movs	r1, #64	; 0x40
 8006832:	f000 fdad 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006836:	1e03      	subs	r3, r0, #0
 8006838:	d005      	beq.n	8006846 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2288      	movs	r2, #136	; 0x88
 800683e:	2120      	movs	r1, #32
 8006840:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2288      	movs	r2, #136	; 0x88
 800684a:	2120      	movs	r1, #32
 800684c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	0018      	movs	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	b008      	add	sp, #32
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	1dbb      	adds	r3, r7, #6
 800686a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	228c      	movs	r2, #140	; 0x8c
 8006870:	589b      	ldr	r3, [r3, r2]
 8006872:	2b20      	cmp	r3, #32
 8006874:	d000      	beq.n	8006878 <HAL_UART_Receive+0x1c>
 8006876:	e0d0      	b.n	8006a1a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_UART_Receive+0x2a>
 800687e:	1dbb      	adds	r3, r7, #6
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e0c8      	b.n	8006a1c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	015b      	lsls	r3, r3, #5
 8006892:	429a      	cmp	r2, r3
 8006894:	d109      	bne.n	80068aa <HAL_UART_Receive+0x4e>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d105      	bne.n	80068aa <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2201      	movs	r2, #1
 80068a2:	4013      	ands	r3, r2
 80068a4:	d001      	beq.n	80068aa <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e0b8      	b.n	8006a1c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2290      	movs	r2, #144	; 0x90
 80068ae:	2100      	movs	r1, #0
 80068b0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	228c      	movs	r2, #140	; 0x8c
 80068b6:	2122      	movs	r1, #34	; 0x22
 80068b8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c0:	f7fd f994 	bl	8003bec <HAL_GetTick>
 80068c4:	0003      	movs	r3, r0
 80068c6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1dba      	adds	r2, r7, #6
 80068cc:	215c      	movs	r1, #92	; 0x5c
 80068ce:	8812      	ldrh	r2, [r2, #0]
 80068d0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1dba      	adds	r2, r7, #6
 80068d6:	215e      	movs	r1, #94	; 0x5e
 80068d8:	8812      	ldrh	r2, [r2, #0]
 80068da:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	015b      	lsls	r3, r3, #5
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d10d      	bne.n	8006904 <HAL_UART_Receive+0xa8>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_UART_Receive+0x9e>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2260      	movs	r2, #96	; 0x60
 80068f4:	494b      	ldr	r1, [pc, #300]	; (8006a24 <HAL_UART_Receive+0x1c8>)
 80068f6:	5299      	strh	r1, [r3, r2]
 80068f8:	e02e      	b.n	8006958 <HAL_UART_Receive+0xfc>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2260      	movs	r2, #96	; 0x60
 80068fe:	21ff      	movs	r1, #255	; 0xff
 8006900:	5299      	strh	r1, [r3, r2]
 8006902:	e029      	b.n	8006958 <HAL_UART_Receive+0xfc>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10d      	bne.n	8006928 <HAL_UART_Receive+0xcc>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_UART_Receive+0xc2>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2260      	movs	r2, #96	; 0x60
 8006918:	21ff      	movs	r1, #255	; 0xff
 800691a:	5299      	strh	r1, [r3, r2]
 800691c:	e01c      	b.n	8006958 <HAL_UART_Receive+0xfc>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2260      	movs	r2, #96	; 0x60
 8006922:	217f      	movs	r1, #127	; 0x7f
 8006924:	5299      	strh	r1, [r3, r2]
 8006926:	e017      	b.n	8006958 <HAL_UART_Receive+0xfc>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	055b      	lsls	r3, r3, #21
 8006930:	429a      	cmp	r2, r3
 8006932:	d10d      	bne.n	8006950 <HAL_UART_Receive+0xf4>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_UART_Receive+0xea>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2260      	movs	r2, #96	; 0x60
 8006940:	217f      	movs	r1, #127	; 0x7f
 8006942:	5299      	strh	r1, [r3, r2]
 8006944:	e008      	b.n	8006958 <HAL_UART_Receive+0xfc>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2260      	movs	r2, #96	; 0x60
 800694a:	213f      	movs	r1, #63	; 0x3f
 800694c:	5299      	strh	r1, [r3, r2]
 800694e:	e003      	b.n	8006958 <HAL_UART_Receive+0xfc>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2260      	movs	r2, #96	; 0x60
 8006954:	2100      	movs	r1, #0
 8006956:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006958:	2312      	movs	r3, #18
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	2160      	movs	r1, #96	; 0x60
 8006960:	5a52      	ldrh	r2, [r2, r1]
 8006962:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	015b      	lsls	r3, r3, #5
 800696c:	429a      	cmp	r2, r3
 800696e:	d108      	bne.n	8006982 <HAL_UART_Receive+0x126>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e003      	b.n	800698a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800698a:	e03a      	b.n	8006a02 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	0013      	movs	r3, r2
 8006996:	2200      	movs	r2, #0
 8006998:	2120      	movs	r1, #32
 800699a:	f000 fcf9 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 800699e:	1e03      	subs	r3, r0, #0
 80069a0:	d005      	beq.n	80069ae <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	228c      	movs	r2, #140	; 0x8c
 80069a6:	2120      	movs	r1, #32
 80069a8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e036      	b.n	8006a1c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10e      	bne.n	80069d2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2212      	movs	r2, #18
 80069be:	18ba      	adds	r2, r7, r2
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	4013      	ands	r3, r2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3302      	adds	r3, #2
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e00e      	b.n	80069f0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2212      	movs	r2, #18
 80069dc:	18ba      	adds	r2, r7, r2
 80069de:	8812      	ldrh	r2, [r2, #0]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	4013      	ands	r3, r2
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	225e      	movs	r2, #94	; 0x5e
 80069f4:	5a9b      	ldrh	r3, [r3, r2]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b299      	uxth	r1, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	225e      	movs	r2, #94	; 0x5e
 8006a00:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	225e      	movs	r2, #94	; 0x5e
 8006a06:	5a9b      	ldrh	r3, [r3, r2]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1be      	bne.n	800698c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	228c      	movs	r2, #140	; 0x8c
 8006a12:	2120      	movs	r1, #32
 8006a14:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
  }
}
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b008      	add	sp, #32
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	000001ff 	.word	0x000001ff

08006a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a28:	b5b0      	push	{r4, r5, r7, lr}
 8006a2a:	b090      	sub	sp, #64	; 0x40
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a30:	231a      	movs	r3, #26
 8006a32:	2220      	movs	r2, #32
 8006a34:	189b      	adds	r3, r3, r2
 8006a36:	19db      	adds	r3, r3, r7
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4ac1      	ldr	r2, [pc, #772]	; (8006d60 <UART_SetConfig+0x338>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	430b      	orrs	r3, r1
 8006a68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4abc      	ldr	r2, [pc, #752]	; (8006d64 <UART_SetConfig+0x33c>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	0018      	movs	r0, r3
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	68d9      	ldr	r1, [r3, #12]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	0003      	movs	r3, r0
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4ab6      	ldr	r2, [pc, #728]	; (8006d68 <UART_SetConfig+0x340>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <UART_SetConfig+0x80>
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4ab4      	ldr	r2, [pc, #720]	; (8006d6c <UART_SetConfig+0x344>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	4ab0      	ldr	r2, [pc, #704]	; (8006d70 <UART_SetConfig+0x348>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	220f      	movs	r2, #15
 8006ac6:	4393      	bics	r3, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	0003      	movs	r3, r0
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4aa5      	ldr	r2, [pc, #660]	; (8006d74 <UART_SetConfig+0x34c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d131      	bne.n	8006b46 <UART_SetConfig+0x11e>
 8006ae2:	4ba5      	ldr	r3, [pc, #660]	; (8006d78 <UART_SetConfig+0x350>)
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d01d      	beq.n	8006b2a <UART_SetConfig+0x102>
 8006aee:	d823      	bhi.n	8006b38 <UART_SetConfig+0x110>
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d00c      	beq.n	8006b0e <UART_SetConfig+0xe6>
 8006af4:	d820      	bhi.n	8006b38 <UART_SetConfig+0x110>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <UART_SetConfig+0xd8>
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d00e      	beq.n	8006b1c <UART_SetConfig+0xf4>
 8006afe:	e01b      	b.n	8006b38 <UART_SetConfig+0x110>
 8006b00:	231b      	movs	r3, #27
 8006b02:	2220      	movs	r2, #32
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	19db      	adds	r3, r3, r7
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e154      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b0e:	231b      	movs	r3, #27
 8006b10:	2220      	movs	r2, #32
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	19db      	adds	r3, r3, r7
 8006b16:	2202      	movs	r2, #2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e14d      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b1c:	231b      	movs	r3, #27
 8006b1e:	2220      	movs	r2, #32
 8006b20:	189b      	adds	r3, r3, r2
 8006b22:	19db      	adds	r3, r3, r7
 8006b24:	2204      	movs	r2, #4
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e146      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b2a:	231b      	movs	r3, #27
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	189b      	adds	r3, r3, r2
 8006b30:	19db      	adds	r3, r3, r7
 8006b32:	2208      	movs	r2, #8
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e13f      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b38:	231b      	movs	r3, #27
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	19db      	adds	r3, r3, r7
 8006b40:	2210      	movs	r2, #16
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e138      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a8c      	ldr	r2, [pc, #560]	; (8006d7c <UART_SetConfig+0x354>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d131      	bne.n	8006bb4 <UART_SetConfig+0x18c>
 8006b50:	4b89      	ldr	r3, [pc, #548]	; (8006d78 <UART_SetConfig+0x350>)
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	220c      	movs	r2, #12
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d01d      	beq.n	8006b98 <UART_SetConfig+0x170>
 8006b5c:	d823      	bhi.n	8006ba6 <UART_SetConfig+0x17e>
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d00c      	beq.n	8006b7c <UART_SetConfig+0x154>
 8006b62:	d820      	bhi.n	8006ba6 <UART_SetConfig+0x17e>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <UART_SetConfig+0x146>
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d00e      	beq.n	8006b8a <UART_SetConfig+0x162>
 8006b6c:	e01b      	b.n	8006ba6 <UART_SetConfig+0x17e>
 8006b6e:	231b      	movs	r3, #27
 8006b70:	2220      	movs	r2, #32
 8006b72:	189b      	adds	r3, r3, r2
 8006b74:	19db      	adds	r3, r3, r7
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e11d      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b7c:	231b      	movs	r3, #27
 8006b7e:	2220      	movs	r2, #32
 8006b80:	189b      	adds	r3, r3, r2
 8006b82:	19db      	adds	r3, r3, r7
 8006b84:	2202      	movs	r2, #2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e116      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b8a:	231b      	movs	r3, #27
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	19db      	adds	r3, r3, r7
 8006b92:	2204      	movs	r2, #4
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e10f      	b.n	8006db8 <UART_SetConfig+0x390>
 8006b98:	231b      	movs	r3, #27
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e108      	b.n	8006db8 <UART_SetConfig+0x390>
 8006ba6:	231b      	movs	r3, #27
 8006ba8:	2220      	movs	r2, #32
 8006baa:	189b      	adds	r3, r3, r2
 8006bac:	19db      	adds	r3, r3, r7
 8006bae:	2210      	movs	r2, #16
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e101      	b.n	8006db8 <UART_SetConfig+0x390>
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a71      	ldr	r2, [pc, #452]	; (8006d80 <UART_SetConfig+0x358>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d131      	bne.n	8006c22 <UART_SetConfig+0x1fa>
 8006bbe:	4b6e      	ldr	r3, [pc, #440]	; (8006d78 <UART_SetConfig+0x350>)
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	2230      	movs	r2, #48	; 0x30
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b30      	cmp	r3, #48	; 0x30
 8006bc8:	d01d      	beq.n	8006c06 <UART_SetConfig+0x1de>
 8006bca:	d823      	bhi.n	8006c14 <UART_SetConfig+0x1ec>
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d00c      	beq.n	8006bea <UART_SetConfig+0x1c2>
 8006bd0:	d820      	bhi.n	8006c14 <UART_SetConfig+0x1ec>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <UART_SetConfig+0x1b4>
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d00e      	beq.n	8006bf8 <UART_SetConfig+0x1d0>
 8006bda:	e01b      	b.n	8006c14 <UART_SetConfig+0x1ec>
 8006bdc:	231b      	movs	r3, #27
 8006bde:	2220      	movs	r2, #32
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	e0e6      	b.n	8006db8 <UART_SetConfig+0x390>
 8006bea:	231b      	movs	r3, #27
 8006bec:	2220      	movs	r2, #32
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	19db      	adds	r3, r3, r7
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e0df      	b.n	8006db8 <UART_SetConfig+0x390>
 8006bf8:	231b      	movs	r3, #27
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	19db      	adds	r3, r3, r7
 8006c00:	2204      	movs	r2, #4
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e0d8      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c06:	231b      	movs	r3, #27
 8006c08:	2220      	movs	r2, #32
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	19db      	adds	r3, r3, r7
 8006c0e:	2208      	movs	r2, #8
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e0d1      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c14:	231b      	movs	r3, #27
 8006c16:	2220      	movs	r2, #32
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	19db      	adds	r3, r3, r7
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e0ca      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a57      	ldr	r2, [pc, #348]	; (8006d84 <UART_SetConfig+0x35c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d106      	bne.n	8006c3a <UART_SetConfig+0x212>
 8006c2c:	231b      	movs	r3, #27
 8006c2e:	2220      	movs	r2, #32
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	19db      	adds	r3, r3, r7
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e0be      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a52      	ldr	r2, [pc, #328]	; (8006d88 <UART_SetConfig+0x360>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d106      	bne.n	8006c52 <UART_SetConfig+0x22a>
 8006c44:	231b      	movs	r3, #27
 8006c46:	2220      	movs	r2, #32
 8006c48:	189b      	adds	r3, r3, r2
 8006c4a:	19db      	adds	r3, r3, r7
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e0b2      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4d      	ldr	r2, [pc, #308]	; (8006d8c <UART_SetConfig+0x364>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d106      	bne.n	8006c6a <UART_SetConfig+0x242>
 8006c5c:	231b      	movs	r3, #27
 8006c5e:	2220      	movs	r2, #32
 8006c60:	189b      	adds	r3, r3, r2
 8006c62:	19db      	adds	r3, r3, r7
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e0a6      	b.n	8006db8 <UART_SetConfig+0x390>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3e      	ldr	r2, [pc, #248]	; (8006d68 <UART_SetConfig+0x340>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d13e      	bne.n	8006cf2 <UART_SetConfig+0x2ca>
 8006c74:	4b40      	ldr	r3, [pc, #256]	; (8006d78 <UART_SetConfig+0x350>)
 8006c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c78:	23c0      	movs	r3, #192	; 0xc0
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	22c0      	movs	r2, #192	; 0xc0
 8006c80:	0112      	lsls	r2, r2, #4
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d027      	beq.n	8006cd6 <UART_SetConfig+0x2ae>
 8006c86:	22c0      	movs	r2, #192	; 0xc0
 8006c88:	0112      	lsls	r2, r2, #4
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d82a      	bhi.n	8006ce4 <UART_SetConfig+0x2bc>
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	0112      	lsls	r2, r2, #4
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d011      	beq.n	8006cba <UART_SetConfig+0x292>
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d822      	bhi.n	8006ce4 <UART_SetConfig+0x2bc>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <UART_SetConfig+0x284>
 8006ca2:	2280      	movs	r2, #128	; 0x80
 8006ca4:	00d2      	lsls	r2, r2, #3
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <UART_SetConfig+0x2a0>
 8006caa:	e01b      	b.n	8006ce4 <UART_SetConfig+0x2bc>
 8006cac:	231b      	movs	r3, #27
 8006cae:	2220      	movs	r2, #32
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	19db      	adds	r3, r3, r7
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e07e      	b.n	8006db8 <UART_SetConfig+0x390>
 8006cba:	231b      	movs	r3, #27
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	19db      	adds	r3, r3, r7
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e077      	b.n	8006db8 <UART_SetConfig+0x390>
 8006cc8:	231b      	movs	r3, #27
 8006cca:	2220      	movs	r2, #32
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	19db      	adds	r3, r3, r7
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e070      	b.n	8006db8 <UART_SetConfig+0x390>
 8006cd6:	231b      	movs	r3, #27
 8006cd8:	2220      	movs	r2, #32
 8006cda:	189b      	adds	r3, r3, r2
 8006cdc:	19db      	adds	r3, r3, r7
 8006cde:	2208      	movs	r2, #8
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e069      	b.n	8006db8 <UART_SetConfig+0x390>
 8006ce4:	231b      	movs	r3, #27
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	19db      	adds	r3, r3, r7
 8006cec:	2210      	movs	r2, #16
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e062      	b.n	8006db8 <UART_SetConfig+0x390>
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <UART_SetConfig+0x344>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d157      	bne.n	8006dac <UART_SetConfig+0x384>
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <UART_SetConfig+0x350>)
 8006cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d00:	23c0      	movs	r3, #192	; 0xc0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4013      	ands	r3, r2
 8006d06:	22c0      	movs	r2, #192	; 0xc0
 8006d08:	0092      	lsls	r2, r2, #2
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d040      	beq.n	8006d90 <UART_SetConfig+0x368>
 8006d0e:	22c0      	movs	r2, #192	; 0xc0
 8006d10:	0092      	lsls	r2, r2, #2
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d843      	bhi.n	8006d9e <UART_SetConfig+0x376>
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d011      	beq.n	8006d42 <UART_SetConfig+0x31a>
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	0092      	lsls	r2, r2, #2
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d83b      	bhi.n	8006d9e <UART_SetConfig+0x376>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <UART_SetConfig+0x30c>
 8006d2a:	2280      	movs	r2, #128	; 0x80
 8006d2c:	0052      	lsls	r2, r2, #1
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <UART_SetConfig+0x328>
 8006d32:	e034      	b.n	8006d9e <UART_SetConfig+0x376>
 8006d34:	231b      	movs	r3, #27
 8006d36:	2220      	movs	r2, #32
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	19db      	adds	r3, r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e03a      	b.n	8006db8 <UART_SetConfig+0x390>
 8006d42:	231b      	movs	r3, #27
 8006d44:	2220      	movs	r2, #32
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	19db      	adds	r3, r3, r7
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e033      	b.n	8006db8 <UART_SetConfig+0x390>
 8006d50:	231b      	movs	r3, #27
 8006d52:	2220      	movs	r2, #32
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	19db      	adds	r3, r3, r7
 8006d58:	2204      	movs	r2, #4
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e02c      	b.n	8006db8 <UART_SetConfig+0x390>
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	cfff69f3 	.word	0xcfff69f3
 8006d64:	ffffcfff 	.word	0xffffcfff
 8006d68:	40008000 	.word	0x40008000
 8006d6c:	40008400 	.word	0x40008400
 8006d70:	11fff4ff 	.word	0x11fff4ff
 8006d74:	40013800 	.word	0x40013800
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40004400 	.word	0x40004400
 8006d80:	40004800 	.word	0x40004800
 8006d84:	40004c00 	.word	0x40004c00
 8006d88:	40005000 	.word	0x40005000
 8006d8c:	40013c00 	.word	0x40013c00
 8006d90:	231b      	movs	r3, #27
 8006d92:	2220      	movs	r2, #32
 8006d94:	189b      	adds	r3, r3, r2
 8006d96:	19db      	adds	r3, r3, r7
 8006d98:	2208      	movs	r2, #8
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e00c      	b.n	8006db8 <UART_SetConfig+0x390>
 8006d9e:	231b      	movs	r3, #27
 8006da0:	2220      	movs	r2, #32
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	19db      	adds	r3, r3, r7
 8006da6:	2210      	movs	r2, #16
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e005      	b.n	8006db8 <UART_SetConfig+0x390>
 8006dac:	231b      	movs	r3, #27
 8006dae:	2220      	movs	r2, #32
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	19db      	adds	r3, r3, r7
 8006db4:	2210      	movs	r2, #16
 8006db6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4ac1      	ldr	r2, [pc, #772]	; (80070c4 <UART_SetConfig+0x69c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d005      	beq.n	8006dce <UART_SetConfig+0x3a6>
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4ac0      	ldr	r2, [pc, #768]	; (80070c8 <UART_SetConfig+0x6a0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d000      	beq.n	8006dce <UART_SetConfig+0x3a6>
 8006dcc:	e093      	b.n	8006ef6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dce:	231b      	movs	r3, #27
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	19db      	adds	r3, r3, r7
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d015      	beq.n	8006e08 <UART_SetConfig+0x3e0>
 8006ddc:	dc18      	bgt.n	8006e10 <UART_SetConfig+0x3e8>
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00d      	beq.n	8006dfe <UART_SetConfig+0x3d6>
 8006de2:	dc15      	bgt.n	8006e10 <UART_SetConfig+0x3e8>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <UART_SetConfig+0x3c6>
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d005      	beq.n	8006df8 <UART_SetConfig+0x3d0>
 8006dec:	e010      	b.n	8006e10 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dee:	f7fe f855 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8006df2:	0003      	movs	r3, r0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df6:	e014      	b.n	8006e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df8:	4bb4      	ldr	r3, [pc, #720]	; (80070cc <UART_SetConfig+0x6a4>)
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dfc:	e011      	b.n	8006e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fd ffc1 	bl	8004d84 <HAL_RCC_GetSysClockFreq>
 8006e02:	0003      	movs	r3, r0
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e06:	e00c      	b.n	8006e22 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e0e:	e008      	b.n	8006e22 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e14:	231a      	movs	r3, #26
 8006e16:	2220      	movs	r2, #32
 8006e18:	189b      	adds	r3, r3, r2
 8006e1a:	19db      	adds	r3, r3, r7
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
        break;
 8006e20:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d100      	bne.n	8006e2a <UART_SetConfig+0x402>
 8006e28:	e135      	b.n	8007096 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e2e:	4ba8      	ldr	r3, [pc, #672]	; (80070d0 <UART_SetConfig+0x6a8>)
 8006e30:	0052      	lsls	r2, r2, #1
 8006e32:	5ad3      	ldrh	r3, [r2, r3]
 8006e34:	0019      	movs	r1, r3
 8006e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e38:	f7f9 f980 	bl	800013c <__udivsi3>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	0013      	movs	r3, r2
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	189b      	adds	r3, r3, r2
 8006e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d305      	bcc.n	8006e5c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d906      	bls.n	8006e6a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006e5c:	231a      	movs	r3, #26
 8006e5e:	2220      	movs	r2, #32
 8006e60:	189b      	adds	r3, r3, r2
 8006e62:	19db      	adds	r3, r3, r7
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e044      	b.n	8006ef4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e76:	4b96      	ldr	r3, [pc, #600]	; (80070d0 <UART_SetConfig+0x6a8>)
 8006e78:	0052      	lsls	r2, r2, #1
 8006e7a:	5ad3      	ldrh	r3, [r2, r3]
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	69b8      	ldr	r0, [r7, #24]
 8006e88:	69f9      	ldr	r1, [r7, #28]
 8006e8a:	f7f9 fb0b 	bl	80004a4 <__aeabi_uldivmod>
 8006e8e:	0002      	movs	r2, r0
 8006e90:	000b      	movs	r3, r1
 8006e92:	0e11      	lsrs	r1, r2, #24
 8006e94:	021d      	lsls	r5, r3, #8
 8006e96:	430d      	orrs	r5, r1
 8006e98:	0214      	lsls	r4, r2, #8
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68b8      	ldr	r0, [r7, #8]
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	1900      	adds	r0, r0, r4
 8006eac:	4169      	adcs	r1, r5
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f7f9 faf2 	bl	80004a4 <__aeabi_uldivmod>
 8006ec0:	0002      	movs	r2, r0
 8006ec2:	000b      	movs	r3, r1
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eca:	23c0      	movs	r3, #192	; 0xc0
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d309      	bcc.n	8006ee6 <UART_SetConfig+0x4be>
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	035b      	lsls	r3, r3, #13
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d204      	bcs.n	8006ee6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee2:	60da      	str	r2, [r3, #12]
 8006ee4:	e006      	b.n	8006ef4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006ee6:	231a      	movs	r3, #26
 8006ee8:	2220      	movs	r2, #32
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	19db      	adds	r3, r3, r7
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006ef2:	e0d0      	b.n	8007096 <UART_SetConfig+0x66e>
 8006ef4:	e0cf      	b.n	8007096 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d000      	beq.n	8006f04 <UART_SetConfig+0x4dc>
 8006f02:	e070      	b.n	8006fe6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006f04:	231b      	movs	r3, #27
 8006f06:	2220      	movs	r2, #32
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	19db      	adds	r3, r3, r7
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d015      	beq.n	8006f3e <UART_SetConfig+0x516>
 8006f12:	dc18      	bgt.n	8006f46 <UART_SetConfig+0x51e>
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d00d      	beq.n	8006f34 <UART_SetConfig+0x50c>
 8006f18:	dc15      	bgt.n	8006f46 <UART_SetConfig+0x51e>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <UART_SetConfig+0x4fc>
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d005      	beq.n	8006f2e <UART_SetConfig+0x506>
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd ffba 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f2c:	e014      	b.n	8006f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f2e:	4b67      	ldr	r3, [pc, #412]	; (80070cc <UART_SetConfig+0x6a4>)
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f32:	e011      	b.n	8006f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f34:	f7fd ff26 	bl	8004d84 <HAL_RCC_GetSysClockFreq>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f3c:	e00c      	b.n	8006f58 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f44:	e008      	b.n	8006f58 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f4a:	231a      	movs	r3, #26
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	19db      	adds	r3, r3, r7
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
        break;
 8006f56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d100      	bne.n	8006f60 <UART_SetConfig+0x538>
 8006f5e:	e09a      	b.n	8007096 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f64:	4b5a      	ldr	r3, [pc, #360]	; (80070d0 <UART_SetConfig+0x6a8>)
 8006f66:	0052      	lsls	r2, r2, #1
 8006f68:	5ad3      	ldrh	r3, [r2, r3]
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f6e:	f7f9 f8e5 	bl	800013c <__udivsi3>
 8006f72:	0003      	movs	r3, r0
 8006f74:	005a      	lsls	r2, r3, #1
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	18d2      	adds	r2, r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	0019      	movs	r1, r3
 8006f84:	0010      	movs	r0, r2
 8006f86:	f7f9 f8d9 	bl	800013c <__udivsi3>
 8006f8a:	0003      	movs	r3, r0
 8006f8c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d921      	bls.n	8006fd8 <UART_SetConfig+0x5b0>
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	2380      	movs	r3, #128	; 0x80
 8006f98:	025b      	lsls	r3, r3, #9
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d21c      	bcs.n	8006fd8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	200e      	movs	r0, #14
 8006fa4:	2420      	movs	r4, #32
 8006fa6:	1903      	adds	r3, r0, r4
 8006fa8:	19db      	adds	r3, r3, r7
 8006faa:	210f      	movs	r1, #15
 8006fac:	438a      	bics	r2, r1
 8006fae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2207      	movs	r2, #7
 8006fb8:	4013      	ands	r3, r2
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	1903      	adds	r3, r0, r4
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	1902      	adds	r2, r0, r4
 8006fc2:	19d2      	adds	r2, r2, r7
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	1902      	adds	r2, r0, r4
 8006fd0:	19d2      	adds	r2, r2, r7
 8006fd2:	8812      	ldrh	r2, [r2, #0]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	e05e      	b.n	8007096 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd8:	231a      	movs	r3, #26
 8006fda:	2220      	movs	r2, #32
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	19db      	adds	r3, r3, r7
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e057      	b.n	8007096 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fe6:	231b      	movs	r3, #27
 8006fe8:	2220      	movs	r2, #32
 8006fea:	189b      	adds	r3, r3, r2
 8006fec:	19db      	adds	r3, r3, r7
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d015      	beq.n	8007020 <UART_SetConfig+0x5f8>
 8006ff4:	dc18      	bgt.n	8007028 <UART_SetConfig+0x600>
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d00d      	beq.n	8007016 <UART_SetConfig+0x5ee>
 8006ffa:	dc15      	bgt.n	8007028 <UART_SetConfig+0x600>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <UART_SetConfig+0x5de>
 8007000:	2b02      	cmp	r3, #2
 8007002:	d005      	beq.n	8007010 <UART_SetConfig+0x5e8>
 8007004:	e010      	b.n	8007028 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007006:	f7fd ff49 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 800700a:	0003      	movs	r3, r0
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800700e:	e014      	b.n	800703a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007010:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <UART_SetConfig+0x6a4>)
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007014:	e011      	b.n	800703a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007016:	f7fd feb5 	bl	8004d84 <HAL_RCC_GetSysClockFreq>
 800701a:	0003      	movs	r3, r0
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800701e:	e00c      	b.n	800703a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007026:	e008      	b.n	800703a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800702c:	231a      	movs	r3, #26
 800702e:	2220      	movs	r2, #32
 8007030:	189b      	adds	r3, r3, r2
 8007032:	19db      	adds	r3, r3, r7
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
        break;
 8007038:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02a      	beq.n	8007096 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <UART_SetConfig+0x6a8>)
 8007046:	0052      	lsls	r2, r2, #1
 8007048:	5ad3      	ldrh	r3, [r2, r3]
 800704a:	0019      	movs	r1, r3
 800704c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800704e:	f7f9 f875 	bl	800013c <__udivsi3>
 8007052:	0003      	movs	r3, r0
 8007054:	001a      	movs	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	18d2      	adds	r2, r2, r3
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	0019      	movs	r1, r3
 8007064:	0010      	movs	r0, r2
 8007066:	f7f9 f869 	bl	800013c <__udivsi3>
 800706a:	0003      	movs	r3, r0
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d90a      	bls.n	800708a <UART_SetConfig+0x662>
 8007074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	025b      	lsls	r3, r3, #9
 800707a:	429a      	cmp	r2, r3
 800707c:	d205      	bcs.n	800708a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	b29a      	uxth	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e005      	b.n	8007096 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800708a:	231a      	movs	r3, #26
 800708c:	2220      	movs	r2, #32
 800708e:	189b      	adds	r3, r3, r2
 8007090:	19db      	adds	r3, r3, r7
 8007092:	2201      	movs	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	226a      	movs	r2, #106	; 0x6a
 800709a:	2101      	movs	r1, #1
 800709c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2268      	movs	r2, #104	; 0x68
 80070a2:	2101      	movs	r1, #1
 80070a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2200      	movs	r2, #0
 80070aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	2200      	movs	r2, #0
 80070b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070b2:	231a      	movs	r3, #26
 80070b4:	2220      	movs	r2, #32
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	19db      	adds	r3, r3, r7
 80070ba:	781b      	ldrb	r3, [r3, #0]
}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b010      	add	sp, #64	; 0x40
 80070c2:	bdb0      	pop	{r4, r5, r7, pc}
 80070c4:	40008000 	.word	0x40008000
 80070c8:	40008400 	.word	0x40008400
 80070cc:	00f42400 	.word	0x00f42400
 80070d0:	08013e00 	.word	0x08013e00

080070d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	2208      	movs	r2, #8
 80070e2:	4013      	ands	r3, r2
 80070e4:	d00b      	beq.n	80070fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4a4a      	ldr	r2, [pc, #296]	; (8007218 <UART_AdvFeatureConfig+0x144>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	0019      	movs	r1, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	2201      	movs	r2, #1
 8007104:	4013      	ands	r3, r2
 8007106:	d00b      	beq.n	8007120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4a43      	ldr	r2, [pc, #268]	; (800721c <UART_AdvFeatureConfig+0x148>)
 8007110:	4013      	ands	r3, r2
 8007112:	0019      	movs	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	2202      	movs	r2, #2
 8007126:	4013      	ands	r3, r2
 8007128:	d00b      	beq.n	8007142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a3b      	ldr	r2, [pc, #236]	; (8007220 <UART_AdvFeatureConfig+0x14c>)
 8007132:	4013      	ands	r3, r2
 8007134:	0019      	movs	r1, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	2204      	movs	r2, #4
 8007148:	4013      	ands	r3, r2
 800714a:	d00b      	beq.n	8007164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4a34      	ldr	r2, [pc, #208]	; (8007224 <UART_AdvFeatureConfig+0x150>)
 8007154:	4013      	ands	r3, r2
 8007156:	0019      	movs	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	2210      	movs	r2, #16
 800716a:	4013      	ands	r3, r2
 800716c:	d00b      	beq.n	8007186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <UART_AdvFeatureConfig+0x154>)
 8007176:	4013      	ands	r3, r2
 8007178:	0019      	movs	r1, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	2220      	movs	r2, #32
 800718c:	4013      	ands	r3, r2
 800718e:	d00b      	beq.n	80071a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	4a25      	ldr	r2, [pc, #148]	; (800722c <UART_AdvFeatureConfig+0x158>)
 8007198:	4013      	ands	r3, r2
 800719a:	0019      	movs	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	2240      	movs	r2, #64	; 0x40
 80071ae:	4013      	ands	r3, r2
 80071b0:	d01d      	beq.n	80071ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <UART_AdvFeatureConfig+0x15c>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	0019      	movs	r1, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	035b      	lsls	r3, r3, #13
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d10b      	bne.n	80071ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <UART_AdvFeatureConfig+0x160>)
 80071de:	4013      	ands	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	4013      	ands	r3, r2
 80071f6:	d00b      	beq.n	8007210 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <UART_AdvFeatureConfig+0x164>)
 8007200:	4013      	ands	r3, r2
 8007202:	0019      	movs	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b002      	add	sp, #8
 8007216:	bd80      	pop	{r7, pc}
 8007218:	ffff7fff 	.word	0xffff7fff
 800721c:	fffdffff 	.word	0xfffdffff
 8007220:	fffeffff 	.word	0xfffeffff
 8007224:	fffbffff 	.word	0xfffbffff
 8007228:	ffffefff 	.word	0xffffefff
 800722c:	ffffdfff 	.word	0xffffdfff
 8007230:	ffefffff 	.word	0xffefffff
 8007234:	ff9fffff 	.word	0xff9fffff
 8007238:	fff7ffff 	.word	0xfff7ffff

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b092      	sub	sp, #72	; 0x48
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2290      	movs	r2, #144	; 0x90
 8007248:	2100      	movs	r1, #0
 800724a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724c:	f7fc fcce 	bl	8003bec <HAL_GetTick>
 8007250:	0003      	movs	r3, r0
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	4013      	ands	r3, r2
 800725e:	2b08      	cmp	r3, #8
 8007260:	d12d      	bne.n	80072be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	0391      	lsls	r1, r2, #14
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4a47      	ldr	r2, [pc, #284]	; (8007388 <UART_CheckIdleState+0x14c>)
 800726c:	9200      	str	r2, [sp, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	f000 f88e 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d022      	beq.n	80072be <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007278:	f3ef 8310 	mrs	r3, PRIMASK
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
 8007282:	2301      	movs	r3, #1
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	f383 8810 	msr	PRIMASK, r3
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	438a      	bics	r2, r1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2288      	movs	r2, #136	; 0x88
 80072ae:	2120      	movs	r1, #32
 80072b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2284      	movs	r2, #132	; 0x84
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e060      	b.n	8007380 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2204      	movs	r2, #4
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d146      	bne.n	800735a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	03d1      	lsls	r1, r2, #15
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4a2c      	ldr	r2, [pc, #176]	; (8007388 <UART_CheckIdleState+0x14c>)
 80072d6:	9200      	str	r2, [sp, #0]
 80072d8:	2200      	movs	r2, #0
 80072da:	f000 f859 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80072de:	1e03      	subs	r3, r0, #0
 80072e0:	d03b      	beq.n	800735a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e2:	f3ef 8310 	mrs	r3, PRIMASK
 80072e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80072e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	2301      	movs	r3, #1
 80072ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f383 8810 	msr	PRIMASK, r3
}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4922      	ldr	r1, [pc, #136]	; (800738c <UART_CheckIdleState+0x150>)
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007314:	f3ef 8310 	mrs	r3, PRIMASK
 8007318:	61bb      	str	r3, [r7, #24]
  return(result);
 800731a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	633b      	str	r3, [r7, #48]	; 0x30
 800731e:	2301      	movs	r3, #1
 8007320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f383 8810 	msr	PRIMASK, r3
}
 8007328:	46c0      	nop			; (mov r8, r8)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2101      	movs	r1, #1
 8007336:	438a      	bics	r2, r1
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	f383 8810 	msr	PRIMASK, r3
}
 8007344:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	228c      	movs	r2, #140	; 0x8c
 800734a:	2120      	movs	r1, #32
 800734c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2284      	movs	r2, #132	; 0x84
 8007352:	2100      	movs	r1, #0
 8007354:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e012      	b.n	8007380 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2288      	movs	r2, #136	; 0x88
 800735e:	2120      	movs	r1, #32
 8007360:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	228c      	movs	r2, #140	; 0x8c
 8007366:	2120      	movs	r1, #32
 8007368:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2284      	movs	r2, #132	; 0x84
 800737a:	2100      	movs	r1, #0
 800737c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	0018      	movs	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	b010      	add	sp, #64	; 0x40
 8007386:	bd80      	pop	{r7, pc}
 8007388:	01ffffff 	.word	0x01ffffff
 800738c:	fffffedf 	.word	0xfffffedf

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	1dfb      	adds	r3, r7, #7
 800739e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e051      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	3301      	adds	r3, #1
 80073a6:	d04e      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a8:	f7fc fc20 	bl	8003bec <HAL_GetTick>
 80073ac:	0002      	movs	r2, r0
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d302      	bcc.n	80073be <UART_WaitOnFlagUntilTimeout+0x2e>
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e051      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2204      	movs	r2, #4
 80073ca:	4013      	ands	r3, r2
 80073cc:	d03b      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d038      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d035      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2208      	movs	r2, #8
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d111      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2208      	movs	r2, #8
 80073ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 f83c 	bl	8007470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2290      	movs	r2, #144	; 0x90
 80073fc:	2108      	movs	r1, #8
 80073fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2284      	movs	r2, #132	; 0x84
 8007404:	2100      	movs	r1, #0
 8007406:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e02c      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69da      	ldr	r2, [r3, #28]
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	401a      	ands	r2, r3
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	429a      	cmp	r2, r3
 800741e:	d112      	bne.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2280      	movs	r2, #128	; 0x80
 8007426:	0112      	lsls	r2, r2, #4
 8007428:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0018      	movs	r0, r3
 800742e:	f000 f81f 	bl	8007470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2290      	movs	r2, #144	; 0x90
 8007436:	2120      	movs	r1, #32
 8007438:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2284      	movs	r2, #132	; 0x84
 800743e:	2100      	movs	r1, #0
 8007440:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e00f      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	425a      	negs	r2, r3
 8007456:	4153      	adcs	r3, r2
 8007458:	b2db      	uxtb	r3, r3
 800745a:	001a      	movs	r2, r3
 800745c:	1dfb      	adds	r3, r7, #7
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d09e      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	0018      	movs	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	b004      	add	sp, #16
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08e      	sub	sp, #56	; 0x38
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007478:	f3ef 8310 	mrs	r3, PRIMASK
 800747c:	617b      	str	r3, [r7, #20]
  return(result);
 800747e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
 8007482:	2301      	movs	r3, #1
 8007484:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4926      	ldr	r1, [pc, #152]	; (8007534 <UART_EndRxTransfer+0xc4>)
 800749a:	400a      	ands	r2, r1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f383 8810 	msr	PRIMASK, r3
}
 80074a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	623b      	str	r3, [r7, #32]
  return(result);
 80074b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30
 80074b4:	2301      	movs	r3, #1
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f383 8810 	msr	PRIMASK, r3
}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	491b      	ldr	r1, [pc, #108]	; (8007538 <UART_EndRxTransfer+0xc8>)
 80074cc:	400a      	ands	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	f383 8810 	msr	PRIMASK, r3
}
 80074da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d118      	bne.n	8007516 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e4:	f3ef 8310 	mrs	r3, PRIMASK
 80074e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ee:	2301      	movs	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f383 8810 	msr	PRIMASK, r3
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2110      	movs	r1, #16
 8007506:	438a      	bics	r2, r1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	228c      	movs	r2, #140	; 0x8c
 800751a:	2120      	movs	r1, #32
 800751c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	675a      	str	r2, [r3, #116]	; 0x74
}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	46bd      	mov	sp, r7
 800752e:	b00e      	add	sp, #56	; 0x38
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	fffffedf 	.word	0xfffffedf
 8007538:	effffffe 	.word	0xeffffffe

0800753c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2284      	movs	r2, #132	; 0x84
 8007548:	5c9b      	ldrb	r3, [r3, r2]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_UARTEx_DisableFifoMode+0x16>
 800754e:	2302      	movs	r3, #2
 8007550:	e027      	b.n	80075a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2284      	movs	r2, #132	; 0x84
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2288      	movs	r2, #136	; 0x88
 800755e:	2124      	movs	r1, #36	; 0x24
 8007560:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2101      	movs	r1, #1
 8007576:	438a      	bics	r2, r1
 8007578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2288      	movs	r2, #136	; 0x88
 8007594:	2120      	movs	r1, #32
 8007596:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2284      	movs	r2, #132	; 0x84
 800759c:	2100      	movs	r1, #0
 800759e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	0018      	movs	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b004      	add	sp, #16
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	dfffffff 	.word	0xdfffffff

080075b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2284      	movs	r2, #132	; 0x84
 80075be:	5c9b      	ldrb	r3, [r3, r2]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e02e      	b.n	8007626 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2284      	movs	r2, #132	; 0x84
 80075cc:	2101      	movs	r1, #1
 80075ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2288      	movs	r2, #136	; 0x88
 80075d4:	2124      	movs	r1, #36	; 0x24
 80075d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2101      	movs	r1, #1
 80075ec:	438a      	bics	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	08d9      	lsrs	r1, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f854 	bl	80076b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2288      	movs	r2, #136	; 0x88
 8007618:	2120      	movs	r1, #32
 800761a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2284      	movs	r2, #132	; 0x84
 8007620:	2100      	movs	r1, #0
 8007622:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b004      	add	sp, #16
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2284      	movs	r2, #132	; 0x84
 800763e:	5c9b      	ldrb	r3, [r3, r2]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e02f      	b.n	80076a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2284      	movs	r2, #132	; 0x84
 800764c:	2101      	movs	r1, #1
 800764e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2288      	movs	r2, #136	; 0x88
 8007654:	2124      	movs	r1, #36	; 0x24
 8007656:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2101      	movs	r1, #1
 800766c:	438a      	bics	r2, r1
 800766e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4a0e      	ldr	r2, [pc, #56]	; (80076b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007678:	4013      	ands	r3, r2
 800767a:	0019      	movs	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	0018      	movs	r0, r3
 800768a:	f000 f813 	bl	80076b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2288      	movs	r2, #136	; 0x88
 800769a:	2120      	movs	r1, #32
 800769c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2284      	movs	r2, #132	; 0x84
 80076a2:	2100      	movs	r1, #0
 80076a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	0018      	movs	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b004      	add	sp, #16
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	f1ffffff 	.word	0xf1ffffff

080076b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	226a      	movs	r2, #106	; 0x6a
 80076c8:	2101      	movs	r1, #1
 80076ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2268      	movs	r2, #104	; 0x68
 80076d0:	2101      	movs	r1, #1
 80076d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076d4:	e043      	b.n	800775e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076d6:	260f      	movs	r6, #15
 80076d8:	19bb      	adds	r3, r7, r6
 80076da:	2208      	movs	r2, #8
 80076dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076de:	200e      	movs	r0, #14
 80076e0:	183b      	adds	r3, r7, r0
 80076e2:	2208      	movs	r2, #8
 80076e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	0e5b      	lsrs	r3, r3, #25
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	240d      	movs	r4, #13
 80076f2:	193b      	adds	r3, r7, r4
 80076f4:	2107      	movs	r1, #7
 80076f6:	400a      	ands	r2, r1
 80076f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	0f5b      	lsrs	r3, r3, #29
 8007702:	b2da      	uxtb	r2, r3
 8007704:	250c      	movs	r5, #12
 8007706:	197b      	adds	r3, r7, r5
 8007708:	2107      	movs	r1, #7
 800770a:	400a      	ands	r2, r1
 800770c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800770e:	183b      	adds	r3, r7, r0
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	197a      	adds	r2, r7, r5
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	4914      	ldr	r1, [pc, #80]	; (8007768 <UARTEx_SetNbDataToProcess+0xb4>)
 8007718:	5c8a      	ldrb	r2, [r1, r2]
 800771a:	435a      	muls	r2, r3
 800771c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800771e:	197b      	adds	r3, r7, r5
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	4a12      	ldr	r2, [pc, #72]	; (800776c <UARTEx_SetNbDataToProcess+0xb8>)
 8007724:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007726:	0019      	movs	r1, r3
 8007728:	f7f8 fd92 	bl	8000250 <__divsi3>
 800772c:	0003      	movs	r3, r0
 800772e:	b299      	uxth	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	226a      	movs	r2, #106	; 0x6a
 8007734:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007736:	19bb      	adds	r3, r7, r6
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	193a      	adds	r2, r7, r4
 800773c:	7812      	ldrb	r2, [r2, #0]
 800773e:	490a      	ldr	r1, [pc, #40]	; (8007768 <UARTEx_SetNbDataToProcess+0xb4>)
 8007740:	5c8a      	ldrb	r2, [r1, r2]
 8007742:	435a      	muls	r2, r3
 8007744:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007746:	193b      	adds	r3, r7, r4
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	4a08      	ldr	r2, [pc, #32]	; (800776c <UARTEx_SetNbDataToProcess+0xb8>)
 800774c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800774e:	0019      	movs	r1, r3
 8007750:	f7f8 fd7e 	bl	8000250 <__divsi3>
 8007754:	0003      	movs	r3, r0
 8007756:	b299      	uxth	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2268      	movs	r2, #104	; 0x68
 800775c:	5299      	strh	r1, [r3, r2]
}
 800775e:	46c0      	nop			; (mov r8, r8)
 8007760:	46bd      	mov	sp, r7
 8007762:	b005      	add	sp, #20
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	08013e18 	.word	0x08013e18
 800776c:	08013e20 	.word	0x08013e20

08007770 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007770:	b5b0      	push	{r4, r5, r7, lr}
 8007772:	b0e4      	sub	sp, #400	; 0x190
 8007774:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007776:	24c8      	movs	r4, #200	; 0xc8
 8007778:	193b      	adds	r3, r7, r4
 800777a:	0018      	movs	r0, r3
 800777c:	23c6      	movs	r3, #198	; 0xc6
 800777e:	001a      	movs	r2, r3
 8007780:	2100      	movs	r1, #0
 8007782:	f004 f847 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <astronode_send_cfg_sr+0x64>)
 8007788:	25c8      	movs	r5, #200	; 0xc8
 800778a:	006d      	lsls	r5, r5, #1
 800778c:	195b      	adds	r3, r3, r5
 800778e:	19db      	adds	r3, r3, r7
 8007790:	0018      	movs	r0, r3
 8007792:	23c6      	movs	r3, #198	; 0xc6
 8007794:	001a      	movs	r2, r3
 8007796:	2100      	movs	r1, #0
 8007798:	f004 f83c 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800779c:	193b      	adds	r3, r7, r4
 800779e:	2210      	movs	r2, #16
 80077a0:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 80077a2:	003a      	movs	r2, r7
 80077a4:	193b      	adds	r3, r7, r4
 80077a6:	0011      	movs	r1, r2
 80077a8:	0018      	movs	r0, r3
 80077aa:	f001 fa4d 	bl	8008c48 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 80077ae:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <astronode_send_cfg_sr+0x64>)
 80077b0:	195b      	adds	r3, r3, r5
 80077b2:	19db      	adds	r3, r3, r7
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b90      	cmp	r3, #144	; 0x90
 80077b8:	d104      	bne.n	80077c4 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <astronode_send_cfg_sr+0x68>)
 80077bc:	0018      	movs	r0, r3
 80077be:	f7fb fc41 	bl	8003044 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 80077c2:	e003      	b.n	80077cc <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <astronode_send_cfg_sr+0x6c>)
 80077c6:	0018      	movs	r0, r3
 80077c8:	f7fb fc3c 	bl	8003044 <send_debug_logs>
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b064      	add	sp, #400	; 0x190
 80077d2:	bdb0      	pop	{r4, r5, r7, pc}
 80077d4:	fffffe70 	.word	0xfffffe70
 80077d8:	08012888 	.word	0x08012888
 80077dc:	080128bc 	.word	0x080128bc

080077e0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	b0e7      	sub	sp, #412	; 0x19c
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	0005      	movs	r5, r0
 80077e8:	000c      	movs	r4, r1
 80077ea:	0010      	movs	r0, r2
 80077ec:	0019      	movs	r1, r3
 80077ee:	4b4b      	ldr	r3, [pc, #300]	; (800791c <astronode_send_cfg_wr+0x13c>)
 80077f0:	26cc      	movs	r6, #204	; 0xcc
 80077f2:	0076      	lsls	r6, r6, #1
 80077f4:	199b      	adds	r3, r3, r6
 80077f6:	19db      	adds	r3, r3, r7
 80077f8:	1c2a      	adds	r2, r5, #0
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	4b48      	ldr	r3, [pc, #288]	; (8007920 <astronode_send_cfg_wr+0x140>)
 80077fe:	0035      	movs	r5, r6
 8007800:	195b      	adds	r3, r3, r5
 8007802:	19db      	adds	r3, r3, r7
 8007804:	1c22      	adds	r2, r4, #0
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	4b46      	ldr	r3, [pc, #280]	; (8007924 <astronode_send_cfg_wr+0x144>)
 800780a:	002c      	movs	r4, r5
 800780c:	191b      	adds	r3, r3, r4
 800780e:	19db      	adds	r3, r3, r7
 8007810:	1c02      	adds	r2, r0, #0
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	4b44      	ldr	r3, [pc, #272]	; (8007928 <astronode_send_cfg_wr+0x148>)
 8007816:	191b      	adds	r3, r3, r4
 8007818:	19db      	adds	r3, r3, r7
 800781a:	1c0a      	adds	r2, r1, #0
 800781c:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800781e:	25d0      	movs	r5, #208	; 0xd0
 8007820:	197b      	adds	r3, r7, r5
 8007822:	0018      	movs	r0, r3
 8007824:	23c6      	movs	r3, #198	; 0xc6
 8007826:	001a      	movs	r2, r3
 8007828:	2100      	movs	r1, #0
 800782a:	f003 fff3 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 800782e:	4b3f      	ldr	r3, [pc, #252]	; (800792c <astronode_send_cfg_wr+0x14c>)
 8007830:	191b      	adds	r3, r3, r4
 8007832:	19db      	adds	r3, r3, r7
 8007834:	0018      	movs	r0, r3
 8007836:	23c6      	movs	r3, #198	; 0xc6
 8007838:	001a      	movs	r2, r3
 800783a:	2100      	movs	r1, #0
 800783c:	f003 ffea 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007840:	0029      	movs	r1, r5
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2205      	movs	r2, #5
 8007846:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007848:	4b34      	ldr	r3, [pc, #208]	; (800791c <astronode_send_cfg_wr+0x13c>)
 800784a:	191b      	adds	r3, r3, r4
 800784c:	19db      	adds	r3, r3, r7
 800784e:	2200      	movs	r2, #0
 8007850:	569a      	ldrsb	r2, [r3, r2]
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <astronode_send_cfg_wr+0x140>)
 8007854:	191b      	adds	r3, r3, r4
 8007856:	19db      	adds	r3, r3, r7
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	b25b      	sxtb	r3, r3
 800785e:	4313      	orrs	r3, r2
 8007860:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007862:	4b30      	ldr	r3, [pc, #192]	; (8007924 <astronode_send_cfg_wr+0x144>)
 8007864:	191b      	adds	r3, r3, r4
 8007866:	19db      	adds	r3, r3, r7
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	b25b      	sxtb	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <astronode_send_cfg_wr+0x148>)
 8007874:	191b      	adds	r3, r3, r4
 8007876:	19db      	adds	r3, r3, r7
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	b25b      	sxtb	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b25b      	sxtb	r3, r3
 8007882:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007884:	187b      	adds	r3, r7, r1
 8007886:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007888:	23d4      	movs	r3, #212	; 0xd4
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	2508      	movs	r5, #8
 800788e:	195b      	adds	r3, r3, r5
 8007890:	19db      	adds	r3, r3, r7
 8007892:	2200      	movs	r2, #0
 8007894:	569a      	ldrsb	r2, [r3, r2]
 8007896:	23d6      	movs	r3, #214	; 0xd6
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	195b      	adds	r3, r3, r5
 800789c:	19db      	adds	r3, r3, r7
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	b25b      	sxtb	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80078a8:	23d8      	movs	r3, #216	; 0xd8
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	195b      	adds	r3, r3, r5
 80078ae:	19db      	adds	r3, r3, r7
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80078ba:	23da      	movs	r3, #218	; 0xda
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	195b      	adds	r3, r3, r5
 80078c0:	19db      	adds	r3, r3, r7
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	4313      	orrs	r3, r2
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80078ce:	187b      	adds	r3, r7, r1
 80078d0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80078d2:	0008      	movs	r0, r1
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	22c4      	movs	r2, #196	; 0xc4
 80078d8:	2103      	movs	r1, #3
 80078da:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80078dc:	002b      	movs	r3, r5
 80078de:	18fa      	adds	r2, r7, r3
 80078e0:	183b      	adds	r3, r7, r0
 80078e2:	0011      	movs	r1, r2
 80078e4:	0018      	movs	r0, r3
 80078e6:	f001 f9af 	bl	8008c48 <astronode_transport_send_receive>
 80078ea:	0003      	movs	r3, r0
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d10f      	bne.n	8007910 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <astronode_send_cfg_wr+0x14c>)
 80078f2:	191b      	adds	r3, r3, r4
 80078f4:	19db      	adds	r3, r3, r7
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b85      	cmp	r3, #133	; 0x85
 80078fa:	d105      	bne.n	8007908 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <astronode_send_cfg_wr+0x150>)
 80078fe:	0018      	movs	r0, r3
 8007900:	f7fb fba0 	bl	8003044 <send_debug_logs>
            return true ;
 8007904:	2301      	movs	r3, #1
 8007906:	e004      	b.n	8007912 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <astronode_send_cfg_wr+0x154>)
 800790a:	0018      	movs	r0, r3
 800790c:	f7fb fb9a 	bl	8003044 <send_debug_logs>
        }
    }
    return false ;
 8007910:	2300      	movs	r3, #0
}
 8007912:	0018      	movs	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	b067      	add	sp, #412	; 0x19c
 8007918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	fffffe6f 	.word	0xfffffe6f
 8007920:	fffffe6e 	.word	0xfffffe6e
 8007924:	fffffe6d 	.word	0xfffffe6d
 8007928:	fffffe6c 	.word	0xfffffe6c
 800792c:	fffffe70 	.word	0xfffffe70
 8007930:	080128f0 	.word	0x080128f0
 8007934:	0801291c 	.word	0x0801291c

08007938 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793a:	b0ed      	sub	sp, #436	; 0x1b4
 800793c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800793e:	21c8      	movs	r1, #200	; 0xc8
 8007940:	2318      	movs	r3, #24
 8007942:	18cb      	adds	r3, r1, r3
 8007944:	19db      	adds	r3, r3, r7
 8007946:	0018      	movs	r0, r3
 8007948:	23c6      	movs	r3, #198	; 0xc6
 800794a:	001a      	movs	r2, r3
 800794c:	2100      	movs	r1, #0
 800794e:	f003 ff61 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007952:	4b4a      	ldr	r3, [pc, #296]	; (8007a7c <astronode_send_mgi_rr+0x144>)
 8007954:	26cc      	movs	r6, #204	; 0xcc
 8007956:	0076      	lsls	r6, r6, #1
 8007958:	199b      	adds	r3, r3, r6
 800795a:	2218      	movs	r2, #24
 800795c:	4694      	mov	ip, r2
 800795e:	44bc      	add	ip, r7
 8007960:	4463      	add	r3, ip
 8007962:	0018      	movs	r0, r3
 8007964:	23c6      	movs	r3, #198	; 0xc6
 8007966:	001a      	movs	r2, r3
 8007968:	2100      	movs	r1, #0
 800796a:	f003 ff53 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800796e:	21c8      	movs	r1, #200	; 0xc8
 8007970:	2318      	movs	r3, #24
 8007972:	18cb      	adds	r3, r1, r3
 8007974:	19db      	adds	r3, r3, r7
 8007976:	2219      	movs	r2, #25
 8007978:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800797a:	2318      	movs	r3, #24
 800797c:	18fa      	adds	r2, r7, r3
 800797e:	2318      	movs	r3, #24
 8007980:	18cb      	adds	r3, r1, r3
 8007982:	19db      	adds	r3, r3, r7
 8007984:	0011      	movs	r1, r2
 8007986:	0018      	movs	r0, r3
 8007988:	f001 f95e 	bl	8008c48 <astronode_transport_send_receive>
 800798c:	0003      	movs	r3, r0
 800798e:	2b01      	cmp	r3, #1
 8007990:	d16f      	bne.n	8007a72 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <astronode_send_mgi_rr+0x144>)
 8007994:	0032      	movs	r2, r6
 8007996:	189b      	adds	r3, r3, r2
 8007998:	2118      	movs	r1, #24
 800799a:	468c      	mov	ip, r1
 800799c:	44bc      	add	ip, r7
 800799e:	4463      	add	r3, ip
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b99      	cmp	r3, #153	; 0x99
 80079a4:	d161      	bne.n	8007a6a <astronode_send_mgi_rr+0x132>
        {
 80079a6:	466b      	mov	r3, sp
 80079a8:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 80079aa:	4b34      	ldr	r3, [pc, #208]	; (8007a7c <astronode_send_mgi_rr+0x144>)
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	2218      	movs	r2, #24
 80079b0:	4694      	mov	ip, r2
 80079b2:	44bc      	add	ip, r7
 80079b4:	4463      	add	r3, ip
 80079b6:	22c4      	movs	r2, #196	; 0xc4
 80079b8:	5a9b      	ldrh	r3, [r3, r2]
 80079ba:	001a      	movs	r2, r3
 80079bc:	3a01      	subs	r2, #1
 80079be:	21ca      	movs	r1, #202	; 0xca
 80079c0:	0049      	lsls	r1, r1, #1
 80079c2:	2018      	movs	r0, #24
 80079c4:	1809      	adds	r1, r1, r0
 80079c6:	19c9      	adds	r1, r1, r7
 80079c8:	600a      	str	r2, [r1, #0]
 80079ca:	001c      	movs	r4, r3
 80079cc:	2200      	movs	r2, #0
 80079ce:	0015      	movs	r5, r2
 80079d0:	0020      	movs	r0, r4
 80079d2:	0029      	movs	r1, r5
 80079d4:	0004      	movs	r4, r0
 80079d6:	0f62      	lsrs	r2, r4, #29
 80079d8:	000c      	movs	r4, r1
 80079da:	00e4      	lsls	r4, r4, #3
 80079dc:	617c      	str	r4, [r7, #20]
 80079de:	697c      	ldr	r4, [r7, #20]
 80079e0:	4314      	orrs	r4, r2
 80079e2:	617c      	str	r4, [r7, #20]
 80079e4:	0001      	movs	r1, r0
 80079e6:	00c9      	lsls	r1, r1, #3
 80079e8:	6139      	str	r1, [r7, #16]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	2200      	movs	r2, #0
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	6838      	ldr	r0, [r7, #0]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	0004      	movs	r4, r0
 80079f6:	0f62      	lsrs	r2, r4, #29
 80079f8:	000c      	movs	r4, r1
 80079fa:	00e4      	lsls	r4, r4, #3
 80079fc:	60fc      	str	r4, [r7, #12]
 80079fe:	68fc      	ldr	r4, [r7, #12]
 8007a00:	4314      	orrs	r4, r2
 8007a02:	60fc      	str	r4, [r7, #12]
 8007a04:	0001      	movs	r1, r0
 8007a06:	00ca      	lsls	r2, r1, #3
 8007a08:	60ba      	str	r2, [r7, #8]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4669      	mov	r1, sp
 8007a12:	1acb      	subs	r3, r1, r3
 8007a14:	469d      	mov	sp, r3
 8007a16:	466b      	mov	r3, sp
 8007a18:	3300      	adds	r3, #0
 8007a1a:	24c8      	movs	r4, #200	; 0xc8
 8007a1c:	0064      	lsls	r4, r4, #1
 8007a1e:	2218      	movs	r2, #24
 8007a20:	18a2      	adds	r2, r4, r2
 8007a22:	19d1      	adds	r1, r2, r7
 8007a24:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <astronode_send_mgi_rr+0x148>)
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7fb fb0b 	bl	8003044 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007a2e:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <astronode_send_mgi_rr+0x144>)
 8007a30:	22cc      	movs	r2, #204	; 0xcc
 8007a32:	0052      	lsls	r2, r2, #1
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	2218      	movs	r2, #24
 8007a38:	4694      	mov	ip, r2
 8007a3a:	44bc      	add	ip, r7
 8007a3c:	4463      	add	r3, ip
 8007a3e:	22c4      	movs	r2, #196	; 0xc4
 8007a40:	5a9b      	ldrh	r3, [r3, r2]
 8007a42:	0019      	movs	r1, r3
 8007a44:	2318      	movs	r3, #24
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	3301      	adds	r3, #1
 8007a4a:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <astronode_send_mgi_rr+0x14c>)
 8007a4c:	2018      	movs	r0, #24
 8007a4e:	1820      	adds	r0, r4, r0
 8007a50:	19c0      	adds	r0, r0, r7
 8007a52:	6800      	ldr	r0, [r0, #0]
 8007a54:	f003 fe14 	bl	800b680 <snprintf>
            send_debug_logs(guid);
 8007a58:	2318      	movs	r3, #24
 8007a5a:	18e3      	adds	r3, r4, r3
 8007a5c:	19db      	adds	r3, r3, r7
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f7fb faef 	bl	8003044 <send_debug_logs>
 8007a66:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007a68:	e003      	b.n	8007a72 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <astronode_send_mgi_rr+0x150>)
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f7fb fae9 	bl	8003044 <send_debug_logs>
}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	46bd      	mov	sp, r7
 8007a76:	b06d      	add	sp, #436	; 0x1b4
 8007a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	fffffe68 	.word	0xfffffe68
 8007a80:	080129a8 	.word	0x080129a8
 8007a84:	080129b8 	.word	0x080129b8
 8007a88:	080129bc 	.word	0x080129bc

08007a8c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	b0ed      	sub	sp, #436	; 0x1b4
 8007a90:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a92:	21c8      	movs	r1, #200	; 0xc8
 8007a94:	2318      	movs	r3, #24
 8007a96:	18cb      	adds	r3, r1, r3
 8007a98:	19db      	adds	r3, r3, r7
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	23c6      	movs	r3, #198	; 0xc6
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	f003 feb7 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007aa6:	4b4a      	ldr	r3, [pc, #296]	; (8007bd0 <astronode_send_msn_rr+0x144>)
 8007aa8:	26cc      	movs	r6, #204	; 0xcc
 8007aaa:	0076      	lsls	r6, r6, #1
 8007aac:	199b      	adds	r3, r3, r6
 8007aae:	2218      	movs	r2, #24
 8007ab0:	4694      	mov	ip, r2
 8007ab2:	44bc      	add	ip, r7
 8007ab4:	4463      	add	r3, ip
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	23c6      	movs	r3, #198	; 0xc6
 8007aba:	001a      	movs	r2, r3
 8007abc:	2100      	movs	r1, #0
 8007abe:	f003 fea9 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007ac2:	21c8      	movs	r1, #200	; 0xc8
 8007ac4:	2318      	movs	r3, #24
 8007ac6:	18cb      	adds	r3, r1, r3
 8007ac8:	19db      	adds	r3, r3, r7
 8007aca:	221a      	movs	r2, #26
 8007acc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ace:	2318      	movs	r3, #24
 8007ad0:	18fa      	adds	r2, r7, r3
 8007ad2:	2318      	movs	r3, #24
 8007ad4:	18cb      	adds	r3, r1, r3
 8007ad6:	19db      	adds	r3, r3, r7
 8007ad8:	0011      	movs	r1, r2
 8007ada:	0018      	movs	r0, r3
 8007adc:	f001 f8b4 	bl	8008c48 <astronode_transport_send_receive>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d16f      	bne.n	8007bc6 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007ae6:	4b3a      	ldr	r3, [pc, #232]	; (8007bd0 <astronode_send_msn_rr+0x144>)
 8007ae8:	0032      	movs	r2, r6
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	2118      	movs	r1, #24
 8007aee:	468c      	mov	ip, r1
 8007af0:	44bc      	add	ip, r7
 8007af2:	4463      	add	r3, ip
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b9a      	cmp	r3, #154	; 0x9a
 8007af8:	d161      	bne.n	8007bbe <astronode_send_msn_rr+0x132>
        {
 8007afa:	466b      	mov	r3, sp
 8007afc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007afe:	4b34      	ldr	r3, [pc, #208]	; (8007bd0 <astronode_send_msn_rr+0x144>)
 8007b00:	189b      	adds	r3, r3, r2
 8007b02:	2218      	movs	r2, #24
 8007b04:	4694      	mov	ip, r2
 8007b06:	44bc      	add	ip, r7
 8007b08:	4463      	add	r3, ip
 8007b0a:	22c4      	movs	r2, #196	; 0xc4
 8007b0c:	5a9b      	ldrh	r3, [r3, r2]
 8007b0e:	001a      	movs	r2, r3
 8007b10:	3a01      	subs	r2, #1
 8007b12:	21ca      	movs	r1, #202	; 0xca
 8007b14:	0049      	lsls	r1, r1, #1
 8007b16:	2018      	movs	r0, #24
 8007b18:	1809      	adds	r1, r1, r0
 8007b1a:	19c9      	adds	r1, r1, r7
 8007b1c:	600a      	str	r2, [r1, #0]
 8007b1e:	001c      	movs	r4, r3
 8007b20:	2200      	movs	r2, #0
 8007b22:	0015      	movs	r5, r2
 8007b24:	0020      	movs	r0, r4
 8007b26:	0029      	movs	r1, r5
 8007b28:	0004      	movs	r4, r0
 8007b2a:	0f62      	lsrs	r2, r4, #29
 8007b2c:	000c      	movs	r4, r1
 8007b2e:	00e4      	lsls	r4, r4, #3
 8007b30:	617c      	str	r4, [r7, #20]
 8007b32:	697c      	ldr	r4, [r7, #20]
 8007b34:	4314      	orrs	r4, r2
 8007b36:	617c      	str	r4, [r7, #20]
 8007b38:	0001      	movs	r1, r0
 8007b3a:	00c9      	lsls	r1, r1, #3
 8007b3c:	6139      	str	r1, [r7, #16]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	2200      	movs	r2, #0
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	0004      	movs	r4, r0
 8007b4a:	0f62      	lsrs	r2, r4, #29
 8007b4c:	000c      	movs	r4, r1
 8007b4e:	00e4      	lsls	r4, r4, #3
 8007b50:	60fc      	str	r4, [r7, #12]
 8007b52:	68fc      	ldr	r4, [r7, #12]
 8007b54:	4314      	orrs	r4, r2
 8007b56:	60fc      	str	r4, [r7, #12]
 8007b58:	0001      	movs	r1, r0
 8007b5a:	00ca      	lsls	r2, r1, #3
 8007b5c:	60ba      	str	r2, [r7, #8]
 8007b5e:	3307      	adds	r3, #7
 8007b60:	08db      	lsrs	r3, r3, #3
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4669      	mov	r1, sp
 8007b66:	1acb      	subs	r3, r1, r3
 8007b68:	469d      	mov	sp, r3
 8007b6a:	466b      	mov	r3, sp
 8007b6c:	3300      	adds	r3, #0
 8007b6e:	24c8      	movs	r4, #200	; 0xc8
 8007b70:	0064      	lsls	r4, r4, #1
 8007b72:	2218      	movs	r2, #24
 8007b74:	18a2      	adds	r2, r4, r2
 8007b76:	19d1      	adds	r1, r2, r7
 8007b78:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <astronode_send_msn_rr+0x148>)
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f7fb fa61 	bl	8003044 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <astronode_send_msn_rr+0x144>)
 8007b84:	22cc      	movs	r2, #204	; 0xcc
 8007b86:	0052      	lsls	r2, r2, #1
 8007b88:	189b      	adds	r3, r3, r2
 8007b8a:	2218      	movs	r2, #24
 8007b8c:	4694      	mov	ip, r2
 8007b8e:	44bc      	add	ip, r7
 8007b90:	4463      	add	r3, ip
 8007b92:	22c4      	movs	r2, #196	; 0xc4
 8007b94:	5a9b      	ldrh	r3, [r3, r2]
 8007b96:	0019      	movs	r1, r3
 8007b98:	2318      	movs	r3, #24
 8007b9a:	18fb      	adds	r3, r7, r3
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <astronode_send_msn_rr+0x14c>)
 8007ba0:	2018      	movs	r0, #24
 8007ba2:	1820      	adds	r0, r4, r0
 8007ba4:	19c0      	adds	r0, r0, r7
 8007ba6:	6800      	ldr	r0, [r0, #0]
 8007ba8:	f003 fd6a 	bl	800b680 <snprintf>
            send_debug_logs(serial_number);
 8007bac:	2318      	movs	r3, #24
 8007bae:	18e3      	adds	r3, r4, r3
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f7fb fa45 	bl	8003044 <send_debug_logs>
 8007bba:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007bbc:	e003      	b.n	8007bc6 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <astronode_send_msn_rr+0x150>)
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f7fb fa3f 	bl	8003044 <send_debug_logs>
}
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b06d      	add	sp, #436	; 0x1b4
 8007bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	fffffe68 	.word	0xfffffe68
 8007bd4:	080129d8 	.word	0x080129d8
 8007bd8:	080129b8 	.word	0x080129b8
 8007bdc:	080129f4 	.word	0x080129f4

08007be0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007be0:	b5b0      	push	{r4, r5, r7, lr}
 8007be2:	b0e4      	sub	sp, #400	; 0x190
 8007be4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007be6:	24c8      	movs	r4, #200	; 0xc8
 8007be8:	193b      	adds	r3, r7, r4
 8007bea:	0018      	movs	r0, r3
 8007bec:	23c6      	movs	r3, #198	; 0xc6
 8007bee:	001a      	movs	r2, r3
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f003 fe0f 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007bf6:	4b31      	ldr	r3, [pc, #196]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007bf8:	25c8      	movs	r5, #200	; 0xc8
 8007bfa:	006d      	lsls	r5, r5, #1
 8007bfc:	195b      	adds	r3, r3, r5
 8007bfe:	19db      	adds	r3, r3, r7
 8007c00:	0018      	movs	r0, r3
 8007c02:	23c6      	movs	r3, #198	; 0xc6
 8007c04:	001a      	movs	r2, r3
 8007c06:	2100      	movs	r1, #0
 8007c08:	f003 fe04 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007c0c:	193b      	adds	r3, r7, r4
 8007c0e:	2265      	movs	r2, #101	; 0x65
 8007c10:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c12:	003a      	movs	r2, r7
 8007c14:	193b      	adds	r3, r7, r4
 8007c16:	0011      	movs	r1, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f001 f815 	bl	8008c48 <astronode_transport_send_receive>
 8007c1e:	0003      	movs	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d147      	bne.n	8007cb4 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007c24:	4b25      	ldr	r3, [pc, #148]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007c26:	195b      	adds	r3, r3, r5
 8007c28:	19db      	adds	r3, r3, r7
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2be5      	cmp	r3, #229	; 0xe5
 8007c2e:	d141      	bne.n	8007cb4 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007c30:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007c32:	195b      	adds	r3, r3, r5
 8007c34:	19db      	adds	r3, r3, r7
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	001a      	movs	r2, r3
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	d006      	beq.n	8007c4e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007c40:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <astronode_send_evt_rr+0xe0>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007c46:	4b1f      	ldr	r3, [pc, #124]	; (8007cc4 <astronode_send_evt_rr+0xe4>)
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f7fb f9fb 	bl	8003044 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007c50:	22c8      	movs	r2, #200	; 0xc8
 8007c52:	0052      	lsls	r2, r2, #1
 8007c54:	189b      	adds	r3, r3, r2
 8007c56:	19db      	adds	r3, r3, r7
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	001a      	movs	r2, r3
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	4013      	ands	r3, r2
 8007c60:	d006      	beq.n	8007c70 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007c62:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <astronode_send_evt_rr+0xe8>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007c68:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <astronode_send_evt_rr+0xec>)
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f7fb f9ea 	bl	8003044 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007c70:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007c72:	22c8      	movs	r2, #200	; 0xc8
 8007c74:	0052      	lsls	r2, r2, #1
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	19db      	adds	r3, r3, r7
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	001a      	movs	r2, r3
 8007c7e:	2304      	movs	r3, #4
 8007c80:	4013      	ands	r3, r2
 8007c82:	d006      	beq.n	8007c92 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007c84:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <astronode_send_evt_rr+0xf0>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <astronode_send_evt_rr+0xf4>)
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	f7fb f9d9 	bl	8003044 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <astronode_send_evt_rr+0xdc>)
 8007c94:	22c8      	movs	r2, #200	; 0xc8
 8007c96:	0052      	lsls	r2, r2, #1
 8007c98:	189b      	adds	r3, r3, r2
 8007c9a:	19db      	adds	r3, r3, r7
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d006      	beq.n	8007cb4 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <astronode_send_evt_rr+0xf8>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <astronode_send_evt_rr+0xfc>)
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f7fb f9c8 	bl	8003044 <send_debug_logs>
            }

        }
    }
}
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	b064      	add	sp, #400	; 0x190
 8007cba:	bdb0      	pop	{r4, r5, r7, pc}
 8007cbc:	fffffe70 	.word	0xfffffe70
 8007cc0:	20000bf4 	.word	0x20000bf4
 8007cc4:	08012a9c 	.word	0x08012a9c
 8007cc8:	20000bf5 	.word	0x20000bf5
 8007ccc:	08012ac0 	.word	0x08012ac0
 8007cd0:	20000bf6 	.word	0x20000bf6
 8007cd4:	08012ad8 	.word	0x08012ad8
 8007cd8:	20000bf7 	.word	0x20000bf7
 8007cdc:	08012aec 	.word	0x08012aec

08007ce0 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce2:	b0e7      	sub	sp, #412	; 0x19c
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007cea:	24d0      	movs	r4, #208	; 0xd0
 8007cec:	193b      	adds	r3, r7, r4
 8007cee:	0018      	movs	r0, r3
 8007cf0:	23c6      	movs	r3, #198	; 0xc6
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	f003 fd8d 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007cfa:	4b56      	ldr	r3, [pc, #344]	; (8007e54 <astronode_send_geo_wr+0x174>)
 8007cfc:	26cc      	movs	r6, #204	; 0xcc
 8007cfe:	0076      	lsls	r6, r6, #1
 8007d00:	199b      	adds	r3, r3, r6
 8007d02:	19db      	adds	r3, r3, r7
 8007d04:	0018      	movs	r0, r3
 8007d06:	23c6      	movs	r3, #198	; 0xc6
 8007d08:	001a      	movs	r2, r3
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	f003 fd82 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007d10:	193b      	adds	r3, r7, r4
 8007d12:	2235      	movs	r2, #53	; 0x35
 8007d14:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007d16:	193b      	adds	r3, r7, r4
 8007d18:	22c4      	movs	r2, #196	; 0xc4
 8007d1a:	5a9b      	ldrh	r3, [r3, r2]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	b290      	uxth	r0, r2
 8007d20:	193a      	adds	r2, r7, r4
 8007d22:	21c4      	movs	r1, #196	; 0xc4
 8007d24:	5250      	strh	r0, [r2, r1]
 8007d26:	0019      	movs	r1, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	193b      	adds	r3, r7, r4
 8007d2e:	185b      	adds	r3, r3, r1
 8007d30:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	1218      	asrs	r0, r3, #8
 8007d36:	0025      	movs	r5, r4
 8007d38:	197b      	adds	r3, r7, r5
 8007d3a:	22c4      	movs	r2, #196	; 0xc4
 8007d3c:	5a9b      	ldrh	r3, [r3, r2]
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	b294      	uxth	r4, r2
 8007d42:	197a      	adds	r2, r7, r5
 8007d44:	21c4      	movs	r1, #196	; 0xc4
 8007d46:	5254      	strh	r4, [r2, r1]
 8007d48:	0019      	movs	r1, r3
 8007d4a:	b2c2      	uxtb	r2, r0
 8007d4c:	002c      	movs	r4, r5
 8007d4e:	193b      	adds	r3, r7, r4
 8007d50:	185b      	adds	r3, r3, r1
 8007d52:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	1418      	asrs	r0, r3, #16
 8007d58:	0025      	movs	r5, r4
 8007d5a:	197b      	adds	r3, r7, r5
 8007d5c:	22c4      	movs	r2, #196	; 0xc4
 8007d5e:	5a9b      	ldrh	r3, [r3, r2]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	b294      	uxth	r4, r2
 8007d64:	197a      	adds	r2, r7, r5
 8007d66:	21c4      	movs	r1, #196	; 0xc4
 8007d68:	5254      	strh	r4, [r2, r1]
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	b2c2      	uxtb	r2, r0
 8007d6e:	002c      	movs	r4, r5
 8007d70:	193b      	adds	r3, r7, r4
 8007d72:	185b      	adds	r3, r3, r1
 8007d74:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	1618      	asrs	r0, r3, #24
 8007d7a:	0025      	movs	r5, r4
 8007d7c:	197b      	adds	r3, r7, r5
 8007d7e:	22c4      	movs	r2, #196	; 0xc4
 8007d80:	5a9b      	ldrh	r3, [r3, r2]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	b294      	uxth	r4, r2
 8007d86:	197a      	adds	r2, r7, r5
 8007d88:	21c4      	movs	r1, #196	; 0xc4
 8007d8a:	5254      	strh	r4, [r2, r1]
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	b2c2      	uxtb	r2, r0
 8007d90:	002c      	movs	r4, r5
 8007d92:	193b      	adds	r3, r7, r4
 8007d94:	185b      	adds	r3, r3, r1
 8007d96:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007d98:	193b      	adds	r3, r7, r4
 8007d9a:	22c4      	movs	r2, #196	; 0xc4
 8007d9c:	5a9b      	ldrh	r3, [r3, r2]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	b290      	uxth	r0, r2
 8007da2:	193a      	adds	r2, r7, r4
 8007da4:	21c4      	movs	r1, #196	; 0xc4
 8007da6:	5250      	strh	r0, [r2, r1]
 8007da8:	0019      	movs	r1, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	193b      	adds	r3, r7, r4
 8007db0:	185b      	adds	r3, r3, r1
 8007db2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1218      	asrs	r0, r3, #8
 8007db8:	0025      	movs	r5, r4
 8007dba:	197b      	adds	r3, r7, r5
 8007dbc:	22c4      	movs	r2, #196	; 0xc4
 8007dbe:	5a9b      	ldrh	r3, [r3, r2]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	b294      	uxth	r4, r2
 8007dc4:	197a      	adds	r2, r7, r5
 8007dc6:	21c4      	movs	r1, #196	; 0xc4
 8007dc8:	5254      	strh	r4, [r2, r1]
 8007dca:	0019      	movs	r1, r3
 8007dcc:	b2c2      	uxtb	r2, r0
 8007dce:	002c      	movs	r4, r5
 8007dd0:	193b      	adds	r3, r7, r4
 8007dd2:	185b      	adds	r3, r3, r1
 8007dd4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	1418      	asrs	r0, r3, #16
 8007dda:	0025      	movs	r5, r4
 8007ddc:	197b      	adds	r3, r7, r5
 8007dde:	22c4      	movs	r2, #196	; 0xc4
 8007de0:	5a9b      	ldrh	r3, [r3, r2]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	b294      	uxth	r4, r2
 8007de6:	197a      	adds	r2, r7, r5
 8007de8:	21c4      	movs	r1, #196	; 0xc4
 8007dea:	5254      	strh	r4, [r2, r1]
 8007dec:	0019      	movs	r1, r3
 8007dee:	b2c2      	uxtb	r2, r0
 8007df0:	002c      	movs	r4, r5
 8007df2:	193b      	adds	r3, r7, r4
 8007df4:	185b      	adds	r3, r3, r1
 8007df6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	1618      	asrs	r0, r3, #24
 8007dfc:	0025      	movs	r5, r4
 8007dfe:	197b      	adds	r3, r7, r5
 8007e00:	22c4      	movs	r2, #196	; 0xc4
 8007e02:	5a9b      	ldrh	r3, [r3, r2]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	b294      	uxth	r4, r2
 8007e08:	197a      	adds	r2, r7, r5
 8007e0a:	21c4      	movs	r1, #196	; 0xc4
 8007e0c:	5254      	strh	r4, [r2, r1]
 8007e0e:	0019      	movs	r1, r3
 8007e10:	b2c2      	uxtb	r2, r0
 8007e12:	0028      	movs	r0, r5
 8007e14:	183b      	adds	r3, r7, r0
 8007e16:	185b      	adds	r3, r3, r1
 8007e18:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	18fa      	adds	r2, r7, r3
 8007e1e:	183b      	adds	r3, r7, r0
 8007e20:	0011      	movs	r1, r2
 8007e22:	0018      	movs	r0, r3
 8007e24:	f000 ff10 	bl	8008c48 <astronode_transport_send_receive>
 8007e28:	0003      	movs	r3, r0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10e      	bne.n	8007e4c <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <astronode_send_geo_wr+0x174>)
 8007e30:	199b      	adds	r3, r3, r6
 8007e32:	19db      	adds	r3, r3, r7
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2bb5      	cmp	r3, #181	; 0xb5
 8007e38:	d104      	bne.n	8007e44 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <astronode_send_geo_wr+0x178>)
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7fb f901 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007e42:	e003      	b.n	8007e4c <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <astronode_send_geo_wr+0x17c>)
 8007e46:	0018      	movs	r0, r3
 8007e48:	f7fb f8fc 	bl	8003044 <send_debug_logs>
}
 8007e4c:	46c0      	nop			; (mov r8, r8)
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b067      	add	sp, #412	; 0x19c
 8007e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e54:	fffffe70 	.word	0xfffffe70
 8007e58:	08012b00 	.word	0x08012b00
 8007e5c:	08012b2c 	.word	0x08012b2c

08007e60 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8007e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e62:	b0fb      	sub	sp, #492	; 0x1ec
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6039      	str	r1, [r7, #0]
 8007e68:	0011      	movs	r1, r2
 8007e6a:	4b4a      	ldr	r3, [pc, #296]	; (8007f94 <astronode_send_pld_er+0x134>)
 8007e6c:	26f4      	movs	r6, #244	; 0xf4
 8007e6e:	0076      	lsls	r6, r6, #1
 8007e70:	199b      	adds	r3, r3, r6
 8007e72:	19db      	adds	r3, r3, r7
 8007e74:	1c02      	adds	r2, r0, #0
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	4b47      	ldr	r3, [pc, #284]	; (8007f98 <astronode_send_pld_er+0x138>)
 8007e7a:	199b      	adds	r3, r3, r6
 8007e7c:	19db      	adds	r3, r3, r7
 8007e7e:	1c0a      	adds	r2, r1, #0
 8007e80:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007e82:	2490      	movs	r4, #144	; 0x90
 8007e84:	0064      	lsls	r4, r4, #1
 8007e86:	193b      	adds	r3, r7, r4
 8007e88:	0018      	movs	r0, r3
 8007e8a:	23c6      	movs	r3, #198	; 0xc6
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f003 fcc0 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007e94:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <astronode_send_pld_er+0x13c>)
 8007e96:	199b      	adds	r3, r3, r6
 8007e98:	19db      	adds	r3, r3, r7
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	23c6      	movs	r3, #198	; 0xc6
 8007e9e:	001a      	movs	r2, r3
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f003 fcb7 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007ea6:	193b      	adds	r3, r7, r4
 8007ea8:	2225      	movs	r2, #37	; 0x25
 8007eaa:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8007eac:	193b      	adds	r3, r7, r4
 8007eae:	22c4      	movs	r2, #196	; 0xc4
 8007eb0:	5a9b      	ldrh	r3, [r3, r2]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	b290      	uxth	r0, r2
 8007eb6:	193a      	adds	r2, r7, r4
 8007eb8:	21c4      	movs	r1, #196	; 0xc4
 8007eba:	5250      	strh	r0, [r2, r1]
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	4b35      	ldr	r3, [pc, #212]	; (8007f94 <astronode_send_pld_er+0x134>)
 8007ec0:	199b      	adds	r3, r3, r6
 8007ec2:	19db      	adds	r3, r3, r7
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	193b      	adds	r3, r7, r4
 8007eca:	185b      	adds	r3, r3, r1
 8007ecc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8007ece:	4b31      	ldr	r3, [pc, #196]	; (8007f94 <astronode_send_pld_er+0x134>)
 8007ed0:	199b      	adds	r3, r3, r6
 8007ed2:	19db      	adds	r3, r3, r7
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b298      	uxth	r0, r3
 8007eda:	0025      	movs	r5, r4
 8007edc:	197b      	adds	r3, r7, r5
 8007ede:	22c4      	movs	r2, #196	; 0xc4
 8007ee0:	5a9b      	ldrh	r3, [r3, r2]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	b294      	uxth	r4, r2
 8007ee6:	197a      	adds	r2, r7, r5
 8007ee8:	21c4      	movs	r1, #196	; 0xc4
 8007eea:	5254      	strh	r4, [r2, r1]
 8007eec:	0019      	movs	r1, r3
 8007eee:	b2c2      	uxtb	r2, r0
 8007ef0:	002c      	movs	r4, r5
 8007ef2:	193b      	adds	r3, r7, r4
 8007ef4:	185b      	adds	r3, r3, r1
 8007ef6:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8007ef8:	193b      	adds	r3, r7, r4
 8007efa:	22c4      	movs	r2, #196	; 0xc4
 8007efc:	5a9b      	ldrh	r3, [r3, r2]
 8007efe:	001a      	movs	r2, r3
 8007f00:	193b      	adds	r3, r7, r4
 8007f02:	189b      	adds	r3, r3, r2
 8007f04:	1c58      	adds	r0, r3, #1
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <astronode_send_pld_er+0x138>)
 8007f08:	199b      	adds	r3, r3, r6
 8007f0a:	19db      	adds	r3, r3, r7
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	0019      	movs	r1, r3
 8007f12:	f003 fd64 	bl	800b9de <memcpy>
    request.payload_len = 2 + payload_length;
 8007f16:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <astronode_send_pld_er+0x138>)
 8007f18:	199b      	adds	r3, r3, r6
 8007f1a:	19db      	adds	r3, r3, r7
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	3302      	adds	r3, #2
 8007f20:	b299      	uxth	r1, r3
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	22c4      	movs	r2, #196	; 0xc4
 8007f26:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8007f28:	2358      	movs	r3, #88	; 0x58
 8007f2a:	18fa      	adds	r2, r7, r3
 8007f2c:	193b      	adds	r3, r7, r4
 8007f2e:	0011      	movs	r1, r2
 8007f30:	0018      	movs	r0, r3
 8007f32:	f000 fe89 	bl	8008c48 <astronode_transport_send_receive>
 8007f36:	0003      	movs	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d125      	bne.n	8007f88 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8007f3c:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <astronode_send_pld_er+0x13c>)
 8007f3e:	199b      	adds	r3, r3, r6
 8007f40:	19db      	adds	r3, r3, r7
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2ba5      	cmp	r3, #165	; 0xa5
 8007f46:	d10f      	bne.n	8007f68 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8007f48:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <astronode_send_pld_er+0x134>)
 8007f4a:	199b      	adds	r3, r3, r6
 8007f4c:	19db      	adds	r3, r3, r7
 8007f4e:	881a      	ldrh	r2, [r3, #0]
 8007f50:	4913      	ldr	r1, [pc, #76]	; (8007fa0 <astronode_send_pld_er+0x140>)
 8007f52:	2408      	movs	r4, #8
 8007f54:	193b      	adds	r3, r7, r4
 8007f56:	0018      	movs	r0, r3
 8007f58:	f003 fbc6 	bl	800b6e8 <sprintf>
            send_debug_logs ( s ) ;
 8007f5c:	193b      	adds	r3, r7, r4
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7fb f870 	bl	8003044 <send_debug_logs>
            return true ;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e010      	b.n	8007f8a <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <astronode_send_pld_er+0x134>)
 8007f6a:	22f4      	movs	r2, #244	; 0xf4
 8007f6c:	0052      	lsls	r2, r2, #1
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	19db      	adds	r3, r3, r7
 8007f72:	881a      	ldrh	r2, [r3, #0]
 8007f74:	490b      	ldr	r1, [pc, #44]	; (8007fa4 <astronode_send_pld_er+0x144>)
 8007f76:	2408      	movs	r4, #8
 8007f78:	193b      	adds	r3, r7, r4
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f003 fbb4 	bl	800b6e8 <sprintf>
            send_debug_logs ( s ) ;
 8007f80:	193b      	adds	r3, r7, r4
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7fb f85e 	bl	8003044 <send_debug_logs>
        }
    }
    return false ;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b07b      	add	sp, #492	; 0x1ec
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	fffffe1e 	.word	0xfffffe1e
 8007f98:	fffffe1c 	.word	0xfffffe1c
 8007f9c:	fffffe70 	.word	0xfffffe70
 8007fa0:	08012ba4 	.word	0x08012ba4
 8007fa4:	08012bd0 	.word	0x08012bd0

08007fa8 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b0e4      	sub	sp, #400	; 0x190
 8007fac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fae:	24c8      	movs	r4, #200	; 0xc8
 8007fb0:	193b      	adds	r3, r7, r4
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	23c6      	movs	r3, #198	; 0xc6
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	2100      	movs	r1, #0
 8007fba:	f003 fc2b 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8007fbe:	4b15      	ldr	r3, [pc, #84]	; (8008014 <astronode_send_pld_fr+0x6c>)
 8007fc0:	25c8      	movs	r5, #200	; 0xc8
 8007fc2:	006d      	lsls	r5, r5, #1
 8007fc4:	195b      	adds	r3, r3, r5
 8007fc6:	19db      	adds	r3, r3, r7
 8007fc8:	0018      	movs	r0, r3
 8007fca:	23c6      	movs	r3, #198	; 0xc6
 8007fcc:	001a      	movs	r2, r3
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f003 fc20 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8007fd4:	193b      	adds	r3, r7, r4
 8007fd6:	2227      	movs	r2, #39	; 0x27
 8007fd8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007fda:	003a      	movs	r2, r7
 8007fdc:	193b      	adds	r3, r7, r4
 8007fde:	0011      	movs	r1, r2
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f000 fe31 	bl	8008c48 <astronode_transport_send_receive>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d10e      	bne.n	800800a <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <astronode_send_pld_fr+0x6c>)
 8007fee:	195b      	adds	r3, r3, r5
 8007ff0:	19db      	adds	r3, r3, r7
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2ba7      	cmp	r3, #167	; 0xa7
 8007ff6:	d104      	bne.n	8008002 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <astronode_send_pld_fr+0x70>)
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7fb f822 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008000:	e003      	b.n	800800a <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <astronode_send_pld_fr+0x74>)
 8008004:	0018      	movs	r0, r3
 8008006:	f7fb f81d 	bl	8003044 <send_debug_logs>
}
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	46bd      	mov	sp, r7
 800800e:	b064      	add	sp, #400	; 0x190
 8008010:	bdb0      	pop	{r4, r5, r7, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	fffffe70 	.word	0xfffffe70
 8008018:	08012c00 	.word	0x08012c00
 800801c:	08012c38 	.word	0x08012c38

08008020 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008020:	b5b0      	push	{r4, r5, r7, lr}
 8008022:	b0e4      	sub	sp, #400	; 0x190
 8008024:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008026:	24c8      	movs	r4, #200	; 0xc8
 8008028:	193b      	adds	r3, r7, r4
 800802a:	0018      	movs	r0, r3
 800802c:	23c6      	movs	r3, #198	; 0xc6
 800802e:	001a      	movs	r2, r3
 8008030:	2100      	movs	r1, #0
 8008032:	f003 fbef 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8008036:	4b16      	ldr	r3, [pc, #88]	; (8008090 <astronode_send_res_cr+0x70>)
 8008038:	25c8      	movs	r5, #200	; 0xc8
 800803a:	006d      	lsls	r5, r5, #1
 800803c:	195b      	adds	r3, r3, r5
 800803e:	19db      	adds	r3, r3, r7
 8008040:	0018      	movs	r0, r3
 8008042:	23c6      	movs	r3, #198	; 0xc6
 8008044:	001a      	movs	r2, r3
 8008046:	2100      	movs	r1, #0
 8008048:	f003 fbe4 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 800804c:	193b      	adds	r3, r7, r4
 800804e:	2255      	movs	r2, #85	; 0x55
 8008050:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008052:	003a      	movs	r2, r7
 8008054:	193b      	adds	r3, r7, r4
 8008056:	0011      	movs	r1, r2
 8008058:	0018      	movs	r0, r3
 800805a:	f000 fdf5 	bl	8008c48 <astronode_transport_send_receive>
 800805e:	0003      	movs	r3, r0
 8008060:	2b01      	cmp	r3, #1
 8008062:	d111      	bne.n	8008088 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <astronode_send_res_cr+0x70>)
 8008066:	195b      	adds	r3, r3, r5
 8008068:	19db      	adds	r3, r3, r7
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2bd5      	cmp	r3, #213	; 0xd5
 800806e:	d107      	bne.n	8008080 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <astronode_send_res_cr+0x74>)
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8008076:	4b08      	ldr	r3, [pc, #32]	; (8008098 <astronode_send_res_cr+0x78>)
 8008078:	0018      	movs	r0, r3
 800807a:	f7fa ffe3 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800807e:	e003      	b.n	8008088 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <astronode_send_res_cr+0x7c>)
 8008082:	0018      	movs	r0, r3
 8008084:	f7fa ffde 	bl	8003044 <send_debug_logs>
}
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	46bd      	mov	sp, r7
 800808c:	b064      	add	sp, #400	; 0x190
 800808e:	bdb0      	pop	{r4, r5, r7, pc}
 8008090:	fffffe70 	.word	0xfffffe70
 8008094:	20000bf5 	.word	0x20000bf5
 8008098:	08012c74 	.word	0x08012c74
 800809c:	08012ca8 	.word	0x08012ca8

080080a0 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80080a0:	b5b0      	push	{r4, r5, r7, lr}
 80080a2:	b0fa      	sub	sp, #488	; 0x1e8
 80080a4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80080a6:	258e      	movs	r5, #142	; 0x8e
 80080a8:	006d      	lsls	r5, r5, #1
 80080aa:	197b      	adds	r3, r7, r5
 80080ac:	0018      	movs	r0, r3
 80080ae:	23c6      	movs	r3, #198	; 0xc6
 80080b0:	001a      	movs	r2, r3
 80080b2:	2100      	movs	r1, #0
 80080b4:	f003 fbae 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0} ;
 80080b8:	4b28      	ldr	r3, [pc, #160]	; (800815c <astronode_send_rtc_rr+0xbc>)
 80080ba:	24f4      	movs	r4, #244	; 0xf4
 80080bc:	0064      	lsls	r4, r4, #1
 80080be:	191b      	adds	r3, r3, r4
 80080c0:	19db      	adds	r3, r3, r7
 80080c2:	0018      	movs	r0, r3
 80080c4:	23c6      	movs	r3, #198	; 0xc6
 80080c6:	001a      	movs	r2, r3
 80080c8:	2100      	movs	r1, #0
 80080ca:	f003 fba3 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80080ce:	197b      	adds	r3, r7, r5
 80080d0:	2217      	movs	r2, #23
 80080d2:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80080d4:	2354      	movs	r3, #84	; 0x54
 80080d6:	18fa      	adds	r2, r7, r3
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	0011      	movs	r1, r2
 80080dc:	0018      	movs	r0, r3
 80080de:	f000 fdb3 	bl	8008c48 <astronode_transport_send_receive>
 80080e2:	0003      	movs	r3, r0
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d133      	bne.n	8008150 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80080e8:	4b1c      	ldr	r3, [pc, #112]	; (800815c <astronode_send_rtc_rr+0xbc>)
 80080ea:	0021      	movs	r1, r4
 80080ec:	185b      	adds	r3, r3, r1
 80080ee:	19db      	adds	r3, r3, r7
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b97      	cmp	r3, #151	; 0x97
 80080f4:	d128      	bne.n	8008148 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <astronode_send_rtc_rr+0xbc>)
 80080f8:	185b      	adds	r3, r3, r1
 80080fa:	19db      	adds	r3, r3, r7
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008100:	4b16      	ldr	r3, [pc, #88]	; (800815c <astronode_send_rtc_rr+0xbc>)
 8008102:	185b      	adds	r3, r3, r1
 8008104:	19db      	adds	r3, r3, r7
 8008106:	789b      	ldrb	r3, [r3, #2]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 800810c:	4b13      	ldr	r3, [pc, #76]	; (800815c <astronode_send_rtc_rr+0xbc>)
 800810e:	185b      	adds	r3, r3, r1
 8008110:	19db      	adds	r3, r3, r7
 8008112:	78db      	ldrb	r3, [r3, #3]
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <astronode_send_rtc_rr+0xbc>)
 800811a:	185b      	adds	r3, r3, r1
 800811c:	19db      	adds	r3, r3, r7
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	061b      	lsls	r3, r3, #24
 8008122:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008124:	24f2      	movs	r4, #242	; 0xf2
 8008126:	0064      	lsls	r4, r4, #1
 8008128:	193a      	adds	r2, r7, r4
 800812a:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 800812c:	193b      	adds	r3, r7, r4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	490b      	ldr	r1, [pc, #44]	; (8008160 <astronode_send_rtc_rr+0xc0>)
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	0018      	movs	r0, r3
 8008136:	f003 fad7 	bl	800b6e8 <sprintf>
            send_debug_logs ( str ) ;
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	0018      	movs	r0, r3
 800813e:	f7fa ff81 	bl	8003044 <send_debug_logs>
            return rtc_time ;
 8008142:	193b      	adds	r3, r7, r4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	e004      	b.n	8008152 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008148:	4b06      	ldr	r3, [pc, #24]	; (8008164 <astronode_send_rtc_rr+0xc4>)
 800814a:	0018      	movs	r0, r3
 800814c:	f7fa ff7a 	bl	8003044 <send_debug_logs>
        }
    }
    return 0 ;
 8008150:	2300      	movs	r3, #0
}
 8008152:	0018      	movs	r0, r3
 8008154:	46bd      	mov	sp, r7
 8008156:	b07a      	add	sp, #488	; 0x1e8
 8008158:	bdb0      	pop	{r4, r5, r7, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	fffffe6c 	.word	0xfffffe6c
 8008160:	08012cd4 	.word	0x08012cd4
 8008164:	08012d14 	.word	0x08012d14

08008168 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b0f8      	sub	sp, #480	; 0x1e0
 800816c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800816e:	258c      	movs	r5, #140	; 0x8c
 8008170:	006d      	lsls	r5, r5, #1
 8008172:	197b      	adds	r3, r7, r5
 8008174:	0018      	movs	r0, r3
 8008176:	23c6      	movs	r3, #198	; 0xc6
 8008178:	001a      	movs	r2, r3
 800817a:	2100      	movs	r1, #0
 800817c:	f003 fb4a 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8008180:	4b21      	ldr	r3, [pc, #132]	; (8008208 <astronode_send_sak_rr+0xa0>)
 8008182:	24f0      	movs	r4, #240	; 0xf0
 8008184:	0064      	lsls	r4, r4, #1
 8008186:	191b      	adds	r3, r3, r4
 8008188:	19db      	adds	r3, r3, r7
 800818a:	0018      	movs	r0, r3
 800818c:	23c6      	movs	r3, #198	; 0xc6
 800818e:	001a      	movs	r2, r3
 8008190:	2100      	movs	r1, #0
 8008192:	f003 fb3f 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008196:	197b      	adds	r3, r7, r5
 8008198:	2245      	movs	r2, #69	; 0x45
 800819a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800819c:	2350      	movs	r3, #80	; 0x50
 800819e:	18fa      	adds	r2, r7, r3
 80081a0:	197b      	adds	r3, r7, r5
 80081a2:	0011      	movs	r1, r2
 80081a4:	0018      	movs	r0, r3
 80081a6:	f000 fd4f 	bl	8008c48 <astronode_transport_send_receive>
 80081aa:	0003      	movs	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d126      	bne.n	80081fe <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80081b0:	4b15      	ldr	r3, [pc, #84]	; (8008208 <astronode_send_sak_rr+0xa0>)
 80081b2:	191b      	adds	r3, r3, r4
 80081b4:	19db      	adds	r3, r3, r7
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2bc5      	cmp	r3, #197	; 0xc5
 80081ba:	d11c      	bne.n	80081f6 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <astronode_send_sak_rr+0xa0>)
 80081be:	191b      	adds	r3, r3, r4
 80081c0:	19db      	adds	r3, r3, r7
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	b299      	uxth	r1, r3
 80081c6:	4b10      	ldr	r3, [pc, #64]	; (8008208 <astronode_send_sak_rr+0xa0>)
 80081c8:	191b      	adds	r3, r3, r4
 80081ca:	19db      	adds	r3, r3, r7
 80081cc:	789b      	ldrb	r3, [r3, #2]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	20ef      	movs	r0, #239	; 0xef
 80081d6:	0040      	lsls	r0, r0, #1
 80081d8:	183b      	adds	r3, r7, r0
 80081da:	188a      	adds	r2, r1, r2
 80081dc:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	881a      	ldrh	r2, [r3, #0]
 80081e2:	490a      	ldr	r1, [pc, #40]	; (800820c <astronode_send_sak_rr+0xa4>)
 80081e4:	003b      	movs	r3, r7
 80081e6:	0018      	movs	r0, r3
 80081e8:	f003 fa7e 	bl	800b6e8 <sprintf>
            send_debug_logs(str);
 80081ec:	003b      	movs	r3, r7
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7fa ff28 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80081f4:	e003      	b.n	80081fe <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80081f6:	4b06      	ldr	r3, [pc, #24]	; (8008210 <astronode_send_sak_rr+0xa8>)
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7fa ff23 	bl	8003044 <send_debug_logs>
}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	46bd      	mov	sp, r7
 8008202:	b078      	add	sp, #480	; 0x1e0
 8008204:	bdb0      	pop	{r4, r5, r7, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	fffffe70 	.word	0xfffffe70
 800820c:	08012d30 	.word	0x08012d30
 8008210:	08012d5c 	.word	0x08012d5c

08008214 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008214:	b5b0      	push	{r4, r5, r7, lr}
 8008216:	b0e4      	sub	sp, #400	; 0x190
 8008218:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800821a:	24c8      	movs	r4, #200	; 0xc8
 800821c:	193b      	adds	r3, r7, r4
 800821e:	0018      	movs	r0, r3
 8008220:	23c6      	movs	r3, #198	; 0xc6
 8008222:	001a      	movs	r2, r3
 8008224:	2100      	movs	r1, #0
 8008226:	f003 faf5 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 800822a:	4b16      	ldr	r3, [pc, #88]	; (8008284 <astronode_send_sak_cr+0x70>)
 800822c:	25c8      	movs	r5, #200	; 0xc8
 800822e:	006d      	lsls	r5, r5, #1
 8008230:	195b      	adds	r3, r3, r5
 8008232:	19db      	adds	r3, r3, r7
 8008234:	0018      	movs	r0, r3
 8008236:	23c6      	movs	r3, #198	; 0xc6
 8008238:	001a      	movs	r2, r3
 800823a:	2100      	movs	r1, #0
 800823c:	f003 faea 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008240:	193b      	adds	r3, r7, r4
 8008242:	2246      	movs	r2, #70	; 0x46
 8008244:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008246:	003a      	movs	r2, r7
 8008248:	193b      	adds	r3, r7, r4
 800824a:	0011      	movs	r1, r2
 800824c:	0018      	movs	r0, r3
 800824e:	f000 fcfb 	bl	8008c48 <astronode_transport_send_receive>
 8008252:	0003      	movs	r3, r0
 8008254:	2b01      	cmp	r3, #1
 8008256:	d111      	bne.n	800827c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <astronode_send_sak_cr+0x70>)
 800825a:	195b      	adds	r3, r3, r5
 800825c:	19db      	adds	r3, r3, r7
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2bc6      	cmp	r3, #198	; 0xc6
 8008262:	d107      	bne.n	8008274 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008264:	4b08      	ldr	r3, [pc, #32]	; (8008288 <astronode_send_sak_cr+0x74>)
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800826a:	4b08      	ldr	r3, [pc, #32]	; (800828c <astronode_send_sak_cr+0x78>)
 800826c:	0018      	movs	r0, r3
 800826e:	f7fa fee9 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008272:	e003      	b.n	800827c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <astronode_send_sak_cr+0x7c>)
 8008276:	0018      	movs	r0, r3
 8008278:	f7fa fee4 	bl	8003044 <send_debug_logs>
}
 800827c:	46c0      	nop			; (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b064      	add	sp, #400	; 0x190
 8008282:	bdb0      	pop	{r4, r5, r7, pc}
 8008284:	fffffe70 	.word	0xfffffe70
 8008288:	20000bf4 	.word	0x20000bf4
 800828c:	08012d90 	.word	0x08012d90
 8008290:	08012db8 	.word	0x08012db8

08008294 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	b0ed      	sub	sp, #436	; 0x1b4
 8008298:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800829a:	21c8      	movs	r1, #200	; 0xc8
 800829c:	2318      	movs	r3, #24
 800829e:	18cb      	adds	r3, r1, r3
 80082a0:	19db      	adds	r3, r3, r7
 80082a2:	0018      	movs	r0, r3
 80082a4:	23c6      	movs	r3, #198	; 0xc6
 80082a6:	001a      	movs	r2, r3
 80082a8:	2100      	movs	r1, #0
 80082aa:	f003 fab3 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 80082ae:	4b4a      	ldr	r3, [pc, #296]	; (80083d8 <astronode_send_mpn_rr+0x144>)
 80082b0:	26cc      	movs	r6, #204	; 0xcc
 80082b2:	0076      	lsls	r6, r6, #1
 80082b4:	199b      	adds	r3, r3, r6
 80082b6:	2218      	movs	r2, #24
 80082b8:	4694      	mov	ip, r2
 80082ba:	44bc      	add	ip, r7
 80082bc:	4463      	add	r3, ip
 80082be:	0018      	movs	r0, r3
 80082c0:	23c6      	movs	r3, #198	; 0xc6
 80082c2:	001a      	movs	r2, r3
 80082c4:	2100      	movs	r1, #0
 80082c6:	f003 faa5 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80082ca:	21c8      	movs	r1, #200	; 0xc8
 80082cc:	2318      	movs	r3, #24
 80082ce:	18cb      	adds	r3, r1, r3
 80082d0:	19db      	adds	r3, r3, r7
 80082d2:	221b      	movs	r2, #27
 80082d4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082d6:	2318      	movs	r3, #24
 80082d8:	18fa      	adds	r2, r7, r3
 80082da:	2318      	movs	r3, #24
 80082dc:	18cb      	adds	r3, r1, r3
 80082de:	19db      	adds	r3, r3, r7
 80082e0:	0011      	movs	r1, r2
 80082e2:	0018      	movs	r0, r3
 80082e4:	f000 fcb0 	bl	8008c48 <astronode_transport_send_receive>
 80082e8:	0003      	movs	r3, r0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d16f      	bne.n	80083ce <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80082ee:	4b3a      	ldr	r3, [pc, #232]	; (80083d8 <astronode_send_mpn_rr+0x144>)
 80082f0:	0032      	movs	r2, r6
 80082f2:	189b      	adds	r3, r3, r2
 80082f4:	2118      	movs	r1, #24
 80082f6:	468c      	mov	ip, r1
 80082f8:	44bc      	add	ip, r7
 80082fa:	4463      	add	r3, ip
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b9b      	cmp	r3, #155	; 0x9b
 8008300:	d161      	bne.n	80083c6 <astronode_send_mpn_rr+0x132>
        {
 8008302:	466b      	mov	r3, sp
 8008304:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008306:	4b34      	ldr	r3, [pc, #208]	; (80083d8 <astronode_send_mpn_rr+0x144>)
 8008308:	189b      	adds	r3, r3, r2
 800830a:	2218      	movs	r2, #24
 800830c:	4694      	mov	ip, r2
 800830e:	44bc      	add	ip, r7
 8008310:	4463      	add	r3, ip
 8008312:	22c4      	movs	r2, #196	; 0xc4
 8008314:	5a9b      	ldrh	r3, [r3, r2]
 8008316:	001a      	movs	r2, r3
 8008318:	3a01      	subs	r2, #1
 800831a:	21ca      	movs	r1, #202	; 0xca
 800831c:	0049      	lsls	r1, r1, #1
 800831e:	2018      	movs	r0, #24
 8008320:	1809      	adds	r1, r1, r0
 8008322:	19c9      	adds	r1, r1, r7
 8008324:	600a      	str	r2, [r1, #0]
 8008326:	001c      	movs	r4, r3
 8008328:	2200      	movs	r2, #0
 800832a:	0015      	movs	r5, r2
 800832c:	0020      	movs	r0, r4
 800832e:	0029      	movs	r1, r5
 8008330:	0004      	movs	r4, r0
 8008332:	0f62      	lsrs	r2, r4, #29
 8008334:	000c      	movs	r4, r1
 8008336:	00e4      	lsls	r4, r4, #3
 8008338:	617c      	str	r4, [r7, #20]
 800833a:	697c      	ldr	r4, [r7, #20]
 800833c:	4314      	orrs	r4, r2
 800833e:	617c      	str	r4, [r7, #20]
 8008340:	0001      	movs	r1, r0
 8008342:	00c9      	lsls	r1, r1, #3
 8008344:	6139      	str	r1, [r7, #16]
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	0004      	movs	r4, r0
 8008352:	0f62      	lsrs	r2, r4, #29
 8008354:	000c      	movs	r4, r1
 8008356:	00e4      	lsls	r4, r4, #3
 8008358:	60fc      	str	r4, [r7, #12]
 800835a:	68fc      	ldr	r4, [r7, #12]
 800835c:	4314      	orrs	r4, r2
 800835e:	60fc      	str	r4, [r7, #12]
 8008360:	0001      	movs	r1, r0
 8008362:	00ca      	lsls	r2, r1, #3
 8008364:	60ba      	str	r2, [r7, #8]
 8008366:	3307      	adds	r3, #7
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	4669      	mov	r1, sp
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	469d      	mov	sp, r3
 8008372:	466b      	mov	r3, sp
 8008374:	3300      	adds	r3, #0
 8008376:	24c8      	movs	r4, #200	; 0xc8
 8008378:	0064      	lsls	r4, r4, #1
 800837a:	2218      	movs	r2, #24
 800837c:	18a2      	adds	r2, r4, r2
 800837e:	19d1      	adds	r1, r2, r7
 8008380:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <astronode_send_mpn_rr+0x148>)
 8008384:	0018      	movs	r0, r3
 8008386:	f7fa fe5d 	bl	8003044 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <astronode_send_mpn_rr+0x144>)
 800838c:	22cc      	movs	r2, #204	; 0xcc
 800838e:	0052      	lsls	r2, r2, #1
 8008390:	189b      	adds	r3, r3, r2
 8008392:	2218      	movs	r2, #24
 8008394:	4694      	mov	ip, r2
 8008396:	44bc      	add	ip, r7
 8008398:	4463      	add	r3, ip
 800839a:	22c4      	movs	r2, #196	; 0xc4
 800839c:	5a9b      	ldrh	r3, [r3, r2]
 800839e:	0019      	movs	r1, r3
 80083a0:	2318      	movs	r3, #24
 80083a2:	18fb      	adds	r3, r7, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	4a0e      	ldr	r2, [pc, #56]	; (80083e0 <astronode_send_mpn_rr+0x14c>)
 80083a8:	2018      	movs	r0, #24
 80083aa:	1820      	adds	r0, r4, r0
 80083ac:	19c0      	adds	r0, r0, r7
 80083ae:	6800      	ldr	r0, [r0, #0]
 80083b0:	f003 f966 	bl	800b680 <snprintf>
            send_debug_logs(product_number);
 80083b4:	2318      	movs	r3, #24
 80083b6:	18e3      	adds	r3, r4, r3
 80083b8:	19db      	adds	r3, r3, r7
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	0018      	movs	r0, r3
 80083be:	f7fa fe41 	bl	8003044 <send_debug_logs>
 80083c2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80083c4:	e003      	b.n	80083ce <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <astronode_send_mpn_rr+0x150>)
 80083c8:	0018      	movs	r0, r3
 80083ca:	f7fa fe3b 	bl	8003044 <send_debug_logs>
}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b06d      	add	sp, #436	; 0x1b4
 80083d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	fffffe68 	.word	0xfffffe68
 80083dc:	08012e80 	.word	0x08012e80
 80083e0:	080129b8 	.word	0x080129b8
 80083e4:	080129f4 	.word	0x080129f4

080083e8 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80083e8:	b5b0      	push	{r4, r5, r7, lr}
 80083ea:	b0e4      	sub	sp, #400	; 0x190
 80083ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083ee:	24c8      	movs	r4, #200	; 0xc8
 80083f0:	193b      	adds	r3, r7, r4
 80083f2:	0018      	movs	r0, r3
 80083f4:	23c6      	movs	r3, #198	; 0xc6
 80083f6:	001a      	movs	r2, r3
 80083f8:	2100      	movs	r1, #0
 80083fa:	f003 fa0b 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <astronode_send_cmd_cr+0x70>)
 8008400:	25c8      	movs	r5, #200	; 0xc8
 8008402:	006d      	lsls	r5, r5, #1
 8008404:	195b      	adds	r3, r3, r5
 8008406:	19db      	adds	r3, r3, r7
 8008408:	0018      	movs	r0, r3
 800840a:	23c6      	movs	r3, #198	; 0xc6
 800840c:	001a      	movs	r2, r3
 800840e:	2100      	movs	r1, #0
 8008410:	f003 fa00 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008414:	193b      	adds	r3, r7, r4
 8008416:	2248      	movs	r2, #72	; 0x48
 8008418:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800841a:	003a      	movs	r2, r7
 800841c:	193b      	adds	r3, r7, r4
 800841e:	0011      	movs	r1, r2
 8008420:	0018      	movs	r0, r3
 8008422:	f000 fc11 	bl	8008c48 <astronode_transport_send_receive>
 8008426:	0003      	movs	r3, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	d111      	bne.n	8008450 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <astronode_send_cmd_cr+0x70>)
 800842e:	195b      	adds	r3, r3, r5
 8008430:	19db      	adds	r3, r3, r7
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2bc8      	cmp	r3, #200	; 0xc8
 8008436:	d107      	bne.n	8008448 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008438:	4b08      	ldr	r3, [pc, #32]	; (800845c <astronode_send_cmd_cr+0x74>)
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 800843e:	4b08      	ldr	r3, [pc, #32]	; (8008460 <astronode_send_cmd_cr+0x78>)
 8008440:	0018      	movs	r0, r3
 8008442:	f7fa fdff 	bl	8003044 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008446:	e003      	b.n	8008450 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <astronode_send_cmd_cr+0x7c>)
 800844a:	0018      	movs	r0, r3
 800844c:	f7fa fdfa 	bl	8003044 <send_debug_logs>
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b064      	add	sp, #400	; 0x190
 8008456:	bdb0      	pop	{r4, r5, r7, pc}
 8008458:	fffffe70 	.word	0xfffffe70
 800845c:	20000bf6 	.word	0x20000bf6
 8008460:	080132d0 	.word	0x080132d0
 8008464:	080132f4 	.word	0x080132f4

08008468 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	4cac      	ldr	r4, [pc, #688]	; (800871c <astronode_send_cmd_rr+0x2b4>)
 800846c:	44a5      	add	sp, r4
 800846e:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008470:	218c      	movs	r1, #140	; 0x8c
 8008472:	0049      	lsls	r1, r1, #1
 8008474:	2318      	movs	r3, #24
 8008476:	18cb      	adds	r3, r1, r3
 8008478:	19db      	adds	r3, r3, r7
 800847a:	0018      	movs	r0, r3
 800847c:	23c6      	movs	r3, #198	; 0xc6
 800847e:	001a      	movs	r2, r3
 8008480:	2100      	movs	r1, #0
 8008482:	f003 f9c7 	bl	800b814 <memset>
    astronode_app_msg_t answer = {0};
 8008486:	4ba6      	ldr	r3, [pc, #664]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 8008488:	26f8      	movs	r6, #248	; 0xf8
 800848a:	0076      	lsls	r6, r6, #1
 800848c:	199b      	adds	r3, r3, r6
 800848e:	2218      	movs	r2, #24
 8008490:	4694      	mov	ip, r2
 8008492:	44bc      	add	ip, r7
 8008494:	4463      	add	r3, ip
 8008496:	0018      	movs	r0, r3
 8008498:	23c6      	movs	r3, #198	; 0xc6
 800849a:	001a      	movs	r2, r3
 800849c:	2100      	movs	r1, #0
 800849e:	f003 f9b9 	bl	800b814 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80084a2:	218c      	movs	r1, #140	; 0x8c
 80084a4:	0049      	lsls	r1, r1, #1
 80084a6:	2318      	movs	r3, #24
 80084a8:	18cb      	adds	r3, r1, r3
 80084aa:	19db      	adds	r3, r3, r7
 80084ac:	2247      	movs	r2, #71	; 0x47
 80084ae:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084b0:	2350      	movs	r3, #80	; 0x50
 80084b2:	2218      	movs	r2, #24
 80084b4:	189b      	adds	r3, r3, r2
 80084b6:	19da      	adds	r2, r3, r7
 80084b8:	2318      	movs	r3, #24
 80084ba:	18cb      	adds	r3, r1, r3
 80084bc:	19db      	adds	r3, r3, r7
 80084be:	0011      	movs	r1, r2
 80084c0:	0018      	movs	r0, r3
 80084c2:	f000 fbc1 	bl	8008c48 <astronode_transport_send_receive>
 80084c6:	0003      	movs	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d000      	beq.n	80084ce <astronode_send_cmd_rr+0x66>
 80084cc:	e121      	b.n	8008712 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80084ce:	4b94      	ldr	r3, [pc, #592]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 80084d0:	199b      	adds	r3, r3, r6
 80084d2:	2218      	movs	r2, #24
 80084d4:	4694      	mov	ip, r2
 80084d6:	44bc      	add	ip, r7
 80084d8:	4463      	add	r3, ip
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2bc7      	cmp	r3, #199	; 0xc7
 80084de:	d000      	beq.n	80084e2 <astronode_send_cmd_rr+0x7a>
 80084e0:	e113      	b.n	800870a <astronode_send_cmd_rr+0x2a2>
        {
 80084e2:	466b      	mov	r3, sp
 80084e4:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80084e6:	4b8f      	ldr	r3, [pc, #572]	; (8008724 <astronode_send_cmd_rr+0x2bc>)
 80084e8:	0018      	movs	r0, r3
 80084ea:	f7fa fdab 	bl	8003044 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 80084ee:	4b8c      	ldr	r3, [pc, #560]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 80084f0:	21f8      	movs	r1, #248	; 0xf8
 80084f2:	0049      	lsls	r1, r1, #1
 80084f4:	185b      	adds	r3, r3, r1
 80084f6:	2218      	movs	r2, #24
 80084f8:	4694      	mov	ip, r2
 80084fa:	44bc      	add	ip, r7
 80084fc:	4463      	add	r3, ip
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008502:	4b87      	ldr	r3, [pc, #540]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 8008504:	185b      	adds	r3, r3, r1
 8008506:	2018      	movs	r0, #24
 8008508:	4684      	mov	ip, r0
 800850a:	44bc      	add	ip, r7
 800850c:	4463      	add	r3, ip
 800850e:	789b      	ldrb	r3, [r3, #2]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008514:	4b82      	ldr	r3, [pc, #520]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 8008516:	185b      	adds	r3, r3, r1
 8008518:	2018      	movs	r0, #24
 800851a:	4684      	mov	ip, r0
 800851c:	44bc      	add	ip, r7
 800851e:	4463      	add	r3, ip
 8008520:	78db      	ldrb	r3, [r3, #3]
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008526:	4b7e      	ldr	r3, [pc, #504]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 8008528:	185b      	adds	r3, r3, r1
 800852a:	2118      	movs	r1, #24
 800852c:	468c      	mov	ip, r1
 800852e:	44bc      	add	ip, r7
 8008530:	4463      	add	r3, ip
 8008532:	791b      	ldrb	r3, [r3, #4]
 8008534:	061b      	lsls	r3, r3, #24
 8008536:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008538:	22f4      	movs	r2, #244	; 0xf4
 800853a:	0052      	lsls	r2, r2, #1
 800853c:	2118      	movs	r1, #24
 800853e:	1851      	adds	r1, r2, r1
 8008540:	19c8      	adds	r0, r1, r7
 8008542:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008544:	2318      	movs	r3, #24
 8008546:	18d3      	adds	r3, r2, r3
 8008548:	19db      	adds	r3, r3, r7
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4976      	ldr	r1, [pc, #472]	; (8008728 <astronode_send_cmd_rr+0x2c0>)
 800854e:	2318      	movs	r3, #24
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	0018      	movs	r0, r3
 8008554:	f003 f8c8 	bl	800b6e8 <sprintf>
            send_debug_logs(str);
 8008558:	2318      	movs	r3, #24
 800855a:	18fb      	adds	r3, r7, r3
 800855c:	0018      	movs	r0, r3
 800855e:	f7fa fd71 	bl	8003044 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008562:	4b6f      	ldr	r3, [pc, #444]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 8008564:	21f8      	movs	r1, #248	; 0xf8
 8008566:	0049      	lsls	r1, r1, #1
 8008568:	185b      	adds	r3, r3, r1
 800856a:	2218      	movs	r2, #24
 800856c:	4694      	mov	ip, r2
 800856e:	44bc      	add	ip, r7
 8008570:	4463      	add	r3, ip
 8008572:	22c4      	movs	r2, #196	; 0xc4
 8008574:	5a9b      	ldrh	r3, [r3, r2]
 8008576:	2b2c      	cmp	r3, #44	; 0x2c
 8008578:	d00e      	beq.n	8008598 <astronode_send_cmd_rr+0x130>
 800857a:	4b69      	ldr	r3, [pc, #420]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 800857c:	185b      	adds	r3, r3, r1
 800857e:	2218      	movs	r2, #24
 8008580:	4694      	mov	ip, r2
 8008582:	44bc      	add	ip, r7
 8008584:	4463      	add	r3, ip
 8008586:	22c4      	movs	r2, #196	; 0xc4
 8008588:	5a9b      	ldrh	r3, [r3, r2]
 800858a:	2b0c      	cmp	r3, #12
 800858c:	d004      	beq.n	8008598 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 800858e:	4b67      	ldr	r3, [pc, #412]	; (800872c <astronode_send_cmd_rr+0x2c4>)
 8008590:	0018      	movs	r0, r3
 8008592:	f7fa fd57 	bl	8003044 <send_debug_logs>
                return;
 8008596:	e0b6      	b.n	8008706 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008598:	4b61      	ldr	r3, [pc, #388]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 800859a:	22f8      	movs	r2, #248	; 0xf8
 800859c:	0052      	lsls	r2, r2, #1
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	2218      	movs	r2, #24
 80085a2:	4694      	mov	ip, r2
 80085a4:	44bc      	add	ip, r7
 80085a6:	4463      	add	r3, ip
 80085a8:	22c4      	movs	r2, #196	; 0xc4
 80085aa:	5a9b      	ldrh	r3, [r3, r2]
 80085ac:	001a      	movs	r2, r3
 80085ae:	3a01      	subs	r2, #1
 80085b0:	21f2      	movs	r1, #242	; 0xf2
 80085b2:	0049      	lsls	r1, r1, #1
 80085b4:	2018      	movs	r0, #24
 80085b6:	1809      	adds	r1, r1, r0
 80085b8:	19c9      	adds	r1, r1, r7
 80085ba:	600a      	str	r2, [r1, #0]
 80085bc:	001c      	movs	r4, r3
 80085be:	2200      	movs	r2, #0
 80085c0:	0015      	movs	r5, r2
 80085c2:	0020      	movs	r0, r4
 80085c4:	0029      	movs	r1, r5
 80085c6:	0004      	movs	r4, r0
 80085c8:	0f62      	lsrs	r2, r4, #29
 80085ca:	000c      	movs	r4, r1
 80085cc:	00e4      	lsls	r4, r4, #3
 80085ce:	617c      	str	r4, [r7, #20]
 80085d0:	697c      	ldr	r4, [r7, #20]
 80085d2:	4314      	orrs	r4, r2
 80085d4:	617c      	str	r4, [r7, #20]
 80085d6:	0001      	movs	r1, r0
 80085d8:	00c9      	lsls	r1, r1, #3
 80085da:	6139      	str	r1, [r7, #16]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	2200      	movs	r2, #0
 80085e0:	607a      	str	r2, [r7, #4]
 80085e2:	6838      	ldr	r0, [r7, #0]
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	0004      	movs	r4, r0
 80085e8:	0f62      	lsrs	r2, r4, #29
 80085ea:	000c      	movs	r4, r1
 80085ec:	00e4      	lsls	r4, r4, #3
 80085ee:	60fc      	str	r4, [r7, #12]
 80085f0:	68fc      	ldr	r4, [r7, #12]
 80085f2:	4314      	orrs	r4, r2
 80085f4:	60fc      	str	r4, [r7, #12]
 80085f6:	0001      	movs	r1, r0
 80085f8:	00ca      	lsls	r2, r1, #3
 80085fa:	60ba      	str	r2, [r7, #8]
 80085fc:	3307      	adds	r3, #7
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4669      	mov	r1, sp
 8008604:	1acb      	subs	r3, r1, r3
 8008606:	469d      	mov	sp, r3
 8008608:	466b      	mov	r3, sp
 800860a:	3300      	adds	r3, #0
 800860c:	20f0      	movs	r0, #240	; 0xf0
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	2218      	movs	r2, #24
 8008612:	1882      	adds	r2, r0, r2
 8008614:	19d1      	adds	r1, r2, r7
 8008616:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008618:	4b41      	ldr	r3, [pc, #260]	; (8008720 <astronode_send_cmd_rr+0x2b8>)
 800861a:	22f8      	movs	r2, #248	; 0xf8
 800861c:	0052      	lsls	r2, r2, #1
 800861e:	189b      	adds	r3, r3, r2
 8008620:	2218      	movs	r2, #24
 8008622:	4694      	mov	ip, r2
 8008624:	44bc      	add	ip, r7
 8008626:	4463      	add	r3, ip
 8008628:	22c4      	movs	r2, #196	; 0xc4
 800862a:	5a9b      	ldrh	r3, [r3, r2]
 800862c:	3b03      	subs	r3, #3
 800862e:	0019      	movs	r1, r3
 8008630:	2350      	movs	r3, #80	; 0x50
 8008632:	2218      	movs	r2, #24
 8008634:	189b      	adds	r3, r3, r2
 8008636:	19db      	adds	r3, r3, r7
 8008638:	3305      	adds	r3, #5
 800863a:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <astronode_send_cmd_rr+0x2c8>)
 800863c:	2418      	movs	r4, #24
 800863e:	1900      	adds	r0, r0, r4
 8008640:	19c0      	adds	r0, r0, r7
 8008642:	6800      	ldr	r0, [r0, #0]
 8008644:	f003 f81c 	bl	800b680 <snprintf>
 8008648:	0002      	movs	r2, r0
 800864a:	23ef      	movs	r3, #239	; 0xef
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	2118      	movs	r1, #24
 8008650:	185b      	adds	r3, r3, r1
 8008652:	19db      	adds	r3, r3, r7
 8008654:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008656:	23f0      	movs	r3, #240	; 0xf0
 8008658:	33ff      	adds	r3, #255	; 0xff
 800865a:	2218      	movs	r2, #24
 800865c:	189b      	adds	r3, r3, r2
 800865e:	19db      	adds	r3, r3, r7
 8008660:	2200      	movs	r2, #0
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e024      	b.n	80086b0 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008666:	23f0      	movs	r3, #240	; 0xf0
 8008668:	33ff      	adds	r3, #255	; 0xff
 800866a:	2218      	movs	r2, #24
 800866c:	189b      	adds	r3, r3, r2
 800866e:	19db      	adds	r3, r3, r7
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	22f0      	movs	r2, #240	; 0xf0
 8008674:	0052      	lsls	r2, r2, #1
 8008676:	2118      	movs	r1, #24
 8008678:	1852      	adds	r2, r2, r1
 800867a:	19d2      	adds	r2, r2, r7
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	5cd3      	ldrb	r3, [r2, r3]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	4b2c      	ldr	r3, [pc, #176]	; (8008734 <astronode_send_cmd_rr+0x2cc>)
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	001a      	movs	r2, r3
 800868a:	2397      	movs	r3, #151	; 0x97
 800868c:	4013      	ands	r3, r2
 800868e:	d104      	bne.n	800869a <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008690:	4b29      	ldr	r3, [pc, #164]	; (8008738 <astronode_send_cmd_rr+0x2d0>)
 8008692:	0018      	movs	r0, r3
 8008694:	f7fa fcd6 	bl	8003044 <send_debug_logs>
                    return;
 8008698:	e035      	b.n	8008706 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 800869a:	21f0      	movs	r1, #240	; 0xf0
 800869c:	31ff      	adds	r1, #255	; 0xff
 800869e:	2318      	movs	r3, #24
 80086a0:	18cb      	adds	r3, r1, r3
 80086a2:	19db      	adds	r3, r3, r7
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	2318      	movs	r3, #24
 80086a8:	18cb      	adds	r3, r1, r3
 80086aa:	19db      	adds	r3, r3, r7
 80086ac:	3201      	adds	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	23f0      	movs	r3, #240	; 0xf0
 80086b2:	33ff      	adds	r3, #255	; 0xff
 80086b4:	2218      	movs	r2, #24
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	19db      	adds	r3, r3, r7
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	22ef      	movs	r2, #239	; 0xef
 80086c0:	0052      	lsls	r2, r2, #1
 80086c2:	2118      	movs	r1, #24
 80086c4:	1852      	adds	r2, r2, r1
 80086c6:	19d2      	adds	r2, r2, r7
 80086c8:	8812      	ldrh	r2, [r2, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d8cb      	bhi.n	8008666 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <astronode_send_cmd_rr+0x2d4>)
 80086d0:	0018      	movs	r0, r3
 80086d2:	f7fa fcb7 	bl	8003044 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80086d6:	2350      	movs	r3, #80	; 0x50
 80086d8:	2218      	movs	r2, #24
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	19db      	adds	r3, r3, r7
 80086de:	1d5a      	adds	r2, r3, #5
 80086e0:	4917      	ldr	r1, [pc, #92]	; (8008740 <astronode_send_cmd_rr+0x2d8>)
 80086e2:	24f0      	movs	r4, #240	; 0xf0
 80086e4:	0064      	lsls	r4, r4, #1
 80086e6:	2318      	movs	r3, #24
 80086e8:	18e3      	adds	r3, r4, r3
 80086ea:	19db      	adds	r3, r3, r7
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	0018      	movs	r0, r3
 80086f0:	f002 fffa 	bl	800b6e8 <sprintf>
            send_debug_logs(command_content);
 80086f4:	2318      	movs	r3, #24
 80086f6:	18e3      	adds	r3, r4, r3
 80086f8:	19db      	adds	r3, r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	0018      	movs	r0, r3
 80086fe:	f7fa fca1 	bl	8003044 <send_debug_logs>
 8008702:	46b5      	mov	sp, r6
 8008704:	e005      	b.n	8008712 <astronode_send_cmd_rr+0x2aa>
                return;
 8008706:	46b5      	mov	sp, r6
 8008708:	e003      	b.n	8008712 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <astronode_send_cmd_rr+0x2dc>)
 800870c:	0018      	movs	r0, r3
 800870e:	f7fa fc99 	bl	8003044 <send_debug_logs>
        }
    }
}
 8008712:	46bd      	mov	sp, r7
 8008714:	2383      	movs	r3, #131	; 0x83
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	449d      	add	sp, r3
 800871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871c:	fffffdf4 	.word	0xfffffdf4
 8008720:	fffffe60 	.word	0xfffffe60
 8008724:	0801330c 	.word	0x0801330c
 8008728:	08013328 	.word	0x08013328
 800872c:	08013378 	.word	0x08013378
 8008730:	080129b8 	.word	0x080129b8
 8008734:	08013eb0 	.word	0x08013eb0
 8008738:	0801338c 	.word	0x0801338c
 800873c:	080133b8 	.word	0x080133b8
 8008740:	080133d0 	.word	0x080133d0
 8008744:	080133d4 	.word	0x080133d4

08008748 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <is_sak_available+0x10>)
 800874e:	781b      	ldrb	r3, [r3, #0]
}
 8008750:	0018      	movs	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	20000bf4 	.word	0x20000bf4

0800875c <is_astronode_reset>:

bool is_astronode_reset()
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008760:	4b02      	ldr	r3, [pc, #8]	; (800876c <is_astronode_reset+0x10>)
 8008762:	781b      	ldrb	r3, [r3, #0]
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	20000bf5 	.word	0x20000bf5

08008770 <is_command_available>:

bool is_command_available()
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <is_command_available+0x10>)
 8008776:	781b      	ldrb	r3, [r3, #0]
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	20000bf6 	.word	0x20000bf6

08008784 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	0002      	movs	r2, r0
 800878c:	6039      	str	r1, [r7, #0]
 800878e:	1dfb      	adds	r3, r7, #7
 8008790:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008792:	1dfb      	adds	r3, r7, #7
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b2f      	cmp	r3, #47	; 0x2f
 8008798:	d90b      	bls.n	80087b2 <ascii_to_value+0x2e>
 800879a:	1dfb      	adds	r3, r7, #7
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b39      	cmp	r3, #57	; 0x39
 80087a0:	d807      	bhi.n	80087b2 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80087a2:	1dfb      	adds	r3, r7, #7
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	3b30      	subs	r3, #48	; 0x30
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	701a      	strb	r2, [r3, #0]
        return true;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e010      	b.n	80087d4 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80087b2:	1dfb      	adds	r3, r7, #7
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d90b      	bls.n	80087d2 <ascii_to_value+0x4e>
 80087ba:	1dfb      	adds	r3, r7, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b46      	cmp	r3, #70	; 0x46
 80087c0:	d807      	bhi.n	80087d2 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80087c2:	1dfb      	adds	r3, r7, #7
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	3b37      	subs	r3, #55	; 0x37
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	701a      	strb	r2, [r3, #0]
        return true;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80087d2:	2300      	movs	r3, #0
    }
}
 80087d4:	0018      	movs	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	b002      	add	sp, #8
 80087da:	bd80      	pop	{r7, pc}

080087dc <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80087e6:	250e      	movs	r5, #14
 80087e8:	197b      	adds	r3, r7, r5
 80087ea:	2200      	movs	r2, #0
 80087ec:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80087ee:	197b      	adds	r3, r7, r5
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	197a      	adds	r2, r7, r5
 80087f4:	1c59      	adds	r1, r3, #1
 80087f6:	8011      	strh	r1, [r2, #0]
 80087f8:	001a      	movs	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	2202      	movs	r2, #2
 8008800:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	260a      	movs	r6, #10
 8008806:	19bc      	adds	r4, r7, r6
 8008808:	4a44      	ldr	r2, [pc, #272]	; (800891c <astronode_create_request_transport+0x140>)
 800880a:	2101      	movs	r1, #1
 800880c:	0018      	movs	r0, r3
 800880e:	f000 fa7d 	bl	8008d0c <calculate_crc>
 8008812:	0003      	movs	r3, r0
 8008814:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	1c58      	adds	r0, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	22c4      	movs	r2, #196	; 0xc4
 800881e:	5a99      	ldrh	r1, [r3, r2]
 8008820:	19bc      	adds	r4, r7, r6
 8008822:	19bb      	adds	r3, r7, r6
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	001a      	movs	r2, r3
 8008828:	f000 fa70 	bl	8008d0c <calculate_crc>
 800882c:	0003      	movs	r3, r0
 800882e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008830:	19bb      	adds	r3, r7, r6
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	021b      	lsls	r3, r3, #8
 8008836:	b21a      	sxth	r2, r3
 8008838:	0031      	movs	r1, r6
 800883a:	19bb      	adds	r3, r7, r6
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	b29b      	uxth	r3, r3
 8008842:	b21b      	sxth	r3, r3
 8008844:	4313      	orrs	r3, r2
 8008846:	b21a      	sxth	r2, r3
 8008848:	187b      	adds	r3, r7, r1
 800884a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7818      	ldrb	r0, [r3, #0]
 8008850:	197b      	adds	r3, r7, r5
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	18d3      	adds	r3, r2, r3
 8008858:	0019      	movs	r1, r3
 800885a:	f000 fbeb 	bl	8009034 <uint8_to_ascii_buffer>
    index += 2;
 800885e:	197b      	adds	r3, r7, r5
 8008860:	197a      	adds	r2, r7, r5
 8008862:	8812      	ldrh	r2, [r2, #0]
 8008864:	3202      	adds	r2, #2
 8008866:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008868:	230c      	movs	r3, #12
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	2200      	movs	r2, #0
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e017      	b.n	80088a2 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008872:	240c      	movs	r4, #12
 8008874:	193b      	adds	r3, r7, r4
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	18d3      	adds	r3, r2, r3
 800887c:	7858      	ldrb	r0, [r3, #1]
 800887e:	250e      	movs	r5, #14
 8008880:	197b      	adds	r3, r7, r5
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	18d3      	adds	r3, r2, r3
 8008888:	0019      	movs	r1, r3
 800888a:	f000 fbd3 	bl	8009034 <uint8_to_ascii_buffer>
        index += 2;
 800888e:	197b      	adds	r3, r7, r5
 8008890:	197a      	adds	r2, r7, r5
 8008892:	8812      	ldrh	r2, [r2, #0]
 8008894:	3202      	adds	r2, #2
 8008896:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008898:	193b      	adds	r3, r7, r4
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	193b      	adds	r3, r7, r4
 800889e:	3201      	adds	r2, #1
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	22c4      	movs	r2, #196	; 0xc4
 80088a6:	5a9b      	ldrh	r3, [r3, r2]
 80088a8:	220c      	movs	r2, #12
 80088aa:	18ba      	adds	r2, r7, r2
 80088ac:	8812      	ldrh	r2, [r2, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3df      	bcc.n	8008872 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80088b2:	250a      	movs	r5, #10
 80088b4:	197b      	adds	r3, r7, r5
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	0a1b      	lsrs	r3, r3, #8
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	b2d8      	uxtb	r0, r3
 80088be:	240e      	movs	r4, #14
 80088c0:	193b      	adds	r3, r7, r4
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	18d3      	adds	r3, r2, r3
 80088c8:	0019      	movs	r1, r3
 80088ca:	f000 fbb3 	bl	8009034 <uint8_to_ascii_buffer>
    index += 2;
 80088ce:	0021      	movs	r1, r4
 80088d0:	187b      	adds	r3, r7, r1
 80088d2:	187a      	adds	r2, r7, r1
 80088d4:	8812      	ldrh	r2, [r2, #0]
 80088d6:	3202      	adds	r2, #2
 80088d8:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 80088da:	197b      	adds	r3, r7, r5
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b2d8      	uxtb	r0, r3
 80088e0:	000c      	movs	r4, r1
 80088e2:	187b      	adds	r3, r7, r1
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	18d3      	adds	r3, r2, r3
 80088ea:	0019      	movs	r1, r3
 80088ec:	f000 fba2 	bl	8009034 <uint8_to_ascii_buffer>
    index += 2;
 80088f0:	0020      	movs	r0, r4
 80088f2:	183b      	adds	r3, r7, r0
 80088f4:	183a      	adds	r2, r7, r0
 80088f6:	8812      	ldrh	r2, [r2, #0]
 80088f8:	3202      	adds	r2, #2
 80088fa:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80088fc:	183b      	adds	r3, r7, r0
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	183a      	adds	r2, r7, r0
 8008902:	1c59      	adds	r1, r3, #1
 8008904:	8011      	strh	r1, [r2, #0]
 8008906:	001a      	movs	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	189b      	adds	r3, r3, r2
 800890c:	2203      	movs	r2, #3
 800890e:	701a      	strb	r2, [r3, #0]

    return index;
 8008910:	183b      	adds	r3, r7, r0
 8008912:	881b      	ldrh	r3, [r3, #0]
}
 8008914:	0018      	movs	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	b005      	add	sp, #20
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891c:	0000ffff 	.word	0x0000ffff

08008920 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	230a      	movs	r3, #10
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	1c0a      	adds	r2, r1, #0
 8008930:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d005      	beq.n	8008946 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800893a:	4bbd      	ldr	r3, [pc, #756]	; (8008c30 <astronode_decode_answer_transport+0x310>)
 800893c:	0018      	movs	r0, r3
 800893e:	f7fa fb81 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 8008942:	2300      	movs	r3, #0
 8008944:	e170      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008946:	210a      	movs	r1, #10
 8008948:	187b      	adds	r3, r7, r1
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	2201      	movs	r2, #1
 800894e:	4013      	ands	r3, r2
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <astronode_decode_answer_transport+0x3e>
 8008956:	187b      	adds	r3, r7, r1
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	2b07      	cmp	r3, #7
 800895c:	d805      	bhi.n	800896a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800895e:	4bb5      	ldr	r3, [pc, #724]	; (8008c34 <astronode_decode_answer_transport+0x314>)
 8008960:	0018      	movs	r0, r3
 8008962:	f7fa fb6f 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 8008966:	2300      	movs	r3, #0
 8008968:	e15e      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800896a:	230a      	movs	r3, #10
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	3b08      	subs	r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	da00      	bge.n	8008978 <astronode_decode_answer_transport+0x58>
 8008976:	3301      	adds	r3, #1
 8008978:	105b      	asrs	r3, r3, #1
 800897a:	b299      	uxth	r1, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	22c4      	movs	r2, #196	; 0xc4
 8008980:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008982:	230a      	movs	r3, #10
 8008984:	18fb      	adds	r3, r7, r3
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	18d3      	adds	r3, r2, r3
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d005      	beq.n	80089a0 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008994:	4ba8      	ldr	r3, [pc, #672]	; (8008c38 <astronode_decode_answer_transport+0x318>)
 8008996:	0018      	movs	r0, r3
 8008998:	f7fa fb54 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 800899c:	2300      	movs	r3, #0
 800899e:	e143      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80089a0:	2117      	movs	r1, #23
 80089a2:	187b      	adds	r3, r7, r1
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80089a8:	2416      	movs	r4, #22
 80089aa:	193b      	adds	r3, r7, r4
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	187a      	adds	r2, r7, r1
 80089b8:	0011      	movs	r1, r2
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7ff fee2 	bl	8008784 <ascii_to_value>
 80089c0:	0003      	movs	r3, r0
 80089c2:	001a      	movs	r2, r3
 80089c4:	2301      	movs	r3, #1
 80089c6:	4053      	eors	r3, r2
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10e      	bne.n	80089ec <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3302      	adds	r3, #2
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	193a      	adds	r2, r7, r4
 80089d6:	0011      	movs	r1, r2
 80089d8:	0018      	movs	r0, r3
 80089da:	f7ff fed3 	bl	8008784 <ascii_to_value>
 80089de:	0003      	movs	r3, r0
 80089e0:	001a      	movs	r2, r3
 80089e2:	2301      	movs	r3, #1
 80089e4:	4053      	eors	r3, r2
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80089ec:	4b93      	ldr	r3, [pc, #588]	; (8008c3c <astronode_decode_answer_transport+0x31c>)
 80089ee:	0018      	movs	r0, r3
 80089f0:	f7fa fb28 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	e117      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80089f8:	2317      	movs	r3, #23
 80089fa:	18fb      	adds	r3, r7, r3
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	2316      	movs	r3, #22
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	18d3      	adds	r3, r2, r3
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008a10:	231e      	movs	r3, #30
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	2203      	movs	r2, #3
 8008a16:	801a      	strh	r2, [r3, #0]
 8008a18:	231c      	movs	r3, #28
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	e045      	b.n	8008aae <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008a22:	241e      	movs	r4, #30
 8008a24:	193b      	adds	r3, r7, r4
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	18d3      	adds	r3, r2, r3
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2217      	movs	r2, #23
 8008a30:	18ba      	adds	r2, r7, r2
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7ff fea5 	bl	8008784 <ascii_to_value>
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4053      	eors	r3, r2
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d112      	bne.n	8008a6e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008a48:	193b      	adds	r3, r7, r4
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	18d3      	adds	r3, r2, r3
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2216      	movs	r2, #22
 8008a56:	18ba      	adds	r2, r7, r2
 8008a58:	0011      	movs	r1, r2
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7ff fe92 	bl	8008784 <ascii_to_value>
 8008a60:	0003      	movs	r3, r0
 8008a62:	001a      	movs	r2, r3
 8008a64:	2301      	movs	r3, #1
 8008a66:	4053      	eors	r3, r2
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008a6e:	4b73      	ldr	r3, [pc, #460]	; (8008c3c <astronode_decode_answer_transport+0x31c>)
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7fa fae7 	bl	8003044 <send_debug_logs>
            return RS_FAILURE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e0d6      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008a7a:	2317      	movs	r3, #23
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	b2d9      	uxtb	r1, r3
 8008a84:	2316      	movs	r3, #22
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	201c      	movs	r0, #28
 8008a8c:	183b      	adds	r3, r7, r0
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	1838      	adds	r0, r7, r0
 8008a92:	1c5c      	adds	r4, r3, #1
 8008a94:	8004      	strh	r4, [r0, #0]
 8008a96:	0018      	movs	r0, r3
 8008a98:	188b      	adds	r3, r1, r2
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	181b      	adds	r3, r3, r0
 8008aa0:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008aa2:	221e      	movs	r2, #30
 8008aa4:	18bb      	adds	r3, r7, r2
 8008aa6:	18ba      	adds	r2, r7, r2
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	3202      	adds	r2, #2
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	231e      	movs	r3, #30
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	881a      	ldrh	r2, [r3, #0]
 8008ab4:	260a      	movs	r6, #10
 8008ab6:	19bb      	adds	r3, r7, r6
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	3b05      	subs	r3, #5
 8008abc:	429a      	cmp	r2, r3
 8008abe:	dbb0      	blt.n	8008a22 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	251a      	movs	r5, #26
 8008ac4:	197c      	adds	r4, r7, r5
 8008ac6:	4a5e      	ldr	r2, [pc, #376]	; (8008c40 <astronode_decode_answer_transport+0x320>)
 8008ac8:	2101      	movs	r1, #1
 8008aca:	0018      	movs	r0, r3
 8008acc:	f000 f91e 	bl	8008d0c <calculate_crc>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	1c58      	adds	r0, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	22c4      	movs	r2, #196	; 0xc4
 8008adc:	5a99      	ldrh	r1, [r3, r2]
 8008ade:	197c      	adds	r4, r7, r5
 8008ae0:	197b      	adds	r3, r7, r5
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	001a      	movs	r2, r3
 8008ae6:	f000 f911 	bl	8008d0c <calculate_crc>
 8008aea:	0003      	movs	r3, r0
 8008aec:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008aee:	197b      	adds	r3, r7, r5
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	b21a      	sxth	r2, r3
 8008af6:	0029      	movs	r1, r5
 8008af8:	197b      	adds	r3, r7, r5
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	b21b      	sxth	r3, r3
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b21a      	sxth	r2, r3
 8008b06:	187b      	adds	r3, r7, r1
 8008b08:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008b0a:	19bb      	adds	r3, r7, r6
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	3b05      	subs	r3, #5
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	18d3      	adds	r3, r2, r3
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2217      	movs	r2, #23
 8008b18:	18ba      	adds	r2, r7, r2
 8008b1a:	0011      	movs	r1, r2
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f7ff fe31 	bl	8008784 <ascii_to_value>
 8008b22:	0003      	movs	r3, r0
 8008b24:	001a      	movs	r2, r3
 8008b26:	2301      	movs	r3, #1
 8008b28:	4053      	eors	r3, r2
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d112      	bne.n	8008b56 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008b30:	19bb      	adds	r3, r7, r6
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2216      	movs	r2, #22
 8008b3e:	18ba      	adds	r2, r7, r2
 8008b40:	0011      	movs	r1, r2
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fe1e 	bl	8008784 <ascii_to_value>
 8008b48:	0003      	movs	r3, r0
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4053      	eors	r3, r2
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008b56:	4b39      	ldr	r3, [pc, #228]	; (8008c3c <astronode_decode_answer_transport+0x31c>)
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7fa fa73 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e062      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008b62:	2017      	movs	r0, #23
 8008b64:	183b      	adds	r3, r7, r0
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	031b      	lsls	r3, r3, #12
 8008b6c:	b299      	uxth	r1, r3
 8008b6e:	2416      	movs	r4, #22
 8008b70:	193b      	adds	r3, r7, r4
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	2318      	movs	r3, #24
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	188a      	adds	r2, r1, r2
 8008b80:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008b82:	250a      	movs	r5, #10
 8008b84:	197b      	adds	r3, r7, r5
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	3b03      	subs	r3, #3
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	18d3      	adds	r3, r2, r3
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	183a      	adds	r2, r7, r0
 8008b92:	0011      	movs	r1, r2
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff fdf5 	bl	8008784 <ascii_to_value>
 8008b9a:	0003      	movs	r3, r0
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4053      	eors	r3, r2
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d111      	bne.n	8008bcc <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008ba8:	197b      	adds	r3, r7, r5
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	3b02      	subs	r3, #2
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	18d3      	adds	r3, r2, r3
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	193a      	adds	r2, r7, r4
 8008bb6:	0011      	movs	r1, r2
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7ff fde3 	bl	8008784 <ascii_to_value>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	001a      	movs	r2, r3
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4053      	eors	r3, r2
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <astronode_decode_answer_transport+0x31c>)
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7fa fa38 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e027      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008bd8:	2317      	movs	r3, #23
 8008bda:	18fb      	adds	r3, r7, r3
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	2316      	movs	r3, #22
 8008be6:	18fb      	adds	r3, r7, r3
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	18d3      	adds	r3, r2, r3
 8008bee:	b299      	uxth	r1, r3
 8008bf0:	2018      	movs	r0, #24
 8008bf2:	183b      	adds	r3, r7, r0
 8008bf4:	183a      	adds	r2, r7, r0
 8008bf6:	8812      	ldrh	r2, [r2, #0]
 8008bf8:	188a      	adds	r2, r1, r2
 8008bfa:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008bfc:	183a      	adds	r2, r7, r0
 8008bfe:	231a      	movs	r3, #26
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	8812      	ldrh	r2, [r2, #0]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d005      	beq.n	8008c16 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <astronode_decode_answer_transport+0x324>)
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f7fa fa19 	bl	8003044 <send_debug_logs>
        return RS_FAILURE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e008      	b.n	8008c28 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2bff      	cmp	r3, #255	; 0xff
 8008c1c:	d103      	bne.n	8008c26 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	0018      	movs	r0, r3
 8008c22:	f000 f8c3 	bl	8008dac <check_for_error>
    }

    return RS_SUCCESS;
 8008c26:	2301      	movs	r3, #1
}
 8008c28:	0018      	movs	r0, r3
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b009      	add	sp, #36	; 0x24
 8008c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c30:	08013464 	.word	0x08013464
 8008c34:	080134b4 	.word	0x080134b4
 8008c38:	08013504 	.word	0x08013504
 8008c3c:	08013554 	.word	0x08013554
 8008c40:	0000ffff 	.word	0x0000ffff
 8008c44:	080135a0 	.word	0x080135a0

08008c48 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c4a:	4c2b      	ldr	r4, [pc, #172]	; (8008cf8 <astronode_transport_send_receive+0xb0>)
 8008c4c:	44a5      	add	sp, r4
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <astronode_transport_send_receive+0xb4>)
 8008c56:	25ca      	movs	r5, #202	; 0xca
 8008c58:	00ad      	lsls	r5, r5, #2
 8008c5a:	195b      	adds	r3, r3, r5
 8008c5c:	19db      	adds	r3, r3, r7
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	3304      	adds	r3, #4
 8008c64:	22c4      	movs	r2, #196	; 0xc4
 8008c66:	0052      	lsls	r2, r2, #1
 8008c68:	2100      	movs	r1, #0
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f002 fdd2 	bl	800b814 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008c70:	4b23      	ldr	r3, [pc, #140]	; (8008d00 <astronode_transport_send_receive+0xb8>)
 8008c72:	195b      	adds	r3, r3, r5
 8008c74:	19db      	adds	r3, r3, r7
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	22c4      	movs	r2, #196	; 0xc4
 8008c7e:	0052      	lsls	r2, r2, #1
 8008c80:	2100      	movs	r1, #0
 8008c82:	0018      	movs	r0, r3
 8008c84:	f002 fdc6 	bl	800b814 <memset>
    uint16_t answer_length =  0;
 8008c88:	4b1e      	ldr	r3, [pc, #120]	; (8008d04 <astronode_transport_send_receive+0xbc>)
 8008c8a:	195b      	adds	r3, r3, r5
 8008c8c:	19db      	adds	r3, r3, r7
 8008c8e:	2200      	movs	r2, #0
 8008c90:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008c92:	4e1d      	ldr	r6, [pc, #116]	; (8008d08 <astronode_transport_send_receive+0xc0>)
 8008c94:	19bc      	adds	r4, r7, r6
 8008c96:	23cc      	movs	r3, #204	; 0xcc
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	18fa      	adds	r2, r7, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	0011      	movs	r1, r2
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f7ff fd9b 	bl	80087dc <astronode_create_request_transport>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8008caa:	19bb      	adds	r3, r7, r6
 8008cac:	881a      	ldrh	r2, [r3, #0]
 8008cae:	23cc      	movs	r3, #204	; 0xcc
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	0011      	movs	r1, r2
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7fa fab6 	bl	8003228 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008cbc:	230a      	movs	r3, #10
 8008cbe:	18fa      	adds	r2, r7, r3
 8008cc0:	240c      	movs	r4, #12
 8008cc2:	193b      	adds	r3, r7, r4
 8008cc4:	0011      	movs	r1, r2
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f000 f92c 	bl	8008f24 <receive_astronode_answer>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d10a      	bne.n	8008ce8 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <astronode_transport_send_receive+0xbc>)
 8008cd4:	195b      	adds	r3, r3, r5
 8008cd6:	19db      	adds	r3, r3, r7
 8008cd8:	8819      	ldrh	r1, [r3, #0]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	193b      	adds	r3, r7, r4
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7ff fe1e 	bl	8008920 <astronode_decode_answer_transport>
 8008ce4:	0003      	movs	r3, r0
 8008ce6:	e000      	b.n	8008cea <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008ce8:	2300      	movs	r3, #0
    }
}
 8008cea:	0018      	movs	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	23cb      	movs	r3, #203	; 0xcb
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	449d      	add	sp, r3
 8008cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	fffffcd4 	.word	0xfffffcd4
 8008cfc:	fffffe70 	.word	0xfffffe70
 8008d00:	fffffce4 	.word	0xfffffce4
 8008d04:	fffffce2 	.word	0xfffffce2
 8008d08:	00000326 	.word	0x00000326

08008d0c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	0008      	movs	r0, r1
 8008d16:	0011      	movs	r1, r2
 8008d18:	1cbb      	adds	r3, r7, #2
 8008d1a:	1c02      	adds	r2, r0, #0
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	003b      	movs	r3, r7
 8008d20:	1c0a      	adds	r2, r1, #0
 8008d22:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008d24:	230e      	movs	r3, #14
 8008d26:	18fb      	adds	r3, r7, r3
 8008d28:	003a      	movs	r2, r7
 8008d2a:	8812      	ldrh	r2, [r2, #0]
 8008d2c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008d2e:	e02e      	b.n	8008d8e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008d30:	240e      	movs	r4, #14
 8008d32:	193b      	adds	r3, r7, r4
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	b299      	uxth	r1, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	200c      	movs	r0, #12
 8008d46:	183b      	adds	r3, r7, r0
 8008d48:	404a      	eors	r2, r1
 8008d4a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008d4c:	183b      	adds	r3, r7, r0
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	b299      	uxth	r1, r3
 8008d54:	183b      	adds	r3, r7, r0
 8008d56:	183a      	adds	r2, r7, r0
 8008d58:	8812      	ldrh	r2, [r2, #0]
 8008d5a:	404a      	eors	r2, r1
 8008d5c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008d5e:	0021      	movs	r1, r4
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	b21a      	sxth	r2, r3
 8008d68:	183b      	adds	r3, r7, r0
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	031b      	lsls	r3, r3, #12
 8008d6e:	b21b      	sxth	r3, r3
 8008d70:	4053      	eors	r3, r2
 8008d72:	b21a      	sxth	r2, r3
 8008d74:	183b      	adds	r3, r7, r0
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	015b      	lsls	r3, r3, #5
 8008d7a:	b21b      	sxth	r3, r3
 8008d7c:	4053      	eors	r3, r2
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	183b      	adds	r3, r7, r0
 8008d82:	2000      	movs	r0, #0
 8008d84:	5e1b      	ldrsh	r3, [r3, r0]
 8008d86:	4053      	eors	r3, r2
 8008d88:	b21a      	sxth	r2, r3
 8008d8a:	187b      	adds	r3, r7, r1
 8008d8c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008d8e:	1cbb      	adds	r3, r7, #2
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	1cba      	adds	r2, r7, #2
 8008d94:	1e59      	subs	r1, r3, #1
 8008d96:	8011      	strh	r1, [r2, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1c9      	bne.n	8008d30 <calculate_crc+0x24>
    }
    return crc;
 8008d9c:	230e      	movs	r3, #14
 8008d9e:	18fb      	adds	r3, r7, r3
 8008da0:	881b      	ldrh	r3, [r3, #0]
}
 8008da2:	0018      	movs	r0, r3
 8008da4:	46bd      	mov	sp, r7
 8008da6:	b005      	add	sp, #20
 8008da8:	bd90      	pop	{r4, r7, pc}
	...

08008dac <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	b299      	uxth	r1, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	789b      	ldrb	r3, [r3, #2]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	200e      	movs	r0, #14
 8008dc6:	183b      	adds	r3, r7, r0
 8008dc8:	188a      	adds	r2, r1, r2
 8008dca:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008dcc:	183b      	adds	r3, r7, r0
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	4a40      	ldr	r2, [pc, #256]	; (8008ed4 <check_for_error+0x128>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d100      	bne.n	8008dd8 <check_for_error+0x2c>
 8008dd6:	e06f      	b.n	8008eb8 <check_for_error+0x10c>
 8008dd8:	4a3e      	ldr	r2, [pc, #248]	; (8008ed4 <check_for_error+0x128>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	dd00      	ble.n	8008de0 <check_for_error+0x34>
 8008dde:	e070      	b.n	8008ec2 <check_for_error+0x116>
 8008de0:	4a3d      	ldr	r2, [pc, #244]	; (8008ed8 <check_for_error+0x12c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d100      	bne.n	8008de8 <check_for_error+0x3c>
 8008de6:	e062      	b.n	8008eae <check_for_error+0x102>
 8008de8:	4a3b      	ldr	r2, [pc, #236]	; (8008ed8 <check_for_error+0x12c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	dd00      	ble.n	8008df0 <check_for_error+0x44>
 8008dee:	e068      	b.n	8008ec2 <check_for_error+0x116>
 8008df0:	4a3a      	ldr	r2, [pc, #232]	; (8008edc <check_for_error+0x130>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d056      	beq.n	8008ea4 <check_for_error+0xf8>
 8008df6:	4a39      	ldr	r2, [pc, #228]	; (8008edc <check_for_error+0x130>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	dd00      	ble.n	8008dfe <check_for_error+0x52>
 8008dfc:	e061      	b.n	8008ec2 <check_for_error+0x116>
 8008dfe:	4a38      	ldr	r2, [pc, #224]	; (8008ee0 <check_for_error+0x134>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d04a      	beq.n	8008e9a <check_for_error+0xee>
 8008e04:	4a36      	ldr	r2, [pc, #216]	; (8008ee0 <check_for_error+0x134>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	dc5b      	bgt.n	8008ec2 <check_for_error+0x116>
 8008e0a:	4a36      	ldr	r2, [pc, #216]	; (8008ee4 <check_for_error+0x138>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d03f      	beq.n	8008e90 <check_for_error+0xe4>
 8008e10:	4a34      	ldr	r2, [pc, #208]	; (8008ee4 <check_for_error+0x138>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	dc55      	bgt.n	8008ec2 <check_for_error+0x116>
 8008e16:	4a34      	ldr	r2, [pc, #208]	; (8008ee8 <check_for_error+0x13c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d034      	beq.n	8008e86 <check_for_error+0xda>
 8008e1c:	4a32      	ldr	r2, [pc, #200]	; (8008ee8 <check_for_error+0x13c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	dc4f      	bgt.n	8008ec2 <check_for_error+0x116>
 8008e22:	4a32      	ldr	r2, [pc, #200]	; (8008eec <check_for_error+0x140>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d029      	beq.n	8008e7c <check_for_error+0xd0>
 8008e28:	4a30      	ldr	r2, [pc, #192]	; (8008eec <check_for_error+0x140>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	dc49      	bgt.n	8008ec2 <check_for_error+0x116>
 8008e2e:	4a30      	ldr	r2, [pc, #192]	; (8008ef0 <check_for_error+0x144>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d01e      	beq.n	8008e72 <check_for_error+0xc6>
 8008e34:	4a2e      	ldr	r2, [pc, #184]	; (8008ef0 <check_for_error+0x144>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	dc43      	bgt.n	8008ec2 <check_for_error+0x116>
 8008e3a:	2222      	movs	r2, #34	; 0x22
 8008e3c:	32ff      	adds	r2, #255	; 0xff
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d012      	beq.n	8008e68 <check_for_error+0xbc>
 8008e42:	2291      	movs	r2, #145	; 0x91
 8008e44:	0052      	lsls	r2, r2, #1
 8008e46:	4293      	cmp	r3, r2
 8008e48:	da3b      	bge.n	8008ec2 <check_for_error+0x116>
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d002      	beq.n	8008e54 <check_for_error+0xa8>
 8008e4e:	2b11      	cmp	r3, #17
 8008e50:	d005      	beq.n	8008e5e <check_for_error+0xb2>
 8008e52:	e036      	b.n	8008ec2 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008e54:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <check_for_error+0x148>)
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7fa f8f4 	bl	8003044 <send_debug_logs>
            break;
 8008e5c:	e036      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8008e5e:	4b26      	ldr	r3, [pc, #152]	; (8008ef8 <check_for_error+0x14c>)
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7fa f8ef 	bl	8003044 <send_debug_logs>
            break;
 8008e66:	e031      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8008e68:	4b24      	ldr	r3, [pc, #144]	; (8008efc <check_for_error+0x150>)
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f7fa f8ea 	bl	8003044 <send_debug_logs>
            break;
 8008e70:	e02c      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008e72:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <check_for_error+0x154>)
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7fa f8e5 	bl	8003044 <send_debug_logs>
            break;
 8008e7a:	e027      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8008e7c:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <check_for_error+0x158>)
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f7fa f8e0 	bl	8003044 <send_debug_logs>
            break;
 8008e84:	e022      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8008e86:	4b20      	ldr	r3, [pc, #128]	; (8008f08 <check_for_error+0x15c>)
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7fa f8db 	bl	8003044 <send_debug_logs>
            break;
 8008e8e:	e01d      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <check_for_error+0x160>)
 8008e92:	0018      	movs	r0, r3
 8008e94:	f7fa f8d6 	bl	8003044 <send_debug_logs>
            break;
 8008e98:	e018      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <check_for_error+0x164>)
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f7fa f8d1 	bl	8003044 <send_debug_logs>
            break;
 8008ea2:	e013      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <check_for_error+0x168>)
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7fa f8cc 	bl	8003044 <send_debug_logs>
            break;
 8008eac:	e00e      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8008eae:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <check_for_error+0x16c>)
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7fa f8c7 	bl	8003044 <send_debug_logs>
            break;
 8008eb6:	e009      	b.n	8008ecc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8008eb8:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <check_for_error+0x170>)
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7fa f8c2 	bl	8003044 <send_debug_logs>
            break;
 8008ec0:	e004      	b.n	8008ecc <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <check_for_error+0x174>)
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f7fa f8bd 	bl	8003044 <send_debug_logs>
            break;
 8008eca:	46c0      	nop			; (mov r8, r8)
    }
}
 8008ecc:	46c0      	nop			; (mov r8, r8)
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	00004601 	.word	0x00004601
 8008ed8:	00004501 	.word	0x00004501
 8008edc:	00003501 	.word	0x00003501
 8008ee0:	00002601 	.word	0x00002601
 8008ee4:	00002511 	.word	0x00002511
 8008ee8:	00002501 	.word	0x00002501
 8008eec:	00000611 	.word	0x00000611
 8008ef0:	00000601 	.word	0x00000601
 8008ef4:	080135e4 	.word	0x080135e4
 8008ef8:	08013630 	.word	0x08013630
 8008efc:	08013694 	.word	0x08013694
 8008f00:	080136cc 	.word	0x080136cc
 8008f04:	08013770 	.word	0x08013770
 8008f08:	080137d8 	.word	0x080137d8
 8008f0c:	08013838 	.word	0x08013838
 8008f10:	080138c4 	.word	0x080138c4
 8008f14:	08013924 	.word	0x08013924
 8008f18:	080139d0 	.word	0x080139d0
 8008f1c:	08013a1c 	.word	0x08013a1c
 8008f20:	08013a64 	.word	0x08013a64

08008f24 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8008f24:	b5b0      	push	{r4, r5, r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8008f2e:	230f      	movs	r3, #15
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8008f36:	2316      	movs	r3, #22
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8008f3e:	f7fa f991 	bl	8003264 <get_systick>
 8008f42:	0003      	movs	r3, r0
 8008f44:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8008f46:	2315      	movs	r3, #21
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8008f4e:	e054      	b.n	8008ffa <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8008f50:	4a34      	ldr	r2, [pc, #208]	; (8009024 <receive_astronode_answer+0x100>)
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	0011      	movs	r1, r2
 8008f56:	0018      	movs	r0, r3
 8008f58:	f7fa f98c 	bl	8003274 <is_systick_timeout_over>
 8008f5c:	1e03      	subs	r3, r0, #0
 8008f5e:	d005      	beq.n	8008f6c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8008f60:	4b31      	ldr	r3, [pc, #196]	; (8009028 <receive_astronode_answer+0x104>)
 8008f62:	0018      	movs	r0, r3
 8008f64:	f7fa f86e 	bl	8003044 <send_debug_logs>
            return RS_FAILURE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e057      	b.n	800901c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8008f6c:	250f      	movs	r5, #15
 8008f6e:	197b      	adds	r3, r7, r5
 8008f70:	0018      	movs	r0, r3
 8008f72:	f7fa f995 	bl	80032a0 <is_astronode_character_received>
 8008f76:	0003      	movs	r3, r0
 8008f78:	0019      	movs	r1, r3
 8008f7a:	2016      	movs	r0, #22
 8008f7c:	183b      	adds	r3, r7, r0
 8008f7e:	183a      	adds	r2, r7, r0
 8008f80:	8812      	ldrh	r2, [r2, #0]
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	2415      	movs	r4, #21
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	193a      	adds	r2, r7, r4
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	d033      	beq.n	8008ffa <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8008f92:	197b      	adds	r3, r7, r5
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d105      	bne.n	8008fa6 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8008f9a:	193b      	adds	r3, r7, r4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8008fa6:	2116      	movs	r1, #22
 8008fa8:	187b      	adds	r3, r7, r1
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	18d3      	adds	r3, r2, r3
 8008fb0:	220f      	movs	r2, #15
 8008fb2:	18ba      	adds	r2, r7, r2
 8008fb4:	7812      	ldrb	r2, [r2, #0]
 8008fb6:	701a      	strb	r2, [r3, #0]
            length++;
 8008fb8:	187b      	adds	r3, r7, r1
 8008fba:	881a      	ldrh	r2, [r3, #0]
 8008fbc:	187b      	adds	r3, r7, r1
 8008fbe:	3201      	adds	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8008fc2:	187b      	adds	r3, r7, r1
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	2bb2      	cmp	r3, #178	; 0xb2
 8008fc8:	d905      	bls.n	8008fd6 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <receive_astronode_answer+0x108>)
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7fa f839 	bl	8003044 <send_debug_logs>
                return RS_FAILURE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e022      	b.n	800901c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008fd6:	230f      	movs	r3, #15
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d10c      	bne.n	8008ffa <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8008fe0:	2216      	movs	r2, #22
 8008fe2:	18bb      	adds	r3, r7, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d907      	bls.n	8008ffa <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	18ba      	adds	r2, r7, r2
 8008fee:	8812      	ldrh	r2, [r2, #0]
 8008ff0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8008ff2:	2315      	movs	r3, #21
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008ffa:	2315      	movs	r3, #21
 8008ffc:	18fb      	adds	r3, r7, r3
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2201      	movs	r2, #1
 8009002:	4053      	eors	r3, r2
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1a2      	bne.n	8008f50 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <receive_astronode_answer+0x10c>)
 800900c:	0018      	movs	r0, r3
 800900e:	f7fa f819 	bl	8003044 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	0018      	movs	r0, r3
 8009016:	f7fa f815 	bl	8003044 <send_debug_logs>

    return RS_SUCCESS;
 800901a:	2301      	movs	r3, #1
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	b006      	add	sp, #24
 8009022:	bdb0      	pop	{r4, r5, r7, pc}
 8009024:	000005dc 	.word	0x000005dc
 8009028:	08013a88 	.word	0x08013a88
 800902c:	08013aac 	.word	0x08013aac
 8009030:	08013af8 	.word	0x08013af8

08009034 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	0002      	movs	r2, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	1dfb      	adds	r3, r7, #7
 8009040:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8009042:	1dfb      	adds	r3, r7, #7
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	091b      	lsrs	r3, r3, #4
 8009048:	b2db      	uxtb	r3, r3
 800904a:	001a      	movs	r2, r3
 800904c:	4b08      	ldr	r3, [pc, #32]	; (8009070 <uint8_to_ascii_buffer+0x3c>)
 800904e:	5c9a      	ldrb	r2, [r3, r2]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009054:	1dfb      	adds	r3, r7, #7
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	220f      	movs	r2, #15
 800905a:	401a      	ands	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	4903      	ldr	r1, [pc, #12]	; (8009070 <uint8_to_ascii_buffer+0x3c>)
 8009062:	5c8a      	ldrb	r2, [r1, r2]
 8009064:	701a      	strb	r2, [r3, #0]
}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	46bd      	mov	sp, r7
 800906a:	b002      	add	sp, #8
 800906c:	bd80      	pop	{r7, pc}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	08013e28 	.word	0x08013e28

08009074 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b087      	sub	sp, #28
 8009078:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800907a:	1dfb      	adds	r3, r7, #7
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8009080:	e012      	b.n	80090a8 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 8009082:	f7fa f8b7 	bl	80031f4 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009086:	1dfc      	adds	r4, r7, #7
 8009088:	2300      	movs	r3, #0
 800908a:	9303      	str	r3, [sp, #12]
 800908c:	2301      	movs	r3, #1
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	2301      	movs	r3, #1
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	2301      	movs	r3, #1
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	2201      	movs	r2, #1
 800909c:	2101      	movs	r1, #1
 800909e:	2001      	movs	r0, #1
 80090a0:	f7fe fb9e 	bl	80077e0 <astronode_send_cfg_wr>
 80090a4:	0003      	movs	r3, r0
 80090a6:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80090a8:	1dfb      	adds	r3, r7, #7
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2201      	movs	r2, #1
 80090ae:	4053      	eors	r3, r2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e5      	bne.n	8009082 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80090b6:	1dfb      	adds	r3, r7, #7
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00d      	beq.n	80090da <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80090be:	f7fe ffef 	bl	80080a0 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80090c2:	f7fe fb55 	bl	8007770 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80090c6:	f7ff f8e5 	bl	8008294 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80090ca:	f7fe fcdf 	bl	8007a8c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80090ce:	f7fe fc33 	bl	8007938 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80090d2:	f7fe ff69 	bl	8007fa8 <astronode_send_pld_fr>
		return true ;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80090da:	2300      	movs	r3, #0
	}
}
 80090dc:	0018      	movs	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	b003      	add	sp, #12
 80090e2:	bd90      	pop	{r4, r7, pc}

080090e4 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	0002      	movs	r2, r0
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	1dbb      	adds	r3, r7, #6
 80090f0:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7f7 f805 	bl	8000104 <strlen>
 80090fa:	0003      	movs	r3, r0
 80090fc:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2ba0      	cmp	r3, #160	; 0xa0
 8009102:	d80b      	bhi.n	800911c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	b29a      	uxth	r2, r3
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	1dbb      	adds	r3, r7, #6
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	0018      	movs	r0, r3
 8009110:	f7fe fea6 	bl	8007e60 <astronode_send_pld_er>
 8009114:	1e03      	subs	r3, r0, #0
 8009116:	d005      	beq.n	8009124 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009118:	2301      	movs	r3, #1
 800911a:	e004      	b.n	8009126 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800911c:	4b04      	ldr	r3, [pc, #16]	; (8009130 <my_astro_add_payload_2_queue+0x4c>)
 800911e:	0018      	movs	r0, r3
 8009120:	f7f9 ff90 	bl	8003044 <send_debug_logs>
	}
	return false ;
 8009124:	2300      	movs	r3, #0
}
 8009126:	0018      	movs	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	b004      	add	sp, #16
 800912c:	bd80      	pop	{r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	08013b24 	.word	0x08013b24

08009134 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <my_astro_handle_evt+0x5c>)
 800913a:	0018      	movs	r0, r3
 800913c:	f7f9 ff82 	bl	8003044 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009140:	f7fe fd4e 	bl	8007be0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009144:	f7ff fb00 	bl	8008748 <is_sak_available>
 8009148:	1e03      	subs	r3, r0, #0
 800914a:	d007      	beq.n	800915c <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800914c:	f7ff f80c 	bl	8008168 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009150:	f7ff f860 	bl	8008214 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <my_astro_handle_evt+0x60>)
 8009156:	0018      	movs	r0, r3
 8009158:	f7f9 ff74 	bl	8003044 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800915c:	f7ff fafe 	bl	800875c <is_astronode_reset>
 8009160:	1e03      	subs	r3, r0, #0
 8009162:	d005      	beq.n	8009170 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <my_astro_handle_evt+0x64>)
 8009166:	0018      	movs	r0, r3
 8009168:	f7f9 ff6c 	bl	8003044 <send_debug_logs>
	  astronode_send_res_cr () ;
 800916c:	f7fe ff58 	bl	8008020 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009170:	f7ff fafe 	bl	8008770 <is_command_available>
 8009174:	1e03      	subs	r3, r0, #0
 8009176:	d007      	beq.n	8009188 <my_astro_handle_evt+0x54>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009178:	4b08      	ldr	r3, [pc, #32]	; (800919c <my_astro_handle_evt+0x68>)
 800917a:	0018      	movs	r0, r3
 800917c:	f7f9 ff62 	bl	8003044 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009180:	f7ff f972 	bl	8008468 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009184:	f7ff f930 	bl	80083e8 <astronode_send_cmd_cr>
	}
	return true ;
 8009188:	2301      	movs	r3, #1
}
 800918a:	0018      	movs	r0, r3
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08013b8c 	.word	0x08013b8c
 8009194:	08013bc0 	.word	0x08013bc0
 8009198:	08013c04 	.word	0x08013c04
 800919c:	08013c40 	.word	0x08013c40

080091a0 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	0011      	movs	r1, r2
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7fe fd95 	bl	8007ce0 <astronode_send_geo_wr>
}
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b002      	add	sp, #8
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80091c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c2:	4c9f      	ldr	r4, [pc, #636]	; (8009440 <my_gnss_acq_coordinates+0x280>)
 80091c4:	44a5      	add	sp, r4
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 80091ca:	4b9e      	ldr	r3, [pc, #632]	; (8009444 <my_gnss_acq_coordinates+0x284>)
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 80091d2:	4b9d      	ldr	r3, [pc, #628]	; (8009448 <my_gnss_acq_coordinates+0x288>)
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	2200      	movs	r2, #0
 80091d8:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 80091da:	4b9c      	ldr	r3, [pc, #624]	; (800944c <my_gnss_acq_coordinates+0x28c>)
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 80091e2:	4b9b      	ldr	r3, [pc, #620]	; (8009450 <my_gnss_acq_coordinates+0x290>)
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 80091ea:	4b9a      	ldr	r3, [pc, #616]	; (8009454 <my_gnss_acq_coordinates+0x294>)
 80091ec:	18fb      	adds	r3, r7, r3
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 80091f2:	4b99      	ldr	r3, [pc, #612]	; (8009458 <my_gnss_acq_coordinates+0x298>)
 80091f4:	2486      	movs	r4, #134	; 0x86
 80091f6:	00a4      	lsls	r4, r4, #2
 80091f8:	191b      	adds	r3, r3, r4
 80091fa:	19db      	adds	r3, r3, r7
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	3304      	adds	r3, #4
 8009202:	22f6      	movs	r2, #246	; 0xf6
 8009204:	2100      	movs	r1, #0
 8009206:	0018      	movs	r0, r3
 8009208:	f002 fb04 	bl	800b814 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800920c:	4b93      	ldr	r3, [pc, #588]	; (800945c <my_gnss_acq_coordinates+0x29c>)
 800920e:	191b      	adds	r3, r3, r4
 8009210:	19db      	adds	r3, r3, r7
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	3304      	adds	r3, #4
 8009218:	22f6      	movs	r2, #246	; 0xf6
 800921a:	2100      	movs	r1, #0
 800921c:	0018      	movs	r0, r3
 800921e:	f002 faf9 	bl	800b814 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009222:	4b8f      	ldr	r3, [pc, #572]	; (8009460 <my_gnss_acq_coordinates+0x2a0>)
 8009224:	2284      	movs	r2, #132	; 0x84
 8009226:	0092      	lsls	r2, r2, #2
 8009228:	18ba      	adds	r2, r7, r2
 800922a:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800922c:	4b8d      	ldr	r3, [pc, #564]	; (8009464 <my_gnss_acq_coordinates+0x2a4>)
 800922e:	2283      	movs	r2, #131	; 0x83
 8009230:	0092      	lsls	r2, r2, #2
 8009232:	18ba      	adds	r2, r7, r2
 8009234:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009236:	4b8c      	ldr	r3, [pc, #560]	; (8009468 <my_gnss_acq_coordinates+0x2a8>)
 8009238:	2282      	movs	r2, #130	; 0x82
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	18ba      	adds	r2, r7, r2
 800923e:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009240:	4b8a      	ldr	r3, [pc, #552]	; (800946c <my_gnss_acq_coordinates+0x2ac>)
 8009242:	2281      	movs	r2, #129	; 0x81
 8009244:	0092      	lsls	r2, r2, #2
 8009246:	18ba      	adds	r2, r7, r2
 8009248:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '\0' ;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 100 ;
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	4b86      	ldr	r3, [pc, #536]	; (8009470 <my_gnss_acq_coordinates+0x2b0>)
 8009256:	608a      	str	r2, [r1, #8]
 8009258:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800925a:	f7fa f853 	bl	8003304 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800925e:	e0c5      	b.n	80093ec <my_gnss_acq_coordinates+0x22c>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 8009260:	4c7a      	ldr	r4, [pc, #488]	; (800944c <my_gnss_acq_coordinates+0x28c>)
 8009262:	193b      	adds	r3, r7, r4
 8009264:	2100      	movs	r1, #0
 8009266:	0018      	movs	r0, r3
 8009268:	f7f9 ffa2 	bl	80031b0 <my_gnss_receive_byte>
		if ( rx_byte )
 800926c:	0020      	movs	r0, r4
 800926e:	183b      	adds	r3, r7, r0
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	4c75      	ldr	r4, [pc, #468]	; (8009448 <my_gnss_acq_coordinates+0x288>)
 8009274:	193a      	adds	r2, r7, r4
 8009276:	1939      	adds	r1, r7, r4
 8009278:	7809      	ldrb	r1, [r1, #0]
 800927a:	7011      	strb	r1, [r2, #0]
 800927c:	4d75      	ldr	r5, [pc, #468]	; (8009454 <my_gnss_acq_coordinates+0x294>)
 800927e:	197a      	adds	r2, r7, r5
 8009280:	1979      	adds	r1, r7, r5
 8009282:	7809      	ldrb	r1, [r1, #0]
 8009284:	7011      	strb	r1, [r2, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d100      	bne.n	800928c <my_gnss_acq_coordinates+0xcc>
 800928a:	e0af      	b.n	80093ec <my_gnss_acq_coordinates+0x22c>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800928c:	4b70      	ldr	r3, [pc, #448]	; (8009450 <my_gnss_acq_coordinates+0x290>)
 800928e:	18fa      	adds	r2, r7, r3
 8009290:	2684      	movs	r6, #132	; 0x84
 8009292:	0076      	lsls	r6, r6, #1
 8009294:	19b9      	adds	r1, r7, r6
 8009296:	183b      	adds	r3, r7, r0
 8009298:	0018      	movs	r0, r3
 800929a:	f000 fbf9 	bl	8009a90 <my_nmea_message>
 800929e:	0001      	movs	r1, r0
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	193a      	adds	r2, r7, r4
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	197b      	adds	r3, r7, r5
 80092aa:	197a      	adds	r2, r7, r5
 80092ac:	7812      	ldrb	r2, [r2, #0]
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	2902      	cmp	r1, #2
 80092b2:	d000      	beq.n	80092b6 <my_gnss_acq_coordinates+0xf6>
 80092b4:	e09a      	b.n	80093ec <my_gnss_acq_coordinates+0x22c>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80092b6:	19bb      	adds	r3, r7, r6
 80092b8:	0018      	movs	r0, r3
 80092ba:	f000 fca9 	bl	8009c10 <is_my_nmea_checksum_ok>
 80092be:	0003      	movs	r3, r0
 80092c0:	0019      	movs	r1, r3
 80092c2:	193b      	adds	r3, r7, r4
 80092c4:	193a      	adds	r2, r7, r4
 80092c6:	7812      	ldrb	r2, [r2, #0]
 80092c8:	701a      	strb	r2, [r3, #0]
 80092ca:	197b      	adds	r3, r7, r5
 80092cc:	197a      	adds	r2, r7, r5
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	2900      	cmp	r1, #0
 80092d4:	d100      	bne.n	80092d8 <my_gnss_acq_coordinates+0x118>
 80092d6:	e089      	b.n	80093ec <my_gnss_acq_coordinates+0x22c>
				{
					if ( !is_utc_saved )
 80092d8:	193b      	adds	r3, r7, r4
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2201      	movs	r2, #1
 80092de:	4053      	eors	r3, r2
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d015      	beq.n	8009312 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b33      	cmp	r3, #51	; 0x33
 80092ec:	d111      	bne.n	8009312 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 80092ee:	2383      	movs	r3, #131	; 0x83
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	19bb      	adds	r3, r7, r6
 80092f8:	0011      	movs	r1, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f002 fab7 	bl	800b86e <strstr>
 8009300:	1e03      	subs	r3, r0, #0
 8009302:	d006      	beq.n	8009312 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009304:	19bb      	adds	r3, r7, r6
 8009306:	0018      	movs	r0, r3
 8009308:	f000 f9b6 	bl	8009678 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800930c:	193b      	adds	r3, r7, r4
 800930e:	2201      	movs	r2, #1
 8009310:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS )
 8009312:	2384      	movs	r3, #132	; 0x84
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	2484      	movs	r4, #132	; 0x84
 800931c:	0064      	lsls	r4, r4, #1
 800931e:	193b      	adds	r3, r7, r4
 8009320:	0011      	movs	r1, r2
 8009322:	0018      	movs	r0, r3
 8009324:	f002 faa3 	bl	800b86e <strstr>
 8009328:	1e03      	subs	r3, r0, #0
 800932a:	d012      	beq.n	8009352 <my_gnss_acq_coordinates+0x192>
 800932c:	4d49      	ldr	r5, [pc, #292]	; (8009454 <my_gnss_acq_coordinates+0x294>)
 800932e:	197b      	adds	r3, r7, r5
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d80d      	bhi.n	8009352 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 8009336:	4b4f      	ldr	r3, [pc, #316]	; (8009474 <my_gnss_acq_coordinates+0x2b4>)
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	4b4f      	ldr	r3, [pc, #316]	; (8009478 <my_gnss_acq_coordinates+0x2b8>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d85c      	bhi.n	80093fc <my_gnss_acq_coordinates+0x23c>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009342:	193b      	adds	r3, r7, r4
 8009344:	0018      	movs	r0, r3
 8009346:	f000 fe09 	bl	8009f5c <my_nmea_get_gsv_tns>
 800934a:	0003      	movs	r3, r0
 800934c:	001a      	movs	r2, r3
 800934e:	197b      	adds	r3, r7, r5
 8009350:	701a      	strb	r2, [r3, #0]
					}
					if ( gsv_tns > MIN_TNS ) // Tutaj cały czas miałem błąd, bo nigdy gsv_tns nie mógł się zwięszyć przy warunku gsv_tns < MIN_TNS powyżej
 8009352:	4b40      	ldr	r3, [pc, #256]	; (8009454 <my_gnss_acq_coordinates+0x294>)
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d91d      	bls.n	8009398 <my_gnss_acq_coordinates+0x1d8>
					{
						if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800935c:	2382      	movs	r3, #130	; 0x82
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	2484      	movs	r4, #132	; 0x84
 8009366:	0064      	lsls	r4, r4, #1
 8009368:	193b      	adds	r3, r7, r4
 800936a:	0011      	movs	r1, r2
 800936c:	0018      	movs	r0, r3
 800936e:	f002 fa7e 	bl	800b86e <strstr>
 8009372:	1e03      	subs	r3, r0, #0
 8009374:	d010      	beq.n	8009398 <my_gnss_acq_coordinates+0x1d8>
						{
							fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009376:	193b      	adds	r3, r7, r4
 8009378:	0018      	movs	r0, r3
 800937a:	f000 fbf5 	bl	8009b68 <get_my_nmea_gngsa_fixed_mode_s>
 800937e:	0003      	movs	r3, r0
 8009380:	001a      	movs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	741a      	strb	r2, [r3, #16]
							fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009386:	193b      	adds	r3, r7, r4
 8009388:	0018      	movs	r0, r3
 800938a:	f000 fbf8 	bl	8009b7e <get_my_nmea_gngsa_pdop_d>
 800938e:	0002      	movs	r2, r0
 8009390:	000b      	movs	r3, r1
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	608a      	str	r2, [r1, #8]
 8009396:	60cb      	str	r3, [r1, #12]
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009398:	2381      	movs	r3, #129	; 0x81
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	18fb      	adds	r3, r7, r3
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	2384      	movs	r3, #132	; 0x84
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	0011      	movs	r1, r2
 80093a8:	0018      	movs	r0, r3
 80093aa:	f002 fa60 	bl	800b86e <strstr>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d01c      	beq.n	80093ec <my_gnss_acq_coordinates+0x22c>
 80093b2:	4b25      	ldr	r3, [pc, #148]	; (8009448 <my_gnss_acq_coordinates+0x288>)
 80093b4:	18fb      	adds	r3, r7, r3
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d017      	beq.n	80093ec <my_gnss_acq_coordinates+0x22c>
					{
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 80093bc:	4b27      	ldr	r3, [pc, #156]	; (800945c <my_gnss_acq_coordinates+0x29c>)
 80093be:	2186      	movs	r1, #134	; 0x86
 80093c0:	0089      	lsls	r1, r1, #2
 80093c2:	185b      	adds	r3, r3, r1
 80093c4:	19da      	adds	r2, r3, r7
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <my_gnss_acq_coordinates+0x298>)
 80093c8:	185b      	adds	r3, r3, r1
 80093ca:	19db      	adds	r3, r3, r7
 80093cc:	0010      	movs	r0, r2
 80093ce:	0019      	movs	r1, r3
 80093d0:	23fa      	movs	r3, #250	; 0xfa
 80093d2:	001a      	movs	r2, r3
 80093d4:	f002 fb03 	bl	800b9de <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6898      	ldr	r0, [r3, #8]
 80093dc:	68d9      	ldr	r1, [r3, #12]
 80093de:	4b27      	ldr	r3, [pc, #156]	; (800947c <my_gnss_acq_coordinates+0x2bc>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f7f7 f840 	bl	8000468 <__aeabi_dcmple>
 80093e8:	1e03      	subs	r3, r0, #0
 80093ea:	d109      	bne.n	8009400 <my_gnss_acq_coordinates+0x240>
	while ( tim_seconds < fix_acq_ths )
 80093ec:	4b21      	ldr	r3, [pc, #132]	; (8009474 <my_gnss_acq_coordinates+0x2b4>)
 80093ee:	881a      	ldrh	r2, [r3, #0]
 80093f0:	4b23      	ldr	r3, [pc, #140]	; (8009480 <my_gnss_acq_coordinates+0x2c0>)
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d200      	bcs.n	80093fa <my_gnss_acq_coordinates+0x23a>
 80093f8:	e732      	b.n	8009260 <my_gnss_acq_coordinates+0xa0>
 80093fa:	e002      	b.n	8009402 <my_gnss_acq_coordinates+0x242>
							break ;
 80093fc:	46c0      	nop			; (mov r8, r8)
 80093fe:	e000      	b.n	8009402 <my_gnss_acq_coordinates+0x242>
						{
							break ;
 8009400:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009402:	f7f9 ff8f 	bl	8003324 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009406:	4b15      	ldr	r3, [pc, #84]	; (800945c <my_gnss_acq_coordinates+0x29c>)
 8009408:	2286      	movs	r2, #134	; 0x86
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	189b      	adds	r3, r3, r2
 800940e:	19db      	adds	r3, r3, r7
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <my_gnss_acq_coordinates+0x26c>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	230c      	movs	r3, #12
 800941a:	18fb      	adds	r3, r7, r3
 800941c:	0011      	movs	r1, r2
 800941e:	0018      	movs	r0, r3
 8009420:	f000 fcb2 	bl	8009d88 <my_nmea_get_gngll_coordinates>
		r = true ;
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <my_gnss_acq_coordinates+0x284>)
 8009426:	18fb      	adds	r3, r7, r3
 8009428:	2201      	movs	r2, #1
 800942a:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <my_gnss_acq_coordinates+0x284>)
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	781b      	ldrb	r3, [r3, #0]
}
 8009432:	0018      	movs	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	2387      	movs	r3, #135	; 0x87
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	449d      	add	sp, r3
 800943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	fffffde4 	.word	0xfffffde4
 8009444:	00000217 	.word	0x00000217
 8009448:	00000216 	.word	0x00000216
 800944c:	00000203 	.word	0x00000203
 8009450:	00000202 	.word	0x00000202
 8009454:	00000215 	.word	0x00000215
 8009458:	fffffef0 	.word	0xfffffef0
 800945c:	fffffdf4 	.word	0xfffffdf4
 8009460:	08013c80 	.word	0x08013c80
 8009464:	08013c88 	.word	0x08013c88
 8009468:	08013c90 	.word	0x08013c90
 800946c:	08013c98 	.word	0x08013c98
 8009470:	40590000 	.word	0x40590000
 8009474:	20000bf8 	.word	0x20000bf8
 8009478:	20000014 	.word	0x20000014
 800947c:	20000018 	.word	0x20000018
 8009480:	20000012 	.word	0x20000012

08009484 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <my_rtc_get_dt+0x2c>)
 8009492:	2200      	movs	r2, #0
 8009494:	0018      	movs	r0, r3
 8009496:	f7fc f98b 	bl	80057b0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <my_rtc_get_dt+0x2c>)
 800949e:	2200      	movs	r2, #0
 80094a0:	0018      	movs	r0, r3
 80094a2:	f7fc f897 	bl	80055d4 <HAL_RTC_GetTime>
}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b002      	add	sp, #8
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	200006ec 	.word	0x200006ec

080094b4 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 80094b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b6:	b08d      	sub	sp, #52	; 0x34
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 80094bc:	2508      	movs	r5, #8
 80094be:	1979      	adds	r1, r7, r5
 80094c0:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <my_rtc_get_dt_s+0x7c>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	0018      	movs	r0, r3
 80094c6:	f7fc f885 	bl	80055d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80094ca:	241c      	movs	r4, #28
 80094cc:	1939      	adds	r1, r7, r4
 80094ce:	4b18      	ldr	r3, [pc, #96]	; (8009530 <my_rtc_get_dt_s+0x7c>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7fc f96c 	bl	80057b0 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 80094d8:	0021      	movs	r1, r4
 80094da:	187b      	adds	r3, r7, r1
 80094dc:	78db      	ldrb	r3, [r3, #3]
 80094de:	22fa      	movs	r2, #250	; 0xfa
 80094e0:	00d2      	lsls	r2, r2, #3
 80094e2:	189a      	adds	r2, r3, r2
 80094e4:	187b      	adds	r3, r7, r1
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	469c      	mov	ip, r3
 80094ea:	187b      	adds	r3, r7, r1
 80094ec:	789b      	ldrb	r3, [r3, #2]
 80094ee:	001c      	movs	r4, r3
 80094f0:	0028      	movs	r0, r5
 80094f2:	183b      	adds	r3, r7, r0
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	001d      	movs	r5, r3
 80094f8:	183b      	adds	r3, r7, r0
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	001e      	movs	r6, r3
 80094fe:	183b      	adds	r3, r7, r0
 8009500:	789b      	ldrb	r3, [r3, #2]
 8009502:	490c      	ldr	r1, [pc, #48]	; (8009534 <my_rtc_get_dt_s+0x80>)
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	9602      	str	r6, [sp, #8]
 800950a:	9501      	str	r5, [sp, #4]
 800950c:	9400      	str	r4, [sp, #0]
 800950e:	4663      	mov	r3, ip
 8009510:	f002 f8ea 	bl	800b6e8 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009514:	211c      	movs	r1, #28
 8009516:	187b      	adds	r3, r7, r1
 8009518:	78db      	ldrb	r3, [r3, #3]
 800951a:	b29b      	uxth	r3, r3
 800951c:	22fa      	movs	r2, #250	; 0xfa
 800951e:	00d2      	lsls	r2, r2, #3
 8009520:	4694      	mov	ip, r2
 8009522:	4463      	add	r3, ip
 8009524:	b29b      	uxth	r3, r3
}
 8009526:	0018      	movs	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	b009      	add	sp, #36	; 0x24
 800952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	200006ec 	.word	0x200006ec
 8009534:	08013ce0 	.word	0x08013ce0

08009538 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	b0ab      	sub	sp, #172	; 0xac
 800953c:	af02      	add	r7, sp, #8
 800953e:	6078      	str	r0, [r7, #4]
	const char* cf = "my_rtc.c,my_rtc_set_alarm," ;
 8009540:	4b48      	ldr	r3, [pc, #288]	; (8009664 <my_rtc_set_alarm+0x12c>)
 8009542:	229c      	movs	r2, #156	; 0x9c
 8009544:	18b9      	adds	r1, r7, r2
 8009546:	600b      	str	r3, [r1, #0]
	const char* cdt = "dt," ;
 8009548:	4b47      	ldr	r3, [pc, #284]	; (8009668 <my_rtc_set_alarm+0x130>)
 800954a:	2498      	movs	r4, #152	; 0x98
 800954c:	1939      	adds	r1, r7, r4
 800954e:	600b      	str	r3, [r1, #0]
	const char* cal = "al," ;
 8009550:	4b46      	ldr	r3, [pc, #280]	; (800966c <my_rtc_set_alarm+0x134>)
 8009552:	2194      	movs	r1, #148	; 0x94
 8009554:	1878      	adds	r0, r7, r1
 8009556:	6003      	str	r3, [r0, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009558:	2530      	movs	r5, #48	; 0x30
 800955a:	197a      	adds	r2, r7, r5
 800955c:	2644      	movs	r6, #68	; 0x44
 800955e:	19bb      	adds	r3, r7, r6
 8009560:	0011      	movs	r1, r2
 8009562:	0018      	movs	r0, r3
 8009564:	f7ff ff8e 	bl	8009484 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009568:	237c      	movs	r3, #124	; 0x7c
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	0018      	movs	r0, r3
 800956e:	f7ff ffa1 	bl	80094b4 <my_rtc_get_dt_s>
	sprintf ( m , "%s%s%s" , cf , cdt , rtc_dt_s ) ;
 8009572:	1938      	adds	r0, r7, r4
 8009574:	6804      	ldr	r4, [r0, #0]
 8009576:	229c      	movs	r2, #156	; 0x9c
 8009578:	18b8      	adds	r0, r7, r2
 800957a:	6802      	ldr	r2, [r0, #0]
 800957c:	493c      	ldr	r1, [pc, #240]	; (8009670 <my_rtc_set_alarm+0x138>)
 800957e:	2048      	movs	r0, #72	; 0x48
 8009580:	1838      	adds	r0, r7, r0
 8009582:	237c      	movs	r3, #124	; 0x7c
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	0023      	movs	r3, r4
 800958a:	f002 f8ad 	bl	800b6e8 <sprintf>
	send_debug_logs ( m ) ;
 800958e:	2048      	movs	r0, #72	; 0x48
 8009590:	183b      	adds	r3, r7, r0
 8009592:	0018      	movs	r0, r3
 8009594:	f7f9 fd56 	bl	8003044 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009598:	197a      	adds	r2, r7, r5
 800959a:	19bb      	adds	r3, r7, r6
 800959c:	0011      	movs	r1, r2
 800959e:	0018      	movs	r0, r3
 80095a0:	f000 f918 	bl	80097d4 <my_conv_rtc2timestamp>
 80095a4:	0002      	movs	r2, r0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	189b      	adds	r3, r3, r2
 80095aa:	2490      	movs	r4, #144	; 0x90
 80095ac:	1938      	adds	r0, r7, r4
 80095ae:	6003      	str	r3, [r0, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 80095b0:	197a      	adds	r2, r7, r5
 80095b2:	19b9      	adds	r1, r7, r6
 80095b4:	193c      	adds	r4, r7, r4
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	0018      	movs	r0, r3
 80095ba:	f000 f97f 	bl	80098bc <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 80095be:	002c      	movs	r4, r5
 80095c0:	193b      	adds	r3, r7, r4
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	2108      	movs	r1, #8
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 80095ca:	193b      	adds	r3, r7, r4
 80095cc:	785a      	ldrb	r2, [r3, #1]
 80095ce:	187b      	adds	r3, r7, r1
 80095d0:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 80095d2:	193b      	adds	r3, r7, r4
 80095d4:	789a      	ldrb	r2, [r3, #2]
 80095d6:	187b      	adds	r3, r7, r1
 80095d8:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 80095da:	0008      	movs	r0, r1
 80095dc:	183b      	adds	r3, r7, r0
 80095de:	2200      	movs	r2, #0
 80095e0:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80095e2:	183b      	adds	r3, r7, r0
 80095e4:	2200      	movs	r2, #0
 80095e6:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 80095e8:	183b      	adds	r3, r7, r0
 80095ea:	2200      	movs	r2, #0
 80095ec:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 80095ee:	183b      	adds	r3, r7, r0
 80095f0:	2200      	movs	r2, #0
 80095f2:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 80095f4:	183b      	adds	r3, r7, r0
 80095f6:	2200      	movs	r2, #0
 80095f8:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 80095fa:	183b      	adds	r3, r7, r0
 80095fc:	2200      	movs	r2, #0
 80095fe:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009600:	19bb      	adds	r3, r7, r6
 8009602:	7899      	ldrb	r1, [r3, #2]
 8009604:	183b      	adds	r3, r7, r0
 8009606:	2220      	movs	r2, #32
 8009608:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800960a:	183b      	adds	r3, r7, r0
 800960c:	2280      	movs	r2, #128	; 0x80
 800960e:	0052      	lsls	r2, r2, #1
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009612:	1839      	adds	r1, r7, r0
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <my_rtc_set_alarm+0x13c>)
 8009616:	2200      	movs	r2, #0
 8009618:	0018      	movs	r0, r3
 800961a:	f7fc f917 	bl	800584c <HAL_RTC_SetAlarm_IT>
 800961e:	1e03      	subs	r3, r0, #0
 8009620:	d11a      	bne.n	8009658 <my_rtc_set_alarm+0x120>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009622:	257c      	movs	r5, #124	; 0x7c
 8009624:	197a      	adds	r2, r7, r5
 8009626:	1939      	adds	r1, r7, r4
 8009628:	19bb      	adds	r3, r7, r6
 800962a:	0018      	movs	r0, r3
 800962c:	f000 fa08 	bl	8009a40 <my_conv_dt_2_dts>
		sprintf ( m , "%s%s%s" , cf , cal , rtc_dt_s ) ;
 8009630:	2194      	movs	r1, #148	; 0x94
 8009632:	187b      	adds	r3, r7, r1
 8009634:	681c      	ldr	r4, [r3, #0]
 8009636:	229c      	movs	r2, #156	; 0x9c
 8009638:	18bb      	adds	r3, r7, r2
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	490c      	ldr	r1, [pc, #48]	; (8009670 <my_rtc_set_alarm+0x138>)
 800963e:	2648      	movs	r6, #72	; 0x48
 8009640:	19b8      	adds	r0, r7, r6
 8009642:	197b      	adds	r3, r7, r5
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	0023      	movs	r3, r4
 8009648:	f002 f84e 	bl	800b6e8 <sprintf>
		send_debug_logs ( m ) ;
 800964c:	19bb      	adds	r3, r7, r6
 800964e:	0018      	movs	r0, r3
 8009650:	f7f9 fcf8 	bl	8003044 <send_debug_logs>
		return true ;
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <my_rtc_set_alarm+0x122>
	}
	return false ;
 8009658:	2300      	movs	r3, #0
}
 800965a:	0018      	movs	r0, r3
 800965c:	46bd      	mov	sp, r7
 800965e:	b029      	add	sp, #164	; 0xa4
 8009660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	08013d00 	.word	0x08013d00
 8009668:	08013d1c 	.word	0x08013d1c
 800966c:	08013d20 	.word	0x08013d20
 8009670:	08013d24 	.word	0x08013d24
 8009674:	200006ec 	.word	0x200006ec

08009678 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009678:	b5b0      	push	{r4, r5, r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009680:	2508      	movs	r5, #8
 8009682:	197b      	adds	r3, r7, r5
 8009684:	1cda      	adds	r2, r3, #3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f000 fc9e 	bl	8009fcc <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009690:	197b      	adds	r3, r7, r5
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	0011      	movs	r1, r2
 8009698:	0018      	movs	r0, r3
 800969a:	f000 fcd1 	bl	800a040 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800969e:	197b      	adds	r3, r7, r5
 80096a0:	1c9a      	adds	r2, r3, #2
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	0011      	movs	r1, r2
 80096a6:	0018      	movs	r0, r3
 80096a8:	f000 fd04 	bl	800a0b4 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 80096ac:	240c      	movs	r4, #12
 80096ae:	193a      	adds	r2, r7, r4
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0011      	movs	r1, r2
 80096b4:	0018      	movs	r0, r3
 80096b6:	f000 fd37 	bl	800a128 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 80096ba:	193b      	adds	r3, r7, r4
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	0011      	movs	r1, r2
 80096c2:	0018      	movs	r0, r3
 80096c4:	f000 fd6a 	bl	800a19c <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 80096c8:	193b      	adds	r3, r7, r4
 80096ca:	1c9a      	adds	r2, r3, #2
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	0011      	movs	r1, r2
 80096d0:	0018      	movs	r0, r3
 80096d2:	f000 fd9d 	bl	800a210 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 80096d6:	193b      	adds	r3, r7, r4
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0011      	movs	r1, r2
 80096de:	0018      	movs	r0, r3
 80096e0:	f000 fdd0 	bl	800a284 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80096e4:	193b      	adds	r3, r7, r4
 80096e6:	2200      	movs	r2, #0
 80096e8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80096ea:	193b      	adds	r3, r7, r4
 80096ec:	2200      	movs	r2, #0
 80096ee:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80096f2:	0018      	movs	r0, r3
 80096f4:	f7fc fb19 	bl	8005d2a <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 80096f8:	1939      	adds	r1, r7, r4
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	0018      	movs	r0, r3
 8009700:	f7fb fec0 	bl	8005484 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009704:	1979      	adds	r1, r7, r5
 8009706:	4b06      	ldr	r3, [pc, #24]	; (8009720 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009708:	2200      	movs	r2, #0
 800970a:	0018      	movs	r0, r3
 800970c:	f7fb ffbe 	bl	800568c <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009710:	4b03      	ldr	r3, [pc, #12]	; (8009720 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009712:	0018      	movs	r0, r3
 8009714:	f7fc fb3d 	bl	8005d92 <HAL_RTCEx_DisableBypassShadow>
}
 8009718:	46c0      	nop			; (mov r8, r8)
 800971a:	46bd      	mov	sp, r7
 800971c:	b008      	add	sp, #32
 800971e:	bdb0      	pop	{r4, r5, r7, pc}
 8009720:	200006ec 	.word	0x200006ec

08009724 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2100      	movs	r1, #0
 8009730:	0018      	movs	r0, r3
 8009732:	f001 fe3d 	bl	800b3b0 <strtod>
 8009736:	0002      	movs	r2, r0
 8009738:	000b      	movs	r3, r1
 800973a:	60ba      	str	r2, [r7, #8]
 800973c:	60fb      	str	r3, [r7, #12]
    return d ;
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	68fb      	ldr	r3, [r7, #12]
}
 8009742:	0010      	movs	r0, r2
 8009744:	0019      	movs	r1, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b004      	add	sp, #16
 800974a:	bd80      	pop	{r7, pc}

0800974c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	0008      	movs	r0, r1
 8009756:	0011      	movs	r1, r2
 8009758:	1cfb      	adds	r3, r7, #3
 800975a:	1c02      	adds	r2, r0, #0
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	1cbb      	adds	r3, r7, #2
 8009760:	1c0a      	adds	r2, r1, #0
 8009762:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009764:	230f      	movs	r3, #15
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800976c:	230e      	movs	r3, #14
 800976e:	18fb      	adds	r3, r7, r3
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009774:	e01c      	b.n	80097b0 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009776:	230f      	movs	r3, #15
 8009778:	18fb      	adds	r3, r7, r3
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	1cfa      	adds	r2, r7, #3
 8009784:	7812      	ldrb	r2, [r2, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d105      	bne.n	8009796 <my_find_char_position+0x4a>
			p++ ;
 800978a:	210e      	movs	r1, #14
 800978c:	187b      	adds	r3, r7, r1
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	187b      	adds	r3, r7, r1
 8009792:	3201      	adds	r2, #1
 8009794:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009796:	230e      	movs	r3, #14
 8009798:	18fa      	adds	r2, r7, r3
 800979a:	1cbb      	adds	r3, r7, #2
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d00e      	beq.n	80097c2 <my_find_char_position+0x76>
			break ;
		i++ ;
 80097a4:	210f      	movs	r1, #15
 80097a6:	187b      	adds	r3, r7, r1
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	187b      	adds	r3, r7, r1
 80097ac:	3201      	adds	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 80097b0:	230f      	movs	r3, #15
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	18d3      	adds	r3, r2, r3
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1da      	bne.n	8009776 <my_find_char_position+0x2a>
 80097c0:	e000      	b.n	80097c4 <my_find_char_position+0x78>
			break ;
 80097c2:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 80097c4:	230f      	movs	r3, #15
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	781b      	ldrb	r3, [r3, #0]
}
 80097ca:	0018      	movs	r0, r3
 80097cc:	46bd      	mov	sp, r7
 80097ce:	b004      	add	sp, #16
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	78db      	ldrb	r3, [r3, #3]
 80097e2:	22fa      	movs	r2, #250	; 0xfa
 80097e4:	00d2      	lsls	r2, r2, #3
 80097e6:	4694      	mov	ip, r2
 80097e8:	4463      	add	r3, ip
 80097ea:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	0013      	movs	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	189b      	adds	r3, r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	009a      	lsls	r2, r3, #2
 80097fa:	189a      	adds	r2, r3, r2
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	492c      	ldr	r1, [pc, #176]	; (80098b0 <my_conv_rtc2timestamp+0xdc>)
 8009800:	468c      	mov	ip, r1
 8009802:	4463      	add	r3, ip
 8009804:	089b      	lsrs	r3, r3, #2
 8009806:	18d3      	adds	r3, r2, r3
 8009808:	4a2a      	ldr	r2, [pc, #168]	; (80098b4 <my_conv_rtc2timestamp+0xe0>)
 800980a:	4694      	mov	ip, r2
 800980c:	4463      	add	r3, ip
 800980e:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e00a      	b.n	800982c <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009816:	4a28      	ldr	r2, [pc, #160]	; (80098b8 <my_conv_rtc2timestamp+0xe4>)
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	18d3      	adds	r3, r2, r3
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	001a      	movs	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	189b      	adds	r3, r3, r2
 8009824:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3301      	adds	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	3b01      	subs	r3, #1
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	429a      	cmp	r2, r3
 8009836:	dbee      	blt.n	8009816 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d908      	bls.n	8009852 <my_conv_rtc2timestamp+0x7e>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	0018      	movs	r0, r3
 8009844:	f000 f8de 	bl	8009a04 <my_conv_is_leap_year>
 8009848:	1e03      	subs	r3, r0, #0
 800984a:	d002      	beq.n	8009852 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	3301      	adds	r3, #1
 8009850:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	789b      	ldrb	r3, [r3, #2]
 8009856:	001a      	movs	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	18d3      	adds	r3, r2, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	0013      	movs	r3, r2
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	189b      	adds	r3, r3, r2
 8009868:	011a      	lsls	r2, r3, #4
 800986a:	1ad2      	subs	r2, r2, r3
 800986c:	0113      	lsls	r3, r2, #4
 800986e:	1a9b      	subs	r3, r3, r2
 8009870:	01db      	lsls	r3, r3, #7
 8009872:	0019      	movs	r1, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	001a      	movs	r2, r3
 800987a:	0013      	movs	r3, r2
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	011a      	lsls	r2, r3, #4
 8009882:	1ad2      	subs	r2, r2, r3
 8009884:	0113      	lsls	r3, r2, #4
 8009886:	001a      	movs	r2, r3
 8009888:	0013      	movs	r3, r2
 800988a:	18ca      	adds	r2, r1, r3
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	0019      	movs	r1, r3
 8009892:	000b      	movs	r3, r1
 8009894:	011b      	lsls	r3, r3, #4
 8009896:	1a5b      	subs	r3, r3, r1
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	7892      	ldrb	r2, [r2, #2]
 80098a0:	189b      	adds	r3, r3, r2
 80098a2:	60bb      	str	r3, [r7, #8]

    return ts ;
 80098a4:	68bb      	ldr	r3, [r7, #8]
}
 80098a6:	0018      	movs	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	b006      	add	sp, #24
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	fffff84f 	.word	0xfffff84f
 80098b4:	fff50736 	.word	0xfff50736
 80098b8:	08013e38 	.word	0x08013e38

080098bc <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80098bc:	b590      	push	{r4, r7, lr}
 80098be:	b08b      	sub	sp, #44	; 0x2c
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	213c      	movs	r1, #60	; 0x3c
 80098cc:	0018      	movs	r0, r3
 80098ce:	f7f6 fcbb 	bl	8000248 <__aeabi_uidivmod>
 80098d2:	000b      	movs	r3, r1
 80098d4:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	213c      	movs	r1, #60	; 0x3c
 80098da:	0018      	movs	r0, r3
 80098dc:	f7f6 fc2e 	bl	800013c <__udivsi3>
 80098e0:	0003      	movs	r3, r0
 80098e2:	213c      	movs	r1, #60	; 0x3c
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7f6 fcaf 	bl	8000248 <__aeabi_uidivmod>
 80098ea:	000b      	movs	r3, r1
 80098ec:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	22e1      	movs	r2, #225	; 0xe1
 80098f2:	0111      	lsls	r1, r2, #4
 80098f4:	0018      	movs	r0, r3
 80098f6:	f7f6 fc21 	bl	800013c <__udivsi3>
 80098fa:	0003      	movs	r3, r0
 80098fc:	2118      	movs	r1, #24
 80098fe:	0018      	movs	r0, r3
 8009900:	f7f6 fca2 	bl	8000248 <__aeabi_uidivmod>
 8009904:	000b      	movs	r3, r1
 8009906:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	493b      	ldr	r1, [pc, #236]	; (80099f8 <my_conv_timestamp2rtc+0x13c>)
 800990c:	0018      	movs	r0, r3
 800990e:	f7f6 fc15 	bl	800013c <__udivsi3>
 8009912:	0003      	movs	r3, r0
 8009914:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009916:	4b39      	ldr	r3, [pc, #228]	; (80099fc <my_conv_timestamp2rtc+0x140>)
 8009918:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800991a:	e00d      	b.n	8009938 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	0018      	movs	r0, r3
 8009920:	f000 f870 	bl	8009a04 <my_conv_is_leap_year>
 8009924:	0003      	movs	r3, r0
 8009926:	336e      	adds	r3, #110	; 0x6e
 8009928:	33ff      	adds	r3, #255	; 0xff
 800992a:	001a      	movs	r2, r3
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	3301      	adds	r3, #1
 8009936:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	0018      	movs	r0, r3
 800993c:	f000 f862 	bl	8009a04 <my_conv_is_leap_year>
 8009940:	0003      	movs	r3, r0
 8009942:	336e      	adds	r3, #110	; 0x6e
 8009944:	33ff      	adds	r3, #255	; 0xff
 8009946:	001a      	movs	r2, r3
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	4293      	cmp	r3, r2
 800994c:	d2e6      	bcs.n	800991c <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009952:	e018      	b.n	8009986 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <my_conv_timestamp2rtc+0x144>)
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	0052      	lsls	r2, r2, #1
 800995a:	5ad3      	ldrh	r3, [r2, r3]
 800995c:	001c      	movs	r4, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d107      	bne.n	8009974 <my_conv_timestamp2rtc+0xb8>
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	0018      	movs	r0, r3
 8009968:	f000 f84c 	bl	8009a04 <my_conv_is_leap_year>
 800996c:	1e03      	subs	r3, r0, #0
 800996e:	d001      	beq.n	8009974 <my_conv_timestamp2rtc+0xb8>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <my_conv_timestamp2rtc+0xba>
 8009974:	2300      	movs	r3, #0
 8009976:	191b      	adds	r3, r3, r4
 8009978:	001a      	movs	r2, r3
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009986:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <my_conv_timestamp2rtc+0x144>)
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	0052      	lsls	r2, r2, #1
 800998c:	5ad3      	ldrh	r3, [r2, r3]
 800998e:	001c      	movs	r4, r3
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d107      	bne.n	80099a6 <my_conv_timestamp2rtc+0xea>
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	0018      	movs	r0, r3
 800999a:	f000 f833 	bl	8009a04 <my_conv_is_leap_year>
 800999e:	1e03      	subs	r3, r0, #0
 80099a0:	d001      	beq.n	80099a6 <my_conv_timestamp2rtc+0xea>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <my_conv_timestamp2rtc+0xec>
 80099a6:	2300      	movs	r3, #0
 80099a8:	191b      	adds	r3, r3, r4
 80099aa:	001a      	movs	r2, r3
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d2d0      	bcs.n	8009954 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	3330      	adds	r3, #48	; 0x30
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	3301      	adds	r3, #1
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	709a      	strb	r2, [r3, #2]
}
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	46bd      	mov	sp, r7
 80099f2:	b00b      	add	sp, #44	; 0x2c
 80099f4:	bd90      	pop	{r4, r7, pc}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	00015180 	.word	0x00015180
 80099fc:	000007b2 	.word	0x000007b2
 8009a00:	08013e44 	.word	0x08013e44

08009a04 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	4013      	ands	r3, r2
 8009a12:	d106      	bne.n	8009a22 <my_conv_is_leap_year+0x1e>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2164      	movs	r1, #100	; 0x64
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f7f6 fcff 	bl	800041c <__aeabi_idivmod>
 8009a1e:	1e0b      	subs	r3, r1, #0
 8009a20:	d107      	bne.n	8009a32 <my_conv_is_leap_year+0x2e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	22c8      	movs	r2, #200	; 0xc8
 8009a26:	0051      	lsls	r1, r2, #1
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f7f6 fcf7 	bl	800041c <__aeabi_idivmod>
 8009a2e:	1e0b      	subs	r3, r1, #0
 8009a30:	d101      	bne.n	8009a36 <my_conv_is_leap_year+0x32>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <my_conv_is_leap_year+0x34>
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a42:	b089      	sub	sp, #36	; 0x24
 8009a44:	af04      	add	r7, sp, #16
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	78db      	ldrb	r3, [r3, #3]
 8009a50:	22fa      	movs	r2, #250	; 0xfa
 8009a52:	00d2      	lsls	r2, r2, #3
 8009a54:	189a      	adds	r2, r3, r2
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	469c      	mov	ip, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	001c      	movs	r4, r3
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	001d      	movs	r5, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	001e      	movs	r6, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	789b      	ldrb	r3, [r3, #2]
 8009a72:	4906      	ldr	r1, [pc, #24]	; (8009a8c <my_conv_dt_2_dts+0x4c>)
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	9602      	str	r6, [sp, #8]
 8009a7a:	9501      	str	r5, [sp, #4]
 8009a7c:	9400      	str	r4, [sp, #0]
 8009a7e:	4663      	mov	r3, ip
 8009a80:	f001 fe32 	bl	800b6e8 <sprintf>
}
 8009a84:	46c0      	nop			; (mov r8, r8)
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b005      	add	sp, #20
 8009a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8c:	08013d2c 	.word	0x08013d2c

08009a90 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b24      	cmp	r3, #36	; 0x24
 8009aa2:	d117      	bne.n	8009ad4 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	b2d1      	uxtb	r1, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	7011      	strb	r1, [r2, #0]
 8009ab6:	001a      	movs	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	189b      	adds	r3, r3, r2
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	7812      	ldrb	r2, [r2, #0]
 8009ac0:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	189b      	adds	r3, r3, r2
 8009acc:	2200      	movs	r2, #0
 8009ace:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e045      	b.n	8009b60 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	d907      	bls.n	8009aec <my_nmea_message+0x5c>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b7e      	cmp	r3, #126	; 0x7e
 8009ae2:	d803      	bhi.n	8009aec <my_nmea_message+0x5c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d103      	bne.n	8009af4 <my_nmea_message+0x64>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b0d      	cmp	r3, #13
 8009af2:	d114      	bne.n	8009b1e <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	b2d1      	uxtb	r1, r2
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7011      	strb	r1, [r2, #0]
 8009b00:	001a      	movs	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	189b      	adds	r3, r3, r2
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	7812      	ldrb	r2, [r2, #0]
 8009b0a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	001a      	movs	r2, r3
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	189b      	adds	r3, r3, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e020      	b.n	8009b60 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b0a      	cmp	r3, #10
 8009b24:	d11a      	bne.n	8009b5c <my_nmea_message+0xcc>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d916      	bls.n	8009b5c <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	001a      	movs	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b0d      	cmp	r3, #13
 8009b48:	d108      	bne.n	8009b5c <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	001a      	movs	r2, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	189b      	adds	r3, r3, r2
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e001      	b.n	8009b60 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	425b      	negs	r3, r3
}
 8009b60:	0018      	movs	r0, r3
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b004      	add	sp, #16
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3309      	adds	r3, #9
 8009b74:	781b      	ldrb	r3, [r3, #0]
}
 8009b76:	0018      	movs	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b002      	add	sp, #8
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009b7e:	b5b0      	push	{r4, r5, r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	220f      	movs	r2, #15
 8009b8a:	212c      	movs	r1, #44	; 0x2c
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7ff fddd 	bl	800974c <my_find_char_position>
 8009b92:	0003      	movs	r3, r0
 8009b94:	001a      	movs	r2, r3
 8009b96:	2517      	movs	r5, #23
 8009b98:	197b      	adds	r3, r7, r5
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2210      	movs	r2, #16
 8009ba2:	212c      	movs	r1, #44	; 0x2c
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f7ff fdd1 	bl	800974c <my_find_char_position>
 8009baa:	0003      	movs	r3, r0
 8009bac:	0019      	movs	r1, r3
 8009bae:	2416      	movs	r4, #22
 8009bb0:	193b      	adds	r3, r7, r4
 8009bb2:	197a      	adds	r2, r7, r5
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	1a8a      	subs	r2, r1, r2
 8009bb8:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009bba:	193b      	adds	r3, r7, r4
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f000 fb93 	bl	800a2ec <malloc>
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	18d1      	adds	r1, r2, r3
 8009bd2:	193b      	adds	r3, r7, r4
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f001 fe34 	bl	800b846 <strncpy>
	pdop_s[pdop_length] = '\0';
 8009bde:	193b      	adds	r3, r7, r4
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	2200      	movs	r2, #0
 8009be8:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	0018      	movs	r0, r3
 8009bee:	f7ff fd99 	bl	8009724 <my_string2double_conv>
 8009bf2:	0002      	movs	r2, r0
 8009bf4:	000b      	movs	r3, r1
 8009bf6:	60ba      	str	r2, [r7, #8]
 8009bf8:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f000 fb7f 	bl	800a300 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	68fb      	ldr	r3, [r7, #12]
}
 8009c06:	0010      	movs	r0, r2
 8009c08:	0019      	movs	r1, r3
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b006      	add	sp, #24
 8009c0e:	bdb0      	pop	{r4, r5, r7, pc}

08009c10 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009c18:	230f      	movs	r3, #15
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009c20:	230e      	movs	r3, #14
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	2201      	movs	r2, #1
 8009c26:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009c28:	e00f      	b.n	8009c4a <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009c2a:	220e      	movs	r2, #14
 8009c2c:	18bb      	adds	r3, r7, r2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	18ba      	adds	r2, r7, r2
 8009c32:	1c59      	adds	r1, r3, #1
 8009c34:	7011      	strb	r1, [r2, #0]
 8009c36:	001a      	movs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	189b      	adds	r3, r3, r2
 8009c3c:	7819      	ldrb	r1, [r3, #0]
 8009c3e:	220f      	movs	r2, #15
 8009c40:	18bb      	adds	r3, r7, r2
 8009c42:	18ba      	adds	r2, r7, r2
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	404a      	eors	r2, r1
 8009c48:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009c4a:	210e      	movs	r1, #14
 8009c4c:	187b      	adds	r3, r7, r1
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	18d3      	adds	r3, r2, r3
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b2a      	cmp	r3, #42	; 0x2a
 8009c58:	d00a      	beq.n	8009c70 <is_my_nmea_checksum_ok+0x60>
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	18d3      	adds	r3, r2, r3
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <is_my_nmea_checksum_ok+0x60>
 8009c68:	187b      	adds	r3, r7, r1
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1dc      	bne.n	8009c2a <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009c70:	230f      	movs	r3, #15
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	781c      	ldrb	r4, [r3, #0]
 8009c76:	210e      	movs	r1, #14
 8009c78:	187b      	adds	r3, r7, r1
 8009c7a:	187a      	adds	r2, r7, r1
 8009c7c:	7812      	ldrb	r2, [r2, #0]
 8009c7e:	3201      	adds	r2, #1
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	187b      	adds	r3, r7, r1
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	18d3      	adds	r3, r2, r3
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f001 fc26 	bl	800b4e0 <strtol>
 8009c94:	0003      	movs	r3, r0
 8009c96:	1ae3      	subs	r3, r4, r3
 8009c98:	425a      	negs	r2, r3
 8009c9a:	4153      	adcs	r3, r2
 8009c9c:	b2db      	uxtb	r3, r3
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b005      	add	sp, #20
 8009ca4:	bd90      	pop	{r4, r7, pc}
	...

08009ca8 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009ca8:	b5b0      	push	{r4, r5, r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	000a      	movs	r2, r1
 8009cb2:	1cfb      	adds	r3, r7, #3
 8009cb4:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	18fa      	adds	r2, r7, r3
 8009cba:	492f      	ldr	r1, [pc, #188]	; (8009d78 <nmea2decimal+0xd0>)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f001 fd32 	bl	800b728 <sscanf>
    min = deg / 100 ;
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4b2c      	ldr	r3, [pc, #176]	; (8009d7c <nmea2decimal+0xd4>)
 8009ccc:	f7f7 f8d4 	bl	8000e78 <__aeabi_ddiv>
 8009cd0:	0002      	movs	r2, r0
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	613a      	str	r2, [r7, #16]
 8009cd6:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009cd8:	6938      	ldr	r0, [r7, #16]
 8009cda:	6979      	ldr	r1, [r7, #20]
 8009cdc:	f7f8 fb28 	bl	8002330 <__aeabi_d2iz>
 8009ce0:	0003      	movs	r3, r0
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f7f8 fb5a 	bl	800239c <__aeabi_i2d>
 8009ce8:	0002      	movs	r2, r0
 8009cea:	000b      	movs	r3, r1
 8009cec:	60ba      	str	r2, [r7, #8]
 8009cee:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6938      	ldr	r0, [r7, #16]
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	f7f7 ff7a 	bl	8001bf0 <__aeabi_dsub>
 8009cfc:	0002      	movs	r2, r0
 8009cfe:	000b      	movs	r3, r1
 8009d00:	0010      	movs	r0, r2
 8009d02:	0019      	movs	r1, r3
 8009d04:	2200      	movs	r2, #0
 8009d06:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <nmea2decimal+0xd8>)
 8009d08:	f7f7 fcb0 	bl	800166c <__aeabi_dmul>
 8009d0c:	0002      	movs	r2, r0
 8009d0e:	000b      	movs	r3, r1
 8009d10:	613a      	str	r2, [r7, #16]
 8009d12:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009d14:	2200      	movs	r2, #0
 8009d16:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <nmea2decimal+0xdc>)
 8009d18:	6938      	ldr	r0, [r7, #16]
 8009d1a:	6979      	ldr	r1, [r7, #20]
 8009d1c:	f7f7 f8ac 	bl	8000e78 <__aeabi_ddiv>
 8009d20:	0002      	movs	r2, r0
 8009d22:	000b      	movs	r3, r1
 8009d24:	613a      	str	r2, [r7, #16]
 8009d26:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009d28:	1cfb      	adds	r3, r7, #3
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b53      	cmp	r3, #83	; 0x53
 8009d2e:	d003      	beq.n	8009d38 <nmea2decimal+0x90>
 8009d30:	1cfb      	adds	r3, r7, #3
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b57      	cmp	r3, #87	; 0x57
 8009d36:	d10e      	bne.n	8009d56 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009d38:	68b8      	ldr	r0, [r7, #8]
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f7f6 fd3a 	bl	80007b8 <__aeabi_dadd>
 8009d44:	0002      	movs	r2, r0
 8009d46:	000b      	movs	r3, r1
 8009d48:	0011      	movs	r1, r2
 8009d4a:	000c      	movs	r4, r1
 8009d4c:	2180      	movs	r1, #128	; 0x80
 8009d4e:	0609      	lsls	r1, r1, #24
 8009d50:	4059      	eors	r1, r3
 8009d52:	000d      	movs	r5, r1
 8009d54:	e009      	b.n	8009d6a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009d56:	68b8      	ldr	r0, [r7, #8]
 8009d58:	68f9      	ldr	r1, [r7, #12]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f7f6 fd2b 	bl	80007b8 <__aeabi_dadd>
 8009d62:	0002      	movs	r2, r0
 8009d64:	000b      	movs	r3, r1
 8009d66:	0014      	movs	r4, r2
 8009d68:	001d      	movs	r5, r3
}
 8009d6a:	0022      	movs	r2, r4
 8009d6c:	002b      	movs	r3, r5
 8009d6e:	0010      	movs	r0, r2
 8009d70:	0019      	movs	r1, r3
 8009d72:	46bd      	mov	sp, r7
 8009d74:	b006      	add	sp, #24
 8009d76:	bdb0      	pop	{r4, r5, r7, pc}
 8009d78:	08013d4c 	.word	0x08013d4c
 8009d7c:	40590000 	.word	0x40590000
 8009d80:	40240000 	.word	0x40240000
 8009d84:	40180000 	.word	0x40180000

08009d88 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 8009d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8a:	b08d      	sub	sp, #52	; 0x34
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	212c      	movs	r1, #44	; 0x2c
 8009d98:	0018      	movs	r0, r3
 8009d9a:	f7ff fcd7 	bl	800974c <my_find_char_position>
 8009d9e:	0003      	movs	r3, r0
 8009da0:	001a      	movs	r2, r3
 8009da2:	252f      	movs	r5, #47	; 0x2f
 8009da4:	197b      	adds	r3, r7, r5
 8009da6:	3201      	adds	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2202      	movs	r2, #2
 8009dae:	212c      	movs	r1, #44	; 0x2c
 8009db0:	0018      	movs	r0, r3
 8009db2:	f7ff fccb 	bl	800974c <my_find_char_position>
 8009db6:	0003      	movs	r3, r0
 8009db8:	0019      	movs	r1, r3
 8009dba:	242e      	movs	r4, #46	; 0x2e
 8009dbc:	193b      	adds	r3, r7, r4
 8009dbe:	197a      	adds	r2, r7, r5
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	1a8a      	subs	r2, r1, r2
 8009dc4:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009dc6:	193b      	adds	r3, r7, r4
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f000 fa8d 	bl	800a2ec <malloc>
 8009dd2:	0003      	movs	r3, r0
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009dd6:	197b      	adds	r3, r7, r5
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	18d1      	adds	r1, r2, r3
 8009dde:	193b      	adds	r3, r7, r4
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	0018      	movs	r0, r3
 8009de6:	f001 fd2e 	bl	800b846 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8009dea:	193b      	adds	r3, r7, r4
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df0:	18d3      	adds	r3, r2, r3
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009df6:	197b      	adds	r3, r7, r5
 8009df8:	781a      	ldrb	r2, [r3, #0]
 8009dfa:	193b      	adds	r3, r7, r4
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	18d3      	adds	r3, r2, r3
 8009e00:	3301      	adds	r3, #1
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	18d2      	adds	r2, r2, r3
 8009e06:	2627      	movs	r6, #39	; 0x27
 8009e08:	19bb      	adds	r3, r7, r6
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8009e0e:	19bb      	adds	r3, r7, r6
 8009e10:	781a      	ldrb	r2, [r3, #0]
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	0011      	movs	r1, r2
 8009e16:	0018      	movs	r0, r3
 8009e18:	f7ff ff46 	bl	8009ca8 <nmea2decimal>
 8009e1c:	0002      	movs	r2, r0
 8009e1e:	000b      	movs	r3, r1
 8009e20:	61ba      	str	r2, [r7, #24]
 8009e22:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	0018      	movs	r0, r3
 8009e28:	f000 fa6a 	bl	800a300 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4b49      	ldr	r3, [pc, #292]	; (8009f54 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009e30:	69b8      	ldr	r0, [r7, #24]
 8009e32:	69f9      	ldr	r1, [r7, #28]
 8009e34:	f7f7 fc1a 	bl	800166c <__aeabi_dmul>
 8009e38:	0002      	movs	r2, r0
 8009e3a:	000b      	movs	r3, r1
 8009e3c:	0010      	movs	r0, r2
 8009e3e:	0019      	movs	r1, r3
 8009e40:	f008 fa1e 	bl	8012280 <round>
 8009e44:	2200      	movs	r2, #0
 8009e46:	4b43      	ldr	r3, [pc, #268]	; (8009f54 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009e48:	f7f7 f816 	bl	8000e78 <__aeabi_ddiv>
 8009e4c:	0002      	movs	r2, r0
 8009e4e:	000b      	movs	r3, r1
 8009e50:	61ba      	str	r2, [r7, #24]
 8009e52:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 8009e54:	2200      	movs	r2, #0
 8009e56:	4b40      	ldr	r3, [pc, #256]	; (8009f58 <my_nmea_get_gngll_coordinates+0x1d0>)
 8009e58:	69b8      	ldr	r0, [r7, #24]
 8009e5a:	69f9      	ldr	r1, [r7, #28]
 8009e5c:	f7f7 fc06 	bl	800166c <__aeabi_dmul>
 8009e60:	0002      	movs	r2, r0
 8009e62:	000b      	movs	r3, r1
 8009e64:	0010      	movs	r0, r2
 8009e66:	0019      	movs	r1, r3
 8009e68:	f7f8 fa62 	bl	8002330 <__aeabi_d2iz>
 8009e6c:	0002      	movs	r2, r0
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2203      	movs	r2, #3
 8009e76:	212c      	movs	r1, #44	; 0x2c
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f7ff fc67 	bl	800974c <my_find_char_position>
 8009e7e:	0003      	movs	r3, r0
 8009e80:	001a      	movs	r2, r3
 8009e82:	197b      	adds	r3, r7, r5
 8009e84:	3201      	adds	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2204      	movs	r2, #4
 8009e8c:	212c      	movs	r1, #44	; 0x2c
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f7ff fc5c 	bl	800974c <my_find_char_position>
 8009e94:	0003      	movs	r3, r0
 8009e96:	0019      	movs	r1, r3
 8009e98:	193b      	adds	r3, r7, r4
 8009e9a:	197a      	adds	r2, r7, r5
 8009e9c:	7812      	ldrb	r2, [r2, #0]
 8009e9e:	1a8a      	subs	r2, r1, r2
 8009ea0:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009ea2:	193b      	adds	r3, r7, r4
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f000 fa1f 	bl	800a2ec <malloc>
 8009eae:	0003      	movs	r3, r0
 8009eb0:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009eb2:	197b      	adds	r3, r7, r5
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	18d1      	adds	r1, r2, r3
 8009eba:	193b      	adds	r3, r7, r4
 8009ebc:	781a      	ldrb	r2, [r3, #0]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f001 fcc0 	bl	800b846 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 8009ec6:	193b      	adds	r3, r7, r4
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	18d3      	adds	r3, r2, r3
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009ed2:	197b      	adds	r3, r7, r5
 8009ed4:	781a      	ldrb	r2, [r3, #0]
 8009ed6:	193b      	adds	r3, r7, r4
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	18d3      	adds	r3, r2, r3
 8009edc:	3301      	adds	r3, #1
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	18d2      	adds	r2, r2, r3
 8009ee2:	19bb      	adds	r3, r7, r6
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8009ee8:	19bb      	adds	r3, r7, r6
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	0011      	movs	r1, r2
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f7ff fed9 	bl	8009ca8 <nmea2decimal>
 8009ef6:	0002      	movs	r2, r0
 8009ef8:	000b      	movs	r3, r1
 8009efa:	60ba      	str	r2, [r7, #8]
 8009efc:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f000 f9fd 	bl	800a300 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8009f06:	2200      	movs	r2, #0
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009f0a:	68b8      	ldr	r0, [r7, #8]
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	f7f7 fbad 	bl	800166c <__aeabi_dmul>
 8009f12:	0002      	movs	r2, r0
 8009f14:	000b      	movs	r3, r1
 8009f16:	0010      	movs	r0, r2
 8009f18:	0019      	movs	r1, r3
 8009f1a:	f008 f9b1 	bl	8012280 <round>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009f22:	f7f6 ffa9 	bl	8000e78 <__aeabi_ddiv>
 8009f26:	0002      	movs	r2, r0
 8009f28:	000b      	movs	r3, r1
 8009f2a:	60ba      	str	r2, [r7, #8]
 8009f2c:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <my_nmea_get_gngll_coordinates+0x1d0>)
 8009f32:	68b8      	ldr	r0, [r7, #8]
 8009f34:	68f9      	ldr	r1, [r7, #12]
 8009f36:	f7f7 fb99 	bl	800166c <__aeabi_dmul>
 8009f3a:	0002      	movs	r2, r0
 8009f3c:	000b      	movs	r3, r1
 8009f3e:	0010      	movs	r0, r2
 8009f40:	0019      	movs	r1, r3
 8009f42:	f7f8 f9f5 	bl	8002330 <__aeabi_d2iz>
 8009f46:	0002      	movs	r2, r0
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
}
 8009f4c:	46c0      	nop			; (mov r8, r8)
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	b00d      	add	sp, #52	; 0x34
 8009f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f54:	412e8480 	.word	0x412e8480
 8009f58:	416312d0 	.word	0x416312d0

08009f5c <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 8009f5c:	b5b0      	push	{r4, r5, r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 8009f64:	240e      	movs	r4, #14
 8009f66:	193b      	adds	r3, r7, r4
 8009f68:	2200      	movs	r2, #0
 8009f6a:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	212c      	movs	r1, #44	; 0x2c
 8009f72:	0018      	movs	r0, r3
 8009f74:	f7ff fbea 	bl	800974c <my_find_char_position>
 8009f78:	0003      	movs	r3, r0
 8009f7a:	001a      	movs	r2, r3
 8009f7c:	2517      	movs	r5, #23
 8009f7e:	197b      	adds	r3, r7, r5
 8009f80:	3201      	adds	r2, #1
 8009f82:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009f84:	2003      	movs	r0, #3
 8009f86:	f000 f9b1 	bl	800a2ec <malloc>
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009f8e:	197b      	adds	r3, r7, r5
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f001 fc53 	bl	800b846 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	3302      	adds	r3, #2
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 8009fa8:	193a      	adds	r2, r7, r4
 8009faa:	4907      	ldr	r1, [pc, #28]	; (8009fc8 <my_nmea_get_gsv_tns+0x6c>)
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f001 fbba 	bl	800b728 <sscanf>
	free ( s ) ;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f000 f9a2 	bl	800a300 <free>
	return tns ;
 8009fbc:	193b      	adds	r3, r7, r4
 8009fbe:	881b      	ldrh	r3, [r3, #0]
}
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	b006      	add	sp, #24
 8009fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc8:	08013d58 	.word	0x08013d58

08009fcc <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2209      	movs	r2, #9
 8009fda:	212c      	movs	r1, #44	; 0x2c
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f7ff fbb5 	bl	800974c <my_find_char_position>
 8009fe2:	0003      	movs	r3, r0
 8009fe4:	001a      	movs	r2, r3
 8009fe6:	2417      	movs	r4, #23
 8009fe8:	193b      	adds	r3, r7, r4
 8009fea:	3205      	adds	r2, #5
 8009fec:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009fee:	2003      	movs	r0, #3
 8009ff0:	f000 f97c 	bl	800a2ec <malloc>
 8009ff4:	0003      	movs	r3, r0
 8009ff6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009ff8:	193b      	adds	r3, r7, r4
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	18d1      	adds	r1, r2, r3
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	2202      	movs	r2, #2
 800a004:	0018      	movs	r0, r3
 800a006:	f001 fc1e 	bl	800b846 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	3302      	adds	r3, #2
 800a00e:	2200      	movs	r2, #0
 800a010:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a012:	240e      	movs	r4, #14
 800a014:	193a      	adds	r2, r7, r4
 800a016:	4909      	ldr	r1, [pc, #36]	; (800a03c <my_nmea_get_rmc_date_yy+0x70>)
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	0018      	movs	r0, r3
 800a01c:	f001 fb84 	bl	800b728 <sscanf>
	free ( s ) ;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	0018      	movs	r0, r3
 800a024:	f000 f96c 	bl	800a300 <free>
	*yy = (uint8_t) temp ;
 800a028:	193b      	adds	r3, r7, r4
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	701a      	strb	r2, [r3, #0]

}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	46bd      	mov	sp, r7
 800a036:	b007      	add	sp, #28
 800a038:	bd90      	pop	{r4, r7, pc}
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	08013d58 	.word	0x08013d58

0800a040 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2209      	movs	r2, #9
 800a04e:	212c      	movs	r1, #44	; 0x2c
 800a050:	0018      	movs	r0, r3
 800a052:	f7ff fb7b 	bl	800974c <my_find_char_position>
 800a056:	0003      	movs	r3, r0
 800a058:	001a      	movs	r2, r3
 800a05a:	2417      	movs	r4, #23
 800a05c:	193b      	adds	r3, r7, r4
 800a05e:	3203      	adds	r2, #3
 800a060:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a062:	2003      	movs	r0, #3
 800a064:	f000 f942 	bl	800a2ec <malloc>
 800a068:	0003      	movs	r3, r0
 800a06a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a06c:	193b      	adds	r3, r7, r4
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	18d1      	adds	r1, r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2202      	movs	r2, #2
 800a078:	0018      	movs	r0, r3
 800a07a:	f001 fbe4 	bl	800b846 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3302      	adds	r3, #2
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a086:	240e      	movs	r4, #14
 800a088:	193a      	adds	r2, r7, r4
 800a08a:	4909      	ldr	r1, [pc, #36]	; (800a0b0 <my_nmea_get_rmc_date_mm+0x70>)
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	0018      	movs	r0, r3
 800a090:	f001 fb4a 	bl	800b728 <sscanf>
	free ( s ) ;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	0018      	movs	r0, r3
 800a098:	f000 f932 	bl	800a300 <free>
	*mm = (uint8_t) temp ;
 800a09c:	193b      	adds	r3, r7, r4
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]

}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b007      	add	sp, #28
 800a0ac:	bd90      	pop	{r4, r7, pc}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	08013d58 	.word	0x08013d58

0800a0b4 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2209      	movs	r2, #9
 800a0c2:	212c      	movs	r1, #44	; 0x2c
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7ff fb41 	bl	800974c <my_find_char_position>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	2417      	movs	r4, #23
 800a0d0:	193b      	adds	r3, r7, r4
 800a0d2:	3201      	adds	r2, #1
 800a0d4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a0d6:	2003      	movs	r0, #3
 800a0d8:	f000 f908 	bl	800a2ec <malloc>
 800a0dc:	0003      	movs	r3, r0
 800a0de:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a0e0:	193b      	adds	r3, r7, r4
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	18d1      	adds	r1, r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f001 fbaa 	bl	800b846 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a0fa:	240e      	movs	r4, #14
 800a0fc:	193a      	adds	r2, r7, r4
 800a0fe:	4909      	ldr	r1, [pc, #36]	; (800a124 <my_nmea_get_rmc_date_dd+0x70>)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	0018      	movs	r0, r3
 800a104:	f001 fb10 	bl	800b728 <sscanf>
	free ( s ) ;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	0018      	movs	r0, r3
 800a10c:	f000 f8f8 	bl	800a300 <free>
	*dd = (uint8_t) temp ;
 800a110:	193b      	adds	r3, r7, r4
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b2da      	uxtb	r2, r3
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	701a      	strb	r2, [r3, #0]

}
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	46bd      	mov	sp, r7
 800a11e:	b007      	add	sp, #28
 800a120:	bd90      	pop	{r4, r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	08013d58 	.word	0x08013d58

0800a128 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a128:	b590      	push	{r4, r7, lr}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	212c      	movs	r1, #44	; 0x2c
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff fb07 	bl	800974c <my_find_char_position>
 800a13e:	0003      	movs	r3, r0
 800a140:	001a      	movs	r2, r3
 800a142:	2417      	movs	r4, #23
 800a144:	193b      	adds	r3, r7, r4
 800a146:	3201      	adds	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a14a:	2003      	movs	r0, #3
 800a14c:	f000 f8ce 	bl	800a2ec <malloc>
 800a150:	0003      	movs	r3, r0
 800a152:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a154:	193b      	adds	r3, r7, r4
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	18d1      	adds	r1, r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2202      	movs	r2, #2
 800a160:	0018      	movs	r0, r3
 800a162:	f001 fb70 	bl	800b846 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3302      	adds	r3, #2
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a16e:	240e      	movs	r4, #14
 800a170:	193a      	adds	r2, r7, r4
 800a172:	4909      	ldr	r1, [pc, #36]	; (800a198 <my_nmea_get_rmc_utc_hh+0x70>)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	0018      	movs	r0, r3
 800a178:	f001 fad6 	bl	800b728 <sscanf>
	free ( s ) ;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	0018      	movs	r0, r3
 800a180:	f000 f8be 	bl	800a300 <free>
	*hh = (uint8_t) temp ;
 800a184:	193b      	adds	r3, r7, r4
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	701a      	strb	r2, [r3, #0]

}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	46bd      	mov	sp, r7
 800a192:	b007      	add	sp, #28
 800a194:	bd90      	pop	{r4, r7, pc}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	08013d58 	.word	0x08013d58

0800a19c <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	212c      	movs	r1, #44	; 0x2c
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f7ff facd 	bl	800974c <my_find_char_position>
 800a1b2:	0003      	movs	r3, r0
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	2417      	movs	r4, #23
 800a1b8:	193b      	adds	r3, r7, r4
 800a1ba:	3203      	adds	r2, #3
 800a1bc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a1be:	2003      	movs	r0, #3
 800a1c0:	f000 f894 	bl	800a2ec <malloc>
 800a1c4:	0003      	movs	r3, r0
 800a1c6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1c8:	193b      	adds	r3, r7, r4
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	18d1      	adds	r1, r2, r3
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f001 fb36 	bl	800b846 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	3302      	adds	r3, #2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a1e2:	240e      	movs	r4, #14
 800a1e4:	193a      	adds	r2, r7, r4
 800a1e6:	4909      	ldr	r1, [pc, #36]	; (800a20c <my_nmea_get_rmc_utc_mm+0x70>)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f001 fa9c 	bl	800b728 <sscanf>
	free ( s ) ;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f000 f884 	bl	800a300 <free>
	*mm = (uint8_t) temp ;
 800a1f8:	193b      	adds	r3, r7, r4
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	701a      	strb	r2, [r3, #0]

}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	46bd      	mov	sp, r7
 800a206:	b007      	add	sp, #28
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	08013d58 	.word	0x08013d58

0800a210 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	212c      	movs	r1, #44	; 0x2c
 800a220:	0018      	movs	r0, r3
 800a222:	f7ff fa93 	bl	800974c <my_find_char_position>
 800a226:	0003      	movs	r3, r0
 800a228:	001a      	movs	r2, r3
 800a22a:	2417      	movs	r4, #23
 800a22c:	193b      	adds	r3, r7, r4
 800a22e:	3205      	adds	r2, #5
 800a230:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a232:	2003      	movs	r0, #3
 800a234:	f000 f85a 	bl	800a2ec <malloc>
 800a238:	0003      	movs	r3, r0
 800a23a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a23c:	193b      	adds	r3, r7, r4
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	18d1      	adds	r1, r2, r3
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	2202      	movs	r2, #2
 800a248:	0018      	movs	r0, r3
 800a24a:	f001 fafc 	bl	800b846 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3302      	adds	r3, #2
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a256:	240e      	movs	r4, #14
 800a258:	193a      	adds	r2, r7, r4
 800a25a:	4909      	ldr	r1, [pc, #36]	; (800a280 <my_nmea_get_rmc_utc_ss+0x70>)
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	0018      	movs	r0, r3
 800a260:	f001 fa62 	bl	800b728 <sscanf>
	free ( s ) ;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	0018      	movs	r0, r3
 800a268:	f000 f84a 	bl	800a300 <free>
	*ss = (uint8_t) temp ;
 800a26c:	193b      	adds	r3, r7, r4
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	701a      	strb	r2, [r3, #0]

}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	46bd      	mov	sp, r7
 800a27a:	b007      	add	sp, #28
 800a27c:	bd90      	pop	{r4, r7, pc}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	08013d58 	.word	0x08013d58

0800a284 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	212c      	movs	r1, #44	; 0x2c
 800a294:	0018      	movs	r0, r3
 800a296:	f7ff fa59 	bl	800974c <my_find_char_position>
 800a29a:	0003      	movs	r3, r0
 800a29c:	001a      	movs	r2, r3
 800a29e:	240f      	movs	r4, #15
 800a2a0:	193b      	adds	r3, r7, r4
 800a2a2:	3208      	adds	r2, #8
 800a2a4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a2a6:	2004      	movs	r0, #4
 800a2a8:	f000 f820 	bl	800a2ec <malloc>
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2b0:	193b      	adds	r3, r7, r4
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	18d1      	adds	r1, r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f001 fac2 	bl	800b846 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	3303      	adds	r3, #3
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	4906      	ldr	r1, [pc, #24]	; (800a2e8 <my_nmea_get_rmc_utc_sss+0x64>)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f001 fa29 	bl	800b728 <sscanf>
	free ( s ) ;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f000 f811 	bl	800a300 <free>
}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b005      	add	sp, #20
 800a2e4:	bd90      	pop	{r4, r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	08013d5c 	.word	0x08013d5c

0800a2ec <malloc>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	4b03      	ldr	r3, [pc, #12]	; (800a2fc <malloc+0x10>)
 800a2f0:	0001      	movs	r1, r0
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	f000 f80e 	bl	800a314 <_malloc_r>
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	200006c8 	.word	0x200006c8

0800a300 <free>:
 800a300:	b510      	push	{r4, lr}
 800a302:	4b03      	ldr	r3, [pc, #12]	; (800a310 <free+0x10>)
 800a304:	0001      	movs	r1, r0
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	f001 fbe4 	bl	800bad4 <_free_r>
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	46c0      	nop			; (mov r8, r8)
 800a310:	200006c8 	.word	0x200006c8

0800a314 <_malloc_r>:
 800a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a316:	000d      	movs	r5, r1
 800a318:	b087      	sub	sp, #28
 800a31a:	350b      	adds	r5, #11
 800a31c:	9001      	str	r0, [sp, #4]
 800a31e:	2d16      	cmp	r5, #22
 800a320:	d908      	bls.n	800a334 <_malloc_r+0x20>
 800a322:	2207      	movs	r2, #7
 800a324:	4395      	bics	r5, r2
 800a326:	d506      	bpl.n	800a336 <_malloc_r+0x22>
 800a328:	230c      	movs	r3, #12
 800a32a:	9a01      	ldr	r2, [sp, #4]
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	2000      	movs	r0, #0
 800a330:	b007      	add	sp, #28
 800a332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a334:	2510      	movs	r5, #16
 800a336:	42a9      	cmp	r1, r5
 800a338:	d8f6      	bhi.n	800a328 <_malloc_r+0x14>
 800a33a:	9801      	ldr	r0, [sp, #4]
 800a33c:	f000 f9fe 	bl	800a73c <__malloc_lock>
 800a340:	23fc      	movs	r3, #252	; 0xfc
 800a342:	4ebe      	ldr	r6, [pc, #760]	; (800a63c <_malloc_r+0x328>)
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	429d      	cmp	r5, r3
 800a348:	d219      	bcs.n	800a37e <_malloc_r+0x6a>
 800a34a:	002a      	movs	r2, r5
 800a34c:	3208      	adds	r2, #8
 800a34e:	18b2      	adds	r2, r6, r2
 800a350:	0011      	movs	r1, r2
 800a352:	6854      	ldr	r4, [r2, #4]
 800a354:	3908      	subs	r1, #8
 800a356:	08eb      	lsrs	r3, r5, #3
 800a358:	428c      	cmp	r4, r1
 800a35a:	d103      	bne.n	800a364 <_malloc_r+0x50>
 800a35c:	68d4      	ldr	r4, [r2, #12]
 800a35e:	3302      	adds	r3, #2
 800a360:	42a2      	cmp	r2, r4
 800a362:	d022      	beq.n	800a3aa <_malloc_r+0x96>
 800a364:	2203      	movs	r2, #3
 800a366:	6863      	ldr	r3, [r4, #4]
 800a368:	68a1      	ldr	r1, [r4, #8]
 800a36a:	4393      	bics	r3, r2
 800a36c:	68e2      	ldr	r2, [r4, #12]
 800a36e:	18e3      	adds	r3, r4, r3
 800a370:	60ca      	str	r2, [r1, #12]
 800a372:	6091      	str	r1, [r2, #8]
 800a374:	2201      	movs	r2, #1
 800a376:	6859      	ldr	r1, [r3, #4]
 800a378:	430a      	orrs	r2, r1
 800a37a:	605a      	str	r2, [r3, #4]
 800a37c:	e02a      	b.n	800a3d4 <_malloc_r+0xc0>
 800a37e:	233f      	movs	r3, #63	; 0x3f
 800a380:	0a6a      	lsrs	r2, r5, #9
 800a382:	d003      	beq.n	800a38c <_malloc_r+0x78>
 800a384:	2a04      	cmp	r2, #4
 800a386:	d82b      	bhi.n	800a3e0 <_malloc_r+0xcc>
 800a388:	09ab      	lsrs	r3, r5, #6
 800a38a:	3338      	adds	r3, #56	; 0x38
 800a38c:	2203      	movs	r2, #3
 800a38e:	4694      	mov	ip, r2
 800a390:	00d9      	lsls	r1, r3, #3
 800a392:	1989      	adds	r1, r1, r6
 800a394:	68cc      	ldr	r4, [r1, #12]
 800a396:	428c      	cmp	r4, r1
 800a398:	d006      	beq.n	800a3a8 <_malloc_r+0x94>
 800a39a:	4660      	mov	r0, ip
 800a39c:	6862      	ldr	r2, [r4, #4]
 800a39e:	4382      	bics	r2, r0
 800a3a0:	1b57      	subs	r7, r2, r5
 800a3a2:	2f0f      	cmp	r7, #15
 800a3a4:	dd34      	ble.n	800a410 <_malloc_r+0xfc>
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	6934      	ldr	r4, [r6, #16]
 800a3ac:	49a4      	ldr	r1, [pc, #656]	; (800a640 <_malloc_r+0x32c>)
 800a3ae:	428c      	cmp	r4, r1
 800a3b0:	d055      	beq.n	800a45e <_malloc_r+0x14a>
 800a3b2:	2003      	movs	r0, #3
 800a3b4:	6862      	ldr	r2, [r4, #4]
 800a3b6:	4382      	bics	r2, r0
 800a3b8:	1b50      	subs	r0, r2, r5
 800a3ba:	280f      	cmp	r0, #15
 800a3bc:	dd36      	ble.n	800a42c <_malloc_r+0x118>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	1967      	adds	r7, r4, r5
 800a3c2:	431d      	orrs	r5, r3
 800a3c4:	4303      	orrs	r3, r0
 800a3c6:	6065      	str	r5, [r4, #4]
 800a3c8:	6177      	str	r7, [r6, #20]
 800a3ca:	6137      	str	r7, [r6, #16]
 800a3cc:	60f9      	str	r1, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607b      	str	r3, [r7, #4]
 800a3d2:	50a0      	str	r0, [r4, r2]
 800a3d4:	9801      	ldr	r0, [sp, #4]
 800a3d6:	f000 f9b9 	bl	800a74c <__malloc_unlock>
 800a3da:	0020      	movs	r0, r4
 800a3dc:	3008      	adds	r0, #8
 800a3de:	e7a7      	b.n	800a330 <_malloc_r+0x1c>
 800a3e0:	2a14      	cmp	r2, #20
 800a3e2:	d802      	bhi.n	800a3ea <_malloc_r+0xd6>
 800a3e4:	0013      	movs	r3, r2
 800a3e6:	335b      	adds	r3, #91	; 0x5b
 800a3e8:	e7d0      	b.n	800a38c <_malloc_r+0x78>
 800a3ea:	2a54      	cmp	r2, #84	; 0x54
 800a3ec:	d802      	bhi.n	800a3f4 <_malloc_r+0xe0>
 800a3ee:	0b2b      	lsrs	r3, r5, #12
 800a3f0:	336e      	adds	r3, #110	; 0x6e
 800a3f2:	e7cb      	b.n	800a38c <_malloc_r+0x78>
 800a3f4:	23aa      	movs	r3, #170	; 0xaa
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d802      	bhi.n	800a402 <_malloc_r+0xee>
 800a3fc:	0beb      	lsrs	r3, r5, #15
 800a3fe:	3377      	adds	r3, #119	; 0x77
 800a400:	e7c4      	b.n	800a38c <_malloc_r+0x78>
 800a402:	4990      	ldr	r1, [pc, #576]	; (800a644 <_malloc_r+0x330>)
 800a404:	237e      	movs	r3, #126	; 0x7e
 800a406:	428a      	cmp	r2, r1
 800a408:	d8c0      	bhi.n	800a38c <_malloc_r+0x78>
 800a40a:	0cab      	lsrs	r3, r5, #18
 800a40c:	337c      	adds	r3, #124	; 0x7c
 800a40e:	e7bd      	b.n	800a38c <_malloc_r+0x78>
 800a410:	68e0      	ldr	r0, [r4, #12]
 800a412:	2f00      	cmp	r7, #0
 800a414:	db08      	blt.n	800a428 <_malloc_r+0x114>
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	60d8      	str	r0, [r3, #12]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	2301      	movs	r3, #1
 800a41e:	18a2      	adds	r2, r4, r2
 800a420:	6851      	ldr	r1, [r2, #4]
 800a422:	430b      	orrs	r3, r1
 800a424:	6053      	str	r3, [r2, #4]
 800a426:	e7d5      	b.n	800a3d4 <_malloc_r+0xc0>
 800a428:	0004      	movs	r4, r0
 800a42a:	e7b4      	b.n	800a396 <_malloc_r+0x82>
 800a42c:	6171      	str	r1, [r6, #20]
 800a42e:	6131      	str	r1, [r6, #16]
 800a430:	2800      	cmp	r0, #0
 800a432:	daf3      	bge.n	800a41c <_malloc_r+0x108>
 800a434:	6871      	ldr	r1, [r6, #4]
 800a436:	468c      	mov	ip, r1
 800a438:	2180      	movs	r1, #128	; 0x80
 800a43a:	0089      	lsls	r1, r1, #2
 800a43c:	428a      	cmp	r2, r1
 800a43e:	d300      	bcc.n	800a442 <_malloc_r+0x12e>
 800a440:	e08c      	b.n	800a55c <_malloc_r+0x248>
 800a442:	08d1      	lsrs	r1, r2, #3
 800a444:	0950      	lsrs	r0, r2, #5
 800a446:	2201      	movs	r2, #1
 800a448:	4082      	lsls	r2, r0
 800a44a:	4660      	mov	r0, ip
 800a44c:	4302      	orrs	r2, r0
 800a44e:	6072      	str	r2, [r6, #4]
 800a450:	00ca      	lsls	r2, r1, #3
 800a452:	1992      	adds	r2, r2, r6
 800a454:	6891      	ldr	r1, [r2, #8]
 800a456:	60e2      	str	r2, [r4, #12]
 800a458:	60a1      	str	r1, [r4, #8]
 800a45a:	6094      	str	r4, [r2, #8]
 800a45c:	60cc      	str	r4, [r1, #12]
 800a45e:	2201      	movs	r2, #1
 800a460:	4876      	ldr	r0, [pc, #472]	; (800a63c <_malloc_r+0x328>)
 800a462:	1099      	asrs	r1, r3, #2
 800a464:	408a      	lsls	r2, r1
 800a466:	6841      	ldr	r1, [r0, #4]
 800a468:	4291      	cmp	r1, r2
 800a46a:	d328      	bcc.n	800a4be <_malloc_r+0x1aa>
 800a46c:	420a      	tst	r2, r1
 800a46e:	d105      	bne.n	800a47c <_malloc_r+0x168>
 800a470:	2403      	movs	r4, #3
 800a472:	43a3      	bics	r3, r4
 800a474:	0052      	lsls	r2, r2, #1
 800a476:	3304      	adds	r3, #4
 800a478:	420a      	tst	r2, r1
 800a47a:	d0fb      	beq.n	800a474 <_malloc_r+0x160>
 800a47c:	496f      	ldr	r1, [pc, #444]	; (800a63c <_malloc_r+0x328>)
 800a47e:	9104      	str	r1, [sp, #16]
 800a480:	00d9      	lsls	r1, r3, #3
 800a482:	1841      	adds	r1, r0, r1
 800a484:	468c      	mov	ip, r1
 800a486:	000f      	movs	r7, r1
 800a488:	9302      	str	r3, [sp, #8]
 800a48a:	68fc      	ldr	r4, [r7, #12]
 800a48c:	42bc      	cmp	r4, r7
 800a48e:	d000      	beq.n	800a492 <_malloc_r+0x17e>
 800a490:	e09b      	b.n	800a5ca <_malloc_r+0x2b6>
 800a492:	2403      	movs	r4, #3
 800a494:	9902      	ldr	r1, [sp, #8]
 800a496:	3708      	adds	r7, #8
 800a498:	3101      	adds	r1, #1
 800a49a:	9102      	str	r1, [sp, #8]
 800a49c:	4221      	tst	r1, r4
 800a49e:	d1f4      	bne.n	800a48a <_malloc_r+0x176>
 800a4a0:	2103      	movs	r1, #3
 800a4a2:	420b      	tst	r3, r1
 800a4a4:	d000      	beq.n	800a4a8 <_malloc_r+0x194>
 800a4a6:	e0b7      	b.n	800a618 <_malloc_r+0x304>
 800a4a8:	6843      	ldr	r3, [r0, #4]
 800a4aa:	4393      	bics	r3, r2
 800a4ac:	6043      	str	r3, [r0, #4]
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	0052      	lsls	r2, r2, #1
 800a4b2:	6859      	ldr	r1, [r3, #4]
 800a4b4:	4291      	cmp	r1, r2
 800a4b6:	d302      	bcc.n	800a4be <_malloc_r+0x1aa>
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d000      	beq.n	800a4be <_malloc_r+0x1aa>
 800a4bc:	e0bb      	b.n	800a636 <_malloc_r+0x322>
 800a4be:	2203      	movs	r2, #3
 800a4c0:	6883      	ldr	r3, [r0, #8]
 800a4c2:	9302      	str	r3, [sp, #8]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	4393      	bics	r3, r2
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	42ab      	cmp	r3, r5
 800a4cc:	d303      	bcc.n	800a4d6 <_malloc_r+0x1c2>
 800a4ce:	1b59      	subs	r1, r3, r5
 800a4d0:	290f      	cmp	r1, #15
 800a4d2:	dd00      	ble.n	800a4d6 <_malloc_r+0x1c2>
 800a4d4:	e123      	b.n	800a71e <_malloc_r+0x40a>
 800a4d6:	9b02      	ldr	r3, [sp, #8]
 800a4d8:	9a03      	ldr	r2, [sp, #12]
 800a4da:	2008      	movs	r0, #8
 800a4dc:	189e      	adds	r6, r3, r2
 800a4de:	4b5a      	ldr	r3, [pc, #360]	; (800a648 <_malloc_r+0x334>)
 800a4e0:	681f      	ldr	r7, [r3, #0]
 800a4e2:	f001 fa71 	bl	800b9c8 <sysconf>
 800a4e6:	4b59      	ldr	r3, [pc, #356]	; (800a64c <_malloc_r+0x338>)
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	197f      	adds	r7, r7, r5
 800a4ee:	9004      	str	r0, [sp, #16]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	d003      	beq.n	800a4fc <_malloc_r+0x1e8>
 800a4f4:	1e7b      	subs	r3, r7, #1
 800a4f6:	181b      	adds	r3, r3, r0
 800a4f8:	4247      	negs	r7, r0
 800a4fa:	401f      	ands	r7, r3
 800a4fc:	0039      	movs	r1, r7
 800a4fe:	9801      	ldr	r0, [sp, #4]
 800a500:	f001 fa0e 	bl	800b920 <_sbrk_r>
 800a504:	0004      	movs	r4, r0
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d100      	bne.n	800a50c <_malloc_r+0x1f8>
 800a50a:	e0de      	b.n	800a6ca <_malloc_r+0x3b6>
 800a50c:	4286      	cmp	r6, r0
 800a50e:	d904      	bls.n	800a51a <_malloc_r+0x206>
 800a510:	4b4a      	ldr	r3, [pc, #296]	; (800a63c <_malloc_r+0x328>)
 800a512:	9a02      	ldr	r2, [sp, #8]
 800a514:	429a      	cmp	r2, r3
 800a516:	d000      	beq.n	800a51a <_malloc_r+0x206>
 800a518:	e0d7      	b.n	800a6ca <_malloc_r+0x3b6>
 800a51a:	4a4d      	ldr	r2, [pc, #308]	; (800a650 <_malloc_r+0x33c>)
 800a51c:	6813      	ldr	r3, [r2, #0]
 800a51e:	18fb      	adds	r3, r7, r3
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	3a01      	subs	r2, #1
 800a526:	42a6      	cmp	r6, r4
 800a528:	d000      	beq.n	800a52c <_malloc_r+0x218>
 800a52a:	e097      	b.n	800a65c <_malloc_r+0x348>
 800a52c:	4216      	tst	r6, r2
 800a52e:	d000      	beq.n	800a532 <_malloc_r+0x21e>
 800a530:	e094      	b.n	800a65c <_malloc_r+0x348>
 800a532:	4b42      	ldr	r3, [pc, #264]	; (800a63c <_malloc_r+0x328>)
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	19df      	adds	r7, r3, r7
 800a53a:	2301      	movs	r3, #1
 800a53c:	433b      	orrs	r3, r7
 800a53e:	6053      	str	r3, [r2, #4]
 800a540:	4b43      	ldr	r3, [pc, #268]	; (800a650 <_malloc_r+0x33c>)
 800a542:	4a44      	ldr	r2, [pc, #272]	; (800a654 <_malloc_r+0x340>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6811      	ldr	r1, [r2, #0]
 800a548:	428b      	cmp	r3, r1
 800a54a:	d900      	bls.n	800a54e <_malloc_r+0x23a>
 800a54c:	6013      	str	r3, [r2, #0]
 800a54e:	4a42      	ldr	r2, [pc, #264]	; (800a658 <_malloc_r+0x344>)
 800a550:	6811      	ldr	r1, [r2, #0]
 800a552:	428b      	cmp	r3, r1
 800a554:	d800      	bhi.n	800a558 <_malloc_r+0x244>
 800a556:	e0b8      	b.n	800a6ca <_malloc_r+0x3b6>
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	e0b6      	b.n	800a6ca <_malloc_r+0x3b6>
 800a55c:	0a50      	lsrs	r0, r2, #9
 800a55e:	2804      	cmp	r0, #4
 800a560:	d811      	bhi.n	800a586 <_malloc_r+0x272>
 800a562:	0991      	lsrs	r1, r2, #6
 800a564:	3138      	adds	r1, #56	; 0x38
 800a566:	00cf      	lsls	r7, r1, #3
 800a568:	19bf      	adds	r7, r7, r6
 800a56a:	68b8      	ldr	r0, [r7, #8]
 800a56c:	4287      	cmp	r7, r0
 800a56e:	d125      	bne.n	800a5bc <_malloc_r+0x2a8>
 800a570:	2201      	movs	r2, #1
 800a572:	1089      	asrs	r1, r1, #2
 800a574:	408a      	lsls	r2, r1
 800a576:	4661      	mov	r1, ip
 800a578:	430a      	orrs	r2, r1
 800a57a:	6072      	str	r2, [r6, #4]
 800a57c:	60e7      	str	r7, [r4, #12]
 800a57e:	60a0      	str	r0, [r4, #8]
 800a580:	60bc      	str	r4, [r7, #8]
 800a582:	60c4      	str	r4, [r0, #12]
 800a584:	e76b      	b.n	800a45e <_malloc_r+0x14a>
 800a586:	2814      	cmp	r0, #20
 800a588:	d802      	bhi.n	800a590 <_malloc_r+0x27c>
 800a58a:	0001      	movs	r1, r0
 800a58c:	315b      	adds	r1, #91	; 0x5b
 800a58e:	e7ea      	b.n	800a566 <_malloc_r+0x252>
 800a590:	2854      	cmp	r0, #84	; 0x54
 800a592:	d802      	bhi.n	800a59a <_malloc_r+0x286>
 800a594:	0b11      	lsrs	r1, r2, #12
 800a596:	316e      	adds	r1, #110	; 0x6e
 800a598:	e7e5      	b.n	800a566 <_malloc_r+0x252>
 800a59a:	21aa      	movs	r1, #170	; 0xaa
 800a59c:	0049      	lsls	r1, r1, #1
 800a59e:	4288      	cmp	r0, r1
 800a5a0:	d802      	bhi.n	800a5a8 <_malloc_r+0x294>
 800a5a2:	0bd1      	lsrs	r1, r2, #15
 800a5a4:	3177      	adds	r1, #119	; 0x77
 800a5a6:	e7de      	b.n	800a566 <_malloc_r+0x252>
 800a5a8:	4f26      	ldr	r7, [pc, #152]	; (800a644 <_malloc_r+0x330>)
 800a5aa:	217e      	movs	r1, #126	; 0x7e
 800a5ac:	42b8      	cmp	r0, r7
 800a5ae:	d8da      	bhi.n	800a566 <_malloc_r+0x252>
 800a5b0:	0c91      	lsrs	r1, r2, #18
 800a5b2:	317c      	adds	r1, #124	; 0x7c
 800a5b4:	e7d7      	b.n	800a566 <_malloc_r+0x252>
 800a5b6:	6880      	ldr	r0, [r0, #8]
 800a5b8:	4287      	cmp	r7, r0
 800a5ba:	d004      	beq.n	800a5c6 <_malloc_r+0x2b2>
 800a5bc:	2603      	movs	r6, #3
 800a5be:	6841      	ldr	r1, [r0, #4]
 800a5c0:	43b1      	bics	r1, r6
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	d8f7      	bhi.n	800a5b6 <_malloc_r+0x2a2>
 800a5c6:	68c7      	ldr	r7, [r0, #12]
 800a5c8:	e7d8      	b.n	800a57c <_malloc_r+0x268>
 800a5ca:	2603      	movs	r6, #3
 800a5cc:	6861      	ldr	r1, [r4, #4]
 800a5ce:	43b1      	bics	r1, r6
 800a5d0:	9103      	str	r1, [sp, #12]
 800a5d2:	68e6      	ldr	r6, [r4, #12]
 800a5d4:	1b49      	subs	r1, r1, r5
 800a5d6:	290f      	cmp	r1, #15
 800a5d8:	dd10      	ble.n	800a5fc <_malloc_r+0x2e8>
 800a5da:	2201      	movs	r2, #1
 800a5dc:	1963      	adds	r3, r4, r5
 800a5de:	4315      	orrs	r5, r2
 800a5e0:	6065      	str	r5, [r4, #4]
 800a5e2:	68a5      	ldr	r5, [r4, #8]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	60ee      	str	r6, [r5, #12]
 800a5e8:	60b5      	str	r5, [r6, #8]
 800a5ea:	6143      	str	r3, [r0, #20]
 800a5ec:	6103      	str	r3, [r0, #16]
 800a5ee:	4814      	ldr	r0, [pc, #80]	; (800a640 <_malloc_r+0x32c>)
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	60d8      	str	r0, [r3, #12]
 800a5f4:	6098      	str	r0, [r3, #8]
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	50e1      	str	r1, [r4, r3]
 800a5fa:	e6eb      	b.n	800a3d4 <_malloc_r+0xc0>
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	db09      	blt.n	800a614 <_malloc_r+0x300>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	18e1      	adds	r1, r4, r3
 800a604:	2301      	movs	r3, #1
 800a606:	684a      	ldr	r2, [r1, #4]
 800a608:	4313      	orrs	r3, r2
 800a60a:	604b      	str	r3, [r1, #4]
 800a60c:	68a3      	ldr	r3, [r4, #8]
 800a60e:	60de      	str	r6, [r3, #12]
 800a610:	60b3      	str	r3, [r6, #8]
 800a612:	e6df      	b.n	800a3d4 <_malloc_r+0xc0>
 800a614:	0034      	movs	r4, r6
 800a616:	e739      	b.n	800a48c <_malloc_r+0x178>
 800a618:	2108      	movs	r1, #8
 800a61a:	4249      	negs	r1, r1
 800a61c:	448c      	add	ip, r1
 800a61e:	4661      	mov	r1, ip
 800a620:	6889      	ldr	r1, [r1, #8]
 800a622:	3b01      	subs	r3, #1
 800a624:	4561      	cmp	r1, ip
 800a626:	d100      	bne.n	800a62a <_malloc_r+0x316>
 800a628:	e73a      	b.n	800a4a0 <_malloc_r+0x18c>
 800a62a:	e740      	b.n	800a4ae <_malloc_r+0x19a>
 800a62c:	3304      	adds	r3, #4
 800a62e:	0052      	lsls	r2, r2, #1
 800a630:	420a      	tst	r2, r1
 800a632:	d0fb      	beq.n	800a62c <_malloc_r+0x318>
 800a634:	e724      	b.n	800a480 <_malloc_r+0x16c>
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	e7fa      	b.n	800a630 <_malloc_r+0x31c>
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	20000020 	.word	0x20000020
 800a640:	20000028 	.word	0x20000028
 800a644:	00000554 	.word	0x00000554
 800a648:	20000c2c 	.word	0x20000c2c
 800a64c:	20000428 	.word	0x20000428
 800a650:	20000bfc 	.word	0x20000bfc
 800a654:	20000c24 	.word	0x20000c24
 800a658:	20000c28 	.word	0x20000c28
 800a65c:	4934      	ldr	r1, [pc, #208]	; (800a730 <_malloc_r+0x41c>)
 800a65e:	6808      	ldr	r0, [r1, #0]
 800a660:	3001      	adds	r0, #1
 800a662:	d140      	bne.n	800a6e6 <_malloc_r+0x3d2>
 800a664:	600c      	str	r4, [r1, #0]
 800a666:	2107      	movs	r1, #7
 800a668:	0026      	movs	r6, r4
 800a66a:	2300      	movs	r3, #0
 800a66c:	400e      	ands	r6, r1
 800a66e:	420c      	tst	r4, r1
 800a670:	d002      	beq.n	800a678 <_malloc_r+0x364>
 800a672:	3308      	adds	r3, #8
 800a674:	1b9b      	subs	r3, r3, r6
 800a676:	18e4      	adds	r4, r4, r3
 800a678:	19e1      	adds	r1, r4, r7
 800a67a:	9105      	str	r1, [sp, #20]
 800a67c:	9f05      	ldr	r7, [sp, #20]
 800a67e:	9904      	ldr	r1, [sp, #16]
 800a680:	4017      	ands	r7, r2
 800a682:	18cb      	adds	r3, r1, r3
 800a684:	1bdf      	subs	r7, r3, r7
 800a686:	4017      	ands	r7, r2
 800a688:	0039      	movs	r1, r7
 800a68a:	9801      	ldr	r0, [sp, #4]
 800a68c:	f001 f948 	bl	800b920 <_sbrk_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d107      	bne.n	800a6a4 <_malloc_r+0x390>
 800a694:	1e37      	subs	r7, r6, #0
 800a696:	9805      	ldr	r0, [sp, #20]
 800a698:	d004      	beq.n	800a6a4 <_malloc_r+0x390>
 800a69a:	0030      	movs	r0, r6
 800a69c:	2700      	movs	r7, #0
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	3808      	subs	r0, #8
 800a6a2:	1818      	adds	r0, r3, r0
 800a6a4:	4a23      	ldr	r2, [pc, #140]	; (800a734 <_malloc_r+0x420>)
 800a6a6:	1b00      	subs	r0, r0, r4
 800a6a8:	6813      	ldr	r3, [r2, #0]
 800a6aa:	19c0      	adds	r0, r0, r7
 800a6ac:	19db      	adds	r3, r3, r7
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4b21      	ldr	r3, [pc, #132]	; (800a738 <_malloc_r+0x424>)
 800a6b4:	9902      	ldr	r1, [sp, #8]
 800a6b6:	4310      	orrs	r0, r2
 800a6b8:	609c      	str	r4, [r3, #8]
 800a6ba:	6060      	str	r0, [r4, #4]
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	d100      	bne.n	800a6c2 <_malloc_r+0x3ae>
 800a6c0:	e73e      	b.n	800a540 <_malloc_r+0x22c>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	2b0f      	cmp	r3, #15
 800a6c6:	d813      	bhi.n	800a6f0 <_malloc_r+0x3dc>
 800a6c8:	6062      	str	r2, [r4, #4]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	4b1a      	ldr	r3, [pc, #104]	; (800a738 <_malloc_r+0x424>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	4393      	bics	r3, r2
 800a6d4:	1b59      	subs	r1, r3, r5
 800a6d6:	42ab      	cmp	r3, r5
 800a6d8:	d301      	bcc.n	800a6de <_malloc_r+0x3ca>
 800a6da:	290f      	cmp	r1, #15
 800a6dc:	dc1f      	bgt.n	800a71e <_malloc_r+0x40a>
 800a6de:	9801      	ldr	r0, [sp, #4]
 800a6e0:	f000 f834 	bl	800a74c <__malloc_unlock>
 800a6e4:	e623      	b.n	800a32e <_malloc_r+0x1a>
 800a6e6:	4913      	ldr	r1, [pc, #76]	; (800a734 <_malloc_r+0x420>)
 800a6e8:	1ba6      	subs	r6, r4, r6
 800a6ea:	18f6      	adds	r6, r6, r3
 800a6ec:	600e      	str	r6, [r1, #0]
 800a6ee:	e7ba      	b.n	800a666 <_malloc_r+0x352>
 800a6f0:	2107      	movs	r1, #7
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	3b0c      	subs	r3, #12
 800a6f6:	438b      	bics	r3, r1
 800a6f8:	9902      	ldr	r1, [sp, #8]
 800a6fa:	6849      	ldr	r1, [r1, #4]
 800a6fc:	400a      	ands	r2, r1
 800a6fe:	9902      	ldr	r1, [sp, #8]
 800a700:	431a      	orrs	r2, r3
 800a702:	604a      	str	r2, [r1, #4]
 800a704:	18ca      	adds	r2, r1, r3
 800a706:	2105      	movs	r1, #5
 800a708:	6051      	str	r1, [r2, #4]
 800a70a:	6091      	str	r1, [r2, #8]
 800a70c:	2b0f      	cmp	r3, #15
 800a70e:	d800      	bhi.n	800a712 <_malloc_r+0x3fe>
 800a710:	e716      	b.n	800a540 <_malloc_r+0x22c>
 800a712:	9902      	ldr	r1, [sp, #8]
 800a714:	9801      	ldr	r0, [sp, #4]
 800a716:	3108      	adds	r1, #8
 800a718:	f001 f9dc 	bl	800bad4 <_free_r>
 800a71c:	e710      	b.n	800a540 <_malloc_r+0x22c>
 800a71e:	2201      	movs	r2, #1
 800a720:	0013      	movs	r3, r2
 800a722:	4805      	ldr	r0, [pc, #20]	; (800a738 <_malloc_r+0x424>)
 800a724:	432b      	orrs	r3, r5
 800a726:	6884      	ldr	r4, [r0, #8]
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	1963      	adds	r3, r4, r5
 800a72c:	6083      	str	r3, [r0, #8]
 800a72e:	e623      	b.n	800a378 <_malloc_r+0x64>
 800a730:	20000428 	.word	0x20000428
 800a734:	20000bfc 	.word	0x20000bfc
 800a738:	20000020 	.word	0x20000020

0800a73c <__malloc_lock>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	4802      	ldr	r0, [pc, #8]	; (800a748 <__malloc_lock+0xc>)
 800a740:	f001 f940 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800a744:	bd10      	pop	{r4, pc}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	20000d71 	.word	0x20000d71

0800a74c <__malloc_unlock>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4802      	ldr	r0, [pc, #8]	; (800a758 <__malloc_unlock+0xc>)
 800a750:	f001 f939 	bl	800b9c6 <__retarget_lock_release_recursive>
 800a754:	bd10      	pop	{r4, pc}
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	20000d71 	.word	0x20000d71

0800a75c <sulp>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	0016      	movs	r6, r2
 800a760:	000d      	movs	r5, r1
 800a762:	f002 f90d 	bl	800c980 <__ulp>
 800a766:	2e00      	cmp	r6, #0
 800a768:	d00d      	beq.n	800a786 <sulp+0x2a>
 800a76a:	236b      	movs	r3, #107	; 0x6b
 800a76c:	006a      	lsls	r2, r5, #1
 800a76e:	0d52      	lsrs	r2, r2, #21
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd07      	ble.n	800a786 <sulp+0x2a>
 800a776:	2400      	movs	r4, #0
 800a778:	4a03      	ldr	r2, [pc, #12]	; (800a788 <sulp+0x2c>)
 800a77a:	051b      	lsls	r3, r3, #20
 800a77c:	189d      	adds	r5, r3, r2
 800a77e:	002b      	movs	r3, r5
 800a780:	0022      	movs	r2, r4
 800a782:	f7f6 ff73 	bl	800166c <__aeabi_dmul>
 800a786:	bd70      	pop	{r4, r5, r6, pc}
 800a788:	3ff00000 	.word	0x3ff00000

0800a78c <_strtod_l>:
 800a78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78e:	b0a1      	sub	sp, #132	; 0x84
 800a790:	9219      	str	r2, [sp, #100]	; 0x64
 800a792:	2200      	movs	r2, #0
 800a794:	2600      	movs	r6, #0
 800a796:	2700      	movs	r7, #0
 800a798:	9004      	str	r0, [sp, #16]
 800a79a:	9107      	str	r1, [sp, #28]
 800a79c:	921c      	str	r2, [sp, #112]	; 0x70
 800a79e:	911b      	str	r1, [sp, #108]	; 0x6c
 800a7a0:	780a      	ldrb	r2, [r1, #0]
 800a7a2:	2a2b      	cmp	r2, #43	; 0x2b
 800a7a4:	d055      	beq.n	800a852 <_strtod_l+0xc6>
 800a7a6:	d841      	bhi.n	800a82c <_strtod_l+0xa0>
 800a7a8:	2a0d      	cmp	r2, #13
 800a7aa:	d83b      	bhi.n	800a824 <_strtod_l+0x98>
 800a7ac:	2a08      	cmp	r2, #8
 800a7ae:	d83b      	bhi.n	800a828 <_strtod_l+0x9c>
 800a7b0:	2a00      	cmp	r2, #0
 800a7b2:	d044      	beq.n	800a83e <_strtod_l+0xb2>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a7bc:	9109      	str	r1, [sp, #36]	; 0x24
 800a7be:	782a      	ldrb	r2, [r5, #0]
 800a7c0:	2a30      	cmp	r2, #48	; 0x30
 800a7c2:	d000      	beq.n	800a7c6 <_strtod_l+0x3a>
 800a7c4:	e085      	b.n	800a8d2 <_strtod_l+0x146>
 800a7c6:	786a      	ldrb	r2, [r5, #1]
 800a7c8:	3120      	adds	r1, #32
 800a7ca:	438a      	bics	r2, r1
 800a7cc:	2a58      	cmp	r2, #88	; 0x58
 800a7ce:	d000      	beq.n	800a7d2 <_strtod_l+0x46>
 800a7d0:	e075      	b.n	800a8be <_strtod_l+0x132>
 800a7d2:	9302      	str	r3, [sp, #8]
 800a7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7d6:	4a97      	ldr	r2, [pc, #604]	; (800aa34 <_strtod_l+0x2a8>)
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	ab1c      	add	r3, sp, #112	; 0x70
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	9804      	ldr	r0, [sp, #16]
 800a7e0:	ab1d      	add	r3, sp, #116	; 0x74
 800a7e2:	a91b      	add	r1, sp, #108	; 0x6c
 800a7e4:	f001 fa92 	bl	800bd0c <__gethex>
 800a7e8:	230f      	movs	r3, #15
 800a7ea:	0002      	movs	r2, r0
 800a7ec:	401a      	ands	r2, r3
 800a7ee:	0004      	movs	r4, r0
 800a7f0:	9205      	str	r2, [sp, #20]
 800a7f2:	4218      	tst	r0, r3
 800a7f4:	d005      	beq.n	800a802 <_strtod_l+0x76>
 800a7f6:	2a06      	cmp	r2, #6
 800a7f8:	d12d      	bne.n	800a856 <_strtod_l+0xca>
 800a7fa:	1c6b      	adds	r3, r5, #1
 800a7fc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7fe:	2300      	movs	r3, #0
 800a800:	930f      	str	r3, [sp, #60]	; 0x3c
 800a802:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <_strtod_l+0x82>
 800a808:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a80a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d01b      	beq.n	800a84c <_strtod_l+0xc0>
 800a814:	2380      	movs	r3, #128	; 0x80
 800a816:	0032      	movs	r2, r6
 800a818:	061b      	lsls	r3, r3, #24
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	0010      	movs	r0, r2
 800a81e:	0019      	movs	r1, r3
 800a820:	b021      	add	sp, #132	; 0x84
 800a822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a824:	2a20      	cmp	r2, #32
 800a826:	d1c5      	bne.n	800a7b4 <_strtod_l+0x28>
 800a828:	3101      	adds	r1, #1
 800a82a:	e7b8      	b.n	800a79e <_strtod_l+0x12>
 800a82c:	2a2d      	cmp	r2, #45	; 0x2d
 800a82e:	d1c1      	bne.n	800a7b4 <_strtod_l+0x28>
 800a830:	3a2c      	subs	r2, #44	; 0x2c
 800a832:	920f      	str	r2, [sp, #60]	; 0x3c
 800a834:	1c4a      	adds	r2, r1, #1
 800a836:	921b      	str	r2, [sp, #108]	; 0x6c
 800a838:	784a      	ldrb	r2, [r1, #1]
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	d1bc      	bne.n	800a7b8 <_strtod_l+0x2c>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	931b      	str	r3, [sp, #108]	; 0x6c
 800a842:	2300      	movs	r3, #0
 800a844:	930f      	str	r3, [sp, #60]	; 0x3c
 800a846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1dd      	bne.n	800a808 <_strtod_l+0x7c>
 800a84c:	0032      	movs	r2, r6
 800a84e:	003b      	movs	r3, r7
 800a850:	e7e4      	b.n	800a81c <_strtod_l+0x90>
 800a852:	2200      	movs	r2, #0
 800a854:	e7ed      	b.n	800a832 <_strtod_l+0xa6>
 800a856:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d007      	beq.n	800a86c <_strtod_l+0xe0>
 800a85c:	2135      	movs	r1, #53	; 0x35
 800a85e:	a81e      	add	r0, sp, #120	; 0x78
 800a860:	f002 f97f 	bl	800cb62 <__copybits>
 800a864:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a866:	9804      	ldr	r0, [sp, #16]
 800a868:	f001 fd7c 	bl	800c364 <_Bfree>
 800a86c:	9805      	ldr	r0, [sp, #20]
 800a86e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a870:	3801      	subs	r0, #1
 800a872:	2804      	cmp	r0, #4
 800a874:	d806      	bhi.n	800a884 <_strtod_l+0xf8>
 800a876:	f7f5 fc4d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a87a:	0312      	.short	0x0312
 800a87c:	1e1c      	.short	0x1e1c
 800a87e:	12          	.byte	0x12
 800a87f:	00          	.byte	0x00
 800a880:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a882:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a884:	05e4      	lsls	r4, r4, #23
 800a886:	d502      	bpl.n	800a88e <_strtod_l+0x102>
 800a888:	2380      	movs	r3, #128	; 0x80
 800a88a:	061b      	lsls	r3, r3, #24
 800a88c:	431f      	orrs	r7, r3
 800a88e:	4b6a      	ldr	r3, [pc, #424]	; (800aa38 <_strtod_l+0x2ac>)
 800a890:	423b      	tst	r3, r7
 800a892:	d1b6      	bne.n	800a802 <_strtod_l+0x76>
 800a894:	f001 f86a 	bl	800b96c <__errno>
 800a898:	2322      	movs	r3, #34	; 0x22
 800a89a:	6003      	str	r3, [r0, #0]
 800a89c:	e7b1      	b.n	800a802 <_strtod_l+0x76>
 800a89e:	4967      	ldr	r1, [pc, #412]	; (800aa3c <_strtod_l+0x2b0>)
 800a8a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a8a2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a8a4:	400a      	ands	r2, r1
 800a8a6:	4966      	ldr	r1, [pc, #408]	; (800aa40 <_strtod_l+0x2b4>)
 800a8a8:	185b      	adds	r3, r3, r1
 800a8aa:	051b      	lsls	r3, r3, #20
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	0017      	movs	r7, r2
 800a8b0:	e7e8      	b.n	800a884 <_strtod_l+0xf8>
 800a8b2:	4f61      	ldr	r7, [pc, #388]	; (800aa38 <_strtod_l+0x2ac>)
 800a8b4:	e7e6      	b.n	800a884 <_strtod_l+0xf8>
 800a8b6:	2601      	movs	r6, #1
 800a8b8:	4f62      	ldr	r7, [pc, #392]	; (800aa44 <_strtod_l+0x2b8>)
 800a8ba:	4276      	negs	r6, r6
 800a8bc:	e7e2      	b.n	800a884 <_strtod_l+0xf8>
 800a8be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	2b30      	cmp	r3, #48	; 0x30
 800a8c8:	d0f9      	beq.n	800a8be <_strtod_l+0x132>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d099      	beq.n	800a802 <_strtod_l+0x76>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8d8:	950d      	str	r5, [sp, #52]	; 0x34
 800a8da:	9310      	str	r3, [sp, #64]	; 0x40
 800a8dc:	9508      	str	r5, [sp, #32]
 800a8de:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a8e0:	7804      	ldrb	r4, [r0, #0]
 800a8e2:	0023      	movs	r3, r4
 800a8e4:	3b30      	subs	r3, #48	; 0x30
 800a8e6:	b2d9      	uxtb	r1, r3
 800a8e8:	2909      	cmp	r1, #9
 800a8ea:	d927      	bls.n	800a93c <_strtod_l+0x1b0>
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	4956      	ldr	r1, [pc, #344]	; (800aa48 <_strtod_l+0x2bc>)
 800a8f0:	f000 ff98 	bl	800b824 <strncmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d031      	beq.n	800a95c <_strtod_l+0x1d0>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	0023      	movs	r3, r4
 800a8fc:	4684      	mov	ip, r0
 800a8fe:	9a08      	ldr	r2, [sp, #32]
 800a900:	900c      	str	r0, [sp, #48]	; 0x30
 800a902:	9205      	str	r2, [sp, #20]
 800a904:	2220      	movs	r2, #32
 800a906:	0019      	movs	r1, r3
 800a908:	4391      	bics	r1, r2
 800a90a:	000a      	movs	r2, r1
 800a90c:	2100      	movs	r1, #0
 800a90e:	9106      	str	r1, [sp, #24]
 800a910:	2a45      	cmp	r2, #69	; 0x45
 800a912:	d000      	beq.n	800a916 <_strtod_l+0x18a>
 800a914:	e0c2      	b.n	800aa9c <_strtod_l+0x310>
 800a916:	9b05      	ldr	r3, [sp, #20]
 800a918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a91a:	4303      	orrs	r3, r0
 800a91c:	4313      	orrs	r3, r2
 800a91e:	428b      	cmp	r3, r1
 800a920:	d08d      	beq.n	800a83e <_strtod_l+0xb2>
 800a922:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	3301      	adds	r3, #1
 800a928:	931b      	str	r3, [sp, #108]	; 0x6c
 800a92a:	9b07      	ldr	r3, [sp, #28]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b2b      	cmp	r3, #43	; 0x2b
 800a930:	d071      	beq.n	800aa16 <_strtod_l+0x28a>
 800a932:	000c      	movs	r4, r1
 800a934:	2b2d      	cmp	r3, #45	; 0x2d
 800a936:	d174      	bne.n	800aa22 <_strtod_l+0x296>
 800a938:	2401      	movs	r4, #1
 800a93a:	e06d      	b.n	800aa18 <_strtod_l+0x28c>
 800a93c:	9908      	ldr	r1, [sp, #32]
 800a93e:	2908      	cmp	r1, #8
 800a940:	dc09      	bgt.n	800a956 <_strtod_l+0x1ca>
 800a942:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a944:	4351      	muls	r1, r2
 800a946:	185b      	adds	r3, r3, r1
 800a948:	930d      	str	r3, [sp, #52]	; 0x34
 800a94a:	9b08      	ldr	r3, [sp, #32]
 800a94c:	3001      	adds	r0, #1
 800a94e:	3301      	adds	r3, #1
 800a950:	9308      	str	r3, [sp, #32]
 800a952:	901b      	str	r0, [sp, #108]	; 0x6c
 800a954:	e7c3      	b.n	800a8de <_strtod_l+0x152>
 800a956:	4355      	muls	r5, r2
 800a958:	195d      	adds	r5, r3, r5
 800a95a:	e7f6      	b.n	800a94a <_strtod_l+0x1be>
 800a95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	921b      	str	r2, [sp, #108]	; 0x6c
 800a962:	9a08      	ldr	r2, [sp, #32]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2a00      	cmp	r2, #0
 800a968:	d03a      	beq.n	800a9e0 <_strtod_l+0x254>
 800a96a:	900c      	str	r0, [sp, #48]	; 0x30
 800a96c:	9205      	str	r2, [sp, #20]
 800a96e:	001a      	movs	r2, r3
 800a970:	3a30      	subs	r2, #48	; 0x30
 800a972:	2a09      	cmp	r2, #9
 800a974:	d912      	bls.n	800a99c <_strtod_l+0x210>
 800a976:	2201      	movs	r2, #1
 800a978:	4694      	mov	ip, r2
 800a97a:	e7c3      	b.n	800a904 <_strtod_l+0x178>
 800a97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a97e:	3001      	adds	r0, #1
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	921b      	str	r2, [sp, #108]	; 0x6c
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b30      	cmp	r3, #48	; 0x30
 800a988:	d0f8      	beq.n	800a97c <_strtod_l+0x1f0>
 800a98a:	001a      	movs	r2, r3
 800a98c:	3a31      	subs	r2, #49	; 0x31
 800a98e:	2a08      	cmp	r2, #8
 800a990:	d83c      	bhi.n	800aa0c <_strtod_l+0x280>
 800a992:	900c      	str	r0, [sp, #48]	; 0x30
 800a994:	2000      	movs	r0, #0
 800a996:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a998:	9005      	str	r0, [sp, #20]
 800a99a:	9210      	str	r2, [sp, #64]	; 0x40
 800a99c:	001a      	movs	r2, r3
 800a99e:	1c41      	adds	r1, r0, #1
 800a9a0:	3a30      	subs	r2, #48	; 0x30
 800a9a2:	2b30      	cmp	r3, #48	; 0x30
 800a9a4:	d016      	beq.n	800a9d4 <_strtod_l+0x248>
 800a9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a8:	185b      	adds	r3, r3, r1
 800a9aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	210a      	movs	r1, #10
 800a9b0:	469c      	mov	ip, r3
 800a9b2:	4484      	add	ip, r0
 800a9b4:	4563      	cmp	r3, ip
 800a9b6:	d115      	bne.n	800a9e4 <_strtod_l+0x258>
 800a9b8:	9905      	ldr	r1, [sp, #20]
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	3101      	adds	r1, #1
 800a9be:	1809      	adds	r1, r1, r0
 800a9c0:	181b      	adds	r3, r3, r0
 800a9c2:	9105      	str	r1, [sp, #20]
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	dc19      	bgt.n	800a9fc <_strtod_l+0x270>
 800a9c8:	230a      	movs	r3, #10
 800a9ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9cc:	434b      	muls	r3, r1
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	18d3      	adds	r3, r2, r3
 800a9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a9d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9d6:	0008      	movs	r0, r1
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9dc:	785b      	ldrb	r3, [r3, #1]
 800a9de:	e7c6      	b.n	800a96e <_strtod_l+0x1e2>
 800a9e0:	9808      	ldr	r0, [sp, #32]
 800a9e2:	e7d0      	b.n	800a986 <_strtod_l+0x1fa>
 800a9e4:	1c5c      	adds	r4, r3, #1
 800a9e6:	2b08      	cmp	r3, #8
 800a9e8:	dc04      	bgt.n	800a9f4 <_strtod_l+0x268>
 800a9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9ec:	434b      	muls	r3, r1
 800a9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a9f0:	0023      	movs	r3, r4
 800a9f2:	e7df      	b.n	800a9b4 <_strtod_l+0x228>
 800a9f4:	2c10      	cmp	r4, #16
 800a9f6:	dcfb      	bgt.n	800a9f0 <_strtod_l+0x264>
 800a9f8:	434d      	muls	r5, r1
 800a9fa:	e7f9      	b.n	800a9f0 <_strtod_l+0x264>
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	dce7      	bgt.n	800a9d4 <_strtod_l+0x248>
 800aa04:	230a      	movs	r3, #10
 800aa06:	435d      	muls	r5, r3
 800aa08:	1955      	adds	r5, r2, r5
 800aa0a:	e7e3      	b.n	800a9d4 <_strtod_l+0x248>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	920c      	str	r2, [sp, #48]	; 0x30
 800aa10:	9205      	str	r2, [sp, #20]
 800aa12:	3201      	adds	r2, #1
 800aa14:	e7b0      	b.n	800a978 <_strtod_l+0x1ec>
 800aa16:	2400      	movs	r4, #0
 800aa18:	9b07      	ldr	r3, [sp, #28]
 800aa1a:	3302      	adds	r3, #2
 800aa1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa1e:	9b07      	ldr	r3, [sp, #28]
 800aa20:	789b      	ldrb	r3, [r3, #2]
 800aa22:	001a      	movs	r2, r3
 800aa24:	3a30      	subs	r2, #48	; 0x30
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d914      	bls.n	800aa54 <_strtod_l+0x2c8>
 800aa2a:	9a07      	ldr	r2, [sp, #28]
 800aa2c:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa2e:	2200      	movs	r2, #0
 800aa30:	e033      	b.n	800aa9a <_strtod_l+0x30e>
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	08013e60 	.word	0x08013e60
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	ffefffff 	.word	0xffefffff
 800aa40:	00000433 	.word	0x00000433
 800aa44:	7fffffff 	.word	0x7fffffff
 800aa48:	08013e5c 	.word	0x08013e5c
 800aa4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	2b30      	cmp	r3, #48	; 0x30
 800aa56:	d0f9      	beq.n	800aa4c <_strtod_l+0x2c0>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	9206      	str	r2, [sp, #24]
 800aa5c:	001a      	movs	r2, r3
 800aa5e:	3a31      	subs	r2, #49	; 0x31
 800aa60:	2a08      	cmp	r2, #8
 800aa62:	d81b      	bhi.n	800aa9c <_strtod_l+0x310>
 800aa64:	3b30      	subs	r3, #48	; 0x30
 800aa66:	930e      	str	r3, [sp, #56]	; 0x38
 800aa68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa6a:	9306      	str	r3, [sp, #24]
 800aa6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa6e:	1c59      	adds	r1, r3, #1
 800aa70:	911b      	str	r1, [sp, #108]	; 0x6c
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	001a      	movs	r2, r3
 800aa76:	3a30      	subs	r2, #48	; 0x30
 800aa78:	2a09      	cmp	r2, #9
 800aa7a:	d93a      	bls.n	800aaf2 <_strtod_l+0x366>
 800aa7c:	9a06      	ldr	r2, [sp, #24]
 800aa7e:	1a8a      	subs	r2, r1, r2
 800aa80:	49b2      	ldr	r1, [pc, #712]	; (800ad4c <_strtod_l+0x5c0>)
 800aa82:	9106      	str	r1, [sp, #24]
 800aa84:	2a08      	cmp	r2, #8
 800aa86:	dc04      	bgt.n	800aa92 <_strtod_l+0x306>
 800aa88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa8a:	9206      	str	r2, [sp, #24]
 800aa8c:	428a      	cmp	r2, r1
 800aa8e:	dd00      	ble.n	800aa92 <_strtod_l+0x306>
 800aa90:	9106      	str	r1, [sp, #24]
 800aa92:	2c00      	cmp	r4, #0
 800aa94:	d002      	beq.n	800aa9c <_strtod_l+0x310>
 800aa96:	9a06      	ldr	r2, [sp, #24]
 800aa98:	4252      	negs	r2, r2
 800aa9a:	9206      	str	r2, [sp, #24]
 800aa9c:	9a05      	ldr	r2, [sp, #20]
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d14d      	bne.n	800ab3e <_strtod_l+0x3b2>
 800aaa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa4:	4310      	orrs	r0, r2
 800aaa6:	d000      	beq.n	800aaaa <_strtod_l+0x31e>
 800aaa8:	e6ab      	b.n	800a802 <_strtod_l+0x76>
 800aaaa:	4662      	mov	r2, ip
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d000      	beq.n	800aab2 <_strtod_l+0x326>
 800aab0:	e6c5      	b.n	800a83e <_strtod_l+0xb2>
 800aab2:	2b69      	cmp	r3, #105	; 0x69
 800aab4:	d027      	beq.n	800ab06 <_strtod_l+0x37a>
 800aab6:	dc23      	bgt.n	800ab00 <_strtod_l+0x374>
 800aab8:	2b49      	cmp	r3, #73	; 0x49
 800aaba:	d024      	beq.n	800ab06 <_strtod_l+0x37a>
 800aabc:	2b4e      	cmp	r3, #78	; 0x4e
 800aabe:	d000      	beq.n	800aac2 <_strtod_l+0x336>
 800aac0:	e6bd      	b.n	800a83e <_strtod_l+0xb2>
 800aac2:	49a3      	ldr	r1, [pc, #652]	; (800ad50 <_strtod_l+0x5c4>)
 800aac4:	a81b      	add	r0, sp, #108	; 0x6c
 800aac6:	f001 fb57 	bl	800c178 <__match>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d100      	bne.n	800aad0 <_strtod_l+0x344>
 800aace:	e6b6      	b.n	800a83e <_strtod_l+0xb2>
 800aad0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b28      	cmp	r3, #40	; 0x28
 800aad6:	d12c      	bne.n	800ab32 <_strtod_l+0x3a6>
 800aad8:	499e      	ldr	r1, [pc, #632]	; (800ad54 <_strtod_l+0x5c8>)
 800aada:	aa1e      	add	r2, sp, #120	; 0x78
 800aadc:	a81b      	add	r0, sp, #108	; 0x6c
 800aade:	f001 fb5f 	bl	800c1a0 <__hexnan>
 800aae2:	2805      	cmp	r0, #5
 800aae4:	d125      	bne.n	800ab32 <_strtod_l+0x3a6>
 800aae6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aae8:	4a9b      	ldr	r2, [pc, #620]	; (800ad58 <_strtod_l+0x5cc>)
 800aaea:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aaec:	431a      	orrs	r2, r3
 800aaee:	0017      	movs	r7, r2
 800aaf0:	e687      	b.n	800a802 <_strtod_l+0x76>
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aaf6:	434a      	muls	r2, r1
 800aaf8:	18d2      	adds	r2, r2, r3
 800aafa:	3a30      	subs	r2, #48	; 0x30
 800aafc:	920e      	str	r2, [sp, #56]	; 0x38
 800aafe:	e7b5      	b.n	800aa6c <_strtod_l+0x2e0>
 800ab00:	2b6e      	cmp	r3, #110	; 0x6e
 800ab02:	d0de      	beq.n	800aac2 <_strtod_l+0x336>
 800ab04:	e69b      	b.n	800a83e <_strtod_l+0xb2>
 800ab06:	4995      	ldr	r1, [pc, #596]	; (800ad5c <_strtod_l+0x5d0>)
 800ab08:	a81b      	add	r0, sp, #108	; 0x6c
 800ab0a:	f001 fb35 	bl	800c178 <__match>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d100      	bne.n	800ab14 <_strtod_l+0x388>
 800ab12:	e694      	b.n	800a83e <_strtod_l+0xb2>
 800ab14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab16:	4992      	ldr	r1, [pc, #584]	; (800ad60 <_strtod_l+0x5d4>)
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	a81b      	add	r0, sp, #108	; 0x6c
 800ab1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab1e:	f001 fb2b 	bl	800c178 <__match>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d102      	bne.n	800ab2c <_strtod_l+0x3a0>
 800ab26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab28:	3301      	adds	r3, #1
 800ab2a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab2c:	2600      	movs	r6, #0
 800ab2e:	4f8a      	ldr	r7, [pc, #552]	; (800ad58 <_strtod_l+0x5cc>)
 800ab30:	e667      	b.n	800a802 <_strtod_l+0x76>
 800ab32:	488c      	ldr	r0, [pc, #560]	; (800ad64 <_strtod_l+0x5d8>)
 800ab34:	f000 ff5c 	bl	800b9f0 <nan>
 800ab38:	0006      	movs	r6, r0
 800ab3a:	000f      	movs	r7, r1
 800ab3c:	e661      	b.n	800a802 <_strtod_l+0x76>
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab42:	1a9b      	subs	r3, r3, r2
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	9b08      	ldr	r3, [sp, #32]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <_strtod_l+0x3c4>
 800ab4c:	9b05      	ldr	r3, [sp, #20]
 800ab4e:	9308      	str	r3, [sp, #32]
 800ab50:	9c05      	ldr	r4, [sp, #20]
 800ab52:	2c10      	cmp	r4, #16
 800ab54:	dd00      	ble.n	800ab58 <_strtod_l+0x3cc>
 800ab56:	2410      	movs	r4, #16
 800ab58:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab5a:	f7f7 fc4f 	bl	80023fc <__aeabi_ui2d>
 800ab5e:	9b05      	ldr	r3, [sp, #20]
 800ab60:	0006      	movs	r6, r0
 800ab62:	000f      	movs	r7, r1
 800ab64:	2b09      	cmp	r3, #9
 800ab66:	dd15      	ble.n	800ab94 <_strtod_l+0x408>
 800ab68:	0022      	movs	r2, r4
 800ab6a:	4b7f      	ldr	r3, [pc, #508]	; (800ad68 <_strtod_l+0x5dc>)
 800ab6c:	3a09      	subs	r2, #9
 800ab6e:	00d2      	lsls	r2, r2, #3
 800ab70:	189b      	adds	r3, r3, r2
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f7f6 fd79 	bl	800166c <__aeabi_dmul>
 800ab7a:	0006      	movs	r6, r0
 800ab7c:	0028      	movs	r0, r5
 800ab7e:	000f      	movs	r7, r1
 800ab80:	f7f7 fc3c 	bl	80023fc <__aeabi_ui2d>
 800ab84:	0002      	movs	r2, r0
 800ab86:	000b      	movs	r3, r1
 800ab88:	0030      	movs	r0, r6
 800ab8a:	0039      	movs	r1, r7
 800ab8c:	f7f5 fe14 	bl	80007b8 <__aeabi_dadd>
 800ab90:	0006      	movs	r6, r0
 800ab92:	000f      	movs	r7, r1
 800ab94:	9b05      	ldr	r3, [sp, #20]
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	dc39      	bgt.n	800ac0e <_strtod_l+0x482>
 800ab9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d100      	bne.n	800aba2 <_strtod_l+0x416>
 800aba0:	e62f      	b.n	800a802 <_strtod_l+0x76>
 800aba2:	dd24      	ble.n	800abee <_strtod_l+0x462>
 800aba4:	2b16      	cmp	r3, #22
 800aba6:	dc09      	bgt.n	800abbc <_strtod_l+0x430>
 800aba8:	496f      	ldr	r1, [pc, #444]	; (800ad68 <_strtod_l+0x5dc>)
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	18c9      	adds	r1, r1, r3
 800abae:	0032      	movs	r2, r6
 800abb0:	6808      	ldr	r0, [r1, #0]
 800abb2:	6849      	ldr	r1, [r1, #4]
 800abb4:	003b      	movs	r3, r7
 800abb6:	f7f6 fd59 	bl	800166c <__aeabi_dmul>
 800abba:	e7bd      	b.n	800ab38 <_strtod_l+0x3ac>
 800abbc:	2325      	movs	r3, #37	; 0x25
 800abbe:	9a05      	ldr	r2, [sp, #20]
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc4:	4293      	cmp	r3, r2
 800abc6:	db22      	blt.n	800ac0e <_strtod_l+0x482>
 800abc8:	240f      	movs	r4, #15
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	4d66      	ldr	r5, [pc, #408]	; (800ad68 <_strtod_l+0x5dc>)
 800abce:	1ae4      	subs	r4, r4, r3
 800abd0:	00e1      	lsls	r1, r4, #3
 800abd2:	1869      	adds	r1, r5, r1
 800abd4:	0032      	movs	r2, r6
 800abd6:	6808      	ldr	r0, [r1, #0]
 800abd8:	6849      	ldr	r1, [r1, #4]
 800abda:	003b      	movs	r3, r7
 800abdc:	f7f6 fd46 	bl	800166c <__aeabi_dmul>
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	1b1c      	subs	r4, r3, r4
 800abe4:	00e4      	lsls	r4, r4, #3
 800abe6:	192d      	adds	r5, r5, r4
 800abe8:	682a      	ldr	r2, [r5, #0]
 800abea:	686b      	ldr	r3, [r5, #4]
 800abec:	e7e3      	b.n	800abb6 <_strtod_l+0x42a>
 800abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf0:	3316      	adds	r3, #22
 800abf2:	db0c      	blt.n	800ac0e <_strtod_l+0x482>
 800abf4:	9906      	ldr	r1, [sp, #24]
 800abf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abf8:	4b5b      	ldr	r3, [pc, #364]	; (800ad68 <_strtod_l+0x5dc>)
 800abfa:	1a52      	subs	r2, r2, r1
 800abfc:	00d2      	lsls	r2, r2, #3
 800abfe:	189b      	adds	r3, r3, r2
 800ac00:	0030      	movs	r0, r6
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	0039      	movs	r1, r7
 800ac08:	f7f6 f936 	bl	8000e78 <__aeabi_ddiv>
 800ac0c:	e794      	b.n	800ab38 <_strtod_l+0x3ac>
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	1b1c      	subs	r4, r3, r4
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	18e4      	adds	r4, r4, r3
 800ac16:	2c00      	cmp	r4, #0
 800ac18:	dd72      	ble.n	800ad00 <_strtod_l+0x574>
 800ac1a:	220f      	movs	r2, #15
 800ac1c:	0023      	movs	r3, r4
 800ac1e:	4013      	ands	r3, r2
 800ac20:	4214      	tst	r4, r2
 800ac22:	d00a      	beq.n	800ac3a <_strtod_l+0x4ae>
 800ac24:	4950      	ldr	r1, [pc, #320]	; (800ad68 <_strtod_l+0x5dc>)
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	18c9      	adds	r1, r1, r3
 800ac2a:	0032      	movs	r2, r6
 800ac2c:	6808      	ldr	r0, [r1, #0]
 800ac2e:	6849      	ldr	r1, [r1, #4]
 800ac30:	003b      	movs	r3, r7
 800ac32:	f7f6 fd1b 	bl	800166c <__aeabi_dmul>
 800ac36:	0006      	movs	r6, r0
 800ac38:	000f      	movs	r7, r1
 800ac3a:	230f      	movs	r3, #15
 800ac3c:	439c      	bics	r4, r3
 800ac3e:	d04a      	beq.n	800acd6 <_strtod_l+0x54a>
 800ac40:	3326      	adds	r3, #38	; 0x26
 800ac42:	33ff      	adds	r3, #255	; 0xff
 800ac44:	429c      	cmp	r4, r3
 800ac46:	dd22      	ble.n	800ac8e <_strtod_l+0x502>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	9306      	str	r3, [sp, #24]
 800ac4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac50:	9308      	str	r3, [sp, #32]
 800ac52:	2322      	movs	r3, #34	; 0x22
 800ac54:	2600      	movs	r6, #0
 800ac56:	9a04      	ldr	r2, [sp, #16]
 800ac58:	4f3f      	ldr	r7, [pc, #252]	; (800ad58 <_strtod_l+0x5cc>)
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac5e:	42b3      	cmp	r3, r6
 800ac60:	d100      	bne.n	800ac64 <_strtod_l+0x4d8>
 800ac62:	e5ce      	b.n	800a802 <_strtod_l+0x76>
 800ac64:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac66:	9804      	ldr	r0, [sp, #16]
 800ac68:	f001 fb7c 	bl	800c364 <_Bfree>
 800ac6c:	9908      	ldr	r1, [sp, #32]
 800ac6e:	9804      	ldr	r0, [sp, #16]
 800ac70:	f001 fb78 	bl	800c364 <_Bfree>
 800ac74:	9906      	ldr	r1, [sp, #24]
 800ac76:	9804      	ldr	r0, [sp, #16]
 800ac78:	f001 fb74 	bl	800c364 <_Bfree>
 800ac7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac7e:	9804      	ldr	r0, [sp, #16]
 800ac80:	f001 fb70 	bl	800c364 <_Bfree>
 800ac84:	9905      	ldr	r1, [sp, #20]
 800ac86:	9804      	ldr	r0, [sp, #16]
 800ac88:	f001 fb6c 	bl	800c364 <_Bfree>
 800ac8c:	e5b9      	b.n	800a802 <_strtod_l+0x76>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	0030      	movs	r0, r6
 800ac92:	0039      	movs	r1, r7
 800ac94:	4d35      	ldr	r5, [pc, #212]	; (800ad6c <_strtod_l+0x5e0>)
 800ac96:	1124      	asrs	r4, r4, #4
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	2c01      	cmp	r4, #1
 800ac9c:	dc1e      	bgt.n	800acdc <_strtod_l+0x550>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <_strtod_l+0x51a>
 800aca2:	0006      	movs	r6, r0
 800aca4:	000f      	movs	r7, r1
 800aca6:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <_strtod_l+0x5e4>)
 800aca8:	9a07      	ldr	r2, [sp, #28]
 800acaa:	18ff      	adds	r7, r7, r3
 800acac:	4b2f      	ldr	r3, [pc, #188]	; (800ad6c <_strtod_l+0x5e0>)
 800acae:	00d2      	lsls	r2, r2, #3
 800acb0:	189d      	adds	r5, r3, r2
 800acb2:	6828      	ldr	r0, [r5, #0]
 800acb4:	6869      	ldr	r1, [r5, #4]
 800acb6:	0032      	movs	r2, r6
 800acb8:	003b      	movs	r3, r7
 800acba:	f7f6 fcd7 	bl	800166c <__aeabi_dmul>
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <_strtod_l+0x5cc>)
 800acc0:	4a2c      	ldr	r2, [pc, #176]	; (800ad74 <_strtod_l+0x5e8>)
 800acc2:	0006      	movs	r6, r0
 800acc4:	400b      	ands	r3, r1
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d8be      	bhi.n	800ac48 <_strtod_l+0x4bc>
 800acca:	4a2b      	ldr	r2, [pc, #172]	; (800ad78 <_strtod_l+0x5ec>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d913      	bls.n	800acf8 <_strtod_l+0x56c>
 800acd0:	2601      	movs	r6, #1
 800acd2:	4f2a      	ldr	r7, [pc, #168]	; (800ad7c <_strtod_l+0x5f0>)
 800acd4:	4276      	negs	r6, r6
 800acd6:	2300      	movs	r3, #0
 800acd8:	9307      	str	r3, [sp, #28]
 800acda:	e088      	b.n	800adee <_strtod_l+0x662>
 800acdc:	2201      	movs	r2, #1
 800acde:	4214      	tst	r4, r2
 800ace0:	d004      	beq.n	800acec <_strtod_l+0x560>
 800ace2:	682a      	ldr	r2, [r5, #0]
 800ace4:	686b      	ldr	r3, [r5, #4]
 800ace6:	f7f6 fcc1 	bl	800166c <__aeabi_dmul>
 800acea:	2301      	movs	r3, #1
 800acec:	9a07      	ldr	r2, [sp, #28]
 800acee:	1064      	asrs	r4, r4, #1
 800acf0:	3201      	adds	r2, #1
 800acf2:	9207      	str	r2, [sp, #28]
 800acf4:	3508      	adds	r5, #8
 800acf6:	e7d0      	b.n	800ac9a <_strtod_l+0x50e>
 800acf8:	23d4      	movs	r3, #212	; 0xd4
 800acfa:	049b      	lsls	r3, r3, #18
 800acfc:	18cf      	adds	r7, r1, r3
 800acfe:	e7ea      	b.n	800acd6 <_strtod_l+0x54a>
 800ad00:	2c00      	cmp	r4, #0
 800ad02:	d0e8      	beq.n	800acd6 <_strtod_l+0x54a>
 800ad04:	4264      	negs	r4, r4
 800ad06:	230f      	movs	r3, #15
 800ad08:	0022      	movs	r2, r4
 800ad0a:	401a      	ands	r2, r3
 800ad0c:	421c      	tst	r4, r3
 800ad0e:	d00a      	beq.n	800ad26 <_strtod_l+0x59a>
 800ad10:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <_strtod_l+0x5dc>)
 800ad12:	00d2      	lsls	r2, r2, #3
 800ad14:	189b      	adds	r3, r3, r2
 800ad16:	0030      	movs	r0, r6
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	0039      	movs	r1, r7
 800ad1e:	f7f6 f8ab 	bl	8000e78 <__aeabi_ddiv>
 800ad22:	0006      	movs	r6, r0
 800ad24:	000f      	movs	r7, r1
 800ad26:	1124      	asrs	r4, r4, #4
 800ad28:	d0d5      	beq.n	800acd6 <_strtod_l+0x54a>
 800ad2a:	2c1f      	cmp	r4, #31
 800ad2c:	dd28      	ble.n	800ad80 <_strtod_l+0x5f4>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	9306      	str	r3, [sp, #24]
 800ad34:	930d      	str	r3, [sp, #52]	; 0x34
 800ad36:	9308      	str	r3, [sp, #32]
 800ad38:	2322      	movs	r3, #34	; 0x22
 800ad3a:	9a04      	ldr	r2, [sp, #16]
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad42:	2700      	movs	r7, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d18d      	bne.n	800ac64 <_strtod_l+0x4d8>
 800ad48:	e55b      	b.n	800a802 <_strtod_l+0x76>
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	00004e1f 	.word	0x00004e1f
 800ad50:	08014191 	.word	0x08014191
 800ad54:	08013e74 	.word	0x08013e74
 800ad58:	7ff00000 	.word	0x7ff00000
 800ad5c:	08014189 	.word	0x08014189
 800ad60:	0801423f 	.word	0x0801423f
 800ad64:	0801423b 	.word	0x0801423b
 800ad68:	080140b0 	.word	0x080140b0
 800ad6c:	08014088 	.word	0x08014088
 800ad70:	fcb00000 	.word	0xfcb00000
 800ad74:	7ca00000 	.word	0x7ca00000
 800ad78:	7c900000 	.word	0x7c900000
 800ad7c:	7fefffff 	.word	0x7fefffff
 800ad80:	2310      	movs	r3, #16
 800ad82:	0022      	movs	r2, r4
 800ad84:	401a      	ands	r2, r3
 800ad86:	9207      	str	r2, [sp, #28]
 800ad88:	421c      	tst	r4, r3
 800ad8a:	d001      	beq.n	800ad90 <_strtod_l+0x604>
 800ad8c:	335a      	adds	r3, #90	; 0x5a
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	0030      	movs	r0, r6
 800ad92:	0039      	movs	r1, r7
 800ad94:	2300      	movs	r3, #0
 800ad96:	4dc4      	ldr	r5, [pc, #784]	; (800b0a8 <_strtod_l+0x91c>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4214      	tst	r4, r2
 800ad9c:	d004      	beq.n	800ada8 <_strtod_l+0x61c>
 800ad9e:	682a      	ldr	r2, [r5, #0]
 800ada0:	686b      	ldr	r3, [r5, #4]
 800ada2:	f7f6 fc63 	bl	800166c <__aeabi_dmul>
 800ada6:	2301      	movs	r3, #1
 800ada8:	1064      	asrs	r4, r4, #1
 800adaa:	3508      	adds	r5, #8
 800adac:	2c00      	cmp	r4, #0
 800adae:	d1f3      	bne.n	800ad98 <_strtod_l+0x60c>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <_strtod_l+0x62c>
 800adb4:	0006      	movs	r6, r0
 800adb6:	000f      	movs	r7, r1
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <_strtod_l+0x652>
 800adbe:	236b      	movs	r3, #107	; 0x6b
 800adc0:	007a      	lsls	r2, r7, #1
 800adc2:	0d52      	lsrs	r2, r2, #21
 800adc4:	0039      	movs	r1, r7
 800adc6:	1a9b      	subs	r3, r3, r2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dd08      	ble.n	800adde <_strtod_l+0x652>
 800adcc:	2b1f      	cmp	r3, #31
 800adce:	dc00      	bgt.n	800add2 <_strtod_l+0x646>
 800add0:	e121      	b.n	800b016 <_strtod_l+0x88a>
 800add2:	2600      	movs	r6, #0
 800add4:	2b34      	cmp	r3, #52	; 0x34
 800add6:	dc00      	bgt.n	800adda <_strtod_l+0x64e>
 800add8:	e116      	b.n	800b008 <_strtod_l+0x87c>
 800adda:	27dc      	movs	r7, #220	; 0xdc
 800addc:	04bf      	lsls	r7, r7, #18
 800adde:	2200      	movs	r2, #0
 800ade0:	2300      	movs	r3, #0
 800ade2:	0030      	movs	r0, r6
 800ade4:	0039      	movs	r1, r7
 800ade6:	f7f5 fb2f 	bl	8000448 <__aeabi_dcmpeq>
 800adea:	2800      	cmp	r0, #0
 800adec:	d19f      	bne.n	800ad2e <_strtod_l+0x5a2>
 800adee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf0:	9a08      	ldr	r2, [sp, #32]
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800adf6:	9b05      	ldr	r3, [sp, #20]
 800adf8:	9804      	ldr	r0, [sp, #16]
 800adfa:	f001 fb01 	bl	800c400 <__s2b>
 800adfe:	900d      	str	r0, [sp, #52]	; 0x34
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d100      	bne.n	800ae06 <_strtod_l+0x67a>
 800ae04:	e720      	b.n	800ac48 <_strtod_l+0x4bc>
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	9906      	ldr	r1, [sp, #24]
 800ae0a:	17da      	asrs	r2, r3, #31
 800ae0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae0e:	1a5b      	subs	r3, r3, r1
 800ae10:	401a      	ands	r2, r3
 800ae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae14:	9215      	str	r2, [sp, #84]	; 0x54
 800ae16:	43db      	mvns	r3, r3
 800ae18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1a:	17db      	asrs	r3, r3, #31
 800ae1c:	401a      	ands	r2, r3
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9218      	str	r2, [sp, #96]	; 0x60
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	9306      	str	r3, [sp, #24]
 800ae26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae28:	9804      	ldr	r0, [sp, #16]
 800ae2a:	6859      	ldr	r1, [r3, #4]
 800ae2c:	f001 fa72 	bl	800c314 <_Balloc>
 800ae30:	9008      	str	r0, [sp, #32]
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d100      	bne.n	800ae38 <_strtod_l+0x6ac>
 800ae36:	e70c      	b.n	800ac52 <_strtod_l+0x4c6>
 800ae38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3a:	300c      	adds	r0, #12
 800ae3c:	0019      	movs	r1, r3
 800ae3e:	691a      	ldr	r2, [r3, #16]
 800ae40:	310c      	adds	r1, #12
 800ae42:	3202      	adds	r2, #2
 800ae44:	0092      	lsls	r2, r2, #2
 800ae46:	f000 fdca 	bl	800b9de <memcpy>
 800ae4a:	ab1e      	add	r3, sp, #120	; 0x78
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	0032      	movs	r2, r6
 800ae54:	003b      	movs	r3, r7
 800ae56:	9804      	ldr	r0, [sp, #16]
 800ae58:	9610      	str	r6, [sp, #64]	; 0x40
 800ae5a:	9711      	str	r7, [sp, #68]	; 0x44
 800ae5c:	f001 fdf8 	bl	800ca50 <__d2b>
 800ae60:	901c      	str	r0, [sp, #112]	; 0x70
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d100      	bne.n	800ae68 <_strtod_l+0x6dc>
 800ae66:	e6f4      	b.n	800ac52 <_strtod_l+0x4c6>
 800ae68:	2101      	movs	r1, #1
 800ae6a:	9804      	ldr	r0, [sp, #16]
 800ae6c:	f001 fb5c 	bl	800c528 <__i2b>
 800ae70:	9006      	str	r0, [sp, #24]
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d100      	bne.n	800ae78 <_strtod_l+0x6ec>
 800ae76:	e6ec      	b.n	800ac52 <_strtod_l+0x4c6>
 800ae78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae7c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ae7e:	1ad4      	subs	r4, r2, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	db01      	blt.n	800ae88 <_strtod_l+0x6fc>
 800ae84:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ae86:	195d      	adds	r5, r3, r5
 800ae88:	9907      	ldr	r1, [sp, #28]
 800ae8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae8c:	1a5b      	subs	r3, r3, r1
 800ae8e:	2136      	movs	r1, #54	; 0x36
 800ae90:	189b      	adds	r3, r3, r2
 800ae92:	1a8a      	subs	r2, r1, r2
 800ae94:	4985      	ldr	r1, [pc, #532]	; (800b0ac <_strtod_l+0x920>)
 800ae96:	2001      	movs	r0, #1
 800ae98:	468c      	mov	ip, r1
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	9114      	str	r1, [sp, #80]	; 0x50
 800aea0:	9012      	str	r0, [sp, #72]	; 0x48
 800aea2:	4563      	cmp	r3, ip
 800aea4:	da07      	bge.n	800aeb6 <_strtod_l+0x72a>
 800aea6:	4661      	mov	r1, ip
 800aea8:	1ac9      	subs	r1, r1, r3
 800aeaa:	1a52      	subs	r2, r2, r1
 800aeac:	291f      	cmp	r1, #31
 800aeae:	dd00      	ble.n	800aeb2 <_strtod_l+0x726>
 800aeb0:	e0b6      	b.n	800b020 <_strtod_l+0x894>
 800aeb2:	4088      	lsls	r0, r1
 800aeb4:	9012      	str	r0, [sp, #72]	; 0x48
 800aeb6:	18ab      	adds	r3, r5, r2
 800aeb8:	930c      	str	r3, [sp, #48]	; 0x30
 800aeba:	18a4      	adds	r4, r4, r2
 800aebc:	9b07      	ldr	r3, [sp, #28]
 800aebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aec0:	191c      	adds	r4, r3, r4
 800aec2:	002b      	movs	r3, r5
 800aec4:	4295      	cmp	r5, r2
 800aec6:	dd00      	ble.n	800aeca <_strtod_l+0x73e>
 800aec8:	0013      	movs	r3, r2
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	dd00      	ble.n	800aed0 <_strtod_l+0x744>
 800aece:	0023      	movs	r3, r4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	dd04      	ble.n	800aede <_strtod_l+0x752>
 800aed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed6:	1ae4      	subs	r4, r4, r3
 800aed8:	1ad2      	subs	r2, r2, r3
 800aeda:	920c      	str	r2, [sp, #48]	; 0x30
 800aedc:	1aed      	subs	r5, r5, r3
 800aede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dd17      	ble.n	800af14 <_strtod_l+0x788>
 800aee4:	001a      	movs	r2, r3
 800aee6:	9906      	ldr	r1, [sp, #24]
 800aee8:	9804      	ldr	r0, [sp, #16]
 800aeea:	f001 fbe5 	bl	800c6b8 <__pow5mult>
 800aeee:	9006      	str	r0, [sp, #24]
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d100      	bne.n	800aef6 <_strtod_l+0x76a>
 800aef4:	e6ad      	b.n	800ac52 <_strtod_l+0x4c6>
 800aef6:	0001      	movs	r1, r0
 800aef8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aefa:	9804      	ldr	r0, [sp, #16]
 800aefc:	f001 fb2c 	bl	800c558 <__multiply>
 800af00:	900e      	str	r0, [sp, #56]	; 0x38
 800af02:	2800      	cmp	r0, #0
 800af04:	d100      	bne.n	800af08 <_strtod_l+0x77c>
 800af06:	e6a4      	b.n	800ac52 <_strtod_l+0x4c6>
 800af08:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af0a:	9804      	ldr	r0, [sp, #16]
 800af0c:	f001 fa2a 	bl	800c364 <_Bfree>
 800af10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af12:	931c      	str	r3, [sp, #112]	; 0x70
 800af14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af16:	2b00      	cmp	r3, #0
 800af18:	dd00      	ble.n	800af1c <_strtod_l+0x790>
 800af1a:	e087      	b.n	800b02c <_strtod_l+0x8a0>
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	2b00      	cmp	r3, #0
 800af20:	dd08      	ble.n	800af34 <_strtod_l+0x7a8>
 800af22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af24:	9908      	ldr	r1, [sp, #32]
 800af26:	9804      	ldr	r0, [sp, #16]
 800af28:	f001 fbc6 	bl	800c6b8 <__pow5mult>
 800af2c:	9008      	str	r0, [sp, #32]
 800af2e:	2800      	cmp	r0, #0
 800af30:	d100      	bne.n	800af34 <_strtod_l+0x7a8>
 800af32:	e68e      	b.n	800ac52 <_strtod_l+0x4c6>
 800af34:	2c00      	cmp	r4, #0
 800af36:	dd08      	ble.n	800af4a <_strtod_l+0x7be>
 800af38:	0022      	movs	r2, r4
 800af3a:	9908      	ldr	r1, [sp, #32]
 800af3c:	9804      	ldr	r0, [sp, #16]
 800af3e:	f001 fbfd 	bl	800c73c <__lshift>
 800af42:	9008      	str	r0, [sp, #32]
 800af44:	2800      	cmp	r0, #0
 800af46:	d100      	bne.n	800af4a <_strtod_l+0x7be>
 800af48:	e683      	b.n	800ac52 <_strtod_l+0x4c6>
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	dd08      	ble.n	800af60 <_strtod_l+0x7d4>
 800af4e:	002a      	movs	r2, r5
 800af50:	9906      	ldr	r1, [sp, #24]
 800af52:	9804      	ldr	r0, [sp, #16]
 800af54:	f001 fbf2 	bl	800c73c <__lshift>
 800af58:	9006      	str	r0, [sp, #24]
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d100      	bne.n	800af60 <_strtod_l+0x7d4>
 800af5e:	e678      	b.n	800ac52 <_strtod_l+0x4c6>
 800af60:	9a08      	ldr	r2, [sp, #32]
 800af62:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af64:	9804      	ldr	r0, [sp, #16]
 800af66:	f001 fc73 	bl	800c850 <__mdiff>
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d100      	bne.n	800af72 <_strtod_l+0x7e6>
 800af70:	e66f      	b.n	800ac52 <_strtod_l+0x4c6>
 800af72:	2200      	movs	r2, #0
 800af74:	68c3      	ldr	r3, [r0, #12]
 800af76:	9906      	ldr	r1, [sp, #24]
 800af78:	60c2      	str	r2, [r0, #12]
 800af7a:	930c      	str	r3, [sp, #48]	; 0x30
 800af7c:	f001 fc4c 	bl	800c818 <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	da5d      	bge.n	800b040 <_strtod_l+0x8b4>
 800af84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af86:	4333      	orrs	r3, r6
 800af88:	d000      	beq.n	800af8c <_strtod_l+0x800>
 800af8a:	e088      	b.n	800b09e <_strtod_l+0x912>
 800af8c:	033b      	lsls	r3, r7, #12
 800af8e:	d000      	beq.n	800af92 <_strtod_l+0x806>
 800af90:	e085      	b.n	800b09e <_strtod_l+0x912>
 800af92:	22d6      	movs	r2, #214	; 0xd6
 800af94:	4b46      	ldr	r3, [pc, #280]	; (800b0b0 <_strtod_l+0x924>)
 800af96:	04d2      	lsls	r2, r2, #19
 800af98:	403b      	ands	r3, r7
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d97f      	bls.n	800b09e <_strtod_l+0x912>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <_strtod_l+0x822>
 800afa6:	9b05      	ldr	r3, [sp, #20]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	dd77      	ble.n	800b09e <_strtod_l+0x912>
 800afae:	9905      	ldr	r1, [sp, #20]
 800afb0:	2201      	movs	r2, #1
 800afb2:	9804      	ldr	r0, [sp, #16]
 800afb4:	f001 fbc2 	bl	800c73c <__lshift>
 800afb8:	9906      	ldr	r1, [sp, #24]
 800afba:	9005      	str	r0, [sp, #20]
 800afbc:	f001 fc2c 	bl	800c818 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dd6c      	ble.n	800b09e <_strtod_l+0x912>
 800afc4:	9907      	ldr	r1, [sp, #28]
 800afc6:	003b      	movs	r3, r7
 800afc8:	4a39      	ldr	r2, [pc, #228]	; (800b0b0 <_strtod_l+0x924>)
 800afca:	2900      	cmp	r1, #0
 800afcc:	d100      	bne.n	800afd0 <_strtod_l+0x844>
 800afce:	e094      	b.n	800b0fa <_strtod_l+0x96e>
 800afd0:	0011      	movs	r1, r2
 800afd2:	20d6      	movs	r0, #214	; 0xd6
 800afd4:	4039      	ands	r1, r7
 800afd6:	04c0      	lsls	r0, r0, #19
 800afd8:	4281      	cmp	r1, r0
 800afda:	dd00      	ble.n	800afde <_strtod_l+0x852>
 800afdc:	e08d      	b.n	800b0fa <_strtod_l+0x96e>
 800afde:	23dc      	movs	r3, #220	; 0xdc
 800afe0:	049b      	lsls	r3, r3, #18
 800afe2:	4299      	cmp	r1, r3
 800afe4:	dc00      	bgt.n	800afe8 <_strtod_l+0x85c>
 800afe6:	e6a7      	b.n	800ad38 <_strtod_l+0x5ac>
 800afe8:	0030      	movs	r0, r6
 800afea:	0039      	movs	r1, r7
 800afec:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <_strtod_l+0x928>)
 800afee:	2200      	movs	r2, #0
 800aff0:	f7f6 fb3c 	bl	800166c <__aeabi_dmul>
 800aff4:	4b2e      	ldr	r3, [pc, #184]	; (800b0b0 <_strtod_l+0x924>)
 800aff6:	0006      	movs	r6, r0
 800aff8:	000f      	movs	r7, r1
 800affa:	420b      	tst	r3, r1
 800affc:	d000      	beq.n	800b000 <_strtod_l+0x874>
 800affe:	e631      	b.n	800ac64 <_strtod_l+0x4d8>
 800b000:	2322      	movs	r3, #34	; 0x22
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	e62d      	b.n	800ac64 <_strtod_l+0x4d8>
 800b008:	234b      	movs	r3, #75	; 0x4b
 800b00a:	1a9a      	subs	r2, r3, r2
 800b00c:	3b4c      	subs	r3, #76	; 0x4c
 800b00e:	4093      	lsls	r3, r2
 800b010:	4019      	ands	r1, r3
 800b012:	000f      	movs	r7, r1
 800b014:	e6e3      	b.n	800adde <_strtod_l+0x652>
 800b016:	2201      	movs	r2, #1
 800b018:	4252      	negs	r2, r2
 800b01a:	409a      	lsls	r2, r3
 800b01c:	4016      	ands	r6, r2
 800b01e:	e6de      	b.n	800adde <_strtod_l+0x652>
 800b020:	4925      	ldr	r1, [pc, #148]	; (800b0b8 <_strtod_l+0x92c>)
 800b022:	1acb      	subs	r3, r1, r3
 800b024:	0001      	movs	r1, r0
 800b026:	4099      	lsls	r1, r3
 800b028:	9114      	str	r1, [sp, #80]	; 0x50
 800b02a:	e743      	b.n	800aeb4 <_strtod_l+0x728>
 800b02c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b02e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b030:	9804      	ldr	r0, [sp, #16]
 800b032:	f001 fb83 	bl	800c73c <__lshift>
 800b036:	901c      	str	r0, [sp, #112]	; 0x70
 800b038:	2800      	cmp	r0, #0
 800b03a:	d000      	beq.n	800b03e <_strtod_l+0x8b2>
 800b03c:	e76e      	b.n	800af1c <_strtod_l+0x790>
 800b03e:	e608      	b.n	800ac52 <_strtod_l+0x4c6>
 800b040:	970e      	str	r7, [sp, #56]	; 0x38
 800b042:	2800      	cmp	r0, #0
 800b044:	d177      	bne.n	800b136 <_strtod_l+0x9aa>
 800b046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b048:	033b      	lsls	r3, r7, #12
 800b04a:	0b1b      	lsrs	r3, r3, #12
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	d039      	beq.n	800b0c4 <_strtod_l+0x938>
 800b050:	4a1a      	ldr	r2, [pc, #104]	; (800b0bc <_strtod_l+0x930>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d139      	bne.n	800b0ca <_strtod_l+0x93e>
 800b056:	2101      	movs	r1, #1
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	4249      	negs	r1, r1
 800b05c:	0032      	movs	r2, r6
 800b05e:	0008      	movs	r0, r1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <_strtod_l+0x8f0>
 800b064:	24d4      	movs	r4, #212	; 0xd4
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <_strtod_l+0x924>)
 800b068:	0008      	movs	r0, r1
 800b06a:	403b      	ands	r3, r7
 800b06c:	04e4      	lsls	r4, r4, #19
 800b06e:	42a3      	cmp	r3, r4
 800b070:	d804      	bhi.n	800b07c <_strtod_l+0x8f0>
 800b072:	306c      	adds	r0, #108	; 0x6c
 800b074:	0d1b      	lsrs	r3, r3, #20
 800b076:	1ac3      	subs	r3, r0, r3
 800b078:	4099      	lsls	r1, r3
 800b07a:	0008      	movs	r0, r1
 800b07c:	4282      	cmp	r2, r0
 800b07e:	d124      	bne.n	800b0ca <_strtod_l+0x93e>
 800b080:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <_strtod_l+0x934>)
 800b082:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b084:	4299      	cmp	r1, r3
 800b086:	d102      	bne.n	800b08e <_strtod_l+0x902>
 800b088:	3201      	adds	r2, #1
 800b08a:	d100      	bne.n	800b08e <_strtod_l+0x902>
 800b08c:	e5e1      	b.n	800ac52 <_strtod_l+0x4c6>
 800b08e:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <_strtod_l+0x924>)
 800b090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b092:	2600      	movs	r6, #0
 800b094:	401a      	ands	r2, r3
 800b096:	0013      	movs	r3, r2
 800b098:	2280      	movs	r2, #128	; 0x80
 800b09a:	0352      	lsls	r2, r2, #13
 800b09c:	189f      	adds	r7, r3, r2
 800b09e:	9b07      	ldr	r3, [sp, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1a1      	bne.n	800afe8 <_strtod_l+0x85c>
 800b0a4:	e5de      	b.n	800ac64 <_strtod_l+0x4d8>
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	08013e88 	.word	0x08013e88
 800b0ac:	fffffc02 	.word	0xfffffc02
 800b0b0:	7ff00000 	.word	0x7ff00000
 800b0b4:	39500000 	.word	0x39500000
 800b0b8:	fffffbe2 	.word	0xfffffbe2
 800b0bc:	000fffff 	.word	0x000fffff
 800b0c0:	7fefffff 	.word	0x7fefffff
 800b0c4:	4333      	orrs	r3, r6
 800b0c6:	d100      	bne.n	800b0ca <_strtod_l+0x93e>
 800b0c8:	e77c      	b.n	800afc4 <_strtod_l+0x838>
 800b0ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01d      	beq.n	800b10c <_strtod_l+0x980>
 800b0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0d4:	4213      	tst	r3, r2
 800b0d6:	d0e2      	beq.n	800b09e <_strtod_l+0x912>
 800b0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0da:	0030      	movs	r0, r6
 800b0dc:	0039      	movs	r1, r7
 800b0de:	9a07      	ldr	r2, [sp, #28]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d017      	beq.n	800b114 <_strtod_l+0x988>
 800b0e4:	f7ff fb3a 	bl	800a75c <sulp>
 800b0e8:	0002      	movs	r2, r0
 800b0ea:	000b      	movs	r3, r1
 800b0ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b0ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0f0:	f7f5 fb62 	bl	80007b8 <__aeabi_dadd>
 800b0f4:	0006      	movs	r6, r0
 800b0f6:	000f      	movs	r7, r1
 800b0f8:	e7d1      	b.n	800b09e <_strtod_l+0x912>
 800b0fa:	2601      	movs	r6, #1
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	4a98      	ldr	r2, [pc, #608]	; (800b360 <_strtod_l+0xbd4>)
 800b100:	4276      	negs	r6, r6
 800b102:	189b      	adds	r3, r3, r2
 800b104:	4a97      	ldr	r2, [pc, #604]	; (800b364 <_strtod_l+0xbd8>)
 800b106:	431a      	orrs	r2, r3
 800b108:	0017      	movs	r7, r2
 800b10a:	e7c8      	b.n	800b09e <_strtod_l+0x912>
 800b10c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b10e:	4233      	tst	r3, r6
 800b110:	d0c5      	beq.n	800b09e <_strtod_l+0x912>
 800b112:	e7e1      	b.n	800b0d8 <_strtod_l+0x94c>
 800b114:	f7ff fb22 	bl	800a75c <sulp>
 800b118:	0002      	movs	r2, r0
 800b11a:	000b      	movs	r3, r1
 800b11c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b11e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b120:	f7f6 fd66 	bl	8001bf0 <__aeabi_dsub>
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	0006      	movs	r6, r0
 800b12a:	000f      	movs	r7, r1
 800b12c:	f7f5 f98c 	bl	8000448 <__aeabi_dcmpeq>
 800b130:	2800      	cmp	r0, #0
 800b132:	d0b4      	beq.n	800b09e <_strtod_l+0x912>
 800b134:	e600      	b.n	800ad38 <_strtod_l+0x5ac>
 800b136:	9906      	ldr	r1, [sp, #24]
 800b138:	9805      	ldr	r0, [sp, #20]
 800b13a:	f001 fce9 	bl	800cb10 <__ratio>
 800b13e:	2380      	movs	r3, #128	; 0x80
 800b140:	2200      	movs	r2, #0
 800b142:	05db      	lsls	r3, r3, #23
 800b144:	0004      	movs	r4, r0
 800b146:	000d      	movs	r5, r1
 800b148:	f7f5 f98e 	bl	8000468 <__aeabi_dcmple>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d06d      	beq.n	800b22c <_strtod_l+0xaa0>
 800b150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b152:	2b00      	cmp	r3, #0
 800b154:	d000      	beq.n	800b158 <_strtod_l+0x9cc>
 800b156:	e07e      	b.n	800b256 <_strtod_l+0xaca>
 800b158:	2e00      	cmp	r6, #0
 800b15a:	d158      	bne.n	800b20e <_strtod_l+0xa82>
 800b15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15e:	031b      	lsls	r3, r3, #12
 800b160:	d000      	beq.n	800b164 <_strtod_l+0x9d8>
 800b162:	e07f      	b.n	800b264 <_strtod_l+0xad8>
 800b164:	2200      	movs	r2, #0
 800b166:	0020      	movs	r0, r4
 800b168:	0029      	movs	r1, r5
 800b16a:	4b7f      	ldr	r3, [pc, #508]	; (800b368 <_strtod_l+0xbdc>)
 800b16c:	f7f5 f972 	bl	8000454 <__aeabi_dcmplt>
 800b170:	2800      	cmp	r0, #0
 800b172:	d158      	bne.n	800b226 <_strtod_l+0xa9a>
 800b174:	0020      	movs	r0, r4
 800b176:	0029      	movs	r1, r5
 800b178:	2200      	movs	r2, #0
 800b17a:	4b7c      	ldr	r3, [pc, #496]	; (800b36c <_strtod_l+0xbe0>)
 800b17c:	f7f6 fa76 	bl	800166c <__aeabi_dmul>
 800b180:	0004      	movs	r4, r0
 800b182:	000d      	movs	r5, r1
 800b184:	2380      	movs	r3, #128	; 0x80
 800b186:	061b      	lsls	r3, r3, #24
 800b188:	940a      	str	r4, [sp, #40]	; 0x28
 800b18a:	18eb      	adds	r3, r5, r3
 800b18c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b18e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b192:	9212      	str	r2, [sp, #72]	; 0x48
 800b194:	9313      	str	r3, [sp, #76]	; 0x4c
 800b196:	4a76      	ldr	r2, [pc, #472]	; (800b370 <_strtod_l+0xbe4>)
 800b198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b19a:	4013      	ands	r3, r2
 800b19c:	9314      	str	r3, [sp, #80]	; 0x50
 800b19e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1a0:	4b74      	ldr	r3, [pc, #464]	; (800b374 <_strtod_l+0xbe8>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d000      	beq.n	800b1a8 <_strtod_l+0xa1c>
 800b1a6:	e091      	b.n	800b2cc <_strtod_l+0xb40>
 800b1a8:	4a73      	ldr	r2, [pc, #460]	; (800b378 <_strtod_l+0xbec>)
 800b1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1ac:	4694      	mov	ip, r2
 800b1ae:	4463      	add	r3, ip
 800b1b0:	001f      	movs	r7, r3
 800b1b2:	0030      	movs	r0, r6
 800b1b4:	0019      	movs	r1, r3
 800b1b6:	f001 fbe3 	bl	800c980 <__ulp>
 800b1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1be:	f7f6 fa55 	bl	800166c <__aeabi_dmul>
 800b1c2:	0032      	movs	r2, r6
 800b1c4:	003b      	movs	r3, r7
 800b1c6:	f7f5 faf7 	bl	80007b8 <__aeabi_dadd>
 800b1ca:	4a69      	ldr	r2, [pc, #420]	; (800b370 <_strtod_l+0xbe4>)
 800b1cc:	4b6b      	ldr	r3, [pc, #428]	; (800b37c <_strtod_l+0xbf0>)
 800b1ce:	0006      	movs	r6, r0
 800b1d0:	400a      	ands	r2, r1
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d949      	bls.n	800b26a <_strtod_l+0xade>
 800b1d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1d8:	4b69      	ldr	r3, [pc, #420]	; (800b380 <_strtod_l+0xbf4>)
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d103      	bne.n	800b1e6 <_strtod_l+0xa5a>
 800b1de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	d100      	bne.n	800b1e6 <_strtod_l+0xa5a>
 800b1e4:	e535      	b.n	800ac52 <_strtod_l+0x4c6>
 800b1e6:	2601      	movs	r6, #1
 800b1e8:	4f65      	ldr	r7, [pc, #404]	; (800b380 <_strtod_l+0xbf4>)
 800b1ea:	4276      	negs	r6, r6
 800b1ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b1ee:	9804      	ldr	r0, [sp, #16]
 800b1f0:	f001 f8b8 	bl	800c364 <_Bfree>
 800b1f4:	9908      	ldr	r1, [sp, #32]
 800b1f6:	9804      	ldr	r0, [sp, #16]
 800b1f8:	f001 f8b4 	bl	800c364 <_Bfree>
 800b1fc:	9906      	ldr	r1, [sp, #24]
 800b1fe:	9804      	ldr	r0, [sp, #16]
 800b200:	f001 f8b0 	bl	800c364 <_Bfree>
 800b204:	9905      	ldr	r1, [sp, #20]
 800b206:	9804      	ldr	r0, [sp, #16]
 800b208:	f001 f8ac 	bl	800c364 <_Bfree>
 800b20c:	e60b      	b.n	800ae26 <_strtod_l+0x69a>
 800b20e:	2e01      	cmp	r6, #1
 800b210:	d103      	bne.n	800b21a <_strtod_l+0xa8e>
 800b212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d100      	bne.n	800b21a <_strtod_l+0xa8e>
 800b218:	e58e      	b.n	800ad38 <_strtod_l+0x5ac>
 800b21a:	2300      	movs	r3, #0
 800b21c:	4c59      	ldr	r4, [pc, #356]	; (800b384 <_strtod_l+0xbf8>)
 800b21e:	930a      	str	r3, [sp, #40]	; 0x28
 800b220:	940b      	str	r4, [sp, #44]	; 0x2c
 800b222:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b224:	e01c      	b.n	800b260 <_strtod_l+0xad4>
 800b226:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b228:	4d50      	ldr	r5, [pc, #320]	; (800b36c <_strtod_l+0xbe0>)
 800b22a:	e7ab      	b.n	800b184 <_strtod_l+0x9f8>
 800b22c:	2200      	movs	r2, #0
 800b22e:	0020      	movs	r0, r4
 800b230:	0029      	movs	r1, r5
 800b232:	4b4e      	ldr	r3, [pc, #312]	; (800b36c <_strtod_l+0xbe0>)
 800b234:	f7f6 fa1a 	bl	800166c <__aeabi_dmul>
 800b238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b23a:	0004      	movs	r4, r0
 800b23c:	000b      	movs	r3, r1
 800b23e:	000d      	movs	r5, r1
 800b240:	2a00      	cmp	r2, #0
 800b242:	d104      	bne.n	800b24e <_strtod_l+0xac2>
 800b244:	2280      	movs	r2, #128	; 0x80
 800b246:	0612      	lsls	r2, r2, #24
 800b248:	900a      	str	r0, [sp, #40]	; 0x28
 800b24a:	188b      	adds	r3, r1, r2
 800b24c:	e79e      	b.n	800b18c <_strtod_l+0xa00>
 800b24e:	0002      	movs	r2, r0
 800b250:	920a      	str	r2, [sp, #40]	; 0x28
 800b252:	930b      	str	r3, [sp, #44]	; 0x2c
 800b254:	e79b      	b.n	800b18e <_strtod_l+0xa02>
 800b256:	2300      	movs	r3, #0
 800b258:	4c43      	ldr	r4, [pc, #268]	; (800b368 <_strtod_l+0xbdc>)
 800b25a:	930a      	str	r3, [sp, #40]	; 0x28
 800b25c:	940b      	str	r4, [sp, #44]	; 0x2c
 800b25e:	2400      	movs	r4, #0
 800b260:	4d41      	ldr	r5, [pc, #260]	; (800b368 <_strtod_l+0xbdc>)
 800b262:	e794      	b.n	800b18e <_strtod_l+0xa02>
 800b264:	2300      	movs	r3, #0
 800b266:	4c47      	ldr	r4, [pc, #284]	; (800b384 <_strtod_l+0xbf8>)
 800b268:	e7f7      	b.n	800b25a <_strtod_l+0xace>
 800b26a:	23d4      	movs	r3, #212	; 0xd4
 800b26c:	049b      	lsls	r3, r3, #18
 800b26e:	18cf      	adds	r7, r1, r3
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	970e      	str	r7, [sp, #56]	; 0x38
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1b9      	bne.n	800b1ec <_strtod_l+0xa60>
 800b278:	4b3d      	ldr	r3, [pc, #244]	; (800b370 <_strtod_l+0xbe4>)
 800b27a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b27c:	403b      	ands	r3, r7
 800b27e:	429a      	cmp	r2, r3
 800b280:	d1b4      	bne.n	800b1ec <_strtod_l+0xa60>
 800b282:	0020      	movs	r0, r4
 800b284:	0029      	movs	r1, r5
 800b286:	f7f5 f979 	bl	800057c <__aeabi_d2lz>
 800b28a:	f7f5 f9b3 	bl	80005f4 <__aeabi_l2d>
 800b28e:	0002      	movs	r2, r0
 800b290:	000b      	movs	r3, r1
 800b292:	0020      	movs	r0, r4
 800b294:	0029      	movs	r1, r5
 800b296:	f7f6 fcab 	bl	8001bf0 <__aeabi_dsub>
 800b29a:	033b      	lsls	r3, r7, #12
 800b29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b29e:	0b1b      	lsrs	r3, r3, #12
 800b2a0:	4333      	orrs	r3, r6
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	0004      	movs	r4, r0
 800b2a6:	000d      	movs	r5, r1
 800b2a8:	4a37      	ldr	r2, [pc, #220]	; (800b388 <_strtod_l+0xbfc>)
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d054      	beq.n	800b358 <_strtod_l+0xbcc>
 800b2ae:	4b37      	ldr	r3, [pc, #220]	; (800b38c <_strtod_l+0xc00>)
 800b2b0:	f7f5 f8d0 	bl	8000454 <__aeabi_dcmplt>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d000      	beq.n	800b2ba <_strtod_l+0xb2e>
 800b2b8:	e4d4      	b.n	800ac64 <_strtod_l+0x4d8>
 800b2ba:	0020      	movs	r0, r4
 800b2bc:	0029      	movs	r1, r5
 800b2be:	4a34      	ldr	r2, [pc, #208]	; (800b390 <_strtod_l+0xc04>)
 800b2c0:	4b2a      	ldr	r3, [pc, #168]	; (800b36c <_strtod_l+0xbe0>)
 800b2c2:	f7f5 f8db 	bl	800047c <__aeabi_dcmpgt>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d090      	beq.n	800b1ec <_strtod_l+0xa60>
 800b2ca:	e4cb      	b.n	800ac64 <_strtod_l+0x4d8>
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d02b      	beq.n	800b32a <_strtod_l+0xb9e>
 800b2d2:	23d4      	movs	r3, #212	; 0xd4
 800b2d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2d6:	04db      	lsls	r3, r3, #19
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d826      	bhi.n	800b32a <_strtod_l+0xb9e>
 800b2dc:	0020      	movs	r0, r4
 800b2de:	0029      	movs	r1, r5
 800b2e0:	4a2c      	ldr	r2, [pc, #176]	; (800b394 <_strtod_l+0xc08>)
 800b2e2:	4b2d      	ldr	r3, [pc, #180]	; (800b398 <_strtod_l+0xc0c>)
 800b2e4:	f7f5 f8c0 	bl	8000468 <__aeabi_dcmple>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d017      	beq.n	800b31c <_strtod_l+0xb90>
 800b2ec:	0020      	movs	r0, r4
 800b2ee:	0029      	movs	r1, r5
 800b2f0:	f7f5 f926 	bl	8000540 <__aeabi_d2uiz>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d100      	bne.n	800b2fa <_strtod_l+0xb6e>
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	f7f7 f87f 	bl	80023fc <__aeabi_ui2d>
 800b2fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b300:	0004      	movs	r4, r0
 800b302:	000b      	movs	r3, r1
 800b304:	000d      	movs	r5, r1
 800b306:	2a00      	cmp	r2, #0
 800b308:	d122      	bne.n	800b350 <_strtod_l+0xbc4>
 800b30a:	2280      	movs	r2, #128	; 0x80
 800b30c:	0612      	lsls	r2, r2, #24
 800b30e:	188b      	adds	r3, r1, r2
 800b310:	9016      	str	r0, [sp, #88]	; 0x58
 800b312:	9317      	str	r3, [sp, #92]	; 0x5c
 800b314:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b318:	9212      	str	r2, [sp, #72]	; 0x48
 800b31a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b31c:	22d6      	movs	r2, #214	; 0xd6
 800b31e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b320:	04d2      	lsls	r2, r2, #19
 800b322:	189b      	adds	r3, r3, r2
 800b324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b326:	1a9b      	subs	r3, r3, r2
 800b328:	9313      	str	r3, [sp, #76]	; 0x4c
 800b32a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b32c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b32e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b330:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b332:	f001 fb25 	bl	800c980 <__ulp>
 800b336:	0002      	movs	r2, r0
 800b338:	000b      	movs	r3, r1
 800b33a:	0030      	movs	r0, r6
 800b33c:	0039      	movs	r1, r7
 800b33e:	f7f6 f995 	bl	800166c <__aeabi_dmul>
 800b342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b344:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b346:	f7f5 fa37 	bl	80007b8 <__aeabi_dadd>
 800b34a:	0006      	movs	r6, r0
 800b34c:	000f      	movs	r7, r1
 800b34e:	e78f      	b.n	800b270 <_strtod_l+0xae4>
 800b350:	0002      	movs	r2, r0
 800b352:	9216      	str	r2, [sp, #88]	; 0x58
 800b354:	9317      	str	r3, [sp, #92]	; 0x5c
 800b356:	e7dd      	b.n	800b314 <_strtod_l+0xb88>
 800b358:	4b10      	ldr	r3, [pc, #64]	; (800b39c <_strtod_l+0xc10>)
 800b35a:	f7f5 f87b 	bl	8000454 <__aeabi_dcmplt>
 800b35e:	e7b2      	b.n	800b2c6 <_strtod_l+0xb3a>
 800b360:	fff00000 	.word	0xfff00000
 800b364:	000fffff 	.word	0x000fffff
 800b368:	3ff00000 	.word	0x3ff00000
 800b36c:	3fe00000 	.word	0x3fe00000
 800b370:	7ff00000 	.word	0x7ff00000
 800b374:	7fe00000 	.word	0x7fe00000
 800b378:	fcb00000 	.word	0xfcb00000
 800b37c:	7c9fffff 	.word	0x7c9fffff
 800b380:	7fefffff 	.word	0x7fefffff
 800b384:	bff00000 	.word	0xbff00000
 800b388:	94a03595 	.word	0x94a03595
 800b38c:	3fdfffff 	.word	0x3fdfffff
 800b390:	35afe535 	.word	0x35afe535
 800b394:	ffc00000 	.word	0xffc00000
 800b398:	41dfffff 	.word	0x41dfffff
 800b39c:	3fcfffff 	.word	0x3fcfffff

0800b3a0 <_strtod_r>:
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	4b02      	ldr	r3, [pc, #8]	; (800b3ac <_strtod_r+0xc>)
 800b3a4:	f7ff f9f2 	bl	800a78c <_strtod_l>
 800b3a8:	bd10      	pop	{r4, pc}
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	2000043c 	.word	0x2000043c

0800b3b0 <strtod>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	4c04      	ldr	r4, [pc, #16]	; (800b3c4 <strtod+0x14>)
 800b3b4:	000a      	movs	r2, r1
 800b3b6:	0001      	movs	r1, r0
 800b3b8:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <strtod+0x18>)
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	f7ff f9e6 	bl	800a78c <_strtod_l>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	200006c8 	.word	0x200006c8
 800b3c8:	2000043c 	.word	0x2000043c

0800b3cc <_strtol_l.constprop.0>:
 800b3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	001e      	movs	r6, r3
 800b3d2:	9005      	str	r0, [sp, #20]
 800b3d4:	9101      	str	r1, [sp, #4]
 800b3d6:	9202      	str	r2, [sp, #8]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d048      	beq.n	800b46e <_strtol_l.constprop.0+0xa2>
 800b3dc:	000b      	movs	r3, r1
 800b3de:	2e24      	cmp	r6, #36	; 0x24
 800b3e0:	d845      	bhi.n	800b46e <_strtol_l.constprop.0+0xa2>
 800b3e2:	4a3b      	ldr	r2, [pc, #236]	; (800b4d0 <_strtol_l.constprop.0+0x104>)
 800b3e4:	2108      	movs	r1, #8
 800b3e6:	4694      	mov	ip, r2
 800b3e8:	001a      	movs	r2, r3
 800b3ea:	4660      	mov	r0, ip
 800b3ec:	7814      	ldrb	r4, [r2, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	5d00      	ldrb	r0, [r0, r4]
 800b3f2:	001d      	movs	r5, r3
 800b3f4:	0007      	movs	r7, r0
 800b3f6:	400f      	ands	r7, r1
 800b3f8:	4208      	tst	r0, r1
 800b3fa:	d1f5      	bne.n	800b3e8 <_strtol_l.constprop.0+0x1c>
 800b3fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b3fe:	d13d      	bne.n	800b47c <_strtol_l.constprop.0+0xb0>
 800b400:	2701      	movs	r7, #1
 800b402:	781c      	ldrb	r4, [r3, #0]
 800b404:	1c95      	adds	r5, r2, #2
 800b406:	2e00      	cmp	r6, #0
 800b408:	d05e      	beq.n	800b4c8 <_strtol_l.constprop.0+0xfc>
 800b40a:	2e10      	cmp	r6, #16
 800b40c:	d109      	bne.n	800b422 <_strtol_l.constprop.0+0x56>
 800b40e:	2c30      	cmp	r4, #48	; 0x30
 800b410:	d107      	bne.n	800b422 <_strtol_l.constprop.0+0x56>
 800b412:	2220      	movs	r2, #32
 800b414:	782b      	ldrb	r3, [r5, #0]
 800b416:	4393      	bics	r3, r2
 800b418:	2b58      	cmp	r3, #88	; 0x58
 800b41a:	d150      	bne.n	800b4be <_strtol_l.constprop.0+0xf2>
 800b41c:	2610      	movs	r6, #16
 800b41e:	786c      	ldrb	r4, [r5, #1]
 800b420:	3502      	adds	r5, #2
 800b422:	4b2c      	ldr	r3, [pc, #176]	; (800b4d4 <_strtol_l.constprop.0+0x108>)
 800b424:	0031      	movs	r1, r6
 800b426:	18fb      	adds	r3, r7, r3
 800b428:	0018      	movs	r0, r3
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	f7f4 ff0c 	bl	8000248 <__aeabi_uidivmod>
 800b430:	2200      	movs	r2, #0
 800b432:	9104      	str	r1, [sp, #16]
 800b434:	2101      	movs	r1, #1
 800b436:	4684      	mov	ip, r0
 800b438:	0010      	movs	r0, r2
 800b43a:	4249      	negs	r1, r1
 800b43c:	0023      	movs	r3, r4
 800b43e:	3b30      	subs	r3, #48	; 0x30
 800b440:	2b09      	cmp	r3, #9
 800b442:	d903      	bls.n	800b44c <_strtol_l.constprop.0+0x80>
 800b444:	3b11      	subs	r3, #17
 800b446:	2b19      	cmp	r3, #25
 800b448:	d81d      	bhi.n	800b486 <_strtol_l.constprop.0+0xba>
 800b44a:	330a      	adds	r3, #10
 800b44c:	429e      	cmp	r6, r3
 800b44e:	dd1e      	ble.n	800b48e <_strtol_l.constprop.0+0xc2>
 800b450:	1c54      	adds	r4, r2, #1
 800b452:	d009      	beq.n	800b468 <_strtol_l.constprop.0+0x9c>
 800b454:	000a      	movs	r2, r1
 800b456:	4584      	cmp	ip, r0
 800b458:	d306      	bcc.n	800b468 <_strtol_l.constprop.0+0x9c>
 800b45a:	d102      	bne.n	800b462 <_strtol_l.constprop.0+0x96>
 800b45c:	9c04      	ldr	r4, [sp, #16]
 800b45e:	429c      	cmp	r4, r3
 800b460:	db02      	blt.n	800b468 <_strtol_l.constprop.0+0x9c>
 800b462:	2201      	movs	r2, #1
 800b464:	4370      	muls	r0, r6
 800b466:	1818      	adds	r0, r3, r0
 800b468:	782c      	ldrb	r4, [r5, #0]
 800b46a:	3501      	adds	r5, #1
 800b46c:	e7e6      	b.n	800b43c <_strtol_l.constprop.0+0x70>
 800b46e:	f000 fa7d 	bl	800b96c <__errno>
 800b472:	2316      	movs	r3, #22
 800b474:	6003      	str	r3, [r0, #0]
 800b476:	2000      	movs	r0, #0
 800b478:	b007      	add	sp, #28
 800b47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47c:	2c2b      	cmp	r4, #43	; 0x2b
 800b47e:	d1c2      	bne.n	800b406 <_strtol_l.constprop.0+0x3a>
 800b480:	781c      	ldrb	r4, [r3, #0]
 800b482:	1c95      	adds	r5, r2, #2
 800b484:	e7bf      	b.n	800b406 <_strtol_l.constprop.0+0x3a>
 800b486:	0023      	movs	r3, r4
 800b488:	3b61      	subs	r3, #97	; 0x61
 800b48a:	2b19      	cmp	r3, #25
 800b48c:	d9dd      	bls.n	800b44a <_strtol_l.constprop.0+0x7e>
 800b48e:	1c53      	adds	r3, r2, #1
 800b490:	d109      	bne.n	800b4a6 <_strtol_l.constprop.0+0xda>
 800b492:	2322      	movs	r3, #34	; 0x22
 800b494:	9a05      	ldr	r2, [sp, #20]
 800b496:	9803      	ldr	r0, [sp, #12]
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0eb      	beq.n	800b478 <_strtol_l.constprop.0+0xac>
 800b4a0:	1e6b      	subs	r3, r5, #1
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	e007      	b.n	800b4b6 <_strtol_l.constprop.0+0xea>
 800b4a6:	2f00      	cmp	r7, #0
 800b4a8:	d000      	beq.n	800b4ac <_strtol_l.constprop.0+0xe0>
 800b4aa:	4240      	negs	r0, r0
 800b4ac:	9b02      	ldr	r3, [sp, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0e2      	beq.n	800b478 <_strtol_l.constprop.0+0xac>
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d1f4      	bne.n	800b4a0 <_strtol_l.constprop.0+0xd4>
 800b4b6:	9b02      	ldr	r3, [sp, #8]
 800b4b8:	9a01      	ldr	r2, [sp, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e7dc      	b.n	800b478 <_strtol_l.constprop.0+0xac>
 800b4be:	2430      	movs	r4, #48	; 0x30
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	d1ae      	bne.n	800b422 <_strtol_l.constprop.0+0x56>
 800b4c4:	3608      	adds	r6, #8
 800b4c6:	e7ac      	b.n	800b422 <_strtol_l.constprop.0+0x56>
 800b4c8:	2c30      	cmp	r4, #48	; 0x30
 800b4ca:	d0a2      	beq.n	800b412 <_strtol_l.constprop.0+0x46>
 800b4cc:	260a      	movs	r6, #10
 800b4ce:	e7a8      	b.n	800b422 <_strtol_l.constprop.0+0x56>
 800b4d0:	08013eb1 	.word	0x08013eb1
 800b4d4:	7fffffff 	.word	0x7fffffff

0800b4d8 <_strtol_r>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	f7ff ff77 	bl	800b3cc <_strtol_l.constprop.0>
 800b4de:	bd10      	pop	{r4, pc}

0800b4e0 <strtol>:
 800b4e0:	b510      	push	{r4, lr}
 800b4e2:	4c04      	ldr	r4, [pc, #16]	; (800b4f4 <strtol+0x14>)
 800b4e4:	0013      	movs	r3, r2
 800b4e6:	000a      	movs	r2, r1
 800b4e8:	0001      	movs	r1, r0
 800b4ea:	6820      	ldr	r0, [r4, #0]
 800b4ec:	f7ff ff6e 	bl	800b3cc <_strtol_l.constprop.0>
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	200006c8 	.word	0x200006c8

0800b4f8 <std>:
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	b510      	push	{r4, lr}
 800b4fc:	0004      	movs	r4, r0
 800b4fe:	6003      	str	r3, [r0, #0]
 800b500:	6043      	str	r3, [r0, #4]
 800b502:	6083      	str	r3, [r0, #8]
 800b504:	8181      	strh	r1, [r0, #12]
 800b506:	6643      	str	r3, [r0, #100]	; 0x64
 800b508:	81c2      	strh	r2, [r0, #14]
 800b50a:	6103      	str	r3, [r0, #16]
 800b50c:	6143      	str	r3, [r0, #20]
 800b50e:	6183      	str	r3, [r0, #24]
 800b510:	0019      	movs	r1, r3
 800b512:	2208      	movs	r2, #8
 800b514:	305c      	adds	r0, #92	; 0x5c
 800b516:	f000 f97d 	bl	800b814 <memset>
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <std+0x50>)
 800b51c:	61e4      	str	r4, [r4, #28]
 800b51e:	6223      	str	r3, [r4, #32]
 800b520:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <std+0x54>)
 800b522:	6263      	str	r3, [r4, #36]	; 0x24
 800b524:	4b0a      	ldr	r3, [pc, #40]	; (800b550 <std+0x58>)
 800b526:	62a3      	str	r3, [r4, #40]	; 0x28
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <std+0x5c>)
 800b52a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <std+0x60>)
 800b52e:	429c      	cmp	r4, r3
 800b530:	d005      	beq.n	800b53e <std+0x46>
 800b532:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <std+0x64>)
 800b534:	429c      	cmp	r4, r3
 800b536:	d002      	beq.n	800b53e <std+0x46>
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <std+0x68>)
 800b53a:	429c      	cmp	r4, r3
 800b53c:	d103      	bne.n	800b546 <std+0x4e>
 800b53e:	0020      	movs	r0, r4
 800b540:	3058      	adds	r0, #88	; 0x58
 800b542:	f000 fa3d 	bl	800b9c0 <__retarget_lock_init_recursive>
 800b546:	bd10      	pop	{r4, pc}
 800b548:	0800b779 	.word	0x0800b779
 800b54c:	0800b7a5 	.word	0x0800b7a5
 800b550:	0800b7dd 	.word	0x0800b7dd
 800b554:	0800b809 	.word	0x0800b809
 800b558:	20000c30 	.word	0x20000c30
 800b55c:	20000c98 	.word	0x20000c98
 800b560:	20000d00 	.word	0x20000d00

0800b564 <stdio_exit_handler>:
 800b564:	b510      	push	{r4, lr}
 800b566:	4a03      	ldr	r2, [pc, #12]	; (800b574 <stdio_exit_handler+0x10>)
 800b568:	4903      	ldr	r1, [pc, #12]	; (800b578 <stdio_exit_handler+0x14>)
 800b56a:	4804      	ldr	r0, [pc, #16]	; (800b57c <stdio_exit_handler+0x18>)
 800b56c:	f000 f86c 	bl	800b648 <_fwalk_sglue>
 800b570:	bd10      	pop	{r4, pc}
 800b572:	46c0      	nop			; (mov r8, r8)
 800b574:	20000430 	.word	0x20000430
 800b578:	0800f4c1 	.word	0x0800f4c1
 800b57c:	200005a8 	.word	0x200005a8

0800b580 <cleanup_stdio>:
 800b580:	6841      	ldr	r1, [r0, #4]
 800b582:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <cleanup_stdio+0x30>)
 800b584:	b510      	push	{r4, lr}
 800b586:	0004      	movs	r4, r0
 800b588:	4299      	cmp	r1, r3
 800b58a:	d001      	beq.n	800b590 <cleanup_stdio+0x10>
 800b58c:	f003 ff98 	bl	800f4c0 <_fclose_r>
 800b590:	68a1      	ldr	r1, [r4, #8]
 800b592:	4b08      	ldr	r3, [pc, #32]	; (800b5b4 <cleanup_stdio+0x34>)
 800b594:	4299      	cmp	r1, r3
 800b596:	d002      	beq.n	800b59e <cleanup_stdio+0x1e>
 800b598:	0020      	movs	r0, r4
 800b59a:	f003 ff91 	bl	800f4c0 <_fclose_r>
 800b59e:	68e1      	ldr	r1, [r4, #12]
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <cleanup_stdio+0x38>)
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	d002      	beq.n	800b5ac <cleanup_stdio+0x2c>
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	f003 ff8a 	bl	800f4c0 <_fclose_r>
 800b5ac:	bd10      	pop	{r4, pc}
 800b5ae:	46c0      	nop			; (mov r8, r8)
 800b5b0:	20000c30 	.word	0x20000c30
 800b5b4:	20000c98 	.word	0x20000c98
 800b5b8:	20000d00 	.word	0x20000d00

0800b5bc <global_stdio_init.part.0>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <global_stdio_init.part.0+0x28>)
 800b5c0:	4a09      	ldr	r2, [pc, #36]	; (800b5e8 <global_stdio_init.part.0+0x2c>)
 800b5c2:	2104      	movs	r1, #4
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	4809      	ldr	r0, [pc, #36]	; (800b5ec <global_stdio_init.part.0+0x30>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f7ff ff95 	bl	800b4f8 <std>
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	2109      	movs	r1, #9
 800b5d2:	4807      	ldr	r0, [pc, #28]	; (800b5f0 <global_stdio_init.part.0+0x34>)
 800b5d4:	f7ff ff90 	bl	800b4f8 <std>
 800b5d8:	2202      	movs	r2, #2
 800b5da:	2112      	movs	r1, #18
 800b5dc:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <global_stdio_init.part.0+0x38>)
 800b5de:	f7ff ff8b 	bl	800b4f8 <std>
 800b5e2:	bd10      	pop	{r4, pc}
 800b5e4:	20000d68 	.word	0x20000d68
 800b5e8:	0800b565 	.word	0x0800b565
 800b5ec:	20000c30 	.word	0x20000c30
 800b5f0:	20000c98 	.word	0x20000c98
 800b5f4:	20000d00 	.word	0x20000d00

0800b5f8 <__sfp_lock_acquire>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	4802      	ldr	r0, [pc, #8]	; (800b604 <__sfp_lock_acquire+0xc>)
 800b5fc:	f000 f9e2 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800b600:	bd10      	pop	{r4, pc}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	20000d72 	.word	0x20000d72

0800b608 <__sfp_lock_release>:
 800b608:	b510      	push	{r4, lr}
 800b60a:	4802      	ldr	r0, [pc, #8]	; (800b614 <__sfp_lock_release+0xc>)
 800b60c:	f000 f9db 	bl	800b9c6 <__retarget_lock_release_recursive>
 800b610:	bd10      	pop	{r4, pc}
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	20000d72 	.word	0x20000d72

0800b618 <__sinit>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	0004      	movs	r4, r0
 800b61c:	f7ff ffec 	bl	800b5f8 <__sfp_lock_acquire>
 800b620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <__sinit+0x14>
 800b626:	f7ff ffef 	bl	800b608 <__sfp_lock_release>
 800b62a:	bd10      	pop	{r4, pc}
 800b62c:	4b04      	ldr	r3, [pc, #16]	; (800b640 <__sinit+0x28>)
 800b62e:	6363      	str	r3, [r4, #52]	; 0x34
 800b630:	4b04      	ldr	r3, [pc, #16]	; (800b644 <__sinit+0x2c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1f6      	bne.n	800b626 <__sinit+0xe>
 800b638:	f7ff ffc0 	bl	800b5bc <global_stdio_init.part.0>
 800b63c:	e7f3      	b.n	800b626 <__sinit+0xe>
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	0800b581 	.word	0x0800b581
 800b644:	20000d68 	.word	0x20000d68

0800b648 <_fwalk_sglue>:
 800b648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b64a:	0014      	movs	r4, r2
 800b64c:	2600      	movs	r6, #0
 800b64e:	9000      	str	r0, [sp, #0]
 800b650:	9101      	str	r1, [sp, #4]
 800b652:	68a5      	ldr	r5, [r4, #8]
 800b654:	6867      	ldr	r7, [r4, #4]
 800b656:	3f01      	subs	r7, #1
 800b658:	d504      	bpl.n	800b664 <_fwalk_sglue+0x1c>
 800b65a:	6824      	ldr	r4, [r4, #0]
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	d1f8      	bne.n	800b652 <_fwalk_sglue+0xa>
 800b660:	0030      	movs	r0, r6
 800b662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b664:	89ab      	ldrh	r3, [r5, #12]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d908      	bls.n	800b67c <_fwalk_sglue+0x34>
 800b66a:	220e      	movs	r2, #14
 800b66c:	5eab      	ldrsh	r3, [r5, r2]
 800b66e:	3301      	adds	r3, #1
 800b670:	d004      	beq.n	800b67c <_fwalk_sglue+0x34>
 800b672:	0029      	movs	r1, r5
 800b674:	9800      	ldr	r0, [sp, #0]
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	4798      	blx	r3
 800b67a:	4306      	orrs	r6, r0
 800b67c:	3568      	adds	r5, #104	; 0x68
 800b67e:	e7ea      	b.n	800b656 <_fwalk_sglue+0xe>

0800b680 <snprintf>:
 800b680:	b40c      	push	{r2, r3}
 800b682:	b530      	push	{r4, r5, lr}
 800b684:	4b17      	ldr	r3, [pc, #92]	; (800b6e4 <snprintf+0x64>)
 800b686:	000c      	movs	r4, r1
 800b688:	681d      	ldr	r5, [r3, #0]
 800b68a:	b09d      	sub	sp, #116	; 0x74
 800b68c:	2900      	cmp	r1, #0
 800b68e:	da08      	bge.n	800b6a2 <snprintf+0x22>
 800b690:	238b      	movs	r3, #139	; 0x8b
 800b692:	2001      	movs	r0, #1
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	4240      	negs	r0, r0
 800b698:	b01d      	add	sp, #116	; 0x74
 800b69a:	bc30      	pop	{r4, r5}
 800b69c:	bc08      	pop	{r3}
 800b69e:	b002      	add	sp, #8
 800b6a0:	4718      	bx	r3
 800b6a2:	2382      	movs	r3, #130	; 0x82
 800b6a4:	466a      	mov	r2, sp
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	8293      	strh	r3, [r2, #20]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9002      	str	r0, [sp, #8]
 800b6ae:	9006      	str	r0, [sp, #24]
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	d000      	beq.n	800b6b6 <snprintf+0x36>
 800b6b4:	1e4b      	subs	r3, r1, #1
 800b6b6:	9304      	str	r3, [sp, #16]
 800b6b8:	9307      	str	r3, [sp, #28]
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	466a      	mov	r2, sp
 800b6be:	425b      	negs	r3, r3
 800b6c0:	82d3      	strh	r3, [r2, #22]
 800b6c2:	0028      	movs	r0, r5
 800b6c4:	ab21      	add	r3, sp, #132	; 0x84
 800b6c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b6c8:	a902      	add	r1, sp, #8
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	f001 fa9a 	bl	800cc04 <_svfprintf_r>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	da01      	bge.n	800b6d8 <snprintf+0x58>
 800b6d4:	238b      	movs	r3, #139	; 0x8b
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	2c00      	cmp	r4, #0
 800b6da:	d0dd      	beq.n	800b698 <snprintf+0x18>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	e7d9      	b.n	800b698 <snprintf+0x18>
 800b6e4:	200006c8 	.word	0x200006c8

0800b6e8 <sprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b500      	push	{lr}
 800b6ec:	490b      	ldr	r1, [pc, #44]	; (800b71c <sprintf+0x34>)
 800b6ee:	b09c      	sub	sp, #112	; 0x70
 800b6f0:	ab1d      	add	r3, sp, #116	; 0x74
 800b6f2:	9002      	str	r0, [sp, #8]
 800b6f4:	9006      	str	r0, [sp, #24]
 800b6f6:	9107      	str	r1, [sp, #28]
 800b6f8:	9104      	str	r1, [sp, #16]
 800b6fa:	4809      	ldr	r0, [pc, #36]	; (800b720 <sprintf+0x38>)
 800b6fc:	4909      	ldr	r1, [pc, #36]	; (800b724 <sprintf+0x3c>)
 800b6fe:	cb04      	ldmia	r3!, {r2}
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	6800      	ldr	r0, [r0, #0]
 800b704:	a902      	add	r1, sp, #8
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	f001 fa7c 	bl	800cc04 <_svfprintf_r>
 800b70c:	2200      	movs	r2, #0
 800b70e:	9b02      	ldr	r3, [sp, #8]
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	b01c      	add	sp, #112	; 0x70
 800b714:	bc08      	pop	{r3}
 800b716:	b003      	add	sp, #12
 800b718:	4718      	bx	r3
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	7fffffff 	.word	0x7fffffff
 800b720:	200006c8 	.word	0x200006c8
 800b724:	ffff0208 	.word	0xffff0208

0800b728 <sscanf>:
 800b728:	b40e      	push	{r1, r2, r3}
 800b72a:	b530      	push	{r4, r5, lr}
 800b72c:	2381      	movs	r3, #129	; 0x81
 800b72e:	b09c      	sub	sp, #112	; 0x70
 800b730:	466a      	mov	r2, sp
 800b732:	ac1f      	add	r4, sp, #124	; 0x7c
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	cc20      	ldmia	r4!, {r5}
 800b738:	8293      	strh	r3, [r2, #20]
 800b73a:	9002      	str	r0, [sp, #8]
 800b73c:	9006      	str	r0, [sp, #24]
 800b73e:	f7f4 fce1 	bl	8000104 <strlen>
 800b742:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <sscanf+0x48>)
 800b744:	466a      	mov	r2, sp
 800b746:	930a      	str	r3, [sp, #40]	; 0x28
 800b748:	2300      	movs	r3, #0
 800b74a:	9003      	str	r0, [sp, #12]
 800b74c:	9007      	str	r0, [sp, #28]
 800b74e:	4809      	ldr	r0, [pc, #36]	; (800b774 <sscanf+0x4c>)
 800b750:	930e      	str	r3, [sp, #56]	; 0x38
 800b752:	9313      	str	r3, [sp, #76]	; 0x4c
 800b754:	3b01      	subs	r3, #1
 800b756:	82d3      	strh	r3, [r2, #22]
 800b758:	a902      	add	r1, sp, #8
 800b75a:	0023      	movs	r3, r4
 800b75c:	002a      	movs	r2, r5
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9401      	str	r4, [sp, #4]
 800b762:	f002 fc91 	bl	800e088 <__ssvfscanf_r>
 800b766:	b01c      	add	sp, #112	; 0x70
 800b768:	bc30      	pop	{r4, r5}
 800b76a:	bc08      	pop	{r3}
 800b76c:	b003      	add	sp, #12
 800b76e:	4718      	bx	r3
 800b770:	0800b7a1 	.word	0x0800b7a1
 800b774:	200006c8 	.word	0x200006c8

0800b778 <__sread>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	000c      	movs	r4, r1
 800b77c:	250e      	movs	r5, #14
 800b77e:	5f49      	ldrsh	r1, [r1, r5]
 800b780:	f000 f8ba 	bl	800b8f8 <_read_r>
 800b784:	2800      	cmp	r0, #0
 800b786:	db03      	blt.n	800b790 <__sread+0x18>
 800b788:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b78a:	181b      	adds	r3, r3, r0
 800b78c:	6523      	str	r3, [r4, #80]	; 0x50
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	4a02      	ldr	r2, [pc, #8]	; (800b79c <__sread+0x24>)
 800b794:	4013      	ands	r3, r2
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	e7f9      	b.n	800b78e <__sread+0x16>
 800b79a:	46c0      	nop			; (mov r8, r8)
 800b79c:	ffffefff 	.word	0xffffefff

0800b7a0 <__seofread>:
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	4770      	bx	lr

0800b7a4 <__swrite>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	001f      	movs	r7, r3
 800b7a8:	898b      	ldrh	r3, [r1, #12]
 800b7aa:	0005      	movs	r5, r0
 800b7ac:	000c      	movs	r4, r1
 800b7ae:	0016      	movs	r6, r2
 800b7b0:	05db      	lsls	r3, r3, #23
 800b7b2:	d505      	bpl.n	800b7c0 <__swrite+0x1c>
 800b7b4:	230e      	movs	r3, #14
 800b7b6:	5ec9      	ldrsh	r1, [r1, r3]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	f000 f888 	bl	800b8d0 <_lseek_r>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	4a05      	ldr	r2, [pc, #20]	; (800b7d8 <__swrite+0x34>)
 800b7c4:	0028      	movs	r0, r5
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	0032      	movs	r2, r6
 800b7cc:	230e      	movs	r3, #14
 800b7ce:	5ee1      	ldrsh	r1, [r4, r3]
 800b7d0:	003b      	movs	r3, r7
 800b7d2:	f000 f8b7 	bl	800b944 <_write_r>
 800b7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d8:	ffffefff 	.word	0xffffefff

0800b7dc <__sseek>:
 800b7dc:	b570      	push	{r4, r5, r6, lr}
 800b7de:	000c      	movs	r4, r1
 800b7e0:	250e      	movs	r5, #14
 800b7e2:	5f49      	ldrsh	r1, [r1, r5]
 800b7e4:	f000 f874 	bl	800b8d0 <_lseek_r>
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	1c42      	adds	r2, r0, #1
 800b7ec:	d103      	bne.n	800b7f6 <__sseek+0x1a>
 800b7ee:	4a05      	ldr	r2, [pc, #20]	; (800b804 <__sseek+0x28>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	bd70      	pop	{r4, r5, r6, pc}
 800b7f6:	2280      	movs	r2, #128	; 0x80
 800b7f8:	0152      	lsls	r2, r2, #5
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	81a3      	strh	r3, [r4, #12]
 800b7fe:	6520      	str	r0, [r4, #80]	; 0x50
 800b800:	e7f8      	b.n	800b7f4 <__sseek+0x18>
 800b802:	46c0      	nop			; (mov r8, r8)
 800b804:	ffffefff 	.word	0xffffefff

0800b808 <__sclose>:
 800b808:	b510      	push	{r4, lr}
 800b80a:	230e      	movs	r3, #14
 800b80c:	5ec9      	ldrsh	r1, [r1, r3]
 800b80e:	f000 f84d 	bl	800b8ac <_close_r>
 800b812:	bd10      	pop	{r4, pc}

0800b814 <memset>:
 800b814:	0003      	movs	r3, r0
 800b816:	1882      	adds	r2, r0, r2
 800b818:	4293      	cmp	r3, r2
 800b81a:	d100      	bne.n	800b81e <memset+0xa>
 800b81c:	4770      	bx	lr
 800b81e:	7019      	strb	r1, [r3, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	e7f9      	b.n	800b818 <memset+0x4>

0800b824 <strncmp>:
 800b824:	b530      	push	{r4, r5, lr}
 800b826:	0005      	movs	r5, r0
 800b828:	1e10      	subs	r0, r2, #0
 800b82a:	d00b      	beq.n	800b844 <strncmp+0x20>
 800b82c:	2400      	movs	r4, #0
 800b82e:	3a01      	subs	r2, #1
 800b830:	5d2b      	ldrb	r3, [r5, r4]
 800b832:	5d08      	ldrb	r0, [r1, r4]
 800b834:	4283      	cmp	r3, r0
 800b836:	d104      	bne.n	800b842 <strncmp+0x1e>
 800b838:	42a2      	cmp	r2, r4
 800b83a:	d002      	beq.n	800b842 <strncmp+0x1e>
 800b83c:	3401      	adds	r4, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1f6      	bne.n	800b830 <strncmp+0xc>
 800b842:	1a18      	subs	r0, r3, r0
 800b844:	bd30      	pop	{r4, r5, pc}

0800b846 <strncpy>:
 800b846:	0003      	movs	r3, r0
 800b848:	b530      	push	{r4, r5, lr}
 800b84a:	001d      	movs	r5, r3
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d006      	beq.n	800b85e <strncpy+0x18>
 800b850:	780c      	ldrb	r4, [r1, #0]
 800b852:	3a01      	subs	r2, #1
 800b854:	3301      	adds	r3, #1
 800b856:	702c      	strb	r4, [r5, #0]
 800b858:	3101      	adds	r1, #1
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	d1f5      	bne.n	800b84a <strncpy+0x4>
 800b85e:	2100      	movs	r1, #0
 800b860:	189a      	adds	r2, r3, r2
 800b862:	4293      	cmp	r3, r2
 800b864:	d100      	bne.n	800b868 <strncpy+0x22>
 800b866:	bd30      	pop	{r4, r5, pc}
 800b868:	7019      	strb	r1, [r3, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	e7f9      	b.n	800b862 <strncpy+0x1c>

0800b86e <strstr>:
 800b86e:	780a      	ldrb	r2, [r1, #0]
 800b870:	b530      	push	{r4, r5, lr}
 800b872:	2a00      	cmp	r2, #0
 800b874:	d10c      	bne.n	800b890 <strstr+0x22>
 800b876:	bd30      	pop	{r4, r5, pc}
 800b878:	429a      	cmp	r2, r3
 800b87a:	d108      	bne.n	800b88e <strstr+0x20>
 800b87c:	2301      	movs	r3, #1
 800b87e:	5ccc      	ldrb	r4, [r1, r3]
 800b880:	2c00      	cmp	r4, #0
 800b882:	d0f8      	beq.n	800b876 <strstr+0x8>
 800b884:	5cc5      	ldrb	r5, [r0, r3]
 800b886:	42a5      	cmp	r5, r4
 800b888:	d101      	bne.n	800b88e <strstr+0x20>
 800b88a:	3301      	adds	r3, #1
 800b88c:	e7f7      	b.n	800b87e <strstr+0x10>
 800b88e:	3001      	adds	r0, #1
 800b890:	7803      	ldrb	r3, [r0, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1f0      	bne.n	800b878 <strstr+0xa>
 800b896:	0018      	movs	r0, r3
 800b898:	e7ed      	b.n	800b876 <strstr+0x8>
	...

0800b89c <__locale_mb_cur_max>:
 800b89c:	2294      	movs	r2, #148	; 0x94
 800b89e:	4b02      	ldr	r3, [pc, #8]	; (800b8a8 <__locale_mb_cur_max+0xc>)
 800b8a0:	0052      	lsls	r2, r2, #1
 800b8a2:	5c98      	ldrb	r0, [r3, r2]
 800b8a4:	4770      	bx	lr
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	2000043c 	.word	0x2000043c

0800b8ac <_close_r>:
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	4d06      	ldr	r5, [pc, #24]	; (800b8cc <_close_r+0x20>)
 800b8b2:	0004      	movs	r4, r0
 800b8b4:	0008      	movs	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f8 f889 	bl	80039ce <_close>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d103      	bne.n	800b8c8 <_close_r+0x1c>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d000      	beq.n	800b8c8 <_close_r+0x1c>
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	46c0      	nop			; (mov r8, r8)
 800b8cc:	20000d6c 	.word	0x20000d6c

0800b8d0 <_lseek_r>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	0004      	movs	r4, r0
 800b8d4:	0008      	movs	r0, r1
 800b8d6:	0011      	movs	r1, r2
 800b8d8:	001a      	movs	r2, r3
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4d05      	ldr	r5, [pc, #20]	; (800b8f4 <_lseek_r+0x24>)
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	f7f8 f896 	bl	8003a10 <_lseek>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d103      	bne.n	800b8f0 <_lseek_r+0x20>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d000      	beq.n	800b8f0 <_lseek_r+0x20>
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	46c0      	nop			; (mov r8, r8)
 800b8f4:	20000d6c 	.word	0x20000d6c

0800b8f8 <_read_r>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	0004      	movs	r4, r0
 800b8fc:	0008      	movs	r0, r1
 800b8fe:	0011      	movs	r1, r2
 800b900:	001a      	movs	r2, r3
 800b902:	2300      	movs	r3, #0
 800b904:	4d05      	ldr	r5, [pc, #20]	; (800b91c <_read_r+0x24>)
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	f7f8 f828 	bl	800395c <_read>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d103      	bne.n	800b918 <_read_r+0x20>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d000      	beq.n	800b918 <_read_r+0x20>
 800b916:	6023      	str	r3, [r4, #0]
 800b918:	bd70      	pop	{r4, r5, r6, pc}
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	20000d6c 	.word	0x20000d6c

0800b920 <_sbrk_r>:
 800b920:	2300      	movs	r3, #0
 800b922:	b570      	push	{r4, r5, r6, lr}
 800b924:	4d06      	ldr	r5, [pc, #24]	; (800b940 <_sbrk_r+0x20>)
 800b926:	0004      	movs	r4, r0
 800b928:	0008      	movs	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7f8 f87c 	bl	8003a28 <_sbrk>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d103      	bne.n	800b93c <_sbrk_r+0x1c>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d000      	beq.n	800b93c <_sbrk_r+0x1c>
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	20000d6c 	.word	0x20000d6c

0800b944 <_write_r>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	0004      	movs	r4, r0
 800b948:	0008      	movs	r0, r1
 800b94a:	0011      	movs	r1, r2
 800b94c:	001a      	movs	r2, r3
 800b94e:	2300      	movs	r3, #0
 800b950:	4d05      	ldr	r5, [pc, #20]	; (800b968 <_write_r+0x24>)
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f8 f81f 	bl	8003996 <_write>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d103      	bne.n	800b964 <_write_r+0x20>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d000      	beq.n	800b964 <_write_r+0x20>
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	bd70      	pop	{r4, r5, r6, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	20000d6c 	.word	0x20000d6c

0800b96c <__errno>:
 800b96c:	4b01      	ldr	r3, [pc, #4]	; (800b974 <__errno+0x8>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	4770      	bx	lr
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	200006c8 	.word	0x200006c8

0800b978 <__libc_init_array>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	2600      	movs	r6, #0
 800b97c:	4c0c      	ldr	r4, [pc, #48]	; (800b9b0 <__libc_init_array+0x38>)
 800b97e:	4d0d      	ldr	r5, [pc, #52]	; (800b9b4 <__libc_init_array+0x3c>)
 800b980:	1b64      	subs	r4, r4, r5
 800b982:	10a4      	asrs	r4, r4, #2
 800b984:	42a6      	cmp	r6, r4
 800b986:	d109      	bne.n	800b99c <__libc_init_array+0x24>
 800b988:	2600      	movs	r6, #0
 800b98a:	f006 fcc5 	bl	8012318 <_init>
 800b98e:	4c0a      	ldr	r4, [pc, #40]	; (800b9b8 <__libc_init_array+0x40>)
 800b990:	4d0a      	ldr	r5, [pc, #40]	; (800b9bc <__libc_init_array+0x44>)
 800b992:	1b64      	subs	r4, r4, r5
 800b994:	10a4      	asrs	r4, r4, #2
 800b996:	42a6      	cmp	r6, r4
 800b998:	d105      	bne.n	800b9a6 <__libc_init_array+0x2e>
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	00b3      	lsls	r3, r6, #2
 800b99e:	58eb      	ldr	r3, [r5, r3]
 800b9a0:	4798      	blx	r3
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	e7ee      	b.n	800b984 <__libc_init_array+0xc>
 800b9a6:	00b3      	lsls	r3, r6, #2
 800b9a8:	58eb      	ldr	r3, [r5, r3]
 800b9aa:	4798      	blx	r3
 800b9ac:	3601      	adds	r6, #1
 800b9ae:	e7f2      	b.n	800b996 <__libc_init_array+0x1e>
 800b9b0:	080142cc 	.word	0x080142cc
 800b9b4:	080142cc 	.word	0x080142cc
 800b9b8:	080142d4 	.word	0x080142d4
 800b9bc:	080142cc 	.word	0x080142cc

0800b9c0 <__retarget_lock_init_recursive>:
 800b9c0:	4770      	bx	lr

0800b9c2 <__retarget_lock_close_recursive>:
 800b9c2:	4770      	bx	lr

0800b9c4 <__retarget_lock_acquire_recursive>:
 800b9c4:	4770      	bx	lr

0800b9c6 <__retarget_lock_release_recursive>:
 800b9c6:	4770      	bx	lr

0800b9c8 <sysconf>:
 800b9c8:	2380      	movs	r3, #128	; 0x80
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	2808      	cmp	r0, #8
 800b9ce:	d004      	beq.n	800b9da <sysconf+0x12>
 800b9d0:	f7ff ffcc 	bl	800b96c <__errno>
 800b9d4:	2316      	movs	r3, #22
 800b9d6:	6003      	str	r3, [r0, #0]
 800b9d8:	3b17      	subs	r3, #23
 800b9da:	0018      	movs	r0, r3
 800b9dc:	bd10      	pop	{r4, pc}

0800b9de <memcpy>:
 800b9de:	2300      	movs	r3, #0
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d100      	bne.n	800b9e8 <memcpy+0xa>
 800b9e6:	bd10      	pop	{r4, pc}
 800b9e8:	5ccc      	ldrb	r4, [r1, r3]
 800b9ea:	54c4      	strb	r4, [r0, r3]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	e7f8      	b.n	800b9e2 <memcpy+0x4>

0800b9f0 <nan>:
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	4901      	ldr	r1, [pc, #4]	; (800b9f8 <nan+0x8>)
 800b9f4:	4770      	bx	lr
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	7ff80000 	.word	0x7ff80000

0800b9fc <nanf>:
 800b9fc:	4800      	ldr	r0, [pc, #0]	; (800ba00 <nanf+0x4>)
 800b9fe:	4770      	bx	lr
 800ba00:	7fc00000 	.word	0x7fc00000

0800ba04 <register_fini>:
 800ba04:	4b03      	ldr	r3, [pc, #12]	; (800ba14 <register_fini+0x10>)
 800ba06:	b510      	push	{r4, lr}
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <register_fini+0xe>
 800ba0c:	4802      	ldr	r0, [pc, #8]	; (800ba18 <register_fini+0x14>)
 800ba0e:	f000 f805 	bl	800ba1c <atexit>
 800ba12:	bd10      	pop	{r4, pc}
 800ba14:	00000000 	.word	0x00000000
 800ba18:	0800f779 	.word	0x0800f779

0800ba1c <atexit>:
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	b510      	push	{r4, lr}
 800ba20:	0001      	movs	r1, r0
 800ba22:	001a      	movs	r2, r3
 800ba24:	0018      	movs	r0, r3
 800ba26:	f003 fef9 	bl	800f81c <__register_exitproc>
 800ba2a:	bd10      	pop	{r4, pc}

0800ba2c <_malloc_trim_r>:
 800ba2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba2e:	0004      	movs	r4, r0
 800ba30:	2008      	movs	r0, #8
 800ba32:	000d      	movs	r5, r1
 800ba34:	f7ff ffc8 	bl	800b9c8 <sysconf>
 800ba38:	0006      	movs	r6, r0
 800ba3a:	0020      	movs	r0, r4
 800ba3c:	f7fe fe7e 	bl	800a73c <__malloc_lock>
 800ba40:	2203      	movs	r2, #3
 800ba42:	4f21      	ldr	r7, [pc, #132]	; (800bac8 <_malloc_trim_r+0x9c>)
 800ba44:	0031      	movs	r1, r6
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	4393      	bics	r3, r2
 800ba4c:	1b58      	subs	r0, r3, r5
 800ba4e:	3811      	subs	r0, #17
 800ba50:	1980      	adds	r0, r0, r6
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	f7f4 fb72 	bl	800013c <__udivsi3>
 800ba58:	1e45      	subs	r5, r0, #1
 800ba5a:	4375      	muls	r5, r6
 800ba5c:	42ae      	cmp	r6, r5
 800ba5e:	dd04      	ble.n	800ba6a <_malloc_trim_r+0x3e>
 800ba60:	0020      	movs	r0, r4
 800ba62:	f7fe fe73 	bl	800a74c <__malloc_unlock>
 800ba66:	2000      	movs	r0, #0
 800ba68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	0020      	movs	r0, r4
 800ba6e:	f7ff ff57 	bl	800b920 <_sbrk_r>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	9a01      	ldr	r2, [sp, #4]
 800ba76:	189b      	adds	r3, r3, r2
 800ba78:	4298      	cmp	r0, r3
 800ba7a:	d1f1      	bne.n	800ba60 <_malloc_trim_r+0x34>
 800ba7c:	0020      	movs	r0, r4
 800ba7e:	4269      	negs	r1, r5
 800ba80:	f7ff ff4e 	bl	800b920 <_sbrk_r>
 800ba84:	3001      	adds	r0, #1
 800ba86:	d110      	bne.n	800baaa <_malloc_trim_r+0x7e>
 800ba88:	2100      	movs	r1, #0
 800ba8a:	0020      	movs	r0, r4
 800ba8c:	f7ff ff48 	bl	800b920 <_sbrk_r>
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	1a81      	subs	r1, r0, r2
 800ba94:	290f      	cmp	r1, #15
 800ba96:	dde3      	ble.n	800ba60 <_malloc_trim_r+0x34>
 800ba98:	4d0c      	ldr	r5, [pc, #48]	; (800bacc <_malloc_trim_r+0xa0>)
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <_malloc_trim_r+0xa4>)
 800ba9c:	682d      	ldr	r5, [r5, #0]
 800ba9e:	1b40      	subs	r0, r0, r5
 800baa0:	6018      	str	r0, [r3, #0]
 800baa2:	2301      	movs	r3, #1
 800baa4:	430b      	orrs	r3, r1
 800baa6:	6053      	str	r3, [r2, #4]
 800baa8:	e7da      	b.n	800ba60 <_malloc_trim_r+0x34>
 800baaa:	2601      	movs	r6, #1
 800baac:	9b01      	ldr	r3, [sp, #4]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	1b5b      	subs	r3, r3, r5
 800bab2:	4333      	orrs	r3, r6
 800bab4:	6053      	str	r3, [r2, #4]
 800bab6:	4a06      	ldr	r2, [pc, #24]	; (800bad0 <_malloc_trim_r+0xa4>)
 800bab8:	0020      	movs	r0, r4
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	1b5b      	subs	r3, r3, r5
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	f7fe fe44 	bl	800a74c <__malloc_unlock>
 800bac4:	0030      	movs	r0, r6
 800bac6:	e7cf      	b.n	800ba68 <_malloc_trim_r+0x3c>
 800bac8:	20000020 	.word	0x20000020
 800bacc:	20000428 	.word	0x20000428
 800bad0:	20000bfc 	.word	0x20000bfc

0800bad4 <_free_r>:
 800bad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bad6:	1e0d      	subs	r5, r1, #0
 800bad8:	9001      	str	r0, [sp, #4]
 800bada:	d02d      	beq.n	800bb38 <_free_r+0x64>
 800badc:	f7fe fe2e 	bl	800a73c <__malloc_lock>
 800bae0:	2301      	movs	r3, #1
 800bae2:	0029      	movs	r1, r5
 800bae4:	469c      	mov	ip, r3
 800bae6:	3908      	subs	r1, #8
 800bae8:	684f      	ldr	r7, [r1, #4]
 800baea:	4662      	mov	r2, ip
 800baec:	003b      	movs	r3, r7
 800baee:	4664      	mov	r4, ip
 800baf0:	4393      	bics	r3, r2
 800baf2:	18c8      	adds	r0, r1, r3
 800baf4:	6845      	ldr	r5, [r0, #4]
 800baf6:	3202      	adds	r2, #2
 800baf8:	4395      	bics	r5, r2
 800bafa:	4a4a      	ldr	r2, [pc, #296]	; (800bc24 <_free_r+0x150>)
 800bafc:	4027      	ands	r7, r4
 800bafe:	6896      	ldr	r6, [r2, #8]
 800bb00:	4286      	cmp	r6, r0
 800bb02:	d11a      	bne.n	800bb3a <_free_r+0x66>
 800bb04:	195b      	adds	r3, r3, r5
 800bb06:	2f00      	cmp	r7, #0
 800bb08:	d106      	bne.n	800bb18 <_free_r+0x44>
 800bb0a:	6808      	ldr	r0, [r1, #0]
 800bb0c:	1a09      	subs	r1, r1, r0
 800bb0e:	688d      	ldr	r5, [r1, #8]
 800bb10:	181b      	adds	r3, r3, r0
 800bb12:	68c8      	ldr	r0, [r1, #12]
 800bb14:	60e8      	str	r0, [r5, #12]
 800bb16:	6085      	str	r5, [r0, #8]
 800bb18:	2001      	movs	r0, #1
 800bb1a:	4318      	orrs	r0, r3
 800bb1c:	6048      	str	r0, [r1, #4]
 800bb1e:	6091      	str	r1, [r2, #8]
 800bb20:	4a41      	ldr	r2, [pc, #260]	; (800bc28 <_free_r+0x154>)
 800bb22:	6812      	ldr	r2, [r2, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d804      	bhi.n	800bb32 <_free_r+0x5e>
 800bb28:	4b40      	ldr	r3, [pc, #256]	; (800bc2c <_free_r+0x158>)
 800bb2a:	9801      	ldr	r0, [sp, #4]
 800bb2c:	6819      	ldr	r1, [r3, #0]
 800bb2e:	f7ff ff7d 	bl	800ba2c <_malloc_trim_r>
 800bb32:	9801      	ldr	r0, [sp, #4]
 800bb34:	f7fe fe0a 	bl	800a74c <__malloc_unlock>
 800bb38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	6045      	str	r5, [r0, #4]
 800bb3e:	42b7      	cmp	r7, r6
 800bb40:	d109      	bne.n	800bb56 <_free_r+0x82>
 800bb42:	680f      	ldr	r7, [r1, #0]
 800bb44:	4c3a      	ldr	r4, [pc, #232]	; (800bc30 <_free_r+0x15c>)
 800bb46:	1bc9      	subs	r1, r1, r7
 800bb48:	19db      	adds	r3, r3, r7
 800bb4a:	688f      	ldr	r7, [r1, #8]
 800bb4c:	42a7      	cmp	r7, r4
 800bb4e:	d02c      	beq.n	800bbaa <_free_r+0xd6>
 800bb50:	68cc      	ldr	r4, [r1, #12]
 800bb52:	60fc      	str	r4, [r7, #12]
 800bb54:	60a7      	str	r7, [r4, #8]
 800bb56:	1947      	adds	r7, r0, r5
 800bb58:	687c      	ldr	r4, [r7, #4]
 800bb5a:	2701      	movs	r7, #1
 800bb5c:	423c      	tst	r4, r7
 800bb5e:	d10b      	bne.n	800bb78 <_free_r+0xa4>
 800bb60:	195b      	adds	r3, r3, r5
 800bb62:	6885      	ldr	r5, [r0, #8]
 800bb64:	2e00      	cmp	r6, #0
 800bb66:	d122      	bne.n	800bbae <_free_r+0xda>
 800bb68:	4c31      	ldr	r4, [pc, #196]	; (800bc30 <_free_r+0x15c>)
 800bb6a:	42a5      	cmp	r5, r4
 800bb6c:	d11f      	bne.n	800bbae <_free_r+0xda>
 800bb6e:	003e      	movs	r6, r7
 800bb70:	6151      	str	r1, [r2, #20]
 800bb72:	6111      	str	r1, [r2, #16]
 800bb74:	60cd      	str	r5, [r1, #12]
 800bb76:	608d      	str	r5, [r1, #8]
 800bb78:	2501      	movs	r5, #1
 800bb7a:	0028      	movs	r0, r5
 800bb7c:	4318      	orrs	r0, r3
 800bb7e:	6048      	str	r0, [r1, #4]
 800bb80:	50cb      	str	r3, [r1, r3]
 800bb82:	2e00      	cmp	r6, #0
 800bb84:	d1d5      	bne.n	800bb32 <_free_r+0x5e>
 800bb86:	2080      	movs	r0, #128	; 0x80
 800bb88:	0080      	lsls	r0, r0, #2
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	d213      	bcs.n	800bbb6 <_free_r+0xe2>
 800bb8e:	08d8      	lsrs	r0, r3, #3
 800bb90:	095b      	lsrs	r3, r3, #5
 800bb92:	409d      	lsls	r5, r3
 800bb94:	6853      	ldr	r3, [r2, #4]
 800bb96:	431d      	orrs	r5, r3
 800bb98:	00c3      	lsls	r3, r0, #3
 800bb9a:	189b      	adds	r3, r3, r2
 800bb9c:	6055      	str	r5, [r2, #4]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	60cb      	str	r3, [r1, #12]
 800bba2:	608a      	str	r2, [r1, #8]
 800bba4:	6099      	str	r1, [r3, #8]
 800bba6:	60d1      	str	r1, [r2, #12]
 800bba8:	e7c3      	b.n	800bb32 <_free_r+0x5e>
 800bbaa:	4666      	mov	r6, ip
 800bbac:	e7d3      	b.n	800bb56 <_free_r+0x82>
 800bbae:	68c0      	ldr	r0, [r0, #12]
 800bbb0:	60e8      	str	r0, [r5, #12]
 800bbb2:	6085      	str	r5, [r0, #8]
 800bbb4:	e7e0      	b.n	800bb78 <_free_r+0xa4>
 800bbb6:	0a5d      	lsrs	r5, r3, #9
 800bbb8:	2d04      	cmp	r5, #4
 800bbba:	d812      	bhi.n	800bbe2 <_free_r+0x10e>
 800bbbc:	0998      	lsrs	r0, r3, #6
 800bbbe:	3038      	adds	r0, #56	; 0x38
 800bbc0:	00c6      	lsls	r6, r0, #3
 800bbc2:	18b6      	adds	r6, r6, r2
 800bbc4:	68b5      	ldr	r5, [r6, #8]
 800bbc6:	2703      	movs	r7, #3
 800bbc8:	42ae      	cmp	r6, r5
 800bbca:	d125      	bne.n	800bc18 <_free_r+0x144>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	1080      	asrs	r0, r0, #2
 800bbd0:	4083      	lsls	r3, r0
 800bbd2:	6850      	ldr	r0, [r2, #4]
 800bbd4:	4303      	orrs	r3, r0
 800bbd6:	6053      	str	r3, [r2, #4]
 800bbd8:	60ce      	str	r6, [r1, #12]
 800bbda:	608d      	str	r5, [r1, #8]
 800bbdc:	60b1      	str	r1, [r6, #8]
 800bbde:	60e9      	str	r1, [r5, #12]
 800bbe0:	e7a7      	b.n	800bb32 <_free_r+0x5e>
 800bbe2:	2d14      	cmp	r5, #20
 800bbe4:	d802      	bhi.n	800bbec <_free_r+0x118>
 800bbe6:	0028      	movs	r0, r5
 800bbe8:	305b      	adds	r0, #91	; 0x5b
 800bbea:	e7e9      	b.n	800bbc0 <_free_r+0xec>
 800bbec:	2d54      	cmp	r5, #84	; 0x54
 800bbee:	d802      	bhi.n	800bbf6 <_free_r+0x122>
 800bbf0:	0b18      	lsrs	r0, r3, #12
 800bbf2:	306e      	adds	r0, #110	; 0x6e
 800bbf4:	e7e4      	b.n	800bbc0 <_free_r+0xec>
 800bbf6:	20aa      	movs	r0, #170	; 0xaa
 800bbf8:	0040      	lsls	r0, r0, #1
 800bbfa:	4285      	cmp	r5, r0
 800bbfc:	d802      	bhi.n	800bc04 <_free_r+0x130>
 800bbfe:	0bd8      	lsrs	r0, r3, #15
 800bc00:	3077      	adds	r0, #119	; 0x77
 800bc02:	e7dd      	b.n	800bbc0 <_free_r+0xec>
 800bc04:	4e0b      	ldr	r6, [pc, #44]	; (800bc34 <_free_r+0x160>)
 800bc06:	207e      	movs	r0, #126	; 0x7e
 800bc08:	42b5      	cmp	r5, r6
 800bc0a:	d8d9      	bhi.n	800bbc0 <_free_r+0xec>
 800bc0c:	0c98      	lsrs	r0, r3, #18
 800bc0e:	307c      	adds	r0, #124	; 0x7c
 800bc10:	e7d6      	b.n	800bbc0 <_free_r+0xec>
 800bc12:	68ad      	ldr	r5, [r5, #8]
 800bc14:	42ae      	cmp	r6, r5
 800bc16:	d003      	beq.n	800bc20 <_free_r+0x14c>
 800bc18:	686a      	ldr	r2, [r5, #4]
 800bc1a:	43ba      	bics	r2, r7
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d8f8      	bhi.n	800bc12 <_free_r+0x13e>
 800bc20:	68ee      	ldr	r6, [r5, #12]
 800bc22:	e7d9      	b.n	800bbd8 <_free_r+0x104>
 800bc24:	20000020 	.word	0x20000020
 800bc28:	2000042c 	.word	0x2000042c
 800bc2c:	20000c2c 	.word	0x20000c2c
 800bc30:	20000028 	.word	0x20000028
 800bc34:	00000554 	.word	0x00000554

0800bc38 <rshift>:
 800bc38:	0002      	movs	r2, r0
 800bc3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3c:	6904      	ldr	r4, [r0, #16]
 800bc3e:	114b      	asrs	r3, r1, #5
 800bc40:	b085      	sub	sp, #20
 800bc42:	3214      	adds	r2, #20
 800bc44:	9302      	str	r3, [sp, #8]
 800bc46:	114d      	asrs	r5, r1, #5
 800bc48:	0013      	movs	r3, r2
 800bc4a:	42ac      	cmp	r4, r5
 800bc4c:	dd32      	ble.n	800bcb4 <rshift+0x7c>
 800bc4e:	261f      	movs	r6, #31
 800bc50:	000f      	movs	r7, r1
 800bc52:	114b      	asrs	r3, r1, #5
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	00a5      	lsls	r5, r4, #2
 800bc58:	18d3      	adds	r3, r2, r3
 800bc5a:	4037      	ands	r7, r6
 800bc5c:	1955      	adds	r5, r2, r5
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	9701      	str	r7, [sp, #4]
 800bc62:	4231      	tst	r1, r6
 800bc64:	d10d      	bne.n	800bc82 <rshift+0x4a>
 800bc66:	0016      	movs	r6, r2
 800bc68:	0019      	movs	r1, r3
 800bc6a:	428d      	cmp	r5, r1
 800bc6c:	d836      	bhi.n	800bcdc <rshift+0xa4>
 800bc6e:	9900      	ldr	r1, [sp, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	3903      	subs	r1, #3
 800bc74:	428d      	cmp	r5, r1
 800bc76:	d302      	bcc.n	800bc7e <rshift+0x46>
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	1ae4      	subs	r4, r4, r3
 800bc7c:	00a3      	lsls	r3, r4, #2
 800bc7e:	18d3      	adds	r3, r2, r3
 800bc80:	e018      	b.n	800bcb4 <rshift+0x7c>
 800bc82:	2120      	movs	r1, #32
 800bc84:	9e01      	ldr	r6, [sp, #4]
 800bc86:	9f01      	ldr	r7, [sp, #4]
 800bc88:	1b89      	subs	r1, r1, r6
 800bc8a:	9e00      	ldr	r6, [sp, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	ce02      	ldmia	r6!, {r1}
 800bc90:	4694      	mov	ip, r2
 800bc92:	40f9      	lsrs	r1, r7
 800bc94:	42b5      	cmp	r5, r6
 800bc96:	d816      	bhi.n	800bcc6 <rshift+0x8e>
 800bc98:	9e00      	ldr	r6, [sp, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	3601      	adds	r6, #1
 800bc9e:	42b5      	cmp	r5, r6
 800bca0:	d303      	bcc.n	800bcaa <rshift+0x72>
 800bca2:	9b02      	ldr	r3, [sp, #8]
 800bca4:	1ae3      	subs	r3, r4, r3
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	3b04      	subs	r3, #4
 800bcaa:	18d3      	adds	r3, r2, r3
 800bcac:	6019      	str	r1, [r3, #0]
 800bcae:	2900      	cmp	r1, #0
 800bcb0:	d000      	beq.n	800bcb4 <rshift+0x7c>
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	1a99      	subs	r1, r3, r2
 800bcb6:	1089      	asrs	r1, r1, #2
 800bcb8:	6101      	str	r1, [r0, #16]
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d101      	bne.n	800bcc2 <rshift+0x8a>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6143      	str	r3, [r0, #20]
 800bcc2:	b005      	add	sp, #20
 800bcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc6:	6837      	ldr	r7, [r6, #0]
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	409f      	lsls	r7, r3
 800bccc:	430f      	orrs	r7, r1
 800bcce:	4661      	mov	r1, ip
 800bcd0:	c180      	stmia	r1!, {r7}
 800bcd2:	468c      	mov	ip, r1
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	ce02      	ldmia	r6!, {r1}
 800bcd8:	40d9      	lsrs	r1, r3
 800bcda:	e7db      	b.n	800bc94 <rshift+0x5c>
 800bcdc:	c980      	ldmia	r1!, {r7}
 800bcde:	c680      	stmia	r6!, {r7}
 800bce0:	e7c3      	b.n	800bc6a <rshift+0x32>

0800bce2 <__hexdig_fun>:
 800bce2:	0002      	movs	r2, r0
 800bce4:	3a30      	subs	r2, #48	; 0x30
 800bce6:	0003      	movs	r3, r0
 800bce8:	2a09      	cmp	r2, #9
 800bcea:	d802      	bhi.n	800bcf2 <__hexdig_fun+0x10>
 800bcec:	3b20      	subs	r3, #32
 800bcee:	b2d8      	uxtb	r0, r3
 800bcf0:	4770      	bx	lr
 800bcf2:	0002      	movs	r2, r0
 800bcf4:	3a61      	subs	r2, #97	; 0x61
 800bcf6:	2a05      	cmp	r2, #5
 800bcf8:	d801      	bhi.n	800bcfe <__hexdig_fun+0x1c>
 800bcfa:	3b47      	subs	r3, #71	; 0x47
 800bcfc:	e7f7      	b.n	800bcee <__hexdig_fun+0xc>
 800bcfe:	001a      	movs	r2, r3
 800bd00:	3a41      	subs	r2, #65	; 0x41
 800bd02:	2000      	movs	r0, #0
 800bd04:	2a05      	cmp	r2, #5
 800bd06:	d8f3      	bhi.n	800bcf0 <__hexdig_fun+0xe>
 800bd08:	3b27      	subs	r3, #39	; 0x27
 800bd0a:	e7f0      	b.n	800bcee <__hexdig_fun+0xc>

0800bd0c <__gethex>:
 800bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd0e:	b089      	sub	sp, #36	; 0x24
 800bd10:	9307      	str	r3, [sp, #28]
 800bd12:	2302      	movs	r3, #2
 800bd14:	9201      	str	r2, [sp, #4]
 800bd16:	680a      	ldr	r2, [r1, #0]
 800bd18:	425b      	negs	r3, r3
 800bd1a:	9003      	str	r0, [sp, #12]
 800bd1c:	9106      	str	r1, [sp, #24]
 800bd1e:	1c96      	adds	r6, r2, #2
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	199a      	adds	r2, r3, r6
 800bd24:	9600      	str	r6, [sp, #0]
 800bd26:	9205      	str	r2, [sp, #20]
 800bd28:	9a00      	ldr	r2, [sp, #0]
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	7810      	ldrb	r0, [r2, #0]
 800bd2e:	2830      	cmp	r0, #48	; 0x30
 800bd30:	d0f7      	beq.n	800bd22 <__gethex+0x16>
 800bd32:	f7ff ffd6 	bl	800bce2 <__hexdig_fun>
 800bd36:	2300      	movs	r3, #0
 800bd38:	001d      	movs	r5, r3
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	4298      	cmp	r0, r3
 800bd3e:	d11d      	bne.n	800bd7c <__gethex+0x70>
 800bd40:	2201      	movs	r2, #1
 800bd42:	49a6      	ldr	r1, [pc, #664]	; (800bfdc <__gethex+0x2d0>)
 800bd44:	9800      	ldr	r0, [sp, #0]
 800bd46:	f7ff fd6d 	bl	800b824 <strncmp>
 800bd4a:	0007      	movs	r7, r0
 800bd4c:	42a8      	cmp	r0, r5
 800bd4e:	d169      	bne.n	800be24 <__gethex+0x118>
 800bd50:	9b00      	ldr	r3, [sp, #0]
 800bd52:	0034      	movs	r4, r6
 800bd54:	7858      	ldrb	r0, [r3, #1]
 800bd56:	f7ff ffc4 	bl	800bce2 <__hexdig_fun>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	9302      	str	r3, [sp, #8]
 800bd5e:	42a8      	cmp	r0, r5
 800bd60:	d02f      	beq.n	800bdc2 <__gethex+0xb6>
 800bd62:	9600      	str	r6, [sp, #0]
 800bd64:	9b00      	ldr	r3, [sp, #0]
 800bd66:	7818      	ldrb	r0, [r3, #0]
 800bd68:	2830      	cmp	r0, #48	; 0x30
 800bd6a:	d009      	beq.n	800bd80 <__gethex+0x74>
 800bd6c:	f7ff ffb9 	bl	800bce2 <__hexdig_fun>
 800bd70:	4242      	negs	r2, r0
 800bd72:	4142      	adcs	r2, r0
 800bd74:	2301      	movs	r3, #1
 800bd76:	0035      	movs	r5, r6
 800bd78:	9202      	str	r2, [sp, #8]
 800bd7a:	9305      	str	r3, [sp, #20]
 800bd7c:	9c00      	ldr	r4, [sp, #0]
 800bd7e:	e004      	b.n	800bd8a <__gethex+0x7e>
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	e7ed      	b.n	800bd64 <__gethex+0x58>
 800bd88:	3401      	adds	r4, #1
 800bd8a:	7820      	ldrb	r0, [r4, #0]
 800bd8c:	f7ff ffa9 	bl	800bce2 <__hexdig_fun>
 800bd90:	1e07      	subs	r7, r0, #0
 800bd92:	d1f9      	bne.n	800bd88 <__gethex+0x7c>
 800bd94:	2201      	movs	r2, #1
 800bd96:	0020      	movs	r0, r4
 800bd98:	4990      	ldr	r1, [pc, #576]	; (800bfdc <__gethex+0x2d0>)
 800bd9a:	f7ff fd43 	bl	800b824 <strncmp>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d10d      	bne.n	800bdbe <__gethex+0xb2>
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	d106      	bne.n	800bdb4 <__gethex+0xa8>
 800bda6:	3401      	adds	r4, #1
 800bda8:	0025      	movs	r5, r4
 800bdaa:	7820      	ldrb	r0, [r4, #0]
 800bdac:	f7ff ff99 	bl	800bce2 <__hexdig_fun>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d102      	bne.n	800bdba <__gethex+0xae>
 800bdb4:	1b2d      	subs	r5, r5, r4
 800bdb6:	00af      	lsls	r7, r5, #2
 800bdb8:	e003      	b.n	800bdc2 <__gethex+0xb6>
 800bdba:	3401      	adds	r4, #1
 800bdbc:	e7f5      	b.n	800bdaa <__gethex+0x9e>
 800bdbe:	2d00      	cmp	r5, #0
 800bdc0:	d1f8      	bne.n	800bdb4 <__gethex+0xa8>
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	7823      	ldrb	r3, [r4, #0]
 800bdc6:	0026      	movs	r6, r4
 800bdc8:	4393      	bics	r3, r2
 800bdca:	2b50      	cmp	r3, #80	; 0x50
 800bdcc:	d11d      	bne.n	800be0a <__gethex+0xfe>
 800bdce:	7863      	ldrb	r3, [r4, #1]
 800bdd0:	2b2b      	cmp	r3, #43	; 0x2b
 800bdd2:	d02c      	beq.n	800be2e <__gethex+0x122>
 800bdd4:	2b2d      	cmp	r3, #45	; 0x2d
 800bdd6:	d02e      	beq.n	800be36 <__gethex+0x12a>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	1c66      	adds	r6, r4, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	7830      	ldrb	r0, [r6, #0]
 800bde0:	f7ff ff7f 	bl	800bce2 <__hexdig_fun>
 800bde4:	1e43      	subs	r3, r0, #1
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b18      	cmp	r3, #24
 800bdea:	d82b      	bhi.n	800be44 <__gethex+0x138>
 800bdec:	3810      	subs	r0, #16
 800bdee:	0005      	movs	r5, r0
 800bdf0:	7870      	ldrb	r0, [r6, #1]
 800bdf2:	f7ff ff76 	bl	800bce2 <__hexdig_fun>
 800bdf6:	1e43      	subs	r3, r0, #1
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	2b18      	cmp	r3, #24
 800bdfe:	d91c      	bls.n	800be3a <__gethex+0x12e>
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d000      	beq.n	800be08 <__gethex+0xfc>
 800be06:	426d      	negs	r5, r5
 800be08:	197f      	adds	r7, r7, r5
 800be0a:	9b06      	ldr	r3, [sp, #24]
 800be0c:	601e      	str	r6, [r3, #0]
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d019      	beq.n	800be48 <__gethex+0x13c>
 800be14:	2600      	movs	r6, #0
 800be16:	9b05      	ldr	r3, [sp, #20]
 800be18:	42b3      	cmp	r3, r6
 800be1a:	d100      	bne.n	800be1e <__gethex+0x112>
 800be1c:	3606      	adds	r6, #6
 800be1e:	0030      	movs	r0, r6
 800be20:	b009      	add	sp, #36	; 0x24
 800be22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be24:	2301      	movs	r3, #1
 800be26:	2700      	movs	r7, #0
 800be28:	9c00      	ldr	r4, [sp, #0]
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	e7c9      	b.n	800bdc2 <__gethex+0xb6>
 800be2e:	2300      	movs	r3, #0
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	1ca6      	adds	r6, r4, #2
 800be34:	e7d3      	b.n	800bdde <__gethex+0xd2>
 800be36:	2301      	movs	r3, #1
 800be38:	e7fa      	b.n	800be30 <__gethex+0x124>
 800be3a:	230a      	movs	r3, #10
 800be3c:	435d      	muls	r5, r3
 800be3e:	182d      	adds	r5, r5, r0
 800be40:	3d10      	subs	r5, #16
 800be42:	e7d5      	b.n	800bdf0 <__gethex+0xe4>
 800be44:	0026      	movs	r6, r4
 800be46:	e7e0      	b.n	800be0a <__gethex+0xfe>
 800be48:	9b00      	ldr	r3, [sp, #0]
 800be4a:	9902      	ldr	r1, [sp, #8]
 800be4c:	1ae3      	subs	r3, r4, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	2b07      	cmp	r3, #7
 800be52:	dc0a      	bgt.n	800be6a <__gethex+0x15e>
 800be54:	9803      	ldr	r0, [sp, #12]
 800be56:	f000 fa5d 	bl	800c314 <_Balloc>
 800be5a:	1e05      	subs	r5, r0, #0
 800be5c:	d108      	bne.n	800be70 <__gethex+0x164>
 800be5e:	002a      	movs	r2, r5
 800be60:	21e4      	movs	r1, #228	; 0xe4
 800be62:	4b5f      	ldr	r3, [pc, #380]	; (800bfe0 <__gethex+0x2d4>)
 800be64:	485f      	ldr	r0, [pc, #380]	; (800bfe4 <__gethex+0x2d8>)
 800be66:	f003 fd19 	bl	800f89c <__assert_func>
 800be6a:	3101      	adds	r1, #1
 800be6c:	105b      	asrs	r3, r3, #1
 800be6e:	e7ef      	b.n	800be50 <__gethex+0x144>
 800be70:	0003      	movs	r3, r0
 800be72:	3314      	adds	r3, #20
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	9305      	str	r3, [sp, #20]
 800be78:	2300      	movs	r3, #0
 800be7a:	001e      	movs	r6, r3
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	9b00      	ldr	r3, [sp, #0]
 800be80:	42a3      	cmp	r3, r4
 800be82:	d33f      	bcc.n	800bf04 <__gethex+0x1f8>
 800be84:	9c05      	ldr	r4, [sp, #20]
 800be86:	9b02      	ldr	r3, [sp, #8]
 800be88:	c440      	stmia	r4!, {r6}
 800be8a:	1ae4      	subs	r4, r4, r3
 800be8c:	10a4      	asrs	r4, r4, #2
 800be8e:	0030      	movs	r0, r6
 800be90:	612c      	str	r4, [r5, #16]
 800be92:	f000 fb01 	bl	800c498 <__hi0bits>
 800be96:	9b01      	ldr	r3, [sp, #4]
 800be98:	0164      	lsls	r4, r4, #5
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	1a26      	subs	r6, r4, r0
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	429e      	cmp	r6, r3
 800bea2:	dd51      	ble.n	800bf48 <__gethex+0x23c>
 800bea4:	1af6      	subs	r6, r6, r3
 800bea6:	0031      	movs	r1, r6
 800bea8:	0028      	movs	r0, r5
 800beaa:	f000 fe7b 	bl	800cba4 <__any_on>
 800beae:	1e04      	subs	r4, r0, #0
 800beb0:	d016      	beq.n	800bee0 <__gethex+0x1d4>
 800beb2:	2401      	movs	r4, #1
 800beb4:	231f      	movs	r3, #31
 800beb6:	0020      	movs	r0, r4
 800beb8:	1e72      	subs	r2, r6, #1
 800beba:	4013      	ands	r3, r2
 800bebc:	4098      	lsls	r0, r3
 800bebe:	0003      	movs	r3, r0
 800bec0:	1151      	asrs	r1, r2, #5
 800bec2:	9802      	ldr	r0, [sp, #8]
 800bec4:	0089      	lsls	r1, r1, #2
 800bec6:	5809      	ldr	r1, [r1, r0]
 800bec8:	4219      	tst	r1, r3
 800beca:	d009      	beq.n	800bee0 <__gethex+0x1d4>
 800becc:	42a2      	cmp	r2, r4
 800bece:	dd06      	ble.n	800bede <__gethex+0x1d2>
 800bed0:	0028      	movs	r0, r5
 800bed2:	1eb1      	subs	r1, r6, #2
 800bed4:	f000 fe66 	bl	800cba4 <__any_on>
 800bed8:	3402      	adds	r4, #2
 800beda:	2800      	cmp	r0, #0
 800bedc:	d100      	bne.n	800bee0 <__gethex+0x1d4>
 800bede:	2402      	movs	r4, #2
 800bee0:	0031      	movs	r1, r6
 800bee2:	0028      	movs	r0, r5
 800bee4:	f7ff fea8 	bl	800bc38 <rshift>
 800bee8:	19bf      	adds	r7, r7, r6
 800beea:	9b01      	ldr	r3, [sp, #4]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	42bb      	cmp	r3, r7
 800bef0:	da3a      	bge.n	800bf68 <__gethex+0x25c>
 800bef2:	0029      	movs	r1, r5
 800bef4:	9803      	ldr	r0, [sp, #12]
 800bef6:	f000 fa35 	bl	800c364 <_Bfree>
 800befa:	2300      	movs	r3, #0
 800befc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800befe:	26a3      	movs	r6, #163	; 0xa3
 800bf00:	6013      	str	r3, [r2, #0]
 800bf02:	e78c      	b.n	800be1e <__gethex+0x112>
 800bf04:	3c01      	subs	r4, #1
 800bf06:	7823      	ldrb	r3, [r4, #0]
 800bf08:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0a:	d012      	beq.n	800bf32 <__gethex+0x226>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	d104      	bne.n	800bf1c <__gethex+0x210>
 800bf12:	9b05      	ldr	r3, [sp, #20]
 800bf14:	c340      	stmia	r3!, {r6}
 800bf16:	2600      	movs	r6, #0
 800bf18:	9305      	str	r3, [sp, #20]
 800bf1a:	9604      	str	r6, [sp, #16]
 800bf1c:	7820      	ldrb	r0, [r4, #0]
 800bf1e:	f7ff fee0 	bl	800bce2 <__hexdig_fun>
 800bf22:	230f      	movs	r3, #15
 800bf24:	4018      	ands	r0, r3
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	4098      	lsls	r0, r3
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4306      	orrs	r6, r0
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	e7a5      	b.n	800be7e <__gethex+0x172>
 800bf32:	9b00      	ldr	r3, [sp, #0]
 800bf34:	42a3      	cmp	r3, r4
 800bf36:	d8e9      	bhi.n	800bf0c <__gethex+0x200>
 800bf38:	2201      	movs	r2, #1
 800bf3a:	0020      	movs	r0, r4
 800bf3c:	4927      	ldr	r1, [pc, #156]	; (800bfdc <__gethex+0x2d0>)
 800bf3e:	f7ff fc71 	bl	800b824 <strncmp>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d1e2      	bne.n	800bf0c <__gethex+0x200>
 800bf46:	e79a      	b.n	800be7e <__gethex+0x172>
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	429e      	cmp	r6, r3
 800bf4e:	dacc      	bge.n	800beea <__gethex+0x1de>
 800bf50:	1b9e      	subs	r6, r3, r6
 800bf52:	0029      	movs	r1, r5
 800bf54:	0032      	movs	r2, r6
 800bf56:	9803      	ldr	r0, [sp, #12]
 800bf58:	f000 fbf0 	bl	800c73c <__lshift>
 800bf5c:	0003      	movs	r3, r0
 800bf5e:	3314      	adds	r3, #20
 800bf60:	0005      	movs	r5, r0
 800bf62:	1bbf      	subs	r7, r7, r6
 800bf64:	9302      	str	r3, [sp, #8]
 800bf66:	e7c0      	b.n	800beea <__gethex+0x1de>
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	685e      	ldr	r6, [r3, #4]
 800bf6c:	42be      	cmp	r6, r7
 800bf6e:	dd70      	ble.n	800c052 <__gethex+0x346>
 800bf70:	9b00      	ldr	r3, [sp, #0]
 800bf72:	1bf6      	subs	r6, r6, r7
 800bf74:	42b3      	cmp	r3, r6
 800bf76:	dc37      	bgt.n	800bfe8 <__gethex+0x2dc>
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d024      	beq.n	800bfca <__gethex+0x2be>
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d026      	beq.n	800bfd2 <__gethex+0x2c6>
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d117      	bne.n	800bfb8 <__gethex+0x2ac>
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	42b3      	cmp	r3, r6
 800bf8c:	d114      	bne.n	800bfb8 <__gethex+0x2ac>
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d10b      	bne.n	800bfaa <__gethex+0x29e>
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	9a07      	ldr	r2, [sp, #28]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2662      	movs	r6, #98	; 0x62
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	9a02      	ldr	r2, [sp, #8]
 800bfa0:	612b      	str	r3, [r5, #16]
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa6:	601d      	str	r5, [r3, #0]
 800bfa8:	e739      	b.n	800be1e <__gethex+0x112>
 800bfaa:	9900      	ldr	r1, [sp, #0]
 800bfac:	0028      	movs	r0, r5
 800bfae:	3901      	subs	r1, #1
 800bfb0:	f000 fdf8 	bl	800cba4 <__any_on>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d1ec      	bne.n	800bf92 <__gethex+0x286>
 800bfb8:	0029      	movs	r1, r5
 800bfba:	9803      	ldr	r0, [sp, #12]
 800bfbc:	f000 f9d2 	bl	800c364 <_Bfree>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfc4:	2650      	movs	r6, #80	; 0x50
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	e729      	b.n	800be1e <__gethex+0x112>
 800bfca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f3      	bne.n	800bfb8 <__gethex+0x2ac>
 800bfd0:	e7df      	b.n	800bf92 <__gethex+0x286>
 800bfd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1dc      	bne.n	800bf92 <__gethex+0x286>
 800bfd8:	e7ee      	b.n	800bfb8 <__gethex+0x2ac>
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	08013e5c 	.word	0x08013e5c
 800bfe0:	08013fb9 	.word	0x08013fb9
 800bfe4:	08013fca 	.word	0x08013fca
 800bfe8:	1e77      	subs	r7, r6, #1
 800bfea:	2c00      	cmp	r4, #0
 800bfec:	d12f      	bne.n	800c04e <__gethex+0x342>
 800bfee:	2f00      	cmp	r7, #0
 800bff0:	d004      	beq.n	800bffc <__gethex+0x2f0>
 800bff2:	0039      	movs	r1, r7
 800bff4:	0028      	movs	r0, r5
 800bff6:	f000 fdd5 	bl	800cba4 <__any_on>
 800bffa:	0004      	movs	r4, r0
 800bffc:	231f      	movs	r3, #31
 800bffe:	117a      	asrs	r2, r7, #5
 800c000:	401f      	ands	r7, r3
 800c002:	3b1e      	subs	r3, #30
 800c004:	40bb      	lsls	r3, r7
 800c006:	9902      	ldr	r1, [sp, #8]
 800c008:	0092      	lsls	r2, r2, #2
 800c00a:	5852      	ldr	r2, [r2, r1]
 800c00c:	421a      	tst	r2, r3
 800c00e:	d001      	beq.n	800c014 <__gethex+0x308>
 800c010:	2302      	movs	r3, #2
 800c012:	431c      	orrs	r4, r3
 800c014:	9b00      	ldr	r3, [sp, #0]
 800c016:	0031      	movs	r1, r6
 800c018:	1b9b      	subs	r3, r3, r6
 800c01a:	2602      	movs	r6, #2
 800c01c:	0028      	movs	r0, r5
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	f7ff fe0a 	bl	800bc38 <rshift>
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	685f      	ldr	r7, [r3, #4]
 800c028:	2c00      	cmp	r4, #0
 800c02a:	d041      	beq.n	800c0b0 <__gethex+0x3a4>
 800c02c:	9b01      	ldr	r3, [sp, #4]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d010      	beq.n	800c056 <__gethex+0x34a>
 800c034:	2b03      	cmp	r3, #3
 800c036:	d012      	beq.n	800c05e <__gethex+0x352>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d106      	bne.n	800c04a <__gethex+0x33e>
 800c03c:	07a2      	lsls	r2, r4, #30
 800c03e:	d504      	bpl.n	800c04a <__gethex+0x33e>
 800c040:	9a02      	ldr	r2, [sp, #8]
 800c042:	6812      	ldr	r2, [r2, #0]
 800c044:	4314      	orrs	r4, r2
 800c046:	421c      	tst	r4, r3
 800c048:	d10c      	bne.n	800c064 <__gethex+0x358>
 800c04a:	2310      	movs	r3, #16
 800c04c:	e02f      	b.n	800c0ae <__gethex+0x3a2>
 800c04e:	2401      	movs	r4, #1
 800c050:	e7d4      	b.n	800bffc <__gethex+0x2f0>
 800c052:	2601      	movs	r6, #1
 800c054:	e7e8      	b.n	800c028 <__gethex+0x31c>
 800c056:	2301      	movs	r3, #1
 800c058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c05a:	1a9b      	subs	r3, r3, r2
 800c05c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0f2      	beq.n	800c04a <__gethex+0x33e>
 800c064:	692b      	ldr	r3, [r5, #16]
 800c066:	2000      	movs	r0, #0
 800c068:	9302      	str	r3, [sp, #8]
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	002b      	movs	r3, r5
 800c070:	9a04      	ldr	r2, [sp, #16]
 800c072:	3314      	adds	r3, #20
 800c074:	1899      	adds	r1, r3, r2
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	1c54      	adds	r4, r2, #1
 800c07a:	d01e      	beq.n	800c0ba <__gethex+0x3ae>
 800c07c:	3201      	adds	r2, #1
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	002b      	movs	r3, r5
 800c082:	3314      	adds	r3, #20
 800c084:	2e02      	cmp	r6, #2
 800c086:	d141      	bne.n	800c10c <__gethex+0x400>
 800c088:	9a01      	ldr	r2, [sp, #4]
 800c08a:	9900      	ldr	r1, [sp, #0]
 800c08c:	6812      	ldr	r2, [r2, #0]
 800c08e:	3a01      	subs	r2, #1
 800c090:	428a      	cmp	r2, r1
 800c092:	d10b      	bne.n	800c0ac <__gethex+0x3a0>
 800c094:	221f      	movs	r2, #31
 800c096:	9800      	ldr	r0, [sp, #0]
 800c098:	1149      	asrs	r1, r1, #5
 800c09a:	4002      	ands	r2, r0
 800c09c:	2001      	movs	r0, #1
 800c09e:	0004      	movs	r4, r0
 800c0a0:	4094      	lsls	r4, r2
 800c0a2:	0089      	lsls	r1, r1, #2
 800c0a4:	58cb      	ldr	r3, [r1, r3]
 800c0a6:	4223      	tst	r3, r4
 800c0a8:	d000      	beq.n	800c0ac <__gethex+0x3a0>
 800c0aa:	2601      	movs	r6, #1
 800c0ac:	2320      	movs	r3, #32
 800c0ae:	431e      	orrs	r6, r3
 800c0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b2:	601d      	str	r5, [r3, #0]
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	601f      	str	r7, [r3, #0]
 800c0b8:	e6b1      	b.n	800be1e <__gethex+0x112>
 800c0ba:	c301      	stmia	r3!, {r0}
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d8da      	bhi.n	800c076 <__gethex+0x36a>
 800c0c0:	68ab      	ldr	r3, [r5, #8]
 800c0c2:	9a02      	ldr	r2, [sp, #8]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	db18      	blt.n	800c0fa <__gethex+0x3ee>
 800c0c8:	6869      	ldr	r1, [r5, #4]
 800c0ca:	9803      	ldr	r0, [sp, #12]
 800c0cc:	3101      	adds	r1, #1
 800c0ce:	f000 f921 	bl	800c314 <_Balloc>
 800c0d2:	1e04      	subs	r4, r0, #0
 800c0d4:	d104      	bne.n	800c0e0 <__gethex+0x3d4>
 800c0d6:	0022      	movs	r2, r4
 800c0d8:	2184      	movs	r1, #132	; 0x84
 800c0da:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <__gethex+0x440>)
 800c0dc:	481c      	ldr	r0, [pc, #112]	; (800c150 <__gethex+0x444>)
 800c0de:	e6c2      	b.n	800be66 <__gethex+0x15a>
 800c0e0:	0029      	movs	r1, r5
 800c0e2:	692a      	ldr	r2, [r5, #16]
 800c0e4:	310c      	adds	r1, #12
 800c0e6:	3202      	adds	r2, #2
 800c0e8:	0092      	lsls	r2, r2, #2
 800c0ea:	300c      	adds	r0, #12
 800c0ec:	f7ff fc77 	bl	800b9de <memcpy>
 800c0f0:	0029      	movs	r1, r5
 800c0f2:	9803      	ldr	r0, [sp, #12]
 800c0f4:	f000 f936 	bl	800c364 <_Bfree>
 800c0f8:	0025      	movs	r5, r4
 800c0fa:	692b      	ldr	r3, [r5, #16]
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	612a      	str	r2, [r5, #16]
 800c100:	2201      	movs	r2, #1
 800c102:	3304      	adds	r3, #4
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	18eb      	adds	r3, r5, r3
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	e7b9      	b.n	800c080 <__gethex+0x374>
 800c10c:	692a      	ldr	r2, [r5, #16]
 800c10e:	9902      	ldr	r1, [sp, #8]
 800c110:	428a      	cmp	r2, r1
 800c112:	dd09      	ble.n	800c128 <__gethex+0x41c>
 800c114:	2101      	movs	r1, #1
 800c116:	0028      	movs	r0, r5
 800c118:	f7ff fd8e 	bl	800bc38 <rshift>
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	3701      	adds	r7, #1
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	42bb      	cmp	r3, r7
 800c124:	dac1      	bge.n	800c0aa <__gethex+0x39e>
 800c126:	e6e4      	b.n	800bef2 <__gethex+0x1e6>
 800c128:	221f      	movs	r2, #31
 800c12a:	9c00      	ldr	r4, [sp, #0]
 800c12c:	9900      	ldr	r1, [sp, #0]
 800c12e:	2601      	movs	r6, #1
 800c130:	4014      	ands	r4, r2
 800c132:	4211      	tst	r1, r2
 800c134:	d0ba      	beq.n	800c0ac <__gethex+0x3a0>
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	189b      	adds	r3, r3, r2
 800c13a:	3b04      	subs	r3, #4
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	f000 f9ab 	bl	800c498 <__hi0bits>
 800c142:	2320      	movs	r3, #32
 800c144:	1b1b      	subs	r3, r3, r4
 800c146:	4298      	cmp	r0, r3
 800c148:	dbe4      	blt.n	800c114 <__gethex+0x408>
 800c14a:	e7af      	b.n	800c0ac <__gethex+0x3a0>
 800c14c:	08013fb9 	.word	0x08013fb9
 800c150:	08013fca 	.word	0x08013fca

0800c154 <L_shift>:
 800c154:	2308      	movs	r3, #8
 800c156:	b570      	push	{r4, r5, r6, lr}
 800c158:	2520      	movs	r5, #32
 800c15a:	1a9a      	subs	r2, r3, r2
 800c15c:	0092      	lsls	r2, r2, #2
 800c15e:	1aad      	subs	r5, r5, r2
 800c160:	6843      	ldr	r3, [r0, #4]
 800c162:	6804      	ldr	r4, [r0, #0]
 800c164:	001e      	movs	r6, r3
 800c166:	40ae      	lsls	r6, r5
 800c168:	40d3      	lsrs	r3, r2
 800c16a:	4334      	orrs	r4, r6
 800c16c:	6004      	str	r4, [r0, #0]
 800c16e:	6043      	str	r3, [r0, #4]
 800c170:	3004      	adds	r0, #4
 800c172:	4288      	cmp	r0, r1
 800c174:	d3f4      	bcc.n	800c160 <L_shift+0xc>
 800c176:	bd70      	pop	{r4, r5, r6, pc}

0800c178 <__match>:
 800c178:	b530      	push	{r4, r5, lr}
 800c17a:	6803      	ldr	r3, [r0, #0]
 800c17c:	780c      	ldrb	r4, [r1, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	2c00      	cmp	r4, #0
 800c182:	d102      	bne.n	800c18a <__match+0x12>
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	2001      	movs	r0, #1
 800c188:	bd30      	pop	{r4, r5, pc}
 800c18a:	781a      	ldrb	r2, [r3, #0]
 800c18c:	0015      	movs	r5, r2
 800c18e:	3d41      	subs	r5, #65	; 0x41
 800c190:	2d19      	cmp	r5, #25
 800c192:	d800      	bhi.n	800c196 <__match+0x1e>
 800c194:	3220      	adds	r2, #32
 800c196:	3101      	adds	r1, #1
 800c198:	42a2      	cmp	r2, r4
 800c19a:	d0ef      	beq.n	800c17c <__match+0x4>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7f3      	b.n	800c188 <__match+0x10>

0800c1a0 <__hexnan>:
 800c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1a2:	680b      	ldr	r3, [r1, #0]
 800c1a4:	b08b      	sub	sp, #44	; 0x2c
 800c1a6:	9201      	str	r2, [sp, #4]
 800c1a8:	9901      	ldr	r1, [sp, #4]
 800c1aa:	115a      	asrs	r2, r3, #5
 800c1ac:	0092      	lsls	r2, r2, #2
 800c1ae:	188a      	adds	r2, r1, r2
 800c1b0:	9202      	str	r2, [sp, #8]
 800c1b2:	0019      	movs	r1, r3
 800c1b4:	221f      	movs	r2, #31
 800c1b6:	4011      	ands	r1, r2
 800c1b8:	9008      	str	r0, [sp, #32]
 800c1ba:	9106      	str	r1, [sp, #24]
 800c1bc:	4213      	tst	r3, r2
 800c1be:	d002      	beq.n	800c1c6 <__hexnan+0x26>
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	9302      	str	r3, [sp, #8]
 800c1c6:	9b02      	ldr	r3, [sp, #8]
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	1f1f      	subs	r7, r3, #4
 800c1cc:	003e      	movs	r6, r7
 800c1ce:	003c      	movs	r4, r7
 800c1d0:	9b08      	ldr	r3, [sp, #32]
 800c1d2:	603d      	str	r5, [r7, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	9507      	str	r5, [sp, #28]
 800c1d8:	9305      	str	r3, [sp, #20]
 800c1da:	9503      	str	r5, [sp, #12]
 800c1dc:	9b05      	ldr	r3, [sp, #20]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e2:	9b05      	ldr	r3, [sp, #20]
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d028      	beq.n	800c23e <__hexnan+0x9e>
 800c1ec:	9804      	ldr	r0, [sp, #16]
 800c1ee:	f7ff fd78 	bl	800bce2 <__hexdig_fun>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d154      	bne.n	800c2a0 <__hexnan+0x100>
 800c1f6:	9b04      	ldr	r3, [sp, #16]
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	d819      	bhi.n	800c230 <__hexnan+0x90>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	9a07      	ldr	r2, [sp, #28]
 800c200:	4293      	cmp	r3, r2
 800c202:	dd12      	ble.n	800c22a <__hexnan+0x8a>
 800c204:	42b4      	cmp	r4, r6
 800c206:	d206      	bcs.n	800c216 <__hexnan+0x76>
 800c208:	2d07      	cmp	r5, #7
 800c20a:	dc04      	bgt.n	800c216 <__hexnan+0x76>
 800c20c:	002a      	movs	r2, r5
 800c20e:	0031      	movs	r1, r6
 800c210:	0020      	movs	r0, r4
 800c212:	f7ff ff9f 	bl	800c154 <L_shift>
 800c216:	9b01      	ldr	r3, [sp, #4]
 800c218:	2508      	movs	r5, #8
 800c21a:	429c      	cmp	r4, r3
 800c21c:	d905      	bls.n	800c22a <__hexnan+0x8a>
 800c21e:	1f26      	subs	r6, r4, #4
 800c220:	2500      	movs	r5, #0
 800c222:	0034      	movs	r4, r6
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	6035      	str	r5, [r6, #0]
 800c228:	9307      	str	r3, [sp, #28]
 800c22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c22c:	9305      	str	r3, [sp, #20]
 800c22e:	e7d5      	b.n	800c1dc <__hexnan+0x3c>
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	2b29      	cmp	r3, #41	; 0x29
 800c234:	d159      	bne.n	800c2ea <__hexnan+0x14a>
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	9a08      	ldr	r2, [sp, #32]
 800c23a:	3302      	adds	r3, #2
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d052      	beq.n	800c2ea <__hexnan+0x14a>
 800c244:	42b4      	cmp	r4, r6
 800c246:	d206      	bcs.n	800c256 <__hexnan+0xb6>
 800c248:	2d07      	cmp	r5, #7
 800c24a:	dc04      	bgt.n	800c256 <__hexnan+0xb6>
 800c24c:	002a      	movs	r2, r5
 800c24e:	0031      	movs	r1, r6
 800c250:	0020      	movs	r0, r4
 800c252:	f7ff ff7f 	bl	800c154 <L_shift>
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	429c      	cmp	r4, r3
 800c25a:	d935      	bls.n	800c2c8 <__hexnan+0x128>
 800c25c:	001a      	movs	r2, r3
 800c25e:	0023      	movs	r3, r4
 800c260:	cb02      	ldmia	r3!, {r1}
 800c262:	c202      	stmia	r2!, {r1}
 800c264:	429f      	cmp	r7, r3
 800c266:	d2fb      	bcs.n	800c260 <__hexnan+0xc0>
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	1c62      	adds	r2, r4, #1
 800c26c:	1ed9      	subs	r1, r3, #3
 800c26e:	2304      	movs	r3, #4
 800c270:	4291      	cmp	r1, r2
 800c272:	d305      	bcc.n	800c280 <__hexnan+0xe0>
 800c274:	9b02      	ldr	r3, [sp, #8]
 800c276:	3b04      	subs	r3, #4
 800c278:	1b1b      	subs	r3, r3, r4
 800c27a:	089b      	lsrs	r3, r3, #2
 800c27c:	3301      	adds	r3, #1
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	9a01      	ldr	r2, [sp, #4]
 800c282:	18d3      	adds	r3, r2, r3
 800c284:	2200      	movs	r2, #0
 800c286:	c304      	stmia	r3!, {r2}
 800c288:	429f      	cmp	r7, r3
 800c28a:	d2fc      	bcs.n	800c286 <__hexnan+0xe6>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <__hexnan+0xfc>
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	429f      	cmp	r7, r3
 800c296:	d126      	bne.n	800c2e6 <__hexnan+0x146>
 800c298:	2301      	movs	r3, #1
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	2005      	movs	r0, #5
 800c29e:	e025      	b.n	800c2ec <__hexnan+0x14c>
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	3501      	adds	r5, #1
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	9303      	str	r3, [sp, #12]
 800c2a8:	2d08      	cmp	r5, #8
 800c2aa:	dd06      	ble.n	800c2ba <__hexnan+0x11a>
 800c2ac:	9b01      	ldr	r3, [sp, #4]
 800c2ae:	429c      	cmp	r4, r3
 800c2b0:	d9bb      	bls.n	800c22a <__hexnan+0x8a>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	2501      	movs	r5, #1
 800c2b6:	3c04      	subs	r4, #4
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	220f      	movs	r2, #15
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	4010      	ands	r0, r2
 800c2c0:	011b      	lsls	r3, r3, #4
 800c2c2:	4303      	orrs	r3, r0
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	e7b0      	b.n	800c22a <__hexnan+0x8a>
 800c2c8:	9b06      	ldr	r3, [sp, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0de      	beq.n	800c28c <__hexnan+0xec>
 800c2ce:	2320      	movs	r3, #32
 800c2d0:	9a06      	ldr	r2, [sp, #24]
 800c2d2:	9902      	ldr	r1, [sp, #8]
 800c2d4:	1a9b      	subs	r3, r3, r2
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4252      	negs	r2, r2
 800c2da:	40da      	lsrs	r2, r3
 800c2dc:	3904      	subs	r1, #4
 800c2de:	680b      	ldr	r3, [r1, #0]
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	600b      	str	r3, [r1, #0]
 800c2e4:	e7d2      	b.n	800c28c <__hexnan+0xec>
 800c2e6:	3f04      	subs	r7, #4
 800c2e8:	e7d0      	b.n	800c28c <__hexnan+0xec>
 800c2ea:	2004      	movs	r0, #4
 800c2ec:	b00b      	add	sp, #44	; 0x2c
 800c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2f0 <__ascii_mbtowc>:
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	2900      	cmp	r1, #0
 800c2f4:	d100      	bne.n	800c2f8 <__ascii_mbtowc+0x8>
 800c2f6:	a901      	add	r1, sp, #4
 800c2f8:	1e10      	subs	r0, r2, #0
 800c2fa:	d006      	beq.n	800c30a <__ascii_mbtowc+0x1a>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d006      	beq.n	800c30e <__ascii_mbtowc+0x1e>
 800c300:	7813      	ldrb	r3, [r2, #0]
 800c302:	600b      	str	r3, [r1, #0]
 800c304:	7810      	ldrb	r0, [r2, #0]
 800c306:	1e43      	subs	r3, r0, #1
 800c308:	4198      	sbcs	r0, r3
 800c30a:	b002      	add	sp, #8
 800c30c:	4770      	bx	lr
 800c30e:	2002      	movs	r0, #2
 800c310:	4240      	negs	r0, r0
 800c312:	e7fa      	b.n	800c30a <__ascii_mbtowc+0x1a>

0800c314 <_Balloc>:
 800c314:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c316:	b570      	push	{r4, r5, r6, lr}
 800c318:	0006      	movs	r6, r0
 800c31a:	000c      	movs	r4, r1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d012      	beq.n	800c346 <_Balloc+0x32>
 800c320:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c322:	00a2      	lsls	r2, r4, #2
 800c324:	189b      	adds	r3, r3, r2
 800c326:	6818      	ldr	r0, [r3, #0]
 800c328:	2800      	cmp	r0, #0
 800c32a:	d115      	bne.n	800c358 <_Balloc+0x44>
 800c32c:	2101      	movs	r1, #1
 800c32e:	000d      	movs	r5, r1
 800c330:	40a5      	lsls	r5, r4
 800c332:	1d6a      	adds	r2, r5, #5
 800c334:	0030      	movs	r0, r6
 800c336:	0092      	lsls	r2, r2, #2
 800c338:	f003 face 	bl	800f8d8 <_calloc_r>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d009      	beq.n	800c354 <_Balloc+0x40>
 800c340:	6044      	str	r4, [r0, #4]
 800c342:	6085      	str	r5, [r0, #8]
 800c344:	e00a      	b.n	800c35c <_Balloc+0x48>
 800c346:	2221      	movs	r2, #33	; 0x21
 800c348:	2104      	movs	r1, #4
 800c34a:	f003 fac5 	bl	800f8d8 <_calloc_r>
 800c34e:	6470      	str	r0, [r6, #68]	; 0x44
 800c350:	2800      	cmp	r0, #0
 800c352:	d1e5      	bne.n	800c320 <_Balloc+0xc>
 800c354:	2000      	movs	r0, #0
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	6802      	ldr	r2, [r0, #0]
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	2300      	movs	r3, #0
 800c35e:	6103      	str	r3, [r0, #16]
 800c360:	60c3      	str	r3, [r0, #12]
 800c362:	e7f8      	b.n	800c356 <_Balloc+0x42>

0800c364 <_Bfree>:
 800c364:	2900      	cmp	r1, #0
 800c366:	d006      	beq.n	800c376 <_Bfree+0x12>
 800c368:	684a      	ldr	r2, [r1, #4]
 800c36a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	189b      	adds	r3, r3, r2
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	600a      	str	r2, [r1, #0]
 800c374:	6019      	str	r1, [r3, #0]
 800c376:	4770      	bx	lr

0800c378 <__multadd>:
 800c378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c37a:	000e      	movs	r6, r1
 800c37c:	9001      	str	r0, [sp, #4]
 800c37e:	000c      	movs	r4, r1
 800c380:	001d      	movs	r5, r3
 800c382:	2000      	movs	r0, #0
 800c384:	690f      	ldr	r7, [r1, #16]
 800c386:	3614      	adds	r6, #20
 800c388:	6833      	ldr	r3, [r6, #0]
 800c38a:	3001      	adds	r0, #1
 800c38c:	b299      	uxth	r1, r3
 800c38e:	4351      	muls	r1, r2
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	4353      	muls	r3, r2
 800c394:	1949      	adds	r1, r1, r5
 800c396:	0c0d      	lsrs	r5, r1, #16
 800c398:	195b      	adds	r3, r3, r5
 800c39a:	0c1d      	lsrs	r5, r3, #16
 800c39c:	b289      	uxth	r1, r1
 800c39e:	041b      	lsls	r3, r3, #16
 800c3a0:	185b      	adds	r3, r3, r1
 800c3a2:	c608      	stmia	r6!, {r3}
 800c3a4:	4287      	cmp	r7, r0
 800c3a6:	dcef      	bgt.n	800c388 <__multadd+0x10>
 800c3a8:	2d00      	cmp	r5, #0
 800c3aa:	d022      	beq.n	800c3f2 <__multadd+0x7a>
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	42bb      	cmp	r3, r7
 800c3b0:	dc19      	bgt.n	800c3e6 <__multadd+0x6e>
 800c3b2:	6861      	ldr	r1, [r4, #4]
 800c3b4:	9801      	ldr	r0, [sp, #4]
 800c3b6:	3101      	adds	r1, #1
 800c3b8:	f7ff ffac 	bl	800c314 <_Balloc>
 800c3bc:	1e06      	subs	r6, r0, #0
 800c3be:	d105      	bne.n	800c3cc <__multadd+0x54>
 800c3c0:	0032      	movs	r2, r6
 800c3c2:	21ba      	movs	r1, #186	; 0xba
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <__multadd+0x80>)
 800c3c6:	480d      	ldr	r0, [pc, #52]	; (800c3fc <__multadd+0x84>)
 800c3c8:	f003 fa68 	bl	800f89c <__assert_func>
 800c3cc:	0021      	movs	r1, r4
 800c3ce:	6922      	ldr	r2, [r4, #16]
 800c3d0:	310c      	adds	r1, #12
 800c3d2:	3202      	adds	r2, #2
 800c3d4:	0092      	lsls	r2, r2, #2
 800c3d6:	300c      	adds	r0, #12
 800c3d8:	f7ff fb01 	bl	800b9de <memcpy>
 800c3dc:	0021      	movs	r1, r4
 800c3de:	9801      	ldr	r0, [sp, #4]
 800c3e0:	f7ff ffc0 	bl	800c364 <_Bfree>
 800c3e4:	0034      	movs	r4, r6
 800c3e6:	1d3b      	adds	r3, r7, #4
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	18e3      	adds	r3, r4, r3
 800c3ec:	605d      	str	r5, [r3, #4]
 800c3ee:	1c7b      	adds	r3, r7, #1
 800c3f0:	6123      	str	r3, [r4, #16]
 800c3f2:	0020      	movs	r0, r4
 800c3f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3f6:	46c0      	nop			; (mov r8, r8)
 800c3f8:	08013fb9 	.word	0x08013fb9
 800c3fc:	0801402a 	.word	0x0801402a

0800c400 <__s2b>:
 800c400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c402:	0006      	movs	r6, r0
 800c404:	0018      	movs	r0, r3
 800c406:	000c      	movs	r4, r1
 800c408:	3008      	adds	r0, #8
 800c40a:	2109      	movs	r1, #9
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	0015      	movs	r5, r2
 800c410:	f7f3 ff1e 	bl	8000250 <__divsi3>
 800c414:	2301      	movs	r3, #1
 800c416:	2100      	movs	r1, #0
 800c418:	4283      	cmp	r3, r0
 800c41a:	db0a      	blt.n	800c432 <__s2b+0x32>
 800c41c:	0030      	movs	r0, r6
 800c41e:	f7ff ff79 	bl	800c314 <_Balloc>
 800c422:	1e01      	subs	r1, r0, #0
 800c424:	d108      	bne.n	800c438 <__s2b+0x38>
 800c426:	000a      	movs	r2, r1
 800c428:	4b19      	ldr	r3, [pc, #100]	; (800c490 <__s2b+0x90>)
 800c42a:	481a      	ldr	r0, [pc, #104]	; (800c494 <__s2b+0x94>)
 800c42c:	31d3      	adds	r1, #211	; 0xd3
 800c42e:	f003 fa35 	bl	800f89c <__assert_func>
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	3101      	adds	r1, #1
 800c436:	e7ef      	b.n	800c418 <__s2b+0x18>
 800c438:	9b08      	ldr	r3, [sp, #32]
 800c43a:	6143      	str	r3, [r0, #20]
 800c43c:	2301      	movs	r3, #1
 800c43e:	6103      	str	r3, [r0, #16]
 800c440:	2d09      	cmp	r5, #9
 800c442:	dd18      	ble.n	800c476 <__s2b+0x76>
 800c444:	0023      	movs	r3, r4
 800c446:	3309      	adds	r3, #9
 800c448:	001f      	movs	r7, r3
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	1964      	adds	r4, r4, r5
 800c44e:	783b      	ldrb	r3, [r7, #0]
 800c450:	220a      	movs	r2, #10
 800c452:	0030      	movs	r0, r6
 800c454:	3b30      	subs	r3, #48	; 0x30
 800c456:	f7ff ff8f 	bl	800c378 <__multadd>
 800c45a:	3701      	adds	r7, #1
 800c45c:	0001      	movs	r1, r0
 800c45e:	42a7      	cmp	r7, r4
 800c460:	d1f5      	bne.n	800c44e <__s2b+0x4e>
 800c462:	002c      	movs	r4, r5
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	3c08      	subs	r4, #8
 800c468:	191c      	adds	r4, r3, r4
 800c46a:	002f      	movs	r7, r5
 800c46c:	9b01      	ldr	r3, [sp, #4]
 800c46e:	429f      	cmp	r7, r3
 800c470:	db04      	blt.n	800c47c <__s2b+0x7c>
 800c472:	0008      	movs	r0, r1
 800c474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c476:	2509      	movs	r5, #9
 800c478:	340a      	adds	r4, #10
 800c47a:	e7f6      	b.n	800c46a <__s2b+0x6a>
 800c47c:	1b63      	subs	r3, r4, r5
 800c47e:	5ddb      	ldrb	r3, [r3, r7]
 800c480:	220a      	movs	r2, #10
 800c482:	0030      	movs	r0, r6
 800c484:	3b30      	subs	r3, #48	; 0x30
 800c486:	f7ff ff77 	bl	800c378 <__multadd>
 800c48a:	3701      	adds	r7, #1
 800c48c:	0001      	movs	r1, r0
 800c48e:	e7ed      	b.n	800c46c <__s2b+0x6c>
 800c490:	08013fb9 	.word	0x08013fb9
 800c494:	0801402a 	.word	0x0801402a

0800c498 <__hi0bits>:
 800c498:	0003      	movs	r3, r0
 800c49a:	0c02      	lsrs	r2, r0, #16
 800c49c:	2000      	movs	r0, #0
 800c49e:	4282      	cmp	r2, r0
 800c4a0:	d101      	bne.n	800c4a6 <__hi0bits+0xe>
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	3010      	adds	r0, #16
 800c4a6:	0e1a      	lsrs	r2, r3, #24
 800c4a8:	d101      	bne.n	800c4ae <__hi0bits+0x16>
 800c4aa:	3008      	adds	r0, #8
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	0f1a      	lsrs	r2, r3, #28
 800c4b0:	d101      	bne.n	800c4b6 <__hi0bits+0x1e>
 800c4b2:	3004      	adds	r0, #4
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	0f9a      	lsrs	r2, r3, #30
 800c4b8:	d101      	bne.n	800c4be <__hi0bits+0x26>
 800c4ba:	3002      	adds	r0, #2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	db03      	blt.n	800c4ca <__hi0bits+0x32>
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	d400      	bmi.n	800c4ca <__hi0bits+0x32>
 800c4c8:	2020      	movs	r0, #32
 800c4ca:	4770      	bx	lr

0800c4cc <__lo0bits>:
 800c4cc:	6803      	ldr	r3, [r0, #0]
 800c4ce:	0001      	movs	r1, r0
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	4010      	ands	r0, r2
 800c4d6:	4213      	tst	r3, r2
 800c4d8:	d00d      	beq.n	800c4f6 <__lo0bits+0x2a>
 800c4da:	3a06      	subs	r2, #6
 800c4dc:	2000      	movs	r0, #0
 800c4de:	4213      	tst	r3, r2
 800c4e0:	d105      	bne.n	800c4ee <__lo0bits+0x22>
 800c4e2:	3002      	adds	r0, #2
 800c4e4:	4203      	tst	r3, r0
 800c4e6:	d003      	beq.n	800c4f0 <__lo0bits+0x24>
 800c4e8:	40d3      	lsrs	r3, r2
 800c4ea:	0010      	movs	r0, r2
 800c4ec:	600b      	str	r3, [r1, #0]
 800c4ee:	4770      	bx	lr
 800c4f0:	089b      	lsrs	r3, r3, #2
 800c4f2:	600b      	str	r3, [r1, #0]
 800c4f4:	e7fb      	b.n	800c4ee <__lo0bits+0x22>
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d101      	bne.n	800c500 <__lo0bits+0x34>
 800c4fc:	2010      	movs	r0, #16
 800c4fe:	0c1b      	lsrs	r3, r3, #16
 800c500:	b2da      	uxtb	r2, r3
 800c502:	2a00      	cmp	r2, #0
 800c504:	d101      	bne.n	800c50a <__lo0bits+0x3e>
 800c506:	3008      	adds	r0, #8
 800c508:	0a1b      	lsrs	r3, r3, #8
 800c50a:	071a      	lsls	r2, r3, #28
 800c50c:	d101      	bne.n	800c512 <__lo0bits+0x46>
 800c50e:	3004      	adds	r0, #4
 800c510:	091b      	lsrs	r3, r3, #4
 800c512:	079a      	lsls	r2, r3, #30
 800c514:	d101      	bne.n	800c51a <__lo0bits+0x4e>
 800c516:	3002      	adds	r0, #2
 800c518:	089b      	lsrs	r3, r3, #2
 800c51a:	07da      	lsls	r2, r3, #31
 800c51c:	d4e9      	bmi.n	800c4f2 <__lo0bits+0x26>
 800c51e:	3001      	adds	r0, #1
 800c520:	085b      	lsrs	r3, r3, #1
 800c522:	d1e6      	bne.n	800c4f2 <__lo0bits+0x26>
 800c524:	2020      	movs	r0, #32
 800c526:	e7e2      	b.n	800c4ee <__lo0bits+0x22>

0800c528 <__i2b>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	000c      	movs	r4, r1
 800c52c:	2101      	movs	r1, #1
 800c52e:	f7ff fef1 	bl	800c314 <_Balloc>
 800c532:	2800      	cmp	r0, #0
 800c534:	d107      	bne.n	800c546 <__i2b+0x1e>
 800c536:	2146      	movs	r1, #70	; 0x46
 800c538:	4c05      	ldr	r4, [pc, #20]	; (800c550 <__i2b+0x28>)
 800c53a:	0002      	movs	r2, r0
 800c53c:	4b05      	ldr	r3, [pc, #20]	; (800c554 <__i2b+0x2c>)
 800c53e:	0020      	movs	r0, r4
 800c540:	31ff      	adds	r1, #255	; 0xff
 800c542:	f003 f9ab 	bl	800f89c <__assert_func>
 800c546:	2301      	movs	r3, #1
 800c548:	6144      	str	r4, [r0, #20]
 800c54a:	6103      	str	r3, [r0, #16]
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	46c0      	nop			; (mov r8, r8)
 800c550:	0801402a 	.word	0x0801402a
 800c554:	08013fb9 	.word	0x08013fb9

0800c558 <__multiply>:
 800c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55a:	0015      	movs	r5, r2
 800c55c:	690a      	ldr	r2, [r1, #16]
 800c55e:	692b      	ldr	r3, [r5, #16]
 800c560:	000c      	movs	r4, r1
 800c562:	b08b      	sub	sp, #44	; 0x2c
 800c564:	429a      	cmp	r2, r3
 800c566:	da01      	bge.n	800c56c <__multiply+0x14>
 800c568:	002c      	movs	r4, r5
 800c56a:	000d      	movs	r5, r1
 800c56c:	6927      	ldr	r7, [r4, #16]
 800c56e:	692e      	ldr	r6, [r5, #16]
 800c570:	6861      	ldr	r1, [r4, #4]
 800c572:	19bb      	adds	r3, r7, r6
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	19ba      	adds	r2, r7, r6
 800c57a:	4293      	cmp	r3, r2
 800c57c:	da00      	bge.n	800c580 <__multiply+0x28>
 800c57e:	3101      	adds	r1, #1
 800c580:	f7ff fec8 	bl	800c314 <_Balloc>
 800c584:	9002      	str	r0, [sp, #8]
 800c586:	2800      	cmp	r0, #0
 800c588:	d106      	bne.n	800c598 <__multiply+0x40>
 800c58a:	21b1      	movs	r1, #177	; 0xb1
 800c58c:	4b48      	ldr	r3, [pc, #288]	; (800c6b0 <__multiply+0x158>)
 800c58e:	4849      	ldr	r0, [pc, #292]	; (800c6b4 <__multiply+0x15c>)
 800c590:	9a02      	ldr	r2, [sp, #8]
 800c592:	0049      	lsls	r1, r1, #1
 800c594:	f003 f982 	bl	800f89c <__assert_func>
 800c598:	9b02      	ldr	r3, [sp, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	3314      	adds	r3, #20
 800c59e:	469c      	mov	ip, r3
 800c5a0:	19bb      	adds	r3, r7, r6
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4463      	add	r3, ip
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	4663      	mov	r3, ip
 800c5aa:	9904      	ldr	r1, [sp, #16]
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	d32a      	bcc.n	800c606 <__multiply+0xae>
 800c5b0:	0023      	movs	r3, r4
 800c5b2:	00bf      	lsls	r7, r7, #2
 800c5b4:	3314      	adds	r3, #20
 800c5b6:	3514      	adds	r5, #20
 800c5b8:	9308      	str	r3, [sp, #32]
 800c5ba:	00b6      	lsls	r6, r6, #2
 800c5bc:	19db      	adds	r3, r3, r7
 800c5be:	9305      	str	r3, [sp, #20]
 800c5c0:	19ab      	adds	r3, r5, r6
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	9306      	str	r3, [sp, #24]
 800c5c8:	0023      	movs	r3, r4
 800c5ca:	9a05      	ldr	r2, [sp, #20]
 800c5cc:	3315      	adds	r3, #21
 800c5ce:	9501      	str	r5, [sp, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d305      	bcc.n	800c5e0 <__multiply+0x88>
 800c5d4:	1b13      	subs	r3, r2, r4
 800c5d6:	3b15      	subs	r3, #21
 800c5d8:	089b      	lsrs	r3, r3, #2
 800c5da:	3301      	adds	r3, #1
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	9306      	str	r3, [sp, #24]
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d310      	bcc.n	800c60a <__multiply+0xb2>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dd05      	ble.n	800c5fa <__multiply+0xa2>
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	3b04      	subs	r3, #4
 800c5f2:	9304      	str	r3, [sp, #16]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d056      	beq.n	800c6a8 <__multiply+0x150>
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	9a03      	ldr	r2, [sp, #12]
 800c5fe:	0018      	movs	r0, r3
 800c600:	611a      	str	r2, [r3, #16]
 800c602:	b00b      	add	sp, #44	; 0x2c
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c606:	c304      	stmia	r3!, {r2}
 800c608:	e7cf      	b.n	800c5aa <__multiply+0x52>
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	b280      	uxth	r0, r0
 800c610:	2800      	cmp	r0, #0
 800c612:	d01e      	beq.n	800c652 <__multiply+0xfa>
 800c614:	4667      	mov	r7, ip
 800c616:	2500      	movs	r5, #0
 800c618:	9e08      	ldr	r6, [sp, #32]
 800c61a:	ce02      	ldmia	r6!, {r1}
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	9307      	str	r3, [sp, #28]
 800c620:	b28b      	uxth	r3, r1
 800c622:	4343      	muls	r3, r0
 800c624:	001a      	movs	r2, r3
 800c626:	466b      	mov	r3, sp
 800c628:	8b9b      	ldrh	r3, [r3, #28]
 800c62a:	18d3      	adds	r3, r2, r3
 800c62c:	195b      	adds	r3, r3, r5
 800c62e:	0c0d      	lsrs	r5, r1, #16
 800c630:	4345      	muls	r5, r0
 800c632:	9a07      	ldr	r2, [sp, #28]
 800c634:	0c11      	lsrs	r1, r2, #16
 800c636:	1869      	adds	r1, r5, r1
 800c638:	0c1a      	lsrs	r2, r3, #16
 800c63a:	188a      	adds	r2, r1, r2
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	0c15      	lsrs	r5, r2, #16
 800c640:	0412      	lsls	r2, r2, #16
 800c642:	431a      	orrs	r2, r3
 800c644:	9b05      	ldr	r3, [sp, #20]
 800c646:	c704      	stmia	r7!, {r2}
 800c648:	42b3      	cmp	r3, r6
 800c64a:	d8e6      	bhi.n	800c61a <__multiply+0xc2>
 800c64c:	4663      	mov	r3, ip
 800c64e:	9a06      	ldr	r2, [sp, #24]
 800c650:	509d      	str	r5, [r3, r2]
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	6818      	ldr	r0, [r3, #0]
 800c656:	0c00      	lsrs	r0, r0, #16
 800c658:	d020      	beq.n	800c69c <__multiply+0x144>
 800c65a:	4663      	mov	r3, ip
 800c65c:	0025      	movs	r5, r4
 800c65e:	4661      	mov	r1, ip
 800c660:	2700      	movs	r7, #0
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3514      	adds	r5, #20
 800c666:	682a      	ldr	r2, [r5, #0]
 800c668:	680e      	ldr	r6, [r1, #0]
 800c66a:	b292      	uxth	r2, r2
 800c66c:	4342      	muls	r2, r0
 800c66e:	0c36      	lsrs	r6, r6, #16
 800c670:	1992      	adds	r2, r2, r6
 800c672:	19d2      	adds	r2, r2, r7
 800c674:	0416      	lsls	r6, r2, #16
 800c676:	b29b      	uxth	r3, r3
 800c678:	431e      	orrs	r6, r3
 800c67a:	600e      	str	r6, [r1, #0]
 800c67c:	cd40      	ldmia	r5!, {r6}
 800c67e:	684b      	ldr	r3, [r1, #4]
 800c680:	0c36      	lsrs	r6, r6, #16
 800c682:	4346      	muls	r6, r0
 800c684:	b29b      	uxth	r3, r3
 800c686:	0c12      	lsrs	r2, r2, #16
 800c688:	18f3      	adds	r3, r6, r3
 800c68a:	189b      	adds	r3, r3, r2
 800c68c:	9a05      	ldr	r2, [sp, #20]
 800c68e:	0c1f      	lsrs	r7, r3, #16
 800c690:	3104      	adds	r1, #4
 800c692:	42aa      	cmp	r2, r5
 800c694:	d8e7      	bhi.n	800c666 <__multiply+0x10e>
 800c696:	4662      	mov	r2, ip
 800c698:	9906      	ldr	r1, [sp, #24]
 800c69a:	5053      	str	r3, [r2, r1]
 800c69c:	9b01      	ldr	r3, [sp, #4]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	2304      	movs	r3, #4
 800c6a4:	449c      	add	ip, r3
 800c6a6:	e79b      	b.n	800c5e0 <__multiply+0x88>
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	9303      	str	r3, [sp, #12]
 800c6ae:	e79b      	b.n	800c5e8 <__multiply+0x90>
 800c6b0:	08013fb9 	.word	0x08013fb9
 800c6b4:	0801402a 	.word	0x0801402a

0800c6b8 <__pow5mult>:
 800c6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	0015      	movs	r5, r2
 800c6be:	0007      	movs	r7, r0
 800c6c0:	000e      	movs	r6, r1
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	421d      	tst	r5, r3
 800c6c6:	d008      	beq.n	800c6da <__pow5mult+0x22>
 800c6c8:	491a      	ldr	r1, [pc, #104]	; (800c734 <__pow5mult+0x7c>)
 800c6ca:	3a01      	subs	r2, #1
 800c6cc:	0092      	lsls	r2, r2, #2
 800c6ce:	5852      	ldr	r2, [r2, r1]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	0031      	movs	r1, r6
 800c6d4:	f7ff fe50 	bl	800c378 <__multadd>
 800c6d8:	0006      	movs	r6, r0
 800c6da:	10ad      	asrs	r5, r5, #2
 800c6dc:	d027      	beq.n	800c72e <__pow5mult+0x76>
 800c6de:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c6e0:	2c00      	cmp	r4, #0
 800c6e2:	d107      	bne.n	800c6f4 <__pow5mult+0x3c>
 800c6e4:	0038      	movs	r0, r7
 800c6e6:	4914      	ldr	r1, [pc, #80]	; (800c738 <__pow5mult+0x80>)
 800c6e8:	f7ff ff1e 	bl	800c528 <__i2b>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	0004      	movs	r4, r0
 800c6f0:	6438      	str	r0, [r7, #64]	; 0x40
 800c6f2:	6003      	str	r3, [r0, #0]
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	421d      	tst	r5, r3
 800c6f8:	d00a      	beq.n	800c710 <__pow5mult+0x58>
 800c6fa:	0031      	movs	r1, r6
 800c6fc:	0022      	movs	r2, r4
 800c6fe:	0038      	movs	r0, r7
 800c700:	f7ff ff2a 	bl	800c558 <__multiply>
 800c704:	0031      	movs	r1, r6
 800c706:	9001      	str	r0, [sp, #4]
 800c708:	0038      	movs	r0, r7
 800c70a:	f7ff fe2b 	bl	800c364 <_Bfree>
 800c70e:	9e01      	ldr	r6, [sp, #4]
 800c710:	106d      	asrs	r5, r5, #1
 800c712:	d00c      	beq.n	800c72e <__pow5mult+0x76>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	2800      	cmp	r0, #0
 800c718:	d107      	bne.n	800c72a <__pow5mult+0x72>
 800c71a:	0022      	movs	r2, r4
 800c71c:	0021      	movs	r1, r4
 800c71e:	0038      	movs	r0, r7
 800c720:	f7ff ff1a 	bl	800c558 <__multiply>
 800c724:	2300      	movs	r3, #0
 800c726:	6020      	str	r0, [r4, #0]
 800c728:	6003      	str	r3, [r0, #0]
 800c72a:	0004      	movs	r4, r0
 800c72c:	e7e2      	b.n	800c6f4 <__pow5mult+0x3c>
 800c72e:	0030      	movs	r0, r6
 800c730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	08014178 	.word	0x08014178
 800c738:	00000271 	.word	0x00000271

0800c73c <__lshift>:
 800c73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73e:	000c      	movs	r4, r1
 800c740:	0017      	movs	r7, r2
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	1155      	asrs	r5, r2, #5
 800c746:	b087      	sub	sp, #28
 800c748:	18eb      	adds	r3, r5, r3
 800c74a:	9302      	str	r3, [sp, #8]
 800c74c:	3301      	adds	r3, #1
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	6849      	ldr	r1, [r1, #4]
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	9004      	str	r0, [sp, #16]
 800c756:	9a01      	ldr	r2, [sp, #4]
 800c758:	4293      	cmp	r3, r2
 800c75a:	db10      	blt.n	800c77e <__lshift+0x42>
 800c75c:	9804      	ldr	r0, [sp, #16]
 800c75e:	f7ff fdd9 	bl	800c314 <_Balloc>
 800c762:	2300      	movs	r3, #0
 800c764:	0002      	movs	r2, r0
 800c766:	0006      	movs	r6, r0
 800c768:	0019      	movs	r1, r3
 800c76a:	3214      	adds	r2, #20
 800c76c:	4298      	cmp	r0, r3
 800c76e:	d10c      	bne.n	800c78a <__lshift+0x4e>
 800c770:	31df      	adds	r1, #223	; 0xdf
 800c772:	0032      	movs	r2, r6
 800c774:	4b26      	ldr	r3, [pc, #152]	; (800c810 <__lshift+0xd4>)
 800c776:	4827      	ldr	r0, [pc, #156]	; (800c814 <__lshift+0xd8>)
 800c778:	31ff      	adds	r1, #255	; 0xff
 800c77a:	f003 f88f 	bl	800f89c <__assert_func>
 800c77e:	3101      	adds	r1, #1
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	e7e8      	b.n	800c756 <__lshift+0x1a>
 800c784:	0098      	lsls	r0, r3, #2
 800c786:	5011      	str	r1, [r2, r0]
 800c788:	3301      	adds	r3, #1
 800c78a:	42ab      	cmp	r3, r5
 800c78c:	dbfa      	blt.n	800c784 <__lshift+0x48>
 800c78e:	43eb      	mvns	r3, r5
 800c790:	17db      	asrs	r3, r3, #31
 800c792:	401d      	ands	r5, r3
 800c794:	211f      	movs	r1, #31
 800c796:	0023      	movs	r3, r4
 800c798:	0038      	movs	r0, r7
 800c79a:	00ad      	lsls	r5, r5, #2
 800c79c:	1955      	adds	r5, r2, r5
 800c79e:	6922      	ldr	r2, [r4, #16]
 800c7a0:	3314      	adds	r3, #20
 800c7a2:	0092      	lsls	r2, r2, #2
 800c7a4:	4008      	ands	r0, r1
 800c7a6:	4684      	mov	ip, r0
 800c7a8:	189a      	adds	r2, r3, r2
 800c7aa:	420f      	tst	r7, r1
 800c7ac:	d02a      	beq.n	800c804 <__lshift+0xc8>
 800c7ae:	3101      	adds	r1, #1
 800c7b0:	1a09      	subs	r1, r1, r0
 800c7b2:	9105      	str	r1, [sp, #20]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	9503      	str	r5, [sp, #12]
 800c7b8:	4667      	mov	r7, ip
 800c7ba:	6818      	ldr	r0, [r3, #0]
 800c7bc:	40b8      	lsls	r0, r7
 800c7be:	4308      	orrs	r0, r1
 800c7c0:	9903      	ldr	r1, [sp, #12]
 800c7c2:	c101      	stmia	r1!, {r0}
 800c7c4:	9103      	str	r1, [sp, #12]
 800c7c6:	9805      	ldr	r0, [sp, #20]
 800c7c8:	cb02      	ldmia	r3!, {r1}
 800c7ca:	40c1      	lsrs	r1, r0
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d8f3      	bhi.n	800c7b8 <__lshift+0x7c>
 800c7d0:	0020      	movs	r0, r4
 800c7d2:	3015      	adds	r0, #21
 800c7d4:	2304      	movs	r3, #4
 800c7d6:	4282      	cmp	r2, r0
 800c7d8:	d304      	bcc.n	800c7e4 <__lshift+0xa8>
 800c7da:	1b13      	subs	r3, r2, r4
 800c7dc:	3b15      	subs	r3, #21
 800c7de:	089b      	lsrs	r3, r3, #2
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	50e9      	str	r1, [r5, r3]
 800c7e6:	2900      	cmp	r1, #0
 800c7e8:	d002      	beq.n	800c7f0 <__lshift+0xb4>
 800c7ea:	9b02      	ldr	r3, [sp, #8]
 800c7ec:	3302      	adds	r3, #2
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	9b01      	ldr	r3, [sp, #4]
 800c7f2:	9804      	ldr	r0, [sp, #16]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	0021      	movs	r1, r4
 800c7f8:	6133      	str	r3, [r6, #16]
 800c7fa:	f7ff fdb3 	bl	800c364 <_Bfree>
 800c7fe:	0030      	movs	r0, r6
 800c800:	b007      	add	sp, #28
 800c802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c804:	cb02      	ldmia	r3!, {r1}
 800c806:	c502      	stmia	r5!, {r1}
 800c808:	429a      	cmp	r2, r3
 800c80a:	d8fb      	bhi.n	800c804 <__lshift+0xc8>
 800c80c:	e7f0      	b.n	800c7f0 <__lshift+0xb4>
 800c80e:	46c0      	nop			; (mov r8, r8)
 800c810:	08013fb9 	.word	0x08013fb9
 800c814:	0801402a 	.word	0x0801402a

0800c818 <__mcmp>:
 800c818:	b530      	push	{r4, r5, lr}
 800c81a:	690b      	ldr	r3, [r1, #16]
 800c81c:	6904      	ldr	r4, [r0, #16]
 800c81e:	0002      	movs	r2, r0
 800c820:	1ae0      	subs	r0, r4, r3
 800c822:	429c      	cmp	r4, r3
 800c824:	d10e      	bne.n	800c844 <__mcmp+0x2c>
 800c826:	3214      	adds	r2, #20
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	3114      	adds	r1, #20
 800c82c:	0014      	movs	r4, r2
 800c82e:	18c9      	adds	r1, r1, r3
 800c830:	18d2      	adds	r2, r2, r3
 800c832:	3a04      	subs	r2, #4
 800c834:	3904      	subs	r1, #4
 800c836:	6815      	ldr	r5, [r2, #0]
 800c838:	680b      	ldr	r3, [r1, #0]
 800c83a:	429d      	cmp	r5, r3
 800c83c:	d003      	beq.n	800c846 <__mcmp+0x2e>
 800c83e:	2001      	movs	r0, #1
 800c840:	429d      	cmp	r5, r3
 800c842:	d303      	bcc.n	800c84c <__mcmp+0x34>
 800c844:	bd30      	pop	{r4, r5, pc}
 800c846:	4294      	cmp	r4, r2
 800c848:	d3f3      	bcc.n	800c832 <__mcmp+0x1a>
 800c84a:	e7fb      	b.n	800c844 <__mcmp+0x2c>
 800c84c:	4240      	negs	r0, r0
 800c84e:	e7f9      	b.n	800c844 <__mcmp+0x2c>

0800c850 <__mdiff>:
 800c850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c852:	000e      	movs	r6, r1
 800c854:	0007      	movs	r7, r0
 800c856:	0011      	movs	r1, r2
 800c858:	0030      	movs	r0, r6
 800c85a:	b087      	sub	sp, #28
 800c85c:	0014      	movs	r4, r2
 800c85e:	f7ff ffdb 	bl	800c818 <__mcmp>
 800c862:	1e05      	subs	r5, r0, #0
 800c864:	d110      	bne.n	800c888 <__mdiff+0x38>
 800c866:	0001      	movs	r1, r0
 800c868:	0038      	movs	r0, r7
 800c86a:	f7ff fd53 	bl	800c314 <_Balloc>
 800c86e:	1e02      	subs	r2, r0, #0
 800c870:	d104      	bne.n	800c87c <__mdiff+0x2c>
 800c872:	4b3f      	ldr	r3, [pc, #252]	; (800c970 <__mdiff+0x120>)
 800c874:	483f      	ldr	r0, [pc, #252]	; (800c974 <__mdiff+0x124>)
 800c876:	4940      	ldr	r1, [pc, #256]	; (800c978 <__mdiff+0x128>)
 800c878:	f003 f810 	bl	800f89c <__assert_func>
 800c87c:	2301      	movs	r3, #1
 800c87e:	6145      	str	r5, [r0, #20]
 800c880:	6103      	str	r3, [r0, #16]
 800c882:	0010      	movs	r0, r2
 800c884:	b007      	add	sp, #28
 800c886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c888:	2301      	movs	r3, #1
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	2800      	cmp	r0, #0
 800c88e:	db04      	blt.n	800c89a <__mdiff+0x4a>
 800c890:	0023      	movs	r3, r4
 800c892:	0034      	movs	r4, r6
 800c894:	001e      	movs	r6, r3
 800c896:	2300      	movs	r3, #0
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	0038      	movs	r0, r7
 800c89c:	6861      	ldr	r1, [r4, #4]
 800c89e:	f7ff fd39 	bl	800c314 <_Balloc>
 800c8a2:	1e02      	subs	r2, r0, #0
 800c8a4:	d103      	bne.n	800c8ae <__mdiff+0x5e>
 800c8a6:	4b32      	ldr	r3, [pc, #200]	; (800c970 <__mdiff+0x120>)
 800c8a8:	4832      	ldr	r0, [pc, #200]	; (800c974 <__mdiff+0x124>)
 800c8aa:	4934      	ldr	r1, [pc, #208]	; (800c97c <__mdiff+0x12c>)
 800c8ac:	e7e4      	b.n	800c878 <__mdiff+0x28>
 800c8ae:	9b01      	ldr	r3, [sp, #4]
 800c8b0:	2700      	movs	r7, #0
 800c8b2:	60c3      	str	r3, [r0, #12]
 800c8b4:	6920      	ldr	r0, [r4, #16]
 800c8b6:	3414      	adds	r4, #20
 800c8b8:	0083      	lsls	r3, r0, #2
 800c8ba:	18e3      	adds	r3, r4, r3
 800c8bc:	0021      	movs	r1, r4
 800c8be:	9401      	str	r4, [sp, #4]
 800c8c0:	0034      	movs	r4, r6
 800c8c2:	9302      	str	r3, [sp, #8]
 800c8c4:	6933      	ldr	r3, [r6, #16]
 800c8c6:	3414      	adds	r4, #20
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	18e3      	adds	r3, r4, r3
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	0013      	movs	r3, r2
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	469c      	mov	ip, r3
 800c8d4:	9305      	str	r3, [sp, #20]
 800c8d6:	9104      	str	r1, [sp, #16]
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	cc02      	ldmia	r4!, {r1}
 800c8dc:	cb20      	ldmia	r3!, {r5}
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	b2ab      	uxth	r3, r5
 800c8e2:	19df      	adds	r7, r3, r7
 800c8e4:	b28b      	uxth	r3, r1
 800c8e6:	1afb      	subs	r3, r7, r3
 800c8e8:	0c09      	lsrs	r1, r1, #16
 800c8ea:	0c2d      	lsrs	r5, r5, #16
 800c8ec:	1a6d      	subs	r5, r5, r1
 800c8ee:	1419      	asrs	r1, r3, #16
 800c8f0:	1869      	adds	r1, r5, r1
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	140f      	asrs	r7, r1, #16
 800c8f6:	0409      	lsls	r1, r1, #16
 800c8f8:	4319      	orrs	r1, r3
 800c8fa:	4663      	mov	r3, ip
 800c8fc:	c302      	stmia	r3!, {r1}
 800c8fe:	469c      	mov	ip, r3
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	42a3      	cmp	r3, r4
 800c904:	d8e8      	bhi.n	800c8d8 <__mdiff+0x88>
 800c906:	0031      	movs	r1, r6
 800c908:	9c03      	ldr	r4, [sp, #12]
 800c90a:	3115      	adds	r1, #21
 800c90c:	2304      	movs	r3, #4
 800c90e:	428c      	cmp	r4, r1
 800c910:	d304      	bcc.n	800c91c <__mdiff+0xcc>
 800c912:	1ba3      	subs	r3, r4, r6
 800c914:	3b15      	subs	r3, #21
 800c916:	089b      	lsrs	r3, r3, #2
 800c918:	3301      	adds	r3, #1
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	9901      	ldr	r1, [sp, #4]
 800c91e:	18cd      	adds	r5, r1, r3
 800c920:	9905      	ldr	r1, [sp, #20]
 800c922:	002e      	movs	r6, r5
 800c924:	18cb      	adds	r3, r1, r3
 800c926:	469c      	mov	ip, r3
 800c928:	9902      	ldr	r1, [sp, #8]
 800c92a:	428e      	cmp	r6, r1
 800c92c:	d310      	bcc.n	800c950 <__mdiff+0x100>
 800c92e:	9e02      	ldr	r6, [sp, #8]
 800c930:	1ee9      	subs	r1, r5, #3
 800c932:	2400      	movs	r4, #0
 800c934:	428e      	cmp	r6, r1
 800c936:	d304      	bcc.n	800c942 <__mdiff+0xf2>
 800c938:	0031      	movs	r1, r6
 800c93a:	3103      	adds	r1, #3
 800c93c:	1b49      	subs	r1, r1, r5
 800c93e:	0889      	lsrs	r1, r1, #2
 800c940:	008c      	lsls	r4, r1, #2
 800c942:	191b      	adds	r3, r3, r4
 800c944:	3b04      	subs	r3, #4
 800c946:	6819      	ldr	r1, [r3, #0]
 800c948:	2900      	cmp	r1, #0
 800c94a:	d00f      	beq.n	800c96c <__mdiff+0x11c>
 800c94c:	6110      	str	r0, [r2, #16]
 800c94e:	e798      	b.n	800c882 <__mdiff+0x32>
 800c950:	ce02      	ldmia	r6!, {r1}
 800c952:	b28c      	uxth	r4, r1
 800c954:	19e4      	adds	r4, r4, r7
 800c956:	0c0f      	lsrs	r7, r1, #16
 800c958:	1421      	asrs	r1, r4, #16
 800c95a:	1879      	adds	r1, r7, r1
 800c95c:	b2a4      	uxth	r4, r4
 800c95e:	140f      	asrs	r7, r1, #16
 800c960:	0409      	lsls	r1, r1, #16
 800c962:	4321      	orrs	r1, r4
 800c964:	4664      	mov	r4, ip
 800c966:	c402      	stmia	r4!, {r1}
 800c968:	46a4      	mov	ip, r4
 800c96a:	e7dd      	b.n	800c928 <__mdiff+0xd8>
 800c96c:	3801      	subs	r0, #1
 800c96e:	e7e9      	b.n	800c944 <__mdiff+0xf4>
 800c970:	08013fb9 	.word	0x08013fb9
 800c974:	0801402a 	.word	0x0801402a
 800c978:	00000237 	.word	0x00000237
 800c97c:	00000245 	.word	0x00000245

0800c980 <__ulp>:
 800c980:	2000      	movs	r0, #0
 800c982:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <__ulp+0x30>)
 800c984:	4019      	ands	r1, r3
 800c986:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <__ulp+0x34>)
 800c988:	18c9      	adds	r1, r1, r3
 800c98a:	4281      	cmp	r1, r0
 800c98c:	dc06      	bgt.n	800c99c <__ulp+0x1c>
 800c98e:	4249      	negs	r1, r1
 800c990:	150b      	asrs	r3, r1, #20
 800c992:	2b13      	cmp	r3, #19
 800c994:	dc03      	bgt.n	800c99e <__ulp+0x1e>
 800c996:	2180      	movs	r1, #128	; 0x80
 800c998:	0309      	lsls	r1, r1, #12
 800c99a:	4119      	asrs	r1, r3
 800c99c:	4770      	bx	lr
 800c99e:	3b14      	subs	r3, #20
 800c9a0:	2001      	movs	r0, #1
 800c9a2:	2b1e      	cmp	r3, #30
 800c9a4:	dc02      	bgt.n	800c9ac <__ulp+0x2c>
 800c9a6:	2080      	movs	r0, #128	; 0x80
 800c9a8:	0600      	lsls	r0, r0, #24
 800c9aa:	40d8      	lsrs	r0, r3
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	e7f5      	b.n	800c99c <__ulp+0x1c>
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	fcc00000 	.word	0xfcc00000

0800c9b8 <__b2d>:
 800c9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ba:	0006      	movs	r6, r0
 800c9bc:	6903      	ldr	r3, [r0, #16]
 800c9be:	3614      	adds	r6, #20
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	18f3      	adds	r3, r6, r3
 800c9c4:	1f1d      	subs	r5, r3, #4
 800c9c6:	682c      	ldr	r4, [r5, #0]
 800c9c8:	000f      	movs	r7, r1
 800c9ca:	0020      	movs	r0, r4
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	f7ff fd63 	bl	800c498 <__hi0bits>
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	1a12      	subs	r2, r2, r0
 800c9d6:	603a      	str	r2, [r7, #0]
 800c9d8:	0003      	movs	r3, r0
 800c9da:	4a1c      	ldr	r2, [pc, #112]	; (800ca4c <__b2d+0x94>)
 800c9dc:	280a      	cmp	r0, #10
 800c9de:	dc15      	bgt.n	800ca0c <__b2d+0x54>
 800c9e0:	210b      	movs	r1, #11
 800c9e2:	0027      	movs	r7, r4
 800c9e4:	1a09      	subs	r1, r1, r0
 800c9e6:	40cf      	lsrs	r7, r1
 800c9e8:	433a      	orrs	r2, r7
 800c9ea:	468c      	mov	ip, r1
 800c9ec:	0011      	movs	r1, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	42ae      	cmp	r6, r5
 800c9f2:	d202      	bcs.n	800c9fa <__b2d+0x42>
 800c9f4:	9a01      	ldr	r2, [sp, #4]
 800c9f6:	3a08      	subs	r2, #8
 800c9f8:	6812      	ldr	r2, [r2, #0]
 800c9fa:	3315      	adds	r3, #21
 800c9fc:	409c      	lsls	r4, r3
 800c9fe:	4663      	mov	r3, ip
 800ca00:	0027      	movs	r7, r4
 800ca02:	40da      	lsrs	r2, r3
 800ca04:	4317      	orrs	r7, r2
 800ca06:	0038      	movs	r0, r7
 800ca08:	b003      	add	sp, #12
 800ca0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca0c:	2700      	movs	r7, #0
 800ca0e:	42ae      	cmp	r6, r5
 800ca10:	d202      	bcs.n	800ca18 <__b2d+0x60>
 800ca12:	9d01      	ldr	r5, [sp, #4]
 800ca14:	3d08      	subs	r5, #8
 800ca16:	682f      	ldr	r7, [r5, #0]
 800ca18:	210b      	movs	r1, #11
 800ca1a:	4249      	negs	r1, r1
 800ca1c:	468c      	mov	ip, r1
 800ca1e:	449c      	add	ip, r3
 800ca20:	2b0b      	cmp	r3, #11
 800ca22:	d010      	beq.n	800ca46 <__b2d+0x8e>
 800ca24:	4661      	mov	r1, ip
 800ca26:	2320      	movs	r3, #32
 800ca28:	408c      	lsls	r4, r1
 800ca2a:	1a5b      	subs	r3, r3, r1
 800ca2c:	0039      	movs	r1, r7
 800ca2e:	40d9      	lsrs	r1, r3
 800ca30:	430c      	orrs	r4, r1
 800ca32:	4322      	orrs	r2, r4
 800ca34:	0011      	movs	r1, r2
 800ca36:	2200      	movs	r2, #0
 800ca38:	42b5      	cmp	r5, r6
 800ca3a:	d901      	bls.n	800ca40 <__b2d+0x88>
 800ca3c:	3d04      	subs	r5, #4
 800ca3e:	682a      	ldr	r2, [r5, #0]
 800ca40:	4664      	mov	r4, ip
 800ca42:	40a7      	lsls	r7, r4
 800ca44:	e7dd      	b.n	800ca02 <__b2d+0x4a>
 800ca46:	4322      	orrs	r2, r4
 800ca48:	0011      	movs	r1, r2
 800ca4a:	e7dc      	b.n	800ca06 <__b2d+0x4e>
 800ca4c:	3ff00000 	.word	0x3ff00000

0800ca50 <__d2b>:
 800ca50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca52:	2101      	movs	r1, #1
 800ca54:	0014      	movs	r4, r2
 800ca56:	001d      	movs	r5, r3
 800ca58:	9f08      	ldr	r7, [sp, #32]
 800ca5a:	f7ff fc5b 	bl	800c314 <_Balloc>
 800ca5e:	1e06      	subs	r6, r0, #0
 800ca60:	d105      	bne.n	800ca6e <__d2b+0x1e>
 800ca62:	0032      	movs	r2, r6
 800ca64:	4b24      	ldr	r3, [pc, #144]	; (800caf8 <__d2b+0xa8>)
 800ca66:	4825      	ldr	r0, [pc, #148]	; (800cafc <__d2b+0xac>)
 800ca68:	4925      	ldr	r1, [pc, #148]	; (800cb00 <__d2b+0xb0>)
 800ca6a:	f002 ff17 	bl	800f89c <__assert_func>
 800ca6e:	032b      	lsls	r3, r5, #12
 800ca70:	006d      	lsls	r5, r5, #1
 800ca72:	0b1b      	lsrs	r3, r3, #12
 800ca74:	0d6d      	lsrs	r5, r5, #21
 800ca76:	d125      	bne.n	800cac4 <__d2b+0x74>
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	2c00      	cmp	r4, #0
 800ca7c:	d028      	beq.n	800cad0 <__d2b+0x80>
 800ca7e:	4668      	mov	r0, sp
 800ca80:	9400      	str	r4, [sp, #0]
 800ca82:	f7ff fd23 	bl	800c4cc <__lo0bits>
 800ca86:	9b01      	ldr	r3, [sp, #4]
 800ca88:	9900      	ldr	r1, [sp, #0]
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d01e      	beq.n	800cacc <__d2b+0x7c>
 800ca8e:	2220      	movs	r2, #32
 800ca90:	001c      	movs	r4, r3
 800ca92:	1a12      	subs	r2, r2, r0
 800ca94:	4094      	lsls	r4, r2
 800ca96:	0022      	movs	r2, r4
 800ca98:	40c3      	lsrs	r3, r0
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	6172      	str	r2, [r6, #20]
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	9c01      	ldr	r4, [sp, #4]
 800caa2:	61b4      	str	r4, [r6, #24]
 800caa4:	1e63      	subs	r3, r4, #1
 800caa6:	419c      	sbcs	r4, r3
 800caa8:	3401      	adds	r4, #1
 800caaa:	6134      	str	r4, [r6, #16]
 800caac:	2d00      	cmp	r5, #0
 800caae:	d017      	beq.n	800cae0 <__d2b+0x90>
 800cab0:	2435      	movs	r4, #53	; 0x35
 800cab2:	4b14      	ldr	r3, [pc, #80]	; (800cb04 <__d2b+0xb4>)
 800cab4:	18ed      	adds	r5, r5, r3
 800cab6:	182d      	adds	r5, r5, r0
 800cab8:	603d      	str	r5, [r7, #0]
 800caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabc:	1a24      	subs	r4, r4, r0
 800cabe:	601c      	str	r4, [r3, #0]
 800cac0:	0030      	movs	r0, r6
 800cac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cac4:	2280      	movs	r2, #128	; 0x80
 800cac6:	0352      	lsls	r2, r2, #13
 800cac8:	4313      	orrs	r3, r2
 800caca:	e7d5      	b.n	800ca78 <__d2b+0x28>
 800cacc:	6171      	str	r1, [r6, #20]
 800cace:	e7e7      	b.n	800caa0 <__d2b+0x50>
 800cad0:	a801      	add	r0, sp, #4
 800cad2:	f7ff fcfb 	bl	800c4cc <__lo0bits>
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	2401      	movs	r4, #1
 800cada:	6173      	str	r3, [r6, #20]
 800cadc:	3020      	adds	r0, #32
 800cade:	e7e4      	b.n	800caaa <__d2b+0x5a>
 800cae0:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <__d2b+0xb8>)
 800cae2:	18c0      	adds	r0, r0, r3
 800cae4:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <__d2b+0xbc>)
 800cae6:	6038      	str	r0, [r7, #0]
 800cae8:	18e3      	adds	r3, r4, r3
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	18f3      	adds	r3, r6, r3
 800caee:	6958      	ldr	r0, [r3, #20]
 800caf0:	f7ff fcd2 	bl	800c498 <__hi0bits>
 800caf4:	0164      	lsls	r4, r4, #5
 800caf6:	e7e0      	b.n	800caba <__d2b+0x6a>
 800caf8:	08013fb9 	.word	0x08013fb9
 800cafc:	0801402a 	.word	0x0801402a
 800cb00:	0000030f 	.word	0x0000030f
 800cb04:	fffffbcd 	.word	0xfffffbcd
 800cb08:	fffffbce 	.word	0xfffffbce
 800cb0c:	3fffffff 	.word	0x3fffffff

0800cb10 <__ratio>:
 800cb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb12:	b087      	sub	sp, #28
 800cb14:	000f      	movs	r7, r1
 800cb16:	a904      	add	r1, sp, #16
 800cb18:	0006      	movs	r6, r0
 800cb1a:	f7ff ff4d 	bl	800c9b8 <__b2d>
 800cb1e:	9000      	str	r0, [sp, #0]
 800cb20:	9101      	str	r1, [sp, #4]
 800cb22:	9c00      	ldr	r4, [sp, #0]
 800cb24:	9d01      	ldr	r5, [sp, #4]
 800cb26:	0038      	movs	r0, r7
 800cb28:	a905      	add	r1, sp, #20
 800cb2a:	f7ff ff45 	bl	800c9b8 <__b2d>
 800cb2e:	9002      	str	r0, [sp, #8]
 800cb30:	9103      	str	r1, [sp, #12]
 800cb32:	9a02      	ldr	r2, [sp, #8]
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	6930      	ldr	r0, [r6, #16]
 800cb38:	6939      	ldr	r1, [r7, #16]
 800cb3a:	9e04      	ldr	r6, [sp, #16]
 800cb3c:	1a40      	subs	r0, r0, r1
 800cb3e:	9905      	ldr	r1, [sp, #20]
 800cb40:	0140      	lsls	r0, r0, #5
 800cb42:	1a71      	subs	r1, r6, r1
 800cb44:	1841      	adds	r1, r0, r1
 800cb46:	0508      	lsls	r0, r1, #20
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	dd07      	ble.n	800cb5c <__ratio+0x4c>
 800cb4c:	9901      	ldr	r1, [sp, #4]
 800cb4e:	1845      	adds	r5, r0, r1
 800cb50:	0020      	movs	r0, r4
 800cb52:	0029      	movs	r1, r5
 800cb54:	f7f4 f990 	bl	8000e78 <__aeabi_ddiv>
 800cb58:	b007      	add	sp, #28
 800cb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5c:	9903      	ldr	r1, [sp, #12]
 800cb5e:	1a0b      	subs	r3, r1, r0
 800cb60:	e7f6      	b.n	800cb50 <__ratio+0x40>

0800cb62 <__copybits>:
 800cb62:	b570      	push	{r4, r5, r6, lr}
 800cb64:	0014      	movs	r4, r2
 800cb66:	0005      	movs	r5, r0
 800cb68:	3901      	subs	r1, #1
 800cb6a:	6913      	ldr	r3, [r2, #16]
 800cb6c:	1149      	asrs	r1, r1, #5
 800cb6e:	3101      	adds	r1, #1
 800cb70:	0089      	lsls	r1, r1, #2
 800cb72:	3414      	adds	r4, #20
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	1841      	adds	r1, r0, r1
 800cb78:	18e3      	adds	r3, r4, r3
 800cb7a:	42a3      	cmp	r3, r4
 800cb7c:	d80d      	bhi.n	800cb9a <__copybits+0x38>
 800cb7e:	0014      	movs	r4, r2
 800cb80:	3411      	adds	r4, #17
 800cb82:	2500      	movs	r5, #0
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d803      	bhi.n	800cb90 <__copybits+0x2e>
 800cb88:	1a9b      	subs	r3, r3, r2
 800cb8a:	3b11      	subs	r3, #17
 800cb8c:	089b      	lsrs	r3, r3, #2
 800cb8e:	009d      	lsls	r5, r3, #2
 800cb90:	2300      	movs	r3, #0
 800cb92:	1940      	adds	r0, r0, r5
 800cb94:	4281      	cmp	r1, r0
 800cb96:	d803      	bhi.n	800cba0 <__copybits+0x3e>
 800cb98:	bd70      	pop	{r4, r5, r6, pc}
 800cb9a:	cc40      	ldmia	r4!, {r6}
 800cb9c:	c540      	stmia	r5!, {r6}
 800cb9e:	e7ec      	b.n	800cb7a <__copybits+0x18>
 800cba0:	c008      	stmia	r0!, {r3}
 800cba2:	e7f7      	b.n	800cb94 <__copybits+0x32>

0800cba4 <__any_on>:
 800cba4:	0002      	movs	r2, r0
 800cba6:	6900      	ldr	r0, [r0, #16]
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	3214      	adds	r2, #20
 800cbac:	114b      	asrs	r3, r1, #5
 800cbae:	4298      	cmp	r0, r3
 800cbb0:	db13      	blt.n	800cbda <__any_on+0x36>
 800cbb2:	dd0c      	ble.n	800cbce <__any_on+0x2a>
 800cbb4:	241f      	movs	r4, #31
 800cbb6:	0008      	movs	r0, r1
 800cbb8:	4020      	ands	r0, r4
 800cbba:	4221      	tst	r1, r4
 800cbbc:	d007      	beq.n	800cbce <__any_on+0x2a>
 800cbbe:	0099      	lsls	r1, r3, #2
 800cbc0:	588c      	ldr	r4, [r1, r2]
 800cbc2:	0021      	movs	r1, r4
 800cbc4:	40c1      	lsrs	r1, r0
 800cbc6:	4081      	lsls	r1, r0
 800cbc8:	2001      	movs	r0, #1
 800cbca:	428c      	cmp	r4, r1
 800cbcc:	d104      	bne.n	800cbd8 <__any_on+0x34>
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	18d3      	adds	r3, r2, r3
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d803      	bhi.n	800cbde <__any_on+0x3a>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	0003      	movs	r3, r0
 800cbdc:	e7f7      	b.n	800cbce <__any_on+0x2a>
 800cbde:	3b04      	subs	r3, #4
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	2900      	cmp	r1, #0
 800cbe4:	d0f5      	beq.n	800cbd2 <__any_on+0x2e>
 800cbe6:	2001      	movs	r0, #1
 800cbe8:	e7f6      	b.n	800cbd8 <__any_on+0x34>

0800cbea <__ascii_wctomb>:
 800cbea:	0003      	movs	r3, r0
 800cbec:	1e08      	subs	r0, r1, #0
 800cbee:	d005      	beq.n	800cbfc <__ascii_wctomb+0x12>
 800cbf0:	2aff      	cmp	r2, #255	; 0xff
 800cbf2:	d904      	bls.n	800cbfe <__ascii_wctomb+0x14>
 800cbf4:	228a      	movs	r2, #138	; 0x8a
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	4240      	negs	r0, r0
 800cbfc:	4770      	bx	lr
 800cbfe:	2001      	movs	r0, #1
 800cc00:	700a      	strb	r2, [r1, #0]
 800cc02:	e7fb      	b.n	800cbfc <__ascii_wctomb+0x12>

0800cc04 <_svfprintf_r>:
 800cc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc06:	b0d9      	sub	sp, #356	; 0x164
 800cc08:	001c      	movs	r4, r3
 800cc0a:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc0c:	9208      	str	r2, [sp, #32]
 800cc0e:	900a      	str	r0, [sp, #40]	; 0x28
 800cc10:	f002 fdae 	bl	800f770 <_localeconv_r>
 800cc14:	6803      	ldr	r3, [r0, #0]
 800cc16:	0018      	movs	r0, r3
 800cc18:	931c      	str	r3, [sp, #112]	; 0x70
 800cc1a:	f7f3 fa73 	bl	8000104 <strlen>
 800cc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc20:	9016      	str	r0, [sp, #88]	; 0x58
 800cc22:	899b      	ldrh	r3, [r3, #12]
 800cc24:	061b      	lsls	r3, r3, #24
 800cc26:	d517      	bpl.n	800cc58 <_svfprintf_r+0x54>
 800cc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d113      	bne.n	800cc58 <_svfprintf_r+0x54>
 800cc30:	2140      	movs	r1, #64	; 0x40
 800cc32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc34:	f7fd fb6e 	bl	800a314 <_malloc_r>
 800cc38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3a:	6018      	str	r0, [r3, #0]
 800cc3c:	6118      	str	r0, [r3, #16]
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d107      	bne.n	800cc52 <_svfprintf_r+0x4e>
 800cc42:	230c      	movs	r3, #12
 800cc44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	3b0d      	subs	r3, #13
 800cc4a:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc4e:	b059      	add	sp, #356	; 0x164
 800cc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc52:	2340      	movs	r3, #64	; 0x40
 800cc54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc56:	6153      	str	r3, [r2, #20]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	932e      	str	r3, [sp, #184]	; 0xb8
 800cc5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc60:	930e      	str	r3, [sp, #56]	; 0x38
 800cc62:	2300      	movs	r3, #0
 800cc64:	9214      	str	r2, [sp, #80]	; 0x50
 800cc66:	9315      	str	r3, [sp, #84]	; 0x54
 800cc68:	2300      	movs	r3, #0
 800cc6a:	af2f      	add	r7, sp, #188	; 0xbc
 800cc6c:	972c      	str	r7, [sp, #176]	; 0xb0
 800cc6e:	931f      	str	r3, [sp, #124]	; 0x7c
 800cc70:	931e      	str	r3, [sp, #120]	; 0x78
 800cc72:	9312      	str	r3, [sp, #72]	; 0x48
 800cc74:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc76:	931d      	str	r3, [sp, #116]	; 0x74
 800cc78:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc7a:	9d08      	ldr	r5, [sp, #32]
 800cc7c:	782b      	ldrb	r3, [r5, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <_svfprintf_r+0x84>
 800cc82:	2b25      	cmp	r3, #37	; 0x25
 800cc84:	d000      	beq.n	800cc88 <_svfprintf_r+0x84>
 800cc86:	e091      	b.n	800cdac <_svfprintf_r+0x1a8>
 800cc88:	9b08      	ldr	r3, [sp, #32]
 800cc8a:	1aee      	subs	r6, r5, r3
 800cc8c:	429d      	cmp	r5, r3
 800cc8e:	d016      	beq.n	800ccbe <_svfprintf_r+0xba>
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cc94:	607e      	str	r6, [r7, #4]
 800cc96:	199b      	adds	r3, r3, r6
 800cc98:	932e      	str	r3, [sp, #184]	; 0xb8
 800cc9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	3301      	adds	r3, #1
 800cca0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cca2:	2b07      	cmp	r3, #7
 800cca4:	dd08      	ble.n	800ccb8 <_svfprintf_r+0xb4>
 800cca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cca8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800ccac:	f004 f8c0 	bl	8010e30 <__ssprint_r>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d000      	beq.n	800ccb6 <_svfprintf_r+0xb2>
 800ccb4:	e1cf      	b.n	800d056 <_svfprintf_r+0x452>
 800ccb6:	af2f      	add	r7, sp, #188	; 0xbc
 800ccb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccba:	199b      	adds	r3, r3, r6
 800ccbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800ccbe:	782b      	ldrb	r3, [r5, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <_svfprintf_r+0xc4>
 800ccc4:	f001 f99e 	bl	800e004 <_svfprintf_r+0x1400>
 800ccc8:	221b      	movs	r2, #27
 800ccca:	2300      	movs	r3, #0
 800cccc:	a91e      	add	r1, sp, #120	; 0x78
 800ccce:	1852      	adds	r2, r2, r1
 800ccd0:	7013      	strb	r3, [r2, #0]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	001e      	movs	r6, r3
 800ccd6:	4252      	negs	r2, r2
 800ccd8:	3501      	adds	r5, #1
 800ccda:	9209      	str	r2, [sp, #36]	; 0x24
 800ccdc:	9318      	str	r3, [sp, #96]	; 0x60
 800ccde:	1c6b      	adds	r3, r5, #1
 800cce0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cce2:	782b      	ldrb	r3, [r5, #0]
 800cce4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cce6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cce8:	3820      	subs	r0, #32
 800ccea:	285a      	cmp	r0, #90	; 0x5a
 800ccec:	d901      	bls.n	800ccf2 <_svfprintf_r+0xee>
 800ccee:	f000 fe20 	bl	800d932 <_svfprintf_r+0xd2e>
 800ccf2:	f7f3 fa19 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ccf6:	0078      	.short	0x0078
 800ccf8:	061e061e 	.word	0x061e061e
 800ccfc:	061e0082 	.word	0x061e0082
 800cd00:	061e061e 	.word	0x061e061e
 800cd04:	061e005d 	.word	0x061e005d
 800cd08:	0084061e 	.word	0x0084061e
 800cd0c:	061e008c 	.word	0x061e008c
 800cd10:	0091008a 	.word	0x0091008a
 800cd14:	00b2061e 	.word	0x00b2061e
 800cd18:	00b400b4 	.word	0x00b400b4
 800cd1c:	00b400b4 	.word	0x00b400b4
 800cd20:	00b400b4 	.word	0x00b400b4
 800cd24:	00b400b4 	.word	0x00b400b4
 800cd28:	061e00b4 	.word	0x061e00b4
 800cd2c:	061e061e 	.word	0x061e061e
 800cd30:	061e061e 	.word	0x061e061e
 800cd34:	061e061e 	.word	0x061e061e
 800cd38:	061e013b 	.word	0x061e013b
 800cd3c:	00f400e0 	.word	0x00f400e0
 800cd40:	013b013b 	.word	0x013b013b
 800cd44:	061e013b 	.word	0x061e013b
 800cd48:	061e061e 	.word	0x061e061e
 800cd4c:	00c7061e 	.word	0x00c7061e
 800cd50:	061e061e 	.word	0x061e061e
 800cd54:	061e04c7 	.word	0x061e04c7
 800cd58:	061e061e 	.word	0x061e061e
 800cd5c:	061e050a 	.word	0x061e050a
 800cd60:	061e052a 	.word	0x061e052a
 800cd64:	055c061e 	.word	0x055c061e
 800cd68:	061e061e 	.word	0x061e061e
 800cd6c:	061e061e 	.word	0x061e061e
 800cd70:	061e061e 	.word	0x061e061e
 800cd74:	061e061e 	.word	0x061e061e
 800cd78:	061e013b 	.word	0x061e013b
 800cd7c:	00f600e0 	.word	0x00f600e0
 800cd80:	013b013b 	.word	0x013b013b
 800cd84:	00c9013b 	.word	0x00c9013b
 800cd88:	00dc00f6 	.word	0x00dc00f6
 800cd8c:	00d5061e 	.word	0x00d5061e
 800cd90:	04a7061e 	.word	0x04a7061e
 800cd94:	04fa04c9 	.word	0x04fa04c9
 800cd98:	061e00dc 	.word	0x061e00dc
 800cd9c:	0080050a 	.word	0x0080050a
 800cda0:	061e052c 	.word	0x061e052c
 800cda4:	057c061e 	.word	0x057c061e
 800cda8:	0080061e 	.word	0x0080061e
 800cdac:	3501      	adds	r5, #1
 800cdae:	e765      	b.n	800cc7c <_svfprintf_r+0x78>
 800cdb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdb2:	f002 fcdd 	bl	800f770 <_localeconv_r>
 800cdb6:	6843      	ldr	r3, [r0, #4]
 800cdb8:	0018      	movs	r0, r3
 800cdba:	931d      	str	r3, [sp, #116]	; 0x74
 800cdbc:	f7f3 f9a2 	bl	8000104 <strlen>
 800cdc0:	901b      	str	r0, [sp, #108]	; 0x6c
 800cdc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdc4:	f002 fcd4 	bl	800f770 <_localeconv_r>
 800cdc8:	6883      	ldr	r3, [r0, #8]
 800cdca:	9312      	str	r3, [sp, #72]	; 0x48
 800cdcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d011      	beq.n	800cdf6 <_svfprintf_r+0x1f2>
 800cdd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00e      	beq.n	800cdf6 <_svfprintf_r+0x1f2>
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00b      	beq.n	800cdf6 <_svfprintf_r+0x1f2>
 800cdde:	2380      	movs	r3, #128	; 0x80
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	431e      	orrs	r6, r3
 800cde4:	e007      	b.n	800cdf6 <_svfprintf_r+0x1f2>
 800cde6:	231b      	movs	r3, #27
 800cde8:	aa1e      	add	r2, sp, #120	; 0x78
 800cdea:	189b      	adds	r3, r3, r2
 800cdec:	781a      	ldrb	r2, [r3, #0]
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	d101      	bne.n	800cdf6 <_svfprintf_r+0x1f2>
 800cdf2:	3220      	adds	r2, #32
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800cdf8:	e771      	b.n	800ccde <_svfprintf_r+0xda>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e7f1      	b.n	800cde2 <_svfprintf_r+0x1de>
 800cdfe:	cc08      	ldmia	r4!, {r3}
 800ce00:	9318      	str	r3, [sp, #96]	; 0x60
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	daf7      	bge.n	800cdf6 <_svfprintf_r+0x1f2>
 800ce06:	425b      	negs	r3, r3
 800ce08:	9318      	str	r3, [sp, #96]	; 0x60
 800ce0a:	2304      	movs	r3, #4
 800ce0c:	e7e9      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ce0e:	231b      	movs	r3, #27
 800ce10:	aa1e      	add	r2, sp, #120	; 0x78
 800ce12:	189b      	adds	r3, r3, r2
 800ce14:	222b      	movs	r2, #43	; 0x2b
 800ce16:	e7ed      	b.n	800cdf4 <_svfprintf_r+0x1f0>
 800ce18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce1c:	7812      	ldrb	r2, [r2, #0]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce22:	2a2a      	cmp	r2, #42	; 0x2a
 800ce24:	d010      	beq.n	800ce48 <_svfprintf_r+0x244>
 800ce26:	2200      	movs	r2, #0
 800ce28:	9209      	str	r2, [sp, #36]	; 0x24
 800ce2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce2e:	3a30      	subs	r2, #48	; 0x30
 800ce30:	2a09      	cmp	r2, #9
 800ce32:	d900      	bls.n	800ce36 <_svfprintf_r+0x232>
 800ce34:	e757      	b.n	800cce6 <_svfprintf_r+0xe2>
 800ce36:	200a      	movs	r0, #10
 800ce38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce3a:	4341      	muls	r1, r0
 800ce3c:	188a      	adds	r2, r1, r2
 800ce3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce46:	e7f0      	b.n	800ce2a <_svfprintf_r+0x226>
 800ce48:	cc04      	ldmia	r4!, {r2}
 800ce4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce4c:	2a00      	cmp	r2, #0
 800ce4e:	da02      	bge.n	800ce56 <_svfprintf_r+0x252>
 800ce50:	2201      	movs	r2, #1
 800ce52:	4252      	negs	r2, r2
 800ce54:	9209      	str	r2, [sp, #36]	; 0x24
 800ce56:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce58:	e7cd      	b.n	800cdf6 <_svfprintf_r+0x1f2>
 800ce5a:	2380      	movs	r3, #128	; 0x80
 800ce5c:	e7c1      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ce5e:	2200      	movs	r2, #0
 800ce60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce62:	9218      	str	r2, [sp, #96]	; 0x60
 800ce64:	210a      	movs	r1, #10
 800ce66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce68:	434a      	muls	r2, r1
 800ce6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce6c:	3930      	subs	r1, #48	; 0x30
 800ce6e:	188a      	adds	r2, r1, r2
 800ce70:	9218      	str	r2, [sp, #96]	; 0x60
 800ce72:	001a      	movs	r2, r3
 800ce74:	7812      	ldrb	r2, [r2, #0]
 800ce76:	3301      	adds	r3, #1
 800ce78:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce7a:	3a30      	subs	r2, #48	; 0x30
 800ce7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce7e:	2a09      	cmp	r2, #9
 800ce80:	d9f0      	bls.n	800ce64 <_svfprintf_r+0x260>
 800ce82:	e730      	b.n	800cce6 <_svfprintf_r+0xe2>
 800ce84:	2308      	movs	r3, #8
 800ce86:	e7ac      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ce88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b68      	cmp	r3, #104	; 0x68
 800ce8e:	d105      	bne.n	800ce9c <_svfprintf_r+0x298>
 800ce90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce92:	3301      	adds	r3, #1
 800ce94:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	e7a2      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ce9c:	2340      	movs	r3, #64	; 0x40
 800ce9e:	e7a0      	b.n	800cde2 <_svfprintf_r+0x1de>
 800cea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b6c      	cmp	r3, #108	; 0x6c
 800cea6:	d104      	bne.n	800ceb2 <_svfprintf_r+0x2ae>
 800cea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ceaa:	3301      	adds	r3, #1
 800ceac:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceae:	2320      	movs	r3, #32
 800ceb0:	e797      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	e795      	b.n	800cde2 <_svfprintf_r+0x1de>
 800ceb6:	0021      	movs	r1, r4
 800ceb8:	c904      	ldmia	r1!, {r2}
 800ceba:	ab3f      	add	r3, sp, #252	; 0xfc
 800cebc:	910d      	str	r1, [sp, #52]	; 0x34
 800cebe:	211b      	movs	r1, #27
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	2200      	movs	r2, #0
 800cec4:	a81e      	add	r0, sp, #120	; 0x78
 800cec6:	1809      	adds	r1, r1, r0
 800cec8:	700a      	strb	r2, [r1, #0]
 800ceca:	920c      	str	r2, [sp, #48]	; 0x30
 800cecc:	3201      	adds	r2, #1
 800cece:	9209      	str	r2, [sp, #36]	; 0x24
 800ced0:	2200      	movs	r2, #0
 800ced2:	9308      	str	r3, [sp, #32]
 800ced4:	0015      	movs	r5, r2
 800ced6:	9219      	str	r2, [sp, #100]	; 0x64
 800ced8:	9210      	str	r2, [sp, #64]	; 0x40
 800ceda:	9211      	str	r2, [sp, #68]	; 0x44
 800cedc:	e1f1      	b.n	800d2c2 <_svfprintf_r+0x6be>
 800cede:	2310      	movs	r3, #16
 800cee0:	431e      	orrs	r6, r3
 800cee2:	06b3      	lsls	r3, r6, #26
 800cee4:	d531      	bpl.n	800cf4a <_svfprintf_r+0x346>
 800cee6:	2307      	movs	r3, #7
 800cee8:	3407      	adds	r4, #7
 800ceea:	439c      	bics	r4, r3
 800ceec:	0022      	movs	r2, r4
 800ceee:	ca18      	ldmia	r2!, {r3, r4}
 800cef0:	9306      	str	r3, [sp, #24]
 800cef2:	9407      	str	r4, [sp, #28]
 800cef4:	920d      	str	r2, [sp, #52]	; 0x34
 800cef6:	9a07      	ldr	r2, [sp, #28]
 800cef8:	2301      	movs	r3, #1
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	da0b      	bge.n	800cf16 <_svfprintf_r+0x312>
 800cefe:	9c06      	ldr	r4, [sp, #24]
 800cf00:	9d07      	ldr	r5, [sp, #28]
 800cf02:	2200      	movs	r2, #0
 800cf04:	4261      	negs	r1, r4
 800cf06:	41aa      	sbcs	r2, r5
 800cf08:	9106      	str	r1, [sp, #24]
 800cf0a:	9207      	str	r2, [sp, #28]
 800cf0c:	221b      	movs	r2, #27
 800cf0e:	a91e      	add	r1, sp, #120	; 0x78
 800cf10:	1852      	adds	r2, r2, r1
 800cf12:	212d      	movs	r1, #45	; 0x2d
 800cf14:	7011      	strb	r1, [r2, #0]
 800cf16:	9907      	ldr	r1, [sp, #28]
 800cf18:	9a06      	ldr	r2, [sp, #24]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf1e:	3101      	adds	r1, #1
 800cf20:	d101      	bne.n	800cf26 <_svfprintf_r+0x322>
 800cf22:	f001 f87b 	bl	800e01c <_svfprintf_r+0x1418>
 800cf26:	2180      	movs	r1, #128	; 0x80
 800cf28:	0034      	movs	r4, r6
 800cf2a:	438c      	bics	r4, r1
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	d001      	beq.n	800cf34 <_svfprintf_r+0x330>
 800cf30:	f001 f879 	bl	800e026 <_svfprintf_r+0x1422>
 800cf34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	d101      	bne.n	800cf3e <_svfprintf_r+0x33a>
 800cf3a:	f000 fcef 	bl	800d91c <_svfprintf_r+0xd18>
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d001      	beq.n	800cf46 <_svfprintf_r+0x342>
 800cf42:	f001 f874 	bl	800e02e <_svfprintf_r+0x142a>
 800cf46:	f000 fc79 	bl	800d83c <_svfprintf_r+0xc38>
 800cf4a:	0022      	movs	r2, r4
 800cf4c:	ca08      	ldmia	r2!, {r3}
 800cf4e:	920d      	str	r2, [sp, #52]	; 0x34
 800cf50:	06f2      	lsls	r2, r6, #27
 800cf52:	d503      	bpl.n	800cf5c <_svfprintf_r+0x358>
 800cf54:	9306      	str	r3, [sp, #24]
 800cf56:	17db      	asrs	r3, r3, #31
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	e7cc      	b.n	800cef6 <_svfprintf_r+0x2f2>
 800cf5c:	0672      	lsls	r2, r6, #25
 800cf5e:	d501      	bpl.n	800cf64 <_svfprintf_r+0x360>
 800cf60:	b21b      	sxth	r3, r3
 800cf62:	e7f7      	b.n	800cf54 <_svfprintf_r+0x350>
 800cf64:	05b2      	lsls	r2, r6, #22
 800cf66:	d5f5      	bpl.n	800cf54 <_svfprintf_r+0x350>
 800cf68:	b25b      	sxtb	r3, r3
 800cf6a:	e7f3      	b.n	800cf54 <_svfprintf_r+0x350>
 800cf6c:	2307      	movs	r3, #7
 800cf6e:	3407      	adds	r4, #7
 800cf70:	439c      	bics	r4, r3
 800cf72:	0022      	movs	r2, r4
 800cf74:	ca18      	ldmia	r2!, {r3, r4}
 800cf76:	920d      	str	r2, [sp, #52]	; 0x34
 800cf78:	2201      	movs	r2, #1
 800cf7a:	9314      	str	r3, [sp, #80]	; 0x50
 800cf7c:	9415      	str	r4, [sp, #84]	; 0x54
 800cf7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf80:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cf82:	005c      	lsls	r4, r3, #1
 800cf84:	0864      	lsrs	r4, r4, #1
 800cf86:	0028      	movs	r0, r5
 800cf88:	0021      	movs	r1, r4
 800cf8a:	4b3e      	ldr	r3, [pc, #248]	; (800d084 <_svfprintf_r+0x480>)
 800cf8c:	4252      	negs	r2, r2
 800cf8e:	f7f5 f9b1 	bl	80022f4 <__aeabi_dcmpun>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d126      	bne.n	800cfe4 <_svfprintf_r+0x3e0>
 800cf96:	2201      	movs	r2, #1
 800cf98:	0028      	movs	r0, r5
 800cf9a:	0021      	movs	r1, r4
 800cf9c:	4b39      	ldr	r3, [pc, #228]	; (800d084 <_svfprintf_r+0x480>)
 800cf9e:	4252      	negs	r2, r2
 800cfa0:	f7f3 fa62 	bl	8000468 <__aeabi_dcmple>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d11d      	bne.n	800cfe4 <_svfprintf_r+0x3e0>
 800cfa8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cfaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cfac:	2200      	movs	r2, #0
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f7f3 fa50 	bl	8000454 <__aeabi_dcmplt>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d004      	beq.n	800cfc2 <_svfprintf_r+0x3be>
 800cfb8:	231b      	movs	r3, #27
 800cfba:	aa1e      	add	r2, sp, #120	; 0x78
 800cfbc:	189b      	adds	r3, r3, r2
 800cfbe:	222d      	movs	r2, #45	; 0x2d
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	4b31      	ldr	r3, [pc, #196]	; (800d088 <_svfprintf_r+0x484>)
 800cfc4:	9308      	str	r3, [sp, #32]
 800cfc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfc8:	2b47      	cmp	r3, #71	; 0x47
 800cfca:	dd01      	ble.n	800cfd0 <_svfprintf_r+0x3cc>
 800cfcc:	4b2f      	ldr	r3, [pc, #188]	; (800d08c <_svfprintf_r+0x488>)
 800cfce:	9308      	str	r3, [sp, #32]
 800cfd0:	2380      	movs	r3, #128	; 0x80
 800cfd2:	439e      	bics	r6, r3
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd8:	3303      	adds	r3, #3
 800cfda:	9309      	str	r3, [sp, #36]	; 0x24
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9319      	str	r3, [sp, #100]	; 0x64
 800cfe0:	f000 fc78 	bl	800d8d4 <_svfprintf_r+0xcd0>
 800cfe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfe8:	0010      	movs	r0, r2
 800cfea:	0019      	movs	r1, r3
 800cfec:	f7f5 f982 	bl	80022f4 <__aeabi_dcmpun>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d00e      	beq.n	800d012 <_svfprintf_r+0x40e>
 800cff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da04      	bge.n	800d004 <_svfprintf_r+0x400>
 800cffa:	231b      	movs	r3, #27
 800cffc:	aa1e      	add	r2, sp, #120	; 0x78
 800cffe:	189b      	adds	r3, r3, r2
 800d000:	222d      	movs	r2, #45	; 0x2d
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	4b22      	ldr	r3, [pc, #136]	; (800d090 <_svfprintf_r+0x48c>)
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d00a:	2b47      	cmp	r3, #71	; 0x47
 800d00c:	dde0      	ble.n	800cfd0 <_svfprintf_r+0x3cc>
 800d00e:	4b21      	ldr	r3, [pc, #132]	; (800d094 <_svfprintf_r+0x490>)
 800d010:	e7dd      	b.n	800cfce <_svfprintf_r+0x3ca>
 800d012:	2320      	movs	r3, #32
 800d014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d016:	439a      	bics	r2, r3
 800d018:	9210      	str	r2, [sp, #64]	; 0x40
 800d01a:	2a41      	cmp	r2, #65	; 0x41
 800d01c:	d123      	bne.n	800d066 <_svfprintf_r+0x462>
 800d01e:	2230      	movs	r2, #48	; 0x30
 800d020:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d022:	ab25      	add	r3, sp, #148	; 0x94
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	3248      	adds	r2, #72	; 0x48
 800d028:	2961      	cmp	r1, #97	; 0x61
 800d02a:	d000      	beq.n	800d02e <_svfprintf_r+0x42a>
 800d02c:	3a20      	subs	r2, #32
 800d02e:	705a      	strb	r2, [r3, #1]
 800d030:	2302      	movs	r3, #2
 800d032:	431e      	orrs	r6, r3
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	2b63      	cmp	r3, #99	; 0x63
 800d038:	dd2e      	ble.n	800d098 <_svfprintf_r+0x494>
 800d03a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d03c:	1c59      	adds	r1, r3, #1
 800d03e:	f7fd f969 	bl	800a314 <_malloc_r>
 800d042:	9008      	str	r0, [sp, #32]
 800d044:	2800      	cmp	r0, #0
 800d046:	d000      	beq.n	800d04a <_svfprintf_r+0x446>
 800d048:	e216      	b.n	800d478 <_svfprintf_r+0x874>
 800d04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d04c:	899a      	ldrh	r2, [r3, #12]
 800d04e:	2340      	movs	r3, #64	; 0x40
 800d050:	4313      	orrs	r3, r2
 800d052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d054:	8193      	strh	r3, [r2, #12]
 800d056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d058:	899b      	ldrh	r3, [r3, #12]
 800d05a:	065b      	lsls	r3, r3, #25
 800d05c:	d400      	bmi.n	800d060 <_svfprintf_r+0x45c>
 800d05e:	e5f5      	b.n	800cc4c <_svfprintf_r+0x48>
 800d060:	2301      	movs	r3, #1
 800d062:	425b      	negs	r3, r3
 800d064:	e5f1      	b.n	800cc4a <_svfprintf_r+0x46>
 800d066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d068:	900c      	str	r0, [sp, #48]	; 0x30
 800d06a:	3301      	adds	r3, #1
 800d06c:	d100      	bne.n	800d070 <_svfprintf_r+0x46c>
 800d06e:	e206      	b.n	800d47e <_svfprintf_r+0x87a>
 800d070:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d072:	2b47      	cmp	r3, #71	; 0x47
 800d074:	d114      	bne.n	800d0a0 <_svfprintf_r+0x49c>
 800d076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d111      	bne.n	800d0a0 <_svfprintf_r+0x49c>
 800d07c:	3301      	adds	r3, #1
 800d07e:	9309      	str	r3, [sp, #36]	; 0x24
 800d080:	e00e      	b.n	800d0a0 <_svfprintf_r+0x49c>
 800d082:	46c0      	nop			; (mov r8, r8)
 800d084:	7fefffff 	.word	0x7fefffff
 800d088:	08014184 	.word	0x08014184
 800d08c:	08014188 	.word	0x08014188
 800d090:	0801418c 	.word	0x0801418c
 800d094:	08014190 	.word	0x08014190
 800d098:	2300      	movs	r3, #0
 800d09a:	930c      	str	r3, [sp, #48]	; 0x30
 800d09c:	ab3f      	add	r3, sp, #252	; 0xfc
 800d09e:	9308      	str	r3, [sp, #32]
 800d0a0:	2380      	movs	r3, #128	; 0x80
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	4333      	orrs	r3, r6
 800d0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	db00      	blt.n	800d0b2 <_svfprintf_r+0x4ae>
 800d0b0:	e1e7      	b.n	800d482 <_svfprintf_r+0x87e>
 800d0b2:	2280      	movs	r2, #128	; 0x80
 800d0b4:	0612      	lsls	r2, r2, #24
 800d0b6:	4694      	mov	ip, r2
 800d0b8:	4463      	add	r3, ip
 800d0ba:	930e      	str	r3, [sp, #56]	; 0x38
 800d0bc:	232d      	movs	r3, #45	; 0x2d
 800d0be:	9322      	str	r3, [sp, #136]	; 0x88
 800d0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0c2:	2b41      	cmp	r3, #65	; 0x41
 800d0c4:	d000      	beq.n	800d0c8 <_svfprintf_r+0x4c4>
 800d0c6:	e1f5      	b.n	800d4b4 <_svfprintf_r+0x8b0>
 800d0c8:	0028      	movs	r0, r5
 800d0ca:	aa26      	add	r2, sp, #152	; 0x98
 800d0cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d0ce:	f002 fb73 	bl	800f7b8 <frexp>
 800d0d2:	23ff      	movs	r3, #255	; 0xff
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	059b      	lsls	r3, r3, #22
 800d0d8:	f7f4 fac8 	bl	800166c <__aeabi_dmul>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	0004      	movs	r4, r0
 800d0e2:	000d      	movs	r5, r1
 800d0e4:	f7f3 f9b0 	bl	8000448 <__aeabi_dcmpeq>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d001      	beq.n	800d0f0 <_svfprintf_r+0x4ec>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	9326      	str	r3, [sp, #152]	; 0x98
 800d0f0:	4bda      	ldr	r3, [pc, #872]	; (800d45c <_svfprintf_r+0x858>)
 800d0f2:	9319      	str	r3, [sp, #100]	; 0x64
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f6:	2b61      	cmp	r3, #97	; 0x61
 800d0f8:	d001      	beq.n	800d0fe <_svfprintf_r+0x4fa>
 800d0fa:	4bd9      	ldr	r3, [pc, #868]	; (800d460 <_svfprintf_r+0x85c>)
 800d0fc:	9319      	str	r3, [sp, #100]	; 0x64
 800d0fe:	9b08      	ldr	r3, [sp, #32]
 800d100:	930e      	str	r3, [sp, #56]	; 0x38
 800d102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d104:	3b01      	subs	r3, #1
 800d106:	9311      	str	r3, [sp, #68]	; 0x44
 800d108:	2200      	movs	r2, #0
 800d10a:	4bd6      	ldr	r3, [pc, #856]	; (800d464 <_svfprintf_r+0x860>)
 800d10c:	0020      	movs	r0, r4
 800d10e:	0029      	movs	r1, r5
 800d110:	f7f4 faac 	bl	800166c <__aeabi_dmul>
 800d114:	000d      	movs	r5, r1
 800d116:	0004      	movs	r4, r0
 800d118:	f7f5 f90a 	bl	8002330 <__aeabi_d2iz>
 800d11c:	9021      	str	r0, [sp, #132]	; 0x84
 800d11e:	f7f5 f93d 	bl	800239c <__aeabi_i2d>
 800d122:	0002      	movs	r2, r0
 800d124:	000b      	movs	r3, r1
 800d126:	0020      	movs	r0, r4
 800d128:	0029      	movs	r1, r5
 800d12a:	f7f4 fd61 	bl	8001bf0 <__aeabi_dsub>
 800d12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d130:	000d      	movs	r5, r1
 800d132:	001a      	movs	r2, r3
 800d134:	3201      	adds	r2, #1
 800d136:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d138:	920e      	str	r2, [sp, #56]	; 0x38
 800d13a:	9223      	str	r2, [sp, #140]	; 0x8c
 800d13c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d13e:	0004      	movs	r4, r0
 800d140:	5c52      	ldrb	r2, [r2, r1]
 800d142:	701a      	strb	r2, [r3, #0]
 800d144:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d146:	9320      	str	r3, [sp, #128]	; 0x80
 800d148:	3301      	adds	r3, #1
 800d14a:	d00a      	beq.n	800d162 <_svfprintf_r+0x55e>
 800d14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d14e:	2200      	movs	r2, #0
 800d150:	3b01      	subs	r3, #1
 800d152:	9311      	str	r3, [sp, #68]	; 0x44
 800d154:	0020      	movs	r0, r4
 800d156:	2300      	movs	r3, #0
 800d158:	0029      	movs	r1, r5
 800d15a:	f7f3 f975 	bl	8000448 <__aeabi_dcmpeq>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d0d2      	beq.n	800d108 <_svfprintf_r+0x504>
 800d162:	2200      	movs	r2, #0
 800d164:	0020      	movs	r0, r4
 800d166:	0029      	movs	r1, r5
 800d168:	4bbf      	ldr	r3, [pc, #764]	; (800d468 <_svfprintf_r+0x864>)
 800d16a:	f7f3 f987 	bl	800047c <__aeabi_dcmpgt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d10c      	bne.n	800d18c <_svfprintf_r+0x588>
 800d172:	2200      	movs	r2, #0
 800d174:	0020      	movs	r0, r4
 800d176:	0029      	movs	r1, r5
 800d178:	4bbb      	ldr	r3, [pc, #748]	; (800d468 <_svfprintf_r+0x864>)
 800d17a:	f7f3 f965 	bl	8000448 <__aeabi_dcmpeq>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d100      	bne.n	800d184 <_svfprintf_r+0x580>
 800d182:	e191      	b.n	800d4a8 <_svfprintf_r+0x8a4>
 800d184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d186:	07db      	lsls	r3, r3, #31
 800d188:	d400      	bmi.n	800d18c <_svfprintf_r+0x588>
 800d18a:	e18d      	b.n	800d4a8 <_svfprintf_r+0x8a4>
 800d18c:	2030      	movs	r0, #48	; 0x30
 800d18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d190:	932a      	str	r3, [sp, #168]	; 0xa8
 800d192:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d194:	7bdb      	ldrb	r3, [r3, #15]
 800d196:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d198:	3a01      	subs	r2, #1
 800d19a:	922a      	str	r2, [sp, #168]	; 0xa8
 800d19c:	7811      	ldrb	r1, [r2, #0]
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	d100      	bne.n	800d1a4 <_svfprintf_r+0x5a0>
 800d1a2:	e171      	b.n	800d488 <_svfprintf_r+0x884>
 800d1a4:	1c4b      	adds	r3, r1, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2939      	cmp	r1, #57	; 0x39
 800d1aa:	d101      	bne.n	800d1b0 <_svfprintf_r+0x5ac>
 800d1ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1ae:	7a9b      	ldrb	r3, [r3, #10]
 800d1b0:	7013      	strb	r3, [r2, #0]
 800d1b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d1b4:	9a08      	ldr	r2, [sp, #32]
 800d1b6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	930e      	str	r3, [sp, #56]	; 0x38
 800d1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1be:	2b47      	cmp	r3, #71	; 0x47
 800d1c0:	d000      	beq.n	800d1c4 <_svfprintf_r+0x5c0>
 800d1c2:	e1c4      	b.n	800d54e <_svfprintf_r+0x94a>
 800d1c4:	1ceb      	adds	r3, r5, #3
 800d1c6:	db03      	blt.n	800d1d0 <_svfprintf_r+0x5cc>
 800d1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ca:	42ab      	cmp	r3, r5
 800d1cc:	db00      	blt.n	800d1d0 <_svfprintf_r+0x5cc>
 800d1ce:	e1e6      	b.n	800d59e <_svfprintf_r+0x99a>
 800d1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1d2:	3b02      	subs	r3, #2
 800d1d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1d6:	223c      	movs	r2, #60	; 0x3c
 800d1d8:	466b      	mov	r3, sp
 800d1da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1dc:	189b      	adds	r3, r3, r2
 800d1de:	1e6c      	subs	r4, r5, #1
 800d1e0:	3a1c      	subs	r2, #28
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	9426      	str	r4, [sp, #152]	; 0x98
 800d1e8:	4391      	bics	r1, r2
 800d1ea:	2941      	cmp	r1, #65	; 0x41
 800d1ec:	d102      	bne.n	800d1f4 <_svfprintf_r+0x5f0>
 800d1ee:	330f      	adds	r3, #15
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	a928      	add	r1, sp, #160	; 0xa0
 800d1f6:	700b      	strb	r3, [r1, #0]
 800d1f8:	232b      	movs	r3, #43	; 0x2b
 800d1fa:	2c00      	cmp	r4, #0
 800d1fc:	da02      	bge.n	800d204 <_svfprintf_r+0x600>
 800d1fe:	2401      	movs	r4, #1
 800d200:	3302      	adds	r3, #2
 800d202:	1b64      	subs	r4, r4, r5
 800d204:	704b      	strb	r3, [r1, #1]
 800d206:	2c09      	cmp	r4, #9
 800d208:	dc00      	bgt.n	800d20c <_svfprintf_r+0x608>
 800d20a:	e1ba      	b.n	800d582 <_svfprintf_r+0x97e>
 800d20c:	2337      	movs	r3, #55	; 0x37
 800d20e:	250a      	movs	r5, #10
 800d210:	aa1e      	add	r2, sp, #120	; 0x78
 800d212:	189b      	adds	r3, r3, r2
 800d214:	9310      	str	r3, [sp, #64]	; 0x40
 800d216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d218:	0020      	movs	r0, r4
 800d21a:	9309      	str	r3, [sp, #36]	; 0x24
 800d21c:	0029      	movs	r1, r5
 800d21e:	3b01      	subs	r3, #1
 800d220:	9310      	str	r3, [sp, #64]	; 0x40
 800d222:	f7f3 f8fb 	bl	800041c <__aeabi_idivmod>
 800d226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d228:	3130      	adds	r1, #48	; 0x30
 800d22a:	7019      	strb	r1, [r3, #0]
 800d22c:	0020      	movs	r0, r4
 800d22e:	0029      	movs	r1, r5
 800d230:	9411      	str	r4, [sp, #68]	; 0x44
 800d232:	f7f3 f80d 	bl	8000250 <__divsi3>
 800d236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d238:	0004      	movs	r4, r0
 800d23a:	2b63      	cmp	r3, #99	; 0x63
 800d23c:	dceb      	bgt.n	800d216 <_svfprintf_r+0x612>
 800d23e:	222a      	movs	r2, #42	; 0x2a
 800d240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d242:	a81e      	add	r0, sp, #120	; 0x78
 800d244:	1e99      	subs	r1, r3, #2
 800d246:	1812      	adds	r2, r2, r0
 800d248:	2037      	movs	r0, #55	; 0x37
 800d24a:	000b      	movs	r3, r1
 800d24c:	3430      	adds	r4, #48	; 0x30
 800d24e:	700c      	strb	r4, [r1, #0]
 800d250:	ac1e      	add	r4, sp, #120	; 0x78
 800d252:	1900      	adds	r0, r0, r4
 800d254:	4283      	cmp	r3, r0
 800d256:	d200      	bcs.n	800d25a <_svfprintf_r+0x656>
 800d258:	e18e      	b.n	800d578 <_svfprintf_r+0x974>
 800d25a:	2300      	movs	r3, #0
 800d25c:	4281      	cmp	r1, r0
 800d25e:	d804      	bhi.n	800d26a <_svfprintf_r+0x666>
 800d260:	aa1e      	add	r2, sp, #120	; 0x78
 800d262:	3339      	adds	r3, #57	; 0x39
 800d264:	189b      	adds	r3, r3, r2
 800d266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d268:	1a9b      	subs	r3, r3, r2
 800d26a:	222a      	movs	r2, #42	; 0x2a
 800d26c:	a91e      	add	r1, sp, #120	; 0x78
 800d26e:	1852      	adds	r2, r2, r1
 800d270:	18d3      	adds	r3, r2, r3
 800d272:	aa28      	add	r2, sp, #160	; 0xa0
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	931e      	str	r3, [sp, #120]	; 0x78
 800d278:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d27c:	4694      	mov	ip, r2
 800d27e:	4463      	add	r3, ip
 800d280:	9309      	str	r3, [sp, #36]	; 0x24
 800d282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d284:	2b01      	cmp	r3, #1
 800d286:	dc01      	bgt.n	800d28c <_svfprintf_r+0x688>
 800d288:	07f3      	lsls	r3, r6, #31
 800d28a:	d504      	bpl.n	800d296 <_svfprintf_r+0x692>
 800d28c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d290:	4694      	mov	ip, r2
 800d292:	4463      	add	r3, ip
 800d294:	9309      	str	r3, [sp, #36]	; 0x24
 800d296:	2280      	movs	r2, #128	; 0x80
 800d298:	4b74      	ldr	r3, [pc, #464]	; (800d46c <_svfprintf_r+0x868>)
 800d29a:	0052      	lsls	r2, r2, #1
 800d29c:	4033      	ands	r3, r6
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	001d      	movs	r5, r3
 800d2a4:	921a      	str	r2, [sp, #104]	; 0x68
 800d2a6:	9310      	str	r3, [sp, #64]	; 0x40
 800d2a8:	9311      	str	r3, [sp, #68]	; 0x44
 800d2aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2ac:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d2ae:	9319      	str	r3, [sp, #100]	; 0x64
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d006      	beq.n	800d2c2 <_svfprintf_r+0x6be>
 800d2b4:	231b      	movs	r3, #27
 800d2b6:	aa1e      	add	r2, sp, #120	; 0x78
 800d2b8:	189b      	adds	r3, r3, r2
 800d2ba:	222d      	movs	r2, #45	; 0x2d
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	9319      	str	r3, [sp, #100]	; 0x64
 800d2c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2c6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	da00      	bge.n	800d2ce <_svfprintf_r+0x6ca>
 800d2cc:	921a      	str	r2, [sp, #104]	; 0x68
 800d2ce:	231b      	movs	r3, #27
 800d2d0:	aa1e      	add	r2, sp, #120	; 0x78
 800d2d2:	189b      	adds	r3, r3, r2
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	1e5a      	subs	r2, r3, #1
 800d2d8:	4193      	sbcs	r3, r2
 800d2da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d2dc:	18d3      	adds	r3, r2, r3
 800d2de:	931a      	str	r3, [sp, #104]	; 0x68
 800d2e0:	0032      	movs	r2, r6
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	401a      	ands	r2, r3
 800d2e6:	9220      	str	r2, [sp, #128]	; 0x80
 800d2e8:	421e      	tst	r6, r3
 800d2ea:	d002      	beq.n	800d2f2 <_svfprintf_r+0x6ee>
 800d2ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d2ee:	3302      	adds	r3, #2
 800d2f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d2f2:	2384      	movs	r3, #132	; 0x84
 800d2f4:	0032      	movs	r2, r6
 800d2f6:	401a      	ands	r2, r3
 800d2f8:	9221      	str	r2, [sp, #132]	; 0x84
 800d2fa:	421e      	tst	r6, r3
 800d2fc:	d11f      	bne.n	800d33e <_svfprintf_r+0x73a>
 800d2fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d300:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d302:	1a9c      	subs	r4, r3, r2
 800d304:	2c00      	cmp	r4, #0
 800d306:	dd1a      	ble.n	800d33e <_svfprintf_r+0x73a>
 800d308:	0039      	movs	r1, r7
 800d30a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d30c:	4858      	ldr	r0, [pc, #352]	; (800d470 <_svfprintf_r+0x86c>)
 800d30e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d310:	3301      	adds	r3, #1
 800d312:	3108      	adds	r1, #8
 800d314:	6038      	str	r0, [r7, #0]
 800d316:	2c10      	cmp	r4, #16
 800d318:	dd00      	ble.n	800d31c <_svfprintf_r+0x718>
 800d31a:	e31c      	b.n	800d956 <_svfprintf_r+0xd52>
 800d31c:	607c      	str	r4, [r7, #4]
 800d31e:	18a4      	adds	r4, r4, r2
 800d320:	000f      	movs	r7, r1
 800d322:	942e      	str	r4, [sp, #184]	; 0xb8
 800d324:	932d      	str	r3, [sp, #180]	; 0xb4
 800d326:	2b07      	cmp	r3, #7
 800d328:	dd09      	ble.n	800d33e <_svfprintf_r+0x73a>
 800d32a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d32c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d32e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d330:	f003 fd7e 	bl	8010e30 <__ssprint_r>
 800d334:	2800      	cmp	r0, #0
 800d336:	d001      	beq.n	800d33c <_svfprintf_r+0x738>
 800d338:	f000 fe43 	bl	800dfc2 <_svfprintf_r+0x13be>
 800d33c:	af2f      	add	r7, sp, #188	; 0xbc
 800d33e:	221b      	movs	r2, #27
 800d340:	a91e      	add	r1, sp, #120	; 0x78
 800d342:	1852      	adds	r2, r2, r1
 800d344:	7811      	ldrb	r1, [r2, #0]
 800d346:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d348:	2900      	cmp	r1, #0
 800d34a:	d014      	beq.n	800d376 <_svfprintf_r+0x772>
 800d34c:	603a      	str	r2, [r7, #0]
 800d34e:	2201      	movs	r2, #1
 800d350:	189b      	adds	r3, r3, r2
 800d352:	932e      	str	r3, [sp, #184]	; 0xb8
 800d354:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	189b      	adds	r3, r3, r2
 800d35a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d35c:	3708      	adds	r7, #8
 800d35e:	2b07      	cmp	r3, #7
 800d360:	dd09      	ble.n	800d376 <_svfprintf_r+0x772>
 800d362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d364:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d366:	aa2c      	add	r2, sp, #176	; 0xb0
 800d368:	f003 fd62 	bl	8010e30 <__ssprint_r>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d001      	beq.n	800d374 <_svfprintf_r+0x770>
 800d370:	f000 fe27 	bl	800dfc2 <_svfprintf_r+0x13be>
 800d374:	af2f      	add	r7, sp, #188	; 0xbc
 800d376:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d378:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d37a:	2a00      	cmp	r2, #0
 800d37c:	d015      	beq.n	800d3aa <_svfprintf_r+0x7a6>
 800d37e:	aa25      	add	r2, sp, #148	; 0x94
 800d380:	603a      	str	r2, [r7, #0]
 800d382:	2202      	movs	r2, #2
 800d384:	189b      	adds	r3, r3, r2
 800d386:	932e      	str	r3, [sp, #184]	; 0xb8
 800d388:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	3301      	adds	r3, #1
 800d38e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d390:	3708      	adds	r7, #8
 800d392:	2b07      	cmp	r3, #7
 800d394:	dd09      	ble.n	800d3aa <_svfprintf_r+0x7a6>
 800d396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d398:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d39a:	aa2c      	add	r2, sp, #176	; 0xb0
 800d39c:	f003 fd48 	bl	8010e30 <__ssprint_r>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d001      	beq.n	800d3a8 <_svfprintf_r+0x7a4>
 800d3a4:	f000 fe0d 	bl	800dfc2 <_svfprintf_r+0x13be>
 800d3a8:	af2f      	add	r7, sp, #188	; 0xbc
 800d3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3ac:	2b80      	cmp	r3, #128	; 0x80
 800d3ae:	d11f      	bne.n	800d3f0 <_svfprintf_r+0x7ec>
 800d3b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d3b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3b4:	1a9c      	subs	r4, r3, r2
 800d3b6:	2c00      	cmp	r4, #0
 800d3b8:	dd1a      	ble.n	800d3f0 <_svfprintf_r+0x7ec>
 800d3ba:	0039      	movs	r1, r7
 800d3bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d3be:	482d      	ldr	r0, [pc, #180]	; (800d474 <_svfprintf_r+0x870>)
 800d3c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	3108      	adds	r1, #8
 800d3c6:	6038      	str	r0, [r7, #0]
 800d3c8:	2c10      	cmp	r4, #16
 800d3ca:	dd00      	ble.n	800d3ce <_svfprintf_r+0x7ca>
 800d3cc:	e2d6      	b.n	800d97c <_svfprintf_r+0xd78>
 800d3ce:	607c      	str	r4, [r7, #4]
 800d3d0:	18a4      	adds	r4, r4, r2
 800d3d2:	000f      	movs	r7, r1
 800d3d4:	942e      	str	r4, [sp, #184]	; 0xb8
 800d3d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800d3d8:	2b07      	cmp	r3, #7
 800d3da:	dd09      	ble.n	800d3f0 <_svfprintf_r+0x7ec>
 800d3dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800d3e2:	f003 fd25 	bl	8010e30 <__ssprint_r>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d001      	beq.n	800d3ee <_svfprintf_r+0x7ea>
 800d3ea:	f000 fdea 	bl	800dfc2 <_svfprintf_r+0x13be>
 800d3ee:	af2f      	add	r7, sp, #188	; 0xbc
 800d3f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f4:	1a9c      	subs	r4, r3, r2
 800d3f6:	2c00      	cmp	r4, #0
 800d3f8:	dd1a      	ble.n	800d430 <_svfprintf_r+0x82c>
 800d3fa:	0039      	movs	r1, r7
 800d3fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d3fe:	481d      	ldr	r0, [pc, #116]	; (800d474 <_svfprintf_r+0x870>)
 800d400:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d402:	3301      	adds	r3, #1
 800d404:	3108      	adds	r1, #8
 800d406:	6038      	str	r0, [r7, #0]
 800d408:	2c10      	cmp	r4, #16
 800d40a:	dd00      	ble.n	800d40e <_svfprintf_r+0x80a>
 800d40c:	e2c9      	b.n	800d9a2 <_svfprintf_r+0xd9e>
 800d40e:	18a2      	adds	r2, r4, r2
 800d410:	607c      	str	r4, [r7, #4]
 800d412:	922e      	str	r2, [sp, #184]	; 0xb8
 800d414:	000f      	movs	r7, r1
 800d416:	932d      	str	r3, [sp, #180]	; 0xb4
 800d418:	2b07      	cmp	r3, #7
 800d41a:	dd09      	ble.n	800d430 <_svfprintf_r+0x82c>
 800d41c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d41e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d420:	aa2c      	add	r2, sp, #176	; 0xb0
 800d422:	f003 fd05 	bl	8010e30 <__ssprint_r>
 800d426:	2800      	cmp	r0, #0
 800d428:	d001      	beq.n	800d42e <_svfprintf_r+0x82a>
 800d42a:	f000 fdca 	bl	800dfc2 <_svfprintf_r+0x13be>
 800d42e:	af2f      	add	r7, sp, #188	; 0xbc
 800d430:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d432:	9319      	str	r3, [sp, #100]	; 0x64
 800d434:	05f3      	lsls	r3, r6, #23
 800d436:	d500      	bpl.n	800d43a <_svfprintf_r+0x836>
 800d438:	e2ce      	b.n	800d9d8 <_svfprintf_r+0xdd4>
 800d43a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d43c:	9b08      	ldr	r3, [sp, #32]
 800d43e:	4694      	mov	ip, r2
 800d440:	603b      	str	r3, [r7, #0]
 800d442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d448:	4463      	add	r3, ip
 800d44a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d44c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d44e:	3301      	adds	r3, #1
 800d450:	932d      	str	r3, [sp, #180]	; 0xb4
 800d452:	2b07      	cmp	r3, #7
 800d454:	dd00      	ble.n	800d458 <_svfprintf_r+0x854>
 800d456:	e3a3      	b.n	800dba0 <_svfprintf_r+0xf9c>
 800d458:	3708      	adds	r7, #8
 800d45a:	e301      	b.n	800da60 <_svfprintf_r+0xe5c>
 800d45c:	08014194 	.word	0x08014194
 800d460:	080141a5 	.word	0x080141a5
 800d464:	40300000 	.word	0x40300000
 800d468:	3fe00000 	.word	0x3fe00000
 800d46c:	fffffbff 	.word	0xfffffbff
 800d470:	080141b8 	.word	0x080141b8
 800d474:	080141c8 	.word	0x080141c8
 800d478:	9b08      	ldr	r3, [sp, #32]
 800d47a:	930c      	str	r3, [sp, #48]	; 0x30
 800d47c:	e610      	b.n	800d0a0 <_svfprintf_r+0x49c>
 800d47e:	2306      	movs	r3, #6
 800d480:	e5fd      	b.n	800d07e <_svfprintf_r+0x47a>
 800d482:	930e      	str	r3, [sp, #56]	; 0x38
 800d484:	2300      	movs	r3, #0
 800d486:	e61a      	b.n	800d0be <_svfprintf_r+0x4ba>
 800d488:	7010      	strb	r0, [r2, #0]
 800d48a:	e684      	b.n	800d196 <_svfprintf_r+0x592>
 800d48c:	7018      	strb	r0, [r3, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	1aca      	subs	r2, r1, r3
 800d492:	d5fb      	bpl.n	800d48c <_svfprintf_r+0x888>
 800d494:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d496:	2300      	movs	r3, #0
 800d498:	3201      	adds	r2, #1
 800d49a:	db01      	blt.n	800d4a0 <_svfprintf_r+0x89c>
 800d49c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d49e:	3301      	adds	r3, #1
 800d4a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4a2:	18d3      	adds	r3, r2, r3
 800d4a4:	9323      	str	r3, [sp, #140]	; 0x8c
 800d4a6:	e684      	b.n	800d1b2 <_svfprintf_r+0x5ae>
 800d4a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4aa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d4ac:	2030      	movs	r0, #48	; 0x30
 800d4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4b0:	1851      	adds	r1, r2, r1
 800d4b2:	e7ed      	b.n	800d490 <_svfprintf_r+0x88c>
 800d4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d4ba:	2a46      	cmp	r2, #70	; 0x46
 800d4bc:	d006      	beq.n	800d4cc <_svfprintf_r+0x8c8>
 800d4be:	0014      	movs	r4, r2
 800d4c0:	3c45      	subs	r4, #69	; 0x45
 800d4c2:	4262      	negs	r2, r4
 800d4c4:	4154      	adcs	r4, r2
 800d4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	1914      	adds	r4, r2, r4
 800d4cc:	aa2a      	add	r2, sp, #168	; 0xa8
 800d4ce:	9204      	str	r2, [sp, #16]
 800d4d0:	aa27      	add	r2, sp, #156	; 0x9c
 800d4d2:	9203      	str	r2, [sp, #12]
 800d4d4:	aa26      	add	r2, sp, #152	; 0x98
 800d4d6:	9202      	str	r2, [sp, #8]
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	002a      	movs	r2, r5
 800d4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d4e0:	9401      	str	r4, [sp, #4]
 800d4e2:	f002 fad7 	bl	800fa94 <_dtoa_r>
 800d4e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4e8:	9008      	str	r0, [sp, #32]
 800d4ea:	2b47      	cmp	r3, #71	; 0x47
 800d4ec:	d103      	bne.n	800d4f6 <_svfprintf_r+0x8f2>
 800d4ee:	07f3      	lsls	r3, r6, #31
 800d4f0:	d401      	bmi.n	800d4f6 <_svfprintf_r+0x8f2>
 800d4f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d4f4:	e65e      	b.n	800d1b4 <_svfprintf_r+0x5b0>
 800d4f6:	9b08      	ldr	r3, [sp, #32]
 800d4f8:	191b      	adds	r3, r3, r4
 800d4fa:	9311      	str	r3, [sp, #68]	; 0x44
 800d4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4fe:	2b46      	cmp	r3, #70	; 0x46
 800d500:	d112      	bne.n	800d528 <_svfprintf_r+0x924>
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b30      	cmp	r3, #48	; 0x30
 800d508:	d10a      	bne.n	800d520 <_svfprintf_r+0x91c>
 800d50a:	2200      	movs	r2, #0
 800d50c:	2300      	movs	r3, #0
 800d50e:	0028      	movs	r0, r5
 800d510:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d512:	f7f2 ff99 	bl	8000448 <__aeabi_dcmpeq>
 800d516:	2800      	cmp	r0, #0
 800d518:	d102      	bne.n	800d520 <_svfprintf_r+0x91c>
 800d51a:	2301      	movs	r3, #1
 800d51c:	1b1b      	subs	r3, r3, r4
 800d51e:	9326      	str	r3, [sp, #152]	; 0x98
 800d520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d524:	18d3      	adds	r3, r2, r3
 800d526:	9311      	str	r3, [sp, #68]	; 0x44
 800d528:	2200      	movs	r2, #0
 800d52a:	2300      	movs	r3, #0
 800d52c:	0028      	movs	r0, r5
 800d52e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d530:	f7f2 ff8a 	bl	8000448 <__aeabi_dcmpeq>
 800d534:	2800      	cmp	r0, #0
 800d536:	d001      	beq.n	800d53c <_svfprintf_r+0x938>
 800d538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d53a:	932a      	str	r3, [sp, #168]	; 0xa8
 800d53c:	2230      	movs	r2, #48	; 0x30
 800d53e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d540:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d542:	4299      	cmp	r1, r3
 800d544:	d9d5      	bls.n	800d4f2 <_svfprintf_r+0x8ee>
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	912a      	str	r1, [sp, #168]	; 0xa8
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	e7f7      	b.n	800d53e <_svfprintf_r+0x93a>
 800d54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d550:	2b46      	cmp	r3, #70	; 0x46
 800d552:	d000      	beq.n	800d556 <_svfprintf_r+0x952>
 800d554:	e63f      	b.n	800d1d6 <_svfprintf_r+0x5d2>
 800d556:	2201      	movs	r2, #1
 800d558:	0033      	movs	r3, r6
 800d55a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d55c:	4013      	ands	r3, r2
 800d55e:	430b      	orrs	r3, r1
 800d560:	2d00      	cmp	r5, #0
 800d562:	dd2c      	ble.n	800d5be <_svfprintf_r+0x9ba>
 800d564:	2b00      	cmp	r3, #0
 800d566:	d046      	beq.n	800d5f6 <_svfprintf_r+0x9f2>
 800d568:	000a      	movs	r2, r1
 800d56a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d56c:	18eb      	adds	r3, r5, r3
 800d56e:	18d3      	adds	r3, r2, r3
 800d570:	9309      	str	r3, [sp, #36]	; 0x24
 800d572:	2366      	movs	r3, #102	; 0x66
 800d574:	930f      	str	r3, [sp, #60]	; 0x3c
 800d576:	e030      	b.n	800d5da <_svfprintf_r+0x9d6>
 800d578:	781c      	ldrb	r4, [r3, #0]
 800d57a:	3301      	adds	r3, #1
 800d57c:	7014      	strb	r4, [r2, #0]
 800d57e:	3201      	adds	r2, #1
 800d580:	e668      	b.n	800d254 <_svfprintf_r+0x650>
 800d582:	222a      	movs	r2, #42	; 0x2a
 800d584:	ab1e      	add	r3, sp, #120	; 0x78
 800d586:	18d2      	adds	r2, r2, r3
 800d588:	2800      	cmp	r0, #0
 800d58a:	d104      	bne.n	800d596 <_svfprintf_r+0x992>
 800d58c:	2330      	movs	r3, #48	; 0x30
 800d58e:	222b      	movs	r2, #43	; 0x2b
 800d590:	708b      	strb	r3, [r1, #2]
 800d592:	ab1e      	add	r3, sp, #120	; 0x78
 800d594:	18d2      	adds	r2, r2, r3
 800d596:	3430      	adds	r4, #48	; 0x30
 800d598:	1c53      	adds	r3, r2, #1
 800d59a:	7014      	strb	r4, [r2, #0]
 800d59c:	e669      	b.n	800d272 <_svfprintf_r+0x66e>
 800d59e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dd12      	ble.n	800d5ca <_svfprintf_r+0x9c6>
 800d5a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a8:	4694      	mov	ip, r2
 800d5aa:	4463      	add	r3, ip
 800d5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ae:	2367      	movs	r3, #103	; 0x67
 800d5b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5b2:	2d00      	cmp	r5, #0
 800d5b4:	dc11      	bgt.n	800d5da <_svfprintf_r+0x9d6>
 800d5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b8:	1b5b      	subs	r3, r3, r5
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	e00c      	b.n	800d5d8 <_svfprintf_r+0x9d4>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d01b      	beq.n	800d5fa <_svfprintf_r+0x9f6>
 800d5c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	e7d1      	b.n	800d56e <_svfprintf_r+0x96a>
 800d5ca:	2367      	movs	r3, #103	; 0x67
 800d5cc:	9509      	str	r5, [sp, #36]	; 0x24
 800d5ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5d0:	07f3      	lsls	r3, r6, #31
 800d5d2:	d502      	bpl.n	800d5da <_svfprintf_r+0x9d6>
 800d5d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d5d6:	18eb      	adds	r3, r5, r3
 800d5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5da:	2380      	movs	r3, #128	; 0x80
 800d5dc:	0032      	movs	r2, r6
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	401a      	ands	r2, r3
 800d5e2:	9211      	str	r2, [sp, #68]	; 0x44
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	9210      	str	r2, [sp, #64]	; 0x40
 800d5e8:	421e      	tst	r6, r3
 800d5ea:	d100      	bne.n	800d5ee <_svfprintf_r+0x9ea>
 800d5ec:	e65d      	b.n	800d2aa <_svfprintf_r+0x6a6>
 800d5ee:	4295      	cmp	r5, r2
 800d5f0:	dc25      	bgt.n	800d63e <_svfprintf_r+0xa3a>
 800d5f2:	9211      	str	r2, [sp, #68]	; 0x44
 800d5f4:	e659      	b.n	800d2aa <_svfprintf_r+0x6a6>
 800d5f6:	9509      	str	r5, [sp, #36]	; 0x24
 800d5f8:	e7bb      	b.n	800d572 <_svfprintf_r+0x96e>
 800d5fa:	2366      	movs	r3, #102	; 0x66
 800d5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d600:	e7eb      	b.n	800d5da <_svfprintf_r+0x9d6>
 800d602:	42ab      	cmp	r3, r5
 800d604:	da0e      	bge.n	800d624 <_svfprintf_r+0xa20>
 800d606:	1aed      	subs	r5, r5, r3
 800d608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d60a:	785b      	ldrb	r3, [r3, #1]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d012      	beq.n	800d636 <_svfprintf_r+0xa32>
 800d610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d612:	3301      	adds	r3, #1
 800d614:	9311      	str	r3, [sp, #68]	; 0x44
 800d616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d618:	3301      	adds	r3, #1
 800d61a:	9312      	str	r3, [sp, #72]	; 0x48
 800d61c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2bff      	cmp	r3, #255	; 0xff
 800d622:	d1ee      	bne.n	800d602 <_svfprintf_r+0x9fe>
 800d624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d628:	189b      	adds	r3, r3, r2
 800d62a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d62c:	4353      	muls	r3, r2
 800d62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d630:	189b      	adds	r3, r3, r2
 800d632:	9309      	str	r3, [sp, #36]	; 0x24
 800d634:	e639      	b.n	800d2aa <_svfprintf_r+0x6a6>
 800d636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d638:	3301      	adds	r3, #1
 800d63a:	9310      	str	r3, [sp, #64]	; 0x40
 800d63c:	e7ee      	b.n	800d61c <_svfprintf_r+0xa18>
 800d63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d640:	9311      	str	r3, [sp, #68]	; 0x44
 800d642:	e7eb      	b.n	800d61c <_svfprintf_r+0xa18>
 800d644:	1d23      	adds	r3, r4, #4
 800d646:	930d      	str	r3, [sp, #52]	; 0x34
 800d648:	06b3      	lsls	r3, r6, #26
 800d64a:	d509      	bpl.n	800d660 <_svfprintf_r+0xa5c>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d650:	601a      	str	r2, [r3, #0]
 800d652:	17d2      	asrs	r2, r2, #31
 800d654:	605a      	str	r2, [r3, #4]
 800d656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d658:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d65a:	9308      	str	r3, [sp, #32]
 800d65c:	f7ff fb0d 	bl	800cc7a <_svfprintf_r+0x76>
 800d660:	06f3      	lsls	r3, r6, #27
 800d662:	d503      	bpl.n	800d66c <_svfprintf_r+0xa68>
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	e7f4      	b.n	800d656 <_svfprintf_r+0xa52>
 800d66c:	0673      	lsls	r3, r6, #25
 800d66e:	d503      	bpl.n	800d678 <_svfprintf_r+0xa74>
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d674:	801a      	strh	r2, [r3, #0]
 800d676:	e7ee      	b.n	800d656 <_svfprintf_r+0xa52>
 800d678:	05b6      	lsls	r6, r6, #22
 800d67a:	d5f3      	bpl.n	800d664 <_svfprintf_r+0xa60>
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d680:	701a      	strb	r2, [r3, #0]
 800d682:	e7e8      	b.n	800d656 <_svfprintf_r+0xa52>
 800d684:	2310      	movs	r3, #16
 800d686:	431e      	orrs	r6, r3
 800d688:	2320      	movs	r3, #32
 800d68a:	0030      	movs	r0, r6
 800d68c:	4018      	ands	r0, r3
 800d68e:	421e      	tst	r6, r3
 800d690:	d00f      	beq.n	800d6b2 <_svfprintf_r+0xaae>
 800d692:	3b19      	subs	r3, #25
 800d694:	3407      	adds	r4, #7
 800d696:	439c      	bics	r4, r3
 800d698:	0022      	movs	r2, r4
 800d69a:	ca18      	ldmia	r2!, {r3, r4}
 800d69c:	9306      	str	r3, [sp, #24]
 800d69e:	9407      	str	r4, [sp, #28]
 800d6a0:	920d      	str	r2, [sp, #52]	; 0x34
 800d6a2:	4bc9      	ldr	r3, [pc, #804]	; (800d9c8 <_svfprintf_r+0xdc4>)
 800d6a4:	401e      	ands	r6, r3
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	221b      	movs	r2, #27
 800d6aa:	a91e      	add	r1, sp, #120	; 0x78
 800d6ac:	1852      	adds	r2, r2, r1
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	e430      	b.n	800cf14 <_svfprintf_r+0x310>
 800d6b2:	0022      	movs	r2, r4
 800d6b4:	ca08      	ldmia	r2!, {r3}
 800d6b6:	0031      	movs	r1, r6
 800d6b8:	920d      	str	r2, [sp, #52]	; 0x34
 800d6ba:	2210      	movs	r2, #16
 800d6bc:	4011      	ands	r1, r2
 800d6be:	4216      	tst	r6, r2
 800d6c0:	d002      	beq.n	800d6c8 <_svfprintf_r+0xac4>
 800d6c2:	9306      	str	r3, [sp, #24]
 800d6c4:	9007      	str	r0, [sp, #28]
 800d6c6:	e7ec      	b.n	800d6a2 <_svfprintf_r+0xa9e>
 800d6c8:	2240      	movs	r2, #64	; 0x40
 800d6ca:	0030      	movs	r0, r6
 800d6cc:	4010      	ands	r0, r2
 800d6ce:	4216      	tst	r6, r2
 800d6d0:	d003      	beq.n	800d6da <_svfprintf_r+0xad6>
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	9306      	str	r3, [sp, #24]
 800d6d6:	9107      	str	r1, [sp, #28]
 800d6d8:	e7e3      	b.n	800d6a2 <_svfprintf_r+0xa9e>
 800d6da:	2280      	movs	r2, #128	; 0x80
 800d6dc:	0031      	movs	r1, r6
 800d6de:	0092      	lsls	r2, r2, #2
 800d6e0:	4011      	ands	r1, r2
 800d6e2:	4216      	tst	r6, r2
 800d6e4:	d0f6      	beq.n	800d6d4 <_svfprintf_r+0xad0>
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	e7eb      	b.n	800d6c2 <_svfprintf_r+0xabe>
 800d6ea:	0023      	movs	r3, r4
 800d6ec:	cb04      	ldmia	r3!, {r2}
 800d6ee:	49b7      	ldr	r1, [pc, #732]	; (800d9cc <_svfprintf_r+0xdc8>)
 800d6f0:	9206      	str	r2, [sp, #24]
 800d6f2:	aa25      	add	r2, sp, #148	; 0x94
 800d6f4:	8011      	strh	r1, [r2, #0]
 800d6f6:	4ab6      	ldr	r2, [pc, #728]	; (800d9d0 <_svfprintf_r+0xdcc>)
 800d6f8:	930d      	str	r3, [sp, #52]	; 0x34
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	921f      	str	r2, [sp, #124]	; 0x7c
 800d6fe:	2278      	movs	r2, #120	; 0x78
 800d700:	9307      	str	r3, [sp, #28]
 800d702:	3302      	adds	r3, #2
 800d704:	431e      	orrs	r6, r3
 800d706:	920f      	str	r2, [sp, #60]	; 0x3c
 800d708:	e7ce      	b.n	800d6a8 <_svfprintf_r+0xaa4>
 800d70a:	0023      	movs	r3, r4
 800d70c:	cb04      	ldmia	r3!, {r2}
 800d70e:	2400      	movs	r4, #0
 800d710:	930d      	str	r3, [sp, #52]	; 0x34
 800d712:	231b      	movs	r3, #27
 800d714:	9208      	str	r2, [sp, #32]
 800d716:	aa1e      	add	r2, sp, #120	; 0x78
 800d718:	189b      	adds	r3, r3, r2
 800d71a:	701c      	strb	r4, [r3, #0]
 800d71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71e:	3301      	adds	r3, #1
 800d720:	d00e      	beq.n	800d740 <_svfprintf_r+0xb3c>
 800d722:	0021      	movs	r1, r4
 800d724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d726:	9808      	ldr	r0, [sp, #32]
 800d728:	f002 f83a 	bl	800f7a0 <memchr>
 800d72c:	900c      	str	r0, [sp, #48]	; 0x30
 800d72e:	42a0      	cmp	r0, r4
 800d730:	d100      	bne.n	800d734 <_svfprintf_r+0xb30>
 800d732:	e10d      	b.n	800d950 <_svfprintf_r+0xd4c>
 800d734:	9a08      	ldr	r2, [sp, #32]
 800d736:	1a83      	subs	r3, r0, r2
 800d738:	9309      	str	r3, [sp, #36]	; 0x24
 800d73a:	0023      	movs	r3, r4
 800d73c:	940c      	str	r4, [sp, #48]	; 0x30
 800d73e:	e44e      	b.n	800cfde <_svfprintf_r+0x3da>
 800d740:	9808      	ldr	r0, [sp, #32]
 800d742:	f7f2 fcdf 	bl	8000104 <strlen>
 800d746:	9009      	str	r0, [sp, #36]	; 0x24
 800d748:	e7f7      	b.n	800d73a <_svfprintf_r+0xb36>
 800d74a:	2310      	movs	r3, #16
 800d74c:	431e      	orrs	r6, r3
 800d74e:	2320      	movs	r3, #32
 800d750:	0030      	movs	r0, r6
 800d752:	4018      	ands	r0, r3
 800d754:	421e      	tst	r6, r3
 800d756:	d009      	beq.n	800d76c <_svfprintf_r+0xb68>
 800d758:	3b19      	subs	r3, #25
 800d75a:	3407      	adds	r4, #7
 800d75c:	439c      	bics	r4, r3
 800d75e:	0022      	movs	r2, r4
 800d760:	ca18      	ldmia	r2!, {r3, r4}
 800d762:	9306      	str	r3, [sp, #24]
 800d764:	9407      	str	r4, [sp, #28]
 800d766:	920d      	str	r2, [sp, #52]	; 0x34
 800d768:	2301      	movs	r3, #1
 800d76a:	e79d      	b.n	800d6a8 <_svfprintf_r+0xaa4>
 800d76c:	0023      	movs	r3, r4
 800d76e:	cb04      	ldmia	r3!, {r2}
 800d770:	0031      	movs	r1, r6
 800d772:	930d      	str	r3, [sp, #52]	; 0x34
 800d774:	2310      	movs	r3, #16
 800d776:	4019      	ands	r1, r3
 800d778:	421e      	tst	r6, r3
 800d77a:	d003      	beq.n	800d784 <_svfprintf_r+0xb80>
 800d77c:	9206      	str	r2, [sp, #24]
 800d77e:	9007      	str	r0, [sp, #28]
 800d780:	3b0f      	subs	r3, #15
 800d782:	e791      	b.n	800d6a8 <_svfprintf_r+0xaa4>
 800d784:	2340      	movs	r3, #64	; 0x40
 800d786:	0030      	movs	r0, r6
 800d788:	4018      	ands	r0, r3
 800d78a:	421e      	tst	r6, r3
 800d78c:	d003      	beq.n	800d796 <_svfprintf_r+0xb92>
 800d78e:	b293      	uxth	r3, r2
 800d790:	9306      	str	r3, [sp, #24]
 800d792:	9107      	str	r1, [sp, #28]
 800d794:	e7e8      	b.n	800d768 <_svfprintf_r+0xb64>
 800d796:	2380      	movs	r3, #128	; 0x80
 800d798:	0031      	movs	r1, r6
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4019      	ands	r1, r3
 800d79e:	421e      	tst	r6, r3
 800d7a0:	d003      	beq.n	800d7aa <_svfprintf_r+0xba6>
 800d7a2:	b2d3      	uxtb	r3, r2
 800d7a4:	9306      	str	r3, [sp, #24]
 800d7a6:	9007      	str	r0, [sp, #28]
 800d7a8:	e7de      	b.n	800d768 <_svfprintf_r+0xb64>
 800d7aa:	9206      	str	r2, [sp, #24]
 800d7ac:	e7f1      	b.n	800d792 <_svfprintf_r+0xb8e>
 800d7ae:	4b89      	ldr	r3, [pc, #548]	; (800d9d4 <_svfprintf_r+0xdd0>)
 800d7b0:	0030      	movs	r0, r6
 800d7b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	4018      	ands	r0, r3
 800d7b8:	421e      	tst	r6, r3
 800d7ba:	d01a      	beq.n	800d7f2 <_svfprintf_r+0xbee>
 800d7bc:	3b19      	subs	r3, #25
 800d7be:	3407      	adds	r4, #7
 800d7c0:	439c      	bics	r4, r3
 800d7c2:	0022      	movs	r2, r4
 800d7c4:	ca18      	ldmia	r2!, {r3, r4}
 800d7c6:	9306      	str	r3, [sp, #24]
 800d7c8:	9407      	str	r4, [sp, #28]
 800d7ca:	920d      	str	r2, [sp, #52]	; 0x34
 800d7cc:	07f3      	lsls	r3, r6, #31
 800d7ce:	d50a      	bpl.n	800d7e6 <_svfprintf_r+0xbe2>
 800d7d0:	9b06      	ldr	r3, [sp, #24]
 800d7d2:	9a07      	ldr	r2, [sp, #28]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	d006      	beq.n	800d7e6 <_svfprintf_r+0xbe2>
 800d7d8:	2230      	movs	r2, #48	; 0x30
 800d7da:	ab25      	add	r3, sp, #148	; 0x94
 800d7dc:	701a      	strb	r2, [r3, #0]
 800d7de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7e0:	705a      	strb	r2, [r3, #1]
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	431e      	orrs	r6, r3
 800d7e6:	4b78      	ldr	r3, [pc, #480]	; (800d9c8 <_svfprintf_r+0xdc4>)
 800d7e8:	401e      	ands	r6, r3
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	e75c      	b.n	800d6a8 <_svfprintf_r+0xaa4>
 800d7ee:	4b78      	ldr	r3, [pc, #480]	; (800d9d0 <_svfprintf_r+0xdcc>)
 800d7f0:	e7de      	b.n	800d7b0 <_svfprintf_r+0xbac>
 800d7f2:	0023      	movs	r3, r4
 800d7f4:	cb04      	ldmia	r3!, {r2}
 800d7f6:	0031      	movs	r1, r6
 800d7f8:	930d      	str	r3, [sp, #52]	; 0x34
 800d7fa:	2310      	movs	r3, #16
 800d7fc:	4019      	ands	r1, r3
 800d7fe:	421e      	tst	r6, r3
 800d800:	d002      	beq.n	800d808 <_svfprintf_r+0xc04>
 800d802:	9206      	str	r2, [sp, #24]
 800d804:	9007      	str	r0, [sp, #28]
 800d806:	e7e1      	b.n	800d7cc <_svfprintf_r+0xbc8>
 800d808:	2340      	movs	r3, #64	; 0x40
 800d80a:	0030      	movs	r0, r6
 800d80c:	4018      	ands	r0, r3
 800d80e:	421e      	tst	r6, r3
 800d810:	d003      	beq.n	800d81a <_svfprintf_r+0xc16>
 800d812:	b293      	uxth	r3, r2
 800d814:	9306      	str	r3, [sp, #24]
 800d816:	9107      	str	r1, [sp, #28]
 800d818:	e7d8      	b.n	800d7cc <_svfprintf_r+0xbc8>
 800d81a:	2380      	movs	r3, #128	; 0x80
 800d81c:	0031      	movs	r1, r6
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4019      	ands	r1, r3
 800d822:	421e      	tst	r6, r3
 800d824:	d002      	beq.n	800d82c <_svfprintf_r+0xc28>
 800d826:	b2d3      	uxtb	r3, r2
 800d828:	9306      	str	r3, [sp, #24]
 800d82a:	e7eb      	b.n	800d804 <_svfprintf_r+0xc00>
 800d82c:	9206      	str	r2, [sp, #24]
 800d82e:	e7f2      	b.n	800d816 <_svfprintf_r+0xc12>
 800d830:	9b07      	ldr	r3, [sp, #28]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10a      	bne.n	800d84c <_svfprintf_r+0xc48>
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	2b09      	cmp	r3, #9
 800d83a:	d807      	bhi.n	800d84c <_svfprintf_r+0xc48>
 800d83c:	23e7      	movs	r3, #231	; 0xe7
 800d83e:	aa1e      	add	r2, sp, #120	; 0x78
 800d840:	189b      	adds	r3, r3, r2
 800d842:	9a06      	ldr	r2, [sp, #24]
 800d844:	3230      	adds	r2, #48	; 0x30
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	f000 fc18 	bl	800e07c <_svfprintf_r+0x1478>
 800d84c:	2680      	movs	r6, #128	; 0x80
 800d84e:	2300      	movs	r3, #0
 800d850:	00f6      	lsls	r6, r6, #3
 800d852:	930e      	str	r3, [sp, #56]	; 0x38
 800d854:	ad58      	add	r5, sp, #352	; 0x160
 800d856:	4026      	ands	r6, r4
 800d858:	220a      	movs	r2, #10
 800d85a:	9806      	ldr	r0, [sp, #24]
 800d85c:	9907      	ldr	r1, [sp, #28]
 800d85e:	2300      	movs	r3, #0
 800d860:	f7f2 fe20 	bl	80004a4 <__aeabi_uldivmod>
 800d864:	1e6b      	subs	r3, r5, #1
 800d866:	3230      	adds	r2, #48	; 0x30
 800d868:	9308      	str	r3, [sp, #32]
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d86e:	900c      	str	r0, [sp, #48]	; 0x30
 800d870:	3301      	adds	r3, #1
 800d872:	9110      	str	r1, [sp, #64]	; 0x40
 800d874:	930e      	str	r3, [sp, #56]	; 0x38
 800d876:	2e00      	cmp	r6, #0
 800d878:	d01d      	beq.n	800d8b6 <_svfprintf_r+0xcb2>
 800d87a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d87c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d118      	bne.n	800d8b6 <_svfprintf_r+0xcb2>
 800d884:	2aff      	cmp	r2, #255	; 0xff
 800d886:	d016      	beq.n	800d8b6 <_svfprintf_r+0xcb2>
 800d888:	9b07      	ldr	r3, [sp, #28]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <_svfprintf_r+0xc90>
 800d88e:	9b06      	ldr	r3, [sp, #24]
 800d890:	2b09      	cmp	r3, #9
 800d892:	d910      	bls.n	800d8b6 <_svfprintf_r+0xcb2>
 800d894:	9b08      	ldr	r3, [sp, #32]
 800d896:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d898:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d89a:	1a9b      	subs	r3, r3, r2
 800d89c:	0018      	movs	r0, r3
 800d89e:	9308      	str	r3, [sp, #32]
 800d8a0:	f7fd ffd1 	bl	800b846 <strncpy>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8a8:	920e      	str	r2, [sp, #56]	; 0x38
 800d8aa:	785b      	ldrb	r3, [r3, #1]
 800d8ac:	1e5a      	subs	r2, r3, #1
 800d8ae:	4193      	sbcs	r3, r2
 800d8b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8b2:	18d3      	adds	r3, r2, r3
 800d8b4:	9312      	str	r3, [sp, #72]	; 0x48
 800d8b6:	9b07      	ldr	r3, [sp, #28]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10f      	bne.n	800d8dc <_svfprintf_r+0xcd8>
 800d8bc:	9b06      	ldr	r3, [sp, #24]
 800d8be:	2b09      	cmp	r3, #9
 800d8c0:	d80c      	bhi.n	800d8dc <_svfprintf_r+0xcd8>
 800d8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c4:	9a08      	ldr	r2, [sp, #32]
 800d8c6:	9319      	str	r3, [sp, #100]	; 0x64
 800d8c8:	ab58      	add	r3, sp, #352	; 0x160
 800d8ca:	1a9b      	subs	r3, r3, r2
 800d8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	0026      	movs	r6, r4
 800d8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d4:	001d      	movs	r5, r3
 800d8d6:	9310      	str	r3, [sp, #64]	; 0x40
 800d8d8:	9311      	str	r3, [sp, #68]	; 0x44
 800d8da:	e4f2      	b.n	800d2c2 <_svfprintf_r+0x6be>
 800d8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8de:	9d08      	ldr	r5, [sp, #32]
 800d8e0:	9306      	str	r3, [sp, #24]
 800d8e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8e4:	9307      	str	r3, [sp, #28]
 800d8e6:	e7b7      	b.n	800d858 <_svfprintf_r+0xc54>
 800d8e8:	200f      	movs	r0, #15
 800d8ea:	ab58      	add	r3, sp, #352	; 0x160
 800d8ec:	9308      	str	r3, [sp, #32]
 800d8ee:	9b08      	ldr	r3, [sp, #32]
 800d8f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	9308      	str	r3, [sp, #32]
 800d8f6:	9b06      	ldr	r3, [sp, #24]
 800d8f8:	4003      	ands	r3, r0
 800d8fa:	5cd3      	ldrb	r3, [r2, r3]
 800d8fc:	9a08      	ldr	r2, [sp, #32]
 800d8fe:	7013      	strb	r3, [r2, #0]
 800d900:	9b07      	ldr	r3, [sp, #28]
 800d902:	0719      	lsls	r1, r3, #28
 800d904:	9b06      	ldr	r3, [sp, #24]
 800d906:	091a      	lsrs	r2, r3, #4
 800d908:	9b07      	ldr	r3, [sp, #28]
 800d90a:	4311      	orrs	r1, r2
 800d90c:	091b      	lsrs	r3, r3, #4
 800d90e:	9307      	str	r3, [sp, #28]
 800d910:	000b      	movs	r3, r1
 800d912:	9a07      	ldr	r2, [sp, #28]
 800d914:	9106      	str	r1, [sp, #24]
 800d916:	4313      	orrs	r3, r2
 800d918:	d1e9      	bne.n	800d8ee <_svfprintf_r+0xcea>
 800d91a:	e7d2      	b.n	800d8c2 <_svfprintf_r+0xcbe>
 800d91c:	aa58      	add	r2, sp, #352	; 0x160
 800d91e:	9208      	str	r2, [sp, #32]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1ce      	bne.n	800d8c2 <_svfprintf_r+0xcbe>
 800d924:	07f6      	lsls	r6, r6, #31
 800d926:	d5cc      	bpl.n	800d8c2 <_svfprintf_r+0xcbe>
 800d928:	aa1e      	add	r2, sp, #120	; 0x78
 800d92a:	33e7      	adds	r3, #231	; 0xe7
 800d92c:	189b      	adds	r3, r3, r2
 800d92e:	2230      	movs	r2, #48	; 0x30
 800d930:	e789      	b.n	800d846 <_svfprintf_r+0xc42>
 800d932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d934:	2b00      	cmp	r3, #0
 800d936:	d100      	bne.n	800d93a <_svfprintf_r+0xd36>
 800d938:	e364      	b.n	800e004 <_svfprintf_r+0x1400>
 800d93a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d93c:	211b      	movs	r1, #27
 800d93e:	ab3f      	add	r3, sp, #252	; 0xfc
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	a81e      	add	r0, sp, #120	; 0x78
 800d946:	1809      	adds	r1, r1, r0
 800d948:	700a      	strb	r2, [r1, #0]
 800d94a:	940d      	str	r4, [sp, #52]	; 0x34
 800d94c:	f7ff fabd 	bl	800ceca <_svfprintf_r+0x2c6>
 800d950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d952:	f7ff fb44 	bl	800cfde <_svfprintf_r+0x3da>
 800d956:	2010      	movs	r0, #16
 800d958:	1812      	adds	r2, r2, r0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	922e      	str	r2, [sp, #184]	; 0xb8
 800d95e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d960:	2b07      	cmp	r3, #7
 800d962:	dd08      	ble.n	800d976 <_svfprintf_r+0xd72>
 800d964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d966:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d968:	aa2c      	add	r2, sp, #176	; 0xb0
 800d96a:	f003 fa61 	bl	8010e30 <__ssprint_r>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d000      	beq.n	800d974 <_svfprintf_r+0xd70>
 800d972:	e326      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800d974:	a92f      	add	r1, sp, #188	; 0xbc
 800d976:	000f      	movs	r7, r1
 800d978:	3c10      	subs	r4, #16
 800d97a:	e4c5      	b.n	800d308 <_svfprintf_r+0x704>
 800d97c:	2010      	movs	r0, #16
 800d97e:	1812      	adds	r2, r2, r0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	922e      	str	r2, [sp, #184]	; 0xb8
 800d984:	932d      	str	r3, [sp, #180]	; 0xb4
 800d986:	2b07      	cmp	r3, #7
 800d988:	dd08      	ble.n	800d99c <_svfprintf_r+0xd98>
 800d98a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d98c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d98e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d990:	f003 fa4e 	bl	8010e30 <__ssprint_r>
 800d994:	2800      	cmp	r0, #0
 800d996:	d000      	beq.n	800d99a <_svfprintf_r+0xd96>
 800d998:	e313      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800d99a:	a92f      	add	r1, sp, #188	; 0xbc
 800d99c:	000f      	movs	r7, r1
 800d99e:	3c10      	subs	r4, #16
 800d9a0:	e50b      	b.n	800d3ba <_svfprintf_r+0x7b6>
 800d9a2:	2010      	movs	r0, #16
 800d9a4:	1812      	adds	r2, r2, r0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	922e      	str	r2, [sp, #184]	; 0xb8
 800d9aa:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9ac:	2b07      	cmp	r3, #7
 800d9ae:	dd08      	ble.n	800d9c2 <_svfprintf_r+0xdbe>
 800d9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9b6:	f003 fa3b 	bl	8010e30 <__ssprint_r>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d000      	beq.n	800d9c0 <_svfprintf_r+0xdbc>
 800d9be:	e300      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800d9c0:	a92f      	add	r1, sp, #188	; 0xbc
 800d9c2:	000f      	movs	r7, r1
 800d9c4:	3c10      	subs	r4, #16
 800d9c6:	e518      	b.n	800d3fa <_svfprintf_r+0x7f6>
 800d9c8:	fffffbff 	.word	0xfffffbff
 800d9cc:	00007830 	.word	0x00007830
 800d9d0:	08014194 	.word	0x08014194
 800d9d4:	080141a5 	.word	0x080141a5
 800d9d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9da:	2b65      	cmp	r3, #101	; 0x65
 800d9dc:	dc00      	bgt.n	800d9e0 <_svfprintf_r+0xddc>
 800d9de:	e241      	b.n	800de64 <_svfprintf_r+0x1260>
 800d9e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d9e2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f7f2 fd2e 	bl	8000448 <__aeabi_dcmpeq>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d077      	beq.n	800dae0 <_svfprintf_r+0xedc>
 800d9f0:	4bca      	ldr	r3, [pc, #808]	; (800dd1c <_svfprintf_r+0x1118>)
 800d9f2:	603b      	str	r3, [r7, #0]
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	607b      	str	r3, [r7, #4]
 800d9f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	932e      	str	r3, [sp, #184]	; 0xb8
 800da00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da02:	3301      	adds	r3, #1
 800da04:	932d      	str	r3, [sp, #180]	; 0xb4
 800da06:	2b07      	cmp	r3, #7
 800da08:	dd08      	ble.n	800da1c <_svfprintf_r+0xe18>
 800da0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da0e:	aa2c      	add	r2, sp, #176	; 0xb0
 800da10:	f003 fa0e 	bl	8010e30 <__ssprint_r>
 800da14:	2800      	cmp	r0, #0
 800da16:	d000      	beq.n	800da1a <_svfprintf_r+0xe16>
 800da18:	e2d3      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800da1a:	af2f      	add	r7, sp, #188	; 0xbc
 800da1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da20:	4293      	cmp	r3, r2
 800da22:	db01      	blt.n	800da28 <_svfprintf_r+0xe24>
 800da24:	07f3      	lsls	r3, r6, #31
 800da26:	d51b      	bpl.n	800da60 <_svfprintf_r+0xe5c>
 800da28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800da2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800da2c:	603b      	str	r3, [r7, #0]
 800da2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da34:	3708      	adds	r7, #8
 800da36:	189b      	adds	r3, r3, r2
 800da38:	932e      	str	r3, [sp, #184]	; 0xb8
 800da3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da3c:	3301      	adds	r3, #1
 800da3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800da40:	2b07      	cmp	r3, #7
 800da42:	dd08      	ble.n	800da56 <_svfprintf_r+0xe52>
 800da44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da48:	aa2c      	add	r2, sp, #176	; 0xb0
 800da4a:	f003 f9f1 	bl	8010e30 <__ssprint_r>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d000      	beq.n	800da54 <_svfprintf_r+0xe50>
 800da52:	e2b6      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800da54:	af2f      	add	r7, sp, #188	; 0xbc
 800da56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da58:	2510      	movs	r5, #16
 800da5a:	1e5c      	subs	r4, r3, #1
 800da5c:	2c00      	cmp	r4, #0
 800da5e:	dc2e      	bgt.n	800dabe <_svfprintf_r+0xeba>
 800da60:	0776      	lsls	r6, r6, #29
 800da62:	d500      	bpl.n	800da66 <_svfprintf_r+0xe62>
 800da64:	e290      	b.n	800df88 <_svfprintf_r+0x1384>
 800da66:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da6a:	4293      	cmp	r3, r2
 800da6c:	da00      	bge.n	800da70 <_svfprintf_r+0xe6c>
 800da6e:	0013      	movs	r3, r2
 800da70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da72:	18d3      	adds	r3, r2, r3
 800da74:	9317      	str	r3, [sp, #92]	; 0x5c
 800da76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d007      	beq.n	800da8c <_svfprintf_r+0xe88>
 800da7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da80:	aa2c      	add	r2, sp, #176	; 0xb0
 800da82:	f003 f9d5 	bl	8010e30 <__ssprint_r>
 800da86:	2800      	cmp	r0, #0
 800da88:	d000      	beq.n	800da8c <_svfprintf_r+0xe88>
 800da8a:	e29a      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800da8c:	2300      	movs	r3, #0
 800da8e:	932d      	str	r3, [sp, #180]	; 0xb4
 800da90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da92:	2b00      	cmp	r3, #0
 800da94:	d000      	beq.n	800da98 <_svfprintf_r+0xe94>
 800da96:	e2b0      	b.n	800dffa <_svfprintf_r+0x13f6>
 800da98:	af2f      	add	r7, sp, #188	; 0xbc
 800da9a:	e5dc      	b.n	800d656 <_svfprintf_r+0xa52>
 800da9c:	3210      	adds	r2, #16
 800da9e:	607d      	str	r5, [r7, #4]
 800daa0:	922e      	str	r2, [sp, #184]	; 0xb8
 800daa2:	932d      	str	r3, [sp, #180]	; 0xb4
 800daa4:	2b07      	cmp	r3, #7
 800daa6:	dd08      	ble.n	800daba <_svfprintf_r+0xeb6>
 800daa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800daaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800daac:	aa2c      	add	r2, sp, #176	; 0xb0
 800daae:	f003 f9bf 	bl	8010e30 <__ssprint_r>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d000      	beq.n	800dab8 <_svfprintf_r+0xeb4>
 800dab6:	e284      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dab8:	a92f      	add	r1, sp, #188	; 0xbc
 800daba:	000f      	movs	r7, r1
 800dabc:	3c10      	subs	r4, #16
 800dabe:	0039      	movs	r1, r7
 800dac0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dac2:	4897      	ldr	r0, [pc, #604]	; (800dd20 <_svfprintf_r+0x111c>)
 800dac4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dac6:	3301      	adds	r3, #1
 800dac8:	3108      	adds	r1, #8
 800daca:	6038      	str	r0, [r7, #0]
 800dacc:	2c10      	cmp	r4, #16
 800dace:	dce5      	bgt.n	800da9c <_svfprintf_r+0xe98>
 800dad0:	607c      	str	r4, [r7, #4]
 800dad2:	18a4      	adds	r4, r4, r2
 800dad4:	942e      	str	r4, [sp, #184]	; 0xb8
 800dad6:	000f      	movs	r7, r1
 800dad8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dada:	2b07      	cmp	r3, #7
 800dadc:	ddc0      	ble.n	800da60 <_svfprintf_r+0xe5c>
 800dade:	e05f      	b.n	800dba0 <_svfprintf_r+0xf9c>
 800dae0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dc78      	bgt.n	800dbd8 <_svfprintf_r+0xfd4>
 800dae6:	4b8d      	ldr	r3, [pc, #564]	; (800dd1c <_svfprintf_r+0x1118>)
 800dae8:	603b      	str	r3, [r7, #0]
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800daf0:	3708      	adds	r7, #8
 800daf2:	3301      	adds	r3, #1
 800daf4:	932e      	str	r3, [sp, #184]	; 0xb8
 800daf6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800daf8:	3301      	adds	r3, #1
 800dafa:	932d      	str	r3, [sp, #180]	; 0xb4
 800dafc:	2b07      	cmp	r3, #7
 800dafe:	dd08      	ble.n	800db12 <_svfprintf_r+0xf0e>
 800db00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db04:	aa2c      	add	r2, sp, #176	; 0xb0
 800db06:	f003 f993 	bl	8010e30 <__ssprint_r>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d000      	beq.n	800db10 <_svfprintf_r+0xf0c>
 800db0e:	e258      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800db10:	af2f      	add	r7, sp, #188	; 0xbc
 800db12:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db16:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800db18:	430b      	orrs	r3, r1
 800db1a:	2101      	movs	r1, #1
 800db1c:	4031      	ands	r1, r6
 800db1e:	430b      	orrs	r3, r1
 800db20:	d09e      	beq.n	800da60 <_svfprintf_r+0xe5c>
 800db22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800db24:	603b      	str	r3, [r7, #0]
 800db26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db28:	607b      	str	r3, [r7, #4]
 800db2a:	189a      	adds	r2, r3, r2
 800db2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db2e:	922e      	str	r2, [sp, #184]	; 0xb8
 800db30:	3301      	adds	r3, #1
 800db32:	932d      	str	r3, [sp, #180]	; 0xb4
 800db34:	3708      	adds	r7, #8
 800db36:	2b07      	cmp	r3, #7
 800db38:	dd08      	ble.n	800db4c <_svfprintf_r+0xf48>
 800db3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db3e:	aa2c      	add	r2, sp, #176	; 0xb0
 800db40:	f003 f976 	bl	8010e30 <__ssprint_r>
 800db44:	2800      	cmp	r0, #0
 800db46:	d000      	beq.n	800db4a <_svfprintf_r+0xf46>
 800db48:	e23b      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800db4a:	af2f      	add	r7, sp, #188	; 0xbc
 800db4c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800db4e:	2c00      	cmp	r4, #0
 800db50:	da19      	bge.n	800db86 <_svfprintf_r+0xf82>
 800db52:	0038      	movs	r0, r7
 800db54:	2510      	movs	r5, #16
 800db56:	4264      	negs	r4, r4
 800db58:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800db5a:	4a71      	ldr	r2, [pc, #452]	; (800dd20 <_svfprintf_r+0x111c>)
 800db5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800db5e:	3101      	adds	r1, #1
 800db60:	3708      	adds	r7, #8
 800db62:	6002      	str	r2, [r0, #0]
 800db64:	2c10      	cmp	r4, #16
 800db66:	dc25      	bgt.n	800dbb4 <_svfprintf_r+0xfb0>
 800db68:	6044      	str	r4, [r0, #4]
 800db6a:	18e4      	adds	r4, r4, r3
 800db6c:	942e      	str	r4, [sp, #184]	; 0xb8
 800db6e:	912d      	str	r1, [sp, #180]	; 0xb4
 800db70:	2907      	cmp	r1, #7
 800db72:	dd08      	ble.n	800db86 <_svfprintf_r+0xf82>
 800db74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db78:	aa2c      	add	r2, sp, #176	; 0xb0
 800db7a:	f003 f959 	bl	8010e30 <__ssprint_r>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d000      	beq.n	800db84 <_svfprintf_r+0xf80>
 800db82:	e21e      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800db84:	af2f      	add	r7, sp, #188	; 0xbc
 800db86:	9b08      	ldr	r3, [sp, #32]
 800db88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800db8a:	603b      	str	r3, [r7, #0]
 800db8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db8e:	18d2      	adds	r2, r2, r3
 800db90:	922e      	str	r2, [sp, #184]	; 0xb8
 800db92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800db94:	607b      	str	r3, [r7, #4]
 800db96:	3201      	adds	r2, #1
 800db98:	922d      	str	r2, [sp, #180]	; 0xb4
 800db9a:	2a07      	cmp	r2, #7
 800db9c:	dc00      	bgt.n	800dba0 <_svfprintf_r+0xf9c>
 800db9e:	e45b      	b.n	800d458 <_svfprintf_r+0x854>
 800dba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dba2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dba4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dba6:	f003 f943 	bl	8010e30 <__ssprint_r>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d000      	beq.n	800dbb0 <_svfprintf_r+0xfac>
 800dbae:	e208      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dbb0:	af2f      	add	r7, sp, #188	; 0xbc
 800dbb2:	e755      	b.n	800da60 <_svfprintf_r+0xe5c>
 800dbb4:	3310      	adds	r3, #16
 800dbb6:	6045      	str	r5, [r0, #4]
 800dbb8:	932e      	str	r3, [sp, #184]	; 0xb8
 800dbba:	912d      	str	r1, [sp, #180]	; 0xb4
 800dbbc:	2907      	cmp	r1, #7
 800dbbe:	dd08      	ble.n	800dbd2 <_svfprintf_r+0xfce>
 800dbc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbc6:	f003 f933 	bl	8010e30 <__ssprint_r>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d000      	beq.n	800dbd0 <_svfprintf_r+0xfcc>
 800dbce:	e1f8      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dbd0:	af2f      	add	r7, sp, #188	; 0xbc
 800dbd2:	0038      	movs	r0, r7
 800dbd4:	3c10      	subs	r4, #16
 800dbd6:	e7bf      	b.n	800db58 <_svfprintf_r+0xf54>
 800dbd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbda:	002c      	movs	r4, r5
 800dbdc:	429d      	cmp	r5, r3
 800dbde:	dd00      	ble.n	800dbe2 <_svfprintf_r+0xfde>
 800dbe0:	001c      	movs	r4, r3
 800dbe2:	2c00      	cmp	r4, #0
 800dbe4:	dd14      	ble.n	800dc10 <_svfprintf_r+0x100c>
 800dbe6:	9b08      	ldr	r3, [sp, #32]
 800dbe8:	607c      	str	r4, [r7, #4]
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbee:	3708      	adds	r7, #8
 800dbf0:	18e3      	adds	r3, r4, r3
 800dbf2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dbf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbfa:	2b07      	cmp	r3, #7
 800dbfc:	dd08      	ble.n	800dc10 <_svfprintf_r+0x100c>
 800dbfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc00:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc02:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc04:	f003 f914 	bl	8010e30 <__ssprint_r>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d000      	beq.n	800dc0e <_svfprintf_r+0x100a>
 800dc0c:	e1d9      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dc0e:	af2f      	add	r7, sp, #188	; 0xbc
 800dc10:	43e3      	mvns	r3, r4
 800dc12:	17db      	asrs	r3, r3, #31
 800dc14:	401c      	ands	r4, r3
 800dc16:	1b2c      	subs	r4, r5, r4
 800dc18:	2c00      	cmp	r4, #0
 800dc1a:	dd18      	ble.n	800dc4e <_svfprintf_r+0x104a>
 800dc1c:	0039      	movs	r1, r7
 800dc1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc20:	483f      	ldr	r0, [pc, #252]	; (800dd20 <_svfprintf_r+0x111c>)
 800dc22:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dc24:	3301      	adds	r3, #1
 800dc26:	3108      	adds	r1, #8
 800dc28:	6038      	str	r0, [r7, #0]
 800dc2a:	2c10      	cmp	r4, #16
 800dc2c:	dc7a      	bgt.n	800dd24 <_svfprintf_r+0x1120>
 800dc2e:	607c      	str	r4, [r7, #4]
 800dc30:	18a4      	adds	r4, r4, r2
 800dc32:	000f      	movs	r7, r1
 800dc34:	942e      	str	r4, [sp, #184]	; 0xb8
 800dc36:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc38:	2b07      	cmp	r3, #7
 800dc3a:	dd08      	ble.n	800dc4e <_svfprintf_r+0x104a>
 800dc3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc40:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc42:	f003 f8f5 	bl	8010e30 <__ssprint_r>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d000      	beq.n	800dc4c <_svfprintf_r+0x1048>
 800dc4a:	e1ba      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dc4c:	af2f      	add	r7, sp, #188	; 0xbc
 800dc4e:	9b08      	ldr	r3, [sp, #32]
 800dc50:	195d      	adds	r5, r3, r5
 800dc52:	0573      	lsls	r3, r6, #21
 800dc54:	d50b      	bpl.n	800dc6e <_svfprintf_r+0x106a>
 800dc56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d176      	bne.n	800dd4a <_svfprintf_r+0x1146>
 800dc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d176      	bne.n	800dd50 <_svfprintf_r+0x114c>
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc66:	189b      	adds	r3, r3, r2
 800dc68:	429d      	cmp	r5, r3
 800dc6a:	d900      	bls.n	800dc6e <_svfprintf_r+0x106a>
 800dc6c:	001d      	movs	r5, r3
 800dc6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc72:	4293      	cmp	r3, r2
 800dc74:	db01      	blt.n	800dc7a <_svfprintf_r+0x1076>
 800dc76:	07f3      	lsls	r3, r6, #31
 800dc78:	d516      	bpl.n	800dca8 <_svfprintf_r+0x10a4>
 800dc7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dc7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc7e:	603b      	str	r3, [r7, #0]
 800dc80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc82:	607b      	str	r3, [r7, #4]
 800dc84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc86:	3708      	adds	r7, #8
 800dc88:	189b      	adds	r3, r3, r2
 800dc8a:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc8e:	3301      	adds	r3, #1
 800dc90:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc92:	2b07      	cmp	r3, #7
 800dc94:	dd08      	ble.n	800dca8 <_svfprintf_r+0x10a4>
 800dc96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc98:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc9a:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc9c:	f003 f8c8 	bl	8010e30 <__ssprint_r>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d000      	beq.n	800dca6 <_svfprintf_r+0x10a2>
 800dca4:	e18d      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dca6:	af2f      	add	r7, sp, #188	; 0xbc
 800dca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcaa:	9b08      	ldr	r3, [sp, #32]
 800dcac:	4694      	mov	ip, r2
 800dcae:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dcb0:	4463      	add	r3, ip
 800dcb2:	1b5b      	subs	r3, r3, r5
 800dcb4:	1b14      	subs	r4, r2, r4
 800dcb6:	429c      	cmp	r4, r3
 800dcb8:	dd00      	ble.n	800dcbc <_svfprintf_r+0x10b8>
 800dcba:	001c      	movs	r4, r3
 800dcbc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dcbe:	2c00      	cmp	r4, #0
 800dcc0:	dd12      	ble.n	800dce8 <_svfprintf_r+0x10e4>
 800dcc2:	18e3      	adds	r3, r4, r3
 800dcc4:	932e      	str	r3, [sp, #184]	; 0xb8
 800dcc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcc8:	603d      	str	r5, [r7, #0]
 800dcca:	3301      	adds	r3, #1
 800dccc:	607c      	str	r4, [r7, #4]
 800dcce:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	2b07      	cmp	r3, #7
 800dcd4:	dd08      	ble.n	800dce8 <_svfprintf_r+0x10e4>
 800dcd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcda:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcdc:	f003 f8a8 	bl	8010e30 <__ssprint_r>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d000      	beq.n	800dce6 <_svfprintf_r+0x10e2>
 800dce4:	e16d      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dce6:	af2f      	add	r7, sp, #188	; 0xbc
 800dce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dcec:	2510      	movs	r5, #16
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	43e2      	mvns	r2, r4
 800dcf2:	17d2      	asrs	r2, r2, #31
 800dcf4:	4014      	ands	r4, r2
 800dcf6:	1b1c      	subs	r4, r3, r4
 800dcf8:	2c00      	cmp	r4, #0
 800dcfa:	dc00      	bgt.n	800dcfe <_svfprintf_r+0x10fa>
 800dcfc:	e6b0      	b.n	800da60 <_svfprintf_r+0xe5c>
 800dcfe:	0039      	movs	r1, r7
 800dd00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd02:	4807      	ldr	r0, [pc, #28]	; (800dd20 <_svfprintf_r+0x111c>)
 800dd04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd06:	3301      	adds	r3, #1
 800dd08:	3108      	adds	r1, #8
 800dd0a:	6038      	str	r0, [r7, #0]
 800dd0c:	2c10      	cmp	r4, #16
 800dd0e:	dd00      	ble.n	800dd12 <_svfprintf_r+0x110e>
 800dd10:	e096      	b.n	800de40 <_svfprintf_r+0x123c>
 800dd12:	1912      	adds	r2, r2, r4
 800dd14:	607c      	str	r4, [r7, #4]
 800dd16:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd18:	e6dd      	b.n	800dad6 <_svfprintf_r+0xed2>
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	080141b6 	.word	0x080141b6
 800dd20:	080141c8 	.word	0x080141c8
 800dd24:	2010      	movs	r0, #16
 800dd26:	1812      	adds	r2, r2, r0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd2e:	2b07      	cmp	r3, #7
 800dd30:	dd08      	ble.n	800dd44 <_svfprintf_r+0x1140>
 800dd32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd36:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd38:	f003 f87a 	bl	8010e30 <__ssprint_r>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d000      	beq.n	800dd42 <_svfprintf_r+0x113e>
 800dd40:	e13f      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dd42:	a92f      	add	r1, sp, #188	; 0xbc
 800dd44:	000f      	movs	r7, r1
 800dd46:	3c10      	subs	r4, #16
 800dd48:	e768      	b.n	800dc1c <_svfprintf_r+0x1018>
 800dd4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d05d      	beq.n	800de0c <_svfprintf_r+0x1208>
 800dd50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd52:	3b01      	subs	r3, #1
 800dd54:	9310      	str	r3, [sp, #64]	; 0x40
 800dd56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd5e:	607b      	str	r3, [r7, #4]
 800dd60:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd62:	3708      	adds	r7, #8
 800dd64:	189b      	adds	r3, r3, r2
 800dd66:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd6e:	2b07      	cmp	r3, #7
 800dd70:	dd08      	ble.n	800dd84 <_svfprintf_r+0x1180>
 800dd72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd76:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd78:	f003 f85a 	bl	8010e30 <__ssprint_r>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d000      	beq.n	800dd82 <_svfprintf_r+0x117e>
 800dd80:	e11f      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800dd82:	af2f      	add	r7, sp, #188	; 0xbc
 800dd84:	9b08      	ldr	r3, [sp, #32]
 800dd86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd88:	189c      	adds	r4, r3, r2
 800dd8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd8c:	1b64      	subs	r4, r4, r5
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	429c      	cmp	r4, r3
 800dd92:	dd00      	ble.n	800dd96 <_svfprintf_r+0x1192>
 800dd94:	001c      	movs	r4, r3
 800dd96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd98:	2c00      	cmp	r4, #0
 800dd9a:	dd12      	ble.n	800ddc2 <_svfprintf_r+0x11be>
 800dd9c:	18e3      	adds	r3, r4, r3
 800dd9e:	932e      	str	r3, [sp, #184]	; 0xb8
 800dda0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dda2:	603d      	str	r5, [r7, #0]
 800dda4:	3301      	adds	r3, #1
 800dda6:	607c      	str	r4, [r7, #4]
 800dda8:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddaa:	3708      	adds	r7, #8
 800ddac:	2b07      	cmp	r3, #7
 800ddae:	dd08      	ble.n	800ddc2 <_svfprintf_r+0x11be>
 800ddb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddb4:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddb6:	f003 f83b 	bl	8010e30 <__ssprint_r>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d000      	beq.n	800ddc0 <_svfprintf_r+0x11bc>
 800ddbe:	e100      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800ddc0:	af2f      	add	r7, sp, #188	; 0xbc
 800ddc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddc4:	781a      	ldrb	r2, [r3, #0]
 800ddc6:	43e3      	mvns	r3, r4
 800ddc8:	17db      	asrs	r3, r3, #31
 800ddca:	401c      	ands	r4, r3
 800ddcc:	1b14      	subs	r4, r2, r4
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	dd18      	ble.n	800de04 <_svfprintf_r+0x1200>
 800ddd2:	0039      	movs	r1, r7
 800ddd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddd6:	48aa      	ldr	r0, [pc, #680]	; (800e080 <_svfprintf_r+0x147c>)
 800ddd8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ddda:	3301      	adds	r3, #1
 800dddc:	3108      	adds	r1, #8
 800ddde:	6038      	str	r0, [r7, #0]
 800dde0:	2c10      	cmp	r4, #16
 800dde2:	dc1a      	bgt.n	800de1a <_svfprintf_r+0x1216>
 800dde4:	1912      	adds	r2, r2, r4
 800dde6:	607c      	str	r4, [r7, #4]
 800dde8:	922e      	str	r2, [sp, #184]	; 0xb8
 800ddea:	000f      	movs	r7, r1
 800ddec:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddee:	2b07      	cmp	r3, #7
 800ddf0:	dd08      	ble.n	800de04 <_svfprintf_r+0x1200>
 800ddf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddf6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddf8:	f003 f81a 	bl	8010e30 <__ssprint_r>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d000      	beq.n	800de02 <_svfprintf_r+0x11fe>
 800de00:	e0df      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800de02:	af2f      	add	r7, sp, #188	; 0xbc
 800de04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	18ed      	adds	r5, r5, r3
 800de0a:	e724      	b.n	800dc56 <_svfprintf_r+0x1052>
 800de0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de0e:	3b01      	subs	r3, #1
 800de10:	9312      	str	r3, [sp, #72]	; 0x48
 800de12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de14:	3b01      	subs	r3, #1
 800de16:	9311      	str	r3, [sp, #68]	; 0x44
 800de18:	e79d      	b.n	800dd56 <_svfprintf_r+0x1152>
 800de1a:	2010      	movs	r0, #16
 800de1c:	1812      	adds	r2, r2, r0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	922e      	str	r2, [sp, #184]	; 0xb8
 800de22:	932d      	str	r3, [sp, #180]	; 0xb4
 800de24:	2b07      	cmp	r3, #7
 800de26:	dd08      	ble.n	800de3a <_svfprintf_r+0x1236>
 800de28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de2c:	aa2c      	add	r2, sp, #176	; 0xb0
 800de2e:	f002 ffff 	bl	8010e30 <__ssprint_r>
 800de32:	2800      	cmp	r0, #0
 800de34:	d000      	beq.n	800de38 <_svfprintf_r+0x1234>
 800de36:	e0c4      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800de38:	a92f      	add	r1, sp, #188	; 0xbc
 800de3a:	000f      	movs	r7, r1
 800de3c:	3c10      	subs	r4, #16
 800de3e:	e7c8      	b.n	800ddd2 <_svfprintf_r+0x11ce>
 800de40:	3210      	adds	r2, #16
 800de42:	607d      	str	r5, [r7, #4]
 800de44:	922e      	str	r2, [sp, #184]	; 0xb8
 800de46:	932d      	str	r3, [sp, #180]	; 0xb4
 800de48:	2b07      	cmp	r3, #7
 800de4a:	dd08      	ble.n	800de5e <_svfprintf_r+0x125a>
 800de4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de50:	aa2c      	add	r2, sp, #176	; 0xb0
 800de52:	f002 ffed 	bl	8010e30 <__ssprint_r>
 800de56:	2800      	cmp	r0, #0
 800de58:	d000      	beq.n	800de5c <_svfprintf_r+0x1258>
 800de5a:	e0b2      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800de5c:	a92f      	add	r1, sp, #188	; 0xbc
 800de5e:	000f      	movs	r7, r1
 800de60:	3c10      	subs	r4, #16
 800de62:	e74c      	b.n	800dcfe <_svfprintf_r+0x10fa>
 800de64:	003c      	movs	r4, r7
 800de66:	9919      	ldr	r1, [sp, #100]	; 0x64
 800de68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de6c:	3101      	adds	r1, #1
 800de6e:	3301      	adds	r3, #1
 800de70:	3408      	adds	r4, #8
 800de72:	2a01      	cmp	r2, #1
 800de74:	dc03      	bgt.n	800de7e <_svfprintf_r+0x127a>
 800de76:	2201      	movs	r2, #1
 800de78:	4216      	tst	r6, r2
 800de7a:	d100      	bne.n	800de7e <_svfprintf_r+0x127a>
 800de7c:	e07f      	b.n	800df7e <_svfprintf_r+0x137a>
 800de7e:	9a08      	ldr	r2, [sp, #32]
 800de80:	912e      	str	r1, [sp, #184]	; 0xb8
 800de82:	603a      	str	r2, [r7, #0]
 800de84:	2201      	movs	r2, #1
 800de86:	932d      	str	r3, [sp, #180]	; 0xb4
 800de88:	607a      	str	r2, [r7, #4]
 800de8a:	2b07      	cmp	r3, #7
 800de8c:	dd08      	ble.n	800dea0 <_svfprintf_r+0x129c>
 800de8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de92:	aa2c      	add	r2, sp, #176	; 0xb0
 800de94:	f002 ffcc 	bl	8010e30 <__ssprint_r>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d000      	beq.n	800de9e <_svfprintf_r+0x129a>
 800de9c:	e091      	b.n	800dfc2 <_svfprintf_r+0x13be>
 800de9e:	ac2f      	add	r4, sp, #188	; 0xbc
 800dea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dea2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dea8:	6063      	str	r3, [r4, #4]
 800deaa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800deac:	3408      	adds	r4, #8
 800deae:	189b      	adds	r3, r3, r2
 800deb0:	932e      	str	r3, [sp, #184]	; 0xb8
 800deb2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800deb4:	3301      	adds	r3, #1
 800deb6:	932d      	str	r3, [sp, #180]	; 0xb4
 800deb8:	2b07      	cmp	r3, #7
 800deba:	dd07      	ble.n	800decc <_svfprintf_r+0x12c8>
 800debc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800debe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dec0:	aa2c      	add	r2, sp, #176	; 0xb0
 800dec2:	f002 ffb5 	bl	8010e30 <__ssprint_r>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d17b      	bne.n	800dfc2 <_svfprintf_r+0x13be>
 800deca:	ac2f      	add	r4, sp, #188	; 0xbc
 800decc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dece:	2200      	movs	r2, #0
 800ded0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ded2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ded4:	9309      	str	r3, [sp, #36]	; 0x24
 800ded6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ded8:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800deda:	1e5d      	subs	r5, r3, #1
 800dedc:	2300      	movs	r3, #0
 800dede:	f7f2 fab3 	bl	8000448 <__aeabi_dcmpeq>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d126      	bne.n	800df34 <_svfprintf_r+0x1330>
 800dee6:	9b08      	ldr	r3, [sp, #32]
 800dee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deea:	3301      	adds	r3, #1
 800deec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800deee:	6023      	str	r3, [r4, #0]
 800def0:	1e7b      	subs	r3, r7, #1
 800def2:	3201      	adds	r2, #1
 800def4:	185b      	adds	r3, r3, r1
 800def6:	6065      	str	r5, [r4, #4]
 800def8:	932e      	str	r3, [sp, #184]	; 0xb8
 800defa:	922d      	str	r2, [sp, #180]	; 0xb4
 800defc:	3408      	adds	r4, #8
 800defe:	2a07      	cmp	r2, #7
 800df00:	dd07      	ble.n	800df12 <_svfprintf_r+0x130e>
 800df02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df06:	aa2c      	add	r2, sp, #176	; 0xb0
 800df08:	f002 ff92 	bl	8010e30 <__ssprint_r>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d158      	bne.n	800dfc2 <_svfprintf_r+0x13be>
 800df10:	ac2f      	add	r4, sp, #188	; 0xbc
 800df12:	ab28      	add	r3, sp, #160	; 0xa0
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800df1a:	6063      	str	r3, [r4, #4]
 800df1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df1e:	189b      	adds	r3, r3, r2
 800df20:	932e      	str	r3, [sp, #184]	; 0xb8
 800df22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df24:	3301      	adds	r3, #1
 800df26:	932d      	str	r3, [sp, #180]	; 0xb4
 800df28:	2b07      	cmp	r3, #7
 800df2a:	dd00      	ble.n	800df2e <_svfprintf_r+0x132a>
 800df2c:	e638      	b.n	800dba0 <_svfprintf_r+0xf9c>
 800df2e:	3408      	adds	r4, #8
 800df30:	0027      	movs	r7, r4
 800df32:	e595      	b.n	800da60 <_svfprintf_r+0xe5c>
 800df34:	2710      	movs	r7, #16
 800df36:	2d00      	cmp	r5, #0
 800df38:	ddeb      	ble.n	800df12 <_svfprintf_r+0x130e>
 800df3a:	0021      	movs	r1, r4
 800df3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df3e:	4850      	ldr	r0, [pc, #320]	; (800e080 <_svfprintf_r+0x147c>)
 800df40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df42:	3301      	adds	r3, #1
 800df44:	3108      	adds	r1, #8
 800df46:	6020      	str	r0, [r4, #0]
 800df48:	2d10      	cmp	r5, #16
 800df4a:	dc07      	bgt.n	800df5c <_svfprintf_r+0x1358>
 800df4c:	6065      	str	r5, [r4, #4]
 800df4e:	000c      	movs	r4, r1
 800df50:	18ad      	adds	r5, r5, r2
 800df52:	952e      	str	r5, [sp, #184]	; 0xb8
 800df54:	932d      	str	r3, [sp, #180]	; 0xb4
 800df56:	2b07      	cmp	r3, #7
 800df58:	dddb      	ble.n	800df12 <_svfprintf_r+0x130e>
 800df5a:	e7d2      	b.n	800df02 <_svfprintf_r+0x12fe>
 800df5c:	3210      	adds	r2, #16
 800df5e:	6067      	str	r7, [r4, #4]
 800df60:	922e      	str	r2, [sp, #184]	; 0xb8
 800df62:	932d      	str	r3, [sp, #180]	; 0xb4
 800df64:	2b07      	cmp	r3, #7
 800df66:	dd07      	ble.n	800df78 <_svfprintf_r+0x1374>
 800df68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df6c:	aa2c      	add	r2, sp, #176	; 0xb0
 800df6e:	f002 ff5f 	bl	8010e30 <__ssprint_r>
 800df72:	2800      	cmp	r0, #0
 800df74:	d125      	bne.n	800dfc2 <_svfprintf_r+0x13be>
 800df76:	a92f      	add	r1, sp, #188	; 0xbc
 800df78:	000c      	movs	r4, r1
 800df7a:	3d10      	subs	r5, #16
 800df7c:	e7dd      	b.n	800df3a <_svfprintf_r+0x1336>
 800df7e:	9808      	ldr	r0, [sp, #32]
 800df80:	912e      	str	r1, [sp, #184]	; 0xb8
 800df82:	c705      	stmia	r7!, {r0, r2}
 800df84:	932d      	str	r3, [sp, #180]	; 0xb4
 800df86:	e7e6      	b.n	800df56 <_svfprintf_r+0x1352>
 800df88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df8c:	2510      	movs	r5, #16
 800df8e:	1a9c      	subs	r4, r3, r2
 800df90:	2c00      	cmp	r4, #0
 800df92:	dc00      	bgt.n	800df96 <_svfprintf_r+0x1392>
 800df94:	e567      	b.n	800da66 <_svfprintf_r+0xe62>
 800df96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df98:	493a      	ldr	r1, [pc, #232]	; (800e084 <_svfprintf_r+0x1480>)
 800df9a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df9c:	3301      	adds	r3, #1
 800df9e:	6039      	str	r1, [r7, #0]
 800dfa0:	2c10      	cmp	r4, #16
 800dfa2:	dc19      	bgt.n	800dfd8 <_svfprintf_r+0x13d4>
 800dfa4:	607c      	str	r4, [r7, #4]
 800dfa6:	18a4      	adds	r4, r4, r2
 800dfa8:	942e      	str	r4, [sp, #184]	; 0xb8
 800dfaa:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfac:	2b07      	cmp	r3, #7
 800dfae:	dc00      	bgt.n	800dfb2 <_svfprintf_r+0x13ae>
 800dfb0:	e559      	b.n	800da66 <_svfprintf_r+0xe62>
 800dfb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfb8:	f002 ff3a 	bl	8010e30 <__ssprint_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d100      	bne.n	800dfc2 <_svfprintf_r+0x13be>
 800dfc0:	e551      	b.n	800da66 <_svfprintf_r+0xe62>
 800dfc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <_svfprintf_r+0x13c8>
 800dfc8:	f7ff f845 	bl	800d056 <_svfprintf_r+0x452>
 800dfcc:	0019      	movs	r1, r3
 800dfce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfd0:	f7fd fd80 	bl	800bad4 <_free_r>
 800dfd4:	f7ff f83f 	bl	800d056 <_svfprintf_r+0x452>
 800dfd8:	3210      	adds	r2, #16
 800dfda:	607d      	str	r5, [r7, #4]
 800dfdc:	922e      	str	r2, [sp, #184]	; 0xb8
 800dfde:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	2b07      	cmp	r3, #7
 800dfe4:	dd07      	ble.n	800dff6 <_svfprintf_r+0x13f2>
 800dfe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfe8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfea:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfec:	f002 ff20 	bl	8010e30 <__ssprint_r>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d1e6      	bne.n	800dfc2 <_svfprintf_r+0x13be>
 800dff4:	af2f      	add	r7, sp, #188	; 0xbc
 800dff6:	3c10      	subs	r4, #16
 800dff8:	e7cd      	b.n	800df96 <_svfprintf_r+0x1392>
 800dffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dffc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dffe:	f7fd fd69 	bl	800bad4 <_free_r>
 800e002:	e549      	b.n	800da98 <_svfprintf_r+0xe94>
 800e004:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <_svfprintf_r+0x140a>
 800e00a:	f7ff f824 	bl	800d056 <_svfprintf_r+0x452>
 800e00e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e010:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e012:	aa2c      	add	r2, sp, #176	; 0xb0
 800e014:	f002 ff0c 	bl	8010e30 <__ssprint_r>
 800e018:	f7ff f81d 	bl	800d056 <_svfprintf_r+0x452>
 800e01c:	0034      	movs	r4, r6
 800e01e:	2a00      	cmp	r2, #0
 800e020:	d101      	bne.n	800e026 <_svfprintf_r+0x1422>
 800e022:	f7fe ff8c 	bl	800cf3e <_svfprintf_r+0x33a>
 800e026:	2b01      	cmp	r3, #1
 800e028:	d101      	bne.n	800e02e <_svfprintf_r+0x142a>
 800e02a:	f7ff fc01 	bl	800d830 <_svfprintf_r+0xc2c>
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d100      	bne.n	800e034 <_svfprintf_r+0x1430>
 800e032:	e459      	b.n	800d8e8 <_svfprintf_r+0xce4>
 800e034:	2507      	movs	r5, #7
 800e036:	ab58      	add	r3, sp, #352	; 0x160
 800e038:	9308      	str	r3, [sp, #32]
 800e03a:	9a08      	ldr	r2, [sp, #32]
 800e03c:	0013      	movs	r3, r2
 800e03e:	3b01      	subs	r3, #1
 800e040:	9308      	str	r3, [sp, #32]
 800e042:	9b06      	ldr	r3, [sp, #24]
 800e044:	9908      	ldr	r1, [sp, #32]
 800e046:	402b      	ands	r3, r5
 800e048:	3330      	adds	r3, #48	; 0x30
 800e04a:	700b      	strb	r3, [r1, #0]
 800e04c:	9907      	ldr	r1, [sp, #28]
 800e04e:	074e      	lsls	r6, r1, #29
 800e050:	9906      	ldr	r1, [sp, #24]
 800e052:	08c8      	lsrs	r0, r1, #3
 800e054:	9907      	ldr	r1, [sp, #28]
 800e056:	4306      	orrs	r6, r0
 800e058:	08c9      	lsrs	r1, r1, #3
 800e05a:	9107      	str	r1, [sp, #28]
 800e05c:	0031      	movs	r1, r6
 800e05e:	9807      	ldr	r0, [sp, #28]
 800e060:	9606      	str	r6, [sp, #24]
 800e062:	4301      	orrs	r1, r0
 800e064:	d1e9      	bne.n	800e03a <_svfprintf_r+0x1436>
 800e066:	07e1      	lsls	r1, r4, #31
 800e068:	d400      	bmi.n	800e06c <_svfprintf_r+0x1468>
 800e06a:	e42a      	b.n	800d8c2 <_svfprintf_r+0xcbe>
 800e06c:	2b30      	cmp	r3, #48	; 0x30
 800e06e:	d100      	bne.n	800e072 <_svfprintf_r+0x146e>
 800e070:	e427      	b.n	800d8c2 <_svfprintf_r+0xcbe>
 800e072:	2130      	movs	r1, #48	; 0x30
 800e074:	9b08      	ldr	r3, [sp, #32]
 800e076:	3b01      	subs	r3, #1
 800e078:	7019      	strb	r1, [r3, #0]
 800e07a:	1e93      	subs	r3, r2, #2
 800e07c:	9308      	str	r3, [sp, #32]
 800e07e:	e420      	b.n	800d8c2 <_svfprintf_r+0xcbe>
 800e080:	080141c8 	.word	0x080141c8
 800e084:	080141b8 	.word	0x080141b8

0800e088 <__ssvfscanf_r>:
 800e088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08a:	4ca7      	ldr	r4, [pc, #668]	; (800e328 <__ssvfscanf_r+0x2a0>)
 800e08c:	44a5      	add	sp, r4
 800e08e:	af02      	add	r7, sp, #8
 800e090:	633b      	str	r3, [r7, #48]	; 0x30
 800e092:	000b      	movs	r3, r1
 800e094:	6378      	str	r0, [r7, #52]	; 0x34
 800e096:	6479      	str	r1, [r7, #68]	; 0x44
 800e098:	61ba      	str	r2, [r7, #24]
 800e09a:	220c      	movs	r2, #12
 800e09c:	5e9a      	ldrsh	r2, [r3, r2]
 800e09e:	2380      	movs	r3, #128	; 0x80
 800e0a0:	019b      	lsls	r3, r3, #6
 800e0a2:	421a      	tst	r2, r3
 800e0a4:	d105      	bne.n	800e0b2 <__ssvfscanf_r+0x2a>
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	818b      	strh	r3, [r1, #12]
 800e0aa:	4aa0      	ldr	r2, [pc, #640]	; (800e32c <__ssvfscanf_r+0x2a4>)
 800e0ac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e0ae:	4013      	ands	r3, r2
 800e0b0:	664b      	str	r3, [r1, #100]	; 0x64
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	617b      	str	r3, [r7, #20]
 800e0b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e0bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	3201      	adds	r2, #1
 800e0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0ca:	61ba      	str	r2, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d100      	bne.n	800e0d2 <__ssvfscanf_r+0x4a>
 800e0d0:	e0d7      	b.n	800e282 <__ssvfscanf_r+0x1fa>
 800e0d2:	2608      	movs	r6, #8
 800e0d4:	2108      	movs	r1, #8
 800e0d6:	4a96      	ldr	r2, [pc, #600]	; (800e330 <__ssvfscanf_r+0x2a8>)
 800e0d8:	5cd2      	ldrb	r2, [r2, r3]
 800e0da:	4016      	ands	r6, r2
 800e0dc:	420a      	tst	r2, r1
 800e0de:	d01d      	beq.n	800e11c <__ssvfscanf_r+0x94>
 800e0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	dd12      	ble.n	800e10e <__ssvfscanf_r+0x86>
 800e0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ea:	4991      	ldr	r1, [pc, #580]	; (800e330 <__ssvfscanf_r+0x2a8>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	5c8a      	ldrb	r2, [r1, r2]
 800e0f2:	2108      	movs	r1, #8
 800e0f4:	420a      	tst	r2, r1
 800e0f6:	d0e3      	beq.n	800e0c0 <__ssvfscanf_r+0x38>
 800e0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0fc:	3201      	adds	r2, #1
 800e0fe:	63ba      	str	r2, [r7, #56]	; 0x38
 800e100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e102:	3301      	adds	r3, #1
 800e104:	6852      	ldr	r2, [r2, #4]
 800e106:	600b      	str	r3, [r1, #0]
 800e108:	3a01      	subs	r2, #1
 800e10a:	604a      	str	r2, [r1, #4]
 800e10c:	e7e8      	b.n	800e0e0 <__ssvfscanf_r+0x58>
 800e10e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e110:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e112:	f002 ff4d 	bl	8010fb0 <__ssrefill_r>
 800e116:	2800      	cmp	r0, #0
 800e118:	d0e6      	beq.n	800e0e8 <__ssvfscanf_r+0x60>
 800e11a:	e7d1      	b.n	800e0c0 <__ssvfscanf_r+0x38>
 800e11c:	2b25      	cmp	r3, #37	; 0x25
 800e11e:	d165      	bne.n	800e1ec <__ssvfscanf_r+0x164>
 800e120:	250a      	movs	r5, #10
 800e122:	2480      	movs	r4, #128	; 0x80
 800e124:	69ba      	ldr	r2, [r7, #24]
 800e126:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e128:	3b16      	subs	r3, #22
 800e12a:	69b9      	ldr	r1, [r7, #24]
 800e12c:	3101      	adds	r1, #1
 800e12e:	61b9      	str	r1, [r7, #24]
 800e130:	7811      	ldrb	r1, [r2, #0]
 800e132:	0008      	movs	r0, r1
 800e134:	3825      	subs	r0, #37	; 0x25
 800e136:	2855      	cmp	r0, #85	; 0x55
 800e138:	d900      	bls.n	800e13c <__ssvfscanf_r+0xb4>
 800e13a:	e170      	b.n	800e41e <__ssvfscanf_r+0x396>
 800e13c:	f7f1 fff4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e140:	016f0056 	.word	0x016f0056
 800e144:	016f016f 	.word	0x016f016f
 800e148:	0081016f 	.word	0x0081016f
 800e14c:	016f016f 	.word	0x016f016f
 800e150:	016f016f 	.word	0x016f016f
 800e154:	00b8016f 	.word	0x00b8016f
 800e158:	00b800b8 	.word	0x00b800b8
 800e15c:	00b800b8 	.word	0x00b800b8
 800e160:	00b800b8 	.word	0x00b800b8
 800e164:	00b800b8 	.word	0x00b800b8
 800e168:	016f00b8 	.word	0x016f00b8
 800e16c:	016f016f 	.word	0x016f016f
 800e170:	016f016f 	.word	0x016f016f
 800e174:	016f016f 	.word	0x016f016f
 800e178:	016f00d8 	.word	0x016f00d8
 800e17c:	00c1010a 	.word	0x00c1010a
 800e180:	00d800d8 	.word	0x00d800d8
 800e184:	016f00d8 	.word	0x016f00d8
 800e188:	016f016f 	.word	0x016f016f
 800e18c:	009f016f 	.word	0x009f016f
 800e190:	016f016f 	.word	0x016f016f
 800e194:	016f00c9 	.word	0x016f00c9
 800e198:	016f016f 	.word	0x016f016f
 800e19c:	016f00f0 	.word	0x016f00f0
 800e1a0:	016f016f 	.word	0x016f016f
 800e1a4:	00d1016f 	.word	0x00d1016f
 800e1a8:	016f016f 	.word	0x016f016f
 800e1ac:	016f00fe 	.word	0x016f00fe
 800e1b0:	016f016f 	.word	0x016f016f
 800e1b4:	016f016f 	.word	0x016f016f
 800e1b8:	016f00d8 	.word	0x016f00d8
 800e1bc:	00c3010c 	.word	0x00c3010c
 800e1c0:	00d800d8 	.word	0x00d800d8
 800e1c4:	009400d8 	.word	0x009400d8
 800e1c8:	009f012f 	.word	0x009f012f
 800e1cc:	0088016f 	.word	0x0088016f
 800e1d0:	011200a9 	.word	0x011200a9
 800e1d4:	011000cb 	.word	0x011000cb
 800e1d8:	016f016f 	.word	0x016f016f
 800e1dc:	00a600f2 	.word	0x00a600f2
 800e1e0:	016f00cf 	.word	0x016f00cf
 800e1e4:	00d1016f 	.word	0x00d1016f
 800e1e8:	00a6016f 	.word	0x00a6016f
 800e1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd12      	ble.n	800e21a <__ssvfscanf_r+0x192>
 800e1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f6:	69ba      	ldr	r2, [r7, #24]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3a01      	subs	r2, #1
 800e1fc:	7819      	ldrb	r1, [r3, #0]
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	4291      	cmp	r1, r2
 800e202:	d13e      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e208:	6852      	ldr	r2, [r2, #4]
 800e20a:	3301      	adds	r3, #1
 800e20c:	600b      	str	r3, [r1, #0]
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	3a01      	subs	r2, #1
 800e212:	604a      	str	r2, [r1, #4]
 800e214:	3301      	adds	r3, #1
 800e216:	63bb      	str	r3, [r7, #56]	; 0x38
 800e218:	e752      	b.n	800e0c0 <__ssvfscanf_r+0x38>
 800e21a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e21c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e21e:	f002 fec7 	bl	8010fb0 <__ssrefill_r>
 800e222:	2800      	cmp	r0, #0
 800e224:	d0e6      	beq.n	800e1f4 <__ssvfscanf_r+0x16c>
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <__ssvfscanf_r+0x1ac>
 800e22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e22e:	899b      	ldrh	r3, [r3, #12]
 800e230:	065b      	lsls	r3, r3, #25
 800e232:	d526      	bpl.n	800e282 <__ssvfscanf_r+0x1fa>
 800e234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e236:	2b00      	cmp	r3, #0
 800e238:	d000      	beq.n	800e23c <__ssvfscanf_r+0x1b4>
 800e23a:	e0f6      	b.n	800e42a <__ssvfscanf_r+0x3a2>
 800e23c:	3b01      	subs	r3, #1
 800e23e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e240:	e104      	b.n	800e44c <__ssvfscanf_r+0x3c4>
 800e242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e244:	4332      	orrs	r2, r6
 800e246:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e248:	d11b      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e24a:	2610      	movs	r6, #16
 800e24c:	69ba      	ldr	r2, [r7, #24]
 800e24e:	e76c      	b.n	800e12a <__ssvfscanf_r+0xa2>
 800e250:	421e      	tst	r6, r3
 800e252:	d116      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e254:	7851      	ldrb	r1, [r2, #1]
 800e256:	296c      	cmp	r1, #108	; 0x6c
 800e258:	d103      	bne.n	800e262 <__ssvfscanf_r+0x1da>
 800e25a:	3202      	adds	r2, #2
 800e25c:	61ba      	str	r2, [r7, #24]
 800e25e:	2202      	movs	r2, #2
 800e260:	e000      	b.n	800e264 <__ssvfscanf_r+0x1dc>
 800e262:	2201      	movs	r2, #1
 800e264:	4316      	orrs	r6, r2
 800e266:	e7f1      	b.n	800e24c <__ssvfscanf_r+0x1c4>
 800e268:	421e      	tst	r6, r3
 800e26a:	d10a      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e26c:	7851      	ldrb	r1, [r2, #1]
 800e26e:	2968      	cmp	r1, #104	; 0x68
 800e270:	d103      	bne.n	800e27a <__ssvfscanf_r+0x1f2>
 800e272:	3202      	adds	r2, #2
 800e274:	61ba      	str	r2, [r7, #24]
 800e276:	2208      	movs	r2, #8
 800e278:	e7f4      	b.n	800e264 <__ssvfscanf_r+0x1dc>
 800e27a:	2204      	movs	r2, #4
 800e27c:	e7f2      	b.n	800e264 <__ssvfscanf_r+0x1dc>
 800e27e:	421e      	tst	r6, r3
 800e280:	d0ed      	beq.n	800e25e <__ssvfscanf_r+0x1d6>
 800e282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e284:	2b00      	cmp	r3, #0
 800e286:	d000      	beq.n	800e28a <__ssvfscanf_r+0x202>
 800e288:	e0da      	b.n	800e440 <__ssvfscanf_r+0x3b8>
 800e28a:	e0df      	b.n	800e44c <__ssvfscanf_r+0x3c4>
 800e28c:	421e      	tst	r6, r3
 800e28e:	d0dd      	beq.n	800e24c <__ssvfscanf_r+0x1c4>
 800e290:	e7f7      	b.n	800e282 <__ssvfscanf_r+0x1fa>
 800e292:	228f      	movs	r2, #143	; 0x8f
 800e294:	218f      	movs	r1, #143	; 0x8f
 800e296:	4032      	ands	r2, r6
 800e298:	420e      	tst	r6, r1
 800e29a:	d1f2      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e29c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	d104      	bne.n	800e2ac <__ssvfscanf_r+0x224>
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	a902      	add	r1, sp, #8
 800e2a6:	6439      	str	r1, [r7, #64]	; 0x40
 800e2a8:	600a      	str	r2, [r1, #0]
 800e2aa:	604a      	str	r2, [r1, #4]
 800e2ac:	4326      	orrs	r6, r4
 800e2ae:	e7cd      	b.n	800e24c <__ssvfscanf_r+0x1c4>
 800e2b0:	228f      	movs	r2, #143	; 0x8f
 800e2b2:	4216      	tst	r6, r2
 800e2b4:	d1e5      	bne.n	800e282 <__ssvfscanf_r+0x1fa>
 800e2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2b8:	436a      	muls	r2, r5
 800e2ba:	3a30      	subs	r2, #48	; 0x30
 800e2bc:	188a      	adds	r2, r1, r2
 800e2be:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e2c0:	e7c4      	b.n	800e24c <__ssvfscanf_r+0x1c4>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	431e      	orrs	r6, r3
 800e2c6:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <__ssvfscanf_r+0x2ac>)
 800e2c8:	617b      	str	r3, [r7, #20]
 800e2ca:	230a      	movs	r3, #10
 800e2cc:	2403      	movs	r4, #3
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e2d0:	e00f      	b.n	800e2f2 <__ssvfscanf_r+0x26a>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	431e      	orrs	r6, r3
 800e2d6:	4b18      	ldr	r3, [pc, #96]	; (800e338 <__ssvfscanf_r+0x2b0>)
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	2308      	movs	r3, #8
 800e2dc:	e7f6      	b.n	800e2cc <__ssvfscanf_r+0x244>
 800e2de:	4b16      	ldr	r3, [pc, #88]	; (800e338 <__ssvfscanf_r+0x2b0>)
 800e2e0:	e7f2      	b.n	800e2c8 <__ssvfscanf_r+0x240>
 800e2e2:	2380      	movs	r3, #128	; 0x80
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	431e      	orrs	r6, r3
 800e2e8:	4b13      	ldr	r3, [pc, #76]	; (800e338 <__ssvfscanf_r+0x2b0>)
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	e7ed      	b.n	800e2cc <__ssvfscanf_r+0x244>
 800e2f0:	2404      	movs	r4, #4
 800e2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	dd55      	ble.n	800e3a6 <__ssvfscanf_r+0x31e>
 800e2fa:	0673      	lsls	r3, r6, #25
 800e2fc:	d407      	bmi.n	800e30e <__ssvfscanf_r+0x286>
 800e2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e300:	490b      	ldr	r1, [pc, #44]	; (800e330 <__ssvfscanf_r+0x2a8>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	5c8a      	ldrb	r2, [r1, r2]
 800e308:	2108      	movs	r1, #8
 800e30a:	420a      	tst	r2, r1
 800e30c:	d152      	bne.n	800e3b4 <__ssvfscanf_r+0x32c>
 800e30e:	1e60      	subs	r0, r4, #1
 800e310:	2803      	cmp	r0, #3
 800e312:	d863      	bhi.n	800e3dc <__ssvfscanf_r+0x354>
 800e314:	f7f1 ff08 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e318:	03bd01da 	.word	0x03bd01da
 800e31c:	068a0579 	.word	0x068a0579
 800e320:	2301      	movs	r3, #1
 800e322:	431e      	orrs	r6, r3
 800e324:	2402      	movs	r4, #2
 800e326:	e7e4      	b.n	800e2f2 <__ssvfscanf_r+0x26a>
 800e328:	fffffd34 	.word	0xfffffd34
 800e32c:	ffffdfff 	.word	0xffffdfff
 800e330:	08013eb1 	.word	0x08013eb1
 800e334:	0800b4d9 	.word	0x0800b4d9
 800e338:	08010ae1 	.word	0x08010ae1
 800e33c:	2248      	movs	r2, #72	; 0x48
 800e33e:	2318      	movs	r3, #24
 800e340:	189b      	adds	r3, r3, r2
 800e342:	19d8      	adds	r0, r3, r7
 800e344:	69b9      	ldr	r1, [r7, #24]
 800e346:	f001 f9d7 	bl	800f6f8 <__sccl>
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	2401      	movs	r4, #1
 800e34e:	61b8      	str	r0, [r7, #24]
 800e350:	431e      	orrs	r6, r3
 800e352:	e7ce      	b.n	800e2f2 <__ssvfscanf_r+0x26a>
 800e354:	2301      	movs	r3, #1
 800e356:	431e      	orrs	r6, r3
 800e358:	2340      	movs	r3, #64	; 0x40
 800e35a:	2400      	movs	r4, #0
 800e35c:	431e      	orrs	r6, r3
 800e35e:	e7c8      	b.n	800e2f2 <__ssvfscanf_r+0x26a>
 800e360:	2388      	movs	r3, #136	; 0x88
 800e362:	e7bf      	b.n	800e2e4 <__ssvfscanf_r+0x25c>
 800e364:	06f3      	lsls	r3, r6, #27
 800e366:	d500      	bpl.n	800e36a <__ssvfscanf_r+0x2e2>
 800e368:	e6aa      	b.n	800e0c0 <__ssvfscanf_r+0x38>
 800e36a:	2108      	movs	r1, #8
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	cb04      	ldmia	r3!, {r2}
 800e370:	420e      	tst	r6, r1
 800e372:	d003      	beq.n	800e37c <__ssvfscanf_r+0x2f4>
 800e374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e376:	7011      	strb	r1, [r2, #0]
 800e378:	633b      	str	r3, [r7, #48]	; 0x30
 800e37a:	e6a1      	b.n	800e0c0 <__ssvfscanf_r+0x38>
 800e37c:	0771      	lsls	r1, r6, #29
 800e37e:	d502      	bpl.n	800e386 <__ssvfscanf_r+0x2fe>
 800e380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e382:	8011      	strh	r1, [r2, #0]
 800e384:	e7f8      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800e386:	07f1      	lsls	r1, r6, #31
 800e388:	d502      	bpl.n	800e390 <__ssvfscanf_r+0x308>
 800e38a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e38c:	6011      	str	r1, [r2, #0]
 800e38e:	e7f3      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800e390:	07b6      	lsls	r6, r6, #30
 800e392:	d5fa      	bpl.n	800e38a <__ssvfscanf_r+0x302>
 800e394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e396:	6011      	str	r1, [r2, #0]
 800e398:	17c9      	asrs	r1, r1, #31
 800e39a:	6051      	str	r1, [r2, #4]
 800e39c:	e7ec      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800e39e:	4ba2      	ldr	r3, [pc, #648]	; (800e628 <__ssvfscanf_r+0x5a0>)
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	e792      	b.n	800e2cc <__ssvfscanf_r+0x244>
 800e3a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3aa:	f002 fe01 	bl	8010fb0 <__ssrefill_r>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d0a3      	beq.n	800e2fa <__ssvfscanf_r+0x272>
 800e3b2:	e738      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3b8:	3201      	adds	r2, #1
 800e3ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800e3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3be:	6852      	ldr	r2, [r2, #4]
 800e3c0:	3a01      	subs	r2, #1
 800e3c2:	604a      	str	r2, [r1, #4]
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	dd02      	ble.n	800e3ce <__ssvfscanf_r+0x346>
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	600b      	str	r3, [r1, #0]
 800e3cc:	e797      	b.n	800e2fe <__ssvfscanf_r+0x276>
 800e3ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3d2:	f002 fded 	bl	8010fb0 <__ssrefill_r>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d091      	beq.n	800e2fe <__ssvfscanf_r+0x276>
 800e3da:	e724      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e3dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3de:	2301      	movs	r3, #1
 800e3e0:	2a00      	cmp	r2, #0
 800e3e2:	d100      	bne.n	800e3e6 <__ssvfscanf_r+0x35e>
 800e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3e6:	2210      	movs	r2, #16
 800e3e8:	0034      	movs	r4, r6
 800e3ea:	4032      	ands	r2, r6
 800e3ec:	623a      	str	r2, [r7, #32]
 800e3ee:	401c      	ands	r4, r3
 800e3f0:	421e      	tst	r6, r3
 800e3f2:	d100      	bne.n	800e3f6 <__ssvfscanf_r+0x36e>
 800e3f4:	e0f3      	b.n	800e5de <__ssvfscanf_r+0x556>
 800e3f6:	2a00      	cmp	r2, #0
 800e3f8:	d000      	beq.n	800e3fc <__ssvfscanf_r+0x374>
 800e3fa:	e0b6      	b.n	800e56a <__ssvfscanf_r+0x4e2>
 800e3fc:	2080      	movs	r0, #128	; 0x80
 800e3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e400:	cb10      	ldmia	r3!, {r4}
 800e402:	613b      	str	r3, [r7, #16]
 800e404:	4206      	tst	r6, r0
 800e406:	d100      	bne.n	800e40a <__ssvfscanf_r+0x382>
 800e408:	e0b7      	b.n	800e57a <__ssvfscanf_r+0x4f2>
 800e40a:	2c00      	cmp	r4, #0
 800e40c:	d007      	beq.n	800e41e <__ssvfscanf_r+0x396>
 800e40e:	f7fb ff6d 	bl	800a2ec <malloc>
 800e412:	6338      	str	r0, [r7, #48]	; 0x30
 800e414:	2800      	cmp	r0, #0
 800e416:	d11f      	bne.n	800e458 <__ssvfscanf_r+0x3d0>
 800e418:	2301      	movs	r3, #1
 800e41a:	425b      	negs	r3, r3
 800e41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e420:	2b00      	cmp	r3, #0
 800e422:	d013      	beq.n	800e44c <__ssvfscanf_r+0x3c4>
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	3301      	adds	r3, #1
 800e428:	d10a      	bne.n	800e440 <__ssvfscanf_r+0x3b8>
 800e42a:	2400      	movs	r4, #0
 800e42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e42e:	681d      	ldr	r5, [r3, #0]
 800e430:	88db      	ldrh	r3, [r3, #6]
 800e432:	42a3      	cmp	r3, r4
 800e434:	dd01      	ble.n	800e43a <__ssvfscanf_r+0x3b2>
 800e436:	f001 f82a 	bl	800f48e <__ssvfscanf_r+0x1406>
 800e43a:	2301      	movs	r3, #1
 800e43c:	425b      	negs	r3, r3
 800e43e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e442:	6818      	ldr	r0, [r3, #0]
 800e444:	2800      	cmp	r0, #0
 800e446:	d001      	beq.n	800e44c <__ssvfscanf_r+0x3c4>
 800e448:	f7fb ff5a 	bl	800a300 <free>
 800e44c:	46bd      	mov	sp, r7
 800e44e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e450:	23b1      	movs	r3, #177	; 0xb1
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	449d      	add	sp, r3
 800e456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45e:	88de      	ldrh	r6, [r3, #6]
 800e460:	889d      	ldrh	r5, [r3, #4]
 800e462:	42ae      	cmp	r6, r5
 800e464:	d30e      	bcc.n	800e484 <__ssvfscanf_r+0x3fc>
 800e466:	4b71      	ldr	r3, [pc, #452]	; (800e62c <__ssvfscanf_r+0x5a4>)
 800e468:	429d      	cmp	r5, r3
 800e46a:	d8d5      	bhi.n	800e418 <__ssvfscanf_r+0x390>
 800e46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46e:	3508      	adds	r5, #8
 800e470:	b2ad      	uxth	r5, r5
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	00a9      	lsls	r1, r5, #2
 800e476:	f002 f901 	bl	801067c <realloc>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0cc      	beq.n	800e418 <__ssvfscanf_r+0x390>
 800e47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e480:	6018      	str	r0, [r3, #0]
 800e482:	809d      	strh	r5, [r3, #4]
 800e484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e486:	1c72      	adds	r2, r6, #1
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	00b6      	lsls	r6, r6, #2
 800e48c:	50f4      	str	r4, [r6, r3]
 800e48e:	2320      	movs	r3, #32
 800e490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e492:	0026      	movs	r6, r4
 800e494:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e496:	80ca      	strh	r2, [r1, #6]
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	2500      	movs	r5, #0
 800e49c:	f7fd f9fe 	bl	800b89c <__locale_mb_cur_max>
 800e4a0:	42a8      	cmp	r0, r5
 800e4a2:	d100      	bne.n	800e4a6 <__ssvfscanf_r+0x41e>
 800e4a4:	e6bf      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e4a6:	1c6a      	adds	r2, r5, #1
 800e4a8:	60fa      	str	r2, [r7, #12]
 800e4aa:	228c      	movs	r2, #140	; 0x8c
 800e4ac:	2048      	movs	r0, #72	; 0x48
 800e4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4b0:	0052      	lsls	r2, r2, #1
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	1812      	adds	r2, r2, r0
 800e4b6:	7819      	ldrb	r1, [r3, #0]
 800e4b8:	19d2      	adds	r2, r2, r7
 800e4ba:	5551      	strb	r1, [r2, r5]
 800e4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4c0:	6852      	ldr	r2, [r2, #4]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	600b      	str	r3, [r1, #0]
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	3a01      	subs	r2, #1
 800e4ca:	604a      	str	r2, [r1, #4]
 800e4cc:	2b03      	cmp	r3, #3
 800e4ce:	d102      	bne.n	800e4d6 <__ssvfscanf_r+0x44e>
 800e4d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4d2:	2b04      	cmp	r3, #4
 800e4d4:	d007      	beq.n	800e4e6 <__ssvfscanf_r+0x45e>
 800e4d6:	2048      	movs	r0, #72	; 0x48
 800e4d8:	2310      	movs	r3, #16
 800e4da:	181b      	adds	r3, r3, r0
 800e4dc:	2208      	movs	r2, #8
 800e4de:	2100      	movs	r1, #0
 800e4e0:	19d8      	adds	r0, r3, r7
 800e4e2:	f7fd f997 	bl	800b814 <memset>
 800e4e6:	2148      	movs	r1, #72	; 0x48
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	228c      	movs	r2, #140	; 0x8c
 800e4ec:	185b      	adds	r3, r3, r1
 800e4ee:	0052      	lsls	r2, r2, #1
 800e4f0:	19db      	adds	r3, r3, r7
 800e4f2:	1852      	adds	r2, r2, r1
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	0021      	movs	r1, r4
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4fc:	19d2      	adds	r2, r2, r7
 800e4fe:	f002 fc57 	bl	8010db0 <_mbrtowc_r>
 800e502:	0003      	movs	r3, r0
 800e504:	62b8      	str	r0, [r7, #40]	; 0x28
 800e506:	3301      	adds	r3, #1
 800e508:	d100      	bne.n	800e50c <__ssvfscanf_r+0x484>
 800e50a:	e68c      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d139      	bne.n	800e584 <__ssvfscanf_r+0x4fc>
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d100      	bne.n	800e518 <__ssvfscanf_r+0x490>
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	4694      	mov	ip, r2
 800e51e:	4463      	add	r3, ip
 800e520:	63bb      	str	r3, [r7, #56]	; 0x38
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	2b03      	cmp	r3, #3
 800e526:	d102      	bne.n	800e52e <__ssvfscanf_r+0x4a6>
 800e528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52a:	2b04      	cmp	r3, #4
 800e52c:	d002      	beq.n	800e534 <__ssvfscanf_r+0x4ac>
 800e52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e530:	3b01      	subs	r3, #1
 800e532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e534:	6a3b      	ldr	r3, [r7, #32]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d115      	bne.n	800e566 <__ssvfscanf_r+0x4de>
 800e53a:	2e00      	cmp	r6, #0
 800e53c:	d012      	beq.n	800e564 <__ssvfscanf_r+0x4dc>
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	69fa      	ldr	r2, [r7, #28]
 800e542:	1ae5      	subs	r5, r4, r3
 800e544:	10ab      	asrs	r3, r5, #2
 800e546:	4293      	cmp	r3, r2
 800e548:	d30c      	bcc.n	800e564 <__ssvfscanf_r+0x4dc>
 800e54a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e54c:	00d1      	lsls	r1, r2, #3
 800e54e:	f002 f895 	bl	801067c <realloc>
 800e552:	6338      	str	r0, [r7, #48]	; 0x30
 800e554:	2800      	cmp	r0, #0
 800e556:	d100      	bne.n	800e55a <__ssvfscanf_r+0x4d2>
 800e558:	e75e      	b.n	800e418 <__ssvfscanf_r+0x390>
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	1944      	adds	r4, r0, r5
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	6030      	str	r0, [r6, #0]
 800e562:	61fb      	str	r3, [r7, #28]
 800e564:	3404      	adds	r4, #4
 800e566:	2500      	movs	r5, #0
 800e568:	e010      	b.n	800e58c <__ssvfscanf_r+0x504>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	613b      	str	r3, [r7, #16]
 800e56e:	2300      	movs	r3, #0
 800e570:	001e      	movs	r6, r3
 800e572:	001c      	movs	r4, r3
 800e574:	61fb      	str	r3, [r7, #28]
 800e576:	633b      	str	r3, [r7, #48]	; 0x30
 800e578:	e78f      	b.n	800e49a <__ssvfscanf_r+0x412>
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	001e      	movs	r6, r3
 800e57e:	61fb      	str	r3, [r7, #28]
 800e580:	633b      	str	r3, [r7, #48]	; 0x30
 800e582:	e78a      	b.n	800e49a <__ssvfscanf_r+0x412>
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	68fd      	ldr	r5, [r7, #12]
 800e588:	3302      	adds	r3, #2
 800e58a:	d1c5      	bne.n	800e518 <__ssvfscanf_r+0x490>
 800e58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	dc12      	bgt.n	800e5ba <__ssvfscanf_r+0x532>
 800e594:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e598:	f002 fd0a 	bl	8010fb0 <__ssrefill_r>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d00c      	beq.n	800e5ba <__ssvfscanf_r+0x532>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	d000      	beq.n	800e5a6 <__ssvfscanf_r+0x51e>
 800e5a4:	e63f      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e5a6:	2e00      	cmp	r6, #0
 800e5a8:	d10c      	bne.n	800e5c4 <__ssvfscanf_r+0x53c>
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	425a      	negs	r2, r3
 800e5ae:	4153      	adcs	r3, r2
 800e5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5b2:	18d3      	adds	r3, r2, r3
 800e5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	e6de      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800e5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d000      	beq.n	800e5c2 <__ssvfscanf_r+0x53a>
 800e5c0:	e76c      	b.n	800e49c <__ssvfscanf_r+0x414>
 800e5c2:	e7f0      	b.n	800e5a6 <__ssvfscanf_r+0x51e>
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	69fa      	ldr	r2, [r7, #28]
 800e5c8:	1ae1      	subs	r1, r4, r3
 800e5ca:	108b      	asrs	r3, r1, #2
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d9ec      	bls.n	800e5aa <__ssvfscanf_r+0x522>
 800e5d0:	6830      	ldr	r0, [r6, #0]
 800e5d2:	f002 f853 	bl	801067c <realloc>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d0e7      	beq.n	800e5aa <__ssvfscanf_r+0x522>
 800e5da:	6030      	str	r0, [r6, #0]
 800e5dc:	e7e5      	b.n	800e5aa <__ssvfscanf_r+0x522>
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d025      	beq.n	800e630 <__ssvfscanf_r+0x5a8>
 800e5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	4299      	cmp	r1, r3
 800e5f0:	dd11      	ble.n	800e616 <__ssvfscanf_r+0x58e>
 800e5f2:	1ac9      	subs	r1, r1, r3
 800e5f4:	18d2      	adds	r2, r2, r3
 800e5f6:	18e4      	adds	r4, r4, r3
 800e5f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e5fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5fe:	0019      	movs	r1, r3
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	f002 fcd5 	bl	8010fb0 <__ssrefill_r>
 800e606:	2800      	cmp	r0, #0
 800e608:	d0ec      	beq.n	800e5e4 <__ssvfscanf_r+0x55c>
 800e60a:	2c00      	cmp	r4, #0
 800e60c:	d100      	bne.n	800e610 <__ssvfscanf_r+0x588>
 800e60e:	e60a      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	191b      	adds	r3, r3, r4
 800e614:	e5ff      	b.n	800e216 <__ssvfscanf_r+0x18e>
 800e616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e618:	1a5b      	subs	r3, r3, r1
 800e61a:	1864      	adds	r4, r4, r1
 800e61c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e61e:	604b      	str	r3, [r1, #4]
 800e620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e622:	18d2      	adds	r2, r2, r3
 800e624:	600a      	str	r2, [r1, #0]
 800e626:	e7f3      	b.n	800e610 <__ssvfscanf_r+0x588>
 800e628:	0800b4d9 	.word	0x0800b4d9
 800e62c:	0000fff6 	.word	0x0000fff6
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	0034      	movs	r4, r6
 800e634:	cb20      	ldmia	r3!, {r5}
 800e636:	633b      	str	r3, [r7, #48]	; 0x30
 800e638:	2380      	movs	r3, #128	; 0x80
 800e63a:	401c      	ands	r4, r3
 800e63c:	421e      	tst	r6, r3
 800e63e:	d028      	beq.n	800e692 <__ssvfscanf_r+0x60a>
 800e640:	2d00      	cmp	r5, #0
 800e642:	d100      	bne.n	800e646 <__ssvfscanf_r+0x5be>
 800e644:	e61d      	b.n	800e282 <__ssvfscanf_r+0x1fa>
 800e646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e648:	f7fb fe50 	bl	800a2ec <malloc>
 800e64c:	6238      	str	r0, [r7, #32]
 800e64e:	2800      	cmp	r0, #0
 800e650:	d100      	bne.n	800e654 <__ssvfscanf_r+0x5cc>
 800e652:	e5ef      	b.n	800e234 <__ssvfscanf_r+0x1ac>
 800e654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e656:	6028      	str	r0, [r5, #0]
 800e658:	88de      	ldrh	r6, [r3, #6]
 800e65a:	889c      	ldrh	r4, [r3, #4]
 800e65c:	6818      	ldr	r0, [r3, #0]
 800e65e:	42a6      	cmp	r6, r4
 800e660:	d30e      	bcc.n	800e680 <__ssvfscanf_r+0x5f8>
 800e662:	4bbf      	ldr	r3, [pc, #764]	; (800e960 <__ssvfscanf_r+0x8d8>)
 800e664:	429c      	cmp	r4, r3
 800e666:	d900      	bls.n	800e66a <__ssvfscanf_r+0x5e2>
 800e668:	e6df      	b.n	800e42a <__ssvfscanf_r+0x3a2>
 800e66a:	3408      	adds	r4, #8
 800e66c:	b2a4      	uxth	r4, r4
 800e66e:	00a1      	lsls	r1, r4, #2
 800e670:	f002 f804 	bl	801067c <realloc>
 800e674:	2800      	cmp	r0, #0
 800e676:	d100      	bne.n	800e67a <__ssvfscanf_r+0x5f2>
 800e678:	e6d7      	b.n	800e42a <__ssvfscanf_r+0x3a2>
 800e67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e67c:	6018      	str	r0, [r3, #0]
 800e67e:	809c      	strh	r4, [r3, #4]
 800e680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e682:	1c72      	adds	r2, r6, #1
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e688:	00b6      	lsls	r6, r6, #2
 800e68a:	002c      	movs	r4, r5
 800e68c:	50f5      	str	r5, [r6, r3]
 800e68e:	6a3d      	ldr	r5, [r7, #32]
 800e690:	80ca      	strh	r2, [r1, #6]
 800e692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e694:	0029      	movs	r1, r5
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	2201      	movs	r2, #1
 800e69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e69e:	f002 fca6 	bl	8010fee <_sfread_r>
 800e6a2:	1e05      	subs	r5, r0, #0
 800e6a4:	d100      	bne.n	800e6a8 <__ssvfscanf_r+0x620>
 800e6a6:	e5be      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e6a8:	2c00      	cmp	r4, #0
 800e6aa:	d009      	beq.n	800e6c0 <__ssvfscanf_r+0x638>
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ae:	4283      	cmp	r3, r0
 800e6b0:	d906      	bls.n	800e6c0 <__ssvfscanf_r+0x638>
 800e6b2:	0001      	movs	r1, r0
 800e6b4:	6820      	ldr	r0, [r4, #0]
 800e6b6:	f001 ffe1 	bl	801067c <realloc>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d000      	beq.n	800e6c0 <__ssvfscanf_r+0x638>
 800e6be:	6020      	str	r0, [r4, #0]
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	195b      	adds	r3, r3, r5
 800e6c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	e4f8      	b.n	800e0be <__ssvfscanf_r+0x36>
 800e6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <__ssvfscanf_r+0x64e>
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6d6:	2210      	movs	r2, #16
 800e6d8:	2301      	movs	r3, #1
 800e6da:	0034      	movs	r4, r6
 800e6dc:	4032      	ands	r2, r6
 800e6de:	401c      	ands	r4, r3
 800e6e0:	623a      	str	r2, [r7, #32]
 800e6e2:	421e      	tst	r6, r3
 800e6e4:	d100      	bne.n	800e6e8 <__ssvfscanf_r+0x660>
 800e6e6:	e116      	b.n	800e916 <__ssvfscanf_r+0x88e>
 800e6e8:	2a00      	cmp	r2, #0
 800e6ea:	d000      	beq.n	800e6ee <__ssvfscanf_r+0x666>
 800e6ec:	e0b0      	b.n	800e850 <__ssvfscanf_r+0x7c8>
 800e6ee:	2080      	movs	r0, #128	; 0x80
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	cb10      	ldmia	r3!, {r4}
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	4206      	tst	r6, r0
 800e6f8:	d100      	bne.n	800e6fc <__ssvfscanf_r+0x674>
 800e6fa:	e0b2      	b.n	800e862 <__ssvfscanf_r+0x7da>
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	d100      	bne.n	800e702 <__ssvfscanf_r+0x67a>
 800e700:	e68d      	b.n	800e41e <__ssvfscanf_r+0x396>
 800e702:	f7fb fdf3 	bl	800a2ec <malloc>
 800e706:	6338      	str	r0, [r7, #48]	; 0x30
 800e708:	2800      	cmp	r0, #0
 800e70a:	d100      	bne.n	800e70e <__ssvfscanf_r+0x686>
 800e70c:	e684      	b.n	800e418 <__ssvfscanf_r+0x390>
 800e70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e714:	88de      	ldrh	r6, [r3, #6]
 800e716:	889d      	ldrh	r5, [r3, #4]
 800e718:	42ae      	cmp	r6, r5
 800e71a:	d310      	bcc.n	800e73e <__ssvfscanf_r+0x6b6>
 800e71c:	4b90      	ldr	r3, [pc, #576]	; (800e960 <__ssvfscanf_r+0x8d8>)
 800e71e:	429d      	cmp	r5, r3
 800e720:	d900      	bls.n	800e724 <__ssvfscanf_r+0x69c>
 800e722:	e679      	b.n	800e418 <__ssvfscanf_r+0x390>
 800e724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e726:	3508      	adds	r5, #8
 800e728:	b2ad      	uxth	r5, r5
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	00a9      	lsls	r1, r5, #2
 800e72e:	f001 ffa5 	bl	801067c <realloc>
 800e732:	2800      	cmp	r0, #0
 800e734:	d100      	bne.n	800e738 <__ssvfscanf_r+0x6b0>
 800e736:	e66f      	b.n	800e418 <__ssvfscanf_r+0x390>
 800e738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e73a:	6018      	str	r0, [r3, #0]
 800e73c:	809d      	strh	r5, [r3, #4]
 800e73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e740:	1c72      	adds	r2, r6, #1
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	00b6      	lsls	r6, r6, #2
 800e746:	50f4      	str	r4, [r6, r3]
 800e748:	2320      	movs	r3, #32
 800e74a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e74c:	0026      	movs	r6, r4
 800e74e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e750:	80ca      	strh	r2, [r1, #6]
 800e752:	613b      	str	r3, [r7, #16]
 800e754:	2500      	movs	r5, #0
 800e756:	f7fd f8a1 	bl	800b89c <__locale_mb_cur_max>
 800e75a:	42a8      	cmp	r0, r5
 800e75c:	d100      	bne.n	800e760 <__ssvfscanf_r+0x6d8>
 800e75e:	e562      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e760:	1c6a      	adds	r2, r5, #1
 800e762:	61fa      	str	r2, [r7, #28]
 800e764:	228c      	movs	r2, #140	; 0x8c
 800e766:	2048      	movs	r0, #72	; 0x48
 800e768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e76a:	0052      	lsls	r2, r2, #1
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	1812      	adds	r2, r2, r0
 800e770:	7819      	ldrb	r1, [r3, #0]
 800e772:	19d2      	adds	r2, r2, r7
 800e774:	5551      	strb	r1, [r2, r5]
 800e776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e77a:	6852      	ldr	r2, [r2, #4]
 800e77c:	3301      	adds	r3, #1
 800e77e:	600b      	str	r3, [r1, #0]
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	3a01      	subs	r2, #1
 800e784:	604a      	str	r2, [r1, #4]
 800e786:	2b03      	cmp	r3, #3
 800e788:	d102      	bne.n	800e790 <__ssvfscanf_r+0x708>
 800e78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d006      	beq.n	800e79e <__ssvfscanf_r+0x716>
 800e790:	2048      	movs	r0, #72	; 0x48
 800e792:	2208      	movs	r2, #8
 800e794:	1813      	adds	r3, r2, r0
 800e796:	2100      	movs	r1, #0
 800e798:	19d8      	adds	r0, r3, r7
 800e79a:	f7fd f83b 	bl	800b814 <memset>
 800e79e:	2148      	movs	r1, #72	; 0x48
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	228c      	movs	r2, #140	; 0x8c
 800e7a4:	185b      	adds	r3, r3, r1
 800e7a6:	0052      	lsls	r2, r2, #1
 800e7a8:	19db      	adds	r3, r3, r7
 800e7aa:	1852      	adds	r2, r2, r1
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	0021      	movs	r1, r4
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7b4:	19d2      	adds	r2, r2, r7
 800e7b6:	f002 fafb 	bl	8010db0 <_mbrtowc_r>
 800e7ba:	0003      	movs	r3, r0
 800e7bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7be:	3301      	adds	r3, #1
 800e7c0:	d100      	bne.n	800e7c4 <__ssvfscanf_r+0x73c>
 800e7c2:	e530      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d151      	bne.n	800e86c <__ssvfscanf_r+0x7e4>
 800e7c8:	6020      	str	r0, [r4, #0]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	6825      	ldr	r5, [r4, #0]
 800e7ce:	425b      	negs	r3, r3
 800e7d0:	1c6a      	adds	r2, r5, #1
 800e7d2:	d01a      	beq.n	800e80a <__ssvfscanf_r+0x782>
 800e7d4:	2048      	movs	r0, #72	; 0x48
 800e7d6:	3311      	adds	r3, #17
 800e7d8:	181b      	adds	r3, r3, r0
 800e7da:	2208      	movs	r2, #8
 800e7dc:	2100      	movs	r1, #0
 800e7de:	19d8      	adds	r0, r3, r7
 800e7e0:	f7fd f818 	bl	800b814 <memset>
 800e7e4:	4b5f      	ldr	r3, [pc, #380]	; (800e964 <__ssvfscanf_r+0x8dc>)
 800e7e6:	2148      	movs	r1, #72	; 0x48
 800e7e8:	33e0      	adds	r3, #224	; 0xe0
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	2310      	movs	r3, #16
 800e7ee:	4694      	mov	ip, r2
 800e7f0:	185b      	adds	r3, r3, r1
 800e7f2:	002a      	movs	r2, r5
 800e7f4:	19db      	adds	r3, r3, r7
 800e7f6:	4665      	mov	r5, ip
 800e7f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7fa:	1879      	adds	r1, r7, r1
 800e7fc:	47a8      	blx	r5
 800e7fe:	2300      	movs	r3, #0
 800e800:	2801      	cmp	r0, #1
 800e802:	d102      	bne.n	800e80a <__ssvfscanf_r+0x782>
 800e804:	3348      	adds	r3, #72	; 0x48
 800e806:	18fb      	adds	r3, r7, r3
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	2218      	movs	r2, #24
 800e80c:	2148      	movs	r1, #72	; 0x48
 800e80e:	1852      	adds	r2, r2, r1
 800e810:	19d2      	adds	r2, r2, r7
 800e812:	5cd3      	ldrb	r3, [r2, r3]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d149      	bne.n	800e8ac <__ssvfscanf_r+0x824>
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d137      	bne.n	800e88e <__ssvfscanf_r+0x806>
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d113      	bne.n	800e84c <__ssvfscanf_r+0x7c4>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	2e00      	cmp	r6, #0
 800e828:	d00d      	beq.n	800e846 <__ssvfscanf_r+0x7be>
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	1ae4      	subs	r4, r4, r3
 800e830:	10a3      	asrs	r3, r4, #2
 800e832:	3301      	adds	r3, #1
 800e834:	429a      	cmp	r2, r3
 800e836:	d906      	bls.n	800e846 <__ssvfscanf_r+0x7be>
 800e838:	6830      	ldr	r0, [r6, #0]
 800e83a:	1d21      	adds	r1, r4, #4
 800e83c:	f001 ff1e 	bl	801067c <realloc>
 800e840:	2800      	cmp	r0, #0
 800e842:	d000      	beq.n	800e846 <__ssvfscanf_r+0x7be>
 800e844:	6030      	str	r0, [r6, #0]
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	3301      	adds	r3, #1
 800e84a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	e593      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	2300      	movs	r3, #0
 800e856:	001e      	movs	r6, r3
 800e858:	613b      	str	r3, [r7, #16]
 800e85a:	633b      	str	r3, [r7, #48]	; 0x30
 800e85c:	334c      	adds	r3, #76	; 0x4c
 800e85e:	18fc      	adds	r4, r7, r3
 800e860:	e778      	b.n	800e754 <__ssvfscanf_r+0x6cc>
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	001e      	movs	r6, r3
 800e866:	613b      	str	r3, [r7, #16]
 800e868:	633b      	str	r3, [r7, #48]	; 0x30
 800e86a:	e773      	b.n	800e754 <__ssvfscanf_r+0x6cc>
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	69fd      	ldr	r5, [r7, #28]
 800e870:	3302      	adds	r3, #2
 800e872:	d1aa      	bne.n	800e7ca <__ssvfscanf_r+0x742>
 800e874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	dc47      	bgt.n	800e90c <__ssvfscanf_r+0x884>
 800e87c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e87e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e880:	f002 fb96 	bl	8010fb0 <__ssrefill_r>
 800e884:	2800      	cmp	r0, #0
 800e886:	d041      	beq.n	800e90c <__ssvfscanf_r+0x884>
 800e888:	2d00      	cmp	r5, #0
 800e88a:	d0c8      	beq.n	800e81e <__ssvfscanf_r+0x796>
 800e88c:	e4cb      	b.n	800e226 <__ssvfscanf_r+0x19e>
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	2248      	movs	r2, #72	; 0x48
 800e892:	3b01      	subs	r3, #1
 800e894:	61fb      	str	r3, [r7, #28]
 800e896:	238c      	movs	r3, #140	; 0x8c
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	189b      	adds	r3, r3, r2
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	19db      	adds	r3, r3, r7
 800e8a0:	5cd1      	ldrb	r1, [r2, r3]
 800e8a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8a6:	f002 fb47 	bl	8010f38 <_sungetc_r>
 800e8aa:	e7b5      	b.n	800e818 <__ssvfscanf_r+0x790>
 800e8ac:	69fa      	ldr	r2, [r7, #28]
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	4694      	mov	ip, r2
 800e8b2:	4463      	add	r3, ip
 800e8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d102      	bne.n	800e8c2 <__ssvfscanf_r+0x83a>
 800e8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8be:	2b04      	cmp	r3, #4
 800e8c0:	d002      	beq.n	800e8c8 <__ssvfscanf_r+0x840>
 800e8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d11a      	bne.n	800e904 <__ssvfscanf_r+0x87c>
 800e8ce:	3404      	adds	r4, #4
 800e8d0:	2e00      	cmp	r6, #0
 800e8d2:	d019      	beq.n	800e908 <__ssvfscanf_r+0x880>
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	1ae3      	subs	r3, r4, r3
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	6a3d      	ldr	r5, [r7, #32]
 800e8de:	109b      	asrs	r3, r3, #2
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d3c7      	bcc.n	800e874 <__ssvfscanf_r+0x7ec>
 800e8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8e6:	00d1      	lsls	r1, r2, #3
 800e8e8:	f001 fec8 	bl	801067c <realloc>
 800e8ec:	6338      	str	r0, [r7, #48]	; 0x30
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d100      	bne.n	800e8f4 <__ssvfscanf_r+0x86c>
 800e8f2:	e591      	b.n	800e418 <__ssvfscanf_r+0x390>
 800e8f4:	4684      	mov	ip, r0
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	69fc      	ldr	r4, [r7, #28]
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4464      	add	r4, ip
 800e8fe:	6030      	str	r0, [r6, #0]
 800e900:	613b      	str	r3, [r7, #16]
 800e902:	e7b7      	b.n	800e874 <__ssvfscanf_r+0x7ec>
 800e904:	2500      	movs	r5, #0
 800e906:	e7b5      	b.n	800e874 <__ssvfscanf_r+0x7ec>
 800e908:	0035      	movs	r5, r6
 800e90a:	e7b3      	b.n	800e874 <__ssvfscanf_r+0x7ec>
 800e90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d000      	beq.n	800e914 <__ssvfscanf_r+0x88c>
 800e912:	e720      	b.n	800e756 <__ssvfscanf_r+0x6ce>
 800e914:	e783      	b.n	800e81e <__ssvfscanf_r+0x796>
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d025      	beq.n	800e968 <__ssvfscanf_r+0x8e0>
 800e91c:	2118      	movs	r1, #24
 800e91e:	2048      	movs	r0, #72	; 0x48
 800e920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e922:	1809      	adds	r1, r1, r0
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	19c9      	adds	r1, r1, r7
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	5c8a      	ldrb	r2, [r1, r2]
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	d103      	bne.n	800e938 <__ssvfscanf_r+0x8b0>
 800e930:	2c00      	cmp	r4, #0
 800e932:	d000      	beq.n	800e936 <__ssvfscanf_r+0x8ae>
 800e934:	e66c      	b.n	800e610 <__ssvfscanf_r+0x588>
 800e936:	e4a4      	b.n	800e282 <__ssvfscanf_r+0x1fa>
 800e938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e93a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e93c:	6852      	ldr	r2, [r2, #4]
 800e93e:	3301      	adds	r3, #1
 800e940:	600b      	str	r3, [r1, #0]
 800e942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e944:	3a01      	subs	r2, #1
 800e946:	3401      	adds	r4, #1
 800e948:	604a      	str	r2, [r1, #4]
 800e94a:	429c      	cmp	r4, r3
 800e94c:	d100      	bne.n	800e950 <__ssvfscanf_r+0x8c8>
 800e94e:	e65f      	b.n	800e610 <__ssvfscanf_r+0x588>
 800e950:	2a00      	cmp	r2, #0
 800e952:	dce3      	bgt.n	800e91c <__ssvfscanf_r+0x894>
 800e954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e956:	f002 fb2b 	bl	8010fb0 <__ssrefill_r>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0de      	beq.n	800e91c <__ssvfscanf_r+0x894>
 800e95e:	e657      	b.n	800e610 <__ssvfscanf_r+0x588>
 800e960:	0000fff6 	.word	0x0000fff6
 800e964:	2000043c 	.word	0x2000043c
 800e968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96a:	0032      	movs	r2, r6
 800e96c:	cb20      	ldmia	r3!, {r5}
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	2380      	movs	r3, #128	; 0x80
 800e972:	401a      	ands	r2, r3
 800e974:	421e      	tst	r6, r3
 800e976:	d100      	bne.n	800e97a <__ssvfscanf_r+0x8f2>
 800e978:	e086      	b.n	800ea88 <__ssvfscanf_r+0xa00>
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d100      	bne.n	800e980 <__ssvfscanf_r+0x8f8>
 800e97e:	e480      	b.n	800e282 <__ssvfscanf_r+0x1fa>
 800e980:	2020      	movs	r0, #32
 800e982:	f7fb fcb3 	bl	800a2ec <malloc>
 800e986:	6338      	str	r0, [r7, #48]	; 0x30
 800e988:	2800      	cmp	r0, #0
 800e98a:	d100      	bne.n	800e98e <__ssvfscanf_r+0x906>
 800e98c:	e452      	b.n	800e234 <__ssvfscanf_r+0x1ac>
 800e98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e990:	6028      	str	r0, [r5, #0]
 800e992:	88de      	ldrh	r6, [r3, #6]
 800e994:	889c      	ldrh	r4, [r3, #4]
 800e996:	6818      	ldr	r0, [r3, #0]
 800e998:	42a6      	cmp	r6, r4
 800e99a:	d30e      	bcc.n	800e9ba <__ssvfscanf_r+0x932>
 800e99c:	4bc3      	ldr	r3, [pc, #780]	; (800ecac <__ssvfscanf_r+0xc24>)
 800e99e:	429c      	cmp	r4, r3
 800e9a0:	d900      	bls.n	800e9a4 <__ssvfscanf_r+0x91c>
 800e9a2:	e542      	b.n	800e42a <__ssvfscanf_r+0x3a2>
 800e9a4:	3408      	adds	r4, #8
 800e9a6:	b2a4      	uxth	r4, r4
 800e9a8:	00a1      	lsls	r1, r4, #2
 800e9aa:	f001 fe67 	bl	801067c <realloc>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d100      	bne.n	800e9b4 <__ssvfscanf_r+0x92c>
 800e9b2:	e53a      	b.n	800e42a <__ssvfscanf_r+0x3a2>
 800e9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b6:	6018      	str	r0, [r3, #0]
 800e9b8:	809c      	strh	r4, [r3, #4]
 800e9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9bc:	1c72      	adds	r2, r6, #1
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	00b6      	lsls	r6, r6, #2
 800e9c2:	50f5      	str	r5, [r6, r3]
 800e9c4:	2320      	movs	r3, #32
 800e9c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9c8:	002e      	movs	r6, r5
 800e9ca:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800e9cc:	80ca      	strh	r2, [r1, #6]
 800e9ce:	623b      	str	r3, [r7, #32]
 800e9d0:	002c      	movs	r4, r5
 800e9d2:	2118      	movs	r1, #24
 800e9d4:	2048      	movs	r0, #72	; 0x48
 800e9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9d8:	1809      	adds	r1, r1, r0
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	19c9      	adds	r1, r1, r7
 800e9de:	781a      	ldrb	r2, [r3, #0]
 800e9e0:	5c8a      	ldrb	r2, [r1, r2]
 800e9e2:	2a00      	cmp	r2, #0
 800e9e4:	d101      	bne.n	800e9ea <__ssvfscanf_r+0x962>
 800e9e6:	633d      	str	r5, [r7, #48]	; 0x30
 800e9e8:	e031      	b.n	800ea4e <__ssvfscanf_r+0x9c6>
 800e9ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9ee:	6852      	ldr	r2, [r2, #4]
 800e9f0:	3a01      	subs	r2, #1
 800e9f2:	604a      	str	r2, [r1, #4]
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	600a      	str	r2, [r1, #0]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	1c6a      	adds	r2, r5, #1
 800e9fc:	633a      	str	r2, [r7, #48]	; 0x30
 800e9fe:	702b      	strb	r3, [r5, #0]
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	d010      	beq.n	800ea26 <__ssvfscanf_r+0x99e>
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	1b15      	subs	r5, r2, r4
 800ea08:	429d      	cmp	r5, r3
 800ea0a:	d30c      	bcc.n	800ea26 <__ssvfscanf_r+0x99e>
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	0020      	movs	r0, r4
 800ea10:	0019      	movs	r1, r3
 800ea12:	623b      	str	r3, [r7, #32]
 800ea14:	f001 fe32 	bl	801067c <realloc>
 800ea18:	1e04      	subs	r4, r0, #0
 800ea1a:	d101      	bne.n	800ea20 <__ssvfscanf_r+0x998>
 800ea1c:	f7ff fc0a 	bl	800e234 <__ssvfscanf_r+0x1ac>
 800ea20:	1943      	adds	r3, r0, r5
 800ea22:	633b      	str	r3, [r7, #48]	; 0x30
 800ea24:	6030      	str	r0, [r6, #0]
 800ea26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00e      	beq.n	800ea4e <__ssvfscanf_r+0x9c6>
 800ea30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dc2a      	bgt.n	800ea8e <__ssvfscanf_r+0xa06>
 800ea38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea3c:	f002 fab8 	bl	8010fb0 <__ssrefill_r>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d024      	beq.n	800ea8e <__ssvfscanf_r+0xa06>
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	42a3      	cmp	r3, r4
 800ea48:	d101      	bne.n	800ea4e <__ssvfscanf_r+0x9c6>
 800ea4a:	f7ff fbec 	bl	800e226 <__ssvfscanf_r+0x19e>
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	1b1d      	subs	r5, r3, r4
 800ea52:	42a3      	cmp	r3, r4
 800ea54:	d101      	bne.n	800ea5a <__ssvfscanf_r+0x9d2>
 800ea56:	f7ff fc14 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea5e:	7013      	strb	r3, [r2, #0]
 800ea60:	429e      	cmp	r6, r3
 800ea62:	d009      	beq.n	800ea78 <__ssvfscanf_r+0x9f0>
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	1c69      	adds	r1, r5, #1
 800ea68:	428b      	cmp	r3, r1
 800ea6a:	d905      	bls.n	800ea78 <__ssvfscanf_r+0x9f0>
 800ea6c:	6830      	ldr	r0, [r6, #0]
 800ea6e:	f001 fe05 	bl	801067c <realloc>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d000      	beq.n	800ea78 <__ssvfscanf_r+0x9f0>
 800ea76:	6030      	str	r0, [r6, #0]
 800ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	195b      	adds	r3, r3, r5
 800ea82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	e477      	b.n	800e378 <__ssvfscanf_r+0x2f0>
 800ea88:	0016      	movs	r6, r2
 800ea8a:	623a      	str	r2, [r7, #32]
 800ea8c:	e7a0      	b.n	800e9d0 <__ssvfscanf_r+0x948>
 800ea8e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ea90:	e79f      	b.n	800e9d2 <__ssvfscanf_r+0x94a>
 800ea92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d101      	bne.n	800ea9c <__ssvfscanf_r+0xa14>
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea9c:	2210      	movs	r2, #16
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	0034      	movs	r4, r6
 800eaa2:	4032      	ands	r2, r6
 800eaa4:	401c      	ands	r4, r3
 800eaa6:	61fa      	str	r2, [r7, #28]
 800eaa8:	421e      	tst	r6, r3
 800eaaa:	d100      	bne.n	800eaae <__ssvfscanf_r+0xa26>
 800eaac:	e102      	b.n	800ecb4 <__ssvfscanf_r+0xc2c>
 800eaae:	2a00      	cmp	r2, #0
 800eab0:	d000      	beq.n	800eab4 <__ssvfscanf_r+0xa2c>
 800eab2:	e09f      	b.n	800ebf4 <__ssvfscanf_r+0xb6c>
 800eab4:	2080      	movs	r0, #128	; 0x80
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	cb10      	ldmia	r3!, {r4}
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	4206      	tst	r6, r0
 800eabe:	d100      	bne.n	800eac2 <__ssvfscanf_r+0xa3a>
 800eac0:	e0a1      	b.n	800ec06 <__ssvfscanf_r+0xb7e>
 800eac2:	2c00      	cmp	r4, #0
 800eac4:	d100      	bne.n	800eac8 <__ssvfscanf_r+0xa40>
 800eac6:	e4aa      	b.n	800e41e <__ssvfscanf_r+0x396>
 800eac8:	f7fb fc10 	bl	800a2ec <malloc>
 800eacc:	6338      	str	r0, [r7, #48]	; 0x30
 800eace:	2800      	cmp	r0, #0
 800ead0:	d100      	bne.n	800ead4 <__ssvfscanf_r+0xa4c>
 800ead2:	e4a1      	b.n	800e418 <__ssvfscanf_r+0x390>
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	6023      	str	r3, [r4, #0]
 800ead8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eada:	88de      	ldrh	r6, [r3, #6]
 800eadc:	889d      	ldrh	r5, [r3, #4]
 800eade:	42ae      	cmp	r6, r5
 800eae0:	d310      	bcc.n	800eb04 <__ssvfscanf_r+0xa7c>
 800eae2:	4b72      	ldr	r3, [pc, #456]	; (800ecac <__ssvfscanf_r+0xc24>)
 800eae4:	429d      	cmp	r5, r3
 800eae6:	d900      	bls.n	800eaea <__ssvfscanf_r+0xa62>
 800eae8:	e496      	b.n	800e418 <__ssvfscanf_r+0x390>
 800eaea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaec:	3508      	adds	r5, #8
 800eaee:	b2ad      	uxth	r5, r5
 800eaf0:	6818      	ldr	r0, [r3, #0]
 800eaf2:	00a9      	lsls	r1, r5, #2
 800eaf4:	f001 fdc2 	bl	801067c <realloc>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d100      	bne.n	800eafe <__ssvfscanf_r+0xa76>
 800eafc:	e48c      	b.n	800e418 <__ssvfscanf_r+0x390>
 800eafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb00:	6018      	str	r0, [r3, #0]
 800eb02:	809d      	strh	r5, [r3, #4]
 800eb04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb06:	1c72      	adds	r2, r6, #1
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	00b6      	lsls	r6, r6, #2
 800eb0c:	50f4      	str	r4, [r6, r3]
 800eb0e:	2320      	movs	r3, #32
 800eb10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb12:	0025      	movs	r5, r4
 800eb14:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eb16:	80ca      	strh	r2, [r1, #6]
 800eb18:	613b      	str	r3, [r7, #16]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	623b      	str	r3, [r7, #32]
 800eb1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb20:	4a63      	ldr	r2, [pc, #396]	; (800ecb0 <__ssvfscanf_r+0xc28>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	5cd3      	ldrb	r3, [r2, r3]
 800eb28:	2208      	movs	r2, #8
 800eb2a:	4213      	tst	r3, r2
 800eb2c:	d149      	bne.n	800ebc2 <__ssvfscanf_r+0xb3a>
 800eb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d046      	beq.n	800ebc2 <__ssvfscanf_r+0xb3a>
 800eb34:	f7fc feb2 	bl	800b89c <__locale_mb_cur_max>
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	4298      	cmp	r0, r3
 800eb3c:	d101      	bne.n	800eb42 <__ssvfscanf_r+0xaba>
 800eb3e:	f7ff fb72 	bl	800e226 <__ssvfscanf_r+0x19e>
 800eb42:	6a3a      	ldr	r2, [r7, #32]
 800eb44:	2048      	movs	r0, #72	; 0x48
 800eb46:	1c56      	adds	r6, r2, #1
 800eb48:	228c      	movs	r2, #140	; 0x8c
 800eb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb4c:	0052      	lsls	r2, r2, #1
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	1812      	adds	r2, r2, r0
 800eb52:	7819      	ldrb	r1, [r3, #0]
 800eb54:	6a38      	ldr	r0, [r7, #32]
 800eb56:	19d2      	adds	r2, r2, r7
 800eb58:	5411      	strb	r1, [r2, r0]
 800eb5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb5e:	6852      	ldr	r2, [r2, #4]
 800eb60:	3301      	adds	r3, #1
 800eb62:	600b      	str	r3, [r1, #0]
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	3a01      	subs	r2, #1
 800eb68:	604a      	str	r2, [r1, #4]
 800eb6a:	2b03      	cmp	r3, #3
 800eb6c:	d102      	bne.n	800eb74 <__ssvfscanf_r+0xaec>
 800eb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	d007      	beq.n	800eb84 <__ssvfscanf_r+0xafc>
 800eb74:	2048      	movs	r0, #72	; 0x48
 800eb76:	2310      	movs	r3, #16
 800eb78:	181b      	adds	r3, r3, r0
 800eb7a:	2208      	movs	r2, #8
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	19d8      	adds	r0, r3, r7
 800eb80:	f7fc fe48 	bl	800b814 <memset>
 800eb84:	2148      	movs	r1, #72	; 0x48
 800eb86:	2310      	movs	r3, #16
 800eb88:	228c      	movs	r2, #140	; 0x8c
 800eb8a:	185b      	adds	r3, r3, r1
 800eb8c:	0052      	lsls	r2, r2, #1
 800eb8e:	19db      	adds	r3, r3, r7
 800eb90:	1852      	adds	r2, r2, r1
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	0021      	movs	r1, r4
 800eb96:	0033      	movs	r3, r6
 800eb98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb9a:	19d2      	adds	r2, r2, r7
 800eb9c:	f002 f908 	bl	8010db0 <_mbrtowc_r>
 800eba0:	0003      	movs	r3, r0
 800eba2:	62b8      	str	r0, [r7, #40]	; 0x28
 800eba4:	3301      	adds	r3, #1
 800eba6:	d101      	bne.n	800ebac <__ssvfscanf_r+0xb24>
 800eba8:	f7ff fb3d 	bl	800e226 <__ssvfscanf_r+0x19e>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d12f      	bne.n	800ec10 <__ssvfscanf_r+0xb88>
 800ebb0:	6020      	str	r0, [r4, #0]
 800ebb2:	6820      	ldr	r0, [r4, #0]
 800ebb4:	f002 f91a 	bl	8010dec <iswspace>
 800ebb8:	6238      	str	r0, [r7, #32]
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d04a      	beq.n	800ec54 <__ssvfscanf_r+0xbcc>
 800ebbe:	2e00      	cmp	r6, #0
 800ebc0:	d13c      	bne.n	800ec3c <__ssvfscanf_r+0xbb4>
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d000      	beq.n	800ebca <__ssvfscanf_r+0xb42>
 800ebc8:	e640      	b.n	800e84c <__ssvfscanf_r+0x7c4>
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	2d00      	cmp	r5, #0
 800ebce:	d100      	bne.n	800ebd2 <__ssvfscanf_r+0xb4a>
 800ebd0:	e639      	b.n	800e846 <__ssvfscanf_r+0x7be>
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	1ae4      	subs	r4, r4, r3
 800ebd8:	10a3      	asrs	r3, r4, #2
 800ebda:	3301      	adds	r3, #1
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d800      	bhi.n	800ebe2 <__ssvfscanf_r+0xb5a>
 800ebe0:	e631      	b.n	800e846 <__ssvfscanf_r+0x7be>
 800ebe2:	6828      	ldr	r0, [r5, #0]
 800ebe4:	1d21      	adds	r1, r4, #4
 800ebe6:	f001 fd49 	bl	801067c <realloc>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d100      	bne.n	800ebf0 <__ssvfscanf_r+0xb68>
 800ebee:	e62a      	b.n	800e846 <__ssvfscanf_r+0x7be>
 800ebf0:	6028      	str	r0, [r5, #0]
 800ebf2:	e628      	b.n	800e846 <__ssvfscanf_r+0x7be>
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	60fb      	str	r3, [r7, #12]
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	001d      	movs	r5, r3
 800ebfc:	613b      	str	r3, [r7, #16]
 800ebfe:	633b      	str	r3, [r7, #48]	; 0x30
 800ec00:	334c      	adds	r3, #76	; 0x4c
 800ec02:	18fc      	adds	r4, r7, r3
 800ec04:	e789      	b.n	800eb1a <__ssvfscanf_r+0xa92>
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	001d      	movs	r5, r3
 800ec0a:	613b      	str	r3, [r7, #16]
 800ec0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ec0e:	e784      	b.n	800eb1a <__ssvfscanf_r+0xa92>
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	623e      	str	r6, [r7, #32]
 800ec14:	3302      	adds	r3, #2
 800ec16:	d1cc      	bne.n	800ebb2 <__ssvfscanf_r+0xb2a>
 800ec18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dd00      	ble.n	800ec22 <__ssvfscanf_r+0xb9a>
 800ec20:	e77d      	b.n	800eb1e <__ssvfscanf_r+0xa96>
 800ec22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec26:	f002 f9c3 	bl	8010fb0 <__ssrefill_r>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d100      	bne.n	800ec30 <__ssvfscanf_r+0xba8>
 800ec2e:	e776      	b.n	800eb1e <__ssvfscanf_r+0xa96>
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <__ssvfscanf_r+0xbb2>
 800ec36:	f7ff faf6 	bl	800e226 <__ssvfscanf_r+0x19e>
 800ec3a:	e7c2      	b.n	800ebc2 <__ssvfscanf_r+0xb3a>
 800ec3c:	238c      	movs	r3, #140	; 0x8c
 800ec3e:	2248      	movs	r2, #72	; 0x48
 800ec40:	005b      	lsls	r3, r3, #1
 800ec42:	189b      	adds	r3, r3, r2
 800ec44:	3e01      	subs	r6, #1
 800ec46:	19db      	adds	r3, r3, r7
 800ec48:	5cf1      	ldrb	r1, [r6, r3]
 800ec4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec4e:	f002 f973 	bl	8010f38 <_sungetc_r>
 800ec52:	e7b4      	b.n	800ebbe <__ssvfscanf_r+0xb36>
 800ec54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec56:	199b      	adds	r3, r3, r6
 800ec58:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	2b03      	cmp	r3, #3
 800ec5e:	d102      	bne.n	800ec66 <__ssvfscanf_r+0xbde>
 800ec60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	d002      	beq.n	800ec6c <__ssvfscanf_r+0xbe4>
 800ec66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1d2      	bne.n	800ec18 <__ssvfscanf_r+0xb90>
 800ec72:	3404      	adds	r4, #4
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	d016      	beq.n	800eca6 <__ssvfscanf_r+0xc1e>
 800ec78:	69fa      	ldr	r2, [r7, #28]
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	623a      	str	r2, [r7, #32]
 800ec7e:	693a      	ldr	r2, [r7, #16]
 800ec80:	1ae6      	subs	r6, r4, r3
 800ec82:	10b3      	asrs	r3, r6, #2
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d3c7      	bcc.n	800ec18 <__ssvfscanf_r+0xb90>
 800ec88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec8a:	00d1      	lsls	r1, r2, #3
 800ec8c:	f001 fcf6 	bl	801067c <realloc>
 800ec90:	6338      	str	r0, [r7, #48]	; 0x30
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d101      	bne.n	800ec9a <__ssvfscanf_r+0xc12>
 800ec96:	f7ff fbbf 	bl	800e418 <__ssvfscanf_r+0x390>
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	1984      	adds	r4, r0, r6
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	6028      	str	r0, [r5, #0]
 800eca2:	613b      	str	r3, [r7, #16]
 800eca4:	e7b8      	b.n	800ec18 <__ssvfscanf_r+0xb90>
 800eca6:	623d      	str	r5, [r7, #32]
 800eca8:	e7b6      	b.n	800ec18 <__ssvfscanf_r+0xb90>
 800ecaa:	46c0      	nop			; (mov r8, r8)
 800ecac:	0000fff6 	.word	0x0000fff6
 800ecb0:	08013eb1 	.word	0x08013eb1
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d01c      	beq.n	800ecf4 <__ssvfscanf_r+0xc6c>
 800ecba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecbc:	49bf      	ldr	r1, [pc, #764]	; (800efbc <__ssvfscanf_r+0xf34>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	781a      	ldrb	r2, [r3, #0]
 800ecc2:	5c8a      	ldrb	r2, [r1, r2]
 800ecc4:	2108      	movs	r1, #8
 800ecc6:	420a      	tst	r2, r1
 800ecc8:	d000      	beq.n	800eccc <__ssvfscanf_r+0xc44>
 800ecca:	e4a1      	b.n	800e610 <__ssvfscanf_r+0x588>
 800eccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecd0:	6852      	ldr	r2, [r2, #4]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	600b      	str	r3, [r1, #0]
 800ecd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd8:	3a01      	subs	r2, #1
 800ecda:	3401      	adds	r4, #1
 800ecdc:	604a      	str	r2, [r1, #4]
 800ecde:	429c      	cmp	r4, r3
 800ece0:	d100      	bne.n	800ece4 <__ssvfscanf_r+0xc5c>
 800ece2:	e495      	b.n	800e610 <__ssvfscanf_r+0x588>
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	dce8      	bgt.n	800ecba <__ssvfscanf_r+0xc32>
 800ece8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecea:	f002 f961 	bl	8010fb0 <__ssrefill_r>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d0e3      	beq.n	800ecba <__ssvfscanf_r+0xc32>
 800ecf2:	e48d      	b.n	800e610 <__ssvfscanf_r+0x588>
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	0032      	movs	r2, r6
 800ecf8:	cb10      	ldmia	r3!, {r4}
 800ecfa:	61fb      	str	r3, [r7, #28]
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	401a      	ands	r2, r3
 800ed00:	421e      	tst	r6, r3
 800ed02:	d039      	beq.n	800ed78 <__ssvfscanf_r+0xcf0>
 800ed04:	2c00      	cmp	r4, #0
 800ed06:	d101      	bne.n	800ed0c <__ssvfscanf_r+0xc84>
 800ed08:	f7ff fabb 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800ed0c:	2020      	movs	r0, #32
 800ed0e:	f7fb faed 	bl	800a2ec <malloc>
 800ed12:	6338      	str	r0, [r7, #48]	; 0x30
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d101      	bne.n	800ed1c <__ssvfscanf_r+0xc94>
 800ed18:	f7ff fa8c 	bl	800e234 <__ssvfscanf_r+0x1ac>
 800ed1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1e:	6020      	str	r0, [r4, #0]
 800ed20:	88de      	ldrh	r6, [r3, #6]
 800ed22:	889d      	ldrh	r5, [r3, #4]
 800ed24:	6818      	ldr	r0, [r3, #0]
 800ed26:	42ae      	cmp	r6, r5
 800ed28:	d310      	bcc.n	800ed4c <__ssvfscanf_r+0xcc4>
 800ed2a:	4ba5      	ldr	r3, [pc, #660]	; (800efc0 <__ssvfscanf_r+0xf38>)
 800ed2c:	429d      	cmp	r5, r3
 800ed2e:	d901      	bls.n	800ed34 <__ssvfscanf_r+0xcac>
 800ed30:	f7ff fb7b 	bl	800e42a <__ssvfscanf_r+0x3a2>
 800ed34:	3508      	adds	r5, #8
 800ed36:	b2ad      	uxth	r5, r5
 800ed38:	00a9      	lsls	r1, r5, #2
 800ed3a:	f001 fc9f 	bl	801067c <realloc>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d101      	bne.n	800ed46 <__ssvfscanf_r+0xcbe>
 800ed42:	f7ff fb72 	bl	800e42a <__ssvfscanf_r+0x3a2>
 800ed46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed48:	6018      	str	r0, [r3, #0]
 800ed4a:	809d      	strh	r5, [r3, #4]
 800ed4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4e:	1c72      	adds	r2, r6, #1
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	00b6      	lsls	r6, r6, #2
 800ed54:	50f4      	str	r4, [r6, r3]
 800ed56:	2320      	movs	r3, #32
 800ed58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed5a:	0026      	movs	r6, r4
 800ed5c:	80ca      	strh	r2, [r1, #6]
 800ed5e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ed60:	633b      	str	r3, [r7, #48]	; 0x30
 800ed62:	0025      	movs	r5, r4
 800ed64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed66:	4995      	ldr	r1, [pc, #596]	; (800efbc <__ssvfscanf_r+0xf34>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	781a      	ldrb	r2, [r3, #0]
 800ed6c:	5c8a      	ldrb	r2, [r1, r2]
 800ed6e:	2108      	movs	r1, #8
 800ed70:	420a      	tst	r2, r1
 800ed72:	d004      	beq.n	800ed7e <__ssvfscanf_r+0xcf6>
 800ed74:	623c      	str	r4, [r7, #32]
 800ed76:	e031      	b.n	800eddc <__ssvfscanf_r+0xd54>
 800ed78:	0016      	movs	r6, r2
 800ed7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ed7c:	e7f1      	b.n	800ed62 <__ssvfscanf_r+0xcda>
 800ed7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed82:	6852      	ldr	r2, [r2, #4]
 800ed84:	3a01      	subs	r2, #1
 800ed86:	604a      	str	r2, [r1, #4]
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	600a      	str	r2, [r1, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	1c62      	adds	r2, r4, #1
 800ed90:	623a      	str	r2, [r7, #32]
 800ed92:	7023      	strb	r3, [r4, #0]
 800ed94:	2e00      	cmp	r6, #0
 800ed96:	d010      	beq.n	800edba <__ssvfscanf_r+0xd32>
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	1b54      	subs	r4, r2, r5
 800ed9c:	429c      	cmp	r4, r3
 800ed9e:	d30c      	bcc.n	800edba <__ssvfscanf_r+0xd32>
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	0028      	movs	r0, r5
 800eda4:	0019      	movs	r1, r3
 800eda6:	633b      	str	r3, [r7, #48]	; 0x30
 800eda8:	f001 fc68 	bl	801067c <realloc>
 800edac:	1e05      	subs	r5, r0, #0
 800edae:	d101      	bne.n	800edb4 <__ssvfscanf_r+0xd2c>
 800edb0:	f7ff fa40 	bl	800e234 <__ssvfscanf_r+0x1ac>
 800edb4:	1903      	adds	r3, r0, r4
 800edb6:	623b      	str	r3, [r7, #32]
 800edb8:	6030      	str	r0, [r6, #0]
 800edba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edbc:	3b01      	subs	r3, #1
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00b      	beq.n	800eddc <__ssvfscanf_r+0xd54>
 800edc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	dd01      	ble.n	800edd0 <__ssvfscanf_r+0xd48>
 800edcc:	6a3c      	ldr	r4, [r7, #32]
 800edce:	e7c9      	b.n	800ed64 <__ssvfscanf_r+0xcdc>
 800edd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edd4:	f002 f8ec 	bl	8010fb0 <__ssrefill_r>
 800edd8:	2800      	cmp	r0, #0
 800edda:	d0f7      	beq.n	800edcc <__ssvfscanf_r+0xd44>
 800eddc:	2300      	movs	r3, #0
 800edde:	6a3a      	ldr	r2, [r7, #32]
 800ede0:	7013      	strb	r3, [r2, #0]
 800ede2:	1b55      	subs	r5, r2, r5
 800ede4:	2e00      	cmp	r6, #0
 800ede6:	d009      	beq.n	800edfc <__ssvfscanf_r+0xd74>
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	1c69      	adds	r1, r5, #1
 800edec:	428b      	cmp	r3, r1
 800edee:	d905      	bls.n	800edfc <__ssvfscanf_r+0xd74>
 800edf0:	6830      	ldr	r0, [r6, #0]
 800edf2:	f001 fc43 	bl	801067c <realloc>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	d000      	beq.n	800edfc <__ssvfscanf_r+0xd74>
 800edfa:	6030      	str	r0, [r6, #0]
 800edfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfe:	195b      	adds	r3, r3, r5
 800ee00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	3301      	adds	r3, #1
 800ee06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee08:	e63c      	b.n	800ea84 <__ssvfscanf_r+0x9fc>
 800ee0a:	22ae      	movs	r2, #174	; 0xae
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee10:	0052      	lsls	r2, r2, #1
 800ee12:	3b01      	subs	r3, #1
 800ee14:	6239      	str	r1, [r7, #32]
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d906      	bls.n	800ee28 <__ssvfscanf_r+0xda0>
 800ee1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1c:	3b5e      	subs	r3, #94	; 0x5e
 800ee1e:	3bff      	subs	r3, #255	; 0xff
 800ee20:	623b      	str	r3, [r7, #32]
 800ee22:	235e      	movs	r3, #94	; 0x5e
 800ee24:	33ff      	adds	r3, #255	; 0xff
 800ee26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee28:	24d8      	movs	r4, #216	; 0xd8
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	2248      	movs	r2, #72	; 0x48
 800ee2e:	0124      	lsls	r4, r4, #4
 800ee30:	4334      	orrs	r4, r6
 800ee32:	2680      	movs	r6, #128	; 0x80
 800ee34:	61fb      	str	r3, [r7, #28]
 800ee36:	3319      	adds	r3, #25
 800ee38:	33ff      	adds	r3, #255	; 0xff
 800ee3a:	189b      	adds	r3, r3, r2
 800ee3c:	19dd      	adds	r5, r3, r7
 800ee3e:	00b6      	lsls	r6, r6, #2
 800ee40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	7813      	ldrb	r3, [r2, #0]
 800ee46:	2b39      	cmp	r3, #57	; 0x39
 800ee48:	d80f      	bhi.n	800ee6a <__ssvfscanf_r+0xde2>
 800ee4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4c:	d91b      	bls.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ee4e:	0018      	movs	r0, r3
 800ee50:	382b      	subs	r0, #43	; 0x2b
 800ee52:	280e      	cmp	r0, #14
 800ee54:	d817      	bhi.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ee56:	f7f1 f95d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ee5a:	168f      	.short	0x168f
 800ee5c:	5416168f 	.word	0x5416168f
 800ee60:	80808080 	.word	0x80808080
 800ee64:	87808080 	.word	0x87808080
 800ee68:	87          	.byte	0x87
 800ee69:	00          	.byte	0x00
 800ee6a:	2b66      	cmp	r3, #102	; 0x66
 800ee6c:	d83a      	bhi.n	800eee4 <__ssvfscanf_r+0xe5c>
 800ee6e:	2b60      	cmp	r3, #96	; 0x60
 800ee70:	d803      	bhi.n	800ee7a <__ssvfscanf_r+0xdf2>
 800ee72:	2b46      	cmp	r3, #70	; 0x46
 800ee74:	d805      	bhi.n	800ee82 <__ssvfscanf_r+0xdfa>
 800ee76:	2b40      	cmp	r3, #64	; 0x40
 800ee78:	d905      	bls.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ee7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee7c:	290a      	cmp	r1, #10
 800ee7e:	dc71      	bgt.n	800ef64 <__ssvfscanf_r+0xedc>
 800ee80:	e001      	b.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ee82:	2b58      	cmp	r3, #88	; 0x58
 800ee84:	d030      	beq.n	800eee8 <__ssvfscanf_r+0xe60>
 800ee86:	05e3      	lsls	r3, r4, #23
 800ee88:	d515      	bpl.n	800eeb6 <__ssvfscanf_r+0xe2e>
 800ee8a:	238c      	movs	r3, #140	; 0x8c
 800ee8c:	2248      	movs	r2, #72	; 0x48
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	189b      	adds	r3, r3, r2
 800ee92:	19db      	adds	r3, r3, r7
 800ee94:	429d      	cmp	r5, r3
 800ee96:	d905      	bls.n	800eea4 <__ssvfscanf_r+0xe1c>
 800ee98:	3d01      	subs	r5, #1
 800ee9a:	7829      	ldrb	r1, [r5, #0]
 800ee9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eea0:	f002 f84a 	bl	8010f38 <_sungetc_r>
 800eea4:	238c      	movs	r3, #140	; 0x8c
 800eea6:	2248      	movs	r2, #72	; 0x48
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	189b      	adds	r3, r3, r2
 800eeac:	19db      	adds	r3, r3, r7
 800eeae:	429d      	cmp	r5, r3
 800eeb0:	d101      	bne.n	800eeb6 <__ssvfscanf_r+0xe2e>
 800eeb2:	f7ff f9e6 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800eeb6:	2310      	movs	r3, #16
 800eeb8:	0022      	movs	r2, r4
 800eeba:	401a      	ands	r2, r3
 800eebc:	421c      	tst	r4, r3
 800eebe:	d171      	bne.n	800efa4 <__ssvfscanf_r+0xf1c>
 800eec0:	218c      	movs	r1, #140	; 0x8c
 800eec2:	2048      	movs	r0, #72	; 0x48
 800eec4:	0049      	lsls	r1, r1, #1
 800eec6:	1809      	adds	r1, r1, r0
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	697e      	ldr	r6, [r7, #20]
 800eecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eece:	19c9      	adds	r1, r1, r7
 800eed0:	702a      	strb	r2, [r5, #0]
 800eed2:	47b0      	blx	r6
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	1d1e      	adds	r6, r3, #4
 800eed8:	06a3      	lsls	r3, r4, #26
 800eeda:	d559      	bpl.n	800ef90 <__ssvfscanf_r+0xf08>
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6018      	str	r0, [r3, #0]
 800eee2:	e05b      	b.n	800ef9c <__ssvfscanf_r+0xf14>
 800eee4:	2b78      	cmp	r3, #120	; 0x78
 800eee6:	d1ce      	bne.n	800ee86 <__ssvfscanf_r+0xdfe>
 800eee8:	21c0      	movs	r1, #192	; 0xc0
 800eeea:	00c9      	lsls	r1, r1, #3
 800eeec:	4021      	ands	r1, r4
 800eeee:	42b1      	cmp	r1, r6
 800eef0:	d1c9      	bne.n	800ee86 <__ssvfscanf_r+0xdfe>
 800eef2:	4934      	ldr	r1, [pc, #208]	; (800efc4 <__ssvfscanf_r+0xf3c>)
 800eef4:	4021      	ands	r1, r4
 800eef6:	24a0      	movs	r4, #160	; 0xa0
 800eef8:	00e4      	lsls	r4, r4, #3
 800eefa:	430c      	orrs	r4, r1
 800eefc:	2110      	movs	r1, #16
 800eefe:	6279      	str	r1, [r7, #36]	; 0x24
 800ef00:	e00b      	b.n	800ef1a <__ssvfscanf_r+0xe92>
 800ef02:	0521      	lsls	r1, r4, #20
 800ef04:	d509      	bpl.n	800ef1a <__ssvfscanf_r+0xe92>
 800ef06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef08:	2900      	cmp	r1, #0
 800ef0a:	d102      	bne.n	800ef12 <__ssvfscanf_r+0xe8a>
 800ef0c:	3108      	adds	r1, #8
 800ef0e:	4334      	orrs	r4, r6
 800ef10:	6279      	str	r1, [r7, #36]	; 0x24
 800ef12:	0561      	lsls	r1, r4, #21
 800ef14:	d504      	bpl.n	800ef20 <__ssvfscanf_r+0xe98>
 800ef16:	492c      	ldr	r1, [pc, #176]	; (800efc8 <__ssvfscanf_r+0xf40>)
 800ef18:	400c      	ands	r4, r1
 800ef1a:	702b      	strb	r3, [r5, #0]
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	e00c      	b.n	800ef3a <__ssvfscanf_r+0xeb2>
 800ef20:	4b2a      	ldr	r3, [pc, #168]	; (800efcc <__ssvfscanf_r+0xf44>)
 800ef22:	401c      	ands	r4, r3
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d004      	beq.n	800ef34 <__ssvfscanf_r+0xeac>
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	623b      	str	r3, [r7, #32]
 800ef2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef30:	3301      	adds	r3, #1
 800ef32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	3301      	adds	r3, #1
 800ef38:	61fb      	str	r3, [r7, #28]
 800ef3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	604b      	str	r3, [r1, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	dd1c      	ble.n	800ef82 <__ssvfscanf_r+0xefa>
 800ef48:	3201      	adds	r2, #1
 800ef4a:	600a      	str	r2, [r1, #0]
 800ef4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d000      	beq.n	800ef58 <__ssvfscanf_r+0xed0>
 800ef56:	e773      	b.n	800ee40 <__ssvfscanf_r+0xdb8>
 800ef58:	e795      	b.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ef5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef5c:	491c      	ldr	r1, [pc, #112]	; (800efd0 <__ssvfscanf_r+0xf48>)
 800ef5e:	0040      	lsls	r0, r0, #1
 800ef60:	5e41      	ldrsh	r1, [r0, r1]
 800ef62:	6279      	str	r1, [r7, #36]	; 0x24
 800ef64:	491b      	ldr	r1, [pc, #108]	; (800efd4 <__ssvfscanf_r+0xf4c>)
 800ef66:	e7d7      	b.n	800ef18 <__ssvfscanf_r+0xe90>
 800ef68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef6a:	4919      	ldr	r1, [pc, #100]	; (800efd0 <__ssvfscanf_r+0xf48>)
 800ef6c:	0040      	lsls	r0, r0, #1
 800ef6e:	5e41      	ldrsh	r1, [r0, r1]
 800ef70:	6279      	str	r1, [r7, #36]	; 0x24
 800ef72:	2908      	cmp	r1, #8
 800ef74:	dcf6      	bgt.n	800ef64 <__ssvfscanf_r+0xedc>
 800ef76:	e786      	b.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ef78:	2180      	movs	r1, #128	; 0x80
 800ef7a:	420c      	tst	r4, r1
 800ef7c:	d083      	beq.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ef7e:	438c      	bics	r4, r1
 800ef80:	e7cb      	b.n	800ef1a <__ssvfscanf_r+0xe92>
 800ef82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef86:	f002 f813 	bl	8010fb0 <__ssrefill_r>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d0de      	beq.n	800ef4c <__ssvfscanf_r+0xec4>
 800ef8e:	e77a      	b.n	800ee86 <__ssvfscanf_r+0xdfe>
 800ef90:	2308      	movs	r3, #8
 800ef92:	421c      	tst	r4, r3
 800ef94:	d020      	beq.n	800efd8 <__ssvfscanf_r+0xf50>
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	7018      	strb	r0, [r3, #0]
 800ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9e:	633e      	str	r6, [r7, #48]	; 0x30
 800efa0:	3301      	adds	r3, #1
 800efa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efa4:	238c      	movs	r3, #140	; 0x8c
 800efa6:	2248      	movs	r2, #72	; 0x48
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	189b      	adds	r3, r3, r2
 800efac:	19db      	adds	r3, r3, r7
 800efae:	1aed      	subs	r5, r5, r3
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	18ed      	adds	r5, r5, r3
 800efb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb6:	195b      	adds	r3, r3, r5
 800efb8:	f7ff f92d 	bl	800e216 <__ssvfscanf_r+0x18e>
 800efbc:	08013eb1 	.word	0x08013eb1
 800efc0:	0000fff6 	.word	0x0000fff6
 800efc4:	fffffdff 	.word	0xfffffdff
 800efc8:	fffffa7f 	.word	0xfffffa7f
 800efcc:	fffffc7f 	.word	0xfffffc7f
 800efd0:	080141de 	.word	0x080141de
 800efd4:	fffff47f 	.word	0xfffff47f
 800efd8:	0763      	lsls	r3, r4, #29
 800efda:	d503      	bpl.n	800efe4 <__ssvfscanf_r+0xf5c>
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	8018      	strh	r0, [r3, #0]
 800efe2:	e7db      	b.n	800ef9c <__ssvfscanf_r+0xf14>
 800efe4:	2301      	movs	r3, #1
 800efe6:	0022      	movs	r2, r4
 800efe8:	401a      	ands	r2, r3
 800efea:	421c      	tst	r4, r3
 800efec:	d000      	beq.n	800eff0 <__ssvfscanf_r+0xf68>
 800efee:	e775      	b.n	800eedc <__ssvfscanf_r+0xe54>
 800eff0:	07a4      	lsls	r4, r4, #30
 800eff2:	d400      	bmi.n	800eff6 <__ssvfscanf_r+0xf6e>
 800eff4:	e772      	b.n	800eedc <__ssvfscanf_r+0xe54>
 800eff6:	4ba8      	ldr	r3, [pc, #672]	; (800f298 <__ssvfscanf_r+0x1210>)
 800eff8:	6979      	ldr	r1, [r7, #20]
 800effa:	4299      	cmp	r1, r3
 800effc:	d10c      	bne.n	800f018 <__ssvfscanf_r+0xf90>
 800effe:	218c      	movs	r1, #140	; 0x8c
 800f000:	2048      	movs	r0, #72	; 0x48
 800f002:	0049      	lsls	r1, r1, #1
 800f004:	1809      	adds	r1, r1, r0
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f00a:	19c9      	adds	r1, r1, r7
 800f00c:	f001 fecc 	bl	8010da8 <_strtoull_r>
 800f010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	c303      	stmia	r3!, {r0, r1}
 800f016:	e7c1      	b.n	800ef9c <__ssvfscanf_r+0xf14>
 800f018:	218c      	movs	r1, #140	; 0x8c
 800f01a:	2048      	movs	r0, #72	; 0x48
 800f01c:	0049      	lsls	r1, r1, #1
 800f01e:	1809      	adds	r1, r1, r0
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f024:	19c9      	adds	r1, r1, r7
 800f026:	f001 fe0d 	bl	8010c44 <_strtoll_r>
 800f02a:	e7f1      	b.n	800f010 <__ssvfscanf_r+0xf88>
 800f02c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f02e:	f000 fb9f 	bl	800f770 <_localeconv_r>
 800f032:	22ae      	movs	r2, #174	; 0xae
 800f034:	2100      	movs	r1, #0
 800f036:	6803      	ldr	r3, [r0, #0]
 800f038:	0052      	lsls	r2, r2, #1
 800f03a:	603b      	str	r3, [r7, #0]
 800f03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03e:	60f9      	str	r1, [r7, #12]
 800f040:	3b01      	subs	r3, #1
 800f042:	4293      	cmp	r3, r2
 800f044:	d906      	bls.n	800f054 <__ssvfscanf_r+0xfcc>
 800f046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f048:	3b5e      	subs	r3, #94	; 0x5e
 800f04a:	3bff      	subs	r3, #255	; 0xff
 800f04c:	60fb      	str	r3, [r7, #12]
 800f04e:	235e      	movs	r3, #94	; 0x5e
 800f050:	33ff      	adds	r3, #255	; 0xff
 800f052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f054:	23f0      	movs	r3, #240	; 0xf0
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	431e      	orrs	r6, r3
 800f05a:	238c      	movs	r3, #140	; 0x8c
 800f05c:	2248      	movs	r2, #72	; 0x48
 800f05e:	2400      	movs	r4, #0
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	189b      	adds	r3, r3, r2
 800f064:	623c      	str	r4, [r7, #32]
 800f066:	607c      	str	r4, [r7, #4]
 800f068:	60bc      	str	r4, [r7, #8]
 800f06a:	61fc      	str	r4, [r7, #28]
 800f06c:	613c      	str	r4, [r7, #16]
 800f06e:	19dd      	adds	r5, r3, r7
 800f070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	781a      	ldrb	r2, [r3, #0]
 800f076:	0010      	movs	r0, r2
 800f078:	382b      	subs	r0, #43	; 0x2b
 800f07a:	284e      	cmp	r0, #78	; 0x4e
 800f07c:	d900      	bls.n	800f080 <__ssvfscanf_r+0xff8>
 800f07e:	e133      	b.n	800f2e8 <__ssvfscanf_r+0x1260>
 800f080:	f7f1 f852 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f084:	0132009b 	.word	0x0132009b
 800f088:	0132009b 	.word	0x0132009b
 800f08c:	004f0132 	.word	0x004f0132
 800f090:	00720072 	.word	0x00720072
 800f094:	00720072 	.word	0x00720072
 800f098:	00720072 	.word	0x00720072
 800f09c:	00720072 	.word	0x00720072
 800f0a0:	01320072 	.word	0x01320072
 800f0a4:	01320132 	.word	0x01320132
 800f0a8:	01320132 	.word	0x01320132
 800f0ac:	01320132 	.word	0x01320132
 800f0b0:	007b00bc 	.word	0x007b00bc
 800f0b4:	007b007b 	.word	0x007b007b
 800f0b8:	00f7012f 	.word	0x00f7012f
 800f0bc:	01320132 	.word	0x01320132
 800f0c0:	013200e3 	.word	0x013200e3
 800f0c4:	01320132 	.word	0x01320132
 800f0c8:	00a00132 	.word	0x00a00132
 800f0cc:	01120132 	.word	0x01120132
 800f0d0:	01320132 	.word	0x01320132
 800f0d4:	01010132 	.word	0x01010132
 800f0d8:	01320132 	.word	0x01320132
 800f0dc:	00820132 	.word	0x00820132
 800f0e0:	01320105 	.word	0x01320105
 800f0e4:	01320132 	.word	0x01320132
 800f0e8:	01320132 	.word	0x01320132
 800f0ec:	01320132 	.word	0x01320132
 800f0f0:	007b00bc 	.word	0x007b00bc
 800f0f4:	007b007b 	.word	0x007b007b
 800f0f8:	00f7012f 	.word	0x00f7012f
 800f0fc:	01320132 	.word	0x01320132
 800f100:	013200e3 	.word	0x013200e3
 800f104:	01320132 	.word	0x01320132
 800f108:	00a00132 	.word	0x00a00132
 800f10c:	01120132 	.word	0x01120132
 800f110:	01320132 	.word	0x01320132
 800f114:	01010132 	.word	0x01010132
 800f118:	01320132 	.word	0x01320132
 800f11c:	00820132 	.word	0x00820132
 800f120:	0105      	.short	0x0105
 800f122:	05f1      	lsls	r1, r6, #23
 800f124:	d520      	bpl.n	800f168 <__ssvfscanf_r+0x10e0>
 800f126:	2280      	movs	r2, #128	; 0x80
 800f128:	4396      	bics	r6, r2
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	3201      	adds	r2, #1
 800f12e:	61fa      	str	r2, [r7, #28]
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	2a00      	cmp	r2, #0
 800f134:	d004      	beq.n	800f140 <__ssvfscanf_r+0x10b8>
 800f136:	3a01      	subs	r2, #1
 800f138:	60fa      	str	r2, [r7, #12]
 800f13a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f13c:	3201      	adds	r2, #1
 800f13e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f144:	3a01      	subs	r2, #1
 800f146:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f14a:	3201      	adds	r2, #1
 800f14c:	63ba      	str	r2, [r7, #56]	; 0x38
 800f14e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f150:	6852      	ldr	r2, [r2, #4]
 800f152:	3a01      	subs	r2, #1
 800f154:	604a      	str	r2, [r1, #4]
 800f156:	2a00      	cmp	r2, #0
 800f158:	dc00      	bgt.n	800f15c <__ssvfscanf_r+0x10d4>
 800f15a:	e0d6      	b.n	800f30a <__ssvfscanf_r+0x1282>
 800f15c:	3301      	adds	r3, #1
 800f15e:	600b      	str	r3, [r1, #0]
 800f160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f162:	2b00      	cmp	r3, #0
 800f164:	d184      	bne.n	800f070 <__ssvfscanf_r+0xfe8>
 800f166:	e057      	b.n	800f218 <__ssvfscanf_r+0x1190>
 800f168:	6a39      	ldr	r1, [r7, #32]
 800f16a:	1909      	adds	r1, r1, r4
 800f16c:	2900      	cmp	r1, #0
 800f16e:	d153      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f170:	494a      	ldr	r1, [pc, #296]	; (800f29c <__ssvfscanf_r+0x1214>)
 800f172:	400e      	ands	r6, r1
 800f174:	702a      	strb	r2, [r5, #0]
 800f176:	3501      	adds	r5, #1
 800f178:	e7e2      	b.n	800f140 <__ssvfscanf_r+0x10b8>
 800f17a:	0531      	lsls	r1, r6, #20
 800f17c:	d54c      	bpl.n	800f218 <__ssvfscanf_r+0x1190>
 800f17e:	6a39      	ldr	r1, [r7, #32]
 800f180:	1909      	adds	r1, r1, r4
 800f182:	2900      	cmp	r1, #0
 800f184:	d040      	beq.n	800f208 <__ssvfscanf_r+0x1180>
 800f186:	e047      	b.n	800f218 <__ssvfscanf_r+0x1190>
 800f188:	2198      	movs	r1, #152	; 0x98
 800f18a:	2080      	movs	r0, #128	; 0x80
 800f18c:	0109      	lsls	r1, r1, #4
 800f18e:	4031      	ands	r1, r6
 800f190:	0040      	lsls	r0, r0, #1
 800f192:	4281      	cmp	r1, r0
 800f194:	d140      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f196:	69f9      	ldr	r1, [r7, #28]
 800f198:	2901      	cmp	r1, #1
 800f19a:	d13d      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f19c:	2080      	movs	r0, #128	; 0x80
 800f19e:	4940      	ldr	r1, [pc, #256]	; (800f2a0 <__ssvfscanf_r+0x1218>)
 800f1a0:	0100      	lsls	r0, r0, #4
 800f1a2:	400e      	ands	r6, r1
 800f1a4:	3132      	adds	r1, #50	; 0x32
 800f1a6:	31ff      	adds	r1, #255	; 0xff
 800f1a8:	7029      	strb	r1, [r5, #0]
 800f1aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1ac:	4306      	orrs	r6, r0
 800f1ae:	3901      	subs	r1, #1
 800f1b0:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f1b2:	3501      	adds	r5, #1
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	61f9      	str	r1, [r7, #28]
 800f1b8:	e7dc      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f1ba:	2180      	movs	r1, #128	; 0x80
 800f1bc:	420e      	tst	r6, r1
 800f1be:	d02b      	beq.n	800f218 <__ssvfscanf_r+0x1190>
 800f1c0:	438e      	bics	r6, r1
 800f1c2:	e7d7      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f1c4:	6a39      	ldr	r1, [r7, #32]
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	d10d      	bne.n	800f1e6 <__ssvfscanf_r+0x115e>
 800f1ca:	69f9      	ldr	r1, [r7, #28]
 800f1cc:	2900      	cmp	r1, #0
 800f1ce:	d10e      	bne.n	800f1ee <__ssvfscanf_r+0x1166>
 800f1d0:	21e0      	movs	r1, #224	; 0xe0
 800f1d2:	0030      	movs	r0, r6
 800f1d4:	00c9      	lsls	r1, r1, #3
 800f1d6:	4008      	ands	r0, r1
 800f1d8:	4288      	cmp	r0, r1
 800f1da:	d108      	bne.n	800f1ee <__ssvfscanf_r+0x1166>
 800f1dc:	4931      	ldr	r1, [pc, #196]	; (800f2a4 <__ssvfscanf_r+0x121c>)
 800f1de:	400e      	ands	r6, r1
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	6239      	str	r1, [r7, #32]
 800f1e4:	e7c6      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f1e6:	6a39      	ldr	r1, [r7, #32]
 800f1e8:	2902      	cmp	r1, #2
 800f1ea:	d100      	bne.n	800f1ee <__ssvfscanf_r+0x1166>
 800f1ec:	e089      	b.n	800f302 <__ssvfscanf_r+0x127a>
 800f1ee:	2c01      	cmp	r4, #1
 800f1f0:	d001      	beq.n	800f1f6 <__ssvfscanf_r+0x116e>
 800f1f2:	2c04      	cmp	r4, #4
 800f1f4:	d110      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f1f6:	3401      	adds	r4, #1
 800f1f8:	b2e4      	uxtb	r4, r4
 800f1fa:	e7bb      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f1fc:	0531      	lsls	r1, r6, #20
 800f1fe:	d508      	bpl.n	800f212 <__ssvfscanf_r+0x118a>
 800f200:	6a39      	ldr	r1, [r7, #32]
 800f202:	1909      	adds	r1, r1, r4
 800f204:	2900      	cmp	r1, #0
 800f206:	d104      	bne.n	800f212 <__ssvfscanf_r+0x118a>
 800f208:	4824      	ldr	r0, [pc, #144]	; (800f29c <__ssvfscanf_r+0x1214>)
 800f20a:	000c      	movs	r4, r1
 800f20c:	4006      	ands	r6, r0
 800f20e:	6239      	str	r1, [r7, #32]
 800f210:	e7b0      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f212:	6a39      	ldr	r1, [r7, #32]
 800f214:	2901      	cmp	r1, #1
 800f216:	d076      	beq.n	800f306 <__ssvfscanf_r+0x127e>
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <__ssvfscanf_r+0x119a>
 800f21e:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <__ssvfscanf_r+0x1218>)
 800f220:	401e      	ands	r6, r3
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	3b01      	subs	r3, #1
 800f226:	2b01      	cmp	r3, #1
 800f228:	d877      	bhi.n	800f31a <__ssvfscanf_r+0x1292>
 800f22a:	238c      	movs	r3, #140	; 0x8c
 800f22c:	2248      	movs	r2, #72	; 0x48
 800f22e:	005b      	lsls	r3, r3, #1
 800f230:	189b      	adds	r3, r3, r2
 800f232:	19db      	adds	r3, r3, r7
 800f234:	429d      	cmp	r5, r3
 800f236:	d801      	bhi.n	800f23c <__ssvfscanf_r+0x11b4>
 800f238:	f7ff f823 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800f23c:	3d01      	subs	r5, #1
 800f23e:	7829      	ldrb	r1, [r5, #0]
 800f240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f244:	f001 fe78 	bl	8010f38 <_sungetc_r>
 800f248:	e7ef      	b.n	800f22a <__ssvfscanf_r+0x11a2>
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	d10c      	bne.n	800f268 <__ssvfscanf_r+0x11e0>
 800f24e:	69f9      	ldr	r1, [r7, #28]
 800f250:	2900      	cmp	r1, #0
 800f252:	d1e4      	bne.n	800f21e <__ssvfscanf_r+0x1196>
 800f254:	21e0      	movs	r1, #224	; 0xe0
 800f256:	0030      	movs	r0, r6
 800f258:	00c9      	lsls	r1, r1, #3
 800f25a:	4008      	ands	r0, r1
 800f25c:	4288      	cmp	r0, r1
 800f25e:	d1e0      	bne.n	800f222 <__ssvfscanf_r+0x119a>
 800f260:	4910      	ldr	r1, [pc, #64]	; (800f2a4 <__ssvfscanf_r+0x121c>)
 800f262:	3401      	adds	r4, #1
 800f264:	400e      	ands	r6, r1
 800f266:	e785      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f268:	20fd      	movs	r0, #253	; 0xfd
 800f26a:	1ee1      	subs	r1, r4, #3
 800f26c:	4201      	tst	r1, r0
 800f26e:	d1d3      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f270:	e7c1      	b.n	800f1f6 <__ssvfscanf_r+0x116e>
 800f272:	0531      	lsls	r1, r6, #20
 800f274:	d503      	bpl.n	800f27e <__ssvfscanf_r+0x11f6>
 800f276:	6a39      	ldr	r1, [r7, #32]
 800f278:	1909      	adds	r1, r1, r4
 800f27a:	2900      	cmp	r1, #0
 800f27c:	d0c4      	beq.n	800f208 <__ssvfscanf_r+0x1180>
 800f27e:	2c02      	cmp	r4, #2
 800f280:	d1ca      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f282:	2403      	movs	r4, #3
 800f284:	e776      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f286:	2c06      	cmp	r4, #6
 800f288:	d1c6      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f28a:	2407      	movs	r4, #7
 800f28c:	e772      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f28e:	2c07      	cmp	r4, #7
 800f290:	d1c2      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f292:	2408      	movs	r4, #8
 800f294:	e76e      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f296:	46c0      	nop			; (mov r8, r8)
 800f298:	08010ae1 	.word	0x08010ae1
 800f29c:	fffffe7f 	.word	0xfffffe7f
 800f2a0:	fffffeff 	.word	0xfffffeff
 800f2a4:	fffff87f 	.word	0xfffff87f
 800f2a8:	0531      	lsls	r1, r6, #20
 800f2aa:	d5b5      	bpl.n	800f218 <__ssvfscanf_r+0x1190>
 800f2ac:	21a0      	movs	r1, #160	; 0xa0
 800f2ae:	2080      	movs	r0, #128	; 0x80
 800f2b0:	00c9      	lsls	r1, r1, #3
 800f2b2:	00c0      	lsls	r0, r0, #3
 800f2b4:	4031      	ands	r1, r6
 800f2b6:	4281      	cmp	r1, r0
 800f2b8:	d004      	beq.n	800f2c4 <__ssvfscanf_r+0x123c>
 800f2ba:	4206      	tst	r6, r0
 800f2bc:	d0ac      	beq.n	800f218 <__ssvfscanf_r+0x1190>
 800f2be:	69f9      	ldr	r1, [r7, #28]
 800f2c0:	2900      	cmp	r1, #0
 800f2c2:	d0ae      	beq.n	800f222 <__ssvfscanf_r+0x119a>
 800f2c4:	2180      	movs	r1, #128	; 0x80
 800f2c6:	0089      	lsls	r1, r1, #2
 800f2c8:	420e      	tst	r6, r1
 800f2ca:	d104      	bne.n	800f2d6 <__ssvfscanf_r+0x124e>
 800f2cc:	69f9      	ldr	r1, [r7, #28]
 800f2ce:	6938      	ldr	r0, [r7, #16]
 800f2d0:	607d      	str	r5, [r7, #4]
 800f2d2:	1a09      	subs	r1, r1, r0
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	20c0      	movs	r0, #192	; 0xc0
 800f2d8:	4973      	ldr	r1, [pc, #460]	; (800f4a8 <__ssvfscanf_r+0x1420>)
 800f2da:	0040      	lsls	r0, r0, #1
 800f2dc:	400e      	ands	r6, r1
 800f2de:	4306      	orrs	r6, r0
 800f2e0:	e768      	b.n	800f1b4 <__ssvfscanf_r+0x112c>
 800f2e2:	0531      	lsls	r1, r6, #20
 800f2e4:	d5e2      	bpl.n	800f2ac <__ssvfscanf_r+0x1224>
 800f2e6:	e74a      	b.n	800f17e <__ssvfscanf_r+0x10f6>
 800f2e8:	6839      	ldr	r1, [r7, #0]
 800f2ea:	7809      	ldrb	r1, [r1, #0]
 800f2ec:	4291      	cmp	r1, r2
 800f2ee:	d193      	bne.n	800f218 <__ssvfscanf_r+0x1190>
 800f2f0:	2180      	movs	r1, #128	; 0x80
 800f2f2:	0089      	lsls	r1, r1, #2
 800f2f4:	420e      	tst	r6, r1
 800f2f6:	d08f      	beq.n	800f218 <__ssvfscanf_r+0x1190>
 800f2f8:	496c      	ldr	r1, [pc, #432]	; (800f4ac <__ssvfscanf_r+0x1424>)
 800f2fa:	400e      	ands	r6, r1
 800f2fc:	69f9      	ldr	r1, [r7, #28]
 800f2fe:	6139      	str	r1, [r7, #16]
 800f300:	e738      	b.n	800f174 <__ssvfscanf_r+0x10ec>
 800f302:	2103      	movs	r1, #3
 800f304:	e76d      	b.n	800f1e2 <__ssvfscanf_r+0x115a>
 800f306:	2102      	movs	r1, #2
 800f308:	e76b      	b.n	800f1e2 <__ssvfscanf_r+0x115a>
 800f30a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f30c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f30e:	f001 fe4f 	bl	8010fb0 <__ssrefill_r>
 800f312:	2800      	cmp	r0, #0
 800f314:	d100      	bne.n	800f318 <__ssvfscanf_r+0x1290>
 800f316:	e723      	b.n	800f160 <__ssvfscanf_r+0x10d8>
 800f318:	e77e      	b.n	800f218 <__ssvfscanf_r+0x1190>
 800f31a:	1e63      	subs	r3, r4, #1
 800f31c:	2b06      	cmp	r3, #6
 800f31e:	d825      	bhi.n	800f36c <__ssvfscanf_r+0x12e4>
 800f320:	2c02      	cmp	r4, #2
 800f322:	d837      	bhi.n	800f394 <__ssvfscanf_r+0x130c>
 800f324:	238c      	movs	r3, #140	; 0x8c
 800f326:	2248      	movs	r2, #72	; 0x48
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	189b      	adds	r3, r3, r2
 800f32c:	19db      	adds	r3, r3, r7
 800f32e:	429d      	cmp	r5, r3
 800f330:	d801      	bhi.n	800f336 <__ssvfscanf_r+0x12ae>
 800f332:	f7fe ffa6 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800f336:	3d01      	subs	r5, #1
 800f338:	7829      	ldrb	r1, [r5, #0]
 800f33a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f33c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f33e:	f001 fdfb 	bl	8010f38 <_sungetc_r>
 800f342:	e7ef      	b.n	800f324 <__ssvfscanf_r+0x129c>
 800f344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f348:	3b01      	subs	r3, #1
 800f34a:	7819      	ldrb	r1, [r3, #0]
 800f34c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f34e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f350:	f001 fdf2 	bl	8010f38 <_sungetc_r>
 800f354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f356:	6a3a      	ldr	r2, [r7, #32]
 800f358:	189b      	adds	r3, r3, r2
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	2b03      	cmp	r3, #3
 800f35e:	d8f1      	bhi.n	800f344 <__ssvfscanf_r+0x12bc>
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	3c03      	subs	r4, #3
 800f364:	b2e4      	uxtb	r4, r4
 800f366:	1b1b      	subs	r3, r3, r4
 800f368:	1b2d      	subs	r5, r5, r4
 800f36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f36c:	05f3      	lsls	r3, r6, #23
 800f36e:	d52f      	bpl.n	800f3d0 <__ssvfscanf_r+0x1348>
 800f370:	0573      	lsls	r3, r6, #21
 800f372:	d514      	bpl.n	800f39e <__ssvfscanf_r+0x1316>
 800f374:	238c      	movs	r3, #140	; 0x8c
 800f376:	2248      	movs	r2, #72	; 0x48
 800f378:	005b      	lsls	r3, r3, #1
 800f37a:	189b      	adds	r3, r3, r2
 800f37c:	19db      	adds	r3, r3, r7
 800f37e:	429d      	cmp	r5, r3
 800f380:	d801      	bhi.n	800f386 <__ssvfscanf_r+0x12fe>
 800f382:	f7fe ff7e 	bl	800e282 <__ssvfscanf_r+0x1fa>
 800f386:	3d01      	subs	r5, #1
 800f388:	7829      	ldrb	r1, [r5, #0]
 800f38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f38c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f38e:	f001 fdd3 	bl	8010f38 <_sungetc_r>
 800f392:	e7ef      	b.n	800f374 <__ssvfscanf_r+0x12ec>
 800f394:	1b63      	subs	r3, r4, r5
 800f396:	b2db      	uxtb	r3, r3
 800f398:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f39a:	623b      	str	r3, [r7, #32]
 800f39c:	e7da      	b.n	800f354 <__ssvfscanf_r+0x12cc>
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	1e6c      	subs	r4, r5, #1
 800f3a2:	7821      	ldrb	r1, [r4, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3a8:	2965      	cmp	r1, #101	; 0x65
 800f3aa:	d00a      	beq.n	800f3c2 <__ssvfscanf_r+0x133a>
 800f3ac:	2945      	cmp	r1, #69	; 0x45
 800f3ae:	d008      	beq.n	800f3c2 <__ssvfscanf_r+0x133a>
 800f3b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3b4:	f001 fdc0 	bl	8010f38 <_sungetc_r>
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	1eac      	subs	r4, r5, #2
 800f3bc:	3b02      	subs	r3, #2
 800f3be:	7821      	ldrb	r1, [r4, #0]
 800f3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c2:	0025      	movs	r5, r4
 800f3c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3c8:	f001 fdb6 	bl	8010f38 <_sungetc_r>
 800f3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3d0:	2310      	movs	r3, #16
 800f3d2:	0032      	movs	r2, r6
 800f3d4:	401a      	ands	r2, r3
 800f3d6:	421e      	tst	r6, r3
 800f3d8:	d001      	beq.n	800f3de <__ssvfscanf_r+0x1356>
 800f3da:	f7fe fe71 	bl	800e0c0 <__ssvfscanf_r+0x38>
 800f3de:	23c0      	movs	r3, #192	; 0xc0
 800f3e0:	2180      	movs	r1, #128	; 0x80
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	702a      	strb	r2, [r5, #0]
 800f3e6:	4033      	ands	r3, r6
 800f3e8:	00c9      	lsls	r1, r1, #3
 800f3ea:	428b      	cmp	r3, r1
 800f3ec:	d11f      	bne.n	800f42e <__ssvfscanf_r+0x13a6>
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	69fa      	ldr	r2, [r7, #28]
 800f3f2:	69f9      	ldr	r1, [r7, #28]
 800f3f4:	1a9a      	subs	r2, r3, r2
 800f3f6:	428b      	cmp	r3, r1
 800f3f8:	d125      	bne.n	800f446 <__ssvfscanf_r+0x13be>
 800f3fa:	238c      	movs	r3, #140	; 0x8c
 800f3fc:	2148      	movs	r1, #72	; 0x48
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	185b      	adds	r3, r3, r1
 800f402:	19d9      	adds	r1, r3, r7
 800f404:	2200      	movs	r2, #0
 800f406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f408:	f7fb ffca 	bl	800b3a0 <_strtod_r>
 800f40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40e:	0004      	movs	r4, r0
 800f410:	3304      	adds	r3, #4
 800f412:	000d      	movs	r5, r1
 800f414:	623b      	str	r3, [r7, #32]
 800f416:	07f3      	lsls	r3, r6, #31
 800f418:	d523      	bpl.n	800f462 <__ssvfscanf_r+0x13da>
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	601c      	str	r4, [r3, #0]
 800f420:	605d      	str	r5, [r3, #4]
 800f422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f424:	3301      	adds	r3, #1
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f428:	6a3b      	ldr	r3, [r7, #32]
 800f42a:	f7fe ffa5 	bl	800e378 <__ssvfscanf_r+0x2f0>
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d0e2      	beq.n	800f3fa <__ssvfscanf_r+0x1372>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f438:	1c59      	adds	r1, r3, #1
 800f43a:	230a      	movs	r3, #10
 800f43c:	f7fc f84c 	bl	800b4d8 <_strtol_r>
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	687d      	ldr	r5, [r7, #4]
 800f444:	1ac2      	subs	r2, r0, r3
 800f446:	2148      	movs	r1, #72	; 0x48
 800f448:	4b19      	ldr	r3, [pc, #100]	; (800f4b0 <__ssvfscanf_r+0x1428>)
 800f44a:	185b      	adds	r3, r3, r1
 800f44c:	19db      	adds	r3, r3, r7
 800f44e:	429d      	cmp	r5, r3
 800f450:	d302      	bcc.n	800f458 <__ssvfscanf_r+0x13d0>
 800f452:	4b18      	ldr	r3, [pc, #96]	; (800f4b4 <__ssvfscanf_r+0x142c>)
 800f454:	185b      	adds	r3, r3, r1
 800f456:	19dd      	adds	r5, r3, r7
 800f458:	0028      	movs	r0, r5
 800f45a:	4917      	ldr	r1, [pc, #92]	; (800f4b8 <__ssvfscanf_r+0x1430>)
 800f45c:	f7fc f944 	bl	800b6e8 <sprintf>
 800f460:	e7cb      	b.n	800f3fa <__ssvfscanf_r+0x1372>
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f468:	07b6      	lsls	r6, r6, #30
 800f46a:	d4d8      	bmi.n	800f41e <__ssvfscanf_r+0x1396>
 800f46c:	0002      	movs	r2, r0
 800f46e:	000b      	movs	r3, r1
 800f470:	f7f2 ff40 	bl	80022f4 <__aeabi_dcmpun>
 800f474:	2800      	cmp	r0, #0
 800f476:	d005      	beq.n	800f484 <__ssvfscanf_r+0x13fc>
 800f478:	4810      	ldr	r0, [pc, #64]	; (800f4bc <__ssvfscanf_r+0x1434>)
 800f47a:	f7fc fabf 	bl	800b9fc <nanf>
 800f47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f480:	6018      	str	r0, [r3, #0]
 800f482:	e7ce      	b.n	800f422 <__ssvfscanf_r+0x139a>
 800f484:	0020      	movs	r0, r4
 800f486:	0029      	movs	r1, r5
 800f488:	f7f2 ffde 	bl	8002448 <__aeabi_d2f>
 800f48c:	e7f7      	b.n	800f47e <__ssvfscanf_r+0x13f6>
 800f48e:	00a3      	lsls	r3, r4, #2
 800f490:	18ed      	adds	r5, r5, r3
 800f492:	682b      	ldr	r3, [r5, #0]
 800f494:	3401      	adds	r4, #1
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	f7fa ff32 	bl	800a300 <free>
 800f49c:	2200      	movs	r2, #0
 800f49e:	682b      	ldr	r3, [r5, #0]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	f7fe ffc3 	bl	800e42c <__ssvfscanf_r+0x3a4>
 800f4a6:	46c0      	nop			; (mov r8, r8)
 800f4a8:	fffff07f 	.word	0xfffff07f
 800f4ac:	fffffd7f 	.word	0xfffffd7f
 800f4b0:	0000026b 	.word	0x0000026b
 800f4b4:	0000026a 	.word	0x0000026a
 800f4b8:	080141d8 	.word	0x080141d8
 800f4bc:	0801423b 	.word	0x0801423b

0800f4c0 <_fclose_r>:
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	0005      	movs	r5, r0
 800f4c4:	1e0c      	subs	r4, r1, #0
 800f4c6:	d102      	bne.n	800f4ce <_fclose_r+0xe>
 800f4c8:	2600      	movs	r6, #0
 800f4ca:	0030      	movs	r0, r6
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d004      	beq.n	800f4dc <_fclose_r+0x1c>
 800f4d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <_fclose_r+0x1c>
 800f4d8:	f7fc f89e 	bl	800b618 <__sinit>
 800f4dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4de:	07db      	lsls	r3, r3, #31
 800f4e0:	d405      	bmi.n	800f4ee <_fclose_r+0x2e>
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	059b      	lsls	r3, r3, #22
 800f4e6:	d402      	bmi.n	800f4ee <_fclose_r+0x2e>
 800f4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ea:	f7fc fa6b 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800f4ee:	220c      	movs	r2, #12
 800f4f0:	5ea3      	ldrsh	r3, [r4, r2]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d109      	bne.n	800f50a <_fclose_r+0x4a>
 800f4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	0016      	movs	r6, r2
 800f4fc:	401e      	ands	r6, r3
 800f4fe:	421a      	tst	r2, r3
 800f500:	d1e2      	bne.n	800f4c8 <_fclose_r+0x8>
 800f502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f504:	f7fc fa5f 	bl	800b9c6 <__retarget_lock_release_recursive>
 800f508:	e7df      	b.n	800f4ca <_fclose_r+0xa>
 800f50a:	0021      	movs	r1, r4
 800f50c:	0028      	movs	r0, r5
 800f50e:	f000 f837 	bl	800f580 <__sflush_r>
 800f512:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f514:	0006      	movs	r6, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d006      	beq.n	800f528 <_fclose_r+0x68>
 800f51a:	0028      	movs	r0, r5
 800f51c:	69e1      	ldr	r1, [r4, #28]
 800f51e:	4798      	blx	r3
 800f520:	2800      	cmp	r0, #0
 800f522:	da01      	bge.n	800f528 <_fclose_r+0x68>
 800f524:	2601      	movs	r6, #1
 800f526:	4276      	negs	r6, r6
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	061b      	lsls	r3, r3, #24
 800f52c:	d503      	bpl.n	800f536 <_fclose_r+0x76>
 800f52e:	0028      	movs	r0, r5
 800f530:	6921      	ldr	r1, [r4, #16]
 800f532:	f7fc facf 	bl	800bad4 <_free_r>
 800f536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f538:	2900      	cmp	r1, #0
 800f53a:	d008      	beq.n	800f54e <_fclose_r+0x8e>
 800f53c:	0023      	movs	r3, r4
 800f53e:	3340      	adds	r3, #64	; 0x40
 800f540:	4299      	cmp	r1, r3
 800f542:	d002      	beq.n	800f54a <_fclose_r+0x8a>
 800f544:	0028      	movs	r0, r5
 800f546:	f7fc fac5 	bl	800bad4 <_free_r>
 800f54a:	2300      	movs	r3, #0
 800f54c:	6323      	str	r3, [r4, #48]	; 0x30
 800f54e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f550:	2900      	cmp	r1, #0
 800f552:	d004      	beq.n	800f55e <_fclose_r+0x9e>
 800f554:	0028      	movs	r0, r5
 800f556:	f7fc fabd 	bl	800bad4 <_free_r>
 800f55a:	2300      	movs	r3, #0
 800f55c:	6463      	str	r3, [r4, #68]	; 0x44
 800f55e:	f7fc f84b 	bl	800b5f8 <__sfp_lock_acquire>
 800f562:	2300      	movs	r3, #0
 800f564:	81a3      	strh	r3, [r4, #12]
 800f566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f568:	07db      	lsls	r3, r3, #31
 800f56a:	d402      	bmi.n	800f572 <_fclose_r+0xb2>
 800f56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f56e:	f7fc fa2a 	bl	800b9c6 <__retarget_lock_release_recursive>
 800f572:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f574:	f7fc fa25 	bl	800b9c2 <__retarget_lock_close_recursive>
 800f578:	f7fc f846 	bl	800b608 <__sfp_lock_release>
 800f57c:	e7a5      	b.n	800f4ca <_fclose_r+0xa>
	...

0800f580 <__sflush_r>:
 800f580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f582:	230c      	movs	r3, #12
 800f584:	5eca      	ldrsh	r2, [r1, r3]
 800f586:	000c      	movs	r4, r1
 800f588:	0005      	movs	r5, r0
 800f58a:	b291      	uxth	r1, r2
 800f58c:	0713      	lsls	r3, r2, #28
 800f58e:	d464      	bmi.n	800f65a <__sflush_r+0xda>
 800f590:	2380      	movs	r3, #128	; 0x80
 800f592:	011b      	lsls	r3, r3, #4
 800f594:	4313      	orrs	r3, r2
 800f596:	6862      	ldr	r2, [r4, #4]
 800f598:	81a3      	strh	r3, [r4, #12]
 800f59a:	2a00      	cmp	r2, #0
 800f59c:	dc04      	bgt.n	800f5a8 <__sflush_r+0x28>
 800f59e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f5a0:	2a00      	cmp	r2, #0
 800f5a2:	dc01      	bgt.n	800f5a8 <__sflush_r+0x28>
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f5a8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f5aa:	2f00      	cmp	r7, #0
 800f5ac:	d0fa      	beq.n	800f5a4 <__sflush_r+0x24>
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	2080      	movs	r0, #128	; 0x80
 800f5b2:	682e      	ldr	r6, [r5, #0]
 800f5b4:	602a      	str	r2, [r5, #0]
 800f5b6:	001a      	movs	r2, r3
 800f5b8:	0140      	lsls	r0, r0, #5
 800f5ba:	69e1      	ldr	r1, [r4, #28]
 800f5bc:	4002      	ands	r2, r0
 800f5be:	4203      	tst	r3, r0
 800f5c0:	d038      	beq.n	800f634 <__sflush_r+0xb4>
 800f5c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	075b      	lsls	r3, r3, #29
 800f5c8:	d506      	bpl.n	800f5d8 <__sflush_r+0x58>
 800f5ca:	6863      	ldr	r3, [r4, #4]
 800f5cc:	1ac0      	subs	r0, r0, r3
 800f5ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <__sflush_r+0x58>
 800f5d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5d6:	1ac0      	subs	r0, r0, r3
 800f5d8:	0002      	movs	r2, r0
 800f5da:	2300      	movs	r3, #0
 800f5dc:	0028      	movs	r0, r5
 800f5de:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f5e0:	69e1      	ldr	r1, [r4, #28]
 800f5e2:	47b8      	blx	r7
 800f5e4:	89a2      	ldrh	r2, [r4, #12]
 800f5e6:	1c43      	adds	r3, r0, #1
 800f5e8:	d106      	bne.n	800f5f8 <__sflush_r+0x78>
 800f5ea:	6829      	ldr	r1, [r5, #0]
 800f5ec:	291d      	cmp	r1, #29
 800f5ee:	d830      	bhi.n	800f652 <__sflush_r+0xd2>
 800f5f0:	4b2c      	ldr	r3, [pc, #176]	; (800f6a4 <__sflush_r+0x124>)
 800f5f2:	410b      	asrs	r3, r1
 800f5f4:	07db      	lsls	r3, r3, #31
 800f5f6:	d42c      	bmi.n	800f652 <__sflush_r+0xd2>
 800f5f8:	4b2b      	ldr	r3, [pc, #172]	; (800f6a8 <__sflush_r+0x128>)
 800f5fa:	4013      	ands	r3, r2
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	6062      	str	r2, [r4, #4]
 800f600:	6922      	ldr	r2, [r4, #16]
 800f602:	b21b      	sxth	r3, r3
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	6022      	str	r2, [r4, #0]
 800f608:	04db      	lsls	r3, r3, #19
 800f60a:	d505      	bpl.n	800f618 <__sflush_r+0x98>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <__sflush_r+0x96>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d100      	bne.n	800f618 <__sflush_r+0x98>
 800f616:	6520      	str	r0, [r4, #80]	; 0x50
 800f618:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f61a:	602e      	str	r6, [r5, #0]
 800f61c:	2900      	cmp	r1, #0
 800f61e:	d0c1      	beq.n	800f5a4 <__sflush_r+0x24>
 800f620:	0023      	movs	r3, r4
 800f622:	3340      	adds	r3, #64	; 0x40
 800f624:	4299      	cmp	r1, r3
 800f626:	d002      	beq.n	800f62e <__sflush_r+0xae>
 800f628:	0028      	movs	r0, r5
 800f62a:	f7fc fa53 	bl	800bad4 <_free_r>
 800f62e:	2000      	movs	r0, #0
 800f630:	6320      	str	r0, [r4, #48]	; 0x30
 800f632:	e7b8      	b.n	800f5a6 <__sflush_r+0x26>
 800f634:	2301      	movs	r3, #1
 800f636:	0028      	movs	r0, r5
 800f638:	47b8      	blx	r7
 800f63a:	1c43      	adds	r3, r0, #1
 800f63c:	d1c2      	bne.n	800f5c4 <__sflush_r+0x44>
 800f63e:	682b      	ldr	r3, [r5, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d0bf      	beq.n	800f5c4 <__sflush_r+0x44>
 800f644:	2b1d      	cmp	r3, #29
 800f646:	d001      	beq.n	800f64c <__sflush_r+0xcc>
 800f648:	2b16      	cmp	r3, #22
 800f64a:	d101      	bne.n	800f650 <__sflush_r+0xd0>
 800f64c:	602e      	str	r6, [r5, #0]
 800f64e:	e7a9      	b.n	800f5a4 <__sflush_r+0x24>
 800f650:	89a2      	ldrh	r2, [r4, #12]
 800f652:	2340      	movs	r3, #64	; 0x40
 800f654:	4313      	orrs	r3, r2
 800f656:	81a3      	strh	r3, [r4, #12]
 800f658:	e7a5      	b.n	800f5a6 <__sflush_r+0x26>
 800f65a:	6926      	ldr	r6, [r4, #16]
 800f65c:	2e00      	cmp	r6, #0
 800f65e:	d0a1      	beq.n	800f5a4 <__sflush_r+0x24>
 800f660:	6827      	ldr	r7, [r4, #0]
 800f662:	6026      	str	r6, [r4, #0]
 800f664:	1bbb      	subs	r3, r7, r6
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	2300      	movs	r3, #0
 800f66a:	0789      	lsls	r1, r1, #30
 800f66c:	d100      	bne.n	800f670 <__sflush_r+0xf0>
 800f66e:	6963      	ldr	r3, [r4, #20]
 800f670:	60a3      	str	r3, [r4, #8]
 800f672:	9b01      	ldr	r3, [sp, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	dc00      	bgt.n	800f67a <__sflush_r+0xfa>
 800f678:	e794      	b.n	800f5a4 <__sflush_r+0x24>
 800f67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f67c:	0032      	movs	r2, r6
 800f67e:	001f      	movs	r7, r3
 800f680:	0028      	movs	r0, r5
 800f682:	9b01      	ldr	r3, [sp, #4]
 800f684:	69e1      	ldr	r1, [r4, #28]
 800f686:	47b8      	blx	r7
 800f688:	2800      	cmp	r0, #0
 800f68a:	dc06      	bgt.n	800f69a <__sflush_r+0x11a>
 800f68c:	2340      	movs	r3, #64	; 0x40
 800f68e:	2001      	movs	r0, #1
 800f690:	89a2      	ldrh	r2, [r4, #12]
 800f692:	4240      	negs	r0, r0
 800f694:	4313      	orrs	r3, r2
 800f696:	81a3      	strh	r3, [r4, #12]
 800f698:	e785      	b.n	800f5a6 <__sflush_r+0x26>
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	1836      	adds	r6, r6, r0
 800f69e:	1a1b      	subs	r3, r3, r0
 800f6a0:	9301      	str	r3, [sp, #4]
 800f6a2:	e7e6      	b.n	800f672 <__sflush_r+0xf2>
 800f6a4:	dfbffffe 	.word	0xdfbffffe
 800f6a8:	fffff7ff 	.word	0xfffff7ff

0800f6ac <_fflush_r>:
 800f6ac:	b570      	push	{r4, r5, r6, lr}
 800f6ae:	0005      	movs	r5, r0
 800f6b0:	000c      	movs	r4, r1
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d004      	beq.n	800f6c0 <_fflush_r+0x14>
 800f6b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <_fflush_r+0x14>
 800f6bc:	f7fb ffac 	bl	800b618 <__sinit>
 800f6c0:	220c      	movs	r2, #12
 800f6c2:	5ea3      	ldrsh	r3, [r4, r2]
 800f6c4:	1e1e      	subs	r6, r3, #0
 800f6c6:	d015      	beq.n	800f6f4 <_fflush_r+0x48>
 800f6c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6ca:	07d2      	lsls	r2, r2, #31
 800f6cc:	d404      	bmi.n	800f6d8 <_fflush_r+0x2c>
 800f6ce:	059b      	lsls	r3, r3, #22
 800f6d0:	d402      	bmi.n	800f6d8 <_fflush_r+0x2c>
 800f6d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6d4:	f7fc f976 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800f6d8:	0021      	movs	r1, r4
 800f6da:	0028      	movs	r0, r5
 800f6dc:	f7ff ff50 	bl	800f580 <__sflush_r>
 800f6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6e2:	0006      	movs	r6, r0
 800f6e4:	07db      	lsls	r3, r3, #31
 800f6e6:	d405      	bmi.n	800f6f4 <_fflush_r+0x48>
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	059b      	lsls	r3, r3, #22
 800f6ec:	d402      	bmi.n	800f6f4 <_fflush_r+0x48>
 800f6ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6f0:	f7fc f969 	bl	800b9c6 <__retarget_lock_release_recursive>
 800f6f4:	0030      	movs	r0, r6
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}

0800f6f8 <__sccl>:
 800f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fa:	780b      	ldrb	r3, [r1, #0]
 800f6fc:	0004      	movs	r4, r0
 800f6fe:	2b5e      	cmp	r3, #94	; 0x5e
 800f700:	d019      	beq.n	800f736 <__sccl+0x3e>
 800f702:	2200      	movs	r2, #0
 800f704:	1c4d      	adds	r5, r1, #1
 800f706:	0021      	movs	r1, r4
 800f708:	1c60      	adds	r0, r4, #1
 800f70a:	30ff      	adds	r0, #255	; 0xff
 800f70c:	700a      	strb	r2, [r1, #0]
 800f70e:	3101      	adds	r1, #1
 800f710:	4281      	cmp	r1, r0
 800f712:	d1fb      	bne.n	800f70c <__sccl+0x14>
 800f714:	1e68      	subs	r0, r5, #1
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00c      	beq.n	800f734 <__sccl+0x3c>
 800f71a:	2101      	movs	r1, #1
 800f71c:	262d      	movs	r6, #45	; 0x2d
 800f71e:	404a      	eors	r2, r1
 800f720:	0028      	movs	r0, r5
 800f722:	54e2      	strb	r2, [r4, r3]
 800f724:	7801      	ldrb	r1, [r0, #0]
 800f726:	1c45      	adds	r5, r0, #1
 800f728:	292d      	cmp	r1, #45	; 0x2d
 800f72a:	d00c      	beq.n	800f746 <__sccl+0x4e>
 800f72c:	295d      	cmp	r1, #93	; 0x5d
 800f72e:	d01d      	beq.n	800f76c <__sccl+0x74>
 800f730:	2900      	cmp	r1, #0
 800f732:	d104      	bne.n	800f73e <__sccl+0x46>
 800f734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f736:	2201      	movs	r2, #1
 800f738:	784b      	ldrb	r3, [r1, #1]
 800f73a:	1c8d      	adds	r5, r1, #2
 800f73c:	e7e3      	b.n	800f706 <__sccl+0xe>
 800f73e:	000b      	movs	r3, r1
 800f740:	e7ee      	b.n	800f720 <__sccl+0x28>
 800f742:	0033      	movs	r3, r6
 800f744:	e7ec      	b.n	800f720 <__sccl+0x28>
 800f746:	7841      	ldrb	r1, [r0, #1]
 800f748:	295d      	cmp	r1, #93	; 0x5d
 800f74a:	d0fa      	beq.n	800f742 <__sccl+0x4a>
 800f74c:	428b      	cmp	r3, r1
 800f74e:	dcf8      	bgt.n	800f742 <__sccl+0x4a>
 800f750:	001d      	movs	r5, r3
 800f752:	3002      	adds	r0, #2
 800f754:	3501      	adds	r5, #1
 800f756:	5562      	strb	r2, [r4, r5]
 800f758:	42a9      	cmp	r1, r5
 800f75a:	dcfb      	bgt.n	800f754 <__sccl+0x5c>
 800f75c:	2500      	movs	r5, #0
 800f75e:	1c5f      	adds	r7, r3, #1
 800f760:	428b      	cmp	r3, r1
 800f762:	da01      	bge.n	800f768 <__sccl+0x70>
 800f764:	1acd      	subs	r5, r1, r3
 800f766:	3d01      	subs	r5, #1
 800f768:	197b      	adds	r3, r7, r5
 800f76a:	e7db      	b.n	800f724 <__sccl+0x2c>
 800f76c:	0028      	movs	r0, r5
 800f76e:	e7e1      	b.n	800f734 <__sccl+0x3c>

0800f770 <_localeconv_r>:
 800f770:	4800      	ldr	r0, [pc, #0]	; (800f774 <_localeconv_r+0x4>)
 800f772:	4770      	bx	lr
 800f774:	2000052c 	.word	0x2000052c

0800f778 <__libc_fini_array>:
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	4c07      	ldr	r4, [pc, #28]	; (800f798 <__libc_fini_array+0x20>)
 800f77c:	4d07      	ldr	r5, [pc, #28]	; (800f79c <__libc_fini_array+0x24>)
 800f77e:	1b64      	subs	r4, r4, r5
 800f780:	10a4      	asrs	r4, r4, #2
 800f782:	2c00      	cmp	r4, #0
 800f784:	d102      	bne.n	800f78c <__libc_fini_array+0x14>
 800f786:	f002 fdcd 	bl	8012324 <_fini>
 800f78a:	bd70      	pop	{r4, r5, r6, pc}
 800f78c:	3c01      	subs	r4, #1
 800f78e:	00a3      	lsls	r3, r4, #2
 800f790:	58eb      	ldr	r3, [r5, r3]
 800f792:	4798      	blx	r3
 800f794:	e7f5      	b.n	800f782 <__libc_fini_array+0xa>
 800f796:	46c0      	nop			; (mov r8, r8)
 800f798:	080142d8 	.word	0x080142d8
 800f79c:	080142d4 	.word	0x080142d4

0800f7a0 <memchr>:
 800f7a0:	b2c9      	uxtb	r1, r1
 800f7a2:	1882      	adds	r2, r0, r2
 800f7a4:	4290      	cmp	r0, r2
 800f7a6:	d101      	bne.n	800f7ac <memchr+0xc>
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	4770      	bx	lr
 800f7ac:	7803      	ldrb	r3, [r0, #0]
 800f7ae:	428b      	cmp	r3, r1
 800f7b0:	d0fb      	beq.n	800f7aa <memchr+0xa>
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	e7f6      	b.n	800f7a4 <memchr+0x4>
	...

0800f7b8 <frexp>:
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	0014      	movs	r4, r2
 800f7bc:	2500      	movs	r5, #0
 800f7be:	6025      	str	r5, [r4, #0]
 800f7c0:	4d10      	ldr	r5, [pc, #64]	; (800f804 <frexp+0x4c>)
 800f7c2:	004b      	lsls	r3, r1, #1
 800f7c4:	000a      	movs	r2, r1
 800f7c6:	085b      	lsrs	r3, r3, #1
 800f7c8:	42ab      	cmp	r3, r5
 800f7ca:	dc1a      	bgt.n	800f802 <frexp+0x4a>
 800f7cc:	001d      	movs	r5, r3
 800f7ce:	4305      	orrs	r5, r0
 800f7d0:	d017      	beq.n	800f802 <frexp+0x4a>
 800f7d2:	4d0d      	ldr	r5, [pc, #52]	; (800f808 <frexp+0x50>)
 800f7d4:	4229      	tst	r1, r5
 800f7d6:	d109      	bne.n	800f7ec <frexp+0x34>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <frexp+0x54>)
 800f7dc:	f7f1 ff46 	bl	800166c <__aeabi_dmul>
 800f7e0:	2536      	movs	r5, #54	; 0x36
 800f7e2:	000a      	movs	r2, r1
 800f7e4:	004b      	lsls	r3, r1, #1
 800f7e6:	426d      	negs	r5, r5
 800f7e8:	085b      	lsrs	r3, r3, #1
 800f7ea:	6025      	str	r5, [r4, #0]
 800f7ec:	4d08      	ldr	r5, [pc, #32]	; (800f810 <frexp+0x58>)
 800f7ee:	151b      	asrs	r3, r3, #20
 800f7f0:	195b      	adds	r3, r3, r5
 800f7f2:	6825      	ldr	r5, [r4, #0]
 800f7f4:	18eb      	adds	r3, r5, r3
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	4b06      	ldr	r3, [pc, #24]	; (800f814 <frexp+0x5c>)
 800f7fa:	401a      	ands	r2, r3
 800f7fc:	4b06      	ldr	r3, [pc, #24]	; (800f818 <frexp+0x60>)
 800f7fe:	4313      	orrs	r3, r2
 800f800:	0019      	movs	r1, r3
 800f802:	bd70      	pop	{r4, r5, r6, pc}
 800f804:	7fefffff 	.word	0x7fefffff
 800f808:	7ff00000 	.word	0x7ff00000
 800f80c:	43500000 	.word	0x43500000
 800f810:	fffffc02 	.word	0xfffffc02
 800f814:	800fffff 	.word	0x800fffff
 800f818:	3fe00000 	.word	0x3fe00000

0800f81c <__register_exitproc>:
 800f81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f81e:	4f1c      	ldr	r7, [pc, #112]	; (800f890 <__register_exitproc+0x74>)
 800f820:	0004      	movs	r4, r0
 800f822:	6838      	ldr	r0, [r7, #0]
 800f824:	0016      	movs	r6, r2
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	9100      	str	r1, [sp, #0]
 800f82a:	f7fc f8cb 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800f82e:	4a19      	ldr	r2, [pc, #100]	; (800f894 <__register_exitproc+0x78>)
 800f830:	6813      	ldr	r3, [r2, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <__register_exitproc+0x1e>
 800f836:	4b18      	ldr	r3, [pc, #96]	; (800f898 <__register_exitproc+0x7c>)
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	685a      	ldr	r2, [r3, #4]
 800f83c:	6838      	ldr	r0, [r7, #0]
 800f83e:	2a1f      	cmp	r2, #31
 800f840:	dd04      	ble.n	800f84c <__register_exitproc+0x30>
 800f842:	f7fc f8c0 	bl	800b9c6 <__retarget_lock_release_recursive>
 800f846:	2001      	movs	r0, #1
 800f848:	4240      	negs	r0, r0
 800f84a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f84c:	2c00      	cmp	r4, #0
 800f84e:	d014      	beq.n	800f87a <__register_exitproc+0x5e>
 800f850:	0091      	lsls	r1, r2, #2
 800f852:	1859      	adds	r1, r3, r1
 800f854:	000f      	movs	r7, r1
 800f856:	3788      	adds	r7, #136	; 0x88
 800f858:	603e      	str	r6, [r7, #0]
 800f85a:	2701      	movs	r7, #1
 800f85c:	001e      	movs	r6, r3
 800f85e:	4097      	lsls	r7, r2
 800f860:	3685      	adds	r6, #133	; 0x85
 800f862:	36ff      	adds	r6, #255	; 0xff
 800f864:	6875      	ldr	r5, [r6, #4]
 800f866:	31fc      	adds	r1, #252	; 0xfc
 800f868:	433d      	orrs	r5, r7
 800f86a:	6075      	str	r5, [r6, #4]
 800f86c:	9d01      	ldr	r5, [sp, #4]
 800f86e:	60cd      	str	r5, [r1, #12]
 800f870:	2c02      	cmp	r4, #2
 800f872:	d102      	bne.n	800f87a <__register_exitproc+0x5e>
 800f874:	68b1      	ldr	r1, [r6, #8]
 800f876:	4339      	orrs	r1, r7
 800f878:	60b1      	str	r1, [r6, #8]
 800f87a:	1c51      	adds	r1, r2, #1
 800f87c:	6059      	str	r1, [r3, #4]
 800f87e:	3202      	adds	r2, #2
 800f880:	9900      	ldr	r1, [sp, #0]
 800f882:	0092      	lsls	r2, r2, #2
 800f884:	50d1      	str	r1, [r2, r3]
 800f886:	f7fc f89e 	bl	800b9c6 <__retarget_lock_release_recursive>
 800f88a:	2000      	movs	r0, #0
 800f88c:	e7dd      	b.n	800f84a <__register_exitproc+0x2e>
 800f88e:	46c0      	nop			; (mov r8, r8)
 800f890:	200006cc 	.word	0x200006cc
 800f894:	20000d74 	.word	0x20000d74
 800f898:	20000d78 	.word	0x20000d78

0800f89c <__assert_func>:
 800f89c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f89e:	0014      	movs	r4, r2
 800f8a0:	001a      	movs	r2, r3
 800f8a2:	4b09      	ldr	r3, [pc, #36]	; (800f8c8 <__assert_func+0x2c>)
 800f8a4:	0005      	movs	r5, r0
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	000e      	movs	r6, r1
 800f8aa:	68d8      	ldr	r0, [r3, #12]
 800f8ac:	4b07      	ldr	r3, [pc, #28]	; (800f8cc <__assert_func+0x30>)
 800f8ae:	2c00      	cmp	r4, #0
 800f8b0:	d101      	bne.n	800f8b6 <__assert_func+0x1a>
 800f8b2:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <__assert_func+0x34>)
 800f8b4:	001c      	movs	r4, r3
 800f8b6:	4907      	ldr	r1, [pc, #28]	; (800f8d4 <__assert_func+0x38>)
 800f8b8:	9301      	str	r3, [sp, #4]
 800f8ba:	9402      	str	r4, [sp, #8]
 800f8bc:	002b      	movs	r3, r5
 800f8be:	9600      	str	r6, [sp, #0]
 800f8c0:	f001 faa6 	bl	8010e10 <fiprintf>
 800f8c4:	f002 fb8e 	bl	8011fe4 <abort>
 800f8c8:	200006c8 	.word	0x200006c8
 800f8cc:	08014200 	.word	0x08014200
 800f8d0:	0801423b 	.word	0x0801423b
 800f8d4:	0801420d 	.word	0x0801420d

0800f8d8 <_calloc_r>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	2400      	movs	r4, #0
 800f8dc:	0c0b      	lsrs	r3, r1, #16
 800f8de:	0c16      	lsrs	r6, r2, #16
 800f8e0:	42a3      	cmp	r3, r4
 800f8e2:	d133      	bne.n	800f94c <_calloc_r+0x74>
 800f8e4:	42a6      	cmp	r6, r4
 800f8e6:	d121      	bne.n	800f92c <_calloc_r+0x54>
 800f8e8:	b28b      	uxth	r3, r1
 800f8ea:	b291      	uxth	r1, r2
 800f8ec:	4359      	muls	r1, r3
 800f8ee:	f7fa fd11 	bl	800a314 <_malloc_r>
 800f8f2:	1e05      	subs	r5, r0, #0
 800f8f4:	d033      	beq.n	800f95e <_calloc_r+0x86>
 800f8f6:	0003      	movs	r3, r0
 800f8f8:	3b08      	subs	r3, #8
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	439a      	bics	r2, r3
 800f900:	3a04      	subs	r2, #4
 800f902:	2a24      	cmp	r2, #36	; 0x24
 800f904:	d832      	bhi.n	800f96c <_calloc_r+0x94>
 800f906:	0003      	movs	r3, r0
 800f908:	2a13      	cmp	r2, #19
 800f90a:	d90a      	bls.n	800f922 <_calloc_r+0x4a>
 800f90c:	6004      	str	r4, [r0, #0]
 800f90e:	6044      	str	r4, [r0, #4]
 800f910:	3308      	adds	r3, #8
 800f912:	2a1b      	cmp	r2, #27
 800f914:	d905      	bls.n	800f922 <_calloc_r+0x4a>
 800f916:	6084      	str	r4, [r0, #8]
 800f918:	60c4      	str	r4, [r0, #12]
 800f91a:	2a24      	cmp	r2, #36	; 0x24
 800f91c:	d021      	beq.n	800f962 <_calloc_r+0x8a>
 800f91e:	0003      	movs	r3, r0
 800f920:	3310      	adds	r3, #16
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	605a      	str	r2, [r3, #4]
 800f928:	609a      	str	r2, [r3, #8]
 800f92a:	e018      	b.n	800f95e <_calloc_r+0x86>
 800f92c:	1c33      	adds	r3, r6, #0
 800f92e:	1c0d      	adds	r5, r1, #0
 800f930:	b289      	uxth	r1, r1
 800f932:	b292      	uxth	r2, r2
 800f934:	434a      	muls	r2, r1
 800f936:	b2ad      	uxth	r5, r5
 800f938:	b299      	uxth	r1, r3
 800f93a:	4369      	muls	r1, r5
 800f93c:	0c13      	lsrs	r3, r2, #16
 800f93e:	18c9      	adds	r1, r1, r3
 800f940:	0c0b      	lsrs	r3, r1, #16
 800f942:	d107      	bne.n	800f954 <_calloc_r+0x7c>
 800f944:	0409      	lsls	r1, r1, #16
 800f946:	b292      	uxth	r2, r2
 800f948:	4311      	orrs	r1, r2
 800f94a:	e7d0      	b.n	800f8ee <_calloc_r+0x16>
 800f94c:	2e00      	cmp	r6, #0
 800f94e:	d101      	bne.n	800f954 <_calloc_r+0x7c>
 800f950:	1c15      	adds	r5, r2, #0
 800f952:	e7ed      	b.n	800f930 <_calloc_r+0x58>
 800f954:	f7fc f80a 	bl	800b96c <__errno>
 800f958:	230c      	movs	r3, #12
 800f95a:	2500      	movs	r5, #0
 800f95c:	6003      	str	r3, [r0, #0]
 800f95e:	0028      	movs	r0, r5
 800f960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f962:	0003      	movs	r3, r0
 800f964:	6104      	str	r4, [r0, #16]
 800f966:	3318      	adds	r3, #24
 800f968:	6144      	str	r4, [r0, #20]
 800f96a:	e7da      	b.n	800f922 <_calloc_r+0x4a>
 800f96c:	2100      	movs	r1, #0
 800f96e:	f7fb ff51 	bl	800b814 <memset>
 800f972:	e7f4      	b.n	800f95e <_calloc_r+0x86>

0800f974 <quorem>:
 800f974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f976:	6902      	ldr	r2, [r0, #16]
 800f978:	690b      	ldr	r3, [r1, #16]
 800f97a:	b089      	sub	sp, #36	; 0x24
 800f97c:	0007      	movs	r7, r0
 800f97e:	9104      	str	r1, [sp, #16]
 800f980:	2000      	movs	r0, #0
 800f982:	429a      	cmp	r2, r3
 800f984:	db69      	blt.n	800fa5a <quorem+0xe6>
 800f986:	3b01      	subs	r3, #1
 800f988:	009c      	lsls	r4, r3, #2
 800f98a:	9301      	str	r3, [sp, #4]
 800f98c:	000b      	movs	r3, r1
 800f98e:	3314      	adds	r3, #20
 800f990:	9306      	str	r3, [sp, #24]
 800f992:	191b      	adds	r3, r3, r4
 800f994:	9305      	str	r3, [sp, #20]
 800f996:	003b      	movs	r3, r7
 800f998:	3314      	adds	r3, #20
 800f99a:	9303      	str	r3, [sp, #12]
 800f99c:	191c      	adds	r4, r3, r4
 800f99e:	9b05      	ldr	r3, [sp, #20]
 800f9a0:	6826      	ldr	r6, [r4, #0]
 800f9a2:	681d      	ldr	r5, [r3, #0]
 800f9a4:	0030      	movs	r0, r6
 800f9a6:	3501      	adds	r5, #1
 800f9a8:	0029      	movs	r1, r5
 800f9aa:	f7f0 fbc7 	bl	800013c <__udivsi3>
 800f9ae:	9002      	str	r0, [sp, #8]
 800f9b0:	42ae      	cmp	r6, r5
 800f9b2:	d329      	bcc.n	800fa08 <quorem+0x94>
 800f9b4:	9b06      	ldr	r3, [sp, #24]
 800f9b6:	2600      	movs	r6, #0
 800f9b8:	469c      	mov	ip, r3
 800f9ba:	9d03      	ldr	r5, [sp, #12]
 800f9bc:	9606      	str	r6, [sp, #24]
 800f9be:	4662      	mov	r2, ip
 800f9c0:	ca08      	ldmia	r2!, {r3}
 800f9c2:	6828      	ldr	r0, [r5, #0]
 800f9c4:	4694      	mov	ip, r2
 800f9c6:	9a02      	ldr	r2, [sp, #8]
 800f9c8:	b299      	uxth	r1, r3
 800f9ca:	4351      	muls	r1, r2
 800f9cc:	0c1b      	lsrs	r3, r3, #16
 800f9ce:	4353      	muls	r3, r2
 800f9d0:	1989      	adds	r1, r1, r6
 800f9d2:	0c0a      	lsrs	r2, r1, #16
 800f9d4:	189b      	adds	r3, r3, r2
 800f9d6:	9307      	str	r3, [sp, #28]
 800f9d8:	0c1e      	lsrs	r6, r3, #16
 800f9da:	9b06      	ldr	r3, [sp, #24]
 800f9dc:	b282      	uxth	r2, r0
 800f9de:	18d2      	adds	r2, r2, r3
 800f9e0:	466b      	mov	r3, sp
 800f9e2:	b289      	uxth	r1, r1
 800f9e4:	8b9b      	ldrh	r3, [r3, #28]
 800f9e6:	1a52      	subs	r2, r2, r1
 800f9e8:	0c01      	lsrs	r1, r0, #16
 800f9ea:	1ac9      	subs	r1, r1, r3
 800f9ec:	1413      	asrs	r3, r2, #16
 800f9ee:	18cb      	adds	r3, r1, r3
 800f9f0:	1419      	asrs	r1, r3, #16
 800f9f2:	b292      	uxth	r2, r2
 800f9f4:	041b      	lsls	r3, r3, #16
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	c508      	stmia	r5!, {r3}
 800f9fa:	9b05      	ldr	r3, [sp, #20]
 800f9fc:	9106      	str	r1, [sp, #24]
 800f9fe:	4563      	cmp	r3, ip
 800fa00:	d2dd      	bcs.n	800f9be <quorem+0x4a>
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d030      	beq.n	800fa6a <quorem+0xf6>
 800fa08:	0038      	movs	r0, r7
 800fa0a:	9904      	ldr	r1, [sp, #16]
 800fa0c:	f7fc ff04 	bl	800c818 <__mcmp>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	db21      	blt.n	800fa58 <quorem+0xe4>
 800fa14:	0038      	movs	r0, r7
 800fa16:	2600      	movs	r6, #0
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	9c04      	ldr	r4, [sp, #16]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	9302      	str	r3, [sp, #8]
 800fa20:	3014      	adds	r0, #20
 800fa22:	3414      	adds	r4, #20
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	cc02      	ldmia	r4!, {r1}
 800fa28:	b29d      	uxth	r5, r3
 800fa2a:	19ad      	adds	r5, r5, r6
 800fa2c:	b28a      	uxth	r2, r1
 800fa2e:	1aaa      	subs	r2, r5, r2
 800fa30:	0c09      	lsrs	r1, r1, #16
 800fa32:	0c1b      	lsrs	r3, r3, #16
 800fa34:	1a5b      	subs	r3, r3, r1
 800fa36:	1411      	asrs	r1, r2, #16
 800fa38:	185b      	adds	r3, r3, r1
 800fa3a:	141e      	asrs	r6, r3, #16
 800fa3c:	b292      	uxth	r2, r2
 800fa3e:	041b      	lsls	r3, r3, #16
 800fa40:	4313      	orrs	r3, r2
 800fa42:	c008      	stmia	r0!, {r3}
 800fa44:	9b05      	ldr	r3, [sp, #20]
 800fa46:	42a3      	cmp	r3, r4
 800fa48:	d2ec      	bcs.n	800fa24 <quorem+0xb0>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	9a03      	ldr	r2, [sp, #12]
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	18d3      	adds	r3, r2, r3
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	2a00      	cmp	r2, #0
 800fa56:	d015      	beq.n	800fa84 <quorem+0x110>
 800fa58:	9802      	ldr	r0, [sp, #8]
 800fa5a:	b009      	add	sp, #36	; 0x24
 800fa5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d106      	bne.n	800fa72 <quorem+0xfe>
 800fa64:	9b01      	ldr	r3, [sp, #4]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	9b03      	ldr	r3, [sp, #12]
 800fa6c:	3c04      	subs	r4, #4
 800fa6e:	42a3      	cmp	r3, r4
 800fa70:	d3f5      	bcc.n	800fa5e <quorem+0xea>
 800fa72:	9b01      	ldr	r3, [sp, #4]
 800fa74:	613b      	str	r3, [r7, #16]
 800fa76:	e7c7      	b.n	800fa08 <quorem+0x94>
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	2a00      	cmp	r2, #0
 800fa7c:	d106      	bne.n	800fa8c <quorem+0x118>
 800fa7e:	9a01      	ldr	r2, [sp, #4]
 800fa80:	3a01      	subs	r2, #1
 800fa82:	9201      	str	r2, [sp, #4]
 800fa84:	9a03      	ldr	r2, [sp, #12]
 800fa86:	3b04      	subs	r3, #4
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d3f5      	bcc.n	800fa78 <quorem+0x104>
 800fa8c:	9b01      	ldr	r3, [sp, #4]
 800fa8e:	613b      	str	r3, [r7, #16]
 800fa90:	e7e2      	b.n	800fa58 <quorem+0xe4>
	...

0800fa94 <_dtoa_r>:
 800fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa96:	0014      	movs	r4, r2
 800fa98:	001d      	movs	r5, r3
 800fa9a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fa9c:	b09d      	sub	sp, #116	; 0x74
 800fa9e:	9408      	str	r4, [sp, #32]
 800faa0:	9509      	str	r5, [sp, #36]	; 0x24
 800faa2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800faa4:	9004      	str	r0, [sp, #16]
 800faa6:	2900      	cmp	r1, #0
 800faa8:	d009      	beq.n	800fabe <_dtoa_r+0x2a>
 800faaa:	2301      	movs	r3, #1
 800faac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800faae:	4093      	lsls	r3, r2
 800fab0:	604a      	str	r2, [r1, #4]
 800fab2:	608b      	str	r3, [r1, #8]
 800fab4:	f7fc fc56 	bl	800c364 <_Bfree>
 800fab8:	2300      	movs	r3, #0
 800faba:	9a04      	ldr	r2, [sp, #16]
 800fabc:	6393      	str	r3, [r2, #56]	; 0x38
 800fabe:	2d00      	cmp	r5, #0
 800fac0:	da1e      	bge.n	800fb00 <_dtoa_r+0x6c>
 800fac2:	2301      	movs	r3, #1
 800fac4:	6033      	str	r3, [r6, #0]
 800fac6:	006b      	lsls	r3, r5, #1
 800fac8:	085b      	lsrs	r3, r3, #1
 800faca:	9309      	str	r3, [sp, #36]	; 0x24
 800facc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800face:	4bb5      	ldr	r3, [pc, #724]	; (800fda4 <_dtoa_r+0x310>)
 800fad0:	4ab4      	ldr	r2, [pc, #720]	; (800fda4 <_dtoa_r+0x310>)
 800fad2:	403b      	ands	r3, r7
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d116      	bne.n	800fb06 <_dtoa_r+0x72>
 800fad8:	4bb3      	ldr	r3, [pc, #716]	; (800fda8 <_dtoa_r+0x314>)
 800fada:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fadc:	6013      	str	r3, [r2, #0]
 800fade:	033b      	lsls	r3, r7, #12
 800fae0:	0b1b      	lsrs	r3, r3, #12
 800fae2:	4323      	orrs	r3, r4
 800fae4:	d101      	bne.n	800faea <_dtoa_r+0x56>
 800fae6:	f000 fdb2 	bl	801064e <_dtoa_r+0xbba>
 800faea:	4bb0      	ldr	r3, [pc, #704]	; (800fdac <_dtoa_r+0x318>)
 800faec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800faee:	9306      	str	r3, [sp, #24]
 800faf0:	2a00      	cmp	r2, #0
 800faf2:	d002      	beq.n	800fafa <_dtoa_r+0x66>
 800faf4:	4bae      	ldr	r3, [pc, #696]	; (800fdb0 <_dtoa_r+0x31c>)
 800faf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800faf8:	6013      	str	r3, [r2, #0]
 800fafa:	9806      	ldr	r0, [sp, #24]
 800fafc:	b01d      	add	sp, #116	; 0x74
 800fafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb00:	2300      	movs	r3, #0
 800fb02:	6033      	str	r3, [r6, #0]
 800fb04:	e7e2      	b.n	800facc <_dtoa_r+0x38>
 800fb06:	9a08      	ldr	r2, [sp, #32]
 800fb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb0a:	9210      	str	r2, [sp, #64]	; 0x40
 800fb0c:	9311      	str	r3, [sp, #68]	; 0x44
 800fb0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fb10:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb12:	2200      	movs	r2, #0
 800fb14:	2300      	movs	r3, #0
 800fb16:	f7f0 fc97 	bl	8000448 <__aeabi_dcmpeq>
 800fb1a:	1e06      	subs	r6, r0, #0
 800fb1c:	d009      	beq.n	800fb32 <_dtoa_r+0x9e>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb22:	6013      	str	r3, [r2, #0]
 800fb24:	4ba3      	ldr	r3, [pc, #652]	; (800fdb4 <_dtoa_r+0x320>)
 800fb26:	9306      	str	r3, [sp, #24]
 800fb28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d0e5      	beq.n	800fafa <_dtoa_r+0x66>
 800fb2e:	4ba2      	ldr	r3, [pc, #648]	; (800fdb8 <_dtoa_r+0x324>)
 800fb30:	e7e1      	b.n	800faf6 <_dtoa_r+0x62>
 800fb32:	ab1a      	add	r3, sp, #104	; 0x68
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	ab1b      	add	r3, sp, #108	; 0x6c
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	9804      	ldr	r0, [sp, #16]
 800fb3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb40:	f7fc ff86 	bl	800ca50 <__d2b>
 800fb44:	007a      	lsls	r2, r7, #1
 800fb46:	9005      	str	r0, [sp, #20]
 800fb48:	0d52      	lsrs	r2, r2, #21
 800fb4a:	d100      	bne.n	800fb4e <_dtoa_r+0xba>
 800fb4c:	e07b      	b.n	800fc46 <_dtoa_r+0x1b2>
 800fb4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb50:	9617      	str	r6, [sp, #92]	; 0x5c
 800fb52:	0319      	lsls	r1, r3, #12
 800fb54:	4b99      	ldr	r3, [pc, #612]	; (800fdbc <_dtoa_r+0x328>)
 800fb56:	0b09      	lsrs	r1, r1, #12
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	4999      	ldr	r1, [pc, #612]	; (800fdc0 <_dtoa_r+0x32c>)
 800fb5c:	1857      	adds	r7, r2, r1
 800fb5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fb60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb62:	0019      	movs	r1, r3
 800fb64:	2200      	movs	r2, #0
 800fb66:	4b97      	ldr	r3, [pc, #604]	; (800fdc4 <_dtoa_r+0x330>)
 800fb68:	f7f2 f842 	bl	8001bf0 <__aeabi_dsub>
 800fb6c:	4a96      	ldr	r2, [pc, #600]	; (800fdc8 <_dtoa_r+0x334>)
 800fb6e:	4b97      	ldr	r3, [pc, #604]	; (800fdcc <_dtoa_r+0x338>)
 800fb70:	f7f1 fd7c 	bl	800166c <__aeabi_dmul>
 800fb74:	4a96      	ldr	r2, [pc, #600]	; (800fdd0 <_dtoa_r+0x33c>)
 800fb76:	4b97      	ldr	r3, [pc, #604]	; (800fdd4 <_dtoa_r+0x340>)
 800fb78:	f7f0 fe1e 	bl	80007b8 <__aeabi_dadd>
 800fb7c:	0004      	movs	r4, r0
 800fb7e:	0038      	movs	r0, r7
 800fb80:	000d      	movs	r5, r1
 800fb82:	f7f2 fc0b 	bl	800239c <__aeabi_i2d>
 800fb86:	4a94      	ldr	r2, [pc, #592]	; (800fdd8 <_dtoa_r+0x344>)
 800fb88:	4b94      	ldr	r3, [pc, #592]	; (800fddc <_dtoa_r+0x348>)
 800fb8a:	f7f1 fd6f 	bl	800166c <__aeabi_dmul>
 800fb8e:	0002      	movs	r2, r0
 800fb90:	000b      	movs	r3, r1
 800fb92:	0020      	movs	r0, r4
 800fb94:	0029      	movs	r1, r5
 800fb96:	f7f0 fe0f 	bl	80007b8 <__aeabi_dadd>
 800fb9a:	0004      	movs	r4, r0
 800fb9c:	000d      	movs	r5, r1
 800fb9e:	f7f2 fbc7 	bl	8002330 <__aeabi_d2iz>
 800fba2:	2200      	movs	r2, #0
 800fba4:	9003      	str	r0, [sp, #12]
 800fba6:	2300      	movs	r3, #0
 800fba8:	0020      	movs	r0, r4
 800fbaa:	0029      	movs	r1, r5
 800fbac:	f7f0 fc52 	bl	8000454 <__aeabi_dcmplt>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d00b      	beq.n	800fbcc <_dtoa_r+0x138>
 800fbb4:	9803      	ldr	r0, [sp, #12]
 800fbb6:	f7f2 fbf1 	bl	800239c <__aeabi_i2d>
 800fbba:	002b      	movs	r3, r5
 800fbbc:	0022      	movs	r2, r4
 800fbbe:	f7f0 fc43 	bl	8000448 <__aeabi_dcmpeq>
 800fbc2:	4243      	negs	r3, r0
 800fbc4:	4158      	adcs	r0, r3
 800fbc6:	9b03      	ldr	r3, [sp, #12]
 800fbc8:	1a1b      	subs	r3, r3, r0
 800fbca:	9303      	str	r3, [sp, #12]
 800fbcc:	2301      	movs	r3, #1
 800fbce:	9316      	str	r3, [sp, #88]	; 0x58
 800fbd0:	9b03      	ldr	r3, [sp, #12]
 800fbd2:	2b16      	cmp	r3, #22
 800fbd4:	d810      	bhi.n	800fbf8 <_dtoa_r+0x164>
 800fbd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fbd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fbda:	9a03      	ldr	r2, [sp, #12]
 800fbdc:	4b80      	ldr	r3, [pc, #512]	; (800fde0 <_dtoa_r+0x34c>)
 800fbde:	00d2      	lsls	r2, r2, #3
 800fbe0:	189b      	adds	r3, r3, r2
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	f7f0 fc35 	bl	8000454 <__aeabi_dcmplt>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d047      	beq.n	800fc7e <_dtoa_r+0x1ea>
 800fbee:	9b03      	ldr	r3, [sp, #12]
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	9303      	str	r3, [sp, #12]
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	9316      	str	r3, [sp, #88]	; 0x58
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fbfc:	920a      	str	r2, [sp, #40]	; 0x28
 800fbfe:	1bdb      	subs	r3, r3, r7
 800fc00:	1e5a      	subs	r2, r3, #1
 800fc02:	d53e      	bpl.n	800fc82 <_dtoa_r+0x1ee>
 800fc04:	2201      	movs	r2, #1
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	930a      	str	r3, [sp, #40]	; 0x28
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	930c      	str	r3, [sp, #48]	; 0x30
 800fc0e:	9b03      	ldr	r3, [sp, #12]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	db38      	blt.n	800fc86 <_dtoa_r+0x1f2>
 800fc14:	9a03      	ldr	r2, [sp, #12]
 800fc16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc18:	4694      	mov	ip, r2
 800fc1a:	4463      	add	r3, ip
 800fc1c:	930c      	str	r3, [sp, #48]	; 0x30
 800fc1e:	2300      	movs	r3, #0
 800fc20:	9213      	str	r2, [sp, #76]	; 0x4c
 800fc22:	930d      	str	r3, [sp, #52]	; 0x34
 800fc24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc26:	2401      	movs	r4, #1
 800fc28:	2b09      	cmp	r3, #9
 800fc2a:	d867      	bhi.n	800fcfc <_dtoa_r+0x268>
 800fc2c:	2b05      	cmp	r3, #5
 800fc2e:	dd02      	ble.n	800fc36 <_dtoa_r+0x1a2>
 800fc30:	2400      	movs	r4, #0
 800fc32:	3b04      	subs	r3, #4
 800fc34:	9322      	str	r3, [sp, #136]	; 0x88
 800fc36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc38:	1e98      	subs	r0, r3, #2
 800fc3a:	2803      	cmp	r0, #3
 800fc3c:	d867      	bhi.n	800fd0e <_dtoa_r+0x27a>
 800fc3e:	f7f0 fa69 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fc42:	3a2b      	.short	0x3a2b
 800fc44:	5b38      	.short	0x5b38
 800fc46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc48:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fc4a:	18f6      	adds	r6, r6, r3
 800fc4c:	4b65      	ldr	r3, [pc, #404]	; (800fde4 <_dtoa_r+0x350>)
 800fc4e:	18f2      	adds	r2, r6, r3
 800fc50:	2a20      	cmp	r2, #32
 800fc52:	dd0f      	ble.n	800fc74 <_dtoa_r+0x1e0>
 800fc54:	2340      	movs	r3, #64	; 0x40
 800fc56:	1a9b      	subs	r3, r3, r2
 800fc58:	409f      	lsls	r7, r3
 800fc5a:	4b63      	ldr	r3, [pc, #396]	; (800fde8 <_dtoa_r+0x354>)
 800fc5c:	0038      	movs	r0, r7
 800fc5e:	18f3      	adds	r3, r6, r3
 800fc60:	40dc      	lsrs	r4, r3
 800fc62:	4320      	orrs	r0, r4
 800fc64:	f7f2 fbca 	bl	80023fc <__aeabi_ui2d>
 800fc68:	2201      	movs	r2, #1
 800fc6a:	4b60      	ldr	r3, [pc, #384]	; (800fdec <_dtoa_r+0x358>)
 800fc6c:	1e77      	subs	r7, r6, #1
 800fc6e:	18cb      	adds	r3, r1, r3
 800fc70:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc72:	e776      	b.n	800fb62 <_dtoa_r+0xce>
 800fc74:	2320      	movs	r3, #32
 800fc76:	0020      	movs	r0, r4
 800fc78:	1a9b      	subs	r3, r3, r2
 800fc7a:	4098      	lsls	r0, r3
 800fc7c:	e7f2      	b.n	800fc64 <_dtoa_r+0x1d0>
 800fc7e:	9016      	str	r0, [sp, #88]	; 0x58
 800fc80:	e7ba      	b.n	800fbf8 <_dtoa_r+0x164>
 800fc82:	920c      	str	r2, [sp, #48]	; 0x30
 800fc84:	e7c3      	b.n	800fc0e <_dtoa_r+0x17a>
 800fc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc88:	9a03      	ldr	r2, [sp, #12]
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	930a      	str	r3, [sp, #40]	; 0x28
 800fc8e:	4253      	negs	r3, r2
 800fc90:	930d      	str	r3, [sp, #52]	; 0x34
 800fc92:	2300      	movs	r3, #0
 800fc94:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc96:	e7c5      	b.n	800fc24 <_dtoa_r+0x190>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fca0:	9307      	str	r3, [sp, #28]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dc13      	bgt.n	800fcce <_dtoa_r+0x23a>
 800fca6:	2301      	movs	r3, #1
 800fca8:	001a      	movs	r2, r3
 800fcaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcac:	9307      	str	r3, [sp, #28]
 800fcae:	9223      	str	r2, [sp, #140]	; 0x8c
 800fcb0:	e00d      	b.n	800fcce <_dtoa_r+0x23a>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e7f1      	b.n	800fc9a <_dtoa_r+0x206>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fcba:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcbc:	4694      	mov	ip, r2
 800fcbe:	9b03      	ldr	r3, [sp, #12]
 800fcc0:	4463      	add	r3, ip
 800fcc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	dc00      	bgt.n	800fcce <_dtoa_r+0x23a>
 800fccc:	2301      	movs	r3, #1
 800fcce:	2100      	movs	r1, #0
 800fcd0:	2204      	movs	r2, #4
 800fcd2:	0010      	movs	r0, r2
 800fcd4:	3014      	adds	r0, #20
 800fcd6:	4298      	cmp	r0, r3
 800fcd8:	d91d      	bls.n	800fd16 <_dtoa_r+0x282>
 800fcda:	9b04      	ldr	r3, [sp, #16]
 800fcdc:	0018      	movs	r0, r3
 800fcde:	63d9      	str	r1, [r3, #60]	; 0x3c
 800fce0:	f7fc fb18 	bl	800c314 <_Balloc>
 800fce4:	9006      	str	r0, [sp, #24]
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d118      	bne.n	800fd1c <_dtoa_r+0x288>
 800fcea:	21b0      	movs	r1, #176	; 0xb0
 800fcec:	4b40      	ldr	r3, [pc, #256]	; (800fdf0 <_dtoa_r+0x35c>)
 800fcee:	4841      	ldr	r0, [pc, #260]	; (800fdf4 <_dtoa_r+0x360>)
 800fcf0:	9a06      	ldr	r2, [sp, #24]
 800fcf2:	31ff      	adds	r1, #255	; 0xff
 800fcf4:	f7ff fdd2 	bl	800f89c <__assert_func>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e7dd      	b.n	800fcb8 <_dtoa_r+0x224>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	940f      	str	r4, [sp, #60]	; 0x3c
 800fd00:	9322      	str	r3, [sp, #136]	; 0x88
 800fd02:	3b01      	subs	r3, #1
 800fd04:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd06:	9307      	str	r3, [sp, #28]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	3313      	adds	r3, #19
 800fd0c:	e7cf      	b.n	800fcae <_dtoa_r+0x21a>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd12:	3b02      	subs	r3, #2
 800fd14:	e7f6      	b.n	800fd04 <_dtoa_r+0x270>
 800fd16:	3101      	adds	r1, #1
 800fd18:	0052      	lsls	r2, r2, #1
 800fd1a:	e7da      	b.n	800fcd2 <_dtoa_r+0x23e>
 800fd1c:	9b04      	ldr	r3, [sp, #16]
 800fd1e:	9a06      	ldr	r2, [sp, #24]
 800fd20:	639a      	str	r2, [r3, #56]	; 0x38
 800fd22:	9b07      	ldr	r3, [sp, #28]
 800fd24:	2b0e      	cmp	r3, #14
 800fd26:	d900      	bls.n	800fd2a <_dtoa_r+0x296>
 800fd28:	e0e3      	b.n	800fef2 <_dtoa_r+0x45e>
 800fd2a:	2c00      	cmp	r4, #0
 800fd2c:	d100      	bne.n	800fd30 <_dtoa_r+0x29c>
 800fd2e:	e0e0      	b.n	800fef2 <_dtoa_r+0x45e>
 800fd30:	9b03      	ldr	r3, [sp, #12]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dd62      	ble.n	800fdfc <_dtoa_r+0x368>
 800fd36:	210f      	movs	r1, #15
 800fd38:	9a03      	ldr	r2, [sp, #12]
 800fd3a:	4b29      	ldr	r3, [pc, #164]	; (800fde0 <_dtoa_r+0x34c>)
 800fd3c:	400a      	ands	r2, r1
 800fd3e:	00d2      	lsls	r2, r2, #3
 800fd40:	189b      	adds	r3, r3, r2
 800fd42:	681e      	ldr	r6, [r3, #0]
 800fd44:	685f      	ldr	r7, [r3, #4]
 800fd46:	9b03      	ldr	r3, [sp, #12]
 800fd48:	2402      	movs	r4, #2
 800fd4a:	111d      	asrs	r5, r3, #4
 800fd4c:	05db      	lsls	r3, r3, #23
 800fd4e:	d50a      	bpl.n	800fd66 <_dtoa_r+0x2d2>
 800fd50:	4b29      	ldr	r3, [pc, #164]	; (800fdf8 <_dtoa_r+0x364>)
 800fd52:	400d      	ands	r5, r1
 800fd54:	6a1a      	ldr	r2, [r3, #32]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd5c:	f7f1 f88c 	bl	8000e78 <__aeabi_ddiv>
 800fd60:	9008      	str	r0, [sp, #32]
 800fd62:	9109      	str	r1, [sp, #36]	; 0x24
 800fd64:	3401      	adds	r4, #1
 800fd66:	4b24      	ldr	r3, [pc, #144]	; (800fdf8 <_dtoa_r+0x364>)
 800fd68:	930e      	str	r3, [sp, #56]	; 0x38
 800fd6a:	2d00      	cmp	r5, #0
 800fd6c:	d108      	bne.n	800fd80 <_dtoa_r+0x2ec>
 800fd6e:	9808      	ldr	r0, [sp, #32]
 800fd70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd72:	0032      	movs	r2, r6
 800fd74:	003b      	movs	r3, r7
 800fd76:	f7f1 f87f 	bl	8000e78 <__aeabi_ddiv>
 800fd7a:	9008      	str	r0, [sp, #32]
 800fd7c:	9109      	str	r1, [sp, #36]	; 0x24
 800fd7e:	e058      	b.n	800fe32 <_dtoa_r+0x39e>
 800fd80:	2301      	movs	r3, #1
 800fd82:	421d      	tst	r5, r3
 800fd84:	d009      	beq.n	800fd9a <_dtoa_r+0x306>
 800fd86:	18e4      	adds	r4, r4, r3
 800fd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd8a:	0030      	movs	r0, r6
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	0039      	movs	r1, r7
 800fd92:	f7f1 fc6b 	bl	800166c <__aeabi_dmul>
 800fd96:	0006      	movs	r6, r0
 800fd98:	000f      	movs	r7, r1
 800fd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd9c:	106d      	asrs	r5, r5, #1
 800fd9e:	3308      	adds	r3, #8
 800fda0:	e7e2      	b.n	800fd68 <_dtoa_r+0x2d4>
 800fda2:	46c0      	nop			; (mov r8, r8)
 800fda4:	7ff00000 	.word	0x7ff00000
 800fda8:	0000270f 	.word	0x0000270f
 800fdac:	08014245 	.word	0x08014245
 800fdb0:	08014248 	.word	0x08014248
 800fdb4:	080141b6 	.word	0x080141b6
 800fdb8:	080141b7 	.word	0x080141b7
 800fdbc:	3ff00000 	.word	0x3ff00000
 800fdc0:	fffffc01 	.word	0xfffffc01
 800fdc4:	3ff80000 	.word	0x3ff80000
 800fdc8:	636f4361 	.word	0x636f4361
 800fdcc:	3fd287a7 	.word	0x3fd287a7
 800fdd0:	8b60c8b3 	.word	0x8b60c8b3
 800fdd4:	3fc68a28 	.word	0x3fc68a28
 800fdd8:	509f79fb 	.word	0x509f79fb
 800fddc:	3fd34413 	.word	0x3fd34413
 800fde0:	080140b0 	.word	0x080140b0
 800fde4:	00000432 	.word	0x00000432
 800fde8:	00000412 	.word	0x00000412
 800fdec:	fe100000 	.word	0xfe100000
 800fdf0:	08013fb9 	.word	0x08013fb9
 800fdf4:	08014249 	.word	0x08014249
 800fdf8:	08014088 	.word	0x08014088
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	2402      	movs	r4, #2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d016      	beq.n	800fe32 <_dtoa_r+0x39e>
 800fe04:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe06:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe08:	220f      	movs	r2, #15
 800fe0a:	425d      	negs	r5, r3
 800fe0c:	402a      	ands	r2, r5
 800fe0e:	4bdd      	ldr	r3, [pc, #884]	; (8010184 <_dtoa_r+0x6f0>)
 800fe10:	00d2      	lsls	r2, r2, #3
 800fe12:	189b      	adds	r3, r3, r2
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	f7f1 fc28 	bl	800166c <__aeabi_dmul>
 800fe1c:	2701      	movs	r7, #1
 800fe1e:	2300      	movs	r3, #0
 800fe20:	9008      	str	r0, [sp, #32]
 800fe22:	9109      	str	r1, [sp, #36]	; 0x24
 800fe24:	4ed8      	ldr	r6, [pc, #864]	; (8010188 <_dtoa_r+0x6f4>)
 800fe26:	112d      	asrs	r5, r5, #4
 800fe28:	2d00      	cmp	r5, #0
 800fe2a:	d000      	beq.n	800fe2e <_dtoa_r+0x39a>
 800fe2c:	e091      	b.n	800ff52 <_dtoa_r+0x4be>
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d1a3      	bne.n	800fd7a <_dtoa_r+0x2e6>
 800fe32:	9e08      	ldr	r6, [sp, #32]
 800fe34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fe36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d100      	bne.n	800fe3e <_dtoa_r+0x3aa>
 800fe3c:	e094      	b.n	800ff68 <_dtoa_r+0x4d4>
 800fe3e:	2200      	movs	r2, #0
 800fe40:	0030      	movs	r0, r6
 800fe42:	0039      	movs	r1, r7
 800fe44:	4bd1      	ldr	r3, [pc, #836]	; (801018c <_dtoa_r+0x6f8>)
 800fe46:	f7f0 fb05 	bl	8000454 <__aeabi_dcmplt>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d100      	bne.n	800fe50 <_dtoa_r+0x3bc>
 800fe4e:	e08b      	b.n	800ff68 <_dtoa_r+0x4d4>
 800fe50:	9b07      	ldr	r3, [sp, #28]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d100      	bne.n	800fe58 <_dtoa_r+0x3c4>
 800fe56:	e087      	b.n	800ff68 <_dtoa_r+0x4d4>
 800fe58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	dd45      	ble.n	800feea <_dtoa_r+0x456>
 800fe5e:	9b03      	ldr	r3, [sp, #12]
 800fe60:	2200      	movs	r2, #0
 800fe62:	3b01      	subs	r3, #1
 800fe64:	930e      	str	r3, [sp, #56]	; 0x38
 800fe66:	0030      	movs	r0, r6
 800fe68:	4bc9      	ldr	r3, [pc, #804]	; (8010190 <_dtoa_r+0x6fc>)
 800fe6a:	0039      	movs	r1, r7
 800fe6c:	f7f1 fbfe 	bl	800166c <__aeabi_dmul>
 800fe70:	9008      	str	r0, [sp, #32]
 800fe72:	9109      	str	r1, [sp, #36]	; 0x24
 800fe74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe76:	3401      	adds	r4, #1
 800fe78:	0020      	movs	r0, r4
 800fe7a:	9e08      	ldr	r6, [sp, #32]
 800fe7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fe7e:	9312      	str	r3, [sp, #72]	; 0x48
 800fe80:	f7f2 fa8c 	bl	800239c <__aeabi_i2d>
 800fe84:	0032      	movs	r2, r6
 800fe86:	003b      	movs	r3, r7
 800fe88:	f7f1 fbf0 	bl	800166c <__aeabi_dmul>
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4bc1      	ldr	r3, [pc, #772]	; (8010194 <_dtoa_r+0x700>)
 800fe90:	f7f0 fc92 	bl	80007b8 <__aeabi_dadd>
 800fe94:	4ac0      	ldr	r2, [pc, #768]	; (8010198 <_dtoa_r+0x704>)
 800fe96:	9014      	str	r0, [sp, #80]	; 0x50
 800fe98:	9115      	str	r1, [sp, #84]	; 0x54
 800fe9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fe9e:	4694      	mov	ip, r2
 800fea0:	9308      	str	r3, [sp, #32]
 800fea2:	9409      	str	r4, [sp, #36]	; 0x24
 800fea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fea6:	4463      	add	r3, ip
 800fea8:	9318      	str	r3, [sp, #96]	; 0x60
 800feaa:	9309      	str	r3, [sp, #36]	; 0x24
 800feac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d15e      	bne.n	800ff70 <_dtoa_r+0x4dc>
 800feb2:	2200      	movs	r2, #0
 800feb4:	4bb9      	ldr	r3, [pc, #740]	; (801019c <_dtoa_r+0x708>)
 800feb6:	0030      	movs	r0, r6
 800feb8:	0039      	movs	r1, r7
 800feba:	f7f1 fe99 	bl	8001bf0 <__aeabi_dsub>
 800febe:	9a08      	ldr	r2, [sp, #32]
 800fec0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fec2:	0004      	movs	r4, r0
 800fec4:	000d      	movs	r5, r1
 800fec6:	f7f0 fad9 	bl	800047c <__aeabi_dcmpgt>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d000      	beq.n	800fed0 <_dtoa_r+0x43c>
 800fece:	e2b3      	b.n	8010438 <_dtoa_r+0x9a4>
 800fed0:	48b3      	ldr	r0, [pc, #716]	; (80101a0 <_dtoa_r+0x70c>)
 800fed2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fed4:	4684      	mov	ip, r0
 800fed6:	4461      	add	r1, ip
 800fed8:	000b      	movs	r3, r1
 800feda:	0020      	movs	r0, r4
 800fedc:	0029      	movs	r1, r5
 800fede:	9a08      	ldr	r2, [sp, #32]
 800fee0:	f7f0 fab8 	bl	8000454 <__aeabi_dcmplt>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d000      	beq.n	800feea <_dtoa_r+0x456>
 800fee8:	e2a3      	b.n	8010432 <_dtoa_r+0x99e>
 800feea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800feec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800feee:	9308      	str	r3, [sp, #32]
 800fef0:	9409      	str	r4, [sp, #36]	; 0x24
 800fef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	da00      	bge.n	800fefa <_dtoa_r+0x466>
 800fef8:	e179      	b.n	80101ee <_dtoa_r+0x75a>
 800fefa:	9a03      	ldr	r2, [sp, #12]
 800fefc:	2a0e      	cmp	r2, #14
 800fefe:	dd00      	ble.n	800ff02 <_dtoa_r+0x46e>
 800ff00:	e175      	b.n	80101ee <_dtoa_r+0x75a>
 800ff02:	4ba0      	ldr	r3, [pc, #640]	; (8010184 <_dtoa_r+0x6f0>)
 800ff04:	00d2      	lsls	r2, r2, #3
 800ff06:	189b      	adds	r3, r3, r2
 800ff08:	681e      	ldr	r6, [r3, #0]
 800ff0a:	685f      	ldr	r7, [r3, #4]
 800ff0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	db00      	blt.n	800ff14 <_dtoa_r+0x480>
 800ff12:	e0e5      	b.n	80100e0 <_dtoa_r+0x64c>
 800ff14:	9b07      	ldr	r3, [sp, #28]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	dd00      	ble.n	800ff1c <_dtoa_r+0x488>
 800ff1a:	e0e1      	b.n	80100e0 <_dtoa_r+0x64c>
 800ff1c:	d000      	beq.n	800ff20 <_dtoa_r+0x48c>
 800ff1e:	e288      	b.n	8010432 <_dtoa_r+0x99e>
 800ff20:	2200      	movs	r2, #0
 800ff22:	0030      	movs	r0, r6
 800ff24:	0039      	movs	r1, r7
 800ff26:	4b9d      	ldr	r3, [pc, #628]	; (801019c <_dtoa_r+0x708>)
 800ff28:	f7f1 fba0 	bl	800166c <__aeabi_dmul>
 800ff2c:	9a08      	ldr	r2, [sp, #32]
 800ff2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff30:	f7f0 faae 	bl	8000490 <__aeabi_dcmpge>
 800ff34:	9e07      	ldr	r6, [sp, #28]
 800ff36:	0037      	movs	r7, r6
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d000      	beq.n	800ff3e <_dtoa_r+0x4aa>
 800ff3c:	e25f      	b.n	80103fe <_dtoa_r+0x96a>
 800ff3e:	9b06      	ldr	r3, [sp, #24]
 800ff40:	9a06      	ldr	r2, [sp, #24]
 800ff42:	3301      	adds	r3, #1
 800ff44:	9308      	str	r3, [sp, #32]
 800ff46:	2331      	movs	r3, #49	; 0x31
 800ff48:	7013      	strb	r3, [r2, #0]
 800ff4a:	9b03      	ldr	r3, [sp, #12]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	9303      	str	r3, [sp, #12]
 800ff50:	e25a      	b.n	8010408 <_dtoa_r+0x974>
 800ff52:	423d      	tst	r5, r7
 800ff54:	d005      	beq.n	800ff62 <_dtoa_r+0x4ce>
 800ff56:	6832      	ldr	r2, [r6, #0]
 800ff58:	6873      	ldr	r3, [r6, #4]
 800ff5a:	f7f1 fb87 	bl	800166c <__aeabi_dmul>
 800ff5e:	003b      	movs	r3, r7
 800ff60:	3401      	adds	r4, #1
 800ff62:	106d      	asrs	r5, r5, #1
 800ff64:	3608      	adds	r6, #8
 800ff66:	e75f      	b.n	800fe28 <_dtoa_r+0x394>
 800ff68:	9b03      	ldr	r3, [sp, #12]
 800ff6a:	930e      	str	r3, [sp, #56]	; 0x38
 800ff6c:	9b07      	ldr	r3, [sp, #28]
 800ff6e:	e783      	b.n	800fe78 <_dtoa_r+0x3e4>
 800ff70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff72:	4b84      	ldr	r3, [pc, #528]	; (8010184 <_dtoa_r+0x6f0>)
 800ff74:	3a01      	subs	r2, #1
 800ff76:	00d2      	lsls	r2, r2, #3
 800ff78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ff7a:	189b      	adds	r3, r3, r2
 800ff7c:	9c08      	ldr	r4, [sp, #32]
 800ff7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	2900      	cmp	r1, #0
 800ff86:	d051      	beq.n	801002c <_dtoa_r+0x598>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	4986      	ldr	r1, [pc, #536]	; (80101a4 <_dtoa_r+0x710>)
 800ff8c:	f7f0 ff74 	bl	8000e78 <__aeabi_ddiv>
 800ff90:	0022      	movs	r2, r4
 800ff92:	002b      	movs	r3, r5
 800ff94:	f7f1 fe2c 	bl	8001bf0 <__aeabi_dsub>
 800ff98:	9a06      	ldr	r2, [sp, #24]
 800ff9a:	0004      	movs	r4, r0
 800ff9c:	4694      	mov	ip, r2
 800ff9e:	000d      	movs	r5, r1
 800ffa0:	9b06      	ldr	r3, [sp, #24]
 800ffa2:	9314      	str	r3, [sp, #80]	; 0x50
 800ffa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffa6:	4463      	add	r3, ip
 800ffa8:	9318      	str	r3, [sp, #96]	; 0x60
 800ffaa:	0039      	movs	r1, r7
 800ffac:	0030      	movs	r0, r6
 800ffae:	f7f2 f9bf 	bl	8002330 <__aeabi_d2iz>
 800ffb2:	9012      	str	r0, [sp, #72]	; 0x48
 800ffb4:	f7f2 f9f2 	bl	800239c <__aeabi_i2d>
 800ffb8:	0002      	movs	r2, r0
 800ffba:	000b      	movs	r3, r1
 800ffbc:	0030      	movs	r0, r6
 800ffbe:	0039      	movs	r1, r7
 800ffc0:	f7f1 fe16 	bl	8001bf0 <__aeabi_dsub>
 800ffc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffc8:	3301      	adds	r3, #1
 800ffca:	9308      	str	r3, [sp, #32]
 800ffcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffce:	0006      	movs	r6, r0
 800ffd0:	3330      	adds	r3, #48	; 0x30
 800ffd2:	7013      	strb	r3, [r2, #0]
 800ffd4:	0022      	movs	r2, r4
 800ffd6:	002b      	movs	r3, r5
 800ffd8:	000f      	movs	r7, r1
 800ffda:	f7f0 fa3b 	bl	8000454 <__aeabi_dcmplt>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d174      	bne.n	80100cc <_dtoa_r+0x638>
 800ffe2:	0032      	movs	r2, r6
 800ffe4:	003b      	movs	r3, r7
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	4968      	ldr	r1, [pc, #416]	; (801018c <_dtoa_r+0x6f8>)
 800ffea:	f7f1 fe01 	bl	8001bf0 <__aeabi_dsub>
 800ffee:	0022      	movs	r2, r4
 800fff0:	002b      	movs	r3, r5
 800fff2:	f7f0 fa2f 	bl	8000454 <__aeabi_dcmplt>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d000      	beq.n	800fffc <_dtoa_r+0x568>
 800fffa:	e0d7      	b.n	80101ac <_dtoa_r+0x718>
 800fffc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fffe:	9a08      	ldr	r2, [sp, #32]
 8010000:	4293      	cmp	r3, r2
 8010002:	d100      	bne.n	8010006 <_dtoa_r+0x572>
 8010004:	e771      	b.n	800feea <_dtoa_r+0x456>
 8010006:	2200      	movs	r2, #0
 8010008:	0020      	movs	r0, r4
 801000a:	0029      	movs	r1, r5
 801000c:	4b60      	ldr	r3, [pc, #384]	; (8010190 <_dtoa_r+0x6fc>)
 801000e:	f7f1 fb2d 	bl	800166c <__aeabi_dmul>
 8010012:	4b5f      	ldr	r3, [pc, #380]	; (8010190 <_dtoa_r+0x6fc>)
 8010014:	0004      	movs	r4, r0
 8010016:	000d      	movs	r5, r1
 8010018:	0030      	movs	r0, r6
 801001a:	0039      	movs	r1, r7
 801001c:	2200      	movs	r2, #0
 801001e:	f7f1 fb25 	bl	800166c <__aeabi_dmul>
 8010022:	9b08      	ldr	r3, [sp, #32]
 8010024:	0006      	movs	r6, r0
 8010026:	000f      	movs	r7, r1
 8010028:	9314      	str	r3, [sp, #80]	; 0x50
 801002a:	e7be      	b.n	800ffaa <_dtoa_r+0x516>
 801002c:	0020      	movs	r0, r4
 801002e:	0029      	movs	r1, r5
 8010030:	f7f1 fb1c 	bl	800166c <__aeabi_dmul>
 8010034:	9a06      	ldr	r2, [sp, #24]
 8010036:	9b06      	ldr	r3, [sp, #24]
 8010038:	4694      	mov	ip, r2
 801003a:	9308      	str	r3, [sp, #32]
 801003c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801003e:	9014      	str	r0, [sp, #80]	; 0x50
 8010040:	9115      	str	r1, [sp, #84]	; 0x54
 8010042:	4463      	add	r3, ip
 8010044:	9319      	str	r3, [sp, #100]	; 0x64
 8010046:	0030      	movs	r0, r6
 8010048:	0039      	movs	r1, r7
 801004a:	f7f2 f971 	bl	8002330 <__aeabi_d2iz>
 801004e:	9018      	str	r0, [sp, #96]	; 0x60
 8010050:	f7f2 f9a4 	bl	800239c <__aeabi_i2d>
 8010054:	0002      	movs	r2, r0
 8010056:	000b      	movs	r3, r1
 8010058:	0030      	movs	r0, r6
 801005a:	0039      	movs	r1, r7
 801005c:	f7f1 fdc8 	bl	8001bf0 <__aeabi_dsub>
 8010060:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010062:	9b08      	ldr	r3, [sp, #32]
 8010064:	3630      	adds	r6, #48	; 0x30
 8010066:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010068:	701e      	strb	r6, [r3, #0]
 801006a:	3301      	adds	r3, #1
 801006c:	0004      	movs	r4, r0
 801006e:	000d      	movs	r5, r1
 8010070:	9308      	str	r3, [sp, #32]
 8010072:	4293      	cmp	r3, r2
 8010074:	d12d      	bne.n	80100d2 <_dtoa_r+0x63e>
 8010076:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010078:	9915      	ldr	r1, [sp, #84]	; 0x54
 801007a:	9a06      	ldr	r2, [sp, #24]
 801007c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801007e:	4694      	mov	ip, r2
 8010080:	4463      	add	r3, ip
 8010082:	2200      	movs	r2, #0
 8010084:	9308      	str	r3, [sp, #32]
 8010086:	4b47      	ldr	r3, [pc, #284]	; (80101a4 <_dtoa_r+0x710>)
 8010088:	f7f0 fb96 	bl	80007b8 <__aeabi_dadd>
 801008c:	0002      	movs	r2, r0
 801008e:	000b      	movs	r3, r1
 8010090:	0020      	movs	r0, r4
 8010092:	0029      	movs	r1, r5
 8010094:	f7f0 f9f2 	bl	800047c <__aeabi_dcmpgt>
 8010098:	2800      	cmp	r0, #0
 801009a:	d000      	beq.n	801009e <_dtoa_r+0x60a>
 801009c:	e086      	b.n	80101ac <_dtoa_r+0x718>
 801009e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100a2:	2000      	movs	r0, #0
 80100a4:	493f      	ldr	r1, [pc, #252]	; (80101a4 <_dtoa_r+0x710>)
 80100a6:	f7f1 fda3 	bl	8001bf0 <__aeabi_dsub>
 80100aa:	0002      	movs	r2, r0
 80100ac:	000b      	movs	r3, r1
 80100ae:	0020      	movs	r0, r4
 80100b0:	0029      	movs	r1, r5
 80100b2:	f7f0 f9cf 	bl	8000454 <__aeabi_dcmplt>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d100      	bne.n	80100bc <_dtoa_r+0x628>
 80100ba:	e716      	b.n	800feea <_dtoa_r+0x456>
 80100bc:	9b08      	ldr	r3, [sp, #32]
 80100be:	001a      	movs	r2, r3
 80100c0:	3a01      	subs	r2, #1
 80100c2:	9208      	str	r2, [sp, #32]
 80100c4:	7812      	ldrb	r2, [r2, #0]
 80100c6:	2a30      	cmp	r2, #48	; 0x30
 80100c8:	d0f8      	beq.n	80100bc <_dtoa_r+0x628>
 80100ca:	9308      	str	r3, [sp, #32]
 80100cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100ce:	9303      	str	r3, [sp, #12]
 80100d0:	e046      	b.n	8010160 <_dtoa_r+0x6cc>
 80100d2:	2200      	movs	r2, #0
 80100d4:	4b2e      	ldr	r3, [pc, #184]	; (8010190 <_dtoa_r+0x6fc>)
 80100d6:	f7f1 fac9 	bl	800166c <__aeabi_dmul>
 80100da:	0006      	movs	r6, r0
 80100dc:	000f      	movs	r7, r1
 80100de:	e7b2      	b.n	8010046 <_dtoa_r+0x5b2>
 80100e0:	9b06      	ldr	r3, [sp, #24]
 80100e2:	9a06      	ldr	r2, [sp, #24]
 80100e4:	930a      	str	r3, [sp, #40]	; 0x28
 80100e6:	9b07      	ldr	r3, [sp, #28]
 80100e8:	9c08      	ldr	r4, [sp, #32]
 80100ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80100ec:	3b01      	subs	r3, #1
 80100ee:	189b      	adds	r3, r3, r2
 80100f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80100f2:	0032      	movs	r2, r6
 80100f4:	003b      	movs	r3, r7
 80100f6:	0020      	movs	r0, r4
 80100f8:	0029      	movs	r1, r5
 80100fa:	f7f0 febd 	bl	8000e78 <__aeabi_ddiv>
 80100fe:	f7f2 f917 	bl	8002330 <__aeabi_d2iz>
 8010102:	9007      	str	r0, [sp, #28]
 8010104:	f7f2 f94a 	bl	800239c <__aeabi_i2d>
 8010108:	0032      	movs	r2, r6
 801010a:	003b      	movs	r3, r7
 801010c:	f7f1 faae 	bl	800166c <__aeabi_dmul>
 8010110:	0002      	movs	r2, r0
 8010112:	000b      	movs	r3, r1
 8010114:	0020      	movs	r0, r4
 8010116:	0029      	movs	r1, r5
 8010118:	f7f1 fd6a 	bl	8001bf0 <__aeabi_dsub>
 801011c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801011e:	001a      	movs	r2, r3
 8010120:	3201      	adds	r2, #1
 8010122:	920a      	str	r2, [sp, #40]	; 0x28
 8010124:	9208      	str	r2, [sp, #32]
 8010126:	9a07      	ldr	r2, [sp, #28]
 8010128:	3230      	adds	r2, #48	; 0x30
 801012a:	701a      	strb	r2, [r3, #0]
 801012c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801012e:	429a      	cmp	r2, r3
 8010130:	d14f      	bne.n	80101d2 <_dtoa_r+0x73e>
 8010132:	0002      	movs	r2, r0
 8010134:	000b      	movs	r3, r1
 8010136:	f7f0 fb3f 	bl	80007b8 <__aeabi_dadd>
 801013a:	0032      	movs	r2, r6
 801013c:	003b      	movs	r3, r7
 801013e:	0004      	movs	r4, r0
 8010140:	000d      	movs	r5, r1
 8010142:	f7f0 f99b 	bl	800047c <__aeabi_dcmpgt>
 8010146:	2800      	cmp	r0, #0
 8010148:	d12e      	bne.n	80101a8 <_dtoa_r+0x714>
 801014a:	0032      	movs	r2, r6
 801014c:	003b      	movs	r3, r7
 801014e:	0020      	movs	r0, r4
 8010150:	0029      	movs	r1, r5
 8010152:	f7f0 f979 	bl	8000448 <__aeabi_dcmpeq>
 8010156:	2800      	cmp	r0, #0
 8010158:	d002      	beq.n	8010160 <_dtoa_r+0x6cc>
 801015a:	9b07      	ldr	r3, [sp, #28]
 801015c:	07de      	lsls	r6, r3, #31
 801015e:	d423      	bmi.n	80101a8 <_dtoa_r+0x714>
 8010160:	9905      	ldr	r1, [sp, #20]
 8010162:	9804      	ldr	r0, [sp, #16]
 8010164:	f7fc f8fe 	bl	800c364 <_Bfree>
 8010168:	2300      	movs	r3, #0
 801016a:	9a08      	ldr	r2, [sp, #32]
 801016c:	7013      	strb	r3, [r2, #0]
 801016e:	9b03      	ldr	r3, [sp, #12]
 8010170:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010172:	3301      	adds	r3, #1
 8010174:	6013      	str	r3, [r2, #0]
 8010176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010178:	2b00      	cmp	r3, #0
 801017a:	d100      	bne.n	801017e <_dtoa_r+0x6ea>
 801017c:	e4bd      	b.n	800fafa <_dtoa_r+0x66>
 801017e:	9a08      	ldr	r2, [sp, #32]
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	e4ba      	b.n	800fafa <_dtoa_r+0x66>
 8010184:	080140b0 	.word	0x080140b0
 8010188:	08014088 	.word	0x08014088
 801018c:	3ff00000 	.word	0x3ff00000
 8010190:	40240000 	.word	0x40240000
 8010194:	401c0000 	.word	0x401c0000
 8010198:	fcc00000 	.word	0xfcc00000
 801019c:	40140000 	.word	0x40140000
 80101a0:	7cc00000 	.word	0x7cc00000
 80101a4:	3fe00000 	.word	0x3fe00000
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	930e      	str	r3, [sp, #56]	; 0x38
 80101ac:	9b08      	ldr	r3, [sp, #32]
 80101ae:	9308      	str	r3, [sp, #32]
 80101b0:	3b01      	subs	r3, #1
 80101b2:	781a      	ldrb	r2, [r3, #0]
 80101b4:	2a39      	cmp	r2, #57	; 0x39
 80101b6:	d108      	bne.n	80101ca <_dtoa_r+0x736>
 80101b8:	9a06      	ldr	r2, [sp, #24]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d1f7      	bne.n	80101ae <_dtoa_r+0x71a>
 80101be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101c0:	9906      	ldr	r1, [sp, #24]
 80101c2:	3201      	adds	r2, #1
 80101c4:	920e      	str	r2, [sp, #56]	; 0x38
 80101c6:	2230      	movs	r2, #48	; 0x30
 80101c8:	700a      	strb	r2, [r1, #0]
 80101ca:	781a      	ldrb	r2, [r3, #0]
 80101cc:	3201      	adds	r2, #1
 80101ce:	701a      	strb	r2, [r3, #0]
 80101d0:	e77c      	b.n	80100cc <_dtoa_r+0x638>
 80101d2:	2200      	movs	r2, #0
 80101d4:	4ba9      	ldr	r3, [pc, #676]	; (801047c <_dtoa_r+0x9e8>)
 80101d6:	f7f1 fa49 	bl	800166c <__aeabi_dmul>
 80101da:	2200      	movs	r2, #0
 80101dc:	2300      	movs	r3, #0
 80101de:	0004      	movs	r4, r0
 80101e0:	000d      	movs	r5, r1
 80101e2:	f7f0 f931 	bl	8000448 <__aeabi_dcmpeq>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d100      	bne.n	80101ec <_dtoa_r+0x758>
 80101ea:	e782      	b.n	80100f2 <_dtoa_r+0x65e>
 80101ec:	e7b8      	b.n	8010160 <_dtoa_r+0x6cc>
 80101ee:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80101f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80101f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80101f4:	2f00      	cmp	r7, #0
 80101f6:	d012      	beq.n	801021e <_dtoa_r+0x78a>
 80101f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80101fa:	2a01      	cmp	r2, #1
 80101fc:	dc6e      	bgt.n	80102dc <_dtoa_r+0x848>
 80101fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010200:	2a00      	cmp	r2, #0
 8010202:	d065      	beq.n	80102d0 <_dtoa_r+0x83c>
 8010204:	4a9e      	ldr	r2, [pc, #632]	; (8010480 <_dtoa_r+0x9ec>)
 8010206:	189b      	adds	r3, r3, r2
 8010208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801020a:	2101      	movs	r1, #1
 801020c:	18d2      	adds	r2, r2, r3
 801020e:	920a      	str	r2, [sp, #40]	; 0x28
 8010210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010212:	9804      	ldr	r0, [sp, #16]
 8010214:	18d3      	adds	r3, r2, r3
 8010216:	930c      	str	r3, [sp, #48]	; 0x30
 8010218:	f7fc f986 	bl	800c528 <__i2b>
 801021c:	0007      	movs	r7, r0
 801021e:	2c00      	cmp	r4, #0
 8010220:	d00e      	beq.n	8010240 <_dtoa_r+0x7ac>
 8010222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010224:	2b00      	cmp	r3, #0
 8010226:	dd0b      	ble.n	8010240 <_dtoa_r+0x7ac>
 8010228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801022a:	0023      	movs	r3, r4
 801022c:	4294      	cmp	r4, r2
 801022e:	dd00      	ble.n	8010232 <_dtoa_r+0x79e>
 8010230:	0013      	movs	r3, r2
 8010232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010234:	1ae4      	subs	r4, r4, r3
 8010236:	1ad2      	subs	r2, r2, r3
 8010238:	920a      	str	r2, [sp, #40]	; 0x28
 801023a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801023c:	1ad3      	subs	r3, r2, r3
 801023e:	930c      	str	r3, [sp, #48]	; 0x30
 8010240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010242:	2b00      	cmp	r3, #0
 8010244:	d01e      	beq.n	8010284 <_dtoa_r+0x7f0>
 8010246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010248:	2b00      	cmp	r3, #0
 801024a:	d05c      	beq.n	8010306 <_dtoa_r+0x872>
 801024c:	2d00      	cmp	r5, #0
 801024e:	dd10      	ble.n	8010272 <_dtoa_r+0x7de>
 8010250:	0039      	movs	r1, r7
 8010252:	002a      	movs	r2, r5
 8010254:	9804      	ldr	r0, [sp, #16]
 8010256:	f7fc fa2f 	bl	800c6b8 <__pow5mult>
 801025a:	9a05      	ldr	r2, [sp, #20]
 801025c:	0001      	movs	r1, r0
 801025e:	0007      	movs	r7, r0
 8010260:	9804      	ldr	r0, [sp, #16]
 8010262:	f7fc f979 	bl	800c558 <__multiply>
 8010266:	0006      	movs	r6, r0
 8010268:	9905      	ldr	r1, [sp, #20]
 801026a:	9804      	ldr	r0, [sp, #16]
 801026c:	f7fc f87a 	bl	800c364 <_Bfree>
 8010270:	9605      	str	r6, [sp, #20]
 8010272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010274:	1b5a      	subs	r2, r3, r5
 8010276:	42ab      	cmp	r3, r5
 8010278:	d004      	beq.n	8010284 <_dtoa_r+0x7f0>
 801027a:	9905      	ldr	r1, [sp, #20]
 801027c:	9804      	ldr	r0, [sp, #16]
 801027e:	f7fc fa1b 	bl	800c6b8 <__pow5mult>
 8010282:	9005      	str	r0, [sp, #20]
 8010284:	2101      	movs	r1, #1
 8010286:	9804      	ldr	r0, [sp, #16]
 8010288:	f7fc f94e 	bl	800c528 <__i2b>
 801028c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801028e:	0006      	movs	r6, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	dd3a      	ble.n	801030a <_dtoa_r+0x876>
 8010294:	001a      	movs	r2, r3
 8010296:	0001      	movs	r1, r0
 8010298:	9804      	ldr	r0, [sp, #16]
 801029a:	f7fc fa0d 	bl	800c6b8 <__pow5mult>
 801029e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102a0:	0006      	movs	r6, r0
 80102a2:	2500      	movs	r5, #0
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	dc38      	bgt.n	801031a <_dtoa_r+0x886>
 80102a8:	2500      	movs	r5, #0
 80102aa:	9b08      	ldr	r3, [sp, #32]
 80102ac:	42ab      	cmp	r3, r5
 80102ae:	d130      	bne.n	8010312 <_dtoa_r+0x87e>
 80102b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b2:	031b      	lsls	r3, r3, #12
 80102b4:	42ab      	cmp	r3, r5
 80102b6:	d12c      	bne.n	8010312 <_dtoa_r+0x87e>
 80102b8:	4b72      	ldr	r3, [pc, #456]	; (8010484 <_dtoa_r+0x9f0>)
 80102ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102bc:	4213      	tst	r3, r2
 80102be:	d028      	beq.n	8010312 <_dtoa_r+0x87e>
 80102c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c2:	3501      	adds	r5, #1
 80102c4:	3301      	adds	r3, #1
 80102c6:	930a      	str	r3, [sp, #40]	; 0x28
 80102c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102ca:	3301      	adds	r3, #1
 80102cc:	930c      	str	r3, [sp, #48]	; 0x30
 80102ce:	e020      	b.n	8010312 <_dtoa_r+0x87e>
 80102d0:	2336      	movs	r3, #54	; 0x36
 80102d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80102d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80102d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	e795      	b.n	8010208 <_dtoa_r+0x774>
 80102dc:	9b07      	ldr	r3, [sp, #28]
 80102de:	1e5d      	subs	r5, r3, #1
 80102e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102e2:	42ab      	cmp	r3, r5
 80102e4:	db07      	blt.n	80102f6 <_dtoa_r+0x862>
 80102e6:	1b5d      	subs	r5, r3, r5
 80102e8:	9b07      	ldr	r3, [sp, #28]
 80102ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	da8b      	bge.n	8010208 <_dtoa_r+0x774>
 80102f0:	1ae4      	subs	r4, r4, r3
 80102f2:	2300      	movs	r3, #0
 80102f4:	e788      	b.n	8010208 <_dtoa_r+0x774>
 80102f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80102fa:	1aeb      	subs	r3, r5, r3
 80102fc:	18d3      	adds	r3, r2, r3
 80102fe:	950d      	str	r5, [sp, #52]	; 0x34
 8010300:	9313      	str	r3, [sp, #76]	; 0x4c
 8010302:	2500      	movs	r5, #0
 8010304:	e7f0      	b.n	80102e8 <_dtoa_r+0x854>
 8010306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010308:	e7b7      	b.n	801027a <_dtoa_r+0x7e6>
 801030a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801030c:	2500      	movs	r5, #0
 801030e:	2b01      	cmp	r3, #1
 8010310:	ddca      	ble.n	80102a8 <_dtoa_r+0x814>
 8010312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010314:	2001      	movs	r0, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	d008      	beq.n	801032c <_dtoa_r+0x898>
 801031a:	6933      	ldr	r3, [r6, #16]
 801031c:	3303      	adds	r3, #3
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	18f3      	adds	r3, r6, r3
 8010322:	6858      	ldr	r0, [r3, #4]
 8010324:	f7fc f8b8 	bl	800c498 <__hi0bits>
 8010328:	2320      	movs	r3, #32
 801032a:	1a18      	subs	r0, r3, r0
 801032c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801032e:	1818      	adds	r0, r3, r0
 8010330:	0002      	movs	r2, r0
 8010332:	231f      	movs	r3, #31
 8010334:	401a      	ands	r2, r3
 8010336:	4218      	tst	r0, r3
 8010338:	d047      	beq.n	80103ca <_dtoa_r+0x936>
 801033a:	3301      	adds	r3, #1
 801033c:	1a9b      	subs	r3, r3, r2
 801033e:	2b04      	cmp	r3, #4
 8010340:	dd3f      	ble.n	80103c2 <_dtoa_r+0x92e>
 8010342:	231c      	movs	r3, #28
 8010344:	1a9b      	subs	r3, r3, r2
 8010346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010348:	18e4      	adds	r4, r4, r3
 801034a:	18d2      	adds	r2, r2, r3
 801034c:	920a      	str	r2, [sp, #40]	; 0x28
 801034e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010350:	18d3      	adds	r3, r2, r3
 8010352:	930c      	str	r3, [sp, #48]	; 0x30
 8010354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010356:	2b00      	cmp	r3, #0
 8010358:	dd05      	ble.n	8010366 <_dtoa_r+0x8d2>
 801035a:	001a      	movs	r2, r3
 801035c:	9905      	ldr	r1, [sp, #20]
 801035e:	9804      	ldr	r0, [sp, #16]
 8010360:	f7fc f9ec 	bl	800c73c <__lshift>
 8010364:	9005      	str	r0, [sp, #20]
 8010366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010368:	2b00      	cmp	r3, #0
 801036a:	dd05      	ble.n	8010378 <_dtoa_r+0x8e4>
 801036c:	0031      	movs	r1, r6
 801036e:	001a      	movs	r2, r3
 8010370:	9804      	ldr	r0, [sp, #16]
 8010372:	f7fc f9e3 	bl	800c73c <__lshift>
 8010376:	0006      	movs	r6, r0
 8010378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801037a:	2b00      	cmp	r3, #0
 801037c:	d027      	beq.n	80103ce <_dtoa_r+0x93a>
 801037e:	0031      	movs	r1, r6
 8010380:	9805      	ldr	r0, [sp, #20]
 8010382:	f7fc fa49 	bl	800c818 <__mcmp>
 8010386:	2800      	cmp	r0, #0
 8010388:	da21      	bge.n	80103ce <_dtoa_r+0x93a>
 801038a:	9b03      	ldr	r3, [sp, #12]
 801038c:	220a      	movs	r2, #10
 801038e:	3b01      	subs	r3, #1
 8010390:	9303      	str	r3, [sp, #12]
 8010392:	9905      	ldr	r1, [sp, #20]
 8010394:	2300      	movs	r3, #0
 8010396:	9804      	ldr	r0, [sp, #16]
 8010398:	f7fb ffee 	bl	800c378 <__multadd>
 801039c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801039e:	9005      	str	r0, [sp, #20]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d100      	bne.n	80103a6 <_dtoa_r+0x912>
 80103a4:	e15d      	b.n	8010662 <_dtoa_r+0xbce>
 80103a6:	2300      	movs	r3, #0
 80103a8:	0039      	movs	r1, r7
 80103aa:	220a      	movs	r2, #10
 80103ac:	9804      	ldr	r0, [sp, #16]
 80103ae:	f7fb ffe3 	bl	800c378 <__multadd>
 80103b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103b4:	0007      	movs	r7, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	dc49      	bgt.n	801044e <_dtoa_r+0x9ba>
 80103ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103bc:	2b02      	cmp	r3, #2
 80103be:	dc0e      	bgt.n	80103de <_dtoa_r+0x94a>
 80103c0:	e045      	b.n	801044e <_dtoa_r+0x9ba>
 80103c2:	2b04      	cmp	r3, #4
 80103c4:	d0c6      	beq.n	8010354 <_dtoa_r+0x8c0>
 80103c6:	331c      	adds	r3, #28
 80103c8:	e7bd      	b.n	8010346 <_dtoa_r+0x8b2>
 80103ca:	0013      	movs	r3, r2
 80103cc:	e7fb      	b.n	80103c6 <_dtoa_r+0x932>
 80103ce:	9b07      	ldr	r3, [sp, #28]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dc36      	bgt.n	8010442 <_dtoa_r+0x9ae>
 80103d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	dd33      	ble.n	8010442 <_dtoa_r+0x9ae>
 80103da:	9b07      	ldr	r3, [sp, #28]
 80103dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80103de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10c      	bne.n	80103fe <_dtoa_r+0x96a>
 80103e4:	0031      	movs	r1, r6
 80103e6:	2205      	movs	r2, #5
 80103e8:	9804      	ldr	r0, [sp, #16]
 80103ea:	f7fb ffc5 	bl	800c378 <__multadd>
 80103ee:	0006      	movs	r6, r0
 80103f0:	0001      	movs	r1, r0
 80103f2:	9805      	ldr	r0, [sp, #20]
 80103f4:	f7fc fa10 	bl	800c818 <__mcmp>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	dd00      	ble.n	80103fe <_dtoa_r+0x96a>
 80103fc:	e59f      	b.n	800ff3e <_dtoa_r+0x4aa>
 80103fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010400:	43db      	mvns	r3, r3
 8010402:	9303      	str	r3, [sp, #12]
 8010404:	9b06      	ldr	r3, [sp, #24]
 8010406:	9308      	str	r3, [sp, #32]
 8010408:	2500      	movs	r5, #0
 801040a:	0031      	movs	r1, r6
 801040c:	9804      	ldr	r0, [sp, #16]
 801040e:	f7fb ffa9 	bl	800c364 <_Bfree>
 8010412:	2f00      	cmp	r7, #0
 8010414:	d100      	bne.n	8010418 <_dtoa_r+0x984>
 8010416:	e6a3      	b.n	8010160 <_dtoa_r+0x6cc>
 8010418:	2d00      	cmp	r5, #0
 801041a:	d005      	beq.n	8010428 <_dtoa_r+0x994>
 801041c:	42bd      	cmp	r5, r7
 801041e:	d003      	beq.n	8010428 <_dtoa_r+0x994>
 8010420:	0029      	movs	r1, r5
 8010422:	9804      	ldr	r0, [sp, #16]
 8010424:	f7fb ff9e 	bl	800c364 <_Bfree>
 8010428:	0039      	movs	r1, r7
 801042a:	9804      	ldr	r0, [sp, #16]
 801042c:	f7fb ff9a 	bl	800c364 <_Bfree>
 8010430:	e696      	b.n	8010160 <_dtoa_r+0x6cc>
 8010432:	2600      	movs	r6, #0
 8010434:	0037      	movs	r7, r6
 8010436:	e7e2      	b.n	80103fe <_dtoa_r+0x96a>
 8010438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801043a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801043c:	9303      	str	r3, [sp, #12]
 801043e:	0037      	movs	r7, r6
 8010440:	e57d      	b.n	800ff3e <_dtoa_r+0x4aa>
 8010442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010444:	2b00      	cmp	r3, #0
 8010446:	d100      	bne.n	801044a <_dtoa_r+0x9b6>
 8010448:	e0c3      	b.n	80105d2 <_dtoa_r+0xb3e>
 801044a:	9b07      	ldr	r3, [sp, #28]
 801044c:	930b      	str	r3, [sp, #44]	; 0x2c
 801044e:	2c00      	cmp	r4, #0
 8010450:	dd05      	ble.n	801045e <_dtoa_r+0x9ca>
 8010452:	0039      	movs	r1, r7
 8010454:	0022      	movs	r2, r4
 8010456:	9804      	ldr	r0, [sp, #16]
 8010458:	f7fc f970 	bl	800c73c <__lshift>
 801045c:	0007      	movs	r7, r0
 801045e:	0038      	movs	r0, r7
 8010460:	2d00      	cmp	r5, #0
 8010462:	d024      	beq.n	80104ae <_dtoa_r+0xa1a>
 8010464:	6879      	ldr	r1, [r7, #4]
 8010466:	9804      	ldr	r0, [sp, #16]
 8010468:	f7fb ff54 	bl	800c314 <_Balloc>
 801046c:	1e04      	subs	r4, r0, #0
 801046e:	d111      	bne.n	8010494 <_dtoa_r+0xa00>
 8010470:	0022      	movs	r2, r4
 8010472:	4b05      	ldr	r3, [pc, #20]	; (8010488 <_dtoa_r+0x9f4>)
 8010474:	4805      	ldr	r0, [pc, #20]	; (801048c <_dtoa_r+0x9f8>)
 8010476:	4906      	ldr	r1, [pc, #24]	; (8010490 <_dtoa_r+0x9fc>)
 8010478:	e43c      	b.n	800fcf4 <_dtoa_r+0x260>
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	40240000 	.word	0x40240000
 8010480:	00000433 	.word	0x00000433
 8010484:	7ff00000 	.word	0x7ff00000
 8010488:	08013fb9 	.word	0x08013fb9
 801048c:	08014249 	.word	0x08014249
 8010490:	000002ef 	.word	0x000002ef
 8010494:	0039      	movs	r1, r7
 8010496:	693a      	ldr	r2, [r7, #16]
 8010498:	310c      	adds	r1, #12
 801049a:	3202      	adds	r2, #2
 801049c:	0092      	lsls	r2, r2, #2
 801049e:	300c      	adds	r0, #12
 80104a0:	f7fb fa9d 	bl	800b9de <memcpy>
 80104a4:	2201      	movs	r2, #1
 80104a6:	0021      	movs	r1, r4
 80104a8:	9804      	ldr	r0, [sp, #16]
 80104aa:	f7fc f947 	bl	800c73c <__lshift>
 80104ae:	9b06      	ldr	r3, [sp, #24]
 80104b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104b2:	9307      	str	r3, [sp, #28]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	189b      	adds	r3, r3, r2
 80104b8:	2201      	movs	r2, #1
 80104ba:	003d      	movs	r5, r7
 80104bc:	0007      	movs	r7, r0
 80104be:	930e      	str	r3, [sp, #56]	; 0x38
 80104c0:	9b08      	ldr	r3, [sp, #32]
 80104c2:	4013      	ands	r3, r2
 80104c4:	930d      	str	r3, [sp, #52]	; 0x34
 80104c6:	0031      	movs	r1, r6
 80104c8:	9805      	ldr	r0, [sp, #20]
 80104ca:	f7ff fa53 	bl	800f974 <quorem>
 80104ce:	0029      	movs	r1, r5
 80104d0:	0004      	movs	r4, r0
 80104d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80104d4:	9805      	ldr	r0, [sp, #20]
 80104d6:	f7fc f99f 	bl	800c818 <__mcmp>
 80104da:	003a      	movs	r2, r7
 80104dc:	900c      	str	r0, [sp, #48]	; 0x30
 80104de:	0031      	movs	r1, r6
 80104e0:	9804      	ldr	r0, [sp, #16]
 80104e2:	f7fc f9b5 	bl	800c850 <__mdiff>
 80104e6:	2201      	movs	r2, #1
 80104e8:	68c3      	ldr	r3, [r0, #12]
 80104ea:	3430      	adds	r4, #48	; 0x30
 80104ec:	9008      	str	r0, [sp, #32]
 80104ee:	920a      	str	r2, [sp, #40]	; 0x28
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d104      	bne.n	80104fe <_dtoa_r+0xa6a>
 80104f4:	0001      	movs	r1, r0
 80104f6:	9805      	ldr	r0, [sp, #20]
 80104f8:	f7fc f98e 	bl	800c818 <__mcmp>
 80104fc:	900a      	str	r0, [sp, #40]	; 0x28
 80104fe:	9908      	ldr	r1, [sp, #32]
 8010500:	9804      	ldr	r0, [sp, #16]
 8010502:	f7fb ff2f 	bl	800c364 <_Bfree>
 8010506:	9b07      	ldr	r3, [sp, #28]
 8010508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801050a:	3301      	adds	r3, #1
 801050c:	9308      	str	r3, [sp, #32]
 801050e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010510:	4313      	orrs	r3, r2
 8010512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010514:	4313      	orrs	r3, r2
 8010516:	d109      	bne.n	801052c <_dtoa_r+0xa98>
 8010518:	2c39      	cmp	r4, #57	; 0x39
 801051a:	d022      	beq.n	8010562 <_dtoa_r+0xace>
 801051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801051e:	2b00      	cmp	r3, #0
 8010520:	dd01      	ble.n	8010526 <_dtoa_r+0xa92>
 8010522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010524:	3431      	adds	r4, #49	; 0x31
 8010526:	9b07      	ldr	r3, [sp, #28]
 8010528:	701c      	strb	r4, [r3, #0]
 801052a:	e76e      	b.n	801040a <_dtoa_r+0x976>
 801052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801052e:	2b00      	cmp	r3, #0
 8010530:	db04      	blt.n	801053c <_dtoa_r+0xaa8>
 8010532:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010534:	4313      	orrs	r3, r2
 8010536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010538:	4313      	orrs	r3, r2
 801053a:	d11e      	bne.n	801057a <_dtoa_r+0xae6>
 801053c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801053e:	2b00      	cmp	r3, #0
 8010540:	ddf1      	ble.n	8010526 <_dtoa_r+0xa92>
 8010542:	9905      	ldr	r1, [sp, #20]
 8010544:	2201      	movs	r2, #1
 8010546:	9804      	ldr	r0, [sp, #16]
 8010548:	f7fc f8f8 	bl	800c73c <__lshift>
 801054c:	0031      	movs	r1, r6
 801054e:	9005      	str	r0, [sp, #20]
 8010550:	f7fc f962 	bl	800c818 <__mcmp>
 8010554:	2800      	cmp	r0, #0
 8010556:	dc02      	bgt.n	801055e <_dtoa_r+0xaca>
 8010558:	d1e5      	bne.n	8010526 <_dtoa_r+0xa92>
 801055a:	07e3      	lsls	r3, r4, #31
 801055c:	d5e3      	bpl.n	8010526 <_dtoa_r+0xa92>
 801055e:	2c39      	cmp	r4, #57	; 0x39
 8010560:	d1df      	bne.n	8010522 <_dtoa_r+0xa8e>
 8010562:	2339      	movs	r3, #57	; 0x39
 8010564:	9a07      	ldr	r2, [sp, #28]
 8010566:	7013      	strb	r3, [r2, #0]
 8010568:	9b08      	ldr	r3, [sp, #32]
 801056a:	9308      	str	r3, [sp, #32]
 801056c:	3b01      	subs	r3, #1
 801056e:	781a      	ldrb	r2, [r3, #0]
 8010570:	2a39      	cmp	r2, #57	; 0x39
 8010572:	d063      	beq.n	801063c <_dtoa_r+0xba8>
 8010574:	3201      	adds	r2, #1
 8010576:	701a      	strb	r2, [r3, #0]
 8010578:	e747      	b.n	801040a <_dtoa_r+0x976>
 801057a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801057c:	2b00      	cmp	r3, #0
 801057e:	dd03      	ble.n	8010588 <_dtoa_r+0xaf4>
 8010580:	2c39      	cmp	r4, #57	; 0x39
 8010582:	d0ee      	beq.n	8010562 <_dtoa_r+0xace>
 8010584:	3401      	adds	r4, #1
 8010586:	e7ce      	b.n	8010526 <_dtoa_r+0xa92>
 8010588:	9b07      	ldr	r3, [sp, #28]
 801058a:	9a07      	ldr	r2, [sp, #28]
 801058c:	701c      	strb	r4, [r3, #0]
 801058e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010590:	4293      	cmp	r3, r2
 8010592:	d03e      	beq.n	8010612 <_dtoa_r+0xb7e>
 8010594:	2300      	movs	r3, #0
 8010596:	220a      	movs	r2, #10
 8010598:	9905      	ldr	r1, [sp, #20]
 801059a:	9804      	ldr	r0, [sp, #16]
 801059c:	f7fb feec 	bl	800c378 <__multadd>
 80105a0:	2300      	movs	r3, #0
 80105a2:	9005      	str	r0, [sp, #20]
 80105a4:	220a      	movs	r2, #10
 80105a6:	0029      	movs	r1, r5
 80105a8:	9804      	ldr	r0, [sp, #16]
 80105aa:	42bd      	cmp	r5, r7
 80105ac:	d106      	bne.n	80105bc <_dtoa_r+0xb28>
 80105ae:	f7fb fee3 	bl	800c378 <__multadd>
 80105b2:	0005      	movs	r5, r0
 80105b4:	0007      	movs	r7, r0
 80105b6:	9b08      	ldr	r3, [sp, #32]
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	e784      	b.n	80104c6 <_dtoa_r+0xa32>
 80105bc:	f7fb fedc 	bl	800c378 <__multadd>
 80105c0:	0039      	movs	r1, r7
 80105c2:	0005      	movs	r5, r0
 80105c4:	2300      	movs	r3, #0
 80105c6:	220a      	movs	r2, #10
 80105c8:	9804      	ldr	r0, [sp, #16]
 80105ca:	f7fb fed5 	bl	800c378 <__multadd>
 80105ce:	0007      	movs	r7, r0
 80105d0:	e7f1      	b.n	80105b6 <_dtoa_r+0xb22>
 80105d2:	9b07      	ldr	r3, [sp, #28]
 80105d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80105d6:	2500      	movs	r5, #0
 80105d8:	0031      	movs	r1, r6
 80105da:	9805      	ldr	r0, [sp, #20]
 80105dc:	f7ff f9ca 	bl	800f974 <quorem>
 80105e0:	9b06      	ldr	r3, [sp, #24]
 80105e2:	3030      	adds	r0, #48	; 0x30
 80105e4:	5558      	strb	r0, [r3, r5]
 80105e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105e8:	3501      	adds	r5, #1
 80105ea:	0004      	movs	r4, r0
 80105ec:	42ab      	cmp	r3, r5
 80105ee:	dd07      	ble.n	8010600 <_dtoa_r+0xb6c>
 80105f0:	2300      	movs	r3, #0
 80105f2:	220a      	movs	r2, #10
 80105f4:	9905      	ldr	r1, [sp, #20]
 80105f6:	9804      	ldr	r0, [sp, #16]
 80105f8:	f7fb febe 	bl	800c378 <__multadd>
 80105fc:	9005      	str	r0, [sp, #20]
 80105fe:	e7eb      	b.n	80105d8 <_dtoa_r+0xb44>
 8010600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010602:	2301      	movs	r3, #1
 8010604:	2a00      	cmp	r2, #0
 8010606:	dd00      	ble.n	801060a <_dtoa_r+0xb76>
 8010608:	0013      	movs	r3, r2
 801060a:	2500      	movs	r5, #0
 801060c:	9a06      	ldr	r2, [sp, #24]
 801060e:	18d3      	adds	r3, r2, r3
 8010610:	9308      	str	r3, [sp, #32]
 8010612:	9905      	ldr	r1, [sp, #20]
 8010614:	2201      	movs	r2, #1
 8010616:	9804      	ldr	r0, [sp, #16]
 8010618:	f7fc f890 	bl	800c73c <__lshift>
 801061c:	0031      	movs	r1, r6
 801061e:	9005      	str	r0, [sp, #20]
 8010620:	f7fc f8fa 	bl	800c818 <__mcmp>
 8010624:	2800      	cmp	r0, #0
 8010626:	dc9f      	bgt.n	8010568 <_dtoa_r+0xad4>
 8010628:	d101      	bne.n	801062e <_dtoa_r+0xb9a>
 801062a:	07e4      	lsls	r4, r4, #31
 801062c:	d49c      	bmi.n	8010568 <_dtoa_r+0xad4>
 801062e:	9b08      	ldr	r3, [sp, #32]
 8010630:	9308      	str	r3, [sp, #32]
 8010632:	3b01      	subs	r3, #1
 8010634:	781a      	ldrb	r2, [r3, #0]
 8010636:	2a30      	cmp	r2, #48	; 0x30
 8010638:	d0fa      	beq.n	8010630 <_dtoa_r+0xb9c>
 801063a:	e6e6      	b.n	801040a <_dtoa_r+0x976>
 801063c:	9a06      	ldr	r2, [sp, #24]
 801063e:	429a      	cmp	r2, r3
 8010640:	d193      	bne.n	801056a <_dtoa_r+0xad6>
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	3301      	adds	r3, #1
 8010646:	9303      	str	r3, [sp, #12]
 8010648:	2331      	movs	r3, #49	; 0x31
 801064a:	7013      	strb	r3, [r2, #0]
 801064c:	e6dd      	b.n	801040a <_dtoa_r+0x976>
 801064e:	4b09      	ldr	r3, [pc, #36]	; (8010674 <_dtoa_r+0xbe0>)
 8010650:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010652:	9306      	str	r3, [sp, #24]
 8010654:	4b08      	ldr	r3, [pc, #32]	; (8010678 <_dtoa_r+0xbe4>)
 8010656:	2a00      	cmp	r2, #0
 8010658:	d001      	beq.n	801065e <_dtoa_r+0xbca>
 801065a:	f7ff fa4c 	bl	800faf6 <_dtoa_r+0x62>
 801065e:	f7ff fa4c 	bl	800fafa <_dtoa_r+0x66>
 8010662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010664:	2b00      	cmp	r3, #0
 8010666:	dcb6      	bgt.n	80105d6 <_dtoa_r+0xb42>
 8010668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801066a:	2b02      	cmp	r3, #2
 801066c:	dd00      	ble.n	8010670 <_dtoa_r+0xbdc>
 801066e:	e6b6      	b.n	80103de <_dtoa_r+0x94a>
 8010670:	e7b1      	b.n	80105d6 <_dtoa_r+0xb42>
 8010672:	46c0      	nop			; (mov r8, r8)
 8010674:	0801423c 	.word	0x0801423c
 8010678:	08014244 	.word	0x08014244

0801067c <realloc>:
 801067c:	b510      	push	{r4, lr}
 801067e:	4b03      	ldr	r3, [pc, #12]	; (801068c <realloc+0x10>)
 8010680:	000a      	movs	r2, r1
 8010682:	0001      	movs	r1, r0
 8010684:	6818      	ldr	r0, [r3, #0]
 8010686:	f000 f803 	bl	8010690 <_realloc_r>
 801068a:	bd10      	pop	{r4, pc}
 801068c:	200006c8 	.word	0x200006c8

08010690 <_realloc_r>:
 8010690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010692:	b087      	sub	sp, #28
 8010694:	1e0c      	subs	r4, r1, #0
 8010696:	9001      	str	r0, [sp, #4]
 8010698:	9205      	str	r2, [sp, #20]
 801069a:	d106      	bne.n	80106aa <_realloc_r+0x1a>
 801069c:	0011      	movs	r1, r2
 801069e:	f7f9 fe39 	bl	800a314 <_malloc_r>
 80106a2:	0007      	movs	r7, r0
 80106a4:	0038      	movs	r0, r7
 80106a6:	b007      	add	sp, #28
 80106a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106aa:	9801      	ldr	r0, [sp, #4]
 80106ac:	f7fa f846 	bl	800a73c <__malloc_lock>
 80106b0:	0023      	movs	r3, r4
 80106b2:	3b08      	subs	r3, #8
 80106b4:	685f      	ldr	r7, [r3, #4]
 80106b6:	9304      	str	r3, [sp, #16]
 80106b8:	9b05      	ldr	r3, [sp, #20]
 80106ba:	330b      	adds	r3, #11
 80106bc:	2b16      	cmp	r3, #22
 80106be:	d908      	bls.n	80106d2 <_realloc_r+0x42>
 80106c0:	2207      	movs	r2, #7
 80106c2:	4393      	bics	r3, r2
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	d506      	bpl.n	80106d6 <_realloc_r+0x46>
 80106c8:	230c      	movs	r3, #12
 80106ca:	9a01      	ldr	r2, [sp, #4]
 80106cc:	2700      	movs	r7, #0
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	e7e8      	b.n	80106a4 <_realloc_r+0x14>
 80106d2:	2310      	movs	r3, #16
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	9b00      	ldr	r3, [sp, #0]
 80106d8:	9a05      	ldr	r2, [sp, #20]
 80106da:	4293      	cmp	r3, r2
 80106dc:	d3f4      	bcc.n	80106c8 <_realloc_r+0x38>
 80106de:	9b04      	ldr	r3, [sp, #16]
 80106e0:	003a      	movs	r2, r7
 80106e2:	9302      	str	r3, [sp, #8]
 80106e4:	2303      	movs	r3, #3
 80106e6:	439a      	bics	r2, r3
 80106e8:	9b00      	ldr	r3, [sp, #0]
 80106ea:	9203      	str	r2, [sp, #12]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	dc00      	bgt.n	80106f2 <_realloc_r+0x62>
 80106f0:	e169      	b.n	80109c6 <_realloc_r+0x336>
 80106f2:	9b04      	ldr	r3, [sp, #16]
 80106f4:	48b8      	ldr	r0, [pc, #736]	; (80109d8 <_realloc_r+0x348>)
 80106f6:	189b      	adds	r3, r3, r2
 80106f8:	6882      	ldr	r2, [r0, #8]
 80106fa:	4694      	mov	ip, r2
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	459c      	cmp	ip, r3
 8010700:	d006      	beq.n	8010710 <_realloc_r+0x80>
 8010702:	2501      	movs	r5, #1
 8010704:	0011      	movs	r1, r2
 8010706:	43a9      	bics	r1, r5
 8010708:	1859      	adds	r1, r3, r1
 801070a:	6849      	ldr	r1, [r1, #4]
 801070c:	4229      	tst	r1, r5
 801070e:	d144      	bne.n	801079a <_realloc_r+0x10a>
 8010710:	2103      	movs	r1, #3
 8010712:	438a      	bics	r2, r1
 8010714:	9903      	ldr	r1, [sp, #12]
 8010716:	188e      	adds	r6, r1, r2
 8010718:	9900      	ldr	r1, [sp, #0]
 801071a:	459c      	cmp	ip, r3
 801071c:	d117      	bne.n	801074e <_realloc_r+0xbe>
 801071e:	3110      	adds	r1, #16
 8010720:	42b1      	cmp	r1, r6
 8010722:	dc3c      	bgt.n	801079e <_realloc_r+0x10e>
 8010724:	9a00      	ldr	r2, [sp, #0]
 8010726:	2101      	movs	r1, #1
 8010728:	4694      	mov	ip, r2
 801072a:	1ab6      	subs	r6, r6, r2
 801072c:	0022      	movs	r2, r4
 801072e:	9b04      	ldr	r3, [sp, #16]
 8010730:	430e      	orrs	r6, r1
 8010732:	4463      	add	r3, ip
 8010734:	6083      	str	r3, [r0, #8]
 8010736:	3a08      	subs	r2, #8
 8010738:	605e      	str	r6, [r3, #4]
 801073a:	6853      	ldr	r3, [r2, #4]
 801073c:	9801      	ldr	r0, [sp, #4]
 801073e:	400b      	ands	r3, r1
 8010740:	4661      	mov	r1, ip
 8010742:	430b      	orrs	r3, r1
 8010744:	6053      	str	r3, [r2, #4]
 8010746:	f7fa f801 	bl	800a74c <__malloc_unlock>
 801074a:	0027      	movs	r7, r4
 801074c:	e7aa      	b.n	80106a4 <_realloc_r+0x14>
 801074e:	42b1      	cmp	r1, r6
 8010750:	dc25      	bgt.n	801079e <_realloc_r+0x10e>
 8010752:	68da      	ldr	r2, [r3, #12]
 8010754:	689b      	ldr	r3, [r3, #8]
 8010756:	60da      	str	r2, [r3, #12]
 8010758:	6093      	str	r3, [r2, #8]
 801075a:	9b00      	ldr	r3, [sp, #0]
 801075c:	9a02      	ldr	r2, [sp, #8]
 801075e:	1af4      	subs	r4, r6, r3
 8010760:	9b02      	ldr	r3, [sp, #8]
 8010762:	1992      	adds	r2, r2, r6
 8010764:	6858      	ldr	r0, [r3, #4]
 8010766:	2301      	movs	r3, #1
 8010768:	4018      	ands	r0, r3
 801076a:	2c0f      	cmp	r4, #15
 801076c:	d800      	bhi.n	8010770 <_realloc_r+0xe0>
 801076e:	e12c      	b.n	80109ca <_realloc_r+0x33a>
 8010770:	9d00      	ldr	r5, [sp, #0]
 8010772:	9902      	ldr	r1, [sp, #8]
 8010774:	4328      	orrs	r0, r5
 8010776:	1949      	adds	r1, r1, r5
 8010778:	9d02      	ldr	r5, [sp, #8]
 801077a:	431c      	orrs	r4, r3
 801077c:	6068      	str	r0, [r5, #4]
 801077e:	604c      	str	r4, [r1, #4]
 8010780:	6850      	ldr	r0, [r2, #4]
 8010782:	3108      	adds	r1, #8
 8010784:	4303      	orrs	r3, r0
 8010786:	6053      	str	r3, [r2, #4]
 8010788:	9801      	ldr	r0, [sp, #4]
 801078a:	f7fb f9a3 	bl	800bad4 <_free_r>
 801078e:	9801      	ldr	r0, [sp, #4]
 8010790:	f7f9 ffdc 	bl	800a74c <__malloc_unlock>
 8010794:	9f02      	ldr	r7, [sp, #8]
 8010796:	3708      	adds	r7, #8
 8010798:	e784      	b.n	80106a4 <_realloc_r+0x14>
 801079a:	2200      	movs	r2, #0
 801079c:	0013      	movs	r3, r2
 801079e:	07ff      	lsls	r7, r7, #31
 80107a0:	d500      	bpl.n	80107a4 <_realloc_r+0x114>
 80107a2:	e0c6      	b.n	8010932 <_realloc_r+0x2a2>
 80107a4:	0021      	movs	r1, r4
 80107a6:	2003      	movs	r0, #3
 80107a8:	3908      	subs	r1, #8
 80107aa:	680d      	ldr	r5, [r1, #0]
 80107ac:	9904      	ldr	r1, [sp, #16]
 80107ae:	1b4d      	subs	r5, r1, r5
 80107b0:	6869      	ldr	r1, [r5, #4]
 80107b2:	4381      	bics	r1, r0
 80107b4:	9803      	ldr	r0, [sp, #12]
 80107b6:	180f      	adds	r7, r1, r0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d100      	bne.n	80107be <_realloc_r+0x12e>
 80107bc:	e084      	b.n	80108c8 <_realloc_r+0x238>
 80107be:	19d6      	adds	r6, r2, r7
 80107c0:	459c      	cmp	ip, r3
 80107c2:	d148      	bne.n	8010856 <_realloc_r+0x1c6>
 80107c4:	9b00      	ldr	r3, [sp, #0]
 80107c6:	3310      	adds	r3, #16
 80107c8:	42b3      	cmp	r3, r6
 80107ca:	dc7d      	bgt.n	80108c8 <_realloc_r+0x238>
 80107cc:	68aa      	ldr	r2, [r5, #8]
 80107ce:	68eb      	ldr	r3, [r5, #12]
 80107d0:	002f      	movs	r7, r5
 80107d2:	60d3      	str	r3, [r2, #12]
 80107d4:	609a      	str	r2, [r3, #8]
 80107d6:	0002      	movs	r2, r0
 80107d8:	3a04      	subs	r2, #4
 80107da:	3708      	adds	r7, #8
 80107dc:	2a24      	cmp	r2, #36	; 0x24
 80107de:	d835      	bhi.n	801084c <_realloc_r+0x1bc>
 80107e0:	003b      	movs	r3, r7
 80107e2:	2a13      	cmp	r2, #19
 80107e4:	d908      	bls.n	80107f8 <_realloc_r+0x168>
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	60ab      	str	r3, [r5, #8]
 80107ea:	6863      	ldr	r3, [r4, #4]
 80107ec:	60eb      	str	r3, [r5, #12]
 80107ee:	2a1b      	cmp	r2, #27
 80107f0:	d81a      	bhi.n	8010828 <_realloc_r+0x198>
 80107f2:	002b      	movs	r3, r5
 80107f4:	3408      	adds	r4, #8
 80107f6:	3310      	adds	r3, #16
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	6862      	ldr	r2, [r4, #4]
 80107fe:	605a      	str	r2, [r3, #4]
 8010800:	68a2      	ldr	r2, [r4, #8]
 8010802:	609a      	str	r2, [r3, #8]
 8010804:	9b00      	ldr	r3, [sp, #0]
 8010806:	4a74      	ldr	r2, [pc, #464]	; (80109d8 <_realloc_r+0x348>)
 8010808:	18eb      	adds	r3, r5, r3
 801080a:	6093      	str	r3, [r2, #8]
 801080c:	9a00      	ldr	r2, [sp, #0]
 801080e:	1ab6      	subs	r6, r6, r2
 8010810:	2201      	movs	r2, #1
 8010812:	4316      	orrs	r6, r2
 8010814:	605e      	str	r6, [r3, #4]
 8010816:	686b      	ldr	r3, [r5, #4]
 8010818:	4013      	ands	r3, r2
 801081a:	9a00      	ldr	r2, [sp, #0]
 801081c:	4313      	orrs	r3, r2
 801081e:	606b      	str	r3, [r5, #4]
 8010820:	9801      	ldr	r0, [sp, #4]
 8010822:	f7f9 ff93 	bl	800a74c <__malloc_unlock>
 8010826:	e73d      	b.n	80106a4 <_realloc_r+0x14>
 8010828:	68a3      	ldr	r3, [r4, #8]
 801082a:	612b      	str	r3, [r5, #16]
 801082c:	68e3      	ldr	r3, [r4, #12]
 801082e:	616b      	str	r3, [r5, #20]
 8010830:	2a24      	cmp	r2, #36	; 0x24
 8010832:	d003      	beq.n	801083c <_realloc_r+0x1ac>
 8010834:	002b      	movs	r3, r5
 8010836:	3410      	adds	r4, #16
 8010838:	3318      	adds	r3, #24
 801083a:	e7dd      	b.n	80107f8 <_realloc_r+0x168>
 801083c:	6923      	ldr	r3, [r4, #16]
 801083e:	61ab      	str	r3, [r5, #24]
 8010840:	002b      	movs	r3, r5
 8010842:	6962      	ldr	r2, [r4, #20]
 8010844:	3320      	adds	r3, #32
 8010846:	61ea      	str	r2, [r5, #28]
 8010848:	3418      	adds	r4, #24
 801084a:	e7d5      	b.n	80107f8 <_realloc_r+0x168>
 801084c:	0021      	movs	r1, r4
 801084e:	0038      	movs	r0, r7
 8010850:	f001 fbb5 	bl	8011fbe <memmove>
 8010854:	e7d6      	b.n	8010804 <_realloc_r+0x174>
 8010856:	9a00      	ldr	r2, [sp, #0]
 8010858:	42b2      	cmp	r2, r6
 801085a:	dc35      	bgt.n	80108c8 <_realloc_r+0x238>
 801085c:	0028      	movs	r0, r5
 801085e:	68da      	ldr	r2, [r3, #12]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	3008      	adds	r0, #8
 8010864:	60da      	str	r2, [r3, #12]
 8010866:	6093      	str	r3, [r2, #8]
 8010868:	68aa      	ldr	r2, [r5, #8]
 801086a:	68eb      	ldr	r3, [r5, #12]
 801086c:	60d3      	str	r3, [r2, #12]
 801086e:	609a      	str	r2, [r3, #8]
 8010870:	9a03      	ldr	r2, [sp, #12]
 8010872:	3a04      	subs	r2, #4
 8010874:	2a24      	cmp	r2, #36	; 0x24
 8010876:	d823      	bhi.n	80108c0 <_realloc_r+0x230>
 8010878:	2a13      	cmp	r2, #19
 801087a:	d907      	bls.n	801088c <_realloc_r+0x1fc>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	60ab      	str	r3, [r5, #8]
 8010880:	6863      	ldr	r3, [r4, #4]
 8010882:	60eb      	str	r3, [r5, #12]
 8010884:	2a1b      	cmp	r2, #27
 8010886:	d809      	bhi.n	801089c <_realloc_r+0x20c>
 8010888:	3408      	adds	r4, #8
 801088a:	3008      	adds	r0, #8
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	6003      	str	r3, [r0, #0]
 8010890:	6863      	ldr	r3, [r4, #4]
 8010892:	6043      	str	r3, [r0, #4]
 8010894:	68a3      	ldr	r3, [r4, #8]
 8010896:	6083      	str	r3, [r0, #8]
 8010898:	9502      	str	r5, [sp, #8]
 801089a:	e75e      	b.n	801075a <_realloc_r+0xca>
 801089c:	68a3      	ldr	r3, [r4, #8]
 801089e:	612b      	str	r3, [r5, #16]
 80108a0:	68e3      	ldr	r3, [r4, #12]
 80108a2:	616b      	str	r3, [r5, #20]
 80108a4:	2a24      	cmp	r2, #36	; 0x24
 80108a6:	d003      	beq.n	80108b0 <_realloc_r+0x220>
 80108a8:	0028      	movs	r0, r5
 80108aa:	3410      	adds	r4, #16
 80108ac:	3018      	adds	r0, #24
 80108ae:	e7ed      	b.n	801088c <_realloc_r+0x1fc>
 80108b0:	0028      	movs	r0, r5
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	3020      	adds	r0, #32
 80108b6:	61ab      	str	r3, [r5, #24]
 80108b8:	6963      	ldr	r3, [r4, #20]
 80108ba:	3418      	adds	r4, #24
 80108bc:	61eb      	str	r3, [r5, #28]
 80108be:	e7e5      	b.n	801088c <_realloc_r+0x1fc>
 80108c0:	0021      	movs	r1, r4
 80108c2:	f001 fb7c 	bl	8011fbe <memmove>
 80108c6:	e7e7      	b.n	8010898 <_realloc_r+0x208>
 80108c8:	9b00      	ldr	r3, [sp, #0]
 80108ca:	42bb      	cmp	r3, r7
 80108cc:	dc31      	bgt.n	8010932 <_realloc_r+0x2a2>
 80108ce:	0028      	movs	r0, r5
 80108d0:	68aa      	ldr	r2, [r5, #8]
 80108d2:	68eb      	ldr	r3, [r5, #12]
 80108d4:	3008      	adds	r0, #8
 80108d6:	60d3      	str	r3, [r2, #12]
 80108d8:	609a      	str	r2, [r3, #8]
 80108da:	9a03      	ldr	r2, [sp, #12]
 80108dc:	3a04      	subs	r2, #4
 80108de:	2a24      	cmp	r2, #36	; 0x24
 80108e0:	d823      	bhi.n	801092a <_realloc_r+0x29a>
 80108e2:	2a13      	cmp	r2, #19
 80108e4:	d907      	bls.n	80108f6 <_realloc_r+0x266>
 80108e6:	6823      	ldr	r3, [r4, #0]
 80108e8:	60ab      	str	r3, [r5, #8]
 80108ea:	6863      	ldr	r3, [r4, #4]
 80108ec:	60eb      	str	r3, [r5, #12]
 80108ee:	2a1b      	cmp	r2, #27
 80108f0:	d809      	bhi.n	8010906 <_realloc_r+0x276>
 80108f2:	3408      	adds	r4, #8
 80108f4:	3008      	adds	r0, #8
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	6003      	str	r3, [r0, #0]
 80108fa:	6863      	ldr	r3, [r4, #4]
 80108fc:	6043      	str	r3, [r0, #4]
 80108fe:	68a3      	ldr	r3, [r4, #8]
 8010900:	6083      	str	r3, [r0, #8]
 8010902:	003e      	movs	r6, r7
 8010904:	e7c8      	b.n	8010898 <_realloc_r+0x208>
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	612b      	str	r3, [r5, #16]
 801090a:	68e3      	ldr	r3, [r4, #12]
 801090c:	616b      	str	r3, [r5, #20]
 801090e:	2a24      	cmp	r2, #36	; 0x24
 8010910:	d003      	beq.n	801091a <_realloc_r+0x28a>
 8010912:	0028      	movs	r0, r5
 8010914:	3410      	adds	r4, #16
 8010916:	3018      	adds	r0, #24
 8010918:	e7ed      	b.n	80108f6 <_realloc_r+0x266>
 801091a:	0028      	movs	r0, r5
 801091c:	6923      	ldr	r3, [r4, #16]
 801091e:	3020      	adds	r0, #32
 8010920:	61ab      	str	r3, [r5, #24]
 8010922:	6963      	ldr	r3, [r4, #20]
 8010924:	3418      	adds	r4, #24
 8010926:	61eb      	str	r3, [r5, #28]
 8010928:	e7e5      	b.n	80108f6 <_realloc_r+0x266>
 801092a:	0021      	movs	r1, r4
 801092c:	f001 fb47 	bl	8011fbe <memmove>
 8010930:	e7e7      	b.n	8010902 <_realloc_r+0x272>
 8010932:	9905      	ldr	r1, [sp, #20]
 8010934:	9801      	ldr	r0, [sp, #4]
 8010936:	f7f9 fced 	bl	800a314 <_malloc_r>
 801093a:	1e07      	subs	r7, r0, #0
 801093c:	d100      	bne.n	8010940 <_realloc_r+0x2b0>
 801093e:	e76f      	b.n	8010820 <_realloc_r+0x190>
 8010940:	0023      	movs	r3, r4
 8010942:	2201      	movs	r2, #1
 8010944:	3b08      	subs	r3, #8
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	4393      	bics	r3, r2
 801094a:	9a04      	ldr	r2, [sp, #16]
 801094c:	18d3      	adds	r3, r2, r3
 801094e:	0002      	movs	r2, r0
 8010950:	3a08      	subs	r2, #8
 8010952:	4293      	cmp	r3, r2
 8010954:	d105      	bne.n	8010962 <_realloc_r+0x2d2>
 8010956:	685e      	ldr	r6, [r3, #4]
 8010958:	2303      	movs	r3, #3
 801095a:	439e      	bics	r6, r3
 801095c:	9b03      	ldr	r3, [sp, #12]
 801095e:	18f6      	adds	r6, r6, r3
 8010960:	e6fb      	b.n	801075a <_realloc_r+0xca>
 8010962:	9a03      	ldr	r2, [sp, #12]
 8010964:	3a04      	subs	r2, #4
 8010966:	2a24      	cmp	r2, #36	; 0x24
 8010968:	d829      	bhi.n	80109be <_realloc_r+0x32e>
 801096a:	0003      	movs	r3, r0
 801096c:	0021      	movs	r1, r4
 801096e:	2a13      	cmp	r2, #19
 8010970:	d908      	bls.n	8010984 <_realloc_r+0x2f4>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	6003      	str	r3, [r0, #0]
 8010976:	6863      	ldr	r3, [r4, #4]
 8010978:	6043      	str	r3, [r0, #4]
 801097a:	2a1b      	cmp	r2, #27
 801097c:	d80d      	bhi.n	801099a <_realloc_r+0x30a>
 801097e:	0003      	movs	r3, r0
 8010980:	3108      	adds	r1, #8
 8010982:	3308      	adds	r3, #8
 8010984:	680a      	ldr	r2, [r1, #0]
 8010986:	601a      	str	r2, [r3, #0]
 8010988:	684a      	ldr	r2, [r1, #4]
 801098a:	605a      	str	r2, [r3, #4]
 801098c:	688a      	ldr	r2, [r1, #8]
 801098e:	609a      	str	r2, [r3, #8]
 8010990:	0021      	movs	r1, r4
 8010992:	9801      	ldr	r0, [sp, #4]
 8010994:	f7fb f89e 	bl	800bad4 <_free_r>
 8010998:	e742      	b.n	8010820 <_realloc_r+0x190>
 801099a:	68a3      	ldr	r3, [r4, #8]
 801099c:	6083      	str	r3, [r0, #8]
 801099e:	68e3      	ldr	r3, [r4, #12]
 80109a0:	60c3      	str	r3, [r0, #12]
 80109a2:	2a24      	cmp	r2, #36	; 0x24
 80109a4:	d003      	beq.n	80109ae <_realloc_r+0x31e>
 80109a6:	0003      	movs	r3, r0
 80109a8:	3110      	adds	r1, #16
 80109aa:	3310      	adds	r3, #16
 80109ac:	e7ea      	b.n	8010984 <_realloc_r+0x2f4>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	3118      	adds	r1, #24
 80109b2:	6103      	str	r3, [r0, #16]
 80109b4:	0003      	movs	r3, r0
 80109b6:	6962      	ldr	r2, [r4, #20]
 80109b8:	3318      	adds	r3, #24
 80109ba:	6142      	str	r2, [r0, #20]
 80109bc:	e7e2      	b.n	8010984 <_realloc_r+0x2f4>
 80109be:	0021      	movs	r1, r4
 80109c0:	f001 fafd 	bl	8011fbe <memmove>
 80109c4:	e7e4      	b.n	8010990 <_realloc_r+0x300>
 80109c6:	9e03      	ldr	r6, [sp, #12]
 80109c8:	e6c7      	b.n	801075a <_realloc_r+0xca>
 80109ca:	9902      	ldr	r1, [sp, #8]
 80109cc:	4306      	orrs	r6, r0
 80109ce:	604e      	str	r6, [r1, #4]
 80109d0:	6851      	ldr	r1, [r2, #4]
 80109d2:	430b      	orrs	r3, r1
 80109d4:	6053      	str	r3, [r2, #4]
 80109d6:	e6da      	b.n	801078e <_realloc_r+0xfe>
 80109d8:	20000020 	.word	0x20000020

080109dc <_strtoul_l.constprop.0>:
 80109dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109de:	b087      	sub	sp, #28
 80109e0:	9202      	str	r2, [sp, #8]
 80109e2:	4a3e      	ldr	r2, [pc, #248]	; (8010adc <_strtoul_l.constprop.0+0x100>)
 80109e4:	001e      	movs	r6, r3
 80109e6:	9101      	str	r1, [sp, #4]
 80109e8:	000b      	movs	r3, r1
 80109ea:	4694      	mov	ip, r2
 80109ec:	2108      	movs	r1, #8
 80109ee:	9005      	str	r0, [sp, #20]
 80109f0:	001a      	movs	r2, r3
 80109f2:	4660      	mov	r0, ip
 80109f4:	7814      	ldrb	r4, [r2, #0]
 80109f6:	3301      	adds	r3, #1
 80109f8:	5d00      	ldrb	r0, [r0, r4]
 80109fa:	001d      	movs	r5, r3
 80109fc:	0007      	movs	r7, r0
 80109fe:	400f      	ands	r7, r1
 8010a00:	4208      	tst	r0, r1
 8010a02:	d1f5      	bne.n	80109f0 <_strtoul_l.constprop.0+0x14>
 8010a04:	2c2d      	cmp	r4, #45	; 0x2d
 8010a06:	d13d      	bne.n	8010a84 <_strtoul_l.constprop.0+0xa8>
 8010a08:	2701      	movs	r7, #1
 8010a0a:	781c      	ldrb	r4, [r3, #0]
 8010a0c:	1c95      	adds	r5, r2, #2
 8010a0e:	2e00      	cmp	r6, #0
 8010a10:	d05f      	beq.n	8010ad2 <_strtoul_l.constprop.0+0xf6>
 8010a12:	2e10      	cmp	r6, #16
 8010a14:	d109      	bne.n	8010a2a <_strtoul_l.constprop.0+0x4e>
 8010a16:	2c30      	cmp	r4, #48	; 0x30
 8010a18:	d107      	bne.n	8010a2a <_strtoul_l.constprop.0+0x4e>
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	782b      	ldrb	r3, [r5, #0]
 8010a1e:	4393      	bics	r3, r2
 8010a20:	2b58      	cmp	r3, #88	; 0x58
 8010a22:	d151      	bne.n	8010ac8 <_strtoul_l.constprop.0+0xec>
 8010a24:	2610      	movs	r6, #16
 8010a26:	786c      	ldrb	r4, [r5, #1]
 8010a28:	3502      	adds	r5, #2
 8010a2a:	2001      	movs	r0, #1
 8010a2c:	0031      	movs	r1, r6
 8010a2e:	4240      	negs	r0, r0
 8010a30:	f7ef fb84 	bl	800013c <__udivsi3>
 8010a34:	9003      	str	r0, [sp, #12]
 8010a36:	2001      	movs	r0, #1
 8010a38:	0031      	movs	r1, r6
 8010a3a:	4240      	negs	r0, r0
 8010a3c:	f7ef fc04 	bl	8000248 <__aeabi_uidivmod>
 8010a40:	2300      	movs	r3, #0
 8010a42:	2201      	movs	r2, #1
 8010a44:	9104      	str	r1, [sp, #16]
 8010a46:	2101      	movs	r1, #1
 8010a48:	0018      	movs	r0, r3
 8010a4a:	4694      	mov	ip, r2
 8010a4c:	4249      	negs	r1, r1
 8010a4e:	0022      	movs	r2, r4
 8010a50:	3a30      	subs	r2, #48	; 0x30
 8010a52:	2a09      	cmp	r2, #9
 8010a54:	d903      	bls.n	8010a5e <_strtoul_l.constprop.0+0x82>
 8010a56:	3a11      	subs	r2, #17
 8010a58:	2a19      	cmp	r2, #25
 8010a5a:	d818      	bhi.n	8010a8e <_strtoul_l.constprop.0+0xb2>
 8010a5c:	320a      	adds	r2, #10
 8010a5e:	4296      	cmp	r6, r2
 8010a60:	dd19      	ble.n	8010a96 <_strtoul_l.constprop.0+0xba>
 8010a62:	1c5c      	adds	r4, r3, #1
 8010a64:	d00b      	beq.n	8010a7e <_strtoul_l.constprop.0+0xa2>
 8010a66:	9c03      	ldr	r4, [sp, #12]
 8010a68:	000b      	movs	r3, r1
 8010a6a:	4284      	cmp	r4, r0
 8010a6c:	d307      	bcc.n	8010a7e <_strtoul_l.constprop.0+0xa2>
 8010a6e:	d103      	bne.n	8010a78 <_strtoul_l.constprop.0+0x9c>
 8010a70:	9c04      	ldr	r4, [sp, #16]
 8010a72:	000b      	movs	r3, r1
 8010a74:	4294      	cmp	r4, r2
 8010a76:	db02      	blt.n	8010a7e <_strtoul_l.constprop.0+0xa2>
 8010a78:	4663      	mov	r3, ip
 8010a7a:	4370      	muls	r0, r6
 8010a7c:	1810      	adds	r0, r2, r0
 8010a7e:	782c      	ldrb	r4, [r5, #0]
 8010a80:	3501      	adds	r5, #1
 8010a82:	e7e4      	b.n	8010a4e <_strtoul_l.constprop.0+0x72>
 8010a84:	2c2b      	cmp	r4, #43	; 0x2b
 8010a86:	d1c2      	bne.n	8010a0e <_strtoul_l.constprop.0+0x32>
 8010a88:	781c      	ldrb	r4, [r3, #0]
 8010a8a:	1c95      	adds	r5, r2, #2
 8010a8c:	e7bf      	b.n	8010a0e <_strtoul_l.constprop.0+0x32>
 8010a8e:	0022      	movs	r2, r4
 8010a90:	3a61      	subs	r2, #97	; 0x61
 8010a92:	2a19      	cmp	r2, #25
 8010a94:	d9e2      	bls.n	8010a5c <_strtoul_l.constprop.0+0x80>
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	d108      	bne.n	8010aac <_strtoul_l.constprop.0+0xd0>
 8010a9a:	2222      	movs	r2, #34	; 0x22
 8010a9c:	9905      	ldr	r1, [sp, #20]
 8010a9e:	0018      	movs	r0, r3
 8010aa0:	600a      	str	r2, [r1, #0]
 8010aa2:	9a02      	ldr	r2, [sp, #8]
 8010aa4:	2a00      	cmp	r2, #0
 8010aa6:	d109      	bne.n	8010abc <_strtoul_l.constprop.0+0xe0>
 8010aa8:	b007      	add	sp, #28
 8010aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aac:	2f00      	cmp	r7, #0
 8010aae:	d000      	beq.n	8010ab2 <_strtoul_l.constprop.0+0xd6>
 8010ab0:	4240      	negs	r0, r0
 8010ab2:	9a02      	ldr	r2, [sp, #8]
 8010ab4:	2a00      	cmp	r2, #0
 8010ab6:	d0f7      	beq.n	8010aa8 <_strtoul_l.constprop.0+0xcc>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <_strtoul_l.constprop.0+0xe4>
 8010abc:	1e6b      	subs	r3, r5, #1
 8010abe:	9301      	str	r3, [sp, #4]
 8010ac0:	9b02      	ldr	r3, [sp, #8]
 8010ac2:	9a01      	ldr	r2, [sp, #4]
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	e7ef      	b.n	8010aa8 <_strtoul_l.constprop.0+0xcc>
 8010ac8:	2430      	movs	r4, #48	; 0x30
 8010aca:	2e00      	cmp	r6, #0
 8010acc:	d1ad      	bne.n	8010a2a <_strtoul_l.constprop.0+0x4e>
 8010ace:	3608      	adds	r6, #8
 8010ad0:	e7ab      	b.n	8010a2a <_strtoul_l.constprop.0+0x4e>
 8010ad2:	2c30      	cmp	r4, #48	; 0x30
 8010ad4:	d0a1      	beq.n	8010a1a <_strtoul_l.constprop.0+0x3e>
 8010ad6:	260a      	movs	r6, #10
 8010ad8:	e7a7      	b.n	8010a2a <_strtoul_l.constprop.0+0x4e>
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	08013eb1 	.word	0x08013eb1

08010ae0 <_strtoul_r>:
 8010ae0:	b510      	push	{r4, lr}
 8010ae2:	f7ff ff7b 	bl	80109dc <_strtoul_l.constprop.0>
 8010ae6:	bd10      	pop	{r4, pc}

08010ae8 <_strtoll_l.constprop.0>:
 8010ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aea:	b08d      	sub	sp, #52	; 0x34
 8010aec:	9203      	str	r2, [sp, #12]
 8010aee:	4a53      	ldr	r2, [pc, #332]	; (8010c3c <_strtoll_l.constprop.0+0x154>)
 8010af0:	001e      	movs	r6, r3
 8010af2:	9102      	str	r1, [sp, #8]
 8010af4:	000b      	movs	r3, r1
 8010af6:	4694      	mov	ip, r2
 8010af8:	2108      	movs	r1, #8
 8010afa:	900a      	str	r0, [sp, #40]	; 0x28
 8010afc:	001a      	movs	r2, r3
 8010afe:	4660      	mov	r0, ip
 8010b00:	7814      	ldrb	r4, [r2, #0]
 8010b02:	3301      	adds	r3, #1
 8010b04:	5d00      	ldrb	r0, [r0, r4]
 8010b06:	001d      	movs	r5, r3
 8010b08:	0007      	movs	r7, r0
 8010b0a:	400f      	ands	r7, r1
 8010b0c:	4208      	tst	r0, r1
 8010b0e:	d1f5      	bne.n	8010afc <_strtoll_l.constprop.0+0x14>
 8010b10:	2c2d      	cmp	r4, #45	; 0x2d
 8010b12:	d153      	bne.n	8010bbc <_strtoll_l.constprop.0+0xd4>
 8010b14:	781c      	ldrb	r4, [r3, #0]
 8010b16:	2301      	movs	r3, #1
 8010b18:	1c95      	adds	r5, r2, #2
 8010b1a:	9301      	str	r3, [sp, #4]
 8010b1c:	2e00      	cmp	r6, #0
 8010b1e:	d100      	bne.n	8010b22 <_strtoll_l.constprop.0+0x3a>
 8010b20:	e086      	b.n	8010c30 <_strtoll_l.constprop.0+0x148>
 8010b22:	2e10      	cmp	r6, #16
 8010b24:	d10a      	bne.n	8010b3c <_strtoll_l.constprop.0+0x54>
 8010b26:	2c30      	cmp	r4, #48	; 0x30
 8010b28:	d108      	bne.n	8010b3c <_strtoll_l.constprop.0+0x54>
 8010b2a:	2220      	movs	r2, #32
 8010b2c:	782b      	ldrb	r3, [r5, #0]
 8010b2e:	4393      	bics	r3, r2
 8010b30:	2b58      	cmp	r3, #88	; 0x58
 8010b32:	d000      	beq.n	8010b36 <_strtoll_l.constprop.0+0x4e>
 8010b34:	e076      	b.n	8010c24 <_strtoll_l.constprop.0+0x13c>
 8010b36:	2610      	movs	r6, #16
 8010b38:	786c      	ldrb	r4, [r5, #1]
 8010b3a:	3502      	adds	r5, #2
 8010b3c:	2001      	movs	r0, #1
 8010b3e:	2300      	movs	r3, #0
 8010b40:	493f      	ldr	r1, [pc, #252]	; (8010c40 <_strtoll_l.constprop.0+0x158>)
 8010b42:	9a01      	ldr	r2, [sp, #4]
 8010b44:	4240      	negs	r0, r0
 8010b46:	1812      	adds	r2, r2, r0
 8010b48:	414b      	adcs	r3, r1
 8010b4a:	9204      	str	r2, [sp, #16]
 8010b4c:	9305      	str	r3, [sp, #20]
 8010b4e:	9804      	ldr	r0, [sp, #16]
 8010b50:	9905      	ldr	r1, [sp, #20]
 8010b52:	17f3      	asrs	r3, r6, #31
 8010b54:	0032      	movs	r2, r6
 8010b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b58:	f7ef fca4 	bl	80004a4 <__aeabi_uldivmod>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	000f      	movs	r7, r1
 8010b60:	9008      	str	r0, [sp, #32]
 8010b62:	2100      	movs	r1, #0
 8010b64:	2000      	movs	r0, #0
 8010b66:	9209      	str	r2, [sp, #36]	; 0x24
 8010b68:	0022      	movs	r2, r4
 8010b6a:	3a30      	subs	r2, #48	; 0x30
 8010b6c:	2a09      	cmp	r2, #9
 8010b6e:	d82b      	bhi.n	8010bc8 <_strtoll_l.constprop.0+0xe0>
 8010b70:	0014      	movs	r4, r2
 8010b72:	42a6      	cmp	r6, r4
 8010b74:	dd37      	ble.n	8010be6 <_strtoll_l.constprop.0+0xfe>
 8010b76:	1c5a      	adds	r2, r3, #1
 8010b78:	d01d      	beq.n	8010bb6 <_strtoll_l.constprop.0+0xce>
 8010b7a:	42b9      	cmp	r1, r7
 8010b7c:	d830      	bhi.n	8010be0 <_strtoll_l.constprop.0+0xf8>
 8010b7e:	d102      	bne.n	8010b86 <_strtoll_l.constprop.0+0x9e>
 8010b80:	9b08      	ldr	r3, [sp, #32]
 8010b82:	4298      	cmp	r0, r3
 8010b84:	d82c      	bhi.n	8010be0 <_strtoll_l.constprop.0+0xf8>
 8010b86:	9b08      	ldr	r3, [sp, #32]
 8010b88:	4283      	cmp	r3, r0
 8010b8a:	d106      	bne.n	8010b9a <_strtoll_l.constprop.0+0xb2>
 8010b8c:	428f      	cmp	r7, r1
 8010b8e:	d104      	bne.n	8010b9a <_strtoll_l.constprop.0+0xb2>
 8010b90:	2301      	movs	r3, #1
 8010b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b94:	425b      	negs	r3, r3
 8010b96:	42a2      	cmp	r2, r4
 8010b98:	db0d      	blt.n	8010bb6 <_strtoll_l.constprop.0+0xce>
 8010b9a:	000b      	movs	r3, r1
 8010b9c:	0002      	movs	r2, r0
 8010b9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ba0:	0030      	movs	r0, r6
 8010ba2:	f7ef fc9f 	bl	80004e4 <__aeabi_lmul>
 8010ba6:	17e3      	asrs	r3, r4, #31
 8010ba8:	9406      	str	r4, [sp, #24]
 8010baa:	9307      	str	r3, [sp, #28]
 8010bac:	9b06      	ldr	r3, [sp, #24]
 8010bae:	9c07      	ldr	r4, [sp, #28]
 8010bb0:	18c0      	adds	r0, r0, r3
 8010bb2:	4161      	adcs	r1, r4
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	782c      	ldrb	r4, [r5, #0]
 8010bb8:	3501      	adds	r5, #1
 8010bba:	e7d5      	b.n	8010b68 <_strtoll_l.constprop.0+0x80>
 8010bbc:	9701      	str	r7, [sp, #4]
 8010bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8010bc0:	d1ac      	bne.n	8010b1c <_strtoll_l.constprop.0+0x34>
 8010bc2:	781c      	ldrb	r4, [r3, #0]
 8010bc4:	1c95      	adds	r5, r2, #2
 8010bc6:	e7a9      	b.n	8010b1c <_strtoll_l.constprop.0+0x34>
 8010bc8:	0022      	movs	r2, r4
 8010bca:	3a41      	subs	r2, #65	; 0x41
 8010bcc:	2a19      	cmp	r2, #25
 8010bce:	d801      	bhi.n	8010bd4 <_strtoll_l.constprop.0+0xec>
 8010bd0:	3c37      	subs	r4, #55	; 0x37
 8010bd2:	e7ce      	b.n	8010b72 <_strtoll_l.constprop.0+0x8a>
 8010bd4:	0022      	movs	r2, r4
 8010bd6:	3a61      	subs	r2, #97	; 0x61
 8010bd8:	2a19      	cmp	r2, #25
 8010bda:	d804      	bhi.n	8010be6 <_strtoll_l.constprop.0+0xfe>
 8010bdc:	3c57      	subs	r4, #87	; 0x57
 8010bde:	e7c8      	b.n	8010b72 <_strtoll_l.constprop.0+0x8a>
 8010be0:	2301      	movs	r3, #1
 8010be2:	425b      	negs	r3, r3
 8010be4:	e7e7      	b.n	8010bb6 <_strtoll_l.constprop.0+0xce>
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	d109      	bne.n	8010bfe <_strtoll_l.constprop.0+0x116>
 8010bea:	9804      	ldr	r0, [sp, #16]
 8010bec:	9905      	ldr	r1, [sp, #20]
 8010bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bf0:	3323      	adds	r3, #35	; 0x23
 8010bf2:	6013      	str	r3, [r2, #0]
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10e      	bne.n	8010c18 <_strtoll_l.constprop.0+0x130>
 8010bfa:	b00d      	add	sp, #52	; 0x34
 8010bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bfe:	9a01      	ldr	r2, [sp, #4]
 8010c00:	2a00      	cmp	r2, #0
 8010c02:	d004      	beq.n	8010c0e <_strtoll_l.constprop.0+0x126>
 8010c04:	0006      	movs	r6, r0
 8010c06:	000f      	movs	r7, r1
 8010c08:	2100      	movs	r1, #0
 8010c0a:	4270      	negs	r0, r6
 8010c0c:	41b9      	sbcs	r1, r7
 8010c0e:	9a03      	ldr	r2, [sp, #12]
 8010c10:	2a00      	cmp	r2, #0
 8010c12:	d0f2      	beq.n	8010bfa <_strtoll_l.constprop.0+0x112>
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <_strtoll_l.constprop.0+0x134>
 8010c18:	1e6b      	subs	r3, r5, #1
 8010c1a:	9302      	str	r3, [sp, #8]
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	9a02      	ldr	r2, [sp, #8]
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	e7ea      	b.n	8010bfa <_strtoll_l.constprop.0+0x112>
 8010c24:	2430      	movs	r4, #48	; 0x30
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	d000      	beq.n	8010c2c <_strtoll_l.constprop.0+0x144>
 8010c2a:	e787      	b.n	8010b3c <_strtoll_l.constprop.0+0x54>
 8010c2c:	3608      	adds	r6, #8
 8010c2e:	e785      	b.n	8010b3c <_strtoll_l.constprop.0+0x54>
 8010c30:	2c30      	cmp	r4, #48	; 0x30
 8010c32:	d100      	bne.n	8010c36 <_strtoll_l.constprop.0+0x14e>
 8010c34:	e779      	b.n	8010b2a <_strtoll_l.constprop.0+0x42>
 8010c36:	260a      	movs	r6, #10
 8010c38:	e780      	b.n	8010b3c <_strtoll_l.constprop.0+0x54>
 8010c3a:	46c0      	nop			; (mov r8, r8)
 8010c3c:	08013eb1 	.word	0x08013eb1
 8010c40:	7fffffff 	.word	0x7fffffff

08010c44 <_strtoll_r>:
 8010c44:	b510      	push	{r4, lr}
 8010c46:	f7ff ff4f 	bl	8010ae8 <_strtoll_l.constprop.0>
 8010c4a:	bd10      	pop	{r4, pc}

08010c4c <_strtoull_l.constprop.0>:
 8010c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c4e:	b08b      	sub	sp, #44	; 0x2c
 8010c50:	9202      	str	r2, [sp, #8]
 8010c52:	4a54      	ldr	r2, [pc, #336]	; (8010da4 <_strtoull_l.constprop.0+0x158>)
 8010c54:	001e      	movs	r6, r3
 8010c56:	9101      	str	r1, [sp, #4]
 8010c58:	000b      	movs	r3, r1
 8010c5a:	4694      	mov	ip, r2
 8010c5c:	2108      	movs	r1, #8
 8010c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8010c60:	001a      	movs	r2, r3
 8010c62:	4660      	mov	r0, ip
 8010c64:	7814      	ldrb	r4, [r2, #0]
 8010c66:	3301      	adds	r3, #1
 8010c68:	5d00      	ldrb	r0, [r0, r4]
 8010c6a:	001d      	movs	r5, r3
 8010c6c:	0007      	movs	r7, r0
 8010c6e:	400f      	ands	r7, r1
 8010c70:	4208      	tst	r0, r1
 8010c72:	d1f5      	bne.n	8010c60 <_strtoull_l.constprop.0+0x14>
 8010c74:	2c2d      	cmp	r4, #45	; 0x2d
 8010c76:	d154      	bne.n	8010d22 <_strtoull_l.constprop.0+0xd6>
 8010c78:	781c      	ldrb	r4, [r3, #0]
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	1c95      	adds	r5, r2, #2
 8010c7e:	9306      	str	r3, [sp, #24]
 8010c80:	2e00      	cmp	r6, #0
 8010c82:	d100      	bne.n	8010c86 <_strtoull_l.constprop.0+0x3a>
 8010c84:	e088      	b.n	8010d98 <_strtoull_l.constprop.0+0x14c>
 8010c86:	2e10      	cmp	r6, #16
 8010c88:	d10a      	bne.n	8010ca0 <_strtoull_l.constprop.0+0x54>
 8010c8a:	2c30      	cmp	r4, #48	; 0x30
 8010c8c:	d108      	bne.n	8010ca0 <_strtoull_l.constprop.0+0x54>
 8010c8e:	2220      	movs	r2, #32
 8010c90:	782b      	ldrb	r3, [r5, #0]
 8010c92:	4393      	bics	r3, r2
 8010c94:	2b58      	cmp	r3, #88	; 0x58
 8010c96:	d000      	beq.n	8010c9a <_strtoull_l.constprop.0+0x4e>
 8010c98:	e078      	b.n	8010d8c <_strtoull_l.constprop.0+0x140>
 8010c9a:	2610      	movs	r6, #16
 8010c9c:	786c      	ldrb	r4, [r5, #1]
 8010c9e:	3502      	adds	r5, #2
 8010ca0:	17f7      	asrs	r7, r6, #31
 8010ca2:	0032      	movs	r2, r6
 8010ca4:	003b      	movs	r3, r7
 8010ca6:	2001      	movs	r0, #1
 8010ca8:	4240      	negs	r0, r0
 8010caa:	17c1      	asrs	r1, r0, #31
 8010cac:	f7ef fbfa 	bl	80004a4 <__aeabi_uldivmod>
 8010cb0:	0032      	movs	r2, r6
 8010cb2:	9007      	str	r0, [sp, #28]
 8010cb4:	9103      	str	r1, [sp, #12]
 8010cb6:	003b      	movs	r3, r7
 8010cb8:	2001      	movs	r0, #1
 8010cba:	4240      	negs	r0, r0
 8010cbc:	17c1      	asrs	r1, r0, #31
 8010cbe:	f7ef fbf1 	bl	80004a4 <__aeabi_uldivmod>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	9208      	str	r2, [sp, #32]
 8010cca:	0022      	movs	r2, r4
 8010ccc:	3a30      	subs	r2, #48	; 0x30
 8010cce:	2a09      	cmp	r2, #9
 8010cd0:	d82d      	bhi.n	8010d2e <_strtoull_l.constprop.0+0xe2>
 8010cd2:	0014      	movs	r4, r2
 8010cd4:	42a6      	cmp	r6, r4
 8010cd6:	dd39      	ble.n	8010d4c <_strtoull_l.constprop.0+0x100>
 8010cd8:	1c5a      	adds	r2, r3, #1
 8010cda:	d01f      	beq.n	8010d1c <_strtoull_l.constprop.0+0xd0>
 8010cdc:	9b03      	ldr	r3, [sp, #12]
 8010cde:	4299      	cmp	r1, r3
 8010ce0:	d831      	bhi.n	8010d46 <_strtoull_l.constprop.0+0xfa>
 8010ce2:	d102      	bne.n	8010cea <_strtoull_l.constprop.0+0x9e>
 8010ce4:	9b07      	ldr	r3, [sp, #28]
 8010ce6:	4298      	cmp	r0, r3
 8010ce8:	d82d      	bhi.n	8010d46 <_strtoull_l.constprop.0+0xfa>
 8010cea:	9b07      	ldr	r3, [sp, #28]
 8010cec:	4283      	cmp	r3, r0
 8010cee:	d107      	bne.n	8010d00 <_strtoull_l.constprop.0+0xb4>
 8010cf0:	9b03      	ldr	r3, [sp, #12]
 8010cf2:	428b      	cmp	r3, r1
 8010cf4:	d104      	bne.n	8010d00 <_strtoull_l.constprop.0+0xb4>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	9a08      	ldr	r2, [sp, #32]
 8010cfa:	425b      	negs	r3, r3
 8010cfc:	42a2      	cmp	r2, r4
 8010cfe:	db0d      	blt.n	8010d1c <_strtoull_l.constprop.0+0xd0>
 8010d00:	000b      	movs	r3, r1
 8010d02:	0002      	movs	r2, r0
 8010d04:	0039      	movs	r1, r7
 8010d06:	0030      	movs	r0, r6
 8010d08:	f7ef fbec 	bl	80004e4 <__aeabi_lmul>
 8010d0c:	17e3      	asrs	r3, r4, #31
 8010d0e:	9404      	str	r4, [sp, #16]
 8010d10:	9305      	str	r3, [sp, #20]
 8010d12:	9b04      	ldr	r3, [sp, #16]
 8010d14:	9c05      	ldr	r4, [sp, #20]
 8010d16:	18c0      	adds	r0, r0, r3
 8010d18:	4161      	adcs	r1, r4
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	782c      	ldrb	r4, [r5, #0]
 8010d1e:	3501      	adds	r5, #1
 8010d20:	e7d3      	b.n	8010cca <_strtoull_l.constprop.0+0x7e>
 8010d22:	9706      	str	r7, [sp, #24]
 8010d24:	2c2b      	cmp	r4, #43	; 0x2b
 8010d26:	d1ab      	bne.n	8010c80 <_strtoull_l.constprop.0+0x34>
 8010d28:	781c      	ldrb	r4, [r3, #0]
 8010d2a:	1c95      	adds	r5, r2, #2
 8010d2c:	e7a8      	b.n	8010c80 <_strtoull_l.constprop.0+0x34>
 8010d2e:	0022      	movs	r2, r4
 8010d30:	3a41      	subs	r2, #65	; 0x41
 8010d32:	2a19      	cmp	r2, #25
 8010d34:	d801      	bhi.n	8010d3a <_strtoull_l.constprop.0+0xee>
 8010d36:	3c37      	subs	r4, #55	; 0x37
 8010d38:	e7cc      	b.n	8010cd4 <_strtoull_l.constprop.0+0x88>
 8010d3a:	0022      	movs	r2, r4
 8010d3c:	3a61      	subs	r2, #97	; 0x61
 8010d3e:	2a19      	cmp	r2, #25
 8010d40:	d804      	bhi.n	8010d4c <_strtoull_l.constprop.0+0x100>
 8010d42:	3c57      	subs	r4, #87	; 0x57
 8010d44:	e7c6      	b.n	8010cd4 <_strtoull_l.constprop.0+0x88>
 8010d46:	2301      	movs	r3, #1
 8010d48:	425b      	negs	r3, r3
 8010d4a:	e7e7      	b.n	8010d1c <_strtoull_l.constprop.0+0xd0>
 8010d4c:	1c5a      	adds	r2, r3, #1
 8010d4e:	d10a      	bne.n	8010d66 <_strtoull_l.constprop.0+0x11a>
 8010d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d52:	3323      	adds	r3, #35	; 0x23
 8010d54:	6013      	str	r3, [r2, #0]
 8010d56:	9b02      	ldr	r3, [sp, #8]
 8010d58:	2001      	movs	r0, #1
 8010d5a:	4240      	negs	r0, r0
 8010d5c:	17c1      	asrs	r1, r0, #31
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10e      	bne.n	8010d80 <_strtoull_l.constprop.0+0x134>
 8010d62:	b00b      	add	sp, #44	; 0x2c
 8010d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d66:	9a06      	ldr	r2, [sp, #24]
 8010d68:	2a00      	cmp	r2, #0
 8010d6a:	d004      	beq.n	8010d76 <_strtoull_l.constprop.0+0x12a>
 8010d6c:	0006      	movs	r6, r0
 8010d6e:	000f      	movs	r7, r1
 8010d70:	2100      	movs	r1, #0
 8010d72:	4270      	negs	r0, r6
 8010d74:	41b9      	sbcs	r1, r7
 8010d76:	9a02      	ldr	r2, [sp, #8]
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	d0f2      	beq.n	8010d62 <_strtoull_l.constprop.0+0x116>
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <_strtoull_l.constprop.0+0x138>
 8010d80:	1e6b      	subs	r3, r5, #1
 8010d82:	9301      	str	r3, [sp, #4]
 8010d84:	9b02      	ldr	r3, [sp, #8]
 8010d86:	9a01      	ldr	r2, [sp, #4]
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	e7ea      	b.n	8010d62 <_strtoull_l.constprop.0+0x116>
 8010d8c:	2430      	movs	r4, #48	; 0x30
 8010d8e:	2e00      	cmp	r6, #0
 8010d90:	d000      	beq.n	8010d94 <_strtoull_l.constprop.0+0x148>
 8010d92:	e785      	b.n	8010ca0 <_strtoull_l.constprop.0+0x54>
 8010d94:	3608      	adds	r6, #8
 8010d96:	e783      	b.n	8010ca0 <_strtoull_l.constprop.0+0x54>
 8010d98:	2c30      	cmp	r4, #48	; 0x30
 8010d9a:	d100      	bne.n	8010d9e <_strtoull_l.constprop.0+0x152>
 8010d9c:	e777      	b.n	8010c8e <_strtoull_l.constprop.0+0x42>
 8010d9e:	260a      	movs	r6, #10
 8010da0:	e77e      	b.n	8010ca0 <_strtoull_l.constprop.0+0x54>
 8010da2:	46c0      	nop			; (mov r8, r8)
 8010da4:	08013eb1 	.word	0x08013eb1

08010da8 <_strtoull_r>:
 8010da8:	b510      	push	{r4, lr}
 8010daa:	f7ff ff4f 	bl	8010c4c <_strtoull_l.constprop.0>
 8010dae:	bd10      	pop	{r4, pc}

08010db0 <_mbrtowc_r>:
 8010db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010db2:	0004      	movs	r4, r0
 8010db4:	0010      	movs	r0, r2
 8010db6:	4a0b      	ldr	r2, [pc, #44]	; (8010de4 <_mbrtowc_r+0x34>)
 8010db8:	9d06      	ldr	r5, [sp, #24]
 8010dba:	32e4      	adds	r2, #228	; 0xe4
 8010dbc:	6816      	ldr	r6, [r2, #0]
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d10c      	bne.n	8010ddc <_mbrtowc_r+0x2c>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	0001      	movs	r1, r0
 8010dc6:	4a08      	ldr	r2, [pc, #32]	; (8010de8 <_mbrtowc_r+0x38>)
 8010dc8:	9500      	str	r5, [sp, #0]
 8010dca:	0020      	movs	r0, r4
 8010dcc:	47b0      	blx	r6
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d103      	bne.n	8010dda <_mbrtowc_r+0x2a>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	602b      	str	r3, [r5, #0]
 8010dd6:	338a      	adds	r3, #138	; 0x8a
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010ddc:	0002      	movs	r2, r0
 8010dde:	9500      	str	r5, [sp, #0]
 8010de0:	e7f3      	b.n	8010dca <_mbrtowc_r+0x1a>
 8010de2:	46c0      	nop			; (mov r8, r8)
 8010de4:	2000043c 	.word	0x2000043c
 8010de8:	0801423b 	.word	0x0801423b

08010dec <iswspace>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	2100      	movs	r1, #0
 8010df0:	f000 f802 	bl	8010df8 <iswspace_l>
 8010df4:	bd10      	pop	{r4, pc}
	...

08010df8 <iswspace_l>:
 8010df8:	0003      	movs	r3, r0
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	2bff      	cmp	r3, #255	; 0xff
 8010dfe:	d803      	bhi.n	8010e08 <iswspace_l+0x10>
 8010e00:	4a02      	ldr	r2, [pc, #8]	; (8010e0c <iswspace_l+0x14>)
 8010e02:	5cd0      	ldrb	r0, [r2, r3]
 8010e04:	2308      	movs	r3, #8
 8010e06:	4018      	ands	r0, r3
 8010e08:	4770      	bx	lr
 8010e0a:	46c0      	nop			; (mov r8, r8)
 8010e0c:	08013eb1 	.word	0x08013eb1

08010e10 <fiprintf>:
 8010e10:	b40e      	push	{r1, r2, r3}
 8010e12:	b517      	push	{r0, r1, r2, r4, lr}
 8010e14:	4c05      	ldr	r4, [pc, #20]	; (8010e2c <fiprintf+0x1c>)
 8010e16:	ab05      	add	r3, sp, #20
 8010e18:	cb04      	ldmia	r3!, {r2}
 8010e1a:	0001      	movs	r1, r0
 8010e1c:	6820      	ldr	r0, [r4, #0]
 8010e1e:	9301      	str	r3, [sp, #4]
 8010e20:	f000 f954 	bl	80110cc <_vfiprintf_r>
 8010e24:	bc1e      	pop	{r1, r2, r3, r4}
 8010e26:	bc08      	pop	{r3}
 8010e28:	b003      	add	sp, #12
 8010e2a:	4718      	bx	r3
 8010e2c:	200006c8 	.word	0x200006c8

08010e30 <__ssprint_r>:
 8010e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e32:	6813      	ldr	r3, [r2, #0]
 8010e34:	b087      	sub	sp, #28
 8010e36:	0017      	movs	r7, r2
 8010e38:	9303      	str	r3, [sp, #12]
 8010e3a:	6893      	ldr	r3, [r2, #8]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	000c      	movs	r4, r1
 8010e40:	9005      	str	r0, [sp, #20]
 8010e42:	9202      	str	r2, [sp, #8]
 8010e44:	9201      	str	r2, [sp, #4]
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d10d      	bne.n	8010e66 <__ssprint_r+0x36>
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	607b      	str	r3, [r7, #4]
 8010e50:	b007      	add	sp, #28
 8010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e54:	9b03      	ldr	r3, [sp, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	9302      	str	r3, [sp, #8]
 8010e5a:	9b03      	ldr	r3, [sp, #12]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	9b03      	ldr	r3, [sp, #12]
 8010e62:	3308      	adds	r3, #8
 8010e64:	9303      	str	r3, [sp, #12]
 8010e66:	9a01      	ldr	r2, [sp, #4]
 8010e68:	68a6      	ldr	r6, [r4, #8]
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	2a00      	cmp	r2, #0
 8010e6e:	d0f1      	beq.n	8010e54 <__ssprint_r+0x24>
 8010e70:	42b2      	cmp	r2, r6
 8010e72:	d32e      	bcc.n	8010ed2 <__ssprint_r+0xa2>
 8010e74:	2190      	movs	r1, #144	; 0x90
 8010e76:	89a2      	ldrh	r2, [r4, #12]
 8010e78:	00c9      	lsls	r1, r1, #3
 8010e7a:	420a      	tst	r2, r1
 8010e7c:	d029      	beq.n	8010ed2 <__ssprint_r+0xa2>
 8010e7e:	2003      	movs	r0, #3
 8010e80:	6921      	ldr	r1, [r4, #16]
 8010e82:	1a5b      	subs	r3, r3, r1
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	6963      	ldr	r3, [r4, #20]
 8010e88:	4343      	muls	r3, r0
 8010e8a:	0fdd      	lsrs	r5, r3, #31
 8010e8c:	18ed      	adds	r5, r5, r3
 8010e8e:	9b04      	ldr	r3, [sp, #16]
 8010e90:	9801      	ldr	r0, [sp, #4]
 8010e92:	3301      	adds	r3, #1
 8010e94:	181b      	adds	r3, r3, r0
 8010e96:	106d      	asrs	r5, r5, #1
 8010e98:	42ab      	cmp	r3, r5
 8010e9a:	d900      	bls.n	8010e9e <__ssprint_r+0x6e>
 8010e9c:	001d      	movs	r5, r3
 8010e9e:	0552      	lsls	r2, r2, #21
 8010ea0:	d532      	bpl.n	8010f08 <__ssprint_r+0xd8>
 8010ea2:	0029      	movs	r1, r5
 8010ea4:	9805      	ldr	r0, [sp, #20]
 8010ea6:	f7f9 fa35 	bl	800a314 <_malloc_r>
 8010eaa:	1e06      	subs	r6, r0, #0
 8010eac:	d036      	beq.n	8010f1c <__ssprint_r+0xec>
 8010eae:	9a04      	ldr	r2, [sp, #16]
 8010eb0:	6921      	ldr	r1, [r4, #16]
 8010eb2:	f7fa fd94 	bl	800b9de <memcpy>
 8010eb6:	89a2      	ldrh	r2, [r4, #12]
 8010eb8:	4b1e      	ldr	r3, [pc, #120]	; (8010f34 <__ssprint_r+0x104>)
 8010eba:	401a      	ands	r2, r3
 8010ebc:	2380      	movs	r3, #128	; 0x80
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	9b04      	ldr	r3, [sp, #16]
 8010ec4:	6126      	str	r6, [r4, #16]
 8010ec6:	18f6      	adds	r6, r6, r3
 8010ec8:	6026      	str	r6, [r4, #0]
 8010eca:	6165      	str	r5, [r4, #20]
 8010ecc:	9e01      	ldr	r6, [sp, #4]
 8010ece:	1aed      	subs	r5, r5, r3
 8010ed0:	60a5      	str	r5, [r4, #8]
 8010ed2:	9b01      	ldr	r3, [sp, #4]
 8010ed4:	429e      	cmp	r6, r3
 8010ed6:	d900      	bls.n	8010eda <__ssprint_r+0xaa>
 8010ed8:	001e      	movs	r6, r3
 8010eda:	0032      	movs	r2, r6
 8010edc:	9902      	ldr	r1, [sp, #8]
 8010ede:	6820      	ldr	r0, [r4, #0]
 8010ee0:	f001 f86d 	bl	8011fbe <memmove>
 8010ee4:	9a01      	ldr	r2, [sp, #4]
 8010ee6:	68a3      	ldr	r3, [r4, #8]
 8010ee8:	4694      	mov	ip, r2
 8010eea:	1b9b      	subs	r3, r3, r6
 8010eec:	60a3      	str	r3, [r4, #8]
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	199b      	adds	r3, r3, r6
 8010ef2:	6023      	str	r3, [r4, #0]
 8010ef4:	9b02      	ldr	r3, [sp, #8]
 8010ef6:	4463      	add	r3, ip
 8010ef8:	9302      	str	r3, [sp, #8]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	1a9b      	subs	r3, r3, r2
 8010efe:	60bb      	str	r3, [r7, #8]
 8010f00:	d0a3      	beq.n	8010e4a <__ssprint_r+0x1a>
 8010f02:	2300      	movs	r3, #0
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	e7ae      	b.n	8010e66 <__ssprint_r+0x36>
 8010f08:	002a      	movs	r2, r5
 8010f0a:	9805      	ldr	r0, [sp, #20]
 8010f0c:	f7ff fbc0 	bl	8010690 <_realloc_r>
 8010f10:	1e06      	subs	r6, r0, #0
 8010f12:	d1d6      	bne.n	8010ec2 <__ssprint_r+0x92>
 8010f14:	6921      	ldr	r1, [r4, #16]
 8010f16:	9805      	ldr	r0, [sp, #20]
 8010f18:	f7fa fddc 	bl	800bad4 <_free_r>
 8010f1c:	230c      	movs	r3, #12
 8010f1e:	9a05      	ldr	r2, [sp, #20]
 8010f20:	2001      	movs	r0, #1
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	89a2      	ldrh	r2, [r4, #12]
 8010f26:	3334      	adds	r3, #52	; 0x34
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	81a3      	strh	r3, [r4, #12]
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	4240      	negs	r0, r0
 8010f30:	60bb      	str	r3, [r7, #8]
 8010f32:	e78b      	b.n	8010e4c <__ssprint_r+0x1c>
 8010f34:	fffffb7f 	.word	0xfffffb7f

08010f38 <_sungetc_r>:
 8010f38:	b570      	push	{r4, r5, r6, lr}
 8010f3a:	0014      	movs	r4, r2
 8010f3c:	1c4b      	adds	r3, r1, #1
 8010f3e:	d103      	bne.n	8010f48 <_sungetc_r+0x10>
 8010f40:	2501      	movs	r5, #1
 8010f42:	426d      	negs	r5, r5
 8010f44:	0028      	movs	r0, r5
 8010f46:	bd70      	pop	{r4, r5, r6, pc}
 8010f48:	8993      	ldrh	r3, [r2, #12]
 8010f4a:	2220      	movs	r2, #32
 8010f4c:	4393      	bics	r3, r2
 8010f4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010f50:	81a3      	strh	r3, [r4, #12]
 8010f52:	b2ce      	uxtb	r6, r1
 8010f54:	6863      	ldr	r3, [r4, #4]
 8010f56:	b2cd      	uxtb	r5, r1
 8010f58:	2a00      	cmp	r2, #0
 8010f5a:	d010      	beq.n	8010f7e <_sungetc_r+0x46>
 8010f5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	dd07      	ble.n	8010f72 <_sungetc_r+0x3a>
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	3b01      	subs	r3, #1
 8010f66:	6023      	str	r3, [r4, #0]
 8010f68:	701e      	strb	r6, [r3, #0]
 8010f6a:	6863      	ldr	r3, [r4, #4]
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	6063      	str	r3, [r4, #4]
 8010f70:	e7e8      	b.n	8010f44 <_sungetc_r+0xc>
 8010f72:	0021      	movs	r1, r4
 8010f74:	f000 ff1a 	bl	8011dac <__submore>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d0f2      	beq.n	8010f62 <_sungetc_r+0x2a>
 8010f7c:	e7e0      	b.n	8010f40 <_sungetc_r+0x8>
 8010f7e:	6921      	ldr	r1, [r4, #16]
 8010f80:	6822      	ldr	r2, [r4, #0]
 8010f82:	2900      	cmp	r1, #0
 8010f84:	d007      	beq.n	8010f96 <_sungetc_r+0x5e>
 8010f86:	4291      	cmp	r1, r2
 8010f88:	d205      	bcs.n	8010f96 <_sungetc_r+0x5e>
 8010f8a:	1e51      	subs	r1, r2, #1
 8010f8c:	7808      	ldrb	r0, [r1, #0]
 8010f8e:	42a8      	cmp	r0, r5
 8010f90:	d101      	bne.n	8010f96 <_sungetc_r+0x5e>
 8010f92:	6021      	str	r1, [r4, #0]
 8010f94:	e7ea      	b.n	8010f6c <_sungetc_r+0x34>
 8010f96:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010f98:	0023      	movs	r3, r4
 8010f9a:	3340      	adds	r3, #64	; 0x40
 8010f9c:	6323      	str	r3, [r4, #48]	; 0x30
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8010fa2:	0023      	movs	r3, r4
 8010fa4:	3342      	adds	r3, #66	; 0x42
 8010fa6:	63a2      	str	r2, [r4, #56]	; 0x38
 8010fa8:	701e      	strb	r6, [r3, #0]
 8010faa:	6023      	str	r3, [r4, #0]
 8010fac:	2301      	movs	r3, #1
 8010fae:	e7de      	b.n	8010f6e <_sungetc_r+0x36>

08010fb0 <__ssrefill_r>:
 8010fb0:	b510      	push	{r4, lr}
 8010fb2:	000c      	movs	r4, r1
 8010fb4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8010fb6:	2900      	cmp	r1, #0
 8010fb8:	d00e      	beq.n	8010fd8 <__ssrefill_r+0x28>
 8010fba:	0023      	movs	r3, r4
 8010fbc:	3340      	adds	r3, #64	; 0x40
 8010fbe:	4299      	cmp	r1, r3
 8010fc0:	d001      	beq.n	8010fc6 <__ssrefill_r+0x16>
 8010fc2:	f7fa fd87 	bl	800bad4 <_free_r>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010fca:	6320      	str	r0, [r4, #48]	; 0x30
 8010fcc:	6063      	str	r3, [r4, #4]
 8010fce:	4283      	cmp	r3, r0
 8010fd0:	d002      	beq.n	8010fd8 <__ssrefill_r+0x28>
 8010fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fd4:	6023      	str	r3, [r4, #0]
 8010fd6:	bd10      	pop	{r4, pc}
 8010fd8:	6923      	ldr	r3, [r4, #16]
 8010fda:	2001      	movs	r0, #1
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	89a2      	ldrh	r2, [r4, #12]
 8010fe2:	6063      	str	r3, [r4, #4]
 8010fe4:	3320      	adds	r3, #32
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	81a3      	strh	r3, [r4, #12]
 8010fea:	4240      	negs	r0, r0
 8010fec:	e7f3      	b.n	8010fd6 <__ssrefill_r+0x26>

08010fee <_sfread_r>:
 8010fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ff0:	0014      	movs	r4, r2
 8010ff2:	435c      	muls	r4, r3
 8010ff4:	b087      	sub	sp, #28
 8010ff6:	1e26      	subs	r6, r4, #0
 8010ff8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ffa:	9005      	str	r0, [sp, #20]
 8010ffc:	9101      	str	r1, [sp, #4]
 8010ffe:	9202      	str	r2, [sp, #8]
 8011000:	9303      	str	r3, [sp, #12]
 8011002:	d11e      	bne.n	8011042 <_sfread_r+0x54>
 8011004:	0020      	movs	r0, r4
 8011006:	b007      	add	sp, #28
 8011008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801100a:	003a      	movs	r2, r7
 801100c:	9801      	ldr	r0, [sp, #4]
 801100e:	f7fa fce6 	bl	800b9de <memcpy>
 8011012:	682b      	ldr	r3, [r5, #0]
 8011014:	0029      	movs	r1, r5
 8011016:	19db      	adds	r3, r3, r7
 8011018:	602b      	str	r3, [r5, #0]
 801101a:	2300      	movs	r3, #0
 801101c:	606b      	str	r3, [r5, #4]
 801101e:	9b01      	ldr	r3, [sp, #4]
 8011020:	9805      	ldr	r0, [sp, #20]
 8011022:	19db      	adds	r3, r3, r7
 8011024:	9301      	str	r3, [sp, #4]
 8011026:	1bf3      	subs	r3, r6, r7
 8011028:	9304      	str	r3, [sp, #16]
 801102a:	f7ff ffc1 	bl	8010fb0 <__ssrefill_r>
 801102e:	2800      	cmp	r0, #0
 8011030:	d006      	beq.n	8011040 <_sfread_r+0x52>
 8011032:	193c      	adds	r4, r7, r4
 8011034:	1ba0      	subs	r0, r4, r6
 8011036:	9902      	ldr	r1, [sp, #8]
 8011038:	f7ef f880 	bl	800013c <__udivsi3>
 801103c:	0004      	movs	r4, r0
 801103e:	e7e1      	b.n	8011004 <_sfread_r+0x16>
 8011040:	9e04      	ldr	r6, [sp, #16]
 8011042:	686f      	ldr	r7, [r5, #4]
 8011044:	6829      	ldr	r1, [r5, #0]
 8011046:	42b7      	cmp	r7, r6
 8011048:	d3df      	bcc.n	801100a <_sfread_r+0x1c>
 801104a:	0032      	movs	r2, r6
 801104c:	9801      	ldr	r0, [sp, #4]
 801104e:	f7fa fcc6 	bl	800b9de <memcpy>
 8011052:	686b      	ldr	r3, [r5, #4]
 8011054:	9c03      	ldr	r4, [sp, #12]
 8011056:	1b9b      	subs	r3, r3, r6
 8011058:	606b      	str	r3, [r5, #4]
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	199b      	adds	r3, r3, r6
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	e7d0      	b.n	8011004 <_sfread_r+0x16>

08011062 <__sprint_r>:
 8011062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011064:	6893      	ldr	r3, [r2, #8]
 8011066:	b085      	sub	sp, #20
 8011068:	9001      	str	r0, [sp, #4]
 801106a:	000d      	movs	r5, r1
 801106c:	0014      	movs	r4, r2
 801106e:	1e18      	subs	r0, r3, #0
 8011070:	d018      	beq.n	80110a4 <__sprint_r+0x42>
 8011072:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011074:	049b      	lsls	r3, r3, #18
 8011076:	d524      	bpl.n	80110c2 <__sprint_r+0x60>
 8011078:	6817      	ldr	r7, [r2, #0]
 801107a:	2600      	movs	r6, #0
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	9302      	str	r3, [sp, #8]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	089b      	lsrs	r3, r3, #2
 8011086:	9303      	str	r3, [sp, #12]
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	42b3      	cmp	r3, r6
 801108c:	dc0e      	bgt.n	80110ac <__sprint_r+0x4a>
 801108e:	2203      	movs	r2, #3
 8011090:	9b00      	ldr	r3, [sp, #0]
 8011092:	68a0      	ldr	r0, [r4, #8]
 8011094:	4393      	bics	r3, r2
 8011096:	1ac0      	subs	r0, r0, r3
 8011098:	60a0      	str	r0, [r4, #8]
 801109a:	3708      	adds	r7, #8
 801109c:	2800      	cmp	r0, #0
 801109e:	d1ec      	bne.n	801107a <__sprint_r+0x18>
 80110a0:	2300      	movs	r3, #0
 80110a2:	60a3      	str	r3, [r4, #8]
 80110a4:	2300      	movs	r3, #0
 80110a6:	6063      	str	r3, [r4, #4]
 80110a8:	b005      	add	sp, #20
 80110aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ac:	9902      	ldr	r1, [sp, #8]
 80110ae:	00b3      	lsls	r3, r6, #2
 80110b0:	58c9      	ldr	r1, [r1, r3]
 80110b2:	002a      	movs	r2, r5
 80110b4:	9801      	ldr	r0, [sp, #4]
 80110b6:	f000 ff59 	bl	8011f6c <_fputwc_r>
 80110ba:	1c43      	adds	r3, r0, #1
 80110bc:	d0f0      	beq.n	80110a0 <__sprint_r+0x3e>
 80110be:	3601      	adds	r6, #1
 80110c0:	e7e2      	b.n	8011088 <__sprint_r+0x26>
 80110c2:	9801      	ldr	r0, [sp, #4]
 80110c4:	f000 fd14 	bl	8011af0 <__sfvwrite_r>
 80110c8:	e7ea      	b.n	80110a0 <__sprint_r+0x3e>
	...

080110cc <_vfiprintf_r>:
 80110cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ce:	b0c1      	sub	sp, #260	; 0x104
 80110d0:	001c      	movs	r4, r3
 80110d2:	001f      	movs	r7, r3
 80110d4:	9006      	str	r0, [sp, #24]
 80110d6:	9103      	str	r1, [sp, #12]
 80110d8:	9207      	str	r2, [sp, #28]
 80110da:	2800      	cmp	r0, #0
 80110dc:	d004      	beq.n	80110e8 <_vfiprintf_r+0x1c>
 80110de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <_vfiprintf_r+0x1c>
 80110e4:	f7fa fa98 	bl	800b618 <__sinit>
 80110e8:	9b03      	ldr	r3, [sp, #12]
 80110ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110ec:	07db      	lsls	r3, r3, #31
 80110ee:	d407      	bmi.n	8011100 <_vfiprintf_r+0x34>
 80110f0:	9b03      	ldr	r3, [sp, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	059b      	lsls	r3, r3, #22
 80110f6:	d403      	bmi.n	8011100 <_vfiprintf_r+0x34>
 80110f8:	9b03      	ldr	r3, [sp, #12]
 80110fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80110fc:	f7fa fc62 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 8011100:	9b03      	ldr	r3, [sp, #12]
 8011102:	220c      	movs	r2, #12
 8011104:	5e9a      	ldrsh	r2, [r3, r2]
 8011106:	2380      	movs	r3, #128	; 0x80
 8011108:	019b      	lsls	r3, r3, #6
 801110a:	421a      	tst	r2, r3
 801110c:	d107      	bne.n	801111e <_vfiprintf_r+0x52>
 801110e:	4313      	orrs	r3, r2
 8011110:	9a03      	ldr	r2, [sp, #12]
 8011112:	8193      	strh	r3, [r2, #12]
 8011114:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011116:	4aa3      	ldr	r2, [pc, #652]	; (80113a4 <_vfiprintf_r+0x2d8>)
 8011118:	4013      	ands	r3, r2
 801111a:	9a03      	ldr	r2, [sp, #12]
 801111c:	6653      	str	r3, [r2, #100]	; 0x64
 801111e:	9b03      	ldr	r3, [sp, #12]
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	071b      	lsls	r3, r3, #28
 8011124:	d503      	bpl.n	801112e <_vfiprintf_r+0x62>
 8011126:	9b03      	ldr	r3, [sp, #12]
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d118      	bne.n	8011160 <_vfiprintf_r+0x94>
 801112e:	9903      	ldr	r1, [sp, #12]
 8011130:	9806      	ldr	r0, [sp, #24]
 8011132:	f000 fe79 	bl	8011e28 <__swsetup_r>
 8011136:	2800      	cmp	r0, #0
 8011138:	d012      	beq.n	8011160 <_vfiprintf_r+0x94>
 801113a:	9b03      	ldr	r3, [sp, #12]
 801113c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801113e:	07db      	lsls	r3, r3, #31
 8011140:	d505      	bpl.n	801114e <_vfiprintf_r+0x82>
 8011142:	2301      	movs	r3, #1
 8011144:	425b      	negs	r3, r3
 8011146:	9308      	str	r3, [sp, #32]
 8011148:	9808      	ldr	r0, [sp, #32]
 801114a:	b041      	add	sp, #260	; 0x104
 801114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801114e:	9b03      	ldr	r3, [sp, #12]
 8011150:	899b      	ldrh	r3, [r3, #12]
 8011152:	059b      	lsls	r3, r3, #22
 8011154:	d4f5      	bmi.n	8011142 <_vfiprintf_r+0x76>
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801115a:	f7fa fc34 	bl	800b9c6 <__retarget_lock_release_recursive>
 801115e:	e7f0      	b.n	8011142 <_vfiprintf_r+0x76>
 8011160:	221a      	movs	r2, #26
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	899b      	ldrh	r3, [r3, #12]
 8011166:	401a      	ands	r2, r3
 8011168:	2a0a      	cmp	r2, #10
 801116a:	d116      	bne.n	801119a <_vfiprintf_r+0xce>
 801116c:	9a03      	ldr	r2, [sp, #12]
 801116e:	210e      	movs	r1, #14
 8011170:	5e52      	ldrsh	r2, [r2, r1]
 8011172:	2a00      	cmp	r2, #0
 8011174:	db11      	blt.n	801119a <_vfiprintf_r+0xce>
 8011176:	9a03      	ldr	r2, [sp, #12]
 8011178:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801117a:	07d2      	lsls	r2, r2, #31
 801117c:	d405      	bmi.n	801118a <_vfiprintf_r+0xbe>
 801117e:	059b      	lsls	r3, r3, #22
 8011180:	d403      	bmi.n	801118a <_vfiprintf_r+0xbe>
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011186:	f7fa fc1e 	bl	800b9c6 <__retarget_lock_release_recursive>
 801118a:	0023      	movs	r3, r4
 801118c:	9a07      	ldr	r2, [sp, #28]
 801118e:	9903      	ldr	r1, [sp, #12]
 8011190:	9806      	ldr	r0, [sp, #24]
 8011192:	f000 fc69 	bl	8011a68 <__sbprintf>
 8011196:	9008      	str	r0, [sp, #32]
 8011198:	e7d6      	b.n	8011148 <_vfiprintf_r+0x7c>
 801119a:	2300      	movs	r3, #0
 801119c:	ad17      	add	r5, sp, #92	; 0x5c
 801119e:	9514      	str	r5, [sp, #80]	; 0x50
 80111a0:	9316      	str	r3, [sp, #88]	; 0x58
 80111a2:	9315      	str	r3, [sp, #84]	; 0x54
 80111a4:	930c      	str	r3, [sp, #48]	; 0x30
 80111a6:	930d      	str	r3, [sp, #52]	; 0x34
 80111a8:	930e      	str	r3, [sp, #56]	; 0x38
 80111aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80111ac:	9308      	str	r3, [sp, #32]
 80111ae:	9c07      	ldr	r4, [sp, #28]
 80111b0:	7823      	ldrb	r3, [r4, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d002      	beq.n	80111bc <_vfiprintf_r+0xf0>
 80111b6:	2b25      	cmp	r3, #37	; 0x25
 80111b8:	d000      	beq.n	80111bc <_vfiprintf_r+0xf0>
 80111ba:	e08d      	b.n	80112d8 <_vfiprintf_r+0x20c>
 80111bc:	9b07      	ldr	r3, [sp, #28]
 80111be:	1ae6      	subs	r6, r4, r3
 80111c0:	429c      	cmp	r4, r3
 80111c2:	d016      	beq.n	80111f2 <_vfiprintf_r+0x126>
 80111c4:	602b      	str	r3, [r5, #0]
 80111c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80111c8:	606e      	str	r6, [r5, #4]
 80111ca:	199b      	adds	r3, r3, r6
 80111cc:	9316      	str	r3, [sp, #88]	; 0x58
 80111ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111d0:	3508      	adds	r5, #8
 80111d2:	3301      	adds	r3, #1
 80111d4:	9315      	str	r3, [sp, #84]	; 0x54
 80111d6:	2b07      	cmp	r3, #7
 80111d8:	dd08      	ble.n	80111ec <_vfiprintf_r+0x120>
 80111da:	9903      	ldr	r1, [sp, #12]
 80111dc:	9806      	ldr	r0, [sp, #24]
 80111de:	aa14      	add	r2, sp, #80	; 0x50
 80111e0:	f7ff ff3f 	bl	8011062 <__sprint_r>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d000      	beq.n	80111ea <_vfiprintf_r+0x11e>
 80111e8:	e3d9      	b.n	801199e <_vfiprintf_r+0x8d2>
 80111ea:	ad17      	add	r5, sp, #92	; 0x5c
 80111ec:	9b08      	ldr	r3, [sp, #32]
 80111ee:	199b      	adds	r3, r3, r6
 80111f0:	9308      	str	r3, [sp, #32]
 80111f2:	7823      	ldrb	r3, [r4, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d101      	bne.n	80111fc <_vfiprintf_r+0x130>
 80111f8:	f000 fbf6 	bl	80119e8 <_vfiprintf_r+0x91c>
 80111fc:	2200      	movs	r2, #0
 80111fe:	a912      	add	r1, sp, #72	; 0x48
 8011200:	70ca      	strb	r2, [r1, #3]
 8011202:	2101      	movs	r1, #1
 8011204:	1c63      	adds	r3, r4, #1
 8011206:	0014      	movs	r4, r2
 8011208:	4249      	negs	r1, r1
 801120a:	9105      	str	r1, [sp, #20]
 801120c:	9209      	str	r2, [sp, #36]	; 0x24
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	9207      	str	r2, [sp, #28]
 8011214:	0018      	movs	r0, r3
 8011216:	3820      	subs	r0, #32
 8011218:	285a      	cmp	r0, #90	; 0x5a
 801121a:	d900      	bls.n	801121e <_vfiprintf_r+0x152>
 801121c:	e362      	b.n	80118e4 <_vfiprintf_r+0x818>
 801121e:	f7ee ff83 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011222:	0078      	.short	0x0078
 8011224:	03610361 	.word	0x03610361
 8011228:	03610081 	.word	0x03610081
 801122c:	03610361 	.word	0x03610361
 8011230:	0361005d 	.word	0x0361005d
 8011234:	00830361 	.word	0x00830361
 8011238:	0361008b 	.word	0x0361008b
 801123c:	008f0089 	.word	0x008f0089
 8011240:	00ad0361 	.word	0x00ad0361
 8011244:	00af00af 	.word	0x00af00af
 8011248:	00af00af 	.word	0x00af00af
 801124c:	00af00af 	.word	0x00af00af
 8011250:	00af00af 	.word	0x00af00af
 8011254:	036100af 	.word	0x036100af
 8011258:	03610361 	.word	0x03610361
 801125c:	03610361 	.word	0x03610361
 8011260:	03610361 	.word	0x03610361
 8011264:	03610361 	.word	0x03610361
 8011268:	00e600da 	.word	0x00e600da
 801126c:	03610361 	.word	0x03610361
 8011270:	03610361 	.word	0x03610361
 8011274:	03610361 	.word	0x03610361
 8011278:	03610361 	.word	0x03610361
 801127c:	03610361 	.word	0x03610361
 8011280:	03610143 	.word	0x03610143
 8011284:	03610361 	.word	0x03610361
 8011288:	03610182 	.word	0x03610182
 801128c:	0361027c 	.word	0x0361027c
 8011290:	02ae0361 	.word	0x02ae0361
 8011294:	03610361 	.word	0x03610361
 8011298:	03610361 	.word	0x03610361
 801129c:	03610361 	.word	0x03610361
 80112a0:	03610361 	.word	0x03610361
 80112a4:	03610361 	.word	0x03610361
 80112a8:	00e800da 	.word	0x00e800da
 80112ac:	03610361 	.word	0x03610361
 80112b0:	00c30361 	.word	0x00c30361
 80112b4:	00d600e8 	.word	0x00d600e8
 80112b8:	00cf0361 	.word	0x00cf0361
 80112bc:	01260361 	.word	0x01260361
 80112c0:	01740145 	.word	0x01740145
 80112c4:	036100d6 	.word	0x036100d6
 80112c8:	007f0182 	.word	0x007f0182
 80112cc:	0361027e 	.word	0x0361027e
 80112d0:	02cd0361 	.word	0x02cd0361
 80112d4:	007f0361 	.word	0x007f0361
 80112d8:	3401      	adds	r4, #1
 80112da:	e769      	b.n	80111b0 <_vfiprintf_r+0xe4>
 80112dc:	9806      	ldr	r0, [sp, #24]
 80112de:	f7fe fa47 	bl	800f770 <_localeconv_r>
 80112e2:	6843      	ldr	r3, [r0, #4]
 80112e4:	0018      	movs	r0, r3
 80112e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80112e8:	f7ee ff0c 	bl	8000104 <strlen>
 80112ec:	900e      	str	r0, [sp, #56]	; 0x38
 80112ee:	9806      	ldr	r0, [sp, #24]
 80112f0:	f7fe fa3e 	bl	800f770 <_localeconv_r>
 80112f4:	6883      	ldr	r3, [r0, #8]
 80112f6:	930d      	str	r3, [sp, #52]	; 0x34
 80112f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d010      	beq.n	8011320 <_vfiprintf_r+0x254>
 80112fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00d      	beq.n	8011320 <_vfiprintf_r+0x254>
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00a      	beq.n	8011320 <_vfiprintf_r+0x254>
 801130a:	2380      	movs	r3, #128	; 0x80
 801130c:	00db      	lsls	r3, r3, #3
 801130e:	431c      	orrs	r4, r3
 8011310:	e006      	b.n	8011320 <_vfiprintf_r+0x254>
 8011312:	ab12      	add	r3, sp, #72	; 0x48
 8011314:	78da      	ldrb	r2, [r3, #3]
 8011316:	3303      	adds	r3, #3
 8011318:	2a00      	cmp	r2, #0
 801131a:	d101      	bne.n	8011320 <_vfiprintf_r+0x254>
 801131c:	3220      	adds	r2, #32
 801131e:	701a      	strb	r2, [r3, #0]
 8011320:	9b07      	ldr	r3, [sp, #28]
 8011322:	e774      	b.n	801120e <_vfiprintf_r+0x142>
 8011324:	2301      	movs	r3, #1
 8011326:	e7f2      	b.n	801130e <_vfiprintf_r+0x242>
 8011328:	cf08      	ldmia	r7!, {r3}
 801132a:	9309      	str	r3, [sp, #36]	; 0x24
 801132c:	2b00      	cmp	r3, #0
 801132e:	daf7      	bge.n	8011320 <_vfiprintf_r+0x254>
 8011330:	425b      	negs	r3, r3
 8011332:	9309      	str	r3, [sp, #36]	; 0x24
 8011334:	2304      	movs	r3, #4
 8011336:	e7ea      	b.n	801130e <_vfiprintf_r+0x242>
 8011338:	222b      	movs	r2, #43	; 0x2b
 801133a:	ab12      	add	r3, sp, #72	; 0x48
 801133c:	70da      	strb	r2, [r3, #3]
 801133e:	e7ef      	b.n	8011320 <_vfiprintf_r+0x254>
 8011340:	9b07      	ldr	r3, [sp, #28]
 8011342:	1c5a      	adds	r2, r3, #1
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	2b2a      	cmp	r3, #42	; 0x2a
 8011348:	d00f      	beq.n	801136a <_vfiprintf_r+0x29e>
 801134a:	2100      	movs	r1, #0
 801134c:	9105      	str	r1, [sp, #20]
 801134e:	0019      	movs	r1, r3
 8011350:	3930      	subs	r1, #48	; 0x30
 8011352:	9207      	str	r2, [sp, #28]
 8011354:	2909      	cmp	r1, #9
 8011356:	d900      	bls.n	801135a <_vfiprintf_r+0x28e>
 8011358:	e75c      	b.n	8011214 <_vfiprintf_r+0x148>
 801135a:	200a      	movs	r0, #10
 801135c:	9b05      	ldr	r3, [sp, #20]
 801135e:	4343      	muls	r3, r0
 8011360:	185b      	adds	r3, r3, r1
 8011362:	9305      	str	r3, [sp, #20]
 8011364:	7813      	ldrb	r3, [r2, #0]
 8011366:	3201      	adds	r2, #1
 8011368:	e7f1      	b.n	801134e <_vfiprintf_r+0x282>
 801136a:	cf08      	ldmia	r7!, {r3}
 801136c:	9305      	str	r3, [sp, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	da02      	bge.n	8011378 <_vfiprintf_r+0x2ac>
 8011372:	2301      	movs	r3, #1
 8011374:	425b      	negs	r3, r3
 8011376:	9305      	str	r3, [sp, #20]
 8011378:	9207      	str	r2, [sp, #28]
 801137a:	e7d1      	b.n	8011320 <_vfiprintf_r+0x254>
 801137c:	2380      	movs	r3, #128	; 0x80
 801137e:	e7c6      	b.n	801130e <_vfiprintf_r+0x242>
 8011380:	2100      	movs	r1, #0
 8011382:	9a07      	ldr	r2, [sp, #28]
 8011384:	9109      	str	r1, [sp, #36]	; 0x24
 8011386:	200a      	movs	r0, #10
 8011388:	9909      	ldr	r1, [sp, #36]	; 0x24
 801138a:	3b30      	subs	r3, #48	; 0x30
 801138c:	4341      	muls	r1, r0
 801138e:	185b      	adds	r3, r3, r1
 8011390:	9309      	str	r3, [sp, #36]	; 0x24
 8011392:	0013      	movs	r3, r2
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	3201      	adds	r2, #1
 8011398:	0019      	movs	r1, r3
 801139a:	3930      	subs	r1, #48	; 0x30
 801139c:	9207      	str	r2, [sp, #28]
 801139e:	2909      	cmp	r1, #9
 80113a0:	d9f1      	bls.n	8011386 <_vfiprintf_r+0x2ba>
 80113a2:	e737      	b.n	8011214 <_vfiprintf_r+0x148>
 80113a4:	ffffdfff 	.word	0xffffdfff
 80113a8:	9b07      	ldr	r3, [sp, #28]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	2b68      	cmp	r3, #104	; 0x68
 80113ae:	d105      	bne.n	80113bc <_vfiprintf_r+0x2f0>
 80113b0:	9b07      	ldr	r3, [sp, #28]
 80113b2:	3301      	adds	r3, #1
 80113b4:	9307      	str	r3, [sp, #28]
 80113b6:	2380      	movs	r3, #128	; 0x80
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	e7a8      	b.n	801130e <_vfiprintf_r+0x242>
 80113bc:	2340      	movs	r3, #64	; 0x40
 80113be:	e7a6      	b.n	801130e <_vfiprintf_r+0x242>
 80113c0:	9b07      	ldr	r3, [sp, #28]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	2b6c      	cmp	r3, #108	; 0x6c
 80113c6:	d104      	bne.n	80113d2 <_vfiprintf_r+0x306>
 80113c8:	9b07      	ldr	r3, [sp, #28]
 80113ca:	3301      	adds	r3, #1
 80113cc:	9307      	str	r3, [sp, #28]
 80113ce:	2320      	movs	r3, #32
 80113d0:	e79d      	b.n	801130e <_vfiprintf_r+0x242>
 80113d2:	2310      	movs	r3, #16
 80113d4:	e79b      	b.n	801130e <_vfiprintf_r+0x242>
 80113d6:	003a      	movs	r2, r7
 80113d8:	ca08      	ldmia	r2!, {r3}
 80113da:	ae27      	add	r6, sp, #156	; 0x9c
 80113dc:	7033      	strb	r3, [r6, #0]
 80113de:	2300      	movs	r3, #0
 80113e0:	9204      	str	r2, [sp, #16]
 80113e2:	aa12      	add	r2, sp, #72	; 0x48
 80113e4:	70d3      	strb	r3, [r2, #3]
 80113e6:	2201      	movs	r2, #1
 80113e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80113ea:	9205      	str	r2, [sp, #20]
 80113ec:	e0b0      	b.n	8011550 <_vfiprintf_r+0x484>
 80113ee:	2310      	movs	r3, #16
 80113f0:	431c      	orrs	r4, r3
 80113f2:	06a3      	lsls	r3, r4, #26
 80113f4:	d52a      	bpl.n	801144c <_vfiprintf_r+0x380>
 80113f6:	2307      	movs	r3, #7
 80113f8:	3707      	adds	r7, #7
 80113fa:	439f      	bics	r7, r3
 80113fc:	0039      	movs	r1, r7
 80113fe:	c90c      	ldmia	r1!, {r2, r3}
 8011400:	9200      	str	r2, [sp, #0]
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	9104      	str	r1, [sp, #16]
 8011406:	9a01      	ldr	r2, [sp, #4]
 8011408:	2301      	movs	r3, #1
 801140a:	2a00      	cmp	r2, #0
 801140c:	da09      	bge.n	8011422 <_vfiprintf_r+0x356>
 801140e:	9e00      	ldr	r6, [sp, #0]
 8011410:	9f01      	ldr	r7, [sp, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	4271      	negs	r1, r6
 8011416:	41ba      	sbcs	r2, r7
 8011418:	9100      	str	r1, [sp, #0]
 801141a:	9201      	str	r2, [sp, #4]
 801141c:	212d      	movs	r1, #45	; 0x2d
 801141e:	aa12      	add	r2, sp, #72	; 0x48
 8011420:	70d1      	strb	r1, [r2, #3]
 8011422:	9901      	ldr	r1, [sp, #4]
 8011424:	9a00      	ldr	r2, [sp, #0]
 8011426:	430a      	orrs	r2, r1
 8011428:	9905      	ldr	r1, [sp, #20]
 801142a:	3101      	adds	r1, #1
 801142c:	d100      	bne.n	8011430 <_vfiprintf_r+0x364>
 801142e:	e2e9      	b.n	8011a04 <_vfiprintf_r+0x938>
 8011430:	2180      	movs	r1, #128	; 0x80
 8011432:	0027      	movs	r7, r4
 8011434:	438f      	bics	r7, r1
 8011436:	2a00      	cmp	r2, #0
 8011438:	d000      	beq.n	801143c <_vfiprintf_r+0x370>
 801143a:	e2e7      	b.n	8011a0c <_vfiprintf_r+0x940>
 801143c:	9a05      	ldr	r2, [sp, #20]
 801143e:	2a00      	cmp	r2, #0
 8011440:	d100      	bne.n	8011444 <_vfiprintf_r+0x378>
 8011442:	e243      	b.n	80118cc <_vfiprintf_r+0x800>
 8011444:	2b01      	cmp	r3, #1
 8011446:	d000      	beq.n	801144a <_vfiprintf_r+0x37e>
 8011448:	e2e3      	b.n	8011a12 <_vfiprintf_r+0x946>
 801144a:	e1e7      	b.n	801181c <_vfiprintf_r+0x750>
 801144c:	003a      	movs	r2, r7
 801144e:	ca08      	ldmia	r2!, {r3}
 8011450:	9204      	str	r2, [sp, #16]
 8011452:	06e2      	lsls	r2, r4, #27
 8011454:	d503      	bpl.n	801145e <_vfiprintf_r+0x392>
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	17db      	asrs	r3, r3, #31
 801145a:	9301      	str	r3, [sp, #4]
 801145c:	e7d3      	b.n	8011406 <_vfiprintf_r+0x33a>
 801145e:	0662      	lsls	r2, r4, #25
 8011460:	d501      	bpl.n	8011466 <_vfiprintf_r+0x39a>
 8011462:	b21b      	sxth	r3, r3
 8011464:	e7f7      	b.n	8011456 <_vfiprintf_r+0x38a>
 8011466:	05a2      	lsls	r2, r4, #22
 8011468:	d5f5      	bpl.n	8011456 <_vfiprintf_r+0x38a>
 801146a:	b25b      	sxtb	r3, r3
 801146c:	e7f3      	b.n	8011456 <_vfiprintf_r+0x38a>
 801146e:	1d3b      	adds	r3, r7, #4
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	06a3      	lsls	r3, r4, #26
 8011474:	d506      	bpl.n	8011484 <_vfiprintf_r+0x3b8>
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	9a08      	ldr	r2, [sp, #32]
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	17d2      	asrs	r2, r2, #31
 801147e:	605a      	str	r2, [r3, #4]
 8011480:	9f04      	ldr	r7, [sp, #16]
 8011482:	e694      	b.n	80111ae <_vfiprintf_r+0xe2>
 8011484:	06e3      	lsls	r3, r4, #27
 8011486:	d503      	bpl.n	8011490 <_vfiprintf_r+0x3c4>
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	9a08      	ldr	r2, [sp, #32]
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	e7f7      	b.n	8011480 <_vfiprintf_r+0x3b4>
 8011490:	0663      	lsls	r3, r4, #25
 8011492:	d503      	bpl.n	801149c <_vfiprintf_r+0x3d0>
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	9a08      	ldr	r2, [sp, #32]
 8011498:	801a      	strh	r2, [r3, #0]
 801149a:	e7f1      	b.n	8011480 <_vfiprintf_r+0x3b4>
 801149c:	05a4      	lsls	r4, r4, #22
 801149e:	d5f3      	bpl.n	8011488 <_vfiprintf_r+0x3bc>
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	9a08      	ldr	r2, [sp, #32]
 80114a4:	701a      	strb	r2, [r3, #0]
 80114a6:	e7eb      	b.n	8011480 <_vfiprintf_r+0x3b4>
 80114a8:	2310      	movs	r3, #16
 80114aa:	431c      	orrs	r4, r3
 80114ac:	2320      	movs	r3, #32
 80114ae:	0020      	movs	r0, r4
 80114b0:	4018      	ands	r0, r3
 80114b2:	421c      	tst	r4, r3
 80114b4:	d00d      	beq.n	80114d2 <_vfiprintf_r+0x406>
 80114b6:	3b19      	subs	r3, #25
 80114b8:	3707      	adds	r7, #7
 80114ba:	439f      	bics	r7, r3
 80114bc:	0039      	movs	r1, r7
 80114be:	c90c      	ldmia	r1!, {r2, r3}
 80114c0:	9200      	str	r2, [sp, #0]
 80114c2:	9301      	str	r3, [sp, #4]
 80114c4:	9104      	str	r1, [sp, #16]
 80114c6:	4bcc      	ldr	r3, [pc, #816]	; (80117f8 <_vfiprintf_r+0x72c>)
 80114c8:	401c      	ands	r4, r3
 80114ca:	2300      	movs	r3, #0
 80114cc:	2100      	movs	r1, #0
 80114ce:	aa12      	add	r2, sp, #72	; 0x48
 80114d0:	e7a6      	b.n	8011420 <_vfiprintf_r+0x354>
 80114d2:	003a      	movs	r2, r7
 80114d4:	ca08      	ldmia	r2!, {r3}
 80114d6:	0021      	movs	r1, r4
 80114d8:	9204      	str	r2, [sp, #16]
 80114da:	2210      	movs	r2, #16
 80114dc:	4011      	ands	r1, r2
 80114de:	4214      	tst	r4, r2
 80114e0:	d002      	beq.n	80114e8 <_vfiprintf_r+0x41c>
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	9001      	str	r0, [sp, #4]
 80114e6:	e7ee      	b.n	80114c6 <_vfiprintf_r+0x3fa>
 80114e8:	2240      	movs	r2, #64	; 0x40
 80114ea:	0020      	movs	r0, r4
 80114ec:	4010      	ands	r0, r2
 80114ee:	4214      	tst	r4, r2
 80114f0:	d003      	beq.n	80114fa <_vfiprintf_r+0x42e>
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	9101      	str	r1, [sp, #4]
 80114f8:	e7e5      	b.n	80114c6 <_vfiprintf_r+0x3fa>
 80114fa:	2280      	movs	r2, #128	; 0x80
 80114fc:	0021      	movs	r1, r4
 80114fe:	0092      	lsls	r2, r2, #2
 8011500:	4011      	ands	r1, r2
 8011502:	4214      	tst	r4, r2
 8011504:	d0f6      	beq.n	80114f4 <_vfiprintf_r+0x428>
 8011506:	b2db      	uxtb	r3, r3
 8011508:	e7eb      	b.n	80114e2 <_vfiprintf_r+0x416>
 801150a:	003b      	movs	r3, r7
 801150c:	cb04      	ldmia	r3!, {r2}
 801150e:	49bb      	ldr	r1, [pc, #748]	; (80117fc <_vfiprintf_r+0x730>)
 8011510:	9304      	str	r3, [sp, #16]
 8011512:	2300      	movs	r3, #0
 8011514:	9200      	str	r2, [sp, #0]
 8011516:	aa13      	add	r2, sp, #76	; 0x4c
 8011518:	8011      	strh	r1, [r2, #0]
 801151a:	4ab9      	ldr	r2, [pc, #740]	; (8011800 <_vfiprintf_r+0x734>)
 801151c:	9301      	str	r3, [sp, #4]
 801151e:	3302      	adds	r3, #2
 8011520:	431c      	orrs	r4, r3
 8011522:	920c      	str	r2, [sp, #48]	; 0x30
 8011524:	e7d2      	b.n	80114cc <_vfiprintf_r+0x400>
 8011526:	003b      	movs	r3, r7
 8011528:	2700      	movs	r7, #0
 801152a:	cb40      	ldmia	r3!, {r6}
 801152c:	9304      	str	r3, [sp, #16]
 801152e:	ab12      	add	r3, sp, #72	; 0x48
 8011530:	70df      	strb	r7, [r3, #3]
 8011532:	9b05      	ldr	r3, [sp, #20]
 8011534:	3301      	adds	r3, #1
 8011536:	d100      	bne.n	801153a <_vfiprintf_r+0x46e>
 8011538:	e0ea      	b.n	8011710 <_vfiprintf_r+0x644>
 801153a:	0039      	movs	r1, r7
 801153c:	0030      	movs	r0, r6
 801153e:	9a05      	ldr	r2, [sp, #20]
 8011540:	f7fe f92e 	bl	800f7a0 <memchr>
 8011544:	900b      	str	r0, [sp, #44]	; 0x2c
 8011546:	42b8      	cmp	r0, r7
 8011548:	d002      	beq.n	8011550 <_vfiprintf_r+0x484>
 801154a:	1b83      	subs	r3, r0, r6
 801154c:	9305      	str	r3, [sp, #20]
 801154e:	970b      	str	r7, [sp, #44]	; 0x2c
 8011550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011552:	9a05      	ldr	r2, [sp, #20]
 8011554:	930a      	str	r3, [sp, #40]	; 0x28
 8011556:	4293      	cmp	r3, r2
 8011558:	da00      	bge.n	801155c <_vfiprintf_r+0x490>
 801155a:	920a      	str	r2, [sp, #40]	; 0x28
 801155c:	ab12      	add	r3, sp, #72	; 0x48
 801155e:	3303      	adds	r3, #3
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	1e5a      	subs	r2, r3, #1
 8011564:	4193      	sbcs	r3, r2
 8011566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011568:	18d3      	adds	r3, r2, r3
 801156a:	930a      	str	r3, [sp, #40]	; 0x28
 801156c:	0022      	movs	r2, r4
 801156e:	2302      	movs	r3, #2
 8011570:	401a      	ands	r2, r3
 8011572:	9210      	str	r2, [sp, #64]	; 0x40
 8011574:	421c      	tst	r4, r3
 8011576:	d002      	beq.n	801157e <_vfiprintf_r+0x4b2>
 8011578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801157a:	3302      	adds	r3, #2
 801157c:	930a      	str	r3, [sp, #40]	; 0x28
 801157e:	2384      	movs	r3, #132	; 0x84
 8011580:	0022      	movs	r2, r4
 8011582:	401a      	ands	r2, r3
 8011584:	9211      	str	r2, [sp, #68]	; 0x44
 8011586:	421c      	tst	r4, r3
 8011588:	d11e      	bne.n	80115c8 <_vfiprintf_r+0x4fc>
 801158a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801158c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801158e:	1a9f      	subs	r7, r3, r2
 8011590:	2f00      	cmp	r7, #0
 8011592:	dd19      	ble.n	80115c8 <_vfiprintf_r+0x4fc>
 8011594:	0029      	movs	r1, r5
 8011596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011598:	489a      	ldr	r0, [pc, #616]	; (8011804 <_vfiprintf_r+0x738>)
 801159a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801159c:	3301      	adds	r3, #1
 801159e:	3108      	adds	r1, #8
 80115a0:	6028      	str	r0, [r5, #0]
 80115a2:	2f10      	cmp	r7, #16
 80115a4:	dd00      	ble.n	80115a8 <_vfiprintf_r+0x4dc>
 80115a6:	e1a7      	b.n	80118f8 <_vfiprintf_r+0x82c>
 80115a8:	606f      	str	r7, [r5, #4]
 80115aa:	18bf      	adds	r7, r7, r2
 80115ac:	000d      	movs	r5, r1
 80115ae:	9716      	str	r7, [sp, #88]	; 0x58
 80115b0:	9315      	str	r3, [sp, #84]	; 0x54
 80115b2:	2b07      	cmp	r3, #7
 80115b4:	dd08      	ble.n	80115c8 <_vfiprintf_r+0x4fc>
 80115b6:	9903      	ldr	r1, [sp, #12]
 80115b8:	9806      	ldr	r0, [sp, #24]
 80115ba:	aa14      	add	r2, sp, #80	; 0x50
 80115bc:	f7ff fd51 	bl	8011062 <__sprint_r>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d000      	beq.n	80115c6 <_vfiprintf_r+0x4fa>
 80115c4:	e1eb      	b.n	801199e <_vfiprintf_r+0x8d2>
 80115c6:	ad17      	add	r5, sp, #92	; 0x5c
 80115c8:	a912      	add	r1, sp, #72	; 0x48
 80115ca:	78c8      	ldrb	r0, [r1, #3]
 80115cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80115ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115d0:	3103      	adds	r1, #3
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d012      	beq.n	80115fc <_vfiprintf_r+0x530>
 80115d6:	6029      	str	r1, [r5, #0]
 80115d8:	2101      	movs	r1, #1
 80115da:	3301      	adds	r3, #1
 80115dc:	1852      	adds	r2, r2, r1
 80115de:	6069      	str	r1, [r5, #4]
 80115e0:	9216      	str	r2, [sp, #88]	; 0x58
 80115e2:	9315      	str	r3, [sp, #84]	; 0x54
 80115e4:	3508      	adds	r5, #8
 80115e6:	2b07      	cmp	r3, #7
 80115e8:	dd08      	ble.n	80115fc <_vfiprintf_r+0x530>
 80115ea:	9903      	ldr	r1, [sp, #12]
 80115ec:	9806      	ldr	r0, [sp, #24]
 80115ee:	aa14      	add	r2, sp, #80	; 0x50
 80115f0:	f7ff fd37 	bl	8011062 <__sprint_r>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d000      	beq.n	80115fa <_vfiprintf_r+0x52e>
 80115f8:	e1d1      	b.n	801199e <_vfiprintf_r+0x8d2>
 80115fa:	ad17      	add	r5, sp, #92	; 0x5c
 80115fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80115fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011602:	2900      	cmp	r1, #0
 8011604:	d013      	beq.n	801162e <_vfiprintf_r+0x562>
 8011606:	a913      	add	r1, sp, #76	; 0x4c
 8011608:	6029      	str	r1, [r5, #0]
 801160a:	2102      	movs	r1, #2
 801160c:	3301      	adds	r3, #1
 801160e:	1852      	adds	r2, r2, r1
 8011610:	6069      	str	r1, [r5, #4]
 8011612:	9216      	str	r2, [sp, #88]	; 0x58
 8011614:	9315      	str	r3, [sp, #84]	; 0x54
 8011616:	3508      	adds	r5, #8
 8011618:	2b07      	cmp	r3, #7
 801161a:	dd08      	ble.n	801162e <_vfiprintf_r+0x562>
 801161c:	9903      	ldr	r1, [sp, #12]
 801161e:	9806      	ldr	r0, [sp, #24]
 8011620:	aa14      	add	r2, sp, #80	; 0x50
 8011622:	f7ff fd1e 	bl	8011062 <__sprint_r>
 8011626:	2800      	cmp	r0, #0
 8011628:	d000      	beq.n	801162c <_vfiprintf_r+0x560>
 801162a:	e1b8      	b.n	801199e <_vfiprintf_r+0x8d2>
 801162c:	ad17      	add	r5, sp, #92	; 0x5c
 801162e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011630:	2b80      	cmp	r3, #128	; 0x80
 8011632:	d11e      	bne.n	8011672 <_vfiprintf_r+0x5a6>
 8011634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011638:	1a9f      	subs	r7, r3, r2
 801163a:	2f00      	cmp	r7, #0
 801163c:	dd19      	ble.n	8011672 <_vfiprintf_r+0x5a6>
 801163e:	0029      	movs	r1, r5
 8011640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011642:	4871      	ldr	r0, [pc, #452]	; (8011808 <_vfiprintf_r+0x73c>)
 8011644:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011646:	3301      	adds	r3, #1
 8011648:	3108      	adds	r1, #8
 801164a:	6028      	str	r0, [r5, #0]
 801164c:	2f10      	cmp	r7, #16
 801164e:	dd00      	ble.n	8011652 <_vfiprintf_r+0x586>
 8011650:	e164      	b.n	801191c <_vfiprintf_r+0x850>
 8011652:	606f      	str	r7, [r5, #4]
 8011654:	18bf      	adds	r7, r7, r2
 8011656:	000d      	movs	r5, r1
 8011658:	9716      	str	r7, [sp, #88]	; 0x58
 801165a:	9315      	str	r3, [sp, #84]	; 0x54
 801165c:	2b07      	cmp	r3, #7
 801165e:	dd08      	ble.n	8011672 <_vfiprintf_r+0x5a6>
 8011660:	9903      	ldr	r1, [sp, #12]
 8011662:	9806      	ldr	r0, [sp, #24]
 8011664:	aa14      	add	r2, sp, #80	; 0x50
 8011666:	f7ff fcfc 	bl	8011062 <__sprint_r>
 801166a:	2800      	cmp	r0, #0
 801166c:	d000      	beq.n	8011670 <_vfiprintf_r+0x5a4>
 801166e:	e196      	b.n	801199e <_vfiprintf_r+0x8d2>
 8011670:	ad17      	add	r5, sp, #92	; 0x5c
 8011672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011674:	9a05      	ldr	r2, [sp, #20]
 8011676:	1a9f      	subs	r7, r3, r2
 8011678:	2f00      	cmp	r7, #0
 801167a:	dd19      	ble.n	80116b0 <_vfiprintf_r+0x5e4>
 801167c:	0029      	movs	r1, r5
 801167e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011680:	4861      	ldr	r0, [pc, #388]	; (8011808 <_vfiprintf_r+0x73c>)
 8011682:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011684:	3301      	adds	r3, #1
 8011686:	3108      	adds	r1, #8
 8011688:	6028      	str	r0, [r5, #0]
 801168a:	2f10      	cmp	r7, #16
 801168c:	dd00      	ble.n	8011690 <_vfiprintf_r+0x5c4>
 801168e:	e157      	b.n	8011940 <_vfiprintf_r+0x874>
 8011690:	606f      	str	r7, [r5, #4]
 8011692:	18bf      	adds	r7, r7, r2
 8011694:	000d      	movs	r5, r1
 8011696:	9716      	str	r7, [sp, #88]	; 0x58
 8011698:	9315      	str	r3, [sp, #84]	; 0x54
 801169a:	2b07      	cmp	r3, #7
 801169c:	dd08      	ble.n	80116b0 <_vfiprintf_r+0x5e4>
 801169e:	9903      	ldr	r1, [sp, #12]
 80116a0:	9806      	ldr	r0, [sp, #24]
 80116a2:	aa14      	add	r2, sp, #80	; 0x50
 80116a4:	f7ff fcdd 	bl	8011062 <__sprint_r>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d000      	beq.n	80116ae <_vfiprintf_r+0x5e2>
 80116ac:	e177      	b.n	801199e <_vfiprintf_r+0x8d2>
 80116ae:	ad17      	add	r5, sp, #92	; 0x5c
 80116b0:	9b05      	ldr	r3, [sp, #20]
 80116b2:	9a05      	ldr	r2, [sp, #20]
 80116b4:	606b      	str	r3, [r5, #4]
 80116b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80116b8:	602e      	str	r6, [r5, #0]
 80116ba:	189b      	adds	r3, r3, r2
 80116bc:	9316      	str	r3, [sp, #88]	; 0x58
 80116be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116c0:	3508      	adds	r5, #8
 80116c2:	3301      	adds	r3, #1
 80116c4:	9315      	str	r3, [sp, #84]	; 0x54
 80116c6:	2b07      	cmp	r3, #7
 80116c8:	dd08      	ble.n	80116dc <_vfiprintf_r+0x610>
 80116ca:	9903      	ldr	r1, [sp, #12]
 80116cc:	9806      	ldr	r0, [sp, #24]
 80116ce:	aa14      	add	r2, sp, #80	; 0x50
 80116d0:	f7ff fcc7 	bl	8011062 <__sprint_r>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d000      	beq.n	80116da <_vfiprintf_r+0x60e>
 80116d8:	e161      	b.n	801199e <_vfiprintf_r+0x8d2>
 80116da:	ad17      	add	r5, sp, #92	; 0x5c
 80116dc:	0764      	lsls	r4, r4, #29
 80116de:	d500      	bpl.n	80116e2 <_vfiprintf_r+0x616>
 80116e0:	e140      	b.n	8011964 <_vfiprintf_r+0x898>
 80116e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116e6:	4293      	cmp	r3, r2
 80116e8:	da00      	bge.n	80116ec <_vfiprintf_r+0x620>
 80116ea:	0013      	movs	r3, r2
 80116ec:	9a08      	ldr	r2, [sp, #32]
 80116ee:	18d3      	adds	r3, r2, r3
 80116f0:	9308      	str	r3, [sp, #32]
 80116f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d007      	beq.n	8011708 <_vfiprintf_r+0x63c>
 80116f8:	9903      	ldr	r1, [sp, #12]
 80116fa:	9806      	ldr	r0, [sp, #24]
 80116fc:	aa14      	add	r2, sp, #80	; 0x50
 80116fe:	f7ff fcb0 	bl	8011062 <__sprint_r>
 8011702:	2800      	cmp	r0, #0
 8011704:	d000      	beq.n	8011708 <_vfiprintf_r+0x63c>
 8011706:	e14a      	b.n	801199e <_vfiprintf_r+0x8d2>
 8011708:	2300      	movs	r3, #0
 801170a:	ad17      	add	r5, sp, #92	; 0x5c
 801170c:	9315      	str	r3, [sp, #84]	; 0x54
 801170e:	e6b7      	b.n	8011480 <_vfiprintf_r+0x3b4>
 8011710:	0030      	movs	r0, r6
 8011712:	f7ee fcf7 	bl	8000104 <strlen>
 8011716:	9005      	str	r0, [sp, #20]
 8011718:	e719      	b.n	801154e <_vfiprintf_r+0x482>
 801171a:	2310      	movs	r3, #16
 801171c:	431c      	orrs	r4, r3
 801171e:	2320      	movs	r3, #32
 8011720:	0020      	movs	r0, r4
 8011722:	4018      	ands	r0, r3
 8011724:	421c      	tst	r4, r3
 8011726:	d009      	beq.n	801173c <_vfiprintf_r+0x670>
 8011728:	3b19      	subs	r3, #25
 801172a:	3707      	adds	r7, #7
 801172c:	439f      	bics	r7, r3
 801172e:	0039      	movs	r1, r7
 8011730:	c90c      	ldmia	r1!, {r2, r3}
 8011732:	9200      	str	r2, [sp, #0]
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	9104      	str	r1, [sp, #16]
 8011738:	2301      	movs	r3, #1
 801173a:	e6c7      	b.n	80114cc <_vfiprintf_r+0x400>
 801173c:	003b      	movs	r3, r7
 801173e:	cb04      	ldmia	r3!, {r2}
 8011740:	0021      	movs	r1, r4
 8011742:	9304      	str	r3, [sp, #16]
 8011744:	2310      	movs	r3, #16
 8011746:	4019      	ands	r1, r3
 8011748:	421c      	tst	r4, r3
 801174a:	d003      	beq.n	8011754 <_vfiprintf_r+0x688>
 801174c:	9200      	str	r2, [sp, #0]
 801174e:	9001      	str	r0, [sp, #4]
 8011750:	3b0f      	subs	r3, #15
 8011752:	e6bb      	b.n	80114cc <_vfiprintf_r+0x400>
 8011754:	2340      	movs	r3, #64	; 0x40
 8011756:	0020      	movs	r0, r4
 8011758:	4018      	ands	r0, r3
 801175a:	421c      	tst	r4, r3
 801175c:	d003      	beq.n	8011766 <_vfiprintf_r+0x69a>
 801175e:	b293      	uxth	r3, r2
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	9101      	str	r1, [sp, #4]
 8011764:	e7e8      	b.n	8011738 <_vfiprintf_r+0x66c>
 8011766:	2380      	movs	r3, #128	; 0x80
 8011768:	0021      	movs	r1, r4
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4019      	ands	r1, r3
 801176e:	421c      	tst	r4, r3
 8011770:	d003      	beq.n	801177a <_vfiprintf_r+0x6ae>
 8011772:	b2d3      	uxtb	r3, r2
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	9001      	str	r0, [sp, #4]
 8011778:	e7de      	b.n	8011738 <_vfiprintf_r+0x66c>
 801177a:	9200      	str	r2, [sp, #0]
 801177c:	e7f1      	b.n	8011762 <_vfiprintf_r+0x696>
 801177e:	4a23      	ldr	r2, [pc, #140]	; (801180c <_vfiprintf_r+0x740>)
 8011780:	0020      	movs	r0, r4
 8011782:	920c      	str	r2, [sp, #48]	; 0x30
 8011784:	2220      	movs	r2, #32
 8011786:	4010      	ands	r0, r2
 8011788:	4214      	tst	r4, r2
 801178a:	d019      	beq.n	80117c0 <_vfiprintf_r+0x6f4>
 801178c:	3a19      	subs	r2, #25
 801178e:	3707      	adds	r7, #7
 8011790:	4397      	bics	r7, r2
 8011792:	0038      	movs	r0, r7
 8011794:	c806      	ldmia	r0!, {r1, r2}
 8011796:	9100      	str	r1, [sp, #0]
 8011798:	9201      	str	r2, [sp, #4]
 801179a:	9004      	str	r0, [sp, #16]
 801179c:	07e2      	lsls	r2, r4, #31
 801179e:	d509      	bpl.n	80117b4 <_vfiprintf_r+0x6e8>
 80117a0:	9a00      	ldr	r2, [sp, #0]
 80117a2:	9901      	ldr	r1, [sp, #4]
 80117a4:	430a      	orrs	r2, r1
 80117a6:	d005      	beq.n	80117b4 <_vfiprintf_r+0x6e8>
 80117a8:	aa13      	add	r2, sp, #76	; 0x4c
 80117aa:	2130      	movs	r1, #48	; 0x30
 80117ac:	7053      	strb	r3, [r2, #1]
 80117ae:	2302      	movs	r3, #2
 80117b0:	7011      	strb	r1, [r2, #0]
 80117b2:	431c      	orrs	r4, r3
 80117b4:	4b10      	ldr	r3, [pc, #64]	; (80117f8 <_vfiprintf_r+0x72c>)
 80117b6:	401c      	ands	r4, r3
 80117b8:	2302      	movs	r3, #2
 80117ba:	e687      	b.n	80114cc <_vfiprintf_r+0x400>
 80117bc:	4a10      	ldr	r2, [pc, #64]	; (8011800 <_vfiprintf_r+0x734>)
 80117be:	e7df      	b.n	8011780 <_vfiprintf_r+0x6b4>
 80117c0:	0039      	movs	r1, r7
 80117c2:	c904      	ldmia	r1!, {r2}
 80117c4:	0026      	movs	r6, r4
 80117c6:	9104      	str	r1, [sp, #16]
 80117c8:	2110      	movs	r1, #16
 80117ca:	400e      	ands	r6, r1
 80117cc:	420c      	tst	r4, r1
 80117ce:	d002      	beq.n	80117d6 <_vfiprintf_r+0x70a>
 80117d0:	9200      	str	r2, [sp, #0]
 80117d2:	9001      	str	r0, [sp, #4]
 80117d4:	e7e2      	b.n	801179c <_vfiprintf_r+0x6d0>
 80117d6:	2140      	movs	r1, #64	; 0x40
 80117d8:	0020      	movs	r0, r4
 80117da:	4008      	ands	r0, r1
 80117dc:	420c      	tst	r4, r1
 80117de:	d003      	beq.n	80117e8 <_vfiprintf_r+0x71c>
 80117e0:	b292      	uxth	r2, r2
 80117e2:	9200      	str	r2, [sp, #0]
 80117e4:	9601      	str	r6, [sp, #4]
 80117e6:	e7d9      	b.n	801179c <_vfiprintf_r+0x6d0>
 80117e8:	2180      	movs	r1, #128	; 0x80
 80117ea:	0026      	movs	r6, r4
 80117ec:	0089      	lsls	r1, r1, #2
 80117ee:	400e      	ands	r6, r1
 80117f0:	420c      	tst	r4, r1
 80117f2:	d0f6      	beq.n	80117e2 <_vfiprintf_r+0x716>
 80117f4:	b2d2      	uxtb	r2, r2
 80117f6:	e7eb      	b.n	80117d0 <_vfiprintf_r+0x704>
 80117f8:	fffffbff 	.word	0xfffffbff
 80117fc:	00007830 	.word	0x00007830
 8011800:	08014194 	.word	0x08014194
 8011804:	080142a1 	.word	0x080142a1
 8011808:	080142b1 	.word	0x080142b1
 801180c:	080141a5 	.word	0x080141a5
 8011810:	9b01      	ldr	r3, [sp, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d109      	bne.n	801182a <_vfiprintf_r+0x75e>
 8011816:	9b00      	ldr	r3, [sp, #0]
 8011818:	2b09      	cmp	r3, #9
 801181a:	d806      	bhi.n	801182a <_vfiprintf_r+0x75e>
 801181c:	26b7      	movs	r6, #183	; 0xb7
 801181e:	ab12      	add	r3, sp, #72	; 0x48
 8011820:	18f6      	adds	r6, r6, r3
 8011822:	9b00      	ldr	r3, [sp, #0]
 8011824:	3330      	adds	r3, #48	; 0x30
 8011826:	7033      	strb	r3, [r6, #0]
 8011828:	e115      	b.n	8011a56 <_vfiprintf_r+0x98a>
 801182a:	2380      	movs	r3, #128	; 0x80
 801182c:	2400      	movs	r4, #0
 801182e:	00db      	lsls	r3, r3, #3
 8011830:	403b      	ands	r3, r7
 8011832:	ae40      	add	r6, sp, #256	; 0x100
 8011834:	930a      	str	r3, [sp, #40]	; 0x28
 8011836:	220a      	movs	r2, #10
 8011838:	9800      	ldr	r0, [sp, #0]
 801183a:	9901      	ldr	r1, [sp, #4]
 801183c:	2300      	movs	r3, #0
 801183e:	f7ee fe31 	bl	80004a4 <__aeabi_uldivmod>
 8011842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011844:	3e01      	subs	r6, #1
 8011846:	3230      	adds	r2, #48	; 0x30
 8011848:	900b      	str	r0, [sp, #44]	; 0x2c
 801184a:	9110      	str	r1, [sp, #64]	; 0x40
 801184c:	7032      	strb	r2, [r6, #0]
 801184e:	3401      	adds	r4, #1
 8011850:	2b00      	cmp	r3, #0
 8011852:	d01a      	beq.n	801188a <_vfiprintf_r+0x7be>
 8011854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	42a3      	cmp	r3, r4
 801185a:	d116      	bne.n	801188a <_vfiprintf_r+0x7be>
 801185c:	2cff      	cmp	r4, #255	; 0xff
 801185e:	d014      	beq.n	801188a <_vfiprintf_r+0x7be>
 8011860:	9b01      	ldr	r3, [sp, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d102      	bne.n	801186c <_vfiprintf_r+0x7a0>
 8011866:	9b00      	ldr	r3, [sp, #0]
 8011868:	2b09      	cmp	r3, #9
 801186a:	d90e      	bls.n	801188a <_vfiprintf_r+0x7be>
 801186c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801186e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011870:	1af6      	subs	r6, r6, r3
 8011872:	001a      	movs	r2, r3
 8011874:	0030      	movs	r0, r6
 8011876:	f7f9 ffe6 	bl	800b846 <strncpy>
 801187a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801187c:	2400      	movs	r4, #0
 801187e:	785b      	ldrb	r3, [r3, #1]
 8011880:	1e5a      	subs	r2, r3, #1
 8011882:	4193      	sbcs	r3, r2
 8011884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011886:	18d3      	adds	r3, r2, r3
 8011888:	930d      	str	r3, [sp, #52]	; 0x34
 801188a:	9b01      	ldr	r3, [sp, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d103      	bne.n	8011898 <_vfiprintf_r+0x7cc>
 8011890:	9b00      	ldr	r3, [sp, #0]
 8011892:	2b09      	cmp	r3, #9
 8011894:	d800      	bhi.n	8011898 <_vfiprintf_r+0x7cc>
 8011896:	e0de      	b.n	8011a56 <_vfiprintf_r+0x98a>
 8011898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801189e:	9301      	str	r3, [sp, #4]
 80118a0:	e7c9      	b.n	8011836 <_vfiprintf_r+0x76a>
 80118a2:	200f      	movs	r0, #15
 80118a4:	9b00      	ldr	r3, [sp, #0]
 80118a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118a8:	4003      	ands	r3, r0
 80118aa:	5cd3      	ldrb	r3, [r2, r3]
 80118ac:	3e01      	subs	r6, #1
 80118ae:	7033      	strb	r3, [r6, #0]
 80118b0:	9b01      	ldr	r3, [sp, #4]
 80118b2:	0719      	lsls	r1, r3, #28
 80118b4:	9b00      	ldr	r3, [sp, #0]
 80118b6:	091a      	lsrs	r2, r3, #4
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	4311      	orrs	r1, r2
 80118bc:	091b      	lsrs	r3, r3, #4
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	000b      	movs	r3, r1
 80118c2:	9a01      	ldr	r2, [sp, #4]
 80118c4:	9100      	str	r1, [sp, #0]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	d1ec      	bne.n	80118a4 <_vfiprintf_r+0x7d8>
 80118ca:	e0c4      	b.n	8011a56 <_vfiprintf_r+0x98a>
 80118cc:	ae40      	add	r6, sp, #256	; 0x100
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d000      	beq.n	80118d4 <_vfiprintf_r+0x808>
 80118d2:	e0c0      	b.n	8011a56 <_vfiprintf_r+0x98a>
 80118d4:	07e4      	lsls	r4, r4, #31
 80118d6:	d400      	bmi.n	80118da <_vfiprintf_r+0x80e>
 80118d8:	e0bd      	b.n	8011a56 <_vfiprintf_r+0x98a>
 80118da:	26b7      	movs	r6, #183	; 0xb7
 80118dc:	ab12      	add	r3, sp, #72	; 0x48
 80118de:	18f6      	adds	r6, r6, r3
 80118e0:	2330      	movs	r3, #48	; 0x30
 80118e2:	e7a0      	b.n	8011826 <_vfiprintf_r+0x75a>
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d100      	bne.n	80118ea <_vfiprintf_r+0x81e>
 80118e8:	e07e      	b.n	80119e8 <_vfiprintf_r+0x91c>
 80118ea:	ae27      	add	r6, sp, #156	; 0x9c
 80118ec:	7033      	strb	r3, [r6, #0]
 80118ee:	2300      	movs	r3, #0
 80118f0:	aa12      	add	r2, sp, #72	; 0x48
 80118f2:	70d3      	strb	r3, [r2, #3]
 80118f4:	9704      	str	r7, [sp, #16]
 80118f6:	e576      	b.n	80113e6 <_vfiprintf_r+0x31a>
 80118f8:	2010      	movs	r0, #16
 80118fa:	1812      	adds	r2, r2, r0
 80118fc:	6068      	str	r0, [r5, #4]
 80118fe:	9216      	str	r2, [sp, #88]	; 0x58
 8011900:	9315      	str	r3, [sp, #84]	; 0x54
 8011902:	2b07      	cmp	r3, #7
 8011904:	dd07      	ble.n	8011916 <_vfiprintf_r+0x84a>
 8011906:	9903      	ldr	r1, [sp, #12]
 8011908:	9806      	ldr	r0, [sp, #24]
 801190a:	aa14      	add	r2, sp, #80	; 0x50
 801190c:	f7ff fba9 	bl	8011062 <__sprint_r>
 8011910:	2800      	cmp	r0, #0
 8011912:	d144      	bne.n	801199e <_vfiprintf_r+0x8d2>
 8011914:	a917      	add	r1, sp, #92	; 0x5c
 8011916:	000d      	movs	r5, r1
 8011918:	3f10      	subs	r7, #16
 801191a:	e63b      	b.n	8011594 <_vfiprintf_r+0x4c8>
 801191c:	2010      	movs	r0, #16
 801191e:	1812      	adds	r2, r2, r0
 8011920:	6068      	str	r0, [r5, #4]
 8011922:	9216      	str	r2, [sp, #88]	; 0x58
 8011924:	9315      	str	r3, [sp, #84]	; 0x54
 8011926:	2b07      	cmp	r3, #7
 8011928:	dd07      	ble.n	801193a <_vfiprintf_r+0x86e>
 801192a:	9903      	ldr	r1, [sp, #12]
 801192c:	9806      	ldr	r0, [sp, #24]
 801192e:	aa14      	add	r2, sp, #80	; 0x50
 8011930:	f7ff fb97 	bl	8011062 <__sprint_r>
 8011934:	2800      	cmp	r0, #0
 8011936:	d132      	bne.n	801199e <_vfiprintf_r+0x8d2>
 8011938:	a917      	add	r1, sp, #92	; 0x5c
 801193a:	000d      	movs	r5, r1
 801193c:	3f10      	subs	r7, #16
 801193e:	e67e      	b.n	801163e <_vfiprintf_r+0x572>
 8011940:	2010      	movs	r0, #16
 8011942:	1812      	adds	r2, r2, r0
 8011944:	6068      	str	r0, [r5, #4]
 8011946:	9216      	str	r2, [sp, #88]	; 0x58
 8011948:	9315      	str	r3, [sp, #84]	; 0x54
 801194a:	2b07      	cmp	r3, #7
 801194c:	dd07      	ble.n	801195e <_vfiprintf_r+0x892>
 801194e:	9903      	ldr	r1, [sp, #12]
 8011950:	9806      	ldr	r0, [sp, #24]
 8011952:	aa14      	add	r2, sp, #80	; 0x50
 8011954:	f7ff fb85 	bl	8011062 <__sprint_r>
 8011958:	2800      	cmp	r0, #0
 801195a:	d120      	bne.n	801199e <_vfiprintf_r+0x8d2>
 801195c:	a917      	add	r1, sp, #92	; 0x5c
 801195e:	000d      	movs	r5, r1
 8011960:	3f10      	subs	r7, #16
 8011962:	e68b      	b.n	801167c <_vfiprintf_r+0x5b0>
 8011964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011968:	2610      	movs	r6, #16
 801196a:	1a9c      	subs	r4, r3, r2
 801196c:	2c00      	cmp	r4, #0
 801196e:	dc00      	bgt.n	8011972 <_vfiprintf_r+0x8a6>
 8011970:	e6b7      	b.n	80116e2 <_vfiprintf_r+0x616>
 8011972:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011974:	4a3b      	ldr	r2, [pc, #236]	; (8011a64 <_vfiprintf_r+0x998>)
 8011976:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011978:	3101      	adds	r1, #1
 801197a:	602a      	str	r2, [r5, #0]
 801197c:	2c10      	cmp	r4, #16
 801197e:	dc22      	bgt.n	80119c6 <_vfiprintf_r+0x8fa>
 8011980:	606c      	str	r4, [r5, #4]
 8011982:	18e4      	adds	r4, r4, r3
 8011984:	9416      	str	r4, [sp, #88]	; 0x58
 8011986:	9115      	str	r1, [sp, #84]	; 0x54
 8011988:	2907      	cmp	r1, #7
 801198a:	dc00      	bgt.n	801198e <_vfiprintf_r+0x8c2>
 801198c:	e6a9      	b.n	80116e2 <_vfiprintf_r+0x616>
 801198e:	9903      	ldr	r1, [sp, #12]
 8011990:	9806      	ldr	r0, [sp, #24]
 8011992:	aa14      	add	r2, sp, #80	; 0x50
 8011994:	f7ff fb65 	bl	8011062 <__sprint_r>
 8011998:	2800      	cmp	r0, #0
 801199a:	d100      	bne.n	801199e <_vfiprintf_r+0x8d2>
 801199c:	e6a1      	b.n	80116e2 <_vfiprintf_r+0x616>
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119a2:	07db      	lsls	r3, r3, #31
 80119a4:	d407      	bmi.n	80119b6 <_vfiprintf_r+0x8ea>
 80119a6:	9b03      	ldr	r3, [sp, #12]
 80119a8:	899b      	ldrh	r3, [r3, #12]
 80119aa:	059b      	lsls	r3, r3, #22
 80119ac:	d403      	bmi.n	80119b6 <_vfiprintf_r+0x8ea>
 80119ae:	9b03      	ldr	r3, [sp, #12]
 80119b0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80119b2:	f7fa f808 	bl	800b9c6 <__retarget_lock_release_recursive>
 80119b6:	9b03      	ldr	r3, [sp, #12]
 80119b8:	899b      	ldrh	r3, [r3, #12]
 80119ba:	065b      	lsls	r3, r3, #25
 80119bc:	d401      	bmi.n	80119c2 <_vfiprintf_r+0x8f6>
 80119be:	f7ff fbc3 	bl	8011148 <_vfiprintf_r+0x7c>
 80119c2:	f7ff fbbe 	bl	8011142 <_vfiprintf_r+0x76>
 80119c6:	3310      	adds	r3, #16
 80119c8:	606e      	str	r6, [r5, #4]
 80119ca:	9316      	str	r3, [sp, #88]	; 0x58
 80119cc:	9115      	str	r1, [sp, #84]	; 0x54
 80119ce:	3508      	adds	r5, #8
 80119d0:	2907      	cmp	r1, #7
 80119d2:	dd07      	ble.n	80119e4 <_vfiprintf_r+0x918>
 80119d4:	9903      	ldr	r1, [sp, #12]
 80119d6:	9806      	ldr	r0, [sp, #24]
 80119d8:	aa14      	add	r2, sp, #80	; 0x50
 80119da:	f7ff fb42 	bl	8011062 <__sprint_r>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d1dd      	bne.n	801199e <_vfiprintf_r+0x8d2>
 80119e2:	ad17      	add	r5, sp, #92	; 0x5c
 80119e4:	3c10      	subs	r4, #16
 80119e6:	e7c4      	b.n	8011972 <_vfiprintf_r+0x8a6>
 80119e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d102      	bne.n	80119f4 <_vfiprintf_r+0x928>
 80119ee:	2300      	movs	r3, #0
 80119f0:	9315      	str	r3, [sp, #84]	; 0x54
 80119f2:	e7d4      	b.n	801199e <_vfiprintf_r+0x8d2>
 80119f4:	9903      	ldr	r1, [sp, #12]
 80119f6:	9806      	ldr	r0, [sp, #24]
 80119f8:	aa14      	add	r2, sp, #80	; 0x50
 80119fa:	f7ff fb32 	bl	8011062 <__sprint_r>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d0f5      	beq.n	80119ee <_vfiprintf_r+0x922>
 8011a02:	e7cc      	b.n	801199e <_vfiprintf_r+0x8d2>
 8011a04:	0027      	movs	r7, r4
 8011a06:	2a00      	cmp	r2, #0
 8011a08:	d100      	bne.n	8011a0c <_vfiprintf_r+0x940>
 8011a0a:	e51b      	b.n	8011444 <_vfiprintf_r+0x378>
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d100      	bne.n	8011a12 <_vfiprintf_r+0x946>
 8011a10:	e6fe      	b.n	8011810 <_vfiprintf_r+0x744>
 8011a12:	ae40      	add	r6, sp, #256	; 0x100
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d100      	bne.n	8011a1a <_vfiprintf_r+0x94e>
 8011a18:	e743      	b.n	80118a2 <_vfiprintf_r+0x7d6>
 8011a1a:	2307      	movs	r3, #7
 8011a1c:	469c      	mov	ip, r3
 8011a1e:	4663      	mov	r3, ip
 8011a20:	9900      	ldr	r1, [sp, #0]
 8011a22:	0032      	movs	r2, r6
 8011a24:	400b      	ands	r3, r1
 8011a26:	9901      	ldr	r1, [sp, #4]
 8011a28:	3e01      	subs	r6, #1
 8011a2a:	074c      	lsls	r4, r1, #29
 8011a2c:	9900      	ldr	r1, [sp, #0]
 8011a2e:	3330      	adds	r3, #48	; 0x30
 8011a30:	08c8      	lsrs	r0, r1, #3
 8011a32:	9901      	ldr	r1, [sp, #4]
 8011a34:	4304      	orrs	r4, r0
 8011a36:	08c9      	lsrs	r1, r1, #3
 8011a38:	9101      	str	r1, [sp, #4]
 8011a3a:	0021      	movs	r1, r4
 8011a3c:	9801      	ldr	r0, [sp, #4]
 8011a3e:	7033      	strb	r3, [r6, #0]
 8011a40:	9400      	str	r4, [sp, #0]
 8011a42:	4301      	orrs	r1, r0
 8011a44:	d1eb      	bne.n	8011a1e <_vfiprintf_r+0x952>
 8011a46:	07f9      	lsls	r1, r7, #31
 8011a48:	d505      	bpl.n	8011a56 <_vfiprintf_r+0x98a>
 8011a4a:	2b30      	cmp	r3, #48	; 0x30
 8011a4c:	d003      	beq.n	8011a56 <_vfiprintf_r+0x98a>
 8011a4e:	2330      	movs	r3, #48	; 0x30
 8011a50:	3e01      	subs	r6, #1
 8011a52:	7033      	strb	r3, [r6, #0]
 8011a54:	1e96      	subs	r6, r2, #2
 8011a56:	9b05      	ldr	r3, [sp, #20]
 8011a58:	003c      	movs	r4, r7
 8011a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a5c:	ab40      	add	r3, sp, #256	; 0x100
 8011a5e:	1b9b      	subs	r3, r3, r6
 8011a60:	9305      	str	r3, [sp, #20]
 8011a62:	e575      	b.n	8011550 <_vfiprintf_r+0x484>
 8011a64:	080142a1 	.word	0x080142a1

08011a68 <__sbprintf>:
 8011a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6a:	0015      	movs	r5, r2
 8011a6c:	2202      	movs	r2, #2
 8011a6e:	4c1e      	ldr	r4, [pc, #120]	; (8011ae8 <__sbprintf+0x80>)
 8011a70:	001f      	movs	r7, r3
 8011a72:	898b      	ldrh	r3, [r1, #12]
 8011a74:	44a5      	add	sp, r4
 8011a76:	4393      	bics	r3, r2
 8011a78:	466a      	mov	r2, sp
 8011a7a:	8193      	strh	r3, [r2, #12]
 8011a7c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011a7e:	0006      	movs	r6, r0
 8011a80:	9319      	str	r3, [sp, #100]	; 0x64
 8011a82:	89cb      	ldrh	r3, [r1, #14]
 8011a84:	a816      	add	r0, sp, #88	; 0x58
 8011a86:	81d3      	strh	r3, [r2, #14]
 8011a88:	69cb      	ldr	r3, [r1, #28]
 8011a8a:	000c      	movs	r4, r1
 8011a8c:	9307      	str	r3, [sp, #28]
 8011a8e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011a90:	9309      	str	r3, [sp, #36]	; 0x24
 8011a92:	ab1a      	add	r3, sp, #104	; 0x68
 8011a94:	9300      	str	r3, [sp, #0]
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	2380      	movs	r3, #128	; 0x80
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	9302      	str	r3, [sp, #8]
 8011a9e:	9305      	str	r3, [sp, #20]
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	9306      	str	r3, [sp, #24]
 8011aa4:	f7f9 ff8c 	bl	800b9c0 <__retarget_lock_init_recursive>
 8011aa8:	002a      	movs	r2, r5
 8011aaa:	003b      	movs	r3, r7
 8011aac:	4669      	mov	r1, sp
 8011aae:	0030      	movs	r0, r6
 8011ab0:	f7ff fb0c 	bl	80110cc <_vfiprintf_r>
 8011ab4:	1e05      	subs	r5, r0, #0
 8011ab6:	db07      	blt.n	8011ac8 <__sbprintf+0x60>
 8011ab8:	4669      	mov	r1, sp
 8011aba:	0030      	movs	r0, r6
 8011abc:	f7fd fdf6 	bl	800f6ac <_fflush_r>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d001      	beq.n	8011ac8 <__sbprintf+0x60>
 8011ac4:	2501      	movs	r5, #1
 8011ac6:	426d      	negs	r5, r5
 8011ac8:	466b      	mov	r3, sp
 8011aca:	899a      	ldrh	r2, [r3, #12]
 8011acc:	2340      	movs	r3, #64	; 0x40
 8011ace:	421a      	tst	r2, r3
 8011ad0:	d002      	beq.n	8011ad8 <__sbprintf+0x70>
 8011ad2:	89a2      	ldrh	r2, [r4, #12]
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	81a3      	strh	r3, [r4, #12]
 8011ad8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011ada:	f7f9 ff72 	bl	800b9c2 <__retarget_lock_close_recursive>
 8011ade:	0028      	movs	r0, r5
 8011ae0:	4b02      	ldr	r3, [pc, #8]	; (8011aec <__sbprintf+0x84>)
 8011ae2:	449d      	add	sp, r3
 8011ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ae6:	46c0      	nop			; (mov r8, r8)
 8011ae8:	fffffb94 	.word	0xfffffb94
 8011aec:	0000046c 	.word	0x0000046c

08011af0 <__sfvwrite_r>:
 8011af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af2:	6893      	ldr	r3, [r2, #8]
 8011af4:	b087      	sub	sp, #28
 8011af6:	000c      	movs	r4, r1
 8011af8:	9002      	str	r0, [sp, #8]
 8011afa:	9204      	str	r2, [sp, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <__sfvwrite_r+0x16>
 8011b00:	2000      	movs	r0, #0
 8011b02:	b007      	add	sp, #28
 8011b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b06:	898b      	ldrh	r3, [r1, #12]
 8011b08:	071b      	lsls	r3, r3, #28
 8011b0a:	d557      	bpl.n	8011bbc <__sfvwrite_r+0xcc>
 8011b0c:	690b      	ldr	r3, [r1, #16]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d054      	beq.n	8011bbc <__sfvwrite_r+0xcc>
 8011b12:	9b04      	ldr	r3, [sp, #16]
 8011b14:	2202      	movs	r2, #2
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	001f      	movs	r7, r3
 8011b1e:	4017      	ands	r7, r2
 8011b20:	4213      	tst	r3, r2
 8011b22:	d171      	bne.n	8011c08 <__sfvwrite_r+0x118>
 8011b24:	2201      	movs	r2, #1
 8011b26:	2101      	movs	r1, #1
 8011b28:	401a      	ands	r2, r3
 8011b2a:	420b      	tst	r3, r1
 8011b2c:	d100      	bne.n	8011b30 <__sfvwrite_r+0x40>
 8011b2e:	e0a5      	b.n	8011c7c <__sfvwrite_r+0x18c>
 8011b30:	0038      	movs	r0, r7
 8011b32:	003e      	movs	r6, r7
 8011b34:	9703      	str	r7, [sp, #12]
 8011b36:	9b03      	ldr	r3, [sp, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d100      	bne.n	8011b3e <__sfvwrite_r+0x4e>
 8011b3c:	e10b      	b.n	8011d56 <__sfvwrite_r+0x266>
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	d10a      	bne.n	8011b58 <__sfvwrite_r+0x68>
 8011b42:	001a      	movs	r2, r3
 8011b44:	210a      	movs	r1, #10
 8011b46:	0030      	movs	r0, r6
 8011b48:	f7fd fe2a 	bl	800f7a0 <memchr>
 8011b4c:	9b03      	ldr	r3, [sp, #12]
 8011b4e:	1c5f      	adds	r7, r3, #1
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d001      	beq.n	8011b58 <__sfvwrite_r+0x68>
 8011b54:	3001      	adds	r0, #1
 8011b56:	1b87      	subs	r7, r0, r6
 8011b58:	9b03      	ldr	r3, [sp, #12]
 8011b5a:	9705      	str	r7, [sp, #20]
 8011b5c:	429f      	cmp	r7, r3
 8011b5e:	d900      	bls.n	8011b62 <__sfvwrite_r+0x72>
 8011b60:	9305      	str	r3, [sp, #20]
 8011b62:	6820      	ldr	r0, [r4, #0]
 8011b64:	6922      	ldr	r2, [r4, #16]
 8011b66:	68a5      	ldr	r5, [r4, #8]
 8011b68:	6963      	ldr	r3, [r4, #20]
 8011b6a:	4290      	cmp	r0, r2
 8011b6c:	d800      	bhi.n	8011b70 <__sfvwrite_r+0x80>
 8011b6e:	e0fb      	b.n	8011d68 <__sfvwrite_r+0x278>
 8011b70:	9a05      	ldr	r2, [sp, #20]
 8011b72:	18ed      	adds	r5, r5, r3
 8011b74:	42aa      	cmp	r2, r5
 8011b76:	dc00      	bgt.n	8011b7a <__sfvwrite_r+0x8a>
 8011b78:	e0f6      	b.n	8011d68 <__sfvwrite_r+0x278>
 8011b7a:	0031      	movs	r1, r6
 8011b7c:	002a      	movs	r2, r5
 8011b7e:	f000 fa1e 	bl	8011fbe <memmove>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	0021      	movs	r1, r4
 8011b86:	195b      	adds	r3, r3, r5
 8011b88:	9802      	ldr	r0, [sp, #8]
 8011b8a:	6023      	str	r3, [r4, #0]
 8011b8c:	f7fd fd8e 	bl	800f6ac <_fflush_r>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d16e      	bne.n	8011c72 <__sfvwrite_r+0x182>
 8011b94:	2001      	movs	r0, #1
 8011b96:	1b7f      	subs	r7, r7, r5
 8011b98:	d105      	bne.n	8011ba6 <__sfvwrite_r+0xb6>
 8011b9a:	0021      	movs	r1, r4
 8011b9c:	9802      	ldr	r0, [sp, #8]
 8011b9e:	f7fd fd85 	bl	800f6ac <_fflush_r>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d165      	bne.n	8011c72 <__sfvwrite_r+0x182>
 8011ba6:	9b03      	ldr	r3, [sp, #12]
 8011ba8:	9a04      	ldr	r2, [sp, #16]
 8011baa:	1b5b      	subs	r3, r3, r5
 8011bac:	9303      	str	r3, [sp, #12]
 8011bae:	9b04      	ldr	r3, [sp, #16]
 8011bb0:	1976      	adds	r6, r6, r5
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	1b5b      	subs	r3, r3, r5
 8011bb6:	6093      	str	r3, [r2, #8]
 8011bb8:	d1bd      	bne.n	8011b36 <__sfvwrite_r+0x46>
 8011bba:	e7a1      	b.n	8011b00 <__sfvwrite_r+0x10>
 8011bbc:	0021      	movs	r1, r4
 8011bbe:	9802      	ldr	r0, [sp, #8]
 8011bc0:	f000 f932 	bl	8011e28 <__swsetup_r>
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	d0a4      	beq.n	8011b12 <__sfvwrite_r+0x22>
 8011bc8:	2001      	movs	r0, #1
 8011bca:	4240      	negs	r0, r0
 8011bcc:	e799      	b.n	8011b02 <__sfvwrite_r+0x12>
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	681e      	ldr	r6, [r3, #0]
 8011bd2:	685d      	ldr	r5, [r3, #4]
 8011bd4:	3308      	adds	r3, #8
 8011bd6:	9301      	str	r3, [sp, #4]
 8011bd8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011bda:	69e1      	ldr	r1, [r4, #28]
 8011bdc:	2d00      	cmp	r5, #0
 8011bde:	d0f6      	beq.n	8011bce <__sfvwrite_r+0xde>
 8011be0:	4a6e      	ldr	r2, [pc, #440]	; (8011d9c <__sfvwrite_r+0x2ac>)
 8011be2:	002b      	movs	r3, r5
 8011be4:	4295      	cmp	r5, r2
 8011be6:	d900      	bls.n	8011bea <__sfvwrite_r+0xfa>
 8011be8:	0013      	movs	r3, r2
 8011bea:	0032      	movs	r2, r6
 8011bec:	9802      	ldr	r0, [sp, #8]
 8011bee:	47b8      	blx	r7
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	dd3e      	ble.n	8011c72 <__sfvwrite_r+0x182>
 8011bf4:	9b04      	ldr	r3, [sp, #16]
 8011bf6:	9a04      	ldr	r2, [sp, #16]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	1836      	adds	r6, r6, r0
 8011bfc:	1a1b      	subs	r3, r3, r0
 8011bfe:	1a2d      	subs	r5, r5, r0
 8011c00:	6093      	str	r3, [r2, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e8      	bne.n	8011bd8 <__sfvwrite_r+0xe8>
 8011c06:	e77b      	b.n	8011b00 <__sfvwrite_r+0x10>
 8011c08:	2600      	movs	r6, #0
 8011c0a:	0035      	movs	r5, r6
 8011c0c:	e7e4      	b.n	8011bd8 <__sfvwrite_r+0xe8>
 8011c0e:	9b01      	ldr	r3, [sp, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	9303      	str	r3, [sp, #12]
 8011c14:	9b01      	ldr	r3, [sp, #4]
 8011c16:	685d      	ldr	r5, [r3, #4]
 8011c18:	3308      	adds	r3, #8
 8011c1a:	9301      	str	r3, [sp, #4]
 8011c1c:	220c      	movs	r2, #12
 8011c1e:	5ea3      	ldrsh	r3, [r4, r2]
 8011c20:	6820      	ldr	r0, [r4, #0]
 8011c22:	68a6      	ldr	r6, [r4, #8]
 8011c24:	2d00      	cmp	r5, #0
 8011c26:	d0f2      	beq.n	8011c0e <__sfvwrite_r+0x11e>
 8011c28:	2180      	movs	r1, #128	; 0x80
 8011c2a:	0089      	lsls	r1, r1, #2
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	420b      	tst	r3, r1
 8011c30:	d062      	beq.n	8011cf8 <__sfvwrite_r+0x208>
 8011c32:	42ae      	cmp	r6, r5
 8011c34:	d837      	bhi.n	8011ca6 <__sfvwrite_r+0x1b6>
 8011c36:	2390      	movs	r3, #144	; 0x90
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	421a      	tst	r2, r3
 8011c3c:	d033      	beq.n	8011ca6 <__sfvwrite_r+0x1b6>
 8011c3e:	6921      	ldr	r1, [r4, #16]
 8011c40:	1a43      	subs	r3, r0, r1
 8011c42:	2003      	movs	r0, #3
 8011c44:	9305      	str	r3, [sp, #20]
 8011c46:	6963      	ldr	r3, [r4, #20]
 8011c48:	4343      	muls	r3, r0
 8011c4a:	0fdf      	lsrs	r7, r3, #31
 8011c4c:	18ff      	adds	r7, r7, r3
 8011c4e:	9b05      	ldr	r3, [sp, #20]
 8011c50:	107f      	asrs	r7, r7, #1
 8011c52:	3301      	adds	r3, #1
 8011c54:	195b      	adds	r3, r3, r5
 8011c56:	42bb      	cmp	r3, r7
 8011c58:	d900      	bls.n	8011c5c <__sfvwrite_r+0x16c>
 8011c5a:	001f      	movs	r7, r3
 8011c5c:	0552      	lsls	r2, r2, #21
 8011c5e:	d53c      	bpl.n	8011cda <__sfvwrite_r+0x1ea>
 8011c60:	0039      	movs	r1, r7
 8011c62:	9802      	ldr	r0, [sp, #8]
 8011c64:	f7f8 fb56 	bl	800a314 <_malloc_r>
 8011c68:	1e06      	subs	r6, r0, #0
 8011c6a:	d10a      	bne.n	8011c82 <__sfvwrite_r+0x192>
 8011c6c:	230c      	movs	r3, #12
 8011c6e:	9a02      	ldr	r2, [sp, #8]
 8011c70:	6013      	str	r3, [r2, #0]
 8011c72:	2340      	movs	r3, #64	; 0x40
 8011c74:	89a2      	ldrh	r2, [r4, #12]
 8011c76:	4313      	orrs	r3, r2
 8011c78:	81a3      	strh	r3, [r4, #12]
 8011c7a:	e7a5      	b.n	8011bc8 <__sfvwrite_r+0xd8>
 8011c7c:	0015      	movs	r5, r2
 8011c7e:	9203      	str	r2, [sp, #12]
 8011c80:	e7cc      	b.n	8011c1c <__sfvwrite_r+0x12c>
 8011c82:	9a05      	ldr	r2, [sp, #20]
 8011c84:	6921      	ldr	r1, [r4, #16]
 8011c86:	f7f9 feaa 	bl	800b9de <memcpy>
 8011c8a:	89a2      	ldrh	r2, [r4, #12]
 8011c8c:	4b44      	ldr	r3, [pc, #272]	; (8011da0 <__sfvwrite_r+0x2b0>)
 8011c8e:	401a      	ands	r2, r3
 8011c90:	2380      	movs	r3, #128	; 0x80
 8011c92:	4313      	orrs	r3, r2
 8011c94:	81a3      	strh	r3, [r4, #12]
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	6126      	str	r6, [r4, #16]
 8011c9a:	18f6      	adds	r6, r6, r3
 8011c9c:	6026      	str	r6, [r4, #0]
 8011c9e:	002e      	movs	r6, r5
 8011ca0:	6167      	str	r7, [r4, #20]
 8011ca2:	1aff      	subs	r7, r7, r3
 8011ca4:	60a7      	str	r7, [r4, #8]
 8011ca6:	002f      	movs	r7, r5
 8011ca8:	42ae      	cmp	r6, r5
 8011caa:	d900      	bls.n	8011cae <__sfvwrite_r+0x1be>
 8011cac:	002e      	movs	r6, r5
 8011cae:	0032      	movs	r2, r6
 8011cb0:	9903      	ldr	r1, [sp, #12]
 8011cb2:	6820      	ldr	r0, [r4, #0]
 8011cb4:	f000 f983 	bl	8011fbe <memmove>
 8011cb8:	68a3      	ldr	r3, [r4, #8]
 8011cba:	1b9b      	subs	r3, r3, r6
 8011cbc:	60a3      	str	r3, [r4, #8]
 8011cbe:	6823      	ldr	r3, [r4, #0]
 8011cc0:	199b      	adds	r3, r3, r6
 8011cc2:	6023      	str	r3, [r4, #0]
 8011cc4:	9b03      	ldr	r3, [sp, #12]
 8011cc6:	9a04      	ldr	r2, [sp, #16]
 8011cc8:	19db      	adds	r3, r3, r7
 8011cca:	9303      	str	r3, [sp, #12]
 8011ccc:	9b04      	ldr	r3, [sp, #16]
 8011cce:	1bed      	subs	r5, r5, r7
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	1bdb      	subs	r3, r3, r7
 8011cd4:	6093      	str	r3, [r2, #8]
 8011cd6:	d1a1      	bne.n	8011c1c <__sfvwrite_r+0x12c>
 8011cd8:	e712      	b.n	8011b00 <__sfvwrite_r+0x10>
 8011cda:	003a      	movs	r2, r7
 8011cdc:	9802      	ldr	r0, [sp, #8]
 8011cde:	f7fe fcd7 	bl	8010690 <_realloc_r>
 8011ce2:	1e06      	subs	r6, r0, #0
 8011ce4:	d1d7      	bne.n	8011c96 <__sfvwrite_r+0x1a6>
 8011ce6:	6921      	ldr	r1, [r4, #16]
 8011ce8:	9802      	ldr	r0, [sp, #8]
 8011cea:	f7f9 fef3 	bl	800bad4 <_free_r>
 8011cee:	2280      	movs	r2, #128	; 0x80
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	4393      	bics	r3, r2
 8011cf4:	81a3      	strh	r3, [r4, #12]
 8011cf6:	e7b9      	b.n	8011c6c <__sfvwrite_r+0x17c>
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	4283      	cmp	r3, r0
 8011cfc:	d302      	bcc.n	8011d04 <__sfvwrite_r+0x214>
 8011cfe:	6967      	ldr	r7, [r4, #20]
 8011d00:	42af      	cmp	r7, r5
 8011d02:	d916      	bls.n	8011d32 <__sfvwrite_r+0x242>
 8011d04:	42ae      	cmp	r6, r5
 8011d06:	d900      	bls.n	8011d0a <__sfvwrite_r+0x21a>
 8011d08:	002e      	movs	r6, r5
 8011d0a:	0032      	movs	r2, r6
 8011d0c:	9903      	ldr	r1, [sp, #12]
 8011d0e:	f000 f956 	bl	8011fbe <memmove>
 8011d12:	68a3      	ldr	r3, [r4, #8]
 8011d14:	6822      	ldr	r2, [r4, #0]
 8011d16:	1b9b      	subs	r3, r3, r6
 8011d18:	1992      	adds	r2, r2, r6
 8011d1a:	0037      	movs	r7, r6
 8011d1c:	60a3      	str	r3, [r4, #8]
 8011d1e:	6022      	str	r2, [r4, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d1cf      	bne.n	8011cc4 <__sfvwrite_r+0x1d4>
 8011d24:	0021      	movs	r1, r4
 8011d26:	9802      	ldr	r0, [sp, #8]
 8011d28:	f7fd fcc0 	bl	800f6ac <_fflush_r>
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d0c9      	beq.n	8011cc4 <__sfvwrite_r+0x1d4>
 8011d30:	e79f      	b.n	8011c72 <__sfvwrite_r+0x182>
 8011d32:	4b1c      	ldr	r3, [pc, #112]	; (8011da4 <__sfvwrite_r+0x2b4>)
 8011d34:	0028      	movs	r0, r5
 8011d36:	429d      	cmp	r5, r3
 8011d38:	d900      	bls.n	8011d3c <__sfvwrite_r+0x24c>
 8011d3a:	481b      	ldr	r0, [pc, #108]	; (8011da8 <__sfvwrite_r+0x2b8>)
 8011d3c:	0039      	movs	r1, r7
 8011d3e:	f7ee fa87 	bl	8000250 <__divsi3>
 8011d42:	003b      	movs	r3, r7
 8011d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d46:	4343      	muls	r3, r0
 8011d48:	9a03      	ldr	r2, [sp, #12]
 8011d4a:	69e1      	ldr	r1, [r4, #28]
 8011d4c:	9802      	ldr	r0, [sp, #8]
 8011d4e:	47b0      	blx	r6
 8011d50:	1e07      	subs	r7, r0, #0
 8011d52:	dcb7      	bgt.n	8011cc4 <__sfvwrite_r+0x1d4>
 8011d54:	e78d      	b.n	8011c72 <__sfvwrite_r+0x182>
 8011d56:	9b01      	ldr	r3, [sp, #4]
 8011d58:	2000      	movs	r0, #0
 8011d5a:	681e      	ldr	r6, [r3, #0]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	9303      	str	r3, [sp, #12]
 8011d60:	9b01      	ldr	r3, [sp, #4]
 8011d62:	3308      	adds	r3, #8
 8011d64:	9301      	str	r3, [sp, #4]
 8011d66:	e6e6      	b.n	8011b36 <__sfvwrite_r+0x46>
 8011d68:	9a05      	ldr	r2, [sp, #20]
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	dc08      	bgt.n	8011d80 <__sfvwrite_r+0x290>
 8011d6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011d70:	0032      	movs	r2, r6
 8011d72:	69e1      	ldr	r1, [r4, #28]
 8011d74:	9802      	ldr	r0, [sp, #8]
 8011d76:	47a8      	blx	r5
 8011d78:	1e05      	subs	r5, r0, #0
 8011d7a:	dd00      	ble.n	8011d7e <__sfvwrite_r+0x28e>
 8011d7c:	e70a      	b.n	8011b94 <__sfvwrite_r+0xa4>
 8011d7e:	e778      	b.n	8011c72 <__sfvwrite_r+0x182>
 8011d80:	9a05      	ldr	r2, [sp, #20]
 8011d82:	0031      	movs	r1, r6
 8011d84:	f000 f91b 	bl	8011fbe <memmove>
 8011d88:	9a05      	ldr	r2, [sp, #20]
 8011d8a:	68a3      	ldr	r3, [r4, #8]
 8011d8c:	0015      	movs	r5, r2
 8011d8e:	1a9b      	subs	r3, r3, r2
 8011d90:	60a3      	str	r3, [r4, #8]
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	189b      	adds	r3, r3, r2
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	e6fc      	b.n	8011b94 <__sfvwrite_r+0xa4>
 8011d9a:	46c0      	nop			; (mov r8, r8)
 8011d9c:	7ffffc00 	.word	0x7ffffc00
 8011da0:	fffffb7f 	.word	0xfffffb7f
 8011da4:	7ffffffe 	.word	0x7ffffffe
 8011da8:	7fffffff 	.word	0x7fffffff

08011dac <__submore>:
 8011dac:	000b      	movs	r3, r1
 8011dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011db0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8011db2:	3340      	adds	r3, #64	; 0x40
 8011db4:	000c      	movs	r4, r1
 8011db6:	429d      	cmp	r5, r3
 8011db8:	d11c      	bne.n	8011df4 <__submore+0x48>
 8011dba:	2680      	movs	r6, #128	; 0x80
 8011dbc:	00f6      	lsls	r6, r6, #3
 8011dbe:	0031      	movs	r1, r6
 8011dc0:	f7f8 faa8 	bl	800a314 <_malloc_r>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d102      	bne.n	8011dce <__submore+0x22>
 8011dc8:	2001      	movs	r0, #1
 8011dca:	4240      	negs	r0, r0
 8011dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011dce:	0023      	movs	r3, r4
 8011dd0:	6320      	str	r0, [r4, #48]	; 0x30
 8011dd2:	6366      	str	r6, [r4, #52]	; 0x34
 8011dd4:	3342      	adds	r3, #66	; 0x42
 8011dd6:	781a      	ldrb	r2, [r3, #0]
 8011dd8:	4b10      	ldr	r3, [pc, #64]	; (8011e1c <__submore+0x70>)
 8011dda:	54c2      	strb	r2, [r0, r3]
 8011ddc:	0023      	movs	r3, r4
 8011dde:	3341      	adds	r3, #65	; 0x41
 8011de0:	781a      	ldrb	r2, [r3, #0]
 8011de2:	4b0f      	ldr	r3, [pc, #60]	; (8011e20 <__submore+0x74>)
 8011de4:	54c2      	strb	r2, [r0, r3]
 8011de6:	782a      	ldrb	r2, [r5, #0]
 8011de8:	4b0e      	ldr	r3, [pc, #56]	; (8011e24 <__submore+0x78>)
 8011dea:	54c2      	strb	r2, [r0, r3]
 8011dec:	18c0      	adds	r0, r0, r3
 8011dee:	6020      	str	r0, [r4, #0]
 8011df0:	2000      	movs	r0, #0
 8011df2:	e7eb      	b.n	8011dcc <__submore+0x20>
 8011df4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8011df6:	0029      	movs	r1, r5
 8011df8:	0073      	lsls	r3, r6, #1
 8011dfa:	001a      	movs	r2, r3
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	f7fe fc47 	bl	8010690 <_realloc_r>
 8011e02:	1e05      	subs	r5, r0, #0
 8011e04:	d0e0      	beq.n	8011dc8 <__submore+0x1c>
 8011e06:	1987      	adds	r7, r0, r6
 8011e08:	0001      	movs	r1, r0
 8011e0a:	0032      	movs	r2, r6
 8011e0c:	0038      	movs	r0, r7
 8011e0e:	f7f9 fde6 	bl	800b9de <memcpy>
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	6027      	str	r7, [r4, #0]
 8011e16:	6325      	str	r5, [r4, #48]	; 0x30
 8011e18:	6363      	str	r3, [r4, #52]	; 0x34
 8011e1a:	e7e9      	b.n	8011df0 <__submore+0x44>
 8011e1c:	000003ff 	.word	0x000003ff
 8011e20:	000003fe 	.word	0x000003fe
 8011e24:	000003fd 	.word	0x000003fd

08011e28 <__swsetup_r>:
 8011e28:	4b30      	ldr	r3, [pc, #192]	; (8011eec <__swsetup_r+0xc4>)
 8011e2a:	b570      	push	{r4, r5, r6, lr}
 8011e2c:	0005      	movs	r5, r0
 8011e2e:	6818      	ldr	r0, [r3, #0]
 8011e30:	000c      	movs	r4, r1
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d004      	beq.n	8011e40 <__swsetup_r+0x18>
 8011e36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d101      	bne.n	8011e40 <__swsetup_r+0x18>
 8011e3c:	f7f9 fbec 	bl	800b618 <__sinit>
 8011e40:	230c      	movs	r3, #12
 8011e42:	5ee2      	ldrsh	r2, [r4, r3]
 8011e44:	b293      	uxth	r3, r2
 8011e46:	0711      	lsls	r1, r2, #28
 8011e48:	d423      	bmi.n	8011e92 <__swsetup_r+0x6a>
 8011e4a:	06d9      	lsls	r1, r3, #27
 8011e4c:	d407      	bmi.n	8011e5e <__swsetup_r+0x36>
 8011e4e:	2309      	movs	r3, #9
 8011e50:	2001      	movs	r0, #1
 8011e52:	602b      	str	r3, [r5, #0]
 8011e54:	3337      	adds	r3, #55	; 0x37
 8011e56:	4313      	orrs	r3, r2
 8011e58:	81a3      	strh	r3, [r4, #12]
 8011e5a:	4240      	negs	r0, r0
 8011e5c:	bd70      	pop	{r4, r5, r6, pc}
 8011e5e:	075b      	lsls	r3, r3, #29
 8011e60:	d513      	bpl.n	8011e8a <__swsetup_r+0x62>
 8011e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e64:	2900      	cmp	r1, #0
 8011e66:	d008      	beq.n	8011e7a <__swsetup_r+0x52>
 8011e68:	0023      	movs	r3, r4
 8011e6a:	3340      	adds	r3, #64	; 0x40
 8011e6c:	4299      	cmp	r1, r3
 8011e6e:	d002      	beq.n	8011e76 <__swsetup_r+0x4e>
 8011e70:	0028      	movs	r0, r5
 8011e72:	f7f9 fe2f 	bl	800bad4 <_free_r>
 8011e76:	2300      	movs	r3, #0
 8011e78:	6323      	str	r3, [r4, #48]	; 0x30
 8011e7a:	2224      	movs	r2, #36	; 0x24
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	4393      	bics	r3, r2
 8011e80:	81a3      	strh	r3, [r4, #12]
 8011e82:	2300      	movs	r3, #0
 8011e84:	6063      	str	r3, [r4, #4]
 8011e86:	6923      	ldr	r3, [r4, #16]
 8011e88:	6023      	str	r3, [r4, #0]
 8011e8a:	2308      	movs	r3, #8
 8011e8c:	89a2      	ldrh	r2, [r4, #12]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	81a3      	strh	r3, [r4, #12]
 8011e92:	6923      	ldr	r3, [r4, #16]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d10b      	bne.n	8011eb0 <__swsetup_r+0x88>
 8011e98:	21a0      	movs	r1, #160	; 0xa0
 8011e9a:	2280      	movs	r2, #128	; 0x80
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	0089      	lsls	r1, r1, #2
 8011ea0:	0092      	lsls	r2, r2, #2
 8011ea2:	400b      	ands	r3, r1
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d003      	beq.n	8011eb0 <__swsetup_r+0x88>
 8011ea8:	0021      	movs	r1, r4
 8011eaa:	0028      	movs	r0, r5
 8011eac:	f000 f8e8 	bl	8012080 <__smakebuf_r>
 8011eb0:	220c      	movs	r2, #12
 8011eb2:	5ea3      	ldrsh	r3, [r4, r2]
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	001a      	movs	r2, r3
 8011eb8:	b299      	uxth	r1, r3
 8011eba:	4002      	ands	r2, r0
 8011ebc:	4203      	tst	r3, r0
 8011ebe:	d00f      	beq.n	8011ee0 <__swsetup_r+0xb8>
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	60a2      	str	r2, [r4, #8]
 8011ec4:	6962      	ldr	r2, [r4, #20]
 8011ec6:	4252      	negs	r2, r2
 8011ec8:	61a2      	str	r2, [r4, #24]
 8011eca:	2000      	movs	r0, #0
 8011ecc:	6922      	ldr	r2, [r4, #16]
 8011ece:	4282      	cmp	r2, r0
 8011ed0:	d1c4      	bne.n	8011e5c <__swsetup_r+0x34>
 8011ed2:	0609      	lsls	r1, r1, #24
 8011ed4:	d5c2      	bpl.n	8011e5c <__swsetup_r+0x34>
 8011ed6:	2240      	movs	r2, #64	; 0x40
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	81a3      	strh	r3, [r4, #12]
 8011edc:	3801      	subs	r0, #1
 8011ede:	e7bd      	b.n	8011e5c <__swsetup_r+0x34>
 8011ee0:	0788      	lsls	r0, r1, #30
 8011ee2:	d400      	bmi.n	8011ee6 <__swsetup_r+0xbe>
 8011ee4:	6962      	ldr	r2, [r4, #20]
 8011ee6:	60a2      	str	r2, [r4, #8]
 8011ee8:	e7ef      	b.n	8011eca <__swsetup_r+0xa2>
 8011eea:	46c0      	nop			; (mov r8, r8)
 8011eec:	200006c8 	.word	0x200006c8

08011ef0 <__fputwc>:
 8011ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	000e      	movs	r6, r1
 8011ef6:	0015      	movs	r5, r2
 8011ef8:	9001      	str	r0, [sp, #4]
 8011efa:	f7f9 fccf 	bl	800b89c <__locale_mb_cur_max>
 8011efe:	0004      	movs	r4, r0
 8011f00:	2801      	cmp	r0, #1
 8011f02:	d119      	bne.n	8011f38 <__fputwc+0x48>
 8011f04:	1e73      	subs	r3, r6, #1
 8011f06:	2bfe      	cmp	r3, #254	; 0xfe
 8011f08:	d816      	bhi.n	8011f38 <__fputwc+0x48>
 8011f0a:	ab02      	add	r3, sp, #8
 8011f0c:	711e      	strb	r6, [r3, #4]
 8011f0e:	2700      	movs	r7, #0
 8011f10:	42a7      	cmp	r7, r4
 8011f12:	d020      	beq.n	8011f56 <__fputwc+0x66>
 8011f14:	ab03      	add	r3, sp, #12
 8011f16:	5dd9      	ldrb	r1, [r3, r7]
 8011f18:	68ab      	ldr	r3, [r5, #8]
 8011f1a:	3b01      	subs	r3, #1
 8011f1c:	60ab      	str	r3, [r5, #8]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	da04      	bge.n	8011f2c <__fputwc+0x3c>
 8011f22:	69aa      	ldr	r2, [r5, #24]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	db19      	blt.n	8011f5c <__fputwc+0x6c>
 8011f28:	290a      	cmp	r1, #10
 8011f2a:	d017      	beq.n	8011f5c <__fputwc+0x6c>
 8011f2c:	682b      	ldr	r3, [r5, #0]
 8011f2e:	1c5a      	adds	r2, r3, #1
 8011f30:	602a      	str	r2, [r5, #0]
 8011f32:	7019      	strb	r1, [r3, #0]
 8011f34:	3701      	adds	r7, #1
 8011f36:	e7eb      	b.n	8011f10 <__fputwc+0x20>
 8011f38:	002b      	movs	r3, r5
 8011f3a:	0032      	movs	r2, r6
 8011f3c:	9801      	ldr	r0, [sp, #4]
 8011f3e:	335c      	adds	r3, #92	; 0x5c
 8011f40:	a903      	add	r1, sp, #12
 8011f42:	f000 f857 	bl	8011ff4 <_wcrtomb_r>
 8011f46:	0004      	movs	r4, r0
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d1e0      	bne.n	8011f0e <__fputwc+0x1e>
 8011f4c:	2340      	movs	r3, #64	; 0x40
 8011f4e:	0006      	movs	r6, r0
 8011f50:	89aa      	ldrh	r2, [r5, #12]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	81ab      	strh	r3, [r5, #12]
 8011f56:	0030      	movs	r0, r6
 8011f58:	b005      	add	sp, #20
 8011f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f5c:	002a      	movs	r2, r5
 8011f5e:	9801      	ldr	r0, [sp, #4]
 8011f60:	f000 f8cc 	bl	80120fc <__swbuf_r>
 8011f64:	1c43      	adds	r3, r0, #1
 8011f66:	d1e5      	bne.n	8011f34 <__fputwc+0x44>
 8011f68:	0006      	movs	r6, r0
 8011f6a:	e7f4      	b.n	8011f56 <__fputwc+0x66>

08011f6c <_fputwc_r>:
 8011f6c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011f6e:	b570      	push	{r4, r5, r6, lr}
 8011f70:	0005      	movs	r5, r0
 8011f72:	000e      	movs	r6, r1
 8011f74:	0014      	movs	r4, r2
 8011f76:	07db      	lsls	r3, r3, #31
 8011f78:	d405      	bmi.n	8011f86 <_fputwc_r+0x1a>
 8011f7a:	8993      	ldrh	r3, [r2, #12]
 8011f7c:	059b      	lsls	r3, r3, #22
 8011f7e:	d402      	bmi.n	8011f86 <_fputwc_r+0x1a>
 8011f80:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8011f82:	f7f9 fd1f 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 8011f86:	230c      	movs	r3, #12
 8011f88:	5ee2      	ldrsh	r2, [r4, r3]
 8011f8a:	2380      	movs	r3, #128	; 0x80
 8011f8c:	019b      	lsls	r3, r3, #6
 8011f8e:	421a      	tst	r2, r3
 8011f90:	d104      	bne.n	8011f9c <_fputwc_r+0x30>
 8011f92:	431a      	orrs	r2, r3
 8011f94:	81a2      	strh	r2, [r4, #12]
 8011f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f98:	4313      	orrs	r3, r2
 8011f9a:	6663      	str	r3, [r4, #100]	; 0x64
 8011f9c:	0028      	movs	r0, r5
 8011f9e:	0022      	movs	r2, r4
 8011fa0:	0031      	movs	r1, r6
 8011fa2:	f7ff ffa5 	bl	8011ef0 <__fputwc>
 8011fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fa8:	0005      	movs	r5, r0
 8011faa:	07db      	lsls	r3, r3, #31
 8011fac:	d405      	bmi.n	8011fba <_fputwc_r+0x4e>
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	059b      	lsls	r3, r3, #22
 8011fb2:	d402      	bmi.n	8011fba <_fputwc_r+0x4e>
 8011fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fb6:	f7f9 fd06 	bl	800b9c6 <__retarget_lock_release_recursive>
 8011fba:	0028      	movs	r0, r5
 8011fbc:	bd70      	pop	{r4, r5, r6, pc}

08011fbe <memmove>:
 8011fbe:	b510      	push	{r4, lr}
 8011fc0:	4288      	cmp	r0, r1
 8011fc2:	d902      	bls.n	8011fca <memmove+0xc>
 8011fc4:	188b      	adds	r3, r1, r2
 8011fc6:	4298      	cmp	r0, r3
 8011fc8:	d303      	bcc.n	8011fd2 <memmove+0x14>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e007      	b.n	8011fde <memmove+0x20>
 8011fce:	5c8b      	ldrb	r3, [r1, r2]
 8011fd0:	5483      	strb	r3, [r0, r2]
 8011fd2:	3a01      	subs	r2, #1
 8011fd4:	d2fb      	bcs.n	8011fce <memmove+0x10>
 8011fd6:	bd10      	pop	{r4, pc}
 8011fd8:	5ccc      	ldrb	r4, [r1, r3]
 8011fda:	54c4      	strb	r4, [r0, r3]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d1fa      	bne.n	8011fd8 <memmove+0x1a>
 8011fe2:	e7f8      	b.n	8011fd6 <memmove+0x18>

08011fe4 <abort>:
 8011fe4:	2006      	movs	r0, #6
 8011fe6:	b510      	push	{r4, lr}
 8011fe8:	f000 f906 	bl	80121f8 <raise>
 8011fec:	2001      	movs	r0, #1
 8011fee:	f7f1 fca9 	bl	8003944 <_exit>
	...

08011ff4 <_wcrtomb_r>:
 8011ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ff6:	001d      	movs	r5, r3
 8011ff8:	4b09      	ldr	r3, [pc, #36]	; (8012020 <_wcrtomb_r+0x2c>)
 8011ffa:	0004      	movs	r4, r0
 8011ffc:	33e0      	adds	r3, #224	; 0xe0
 8011ffe:	681e      	ldr	r6, [r3, #0]
 8012000:	002b      	movs	r3, r5
 8012002:	2900      	cmp	r1, #0
 8012004:	d101      	bne.n	801200a <_wcrtomb_r+0x16>
 8012006:	000a      	movs	r2, r1
 8012008:	a901      	add	r1, sp, #4
 801200a:	0020      	movs	r0, r4
 801200c:	47b0      	blx	r6
 801200e:	1c43      	adds	r3, r0, #1
 8012010:	d103      	bne.n	801201a <_wcrtomb_r+0x26>
 8012012:	2300      	movs	r3, #0
 8012014:	602b      	str	r3, [r5, #0]
 8012016:	338a      	adds	r3, #138	; 0x8a
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	b004      	add	sp, #16
 801201c:	bd70      	pop	{r4, r5, r6, pc}
 801201e:	46c0      	nop			; (mov r8, r8)
 8012020:	2000043c 	.word	0x2000043c

08012024 <__swhatbuf_r>:
 8012024:	b570      	push	{r4, r5, r6, lr}
 8012026:	000e      	movs	r6, r1
 8012028:	001d      	movs	r5, r3
 801202a:	230e      	movs	r3, #14
 801202c:	5ec9      	ldrsh	r1, [r1, r3]
 801202e:	0014      	movs	r4, r2
 8012030:	b096      	sub	sp, #88	; 0x58
 8012032:	2900      	cmp	r1, #0
 8012034:	da09      	bge.n	801204a <__swhatbuf_r+0x26>
 8012036:	89b2      	ldrh	r2, [r6, #12]
 8012038:	2380      	movs	r3, #128	; 0x80
 801203a:	0011      	movs	r1, r2
 801203c:	4019      	ands	r1, r3
 801203e:	421a      	tst	r2, r3
 8012040:	d018      	beq.n	8012074 <__swhatbuf_r+0x50>
 8012042:	2100      	movs	r1, #0
 8012044:	3b40      	subs	r3, #64	; 0x40
 8012046:	0008      	movs	r0, r1
 8012048:	e010      	b.n	801206c <__swhatbuf_r+0x48>
 801204a:	466a      	mov	r2, sp
 801204c:	f000 f8de 	bl	801220c <_fstat_r>
 8012050:	2800      	cmp	r0, #0
 8012052:	dbf0      	blt.n	8012036 <__swhatbuf_r+0x12>
 8012054:	23f0      	movs	r3, #240	; 0xf0
 8012056:	9901      	ldr	r1, [sp, #4]
 8012058:	021b      	lsls	r3, r3, #8
 801205a:	4019      	ands	r1, r3
 801205c:	4b07      	ldr	r3, [pc, #28]	; (801207c <__swhatbuf_r+0x58>)
 801205e:	2080      	movs	r0, #128	; 0x80
 8012060:	18c9      	adds	r1, r1, r3
 8012062:	424b      	negs	r3, r1
 8012064:	4159      	adcs	r1, r3
 8012066:	2380      	movs	r3, #128	; 0x80
 8012068:	0100      	lsls	r0, r0, #4
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	6029      	str	r1, [r5, #0]
 801206e:	6023      	str	r3, [r4, #0]
 8012070:	b016      	add	sp, #88	; 0x58
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	2380      	movs	r3, #128	; 0x80
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	e7e5      	b.n	8012046 <__swhatbuf_r+0x22>
 801207a:	46c0      	nop			; (mov r8, r8)
 801207c:	ffffe000 	.word	0xffffe000

08012080 <__smakebuf_r>:
 8012080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012082:	2602      	movs	r6, #2
 8012084:	898b      	ldrh	r3, [r1, #12]
 8012086:	0005      	movs	r5, r0
 8012088:	000c      	movs	r4, r1
 801208a:	4233      	tst	r3, r6
 801208c:	d006      	beq.n	801209c <__smakebuf_r+0x1c>
 801208e:	0023      	movs	r3, r4
 8012090:	3343      	adds	r3, #67	; 0x43
 8012092:	6023      	str	r3, [r4, #0]
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	2301      	movs	r3, #1
 8012098:	6163      	str	r3, [r4, #20]
 801209a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801209c:	466a      	mov	r2, sp
 801209e:	ab01      	add	r3, sp, #4
 80120a0:	f7ff ffc0 	bl	8012024 <__swhatbuf_r>
 80120a4:	9900      	ldr	r1, [sp, #0]
 80120a6:	0007      	movs	r7, r0
 80120a8:	0028      	movs	r0, r5
 80120aa:	f7f8 f933 	bl	800a314 <_malloc_r>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d108      	bne.n	80120c4 <__smakebuf_r+0x44>
 80120b2:	220c      	movs	r2, #12
 80120b4:	5ea3      	ldrsh	r3, [r4, r2]
 80120b6:	059a      	lsls	r2, r3, #22
 80120b8:	d4ef      	bmi.n	801209a <__smakebuf_r+0x1a>
 80120ba:	2203      	movs	r2, #3
 80120bc:	4393      	bics	r3, r2
 80120be:	431e      	orrs	r6, r3
 80120c0:	81a6      	strh	r6, [r4, #12]
 80120c2:	e7e4      	b.n	801208e <__smakebuf_r+0xe>
 80120c4:	2380      	movs	r3, #128	; 0x80
 80120c6:	89a2      	ldrh	r2, [r4, #12]
 80120c8:	6020      	str	r0, [r4, #0]
 80120ca:	4313      	orrs	r3, r2
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	9b00      	ldr	r3, [sp, #0]
 80120d0:	6120      	str	r0, [r4, #16]
 80120d2:	6163      	str	r3, [r4, #20]
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00c      	beq.n	80120f4 <__smakebuf_r+0x74>
 80120da:	0028      	movs	r0, r5
 80120dc:	230e      	movs	r3, #14
 80120de:	5ee1      	ldrsh	r1, [r4, r3]
 80120e0:	f000 f8a6 	bl	8012230 <_isatty_r>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d005      	beq.n	80120f4 <__smakebuf_r+0x74>
 80120e8:	2303      	movs	r3, #3
 80120ea:	89a2      	ldrh	r2, [r4, #12]
 80120ec:	439a      	bics	r2, r3
 80120ee:	3b02      	subs	r3, #2
 80120f0:	4313      	orrs	r3, r2
 80120f2:	81a3      	strh	r3, [r4, #12]
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	433b      	orrs	r3, r7
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	e7ce      	b.n	801209a <__smakebuf_r+0x1a>

080120fc <__swbuf_r>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	0006      	movs	r6, r0
 8012100:	000d      	movs	r5, r1
 8012102:	0014      	movs	r4, r2
 8012104:	2800      	cmp	r0, #0
 8012106:	d004      	beq.n	8012112 <__swbuf_r+0x16>
 8012108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <__swbuf_r+0x16>
 801210e:	f7f9 fa83 	bl	800b618 <__sinit>
 8012112:	69a3      	ldr	r3, [r4, #24]
 8012114:	60a3      	str	r3, [r4, #8]
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	071b      	lsls	r3, r3, #28
 801211a:	d52e      	bpl.n	801217a <__swbuf_r+0x7e>
 801211c:	6923      	ldr	r3, [r4, #16]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d02b      	beq.n	801217a <__swbuf_r+0x7e>
 8012122:	230c      	movs	r3, #12
 8012124:	5ee2      	ldrsh	r2, [r4, r3]
 8012126:	2380      	movs	r3, #128	; 0x80
 8012128:	019b      	lsls	r3, r3, #6
 801212a:	b2ef      	uxtb	r7, r5
 801212c:	b2ed      	uxtb	r5, r5
 801212e:	421a      	tst	r2, r3
 8012130:	d02c      	beq.n	801218c <__swbuf_r+0x90>
 8012132:	6923      	ldr	r3, [r4, #16]
 8012134:	6820      	ldr	r0, [r4, #0]
 8012136:	1ac0      	subs	r0, r0, r3
 8012138:	6963      	ldr	r3, [r4, #20]
 801213a:	4283      	cmp	r3, r0
 801213c:	dc05      	bgt.n	801214a <__swbuf_r+0x4e>
 801213e:	0021      	movs	r1, r4
 8012140:	0030      	movs	r0, r6
 8012142:	f7fd fab3 	bl	800f6ac <_fflush_r>
 8012146:	2800      	cmp	r0, #0
 8012148:	d11d      	bne.n	8012186 <__swbuf_r+0x8a>
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	3001      	adds	r0, #1
 801214e:	3b01      	subs	r3, #1
 8012150:	60a3      	str	r3, [r4, #8]
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	1c5a      	adds	r2, r3, #1
 8012156:	6022      	str	r2, [r4, #0]
 8012158:	701f      	strb	r7, [r3, #0]
 801215a:	6963      	ldr	r3, [r4, #20]
 801215c:	4283      	cmp	r3, r0
 801215e:	d004      	beq.n	801216a <__swbuf_r+0x6e>
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	07db      	lsls	r3, r3, #31
 8012164:	d507      	bpl.n	8012176 <__swbuf_r+0x7a>
 8012166:	2d0a      	cmp	r5, #10
 8012168:	d105      	bne.n	8012176 <__swbuf_r+0x7a>
 801216a:	0021      	movs	r1, r4
 801216c:	0030      	movs	r0, r6
 801216e:	f7fd fa9d 	bl	800f6ac <_fflush_r>
 8012172:	2800      	cmp	r0, #0
 8012174:	d107      	bne.n	8012186 <__swbuf_r+0x8a>
 8012176:	0028      	movs	r0, r5
 8012178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801217a:	0021      	movs	r1, r4
 801217c:	0030      	movs	r0, r6
 801217e:	f7ff fe53 	bl	8011e28 <__swsetup_r>
 8012182:	2800      	cmp	r0, #0
 8012184:	d0cd      	beq.n	8012122 <__swbuf_r+0x26>
 8012186:	2501      	movs	r5, #1
 8012188:	426d      	negs	r5, r5
 801218a:	e7f4      	b.n	8012176 <__swbuf_r+0x7a>
 801218c:	4313      	orrs	r3, r2
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	4a02      	ldr	r2, [pc, #8]	; (801219c <__swbuf_r+0xa0>)
 8012192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012194:	4013      	ands	r3, r2
 8012196:	6663      	str	r3, [r4, #100]	; 0x64
 8012198:	e7cb      	b.n	8012132 <__swbuf_r+0x36>
 801219a:	46c0      	nop			; (mov r8, r8)
 801219c:	ffffdfff 	.word	0xffffdfff

080121a0 <_raise_r>:
 80121a0:	b570      	push	{r4, r5, r6, lr}
 80121a2:	0004      	movs	r4, r0
 80121a4:	000d      	movs	r5, r1
 80121a6:	291f      	cmp	r1, #31
 80121a8:	d904      	bls.n	80121b4 <_raise_r+0x14>
 80121aa:	2316      	movs	r3, #22
 80121ac:	6003      	str	r3, [r0, #0]
 80121ae:	2001      	movs	r0, #1
 80121b0:	4240      	negs	r0, r0
 80121b2:	bd70      	pop	{r4, r5, r6, pc}
 80121b4:	0003      	movs	r3, r0
 80121b6:	33fc      	adds	r3, #252	; 0xfc
 80121b8:	69db      	ldr	r3, [r3, #28]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d004      	beq.n	80121c8 <_raise_r+0x28>
 80121be:	008a      	lsls	r2, r1, #2
 80121c0:	189b      	adds	r3, r3, r2
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	2a00      	cmp	r2, #0
 80121c6:	d108      	bne.n	80121da <_raise_r+0x3a>
 80121c8:	0020      	movs	r0, r4
 80121ca:	f000 f855 	bl	8012278 <_getpid_r>
 80121ce:	002a      	movs	r2, r5
 80121d0:	0001      	movs	r1, r0
 80121d2:	0020      	movs	r0, r4
 80121d4:	f000 f83e 	bl	8012254 <_kill_r>
 80121d8:	e7eb      	b.n	80121b2 <_raise_r+0x12>
 80121da:	2000      	movs	r0, #0
 80121dc:	2a01      	cmp	r2, #1
 80121de:	d0e8      	beq.n	80121b2 <_raise_r+0x12>
 80121e0:	1c51      	adds	r1, r2, #1
 80121e2:	d103      	bne.n	80121ec <_raise_r+0x4c>
 80121e4:	2316      	movs	r3, #22
 80121e6:	3001      	adds	r0, #1
 80121e8:	6023      	str	r3, [r4, #0]
 80121ea:	e7e2      	b.n	80121b2 <_raise_r+0x12>
 80121ec:	2400      	movs	r4, #0
 80121ee:	0028      	movs	r0, r5
 80121f0:	601c      	str	r4, [r3, #0]
 80121f2:	4790      	blx	r2
 80121f4:	0020      	movs	r0, r4
 80121f6:	e7dc      	b.n	80121b2 <_raise_r+0x12>

080121f8 <raise>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	4b03      	ldr	r3, [pc, #12]	; (8012208 <raise+0x10>)
 80121fc:	0001      	movs	r1, r0
 80121fe:	6818      	ldr	r0, [r3, #0]
 8012200:	f7ff ffce 	bl	80121a0 <_raise_r>
 8012204:	bd10      	pop	{r4, pc}
 8012206:	46c0      	nop			; (mov r8, r8)
 8012208:	200006c8 	.word	0x200006c8

0801220c <_fstat_r>:
 801220c:	2300      	movs	r3, #0
 801220e:	b570      	push	{r4, r5, r6, lr}
 8012210:	4d06      	ldr	r5, [pc, #24]	; (801222c <_fstat_r+0x20>)
 8012212:	0004      	movs	r4, r0
 8012214:	0008      	movs	r0, r1
 8012216:	0011      	movs	r1, r2
 8012218:	602b      	str	r3, [r5, #0]
 801221a:	f7f1 fbe2 	bl	80039e2 <_fstat>
 801221e:	1c43      	adds	r3, r0, #1
 8012220:	d103      	bne.n	801222a <_fstat_r+0x1e>
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d000      	beq.n	801222a <_fstat_r+0x1e>
 8012228:	6023      	str	r3, [r4, #0]
 801222a:	bd70      	pop	{r4, r5, r6, pc}
 801222c:	20000d6c 	.word	0x20000d6c

08012230 <_isatty_r>:
 8012230:	2300      	movs	r3, #0
 8012232:	b570      	push	{r4, r5, r6, lr}
 8012234:	4d06      	ldr	r5, [pc, #24]	; (8012250 <_isatty_r+0x20>)
 8012236:	0004      	movs	r4, r0
 8012238:	0008      	movs	r0, r1
 801223a:	602b      	str	r3, [r5, #0]
 801223c:	f7f1 fbdf 	bl	80039fe <_isatty>
 8012240:	1c43      	adds	r3, r0, #1
 8012242:	d103      	bne.n	801224c <_isatty_r+0x1c>
 8012244:	682b      	ldr	r3, [r5, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d000      	beq.n	801224c <_isatty_r+0x1c>
 801224a:	6023      	str	r3, [r4, #0]
 801224c:	bd70      	pop	{r4, r5, r6, pc}
 801224e:	46c0      	nop			; (mov r8, r8)
 8012250:	20000d6c 	.word	0x20000d6c

08012254 <_kill_r>:
 8012254:	2300      	movs	r3, #0
 8012256:	b570      	push	{r4, r5, r6, lr}
 8012258:	4d06      	ldr	r5, [pc, #24]	; (8012274 <_kill_r+0x20>)
 801225a:	0004      	movs	r4, r0
 801225c:	0008      	movs	r0, r1
 801225e:	0011      	movs	r1, r2
 8012260:	602b      	str	r3, [r5, #0]
 8012262:	f7f1 fb5f 	bl	8003924 <_kill>
 8012266:	1c43      	adds	r3, r0, #1
 8012268:	d103      	bne.n	8012272 <_kill_r+0x1e>
 801226a:	682b      	ldr	r3, [r5, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d000      	beq.n	8012272 <_kill_r+0x1e>
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	bd70      	pop	{r4, r5, r6, pc}
 8012274:	20000d6c 	.word	0x20000d6c

08012278 <_getpid_r>:
 8012278:	b510      	push	{r4, lr}
 801227a:	f7f1 fb4d 	bl	8003918 <_getpid>
 801227e:	bd10      	pop	{r4, pc}

08012280 <round>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	004a      	lsls	r2, r1, #1
 8012284:	000d      	movs	r5, r1
 8012286:	4920      	ldr	r1, [pc, #128]	; (8012308 <round+0x88>)
 8012288:	0d52      	lsrs	r2, r2, #21
 801228a:	1851      	adds	r1, r2, r1
 801228c:	0006      	movs	r6, r0
 801228e:	2913      	cmp	r1, #19
 8012290:	dc18      	bgt.n	80122c4 <round+0x44>
 8012292:	2900      	cmp	r1, #0
 8012294:	da09      	bge.n	80122aa <round+0x2a>
 8012296:	0feb      	lsrs	r3, r5, #31
 8012298:	2200      	movs	r2, #0
 801229a:	07db      	lsls	r3, r3, #31
 801229c:	3101      	adds	r1, #1
 801229e:	d101      	bne.n	80122a4 <round+0x24>
 80122a0:	491a      	ldr	r1, [pc, #104]	; (801230c <round+0x8c>)
 80122a2:	430b      	orrs	r3, r1
 80122a4:	0019      	movs	r1, r3
 80122a6:	0010      	movs	r0, r2
 80122a8:	e017      	b.n	80122da <round+0x5a>
 80122aa:	4c19      	ldr	r4, [pc, #100]	; (8012310 <round+0x90>)
 80122ac:	410c      	asrs	r4, r1
 80122ae:	0022      	movs	r2, r4
 80122b0:	402a      	ands	r2, r5
 80122b2:	4302      	orrs	r2, r0
 80122b4:	d013      	beq.n	80122de <round+0x5e>
 80122b6:	2280      	movs	r2, #128	; 0x80
 80122b8:	0312      	lsls	r2, r2, #12
 80122ba:	410a      	asrs	r2, r1
 80122bc:	1953      	adds	r3, r2, r5
 80122be:	43a3      	bics	r3, r4
 80122c0:	2200      	movs	r2, #0
 80122c2:	e7ef      	b.n	80122a4 <round+0x24>
 80122c4:	2933      	cmp	r1, #51	; 0x33
 80122c6:	dd0d      	ble.n	80122e4 <round+0x64>
 80122c8:	2380      	movs	r3, #128	; 0x80
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	4299      	cmp	r1, r3
 80122ce:	d106      	bne.n	80122de <round+0x5e>
 80122d0:	0002      	movs	r2, r0
 80122d2:	002b      	movs	r3, r5
 80122d4:	0029      	movs	r1, r5
 80122d6:	f7ee fa6f 	bl	80007b8 <__aeabi_dadd>
 80122da:	0006      	movs	r6, r0
 80122dc:	000d      	movs	r5, r1
 80122de:	0030      	movs	r0, r6
 80122e0:	0029      	movs	r1, r5
 80122e2:	bd70      	pop	{r4, r5, r6, pc}
 80122e4:	4c0b      	ldr	r4, [pc, #44]	; (8012314 <round+0x94>)
 80122e6:	1912      	adds	r2, r2, r4
 80122e8:	2401      	movs	r4, #1
 80122ea:	4264      	negs	r4, r4
 80122ec:	40d4      	lsrs	r4, r2
 80122ee:	4220      	tst	r0, r4
 80122f0:	d0f5      	beq.n	80122de <round+0x5e>
 80122f2:	2233      	movs	r2, #51	; 0x33
 80122f4:	1a51      	subs	r1, r2, r1
 80122f6:	3a32      	subs	r2, #50	; 0x32
 80122f8:	408a      	lsls	r2, r1
 80122fa:	1812      	adds	r2, r2, r0
 80122fc:	4282      	cmp	r2, r0
 80122fe:	4180      	sbcs	r0, r0
 8012300:	4240      	negs	r0, r0
 8012302:	182b      	adds	r3, r5, r0
 8012304:	43a2      	bics	r2, r4
 8012306:	e7cd      	b.n	80122a4 <round+0x24>
 8012308:	fffffc01 	.word	0xfffffc01
 801230c:	3ff00000 	.word	0x3ff00000
 8012310:	000fffff 	.word	0x000fffff
 8012314:	fffffbed 	.word	0xfffffbed

08012318 <_init>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	46c0      	nop			; (mov r8, r8)
 801231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801231e:	bc08      	pop	{r3}
 8012320:	469e      	mov	lr, r3
 8012322:	4770      	bx	lr

08012324 <_fini>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	46c0      	nop			; (mov r8, r8)
 8012328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801232a:	bc08      	pop	{r3}
 801232c:	469e      	mov	lr, r3
 801232e:	4770      	bx	lr
