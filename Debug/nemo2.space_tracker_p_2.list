
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800bdc0  0800bdc0  0001bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c374  0800c374  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c374  0800c374  0001c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c37c  0800c37c  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c37c  0800c37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c384  0800c384  0001c384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800c388  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200006c0  0800ca48  000206c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800ca48  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ffa  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a2  00000000  00000000  00037725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109d  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb2b  00000000  00000000  0003cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ee2  00000000  00000000  0005c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7924  00000000  00000000  000767ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f9c  00000000  00000000  0013e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800bda8 	.word	0x0800bda8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800bda8 	.word	0x0800bda8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800bf1c 	.word	0x0800bf1c
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 f8a8 	bl	80034b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f83c 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 face 	bl	800290c <MX_GPIO_Init>
  MX_RTC_Init();
 8002370:	f000 f88e 	bl	8002490 <MX_RTC_Init>
  MX_TIM6_Init();
 8002374:	f000 f96e 	bl	8002654 <MX_TIM6_Init>
  MX_SPI1_Init();
 8002378:	f000 f92e 	bl	80025d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800237c:	f000 f9a8 	bl	80026d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002380:	f000 f9f4 	bl	800276c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002384:	f000 fa40 	bl	8002808 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8002388:	f000 fa8c 	bl	80028a4 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <main+0x78>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fbbf 	bl	8002b14 <send_debug_logs>
  //HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;

  my_tim_init () ;
 8002396:	f000 fcad 	bl	8002cf4 <my_tim_init>

  my_gnss_verbose ( 15 ) ;
 800239a:	200f      	movs	r0, #15
 800239c:	f000 fc92 	bl	8002cc4 <my_gnss_verbose>

  if ( !is_system_initialized () )
 80023a0:	f000 fbe8 	bl	8002b74 <is_system_initialized>
 80023a4:	0003      	movs	r3, r0
 80023a6:	001a      	movs	r2, r3
 80023a8:	2301      	movs	r3, #1
 80023aa:	4053      	eors	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <main+0x76>
  {
	  my_gnss_sw_on () ;
 80023b2:	f000 fc2d 	bl	8002c10 <my_gnss_sw_on>
	  my_tim_start () ;
 80023b6:	f000 fca9 	bl	8002d0c <my_tim_start>
	  //my_gnss_get_utc () ;
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <main+0x7c>)
 80023bc:	0018      	movs	r0, r3
 80023be:	f004 fdc5 	bl	8006f4c <my_gnss_acq_coordinates>
	  my_tim_stop () ;
 80023c2:	f000 fcb3 	bl	8002d2c <my_tim_stop>
	  //my_gnss_sw_off () ;
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <main+0x80>)
 80023c8:	0018      	movs	r0, r3
 80023ca:	f004 fe1f 	bl	800700c <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <main+0x80>)
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fb9f 	bl	8002b14 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <main+0x76>
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000a20 	.word	0x20000a20
 80023e0:	20000a08 	.word	0x20000a08

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b095      	sub	sp, #84	; 0x54
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	2414      	movs	r4, #20
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	0018      	movs	r0, r3
 80023f0:	233c      	movs	r3, #60	; 0x3c
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	f005 f99f 	bl	8007738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	0018      	movs	r0, r3
 80023fe:	2310      	movs	r3, #16
 8002400:	001a      	movs	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f005 f998 	bl	8007738 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	0018      	movs	r0, r3
 800240e:	f001 fc53 	bl	8003cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002412:	f001 fc43 	bl	8003c9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <SystemClock_Config+0xa8>)
 8002418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <SystemClock_Config+0xa8>)
 800241c:	2118      	movs	r1, #24
 800241e:	438a      	bics	r2, r1
 8002420:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2206      	movs	r2, #6
 8002426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2201      	movs	r2, #1
 800242c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	0052      	lsls	r2, r2, #1
 8002434:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800243c:	193b      	adds	r3, r7, r4
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002442:	193b      	adds	r3, r7, r4
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002448:	193b      	adds	r3, r7, r4
 800244a:	0018      	movs	r0, r3
 800244c:	f001 fc80 	bl	8003d50 <HAL_RCC_OscConfig>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002454:	f000 fc9c 	bl	8002d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2207      	movs	r2, #7
 800245c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2100      	movs	r1, #0
 8002474:	0018      	movs	r0, r3
 8002476:	f001 ffcb 	bl	8004410 <HAL_RCC_ClockConfig>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800247e:	f000 fc87 	bl	8002d90 <Error_Handler>
  }
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b015      	add	sp, #84	; 0x54
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	40021000 	.word	0x40021000

08002490 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b090      	sub	sp, #64	; 0x40
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002496:	232c      	movs	r3, #44	; 0x2c
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	0018      	movs	r0, r3
 800249c:	2314      	movs	r3, #20
 800249e:	001a      	movs	r2, r3
 80024a0:	2100      	movs	r1, #0
 80024a2:	f005 f949 	bl	8007738 <memset>
  RTC_DateTypeDef sDate = {0};
 80024a6:	2328      	movs	r3, #40	; 0x28
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80024ae:	003b      	movs	r3, r7
 80024b0:	0018      	movs	r0, r3
 80024b2:	2328      	movs	r3, #40	; 0x28
 80024b4:	001a      	movs	r2, r3
 80024b6:	2100      	movs	r1, #0
 80024b8:	f005 f93e 	bl	8007738 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024bc:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <MX_RTC_Init+0x140>)
 80024be:	4a45      	ldr	r2, [pc, #276]	; (80025d4 <MX_RTC_Init+0x144>)
 80024c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <MX_RTC_Init+0x140>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <MX_RTC_Init+0x140>)
 80024ca:	227f      	movs	r2, #127	; 0x7f
 80024cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80024ce:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <MX_RTC_Init+0x140>)
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <MX_RTC_Init+0x140>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <MX_RTC_Init+0x140>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <MX_RTC_Init+0x140>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <MX_RTC_Init+0x140>)
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	05d2      	lsls	r2, r2, #23
 80024ec:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <MX_RTC_Init+0x140>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <MX_RTC_Init+0x140>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f002 fb70 	bl	8004bdc <HAL_RTC_Init>
 80024fc:	1e03      	subs	r3, r0, #0
 80024fe:	d001      	beq.n	8002504 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002500:	f000 fc46 	bl	8002d90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2200      	movs	r2, #0
 8002516:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800252a:	1879      	adds	r1, r7, r1
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <MX_RTC_Init+0x140>)
 800252e:	2201      	movs	r2, #1
 8002530:	0018      	movs	r0, r3
 8002532:	f002 fbf5 	bl	8004d20 <HAL_RTC_SetTime>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800253a:	f000 fc29 	bl	8002d90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800253e:	2128      	movs	r1, #40	; 0x28
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2206      	movs	r2, #6
 8002544:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2201      	movs	r2, #1
 800254a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2201      	movs	r2, #1
 8002550:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2200      	movs	r2, #0
 8002556:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002558:	1879      	adds	r1, r7, r1
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_RTC_Init+0x140>)
 800255c:	2201      	movs	r2, #1
 800255e:	0018      	movs	r0, r3
 8002560:	f002 fce2 	bl	8004f28 <HAL_RTC_SetDate>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002568:	f000 fc12 	bl	8002d90 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800256c:	003b      	movs	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002572:	003b      	movs	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002578:	003b      	movs	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800257e:	003b      	movs	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002584:	003b      	movs	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800258a:	003b      	movs	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002590:	003b      	movs	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002596:	003b      	movs	r3, r7
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800259c:	003b      	movs	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80025a2:	003b      	movs	r3, r7
 80025a4:	2220      	movs	r2, #32
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80025aa:	003b      	movs	r3, r7
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0052      	lsls	r2, r2, #1
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025b2:	0039      	movs	r1, r7
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_RTC_Init+0x140>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	0018      	movs	r0, r3
 80025ba:	f002 fd95 	bl	80050e8 <HAL_RTC_SetAlarm_IT>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d001      	beq.n	80025c6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80025c2:	f000 fbe5 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b010      	add	sp, #64	; 0x40
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	200006dc 	.word	0x200006dc
 80025d4:	40002800 	.word	0x40002800

080025d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_SPI1_Init+0x74>)
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <MX_SPI1_Init+0x78>)
 80025e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <MX_SPI1_Init+0x74>)
 80025e4:	2282      	movs	r2, #130	; 0x82
 80025e6:	0052      	lsls	r2, r2, #1
 80025e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_SPI1_Init+0x74>)
 80025f2:	22e0      	movs	r2, #224	; 0xe0
 80025f4:	00d2      	lsls	r2, r2, #3
 80025f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <MX_SPI1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_SPI1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_SPI1_Init+0x74>)
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <MX_SPI1_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_SPI1_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_SPI1_Init+0x74>)
 8002626:	2207      	movs	r2, #7
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_SPI1_Init+0x74>)
 8002632:	2208      	movs	r2, #8
 8002634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <MX_SPI1_Init+0x74>)
 8002638:	0018      	movs	r0, r3
 800263a:	f002 ffd5 	bl	80055e8 <HAL_SPI_Init>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 fba5 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000708 	.word	0x20000708
 8002650:	40013000 	.word	0x40013000

08002654 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	0018      	movs	r0, r3
 800265e:	230c      	movs	r3, #12
 8002660:	001a      	movs	r2, r3
 8002662:	2100      	movs	r1, #0
 8002664:	f005 f868 	bl	8007738 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_TIM6_Init+0x6c>)
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <MX_TIM6_Init+0x70>)
 800266c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_TIM6_Init+0x6c>)
 8002670:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <MX_TIM6_Init+0x74>)
 8002672:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_TIM6_Init+0x6c>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_TIM6_Init+0x6c>)
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <MX_TIM6_Init+0x78>)
 800267e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_TIM6_Init+0x6c>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_TIM6_Init+0x6c>)
 8002688:	0018      	movs	r0, r3
 800268a:	f003 f865 	bl	8005758 <HAL_TIM_Base_Init>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002692:	f000 fb7d 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026a2:	1d3a      	adds	r2, r7, #4
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_TIM6_Init+0x6c>)
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f003 fafd 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80026b2:	f000 fb6d 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	2000076c 	.word	0x2000076c
 80026c4:	40001000 	.word	0x40001000
 80026c8:	00003e7f 	.word	0x00003e7f
 80026cc:	000003e7 	.word	0x000003e7

080026d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <MX_USART1_UART_Init+0x98>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026dc:	22e1      	movs	r2, #225	; 0xe1
 80026de:	0252      	lsls	r2, r2, #9
 80026e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_USART1_UART_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_USART1_UART_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <MX_USART1_UART_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <MX_USART1_UART_Init+0x94>)
 800270e:	2200      	movs	r2, #0
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_USART1_UART_Init+0x94>)
 8002714:	2200      	movs	r2, #0
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <MX_USART1_UART_Init+0x94>)
 800271a:	0018      	movs	r0, r3
 800271c:	f003 fb52 	bl	8005dc4 <HAL_UART_Init>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002724:	f000 fb34 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_USART1_UART_Init+0x94>)
 800272a:	2100      	movs	r1, #0
 800272c:	0018      	movs	r0, r3
 800272e:	f004 fb2d 	bl	8006d8c <HAL_UARTEx_SetTxFifoThreshold>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002736:	f000 fb2b 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <MX_USART1_UART_Init+0x94>)
 800273c:	2100      	movs	r1, #0
 800273e:	0018      	movs	r0, r3
 8002740:	f004 fb64 	bl	8006e0c <HAL_UARTEx_SetRxFifoThreshold>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002748:	f000 fb22 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <MX_USART1_UART_Init+0x94>)
 800274e:	0018      	movs	r0, r3
 8002750:	f004 fae2 	bl	8006d18 <HAL_UARTEx_DisableFifoMode>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d001      	beq.n	800275c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002758:	f000 fb1a 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	200007b8 	.word	0x200007b8
 8002768:	40013800 	.word	0x40013800

0800276c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <MX_USART2_UART_Init+0x98>)
 8002774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002778:	22e1      	movs	r2, #225	; 0xe1
 800277a:	0292      	lsls	r2, r2, #10
 800277c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <MX_USART2_UART_Init+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_USART2_UART_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_USART2_UART_Init+0x94>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f003 fb04 	bl	8005dc4 <HAL_UART_Init>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d001      	beq.n	80027c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027c0:	f000 fae6 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f004 fadf 	bl	8006d8c <HAL_UARTEx_SetTxFifoThreshold>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027d2:	f000 fadd 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027d8:	2100      	movs	r1, #0
 80027da:	0018      	movs	r0, r3
 80027dc:	f004 fb16 	bl	8006e0c <HAL_UARTEx_SetRxFifoThreshold>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d001      	beq.n	80027e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027e4:	f000 fad4 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <MX_USART2_UART_Init+0x94>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f004 fa94 	bl	8006d18 <HAL_UARTEx_DisableFifoMode>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027f4:	f000 facc 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	2000084c 	.word	0x2000084c
 8002804:	40004400 	.word	0x40004400

08002808 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <MX_USART3_UART_Init+0x94>)
 800280e:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <MX_USART3_UART_Init+0x98>)
 8002810:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002814:	2296      	movs	r2, #150	; 0x96
 8002816:	0192      	lsls	r2, r2, #6
 8002818:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <MX_USART3_UART_Init+0x94>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <MX_USART3_UART_Init+0x94>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <MX_USART3_UART_Init+0x94>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_USART3_UART_Init+0x94>)
 800284c:	2200      	movs	r2, #0
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002852:	0018      	movs	r0, r3
 8002854:	f003 fab6 	bl	8005dc4 <HAL_UART_Init>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800285c:	f000 fa98 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002862:	2100      	movs	r1, #0
 8002864:	0018      	movs	r0, r3
 8002866:	f004 fa91 	bl	8006d8c <HAL_UARTEx_SetTxFifoThreshold>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800286e:	f000 fa8f 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f004 fac8 	bl	8006e0c <HAL_UARTEx_SetRxFifoThreshold>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002880:	f000 fa86 	bl	8002d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <MX_USART3_UART_Init+0x94>)
 8002886:	0018      	movs	r0, r3
 8002888:	f004 fa46 	bl	8006d18 <HAL_UARTEx_DisableFifoMode>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002890:	f000 fa7e 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	200008e0 	.word	0x200008e0
 80028a0:	40004800 	.word	0x40004800

080028a4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <MX_USART5_UART_Init+0x64>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028b0:	22e1      	movs	r2, #225	; 0xe1
 80028b2:	0252      	lsls	r2, r2, #9
 80028b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <MX_USART5_UART_Init+0x60>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f003 fa68 	bl	8005dc4 <HAL_UART_Init>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80028f8:	f000 fa4a 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	20000974 	.word	0x20000974
 8002908:	40005000 	.word	0x40005000

0800290c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b08b      	sub	sp, #44	; 0x2c
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	2414      	movs	r4, #20
 8002914:	193b      	adds	r3, r7, r4
 8002916:	0018      	movs	r0, r3
 8002918:	2314      	movs	r3, #20
 800291a:	001a      	movs	r2, r3
 800291c:	2100      	movs	r1, #0
 800291e:	f004 ff0b 	bl	8007738 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002926:	4b75      	ldr	r3, [pc, #468]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002928:	2104      	movs	r1, #4
 800292a:	430a      	orrs	r2, r1
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	2204      	movs	r2, #4
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b70      	ldr	r3, [pc, #448]	; (8002afc <MX_GPIO_Init+0x1f0>)
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	635a      	str	r2, [r3, #52]	; 0x34
 8002946:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002956:	4b69      	ldr	r3, [pc, #420]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002958:	2102      	movs	r1, #2
 800295a:	430a      	orrs	r2, r1
 800295c:	635a      	str	r2, [r3, #52]	; 0x34
 800295e:	4b67      	ldr	r3, [pc, #412]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800296a:	4b64      	ldr	r3, [pc, #400]	; (8002afc <MX_GPIO_Init+0x1f0>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002970:	2108      	movs	r1, #8
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
 8002976:	4b61      	ldr	r3, [pc, #388]	; (8002afc <MX_GPIO_Init+0x1f0>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	2208      	movs	r2, #8
 800297c:	4013      	ands	r3, r2
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002982:	23a0      	movs	r3, #160	; 0xa0
 8002984:	05db      	lsls	r3, r3, #23
 8002986:	2200      	movs	r2, #0
 8002988:	2110      	movs	r1, #16
 800298a:	0018      	movs	r0, r3
 800298c:	f001 f968 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002990:	495b      	ldr	r1, [pc, #364]	; (8002b00 <MX_GPIO_Init+0x1f4>)
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 8002994:	2200      	movs	r2, #0
 8002996:	0018      	movs	r0, r3
 8002998:	f001 f962 	bl	8003c60 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4858      	ldr	r0, [pc, #352]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	0019      	movs	r1, r3
 80029a6:	f001 f95b 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <MX_GPIO_Init+0x1fc>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	2103      	movs	r1, #3
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 f955 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2288      	movs	r2, #136	; 0x88
 80029c0:	0352      	lsls	r2, r2, #13
 80029c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 80029ca:	193a      	adds	r2, r7, r4
 80029cc:	23a0      	movs	r3, #160	; 0xa0
 80029ce:	05db      	lsls	r3, r3, #23
 80029d0:	0011      	movs	r1, r2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 ff00 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2202      	movs	r2, #2
 80029dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 80029ea:	193a      	adds	r2, r7, r4
 80029ec:	23a0      	movs	r3, #160	; 0xa0
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fef0 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	2210      	movs	r2, #16
 80029fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	2201      	movs	r2, #1
 8002a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002a10:	193a      	adds	r2, r7, r4
 8002a12:	23a0      	movs	r3, #160	; 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	0011      	movs	r1, r2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fedd 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <MX_GPIO_Init+0x200>)
 8002a22:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2201      	movs	r2, #1
 8002a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	0010      	movs	r0, r2
 8002a3e:	f000 fecb 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002a42:	0021      	movs	r1, r4
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2288      	movs	r2, #136	; 0x88
 8002a4e:	0352      	lsls	r2, r2, #13
 8002a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	000c      	movs	r4, r1
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 8002a5e:	0019      	movs	r1, r3
 8002a60:	0010      	movs	r0, r2
 8002a62:	f000 feb9 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002a66:	0021      	movs	r1, r4
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	0192      	lsls	r2, r2, #6
 8002a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a70:	000c      	movs	r4, r1
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2211      	movs	r2, #17
 8002a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 8002a88:	0019      	movs	r1, r3
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	f000 fea4 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <MX_GPIO_Init+0x204>)
 8002a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <MX_GPIO_Init+0x1f8>)
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f000 fe95 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <MX_GPIO_Init+0x1fc>)
 8002aca:	0019      	movs	r1, r3
 8002acc:	0010      	movs	r0, r2
 8002ace:	f000 fe83 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002ad2:	0021      	movs	r1, r4
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <MX_GPIO_Init+0x1fc>)
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f000 fe73 	bl	80037d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b00b      	add	sp, #44	; 0x2c
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40021000 	.word	0x40021000
 8002b00:	0000a403 	.word	0x0000a403
 8002b04:	50000400 	.word	0x50000400
 8002b08:	50000c00 	.word	0x50000c00
 8002b0c:	00008c03 	.word	0x00008c03
 8002b10:	00004040 	.word	0x00004040

08002b14 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd faf0 	bl	8000104 <strlen>
 8002b24:	0003      	movs	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2bfa      	cmp	r3, #250	; 0xfa
 8002b2c:	d908      	bls.n	8002b40 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002b2e:	23fa      	movs	r3, #250	; 0xfa
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	490d      	ldr	r1, [pc, #52]	; (8002b68 <send_debug_logs+0x54>)
 8002b34:	480d      	ldr	r0, [pc, #52]	; (8002b6c <send_debug_logs+0x58>)
 8002b36:	222a      	movs	r2, #42	; 0x2a
 8002b38:	f003 f9da 	bl	8005ef0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002b3c:	23fa      	movs	r3, #250	; 0xfa
 8002b3e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	23fa      	movs	r3, #250	; 0xfa
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4808      	ldr	r0, [pc, #32]	; (8002b6c <send_debug_logs+0x58>)
 8002b4c:	f003 f9d0 	bl	8005ef0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002b50:	23fa      	movs	r3, #250	; 0xfa
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <send_debug_logs+0x5c>)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <send_debug_logs+0x58>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f003 f9c9 	bl	8005ef0 <HAL_UART_Transmit>
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	0800bde8 	.word	0x0800bde8
 8002b6c:	2000084c 	.word	0x2000084c
 8002b70:	0800be14 	.word	0x0800be14

08002b74 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002b7a:	1dbc      	adds	r4, r7, #6
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <is_system_initialized+0x34>)
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f004 fa44 	bl	800700c <my_rtc_get_dt_s>
 8002b84:	0003      	movs	r3, r0
 8002b86:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <is_system_initialized+0x34>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff ffc2 	bl	8002b14 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	8819      	ldrh	r1, [r3, #0]
 8002b94:	23fd      	movs	r3, #253	; 0xfd
 8002b96:	00da      	lsls	r2, r3, #3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	4291      	cmp	r1, r2
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b003      	add	sp, #12
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	20000a08 	.word	0x20000a08

08002bac <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10e      	bne.n	8002bde <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4811      	ldr	r0, [pc, #68]	; (8002c0c <my_ant_sw_pos+0x60>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	0019      	movs	r1, r3
 8002bca:	f001 f849 	bl	8003c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	480e      	ldr	r0, [pc, #56]	; (8002c0c <my_ant_sw_pos+0x60>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	f001 f842 	bl	8003c60 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002bdc:	e011      	b.n	8002c02 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002bde:	1dfb      	adds	r3, r7, #7
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d10d      	bne.n	8002c02 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4808      	ldr	r0, [pc, #32]	; (8002c0c <my_ant_sw_pos+0x60>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	0019      	movs	r1, r3
 8002bf0:	f001 f836 	bl	8003c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <my_ant_sw_pos+0x60>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	f001 f82f 	bl	8003c60 <HAL_GPIO_WritePin>
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	50000400 	.word	0x50000400

08002c10 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7ff ffc9 	bl	8002bac <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	4808      	ldr	r0, [pc, #32]	; (8002c40 <my_gnss_sw_on+0x30>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	0019      	movs	r1, r3
 8002c24:	f001 f81c 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <my_gnss_sw_on+0x30>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	0019      	movs	r1, r3
 8002c32:	f001 f815 	bl	8003c60 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002c36:	f7ff fe35 	bl	80028a4 <MX_USART5_UART_Init>
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	50000400 	.word	0x50000400

08002c44 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7ff ffaf 	bl	8002bac <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4809      	ldr	r0, [pc, #36]	; (8002c78 <my_gnss_sw_off+0x34>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	0019      	movs	r1, r3
 8002c58:	f001 f802 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <my_gnss_sw_off+0x34>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	0019      	movs	r1, r3
 8002c66:	f000 fffb 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &HUART_GNSS ) ;
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <my_gnss_sw_off+0x38>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f003 f8ff 	bl	8005e70 <HAL_UART_DeInit>

}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	50000400 	.word	0x50000400
 8002c7c:	20000974 	.word	0x20000974

08002c80 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	000a      	movs	r2, r1
 8002c8a:	1cfb      	adds	r3, r7, #3
 8002c8c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002c8e:	23fa      	movs	r3, #250	; 0xfa
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <my_gnss_receive_byte+0x3c>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	f003 f9ce 	bl	8006038 <HAL_UART_Receive>
	if ( verbose )
 8002c9c:	1cfb      	adds	r3, r7, #3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002ca4:	23fa      	movs	r3, #250	; 0xfa
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <my_gnss_receive_byte+0x40>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	f003 f91f 	bl	8005ef0 <HAL_UART_Transmit>
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000974 	.word	0x20000974
 8002cc0:	2000084c 	.word	0x2000084c

08002cc4 <my_gnss_verbose>:
		return true ;
	}
	return false ;
}
void my_gnss_verbose ( uint16_t time_seconds_ths )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	0002      	movs	r2, r0
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	801a      	strh	r2, [r3, #0]
	  my_gnss_sw_on () ;
 8002cd0:	f7ff ff9e 	bl	8002c10 <my_gnss_sw_on>
	  my_tim_start () ;
 8002cd4:	f000 f81a 	bl	8002d0c <my_tim_start>
	  my_gnss_log ( time_seconds_ths ) ;
 8002cd8:	1dbb      	adds	r3, r7, #6
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f004 f977 	bl	8006fd0 <my_gnss_log>
	  my_tim_stop () ;
 8002ce2:	f000 f823 	bl	8002d2c <my_tim_stop>
	  my_gnss_sw_off () ;
 8002ce6:	f7ff ffad 	bl	8002c44 <my_gnss_sw_off>
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <my_tim_init+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4252      	negs	r2, r2
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000076c 	.word	0x2000076c

08002d0c <my_tim_start>:

void my_tim_start ()
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <my_tim_start+0x18>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <my_tim_start+0x1c>)
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f002 fd75 	bl	8005808 <HAL_TIM_Base_Start_IT>
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000a38 	.word	0x20000a38
 8002d28:	2000076c 	.word	0x2000076c

08002d2c <my_tim_stop>:

void my_tim_stop ()
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <my_tim_stop+0x14>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f002 fdca 	bl	80058cc <HAL_TIM_Base_Stop_IT>
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	2000076c 	.word	0x2000076c

08002d44 <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d60:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	2396      	movs	r3, #150	; 0x96
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d905      	bls.n	8002d7a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff fecf 	bl	8002b14 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002d76:	f000 fd1e 	bl	80037b6 <HAL_NVIC_SystemReset>
		}
	}
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40001000 	.word	0x40001000
 8002d88:	20000a38 	.word	0x20000a38
 8002d8c:	0800be44 	.word	0x0800be44

08002d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
}
 8002d96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <Error_Handler+0x8>
	...

08002d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_MspInit+0x4c>)
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_MspInit+0x4c>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_MspInit+0x4c>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_MspInit+0x4c>)
 8002dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_MspInit+0x4c>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0549      	lsls	r1, r1, #21
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_MspInit+0x4c>)
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002dd6:	23c0      	movs	r3, #192	; 0xc0
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 fbf2 	bl	80035c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b097      	sub	sp, #92	; 0x5c
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df4:	240c      	movs	r4, #12
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	0018      	movs	r0, r3
 8002dfa:	234c      	movs	r3, #76	; 0x4c
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f004 fc9a 	bl	8007738 <memset>
  if(hrtc->Instance==RTC)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_RTC_MspInit+0x84>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12c      	bne.n	8002e68 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0292      	lsls	r2, r2, #10
 8002e14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 fc9f 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e2a:	f7ff ffb1 	bl	8002d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RTC_MspInit+0x88>)
 8002e30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RTC_MspInit+0x88>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0209      	lsls	r1, r1, #8
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RTC_MspInit+0x88>)
 8002e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RTC_MspInit+0x88>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	00c9      	lsls	r1, r1, #3
 8002e46:	430a      	orrs	r2, r1
 8002e48:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RTC_MspInit+0x88>)
 8002e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4013      	ands	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f000 fc85 	bl	800376c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002e62:	2002      	movs	r0, #2
 8002e64:	f000 fc97 	bl	8003796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b017      	add	sp, #92	; 0x5c
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	40002800 	.word	0x40002800
 8002e74:	40021000 	.word	0x40021000

08002e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	2414      	movs	r4, #20
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	0018      	movs	r0, r3
 8002e86:	2314      	movs	r3, #20
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f004 fc54 	bl	8007738 <memset>
  if(hspi->Instance==SPI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_SPI_MspInit+0x8c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d130      	bne.n	8002efc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0149      	lsls	r1, r1, #5
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8002ece:	0021      	movs	r1, r4
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	22e0      	movs	r2, #224	; 0xe0
 8002ed4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2202      	movs	r2, #2
 8002eda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	187a      	adds	r2, r7, r1
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fc6e 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b00b      	add	sp, #44	; 0x2c
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	40013000 	.word	0x40013000
 8002f08:	40021000 	.word	0x40021000

08002f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <HAL_TIM_Base_MspInit+0x44>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d113      	bne.n	8002f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f24:	2110      	movs	r1, #16
 8002f26:	430a      	orrs	r2, r1
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2210      	movs	r2, #16
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2102      	movs	r1, #2
 8002f3a:	2011      	movs	r0, #17
 8002f3c:	f000 fc16 	bl	800376c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002f40:	2011      	movs	r0, #17
 8002f42:	f000 fc28 	bl	8003796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40001000 	.word	0x40001000
 8002f54:	40021000 	.word	0x40021000

08002f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b0a3      	sub	sp, #140	; 0x8c
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	2374      	movs	r3, #116	; 0x74
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	0018      	movs	r0, r3
 8002f66:	2314      	movs	r3, #20
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f004 fbe4 	bl	8007738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f70:	2428      	movs	r4, #40	; 0x28
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	0018      	movs	r0, r3
 8002f76:	234c      	movs	r3, #76	; 0x4c
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f004 fbdc 	bl	8007738 <memset>
  if(huart->Instance==USART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a84      	ldr	r2, [pc, #528]	; (8003198 <HAL_UART_MspInit+0x240>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d140      	bne.n	800300c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 fbe3 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fa2:	f7ff fef5 	bl	8002d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	01c9      	lsls	r1, r1, #7
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	01db      	lsls	r3, r3, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc6:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fce:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_UART_MspInit+0x244>)
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8002fda:	2174      	movs	r1, #116	; 0x74
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	22c0      	movs	r2, #192	; 0xc0
 8002fe0:	00d2      	lsls	r2, r2, #3
 8002fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	187a      	adds	r2, r7, r1
 8002ffe:	23a0      	movs	r3, #160	; 0xa0
 8003000:	05db      	lsls	r3, r3, #23
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fbe7 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800300a:	e0c0      	b.n	800318e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_UART_MspInit+0x248>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d140      	bne.n	8003098 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003016:	2128      	movs	r1, #40	; 0x28
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003024:	187b      	adds	r3, r7, r1
 8003026:	0018      	movs	r0, r3
 8003028:	f001 fb9c 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003030:	f7ff feae 	bl	8002d90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_UART_MspInit+0x244>)
 8003036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_UART_MspInit+0x244>)
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	0289      	lsls	r1, r1, #10
 800303e:	430a      	orrs	r2, r1
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_UART_MspInit+0x244>)
 8003044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	4b52      	ldr	r3, [pc, #328]	; (800319c <HAL_UART_MspInit+0x244>)
 8003052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003054:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_UART_MspInit+0x244>)
 8003056:	2101      	movs	r1, #1
 8003058:	430a      	orrs	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_UART_MspInit+0x244>)
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003068:	2174      	movs	r1, #116	; 0x74
 800306a:	187b      	adds	r3, r7, r1
 800306c:	220c      	movs	r2, #12
 800306e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2202      	movs	r2, #2
 8003074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	187b      	adds	r3, r7, r1
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2201      	movs	r2, #1
 8003086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	187a      	adds	r2, r7, r1
 800308a:	23a0      	movs	r3, #160	; 0xa0
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fba1 	bl	80037d8 <HAL_GPIO_Init>
}
 8003096:	e07a      	b.n	800318e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <HAL_UART_MspInit+0x24c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d140      	bne.n	8003124 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030a2:	2128      	movs	r1, #40	; 0x28
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2204      	movs	r2, #4
 80030a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	0018      	movs	r0, r3
 80030b4:	f001 fb56 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80030bc:	f7ff fe68 	bl	8002d90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_UART_MspInit+0x244>)
 80030c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <HAL_UART_MspInit+0x244>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	02c9      	lsls	r1, r1, #11
 80030ca:	430a      	orrs	r2, r1
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <HAL_UART_MspInit+0x244>)
 80030d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	02db      	lsls	r3, r3, #11
 80030d6:	4013      	ands	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_UART_MspInit+0x244>)
 80030de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_UART_MspInit+0x244>)
 80030e2:	2102      	movs	r1, #2
 80030e4:	430a      	orrs	r2, r1
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <HAL_UART_MspInit+0x244>)
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80030f4:	2174      	movs	r1, #116	; 0x74
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	22c0      	movs	r2, #192	; 0xc0
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2202      	movs	r2, #2
 8003102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2204      	movs	r2, #4
 8003114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	187b      	adds	r3, r7, r1
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_UART_MspInit+0x250>)
 800311a:	0019      	movs	r1, r3
 800311c:	0010      	movs	r0, r2
 800311e:	f000 fb5b 	bl	80037d8 <HAL_GPIO_Init>
}
 8003122:	e034      	b.n	800318e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_UART_MspInit+0x254>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12f      	bne.n	800318e <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_UART_MspInit+0x244>)
 8003130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_UART_MspInit+0x244>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_UART_MspInit+0x244>)
 800313e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_UART_MspInit+0x244>)
 800314c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_UART_MspInit+0x244>)
 8003150:	2102      	movs	r1, #2
 8003152:	430a      	orrs	r2, r1
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_UART_MspInit+0x244>)
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2202      	movs	r2, #2
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003162:	2174      	movs	r1, #116	; 0x74
 8003164:	187b      	adds	r3, r7, r1
 8003166:	2218      	movs	r2, #24
 8003168:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	187b      	adds	r3, r7, r1
 800316c:	2202      	movs	r2, #2
 800316e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2203      	movs	r2, #3
 8003180:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	187b      	adds	r3, r7, r1
 8003184:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_UART_MspInit+0x250>)
 8003186:	0019      	movs	r1, r3
 8003188:	0010      	movs	r0, r2
 800318a:	f000 fb25 	bl	80037d8 <HAL_GPIO_Init>
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b023      	add	sp, #140	; 0x8c
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	50000400 	.word	0x50000400
 80031ac:	40005000 	.word	0x40005000

080031b0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <HAL_UART_MspDeInit+0xa4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10e      	bne.n	80031e0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 80031c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 80031c8:	4924      	ldr	r1, [pc, #144]	; (800325c <HAL_UART_MspDeInit+0xac>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80031ce:	23c0      	movs	r3, #192	; 0xc0
 80031d0:	00da      	lsls	r2, r3, #3
 80031d2:	23a0      	movs	r3, #160	; 0xa0
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	0011      	movs	r1, r2
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 fc69 	bl	8003ab0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80031de:	e034      	b.n	800324a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_UART_MspDeInit+0xb0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 80031ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 80031f0:	491c      	ldr	r1, [pc, #112]	; (8003264 <HAL_UART_MspDeInit+0xb4>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 80031f6:	23a0      	movs	r3, #160	; 0xa0
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	210c      	movs	r1, #12
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 fc57 	bl	8003ab0 <HAL_GPIO_DeInit>
}
 8003202:	e022      	b.n	800324a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_UART_MspDeInit+0xb8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10d      	bne.n	800322a <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 8003210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 8003214:	4915      	ldr	r1, [pc, #84]	; (800326c <HAL_UART_MspDeInit+0xbc>)
 8003216:	400a      	ands	r2, r1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800321a:	23c0      	movs	r3, #192	; 0xc0
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4a14      	ldr	r2, [pc, #80]	; (8003270 <HAL_UART_MspDeInit+0xc0>)
 8003220:	0019      	movs	r1, r3
 8003222:	0010      	movs	r0, r2
 8003224:	f000 fc44 	bl	8003ab0 <HAL_GPIO_DeInit>
}
 8003228:	e00f      	b.n	800324a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_UART_MspDeInit+0xc4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10a      	bne.n	800324a <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 8003236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_UART_MspDeInit+0xa8>)
 800323a:	490f      	ldr	r1, [pc, #60]	; (8003278 <HAL_UART_MspDeInit+0xc8>)
 800323c:	400a      	ands	r2, r1
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_UART_MspDeInit+0xc0>)
 8003242:	2118      	movs	r1, #24
 8003244:	0018      	movs	r0, r3
 8003246:	f000 fc33 	bl	8003ab0 <HAL_GPIO_DeInit>
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40013800 	.word	0x40013800
 8003258:	40021000 	.word	0x40021000
 800325c:	ffffbfff 	.word	0xffffbfff
 8003260:	40004400 	.word	0x40004400
 8003264:	fffdffff 	.word	0xfffdffff
 8003268:	40004800 	.word	0x40004800
 800326c:	fffbffff 	.word	0xfffbffff
 8003270:	50000400 	.word	0x50000400
 8003274:	40005000 	.word	0x40005000
 8003278:	fffffeff 	.word	0xfffffeff

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a0:	f000 f974 	bl	800358c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <RTC_TAMP_IRQHandler+0x14>)
 80032b2:	0018      	movs	r0, r3
 80032b4:	f002 f858 	bl	8005368 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	200006dc 	.word	0x200006dc

080032c4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80032ca:	0018      	movs	r0, r3
 80032cc:	f002 fb2c 	bl	8005928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	2000076c 	.word	0x2000076c

080032dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  return 1;
 80032e0:	2301      	movs	r3, #1
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_kill>:

int _kill(int pid, int sig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f2:	f004 faa5 	bl	8007840 <__errno>
 80032f6:	0003      	movs	r3, r0
 80032f8:	2216      	movs	r2, #22
 80032fa:	601a      	str	r2, [r3, #0]
  return -1;
 80032fc:	2301      	movs	r3, #1
 80032fe:	425b      	negs	r3, r3
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <_exit>:

void _exit (int status)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003310:	2301      	movs	r3, #1
 8003312:	425a      	negs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff ffe5 	bl	80032e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800331e:	e7fe      	b.n	800331e <_exit+0x16>

08003320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00a      	b.n	8003348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003332:	e000      	b.n	8003336 <_read+0x16>
 8003334:	bf00      	nop
 8003336:	0001      	movs	r1, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	60ba      	str	r2, [r7, #8]
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	dbf0      	blt.n	8003332 <_read+0x12>
  }

  return len;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b006      	add	sp, #24
 8003358:	bd80      	pop	{r7, pc}

0800335a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e009      	b.n	8003380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	60ba      	str	r2, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	0018      	movs	r0, r3
 8003376:	e000      	b.n	800337a <_write+0x20>
 8003378:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbf1      	blt.n	800336c <_write+0x12>
  }
  return len;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b006      	add	sp, #24
 8003390:	bd80      	pop	{r7, pc}

08003392 <_close>:

int _close(int file)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800339a:	2301      	movs	r3, #1
 800339c:	425b      	negs	r3, r3
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b002      	add	sp, #8
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0192      	lsls	r2, r2, #6
 80033b6:	605a      	str	r2, [r3, #4]
  return 0;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_isatty>:

int _isatty(int file)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033ca:	2301      	movs	r3, #1
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <_sbrk+0x5c>)
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <_sbrk+0x60>)
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <_sbrk+0x64>)
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <_sbrk+0x68>)
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <_sbrk+0x64>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d207      	bcs.n	800342c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800341c:	f004 fa10 	bl	8007840 <__errno>
 8003420:	0003      	movs	r3, r0
 8003422:	220c      	movs	r2, #12
 8003424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003426:	2301      	movs	r3, #1
 8003428:	425b      	negs	r3, r3
 800342a:	e009      	b.n	8003440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <_sbrk+0x64>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <_sbrk+0x64>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	18d2      	adds	r2, r2, r3
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <_sbrk+0x64>)
 800343c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20024000 	.word	0x20024000
 800344c:	00000400 	.word	0x00000400
 8003450:	20000a30 	.word	0x20000a30
 8003454:	20000d48 	.word	0x20000d48

08003458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003464:	480d      	ldr	r0, [pc, #52]	; (800349c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003466:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003468:	f7ff fff6 	bl	8003458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800346e:	490d      	ldr	r1, [pc, #52]	; (80034a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <LoopForever+0xe>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003484:	4c0a      	ldr	r4, [pc, #40]	; (80034b0 <LoopForever+0x16>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003492:	f004 f9db 	bl	800784c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003496:	f7fe ff63 	bl	8002360 <main>

0800349a <LoopForever>:

LoopForever:
  b LoopForever
 800349a:	e7fe      	b.n	800349a <LoopForever>
  ldr   r0, =_estack
 800349c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80034a8:	0800c388 	.word	0x0800c388
  ldr r2, =_sbss
 80034ac:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80034b0:	20000d48 	.word	0x20000d48

080034b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_COMP_IRQHandler>
	...

080034b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034be:	1dfb      	adds	r3, r7, #7
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_Init+0x3c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_Init+0x3c>)
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	0049      	lsls	r1, r1, #1
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034d2:	2003      	movs	r0, #3
 80034d4:	f000 f810 	bl	80034f8 <HAL_InitTick>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d003      	beq.n	80034e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e001      	b.n	80034e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80034e4:	f7ff fc5a 	bl	8002d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	781b      	ldrb	r3, [r3, #0]
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40022000 	.word	0x40022000

080034f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_InitTick+0x88>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02b      	beq.n	8003568 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_InitTick+0x8c>)
 8003512:	681c      	ldr	r4, [r3, #0]
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_InitTick+0x88>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	0019      	movs	r1, r3
 800351a:	23fa      	movs	r3, #250	; 0xfa
 800351c:	0098      	lsls	r0, r3, #2
 800351e:	f7fc fe0d 	bl	800013c <__udivsi3>
 8003522:	0003      	movs	r3, r0
 8003524:	0019      	movs	r1, r3
 8003526:	0020      	movs	r0, r4
 8003528:	f7fc fe08 	bl	800013c <__udivsi3>
 800352c:	0003      	movs	r3, r0
 800352e:	0018      	movs	r0, r3
 8003530:	f000 f945 	bl	80037be <HAL_SYSTICK_Config>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d112      	bne.n	800355e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d80a      	bhi.n	8003554 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	2301      	movs	r3, #1
 8003542:	425b      	negs	r3, r3
 8003544:	2200      	movs	r2, #0
 8003546:	0018      	movs	r0, r3
 8003548:	f000 f910 	bl	800376c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_InitTick+0x90>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e00d      	b.n	8003570 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003554:	230f      	movs	r3, #15
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e008      	b.n	8003570 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800355e:	230f      	movs	r3, #15
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e003      	b.n	8003570 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	781b      	ldrb	r3, [r3, #0]
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b005      	add	sp, #20
 800357c:	bd90      	pop	{r4, r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	2000000c 	.word	0x2000000c
 8003584:	20000004 	.word	0x20000004
 8003588:	20000008 	.word	0x20000008

0800358c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_IncTick+0x1c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	001a      	movs	r2, r3
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_IncTick+0x20>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	18d2      	adds	r2, r2, r3
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_IncTick+0x20>)
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	2000000c 	.word	0x2000000c
 80035ac:	20000a34 	.word	0x20000a34

080035b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  return uwTick;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <HAL_GetTick+0x10>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000a34 	.word	0x20000a34

080035c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a06      	ldr	r2, [pc, #24]	; (80035ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	40010000 	.word	0x40010000
 80035ec:	fffff9ff 	.word	0xfffff9ff

080035f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	0002      	movs	r2, r0
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	1dfb      	adds	r3, r7, #7
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b7f      	cmp	r3, #127	; 0x7f
 8003602:	d809      	bhi.n	8003618 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	001a      	movs	r2, r3
 800360a:	231f      	movs	r3, #31
 800360c:	401a      	ands	r2, r3
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__NVIC_EnableIRQ+0x30>)
 8003610:	2101      	movs	r1, #1
 8003612:	4091      	lsls	r1, r2
 8003614:	000a      	movs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}
 8003620:	e000e100 	.word	0xe000e100

08003624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	0002      	movs	r2, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b7f      	cmp	r3, #127	; 0x7f
 8003638:	d828      	bhi.n	800368c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363a:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <__NVIC_SetPriority+0xd4>)
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b25b      	sxtb	r3, r3
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	33c0      	adds	r3, #192	; 0xc0
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	589b      	ldr	r3, [r3, r2]
 800364a:	1dfa      	adds	r2, r7, #7
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	0011      	movs	r1, r2
 8003650:	2203      	movs	r2, #3
 8003652:	400a      	ands	r2, r1
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	21ff      	movs	r1, #255	; 0xff
 8003658:	4091      	lsls	r1, r2
 800365a:	000a      	movs	r2, r1
 800365c:	43d2      	mvns	r2, r2
 800365e:	401a      	ands	r2, r3
 8003660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	401a      	ands	r2, r3
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0018      	movs	r0, r3
 8003670:	2303      	movs	r3, #3
 8003672:	4003      	ands	r3, r0
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003678:	481f      	ldr	r0, [pc, #124]	; (80036f8 <__NVIC_SetPriority+0xd4>)
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b25b      	sxtb	r3, r3
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	430a      	orrs	r2, r1
 8003684:	33c0      	adds	r3, #192	; 0xc0
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800368a:	e031      	b.n	80036f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <__NVIC_SetPriority+0xd8>)
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	0019      	movs	r1, r3
 8003694:	230f      	movs	r3, #15
 8003696:	400b      	ands	r3, r1
 8003698:	3b08      	subs	r3, #8
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3306      	adds	r3, #6
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1dfa      	adds	r2, r7, #7
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	0011      	movs	r1, r2
 80036ac:	2203      	movs	r2, #3
 80036ae:	400a      	ands	r2, r1
 80036b0:	00d2      	lsls	r2, r2, #3
 80036b2:	21ff      	movs	r1, #255	; 0xff
 80036b4:	4091      	lsls	r1, r2
 80036b6:	000a      	movs	r2, r1
 80036b8:	43d2      	mvns	r2, r2
 80036ba:	401a      	ands	r2, r3
 80036bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	401a      	ands	r2, r3
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	0018      	movs	r0, r3
 80036cc:	2303      	movs	r3, #3
 80036ce:	4003      	ands	r3, r0
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d4:	4809      	ldr	r0, [pc, #36]	; (80036fc <__NVIC_SetPriority+0xd8>)
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	001c      	movs	r4, r3
 80036dc:	230f      	movs	r3, #15
 80036de:	4023      	ands	r3, r4
 80036e0:	3b08      	subs	r3, #8
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	3306      	adds	r3, #6
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	18c3      	adds	r3, r0, r3
 80036ec:	3304      	adds	r3, #4
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b003      	add	sp, #12
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003704:	f3bf 8f4f 	dsb	sy
}
 8003708:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <__NVIC_SystemReset+0x1c>)
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SystemReset+0x20>)
 800370e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003710:	f3bf 8f4f 	dsb	sy
}
 8003714:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	e7fd      	b.n	8003716 <__NVIC_SystemReset+0x16>
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	e000ed00 	.word	0xe000ed00
 8003720:	05fa0004 	.word	0x05fa0004

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	045b      	lsls	r3, r3, #17
 8003734:	429a      	cmp	r2, r3
 8003736:	d301      	bcc.n	800373c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003738:	2301      	movs	r3, #1
 800373a:	e010      	b.n	800375e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <SysTick_Config+0x44>)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	3a01      	subs	r2, #1
 8003742:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003744:	2301      	movs	r3, #1
 8003746:	425b      	negs	r3, r3
 8003748:	2103      	movs	r1, #3
 800374a:	0018      	movs	r0, r3
 800374c:	f7ff ff6a 	bl	8003624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x44>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x44>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	210f      	movs	r1, #15
 8003778:	187b      	adds	r3, r7, r1
 800377a:	1c02      	adds	r2, r0, #0
 800377c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	187b      	adds	r3, r7, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b25b      	sxtb	r3, r3
 8003786:	0011      	movs	r1, r2
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ff4b 	bl	8003624 <__NVIC_SetPriority>
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b004      	add	sp, #16
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	0002      	movs	r2, r0
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ff21 	bl	80035f0 <__NVIC_EnableIRQ>
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80037ba:	f7ff ffa1 	bl	8003700 <__NVIC_SystemReset>

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ffab 	bl	8003724 <SysTick_Config>
 80037ce:	0003      	movs	r3, r0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e6:	e14d      	b.n	8003a84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4091      	lsls	r1, r2
 80037f2:	000a      	movs	r2, r1
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d100      	bne.n	8003800 <HAL_GPIO_Init+0x28>
 80037fe:	e13e      	b.n	8003a7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	4013      	ands	r3, r2
 8003808:	2b01      	cmp	r3, #1
 800380a:	d005      	beq.n	8003818 <HAL_GPIO_Init+0x40>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	4013      	ands	r3, r2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	409a      	lsls	r2, r3
 8003826:	0013      	movs	r3, r2
 8003828:	43da      	mvns	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	0013      	movs	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	43da      	mvns	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	2201      	movs	r2, #1
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	4013      	ands	r3, r2
 8003882:	2b03      	cmp	r3, #3
 8003884:	d017      	beq.n	80038b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	43da      	mvns	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	4013      	ands	r3, r2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d123      	bne.n	800390a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	58d3      	ldr	r3, [r2, r3]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2207      	movs	r2, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2107      	movs	r1, #7
 80038ee:	400b      	ands	r3, r1
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	401a      	ands	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	4013      	ands	r3, r2
 8003948:	d100      	bne.n	800394c <HAL_GPIO_Init+0x174>
 800394a:	e098      	b.n	8003a7e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800394c:	4a53      	ldr	r2, [pc, #332]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3318      	adds	r3, #24
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	589b      	ldr	r3, [r3, r2]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2203      	movs	r2, #3
 800395e:	4013      	ands	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	220f      	movs	r2, #15
 8003964:	409a      	lsls	r2, r3
 8003966:	0013      	movs	r3, r2
 8003968:	43da      	mvns	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	23a0      	movs	r3, #160	; 0xa0
 8003974:	05db      	lsls	r3, r3, #23
 8003976:	429a      	cmp	r2, r3
 8003978:	d019      	beq.n	80039ae <HAL_GPIO_Init+0x1d6>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a48      	ldr	r2, [pc, #288]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_GPIO_Init+0x1d2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <HAL_GPIO_Init+0x2cc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_GPIO_Init+0x1ce>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a46      	ldr	r2, [pc, #280]	; (8003aa8 <HAL_GPIO_Init+0x2d0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x1ca>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a45      	ldr	r2, [pc, #276]	; (8003aac <HAL_GPIO_Init+0x2d4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_GPIO_Init+0x1c6>
 800399a:	2304      	movs	r3, #4
 800399c:	e008      	b.n	80039b0 <HAL_GPIO_Init+0x1d8>
 800399e:	2305      	movs	r3, #5
 80039a0:	e006      	b.n	80039b0 <HAL_GPIO_Init+0x1d8>
 80039a2:	2303      	movs	r3, #3
 80039a4:	e004      	b.n	80039b0 <HAL_GPIO_Init+0x1d8>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e002      	b.n	80039b0 <HAL_GPIO_Init+0x1d8>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_GPIO_Init+0x1d8>
 80039ae:	2300      	movs	r3, #0
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	2103      	movs	r1, #3
 80039b4:	400a      	ands	r2, r1
 80039b6:	00d2      	lsls	r2, r2, #3
 80039b8:	4093      	lsls	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80039c0:	4936      	ldr	r1, [pc, #216]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	3318      	adds	r3, #24
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	43da      	mvns	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	035b      	lsls	r3, r3, #13
 80039e6:	4013      	ands	r3, r2
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	43da      	mvns	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	039b      	lsls	r3, r3, #14
 8003a10:	4013      	ands	r3, r2
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 8003a24:	2384      	movs	r3, #132	; 0x84
 8003a26:	58d3      	ldr	r3, [r2, r3]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a48:	4914      	ldr	r1, [pc, #80]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 8003a4a:	2284      	movs	r2, #132	; 0x84
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003a50:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	58d3      	ldr	r3, [r2, r3]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	025b      	lsls	r3, r3, #9
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a76:	4909      	ldr	r1, [pc, #36]	; (8003a9c <HAL_GPIO_Init+0x2c4>)
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	40da      	lsrs	r2, r3
 8003a8c:	1e13      	subs	r3, r2, #0
 8003a8e:	d000      	beq.n	8003a92 <HAL_GPIO_Init+0x2ba>
 8003a90:	e6aa      	b.n	80037e8 <HAL_GPIO_Init+0x10>
  }
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b006      	add	sp, #24
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021800 	.word	0x40021800
 8003aa0:	50000400 	.word	0x50000400
 8003aa4:	50000800 	.word	0x50000800
 8003aa8:	50000c00 	.word	0x50000c00
 8003aac:	50001000 	.word	0x50001000

08003ab0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003abe:	e0ba      	b.n	8003c36 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d100      	bne.n	8003ad4 <HAL_GPIO_DeInit+0x24>
 8003ad2:	e0ad      	b.n	8003c30 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003ad4:	4a5d      	ldr	r2, [pc, #372]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	3318      	adds	r3, #24
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	589b      	ldr	r3, [r3, r2]
 8003ae0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	220f      	movs	r2, #15
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	23a0      	movs	r3, #160	; 0xa0
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d019      	beq.n	8003b32 <HAL_GPIO_DeInit+0x82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <HAL_GPIO_DeInit+0x1a0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_GPIO_DeInit+0x7e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_GPIO_DeInit+0x1a4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00d      	beq.n	8003b2a <HAL_GPIO_DeInit+0x7a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_GPIO_DeInit+0x1a8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <HAL_GPIO_DeInit+0x76>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <HAL_GPIO_DeInit+0x1ac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_GPIO_DeInit+0x72>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	e008      	b.n	8003b34 <HAL_GPIO_DeInit+0x84>
 8003b22:	2305      	movs	r3, #5
 8003b24:	e006      	b.n	8003b34 <HAL_GPIO_DeInit+0x84>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e004      	b.n	8003b34 <HAL_GPIO_DeInit+0x84>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_DeInit+0x84>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_GPIO_DeInit+0x84>
 8003b32:	2300      	movs	r3, #0
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	2103      	movs	r1, #3
 8003b38:	400a      	ands	r2, r1
 8003b3a:	00d2      	lsls	r2, r2, #3
 8003b3c:	4093      	lsls	r3, r2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d136      	bne.n	8003bb2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b44:	4a41      	ldr	r2, [pc, #260]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	58d3      	ldr	r3, [r2, r3]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	43d2      	mvns	r2, r2
 8003b4e:	493f      	ldr	r1, [pc, #252]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003b56:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b58:	2384      	movs	r3, #132	; 0x84
 8003b5a:	58d3      	ldr	r3, [r2, r3]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	43d2      	mvns	r2, r2
 8003b60:	493a      	ldr	r1, [pc, #232]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	2284      	movs	r2, #132	; 0x84
 8003b66:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b72:	400a      	ands	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b76:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	43d9      	mvns	r1, r3
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2203      	movs	r2, #3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003b94:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	589a      	ldr	r2, [r3, r2]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43d9      	mvns	r1, r3
 8003ba4:	4829      	ldr	r0, [pc, #164]	; (8003c4c <HAL_GPIO_DeInit+0x19c>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	400a      	ands	r2, r1
 8003bac:	3318      	adds	r3, #24
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2103      	movs	r1, #3
 8003bbc:	4099      	lsls	r1, r3
 8003bbe:	000b      	movs	r3, r1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	08da      	lsrs	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3208      	adds	r2, #8
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	58d3      	ldr	r3, [r2, r3]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	2107      	movs	r1, #7
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	210f      	movs	r1, #15
 8003bdc:	4091      	lsls	r1, r2
 8003bde:	000a      	movs	r2, r1
 8003be0:	43d1      	mvns	r1, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	08d2      	lsrs	r2, r2, #3
 8003be6:	4019      	ands	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	0052      	lsls	r2, r2, #1
 8003bf8:	2103      	movs	r1, #3
 8003bfa:	4091      	lsls	r1, r2
 8003bfc:	000a      	movs	r2, r1
 8003bfe:	43d2      	mvns	r2, r2
 8003c00:	401a      	ands	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4091      	lsls	r1, r2
 8003c10:	000a      	movs	r2, r1
 8003c12:	43d2      	mvns	r2, r2
 8003c14:	401a      	ands	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	0052      	lsls	r2, r2, #1
 8003c22:	2103      	movs	r1, #3
 8003c24:	4091      	lsls	r1, r2
 8003c26:	000a      	movs	r2, r1
 8003c28:	43d2      	mvns	r2, r2
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	3301      	adds	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	40da      	lsrs	r2, r3
 8003c3c:	1e13      	subs	r3, r2, #0
 8003c3e:	d000      	beq.n	8003c42 <HAL_GPIO_DeInit+0x192>
 8003c40:	e73e      	b.n	8003ac0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b006      	add	sp, #24
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	50000400 	.word	0x50000400
 8003c54:	50000800 	.word	0x50000800
 8003c58:	50000c00 	.word	0x50000c00
 8003c5c:	50001000 	.word	0x50001000

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	0008      	movs	r0, r1
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	1cbb      	adds	r3, r7, #2
 8003c6e:	1c02      	adds	r2, r0, #0
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	1c7b      	adds	r3, r7, #1
 8003c74:	1c0a      	adds	r2, r1, #0
 8003c76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c78:	1c7b      	adds	r3, r7, #1
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c80:	1cbb      	adds	r3, r7, #2
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c88:	e003      	b.n	8003c92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c8a:	1cbb      	adds	r3, r7, #2
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b002      	add	sp, #8
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	0049      	lsls	r1, r1, #1
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40007000 	.word	0x40007000

08003cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d11f      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4912      	ldr	r1, [pc, #72]	; (8003d34 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fc fa26 	bl	800013c <__udivsi3>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf6:	e008      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e001      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e009      	b.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	401a      	ands	r2, r3
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0ed      	beq.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	fffff9ff 	.word	0xfffff9ff
 8003d30:	20000004 	.word	0x20000004
 8003d34:	000f4240 	.word	0x000f4240

08003d38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	23e0      	movs	r3, #224	; 0xe0
 8003d42:	01db      	lsls	r3, r3, #7
 8003d44:	4013      	ands	r3, r2
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f000 fb50 	bl	8004404 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d100      	bne.n	8003d70 <HAL_RCC_OscConfig+0x20>
 8003d6e:	e07c      	b.n	8003e6a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d70:	4bc3      	ldr	r3, [pc, #780]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2238      	movs	r2, #56	; 0x38
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7a:	4bc1      	ldr	r3, [pc, #772]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	4013      	ands	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0x40>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10b      	bne.n	8003dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d96:	4bba      	ldr	r3, [pc, #744]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d062      	beq.n	8003e68 <HAL_RCC_OscConfig+0x118>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d15e      	bne.n	8003e68 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e32a      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_OscConfig+0x7a>
 8003dba:	4bb1      	ldr	r3, [pc, #708]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4bb0      	ldr	r3, [pc, #704]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	0249      	lsls	r1, r1, #9
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e020      	b.n	8003e0c <HAL_RCC_OscConfig+0xbc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	23a0      	movs	r3, #160	; 0xa0
 8003dd0:	02db      	lsls	r3, r3, #11
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d10e      	bne.n	8003df4 <HAL_RCC_OscConfig+0xa4>
 8003dd6:	4baa      	ldr	r3, [pc, #680]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4ba9      	ldr	r3, [pc, #676]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	02c9      	lsls	r1, r1, #11
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	4ba6      	ldr	r3, [pc, #664]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4ba5      	ldr	r3, [pc, #660]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003dea:	2180      	movs	r1, #128	; 0x80
 8003dec:	0249      	lsls	r1, r1, #9
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xbc>
 8003df4:	4ba2      	ldr	r3, [pc, #648]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4ba1      	ldr	r3, [pc, #644]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003dfa:	49a2      	ldr	r1, [pc, #648]	; (8004084 <HAL_RCC_OscConfig+0x334>)
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	4b9f      	ldr	r3, [pc, #636]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b9e      	ldr	r3, [pc, #632]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e06:	49a0      	ldr	r1, [pc, #640]	; (8004088 <HAL_RCC_OscConfig+0x338>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7ff fbcc 	bl	80035b0 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1e:	f7ff fbc7 	bl	80035b0 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	; 0x64
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e2e9      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e30:	4b93      	ldr	r3, [pc, #588]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0xce>
 8003e3c:	e015      	b.n	8003e6a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7ff fbb7 	bl	80035b0 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7ff fbb2 	bl	80035b0 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e2d4      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5a:	4b89      	ldr	r3, [pc, #548]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	029b      	lsls	r3, r3, #10
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0xf8>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d100      	bne.n	8003e76 <HAL_RCC_OscConfig+0x126>
 8003e74:	e099      	b.n	8003faa <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e76:	4b82      	ldr	r3, [pc, #520]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2238      	movs	r2, #56	; 0x38
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e80:	4b7f      	ldr	r3, [pc, #508]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2203      	movs	r2, #3
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d102      	bne.n	8003e96 <HAL_RCC_OscConfig+0x146>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d135      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9c:	4b78      	ldr	r3, [pc, #480]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x164>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e2a7      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b72      	ldr	r3, [pc, #456]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	; (800408c <HAL_RCC_OscConfig+0x33c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d112      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ed0:	4b6b      	ldr	r3, [pc, #428]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x340>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0adb      	lsrs	r3, r3, #11
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a69      	ldr	r2, [pc, #420]	; (8004094 <HAL_RCC_OscConfig+0x344>)
 8003ef0:	40da      	lsrs	r2, r3
 8003ef2:	4b69      	ldr	r3, [pc, #420]	; (8004098 <HAL_RCC_OscConfig+0x348>)
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ef6:	4b69      	ldr	r3, [pc, #420]	; (800409c <HAL_RCC_OscConfig+0x34c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fafc 	bl	80034f8 <HAL_InitTick>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d051      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e27d      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d030      	beq.n	8003f72 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f10:	4b5b      	ldr	r3, [pc, #364]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a5e      	ldr	r2, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x340>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	4b58      	ldr	r3, [pc, #352]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0049      	lsls	r1, r1, #1
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7ff fb3d 	bl	80035b0 <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7ff fb38 	bl	80035b0 <HAL_GetTick>
 8003f40:	0002      	movs	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e25a      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4e:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4013      	ands	r3, r2
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_RCC_OscConfig+0x33c>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	4b45      	ldr	r3, [pc, #276]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b42      	ldr	r3, [pc, #264]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f78:	4949      	ldr	r1, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x350>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7ff fb17 	bl	80035b0 <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f88:	f7ff fb12 	bl	80035b0 <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e234      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x238>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2208      	movs	r2, #8
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d047      	beq.n	8004044 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2238      	movs	r2, #56	; 0x38
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b18      	cmp	r3, #24
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d03c      	beq.n	8004044 <HAL_RCC_OscConfig+0x2f4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d138      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e216      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d019      	beq.n	8004012 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003fde:	4b28      	ldr	r3, [pc, #160]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003fe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fe2:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7ff fae1 	bl	80035b0 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7ff fadc 	bl	80035b0 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1fe      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	2202      	movs	r2, #2
 800400c:	4013      	ands	r3, r2
 800400e:	d0f1      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x2a4>
 8004010:	e018      	b.n	8004044 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8004014:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8004018:	2101      	movs	r1, #1
 800401a:	438a      	bics	r2, r1
 800401c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7ff fac7 	bl	80035b0 <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004028:	f7ff fac2 	bl	80035b0 <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1e4      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	d1f1      	bne.n	8004028 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2204      	movs	r2, #4
 800404a:	4013      	ands	r3, r2
 800404c:	d100      	bne.n	8004050 <HAL_RCC_OscConfig+0x300>
 800404e:	e0c7      	b.n	80041e0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004050:	231f      	movs	r3, #31
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2238      	movs	r2, #56	; 0x38
 800405e:	4013      	ands	r3, r2
 8004060:	2b20      	cmp	r3, #32
 8004062:	d11f      	bne.n	80040a4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_OscConfig+0x330>)
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2202      	movs	r2, #2
 800406a:	4013      	ands	r3, r2
 800406c:	d100      	bne.n	8004070 <HAL_RCC_OscConfig+0x320>
 800406e:	e0b7      	b.n	80041e0 <HAL_RCC_OscConfig+0x490>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d000      	beq.n	800407a <HAL_RCC_OscConfig+0x32a>
 8004078:	e0b2      	b.n	80041e0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1c2      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	40021000 	.word	0x40021000
 8004084:	fffeffff 	.word	0xfffeffff
 8004088:	fffbffff 	.word	0xfffbffff
 800408c:	ffff80ff 	.word	0xffff80ff
 8004090:	ffffc7ff 	.word	0xffffc7ff
 8004094:	00f42400 	.word	0x00f42400
 8004098:	20000004 	.word	0x20000004
 800409c:	20000008 	.word	0x20000008
 80040a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a4:	4bb5      	ldr	r3, [pc, #724]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	055b      	lsls	r3, r3, #21
 80040ac:	4013      	ands	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x364>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x366>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4bb0      	ldr	r3, [pc, #704]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80040bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040be:	4baf      	ldr	r3, [pc, #700]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0549      	lsls	r1, r1, #21
 80040c4:	430a      	orrs	r2, r1
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80040c8:	4bac      	ldr	r3, [pc, #688]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80040ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	055b      	lsls	r3, r3, #21
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80040d6:	231f      	movs	r3, #31
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040de:	4ba8      	ldr	r3, [pc, #672]	; (8004380 <HAL_RCC_OscConfig+0x630>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	d11a      	bne.n	8004120 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ea:	4ba5      	ldr	r3, [pc, #660]	; (8004380 <HAL_RCC_OscConfig+0x630>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4ba4      	ldr	r3, [pc, #656]	; (8004380 <HAL_RCC_OscConfig+0x630>)
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	0049      	lsls	r1, r1, #1
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80040f8:	f7ff fa5a 	bl	80035b0 <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7ff fa55 	bl	80035b0 <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e177      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b9a      	ldr	r3, [pc, #616]	; (8004380 <HAL_RCC_OscConfig+0x630>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4013      	ands	r3, r2
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x3e6>
 8004128:	4b94      	ldr	r3, [pc, #592]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800412a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800412c:	4b93      	ldr	r3, [pc, #588]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800412e:	2101      	movs	r1, #1
 8004130:	430a      	orrs	r2, r1
 8004132:	65da      	str	r2, [r3, #92]	; 0x5c
 8004134:	e01c      	b.n	8004170 <HAL_RCC_OscConfig+0x420>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x408>
 800413e:	4b8f      	ldr	r3, [pc, #572]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004142:	4b8e      	ldr	r3, [pc, #568]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004144:	2104      	movs	r1, #4
 8004146:	430a      	orrs	r2, r1
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c
 800414a:	4b8c      	ldr	r3, [pc, #560]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800414c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	65da      	str	r2, [r3, #92]	; 0x5c
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0x420>
 8004158:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800415a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800415c:	4b87      	ldr	r3, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800415e:	2101      	movs	r1, #1
 8004160:	438a      	bics	r2, r1
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c
 8004164:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004168:	4b84      	ldr	r3, [pc, #528]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800416a:	2104      	movs	r1, #4
 800416c:	438a      	bics	r2, r1
 800416e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d014      	beq.n	80041a2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7ff fa1a 	bl	80035b0 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7ff fa15 	bl	80035b0 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	4a7d      	ldr	r2, [pc, #500]	; (8004384 <HAL_RCC_OscConfig+0x634>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e136      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004196:	4b79      	ldr	r3, [pc, #484]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x432>
 80041a0:	e013      	b.n	80041ca <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7ff fa05 	bl	80035b0 <HAL_GetTick>
 80041a6:	0003      	movs	r3, r0
 80041a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041aa:	e009      	b.n	80041c0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7ff fa00 	bl	80035b0 <HAL_GetTick>
 80041b0:	0002      	movs	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a73      	ldr	r2, [pc, #460]	; (8004384 <HAL_RCC_OscConfig+0x634>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e121      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c0:	4b6e      	ldr	r3, [pc, #440]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041ca:	231f      	movs	r3, #31
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041d4:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80041d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d8:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80041da:	496b      	ldr	r1, [pc, #428]	; (8004388 <HAL_RCC_OscConfig+0x638>)
 80041dc:	400a      	ands	r2, r1
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2220      	movs	r2, #32
 80041e6:	4013      	ands	r3, r2
 80041e8:	d039      	beq.n	800425e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01b      	beq.n	800422a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	03c9      	lsls	r1, r1, #15
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7ff f9d6 	bl	80035b0 <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800420a:	f7ff f9d1 	bl	80035b0 <HAL_GetTick>
 800420e:	0002      	movs	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0f3      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800421c:	4b57      	ldr	r3, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	4013      	ands	r3, r2
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x4ba>
 8004228:	e019      	b.n	800425e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004230:	4956      	ldr	r1, [pc, #344]	; (800438c <HAL_RCC_OscConfig+0x63c>)
 8004232:	400a      	ands	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7ff f9bb 	bl	80035b0 <HAL_GetTick>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004240:	f7ff f9b6 	bl	80035b0 <HAL_GetTick>
 8004244:	0002      	movs	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0d8      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	4013      	ands	r3, r2
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d100      	bne.n	8004268 <HAL_RCC_OscConfig+0x518>
 8004266:	e0cc      	b.n	8004402 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004268:	4b44      	ldr	r3, [pc, #272]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2238      	movs	r2, #56	; 0x38
 800426e:	4013      	ands	r3, r2
 8004270:	2b10      	cmp	r3, #16
 8004272:	d100      	bne.n	8004276 <HAL_RCC_OscConfig+0x526>
 8004274:	e07b      	b.n	800436e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d156      	bne.n	800432c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004284:	4942      	ldr	r1, [pc, #264]	; (8004390 <HAL_RCC_OscConfig+0x640>)
 8004286:	400a      	ands	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7ff f991 	bl	80035b0 <HAL_GetTick>
 800428e:	0003      	movs	r3, r0
 8004290:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7ff f98c 	bl	80035b0 <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0ae      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	049b      	lsls	r3, r3, #18
 80042ae:	4013      	ands	r3, r2
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a37      	ldr	r2, [pc, #220]	; (8004394 <HAL_RCC_OscConfig+0x644>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	431a      	orrs	r2, r3
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e6:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	0449      	lsls	r1, r1, #17
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	0549      	lsls	r1, r1, #21
 80042fe:	430a      	orrs	r2, r1
 8004300:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7ff f955 	bl	80035b0 <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7ff f950 	bl	80035b0 <HAL_GetTick>
 8004310:	0002      	movs	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e072      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	049b      	lsls	r3, r3, #18
 8004326:	4013      	ands	r3, r2
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x5bc>
 800432a:	e06a      	b.n	8004402 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004332:	4917      	ldr	r1, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x640>)
 8004334:	400a      	ands	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7ff f93a 	bl	80035b0 <HAL_GetTick>
 800433c:	0003      	movs	r3, r0
 800433e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7ff f935 	bl	80035b0 <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e057      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	049b      	lsls	r3, r3, #18
 800435c:	4013      	ands	r3, r2
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004366:	490c      	ldr	r1, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x648>)
 8004368:	400a      	ands	r2, r1
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e049      	b.n	8004402 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d112      	bne.n	800439c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e044      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	00001388 	.word	0x00001388
 8004388:	efffffff 	.word	0xefffffff
 800438c:	ffbfffff 	.word	0xffbfffff
 8004390:	feffffff 	.word	0xfeffffff
 8004394:	11c1808c 	.word	0x11c1808c
 8004398:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x6bc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2203      	movs	r2, #3
 80043a6:	401a      	ands	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d126      	bne.n	80043fe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2270      	movs	r2, #112	; 0x70
 80043b4:	401a      	ands	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11f      	bne.n	80043fe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	23fe      	movs	r3, #254	; 0xfe
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	401a      	ands	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d116      	bne.n	80043fe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	23f8      	movs	r3, #248	; 0xf8
 80043d4:	039b      	lsls	r3, r3, #14
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d10e      	bne.n	80043fe <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	23e0      	movs	r3, #224	; 0xe0
 80043e4:	051b      	lsls	r3, r3, #20
 80043e6:	401a      	ands	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	0f5b      	lsrs	r3, r3, #29
 80043f4:	075a      	lsls	r2, r3, #29
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b008      	add	sp, #32
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0e9      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2207      	movs	r2, #7
 800442a:	4013      	ands	r3, r2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d91e      	bls.n	8004470 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b73      	ldr	r3, [pc, #460]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2207      	movs	r2, #7
 8004438:	4393      	bics	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004444:	f7ff f8b4 	bl	80035b0 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800444c:	e009      	b.n	8004462 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7ff f8af 	bl	80035b0 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_RCC_ClockConfig+0x1f4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0ca      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004462:	4b67      	ldr	r3, [pc, #412]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2207      	movs	r2, #7
 8004468:	4013      	ands	r3, r2
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d015      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	4013      	ands	r3, r2
 8004482:	d006      	beq.n	8004492 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004484:	4b60      	ldr	r3, [pc, #384]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b5f      	ldr	r3, [pc, #380]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 800448a:	21e0      	movs	r1, #224	; 0xe0
 800448c:	01c9      	lsls	r1, r1, #7
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4a5d      	ldr	r2, [pc, #372]	; (800460c <HAL_RCC_ClockConfig+0x1fc>)
 8004498:	4013      	ands	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	4013      	ands	r3, r2
 80044ae:	d057      	beq.n	8004560 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	4013      	ands	r3, r2
 80044c2:	d12b      	bne.n	800451c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e097      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d0:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	049b      	lsls	r3, r3, #18
 80044d8:	4013      	ands	r3, r2
 80044da:	d11f      	bne.n	800451c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e08b      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e8:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4013      	ands	r3, r2
 80044f2:	d113      	bne.n	800451c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e07f      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d106      	bne.n	800450e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004500:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	2202      	movs	r2, #2
 8004506:	4013      	ands	r3, r2
 8004508:	d108      	bne.n	800451c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e074      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450e:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	2202      	movs	r2, #2
 8004514:	4013      	ands	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e06d      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451c:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2207      	movs	r2, #7
 8004522:	4393      	bics	r3, r2
 8004524:	0019      	movs	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7ff f83e 	bl	80035b0 <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004538:	e009      	b.n	800454e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453a:	f7ff f839 	bl	80035b0 <HAL_GetTick>
 800453e:	0002      	movs	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <HAL_RCC_ClockConfig+0x1f4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e054      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2238      	movs	r2, #56	; 0x38
 8004554:	401a      	ands	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	429a      	cmp	r2, r3
 800455e:	d1ec      	bne.n	800453a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2207      	movs	r2, #7
 8004566:	4013      	ands	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d21e      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2207      	movs	r2, #7
 8004574:	4393      	bics	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004580:	f7ff f816 	bl	80035b0 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004588:	e009      	b.n	800459e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458a:	f7ff f811 	bl	80035b0 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_RCC_ClockConfig+0x1f4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e02c      	b.n	80045f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2207      	movs	r2, #7
 80045a4:	4013      	ands	r3, r2
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2204      	movs	r2, #4
 80045b2:	4013      	ands	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_RCC_ClockConfig+0x200>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045ca:	f000 f829 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045ce:	0001      	movs	r1, r0
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	0a1b      	lsrs	r3, r3, #8
 80045d6:	220f      	movs	r2, #15
 80045d8:	401a      	ands	r2, r3
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x204>)
 80045dc:	0092      	lsls	r2, r2, #2
 80045de:	58d3      	ldr	r3, [r2, r3]
 80045e0:	221f      	movs	r2, #31
 80045e2:	4013      	ands	r3, r2
 80045e4:	000a      	movs	r2, r1
 80045e6:	40da      	lsrs	r2, r3
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x208>)
 80045ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x20c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fe ff81 	bl	80034f8 <HAL_InitTick>
 80045f6:	0003      	movs	r3, r0
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b004      	add	sp, #16
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40022000 	.word	0x40022000
 8004604:	00001388 	.word	0x00001388
 8004608:	40021000 	.word	0x40021000
 800460c:	fffff0ff 	.word	0xfffff0ff
 8004610:	ffff8fff 	.word	0xffff8fff
 8004614:	0800bf5c 	.word	0x0800bf5c
 8004618:	20000004 	.word	0x20000004
 800461c:	20000008 	.word	0x20000008

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004626:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2238      	movs	r2, #56	; 0x38
 800462c:	4013      	ands	r3, r2
 800462e:	d10f      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0adb      	lsrs	r3, r3, #11
 8004636:	2207      	movs	r2, #7
 8004638:	4013      	ands	r3, r2
 800463a:	2201      	movs	r2, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	0013      	movs	r3, r2
 8004640:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	4835      	ldr	r0, [pc, #212]	; (800471c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004646:	f7fb fd79 	bl	800013c <__udivsi3>
 800464a:	0003      	movs	r3, r0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e05d      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2238      	movs	r2, #56	; 0x38
 8004656:	4013      	ands	r3, r2
 8004658:	2b08      	cmp	r3, #8
 800465a:	d102      	bne.n	8004662 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <HAL_RCC_GetSysClockFreq+0x100>)
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e054      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004662:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2238      	movs	r2, #56	; 0x38
 8004668:	4013      	ands	r3, r2
 800466a:	2b10      	cmp	r3, #16
 800466c:	d138      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2203      	movs	r2, #3
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	2207      	movs	r2, #7
 8004680:	4013      	ands	r3, r2
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d10d      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4824      	ldr	r0, [pc, #144]	; (8004720 <HAL_RCC_GetSysClockFreq+0x100>)
 8004690:	f7fb fd54 	bl	800013c <__udivsi3>
 8004694:	0003      	movs	r3, r0
 8004696:	0019      	movs	r1, r3
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	227f      	movs	r2, #127	; 0x7f
 80046a0:	4013      	ands	r3, r2
 80046a2:	434b      	muls	r3, r1
 80046a4:	617b      	str	r3, [r7, #20]
        break;
 80046a6:	e00d      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	481c      	ldr	r0, [pc, #112]	; (800471c <HAL_RCC_GetSysClockFreq+0xfc>)
 80046ac:	f7fb fd46 	bl	800013c <__udivsi3>
 80046b0:	0003      	movs	r3, r0
 80046b2:	0019      	movs	r1, r3
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	227f      	movs	r2, #127	; 0x7f
 80046bc:	4013      	ands	r3, r2
 80046be:	434b      	muls	r3, r1
 80046c0:	617b      	str	r3, [r7, #20]
        break;
 80046c2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0f5b      	lsrs	r3, r3, #29
 80046ca:	2207      	movs	r2, #7
 80046cc:	4013      	ands	r3, r2
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f7fb fd31 	bl	800013c <__udivsi3>
 80046da:	0003      	movs	r3, r0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e015      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2238      	movs	r2, #56	; 0x38
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d103      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e00b      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2238      	movs	r2, #56	; 0x38
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b18      	cmp	r3, #24
 80046fe:	d103      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004700:	23fa      	movs	r3, #250	; 0xfa
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e001      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800470c:	693b      	ldr	r3, [r7, #16]
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b006      	add	sp, #24
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	40021000 	.word	0x40021000
 800471c:	00f42400 	.word	0x00f42400
 8004720:	007a1200 	.word	0x007a1200

08004724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <HAL_RCC_GetHCLKFreq+0x10>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	20000004 	.word	0x20000004

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800473c:	f7ff fff2 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004740:	0004      	movs	r4, r0
 8004742:	f7ff faf9 	bl	8003d38 <LL_RCC_GetAPB1Prescaler>
 8004746:	0003      	movs	r3, r0
 8004748:	0b1a      	lsrs	r2, r3, #12
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800474c:	0092      	lsls	r2, r2, #2
 800474e:	58d3      	ldr	r3, [r2, r3]
 8004750:	221f      	movs	r2, #31
 8004752:	4013      	ands	r3, r2
 8004754:	40dc      	lsrs	r4, r3
 8004756:	0023      	movs	r3, r4
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	bdb0      	pop	{r4, r5, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	0800bf9c 	.word	0x0800bf9c

08004764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800476c:	2313      	movs	r3, #19
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004774:	2312      	movs	r3, #18
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	4013      	ands	r3, r2
 8004786:	d100      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004788:	e0ad      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478a:	2011      	movs	r0, #17
 800478c:	183b      	adds	r3, r7, r0
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	055b      	lsls	r3, r3, #21
 800479a:	4013      	ands	r3, r2
 800479c:	d110      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0549      	lsls	r1, r1, #21
 80047a8:	430a      	orrs	r2, r1
 80047aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80047ac:	4b40      	ldr	r3, [pc, #256]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	055b      	lsls	r3, r3, #21
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	183b      	adds	r3, r7, r0
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	0049      	lsls	r1, r1, #1
 80047ca:	430a      	orrs	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ce:	f7fe feef 	bl	80035b0 <HAL_GetTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fe feea 	bl	80035b0 <HAL_GetTick>
 80047dc:	0002      	movs	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047e6:	2313      	movs	r3, #19
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2203      	movs	r2, #3
 80047ec:	701a      	strb	r2, [r3, #0]
        break;
 80047ee:	e005      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d0ed      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047fc:	2313      	movs	r3, #19
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d15e      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800480a:	23c0      	movs	r3, #192	; 0xc0
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4013      	ands	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	429a      	cmp	r2, r3
 8004820:	d014      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004828:	4013      	ands	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800482e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004830:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	0249      	lsls	r1, r1, #9
 8004836:	430a      	orrs	r2, r1
 8004838:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800483c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800483e:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004840:	491e      	ldr	r1, [pc, #120]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004842:	400a      	ands	r2, r1
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2201      	movs	r2, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d016      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe feac 	bl	80035b0 <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485c:	e00c      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fe fea7 	bl	80035b0 <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d904      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800486e:	2313      	movs	r3, #19
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2203      	movs	r2, #3
 8004874:	701a      	strb	r2, [r3, #0]
            break;
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	2202      	movs	r2, #2
 800487e:	4013      	ands	r3, r2
 8004880:	d0ed      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004882:	2313      	movs	r3, #19
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004892:	4013      	ands	r3, r2
 8004894:	0019      	movs	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800489c:	430a      	orrs	r2, r1
 800489e:	65da      	str	r2, [r3, #92]	; 0x5c
 80048a0:	e016      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048a2:	2312      	movs	r3, #18
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	2213      	movs	r2, #19
 80048a8:	18ba      	adds	r2, r7, r2
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e00f      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40007000 	.word	0x40007000
 80048b8:	fffffcff 	.word	0xfffffcff
 80048bc:	fffeffff 	.word	0xfffeffff
 80048c0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	2312      	movs	r3, #18
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2213      	movs	r2, #19
 80048ca:	18ba      	adds	r2, r7, r2
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d0:	2311      	movs	r3, #17
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4bb6      	ldr	r3, [pc, #728]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048de:	4bb5      	ldr	r3, [pc, #724]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e0:	49b5      	ldr	r1, [pc, #724]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80048e2:	400a      	ands	r2, r1
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f0:	4bb0      	ldr	r3, [pc, #704]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	2203      	movs	r2, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4bad      	ldr	r3, [pc, #692]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004900:	430a      	orrs	r2, r1
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490e:	4ba9      	ldr	r3, [pc, #676]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	220c      	movs	r2, #12
 8004914:	4393      	bics	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	4ba5      	ldr	r3, [pc, #660]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800491e:	430a      	orrs	r2, r1
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2204      	movs	r2, #4
 8004928:	4013      	ands	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492c:	4ba1      	ldr	r3, [pc, #644]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2230      	movs	r2, #48	; 0x30
 8004932:	4393      	bics	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	4b9e      	ldr	r3, [pc, #632]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800493c:	430a      	orrs	r2, r1
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2210      	movs	r2, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494a:	4b9a      	ldr	r3, [pc, #616]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	4a9b      	ldr	r2, [pc, #620]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	4b96      	ldr	r3, [pc, #600]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800495a:	430a      	orrs	r2, r1
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	015b      	lsls	r3, r3, #5
 8004966:	4013      	ands	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800496a:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	4a94      	ldr	r2, [pc, #592]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004970:	4013      	ands	r3, r2
 8004972:	0019      	movs	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	4b8e      	ldr	r3, [pc, #568]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800497a:	430a      	orrs	r2, r1
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4013      	ands	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498a:	4b8a      	ldr	r3, [pc, #552]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	4a8d      	ldr	r2, [pc, #564]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004998:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800499a:	430a      	orrs	r2, r1
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4013      	ands	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049aa:	4b82      	ldr	r3, [pc, #520]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	4a86      	ldr	r2, [pc, #536]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	0019      	movs	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ba:	430a      	orrs	r2, r1
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2220      	movs	r2, #32
 80049c4:	4013      	ands	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c8:	4b7a      	ldr	r3, [pc, #488]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	4a7f      	ldr	r2, [pc, #508]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	0019      	movs	r1, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2240      	movs	r2, #64	; 0x40
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e6:	4b73      	ldr	r3, [pc, #460]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	4a79      	ldr	r2, [pc, #484]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	01db      	lsls	r3, r3, #7
 8004a02:	4013      	ands	r3, r2
 8004a04:	d015      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a06:	4b6b      	ldr	r3, [pc, #428]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	0899      	lsrs	r1, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a12:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a14:	430a      	orrs	r2, r1
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	05db      	lsls	r3, r3, #23
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d106      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a24:	4b63      	ldr	r3, [pc, #396]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a2a:	2180      	movs	r1, #128	; 0x80
 8004a2c:	0249      	lsls	r1, r1, #9
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a3e:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	2240      	movs	r2, #64	; 0x40
 8004a44:	4393      	bics	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	039b      	lsls	r3, r3, #14
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a5e:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	4a5c      	ldr	r2, [pc, #368]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6c:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	03db      	lsls	r3, r3, #15
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d106      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	0449      	lsls	r1, r1, #17
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	03db      	lsls	r3, r3, #15
 8004a94:	4013      	ands	r3, r2
 8004a96:	d016      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a98:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	4a4e      	ldr	r2, [pc, #312]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	045b      	lsls	r3, r3, #17
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	0449      	lsls	r1, r1, #17
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d014      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ad2:	4b38      	ldr	r3, [pc, #224]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	4393      	bics	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d106      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	0249      	lsls	r1, r1, #9
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	019b      	lsls	r3, r3, #6
 8004b04:	4013      	ands	r3, r2
 8004b06:	d014      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	220c      	movs	r2, #12
 8004b0e:	4393      	bics	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d106      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b24:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0249      	lsls	r1, r1, #9
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	045b      	lsls	r3, r3, #17
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d016      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	0449      	lsls	r1, r1, #17
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	049b      	lsls	r3, r3, #18
 8004b74:	4013      	ands	r3, r2
 8004b76:	d016      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0449      	lsls	r1, r1, #17
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ba6:	2312      	movs	r3, #18
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	781b      	ldrb	r3, [r3, #0]
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b006      	add	sp, #24
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	efffffff 	.word	0xefffffff
 8004bbc:	fffff3ff 	.word	0xfffff3ff
 8004bc0:	fffffcff 	.word	0xfffffcff
 8004bc4:	fff3ffff 	.word	0xfff3ffff
 8004bc8:	ffcfffff 	.word	0xffcfffff
 8004bcc:	ffffcfff 	.word	0xffffcfff
 8004bd0:	ffff3fff 	.word	0xffff3fff
 8004bd4:	ffbfffff 	.word	0xffbfffff
 8004bd8:	feffffff 	.word	0xfeffffff

08004bdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bdc:	b5b0      	push	{r4, r5, r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d100      	bne.n	8004bf4 <HAL_RTC_Init+0x18>
 8004bf2:	e08c      	b.n	8004d0e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2229      	movs	r2, #41	; 0x29
 8004bf8:	5c9b      	ldrb	r3, [r3, r2]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2228      	movs	r2, #40	; 0x28
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2288      	movs	r2, #136	; 0x88
 8004c0c:	0212      	lsls	r2, r2, #8
 8004c0e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fe f8ea 	bl	8002dec <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2229      	movs	r2, #41	; 0x29
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2210      	movs	r2, #16
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d062      	beq.n	8004cf4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	22ca      	movs	r2, #202	; 0xca
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2253      	movs	r2, #83	; 0x53
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004c3e:	250f      	movs	r5, #15
 8004c40:	197c      	adds	r4, r7, r5
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 fbfb 	bl	8005440 <RTC_EnterInitMode>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004c4e:	0028      	movs	r0, r5
 8004c50:	183b      	adds	r3, r7, r0
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d12c      	bne.n	8004cb2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	492e      	ldr	r1, [pc, #184]	; (8004d1c <HAL_RTC_Init+0x140>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6912      	ldr	r2, [r2, #16]
 8004c8e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6919      	ldr	r1, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	041a      	lsls	r2, r3, #16
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ca4:	183c      	adds	r4, r7, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fc0b 	bl	80054c4 <RTC_ExitInitMode>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004cb2:	230f      	movs	r3, #15
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	00d2      	lsls	r2, r2, #3
 8004cc8:	08d2      	lsrs	r2, r2, #3
 8004cca:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	22ff      	movs	r2, #255	; 0xff
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cf2:	e003      	b.n	8004cfc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004cfc:	230f      	movs	r3, #15
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2229      	movs	r2, #41	; 0x29
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d1c:	fb8fffbf 	.word	0xfb8fffbf

08004d20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2228      	movs	r2, #40	; 0x28
 8004d30:	5c9b      	ldrb	r3, [r3, r2]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_RTC_SetTime+0x1a>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e092      	b.n	8004e60 <HAL_RTC_SetTime+0x140>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2228      	movs	r2, #40	; 0x28
 8004d3e:	2101      	movs	r1, #1
 8004d40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2229      	movs	r2, #41	; 0x29
 8004d46:	2102      	movs	r1, #2
 8004d48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	22ca      	movs	r2, #202	; 0xca
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2253      	movs	r2, #83	; 0x53
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d5a:	2513      	movs	r5, #19
 8004d5c:	197c      	adds	r4, r7, r5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fb6d 	bl	8005440 <RTC_EnterInitMode>
 8004d66:	0003      	movs	r3, r0
 8004d68:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004d6a:	197b      	adds	r3, r7, r5
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d162      	bne.n	8004e38 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d125      	bne.n	8004dc4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	4013      	ands	r3, r2
 8004d82:	d102      	bne.n	8004d8a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 fbdc 	bl	800554c <RTC_ByteToBcd2>
 8004d94:	0003      	movs	r3, r0
 8004d96:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 fbd5 	bl	800554c <RTC_ByteToBcd2>
 8004da2:	0003      	movs	r3, r0
 8004da4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004da6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	789b      	ldrb	r3, [r3, #2]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 fbcd 	bl	800554c <RTC_ByteToBcd2>
 8004db2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004db4:	0022      	movs	r2, r4
 8004db6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e017      	b.n	8004df4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2240      	movs	r2, #64	; 0x40
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d102      	bne.n	8004dd6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004de2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004de8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <HAL_RTC_SetTime+0x148>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4918      	ldr	r1, [pc, #96]	; (8004e6c <HAL_RTC_SetTime+0x14c>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e28:	2313      	movs	r3, #19
 8004e2a:	18fc      	adds	r4, r7, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fb48 	bl	80054c4 <RTC_ExitInitMode>
 8004e34:	0003      	movs	r3, r0
 8004e36:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	22ff      	movs	r2, #255	; 0xff
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004e40:	2313      	movs	r3, #19
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2229      	movs	r2, #41	; 0x29
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2228      	movs	r2, #40	; 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

  return status;
 8004e5a:	2313      	movs	r3, #19
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b006      	add	sp, #24
 8004e66:	bdb0      	pop	{r4, r5, r7, pc}
 8004e68:	007f7f7f 	.word	0x007f7f7f
 8004e6c:	fffbffff 	.word	0xfffbffff

08004e70 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	045b      	lsls	r3, r3, #17
 8004e8e:	0c5a      	lsrs	r2, r3, #17
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <HAL_RTC_GetTime+0xb4>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	223f      	movs	r2, #63	; 0x3f
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	227f      	movs	r2, #127	; 0x7f
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	227f      	movs	r2, #127	; 0x7f
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	0d9b      	lsrs	r3, r3, #22
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11a      	bne.n	8004f1a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fb57 	bl	800559c <RTC_Bcd2ToByte>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fb4e 	bl	800559c <RTC_Bcd2ToByte>
 8004f00:	0003      	movs	r3, r0
 8004f02:	001a      	movs	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	789b      	ldrb	r3, [r3, #2]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fb45 	bl	800559c <RTC_Bcd2ToByte>
 8004f12:	0003      	movs	r3, r0
 8004f14:	001a      	movs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b006      	add	sp, #24
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	007f7f7f 	.word	0x007f7f7f

08004f28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f28:	b5b0      	push	{r4, r5, r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2228      	movs	r2, #40	; 0x28
 8004f38:	5c9b      	ldrb	r3, [r3, r2]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_RTC_SetDate+0x1a>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e07e      	b.n	8005040 <HAL_RTC_SetDate+0x118>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2228      	movs	r2, #40	; 0x28
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2229      	movs	r2, #41	; 0x29
 8004f4e:	2102      	movs	r1, #2
 8004f50:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <HAL_RTC_SetDate+0x4e>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	2310      	movs	r3, #16
 8004f60:	4013      	ands	r3, r2
 8004f62:	d008      	beq.n	8004f76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	330a      	adds	r3, #10
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11c      	bne.n	8004fb6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f000 fae3 	bl	800554c <RTC_ByteToBcd2>
 8004f86:	0003      	movs	r3, r0
 8004f88:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f000 fadc 	bl	800554c <RTC_ByteToBcd2>
 8004f94:	0003      	movs	r3, r0
 8004f96:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f98:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	789b      	ldrb	r3, [r3, #2]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fad4 	bl	800554c <RTC_ByteToBcd2>
 8004fa4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fa6:	0022      	movs	r2, r4
 8004fa8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e00e      	b.n	8004fd4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	78db      	ldrb	r3, [r3, #3]
 8004fba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004fc2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004fc8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	22ca      	movs	r2, #202	; 0xca
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2253      	movs	r2, #83	; 0x53
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fe4:	2513      	movs	r5, #19
 8004fe6:	197c      	adds	r4, r7, r5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 fa28 	bl	8005440 <RTC_EnterInitMode>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004ff4:	0028      	movs	r0, r5
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4910      	ldr	r1, [pc, #64]	; (8005048 <HAL_RTC_SetDate+0x120>)
 8005006:	400a      	ands	r2, r1
 8005008:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800500a:	183c      	adds	r4, r7, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	0018      	movs	r0, r3
 8005010:	f000 fa58 	bl	80054c4 <RTC_ExitInitMode>
 8005014:	0003      	movs	r3, r0
 8005016:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005020:	2313      	movs	r3, #19
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2229      	movs	r2, #41	; 0x29
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2228      	movs	r2, #40	; 0x28
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]

  return status;
 800503a:	2313      	movs	r3, #19
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	781b      	ldrb	r3, [r3, #0]
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bdb0      	pop	{r4, r5, r7, pc}
 8005048:	00ffff3f 	.word	0x00ffff3f

0800504c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <HAL_RTC_GetDate+0x98>)
 8005060:	4013      	ands	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	0a1b      	lsrs	r3, r3, #8
 8005072:	b2db      	uxtb	r3, r3
 8005074:	221f      	movs	r2, #31
 8005076:	4013      	ands	r3, r2
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	223f      	movs	r2, #63	; 0x3f
 8005084:	4013      	ands	r3, r2
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	0b5b      	lsrs	r3, r3, #13
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2207      	movs	r2, #7
 8005094:	4013      	ands	r3, r2
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11a      	bne.n	80050d8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	78db      	ldrb	r3, [r3, #3]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 fa78 	bl	800559c <RTC_Bcd2ToByte>
 80050ac:	0003      	movs	r3, r0
 80050ae:	001a      	movs	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 fa6f 	bl	800559c <RTC_Bcd2ToByte>
 80050be:	0003      	movs	r3, r0
 80050c0:	001a      	movs	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	789b      	ldrb	r3, [r3, #2]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 fa66 	bl	800559c <RTC_Bcd2ToByte>
 80050d0:	0003      	movs	r3, r0
 80050d2:	001a      	movs	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b006      	add	sp, #24
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	00ffff3f 	.word	0x00ffff3f

080050e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b089      	sub	sp, #36	; 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2228      	movs	r2, #40	; 0x28
 80050f8:	5c9b      	ldrb	r3, [r3, r2]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_RTC_SetAlarm_IT+0x1a>
 80050fe:	2302      	movs	r3, #2
 8005100:	e127      	b.n	8005352 <HAL_RTC_SetAlarm_IT+0x26a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2228      	movs	r2, #40	; 0x28
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2229      	movs	r2, #41	; 0x29
 800510e:	2102      	movs	r1, #2
 8005110:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d136      	bne.n	8005186 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	4013      	ands	r3, r2
 8005122:	d102      	bne.n	800512a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	0018      	movs	r0, r3
 8005130:	f000 fa0c 	bl	800554c <RTC_ByteToBcd2>
 8005134:	0003      	movs	r3, r0
 8005136:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fa05 	bl	800554c <RTC_ByteToBcd2>
 8005142:	0003      	movs	r3, r0
 8005144:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005146:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	789b      	ldrb	r3, [r3, #2]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f9fd 	bl	800554c <RTC_ByteToBcd2>
 8005152:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005154:	0022      	movs	r2, r4
 8005156:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	78db      	ldrb	r3, [r3, #3]
 800515c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800515e:	431a      	orrs	r2, r3
 8005160:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2220      	movs	r2, #32
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 f9ef 	bl	800554c <RTC_ByteToBcd2>
 800516e:	0003      	movs	r3, r0
 8005170:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005172:	0022      	movs	r2, r4
 8005174:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800517a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005180:	4313      	orrs	r3, r2
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	e022      	b.n	80051cc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2240      	movs	r2, #64	; 0x40
 800518e:	4013      	ands	r3, r2
 8005190:	d102      	bne.n	8005198 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051a4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2120      	movs	r1, #32
 80051b8:	5c5b      	ldrb	r3, [r3, r1]
 80051ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	22ca      	movs	r2, #202	; 0xca
 80051de:	625a      	str	r2, [r3, #36]	; 0x24
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2253      	movs	r2, #83	; 0x53
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d14c      	bne.n	800528e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4957      	ldr	r1, [pc, #348]	; (800535c <HAL_RTC_SetAlarm_IT+0x274>)
 8005200:	400a      	ands	r2, r1
 8005202:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2101      	movs	r1, #1
 8005210:	430a      	orrs	r2, r1
 8005212:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005214:	f7fe f9cc 	bl	80035b0 <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800521c:	e016      	b.n	800524c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800521e:	f7fe f9c7 	bl	80035b0 <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	23fa      	movs	r3, #250	; 0xfa
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	429a      	cmp	r2, r3
 800522e:	d90d      	bls.n	800524c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2229      	movs	r2, #41	; 0x29
 800523c:	2103      	movs	r1, #3
 800523e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2228      	movs	r2, #40	; 0x28
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e082      	b.n	8005352 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d0e2      	beq.n	800521e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0049      	lsls	r1, r1, #1
 8005276:	430a      	orrs	r2, r1
 8005278:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0149      	lsls	r1, r1, #5
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
 800528c:	e04b      	b.n	8005326 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4931      	ldr	r1, [pc, #196]	; (8005360 <HAL_RTC_SetAlarm_IT+0x278>)
 800529a:	400a      	ands	r2, r1
 800529c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2102      	movs	r1, #2
 80052aa:	430a      	orrs	r2, r1
 80052ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80052ae:	f7fe f97f 	bl	80035b0 <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052b6:	e016      	b.n	80052e6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052b8:	f7fe f97a 	bl	80035b0 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	23fa      	movs	r3, #250	; 0xfa
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d90d      	bls.n	80052e6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	22ff      	movs	r2, #255	; 0xff
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2229      	movs	r2, #41	; 0x29
 80052d6:	2103      	movs	r1, #3
 80052d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2228      	movs	r2, #40	; 0x28
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e035      	b.n	8005352 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2202      	movs	r2, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d0e2      	beq.n	80052b8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	0089      	lsls	r1, r1, #2
 8005310:	430a      	orrs	r2, r1
 8005312:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	0189      	lsls	r1, r1, #6
 8005322:	430a      	orrs	r2, r1
 8005324:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005326:	4a0f      	ldr	r2, [pc, #60]	; (8005364 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	58d3      	ldr	r3, [r2, r3]
 800532c:	490d      	ldr	r1, [pc, #52]	; (8005364 <HAL_RTC_SetAlarm_IT+0x27c>)
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	0312      	lsls	r2, r2, #12
 8005332:	4313      	orrs	r3, r2
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2229      	movs	r2, #41	; 0x29
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2228      	movs	r2, #40	; 0x28
 800534c:	2100      	movs	r1, #0
 800534e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b009      	add	sp, #36	; 0x24
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	fffffeff 	.word	0xfffffeff
 8005360:	fffffdff 	.word	0xfffffdff
 8005364:	40021800 	.word	0x40021800

08005368 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	015b      	lsls	r3, r3, #5
 800537a:	4013      	ands	r3, r2
 800537c:	d011      	beq.n	80053a2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	2201      	movs	r2, #1
 8005386:	4013      	ands	r3, r2
 8005388:	d00b      	beq.n	80053a2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2101      	movs	r1, #1
 8005396:	430a      	orrs	r2, r1
 8005398:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f000 f821 	bl	80053e4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	019b      	lsls	r3, r3, #6
 80053ac:	4013      	ands	r3, r2
 80053ae:	d011      	beq.n	80053d4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2202      	movs	r2, #2
 80053b8:	4013      	ands	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2102      	movs	r1, #2
 80053c8:	430a      	orrs	r2, r1
 80053ca:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 f901 	bl	80055d6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2229      	movs	r2, #41	; 0x29
 80053d8:	2101      	movs	r1, #1
 80053da:	5499      	strb	r1, [r3, r2]
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0e      	ldr	r2, [pc, #56]	; (800543c <HAL_RTC_WaitForSynchro+0x48>)
 8005402:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005404:	f7fe f8d4 	bl	80035b0 <HAL_GetTick>
 8005408:	0003      	movs	r3, r0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800540c:	e00a      	b.n	8005424 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800540e:	f7fe f8cf 	bl	80035b0 <HAL_GetTick>
 8005412:	0002      	movs	r2, r0
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	23fa      	movs	r3, #250	; 0xfa
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d901      	bls.n	8005424 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	4013      	ands	r3, r2
 800542e:	d0ee      	beq.n	800540e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b004      	add	sp, #16
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	0001005f 	.word	0x0001005f

08005440 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005448:	230f      	movs	r3, #15
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2240      	movs	r2, #64	; 0x40
 8005458:	4013      	ands	r3, r2
 800545a:	d12c      	bne.n	80054b6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	430a      	orrs	r2, r1
 800546a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800546c:	f7fe f8a0 	bl	80035b0 <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005474:	e014      	b.n	80054a0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005476:	f7fe f89b 	bl	80035b0 <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	200f      	movs	r0, #15
 8005482:	183b      	adds	r3, r7, r0
 8005484:	1839      	adds	r1, r7, r0
 8005486:	7809      	ldrb	r1, [r1, #0]
 8005488:	7019      	strb	r1, [r3, #0]
 800548a:	23fa      	movs	r3, #250	; 0xfa
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	429a      	cmp	r2, r3
 8005490:	d906      	bls.n	80054a0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005492:	183b      	adds	r3, r7, r0
 8005494:	2203      	movs	r2, #3
 8005496:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2229      	movs	r2, #41	; 0x29
 800549c:	2103      	movs	r1, #3
 800549e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	4013      	ands	r3, r2
 80054aa:	d104      	bne.n	80054b6 <RTC_EnterInitMode+0x76>
 80054ac:	230f      	movs	r3, #15
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d1df      	bne.n	8005476 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054b6:	230f      	movs	r3, #15
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	781b      	ldrb	r3, [r3, #0]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b004      	add	sp, #16
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	240f      	movs	r4, #15
 80054ce:	193b      	adds	r3, r7, r4
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80054d4:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <RTC_ExitInitMode+0x84>)
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <RTC_ExitInitMode+0x84>)
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	438a      	bics	r2, r1
 80054de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <RTC_ExitInitMode+0x84>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2220      	movs	r2, #32
 80054e6:	4013      	ands	r3, r2
 80054e8:	d10d      	bne.n	8005506 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff ff81 	bl	80053f4 <HAL_RTC_WaitForSynchro>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d021      	beq.n	800553a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2229      	movs	r2, #41	; 0x29
 80054fa:	2103      	movs	r1, #3
 80054fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054fe:	193b      	adds	r3, r7, r4
 8005500:	2203      	movs	r2, #3
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e019      	b.n	800553a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <RTC_ExitInitMode+0x84>)
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <RTC_ExitInitMode+0x84>)
 800550c:	2120      	movs	r1, #32
 800550e:	438a      	bics	r2, r1
 8005510:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff ff6d 	bl	80053f4 <HAL_RTC_WaitForSynchro>
 800551a:	1e03      	subs	r3, r0, #0
 800551c:	d007      	beq.n	800552e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2229      	movs	r2, #41	; 0x29
 8005522:	2103      	movs	r1, #3
 8005524:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2203      	movs	r2, #3
 800552c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <RTC_ExitInitMode+0x84>)
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <RTC_ExitInitMode+0x84>)
 8005534:	2120      	movs	r1, #32
 8005536:	430a      	orrs	r2, r1
 8005538:	619a      	str	r2, [r3, #24]
  }

  return status;
 800553a:	230f      	movs	r3, #15
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	781b      	ldrb	r3, [r3, #0]
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b005      	add	sp, #20
 8005546:	bd90      	pop	{r4, r7, pc}
 8005548:	40002800 	.word	0x40002800

0800554c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	0002      	movs	r2, r0
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800555c:	230b      	movs	r3, #11
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	1dfa      	adds	r2, r7, #7
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005566:	e008      	b.n	800557a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800556e:	220b      	movs	r2, #11
 8005570:	18bb      	adds	r3, r7, r2
 8005572:	18ba      	adds	r2, r7, r2
 8005574:	7812      	ldrb	r2, [r2, #0]
 8005576:	3a0a      	subs	r2, #10
 8005578:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800557a:	210b      	movs	r1, #11
 800557c:	187b      	adds	r3, r7, r1
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b09      	cmp	r3, #9
 8005582:	d8f1      	bhi.n	8005568 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	b2da      	uxtb	r2, r3
 800558c:	187b      	adds	r3, r7, r1
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	b2db      	uxtb	r3, r3
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b004      	add	sp, #16
 800559a:	bd80      	pop	{r7, pc}

0800559c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	0002      	movs	r2, r0
 80055a4:	1dfb      	adds	r3, r7, #7
 80055a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	001a      	movs	r2, r3
 80055b2:	0013      	movs	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	210f      	movs	r1, #15
 80055c6:	400b      	ands	r3, r1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	18d3      	adds	r3, r2, r3
 80055cc:	b2db      	uxtb	r3, r3
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b004      	add	sp, #16
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b002      	add	sp, #8
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0a8      	b.n	800574c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	2382      	movs	r3, #130	; 0x82
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	429a      	cmp	r2, r3
 800560c:	d009      	beq.n	8005622 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	61da      	str	r2, [r3, #28]
 8005614:	e005      	b.n	8005622 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	225d      	movs	r2, #93	; 0x5d
 800562c:	5c9b      	ldrb	r3, [r3, r2]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	225c      	movs	r2, #92	; 0x5c
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	0018      	movs	r0, r3
 8005640:	f7fd fc1a 	bl	8002e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	225d      	movs	r2, #93	; 0x5d
 8005648:	2102      	movs	r1, #2
 800564a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	438a      	bics	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	23e0      	movs	r3, #224	; 0xe0
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	429a      	cmp	r2, r3
 8005666:	d902      	bls.n	800566e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e002      	b.n	8005674 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	015b      	lsls	r3, r3, #5
 8005672:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	23f0      	movs	r3, #240	; 0xf0
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	429a      	cmp	r2, r3
 800567e:	d008      	beq.n	8005692 <HAL_SPI_Init+0xaa>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	23e0      	movs	r3, #224	; 0xe0
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	429a      	cmp	r2, r3
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	2382      	movs	r3, #130	; 0x82
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	401a      	ands	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6899      	ldr	r1, [r3, #8]
 80056a0:	2384      	movs	r3, #132	; 0x84
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	400b      	ands	r3, r1
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2102      	movs	r1, #2
 80056ae:	400b      	ands	r3, r1
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2101      	movs	r1, #1
 80056b8:	400b      	ands	r3, r1
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6999      	ldr	r1, [r3, #24]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	400b      	ands	r3, r1
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2138      	movs	r1, #56	; 0x38
 80056ce:	400b      	ands	r3, r1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	400b      	ands	r3, r1
 80056da:	431a      	orrs	r2, r3
 80056dc:	0011      	movs	r1, r2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	401a      	ands	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	2204      	movs	r2, #4
 80056f8:	401a      	ands	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2110      	movs	r1, #16
 8005700:	400b      	ands	r3, r1
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	2108      	movs	r1, #8
 800570a:	400b      	ands	r3, r1
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	23f0      	movs	r3, #240	; 0xf0
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	400b      	ands	r3, r1
 8005718:	431a      	orrs	r2, r3
 800571a:	0011      	movs	r1, r2
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	015b      	lsls	r3, r3, #5
 8005722:	401a      	ands	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4907      	ldr	r1, [pc, #28]	; (8005754 <HAL_SPI_Init+0x16c>)
 8005738:	400a      	ands	r2, r1
 800573a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	225d      	movs	r2, #93	; 0x5d
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	b004      	add	sp, #16
 8005752:	bd80      	pop	{r7, pc}
 8005754:	fffff7ff 	.word	0xfffff7ff

08005758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e04a      	b.n	8005800 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	223d      	movs	r2, #61	; 0x3d
 800576e:	5c9b      	ldrb	r3, [r3, r2]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	223c      	movs	r2, #60	; 0x3c
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f7fd fbc3 	bl	8002f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223d      	movs	r2, #61	; 0x3d
 800578a:	2102      	movs	r1, #2
 800578c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	0019      	movs	r1, r3
 8005798:	0010      	movs	r0, r2
 800579a:	f000 f9ed 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2248      	movs	r2, #72	; 0x48
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	223e      	movs	r2, #62	; 0x3e
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	223f      	movs	r2, #63	; 0x3f
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2240      	movs	r2, #64	; 0x40
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2241      	movs	r2, #65	; 0x41
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2242      	movs	r2, #66	; 0x42
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2243      	movs	r2, #67	; 0x43
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2244      	movs	r2, #68	; 0x44
 80057da:	2101      	movs	r1, #1
 80057dc:	5499      	strb	r1, [r3, r2]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2245      	movs	r2, #69	; 0x45
 80057e2:	2101      	movs	r1, #1
 80057e4:	5499      	strb	r1, [r3, r2]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2246      	movs	r2, #70	; 0x46
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2247      	movs	r2, #71	; 0x47
 80057f2:	2101      	movs	r1, #1
 80057f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	223d      	movs	r2, #61	; 0x3d
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	223d      	movs	r2, #61	; 0x3d
 8005814:	5c9b      	ldrb	r3, [r3, r2]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e047      	b.n	80058b0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	223d      	movs	r2, #61	; 0x3d
 8005824:	2102      	movs	r1, #2
 8005826:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2101      	movs	r1, #1
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d014      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x64>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	05db      	lsls	r3, r3, #23
 800584a:	429a      	cmp	r2, r3
 800584c:	d00e      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x64>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1a      	ldr	r2, [pc, #104]	; (80058bc <HAL_TIM_Base_Start_IT+0xb4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x64>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x64>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d116      	bne.n	800589a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d016      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0xa4>
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	025b      	lsls	r3, r3, #9
 8005884:	429a      	cmp	r2, r3
 8005886:	d011      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2101      	movs	r1, #1
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005898:	e008      	b.n	80058ac <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e000      	b.n	80058ae <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40014000 	.word	0x40014000
 80058c8:	00010007 	.word	0x00010007

080058cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	438a      	bics	r2, r1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	4a0d      	ldr	r2, [pc, #52]	; (8005920 <HAL_TIM_Base_Stop_IT+0x54>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	d10d      	bne.n	800590c <HAL_TIM_Base_Stop_IT+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <HAL_TIM_Base_Stop_IT+0x58>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	d107      	bne.n	800590c <HAL_TIM_Base_Stop_IT+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2101      	movs	r1, #1
 8005908:	438a      	bics	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	223d      	movs	r2, #61	; 0x3d
 8005910:	2101      	movs	r1, #1
 8005912:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b002      	add	sp, #8
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	00001111 	.word	0x00001111
 8005924:	00000444 	.word	0x00000444

08005928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2202      	movs	r2, #2
 8005944:	4013      	ands	r3, r2
 8005946:	d021      	beq.n	800598c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2202      	movs	r2, #2
 800594c:	4013      	ands	r3, r2
 800594e:	d01d      	beq.n	800598c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2203      	movs	r2, #3
 8005956:	4252      	negs	r2, r2
 8005958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2203      	movs	r2, #3
 8005968:	4013      	ands	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 f8ea 	bl	8005b48 <HAL_TIM_IC_CaptureCallback>
 8005974:	e007      	b.n	8005986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f000 f8dd 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0018      	movs	r0, r3
 8005982:	f000 f8e9 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2204      	movs	r2, #4
 8005990:	4013      	ands	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2204      	movs	r2, #4
 8005998:	4013      	ands	r3, r2
 800599a:	d01e      	beq.n	80059da <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2205      	movs	r2, #5
 80059a2:	4252      	negs	r2, r2
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	23c0      	movs	r3, #192	; 0xc0
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4013      	ands	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f8c3 	bl	8005b48 <HAL_TIM_IC_CaptureCallback>
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 f8b6 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f8c2 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2208      	movs	r2, #8
 80059de:	4013      	ands	r3, r2
 80059e0:	d021      	beq.n	8005a26 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2208      	movs	r2, #8
 80059e6:	4013      	ands	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2209      	movs	r2, #9
 80059f0:	4252      	negs	r2, r2
 80059f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2204      	movs	r2, #4
 80059f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	2203      	movs	r2, #3
 8005a02:	4013      	ands	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f89d 	bl	8005b48 <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f890 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 f89c 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2210      	movs	r2, #16
 8005a32:	4013      	ands	r3, r2
 8005a34:	d01e      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2211      	movs	r2, #17
 8005a3c:	4252      	negs	r2, r2
 8005a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2208      	movs	r2, #8
 8005a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	23c0      	movs	r3, #192	; 0xc0
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4013      	ands	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 f876 	bl	8005b48 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e007      	b.n	8005a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 f869 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f000 f875 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00c      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4013      	ands	r3, r2
 8005a82:	d008      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7fd f957 	bl	8002d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d104      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	019b      	lsls	r3, r3, #6
 8005aa4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	4013      	ands	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_TIM_IRQHandler+0x208>)
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 f972 	bl	8005da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <HAL_TIM_IRQHandler+0x20c>)
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 f969 	bl	8005db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2240      	movs	r2, #64	; 0x40
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d00c      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2240      	movs	r2, #64	; 0x40
 8005aee:	4013      	ands	r3, r2
 8005af0:	d008      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2241      	movs	r2, #65	; 0x41
 8005af8:	4252      	negs	r2, r2
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 f832 	bl	8005b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2220      	movs	r2, #32
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d00c      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	4013      	ands	r3, r2
 8005b12:	d008      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2221      	movs	r2, #33	; 0x21
 8005b1a:	4252      	negs	r2, r2
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 f937 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b004      	add	sp, #16
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	ffffdf7f 	.word	0xffffdf7f
 8005b34:	fffffeff 	.word	0xfffffeff

08005b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b002      	add	sp, #8
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b60:	46c0      	nop			; (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b002      	add	sp, #8
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b002      	add	sp, #8
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a3f      	ldr	r2, [pc, #252]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00c      	beq.n	8005baa <TIM_Base_SetConfig+0x32>
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	05db      	lsls	r3, r3, #23
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0x32>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0x32>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2270      	movs	r2, #112	; 0x70
 8005bae:	4393      	bics	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a32      	ldr	r2, [pc, #200]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d01c      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	05db      	lsls	r3, r3, #23
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d017      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2e      	ldr	r2, [pc, #184]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00f      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2b      	ldr	r2, [pc, #172]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x86>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	4393      	bics	r3, r2
 8005c16:	001a      	movs	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <TIM_Base_SetConfig+0xde>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <TIM_Base_SetConfig+0xde>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_Base_SetConfig+0xde>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d103      	bne.n	8005c5e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d106      	bne.n	8005c7e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4393      	bics	r3, r2
 8005c78:	001a      	movs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]
  }
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b004      	add	sp, #16
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40002000 	.word	0x40002000
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800
 8005ca4:	fffffcff 	.word	0xfffffcff

08005ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	223c      	movs	r2, #60	; 0x3c
 8005cb6:	5c9b      	ldrb	r3, [r3, r2]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e05a      	b.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	223c      	movs	r2, #60	; 0x3c
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223d      	movs	r2, #61	; 0x3d
 8005ccc:	2102      	movs	r1, #2
 8005cce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d108      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2270      	movs	r2, #112	; 0x70
 8005d00:	4393      	bics	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d014      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	05db      	lsls	r3, r3, #23
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10c      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	4393      	bics	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	223d      	movs	r2, #61	; 0x3d
 8005d68:	2101      	movs	r1, #1
 8005d6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	223c      	movs	r2, #60	; 0x3c
 8005d70:	2100      	movs	r1, #0
 8005d72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	ff0fffff 	.word	0xff0fffff
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800
 8005d90:	40014000 	.word	0x40014000

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b002      	add	sp, #8
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b002      	add	sp, #8
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e046      	b.n	8005e64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2288      	movs	r2, #136	; 0x88
 8005dda:	589b      	ldr	r3, [r3, r2]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2284      	movs	r2, #132	; 0x84
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7fd f8b4 	bl	8002f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2288      	movs	r2, #136	; 0x88
 8005df4:	2124      	movs	r1, #36	; 0x24
 8005df6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2101      	movs	r1, #1
 8005e04:	438a      	bics	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 fd4c 	bl	80068b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 f9f2 	bl	8006204 <UART_SetConfig>
 8005e20:	0003      	movs	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e01c      	b.n	8005e64 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	490d      	ldr	r1, [pc, #52]	; (8005e6c <HAL_UART_Init+0xa8>)
 8005e36:	400a      	ands	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	212a      	movs	r1, #42	; 0x2a
 8005e46:	438a      	bics	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2101      	movs	r1, #1
 8005e56:	430a      	orrs	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 fddb 	bl	8006a18 <UART_CheckIdleState>
 8005e62:	0003      	movs	r3, r0
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	ffffb7ff 	.word	0xffffb7ff

08005e70 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e032      	b.n	8005ee8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2288      	movs	r2, #136	; 0x88
 8005e86:	2124      	movs	r1, #36	; 0x24
 8005e88:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	438a      	bics	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fd f97b 	bl	80031b0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2290      	movs	r2, #144	; 0x90
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2288      	movs	r2, #136	; 0x88
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	228c      	movs	r2, #140	; 0x8c
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2284      	movs	r2, #132	; 0x84
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	0018      	movs	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b002      	add	sp, #8
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	1dbb      	adds	r3, r7, #6
 8005efe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2288      	movs	r2, #136	; 0x88
 8005f04:	589b      	ldr	r3, [r3, r2]
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d000      	beq.n	8005f0c <HAL_UART_Transmit+0x1c>
 8005f0a:	e090      	b.n	800602e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_UART_Transmit+0x2a>
 8005f12:	1dbb      	adds	r3, r7, #6
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e088      	b.n	8006030 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	015b      	lsls	r3, r3, #5
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d109      	bne.n	8005f3e <HAL_UART_Transmit+0x4e>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	d001      	beq.n	8005f3e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e078      	b.n	8006030 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2290      	movs	r2, #144	; 0x90
 8005f42:	2100      	movs	r1, #0
 8005f44:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2288      	movs	r2, #136	; 0x88
 8005f4a:	2121      	movs	r1, #33	; 0x21
 8005f4c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4e:	f7fd fb2f 	bl	80035b0 <HAL_GetTick>
 8005f52:	0003      	movs	r3, r0
 8005f54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1dba      	adds	r2, r7, #6
 8005f5a:	2154      	movs	r1, #84	; 0x54
 8005f5c:	8812      	ldrh	r2, [r2, #0]
 8005f5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	1dba      	adds	r2, r7, #6
 8005f64:	2156      	movs	r1, #86	; 0x56
 8005f66:	8812      	ldrh	r2, [r2, #0]
 8005f68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d108      	bne.n	8005f88 <HAL_UART_Transmit+0x98>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	e003      	b.n	8005f90 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f90:	e030      	b.n	8005ff4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	0013      	movs	r3, r2
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	f000 fde4 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8005fa4:	1e03      	subs	r3, r0, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2288      	movs	r2, #136	; 0x88
 8005fac:	2120      	movs	r1, #32
 8005fae:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e03d      	b.n	8006030 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	05d2      	lsls	r2, r2, #23
 8005fc6:	0dd2      	lsrs	r2, r2, #23
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	e007      	b.n	8005fe2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2256      	movs	r2, #86	; 0x56
 8005fe6:	5a9b      	ldrh	r3, [r3, r2]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b299      	uxth	r1, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2256      	movs	r2, #86	; 0x56
 8005ff2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2256      	movs	r2, #86	; 0x56
 8005ff8:	5a9b      	ldrh	r3, [r3, r2]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1c8      	bne.n	8005f92 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	0013      	movs	r3, r2
 800600a:	2200      	movs	r2, #0
 800600c:	2140      	movs	r1, #64	; 0x40
 800600e:	f000 fdad 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006012:	1e03      	subs	r3, r0, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2288      	movs	r2, #136	; 0x88
 800601a:	2120      	movs	r1, #32
 800601c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2288      	movs	r2, #136	; 0x88
 8006026:	2120      	movs	r1, #32
 8006028:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b008      	add	sp, #32
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	228c      	movs	r2, #140	; 0x8c
 800604c:	589b      	ldr	r3, [r3, r2]
 800604e:	2b20      	cmp	r3, #32
 8006050:	d000      	beq.n	8006054 <HAL_UART_Receive+0x1c>
 8006052:	e0d0      	b.n	80061f6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_UART_Receive+0x2a>
 800605a:	1dbb      	adds	r3, r7, #6
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0c8      	b.n	80061f8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	015b      	lsls	r3, r3, #5
 800606e:	429a      	cmp	r2, r3
 8006070:	d109      	bne.n	8006086 <HAL_UART_Receive+0x4e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d105      	bne.n	8006086 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2201      	movs	r2, #1
 800607e:	4013      	ands	r3, r2
 8006080:	d001      	beq.n	8006086 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e0b8      	b.n	80061f8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2290      	movs	r2, #144	; 0x90
 800608a:	2100      	movs	r1, #0
 800608c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	228c      	movs	r2, #140	; 0x8c
 8006092:	2122      	movs	r1, #34	; 0x22
 8006094:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800609c:	f7fd fa88 	bl	80035b0 <HAL_GetTick>
 80060a0:	0003      	movs	r3, r0
 80060a2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1dba      	adds	r2, r7, #6
 80060a8:	215c      	movs	r1, #92	; 0x5c
 80060aa:	8812      	ldrh	r2, [r2, #0]
 80060ac:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1dba      	adds	r2, r7, #6
 80060b2:	215e      	movs	r1, #94	; 0x5e
 80060b4:	8812      	ldrh	r2, [r2, #0]
 80060b6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d10d      	bne.n	80060e0 <HAL_UART_Receive+0xa8>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <HAL_UART_Receive+0x9e>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2260      	movs	r2, #96	; 0x60
 80060d0:	494b      	ldr	r1, [pc, #300]	; (8006200 <HAL_UART_Receive+0x1c8>)
 80060d2:	5299      	strh	r1, [r3, r2]
 80060d4:	e02e      	b.n	8006134 <HAL_UART_Receive+0xfc>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2260      	movs	r2, #96	; 0x60
 80060da:	21ff      	movs	r1, #255	; 0xff
 80060dc:	5299      	strh	r1, [r3, r2]
 80060de:	e029      	b.n	8006134 <HAL_UART_Receive+0xfc>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <HAL_UART_Receive+0xcc>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <HAL_UART_Receive+0xc2>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2260      	movs	r2, #96	; 0x60
 80060f4:	21ff      	movs	r1, #255	; 0xff
 80060f6:	5299      	strh	r1, [r3, r2]
 80060f8:	e01c      	b.n	8006134 <HAL_UART_Receive+0xfc>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2260      	movs	r2, #96	; 0x60
 80060fe:	217f      	movs	r1, #127	; 0x7f
 8006100:	5299      	strh	r1, [r3, r2]
 8006102:	e017      	b.n	8006134 <HAL_UART_Receive+0xfc>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	055b      	lsls	r3, r3, #21
 800610c:	429a      	cmp	r2, r3
 800610e:	d10d      	bne.n	800612c <HAL_UART_Receive+0xf4>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <HAL_UART_Receive+0xea>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2260      	movs	r2, #96	; 0x60
 800611c:	217f      	movs	r1, #127	; 0x7f
 800611e:	5299      	strh	r1, [r3, r2]
 8006120:	e008      	b.n	8006134 <HAL_UART_Receive+0xfc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2260      	movs	r2, #96	; 0x60
 8006126:	213f      	movs	r1, #63	; 0x3f
 8006128:	5299      	strh	r1, [r3, r2]
 800612a:	e003      	b.n	8006134 <HAL_UART_Receive+0xfc>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2260      	movs	r2, #96	; 0x60
 8006130:	2100      	movs	r1, #0
 8006132:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006134:	2312      	movs	r3, #18
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	2160      	movs	r1, #96	; 0x60
 800613c:	5a52      	ldrh	r2, [r2, r1]
 800613e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	015b      	lsls	r3, r3, #5
 8006148:	429a      	cmp	r2, r3
 800614a:	d108      	bne.n	800615e <HAL_UART_Receive+0x126>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e003      	b.n	8006166 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006166:	e03a      	b.n	80061de <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	0013      	movs	r3, r2
 8006172:	2200      	movs	r2, #0
 8006174:	2120      	movs	r1, #32
 8006176:	f000 fcf9 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 800617a:	1e03      	subs	r3, r0, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	228c      	movs	r2, #140	; 0x8c
 8006182:	2120      	movs	r1, #32
 8006184:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e036      	b.n	80061f8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10e      	bne.n	80061ae <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	b29b      	uxth	r3, r3
 8006198:	2212      	movs	r2, #18
 800619a:	18ba      	adds	r2, r7, r2
 800619c:	8812      	ldrh	r2, [r2, #0]
 800619e:	4013      	ands	r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	3302      	adds	r3, #2
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	e00e      	b.n	80061cc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2212      	movs	r2, #18
 80061b8:	18ba      	adds	r2, r7, r2
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	4013      	ands	r3, r2
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	225e      	movs	r2, #94	; 0x5e
 80061d0:	5a9b      	ldrh	r3, [r3, r2]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b299      	uxth	r1, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	225e      	movs	r2, #94	; 0x5e
 80061dc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	225e      	movs	r2, #94	; 0x5e
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1be      	bne.n	8006168 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	228c      	movs	r2, #140	; 0x8c
 80061ee:	2120      	movs	r1, #32
 80061f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b008      	add	sp, #32
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	000001ff 	.word	0x000001ff

08006204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b090      	sub	sp, #64	; 0x40
 8006208:	af00      	add	r7, sp, #0
 800620a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800620c:	231a      	movs	r3, #26
 800620e:	2220      	movs	r2, #32
 8006210:	189b      	adds	r3, r3, r2
 8006212:	19db      	adds	r3, r3, r7
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	431a      	orrs	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4ac1      	ldr	r2, [pc, #772]	; (800653c <UART_SetConfig+0x338>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	430b      	orrs	r3, r1
 8006244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4abc      	ldr	r2, [pc, #752]	; (8006540 <UART_SetConfig+0x33c>)
 800624e:	4013      	ands	r3, r2
 8006250:	0018      	movs	r0, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	0003      	movs	r3, r0
 800625c:	430b      	orrs	r3, r1
 800625e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4ab6      	ldr	r2, [pc, #728]	; (8006544 <UART_SetConfig+0x340>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <UART_SetConfig+0x80>
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4ab4      	ldr	r2, [pc, #720]	; (8006548 <UART_SetConfig+0x344>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006280:	4313      	orrs	r3, r2
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4ab0      	ldr	r2, [pc, #704]	; (800654c <UART_SetConfig+0x348>)
 800628c:	4013      	ands	r3, r2
 800628e:	0019      	movs	r1, r3
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	430b      	orrs	r3, r1
 8006298:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	220f      	movs	r2, #15
 80062a2:	4393      	bics	r3, r2
 80062a4:	0018      	movs	r0, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	0003      	movs	r3, r0
 80062b0:	430b      	orrs	r3, r1
 80062b2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4aa5      	ldr	r2, [pc, #660]	; (8006550 <UART_SetConfig+0x34c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d131      	bne.n	8006322 <UART_SetConfig+0x11e>
 80062be:	4ba5      	ldr	r3, [pc, #660]	; (8006554 <UART_SetConfig+0x350>)
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	2203      	movs	r2, #3
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d01d      	beq.n	8006306 <UART_SetConfig+0x102>
 80062ca:	d823      	bhi.n	8006314 <UART_SetConfig+0x110>
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d00c      	beq.n	80062ea <UART_SetConfig+0xe6>
 80062d0:	d820      	bhi.n	8006314 <UART_SetConfig+0x110>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <UART_SetConfig+0xd8>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d00e      	beq.n	80062f8 <UART_SetConfig+0xf4>
 80062da:	e01b      	b.n	8006314 <UART_SetConfig+0x110>
 80062dc:	231b      	movs	r3, #27
 80062de:	2220      	movs	r2, #32
 80062e0:	189b      	adds	r3, r3, r2
 80062e2:	19db      	adds	r3, r3, r7
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e154      	b.n	8006594 <UART_SetConfig+0x390>
 80062ea:	231b      	movs	r3, #27
 80062ec:	2220      	movs	r2, #32
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	2202      	movs	r2, #2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e14d      	b.n	8006594 <UART_SetConfig+0x390>
 80062f8:	231b      	movs	r3, #27
 80062fa:	2220      	movs	r2, #32
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	2204      	movs	r2, #4
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e146      	b.n	8006594 <UART_SetConfig+0x390>
 8006306:	231b      	movs	r3, #27
 8006308:	2220      	movs	r2, #32
 800630a:	189b      	adds	r3, r3, r2
 800630c:	19db      	adds	r3, r3, r7
 800630e:	2208      	movs	r2, #8
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	e13f      	b.n	8006594 <UART_SetConfig+0x390>
 8006314:	231b      	movs	r3, #27
 8006316:	2220      	movs	r2, #32
 8006318:	189b      	adds	r3, r3, r2
 800631a:	19db      	adds	r3, r3, r7
 800631c:	2210      	movs	r2, #16
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e138      	b.n	8006594 <UART_SetConfig+0x390>
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a8c      	ldr	r2, [pc, #560]	; (8006558 <UART_SetConfig+0x354>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d131      	bne.n	8006390 <UART_SetConfig+0x18c>
 800632c:	4b89      	ldr	r3, [pc, #548]	; (8006554 <UART_SetConfig+0x350>)
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	220c      	movs	r2, #12
 8006332:	4013      	ands	r3, r2
 8006334:	2b0c      	cmp	r3, #12
 8006336:	d01d      	beq.n	8006374 <UART_SetConfig+0x170>
 8006338:	d823      	bhi.n	8006382 <UART_SetConfig+0x17e>
 800633a:	2b08      	cmp	r3, #8
 800633c:	d00c      	beq.n	8006358 <UART_SetConfig+0x154>
 800633e:	d820      	bhi.n	8006382 <UART_SetConfig+0x17e>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <UART_SetConfig+0x146>
 8006344:	2b04      	cmp	r3, #4
 8006346:	d00e      	beq.n	8006366 <UART_SetConfig+0x162>
 8006348:	e01b      	b.n	8006382 <UART_SetConfig+0x17e>
 800634a:	231b      	movs	r3, #27
 800634c:	2220      	movs	r2, #32
 800634e:	189b      	adds	r3, r3, r2
 8006350:	19db      	adds	r3, r3, r7
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e11d      	b.n	8006594 <UART_SetConfig+0x390>
 8006358:	231b      	movs	r3, #27
 800635a:	2220      	movs	r2, #32
 800635c:	189b      	adds	r3, r3, r2
 800635e:	19db      	adds	r3, r3, r7
 8006360:	2202      	movs	r2, #2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e116      	b.n	8006594 <UART_SetConfig+0x390>
 8006366:	231b      	movs	r3, #27
 8006368:	2220      	movs	r2, #32
 800636a:	189b      	adds	r3, r3, r2
 800636c:	19db      	adds	r3, r3, r7
 800636e:	2204      	movs	r2, #4
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	e10f      	b.n	8006594 <UART_SetConfig+0x390>
 8006374:	231b      	movs	r3, #27
 8006376:	2220      	movs	r2, #32
 8006378:	189b      	adds	r3, r3, r2
 800637a:	19db      	adds	r3, r3, r7
 800637c:	2208      	movs	r2, #8
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e108      	b.n	8006594 <UART_SetConfig+0x390>
 8006382:	231b      	movs	r3, #27
 8006384:	2220      	movs	r2, #32
 8006386:	189b      	adds	r3, r3, r2
 8006388:	19db      	adds	r3, r3, r7
 800638a:	2210      	movs	r2, #16
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e101      	b.n	8006594 <UART_SetConfig+0x390>
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a71      	ldr	r2, [pc, #452]	; (800655c <UART_SetConfig+0x358>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d131      	bne.n	80063fe <UART_SetConfig+0x1fa>
 800639a:	4b6e      	ldr	r3, [pc, #440]	; (8006554 <UART_SetConfig+0x350>)
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	2230      	movs	r2, #48	; 0x30
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b30      	cmp	r3, #48	; 0x30
 80063a4:	d01d      	beq.n	80063e2 <UART_SetConfig+0x1de>
 80063a6:	d823      	bhi.n	80063f0 <UART_SetConfig+0x1ec>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d00c      	beq.n	80063c6 <UART_SetConfig+0x1c2>
 80063ac:	d820      	bhi.n	80063f0 <UART_SetConfig+0x1ec>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <UART_SetConfig+0x1b4>
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d00e      	beq.n	80063d4 <UART_SetConfig+0x1d0>
 80063b6:	e01b      	b.n	80063f0 <UART_SetConfig+0x1ec>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2220      	movs	r2, #32
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	19db      	adds	r3, r3, r7
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e0e6      	b.n	8006594 <UART_SetConfig+0x390>
 80063c6:	231b      	movs	r3, #27
 80063c8:	2220      	movs	r2, #32
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	19db      	adds	r3, r3, r7
 80063ce:	2202      	movs	r2, #2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e0df      	b.n	8006594 <UART_SetConfig+0x390>
 80063d4:	231b      	movs	r3, #27
 80063d6:	2220      	movs	r2, #32
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	19db      	adds	r3, r3, r7
 80063dc:	2204      	movs	r2, #4
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e0d8      	b.n	8006594 <UART_SetConfig+0x390>
 80063e2:	231b      	movs	r3, #27
 80063e4:	2220      	movs	r2, #32
 80063e6:	189b      	adds	r3, r3, r2
 80063e8:	19db      	adds	r3, r3, r7
 80063ea:	2208      	movs	r2, #8
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e0d1      	b.n	8006594 <UART_SetConfig+0x390>
 80063f0:	231b      	movs	r3, #27
 80063f2:	2220      	movs	r2, #32
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	19db      	adds	r3, r3, r7
 80063f8:	2210      	movs	r2, #16
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e0ca      	b.n	8006594 <UART_SetConfig+0x390>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a57      	ldr	r2, [pc, #348]	; (8006560 <UART_SetConfig+0x35c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d106      	bne.n	8006416 <UART_SetConfig+0x212>
 8006408:	231b      	movs	r3, #27
 800640a:	2220      	movs	r2, #32
 800640c:	189b      	adds	r3, r3, r2
 800640e:	19db      	adds	r3, r3, r7
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	e0be      	b.n	8006594 <UART_SetConfig+0x390>
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a52      	ldr	r2, [pc, #328]	; (8006564 <UART_SetConfig+0x360>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d106      	bne.n	800642e <UART_SetConfig+0x22a>
 8006420:	231b      	movs	r3, #27
 8006422:	2220      	movs	r2, #32
 8006424:	189b      	adds	r3, r3, r2
 8006426:	19db      	adds	r3, r3, r7
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e0b2      	b.n	8006594 <UART_SetConfig+0x390>
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a4d      	ldr	r2, [pc, #308]	; (8006568 <UART_SetConfig+0x364>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d106      	bne.n	8006446 <UART_SetConfig+0x242>
 8006438:	231b      	movs	r3, #27
 800643a:	2220      	movs	r2, #32
 800643c:	189b      	adds	r3, r3, r2
 800643e:	19db      	adds	r3, r3, r7
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e0a6      	b.n	8006594 <UART_SetConfig+0x390>
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3e      	ldr	r2, [pc, #248]	; (8006544 <UART_SetConfig+0x340>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d13e      	bne.n	80064ce <UART_SetConfig+0x2ca>
 8006450:	4b40      	ldr	r3, [pc, #256]	; (8006554 <UART_SetConfig+0x350>)
 8006452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006454:	23c0      	movs	r3, #192	; 0xc0
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	4013      	ands	r3, r2
 800645a:	22c0      	movs	r2, #192	; 0xc0
 800645c:	0112      	lsls	r2, r2, #4
 800645e:	4293      	cmp	r3, r2
 8006460:	d027      	beq.n	80064b2 <UART_SetConfig+0x2ae>
 8006462:	22c0      	movs	r2, #192	; 0xc0
 8006464:	0112      	lsls	r2, r2, #4
 8006466:	4293      	cmp	r3, r2
 8006468:	d82a      	bhi.n	80064c0 <UART_SetConfig+0x2bc>
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	0112      	lsls	r2, r2, #4
 800646e:	4293      	cmp	r3, r2
 8006470:	d011      	beq.n	8006496 <UART_SetConfig+0x292>
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	4293      	cmp	r3, r2
 8006478:	d822      	bhi.n	80064c0 <UART_SetConfig+0x2bc>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <UART_SetConfig+0x284>
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	00d2      	lsls	r2, r2, #3
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <UART_SetConfig+0x2a0>
 8006486:	e01b      	b.n	80064c0 <UART_SetConfig+0x2bc>
 8006488:	231b      	movs	r3, #27
 800648a:	2220      	movs	r2, #32
 800648c:	189b      	adds	r3, r3, r2
 800648e:	19db      	adds	r3, r3, r7
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e07e      	b.n	8006594 <UART_SetConfig+0x390>
 8006496:	231b      	movs	r3, #27
 8006498:	2220      	movs	r2, #32
 800649a:	189b      	adds	r3, r3, r2
 800649c:	19db      	adds	r3, r3, r7
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e077      	b.n	8006594 <UART_SetConfig+0x390>
 80064a4:	231b      	movs	r3, #27
 80064a6:	2220      	movs	r2, #32
 80064a8:	189b      	adds	r3, r3, r2
 80064aa:	19db      	adds	r3, r3, r7
 80064ac:	2204      	movs	r2, #4
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	e070      	b.n	8006594 <UART_SetConfig+0x390>
 80064b2:	231b      	movs	r3, #27
 80064b4:	2220      	movs	r2, #32
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	19db      	adds	r3, r3, r7
 80064ba:	2208      	movs	r2, #8
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e069      	b.n	8006594 <UART_SetConfig+0x390>
 80064c0:	231b      	movs	r3, #27
 80064c2:	2220      	movs	r2, #32
 80064c4:	189b      	adds	r3, r3, r2
 80064c6:	19db      	adds	r3, r3, r7
 80064c8:	2210      	movs	r2, #16
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e062      	b.n	8006594 <UART_SetConfig+0x390>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1d      	ldr	r2, [pc, #116]	; (8006548 <UART_SetConfig+0x344>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d157      	bne.n	8006588 <UART_SetConfig+0x384>
 80064d8:	4b1e      	ldr	r3, [pc, #120]	; (8006554 <UART_SetConfig+0x350>)
 80064da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064dc:	23c0      	movs	r3, #192	; 0xc0
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4013      	ands	r3, r2
 80064e2:	22c0      	movs	r2, #192	; 0xc0
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d040      	beq.n	800656c <UART_SetConfig+0x368>
 80064ea:	22c0      	movs	r2, #192	; 0xc0
 80064ec:	0092      	lsls	r2, r2, #2
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d843      	bhi.n	800657a <UART_SetConfig+0x376>
 80064f2:	2280      	movs	r2, #128	; 0x80
 80064f4:	0092      	lsls	r2, r2, #2
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d011      	beq.n	800651e <UART_SetConfig+0x31a>
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	4293      	cmp	r3, r2
 8006500:	d83b      	bhi.n	800657a <UART_SetConfig+0x376>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <UART_SetConfig+0x30c>
 8006506:	2280      	movs	r2, #128	; 0x80
 8006508:	0052      	lsls	r2, r2, #1
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <UART_SetConfig+0x328>
 800650e:	e034      	b.n	800657a <UART_SetConfig+0x376>
 8006510:	231b      	movs	r3, #27
 8006512:	2220      	movs	r2, #32
 8006514:	189b      	adds	r3, r3, r2
 8006516:	19db      	adds	r3, r3, r7
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e03a      	b.n	8006594 <UART_SetConfig+0x390>
 800651e:	231b      	movs	r3, #27
 8006520:	2220      	movs	r2, #32
 8006522:	189b      	adds	r3, r3, r2
 8006524:	19db      	adds	r3, r3, r7
 8006526:	2202      	movs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e033      	b.n	8006594 <UART_SetConfig+0x390>
 800652c:	231b      	movs	r3, #27
 800652e:	2220      	movs	r2, #32
 8006530:	189b      	adds	r3, r3, r2
 8006532:	19db      	adds	r3, r3, r7
 8006534:	2204      	movs	r2, #4
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e02c      	b.n	8006594 <UART_SetConfig+0x390>
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	cfff69f3 	.word	0xcfff69f3
 8006540:	ffffcfff 	.word	0xffffcfff
 8006544:	40008000 	.word	0x40008000
 8006548:	40008400 	.word	0x40008400
 800654c:	11fff4ff 	.word	0x11fff4ff
 8006550:	40013800 	.word	0x40013800
 8006554:	40021000 	.word	0x40021000
 8006558:	40004400 	.word	0x40004400
 800655c:	40004800 	.word	0x40004800
 8006560:	40004c00 	.word	0x40004c00
 8006564:	40005000 	.word	0x40005000
 8006568:	40013c00 	.word	0x40013c00
 800656c:	231b      	movs	r3, #27
 800656e:	2220      	movs	r2, #32
 8006570:	189b      	adds	r3, r3, r2
 8006572:	19db      	adds	r3, r3, r7
 8006574:	2208      	movs	r2, #8
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e00c      	b.n	8006594 <UART_SetConfig+0x390>
 800657a:	231b      	movs	r3, #27
 800657c:	2220      	movs	r2, #32
 800657e:	189b      	adds	r3, r3, r2
 8006580:	19db      	adds	r3, r3, r7
 8006582:	2210      	movs	r2, #16
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e005      	b.n	8006594 <UART_SetConfig+0x390>
 8006588:	231b      	movs	r3, #27
 800658a:	2220      	movs	r2, #32
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	2210      	movs	r2, #16
 8006592:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4ac1      	ldr	r2, [pc, #772]	; (80068a0 <UART_SetConfig+0x69c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d005      	beq.n	80065aa <UART_SetConfig+0x3a6>
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4ac0      	ldr	r2, [pc, #768]	; (80068a4 <UART_SetConfig+0x6a0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d000      	beq.n	80065aa <UART_SetConfig+0x3a6>
 80065a8:	e093      	b.n	80066d2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065aa:	231b      	movs	r3, #27
 80065ac:	2220      	movs	r2, #32
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	19db      	adds	r3, r3, r7
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d015      	beq.n	80065e4 <UART_SetConfig+0x3e0>
 80065b8:	dc18      	bgt.n	80065ec <UART_SetConfig+0x3e8>
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d00d      	beq.n	80065da <UART_SetConfig+0x3d6>
 80065be:	dc15      	bgt.n	80065ec <UART_SetConfig+0x3e8>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <UART_SetConfig+0x3c6>
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d005      	beq.n	80065d4 <UART_SetConfig+0x3d0>
 80065c8:	e010      	b.n	80065ec <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ca:	f7fe f8b5 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 80065ce:	0003      	movs	r3, r0
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d2:	e014      	b.n	80065fe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d4:	4bb4      	ldr	r3, [pc, #720]	; (80068a8 <UART_SetConfig+0x6a4>)
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d8:	e011      	b.n	80065fe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065da:	f7fe f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80065de:	0003      	movs	r3, r0
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e2:	e00c      	b.n	80065fe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e4:	2380      	movs	r3, #128	; 0x80
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ea:	e008      	b.n	80065fe <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80065f0:	231a      	movs	r3, #26
 80065f2:	2220      	movs	r2, #32
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	19db      	adds	r3, r3, r7
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
        break;
 80065fc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d100      	bne.n	8006606 <UART_SetConfig+0x402>
 8006604:	e135      	b.n	8006872 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660a:	4ba8      	ldr	r3, [pc, #672]	; (80068ac <UART_SetConfig+0x6a8>)
 800660c:	0052      	lsls	r2, r2, #1
 800660e:	5ad3      	ldrh	r3, [r2, r3]
 8006610:	0019      	movs	r1, r3
 8006612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006614:	f7f9 fd92 	bl	800013c <__udivsi3>
 8006618:	0003      	movs	r3, r0
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	0013      	movs	r3, r2
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	189b      	adds	r3, r3, r2
 8006626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006628:	429a      	cmp	r2, r3
 800662a:	d305      	bcc.n	8006638 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006634:	429a      	cmp	r2, r3
 8006636:	d906      	bls.n	8006646 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006638:	231a      	movs	r3, #26
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e044      	b.n	80066d0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	2300      	movs	r3, #0
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006652:	4b96      	ldr	r3, [pc, #600]	; (80068ac <UART_SetConfig+0x6a8>)
 8006654:	0052      	lsls	r2, r2, #1
 8006656:	5ad3      	ldrh	r3, [r2, r3]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	69f9      	ldr	r1, [r7, #28]
 8006666:	f7f9 ff1d 	bl	80004a4 <__aeabi_uldivmod>
 800666a:	0002      	movs	r2, r0
 800666c:	000b      	movs	r3, r1
 800666e:	0e11      	lsrs	r1, r2, #24
 8006670:	021d      	lsls	r5, r3, #8
 8006672:	430d      	orrs	r5, r1
 8006674:	0214      	lsls	r4, r2, #8
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68b8      	ldr	r0, [r7, #8]
 8006684:	68f9      	ldr	r1, [r7, #12]
 8006686:	1900      	adds	r0, r0, r4
 8006688:	4169      	adcs	r1, r5
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f7f9 ff04 	bl	80004a4 <__aeabi_uldivmod>
 800669c:	0002      	movs	r2, r0
 800669e:	000b      	movs	r3, r1
 80066a0:	0013      	movs	r3, r2
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a6:	23c0      	movs	r3, #192	; 0xc0
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d309      	bcc.n	80066c2 <UART_SetConfig+0x4be>
 80066ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	035b      	lsls	r3, r3, #13
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d204      	bcs.n	80066c2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066be:	60da      	str	r2, [r3, #12]
 80066c0:	e006      	b.n	80066d0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80066c2:	231a      	movs	r3, #26
 80066c4:	2220      	movs	r2, #32
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	19db      	adds	r3, r3, r7
 80066ca:	2201      	movs	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80066ce:	e0d0      	b.n	8006872 <UART_SetConfig+0x66e>
 80066d0:	e0cf      	b.n	8006872 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	429a      	cmp	r2, r3
 80066dc:	d000      	beq.n	80066e0 <UART_SetConfig+0x4dc>
 80066de:	e070      	b.n	80067c2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80066e0:	231b      	movs	r3, #27
 80066e2:	2220      	movs	r2, #32
 80066e4:	189b      	adds	r3, r3, r2
 80066e6:	19db      	adds	r3, r3, r7
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d015      	beq.n	800671a <UART_SetConfig+0x516>
 80066ee:	dc18      	bgt.n	8006722 <UART_SetConfig+0x51e>
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d00d      	beq.n	8006710 <UART_SetConfig+0x50c>
 80066f4:	dc15      	bgt.n	8006722 <UART_SetConfig+0x51e>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <UART_SetConfig+0x4fc>
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d005      	beq.n	800670a <UART_SetConfig+0x506>
 80066fe:	e010      	b.n	8006722 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006700:	f7fe f81a 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8006704:	0003      	movs	r3, r0
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006708:	e014      	b.n	8006734 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800670a:	4b67      	ldr	r3, [pc, #412]	; (80068a8 <UART_SetConfig+0x6a4>)
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800670e:	e011      	b.n	8006734 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006710:	f7fd ff86 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8006714:	0003      	movs	r3, r0
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006718:	e00c      	b.n	8006734 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006720:	e008      	b.n	8006734 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006726:	231a      	movs	r3, #26
 8006728:	2220      	movs	r2, #32
 800672a:	189b      	adds	r3, r3, r2
 800672c:	19db      	adds	r3, r3, r7
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
        break;
 8006732:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	2b00      	cmp	r3, #0
 8006738:	d100      	bne.n	800673c <UART_SetConfig+0x538>
 800673a:	e09a      	b.n	8006872 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006740:	4b5a      	ldr	r3, [pc, #360]	; (80068ac <UART_SetConfig+0x6a8>)
 8006742:	0052      	lsls	r2, r2, #1
 8006744:	5ad3      	ldrh	r3, [r2, r3]
 8006746:	0019      	movs	r1, r3
 8006748:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800674a:	f7f9 fcf7 	bl	800013c <__udivsi3>
 800674e:	0003      	movs	r3, r0
 8006750:	005a      	lsls	r2, r3, #1
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	18d2      	adds	r2, r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	0019      	movs	r1, r3
 8006760:	0010      	movs	r0, r2
 8006762:	f7f9 fceb 	bl	800013c <__udivsi3>
 8006766:	0003      	movs	r3, r0
 8006768:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d921      	bls.n	80067b4 <UART_SetConfig+0x5b0>
 8006770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	025b      	lsls	r3, r3, #9
 8006776:	429a      	cmp	r2, r3
 8006778:	d21c      	bcs.n	80067b4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	b29a      	uxth	r2, r3
 800677e:	200e      	movs	r0, #14
 8006780:	2420      	movs	r4, #32
 8006782:	1903      	adds	r3, r0, r4
 8006784:	19db      	adds	r3, r3, r7
 8006786:	210f      	movs	r1, #15
 8006788:	438a      	bics	r2, r1
 800678a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	2207      	movs	r2, #7
 8006794:	4013      	ands	r3, r2
 8006796:	b299      	uxth	r1, r3
 8006798:	1903      	adds	r3, r0, r4
 800679a:	19db      	adds	r3, r3, r7
 800679c:	1902      	adds	r2, r0, r4
 800679e:	19d2      	adds	r2, r2, r7
 80067a0:	8812      	ldrh	r2, [r2, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1902      	adds	r2, r0, r4
 80067ac:	19d2      	adds	r2, r2, r7
 80067ae:	8812      	ldrh	r2, [r2, #0]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	e05e      	b.n	8006872 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80067b4:	231a      	movs	r3, #26
 80067b6:	2220      	movs	r2, #32
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e057      	b.n	8006872 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067c2:	231b      	movs	r3, #27
 80067c4:	2220      	movs	r2, #32
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d015      	beq.n	80067fc <UART_SetConfig+0x5f8>
 80067d0:	dc18      	bgt.n	8006804 <UART_SetConfig+0x600>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00d      	beq.n	80067f2 <UART_SetConfig+0x5ee>
 80067d6:	dc15      	bgt.n	8006804 <UART_SetConfig+0x600>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <UART_SetConfig+0x5de>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0x5e8>
 80067e0:	e010      	b.n	8006804 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e2:	f7fd ffa9 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 80067e6:	0003      	movs	r3, r0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ea:	e014      	b.n	8006816 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ec:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <UART_SetConfig+0x6a4>)
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f0:	e011      	b.n	8006816 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f2:	f7fd ff15 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80067f6:	0003      	movs	r3, r0
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067fa:	e00c      	b.n	8006816 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006802:	e008      	b.n	8006816 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006808:	231a      	movs	r3, #26
 800680a:	2220      	movs	r2, #32
 800680c:	189b      	adds	r3, r3, r2
 800680e:	19db      	adds	r3, r3, r7
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
        break;
 8006814:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02a      	beq.n	8006872 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006820:	4b22      	ldr	r3, [pc, #136]	; (80068ac <UART_SetConfig+0x6a8>)
 8006822:	0052      	lsls	r2, r2, #1
 8006824:	5ad3      	ldrh	r3, [r2, r3]
 8006826:	0019      	movs	r1, r3
 8006828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800682a:	f7f9 fc87 	bl	800013c <__udivsi3>
 800682e:	0003      	movs	r3, r0
 8006830:	001a      	movs	r2, r3
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	0019      	movs	r1, r3
 8006840:	0010      	movs	r0, r2
 8006842:	f7f9 fc7b 	bl	800013c <__udivsi3>
 8006846:	0003      	movs	r3, r0
 8006848:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2b0f      	cmp	r3, #15
 800684e:	d90a      	bls.n	8006866 <UART_SetConfig+0x662>
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	025b      	lsls	r3, r3, #9
 8006856:	429a      	cmp	r2, r3
 8006858:	d205      	bcs.n	8006866 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	b29a      	uxth	r2, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
 8006864:	e005      	b.n	8006872 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006866:	231a      	movs	r3, #26
 8006868:	2220      	movs	r2, #32
 800686a:	189b      	adds	r3, r3, r2
 800686c:	19db      	adds	r3, r3, r7
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	226a      	movs	r2, #106	; 0x6a
 8006876:	2101      	movs	r1, #1
 8006878:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2268      	movs	r2, #104	; 0x68
 800687e:	2101      	movs	r1, #1
 8006880:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2200      	movs	r2, #0
 8006886:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	2200      	movs	r2, #0
 800688c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800688e:	231a      	movs	r3, #26
 8006890:	2220      	movs	r2, #32
 8006892:	189b      	adds	r3, r3, r2
 8006894:	19db      	adds	r3, r3, r7
 8006896:	781b      	ldrb	r3, [r3, #0]
}
 8006898:	0018      	movs	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	b010      	add	sp, #64	; 0x40
 800689e:	bdb0      	pop	{r4, r5, r7, pc}
 80068a0:	40008000 	.word	0x40008000
 80068a4:	40008400 	.word	0x40008400
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	0800bfbc 	.word	0x0800bfbc

080068b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	2208      	movs	r2, #8
 80068be:	4013      	ands	r3, r2
 80068c0:	d00b      	beq.n	80068da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a4a      	ldr	r2, [pc, #296]	; (80069f4 <UART_AdvFeatureConfig+0x144>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	0019      	movs	r1, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	2201      	movs	r2, #1
 80068e0:	4013      	ands	r3, r2
 80068e2:	d00b      	beq.n	80068fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4a43      	ldr	r2, [pc, #268]	; (80069f8 <UART_AdvFeatureConfig+0x148>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	2202      	movs	r2, #2
 8006902:	4013      	ands	r3, r2
 8006904:	d00b      	beq.n	800691e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a3b      	ldr	r2, [pc, #236]	; (80069fc <UART_AdvFeatureConfig+0x14c>)
 800690e:	4013      	ands	r3, r2
 8006910:	0019      	movs	r1, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	2204      	movs	r2, #4
 8006924:	4013      	ands	r3, r2
 8006926:	d00b      	beq.n	8006940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4a34      	ldr	r2, [pc, #208]	; (8006a00 <UART_AdvFeatureConfig+0x150>)
 8006930:	4013      	ands	r3, r2
 8006932:	0019      	movs	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	2210      	movs	r2, #16
 8006946:	4013      	ands	r3, r2
 8006948:	d00b      	beq.n	8006962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a2c      	ldr	r2, [pc, #176]	; (8006a04 <UART_AdvFeatureConfig+0x154>)
 8006952:	4013      	ands	r3, r2
 8006954:	0019      	movs	r1, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	2220      	movs	r2, #32
 8006968:	4013      	ands	r3, r2
 800696a:	d00b      	beq.n	8006984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <UART_AdvFeatureConfig+0x158>)
 8006974:	4013      	ands	r3, r2
 8006976:	0019      	movs	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	2240      	movs	r2, #64	; 0x40
 800698a:	4013      	ands	r3, r2
 800698c:	d01d      	beq.n	80069ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <UART_AdvFeatureConfig+0x15c>)
 8006996:	4013      	ands	r3, r2
 8006998:	0019      	movs	r1, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	035b      	lsls	r3, r3, #13
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d10b      	bne.n	80069ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a15      	ldr	r2, [pc, #84]	; (8006a10 <UART_AdvFeatureConfig+0x160>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	0019      	movs	r1, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	4013      	ands	r3, r2
 80069d2:	d00b      	beq.n	80069ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4a0e      	ldr	r2, [pc, #56]	; (8006a14 <UART_AdvFeatureConfig+0x164>)
 80069dc:	4013      	ands	r3, r2
 80069de:	0019      	movs	r1, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	ffff7fff 	.word	0xffff7fff
 80069f8:	fffdffff 	.word	0xfffdffff
 80069fc:	fffeffff 	.word	0xfffeffff
 8006a00:	fffbffff 	.word	0xfffbffff
 8006a04:	ffffefff 	.word	0xffffefff
 8006a08:	ffffdfff 	.word	0xffffdfff
 8006a0c:	ffefffff 	.word	0xffefffff
 8006a10:	ff9fffff 	.word	0xff9fffff
 8006a14:	fff7ffff 	.word	0xfff7ffff

08006a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b092      	sub	sp, #72	; 0x48
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2290      	movs	r2, #144	; 0x90
 8006a24:	2100      	movs	r1, #0
 8006a26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a28:	f7fc fdc2 	bl	80035b0 <HAL_GetTick>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2208      	movs	r2, #8
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d12d      	bne.n	8006a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	2280      	movs	r2, #128	; 0x80
 8006a42:	0391      	lsls	r1, r2, #14
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4a47      	ldr	r2, [pc, #284]	; (8006b64 <UART_CheckIdleState+0x14c>)
 8006a48:	9200      	str	r2, [sp, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f000 f88e 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d022      	beq.n	8006a9a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a54:	f3ef 8310 	mrs	r3, PRIMASK
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a5e:	2301      	movs	r3, #1
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	438a      	bics	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	f383 8810 	msr	PRIMASK, r3
}
 8006a84:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2288      	movs	r2, #136	; 0x88
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2284      	movs	r2, #132	; 0x84
 8006a92:	2100      	movs	r1, #0
 8006a94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e060      	b.n	8006b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d146      	bne.n	8006b36 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	2280      	movs	r2, #128	; 0x80
 8006aac:	03d1      	lsls	r1, r2, #15
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <UART_CheckIdleState+0x14c>)
 8006ab2:	9200      	str	r2, [sp, #0]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f000 f859 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006aba:	1e03      	subs	r3, r0, #0
 8006abc:	d03b      	beq.n	8006b36 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006abe:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	2301      	movs	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f383 8810 	msr	PRIMASK, r3
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4922      	ldr	r1, [pc, #136]	; (8006b68 <UART_CheckIdleState+0x150>)
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f383 8810 	msr	PRIMASK, r3
}
 8006aee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af0:	f3ef 8310 	mrs	r3, PRIMASK
 8006af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006af6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30
 8006afa:	2301      	movs	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f383 8810 	msr	PRIMASK, r3
}
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	438a      	bics	r2, r1
 8006b14:	609a      	str	r2, [r3, #8]
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f383 8810 	msr	PRIMASK, r3
}
 8006b20:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	228c      	movs	r2, #140	; 0x8c
 8006b26:	2120      	movs	r1, #32
 8006b28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2284      	movs	r2, #132	; 0x84
 8006b2e:	2100      	movs	r1, #0
 8006b30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e012      	b.n	8006b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2288      	movs	r2, #136	; 0x88
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	228c      	movs	r2, #140	; 0x8c
 8006b42:	2120      	movs	r1, #32
 8006b44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2284      	movs	r2, #132	; 0x84
 8006b56:	2100      	movs	r1, #0
 8006b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b010      	add	sp, #64	; 0x40
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	01ffffff 	.word	0x01ffffff
 8006b68:	fffffedf 	.word	0xfffffedf

08006b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	1dfb      	adds	r3, r7, #7
 8006b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7c:	e051      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	3301      	adds	r3, #1
 8006b82:	d04e      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b84:	f7fc fd14 	bl	80035b0 <HAL_GetTick>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e051      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d03b      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b80      	cmp	r3, #128	; 0x80
 8006bae:	d038      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d035      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d111      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f83c 	bl	8006c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2290      	movs	r2, #144	; 0x90
 8006bd8:	2108      	movs	r1, #8
 8006bda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2284      	movs	r2, #132	; 0x84
 8006be0:	2100      	movs	r1, #0
 8006be2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e02c      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69da      	ldr	r2, [r3, #28]
 8006bee:	2380      	movs	r3, #128	; 0x80
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d112      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	0112      	lsls	r2, r2, #4
 8006c04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 f81f 	bl	8006c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2290      	movs	r2, #144	; 0x90
 8006c12:	2120      	movs	r1, #32
 8006c14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2284      	movs	r2, #132	; 0x84
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e00f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	425a      	negs	r2, r3
 8006c32:	4153      	adcs	r3, r2
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	001a      	movs	r2, r3
 8006c38:	1dfb      	adds	r3, r7, #7
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d09e      	beq.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	0018      	movs	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	b004      	add	sp, #16
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c54:	f3ef 8310 	mrs	r3, PRIMASK
 8006c58:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f383 8810 	msr	PRIMASK, r3
}
 8006c68:	46c0      	nop			; (mov r8, r8)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4926      	ldr	r1, [pc, #152]	; (8006d10 <UART_EndRxTransfer+0xc4>)
 8006c76:	400a      	ands	r2, r1
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f383 8810 	msr	PRIMASK, r3
}
 8006c84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c86:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8a:	623b      	str	r3, [r7, #32]
  return(result);
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c90:	2301      	movs	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	f383 8810 	msr	PRIMASK, r3
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	491b      	ldr	r1, [pc, #108]	; (8006d14 <UART_EndRxTransfer+0xc8>)
 8006ca8:	400a      	ands	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f383 8810 	msr	PRIMASK, r3
}
 8006cb6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d118      	bne.n	8006cf2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cca:	2301      	movs	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f383 8810 	msr	PRIMASK, r3
}
 8006cd4:	46c0      	nop			; (mov r8, r8)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2110      	movs	r1, #16
 8006ce2:	438a      	bics	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	228c      	movs	r2, #140	; 0x8c
 8006cf6:	2120      	movs	r1, #32
 8006cf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b00e      	add	sp, #56	; 0x38
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	fffffedf 	.word	0xfffffedf
 8006d14:	effffffe 	.word	0xeffffffe

08006d18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2284      	movs	r2, #132	; 0x84
 8006d24:	5c9b      	ldrb	r3, [r3, r2]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e027      	b.n	8006d7e <HAL_UARTEx_DisableFifoMode+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2284      	movs	r2, #132	; 0x84
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2288      	movs	r2, #136	; 0x88
 8006d3a:	2124      	movs	r1, #36	; 0x24
 8006d3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2101      	movs	r1, #1
 8006d52:	438a      	bics	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2288      	movs	r2, #136	; 0x88
 8006d70:	2120      	movs	r1, #32
 8006d72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2284      	movs	r2, #132	; 0x84
 8006d78:	2100      	movs	r1, #0
 8006d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	0018      	movs	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b004      	add	sp, #16
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	dfffffff 	.word	0xdfffffff

08006d8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2284      	movs	r2, #132	; 0x84
 8006d9a:	5c9b      	ldrb	r3, [r3, r2]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e02e      	b.n	8006e02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2284      	movs	r2, #132	; 0x84
 8006da8:	2101      	movs	r1, #1
 8006daa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2288      	movs	r2, #136	; 0x88
 8006db0:	2124      	movs	r1, #36	; 0x24
 8006db2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	438a      	bics	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	08d9      	lsrs	r1, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	0018      	movs	r0, r3
 8006de4:	f000 f854 	bl	8006e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2288      	movs	r2, #136	; 0x88
 8006df4:	2120      	movs	r1, #32
 8006df6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2284      	movs	r2, #132	; 0x84
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	0018      	movs	r0, r3
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b004      	add	sp, #16
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2284      	movs	r2, #132	; 0x84
 8006e1a:	5c9b      	ldrb	r3, [r3, r2]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e02f      	b.n	8006e84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2284      	movs	r2, #132	; 0x84
 8006e28:	2101      	movs	r1, #1
 8006e2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2288      	movs	r2, #136	; 0x88
 8006e30:	2124      	movs	r1, #36	; 0x24
 8006e32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2101      	movs	r1, #1
 8006e48:	438a      	bics	r2, r1
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	4a0e      	ldr	r2, [pc, #56]	; (8006e8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	0019      	movs	r1, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 f813 	bl	8006e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2288      	movs	r2, #136	; 0x88
 8006e76:	2120      	movs	r1, #32
 8006e78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2284      	movs	r2, #132	; 0x84
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	0018      	movs	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b004      	add	sp, #16
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	f1ffffff 	.word	0xf1ffffff

08006e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d108      	bne.n	8006eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	226a      	movs	r2, #106	; 0x6a
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2268      	movs	r2, #104	; 0x68
 8006eac:	2101      	movs	r1, #1
 8006eae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006eb0:	e043      	b.n	8006f3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eb2:	260f      	movs	r6, #15
 8006eb4:	19bb      	adds	r3, r7, r6
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eba:	200e      	movs	r0, #14
 8006ebc:	183b      	adds	r3, r7, r0
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	0e5b      	lsrs	r3, r3, #25
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	240d      	movs	r4, #13
 8006ece:	193b      	adds	r3, r7, r4
 8006ed0:	2107      	movs	r1, #7
 8006ed2:	400a      	ands	r2, r1
 8006ed4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	0f5b      	lsrs	r3, r3, #29
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	250c      	movs	r5, #12
 8006ee2:	197b      	adds	r3, r7, r5
 8006ee4:	2107      	movs	r1, #7
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eea:	183b      	adds	r3, r7, r0
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	197a      	adds	r2, r7, r5
 8006ef0:	7812      	ldrb	r2, [r2, #0]
 8006ef2:	4914      	ldr	r1, [pc, #80]	; (8006f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ef4:	5c8a      	ldrb	r2, [r1, r2]
 8006ef6:	435a      	muls	r2, r3
 8006ef8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006efa:	197b      	adds	r3, r7, r5
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4a12      	ldr	r2, [pc, #72]	; (8006f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f02:	0019      	movs	r1, r3
 8006f04:	f7f9 f9a4 	bl	8000250 <__divsi3>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	b299      	uxth	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	226a      	movs	r2, #106	; 0x6a
 8006f10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f12:	19bb      	adds	r3, r7, r6
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	193a      	adds	r2, r7, r4
 8006f18:	7812      	ldrb	r2, [r2, #0]
 8006f1a:	490a      	ldr	r1, [pc, #40]	; (8006f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f1c:	5c8a      	ldrb	r2, [r1, r2]
 8006f1e:	435a      	muls	r2, r3
 8006f20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f22:	193b      	adds	r3, r7, r4
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	f7f9 f990 	bl	8000250 <__divsi3>
 8006f30:	0003      	movs	r3, r0
 8006f32:	b299      	uxth	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2268      	movs	r2, #104	; 0x68
 8006f38:	5299      	strh	r1, [r3, r2]
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b005      	add	sp, #20
 8006f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	0800bfd4 	.word	0x0800bfd4
 8006f48:	0800bfdc 	.word	0x0800bfdc

08006f4c <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b0c6      	sub	sp, #280	; 0x118
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8006f54:	2318      	movs	r3, #24
 8006f56:	33ff      	adds	r3, #255	; 0xff
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8006f5e:	238b      	movs	r3, #139	; 0x8b
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8006f68:	2316      	movs	r3, #22
 8006f6a:	33ff      	adds	r3, #255	; 0xff
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8006f72:	238a      	movs	r3, #138	; 0x8a
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <my_gnss_acq_coordinates+0x74>)
 8006f7e:	228c      	movs	r2, #140	; 0x8c
 8006f80:	0052      	lsls	r2, r2, #1
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	19db      	adds	r3, r3, r7
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	22f6      	movs	r2, #246	; 0xf6
 8006f8e:	2100      	movs	r1, #0
 8006f90:	0018      	movs	r0, r3
 8006f92:	f000 fbd1 	bl	8007738 <memset>

	char* 		nmea_gsv_label = "GSV" ;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <my_gnss_acq_coordinates+0x78>)
 8006f98:	2288      	movs	r2, #136	; 0x88
 8006f9a:	0052      	lsls	r2, r2, #1
 8006f9c:	18ba      	adds	r2, r7, r2
 8006f9e:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <my_gnss_acq_coordinates+0x7c>)
 8006fa2:	2286      	movs	r2, #134	; 0x86
 8006fa4:	0052      	lsls	r2, r2, #1
 8006fa6:	18ba      	adds	r2, r7, r2
 8006fa8:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <my_gnss_acq_coordinates+0x80>)
 8006fac:	2284      	movs	r2, #132	; 0x84
 8006fae:	0052      	lsls	r2, r2, #1
 8006fb0:	18ba      	adds	r2, r7, r2
 8006fb2:	6013      	str	r3, [r2, #0]
			}
		}
	}
	return r ;
*/
}
 8006fb4:	46c0      	nop			; (mov r8, r8)
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b046      	add	sp, #280	; 0x118
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	fffffef4 	.word	0xfffffef4
 8006fc4:	0800be80 	.word	0x0800be80
 8006fc8:	0800be84 	.word	0x0800be84
 8006fcc:	0800be8c 	.word	0x0800be8c

08006fd0 <my_gnss_log>:
	}
	return r ;
}

void my_gnss_log ( uint16_t time_seconds_ths )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	801a      	strh	r2, [r3, #0]
	uint8_t rx_byte = 0 ;
 8006fdc:	230f      	movs	r3, #15
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
	while ( tim_seconds < time_seconds_ths  )
 8006fe4:	e005      	b.n	8006ff2 <my_gnss_log+0x22>
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8006fe6:	230f      	movs	r3, #15
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	2101      	movs	r1, #1
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7fb fe47 	bl	8002c80 <my_gnss_receive_byte>
	while ( tim_seconds < time_seconds_ths  )
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <my_gnss_log+0x38>)
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	1dba      	adds	r2, r7, #6
 8006ff8:	8812      	ldrh	r2, [r2, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d8f3      	bhi.n	8006fe6 <my_gnss_log+0x16>
}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b004      	add	sp, #16
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20000a38 	.word	0x20000a38

0800700c <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800700c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700e:	b08d      	sub	sp, #52	; 0x34
 8007010:	af04      	add	r7, sp, #16
 8007012:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007014:	2508      	movs	r5, #8
 8007016:	1979      	adds	r1, r7, r5
 8007018:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <my_rtc_get_dt_s+0x7c>)
 800701a:	2200      	movs	r2, #0
 800701c:	0018      	movs	r0, r3
 800701e:	f7fd ff27 	bl	8004e70 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8007022:	241c      	movs	r4, #28
 8007024:	1939      	adds	r1, r7, r4
 8007026:	4b18      	ldr	r3, [pc, #96]	; (8007088 <my_rtc_get_dt_s+0x7c>)
 8007028:	2200      	movs	r2, #0
 800702a:	0018      	movs	r0, r3
 800702c:	f7fe f80e 	bl	800504c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8007030:	0021      	movs	r1, r4
 8007032:	187b      	adds	r3, r7, r1
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	22fa      	movs	r2, #250	; 0xfa
 8007038:	00d2      	lsls	r2, r2, #3
 800703a:	189a      	adds	r2, r3, r2
 800703c:	187b      	adds	r3, r7, r1
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	469c      	mov	ip, r3
 8007042:	187b      	adds	r3, r7, r1
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	001c      	movs	r4, r3
 8007048:	0028      	movs	r0, r5
 800704a:	183b      	adds	r3, r7, r0
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	001d      	movs	r5, r3
 8007050:	183b      	adds	r3, r7, r0
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	001e      	movs	r6, r3
 8007056:	183b      	adds	r3, r7, r0
 8007058:	789b      	ldrb	r3, [r3, #2]
 800705a:	490c      	ldr	r1, [pc, #48]	; (800708c <my_rtc_get_dt_s+0x80>)
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	9303      	str	r3, [sp, #12]
 8007060:	9602      	str	r6, [sp, #8]
 8007062:	9501      	str	r5, [sp, #4]
 8007064:	9400      	str	r4, [sp, #0]
 8007066:	4663      	mov	r3, ip
 8007068:	f000 fafa 	bl	8007660 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800706c:	211c      	movs	r1, #28
 800706e:	187b      	adds	r3, r7, r1
 8007070:	78db      	ldrb	r3, [r3, #3]
 8007072:	b29b      	uxth	r3, r3
 8007074:	22fa      	movs	r2, #250	; 0xfa
 8007076:	00d2      	lsls	r2, r2, #3
 8007078:	4694      	mov	ip, r2
 800707a:	4463      	add	r3, ip
 800707c:	b29b      	uxth	r3, r3
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b009      	add	sp, #36	; 0x24
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	200006dc 	.word	0x200006dc
 800708c:	0800bed0 	.word	0x0800bed0

08007090 <_malloc_r>:
 8007090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007092:	000d      	movs	r5, r1
 8007094:	b087      	sub	sp, #28
 8007096:	350b      	adds	r5, #11
 8007098:	9001      	str	r0, [sp, #4]
 800709a:	2d16      	cmp	r5, #22
 800709c:	d908      	bls.n	80070b0 <_malloc_r+0x20>
 800709e:	2207      	movs	r2, #7
 80070a0:	4395      	bics	r5, r2
 80070a2:	d506      	bpl.n	80070b2 <_malloc_r+0x22>
 80070a4:	230c      	movs	r3, #12
 80070a6:	9a01      	ldr	r2, [sp, #4]
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	2000      	movs	r0, #0
 80070ac:	b007      	add	sp, #28
 80070ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b0:	2510      	movs	r5, #16
 80070b2:	42a9      	cmp	r1, r5
 80070b4:	d8f6      	bhi.n	80070a4 <_malloc_r+0x14>
 80070b6:	9801      	ldr	r0, [sp, #4]
 80070b8:	f000 f9fe 	bl	80074b8 <__malloc_lock>
 80070bc:	23fc      	movs	r3, #252	; 0xfc
 80070be:	4ebe      	ldr	r6, [pc, #760]	; (80073b8 <_malloc_r+0x328>)
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	429d      	cmp	r5, r3
 80070c4:	d219      	bcs.n	80070fa <_malloc_r+0x6a>
 80070c6:	002a      	movs	r2, r5
 80070c8:	3208      	adds	r2, #8
 80070ca:	18b2      	adds	r2, r6, r2
 80070cc:	0011      	movs	r1, r2
 80070ce:	6854      	ldr	r4, [r2, #4]
 80070d0:	3908      	subs	r1, #8
 80070d2:	08eb      	lsrs	r3, r5, #3
 80070d4:	428c      	cmp	r4, r1
 80070d6:	d103      	bne.n	80070e0 <_malloc_r+0x50>
 80070d8:	68d4      	ldr	r4, [r2, #12]
 80070da:	3302      	adds	r3, #2
 80070dc:	42a2      	cmp	r2, r4
 80070de:	d022      	beq.n	8007126 <_malloc_r+0x96>
 80070e0:	2203      	movs	r2, #3
 80070e2:	6863      	ldr	r3, [r4, #4]
 80070e4:	68a1      	ldr	r1, [r4, #8]
 80070e6:	4393      	bics	r3, r2
 80070e8:	68e2      	ldr	r2, [r4, #12]
 80070ea:	18e3      	adds	r3, r4, r3
 80070ec:	60ca      	str	r2, [r1, #12]
 80070ee:	6091      	str	r1, [r2, #8]
 80070f0:	2201      	movs	r2, #1
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
 80070f8:	e02a      	b.n	8007150 <_malloc_r+0xc0>
 80070fa:	233f      	movs	r3, #63	; 0x3f
 80070fc:	0a6a      	lsrs	r2, r5, #9
 80070fe:	d003      	beq.n	8007108 <_malloc_r+0x78>
 8007100:	2a04      	cmp	r2, #4
 8007102:	d82b      	bhi.n	800715c <_malloc_r+0xcc>
 8007104:	09ab      	lsrs	r3, r5, #6
 8007106:	3338      	adds	r3, #56	; 0x38
 8007108:	2203      	movs	r2, #3
 800710a:	4694      	mov	ip, r2
 800710c:	00d9      	lsls	r1, r3, #3
 800710e:	1989      	adds	r1, r1, r6
 8007110:	68cc      	ldr	r4, [r1, #12]
 8007112:	428c      	cmp	r4, r1
 8007114:	d006      	beq.n	8007124 <_malloc_r+0x94>
 8007116:	4660      	mov	r0, ip
 8007118:	6862      	ldr	r2, [r4, #4]
 800711a:	4382      	bics	r2, r0
 800711c:	1b57      	subs	r7, r2, r5
 800711e:	2f0f      	cmp	r7, #15
 8007120:	dd34      	ble.n	800718c <_malloc_r+0xfc>
 8007122:	3b01      	subs	r3, #1
 8007124:	3301      	adds	r3, #1
 8007126:	6934      	ldr	r4, [r6, #16]
 8007128:	49a4      	ldr	r1, [pc, #656]	; (80073bc <_malloc_r+0x32c>)
 800712a:	428c      	cmp	r4, r1
 800712c:	d055      	beq.n	80071da <_malloc_r+0x14a>
 800712e:	2003      	movs	r0, #3
 8007130:	6862      	ldr	r2, [r4, #4]
 8007132:	4382      	bics	r2, r0
 8007134:	1b50      	subs	r0, r2, r5
 8007136:	280f      	cmp	r0, #15
 8007138:	dd36      	ble.n	80071a8 <_malloc_r+0x118>
 800713a:	2301      	movs	r3, #1
 800713c:	1967      	adds	r7, r4, r5
 800713e:	431d      	orrs	r5, r3
 8007140:	4303      	orrs	r3, r0
 8007142:	6065      	str	r5, [r4, #4]
 8007144:	6177      	str	r7, [r6, #20]
 8007146:	6137      	str	r7, [r6, #16]
 8007148:	60f9      	str	r1, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	50a0      	str	r0, [r4, r2]
 8007150:	9801      	ldr	r0, [sp, #4]
 8007152:	f000 f9b9 	bl	80074c8 <__malloc_unlock>
 8007156:	0020      	movs	r0, r4
 8007158:	3008      	adds	r0, #8
 800715a:	e7a7      	b.n	80070ac <_malloc_r+0x1c>
 800715c:	2a14      	cmp	r2, #20
 800715e:	d802      	bhi.n	8007166 <_malloc_r+0xd6>
 8007160:	0013      	movs	r3, r2
 8007162:	335b      	adds	r3, #91	; 0x5b
 8007164:	e7d0      	b.n	8007108 <_malloc_r+0x78>
 8007166:	2a54      	cmp	r2, #84	; 0x54
 8007168:	d802      	bhi.n	8007170 <_malloc_r+0xe0>
 800716a:	0b2b      	lsrs	r3, r5, #12
 800716c:	336e      	adds	r3, #110	; 0x6e
 800716e:	e7cb      	b.n	8007108 <_malloc_r+0x78>
 8007170:	23aa      	movs	r3, #170	; 0xaa
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d802      	bhi.n	800717e <_malloc_r+0xee>
 8007178:	0beb      	lsrs	r3, r5, #15
 800717a:	3377      	adds	r3, #119	; 0x77
 800717c:	e7c4      	b.n	8007108 <_malloc_r+0x78>
 800717e:	4990      	ldr	r1, [pc, #576]	; (80073c0 <_malloc_r+0x330>)
 8007180:	237e      	movs	r3, #126	; 0x7e
 8007182:	428a      	cmp	r2, r1
 8007184:	d8c0      	bhi.n	8007108 <_malloc_r+0x78>
 8007186:	0cab      	lsrs	r3, r5, #18
 8007188:	337c      	adds	r3, #124	; 0x7c
 800718a:	e7bd      	b.n	8007108 <_malloc_r+0x78>
 800718c:	68e0      	ldr	r0, [r4, #12]
 800718e:	2f00      	cmp	r7, #0
 8007190:	db08      	blt.n	80071a4 <_malloc_r+0x114>
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	60d8      	str	r0, [r3, #12]
 8007196:	6083      	str	r3, [r0, #8]
 8007198:	2301      	movs	r3, #1
 800719a:	18a2      	adds	r2, r4, r2
 800719c:	6851      	ldr	r1, [r2, #4]
 800719e:	430b      	orrs	r3, r1
 80071a0:	6053      	str	r3, [r2, #4]
 80071a2:	e7d5      	b.n	8007150 <_malloc_r+0xc0>
 80071a4:	0004      	movs	r4, r0
 80071a6:	e7b4      	b.n	8007112 <_malloc_r+0x82>
 80071a8:	6171      	str	r1, [r6, #20]
 80071aa:	6131      	str	r1, [r6, #16]
 80071ac:	2800      	cmp	r0, #0
 80071ae:	daf3      	bge.n	8007198 <_malloc_r+0x108>
 80071b0:	6871      	ldr	r1, [r6, #4]
 80071b2:	468c      	mov	ip, r1
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	0089      	lsls	r1, r1, #2
 80071b8:	428a      	cmp	r2, r1
 80071ba:	d300      	bcc.n	80071be <_malloc_r+0x12e>
 80071bc:	e08c      	b.n	80072d8 <_malloc_r+0x248>
 80071be:	08d1      	lsrs	r1, r2, #3
 80071c0:	0950      	lsrs	r0, r2, #5
 80071c2:	2201      	movs	r2, #1
 80071c4:	4082      	lsls	r2, r0
 80071c6:	4660      	mov	r0, ip
 80071c8:	4302      	orrs	r2, r0
 80071ca:	6072      	str	r2, [r6, #4]
 80071cc:	00ca      	lsls	r2, r1, #3
 80071ce:	1992      	adds	r2, r2, r6
 80071d0:	6891      	ldr	r1, [r2, #8]
 80071d2:	60e2      	str	r2, [r4, #12]
 80071d4:	60a1      	str	r1, [r4, #8]
 80071d6:	6094      	str	r4, [r2, #8]
 80071d8:	60cc      	str	r4, [r1, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	4876      	ldr	r0, [pc, #472]	; (80073b8 <_malloc_r+0x328>)
 80071de:	1099      	asrs	r1, r3, #2
 80071e0:	408a      	lsls	r2, r1
 80071e2:	6841      	ldr	r1, [r0, #4]
 80071e4:	4291      	cmp	r1, r2
 80071e6:	d328      	bcc.n	800723a <_malloc_r+0x1aa>
 80071e8:	420a      	tst	r2, r1
 80071ea:	d105      	bne.n	80071f8 <_malloc_r+0x168>
 80071ec:	2403      	movs	r4, #3
 80071ee:	43a3      	bics	r3, r4
 80071f0:	0052      	lsls	r2, r2, #1
 80071f2:	3304      	adds	r3, #4
 80071f4:	420a      	tst	r2, r1
 80071f6:	d0fb      	beq.n	80071f0 <_malloc_r+0x160>
 80071f8:	496f      	ldr	r1, [pc, #444]	; (80073b8 <_malloc_r+0x328>)
 80071fa:	9104      	str	r1, [sp, #16]
 80071fc:	00d9      	lsls	r1, r3, #3
 80071fe:	1841      	adds	r1, r0, r1
 8007200:	468c      	mov	ip, r1
 8007202:	000f      	movs	r7, r1
 8007204:	9302      	str	r3, [sp, #8]
 8007206:	68fc      	ldr	r4, [r7, #12]
 8007208:	42bc      	cmp	r4, r7
 800720a:	d000      	beq.n	800720e <_malloc_r+0x17e>
 800720c:	e09b      	b.n	8007346 <_malloc_r+0x2b6>
 800720e:	2403      	movs	r4, #3
 8007210:	9902      	ldr	r1, [sp, #8]
 8007212:	3708      	adds	r7, #8
 8007214:	3101      	adds	r1, #1
 8007216:	9102      	str	r1, [sp, #8]
 8007218:	4221      	tst	r1, r4
 800721a:	d1f4      	bne.n	8007206 <_malloc_r+0x176>
 800721c:	2103      	movs	r1, #3
 800721e:	420b      	tst	r3, r1
 8007220:	d000      	beq.n	8007224 <_malloc_r+0x194>
 8007222:	e0b7      	b.n	8007394 <_malloc_r+0x304>
 8007224:	6843      	ldr	r3, [r0, #4]
 8007226:	4393      	bics	r3, r2
 8007228:	6043      	str	r3, [r0, #4]
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	0052      	lsls	r2, r2, #1
 800722e:	6859      	ldr	r1, [r3, #4]
 8007230:	4291      	cmp	r1, r2
 8007232:	d302      	bcc.n	800723a <_malloc_r+0x1aa>
 8007234:	2a00      	cmp	r2, #0
 8007236:	d000      	beq.n	800723a <_malloc_r+0x1aa>
 8007238:	e0bb      	b.n	80073b2 <_malloc_r+0x322>
 800723a:	2203      	movs	r2, #3
 800723c:	6883      	ldr	r3, [r0, #8]
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	4393      	bics	r3, r2
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	42ab      	cmp	r3, r5
 8007248:	d303      	bcc.n	8007252 <_malloc_r+0x1c2>
 800724a:	1b59      	subs	r1, r3, r5
 800724c:	290f      	cmp	r1, #15
 800724e:	dd00      	ble.n	8007252 <_malloc_r+0x1c2>
 8007250:	e123      	b.n	800749a <_malloc_r+0x40a>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	9a03      	ldr	r2, [sp, #12]
 8007256:	2008      	movs	r0, #8
 8007258:	189e      	adds	r6, r3, r2
 800725a:	4b5a      	ldr	r3, [pc, #360]	; (80073c4 <_malloc_r+0x334>)
 800725c:	681f      	ldr	r7, [r3, #0]
 800725e:	f000 fb1d 	bl	800789c <sysconf>
 8007262:	4b59      	ldr	r3, [pc, #356]	; (80073c8 <_malloc_r+0x338>)
 8007264:	3710      	adds	r7, #16
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	197f      	adds	r7, r7, r5
 800726a:	9004      	str	r0, [sp, #16]
 800726c:	3301      	adds	r3, #1
 800726e:	d003      	beq.n	8007278 <_malloc_r+0x1e8>
 8007270:	1e7b      	subs	r3, r7, #1
 8007272:	181b      	adds	r3, r3, r0
 8007274:	4247      	negs	r7, r0
 8007276:	401f      	ands	r7, r3
 8007278:	0039      	movs	r1, r7
 800727a:	9801      	ldr	r0, [sp, #4]
 800727c:	f000 faba 	bl	80077f4 <_sbrk_r>
 8007280:	0004      	movs	r4, r0
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d100      	bne.n	8007288 <_malloc_r+0x1f8>
 8007286:	e0de      	b.n	8007446 <_malloc_r+0x3b6>
 8007288:	4286      	cmp	r6, r0
 800728a:	d904      	bls.n	8007296 <_malloc_r+0x206>
 800728c:	4b4a      	ldr	r3, [pc, #296]	; (80073b8 <_malloc_r+0x328>)
 800728e:	9a02      	ldr	r2, [sp, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d000      	beq.n	8007296 <_malloc_r+0x206>
 8007294:	e0d7      	b.n	8007446 <_malloc_r+0x3b6>
 8007296:	4a4d      	ldr	r2, [pc, #308]	; (80073cc <_malloc_r+0x33c>)
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	18fb      	adds	r3, r7, r3
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	3a01      	subs	r2, #1
 80072a2:	42a6      	cmp	r6, r4
 80072a4:	d000      	beq.n	80072a8 <_malloc_r+0x218>
 80072a6:	e097      	b.n	80073d8 <_malloc_r+0x348>
 80072a8:	4216      	tst	r6, r2
 80072aa:	d000      	beq.n	80072ae <_malloc_r+0x21e>
 80072ac:	e094      	b.n	80073d8 <_malloc_r+0x348>
 80072ae:	4b42      	ldr	r3, [pc, #264]	; (80073b8 <_malloc_r+0x328>)
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	19df      	adds	r7, r3, r7
 80072b6:	2301      	movs	r3, #1
 80072b8:	433b      	orrs	r3, r7
 80072ba:	6053      	str	r3, [r2, #4]
 80072bc:	4b43      	ldr	r3, [pc, #268]	; (80073cc <_malloc_r+0x33c>)
 80072be:	4a44      	ldr	r2, [pc, #272]	; (80073d0 <_malloc_r+0x340>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6811      	ldr	r1, [r2, #0]
 80072c4:	428b      	cmp	r3, r1
 80072c6:	d900      	bls.n	80072ca <_malloc_r+0x23a>
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4a42      	ldr	r2, [pc, #264]	; (80073d4 <_malloc_r+0x344>)
 80072cc:	6811      	ldr	r1, [r2, #0]
 80072ce:	428b      	cmp	r3, r1
 80072d0:	d800      	bhi.n	80072d4 <_malloc_r+0x244>
 80072d2:	e0b8      	b.n	8007446 <_malloc_r+0x3b6>
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e0b6      	b.n	8007446 <_malloc_r+0x3b6>
 80072d8:	0a50      	lsrs	r0, r2, #9
 80072da:	2804      	cmp	r0, #4
 80072dc:	d811      	bhi.n	8007302 <_malloc_r+0x272>
 80072de:	0991      	lsrs	r1, r2, #6
 80072e0:	3138      	adds	r1, #56	; 0x38
 80072e2:	00cf      	lsls	r7, r1, #3
 80072e4:	19bf      	adds	r7, r7, r6
 80072e6:	68b8      	ldr	r0, [r7, #8]
 80072e8:	4287      	cmp	r7, r0
 80072ea:	d125      	bne.n	8007338 <_malloc_r+0x2a8>
 80072ec:	2201      	movs	r2, #1
 80072ee:	1089      	asrs	r1, r1, #2
 80072f0:	408a      	lsls	r2, r1
 80072f2:	4661      	mov	r1, ip
 80072f4:	430a      	orrs	r2, r1
 80072f6:	6072      	str	r2, [r6, #4]
 80072f8:	60e7      	str	r7, [r4, #12]
 80072fa:	60a0      	str	r0, [r4, #8]
 80072fc:	60bc      	str	r4, [r7, #8]
 80072fe:	60c4      	str	r4, [r0, #12]
 8007300:	e76b      	b.n	80071da <_malloc_r+0x14a>
 8007302:	2814      	cmp	r0, #20
 8007304:	d802      	bhi.n	800730c <_malloc_r+0x27c>
 8007306:	0001      	movs	r1, r0
 8007308:	315b      	adds	r1, #91	; 0x5b
 800730a:	e7ea      	b.n	80072e2 <_malloc_r+0x252>
 800730c:	2854      	cmp	r0, #84	; 0x54
 800730e:	d802      	bhi.n	8007316 <_malloc_r+0x286>
 8007310:	0b11      	lsrs	r1, r2, #12
 8007312:	316e      	adds	r1, #110	; 0x6e
 8007314:	e7e5      	b.n	80072e2 <_malloc_r+0x252>
 8007316:	21aa      	movs	r1, #170	; 0xaa
 8007318:	0049      	lsls	r1, r1, #1
 800731a:	4288      	cmp	r0, r1
 800731c:	d802      	bhi.n	8007324 <_malloc_r+0x294>
 800731e:	0bd1      	lsrs	r1, r2, #15
 8007320:	3177      	adds	r1, #119	; 0x77
 8007322:	e7de      	b.n	80072e2 <_malloc_r+0x252>
 8007324:	4f26      	ldr	r7, [pc, #152]	; (80073c0 <_malloc_r+0x330>)
 8007326:	217e      	movs	r1, #126	; 0x7e
 8007328:	42b8      	cmp	r0, r7
 800732a:	d8da      	bhi.n	80072e2 <_malloc_r+0x252>
 800732c:	0c91      	lsrs	r1, r2, #18
 800732e:	317c      	adds	r1, #124	; 0x7c
 8007330:	e7d7      	b.n	80072e2 <_malloc_r+0x252>
 8007332:	6880      	ldr	r0, [r0, #8]
 8007334:	4287      	cmp	r7, r0
 8007336:	d004      	beq.n	8007342 <_malloc_r+0x2b2>
 8007338:	2603      	movs	r6, #3
 800733a:	6841      	ldr	r1, [r0, #4]
 800733c:	43b1      	bics	r1, r6
 800733e:	4291      	cmp	r1, r2
 8007340:	d8f7      	bhi.n	8007332 <_malloc_r+0x2a2>
 8007342:	68c7      	ldr	r7, [r0, #12]
 8007344:	e7d8      	b.n	80072f8 <_malloc_r+0x268>
 8007346:	2603      	movs	r6, #3
 8007348:	6861      	ldr	r1, [r4, #4]
 800734a:	43b1      	bics	r1, r6
 800734c:	9103      	str	r1, [sp, #12]
 800734e:	68e6      	ldr	r6, [r4, #12]
 8007350:	1b49      	subs	r1, r1, r5
 8007352:	290f      	cmp	r1, #15
 8007354:	dd10      	ble.n	8007378 <_malloc_r+0x2e8>
 8007356:	2201      	movs	r2, #1
 8007358:	1963      	adds	r3, r4, r5
 800735a:	4315      	orrs	r5, r2
 800735c:	6065      	str	r5, [r4, #4]
 800735e:	68a5      	ldr	r5, [r4, #8]
 8007360:	430a      	orrs	r2, r1
 8007362:	60ee      	str	r6, [r5, #12]
 8007364:	60b5      	str	r5, [r6, #8]
 8007366:	6143      	str	r3, [r0, #20]
 8007368:	6103      	str	r3, [r0, #16]
 800736a:	4814      	ldr	r0, [pc, #80]	; (80073bc <_malloc_r+0x32c>)
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	60d8      	str	r0, [r3, #12]
 8007370:	6098      	str	r0, [r3, #8]
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	50e1      	str	r1, [r4, r3]
 8007376:	e6eb      	b.n	8007150 <_malloc_r+0xc0>
 8007378:	2900      	cmp	r1, #0
 800737a:	db09      	blt.n	8007390 <_malloc_r+0x300>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	18e1      	adds	r1, r4, r3
 8007380:	2301      	movs	r3, #1
 8007382:	684a      	ldr	r2, [r1, #4]
 8007384:	4313      	orrs	r3, r2
 8007386:	604b      	str	r3, [r1, #4]
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	60de      	str	r6, [r3, #12]
 800738c:	60b3      	str	r3, [r6, #8]
 800738e:	e6df      	b.n	8007150 <_malloc_r+0xc0>
 8007390:	0034      	movs	r4, r6
 8007392:	e739      	b.n	8007208 <_malloc_r+0x178>
 8007394:	2108      	movs	r1, #8
 8007396:	4249      	negs	r1, r1
 8007398:	448c      	add	ip, r1
 800739a:	4661      	mov	r1, ip
 800739c:	6889      	ldr	r1, [r1, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	4561      	cmp	r1, ip
 80073a2:	d100      	bne.n	80073a6 <_malloc_r+0x316>
 80073a4:	e73a      	b.n	800721c <_malloc_r+0x18c>
 80073a6:	e740      	b.n	800722a <_malloc_r+0x19a>
 80073a8:	3304      	adds	r3, #4
 80073aa:	0052      	lsls	r2, r2, #1
 80073ac:	420a      	tst	r2, r1
 80073ae:	d0fb      	beq.n	80073a8 <_malloc_r+0x318>
 80073b0:	e724      	b.n	80071fc <_malloc_r+0x16c>
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	e7fa      	b.n	80073ac <_malloc_r+0x31c>
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	20000010 	.word	0x20000010
 80073bc:	20000018 	.word	0x20000018
 80073c0:	00000554 	.word	0x00000554
 80073c4:	20000a6c 	.word	0x20000a6c
 80073c8:	20000418 	.word	0x20000418
 80073cc:	20000a3c 	.word	0x20000a3c
 80073d0:	20000a64 	.word	0x20000a64
 80073d4:	20000a68 	.word	0x20000a68
 80073d8:	4934      	ldr	r1, [pc, #208]	; (80074ac <_malloc_r+0x41c>)
 80073da:	6808      	ldr	r0, [r1, #0]
 80073dc:	3001      	adds	r0, #1
 80073de:	d140      	bne.n	8007462 <_malloc_r+0x3d2>
 80073e0:	600c      	str	r4, [r1, #0]
 80073e2:	2107      	movs	r1, #7
 80073e4:	0026      	movs	r6, r4
 80073e6:	2300      	movs	r3, #0
 80073e8:	400e      	ands	r6, r1
 80073ea:	420c      	tst	r4, r1
 80073ec:	d002      	beq.n	80073f4 <_malloc_r+0x364>
 80073ee:	3308      	adds	r3, #8
 80073f0:	1b9b      	subs	r3, r3, r6
 80073f2:	18e4      	adds	r4, r4, r3
 80073f4:	19e1      	adds	r1, r4, r7
 80073f6:	9105      	str	r1, [sp, #20]
 80073f8:	9f05      	ldr	r7, [sp, #20]
 80073fa:	9904      	ldr	r1, [sp, #16]
 80073fc:	4017      	ands	r7, r2
 80073fe:	18cb      	adds	r3, r1, r3
 8007400:	1bdf      	subs	r7, r3, r7
 8007402:	4017      	ands	r7, r2
 8007404:	0039      	movs	r1, r7
 8007406:	9801      	ldr	r0, [sp, #4]
 8007408:	f000 f9f4 	bl	80077f4 <_sbrk_r>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d107      	bne.n	8007420 <_malloc_r+0x390>
 8007410:	1e37      	subs	r7, r6, #0
 8007412:	9805      	ldr	r0, [sp, #20]
 8007414:	d004      	beq.n	8007420 <_malloc_r+0x390>
 8007416:	0030      	movs	r0, r6
 8007418:	2700      	movs	r7, #0
 800741a:	9b05      	ldr	r3, [sp, #20]
 800741c:	3808      	subs	r0, #8
 800741e:	1818      	adds	r0, r3, r0
 8007420:	4a23      	ldr	r2, [pc, #140]	; (80074b0 <_malloc_r+0x420>)
 8007422:	1b00      	subs	r0, r0, r4
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	19c0      	adds	r0, r0, r7
 8007428:	19db      	adds	r3, r3, r7
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	4b21      	ldr	r3, [pc, #132]	; (80074b4 <_malloc_r+0x424>)
 8007430:	9902      	ldr	r1, [sp, #8]
 8007432:	4310      	orrs	r0, r2
 8007434:	609c      	str	r4, [r3, #8]
 8007436:	6060      	str	r0, [r4, #4]
 8007438:	4299      	cmp	r1, r3
 800743a:	d100      	bne.n	800743e <_malloc_r+0x3ae>
 800743c:	e73e      	b.n	80072bc <_malloc_r+0x22c>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	2b0f      	cmp	r3, #15
 8007442:	d813      	bhi.n	800746c <_malloc_r+0x3dc>
 8007444:	6062      	str	r2, [r4, #4]
 8007446:	2203      	movs	r2, #3
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <_malloc_r+0x424>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4393      	bics	r3, r2
 8007450:	1b59      	subs	r1, r3, r5
 8007452:	42ab      	cmp	r3, r5
 8007454:	d301      	bcc.n	800745a <_malloc_r+0x3ca>
 8007456:	290f      	cmp	r1, #15
 8007458:	dc1f      	bgt.n	800749a <_malloc_r+0x40a>
 800745a:	9801      	ldr	r0, [sp, #4]
 800745c:	f000 f834 	bl	80074c8 <__malloc_unlock>
 8007460:	e623      	b.n	80070aa <_malloc_r+0x1a>
 8007462:	4913      	ldr	r1, [pc, #76]	; (80074b0 <_malloc_r+0x420>)
 8007464:	1ba6      	subs	r6, r4, r6
 8007466:	18f6      	adds	r6, r6, r3
 8007468:	600e      	str	r6, [r1, #0]
 800746a:	e7ba      	b.n	80073e2 <_malloc_r+0x352>
 800746c:	2107      	movs	r1, #7
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	3b0c      	subs	r3, #12
 8007472:	438b      	bics	r3, r1
 8007474:	9902      	ldr	r1, [sp, #8]
 8007476:	6849      	ldr	r1, [r1, #4]
 8007478:	400a      	ands	r2, r1
 800747a:	9902      	ldr	r1, [sp, #8]
 800747c:	431a      	orrs	r2, r3
 800747e:	604a      	str	r2, [r1, #4]
 8007480:	18ca      	adds	r2, r1, r3
 8007482:	2105      	movs	r1, #5
 8007484:	6051      	str	r1, [r2, #4]
 8007486:	6091      	str	r1, [r2, #8]
 8007488:	2b0f      	cmp	r3, #15
 800748a:	d800      	bhi.n	800748e <_malloc_r+0x3fe>
 800748c:	e716      	b.n	80072bc <_malloc_r+0x22c>
 800748e:	9902      	ldr	r1, [sp, #8]
 8007490:	9801      	ldr	r0, [sp, #4]
 8007492:	3108      	adds	r1, #8
 8007494:	f000 fa7e 	bl	8007994 <_free_r>
 8007498:	e710      	b.n	80072bc <_malloc_r+0x22c>
 800749a:	2201      	movs	r2, #1
 800749c:	0013      	movs	r3, r2
 800749e:	4805      	ldr	r0, [pc, #20]	; (80074b4 <_malloc_r+0x424>)
 80074a0:	432b      	orrs	r3, r5
 80074a2:	6884      	ldr	r4, [r0, #8]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	1963      	adds	r3, r4, r5
 80074a8:	6083      	str	r3, [r0, #8]
 80074aa:	e623      	b.n	80070f4 <_malloc_r+0x64>
 80074ac:	20000418 	.word	0x20000418
 80074b0:	20000a3c 	.word	0x20000a3c
 80074b4:	20000010 	.word	0x20000010

080074b8 <__malloc_lock>:
 80074b8:	b510      	push	{r4, lr}
 80074ba:	4802      	ldr	r0, [pc, #8]	; (80074c4 <__malloc_lock+0xc>)
 80074bc:	f000 f9ec 	bl	8007898 <__retarget_lock_acquire_recursive>
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	20000bb1 	.word	0x20000bb1

080074c8 <__malloc_unlock>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	4802      	ldr	r0, [pc, #8]	; (80074d4 <__malloc_unlock+0xc>)
 80074cc:	f000 f9e5 	bl	800789a <__retarget_lock_release_recursive>
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	20000bb1 	.word	0x20000bb1

080074d8 <std>:
 80074d8:	2300      	movs	r3, #0
 80074da:	b510      	push	{r4, lr}
 80074dc:	0004      	movs	r4, r0
 80074de:	6003      	str	r3, [r0, #0]
 80074e0:	6043      	str	r3, [r0, #4]
 80074e2:	6083      	str	r3, [r0, #8]
 80074e4:	8181      	strh	r1, [r0, #12]
 80074e6:	6643      	str	r3, [r0, #100]	; 0x64
 80074e8:	81c2      	strh	r2, [r0, #14]
 80074ea:	6103      	str	r3, [r0, #16]
 80074ec:	6143      	str	r3, [r0, #20]
 80074ee:	6183      	str	r3, [r0, #24]
 80074f0:	0019      	movs	r1, r3
 80074f2:	2208      	movs	r2, #8
 80074f4:	305c      	adds	r0, #92	; 0x5c
 80074f6:	f000 f91f 	bl	8007738 <memset>
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <std+0x50>)
 80074fc:	61e4      	str	r4, [r4, #28]
 80074fe:	6223      	str	r3, [r4, #32]
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <std+0x54>)
 8007502:	6263      	str	r3, [r4, #36]	; 0x24
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <std+0x58>)
 8007506:	62a3      	str	r3, [r4, #40]	; 0x28
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <std+0x5c>)
 800750a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <std+0x60>)
 800750e:	429c      	cmp	r4, r3
 8007510:	d005      	beq.n	800751e <std+0x46>
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <std+0x64>)
 8007514:	429c      	cmp	r4, r3
 8007516:	d002      	beq.n	800751e <std+0x46>
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <std+0x68>)
 800751a:	429c      	cmp	r4, r3
 800751c:	d103      	bne.n	8007526 <std+0x4e>
 800751e:	0020      	movs	r0, r4
 8007520:	3058      	adds	r0, #88	; 0x58
 8007522:	f000 f9b7 	bl	8007894 <__retarget_lock_init_recursive>
 8007526:	bd10      	pop	{r4, pc}
 8007528:	080076a1 	.word	0x080076a1
 800752c:	080076c9 	.word	0x080076c9
 8007530:	08007701 	.word	0x08007701
 8007534:	0800772d 	.word	0x0800772d
 8007538:	20000a70 	.word	0x20000a70
 800753c:	20000ad8 	.word	0x20000ad8
 8007540:	20000b40 	.word	0x20000b40

08007544 <stdio_exit_handler>:
 8007544:	b510      	push	{r4, lr}
 8007546:	4a03      	ldr	r2, [pc, #12]	; (8007554 <stdio_exit_handler+0x10>)
 8007548:	4903      	ldr	r1, [pc, #12]	; (8007558 <stdio_exit_handler+0x14>)
 800754a:	4804      	ldr	r0, [pc, #16]	; (800755c <stdio_exit_handler+0x18>)
 800754c:	f000 f86c 	bl	8007628 <_fwalk_sglue>
 8007550:	bd10      	pop	{r4, pc}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	20000420 	.word	0x20000420
 8007558:	08009651 	.word	0x08009651
 800755c:	20000598 	.word	0x20000598

08007560 <cleanup_stdio>:
 8007560:	6841      	ldr	r1, [r0, #4]
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <cleanup_stdio+0x30>)
 8007564:	b510      	push	{r4, lr}
 8007566:	0004      	movs	r4, r0
 8007568:	4299      	cmp	r1, r3
 800756a:	d001      	beq.n	8007570 <cleanup_stdio+0x10>
 800756c:	f002 f870 	bl	8009650 <_fclose_r>
 8007570:	68a1      	ldr	r1, [r4, #8]
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <cleanup_stdio+0x34>)
 8007574:	4299      	cmp	r1, r3
 8007576:	d002      	beq.n	800757e <cleanup_stdio+0x1e>
 8007578:	0020      	movs	r0, r4
 800757a:	f002 f869 	bl	8009650 <_fclose_r>
 800757e:	68e1      	ldr	r1, [r4, #12]
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <cleanup_stdio+0x38>)
 8007582:	4299      	cmp	r1, r3
 8007584:	d002      	beq.n	800758c <cleanup_stdio+0x2c>
 8007586:	0020      	movs	r0, r4
 8007588:	f002 f862 	bl	8009650 <_fclose_r>
 800758c:	bd10      	pop	{r4, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	20000a70 	.word	0x20000a70
 8007594:	20000ad8 	.word	0x20000ad8
 8007598:	20000b40 	.word	0x20000b40

0800759c <global_stdio_init.part.0>:
 800759c:	b510      	push	{r4, lr}
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <global_stdio_init.part.0+0x28>)
 80075a0:	4a09      	ldr	r2, [pc, #36]	; (80075c8 <global_stdio_init.part.0+0x2c>)
 80075a2:	2104      	movs	r1, #4
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	4809      	ldr	r0, [pc, #36]	; (80075cc <global_stdio_init.part.0+0x30>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	f7ff ff95 	bl	80074d8 <std>
 80075ae:	2201      	movs	r2, #1
 80075b0:	2109      	movs	r1, #9
 80075b2:	4807      	ldr	r0, [pc, #28]	; (80075d0 <global_stdio_init.part.0+0x34>)
 80075b4:	f7ff ff90 	bl	80074d8 <std>
 80075b8:	2202      	movs	r2, #2
 80075ba:	2112      	movs	r1, #18
 80075bc:	4805      	ldr	r0, [pc, #20]	; (80075d4 <global_stdio_init.part.0+0x38>)
 80075be:	f7ff ff8b 	bl	80074d8 <std>
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	20000ba8 	.word	0x20000ba8
 80075c8:	08007545 	.word	0x08007545
 80075cc:	20000a70 	.word	0x20000a70
 80075d0:	20000ad8 	.word	0x20000ad8
 80075d4:	20000b40 	.word	0x20000b40

080075d8 <__sfp_lock_acquire>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	4802      	ldr	r0, [pc, #8]	; (80075e4 <__sfp_lock_acquire+0xc>)
 80075dc:	f000 f95c 	bl	8007898 <__retarget_lock_acquire_recursive>
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	20000bb2 	.word	0x20000bb2

080075e8 <__sfp_lock_release>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4802      	ldr	r0, [pc, #8]	; (80075f4 <__sfp_lock_release+0xc>)
 80075ec:	f000 f955 	bl	800789a <__retarget_lock_release_recursive>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	20000bb2 	.word	0x20000bb2

080075f8 <__sinit>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	0004      	movs	r4, r0
 80075fc:	f7ff ffec 	bl	80075d8 <__sfp_lock_acquire>
 8007600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <__sinit+0x14>
 8007606:	f7ff ffef 	bl	80075e8 <__sfp_lock_release>
 800760a:	bd10      	pop	{r4, pc}
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <__sinit+0x28>)
 800760e:	6363      	str	r3, [r4, #52]	; 0x34
 8007610:	4b04      	ldr	r3, [pc, #16]	; (8007624 <__sinit+0x2c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f6      	bne.n	8007606 <__sinit+0xe>
 8007618:	f7ff ffc0 	bl	800759c <global_stdio_init.part.0>
 800761c:	e7f3      	b.n	8007606 <__sinit+0xe>
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	08007561 	.word	0x08007561
 8007624:	20000ba8 	.word	0x20000ba8

08007628 <_fwalk_sglue>:
 8007628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800762a:	0014      	movs	r4, r2
 800762c:	2600      	movs	r6, #0
 800762e:	9000      	str	r0, [sp, #0]
 8007630:	9101      	str	r1, [sp, #4]
 8007632:	68a5      	ldr	r5, [r4, #8]
 8007634:	6867      	ldr	r7, [r4, #4]
 8007636:	3f01      	subs	r7, #1
 8007638:	d504      	bpl.n	8007644 <_fwalk_sglue+0x1c>
 800763a:	6824      	ldr	r4, [r4, #0]
 800763c:	2c00      	cmp	r4, #0
 800763e:	d1f8      	bne.n	8007632 <_fwalk_sglue+0xa>
 8007640:	0030      	movs	r0, r6
 8007642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007644:	89ab      	ldrh	r3, [r5, #12]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d908      	bls.n	800765c <_fwalk_sglue+0x34>
 800764a:	220e      	movs	r2, #14
 800764c:	5eab      	ldrsh	r3, [r5, r2]
 800764e:	3301      	adds	r3, #1
 8007650:	d004      	beq.n	800765c <_fwalk_sglue+0x34>
 8007652:	0029      	movs	r1, r5
 8007654:	9800      	ldr	r0, [sp, #0]
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	4798      	blx	r3
 800765a:	4306      	orrs	r6, r0
 800765c:	3568      	adds	r5, #104	; 0x68
 800765e:	e7ea      	b.n	8007636 <_fwalk_sglue+0xe>

08007660 <sprintf>:
 8007660:	b40e      	push	{r1, r2, r3}
 8007662:	b500      	push	{lr}
 8007664:	490b      	ldr	r1, [pc, #44]	; (8007694 <sprintf+0x34>)
 8007666:	b09c      	sub	sp, #112	; 0x70
 8007668:	ab1d      	add	r3, sp, #116	; 0x74
 800766a:	9002      	str	r0, [sp, #8]
 800766c:	9006      	str	r0, [sp, #24]
 800766e:	9107      	str	r1, [sp, #28]
 8007670:	9104      	str	r1, [sp, #16]
 8007672:	4809      	ldr	r0, [pc, #36]	; (8007698 <sprintf+0x38>)
 8007674:	4909      	ldr	r1, [pc, #36]	; (800769c <sprintf+0x3c>)
 8007676:	cb04      	ldmia	r3!, {r2}
 8007678:	9105      	str	r1, [sp, #20]
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	a902      	add	r1, sp, #8
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	f000 fda4 	bl	80081cc <_svfprintf_r>
 8007684:	2200      	movs	r2, #0
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	b01c      	add	sp, #112	; 0x70
 800768c:	bc08      	pop	{r3}
 800768e:	b003      	add	sp, #12
 8007690:	4718      	bx	r3
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	7fffffff 	.word	0x7fffffff
 8007698:	200006b8 	.word	0x200006b8
 800769c:	ffff0208 	.word	0xffff0208

080076a0 <__sread>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	000c      	movs	r4, r1
 80076a4:	250e      	movs	r5, #14
 80076a6:	5f49      	ldrsh	r1, [r1, r5]
 80076a8:	f000 f890 	bl	80077cc <_read_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db03      	blt.n	80076b8 <__sread+0x18>
 80076b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80076b2:	181b      	adds	r3, r3, r0
 80076b4:	6523      	str	r3, [r4, #80]	; 0x50
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	4a02      	ldr	r2, [pc, #8]	; (80076c4 <__sread+0x24>)
 80076bc:	4013      	ands	r3, r2
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	e7f9      	b.n	80076b6 <__sread+0x16>
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	ffffefff 	.word	0xffffefff

080076c8 <__swrite>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	001f      	movs	r7, r3
 80076cc:	898b      	ldrh	r3, [r1, #12]
 80076ce:	0005      	movs	r5, r0
 80076d0:	000c      	movs	r4, r1
 80076d2:	0016      	movs	r6, r2
 80076d4:	05db      	lsls	r3, r3, #23
 80076d6:	d505      	bpl.n	80076e4 <__swrite+0x1c>
 80076d8:	230e      	movs	r3, #14
 80076da:	5ec9      	ldrsh	r1, [r1, r3]
 80076dc:	2200      	movs	r2, #0
 80076de:	2302      	movs	r3, #2
 80076e0:	f000 f860 	bl	80077a4 <_lseek_r>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	4a05      	ldr	r2, [pc, #20]	; (80076fc <__swrite+0x34>)
 80076e8:	0028      	movs	r0, r5
 80076ea:	4013      	ands	r3, r2
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	0032      	movs	r2, r6
 80076f0:	230e      	movs	r3, #14
 80076f2:	5ee1      	ldrsh	r1, [r4, r3]
 80076f4:	003b      	movs	r3, r7
 80076f6:	f000 f88f 	bl	8007818 <_write_r>
 80076fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fc:	ffffefff 	.word	0xffffefff

08007700 <__sseek>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	000c      	movs	r4, r1
 8007704:	250e      	movs	r5, #14
 8007706:	5f49      	ldrsh	r1, [r1, r5]
 8007708:	f000 f84c 	bl	80077a4 <_lseek_r>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	1c42      	adds	r2, r0, #1
 8007710:	d103      	bne.n	800771a <__sseek+0x1a>
 8007712:	4a05      	ldr	r2, [pc, #20]	; (8007728 <__sseek+0x28>)
 8007714:	4013      	ands	r3, r2
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	2280      	movs	r2, #128	; 0x80
 800771c:	0152      	lsls	r2, r2, #5
 800771e:	4313      	orrs	r3, r2
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	6520      	str	r0, [r4, #80]	; 0x50
 8007724:	e7f8      	b.n	8007718 <__sseek+0x18>
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	ffffefff 	.word	0xffffefff

0800772c <__sclose>:
 800772c:	b510      	push	{r4, lr}
 800772e:	230e      	movs	r3, #14
 8007730:	5ec9      	ldrsh	r1, [r1, r3]
 8007732:	f000 f825 	bl	8007780 <_close_r>
 8007736:	bd10      	pop	{r4, pc}

08007738 <memset>:
 8007738:	0003      	movs	r3, r0
 800773a:	1882      	adds	r2, r0, r2
 800773c:	4293      	cmp	r3, r2
 800773e:	d100      	bne.n	8007742 <memset+0xa>
 8007740:	4770      	bx	lr
 8007742:	7019      	strb	r1, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	e7f9      	b.n	800773c <memset+0x4>

08007748 <strncpy>:
 8007748:	0003      	movs	r3, r0
 800774a:	b530      	push	{r4, r5, lr}
 800774c:	001d      	movs	r5, r3
 800774e:	2a00      	cmp	r2, #0
 8007750:	d006      	beq.n	8007760 <strncpy+0x18>
 8007752:	780c      	ldrb	r4, [r1, #0]
 8007754:	3a01      	subs	r2, #1
 8007756:	3301      	adds	r3, #1
 8007758:	702c      	strb	r4, [r5, #0]
 800775a:	3101      	adds	r1, #1
 800775c:	2c00      	cmp	r4, #0
 800775e:	d1f5      	bne.n	800774c <strncpy+0x4>
 8007760:	2100      	movs	r1, #0
 8007762:	189a      	adds	r2, r3, r2
 8007764:	4293      	cmp	r3, r2
 8007766:	d100      	bne.n	800776a <strncpy+0x22>
 8007768:	bd30      	pop	{r4, r5, pc}
 800776a:	7019      	strb	r1, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	e7f9      	b.n	8007764 <strncpy+0x1c>

08007770 <__locale_mb_cur_max>:
 8007770:	2294      	movs	r2, #148	; 0x94
 8007772:	4b02      	ldr	r3, [pc, #8]	; (800777c <__locale_mb_cur_max+0xc>)
 8007774:	0052      	lsls	r2, r2, #1
 8007776:	5c98      	ldrb	r0, [r3, r2]
 8007778:	4770      	bx	lr
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	2000042c 	.word	0x2000042c

08007780 <_close_r>:
 8007780:	2300      	movs	r3, #0
 8007782:	b570      	push	{r4, r5, r6, lr}
 8007784:	4d06      	ldr	r5, [pc, #24]	; (80077a0 <_close_r+0x20>)
 8007786:	0004      	movs	r4, r0
 8007788:	0008      	movs	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7fb fe01 	bl	8003392 <_close>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d103      	bne.n	800779c <_close_r+0x1c>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d000      	beq.n	800779c <_close_r+0x1c>
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	20000bac 	.word	0x20000bac

080077a4 <_lseek_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	0004      	movs	r4, r0
 80077a8:	0008      	movs	r0, r1
 80077aa:	0011      	movs	r1, r2
 80077ac:	001a      	movs	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d05      	ldr	r5, [pc, #20]	; (80077c8 <_lseek_r+0x24>)
 80077b2:	602b      	str	r3, [r5, #0]
 80077b4:	f7fb fe0e 	bl	80033d4 <_lseek>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d103      	bne.n	80077c4 <_lseek_r+0x20>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d000      	beq.n	80077c4 <_lseek_r+0x20>
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	bd70      	pop	{r4, r5, r6, pc}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	20000bac 	.word	0x20000bac

080077cc <_read_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	0004      	movs	r4, r0
 80077d0:	0008      	movs	r0, r1
 80077d2:	0011      	movs	r1, r2
 80077d4:	001a      	movs	r2, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	4d05      	ldr	r5, [pc, #20]	; (80077f0 <_read_r+0x24>)
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7fb fda0 	bl	8003320 <_read>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d103      	bne.n	80077ec <_read_r+0x20>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d000      	beq.n	80077ec <_read_r+0x20>
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	20000bac 	.word	0x20000bac

080077f4 <_sbrk_r>:
 80077f4:	2300      	movs	r3, #0
 80077f6:	b570      	push	{r4, r5, r6, lr}
 80077f8:	4d06      	ldr	r5, [pc, #24]	; (8007814 <_sbrk_r+0x20>)
 80077fa:	0004      	movs	r4, r0
 80077fc:	0008      	movs	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7fb fdf4 	bl	80033ec <_sbrk>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d103      	bne.n	8007810 <_sbrk_r+0x1c>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d000      	beq.n	8007810 <_sbrk_r+0x1c>
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	20000bac 	.word	0x20000bac

08007818 <_write_r>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	0004      	movs	r4, r0
 800781c:	0008      	movs	r0, r1
 800781e:	0011      	movs	r1, r2
 8007820:	001a      	movs	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	4d05      	ldr	r5, [pc, #20]	; (800783c <_write_r+0x24>)
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7fb fd97 	bl	800335a <_write>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d103      	bne.n	8007838 <_write_r+0x20>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d000      	beq.n	8007838 <_write_r+0x20>
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	bd70      	pop	{r4, r5, r6, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	20000bac 	.word	0x20000bac

08007840 <__errno>:
 8007840:	4b01      	ldr	r3, [pc, #4]	; (8007848 <__errno+0x8>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	4770      	bx	lr
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	200006b8 	.word	0x200006b8

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	2600      	movs	r6, #0
 8007850:	4c0c      	ldr	r4, [pc, #48]	; (8007884 <__libc_init_array+0x38>)
 8007852:	4d0d      	ldr	r5, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007854:	1b64      	subs	r4, r4, r5
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	42a6      	cmp	r6, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	2600      	movs	r6, #0
 800785e:	f004 faa3 	bl	800bda8 <_init>
 8007862:	4c0a      	ldr	r4, [pc, #40]	; (800788c <__libc_init_array+0x40>)
 8007864:	4d0a      	ldr	r5, [pc, #40]	; (8007890 <__libc_init_array+0x44>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	42a6      	cmp	r6, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	00b3      	lsls	r3, r6, #2
 8007872:	58eb      	ldr	r3, [r5, r3]
 8007874:	4798      	blx	r3
 8007876:	3601      	adds	r6, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	00b3      	lsls	r3, r6, #2
 800787c:	58eb      	ldr	r3, [r5, r3]
 800787e:	4798      	blx	r3
 8007880:	3601      	adds	r6, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	0800c37c 	.word	0x0800c37c
 8007888:	0800c37c 	.word	0x0800c37c
 800788c:	0800c384 	.word	0x0800c384
 8007890:	0800c37c 	.word	0x0800c37c

08007894 <__retarget_lock_init_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_close_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_acquire_recursive>:
 8007898:	4770      	bx	lr

0800789a <__retarget_lock_release_recursive>:
 800789a:	4770      	bx	lr

0800789c <sysconf>:
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	b510      	push	{r4, lr}
 80078a0:	2808      	cmp	r0, #8
 80078a2:	d004      	beq.n	80078ae <sysconf+0x12>
 80078a4:	f7ff ffcc 	bl	8007840 <__errno>
 80078a8:	2316      	movs	r3, #22
 80078aa:	6003      	str	r3, [r0, #0]
 80078ac:	3b17      	subs	r3, #23
 80078ae:	0018      	movs	r0, r3
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <memcpy>:
 80078b2:	2300      	movs	r3, #0
 80078b4:	b510      	push	{r4, lr}
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d100      	bne.n	80078bc <memcpy+0xa>
 80078ba:	bd10      	pop	{r4, pc}
 80078bc:	5ccc      	ldrb	r4, [r1, r3]
 80078be:	54c4      	strb	r4, [r0, r3]
 80078c0:	3301      	adds	r3, #1
 80078c2:	e7f8      	b.n	80078b6 <memcpy+0x4>

080078c4 <register_fini>:
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <register_fini+0x10>)
 80078c6:	b510      	push	{r4, lr}
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <register_fini+0xe>
 80078cc:	4802      	ldr	r0, [pc, #8]	; (80078d8 <register_fini+0x14>)
 80078ce:	f000 f805 	bl	80078dc <atexit>
 80078d2:	bd10      	pop	{r4, pc}
 80078d4:	00000000 	.word	0x00000000
 80078d8:	08009891 	.word	0x08009891

080078dc <atexit>:
 80078dc:	2300      	movs	r3, #0
 80078de:	b510      	push	{r4, lr}
 80078e0:	0001      	movs	r1, r0
 80078e2:	001a      	movs	r2, r3
 80078e4:	0018      	movs	r0, r3
 80078e6:	f002 f825 	bl	8009934 <__register_exitproc>
 80078ea:	bd10      	pop	{r4, pc}

080078ec <_malloc_trim_r>:
 80078ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ee:	0004      	movs	r4, r0
 80078f0:	2008      	movs	r0, #8
 80078f2:	000d      	movs	r5, r1
 80078f4:	f7ff ffd2 	bl	800789c <sysconf>
 80078f8:	0006      	movs	r6, r0
 80078fa:	0020      	movs	r0, r4
 80078fc:	f7ff fddc 	bl	80074b8 <__malloc_lock>
 8007900:	2203      	movs	r2, #3
 8007902:	4f21      	ldr	r7, [pc, #132]	; (8007988 <_malloc_trim_r+0x9c>)
 8007904:	0031      	movs	r1, r6
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	4393      	bics	r3, r2
 800790c:	1b58      	subs	r0, r3, r5
 800790e:	3811      	subs	r0, #17
 8007910:	1980      	adds	r0, r0, r6
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	f7f8 fc12 	bl	800013c <__udivsi3>
 8007918:	1e45      	subs	r5, r0, #1
 800791a:	4375      	muls	r5, r6
 800791c:	42ae      	cmp	r6, r5
 800791e:	dd04      	ble.n	800792a <_malloc_trim_r+0x3e>
 8007920:	0020      	movs	r0, r4
 8007922:	f7ff fdd1 	bl	80074c8 <__malloc_unlock>
 8007926:	2000      	movs	r0, #0
 8007928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800792a:	2100      	movs	r1, #0
 800792c:	0020      	movs	r0, r4
 800792e:	f7ff ff61 	bl	80077f4 <_sbrk_r>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	9a01      	ldr	r2, [sp, #4]
 8007936:	189b      	adds	r3, r3, r2
 8007938:	4298      	cmp	r0, r3
 800793a:	d1f1      	bne.n	8007920 <_malloc_trim_r+0x34>
 800793c:	0020      	movs	r0, r4
 800793e:	4269      	negs	r1, r5
 8007940:	f7ff ff58 	bl	80077f4 <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d110      	bne.n	800796a <_malloc_trim_r+0x7e>
 8007948:	2100      	movs	r1, #0
 800794a:	0020      	movs	r0, r4
 800794c:	f7ff ff52 	bl	80077f4 <_sbrk_r>
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	1a81      	subs	r1, r0, r2
 8007954:	290f      	cmp	r1, #15
 8007956:	dde3      	ble.n	8007920 <_malloc_trim_r+0x34>
 8007958:	4d0c      	ldr	r5, [pc, #48]	; (800798c <_malloc_trim_r+0xa0>)
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <_malloc_trim_r+0xa4>)
 800795c:	682d      	ldr	r5, [r5, #0]
 800795e:	1b40      	subs	r0, r0, r5
 8007960:	6018      	str	r0, [r3, #0]
 8007962:	2301      	movs	r3, #1
 8007964:	430b      	orrs	r3, r1
 8007966:	6053      	str	r3, [r2, #4]
 8007968:	e7da      	b.n	8007920 <_malloc_trim_r+0x34>
 800796a:	2601      	movs	r6, #1
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	1b5b      	subs	r3, r3, r5
 8007972:	4333      	orrs	r3, r6
 8007974:	6053      	str	r3, [r2, #4]
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <_malloc_trim_r+0xa4>)
 8007978:	0020      	movs	r0, r4
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	1b5b      	subs	r3, r3, r5
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	f7ff fda2 	bl	80074c8 <__malloc_unlock>
 8007984:	0030      	movs	r0, r6
 8007986:	e7cf      	b.n	8007928 <_malloc_trim_r+0x3c>
 8007988:	20000010 	.word	0x20000010
 800798c:	20000418 	.word	0x20000418
 8007990:	20000a3c 	.word	0x20000a3c

08007994 <_free_r>:
 8007994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007996:	1e0d      	subs	r5, r1, #0
 8007998:	9001      	str	r0, [sp, #4]
 800799a:	d02d      	beq.n	80079f8 <_free_r+0x64>
 800799c:	f7ff fd8c 	bl	80074b8 <__malloc_lock>
 80079a0:	2301      	movs	r3, #1
 80079a2:	0029      	movs	r1, r5
 80079a4:	469c      	mov	ip, r3
 80079a6:	3908      	subs	r1, #8
 80079a8:	684f      	ldr	r7, [r1, #4]
 80079aa:	4662      	mov	r2, ip
 80079ac:	003b      	movs	r3, r7
 80079ae:	4664      	mov	r4, ip
 80079b0:	4393      	bics	r3, r2
 80079b2:	18c8      	adds	r0, r1, r3
 80079b4:	6845      	ldr	r5, [r0, #4]
 80079b6:	3202      	adds	r2, #2
 80079b8:	4395      	bics	r5, r2
 80079ba:	4a4a      	ldr	r2, [pc, #296]	; (8007ae4 <_free_r+0x150>)
 80079bc:	4027      	ands	r7, r4
 80079be:	6896      	ldr	r6, [r2, #8]
 80079c0:	4286      	cmp	r6, r0
 80079c2:	d11a      	bne.n	80079fa <_free_r+0x66>
 80079c4:	195b      	adds	r3, r3, r5
 80079c6:	2f00      	cmp	r7, #0
 80079c8:	d106      	bne.n	80079d8 <_free_r+0x44>
 80079ca:	6808      	ldr	r0, [r1, #0]
 80079cc:	1a09      	subs	r1, r1, r0
 80079ce:	688d      	ldr	r5, [r1, #8]
 80079d0:	181b      	adds	r3, r3, r0
 80079d2:	68c8      	ldr	r0, [r1, #12]
 80079d4:	60e8      	str	r0, [r5, #12]
 80079d6:	6085      	str	r5, [r0, #8]
 80079d8:	2001      	movs	r0, #1
 80079da:	4318      	orrs	r0, r3
 80079dc:	6048      	str	r0, [r1, #4]
 80079de:	6091      	str	r1, [r2, #8]
 80079e0:	4a41      	ldr	r2, [pc, #260]	; (8007ae8 <_free_r+0x154>)
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d804      	bhi.n	80079f2 <_free_r+0x5e>
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <_free_r+0x158>)
 80079ea:	9801      	ldr	r0, [sp, #4]
 80079ec:	6819      	ldr	r1, [r3, #0]
 80079ee:	f7ff ff7d 	bl	80078ec <_malloc_trim_r>
 80079f2:	9801      	ldr	r0, [sp, #4]
 80079f4:	f7ff fd68 	bl	80074c8 <__malloc_unlock>
 80079f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80079fa:	2600      	movs	r6, #0
 80079fc:	6045      	str	r5, [r0, #4]
 80079fe:	42b7      	cmp	r7, r6
 8007a00:	d109      	bne.n	8007a16 <_free_r+0x82>
 8007a02:	680f      	ldr	r7, [r1, #0]
 8007a04:	4c3a      	ldr	r4, [pc, #232]	; (8007af0 <_free_r+0x15c>)
 8007a06:	1bc9      	subs	r1, r1, r7
 8007a08:	19db      	adds	r3, r3, r7
 8007a0a:	688f      	ldr	r7, [r1, #8]
 8007a0c:	42a7      	cmp	r7, r4
 8007a0e:	d02c      	beq.n	8007a6a <_free_r+0xd6>
 8007a10:	68cc      	ldr	r4, [r1, #12]
 8007a12:	60fc      	str	r4, [r7, #12]
 8007a14:	60a7      	str	r7, [r4, #8]
 8007a16:	1947      	adds	r7, r0, r5
 8007a18:	687c      	ldr	r4, [r7, #4]
 8007a1a:	2701      	movs	r7, #1
 8007a1c:	423c      	tst	r4, r7
 8007a1e:	d10b      	bne.n	8007a38 <_free_r+0xa4>
 8007a20:	195b      	adds	r3, r3, r5
 8007a22:	6885      	ldr	r5, [r0, #8]
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	d122      	bne.n	8007a6e <_free_r+0xda>
 8007a28:	4c31      	ldr	r4, [pc, #196]	; (8007af0 <_free_r+0x15c>)
 8007a2a:	42a5      	cmp	r5, r4
 8007a2c:	d11f      	bne.n	8007a6e <_free_r+0xda>
 8007a2e:	003e      	movs	r6, r7
 8007a30:	6151      	str	r1, [r2, #20]
 8007a32:	6111      	str	r1, [r2, #16]
 8007a34:	60cd      	str	r5, [r1, #12]
 8007a36:	608d      	str	r5, [r1, #8]
 8007a38:	2501      	movs	r5, #1
 8007a3a:	0028      	movs	r0, r5
 8007a3c:	4318      	orrs	r0, r3
 8007a3e:	6048      	str	r0, [r1, #4]
 8007a40:	50cb      	str	r3, [r1, r3]
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d1d5      	bne.n	80079f2 <_free_r+0x5e>
 8007a46:	2080      	movs	r0, #128	; 0x80
 8007a48:	0080      	lsls	r0, r0, #2
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	d213      	bcs.n	8007a76 <_free_r+0xe2>
 8007a4e:	08d8      	lsrs	r0, r3, #3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	409d      	lsls	r5, r3
 8007a54:	6853      	ldr	r3, [r2, #4]
 8007a56:	431d      	orrs	r5, r3
 8007a58:	00c3      	lsls	r3, r0, #3
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	6055      	str	r5, [r2, #4]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	60cb      	str	r3, [r1, #12]
 8007a62:	608a      	str	r2, [r1, #8]
 8007a64:	6099      	str	r1, [r3, #8]
 8007a66:	60d1      	str	r1, [r2, #12]
 8007a68:	e7c3      	b.n	80079f2 <_free_r+0x5e>
 8007a6a:	4666      	mov	r6, ip
 8007a6c:	e7d3      	b.n	8007a16 <_free_r+0x82>
 8007a6e:	68c0      	ldr	r0, [r0, #12]
 8007a70:	60e8      	str	r0, [r5, #12]
 8007a72:	6085      	str	r5, [r0, #8]
 8007a74:	e7e0      	b.n	8007a38 <_free_r+0xa4>
 8007a76:	0a5d      	lsrs	r5, r3, #9
 8007a78:	2d04      	cmp	r5, #4
 8007a7a:	d812      	bhi.n	8007aa2 <_free_r+0x10e>
 8007a7c:	0998      	lsrs	r0, r3, #6
 8007a7e:	3038      	adds	r0, #56	; 0x38
 8007a80:	00c6      	lsls	r6, r0, #3
 8007a82:	18b6      	adds	r6, r6, r2
 8007a84:	68b5      	ldr	r5, [r6, #8]
 8007a86:	2703      	movs	r7, #3
 8007a88:	42ae      	cmp	r6, r5
 8007a8a:	d125      	bne.n	8007ad8 <_free_r+0x144>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	1080      	asrs	r0, r0, #2
 8007a90:	4083      	lsls	r3, r0
 8007a92:	6850      	ldr	r0, [r2, #4]
 8007a94:	4303      	orrs	r3, r0
 8007a96:	6053      	str	r3, [r2, #4]
 8007a98:	60ce      	str	r6, [r1, #12]
 8007a9a:	608d      	str	r5, [r1, #8]
 8007a9c:	60b1      	str	r1, [r6, #8]
 8007a9e:	60e9      	str	r1, [r5, #12]
 8007aa0:	e7a7      	b.n	80079f2 <_free_r+0x5e>
 8007aa2:	2d14      	cmp	r5, #20
 8007aa4:	d802      	bhi.n	8007aac <_free_r+0x118>
 8007aa6:	0028      	movs	r0, r5
 8007aa8:	305b      	adds	r0, #91	; 0x5b
 8007aaa:	e7e9      	b.n	8007a80 <_free_r+0xec>
 8007aac:	2d54      	cmp	r5, #84	; 0x54
 8007aae:	d802      	bhi.n	8007ab6 <_free_r+0x122>
 8007ab0:	0b18      	lsrs	r0, r3, #12
 8007ab2:	306e      	adds	r0, #110	; 0x6e
 8007ab4:	e7e4      	b.n	8007a80 <_free_r+0xec>
 8007ab6:	20aa      	movs	r0, #170	; 0xaa
 8007ab8:	0040      	lsls	r0, r0, #1
 8007aba:	4285      	cmp	r5, r0
 8007abc:	d802      	bhi.n	8007ac4 <_free_r+0x130>
 8007abe:	0bd8      	lsrs	r0, r3, #15
 8007ac0:	3077      	adds	r0, #119	; 0x77
 8007ac2:	e7dd      	b.n	8007a80 <_free_r+0xec>
 8007ac4:	4e0b      	ldr	r6, [pc, #44]	; (8007af4 <_free_r+0x160>)
 8007ac6:	207e      	movs	r0, #126	; 0x7e
 8007ac8:	42b5      	cmp	r5, r6
 8007aca:	d8d9      	bhi.n	8007a80 <_free_r+0xec>
 8007acc:	0c98      	lsrs	r0, r3, #18
 8007ace:	307c      	adds	r0, #124	; 0x7c
 8007ad0:	e7d6      	b.n	8007a80 <_free_r+0xec>
 8007ad2:	68ad      	ldr	r5, [r5, #8]
 8007ad4:	42ae      	cmp	r6, r5
 8007ad6:	d003      	beq.n	8007ae0 <_free_r+0x14c>
 8007ad8:	686a      	ldr	r2, [r5, #4]
 8007ada:	43ba      	bics	r2, r7
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d8f8      	bhi.n	8007ad2 <_free_r+0x13e>
 8007ae0:	68ee      	ldr	r6, [r5, #12]
 8007ae2:	e7d9      	b.n	8007a98 <_free_r+0x104>
 8007ae4:	20000010 	.word	0x20000010
 8007ae8:	2000041c 	.word	0x2000041c
 8007aec:	20000a6c 	.word	0x20000a6c
 8007af0:	20000018 	.word	0x20000018
 8007af4:	00000554 	.word	0x00000554

08007af8 <__ascii_mbtowc>:
 8007af8:	b082      	sub	sp, #8
 8007afa:	2900      	cmp	r1, #0
 8007afc:	d100      	bne.n	8007b00 <__ascii_mbtowc+0x8>
 8007afe:	a901      	add	r1, sp, #4
 8007b00:	1e10      	subs	r0, r2, #0
 8007b02:	d006      	beq.n	8007b12 <__ascii_mbtowc+0x1a>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <__ascii_mbtowc+0x1e>
 8007b08:	7813      	ldrb	r3, [r2, #0]
 8007b0a:	600b      	str	r3, [r1, #0]
 8007b0c:	7810      	ldrb	r0, [r2, #0]
 8007b0e:	1e43      	subs	r3, r0, #1
 8007b10:	4198      	sbcs	r0, r3
 8007b12:	b002      	add	sp, #8
 8007b14:	4770      	bx	lr
 8007b16:	2002      	movs	r0, #2
 8007b18:	4240      	negs	r0, r0
 8007b1a:	e7fa      	b.n	8007b12 <__ascii_mbtowc+0x1a>

08007b1c <_Balloc>:
 8007b1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007b1e:	b570      	push	{r4, r5, r6, lr}
 8007b20:	0006      	movs	r6, r0
 8007b22:	000c      	movs	r4, r1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <_Balloc+0x32>
 8007b28:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007b2a:	00a2      	lsls	r2, r4, #2
 8007b2c:	189b      	adds	r3, r3, r2
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d115      	bne.n	8007b60 <_Balloc+0x44>
 8007b34:	2101      	movs	r1, #1
 8007b36:	000d      	movs	r5, r1
 8007b38:	40a5      	lsls	r5, r4
 8007b3a:	1d6a      	adds	r2, r5, #5
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	f001 ff56 	bl	80099f0 <_calloc_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d009      	beq.n	8007b5c <_Balloc+0x40>
 8007b48:	6044      	str	r4, [r0, #4]
 8007b4a:	6085      	str	r5, [r0, #8]
 8007b4c:	e00a      	b.n	8007b64 <_Balloc+0x48>
 8007b4e:	2221      	movs	r2, #33	; 0x21
 8007b50:	2104      	movs	r1, #4
 8007b52:	f001 ff4d 	bl	80099f0 <_calloc_r>
 8007b56:	6470      	str	r0, [r6, #68]	; 0x44
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1e5      	bne.n	8007b28 <_Balloc+0xc>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	6802      	ldr	r2, [r0, #0]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	6103      	str	r3, [r0, #16]
 8007b68:	60c3      	str	r3, [r0, #12]
 8007b6a:	e7f8      	b.n	8007b5e <_Balloc+0x42>

08007b6c <_Bfree>:
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d006      	beq.n	8007b7e <_Bfree+0x12>
 8007b70:	684a      	ldr	r2, [r1, #4]
 8007b72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	600a      	str	r2, [r1, #0]
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	4770      	bx	lr

08007b80 <__multadd>:
 8007b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b82:	000e      	movs	r6, r1
 8007b84:	9001      	str	r0, [sp, #4]
 8007b86:	000c      	movs	r4, r1
 8007b88:	001d      	movs	r5, r3
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	690f      	ldr	r7, [r1, #16]
 8007b8e:	3614      	adds	r6, #20
 8007b90:	6833      	ldr	r3, [r6, #0]
 8007b92:	3001      	adds	r0, #1
 8007b94:	b299      	uxth	r1, r3
 8007b96:	4351      	muls	r1, r2
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	4353      	muls	r3, r2
 8007b9c:	1949      	adds	r1, r1, r5
 8007b9e:	0c0d      	lsrs	r5, r1, #16
 8007ba0:	195b      	adds	r3, r3, r5
 8007ba2:	0c1d      	lsrs	r5, r3, #16
 8007ba4:	b289      	uxth	r1, r1
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	185b      	adds	r3, r3, r1
 8007baa:	c608      	stmia	r6!, {r3}
 8007bac:	4287      	cmp	r7, r0
 8007bae:	dcef      	bgt.n	8007b90 <__multadd+0x10>
 8007bb0:	2d00      	cmp	r5, #0
 8007bb2:	d022      	beq.n	8007bfa <__multadd+0x7a>
 8007bb4:	68a3      	ldr	r3, [r4, #8]
 8007bb6:	42bb      	cmp	r3, r7
 8007bb8:	dc19      	bgt.n	8007bee <__multadd+0x6e>
 8007bba:	6861      	ldr	r1, [r4, #4]
 8007bbc:	9801      	ldr	r0, [sp, #4]
 8007bbe:	3101      	adds	r1, #1
 8007bc0:	f7ff ffac 	bl	8007b1c <_Balloc>
 8007bc4:	1e06      	subs	r6, r0, #0
 8007bc6:	d105      	bne.n	8007bd4 <__multadd+0x54>
 8007bc8:	0032      	movs	r2, r6
 8007bca:	21ba      	movs	r1, #186	; 0xba
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <__multadd+0x80>)
 8007bce:	480d      	ldr	r0, [pc, #52]	; (8007c04 <__multadd+0x84>)
 8007bd0:	f001 fef0 	bl	80099b4 <__assert_func>
 8007bd4:	0021      	movs	r1, r4
 8007bd6:	6922      	ldr	r2, [r4, #16]
 8007bd8:	310c      	adds	r1, #12
 8007bda:	3202      	adds	r2, #2
 8007bdc:	0092      	lsls	r2, r2, #2
 8007bde:	300c      	adds	r0, #12
 8007be0:	f7ff fe67 	bl	80078b2 <memcpy>
 8007be4:	0021      	movs	r1, r4
 8007be6:	9801      	ldr	r0, [sp, #4]
 8007be8:	f7ff ffc0 	bl	8007b6c <_Bfree>
 8007bec:	0034      	movs	r4, r6
 8007bee:	1d3b      	adds	r3, r7, #4
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	18e3      	adds	r3, r4, r3
 8007bf4:	605d      	str	r5, [r3, #4]
 8007bf6:	1c7b      	adds	r3, r7, #1
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	0020      	movs	r0, r4
 8007bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	0800c0ef 	.word	0x0800c0ef
 8007c04:	0800c100 	.word	0x0800c100

08007c08 <__hi0bits>:
 8007c08:	0003      	movs	r3, r0
 8007c0a:	0c02      	lsrs	r2, r0, #16
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	4282      	cmp	r2, r0
 8007c10:	d101      	bne.n	8007c16 <__hi0bits+0xe>
 8007c12:	041b      	lsls	r3, r3, #16
 8007c14:	3010      	adds	r0, #16
 8007c16:	0e1a      	lsrs	r2, r3, #24
 8007c18:	d101      	bne.n	8007c1e <__hi0bits+0x16>
 8007c1a:	3008      	adds	r0, #8
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	0f1a      	lsrs	r2, r3, #28
 8007c20:	d101      	bne.n	8007c26 <__hi0bits+0x1e>
 8007c22:	3004      	adds	r0, #4
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	0f9a      	lsrs	r2, r3, #30
 8007c28:	d101      	bne.n	8007c2e <__hi0bits+0x26>
 8007c2a:	3002      	adds	r0, #2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db03      	blt.n	8007c3a <__hi0bits+0x32>
 8007c32:	3001      	adds	r0, #1
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	d400      	bmi.n	8007c3a <__hi0bits+0x32>
 8007c38:	2020      	movs	r0, #32
 8007c3a:	4770      	bx	lr

08007c3c <__lo0bits>:
 8007c3c:	6803      	ldr	r3, [r0, #0]
 8007c3e:	0001      	movs	r1, r0
 8007c40:	2207      	movs	r2, #7
 8007c42:	0018      	movs	r0, r3
 8007c44:	4010      	ands	r0, r2
 8007c46:	4213      	tst	r3, r2
 8007c48:	d00d      	beq.n	8007c66 <__lo0bits+0x2a>
 8007c4a:	3a06      	subs	r2, #6
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	4213      	tst	r3, r2
 8007c50:	d105      	bne.n	8007c5e <__lo0bits+0x22>
 8007c52:	3002      	adds	r0, #2
 8007c54:	4203      	tst	r3, r0
 8007c56:	d003      	beq.n	8007c60 <__lo0bits+0x24>
 8007c58:	40d3      	lsrs	r3, r2
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	600b      	str	r3, [r1, #0]
 8007c5e:	4770      	bx	lr
 8007c60:	089b      	lsrs	r3, r3, #2
 8007c62:	600b      	str	r3, [r1, #0]
 8007c64:	e7fb      	b.n	8007c5e <__lo0bits+0x22>
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d101      	bne.n	8007c70 <__lo0bits+0x34>
 8007c6c:	2010      	movs	r0, #16
 8007c6e:	0c1b      	lsrs	r3, r3, #16
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d101      	bne.n	8007c7a <__lo0bits+0x3e>
 8007c76:	3008      	adds	r0, #8
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	071a      	lsls	r2, r3, #28
 8007c7c:	d101      	bne.n	8007c82 <__lo0bits+0x46>
 8007c7e:	3004      	adds	r0, #4
 8007c80:	091b      	lsrs	r3, r3, #4
 8007c82:	079a      	lsls	r2, r3, #30
 8007c84:	d101      	bne.n	8007c8a <__lo0bits+0x4e>
 8007c86:	3002      	adds	r0, #2
 8007c88:	089b      	lsrs	r3, r3, #2
 8007c8a:	07da      	lsls	r2, r3, #31
 8007c8c:	d4e9      	bmi.n	8007c62 <__lo0bits+0x26>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	d1e6      	bne.n	8007c62 <__lo0bits+0x26>
 8007c94:	2020      	movs	r0, #32
 8007c96:	e7e2      	b.n	8007c5e <__lo0bits+0x22>

08007c98 <__i2b>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	000c      	movs	r4, r1
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	f7ff ff3d 	bl	8007b1c <_Balloc>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d107      	bne.n	8007cb6 <__i2b+0x1e>
 8007ca6:	2146      	movs	r1, #70	; 0x46
 8007ca8:	4c05      	ldr	r4, [pc, #20]	; (8007cc0 <__i2b+0x28>)
 8007caa:	0002      	movs	r2, r0
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <__i2b+0x2c>)
 8007cae:	0020      	movs	r0, r4
 8007cb0:	31ff      	adds	r1, #255	; 0xff
 8007cb2:	f001 fe7f 	bl	80099b4 <__assert_func>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6144      	str	r4, [r0, #20]
 8007cba:	6103      	str	r3, [r0, #16]
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	0800c100 	.word	0x0800c100
 8007cc4:	0800c0ef 	.word	0x0800c0ef

08007cc8 <__multiply>:
 8007cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cca:	0015      	movs	r5, r2
 8007ccc:	690a      	ldr	r2, [r1, #16]
 8007cce:	692b      	ldr	r3, [r5, #16]
 8007cd0:	000c      	movs	r4, r1
 8007cd2:	b08b      	sub	sp, #44	; 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	da01      	bge.n	8007cdc <__multiply+0x14>
 8007cd8:	002c      	movs	r4, r5
 8007cda:	000d      	movs	r5, r1
 8007cdc:	6927      	ldr	r7, [r4, #16]
 8007cde:	692e      	ldr	r6, [r5, #16]
 8007ce0:	6861      	ldr	r1, [r4, #4]
 8007ce2:	19bb      	adds	r3, r7, r6
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	19ba      	adds	r2, r7, r6
 8007cea:	4293      	cmp	r3, r2
 8007cec:	da00      	bge.n	8007cf0 <__multiply+0x28>
 8007cee:	3101      	adds	r1, #1
 8007cf0:	f7ff ff14 	bl	8007b1c <_Balloc>
 8007cf4:	9002      	str	r0, [sp, #8]
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d106      	bne.n	8007d08 <__multiply+0x40>
 8007cfa:	21b1      	movs	r1, #177	; 0xb1
 8007cfc:	4b48      	ldr	r3, [pc, #288]	; (8007e20 <__multiply+0x158>)
 8007cfe:	4849      	ldr	r0, [pc, #292]	; (8007e24 <__multiply+0x15c>)
 8007d00:	9a02      	ldr	r2, [sp, #8]
 8007d02:	0049      	lsls	r1, r1, #1
 8007d04:	f001 fe56 	bl	80099b4 <__assert_func>
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	469c      	mov	ip, r3
 8007d10:	19bb      	adds	r3, r7, r6
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4463      	add	r3, ip
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	4663      	mov	r3, ip
 8007d1a:	9904      	ldr	r1, [sp, #16]
 8007d1c:	428b      	cmp	r3, r1
 8007d1e:	d32a      	bcc.n	8007d76 <__multiply+0xae>
 8007d20:	0023      	movs	r3, r4
 8007d22:	00bf      	lsls	r7, r7, #2
 8007d24:	3314      	adds	r3, #20
 8007d26:	3514      	adds	r5, #20
 8007d28:	9308      	str	r3, [sp, #32]
 8007d2a:	00b6      	lsls	r6, r6, #2
 8007d2c:	19db      	adds	r3, r3, r7
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	19ab      	adds	r3, r5, r6
 8007d32:	9309      	str	r3, [sp, #36]	; 0x24
 8007d34:	2304      	movs	r3, #4
 8007d36:	9306      	str	r3, [sp, #24]
 8007d38:	0023      	movs	r3, r4
 8007d3a:	9a05      	ldr	r2, [sp, #20]
 8007d3c:	3315      	adds	r3, #21
 8007d3e:	9501      	str	r5, [sp, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d305      	bcc.n	8007d50 <__multiply+0x88>
 8007d44:	1b13      	subs	r3, r2, r4
 8007d46:	3b15      	subs	r3, #21
 8007d48:	089b      	lsrs	r3, r3, #2
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	9306      	str	r3, [sp, #24]
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d310      	bcc.n	8007d7a <__multiply+0xb2>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	dd05      	ble.n	8007d6a <__multiply+0xa2>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	3b04      	subs	r3, #4
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d056      	beq.n	8007e18 <__multiply+0x150>
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	9a03      	ldr	r2, [sp, #12]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	611a      	str	r2, [r3, #16]
 8007d72:	b00b      	add	sp, #44	; 0x2c
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	c304      	stmia	r3!, {r2}
 8007d78:	e7cf      	b.n	8007d1a <__multiply+0x52>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	b280      	uxth	r0, r0
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d01e      	beq.n	8007dc2 <__multiply+0xfa>
 8007d84:	4667      	mov	r7, ip
 8007d86:	2500      	movs	r5, #0
 8007d88:	9e08      	ldr	r6, [sp, #32]
 8007d8a:	ce02      	ldmia	r6!, {r1}
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	b28b      	uxth	r3, r1
 8007d92:	4343      	muls	r3, r0
 8007d94:	001a      	movs	r2, r3
 8007d96:	466b      	mov	r3, sp
 8007d98:	8b9b      	ldrh	r3, [r3, #28]
 8007d9a:	18d3      	adds	r3, r2, r3
 8007d9c:	195b      	adds	r3, r3, r5
 8007d9e:	0c0d      	lsrs	r5, r1, #16
 8007da0:	4345      	muls	r5, r0
 8007da2:	9a07      	ldr	r2, [sp, #28]
 8007da4:	0c11      	lsrs	r1, r2, #16
 8007da6:	1869      	adds	r1, r5, r1
 8007da8:	0c1a      	lsrs	r2, r3, #16
 8007daa:	188a      	adds	r2, r1, r2
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	0c15      	lsrs	r5, r2, #16
 8007db0:	0412      	lsls	r2, r2, #16
 8007db2:	431a      	orrs	r2, r3
 8007db4:	9b05      	ldr	r3, [sp, #20]
 8007db6:	c704      	stmia	r7!, {r2}
 8007db8:	42b3      	cmp	r3, r6
 8007dba:	d8e6      	bhi.n	8007d8a <__multiply+0xc2>
 8007dbc:	4663      	mov	r3, ip
 8007dbe:	9a06      	ldr	r2, [sp, #24]
 8007dc0:	509d      	str	r5, [r3, r2]
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	0c00      	lsrs	r0, r0, #16
 8007dc8:	d020      	beq.n	8007e0c <__multiply+0x144>
 8007dca:	4663      	mov	r3, ip
 8007dcc:	0025      	movs	r5, r4
 8007dce:	4661      	mov	r1, ip
 8007dd0:	2700      	movs	r7, #0
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3514      	adds	r5, #20
 8007dd6:	682a      	ldr	r2, [r5, #0]
 8007dd8:	680e      	ldr	r6, [r1, #0]
 8007dda:	b292      	uxth	r2, r2
 8007ddc:	4342      	muls	r2, r0
 8007dde:	0c36      	lsrs	r6, r6, #16
 8007de0:	1992      	adds	r2, r2, r6
 8007de2:	19d2      	adds	r2, r2, r7
 8007de4:	0416      	lsls	r6, r2, #16
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	431e      	orrs	r6, r3
 8007dea:	600e      	str	r6, [r1, #0]
 8007dec:	cd40      	ldmia	r5!, {r6}
 8007dee:	684b      	ldr	r3, [r1, #4]
 8007df0:	0c36      	lsrs	r6, r6, #16
 8007df2:	4346      	muls	r6, r0
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	0c12      	lsrs	r2, r2, #16
 8007df8:	18f3      	adds	r3, r6, r3
 8007dfa:	189b      	adds	r3, r3, r2
 8007dfc:	9a05      	ldr	r2, [sp, #20]
 8007dfe:	0c1f      	lsrs	r7, r3, #16
 8007e00:	3104      	adds	r1, #4
 8007e02:	42aa      	cmp	r2, r5
 8007e04:	d8e7      	bhi.n	8007dd6 <__multiply+0x10e>
 8007e06:	4662      	mov	r2, ip
 8007e08:	9906      	ldr	r1, [sp, #24]
 8007e0a:	5053      	str	r3, [r2, r1]
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	2304      	movs	r3, #4
 8007e14:	449c      	add	ip, r3
 8007e16:	e79b      	b.n	8007d50 <__multiply+0x88>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	e79b      	b.n	8007d58 <__multiply+0x90>
 8007e20:	0800c0ef 	.word	0x0800c0ef
 8007e24:	0800c100 	.word	0x0800c100

08007e28 <__pow5mult>:
 8007e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	0015      	movs	r5, r2
 8007e2e:	0007      	movs	r7, r0
 8007e30:	000e      	movs	r6, r1
 8007e32:	401a      	ands	r2, r3
 8007e34:	421d      	tst	r5, r3
 8007e36:	d008      	beq.n	8007e4a <__pow5mult+0x22>
 8007e38:	491a      	ldr	r1, [pc, #104]	; (8007ea4 <__pow5mult+0x7c>)
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	0092      	lsls	r2, r2, #2
 8007e3e:	5852      	ldr	r2, [r2, r1]
 8007e40:	2300      	movs	r3, #0
 8007e42:	0031      	movs	r1, r6
 8007e44:	f7ff fe9c 	bl	8007b80 <__multadd>
 8007e48:	0006      	movs	r6, r0
 8007e4a:	10ad      	asrs	r5, r5, #2
 8007e4c:	d027      	beq.n	8007e9e <__pow5mult+0x76>
 8007e4e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	d107      	bne.n	8007e64 <__pow5mult+0x3c>
 8007e54:	0038      	movs	r0, r7
 8007e56:	4914      	ldr	r1, [pc, #80]	; (8007ea8 <__pow5mult+0x80>)
 8007e58:	f7ff ff1e 	bl	8007c98 <__i2b>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	0004      	movs	r4, r0
 8007e60:	6438      	str	r0, [r7, #64]	; 0x40
 8007e62:	6003      	str	r3, [r0, #0]
 8007e64:	2301      	movs	r3, #1
 8007e66:	421d      	tst	r5, r3
 8007e68:	d00a      	beq.n	8007e80 <__pow5mult+0x58>
 8007e6a:	0031      	movs	r1, r6
 8007e6c:	0022      	movs	r2, r4
 8007e6e:	0038      	movs	r0, r7
 8007e70:	f7ff ff2a 	bl	8007cc8 <__multiply>
 8007e74:	0031      	movs	r1, r6
 8007e76:	9001      	str	r0, [sp, #4]
 8007e78:	0038      	movs	r0, r7
 8007e7a:	f7ff fe77 	bl	8007b6c <_Bfree>
 8007e7e:	9e01      	ldr	r6, [sp, #4]
 8007e80:	106d      	asrs	r5, r5, #1
 8007e82:	d00c      	beq.n	8007e9e <__pow5mult+0x76>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d107      	bne.n	8007e9a <__pow5mult+0x72>
 8007e8a:	0022      	movs	r2, r4
 8007e8c:	0021      	movs	r1, r4
 8007e8e:	0038      	movs	r0, r7
 8007e90:	f7ff ff1a 	bl	8007cc8 <__multiply>
 8007e94:	2300      	movs	r3, #0
 8007e96:	6020      	str	r0, [r4, #0]
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	e7e2      	b.n	8007e64 <__pow5mult+0x3c>
 8007e9e:	0030      	movs	r0, r6
 8007ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	0800c250 	.word	0x0800c250
 8007ea8:	00000271 	.word	0x00000271

08007eac <__lshift>:
 8007eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eae:	000c      	movs	r4, r1
 8007eb0:	0017      	movs	r7, r2
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	1155      	asrs	r5, r2, #5
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	18eb      	adds	r3, r5, r3
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	6849      	ldr	r1, [r1, #4]
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	9004      	str	r0, [sp, #16]
 8007ec6:	9a01      	ldr	r2, [sp, #4]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	db10      	blt.n	8007eee <__lshift+0x42>
 8007ecc:	9804      	ldr	r0, [sp, #16]
 8007ece:	f7ff fe25 	bl	8007b1c <_Balloc>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	0002      	movs	r2, r0
 8007ed6:	0006      	movs	r6, r0
 8007ed8:	0019      	movs	r1, r3
 8007eda:	3214      	adds	r2, #20
 8007edc:	4298      	cmp	r0, r3
 8007ede:	d10c      	bne.n	8007efa <__lshift+0x4e>
 8007ee0:	31df      	adds	r1, #223	; 0xdf
 8007ee2:	0032      	movs	r2, r6
 8007ee4:	4b26      	ldr	r3, [pc, #152]	; (8007f80 <__lshift+0xd4>)
 8007ee6:	4827      	ldr	r0, [pc, #156]	; (8007f84 <__lshift+0xd8>)
 8007ee8:	31ff      	adds	r1, #255	; 0xff
 8007eea:	f001 fd63 	bl	80099b4 <__assert_func>
 8007eee:	3101      	adds	r1, #1
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	e7e8      	b.n	8007ec6 <__lshift+0x1a>
 8007ef4:	0098      	lsls	r0, r3, #2
 8007ef6:	5011      	str	r1, [r2, r0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	42ab      	cmp	r3, r5
 8007efc:	dbfa      	blt.n	8007ef4 <__lshift+0x48>
 8007efe:	43eb      	mvns	r3, r5
 8007f00:	17db      	asrs	r3, r3, #31
 8007f02:	401d      	ands	r5, r3
 8007f04:	211f      	movs	r1, #31
 8007f06:	0023      	movs	r3, r4
 8007f08:	0038      	movs	r0, r7
 8007f0a:	00ad      	lsls	r5, r5, #2
 8007f0c:	1955      	adds	r5, r2, r5
 8007f0e:	6922      	ldr	r2, [r4, #16]
 8007f10:	3314      	adds	r3, #20
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	4008      	ands	r0, r1
 8007f16:	4684      	mov	ip, r0
 8007f18:	189a      	adds	r2, r3, r2
 8007f1a:	420f      	tst	r7, r1
 8007f1c:	d02a      	beq.n	8007f74 <__lshift+0xc8>
 8007f1e:	3101      	adds	r1, #1
 8007f20:	1a09      	subs	r1, r1, r0
 8007f22:	9105      	str	r1, [sp, #20]
 8007f24:	2100      	movs	r1, #0
 8007f26:	9503      	str	r5, [sp, #12]
 8007f28:	4667      	mov	r7, ip
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	40b8      	lsls	r0, r7
 8007f2e:	4308      	orrs	r0, r1
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	c101      	stmia	r1!, {r0}
 8007f34:	9103      	str	r1, [sp, #12]
 8007f36:	9805      	ldr	r0, [sp, #20]
 8007f38:	cb02      	ldmia	r3!, {r1}
 8007f3a:	40c1      	lsrs	r1, r0
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d8f3      	bhi.n	8007f28 <__lshift+0x7c>
 8007f40:	0020      	movs	r0, r4
 8007f42:	3015      	adds	r0, #21
 8007f44:	2304      	movs	r3, #4
 8007f46:	4282      	cmp	r2, r0
 8007f48:	d304      	bcc.n	8007f54 <__lshift+0xa8>
 8007f4a:	1b13      	subs	r3, r2, r4
 8007f4c:	3b15      	subs	r3, #21
 8007f4e:	089b      	lsrs	r3, r3, #2
 8007f50:	3301      	adds	r3, #1
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	50e9      	str	r1, [r5, r3]
 8007f56:	2900      	cmp	r1, #0
 8007f58:	d002      	beq.n	8007f60 <__lshift+0xb4>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	9804      	ldr	r0, [sp, #16]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	0021      	movs	r1, r4
 8007f68:	6133      	str	r3, [r6, #16]
 8007f6a:	f7ff fdff 	bl	8007b6c <_Bfree>
 8007f6e:	0030      	movs	r0, r6
 8007f70:	b007      	add	sp, #28
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	cb02      	ldmia	r3!, {r1}
 8007f76:	c502      	stmia	r5!, {r1}
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d8fb      	bhi.n	8007f74 <__lshift+0xc8>
 8007f7c:	e7f0      	b.n	8007f60 <__lshift+0xb4>
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	0800c0ef 	.word	0x0800c0ef
 8007f84:	0800c100 	.word	0x0800c100

08007f88 <__mcmp>:
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	690b      	ldr	r3, [r1, #16]
 8007f8c:	6904      	ldr	r4, [r0, #16]
 8007f8e:	0002      	movs	r2, r0
 8007f90:	1ae0      	subs	r0, r4, r3
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d10e      	bne.n	8007fb4 <__mcmp+0x2c>
 8007f96:	3214      	adds	r2, #20
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	3114      	adds	r1, #20
 8007f9c:	0014      	movs	r4, r2
 8007f9e:	18c9      	adds	r1, r1, r3
 8007fa0:	18d2      	adds	r2, r2, r3
 8007fa2:	3a04      	subs	r2, #4
 8007fa4:	3904      	subs	r1, #4
 8007fa6:	6815      	ldr	r5, [r2, #0]
 8007fa8:	680b      	ldr	r3, [r1, #0]
 8007faa:	429d      	cmp	r5, r3
 8007fac:	d003      	beq.n	8007fb6 <__mcmp+0x2e>
 8007fae:	2001      	movs	r0, #1
 8007fb0:	429d      	cmp	r5, r3
 8007fb2:	d303      	bcc.n	8007fbc <__mcmp+0x34>
 8007fb4:	bd30      	pop	{r4, r5, pc}
 8007fb6:	4294      	cmp	r4, r2
 8007fb8:	d3f3      	bcc.n	8007fa2 <__mcmp+0x1a>
 8007fba:	e7fb      	b.n	8007fb4 <__mcmp+0x2c>
 8007fbc:	4240      	negs	r0, r0
 8007fbe:	e7f9      	b.n	8007fb4 <__mcmp+0x2c>

08007fc0 <__mdiff>:
 8007fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc2:	000e      	movs	r6, r1
 8007fc4:	0007      	movs	r7, r0
 8007fc6:	0011      	movs	r1, r2
 8007fc8:	0030      	movs	r0, r6
 8007fca:	b087      	sub	sp, #28
 8007fcc:	0014      	movs	r4, r2
 8007fce:	f7ff ffdb 	bl	8007f88 <__mcmp>
 8007fd2:	1e05      	subs	r5, r0, #0
 8007fd4:	d110      	bne.n	8007ff8 <__mdiff+0x38>
 8007fd6:	0001      	movs	r1, r0
 8007fd8:	0038      	movs	r0, r7
 8007fda:	f7ff fd9f 	bl	8007b1c <_Balloc>
 8007fde:	1e02      	subs	r2, r0, #0
 8007fe0:	d104      	bne.n	8007fec <__mdiff+0x2c>
 8007fe2:	4b3f      	ldr	r3, [pc, #252]	; (80080e0 <__mdiff+0x120>)
 8007fe4:	483f      	ldr	r0, [pc, #252]	; (80080e4 <__mdiff+0x124>)
 8007fe6:	4940      	ldr	r1, [pc, #256]	; (80080e8 <__mdiff+0x128>)
 8007fe8:	f001 fce4 	bl	80099b4 <__assert_func>
 8007fec:	2301      	movs	r3, #1
 8007fee:	6145      	str	r5, [r0, #20]
 8007ff0:	6103      	str	r3, [r0, #16]
 8007ff2:	0010      	movs	r0, r2
 8007ff4:	b007      	add	sp, #28
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	db04      	blt.n	800800a <__mdiff+0x4a>
 8008000:	0023      	movs	r3, r4
 8008002:	0034      	movs	r4, r6
 8008004:	001e      	movs	r6, r3
 8008006:	2300      	movs	r3, #0
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	0038      	movs	r0, r7
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	f7ff fd85 	bl	8007b1c <_Balloc>
 8008012:	1e02      	subs	r2, r0, #0
 8008014:	d103      	bne.n	800801e <__mdiff+0x5e>
 8008016:	4b32      	ldr	r3, [pc, #200]	; (80080e0 <__mdiff+0x120>)
 8008018:	4832      	ldr	r0, [pc, #200]	; (80080e4 <__mdiff+0x124>)
 800801a:	4934      	ldr	r1, [pc, #208]	; (80080ec <__mdiff+0x12c>)
 800801c:	e7e4      	b.n	8007fe8 <__mdiff+0x28>
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	2700      	movs	r7, #0
 8008022:	60c3      	str	r3, [r0, #12]
 8008024:	6920      	ldr	r0, [r4, #16]
 8008026:	3414      	adds	r4, #20
 8008028:	0083      	lsls	r3, r0, #2
 800802a:	18e3      	adds	r3, r4, r3
 800802c:	0021      	movs	r1, r4
 800802e:	9401      	str	r4, [sp, #4]
 8008030:	0034      	movs	r4, r6
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	6933      	ldr	r3, [r6, #16]
 8008036:	3414      	adds	r4, #20
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	18e3      	adds	r3, r4, r3
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	0013      	movs	r3, r2
 8008040:	3314      	adds	r3, #20
 8008042:	469c      	mov	ip, r3
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	9104      	str	r1, [sp, #16]
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	cc02      	ldmia	r4!, {r1}
 800804c:	cb20      	ldmia	r3!, {r5}
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	b2ab      	uxth	r3, r5
 8008052:	19df      	adds	r7, r3, r7
 8008054:	b28b      	uxth	r3, r1
 8008056:	1afb      	subs	r3, r7, r3
 8008058:	0c09      	lsrs	r1, r1, #16
 800805a:	0c2d      	lsrs	r5, r5, #16
 800805c:	1a6d      	subs	r5, r5, r1
 800805e:	1419      	asrs	r1, r3, #16
 8008060:	1869      	adds	r1, r5, r1
 8008062:	b29b      	uxth	r3, r3
 8008064:	140f      	asrs	r7, r1, #16
 8008066:	0409      	lsls	r1, r1, #16
 8008068:	4319      	orrs	r1, r3
 800806a:	4663      	mov	r3, ip
 800806c:	c302      	stmia	r3!, {r1}
 800806e:	469c      	mov	ip, r3
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	42a3      	cmp	r3, r4
 8008074:	d8e8      	bhi.n	8008048 <__mdiff+0x88>
 8008076:	0031      	movs	r1, r6
 8008078:	9c03      	ldr	r4, [sp, #12]
 800807a:	3115      	adds	r1, #21
 800807c:	2304      	movs	r3, #4
 800807e:	428c      	cmp	r4, r1
 8008080:	d304      	bcc.n	800808c <__mdiff+0xcc>
 8008082:	1ba3      	subs	r3, r4, r6
 8008084:	3b15      	subs	r3, #21
 8008086:	089b      	lsrs	r3, r3, #2
 8008088:	3301      	adds	r3, #1
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	9901      	ldr	r1, [sp, #4]
 800808e:	18cd      	adds	r5, r1, r3
 8008090:	9905      	ldr	r1, [sp, #20]
 8008092:	002e      	movs	r6, r5
 8008094:	18cb      	adds	r3, r1, r3
 8008096:	469c      	mov	ip, r3
 8008098:	9902      	ldr	r1, [sp, #8]
 800809a:	428e      	cmp	r6, r1
 800809c:	d310      	bcc.n	80080c0 <__mdiff+0x100>
 800809e:	9e02      	ldr	r6, [sp, #8]
 80080a0:	1ee9      	subs	r1, r5, #3
 80080a2:	2400      	movs	r4, #0
 80080a4:	428e      	cmp	r6, r1
 80080a6:	d304      	bcc.n	80080b2 <__mdiff+0xf2>
 80080a8:	0031      	movs	r1, r6
 80080aa:	3103      	adds	r1, #3
 80080ac:	1b49      	subs	r1, r1, r5
 80080ae:	0889      	lsrs	r1, r1, #2
 80080b0:	008c      	lsls	r4, r1, #2
 80080b2:	191b      	adds	r3, r3, r4
 80080b4:	3b04      	subs	r3, #4
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d00f      	beq.n	80080dc <__mdiff+0x11c>
 80080bc:	6110      	str	r0, [r2, #16]
 80080be:	e798      	b.n	8007ff2 <__mdiff+0x32>
 80080c0:	ce02      	ldmia	r6!, {r1}
 80080c2:	b28c      	uxth	r4, r1
 80080c4:	19e4      	adds	r4, r4, r7
 80080c6:	0c0f      	lsrs	r7, r1, #16
 80080c8:	1421      	asrs	r1, r4, #16
 80080ca:	1879      	adds	r1, r7, r1
 80080cc:	b2a4      	uxth	r4, r4
 80080ce:	140f      	asrs	r7, r1, #16
 80080d0:	0409      	lsls	r1, r1, #16
 80080d2:	4321      	orrs	r1, r4
 80080d4:	4664      	mov	r4, ip
 80080d6:	c402      	stmia	r4!, {r1}
 80080d8:	46a4      	mov	ip, r4
 80080da:	e7dd      	b.n	8008098 <__mdiff+0xd8>
 80080dc:	3801      	subs	r0, #1
 80080de:	e7e9      	b.n	80080b4 <__mdiff+0xf4>
 80080e0:	0800c0ef 	.word	0x0800c0ef
 80080e4:	0800c100 	.word	0x0800c100
 80080e8:	00000237 	.word	0x00000237
 80080ec:	00000245 	.word	0x00000245

080080f0 <__d2b>:
 80080f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f2:	2101      	movs	r1, #1
 80080f4:	0014      	movs	r4, r2
 80080f6:	001d      	movs	r5, r3
 80080f8:	9f08      	ldr	r7, [sp, #32]
 80080fa:	f7ff fd0f 	bl	8007b1c <_Balloc>
 80080fe:	1e06      	subs	r6, r0, #0
 8008100:	d105      	bne.n	800810e <__d2b+0x1e>
 8008102:	0032      	movs	r2, r6
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <__d2b+0xa8>)
 8008106:	4825      	ldr	r0, [pc, #148]	; (800819c <__d2b+0xac>)
 8008108:	4925      	ldr	r1, [pc, #148]	; (80081a0 <__d2b+0xb0>)
 800810a:	f001 fc53 	bl	80099b4 <__assert_func>
 800810e:	032b      	lsls	r3, r5, #12
 8008110:	006d      	lsls	r5, r5, #1
 8008112:	0b1b      	lsrs	r3, r3, #12
 8008114:	0d6d      	lsrs	r5, r5, #21
 8008116:	d125      	bne.n	8008164 <__d2b+0x74>
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	2c00      	cmp	r4, #0
 800811c:	d028      	beq.n	8008170 <__d2b+0x80>
 800811e:	4668      	mov	r0, sp
 8008120:	9400      	str	r4, [sp, #0]
 8008122:	f7ff fd8b 	bl	8007c3c <__lo0bits>
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	9900      	ldr	r1, [sp, #0]
 800812a:	2800      	cmp	r0, #0
 800812c:	d01e      	beq.n	800816c <__d2b+0x7c>
 800812e:	2220      	movs	r2, #32
 8008130:	001c      	movs	r4, r3
 8008132:	1a12      	subs	r2, r2, r0
 8008134:	4094      	lsls	r4, r2
 8008136:	0022      	movs	r2, r4
 8008138:	40c3      	lsrs	r3, r0
 800813a:	430a      	orrs	r2, r1
 800813c:	6172      	str	r2, [r6, #20]
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	9c01      	ldr	r4, [sp, #4]
 8008142:	61b4      	str	r4, [r6, #24]
 8008144:	1e63      	subs	r3, r4, #1
 8008146:	419c      	sbcs	r4, r3
 8008148:	3401      	adds	r4, #1
 800814a:	6134      	str	r4, [r6, #16]
 800814c:	2d00      	cmp	r5, #0
 800814e:	d017      	beq.n	8008180 <__d2b+0x90>
 8008150:	2435      	movs	r4, #53	; 0x35
 8008152:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <__d2b+0xb4>)
 8008154:	18ed      	adds	r5, r5, r3
 8008156:	182d      	adds	r5, r5, r0
 8008158:	603d      	str	r5, [r7, #0]
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	1a24      	subs	r4, r4, r0
 800815e:	601c      	str	r4, [r3, #0]
 8008160:	0030      	movs	r0, r6
 8008162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	0352      	lsls	r2, r2, #13
 8008168:	4313      	orrs	r3, r2
 800816a:	e7d5      	b.n	8008118 <__d2b+0x28>
 800816c:	6171      	str	r1, [r6, #20]
 800816e:	e7e7      	b.n	8008140 <__d2b+0x50>
 8008170:	a801      	add	r0, sp, #4
 8008172:	f7ff fd63 	bl	8007c3c <__lo0bits>
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	2401      	movs	r4, #1
 800817a:	6173      	str	r3, [r6, #20]
 800817c:	3020      	adds	r0, #32
 800817e:	e7e4      	b.n	800814a <__d2b+0x5a>
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <__d2b+0xb8>)
 8008182:	18c0      	adds	r0, r0, r3
 8008184:	4b09      	ldr	r3, [pc, #36]	; (80081ac <__d2b+0xbc>)
 8008186:	6038      	str	r0, [r7, #0]
 8008188:	18e3      	adds	r3, r4, r3
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	18f3      	adds	r3, r6, r3
 800818e:	6958      	ldr	r0, [r3, #20]
 8008190:	f7ff fd3a 	bl	8007c08 <__hi0bits>
 8008194:	0164      	lsls	r4, r4, #5
 8008196:	e7e0      	b.n	800815a <__d2b+0x6a>
 8008198:	0800c0ef 	.word	0x0800c0ef
 800819c:	0800c100 	.word	0x0800c100
 80081a0:	0000030f 	.word	0x0000030f
 80081a4:	fffffbcd 	.word	0xfffffbcd
 80081a8:	fffffbce 	.word	0xfffffbce
 80081ac:	3fffffff 	.word	0x3fffffff

080081b0 <__ascii_wctomb>:
 80081b0:	0003      	movs	r3, r0
 80081b2:	1e08      	subs	r0, r1, #0
 80081b4:	d005      	beq.n	80081c2 <__ascii_wctomb+0x12>
 80081b6:	2aff      	cmp	r2, #255	; 0xff
 80081b8:	d904      	bls.n	80081c4 <__ascii_wctomb+0x14>
 80081ba:	228a      	movs	r2, #138	; 0x8a
 80081bc:	2001      	movs	r0, #1
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	4240      	negs	r0, r0
 80081c2:	4770      	bx	lr
 80081c4:	2001      	movs	r0, #1
 80081c6:	700a      	strb	r2, [r1, #0]
 80081c8:	e7fb      	b.n	80081c2 <__ascii_wctomb+0x12>
	...

080081cc <_svfprintf_r>:
 80081cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ce:	b0d9      	sub	sp, #356	; 0x164
 80081d0:	001c      	movs	r4, r3
 80081d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80081d4:	9208      	str	r2, [sp, #32]
 80081d6:	900a      	str	r0, [sp, #40]	; 0x28
 80081d8:	f001 fb56 	bl	8009888 <_localeconv_r>
 80081dc:	6803      	ldr	r3, [r0, #0]
 80081de:	0018      	movs	r0, r3
 80081e0:	931c      	str	r3, [sp, #112]	; 0x70
 80081e2:	f7f7 ff8f 	bl	8000104 <strlen>
 80081e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e8:	9016      	str	r0, [sp, #88]	; 0x58
 80081ea:	899b      	ldrh	r3, [r3, #12]
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	d517      	bpl.n	8008220 <_svfprintf_r+0x54>
 80081f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d113      	bne.n	8008220 <_svfprintf_r+0x54>
 80081f8:	2140      	movs	r1, #64	; 0x40
 80081fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081fc:	f7fe ff48 	bl	8007090 <_malloc_r>
 8008200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008202:	6018      	str	r0, [r3, #0]
 8008204:	6118      	str	r0, [r3, #16]
 8008206:	2800      	cmp	r0, #0
 8008208:	d107      	bne.n	800821a <_svfprintf_r+0x4e>
 800820a:	230c      	movs	r3, #12
 800820c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	3b0d      	subs	r3, #13
 8008212:	9317      	str	r3, [sp, #92]	; 0x5c
 8008214:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008216:	b059      	add	sp, #356	; 0x164
 8008218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800821e:	6153      	str	r3, [r2, #20]
 8008220:	2300      	movs	r3, #0
 8008222:	2200      	movs	r2, #0
 8008224:	932e      	str	r3, [sp, #184]	; 0xb8
 8008226:	932d      	str	r3, [sp, #180]	; 0xb4
 8008228:	930e      	str	r3, [sp, #56]	; 0x38
 800822a:	2300      	movs	r3, #0
 800822c:	9214      	str	r2, [sp, #80]	; 0x50
 800822e:	9315      	str	r3, [sp, #84]	; 0x54
 8008230:	2300      	movs	r3, #0
 8008232:	af2f      	add	r7, sp, #188	; 0xbc
 8008234:	972c      	str	r7, [sp, #176]	; 0xb0
 8008236:	931f      	str	r3, [sp, #124]	; 0x7c
 8008238:	931e      	str	r3, [sp, #120]	; 0x78
 800823a:	9312      	str	r3, [sp, #72]	; 0x48
 800823c:	931b      	str	r3, [sp, #108]	; 0x6c
 800823e:	931d      	str	r3, [sp, #116]	; 0x74
 8008240:	9317      	str	r3, [sp, #92]	; 0x5c
 8008242:	9d08      	ldr	r5, [sp, #32]
 8008244:	782b      	ldrb	r3, [r5, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <_svfprintf_r+0x84>
 800824a:	2b25      	cmp	r3, #37	; 0x25
 800824c:	d000      	beq.n	8008250 <_svfprintf_r+0x84>
 800824e:	e091      	b.n	8008374 <_svfprintf_r+0x1a8>
 8008250:	9b08      	ldr	r3, [sp, #32]
 8008252:	1aee      	subs	r6, r5, r3
 8008254:	429d      	cmp	r5, r3
 8008256:	d016      	beq.n	8008286 <_svfprintf_r+0xba>
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800825c:	607e      	str	r6, [r7, #4]
 800825e:	199b      	adds	r3, r3, r6
 8008260:	932e      	str	r3, [sp, #184]	; 0xb8
 8008262:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008264:	3708      	adds	r7, #8
 8008266:	3301      	adds	r3, #1
 8008268:	932d      	str	r3, [sp, #180]	; 0xb4
 800826a:	2b07      	cmp	r3, #7
 800826c:	dd08      	ble.n	8008280 <_svfprintf_r+0xb4>
 800826e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008270:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008272:	aa2c      	add	r2, sp, #176	; 0xb0
 8008274:	f002 fc44 	bl	800ab00 <__ssprint_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	d000      	beq.n	800827e <_svfprintf_r+0xb2>
 800827c:	e1cf      	b.n	800861e <_svfprintf_r+0x452>
 800827e:	af2f      	add	r7, sp, #188	; 0xbc
 8008280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008282:	199b      	adds	r3, r3, r6
 8008284:	9317      	str	r3, [sp, #92]	; 0x5c
 8008286:	782b      	ldrb	r3, [r5, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <_svfprintf_r+0xc4>
 800828c:	f001 f99e 	bl	80095cc <_svfprintf_r+0x1400>
 8008290:	221b      	movs	r2, #27
 8008292:	2300      	movs	r3, #0
 8008294:	a91e      	add	r1, sp, #120	; 0x78
 8008296:	1852      	adds	r2, r2, r1
 8008298:	7013      	strb	r3, [r2, #0]
 800829a:	2201      	movs	r2, #1
 800829c:	001e      	movs	r6, r3
 800829e:	4252      	negs	r2, r2
 80082a0:	3501      	adds	r5, #1
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	9318      	str	r3, [sp, #96]	; 0x60
 80082a6:	1c6b      	adds	r3, r5, #1
 80082a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80082aa:	782b      	ldrb	r3, [r5, #0]
 80082ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80082b0:	3820      	subs	r0, #32
 80082b2:	285a      	cmp	r0, #90	; 0x5a
 80082b4:	d901      	bls.n	80082ba <_svfprintf_r+0xee>
 80082b6:	f000 fe20 	bl	8008efa <_svfprintf_r+0xd2e>
 80082ba:	f7f7 ff35 	bl	8000128 <__gnu_thumb1_case_uhi>
 80082be:	0078      	.short	0x0078
 80082c0:	061e061e 	.word	0x061e061e
 80082c4:	061e0082 	.word	0x061e0082
 80082c8:	061e061e 	.word	0x061e061e
 80082cc:	061e005d 	.word	0x061e005d
 80082d0:	0084061e 	.word	0x0084061e
 80082d4:	061e008c 	.word	0x061e008c
 80082d8:	0091008a 	.word	0x0091008a
 80082dc:	00b2061e 	.word	0x00b2061e
 80082e0:	00b400b4 	.word	0x00b400b4
 80082e4:	00b400b4 	.word	0x00b400b4
 80082e8:	00b400b4 	.word	0x00b400b4
 80082ec:	00b400b4 	.word	0x00b400b4
 80082f0:	061e00b4 	.word	0x061e00b4
 80082f4:	061e061e 	.word	0x061e061e
 80082f8:	061e061e 	.word	0x061e061e
 80082fc:	061e061e 	.word	0x061e061e
 8008300:	061e013b 	.word	0x061e013b
 8008304:	00f400e0 	.word	0x00f400e0
 8008308:	013b013b 	.word	0x013b013b
 800830c:	061e013b 	.word	0x061e013b
 8008310:	061e061e 	.word	0x061e061e
 8008314:	00c7061e 	.word	0x00c7061e
 8008318:	061e061e 	.word	0x061e061e
 800831c:	061e04c7 	.word	0x061e04c7
 8008320:	061e061e 	.word	0x061e061e
 8008324:	061e050a 	.word	0x061e050a
 8008328:	061e052a 	.word	0x061e052a
 800832c:	055c061e 	.word	0x055c061e
 8008330:	061e061e 	.word	0x061e061e
 8008334:	061e061e 	.word	0x061e061e
 8008338:	061e061e 	.word	0x061e061e
 800833c:	061e061e 	.word	0x061e061e
 8008340:	061e013b 	.word	0x061e013b
 8008344:	00f600e0 	.word	0x00f600e0
 8008348:	013b013b 	.word	0x013b013b
 800834c:	00c9013b 	.word	0x00c9013b
 8008350:	00dc00f6 	.word	0x00dc00f6
 8008354:	00d5061e 	.word	0x00d5061e
 8008358:	04a7061e 	.word	0x04a7061e
 800835c:	04fa04c9 	.word	0x04fa04c9
 8008360:	061e00dc 	.word	0x061e00dc
 8008364:	0080050a 	.word	0x0080050a
 8008368:	061e052c 	.word	0x061e052c
 800836c:	057c061e 	.word	0x057c061e
 8008370:	0080061e 	.word	0x0080061e
 8008374:	3501      	adds	r5, #1
 8008376:	e765      	b.n	8008244 <_svfprintf_r+0x78>
 8008378:	980a      	ldr	r0, [sp, #40]	; 0x28
 800837a:	f001 fa85 	bl	8009888 <_localeconv_r>
 800837e:	6843      	ldr	r3, [r0, #4]
 8008380:	0018      	movs	r0, r3
 8008382:	931d      	str	r3, [sp, #116]	; 0x74
 8008384:	f7f7 febe 	bl	8000104 <strlen>
 8008388:	901b      	str	r0, [sp, #108]	; 0x6c
 800838a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800838c:	f001 fa7c 	bl	8009888 <_localeconv_r>
 8008390:	6883      	ldr	r3, [r0, #8]
 8008392:	9312      	str	r3, [sp, #72]	; 0x48
 8008394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d011      	beq.n	80083be <_svfprintf_r+0x1f2>
 800839a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <_svfprintf_r+0x1f2>
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <_svfprintf_r+0x1f2>
 80083a6:	2380      	movs	r3, #128	; 0x80
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	431e      	orrs	r6, r3
 80083ac:	e007      	b.n	80083be <_svfprintf_r+0x1f2>
 80083ae:	231b      	movs	r3, #27
 80083b0:	aa1e      	add	r2, sp, #120	; 0x78
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	d101      	bne.n	80083be <_svfprintf_r+0x1f2>
 80083ba:	3220      	adds	r2, #32
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80083c0:	e771      	b.n	80082a6 <_svfprintf_r+0xda>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7f1      	b.n	80083aa <_svfprintf_r+0x1de>
 80083c6:	cc08      	ldmia	r4!, {r3}
 80083c8:	9318      	str	r3, [sp, #96]	; 0x60
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	daf7      	bge.n	80083be <_svfprintf_r+0x1f2>
 80083ce:	425b      	negs	r3, r3
 80083d0:	9318      	str	r3, [sp, #96]	; 0x60
 80083d2:	2304      	movs	r3, #4
 80083d4:	e7e9      	b.n	80083aa <_svfprintf_r+0x1de>
 80083d6:	231b      	movs	r3, #27
 80083d8:	aa1e      	add	r2, sp, #120	; 0x78
 80083da:	189b      	adds	r3, r3, r2
 80083dc:	222b      	movs	r2, #43	; 0x2b
 80083de:	e7ed      	b.n	80083bc <_svfprintf_r+0x1f0>
 80083e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083e4:	7812      	ldrb	r2, [r2, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80083ea:	2a2a      	cmp	r2, #42	; 0x2a
 80083ec:	d010      	beq.n	8008410 <_svfprintf_r+0x244>
 80083ee:	2200      	movs	r2, #0
 80083f0:	9209      	str	r2, [sp, #36]	; 0x24
 80083f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80083f6:	3a30      	subs	r2, #48	; 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d900      	bls.n	80083fe <_svfprintf_r+0x232>
 80083fc:	e757      	b.n	80082ae <_svfprintf_r+0xe2>
 80083fe:	200a      	movs	r0, #10
 8008400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008402:	4341      	muls	r1, r0
 8008404:	188a      	adds	r2, r1, r2
 8008406:	9209      	str	r2, [sp, #36]	; 0x24
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	920f      	str	r2, [sp, #60]	; 0x3c
 800840e:	e7f0      	b.n	80083f2 <_svfprintf_r+0x226>
 8008410:	cc04      	ldmia	r4!, {r2}
 8008412:	9209      	str	r2, [sp, #36]	; 0x24
 8008414:	2a00      	cmp	r2, #0
 8008416:	da02      	bge.n	800841e <_svfprintf_r+0x252>
 8008418:	2201      	movs	r2, #1
 800841a:	4252      	negs	r2, r2
 800841c:	9209      	str	r2, [sp, #36]	; 0x24
 800841e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008420:	e7cd      	b.n	80083be <_svfprintf_r+0x1f2>
 8008422:	2380      	movs	r3, #128	; 0x80
 8008424:	e7c1      	b.n	80083aa <_svfprintf_r+0x1de>
 8008426:	2200      	movs	r2, #0
 8008428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800842a:	9218      	str	r2, [sp, #96]	; 0x60
 800842c:	210a      	movs	r1, #10
 800842e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008430:	434a      	muls	r2, r1
 8008432:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008434:	3930      	subs	r1, #48	; 0x30
 8008436:	188a      	adds	r2, r1, r2
 8008438:	9218      	str	r2, [sp, #96]	; 0x60
 800843a:	001a      	movs	r2, r3
 800843c:	7812      	ldrb	r2, [r2, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	920f      	str	r2, [sp, #60]	; 0x3c
 8008442:	3a30      	subs	r2, #48	; 0x30
 8008444:	9313      	str	r3, [sp, #76]	; 0x4c
 8008446:	2a09      	cmp	r2, #9
 8008448:	d9f0      	bls.n	800842c <_svfprintf_r+0x260>
 800844a:	e730      	b.n	80082ae <_svfprintf_r+0xe2>
 800844c:	2308      	movs	r3, #8
 800844e:	e7ac      	b.n	80083aa <_svfprintf_r+0x1de>
 8008450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b68      	cmp	r3, #104	; 0x68
 8008456:	d105      	bne.n	8008464 <_svfprintf_r+0x298>
 8008458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800845a:	3301      	adds	r3, #1
 800845c:	9313      	str	r3, [sp, #76]	; 0x4c
 800845e:	2380      	movs	r3, #128	; 0x80
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	e7a2      	b.n	80083aa <_svfprintf_r+0x1de>
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	e7a0      	b.n	80083aa <_svfprintf_r+0x1de>
 8008468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b6c      	cmp	r3, #108	; 0x6c
 800846e:	d104      	bne.n	800847a <_svfprintf_r+0x2ae>
 8008470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008472:	3301      	adds	r3, #1
 8008474:	9313      	str	r3, [sp, #76]	; 0x4c
 8008476:	2320      	movs	r3, #32
 8008478:	e797      	b.n	80083aa <_svfprintf_r+0x1de>
 800847a:	2310      	movs	r3, #16
 800847c:	e795      	b.n	80083aa <_svfprintf_r+0x1de>
 800847e:	0021      	movs	r1, r4
 8008480:	c904      	ldmia	r1!, {r2}
 8008482:	ab3f      	add	r3, sp, #252	; 0xfc
 8008484:	910d      	str	r1, [sp, #52]	; 0x34
 8008486:	211b      	movs	r1, #27
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	a81e      	add	r0, sp, #120	; 0x78
 800848e:	1809      	adds	r1, r1, r0
 8008490:	700a      	strb	r2, [r1, #0]
 8008492:	920c      	str	r2, [sp, #48]	; 0x30
 8008494:	3201      	adds	r2, #1
 8008496:	9209      	str	r2, [sp, #36]	; 0x24
 8008498:	2200      	movs	r2, #0
 800849a:	9308      	str	r3, [sp, #32]
 800849c:	0015      	movs	r5, r2
 800849e:	9219      	str	r2, [sp, #100]	; 0x64
 80084a0:	9210      	str	r2, [sp, #64]	; 0x40
 80084a2:	9211      	str	r2, [sp, #68]	; 0x44
 80084a4:	e1f1      	b.n	800888a <_svfprintf_r+0x6be>
 80084a6:	2310      	movs	r3, #16
 80084a8:	431e      	orrs	r6, r3
 80084aa:	06b3      	lsls	r3, r6, #26
 80084ac:	d531      	bpl.n	8008512 <_svfprintf_r+0x346>
 80084ae:	2307      	movs	r3, #7
 80084b0:	3407      	adds	r4, #7
 80084b2:	439c      	bics	r4, r3
 80084b4:	0022      	movs	r2, r4
 80084b6:	ca18      	ldmia	r2!, {r3, r4}
 80084b8:	9306      	str	r3, [sp, #24]
 80084ba:	9407      	str	r4, [sp, #28]
 80084bc:	920d      	str	r2, [sp, #52]	; 0x34
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	2301      	movs	r3, #1
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	da0b      	bge.n	80084de <_svfprintf_r+0x312>
 80084c6:	9c06      	ldr	r4, [sp, #24]
 80084c8:	9d07      	ldr	r5, [sp, #28]
 80084ca:	2200      	movs	r2, #0
 80084cc:	4261      	negs	r1, r4
 80084ce:	41aa      	sbcs	r2, r5
 80084d0:	9106      	str	r1, [sp, #24]
 80084d2:	9207      	str	r2, [sp, #28]
 80084d4:	221b      	movs	r2, #27
 80084d6:	a91e      	add	r1, sp, #120	; 0x78
 80084d8:	1852      	adds	r2, r2, r1
 80084da:	212d      	movs	r1, #45	; 0x2d
 80084dc:	7011      	strb	r1, [r2, #0]
 80084de:	9907      	ldr	r1, [sp, #28]
 80084e0:	9a06      	ldr	r2, [sp, #24]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e6:	3101      	adds	r1, #1
 80084e8:	d101      	bne.n	80084ee <_svfprintf_r+0x322>
 80084ea:	f001 f87b 	bl	80095e4 <_svfprintf_r+0x1418>
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	0034      	movs	r4, r6
 80084f2:	438c      	bics	r4, r1
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d001      	beq.n	80084fc <_svfprintf_r+0x330>
 80084f8:	f001 f879 	bl	80095ee <_svfprintf_r+0x1422>
 80084fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d101      	bne.n	8008506 <_svfprintf_r+0x33a>
 8008502:	f000 fcef 	bl	8008ee4 <_svfprintf_r+0xd18>
 8008506:	2b01      	cmp	r3, #1
 8008508:	d001      	beq.n	800850e <_svfprintf_r+0x342>
 800850a:	f001 f874 	bl	80095f6 <_svfprintf_r+0x142a>
 800850e:	f000 fc79 	bl	8008e04 <_svfprintf_r+0xc38>
 8008512:	0022      	movs	r2, r4
 8008514:	ca08      	ldmia	r2!, {r3}
 8008516:	920d      	str	r2, [sp, #52]	; 0x34
 8008518:	06f2      	lsls	r2, r6, #27
 800851a:	d503      	bpl.n	8008524 <_svfprintf_r+0x358>
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	17db      	asrs	r3, r3, #31
 8008520:	9307      	str	r3, [sp, #28]
 8008522:	e7cc      	b.n	80084be <_svfprintf_r+0x2f2>
 8008524:	0672      	lsls	r2, r6, #25
 8008526:	d501      	bpl.n	800852c <_svfprintf_r+0x360>
 8008528:	b21b      	sxth	r3, r3
 800852a:	e7f7      	b.n	800851c <_svfprintf_r+0x350>
 800852c:	05b2      	lsls	r2, r6, #22
 800852e:	d5f5      	bpl.n	800851c <_svfprintf_r+0x350>
 8008530:	b25b      	sxtb	r3, r3
 8008532:	e7f3      	b.n	800851c <_svfprintf_r+0x350>
 8008534:	2307      	movs	r3, #7
 8008536:	3407      	adds	r4, #7
 8008538:	439c      	bics	r4, r3
 800853a:	0022      	movs	r2, r4
 800853c:	ca18      	ldmia	r2!, {r3, r4}
 800853e:	920d      	str	r2, [sp, #52]	; 0x34
 8008540:	2201      	movs	r2, #1
 8008542:	9314      	str	r3, [sp, #80]	; 0x50
 8008544:	9415      	str	r4, [sp, #84]	; 0x54
 8008546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008548:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800854a:	005c      	lsls	r4, r3, #1
 800854c:	0864      	lsrs	r4, r4, #1
 800854e:	0028      	movs	r0, r5
 8008550:	0021      	movs	r1, r4
 8008552:	4b3e      	ldr	r3, [pc, #248]	; (800864c <_svfprintf_r+0x480>)
 8008554:	4252      	negs	r2, r2
 8008556:	f7f9 fe2f 	bl	80021b8 <__aeabi_dcmpun>
 800855a:	2800      	cmp	r0, #0
 800855c:	d126      	bne.n	80085ac <_svfprintf_r+0x3e0>
 800855e:	2201      	movs	r2, #1
 8008560:	0028      	movs	r0, r5
 8008562:	0021      	movs	r1, r4
 8008564:	4b39      	ldr	r3, [pc, #228]	; (800864c <_svfprintf_r+0x480>)
 8008566:	4252      	negs	r2, r2
 8008568:	f7f7 ff7e 	bl	8000468 <__aeabi_dcmple>
 800856c:	2800      	cmp	r0, #0
 800856e:	d11d      	bne.n	80085ac <_svfprintf_r+0x3e0>
 8008570:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008572:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008574:	2200      	movs	r2, #0
 8008576:	2300      	movs	r3, #0
 8008578:	f7f7 ff6c 	bl	8000454 <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	d004      	beq.n	800858a <_svfprintf_r+0x3be>
 8008580:	231b      	movs	r3, #27
 8008582:	aa1e      	add	r2, sp, #120	; 0x78
 8008584:	189b      	adds	r3, r3, r2
 8008586:	222d      	movs	r2, #45	; 0x2d
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	4b31      	ldr	r3, [pc, #196]	; (8008650 <_svfprintf_r+0x484>)
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008590:	2b47      	cmp	r3, #71	; 0x47
 8008592:	dd01      	ble.n	8008598 <_svfprintf_r+0x3cc>
 8008594:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <_svfprintf_r+0x488>)
 8008596:	9308      	str	r3, [sp, #32]
 8008598:	2380      	movs	r3, #128	; 0x80
 800859a:	439e      	bics	r6, r3
 800859c:	2300      	movs	r3, #0
 800859e:	930c      	str	r3, [sp, #48]	; 0x30
 80085a0:	3303      	adds	r3, #3
 80085a2:	9309      	str	r3, [sp, #36]	; 0x24
 80085a4:	2300      	movs	r3, #0
 80085a6:	9319      	str	r3, [sp, #100]	; 0x64
 80085a8:	f000 fc78 	bl	8008e9c <_svfprintf_r+0xcd0>
 80085ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b0:	0010      	movs	r0, r2
 80085b2:	0019      	movs	r1, r3
 80085b4:	f7f9 fe00 	bl	80021b8 <__aeabi_dcmpun>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d00e      	beq.n	80085da <_svfprintf_r+0x40e>
 80085bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da04      	bge.n	80085cc <_svfprintf_r+0x400>
 80085c2:	231b      	movs	r3, #27
 80085c4:	aa1e      	add	r2, sp, #120	; 0x78
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	222d      	movs	r2, #45	; 0x2d
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	4b22      	ldr	r3, [pc, #136]	; (8008658 <_svfprintf_r+0x48c>)
 80085ce:	9308      	str	r3, [sp, #32]
 80085d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d2:	2b47      	cmp	r3, #71	; 0x47
 80085d4:	dde0      	ble.n	8008598 <_svfprintf_r+0x3cc>
 80085d6:	4b21      	ldr	r3, [pc, #132]	; (800865c <_svfprintf_r+0x490>)
 80085d8:	e7dd      	b.n	8008596 <_svfprintf_r+0x3ca>
 80085da:	2320      	movs	r3, #32
 80085dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085de:	439a      	bics	r2, r3
 80085e0:	9210      	str	r2, [sp, #64]	; 0x40
 80085e2:	2a41      	cmp	r2, #65	; 0x41
 80085e4:	d123      	bne.n	800862e <_svfprintf_r+0x462>
 80085e6:	2230      	movs	r2, #48	; 0x30
 80085e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085ea:	ab25      	add	r3, sp, #148	; 0x94
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	3248      	adds	r2, #72	; 0x48
 80085f0:	2961      	cmp	r1, #97	; 0x61
 80085f2:	d000      	beq.n	80085f6 <_svfprintf_r+0x42a>
 80085f4:	3a20      	subs	r2, #32
 80085f6:	705a      	strb	r2, [r3, #1]
 80085f8:	2302      	movs	r3, #2
 80085fa:	431e      	orrs	r6, r3
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	2b63      	cmp	r3, #99	; 0x63
 8008600:	dd2e      	ble.n	8008660 <_svfprintf_r+0x494>
 8008602:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008604:	1c59      	adds	r1, r3, #1
 8008606:	f7fe fd43 	bl	8007090 <_malloc_r>
 800860a:	9008      	str	r0, [sp, #32]
 800860c:	2800      	cmp	r0, #0
 800860e:	d000      	beq.n	8008612 <_svfprintf_r+0x446>
 8008610:	e216      	b.n	8008a40 <_svfprintf_r+0x874>
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	899a      	ldrh	r2, [r3, #12]
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	4313      	orrs	r3, r2
 800861a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800861c:	8193      	strh	r3, [r2, #12]
 800861e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008620:	899b      	ldrh	r3, [r3, #12]
 8008622:	065b      	lsls	r3, r3, #25
 8008624:	d400      	bmi.n	8008628 <_svfprintf_r+0x45c>
 8008626:	e5f5      	b.n	8008214 <_svfprintf_r+0x48>
 8008628:	2301      	movs	r3, #1
 800862a:	425b      	negs	r3, r3
 800862c:	e5f1      	b.n	8008212 <_svfprintf_r+0x46>
 800862e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008630:	900c      	str	r0, [sp, #48]	; 0x30
 8008632:	3301      	adds	r3, #1
 8008634:	d100      	bne.n	8008638 <_svfprintf_r+0x46c>
 8008636:	e206      	b.n	8008a46 <_svfprintf_r+0x87a>
 8008638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800863a:	2b47      	cmp	r3, #71	; 0x47
 800863c:	d114      	bne.n	8008668 <_svfprintf_r+0x49c>
 800863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d111      	bne.n	8008668 <_svfprintf_r+0x49c>
 8008644:	3301      	adds	r3, #1
 8008646:	9309      	str	r3, [sp, #36]	; 0x24
 8008648:	e00e      	b.n	8008668 <_svfprintf_r+0x49c>
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	7fefffff 	.word	0x7fefffff
 8008650:	0800c25c 	.word	0x0800c25c
 8008654:	0800c260 	.word	0x0800c260
 8008658:	0800c264 	.word	0x0800c264
 800865c:	0800c268 	.word	0x0800c268
 8008660:	2300      	movs	r3, #0
 8008662:	930c      	str	r3, [sp, #48]	; 0x30
 8008664:	ab3f      	add	r3, sp, #252	; 0xfc
 8008666:	9308      	str	r3, [sp, #32]
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	4333      	orrs	r3, r6
 800866e:	931a      	str	r3, [sp, #104]	; 0x68
 8008670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008672:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008674:	2b00      	cmp	r3, #0
 8008676:	db00      	blt.n	800867a <_svfprintf_r+0x4ae>
 8008678:	e1e7      	b.n	8008a4a <_svfprintf_r+0x87e>
 800867a:	2280      	movs	r2, #128	; 0x80
 800867c:	0612      	lsls	r2, r2, #24
 800867e:	4694      	mov	ip, r2
 8008680:	4463      	add	r3, ip
 8008682:	930e      	str	r3, [sp, #56]	; 0x38
 8008684:	232d      	movs	r3, #45	; 0x2d
 8008686:	9322      	str	r3, [sp, #136]	; 0x88
 8008688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800868a:	2b41      	cmp	r3, #65	; 0x41
 800868c:	d000      	beq.n	8008690 <_svfprintf_r+0x4c4>
 800868e:	e1f5      	b.n	8008a7c <_svfprintf_r+0x8b0>
 8008690:	0028      	movs	r0, r5
 8008692:	aa26      	add	r2, sp, #152	; 0x98
 8008694:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008696:	f001 f91b 	bl	80098d0 <frexp>
 800869a:	23ff      	movs	r3, #255	; 0xff
 800869c:	2200      	movs	r2, #0
 800869e:	059b      	lsls	r3, r3, #22
 80086a0:	f7f8 ff46 	bl	8001530 <__aeabi_dmul>
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	0004      	movs	r4, r0
 80086aa:	000d      	movs	r5, r1
 80086ac:	f7f7 fecc 	bl	8000448 <__aeabi_dcmpeq>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d001      	beq.n	80086b8 <_svfprintf_r+0x4ec>
 80086b4:	2301      	movs	r3, #1
 80086b6:	9326      	str	r3, [sp, #152]	; 0x98
 80086b8:	4bda      	ldr	r3, [pc, #872]	; (8008a24 <_svfprintf_r+0x858>)
 80086ba:	9319      	str	r3, [sp, #100]	; 0x64
 80086bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086be:	2b61      	cmp	r3, #97	; 0x61
 80086c0:	d001      	beq.n	80086c6 <_svfprintf_r+0x4fa>
 80086c2:	4bd9      	ldr	r3, [pc, #868]	; (8008a28 <_svfprintf_r+0x85c>)
 80086c4:	9319      	str	r3, [sp, #100]	; 0x64
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	930e      	str	r3, [sp, #56]	; 0x38
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	3b01      	subs	r3, #1
 80086ce:	9311      	str	r3, [sp, #68]	; 0x44
 80086d0:	2200      	movs	r2, #0
 80086d2:	4bd6      	ldr	r3, [pc, #856]	; (8008a2c <_svfprintf_r+0x860>)
 80086d4:	0020      	movs	r0, r4
 80086d6:	0029      	movs	r1, r5
 80086d8:	f7f8 ff2a 	bl	8001530 <__aeabi_dmul>
 80086dc:	000d      	movs	r5, r1
 80086de:	0004      	movs	r4, r0
 80086e0:	f7f9 fd88 	bl	80021f4 <__aeabi_d2iz>
 80086e4:	9021      	str	r0, [sp, #132]	; 0x84
 80086e6:	f7f9 fdbb 	bl	8002260 <__aeabi_i2d>
 80086ea:	0002      	movs	r2, r0
 80086ec:	000b      	movs	r3, r1
 80086ee:	0020      	movs	r0, r4
 80086f0:	0029      	movs	r1, r5
 80086f2:	f7f9 f9df 	bl	8001ab4 <__aeabi_dsub>
 80086f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f8:	000d      	movs	r5, r1
 80086fa:	001a      	movs	r2, r3
 80086fc:	3201      	adds	r2, #1
 80086fe:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008700:	920e      	str	r2, [sp, #56]	; 0x38
 8008702:	9223      	str	r2, [sp, #140]	; 0x8c
 8008704:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008706:	0004      	movs	r4, r0
 8008708:	5c52      	ldrb	r2, [r2, r1]
 800870a:	701a      	strb	r2, [r3, #0]
 800870c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800870e:	9320      	str	r3, [sp, #128]	; 0x80
 8008710:	3301      	adds	r3, #1
 8008712:	d00a      	beq.n	800872a <_svfprintf_r+0x55e>
 8008714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008716:	2200      	movs	r2, #0
 8008718:	3b01      	subs	r3, #1
 800871a:	9311      	str	r3, [sp, #68]	; 0x44
 800871c:	0020      	movs	r0, r4
 800871e:	2300      	movs	r3, #0
 8008720:	0029      	movs	r1, r5
 8008722:	f7f7 fe91 	bl	8000448 <__aeabi_dcmpeq>
 8008726:	2800      	cmp	r0, #0
 8008728:	d0d2      	beq.n	80086d0 <_svfprintf_r+0x504>
 800872a:	2200      	movs	r2, #0
 800872c:	0020      	movs	r0, r4
 800872e:	0029      	movs	r1, r5
 8008730:	4bbf      	ldr	r3, [pc, #764]	; (8008a30 <_svfprintf_r+0x864>)
 8008732:	f7f7 fea3 	bl	800047c <__aeabi_dcmpgt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d10c      	bne.n	8008754 <_svfprintf_r+0x588>
 800873a:	2200      	movs	r2, #0
 800873c:	0020      	movs	r0, r4
 800873e:	0029      	movs	r1, r5
 8008740:	4bbb      	ldr	r3, [pc, #748]	; (8008a30 <_svfprintf_r+0x864>)
 8008742:	f7f7 fe81 	bl	8000448 <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	d100      	bne.n	800874c <_svfprintf_r+0x580>
 800874a:	e191      	b.n	8008a70 <_svfprintf_r+0x8a4>
 800874c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d400      	bmi.n	8008754 <_svfprintf_r+0x588>
 8008752:	e18d      	b.n	8008a70 <_svfprintf_r+0x8a4>
 8008754:	2030      	movs	r0, #48	; 0x30
 8008756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008758:	932a      	str	r3, [sp, #168]	; 0xa8
 800875a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800875c:	7bdb      	ldrb	r3, [r3, #15]
 800875e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008760:	3a01      	subs	r2, #1
 8008762:	922a      	str	r2, [sp, #168]	; 0xa8
 8008764:	7811      	ldrb	r1, [r2, #0]
 8008766:	4299      	cmp	r1, r3
 8008768:	d100      	bne.n	800876c <_svfprintf_r+0x5a0>
 800876a:	e171      	b.n	8008a50 <_svfprintf_r+0x884>
 800876c:	1c4b      	adds	r3, r1, #1
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2939      	cmp	r1, #57	; 0x39
 8008772:	d101      	bne.n	8008778 <_svfprintf_r+0x5ac>
 8008774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008776:	7a9b      	ldrb	r3, [r3, #10]
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800877c:	9a08      	ldr	r2, [sp, #32]
 800877e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	930e      	str	r3, [sp, #56]	; 0x38
 8008784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008786:	2b47      	cmp	r3, #71	; 0x47
 8008788:	d000      	beq.n	800878c <_svfprintf_r+0x5c0>
 800878a:	e1c4      	b.n	8008b16 <_svfprintf_r+0x94a>
 800878c:	1ceb      	adds	r3, r5, #3
 800878e:	db03      	blt.n	8008798 <_svfprintf_r+0x5cc>
 8008790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008792:	42ab      	cmp	r3, r5
 8008794:	db00      	blt.n	8008798 <_svfprintf_r+0x5cc>
 8008796:	e1e6      	b.n	8008b66 <_svfprintf_r+0x99a>
 8008798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800879a:	3b02      	subs	r3, #2
 800879c:	930f      	str	r3, [sp, #60]	; 0x3c
 800879e:	223c      	movs	r2, #60	; 0x3c
 80087a0:	466b      	mov	r3, sp
 80087a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	1e6c      	subs	r4, r5, #1
 80087a8:	3a1c      	subs	r2, #28
 80087aa:	2000      	movs	r0, #0
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	9426      	str	r4, [sp, #152]	; 0x98
 80087b0:	4391      	bics	r1, r2
 80087b2:	2941      	cmp	r1, #65	; 0x41
 80087b4:	d102      	bne.n	80087bc <_svfprintf_r+0x5f0>
 80087b6:	330f      	adds	r3, #15
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	3001      	adds	r0, #1
 80087bc:	a928      	add	r1, sp, #160	; 0xa0
 80087be:	700b      	strb	r3, [r1, #0]
 80087c0:	232b      	movs	r3, #43	; 0x2b
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	da02      	bge.n	80087cc <_svfprintf_r+0x600>
 80087c6:	2401      	movs	r4, #1
 80087c8:	3302      	adds	r3, #2
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	704b      	strb	r3, [r1, #1]
 80087ce:	2c09      	cmp	r4, #9
 80087d0:	dc00      	bgt.n	80087d4 <_svfprintf_r+0x608>
 80087d2:	e1ba      	b.n	8008b4a <_svfprintf_r+0x97e>
 80087d4:	2337      	movs	r3, #55	; 0x37
 80087d6:	250a      	movs	r5, #10
 80087d8:	aa1e      	add	r2, sp, #120	; 0x78
 80087da:	189b      	adds	r3, r3, r2
 80087dc:	9310      	str	r3, [sp, #64]	; 0x40
 80087de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087e0:	0020      	movs	r0, r4
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	0029      	movs	r1, r5
 80087e6:	3b01      	subs	r3, #1
 80087e8:	9310      	str	r3, [sp, #64]	; 0x40
 80087ea:	f7f7 fe17 	bl	800041c <__aeabi_idivmod>
 80087ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f0:	3130      	adds	r1, #48	; 0x30
 80087f2:	7019      	strb	r1, [r3, #0]
 80087f4:	0020      	movs	r0, r4
 80087f6:	0029      	movs	r1, r5
 80087f8:	9411      	str	r4, [sp, #68]	; 0x44
 80087fa:	f7f7 fd29 	bl	8000250 <__divsi3>
 80087fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008800:	0004      	movs	r4, r0
 8008802:	2b63      	cmp	r3, #99	; 0x63
 8008804:	dceb      	bgt.n	80087de <_svfprintf_r+0x612>
 8008806:	222a      	movs	r2, #42	; 0x2a
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	a81e      	add	r0, sp, #120	; 0x78
 800880c:	1e99      	subs	r1, r3, #2
 800880e:	1812      	adds	r2, r2, r0
 8008810:	2037      	movs	r0, #55	; 0x37
 8008812:	000b      	movs	r3, r1
 8008814:	3430      	adds	r4, #48	; 0x30
 8008816:	700c      	strb	r4, [r1, #0]
 8008818:	ac1e      	add	r4, sp, #120	; 0x78
 800881a:	1900      	adds	r0, r0, r4
 800881c:	4283      	cmp	r3, r0
 800881e:	d200      	bcs.n	8008822 <_svfprintf_r+0x656>
 8008820:	e18e      	b.n	8008b40 <_svfprintf_r+0x974>
 8008822:	2300      	movs	r3, #0
 8008824:	4281      	cmp	r1, r0
 8008826:	d804      	bhi.n	8008832 <_svfprintf_r+0x666>
 8008828:	aa1e      	add	r2, sp, #120	; 0x78
 800882a:	3339      	adds	r3, #57	; 0x39
 800882c:	189b      	adds	r3, r3, r2
 800882e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	222a      	movs	r2, #42	; 0x2a
 8008834:	a91e      	add	r1, sp, #120	; 0x78
 8008836:	1852      	adds	r2, r2, r1
 8008838:	18d3      	adds	r3, r2, r3
 800883a:	aa28      	add	r2, sp, #160	; 0xa0
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	931e      	str	r3, [sp, #120]	; 0x78
 8008840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008844:	4694      	mov	ip, r2
 8008846:	4463      	add	r3, ip
 8008848:	9309      	str	r3, [sp, #36]	; 0x24
 800884a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800884c:	2b01      	cmp	r3, #1
 800884e:	dc01      	bgt.n	8008854 <_svfprintf_r+0x688>
 8008850:	07f3      	lsls	r3, r6, #31
 8008852:	d504      	bpl.n	800885e <_svfprintf_r+0x692>
 8008854:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	4694      	mov	ip, r2
 800885a:	4463      	add	r3, ip
 800885c:	9309      	str	r3, [sp, #36]	; 0x24
 800885e:	2280      	movs	r2, #128	; 0x80
 8008860:	4b74      	ldr	r3, [pc, #464]	; (8008a34 <_svfprintf_r+0x868>)
 8008862:	0052      	lsls	r2, r2, #1
 8008864:	4033      	ands	r3, r6
 8008866:	431a      	orrs	r2, r3
 8008868:	2300      	movs	r3, #0
 800886a:	001d      	movs	r5, r3
 800886c:	921a      	str	r2, [sp, #104]	; 0x68
 800886e:	9310      	str	r3, [sp, #64]	; 0x40
 8008870:	9311      	str	r3, [sp, #68]	; 0x44
 8008872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008874:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008876:	9319      	str	r3, [sp, #100]	; 0x64
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <_svfprintf_r+0x6be>
 800887c:	231b      	movs	r3, #27
 800887e:	aa1e      	add	r2, sp, #120	; 0x78
 8008880:	189b      	adds	r3, r3, r2
 8008882:	222d      	movs	r2, #45	; 0x2d
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	9319      	str	r3, [sp, #100]	; 0x64
 800888a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800888c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888e:	931a      	str	r3, [sp, #104]	; 0x68
 8008890:	4293      	cmp	r3, r2
 8008892:	da00      	bge.n	8008896 <_svfprintf_r+0x6ca>
 8008894:	921a      	str	r2, [sp, #104]	; 0x68
 8008896:	231b      	movs	r3, #27
 8008898:	aa1e      	add	r2, sp, #120	; 0x78
 800889a:	189b      	adds	r3, r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	1e5a      	subs	r2, r3, #1
 80088a0:	4193      	sbcs	r3, r2
 80088a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088a4:	18d3      	adds	r3, r2, r3
 80088a6:	931a      	str	r3, [sp, #104]	; 0x68
 80088a8:	0032      	movs	r2, r6
 80088aa:	2302      	movs	r3, #2
 80088ac:	401a      	ands	r2, r3
 80088ae:	9220      	str	r2, [sp, #128]	; 0x80
 80088b0:	421e      	tst	r6, r3
 80088b2:	d002      	beq.n	80088ba <_svfprintf_r+0x6ee>
 80088b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088b6:	3302      	adds	r3, #2
 80088b8:	931a      	str	r3, [sp, #104]	; 0x68
 80088ba:	2384      	movs	r3, #132	; 0x84
 80088bc:	0032      	movs	r2, r6
 80088be:	401a      	ands	r2, r3
 80088c0:	9221      	str	r2, [sp, #132]	; 0x84
 80088c2:	421e      	tst	r6, r3
 80088c4:	d11f      	bne.n	8008906 <_svfprintf_r+0x73a>
 80088c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80088c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088ca:	1a9c      	subs	r4, r3, r2
 80088cc:	2c00      	cmp	r4, #0
 80088ce:	dd1a      	ble.n	8008906 <_svfprintf_r+0x73a>
 80088d0:	0039      	movs	r1, r7
 80088d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80088d4:	4858      	ldr	r0, [pc, #352]	; (8008a38 <_svfprintf_r+0x86c>)
 80088d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80088d8:	3301      	adds	r3, #1
 80088da:	3108      	adds	r1, #8
 80088dc:	6038      	str	r0, [r7, #0]
 80088de:	2c10      	cmp	r4, #16
 80088e0:	dd00      	ble.n	80088e4 <_svfprintf_r+0x718>
 80088e2:	e31c      	b.n	8008f1e <_svfprintf_r+0xd52>
 80088e4:	607c      	str	r4, [r7, #4]
 80088e6:	18a4      	adds	r4, r4, r2
 80088e8:	000f      	movs	r7, r1
 80088ea:	942e      	str	r4, [sp, #184]	; 0xb8
 80088ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	dd09      	ble.n	8008906 <_svfprintf_r+0x73a>
 80088f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80088f8:	f002 f902 	bl	800ab00 <__ssprint_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d001      	beq.n	8008904 <_svfprintf_r+0x738>
 8008900:	f000 fe43 	bl	800958a <_svfprintf_r+0x13be>
 8008904:	af2f      	add	r7, sp, #188	; 0xbc
 8008906:	221b      	movs	r2, #27
 8008908:	a91e      	add	r1, sp, #120	; 0x78
 800890a:	1852      	adds	r2, r2, r1
 800890c:	7811      	ldrb	r1, [r2, #0]
 800890e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008910:	2900      	cmp	r1, #0
 8008912:	d014      	beq.n	800893e <_svfprintf_r+0x772>
 8008914:	603a      	str	r2, [r7, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	189b      	adds	r3, r3, r2
 800891a:	932e      	str	r3, [sp, #184]	; 0xb8
 800891c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	189b      	adds	r3, r3, r2
 8008922:	932d      	str	r3, [sp, #180]	; 0xb4
 8008924:	3708      	adds	r7, #8
 8008926:	2b07      	cmp	r3, #7
 8008928:	dd09      	ble.n	800893e <_svfprintf_r+0x772>
 800892a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800892c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800892e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008930:	f002 f8e6 	bl	800ab00 <__ssprint_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	d001      	beq.n	800893c <_svfprintf_r+0x770>
 8008938:	f000 fe27 	bl	800958a <_svfprintf_r+0x13be>
 800893c:	af2f      	add	r7, sp, #188	; 0xbc
 800893e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008940:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008942:	2a00      	cmp	r2, #0
 8008944:	d015      	beq.n	8008972 <_svfprintf_r+0x7a6>
 8008946:	aa25      	add	r2, sp, #148	; 0x94
 8008948:	603a      	str	r2, [r7, #0]
 800894a:	2202      	movs	r2, #2
 800894c:	189b      	adds	r3, r3, r2
 800894e:	932e      	str	r3, [sp, #184]	; 0xb8
 8008950:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	3301      	adds	r3, #1
 8008956:	932d      	str	r3, [sp, #180]	; 0xb4
 8008958:	3708      	adds	r7, #8
 800895a:	2b07      	cmp	r3, #7
 800895c:	dd09      	ble.n	8008972 <_svfprintf_r+0x7a6>
 800895e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008960:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008962:	aa2c      	add	r2, sp, #176	; 0xb0
 8008964:	f002 f8cc 	bl	800ab00 <__ssprint_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	d001      	beq.n	8008970 <_svfprintf_r+0x7a4>
 800896c:	f000 fe0d 	bl	800958a <_svfprintf_r+0x13be>
 8008970:	af2f      	add	r7, sp, #188	; 0xbc
 8008972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008974:	2b80      	cmp	r3, #128	; 0x80
 8008976:	d11f      	bne.n	80089b8 <_svfprintf_r+0x7ec>
 8008978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800897a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800897c:	1a9c      	subs	r4, r3, r2
 800897e:	2c00      	cmp	r4, #0
 8008980:	dd1a      	ble.n	80089b8 <_svfprintf_r+0x7ec>
 8008982:	0039      	movs	r1, r7
 8008984:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008986:	482d      	ldr	r0, [pc, #180]	; (8008a3c <_svfprintf_r+0x870>)
 8008988:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800898a:	3301      	adds	r3, #1
 800898c:	3108      	adds	r1, #8
 800898e:	6038      	str	r0, [r7, #0]
 8008990:	2c10      	cmp	r4, #16
 8008992:	dd00      	ble.n	8008996 <_svfprintf_r+0x7ca>
 8008994:	e2d6      	b.n	8008f44 <_svfprintf_r+0xd78>
 8008996:	607c      	str	r4, [r7, #4]
 8008998:	18a4      	adds	r4, r4, r2
 800899a:	000f      	movs	r7, r1
 800899c:	942e      	str	r4, [sp, #184]	; 0xb8
 800899e:	932d      	str	r3, [sp, #180]	; 0xb4
 80089a0:	2b07      	cmp	r3, #7
 80089a2:	dd09      	ble.n	80089b8 <_svfprintf_r+0x7ec>
 80089a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80089aa:	f002 f8a9 	bl	800ab00 <__ssprint_r>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d001      	beq.n	80089b6 <_svfprintf_r+0x7ea>
 80089b2:	f000 fdea 	bl	800958a <_svfprintf_r+0x13be>
 80089b6:	af2f      	add	r7, sp, #188	; 0xbc
 80089b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089bc:	1a9c      	subs	r4, r3, r2
 80089be:	2c00      	cmp	r4, #0
 80089c0:	dd1a      	ble.n	80089f8 <_svfprintf_r+0x82c>
 80089c2:	0039      	movs	r1, r7
 80089c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80089c6:	481d      	ldr	r0, [pc, #116]	; (8008a3c <_svfprintf_r+0x870>)
 80089c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80089ca:	3301      	adds	r3, #1
 80089cc:	3108      	adds	r1, #8
 80089ce:	6038      	str	r0, [r7, #0]
 80089d0:	2c10      	cmp	r4, #16
 80089d2:	dd00      	ble.n	80089d6 <_svfprintf_r+0x80a>
 80089d4:	e2c9      	b.n	8008f6a <_svfprintf_r+0xd9e>
 80089d6:	18a2      	adds	r2, r4, r2
 80089d8:	607c      	str	r4, [r7, #4]
 80089da:	922e      	str	r2, [sp, #184]	; 0xb8
 80089dc:	000f      	movs	r7, r1
 80089de:	932d      	str	r3, [sp, #180]	; 0xb4
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	dd09      	ble.n	80089f8 <_svfprintf_r+0x82c>
 80089e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80089ea:	f002 f889 	bl	800ab00 <__ssprint_r>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d001      	beq.n	80089f6 <_svfprintf_r+0x82a>
 80089f2:	f000 fdca 	bl	800958a <_svfprintf_r+0x13be>
 80089f6:	af2f      	add	r7, sp, #188	; 0xbc
 80089f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80089fa:	9319      	str	r3, [sp, #100]	; 0x64
 80089fc:	05f3      	lsls	r3, r6, #23
 80089fe:	d500      	bpl.n	8008a02 <_svfprintf_r+0x836>
 8008a00:	e2ce      	b.n	8008fa0 <_svfprintf_r+0xdd4>
 8008a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	4694      	mov	ip, r2
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a10:	4463      	add	r3, ip
 8008a12:	932e      	str	r3, [sp, #184]	; 0xb8
 8008a14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008a16:	3301      	adds	r3, #1
 8008a18:	932d      	str	r3, [sp, #180]	; 0xb4
 8008a1a:	2b07      	cmp	r3, #7
 8008a1c:	dd00      	ble.n	8008a20 <_svfprintf_r+0x854>
 8008a1e:	e3a3      	b.n	8009168 <_svfprintf_r+0xf9c>
 8008a20:	3708      	adds	r7, #8
 8008a22:	e301      	b.n	8009028 <_svfprintf_r+0xe5c>
 8008a24:	0800c26c 	.word	0x0800c26c
 8008a28:	0800c27d 	.word	0x0800c27d
 8008a2c:	40300000 	.word	0x40300000
 8008a30:	3fe00000 	.word	0x3fe00000
 8008a34:	fffffbff 	.word	0xfffffbff
 8008a38:	0800c290 	.word	0x0800c290
 8008a3c:	0800c2a0 	.word	0x0800c2a0
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	930c      	str	r3, [sp, #48]	; 0x30
 8008a44:	e610      	b.n	8008668 <_svfprintf_r+0x49c>
 8008a46:	2306      	movs	r3, #6
 8008a48:	e5fd      	b.n	8008646 <_svfprintf_r+0x47a>
 8008a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e61a      	b.n	8008686 <_svfprintf_r+0x4ba>
 8008a50:	7010      	strb	r0, [r2, #0]
 8008a52:	e684      	b.n	800875e <_svfprintf_r+0x592>
 8008a54:	7018      	strb	r0, [r3, #0]
 8008a56:	3301      	adds	r3, #1
 8008a58:	1aca      	subs	r2, r1, r3
 8008a5a:	d5fb      	bpl.n	8008a54 <_svfprintf_r+0x888>
 8008a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a5e:	2300      	movs	r3, #0
 8008a60:	3201      	adds	r2, #1
 8008a62:	db01      	blt.n	8008a68 <_svfprintf_r+0x89c>
 8008a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a66:	3301      	adds	r3, #1
 8008a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a6a:	18d3      	adds	r3, r2, r3
 8008a6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8008a6e:	e684      	b.n	800877a <_svfprintf_r+0x5ae>
 8008a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a72:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008a74:	2030      	movs	r0, #48	; 0x30
 8008a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a78:	1851      	adds	r1, r2, r1
 8008a7a:	e7ed      	b.n	8008a58 <_svfprintf_r+0x88c>
 8008a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a7e:	2303      	movs	r3, #3
 8008a80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a82:	2a46      	cmp	r2, #70	; 0x46
 8008a84:	d006      	beq.n	8008a94 <_svfprintf_r+0x8c8>
 8008a86:	0014      	movs	r4, r2
 8008a88:	3c45      	subs	r4, #69	; 0x45
 8008a8a:	4262      	negs	r2, r4
 8008a8c:	4154      	adcs	r4, r2
 8008a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a90:	3b01      	subs	r3, #1
 8008a92:	1914      	adds	r4, r2, r4
 8008a94:	aa2a      	add	r2, sp, #168	; 0xa8
 8008a96:	9204      	str	r2, [sp, #16]
 8008a98:	aa27      	add	r2, sp, #156	; 0x9c
 8008a9a:	9203      	str	r2, [sp, #12]
 8008a9c:	aa26      	add	r2, sp, #152	; 0x98
 8008a9e:	9202      	str	r2, [sp, #8]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	002a      	movs	r2, r5
 8008aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008aa8:	9401      	str	r4, [sp, #4]
 8008aaa:	f001 f87f 	bl	8009bac <_dtoa_r>
 8008aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ab0:	9008      	str	r0, [sp, #32]
 8008ab2:	2b47      	cmp	r3, #71	; 0x47
 8008ab4:	d103      	bne.n	8008abe <_svfprintf_r+0x8f2>
 8008ab6:	07f3      	lsls	r3, r6, #31
 8008ab8:	d401      	bmi.n	8008abe <_svfprintf_r+0x8f2>
 8008aba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008abc:	e65e      	b.n	800877c <_svfprintf_r+0x5b0>
 8008abe:	9b08      	ldr	r3, [sp, #32]
 8008ac0:	191b      	adds	r3, r3, r4
 8008ac2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ac6:	2b46      	cmp	r3, #70	; 0x46
 8008ac8:	d112      	bne.n	8008af0 <_svfprintf_r+0x924>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b30      	cmp	r3, #48	; 0x30
 8008ad0:	d10a      	bne.n	8008ae8 <_svfprintf_r+0x91c>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	0028      	movs	r0, r5
 8008ad8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008ada:	f7f7 fcb5 	bl	8000448 <__aeabi_dcmpeq>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d102      	bne.n	8008ae8 <_svfprintf_r+0x91c>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	1b1b      	subs	r3, r3, r4
 8008ae6:	9326      	str	r3, [sp, #152]	; 0x98
 8008ae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008aec:	18d3      	adds	r3, r2, r3
 8008aee:	9311      	str	r3, [sp, #68]	; 0x44
 8008af0:	2200      	movs	r2, #0
 8008af2:	2300      	movs	r3, #0
 8008af4:	0028      	movs	r0, r5
 8008af6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008af8:	f7f7 fca6 	bl	8000448 <__aeabi_dcmpeq>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d001      	beq.n	8008b04 <_svfprintf_r+0x938>
 8008b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b02:	932a      	str	r3, [sp, #168]	; 0xa8
 8008b04:	2230      	movs	r2, #48	; 0x30
 8008b06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008b08:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b0a:	4299      	cmp	r1, r3
 8008b0c:	d9d5      	bls.n	8008aba <_svfprintf_r+0x8ee>
 8008b0e:	1c59      	adds	r1, r3, #1
 8008b10:	912a      	str	r1, [sp, #168]	; 0xa8
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e7f7      	b.n	8008b06 <_svfprintf_r+0x93a>
 8008b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b18:	2b46      	cmp	r3, #70	; 0x46
 8008b1a:	d000      	beq.n	8008b1e <_svfprintf_r+0x952>
 8008b1c:	e63f      	b.n	800879e <_svfprintf_r+0x5d2>
 8008b1e:	2201      	movs	r2, #1
 8008b20:	0033      	movs	r3, r6
 8008b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b24:	4013      	ands	r3, r2
 8008b26:	430b      	orrs	r3, r1
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	dd2c      	ble.n	8008b86 <_svfprintf_r+0x9ba>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d046      	beq.n	8008bbe <_svfprintf_r+0x9f2>
 8008b30:	000a      	movs	r2, r1
 8008b32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	18d3      	adds	r3, r2, r3
 8008b38:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3a:	2366      	movs	r3, #102	; 0x66
 8008b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b3e:	e030      	b.n	8008ba2 <_svfprintf_r+0x9d6>
 8008b40:	781c      	ldrb	r4, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	7014      	strb	r4, [r2, #0]
 8008b46:	3201      	adds	r2, #1
 8008b48:	e668      	b.n	800881c <_svfprintf_r+0x650>
 8008b4a:	222a      	movs	r2, #42	; 0x2a
 8008b4c:	ab1e      	add	r3, sp, #120	; 0x78
 8008b4e:	18d2      	adds	r2, r2, r3
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d104      	bne.n	8008b5e <_svfprintf_r+0x992>
 8008b54:	2330      	movs	r3, #48	; 0x30
 8008b56:	222b      	movs	r2, #43	; 0x2b
 8008b58:	708b      	strb	r3, [r1, #2]
 8008b5a:	ab1e      	add	r3, sp, #120	; 0x78
 8008b5c:	18d2      	adds	r2, r2, r3
 8008b5e:	3430      	adds	r4, #48	; 0x30
 8008b60:	1c53      	adds	r3, r2, #1
 8008b62:	7014      	strb	r4, [r2, #0]
 8008b64:	e669      	b.n	800883a <_svfprintf_r+0x66e>
 8008b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b68:	42ab      	cmp	r3, r5
 8008b6a:	dd12      	ble.n	8008b92 <_svfprintf_r+0x9c6>
 8008b6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b70:	4694      	mov	ip, r2
 8008b72:	4463      	add	r3, ip
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2367      	movs	r3, #103	; 0x67
 8008b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	dc11      	bgt.n	8008ba2 <_svfprintf_r+0x9d6>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	1b5b      	subs	r3, r3, r5
 8008b82:	3301      	adds	r3, #1
 8008b84:	e00c      	b.n	8008ba0 <_svfprintf_r+0x9d4>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <_svfprintf_r+0x9f6>
 8008b8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b8e:	3301      	adds	r3, #1
 8008b90:	e7d1      	b.n	8008b36 <_svfprintf_r+0x96a>
 8008b92:	2367      	movs	r3, #103	; 0x67
 8008b94:	9509      	str	r5, [sp, #36]	; 0x24
 8008b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b98:	07f3      	lsls	r3, r6, #31
 8008b9a:	d502      	bpl.n	8008ba2 <_svfprintf_r+0x9d6>
 8008b9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b9e:	18eb      	adds	r3, r5, r3
 8008ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba2:	2380      	movs	r3, #128	; 0x80
 8008ba4:	0032      	movs	r2, r6
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	401a      	ands	r2, r3
 8008baa:	9211      	str	r2, [sp, #68]	; 0x44
 8008bac:	2200      	movs	r2, #0
 8008bae:	9210      	str	r2, [sp, #64]	; 0x40
 8008bb0:	421e      	tst	r6, r3
 8008bb2:	d100      	bne.n	8008bb6 <_svfprintf_r+0x9ea>
 8008bb4:	e65d      	b.n	8008872 <_svfprintf_r+0x6a6>
 8008bb6:	4295      	cmp	r5, r2
 8008bb8:	dc25      	bgt.n	8008c06 <_svfprintf_r+0xa3a>
 8008bba:	9211      	str	r2, [sp, #68]	; 0x44
 8008bbc:	e659      	b.n	8008872 <_svfprintf_r+0x6a6>
 8008bbe:	9509      	str	r5, [sp, #36]	; 0x24
 8008bc0:	e7bb      	b.n	8008b3a <_svfprintf_r+0x96e>
 8008bc2:	2366      	movs	r3, #102	; 0x66
 8008bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bc8:	e7eb      	b.n	8008ba2 <_svfprintf_r+0x9d6>
 8008bca:	42ab      	cmp	r3, r5
 8008bcc:	da0e      	bge.n	8008bec <_svfprintf_r+0xa20>
 8008bce:	1aed      	subs	r5, r5, r3
 8008bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d012      	beq.n	8008bfe <_svfprintf_r+0xa32>
 8008bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bda:	3301      	adds	r3, #1
 8008bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8008bde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008be0:	3301      	adds	r3, #1
 8008be2:	9312      	str	r3, [sp, #72]	; 0x48
 8008be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2bff      	cmp	r3, #255	; 0xff
 8008bea:	d1ee      	bne.n	8008bca <_svfprintf_r+0x9fe>
 8008bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bf0:	189b      	adds	r3, r3, r2
 8008bf2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bf4:	4353      	muls	r3, r2
 8008bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf8:	189b      	adds	r3, r3, r2
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	e639      	b.n	8008872 <_svfprintf_r+0x6a6>
 8008bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c00:	3301      	adds	r3, #1
 8008c02:	9310      	str	r3, [sp, #64]	; 0x40
 8008c04:	e7ee      	b.n	8008be4 <_svfprintf_r+0xa18>
 8008c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c08:	9311      	str	r3, [sp, #68]	; 0x44
 8008c0a:	e7eb      	b.n	8008be4 <_svfprintf_r+0xa18>
 8008c0c:	1d23      	adds	r3, r4, #4
 8008c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c10:	06b3      	lsls	r3, r6, #26
 8008c12:	d509      	bpl.n	8008c28 <_svfprintf_r+0xa5c>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	17d2      	asrs	r2, r2, #31
 8008c1c:	605a      	str	r2, [r3, #4]
 8008c1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c20:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008c22:	9308      	str	r3, [sp, #32]
 8008c24:	f7ff fb0d 	bl	8008242 <_svfprintf_r+0x76>
 8008c28:	06f3      	lsls	r3, r6, #27
 8008c2a:	d503      	bpl.n	8008c34 <_svfprintf_r+0xa68>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e7f4      	b.n	8008c1e <_svfprintf_r+0xa52>
 8008c34:	0673      	lsls	r3, r6, #25
 8008c36:	d503      	bpl.n	8008c40 <_svfprintf_r+0xa74>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e7ee      	b.n	8008c1e <_svfprintf_r+0xa52>
 8008c40:	05b6      	lsls	r6, r6, #22
 8008c42:	d5f3      	bpl.n	8008c2c <_svfprintf_r+0xa60>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e7e8      	b.n	8008c1e <_svfprintf_r+0xa52>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	431e      	orrs	r6, r3
 8008c50:	2320      	movs	r3, #32
 8008c52:	0030      	movs	r0, r6
 8008c54:	4018      	ands	r0, r3
 8008c56:	421e      	tst	r6, r3
 8008c58:	d00f      	beq.n	8008c7a <_svfprintf_r+0xaae>
 8008c5a:	3b19      	subs	r3, #25
 8008c5c:	3407      	adds	r4, #7
 8008c5e:	439c      	bics	r4, r3
 8008c60:	0022      	movs	r2, r4
 8008c62:	ca18      	ldmia	r2!, {r3, r4}
 8008c64:	9306      	str	r3, [sp, #24]
 8008c66:	9407      	str	r4, [sp, #28]
 8008c68:	920d      	str	r2, [sp, #52]	; 0x34
 8008c6a:	4bc9      	ldr	r3, [pc, #804]	; (8008f90 <_svfprintf_r+0xdc4>)
 8008c6c:	401e      	ands	r6, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	221b      	movs	r2, #27
 8008c72:	a91e      	add	r1, sp, #120	; 0x78
 8008c74:	1852      	adds	r2, r2, r1
 8008c76:	2100      	movs	r1, #0
 8008c78:	e430      	b.n	80084dc <_svfprintf_r+0x310>
 8008c7a:	0022      	movs	r2, r4
 8008c7c:	ca08      	ldmia	r2!, {r3}
 8008c7e:	0031      	movs	r1, r6
 8008c80:	920d      	str	r2, [sp, #52]	; 0x34
 8008c82:	2210      	movs	r2, #16
 8008c84:	4011      	ands	r1, r2
 8008c86:	4216      	tst	r6, r2
 8008c88:	d002      	beq.n	8008c90 <_svfprintf_r+0xac4>
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	9007      	str	r0, [sp, #28]
 8008c8e:	e7ec      	b.n	8008c6a <_svfprintf_r+0xa9e>
 8008c90:	2240      	movs	r2, #64	; 0x40
 8008c92:	0030      	movs	r0, r6
 8008c94:	4010      	ands	r0, r2
 8008c96:	4216      	tst	r6, r2
 8008c98:	d003      	beq.n	8008ca2 <_svfprintf_r+0xad6>
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	9306      	str	r3, [sp, #24]
 8008c9e:	9107      	str	r1, [sp, #28]
 8008ca0:	e7e3      	b.n	8008c6a <_svfprintf_r+0xa9e>
 8008ca2:	2280      	movs	r2, #128	; 0x80
 8008ca4:	0031      	movs	r1, r6
 8008ca6:	0092      	lsls	r2, r2, #2
 8008ca8:	4011      	ands	r1, r2
 8008caa:	4216      	tst	r6, r2
 8008cac:	d0f6      	beq.n	8008c9c <_svfprintf_r+0xad0>
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	e7eb      	b.n	8008c8a <_svfprintf_r+0xabe>
 8008cb2:	0023      	movs	r3, r4
 8008cb4:	cb04      	ldmia	r3!, {r2}
 8008cb6:	49b7      	ldr	r1, [pc, #732]	; (8008f94 <_svfprintf_r+0xdc8>)
 8008cb8:	9206      	str	r2, [sp, #24]
 8008cba:	aa25      	add	r2, sp, #148	; 0x94
 8008cbc:	8011      	strh	r1, [r2, #0]
 8008cbe:	4ab6      	ldr	r2, [pc, #728]	; (8008f98 <_svfprintf_r+0xdcc>)
 8008cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	921f      	str	r2, [sp, #124]	; 0x7c
 8008cc6:	2278      	movs	r2, #120	; 0x78
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	3302      	adds	r3, #2
 8008ccc:	431e      	orrs	r6, r3
 8008cce:	920f      	str	r2, [sp, #60]	; 0x3c
 8008cd0:	e7ce      	b.n	8008c70 <_svfprintf_r+0xaa4>
 8008cd2:	0023      	movs	r3, r4
 8008cd4:	cb04      	ldmia	r3!, {r2}
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8008cda:	231b      	movs	r3, #27
 8008cdc:	9208      	str	r2, [sp, #32]
 8008cde:	aa1e      	add	r2, sp, #120	; 0x78
 8008ce0:	189b      	adds	r3, r3, r2
 8008ce2:	701c      	strb	r4, [r3, #0]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	d00e      	beq.n	8008d08 <_svfprintf_r+0xb3c>
 8008cea:	0021      	movs	r1, r4
 8008cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cee:	9808      	ldr	r0, [sp, #32]
 8008cf0:	f000 fde2 	bl	80098b8 <memchr>
 8008cf4:	900c      	str	r0, [sp, #48]	; 0x30
 8008cf6:	42a0      	cmp	r0, r4
 8008cf8:	d100      	bne.n	8008cfc <_svfprintf_r+0xb30>
 8008cfa:	e10d      	b.n	8008f18 <_svfprintf_r+0xd4c>
 8008cfc:	9a08      	ldr	r2, [sp, #32]
 8008cfe:	1a83      	subs	r3, r0, r2
 8008d00:	9309      	str	r3, [sp, #36]	; 0x24
 8008d02:	0023      	movs	r3, r4
 8008d04:	940c      	str	r4, [sp, #48]	; 0x30
 8008d06:	e44e      	b.n	80085a6 <_svfprintf_r+0x3da>
 8008d08:	9808      	ldr	r0, [sp, #32]
 8008d0a:	f7f7 f9fb 	bl	8000104 <strlen>
 8008d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8008d10:	e7f7      	b.n	8008d02 <_svfprintf_r+0xb36>
 8008d12:	2310      	movs	r3, #16
 8008d14:	431e      	orrs	r6, r3
 8008d16:	2320      	movs	r3, #32
 8008d18:	0030      	movs	r0, r6
 8008d1a:	4018      	ands	r0, r3
 8008d1c:	421e      	tst	r6, r3
 8008d1e:	d009      	beq.n	8008d34 <_svfprintf_r+0xb68>
 8008d20:	3b19      	subs	r3, #25
 8008d22:	3407      	adds	r4, #7
 8008d24:	439c      	bics	r4, r3
 8008d26:	0022      	movs	r2, r4
 8008d28:	ca18      	ldmia	r2!, {r3, r4}
 8008d2a:	9306      	str	r3, [sp, #24]
 8008d2c:	9407      	str	r4, [sp, #28]
 8008d2e:	920d      	str	r2, [sp, #52]	; 0x34
 8008d30:	2301      	movs	r3, #1
 8008d32:	e79d      	b.n	8008c70 <_svfprintf_r+0xaa4>
 8008d34:	0023      	movs	r3, r4
 8008d36:	cb04      	ldmia	r3!, {r2}
 8008d38:	0031      	movs	r1, r6
 8008d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	4019      	ands	r1, r3
 8008d40:	421e      	tst	r6, r3
 8008d42:	d003      	beq.n	8008d4c <_svfprintf_r+0xb80>
 8008d44:	9206      	str	r2, [sp, #24]
 8008d46:	9007      	str	r0, [sp, #28]
 8008d48:	3b0f      	subs	r3, #15
 8008d4a:	e791      	b.n	8008c70 <_svfprintf_r+0xaa4>
 8008d4c:	2340      	movs	r3, #64	; 0x40
 8008d4e:	0030      	movs	r0, r6
 8008d50:	4018      	ands	r0, r3
 8008d52:	421e      	tst	r6, r3
 8008d54:	d003      	beq.n	8008d5e <_svfprintf_r+0xb92>
 8008d56:	b293      	uxth	r3, r2
 8008d58:	9306      	str	r3, [sp, #24]
 8008d5a:	9107      	str	r1, [sp, #28]
 8008d5c:	e7e8      	b.n	8008d30 <_svfprintf_r+0xb64>
 8008d5e:	2380      	movs	r3, #128	; 0x80
 8008d60:	0031      	movs	r1, r6
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4019      	ands	r1, r3
 8008d66:	421e      	tst	r6, r3
 8008d68:	d003      	beq.n	8008d72 <_svfprintf_r+0xba6>
 8008d6a:	b2d3      	uxtb	r3, r2
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	9007      	str	r0, [sp, #28]
 8008d70:	e7de      	b.n	8008d30 <_svfprintf_r+0xb64>
 8008d72:	9206      	str	r2, [sp, #24]
 8008d74:	e7f1      	b.n	8008d5a <_svfprintf_r+0xb8e>
 8008d76:	4b89      	ldr	r3, [pc, #548]	; (8008f9c <_svfprintf_r+0xdd0>)
 8008d78:	0030      	movs	r0, r6
 8008d7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	4018      	ands	r0, r3
 8008d80:	421e      	tst	r6, r3
 8008d82:	d01a      	beq.n	8008dba <_svfprintf_r+0xbee>
 8008d84:	3b19      	subs	r3, #25
 8008d86:	3407      	adds	r4, #7
 8008d88:	439c      	bics	r4, r3
 8008d8a:	0022      	movs	r2, r4
 8008d8c:	ca18      	ldmia	r2!, {r3, r4}
 8008d8e:	9306      	str	r3, [sp, #24]
 8008d90:	9407      	str	r4, [sp, #28]
 8008d92:	920d      	str	r2, [sp, #52]	; 0x34
 8008d94:	07f3      	lsls	r3, r6, #31
 8008d96:	d50a      	bpl.n	8008dae <_svfprintf_r+0xbe2>
 8008d98:	9b06      	ldr	r3, [sp, #24]
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	d006      	beq.n	8008dae <_svfprintf_r+0xbe2>
 8008da0:	2230      	movs	r2, #48	; 0x30
 8008da2:	ab25      	add	r3, sp, #148	; 0x94
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008da8:	705a      	strb	r2, [r3, #1]
 8008daa:	2302      	movs	r3, #2
 8008dac:	431e      	orrs	r6, r3
 8008dae:	4b78      	ldr	r3, [pc, #480]	; (8008f90 <_svfprintf_r+0xdc4>)
 8008db0:	401e      	ands	r6, r3
 8008db2:	2302      	movs	r3, #2
 8008db4:	e75c      	b.n	8008c70 <_svfprintf_r+0xaa4>
 8008db6:	4b78      	ldr	r3, [pc, #480]	; (8008f98 <_svfprintf_r+0xdcc>)
 8008db8:	e7de      	b.n	8008d78 <_svfprintf_r+0xbac>
 8008dba:	0023      	movs	r3, r4
 8008dbc:	cb04      	ldmia	r3!, {r2}
 8008dbe:	0031      	movs	r1, r6
 8008dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	4019      	ands	r1, r3
 8008dc6:	421e      	tst	r6, r3
 8008dc8:	d002      	beq.n	8008dd0 <_svfprintf_r+0xc04>
 8008dca:	9206      	str	r2, [sp, #24]
 8008dcc:	9007      	str	r0, [sp, #28]
 8008dce:	e7e1      	b.n	8008d94 <_svfprintf_r+0xbc8>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	0030      	movs	r0, r6
 8008dd4:	4018      	ands	r0, r3
 8008dd6:	421e      	tst	r6, r3
 8008dd8:	d003      	beq.n	8008de2 <_svfprintf_r+0xc16>
 8008dda:	b293      	uxth	r3, r2
 8008ddc:	9306      	str	r3, [sp, #24]
 8008dde:	9107      	str	r1, [sp, #28]
 8008de0:	e7d8      	b.n	8008d94 <_svfprintf_r+0xbc8>
 8008de2:	2380      	movs	r3, #128	; 0x80
 8008de4:	0031      	movs	r1, r6
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4019      	ands	r1, r3
 8008dea:	421e      	tst	r6, r3
 8008dec:	d002      	beq.n	8008df4 <_svfprintf_r+0xc28>
 8008dee:	b2d3      	uxtb	r3, r2
 8008df0:	9306      	str	r3, [sp, #24]
 8008df2:	e7eb      	b.n	8008dcc <_svfprintf_r+0xc00>
 8008df4:	9206      	str	r2, [sp, #24]
 8008df6:	e7f2      	b.n	8008dde <_svfprintf_r+0xc12>
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <_svfprintf_r+0xc48>
 8008dfe:	9b06      	ldr	r3, [sp, #24]
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d807      	bhi.n	8008e14 <_svfprintf_r+0xc48>
 8008e04:	23e7      	movs	r3, #231	; 0xe7
 8008e06:	aa1e      	add	r2, sp, #120	; 0x78
 8008e08:	189b      	adds	r3, r3, r2
 8008e0a:	9a06      	ldr	r2, [sp, #24]
 8008e0c:	3230      	adds	r2, #48	; 0x30
 8008e0e:	701a      	strb	r2, [r3, #0]
 8008e10:	f000 fc18 	bl	8009644 <_svfprintf_r+0x1478>
 8008e14:	2680      	movs	r6, #128	; 0x80
 8008e16:	2300      	movs	r3, #0
 8008e18:	00f6      	lsls	r6, r6, #3
 8008e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8008e1c:	ad58      	add	r5, sp, #352	; 0x160
 8008e1e:	4026      	ands	r6, r4
 8008e20:	220a      	movs	r2, #10
 8008e22:	9806      	ldr	r0, [sp, #24]
 8008e24:	9907      	ldr	r1, [sp, #28]
 8008e26:	2300      	movs	r3, #0
 8008e28:	f7f7 fb3c 	bl	80004a4 <__aeabi_uldivmod>
 8008e2c:	1e6b      	subs	r3, r5, #1
 8008e2e:	3230      	adds	r2, #48	; 0x30
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e36:	900c      	str	r0, [sp, #48]	; 0x30
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9110      	str	r1, [sp, #64]	; 0x40
 8008e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d01d      	beq.n	8008e7e <_svfprintf_r+0xcb2>
 8008e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d118      	bne.n	8008e7e <_svfprintf_r+0xcb2>
 8008e4c:	2aff      	cmp	r2, #255	; 0xff
 8008e4e:	d016      	beq.n	8008e7e <_svfprintf_r+0xcb2>
 8008e50:	9b07      	ldr	r3, [sp, #28]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <_svfprintf_r+0xc90>
 8008e56:	9b06      	ldr	r3, [sp, #24]
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d910      	bls.n	8008e7e <_svfprintf_r+0xcb2>
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008e60:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	0018      	movs	r0, r3
 8008e66:	9308      	str	r3, [sp, #32]
 8008e68:	f7fe fc6e 	bl	8007748 <strncpy>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e70:	920e      	str	r2, [sp, #56]	; 0x38
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	4193      	sbcs	r3, r2
 8008e78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e7a:	18d3      	adds	r3, r2, r3
 8008e7c:	9312      	str	r3, [sp, #72]	; 0x48
 8008e7e:	9b07      	ldr	r3, [sp, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10f      	bne.n	8008ea4 <_svfprintf_r+0xcd8>
 8008e84:	9b06      	ldr	r3, [sp, #24]
 8008e86:	2b09      	cmp	r3, #9
 8008e88:	d80c      	bhi.n	8008ea4 <_svfprintf_r+0xcd8>
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	9a08      	ldr	r2, [sp, #32]
 8008e8e:	9319      	str	r3, [sp, #100]	; 0x64
 8008e90:	ab58      	add	r3, sp, #352	; 0x160
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	9309      	str	r3, [sp, #36]	; 0x24
 8008e96:	2300      	movs	r3, #0
 8008e98:	0026      	movs	r6, r4
 8008e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e9c:	001d      	movs	r5, r3
 8008e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8008ea0:	9311      	str	r3, [sp, #68]	; 0x44
 8008ea2:	e4f2      	b.n	800888a <_svfprintf_r+0x6be>
 8008ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea6:	9d08      	ldr	r5, [sp, #32]
 8008ea8:	9306      	str	r3, [sp, #24]
 8008eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eac:	9307      	str	r3, [sp, #28]
 8008eae:	e7b7      	b.n	8008e20 <_svfprintf_r+0xc54>
 8008eb0:	200f      	movs	r0, #15
 8008eb2:	ab58      	add	r3, sp, #352	; 0x160
 8008eb4:	9308      	str	r3, [sp, #32]
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	9308      	str	r3, [sp, #32]
 8008ebe:	9b06      	ldr	r3, [sp, #24]
 8008ec0:	4003      	ands	r3, r0
 8008ec2:	5cd3      	ldrb	r3, [r2, r3]
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	7013      	strb	r3, [r2, #0]
 8008ec8:	9b07      	ldr	r3, [sp, #28]
 8008eca:	0719      	lsls	r1, r3, #28
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	091a      	lsrs	r2, r3, #4
 8008ed0:	9b07      	ldr	r3, [sp, #28]
 8008ed2:	4311      	orrs	r1, r2
 8008ed4:	091b      	lsrs	r3, r3, #4
 8008ed6:	9307      	str	r3, [sp, #28]
 8008ed8:	000b      	movs	r3, r1
 8008eda:	9a07      	ldr	r2, [sp, #28]
 8008edc:	9106      	str	r1, [sp, #24]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	d1e9      	bne.n	8008eb6 <_svfprintf_r+0xcea>
 8008ee2:	e7d2      	b.n	8008e8a <_svfprintf_r+0xcbe>
 8008ee4:	aa58      	add	r2, sp, #352	; 0x160
 8008ee6:	9208      	str	r2, [sp, #32]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1ce      	bne.n	8008e8a <_svfprintf_r+0xcbe>
 8008eec:	07f6      	lsls	r6, r6, #31
 8008eee:	d5cc      	bpl.n	8008e8a <_svfprintf_r+0xcbe>
 8008ef0:	aa1e      	add	r2, sp, #120	; 0x78
 8008ef2:	33e7      	adds	r3, #231	; 0xe7
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	2230      	movs	r2, #48	; 0x30
 8008ef8:	e789      	b.n	8008e0e <_svfprintf_r+0xc42>
 8008efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d100      	bne.n	8008f02 <_svfprintf_r+0xd36>
 8008f00:	e364      	b.n	80095cc <_svfprintf_r+0x1400>
 8008f02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f04:	211b      	movs	r1, #27
 8008f06:	ab3f      	add	r3, sp, #252	; 0xfc
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	a81e      	add	r0, sp, #120	; 0x78
 8008f0e:	1809      	adds	r1, r1, r0
 8008f10:	700a      	strb	r2, [r1, #0]
 8008f12:	940d      	str	r4, [sp, #52]	; 0x34
 8008f14:	f7ff fabd 	bl	8008492 <_svfprintf_r+0x2c6>
 8008f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f1a:	f7ff fb44 	bl	80085a6 <_svfprintf_r+0x3da>
 8008f1e:	2010      	movs	r0, #16
 8008f20:	1812      	adds	r2, r2, r0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f26:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f28:	2b07      	cmp	r3, #7
 8008f2a:	dd08      	ble.n	8008f3e <_svfprintf_r+0xd72>
 8008f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f30:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f32:	f001 fde5 	bl	800ab00 <__ssprint_r>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d000      	beq.n	8008f3c <_svfprintf_r+0xd70>
 8008f3a:	e326      	b.n	800958a <_svfprintf_r+0x13be>
 8008f3c:	a92f      	add	r1, sp, #188	; 0xbc
 8008f3e:	000f      	movs	r7, r1
 8008f40:	3c10      	subs	r4, #16
 8008f42:	e4c5      	b.n	80088d0 <_svfprintf_r+0x704>
 8008f44:	2010      	movs	r0, #16
 8008f46:	1812      	adds	r2, r2, r0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f4c:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f4e:	2b07      	cmp	r3, #7
 8008f50:	dd08      	ble.n	8008f64 <_svfprintf_r+0xd98>
 8008f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f56:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f58:	f001 fdd2 	bl	800ab00 <__ssprint_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d000      	beq.n	8008f62 <_svfprintf_r+0xd96>
 8008f60:	e313      	b.n	800958a <_svfprintf_r+0x13be>
 8008f62:	a92f      	add	r1, sp, #188	; 0xbc
 8008f64:	000f      	movs	r7, r1
 8008f66:	3c10      	subs	r4, #16
 8008f68:	e50b      	b.n	8008982 <_svfprintf_r+0x7b6>
 8008f6a:	2010      	movs	r0, #16
 8008f6c:	1812      	adds	r2, r2, r0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f72:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f74:	2b07      	cmp	r3, #7
 8008f76:	dd08      	ble.n	8008f8a <_svfprintf_r+0xdbe>
 8008f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f7e:	f001 fdbf 	bl	800ab00 <__ssprint_r>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d000      	beq.n	8008f88 <_svfprintf_r+0xdbc>
 8008f86:	e300      	b.n	800958a <_svfprintf_r+0x13be>
 8008f88:	a92f      	add	r1, sp, #188	; 0xbc
 8008f8a:	000f      	movs	r7, r1
 8008f8c:	3c10      	subs	r4, #16
 8008f8e:	e518      	b.n	80089c2 <_svfprintf_r+0x7f6>
 8008f90:	fffffbff 	.word	0xfffffbff
 8008f94:	00007830 	.word	0x00007830
 8008f98:	0800c26c 	.word	0x0800c26c
 8008f9c:	0800c27d 	.word	0x0800c27d
 8008fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fa2:	2b65      	cmp	r3, #101	; 0x65
 8008fa4:	dc00      	bgt.n	8008fa8 <_svfprintf_r+0xddc>
 8008fa6:	e241      	b.n	800942c <_svfprintf_r+0x1260>
 8008fa8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008faa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f7f7 fa4a 	bl	8000448 <__aeabi_dcmpeq>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d077      	beq.n	80090a8 <_svfprintf_r+0xedc>
 8008fb8:	4bca      	ldr	r3, [pc, #808]	; (80092e4 <_svfprintf_r+0x1118>)
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8008fc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008fca:	3301      	adds	r3, #1
 8008fcc:	932d      	str	r3, [sp, #180]	; 0xb4
 8008fce:	2b07      	cmp	r3, #7
 8008fd0:	dd08      	ble.n	8008fe4 <_svfprintf_r+0xe18>
 8008fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fd6:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fd8:	f001 fd92 	bl	800ab00 <__ssprint_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d000      	beq.n	8008fe2 <_svfprintf_r+0xe16>
 8008fe0:	e2d3      	b.n	800958a <_svfprintf_r+0x13be>
 8008fe2:	af2f      	add	r7, sp, #188	; 0xbc
 8008fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	db01      	blt.n	8008ff0 <_svfprintf_r+0xe24>
 8008fec:	07f3      	lsls	r3, r6, #31
 8008fee:	d51b      	bpl.n	8009028 <_svfprintf_r+0xe5c>
 8008ff0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008ff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	932e      	str	r3, [sp, #184]	; 0xb8
 8009002:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009004:	3301      	adds	r3, #1
 8009006:	932d      	str	r3, [sp, #180]	; 0xb4
 8009008:	2b07      	cmp	r3, #7
 800900a:	dd08      	ble.n	800901e <_svfprintf_r+0xe52>
 800900c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800900e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009010:	aa2c      	add	r2, sp, #176	; 0xb0
 8009012:	f001 fd75 	bl	800ab00 <__ssprint_r>
 8009016:	2800      	cmp	r0, #0
 8009018:	d000      	beq.n	800901c <_svfprintf_r+0xe50>
 800901a:	e2b6      	b.n	800958a <_svfprintf_r+0x13be>
 800901c:	af2f      	add	r7, sp, #188	; 0xbc
 800901e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009020:	2510      	movs	r5, #16
 8009022:	1e5c      	subs	r4, r3, #1
 8009024:	2c00      	cmp	r4, #0
 8009026:	dc2e      	bgt.n	8009086 <_svfprintf_r+0xeba>
 8009028:	0776      	lsls	r6, r6, #29
 800902a:	d500      	bpl.n	800902e <_svfprintf_r+0xe62>
 800902c:	e290      	b.n	8009550 <_svfprintf_r+0x1384>
 800902e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009030:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009032:	4293      	cmp	r3, r2
 8009034:	da00      	bge.n	8009038 <_svfprintf_r+0xe6c>
 8009036:	0013      	movs	r3, r2
 8009038:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800903a:	18d3      	adds	r3, r2, r3
 800903c:	9317      	str	r3, [sp, #92]	; 0x5c
 800903e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <_svfprintf_r+0xe88>
 8009044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009046:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009048:	aa2c      	add	r2, sp, #176	; 0xb0
 800904a:	f001 fd59 	bl	800ab00 <__ssprint_r>
 800904e:	2800      	cmp	r0, #0
 8009050:	d000      	beq.n	8009054 <_svfprintf_r+0xe88>
 8009052:	e29a      	b.n	800958a <_svfprintf_r+0x13be>
 8009054:	2300      	movs	r3, #0
 8009056:	932d      	str	r3, [sp, #180]	; 0xb4
 8009058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d000      	beq.n	8009060 <_svfprintf_r+0xe94>
 800905e:	e2b0      	b.n	80095c2 <_svfprintf_r+0x13f6>
 8009060:	af2f      	add	r7, sp, #188	; 0xbc
 8009062:	e5dc      	b.n	8008c1e <_svfprintf_r+0xa52>
 8009064:	3210      	adds	r2, #16
 8009066:	607d      	str	r5, [r7, #4]
 8009068:	922e      	str	r2, [sp, #184]	; 0xb8
 800906a:	932d      	str	r3, [sp, #180]	; 0xb4
 800906c:	2b07      	cmp	r3, #7
 800906e:	dd08      	ble.n	8009082 <_svfprintf_r+0xeb6>
 8009070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009072:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009074:	aa2c      	add	r2, sp, #176	; 0xb0
 8009076:	f001 fd43 	bl	800ab00 <__ssprint_r>
 800907a:	2800      	cmp	r0, #0
 800907c:	d000      	beq.n	8009080 <_svfprintf_r+0xeb4>
 800907e:	e284      	b.n	800958a <_svfprintf_r+0x13be>
 8009080:	a92f      	add	r1, sp, #188	; 0xbc
 8009082:	000f      	movs	r7, r1
 8009084:	3c10      	subs	r4, #16
 8009086:	0039      	movs	r1, r7
 8009088:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800908a:	4897      	ldr	r0, [pc, #604]	; (80092e8 <_svfprintf_r+0x111c>)
 800908c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800908e:	3301      	adds	r3, #1
 8009090:	3108      	adds	r1, #8
 8009092:	6038      	str	r0, [r7, #0]
 8009094:	2c10      	cmp	r4, #16
 8009096:	dce5      	bgt.n	8009064 <_svfprintf_r+0xe98>
 8009098:	607c      	str	r4, [r7, #4]
 800909a:	18a4      	adds	r4, r4, r2
 800909c:	942e      	str	r4, [sp, #184]	; 0xb8
 800909e:	000f      	movs	r7, r1
 80090a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80090a2:	2b07      	cmp	r3, #7
 80090a4:	ddc0      	ble.n	8009028 <_svfprintf_r+0xe5c>
 80090a6:	e05f      	b.n	8009168 <_svfprintf_r+0xf9c>
 80090a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dc78      	bgt.n	80091a0 <_svfprintf_r+0xfd4>
 80090ae:	4b8d      	ldr	r3, [pc, #564]	; (80092e4 <_svfprintf_r+0x1118>)
 80090b0:	603b      	str	r3, [r7, #0]
 80090b2:	2301      	movs	r3, #1
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090b8:	3708      	adds	r7, #8
 80090ba:	3301      	adds	r3, #1
 80090bc:	932e      	str	r3, [sp, #184]	; 0xb8
 80090be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80090c0:	3301      	adds	r3, #1
 80090c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80090c4:	2b07      	cmp	r3, #7
 80090c6:	dd08      	ble.n	80090da <_svfprintf_r+0xf0e>
 80090c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80090ce:	f001 fd17 	bl	800ab00 <__ssprint_r>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d000      	beq.n	80090d8 <_svfprintf_r+0xf0c>
 80090d6:	e258      	b.n	800958a <_svfprintf_r+0x13be>
 80090d8:	af2f      	add	r7, sp, #188	; 0xbc
 80090da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80090dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80090e0:	430b      	orrs	r3, r1
 80090e2:	2101      	movs	r1, #1
 80090e4:	4031      	ands	r1, r6
 80090e6:	430b      	orrs	r3, r1
 80090e8:	d09e      	beq.n	8009028 <_svfprintf_r+0xe5c>
 80090ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	189a      	adds	r2, r3, r2
 80090f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80090f6:	922e      	str	r2, [sp, #184]	; 0xb8
 80090f8:	3301      	adds	r3, #1
 80090fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80090fc:	3708      	adds	r7, #8
 80090fe:	2b07      	cmp	r3, #7
 8009100:	dd08      	ble.n	8009114 <_svfprintf_r+0xf48>
 8009102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009106:	aa2c      	add	r2, sp, #176	; 0xb0
 8009108:	f001 fcfa 	bl	800ab00 <__ssprint_r>
 800910c:	2800      	cmp	r0, #0
 800910e:	d000      	beq.n	8009112 <_svfprintf_r+0xf46>
 8009110:	e23b      	b.n	800958a <_svfprintf_r+0x13be>
 8009112:	af2f      	add	r7, sp, #188	; 0xbc
 8009114:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009116:	2c00      	cmp	r4, #0
 8009118:	da19      	bge.n	800914e <_svfprintf_r+0xf82>
 800911a:	0038      	movs	r0, r7
 800911c:	2510      	movs	r5, #16
 800911e:	4264      	negs	r4, r4
 8009120:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8009122:	4a71      	ldr	r2, [pc, #452]	; (80092e8 <_svfprintf_r+0x111c>)
 8009124:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009126:	3101      	adds	r1, #1
 8009128:	3708      	adds	r7, #8
 800912a:	6002      	str	r2, [r0, #0]
 800912c:	2c10      	cmp	r4, #16
 800912e:	dc25      	bgt.n	800917c <_svfprintf_r+0xfb0>
 8009130:	6044      	str	r4, [r0, #4]
 8009132:	18e4      	adds	r4, r4, r3
 8009134:	942e      	str	r4, [sp, #184]	; 0xb8
 8009136:	912d      	str	r1, [sp, #180]	; 0xb4
 8009138:	2907      	cmp	r1, #7
 800913a:	dd08      	ble.n	800914e <_svfprintf_r+0xf82>
 800913c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800913e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009140:	aa2c      	add	r2, sp, #176	; 0xb0
 8009142:	f001 fcdd 	bl	800ab00 <__ssprint_r>
 8009146:	2800      	cmp	r0, #0
 8009148:	d000      	beq.n	800914c <_svfprintf_r+0xf80>
 800914a:	e21e      	b.n	800958a <_svfprintf_r+0x13be>
 800914c:	af2f      	add	r7, sp, #188	; 0xbc
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009156:	18d2      	adds	r2, r2, r3
 8009158:	922e      	str	r2, [sp, #184]	; 0xb8
 800915a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	3201      	adds	r2, #1
 8009160:	922d      	str	r2, [sp, #180]	; 0xb4
 8009162:	2a07      	cmp	r2, #7
 8009164:	dc00      	bgt.n	8009168 <_svfprintf_r+0xf9c>
 8009166:	e45b      	b.n	8008a20 <_svfprintf_r+0x854>
 8009168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800916a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800916c:	aa2c      	add	r2, sp, #176	; 0xb0
 800916e:	f001 fcc7 	bl	800ab00 <__ssprint_r>
 8009172:	2800      	cmp	r0, #0
 8009174:	d000      	beq.n	8009178 <_svfprintf_r+0xfac>
 8009176:	e208      	b.n	800958a <_svfprintf_r+0x13be>
 8009178:	af2f      	add	r7, sp, #188	; 0xbc
 800917a:	e755      	b.n	8009028 <_svfprintf_r+0xe5c>
 800917c:	3310      	adds	r3, #16
 800917e:	6045      	str	r5, [r0, #4]
 8009180:	932e      	str	r3, [sp, #184]	; 0xb8
 8009182:	912d      	str	r1, [sp, #180]	; 0xb4
 8009184:	2907      	cmp	r1, #7
 8009186:	dd08      	ble.n	800919a <_svfprintf_r+0xfce>
 8009188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800918a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800918c:	aa2c      	add	r2, sp, #176	; 0xb0
 800918e:	f001 fcb7 	bl	800ab00 <__ssprint_r>
 8009192:	2800      	cmp	r0, #0
 8009194:	d000      	beq.n	8009198 <_svfprintf_r+0xfcc>
 8009196:	e1f8      	b.n	800958a <_svfprintf_r+0x13be>
 8009198:	af2f      	add	r7, sp, #188	; 0xbc
 800919a:	0038      	movs	r0, r7
 800919c:	3c10      	subs	r4, #16
 800919e:	e7bf      	b.n	8009120 <_svfprintf_r+0xf54>
 80091a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a2:	002c      	movs	r4, r5
 80091a4:	429d      	cmp	r5, r3
 80091a6:	dd00      	ble.n	80091aa <_svfprintf_r+0xfde>
 80091a8:	001c      	movs	r4, r3
 80091aa:	2c00      	cmp	r4, #0
 80091ac:	dd14      	ble.n	80091d8 <_svfprintf_r+0x100c>
 80091ae:	9b08      	ldr	r3, [sp, #32]
 80091b0:	607c      	str	r4, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091b6:	3708      	adds	r7, #8
 80091b8:	18e3      	adds	r3, r4, r3
 80091ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80091bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80091be:	3301      	adds	r3, #1
 80091c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80091c2:	2b07      	cmp	r3, #7
 80091c4:	dd08      	ble.n	80091d8 <_svfprintf_r+0x100c>
 80091c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80091cc:	f001 fc98 	bl	800ab00 <__ssprint_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d000      	beq.n	80091d6 <_svfprintf_r+0x100a>
 80091d4:	e1d9      	b.n	800958a <_svfprintf_r+0x13be>
 80091d6:	af2f      	add	r7, sp, #188	; 0xbc
 80091d8:	43e3      	mvns	r3, r4
 80091da:	17db      	asrs	r3, r3, #31
 80091dc:	401c      	ands	r4, r3
 80091de:	1b2c      	subs	r4, r5, r4
 80091e0:	2c00      	cmp	r4, #0
 80091e2:	dd18      	ble.n	8009216 <_svfprintf_r+0x104a>
 80091e4:	0039      	movs	r1, r7
 80091e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80091e8:	483f      	ldr	r0, [pc, #252]	; (80092e8 <_svfprintf_r+0x111c>)
 80091ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80091ec:	3301      	adds	r3, #1
 80091ee:	3108      	adds	r1, #8
 80091f0:	6038      	str	r0, [r7, #0]
 80091f2:	2c10      	cmp	r4, #16
 80091f4:	dc7a      	bgt.n	80092ec <_svfprintf_r+0x1120>
 80091f6:	607c      	str	r4, [r7, #4]
 80091f8:	18a4      	adds	r4, r4, r2
 80091fa:	000f      	movs	r7, r1
 80091fc:	942e      	str	r4, [sp, #184]	; 0xb8
 80091fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8009200:	2b07      	cmp	r3, #7
 8009202:	dd08      	ble.n	8009216 <_svfprintf_r+0x104a>
 8009204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009206:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009208:	aa2c      	add	r2, sp, #176	; 0xb0
 800920a:	f001 fc79 	bl	800ab00 <__ssprint_r>
 800920e:	2800      	cmp	r0, #0
 8009210:	d000      	beq.n	8009214 <_svfprintf_r+0x1048>
 8009212:	e1ba      	b.n	800958a <_svfprintf_r+0x13be>
 8009214:	af2f      	add	r7, sp, #188	; 0xbc
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	195d      	adds	r5, r3, r5
 800921a:	0573      	lsls	r3, r6, #21
 800921c:	d50b      	bpl.n	8009236 <_svfprintf_r+0x106a>
 800921e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009220:	2b00      	cmp	r3, #0
 8009222:	d176      	bne.n	8009312 <_svfprintf_r+0x1146>
 8009224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d176      	bne.n	8009318 <_svfprintf_r+0x114c>
 800922a:	9b08      	ldr	r3, [sp, #32]
 800922c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800922e:	189b      	adds	r3, r3, r2
 8009230:	429d      	cmp	r5, r3
 8009232:	d900      	bls.n	8009236 <_svfprintf_r+0x106a>
 8009234:	001d      	movs	r5, r3
 8009236:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800923a:	4293      	cmp	r3, r2
 800923c:	db01      	blt.n	8009242 <_svfprintf_r+0x1076>
 800923e:	07f3      	lsls	r3, r6, #31
 8009240:	d516      	bpl.n	8009270 <_svfprintf_r+0x10a4>
 8009242:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009244:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800924e:	3708      	adds	r7, #8
 8009250:	189b      	adds	r3, r3, r2
 8009252:	932e      	str	r3, [sp, #184]	; 0xb8
 8009254:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009256:	3301      	adds	r3, #1
 8009258:	932d      	str	r3, [sp, #180]	; 0xb4
 800925a:	2b07      	cmp	r3, #7
 800925c:	dd08      	ble.n	8009270 <_svfprintf_r+0x10a4>
 800925e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009260:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009262:	aa2c      	add	r2, sp, #176	; 0xb0
 8009264:	f001 fc4c 	bl	800ab00 <__ssprint_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	d000      	beq.n	800926e <_svfprintf_r+0x10a2>
 800926c:	e18d      	b.n	800958a <_svfprintf_r+0x13be>
 800926e:	af2f      	add	r7, sp, #188	; 0xbc
 8009270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009272:	9b08      	ldr	r3, [sp, #32]
 8009274:	4694      	mov	ip, r2
 8009276:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009278:	4463      	add	r3, ip
 800927a:	1b5b      	subs	r3, r3, r5
 800927c:	1b14      	subs	r4, r2, r4
 800927e:	429c      	cmp	r4, r3
 8009280:	dd00      	ble.n	8009284 <_svfprintf_r+0x10b8>
 8009282:	001c      	movs	r4, r3
 8009284:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009286:	2c00      	cmp	r4, #0
 8009288:	dd12      	ble.n	80092b0 <_svfprintf_r+0x10e4>
 800928a:	18e3      	adds	r3, r4, r3
 800928c:	932e      	str	r3, [sp, #184]	; 0xb8
 800928e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009290:	603d      	str	r5, [r7, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	607c      	str	r4, [r7, #4]
 8009296:	932d      	str	r3, [sp, #180]	; 0xb4
 8009298:	3708      	adds	r7, #8
 800929a:	2b07      	cmp	r3, #7
 800929c:	dd08      	ble.n	80092b0 <_svfprintf_r+0x10e4>
 800929e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80092a4:	f001 fc2c 	bl	800ab00 <__ssprint_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d000      	beq.n	80092ae <_svfprintf_r+0x10e2>
 80092ac:	e16d      	b.n	800958a <_svfprintf_r+0x13be>
 80092ae:	af2f      	add	r7, sp, #188	; 0xbc
 80092b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092b4:	2510      	movs	r5, #16
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	43e2      	mvns	r2, r4
 80092ba:	17d2      	asrs	r2, r2, #31
 80092bc:	4014      	ands	r4, r2
 80092be:	1b1c      	subs	r4, r3, r4
 80092c0:	2c00      	cmp	r4, #0
 80092c2:	dc00      	bgt.n	80092c6 <_svfprintf_r+0x10fa>
 80092c4:	e6b0      	b.n	8009028 <_svfprintf_r+0xe5c>
 80092c6:	0039      	movs	r1, r7
 80092c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80092ca:	4807      	ldr	r0, [pc, #28]	; (80092e8 <_svfprintf_r+0x111c>)
 80092cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80092ce:	3301      	adds	r3, #1
 80092d0:	3108      	adds	r1, #8
 80092d2:	6038      	str	r0, [r7, #0]
 80092d4:	2c10      	cmp	r4, #16
 80092d6:	dd00      	ble.n	80092da <_svfprintf_r+0x110e>
 80092d8:	e096      	b.n	8009408 <_svfprintf_r+0x123c>
 80092da:	1912      	adds	r2, r2, r4
 80092dc:	607c      	str	r4, [r7, #4]
 80092de:	922e      	str	r2, [sp, #184]	; 0xb8
 80092e0:	e6dd      	b.n	800909e <_svfprintf_r+0xed2>
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	0800c28e 	.word	0x0800c28e
 80092e8:	0800c2a0 	.word	0x0800c2a0
 80092ec:	2010      	movs	r0, #16
 80092ee:	1812      	adds	r2, r2, r0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	922e      	str	r2, [sp, #184]	; 0xb8
 80092f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80092f6:	2b07      	cmp	r3, #7
 80092f8:	dd08      	ble.n	800930c <_svfprintf_r+0x1140>
 80092fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8009300:	f001 fbfe 	bl	800ab00 <__ssprint_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	d000      	beq.n	800930a <_svfprintf_r+0x113e>
 8009308:	e13f      	b.n	800958a <_svfprintf_r+0x13be>
 800930a:	a92f      	add	r1, sp, #188	; 0xbc
 800930c:	000f      	movs	r7, r1
 800930e:	3c10      	subs	r4, #16
 8009310:	e768      	b.n	80091e4 <_svfprintf_r+0x1018>
 8009312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d05d      	beq.n	80093d4 <_svfprintf_r+0x1208>
 8009318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931a:	3b01      	subs	r3, #1
 800931c:	9310      	str	r3, [sp, #64]	; 0x40
 800931e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009320:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009326:	607b      	str	r3, [r7, #4]
 8009328:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800932a:	3708      	adds	r7, #8
 800932c:	189b      	adds	r3, r3, r2
 800932e:	932e      	str	r3, [sp, #184]	; 0xb8
 8009330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009332:	3301      	adds	r3, #1
 8009334:	932d      	str	r3, [sp, #180]	; 0xb4
 8009336:	2b07      	cmp	r3, #7
 8009338:	dd08      	ble.n	800934c <_svfprintf_r+0x1180>
 800933a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800933c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800933e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009340:	f001 fbde 	bl	800ab00 <__ssprint_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	d000      	beq.n	800934a <_svfprintf_r+0x117e>
 8009348:	e11f      	b.n	800958a <_svfprintf_r+0x13be>
 800934a:	af2f      	add	r7, sp, #188	; 0xbc
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009350:	189c      	adds	r4, r3, r2
 8009352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009354:	1b64      	subs	r4, r4, r5
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	429c      	cmp	r4, r3
 800935a:	dd00      	ble.n	800935e <_svfprintf_r+0x1192>
 800935c:	001c      	movs	r4, r3
 800935e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009360:	2c00      	cmp	r4, #0
 8009362:	dd12      	ble.n	800938a <_svfprintf_r+0x11be>
 8009364:	18e3      	adds	r3, r4, r3
 8009366:	932e      	str	r3, [sp, #184]	; 0xb8
 8009368:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800936a:	603d      	str	r5, [r7, #0]
 800936c:	3301      	adds	r3, #1
 800936e:	607c      	str	r4, [r7, #4]
 8009370:	932d      	str	r3, [sp, #180]	; 0xb4
 8009372:	3708      	adds	r7, #8
 8009374:	2b07      	cmp	r3, #7
 8009376:	dd08      	ble.n	800938a <_svfprintf_r+0x11be>
 8009378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800937a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800937c:	aa2c      	add	r2, sp, #176	; 0xb0
 800937e:	f001 fbbf 	bl	800ab00 <__ssprint_r>
 8009382:	2800      	cmp	r0, #0
 8009384:	d000      	beq.n	8009388 <_svfprintf_r+0x11bc>
 8009386:	e100      	b.n	800958a <_svfprintf_r+0x13be>
 8009388:	af2f      	add	r7, sp, #188	; 0xbc
 800938a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800938c:	781a      	ldrb	r2, [r3, #0]
 800938e:	43e3      	mvns	r3, r4
 8009390:	17db      	asrs	r3, r3, #31
 8009392:	401c      	ands	r4, r3
 8009394:	1b14      	subs	r4, r2, r4
 8009396:	2c00      	cmp	r4, #0
 8009398:	dd18      	ble.n	80093cc <_svfprintf_r+0x1200>
 800939a:	0039      	movs	r1, r7
 800939c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800939e:	48aa      	ldr	r0, [pc, #680]	; (8009648 <_svfprintf_r+0x147c>)
 80093a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80093a2:	3301      	adds	r3, #1
 80093a4:	3108      	adds	r1, #8
 80093a6:	6038      	str	r0, [r7, #0]
 80093a8:	2c10      	cmp	r4, #16
 80093aa:	dc1a      	bgt.n	80093e2 <_svfprintf_r+0x1216>
 80093ac:	1912      	adds	r2, r2, r4
 80093ae:	607c      	str	r4, [r7, #4]
 80093b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80093b2:	000f      	movs	r7, r1
 80093b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80093b6:	2b07      	cmp	r3, #7
 80093b8:	dd08      	ble.n	80093cc <_svfprintf_r+0x1200>
 80093ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093be:	aa2c      	add	r2, sp, #176	; 0xb0
 80093c0:	f001 fb9e 	bl	800ab00 <__ssprint_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d000      	beq.n	80093ca <_svfprintf_r+0x11fe>
 80093c8:	e0df      	b.n	800958a <_svfprintf_r+0x13be>
 80093ca:	af2f      	add	r7, sp, #188	; 0xbc
 80093cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	18ed      	adds	r5, r5, r3
 80093d2:	e724      	b.n	800921e <_svfprintf_r+0x1052>
 80093d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093d6:	3b01      	subs	r3, #1
 80093d8:	9312      	str	r3, [sp, #72]	; 0x48
 80093da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093dc:	3b01      	subs	r3, #1
 80093de:	9311      	str	r3, [sp, #68]	; 0x44
 80093e0:	e79d      	b.n	800931e <_svfprintf_r+0x1152>
 80093e2:	2010      	movs	r0, #16
 80093e4:	1812      	adds	r2, r2, r0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	922e      	str	r2, [sp, #184]	; 0xb8
 80093ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	dd08      	ble.n	8009402 <_svfprintf_r+0x1236>
 80093f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80093f6:	f001 fb83 	bl	800ab00 <__ssprint_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d000      	beq.n	8009400 <_svfprintf_r+0x1234>
 80093fe:	e0c4      	b.n	800958a <_svfprintf_r+0x13be>
 8009400:	a92f      	add	r1, sp, #188	; 0xbc
 8009402:	000f      	movs	r7, r1
 8009404:	3c10      	subs	r4, #16
 8009406:	e7c8      	b.n	800939a <_svfprintf_r+0x11ce>
 8009408:	3210      	adds	r2, #16
 800940a:	607d      	str	r5, [r7, #4]
 800940c:	922e      	str	r2, [sp, #184]	; 0xb8
 800940e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009410:	2b07      	cmp	r3, #7
 8009412:	dd08      	ble.n	8009426 <_svfprintf_r+0x125a>
 8009414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009416:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009418:	aa2c      	add	r2, sp, #176	; 0xb0
 800941a:	f001 fb71 	bl	800ab00 <__ssprint_r>
 800941e:	2800      	cmp	r0, #0
 8009420:	d000      	beq.n	8009424 <_svfprintf_r+0x1258>
 8009422:	e0b2      	b.n	800958a <_svfprintf_r+0x13be>
 8009424:	a92f      	add	r1, sp, #188	; 0xbc
 8009426:	000f      	movs	r7, r1
 8009428:	3c10      	subs	r4, #16
 800942a:	e74c      	b.n	80092c6 <_svfprintf_r+0x10fa>
 800942c:	003c      	movs	r4, r7
 800942e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009430:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009434:	3101      	adds	r1, #1
 8009436:	3301      	adds	r3, #1
 8009438:	3408      	adds	r4, #8
 800943a:	2a01      	cmp	r2, #1
 800943c:	dc03      	bgt.n	8009446 <_svfprintf_r+0x127a>
 800943e:	2201      	movs	r2, #1
 8009440:	4216      	tst	r6, r2
 8009442:	d100      	bne.n	8009446 <_svfprintf_r+0x127a>
 8009444:	e07f      	b.n	8009546 <_svfprintf_r+0x137a>
 8009446:	9a08      	ldr	r2, [sp, #32]
 8009448:	912e      	str	r1, [sp, #184]	; 0xb8
 800944a:	603a      	str	r2, [r7, #0]
 800944c:	2201      	movs	r2, #1
 800944e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	2b07      	cmp	r3, #7
 8009454:	dd08      	ble.n	8009468 <_svfprintf_r+0x129c>
 8009456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009458:	980a      	ldr	r0, [sp, #40]	; 0x28
 800945a:	aa2c      	add	r2, sp, #176	; 0xb0
 800945c:	f001 fb50 	bl	800ab00 <__ssprint_r>
 8009460:	2800      	cmp	r0, #0
 8009462:	d000      	beq.n	8009466 <_svfprintf_r+0x129a>
 8009464:	e091      	b.n	800958a <_svfprintf_r+0x13be>
 8009466:	ac2f      	add	r4, sp, #188	; 0xbc
 8009468:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800946a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009474:	3408      	adds	r4, #8
 8009476:	189b      	adds	r3, r3, r2
 8009478:	932e      	str	r3, [sp, #184]	; 0xb8
 800947a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800947c:	3301      	adds	r3, #1
 800947e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009480:	2b07      	cmp	r3, #7
 8009482:	dd07      	ble.n	8009494 <_svfprintf_r+0x12c8>
 8009484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009488:	aa2c      	add	r2, sp, #176	; 0xb0
 800948a:	f001 fb39 	bl	800ab00 <__ssprint_r>
 800948e:	2800      	cmp	r0, #0
 8009490:	d17b      	bne.n	800958a <_svfprintf_r+0x13be>
 8009492:	ac2f      	add	r4, sp, #188	; 0xbc
 8009494:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009496:	2200      	movs	r2, #0
 8009498:	9814      	ldr	r0, [sp, #80]	; 0x50
 800949a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800949c:	9309      	str	r3, [sp, #36]	; 0x24
 800949e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80094a2:	1e5d      	subs	r5, r3, #1
 80094a4:	2300      	movs	r3, #0
 80094a6:	f7f6 ffcf 	bl	8000448 <__aeabi_dcmpeq>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d126      	bne.n	80094fc <_svfprintf_r+0x1330>
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b2:	3301      	adds	r3, #1
 80094b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	1e7b      	subs	r3, r7, #1
 80094ba:	3201      	adds	r2, #1
 80094bc:	185b      	adds	r3, r3, r1
 80094be:	6065      	str	r5, [r4, #4]
 80094c0:	932e      	str	r3, [sp, #184]	; 0xb8
 80094c2:	922d      	str	r2, [sp, #180]	; 0xb4
 80094c4:	3408      	adds	r4, #8
 80094c6:	2a07      	cmp	r2, #7
 80094c8:	dd07      	ble.n	80094da <_svfprintf_r+0x130e>
 80094ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80094d0:	f001 fb16 	bl	800ab00 <__ssprint_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d158      	bne.n	800958a <_svfprintf_r+0x13be>
 80094d8:	ac2f      	add	r4, sp, #188	; 0xbc
 80094da:	ab28      	add	r3, sp, #160	; 0xa0
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80094e6:	189b      	adds	r3, r3, r2
 80094e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80094ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80094ec:	3301      	adds	r3, #1
 80094ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	dd00      	ble.n	80094f6 <_svfprintf_r+0x132a>
 80094f4:	e638      	b.n	8009168 <_svfprintf_r+0xf9c>
 80094f6:	3408      	adds	r4, #8
 80094f8:	0027      	movs	r7, r4
 80094fa:	e595      	b.n	8009028 <_svfprintf_r+0xe5c>
 80094fc:	2710      	movs	r7, #16
 80094fe:	2d00      	cmp	r5, #0
 8009500:	ddeb      	ble.n	80094da <_svfprintf_r+0x130e>
 8009502:	0021      	movs	r1, r4
 8009504:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009506:	4850      	ldr	r0, [pc, #320]	; (8009648 <_svfprintf_r+0x147c>)
 8009508:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800950a:	3301      	adds	r3, #1
 800950c:	3108      	adds	r1, #8
 800950e:	6020      	str	r0, [r4, #0]
 8009510:	2d10      	cmp	r5, #16
 8009512:	dc07      	bgt.n	8009524 <_svfprintf_r+0x1358>
 8009514:	6065      	str	r5, [r4, #4]
 8009516:	000c      	movs	r4, r1
 8009518:	18ad      	adds	r5, r5, r2
 800951a:	952e      	str	r5, [sp, #184]	; 0xb8
 800951c:	932d      	str	r3, [sp, #180]	; 0xb4
 800951e:	2b07      	cmp	r3, #7
 8009520:	dddb      	ble.n	80094da <_svfprintf_r+0x130e>
 8009522:	e7d2      	b.n	80094ca <_svfprintf_r+0x12fe>
 8009524:	3210      	adds	r2, #16
 8009526:	6067      	str	r7, [r4, #4]
 8009528:	922e      	str	r2, [sp, #184]	; 0xb8
 800952a:	932d      	str	r3, [sp, #180]	; 0xb4
 800952c:	2b07      	cmp	r3, #7
 800952e:	dd07      	ble.n	8009540 <_svfprintf_r+0x1374>
 8009530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009532:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009534:	aa2c      	add	r2, sp, #176	; 0xb0
 8009536:	f001 fae3 	bl	800ab00 <__ssprint_r>
 800953a:	2800      	cmp	r0, #0
 800953c:	d125      	bne.n	800958a <_svfprintf_r+0x13be>
 800953e:	a92f      	add	r1, sp, #188	; 0xbc
 8009540:	000c      	movs	r4, r1
 8009542:	3d10      	subs	r5, #16
 8009544:	e7dd      	b.n	8009502 <_svfprintf_r+0x1336>
 8009546:	9808      	ldr	r0, [sp, #32]
 8009548:	912e      	str	r1, [sp, #184]	; 0xb8
 800954a:	c705      	stmia	r7!, {r0, r2}
 800954c:	932d      	str	r3, [sp, #180]	; 0xb4
 800954e:	e7e6      	b.n	800951e <_svfprintf_r+0x1352>
 8009550:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009552:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009554:	2510      	movs	r5, #16
 8009556:	1a9c      	subs	r4, r3, r2
 8009558:	2c00      	cmp	r4, #0
 800955a:	dc00      	bgt.n	800955e <_svfprintf_r+0x1392>
 800955c:	e567      	b.n	800902e <_svfprintf_r+0xe62>
 800955e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009560:	493a      	ldr	r1, [pc, #232]	; (800964c <_svfprintf_r+0x1480>)
 8009562:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009564:	3301      	adds	r3, #1
 8009566:	6039      	str	r1, [r7, #0]
 8009568:	2c10      	cmp	r4, #16
 800956a:	dc19      	bgt.n	80095a0 <_svfprintf_r+0x13d4>
 800956c:	607c      	str	r4, [r7, #4]
 800956e:	18a4      	adds	r4, r4, r2
 8009570:	942e      	str	r4, [sp, #184]	; 0xb8
 8009572:	932d      	str	r3, [sp, #180]	; 0xb4
 8009574:	2b07      	cmp	r3, #7
 8009576:	dc00      	bgt.n	800957a <_svfprintf_r+0x13ae>
 8009578:	e559      	b.n	800902e <_svfprintf_r+0xe62>
 800957a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800957c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800957e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009580:	f001 fabe 	bl	800ab00 <__ssprint_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	d100      	bne.n	800958a <_svfprintf_r+0x13be>
 8009588:	e551      	b.n	800902e <_svfprintf_r+0xe62>
 800958a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <_svfprintf_r+0x13c8>
 8009590:	f7ff f845 	bl	800861e <_svfprintf_r+0x452>
 8009594:	0019      	movs	r1, r3
 8009596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009598:	f7fe f9fc 	bl	8007994 <_free_r>
 800959c:	f7ff f83f 	bl	800861e <_svfprintf_r+0x452>
 80095a0:	3210      	adds	r2, #16
 80095a2:	607d      	str	r5, [r7, #4]
 80095a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80095a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80095a8:	3708      	adds	r7, #8
 80095aa:	2b07      	cmp	r3, #7
 80095ac:	dd07      	ble.n	80095be <_svfprintf_r+0x13f2>
 80095ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80095b4:	f001 faa4 	bl	800ab00 <__ssprint_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1e6      	bne.n	800958a <_svfprintf_r+0x13be>
 80095bc:	af2f      	add	r7, sp, #188	; 0xbc
 80095be:	3c10      	subs	r4, #16
 80095c0:	e7cd      	b.n	800955e <_svfprintf_r+0x1392>
 80095c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095c6:	f7fe f9e5 	bl	8007994 <_free_r>
 80095ca:	e549      	b.n	8009060 <_svfprintf_r+0xe94>
 80095cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <_svfprintf_r+0x140a>
 80095d2:	f7ff f824 	bl	800861e <_svfprintf_r+0x452>
 80095d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095da:	aa2c      	add	r2, sp, #176	; 0xb0
 80095dc:	f001 fa90 	bl	800ab00 <__ssprint_r>
 80095e0:	f7ff f81d 	bl	800861e <_svfprintf_r+0x452>
 80095e4:	0034      	movs	r4, r6
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d101      	bne.n	80095ee <_svfprintf_r+0x1422>
 80095ea:	f7fe ff8c 	bl	8008506 <_svfprintf_r+0x33a>
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <_svfprintf_r+0x142a>
 80095f2:	f7ff fc01 	bl	8008df8 <_svfprintf_r+0xc2c>
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d100      	bne.n	80095fc <_svfprintf_r+0x1430>
 80095fa:	e459      	b.n	8008eb0 <_svfprintf_r+0xce4>
 80095fc:	2507      	movs	r5, #7
 80095fe:	ab58      	add	r3, sp, #352	; 0x160
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	9a08      	ldr	r2, [sp, #32]
 8009604:	0013      	movs	r3, r2
 8009606:	3b01      	subs	r3, #1
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	9b06      	ldr	r3, [sp, #24]
 800960c:	9908      	ldr	r1, [sp, #32]
 800960e:	402b      	ands	r3, r5
 8009610:	3330      	adds	r3, #48	; 0x30
 8009612:	700b      	strb	r3, [r1, #0]
 8009614:	9907      	ldr	r1, [sp, #28]
 8009616:	074e      	lsls	r6, r1, #29
 8009618:	9906      	ldr	r1, [sp, #24]
 800961a:	08c8      	lsrs	r0, r1, #3
 800961c:	9907      	ldr	r1, [sp, #28]
 800961e:	4306      	orrs	r6, r0
 8009620:	08c9      	lsrs	r1, r1, #3
 8009622:	9107      	str	r1, [sp, #28]
 8009624:	0031      	movs	r1, r6
 8009626:	9807      	ldr	r0, [sp, #28]
 8009628:	9606      	str	r6, [sp, #24]
 800962a:	4301      	orrs	r1, r0
 800962c:	d1e9      	bne.n	8009602 <_svfprintf_r+0x1436>
 800962e:	07e1      	lsls	r1, r4, #31
 8009630:	d400      	bmi.n	8009634 <_svfprintf_r+0x1468>
 8009632:	e42a      	b.n	8008e8a <_svfprintf_r+0xcbe>
 8009634:	2b30      	cmp	r3, #48	; 0x30
 8009636:	d100      	bne.n	800963a <_svfprintf_r+0x146e>
 8009638:	e427      	b.n	8008e8a <_svfprintf_r+0xcbe>
 800963a:	2130      	movs	r1, #48	; 0x30
 800963c:	9b08      	ldr	r3, [sp, #32]
 800963e:	3b01      	subs	r3, #1
 8009640:	7019      	strb	r1, [r3, #0]
 8009642:	1e93      	subs	r3, r2, #2
 8009644:	9308      	str	r3, [sp, #32]
 8009646:	e420      	b.n	8008e8a <_svfprintf_r+0xcbe>
 8009648:	0800c2a0 	.word	0x0800c2a0
 800964c:	0800c290 	.word	0x0800c290

08009650 <_fclose_r>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	0005      	movs	r5, r0
 8009654:	1e0c      	subs	r4, r1, #0
 8009656:	d102      	bne.n	800965e <_fclose_r+0xe>
 8009658:	2600      	movs	r6, #0
 800965a:	0030      	movs	r0, r6
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	2800      	cmp	r0, #0
 8009660:	d004      	beq.n	800966c <_fclose_r+0x1c>
 8009662:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <_fclose_r+0x1c>
 8009668:	f7fd ffc6 	bl	80075f8 <__sinit>
 800966c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800966e:	07db      	lsls	r3, r3, #31
 8009670:	d405      	bmi.n	800967e <_fclose_r+0x2e>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	059b      	lsls	r3, r3, #22
 8009676:	d402      	bmi.n	800967e <_fclose_r+0x2e>
 8009678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967a:	f7fe f90d 	bl	8007898 <__retarget_lock_acquire_recursive>
 800967e:	220c      	movs	r2, #12
 8009680:	5ea3      	ldrsh	r3, [r4, r2]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <_fclose_r+0x4a>
 8009686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009688:	3301      	adds	r3, #1
 800968a:	0016      	movs	r6, r2
 800968c:	401e      	ands	r6, r3
 800968e:	421a      	tst	r2, r3
 8009690:	d1e2      	bne.n	8009658 <_fclose_r+0x8>
 8009692:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009694:	f7fe f901 	bl	800789a <__retarget_lock_release_recursive>
 8009698:	e7df      	b.n	800965a <_fclose_r+0xa>
 800969a:	0021      	movs	r1, r4
 800969c:	0028      	movs	r0, r5
 800969e:	f000 f837 	bl	8009710 <__sflush_r>
 80096a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096a4:	0006      	movs	r6, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <_fclose_r+0x68>
 80096aa:	0028      	movs	r0, r5
 80096ac:	69e1      	ldr	r1, [r4, #28]
 80096ae:	4798      	blx	r3
 80096b0:	2800      	cmp	r0, #0
 80096b2:	da01      	bge.n	80096b8 <_fclose_r+0x68>
 80096b4:	2601      	movs	r6, #1
 80096b6:	4276      	negs	r6, r6
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	d503      	bpl.n	80096c6 <_fclose_r+0x76>
 80096be:	0028      	movs	r0, r5
 80096c0:	6921      	ldr	r1, [r4, #16]
 80096c2:	f7fe f967 	bl	8007994 <_free_r>
 80096c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d008      	beq.n	80096de <_fclose_r+0x8e>
 80096cc:	0023      	movs	r3, r4
 80096ce:	3340      	adds	r3, #64	; 0x40
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <_fclose_r+0x8a>
 80096d4:	0028      	movs	r0, r5
 80096d6:	f7fe f95d 	bl	8007994 <_free_r>
 80096da:	2300      	movs	r3, #0
 80096dc:	6323      	str	r3, [r4, #48]	; 0x30
 80096de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80096e0:	2900      	cmp	r1, #0
 80096e2:	d004      	beq.n	80096ee <_fclose_r+0x9e>
 80096e4:	0028      	movs	r0, r5
 80096e6:	f7fe f955 	bl	8007994 <_free_r>
 80096ea:	2300      	movs	r3, #0
 80096ec:	6463      	str	r3, [r4, #68]	; 0x44
 80096ee:	f7fd ff73 	bl	80075d8 <__sfp_lock_acquire>
 80096f2:	2300      	movs	r3, #0
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096f8:	07db      	lsls	r3, r3, #31
 80096fa:	d402      	bmi.n	8009702 <_fclose_r+0xb2>
 80096fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096fe:	f7fe f8cc 	bl	800789a <__retarget_lock_release_recursive>
 8009702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009704:	f7fe f8c7 	bl	8007896 <__retarget_lock_close_recursive>
 8009708:	f7fd ff6e 	bl	80075e8 <__sfp_lock_release>
 800970c:	e7a5      	b.n	800965a <_fclose_r+0xa>
	...

08009710 <__sflush_r>:
 8009710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009712:	230c      	movs	r3, #12
 8009714:	5eca      	ldrsh	r2, [r1, r3]
 8009716:	000c      	movs	r4, r1
 8009718:	0005      	movs	r5, r0
 800971a:	b291      	uxth	r1, r2
 800971c:	0713      	lsls	r3, r2, #28
 800971e:	d464      	bmi.n	80097ea <__sflush_r+0xda>
 8009720:	2380      	movs	r3, #128	; 0x80
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	4313      	orrs	r3, r2
 8009726:	6862      	ldr	r2, [r4, #4]
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	2a00      	cmp	r2, #0
 800972c:	dc04      	bgt.n	8009738 <__sflush_r+0x28>
 800972e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009730:	2a00      	cmp	r2, #0
 8009732:	dc01      	bgt.n	8009738 <__sflush_r+0x28>
 8009734:	2000      	movs	r0, #0
 8009736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009738:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800973a:	2f00      	cmp	r7, #0
 800973c:	d0fa      	beq.n	8009734 <__sflush_r+0x24>
 800973e:	2200      	movs	r2, #0
 8009740:	2080      	movs	r0, #128	; 0x80
 8009742:	682e      	ldr	r6, [r5, #0]
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	001a      	movs	r2, r3
 8009748:	0140      	lsls	r0, r0, #5
 800974a:	69e1      	ldr	r1, [r4, #28]
 800974c:	4002      	ands	r2, r0
 800974e:	4203      	tst	r3, r0
 8009750:	d038      	beq.n	80097c4 <__sflush_r+0xb4>
 8009752:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	075b      	lsls	r3, r3, #29
 8009758:	d506      	bpl.n	8009768 <__sflush_r+0x58>
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <__sflush_r+0x58>
 8009764:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009766:	1ac0      	subs	r0, r0, r3
 8009768:	0002      	movs	r2, r0
 800976a:	2300      	movs	r3, #0
 800976c:	0028      	movs	r0, r5
 800976e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009770:	69e1      	ldr	r1, [r4, #28]
 8009772:	47b8      	blx	r7
 8009774:	89a2      	ldrh	r2, [r4, #12]
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d106      	bne.n	8009788 <__sflush_r+0x78>
 800977a:	6829      	ldr	r1, [r5, #0]
 800977c:	291d      	cmp	r1, #29
 800977e:	d830      	bhi.n	80097e2 <__sflush_r+0xd2>
 8009780:	4b2c      	ldr	r3, [pc, #176]	; (8009834 <__sflush_r+0x124>)
 8009782:	410b      	asrs	r3, r1
 8009784:	07db      	lsls	r3, r3, #31
 8009786:	d42c      	bmi.n	80097e2 <__sflush_r+0xd2>
 8009788:	4b2b      	ldr	r3, [pc, #172]	; (8009838 <__sflush_r+0x128>)
 800978a:	4013      	ands	r3, r2
 800978c:	2200      	movs	r2, #0
 800978e:	6062      	str	r2, [r4, #4]
 8009790:	6922      	ldr	r2, [r4, #16]
 8009792:	b21b      	sxth	r3, r3
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	04db      	lsls	r3, r3, #19
 800979a:	d505      	bpl.n	80097a8 <__sflush_r+0x98>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <__sflush_r+0x96>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d100      	bne.n	80097a8 <__sflush_r+0x98>
 80097a6:	6520      	str	r0, [r4, #80]	; 0x50
 80097a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80097aa:	602e      	str	r6, [r5, #0]
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d0c1      	beq.n	8009734 <__sflush_r+0x24>
 80097b0:	0023      	movs	r3, r4
 80097b2:	3340      	adds	r3, #64	; 0x40
 80097b4:	4299      	cmp	r1, r3
 80097b6:	d002      	beq.n	80097be <__sflush_r+0xae>
 80097b8:	0028      	movs	r0, r5
 80097ba:	f7fe f8eb 	bl	8007994 <_free_r>
 80097be:	2000      	movs	r0, #0
 80097c0:	6320      	str	r0, [r4, #48]	; 0x30
 80097c2:	e7b8      	b.n	8009736 <__sflush_r+0x26>
 80097c4:	2301      	movs	r3, #1
 80097c6:	0028      	movs	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d1c2      	bne.n	8009754 <__sflush_r+0x44>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0bf      	beq.n	8009754 <__sflush_r+0x44>
 80097d4:	2b1d      	cmp	r3, #29
 80097d6:	d001      	beq.n	80097dc <__sflush_r+0xcc>
 80097d8:	2b16      	cmp	r3, #22
 80097da:	d101      	bne.n	80097e0 <__sflush_r+0xd0>
 80097dc:	602e      	str	r6, [r5, #0]
 80097de:	e7a9      	b.n	8009734 <__sflush_r+0x24>
 80097e0:	89a2      	ldrh	r2, [r4, #12]
 80097e2:	2340      	movs	r3, #64	; 0x40
 80097e4:	4313      	orrs	r3, r2
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	e7a5      	b.n	8009736 <__sflush_r+0x26>
 80097ea:	6926      	ldr	r6, [r4, #16]
 80097ec:	2e00      	cmp	r6, #0
 80097ee:	d0a1      	beq.n	8009734 <__sflush_r+0x24>
 80097f0:	6827      	ldr	r7, [r4, #0]
 80097f2:	6026      	str	r6, [r4, #0]
 80097f4:	1bbb      	subs	r3, r7, r6
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	2300      	movs	r3, #0
 80097fa:	0789      	lsls	r1, r1, #30
 80097fc:	d100      	bne.n	8009800 <__sflush_r+0xf0>
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	60a3      	str	r3, [r4, #8]
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	dc00      	bgt.n	800980a <__sflush_r+0xfa>
 8009808:	e794      	b.n	8009734 <__sflush_r+0x24>
 800980a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800980c:	0032      	movs	r2, r6
 800980e:	001f      	movs	r7, r3
 8009810:	0028      	movs	r0, r5
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	69e1      	ldr	r1, [r4, #28]
 8009816:	47b8      	blx	r7
 8009818:	2800      	cmp	r0, #0
 800981a:	dc06      	bgt.n	800982a <__sflush_r+0x11a>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	2001      	movs	r0, #1
 8009820:	89a2      	ldrh	r2, [r4, #12]
 8009822:	4240      	negs	r0, r0
 8009824:	4313      	orrs	r3, r2
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	e785      	b.n	8009736 <__sflush_r+0x26>
 800982a:	9b01      	ldr	r3, [sp, #4]
 800982c:	1836      	adds	r6, r6, r0
 800982e:	1a1b      	subs	r3, r3, r0
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	e7e6      	b.n	8009802 <__sflush_r+0xf2>
 8009834:	dfbffffe 	.word	0xdfbffffe
 8009838:	fffff7ff 	.word	0xfffff7ff

0800983c <_fflush_r>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	0005      	movs	r5, r0
 8009840:	000c      	movs	r4, r1
 8009842:	2800      	cmp	r0, #0
 8009844:	d004      	beq.n	8009850 <_fflush_r+0x14>
 8009846:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <_fflush_r+0x14>
 800984c:	f7fd fed4 	bl	80075f8 <__sinit>
 8009850:	220c      	movs	r2, #12
 8009852:	5ea3      	ldrsh	r3, [r4, r2]
 8009854:	1e1e      	subs	r6, r3, #0
 8009856:	d015      	beq.n	8009884 <_fflush_r+0x48>
 8009858:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800985a:	07d2      	lsls	r2, r2, #31
 800985c:	d404      	bmi.n	8009868 <_fflush_r+0x2c>
 800985e:	059b      	lsls	r3, r3, #22
 8009860:	d402      	bmi.n	8009868 <_fflush_r+0x2c>
 8009862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009864:	f7fe f818 	bl	8007898 <__retarget_lock_acquire_recursive>
 8009868:	0021      	movs	r1, r4
 800986a:	0028      	movs	r0, r5
 800986c:	f7ff ff50 	bl	8009710 <__sflush_r>
 8009870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009872:	0006      	movs	r6, r0
 8009874:	07db      	lsls	r3, r3, #31
 8009876:	d405      	bmi.n	8009884 <_fflush_r+0x48>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	059b      	lsls	r3, r3, #22
 800987c:	d402      	bmi.n	8009884 <_fflush_r+0x48>
 800987e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009880:	f7fe f80b 	bl	800789a <__retarget_lock_release_recursive>
 8009884:	0030      	movs	r0, r6
 8009886:	bd70      	pop	{r4, r5, r6, pc}

08009888 <_localeconv_r>:
 8009888:	4800      	ldr	r0, [pc, #0]	; (800988c <_localeconv_r+0x4>)
 800988a:	4770      	bx	lr
 800988c:	2000051c 	.word	0x2000051c

08009890 <__libc_fini_array>:
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	4c07      	ldr	r4, [pc, #28]	; (80098b0 <__libc_fini_array+0x20>)
 8009894:	4d07      	ldr	r5, [pc, #28]	; (80098b4 <__libc_fini_array+0x24>)
 8009896:	1b64      	subs	r4, r4, r5
 8009898:	10a4      	asrs	r4, r4, #2
 800989a:	2c00      	cmp	r4, #0
 800989c:	d102      	bne.n	80098a4 <__libc_fini_array+0x14>
 800989e:	f002 fa89 	bl	800bdb4 <_fini>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	3c01      	subs	r4, #1
 80098a6:	00a3      	lsls	r3, r4, #2
 80098a8:	58eb      	ldr	r3, [r5, r3]
 80098aa:	4798      	blx	r3
 80098ac:	e7f5      	b.n	800989a <__libc_fini_array+0xa>
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	0800c388 	.word	0x0800c388
 80098b4:	0800c384 	.word	0x0800c384

080098b8 <memchr>:
 80098b8:	b2c9      	uxtb	r1, r1
 80098ba:	1882      	adds	r2, r0, r2
 80098bc:	4290      	cmp	r0, r2
 80098be:	d101      	bne.n	80098c4 <memchr+0xc>
 80098c0:	2000      	movs	r0, #0
 80098c2:	4770      	bx	lr
 80098c4:	7803      	ldrb	r3, [r0, #0]
 80098c6:	428b      	cmp	r3, r1
 80098c8:	d0fb      	beq.n	80098c2 <memchr+0xa>
 80098ca:	3001      	adds	r0, #1
 80098cc:	e7f6      	b.n	80098bc <memchr+0x4>
	...

080098d0 <frexp>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	0014      	movs	r4, r2
 80098d4:	2500      	movs	r5, #0
 80098d6:	6025      	str	r5, [r4, #0]
 80098d8:	4d10      	ldr	r5, [pc, #64]	; (800991c <frexp+0x4c>)
 80098da:	004b      	lsls	r3, r1, #1
 80098dc:	000a      	movs	r2, r1
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	42ab      	cmp	r3, r5
 80098e2:	dc1a      	bgt.n	800991a <frexp+0x4a>
 80098e4:	001d      	movs	r5, r3
 80098e6:	4305      	orrs	r5, r0
 80098e8:	d017      	beq.n	800991a <frexp+0x4a>
 80098ea:	4d0d      	ldr	r5, [pc, #52]	; (8009920 <frexp+0x50>)
 80098ec:	4229      	tst	r1, r5
 80098ee:	d109      	bne.n	8009904 <frexp+0x34>
 80098f0:	2200      	movs	r2, #0
 80098f2:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <frexp+0x54>)
 80098f4:	f7f7 fe1c 	bl	8001530 <__aeabi_dmul>
 80098f8:	2536      	movs	r5, #54	; 0x36
 80098fa:	000a      	movs	r2, r1
 80098fc:	004b      	lsls	r3, r1, #1
 80098fe:	426d      	negs	r5, r5
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	6025      	str	r5, [r4, #0]
 8009904:	4d08      	ldr	r5, [pc, #32]	; (8009928 <frexp+0x58>)
 8009906:	151b      	asrs	r3, r3, #20
 8009908:	195b      	adds	r3, r3, r5
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	18eb      	adds	r3, r5, r3
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <frexp+0x5c>)
 8009912:	401a      	ands	r2, r3
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <frexp+0x60>)
 8009916:	4313      	orrs	r3, r2
 8009918:	0019      	movs	r1, r3
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	7fefffff 	.word	0x7fefffff
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	43500000 	.word	0x43500000
 8009928:	fffffc02 	.word	0xfffffc02
 800992c:	800fffff 	.word	0x800fffff
 8009930:	3fe00000 	.word	0x3fe00000

08009934 <__register_exitproc>:
 8009934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009936:	4f1c      	ldr	r7, [pc, #112]	; (80099a8 <__register_exitproc+0x74>)
 8009938:	0004      	movs	r4, r0
 800993a:	6838      	ldr	r0, [r7, #0]
 800993c:	0016      	movs	r6, r2
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	9100      	str	r1, [sp, #0]
 8009942:	f7fd ffa9 	bl	8007898 <__retarget_lock_acquire_recursive>
 8009946:	4a19      	ldr	r2, [pc, #100]	; (80099ac <__register_exitproc+0x78>)
 8009948:	6813      	ldr	r3, [r2, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <__register_exitproc+0x1e>
 800994e:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <__register_exitproc+0x7c>)
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	6838      	ldr	r0, [r7, #0]
 8009956:	2a1f      	cmp	r2, #31
 8009958:	dd04      	ble.n	8009964 <__register_exitproc+0x30>
 800995a:	f7fd ff9e 	bl	800789a <__retarget_lock_release_recursive>
 800995e:	2001      	movs	r0, #1
 8009960:	4240      	negs	r0, r0
 8009962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009964:	2c00      	cmp	r4, #0
 8009966:	d014      	beq.n	8009992 <__register_exitproc+0x5e>
 8009968:	0091      	lsls	r1, r2, #2
 800996a:	1859      	adds	r1, r3, r1
 800996c:	000f      	movs	r7, r1
 800996e:	3788      	adds	r7, #136	; 0x88
 8009970:	603e      	str	r6, [r7, #0]
 8009972:	2701      	movs	r7, #1
 8009974:	001e      	movs	r6, r3
 8009976:	4097      	lsls	r7, r2
 8009978:	3685      	adds	r6, #133	; 0x85
 800997a:	36ff      	adds	r6, #255	; 0xff
 800997c:	6875      	ldr	r5, [r6, #4]
 800997e:	31fc      	adds	r1, #252	; 0xfc
 8009980:	433d      	orrs	r5, r7
 8009982:	6075      	str	r5, [r6, #4]
 8009984:	9d01      	ldr	r5, [sp, #4]
 8009986:	60cd      	str	r5, [r1, #12]
 8009988:	2c02      	cmp	r4, #2
 800998a:	d102      	bne.n	8009992 <__register_exitproc+0x5e>
 800998c:	68b1      	ldr	r1, [r6, #8]
 800998e:	4339      	orrs	r1, r7
 8009990:	60b1      	str	r1, [r6, #8]
 8009992:	1c51      	adds	r1, r2, #1
 8009994:	6059      	str	r1, [r3, #4]
 8009996:	3202      	adds	r2, #2
 8009998:	9900      	ldr	r1, [sp, #0]
 800999a:	0092      	lsls	r2, r2, #2
 800999c:	50d1      	str	r1, [r2, r3]
 800999e:	f7fd ff7c 	bl	800789a <__retarget_lock_release_recursive>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e7dd      	b.n	8009962 <__register_exitproc+0x2e>
 80099a6:	46c0      	nop			; (mov r8, r8)
 80099a8:	200006bc 	.word	0x200006bc
 80099ac:	20000bb4 	.word	0x20000bb4
 80099b0:	20000bb8 	.word	0x20000bb8

080099b4 <__assert_func>:
 80099b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099b6:	0014      	movs	r4, r2
 80099b8:	001a      	movs	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <__assert_func+0x2c>)
 80099bc:	0005      	movs	r5, r0
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	000e      	movs	r6, r1
 80099c2:	68d8      	ldr	r0, [r3, #12]
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <__assert_func+0x30>)
 80099c6:	2c00      	cmp	r4, #0
 80099c8:	d101      	bne.n	80099ce <__assert_func+0x1a>
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <__assert_func+0x34>)
 80099cc:	001c      	movs	r4, r3
 80099ce:	4907      	ldr	r1, [pc, #28]	; (80099ec <__assert_func+0x38>)
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	9402      	str	r4, [sp, #8]
 80099d4:	002b      	movs	r3, r5
 80099d6:	9600      	str	r6, [sp, #0]
 80099d8:	f001 f882 	bl	800aae0 <fiprintf>
 80099dc:	f002 f896 	bl	800bb0c <abort>
 80099e0:	200006b8 	.word	0x200006b8
 80099e4:	0800c2b0 	.word	0x0800c2b0
 80099e8:	0800c2eb 	.word	0x0800c2eb
 80099ec:	0800c2bd 	.word	0x0800c2bd

080099f0 <_calloc_r>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	2400      	movs	r4, #0
 80099f4:	0c0b      	lsrs	r3, r1, #16
 80099f6:	0c16      	lsrs	r6, r2, #16
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	d133      	bne.n	8009a64 <_calloc_r+0x74>
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	d121      	bne.n	8009a44 <_calloc_r+0x54>
 8009a00:	b28b      	uxth	r3, r1
 8009a02:	b291      	uxth	r1, r2
 8009a04:	4359      	muls	r1, r3
 8009a06:	f7fd fb43 	bl	8007090 <_malloc_r>
 8009a0a:	1e05      	subs	r5, r0, #0
 8009a0c:	d033      	beq.n	8009a76 <_calloc_r+0x86>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	3b08      	subs	r3, #8
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	2303      	movs	r3, #3
 8009a16:	439a      	bics	r2, r3
 8009a18:	3a04      	subs	r2, #4
 8009a1a:	2a24      	cmp	r2, #36	; 0x24
 8009a1c:	d832      	bhi.n	8009a84 <_calloc_r+0x94>
 8009a1e:	0003      	movs	r3, r0
 8009a20:	2a13      	cmp	r2, #19
 8009a22:	d90a      	bls.n	8009a3a <_calloc_r+0x4a>
 8009a24:	6004      	str	r4, [r0, #0]
 8009a26:	6044      	str	r4, [r0, #4]
 8009a28:	3308      	adds	r3, #8
 8009a2a:	2a1b      	cmp	r2, #27
 8009a2c:	d905      	bls.n	8009a3a <_calloc_r+0x4a>
 8009a2e:	6084      	str	r4, [r0, #8]
 8009a30:	60c4      	str	r4, [r0, #12]
 8009a32:	2a24      	cmp	r2, #36	; 0x24
 8009a34:	d021      	beq.n	8009a7a <_calloc_r+0x8a>
 8009a36:	0003      	movs	r3, r0
 8009a38:	3310      	adds	r3, #16
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	605a      	str	r2, [r3, #4]
 8009a40:	609a      	str	r2, [r3, #8]
 8009a42:	e018      	b.n	8009a76 <_calloc_r+0x86>
 8009a44:	1c33      	adds	r3, r6, #0
 8009a46:	1c0d      	adds	r5, r1, #0
 8009a48:	b289      	uxth	r1, r1
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	434a      	muls	r2, r1
 8009a4e:	b2ad      	uxth	r5, r5
 8009a50:	b299      	uxth	r1, r3
 8009a52:	4369      	muls	r1, r5
 8009a54:	0c13      	lsrs	r3, r2, #16
 8009a56:	18c9      	adds	r1, r1, r3
 8009a58:	0c0b      	lsrs	r3, r1, #16
 8009a5a:	d107      	bne.n	8009a6c <_calloc_r+0x7c>
 8009a5c:	0409      	lsls	r1, r1, #16
 8009a5e:	b292      	uxth	r2, r2
 8009a60:	4311      	orrs	r1, r2
 8009a62:	e7d0      	b.n	8009a06 <_calloc_r+0x16>
 8009a64:	2e00      	cmp	r6, #0
 8009a66:	d101      	bne.n	8009a6c <_calloc_r+0x7c>
 8009a68:	1c15      	adds	r5, r2, #0
 8009a6a:	e7ed      	b.n	8009a48 <_calloc_r+0x58>
 8009a6c:	f7fd fee8 	bl	8007840 <__errno>
 8009a70:	230c      	movs	r3, #12
 8009a72:	2500      	movs	r5, #0
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	0028      	movs	r0, r5
 8009a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7a:	0003      	movs	r3, r0
 8009a7c:	6104      	str	r4, [r0, #16]
 8009a7e:	3318      	adds	r3, #24
 8009a80:	6144      	str	r4, [r0, #20]
 8009a82:	e7da      	b.n	8009a3a <_calloc_r+0x4a>
 8009a84:	2100      	movs	r1, #0
 8009a86:	f7fd fe57 	bl	8007738 <memset>
 8009a8a:	e7f4      	b.n	8009a76 <_calloc_r+0x86>

08009a8c <quorem>:
 8009a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8e:	6902      	ldr	r2, [r0, #16]
 8009a90:	690b      	ldr	r3, [r1, #16]
 8009a92:	b089      	sub	sp, #36	; 0x24
 8009a94:	0007      	movs	r7, r0
 8009a96:	9104      	str	r1, [sp, #16]
 8009a98:	2000      	movs	r0, #0
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	db69      	blt.n	8009b72 <quorem+0xe6>
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	009c      	lsls	r4, r3, #2
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	000b      	movs	r3, r1
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	9306      	str	r3, [sp, #24]
 8009aaa:	191b      	adds	r3, r3, r4
 8009aac:	9305      	str	r3, [sp, #20]
 8009aae:	003b      	movs	r3, r7
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	191c      	adds	r4, r3, r4
 8009ab6:	9b05      	ldr	r3, [sp, #20]
 8009ab8:	6826      	ldr	r6, [r4, #0]
 8009aba:	681d      	ldr	r5, [r3, #0]
 8009abc:	0030      	movs	r0, r6
 8009abe:	3501      	adds	r5, #1
 8009ac0:	0029      	movs	r1, r5
 8009ac2:	f7f6 fb3b 	bl	800013c <__udivsi3>
 8009ac6:	9002      	str	r0, [sp, #8]
 8009ac8:	42ae      	cmp	r6, r5
 8009aca:	d329      	bcc.n	8009b20 <quorem+0x94>
 8009acc:	9b06      	ldr	r3, [sp, #24]
 8009ace:	2600      	movs	r6, #0
 8009ad0:	469c      	mov	ip, r3
 8009ad2:	9d03      	ldr	r5, [sp, #12]
 8009ad4:	9606      	str	r6, [sp, #24]
 8009ad6:	4662      	mov	r2, ip
 8009ad8:	ca08      	ldmia	r2!, {r3}
 8009ada:	6828      	ldr	r0, [r5, #0]
 8009adc:	4694      	mov	ip, r2
 8009ade:	9a02      	ldr	r2, [sp, #8]
 8009ae0:	b299      	uxth	r1, r3
 8009ae2:	4351      	muls	r1, r2
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	4353      	muls	r3, r2
 8009ae8:	1989      	adds	r1, r1, r6
 8009aea:	0c0a      	lsrs	r2, r1, #16
 8009aec:	189b      	adds	r3, r3, r2
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	0c1e      	lsrs	r6, r3, #16
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	b282      	uxth	r2, r0
 8009af6:	18d2      	adds	r2, r2, r3
 8009af8:	466b      	mov	r3, sp
 8009afa:	b289      	uxth	r1, r1
 8009afc:	8b9b      	ldrh	r3, [r3, #28]
 8009afe:	1a52      	subs	r2, r2, r1
 8009b00:	0c01      	lsrs	r1, r0, #16
 8009b02:	1ac9      	subs	r1, r1, r3
 8009b04:	1413      	asrs	r3, r2, #16
 8009b06:	18cb      	adds	r3, r1, r3
 8009b08:	1419      	asrs	r1, r3, #16
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	041b      	lsls	r3, r3, #16
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	c508      	stmia	r5!, {r3}
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	9106      	str	r1, [sp, #24]
 8009b16:	4563      	cmp	r3, ip
 8009b18:	d2dd      	bcs.n	8009ad6 <quorem+0x4a>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d030      	beq.n	8009b82 <quorem+0xf6>
 8009b20:	0038      	movs	r0, r7
 8009b22:	9904      	ldr	r1, [sp, #16]
 8009b24:	f7fe fa30 	bl	8007f88 <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	db21      	blt.n	8009b70 <quorem+0xe4>
 8009b2c:	0038      	movs	r0, r7
 8009b2e:	2600      	movs	r6, #0
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	9c04      	ldr	r4, [sp, #16]
 8009b34:	3301      	adds	r3, #1
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	3014      	adds	r0, #20
 8009b3a:	3414      	adds	r4, #20
 8009b3c:	6803      	ldr	r3, [r0, #0]
 8009b3e:	cc02      	ldmia	r4!, {r1}
 8009b40:	b29d      	uxth	r5, r3
 8009b42:	19ad      	adds	r5, r5, r6
 8009b44:	b28a      	uxth	r2, r1
 8009b46:	1aaa      	subs	r2, r5, r2
 8009b48:	0c09      	lsrs	r1, r1, #16
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	1a5b      	subs	r3, r3, r1
 8009b4e:	1411      	asrs	r1, r2, #16
 8009b50:	185b      	adds	r3, r3, r1
 8009b52:	141e      	asrs	r6, r3, #16
 8009b54:	b292      	uxth	r2, r2
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	c008      	stmia	r0!, {r3}
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	d2ec      	bcs.n	8009b3c <quorem+0xb0>
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	9a03      	ldr	r2, [sp, #12]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	18d3      	adds	r3, r2, r3
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	d015      	beq.n	8009b9c <quorem+0x110>
 8009b70:	9802      	ldr	r0, [sp, #8]
 8009b72:	b009      	add	sp, #36	; 0x24
 8009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <quorem+0xfe>
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	3c04      	subs	r4, #4
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	d3f5      	bcc.n	8009b76 <quorem+0xea>
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	e7c7      	b.n	8009b20 <quorem+0x94>
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	d106      	bne.n	8009ba4 <quorem+0x118>
 8009b96:	9a01      	ldr	r2, [sp, #4]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	9a03      	ldr	r2, [sp, #12]
 8009b9e:	3b04      	subs	r3, #4
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d3f5      	bcc.n	8009b90 <quorem+0x104>
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	e7e2      	b.n	8009b70 <quorem+0xe4>
	...

08009bac <_dtoa_r>:
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	0014      	movs	r4, r2
 8009bb0:	001d      	movs	r5, r3
 8009bb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009bb4:	b09d      	sub	sp, #116	; 0x74
 8009bb6:	9408      	str	r4, [sp, #32]
 8009bb8:	9509      	str	r5, [sp, #36]	; 0x24
 8009bba:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009bbc:	9004      	str	r0, [sp, #16]
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d009      	beq.n	8009bd6 <_dtoa_r+0x2a>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009bc6:	4093      	lsls	r3, r2
 8009bc8:	604a      	str	r2, [r1, #4]
 8009bca:	608b      	str	r3, [r1, #8]
 8009bcc:	f7fd ffce 	bl	8007b6c <_Bfree>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9a04      	ldr	r2, [sp, #16]
 8009bd4:	6393      	str	r3, [r2, #56]	; 0x38
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	da1e      	bge.n	8009c18 <_dtoa_r+0x6c>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	006b      	lsls	r3, r5, #1
 8009be0:	085b      	lsrs	r3, r3, #1
 8009be2:	9309      	str	r3, [sp, #36]	; 0x24
 8009be4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009be6:	4bb5      	ldr	r3, [pc, #724]	; (8009ebc <_dtoa_r+0x310>)
 8009be8:	4ab4      	ldr	r2, [pc, #720]	; (8009ebc <_dtoa_r+0x310>)
 8009bea:	403b      	ands	r3, r7
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d116      	bne.n	8009c1e <_dtoa_r+0x72>
 8009bf0:	4bb3      	ldr	r3, [pc, #716]	; (8009ec0 <_dtoa_r+0x314>)
 8009bf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	033b      	lsls	r3, r7, #12
 8009bf8:	0b1b      	lsrs	r3, r3, #12
 8009bfa:	4323      	orrs	r3, r4
 8009bfc:	d101      	bne.n	8009c02 <_dtoa_r+0x56>
 8009bfe:	f000 fdb2 	bl	800a766 <_dtoa_r+0xbba>
 8009c02:	4bb0      	ldr	r3, [pc, #704]	; (8009ec4 <_dtoa_r+0x318>)
 8009c04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c06:	9306      	str	r3, [sp, #24]
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d002      	beq.n	8009c12 <_dtoa_r+0x66>
 8009c0c:	4bae      	ldr	r3, [pc, #696]	; (8009ec8 <_dtoa_r+0x31c>)
 8009c0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	9806      	ldr	r0, [sp, #24]
 8009c14:	b01d      	add	sp, #116	; 0x74
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c18:	2300      	movs	r3, #0
 8009c1a:	6033      	str	r3, [r6, #0]
 8009c1c:	e7e2      	b.n	8009be4 <_dtoa_r+0x38>
 8009c1e:	9a08      	ldr	r2, [sp, #32]
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c22:	9210      	str	r2, [sp, #64]	; 0x40
 8009c24:	9311      	str	r3, [sp, #68]	; 0x44
 8009c26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f7f6 fc0b 	bl	8000448 <__aeabi_dcmpeq>
 8009c32:	1e06      	subs	r6, r0, #0
 8009c34:	d009      	beq.n	8009c4a <_dtoa_r+0x9e>
 8009c36:	2301      	movs	r3, #1
 8009c38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	4ba3      	ldr	r3, [pc, #652]	; (8009ecc <_dtoa_r+0x320>)
 8009c3e:	9306      	str	r3, [sp, #24]
 8009c40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0e5      	beq.n	8009c12 <_dtoa_r+0x66>
 8009c46:	4ba2      	ldr	r3, [pc, #648]	; (8009ed0 <_dtoa_r+0x324>)
 8009c48:	e7e1      	b.n	8009c0e <_dtoa_r+0x62>
 8009c4a:	ab1a      	add	r3, sp, #104	; 0x68
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	9804      	ldr	r0, [sp, #16]
 8009c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c58:	f7fe fa4a 	bl	80080f0 <__d2b>
 8009c5c:	007a      	lsls	r2, r7, #1
 8009c5e:	9005      	str	r0, [sp, #20]
 8009c60:	0d52      	lsrs	r2, r2, #21
 8009c62:	d100      	bne.n	8009c66 <_dtoa_r+0xba>
 8009c64:	e07b      	b.n	8009d5e <_dtoa_r+0x1b2>
 8009c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c68:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c6a:	0319      	lsls	r1, r3, #12
 8009c6c:	4b99      	ldr	r3, [pc, #612]	; (8009ed4 <_dtoa_r+0x328>)
 8009c6e:	0b09      	lsrs	r1, r1, #12
 8009c70:	430b      	orrs	r3, r1
 8009c72:	4999      	ldr	r1, [pc, #612]	; (8009ed8 <_dtoa_r+0x32c>)
 8009c74:	1857      	adds	r7, r2, r1
 8009c76:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c78:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c7a:	0019      	movs	r1, r3
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	4b97      	ldr	r3, [pc, #604]	; (8009edc <_dtoa_r+0x330>)
 8009c80:	f7f7 ff18 	bl	8001ab4 <__aeabi_dsub>
 8009c84:	4a96      	ldr	r2, [pc, #600]	; (8009ee0 <_dtoa_r+0x334>)
 8009c86:	4b97      	ldr	r3, [pc, #604]	; (8009ee4 <_dtoa_r+0x338>)
 8009c88:	f7f7 fc52 	bl	8001530 <__aeabi_dmul>
 8009c8c:	4a96      	ldr	r2, [pc, #600]	; (8009ee8 <_dtoa_r+0x33c>)
 8009c8e:	4b97      	ldr	r3, [pc, #604]	; (8009eec <_dtoa_r+0x340>)
 8009c90:	f7f6 fcf4 	bl	800067c <__aeabi_dadd>
 8009c94:	0004      	movs	r4, r0
 8009c96:	0038      	movs	r0, r7
 8009c98:	000d      	movs	r5, r1
 8009c9a:	f7f8 fae1 	bl	8002260 <__aeabi_i2d>
 8009c9e:	4a94      	ldr	r2, [pc, #592]	; (8009ef0 <_dtoa_r+0x344>)
 8009ca0:	4b94      	ldr	r3, [pc, #592]	; (8009ef4 <_dtoa_r+0x348>)
 8009ca2:	f7f7 fc45 	bl	8001530 <__aeabi_dmul>
 8009ca6:	0002      	movs	r2, r0
 8009ca8:	000b      	movs	r3, r1
 8009caa:	0020      	movs	r0, r4
 8009cac:	0029      	movs	r1, r5
 8009cae:	f7f6 fce5 	bl	800067c <__aeabi_dadd>
 8009cb2:	0004      	movs	r4, r0
 8009cb4:	000d      	movs	r5, r1
 8009cb6:	f7f8 fa9d 	bl	80021f4 <__aeabi_d2iz>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	9003      	str	r0, [sp, #12]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	0020      	movs	r0, r4
 8009cc2:	0029      	movs	r1, r5
 8009cc4:	f7f6 fbc6 	bl	8000454 <__aeabi_dcmplt>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d00b      	beq.n	8009ce4 <_dtoa_r+0x138>
 8009ccc:	9803      	ldr	r0, [sp, #12]
 8009cce:	f7f8 fac7 	bl	8002260 <__aeabi_i2d>
 8009cd2:	002b      	movs	r3, r5
 8009cd4:	0022      	movs	r2, r4
 8009cd6:	f7f6 fbb7 	bl	8000448 <__aeabi_dcmpeq>
 8009cda:	4243      	negs	r3, r0
 8009cdc:	4158      	adcs	r0, r3
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	1a1b      	subs	r3, r3, r0
 8009ce2:	9303      	str	r3, [sp, #12]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	9316      	str	r3, [sp, #88]	; 0x58
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	2b16      	cmp	r3, #22
 8009cec:	d810      	bhi.n	8009d10 <_dtoa_r+0x164>
 8009cee:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009cf0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cf2:	9a03      	ldr	r2, [sp, #12]
 8009cf4:	4b80      	ldr	r3, [pc, #512]	; (8009ef8 <_dtoa_r+0x34c>)
 8009cf6:	00d2      	lsls	r2, r2, #3
 8009cf8:	189b      	adds	r3, r3, r2
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f7f6 fba9 	bl	8000454 <__aeabi_dcmplt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d047      	beq.n	8009d96 <_dtoa_r+0x1ea>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9316      	str	r3, [sp, #88]	; 0x58
 8009d10:	2200      	movs	r2, #0
 8009d12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d14:	920a      	str	r2, [sp, #40]	; 0x28
 8009d16:	1bdb      	subs	r3, r3, r7
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	d53e      	bpl.n	8009d9a <_dtoa_r+0x1ee>
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	930a      	str	r3, [sp, #40]	; 0x28
 8009d22:	2300      	movs	r3, #0
 8009d24:	930c      	str	r3, [sp, #48]	; 0x30
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	db38      	blt.n	8009d9e <_dtoa_r+0x1f2>
 8009d2c:	9a03      	ldr	r2, [sp, #12]
 8009d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d30:	4694      	mov	ip, r2
 8009d32:	4463      	add	r3, ip
 8009d34:	930c      	str	r3, [sp, #48]	; 0x30
 8009d36:	2300      	movs	r3, #0
 8009d38:	9213      	str	r2, [sp, #76]	; 0x4c
 8009d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d3e:	2401      	movs	r4, #1
 8009d40:	2b09      	cmp	r3, #9
 8009d42:	d867      	bhi.n	8009e14 <_dtoa_r+0x268>
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	dd02      	ble.n	8009d4e <_dtoa_r+0x1a2>
 8009d48:	2400      	movs	r4, #0
 8009d4a:	3b04      	subs	r3, #4
 8009d4c:	9322      	str	r3, [sp, #136]	; 0x88
 8009d4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d50:	1e98      	subs	r0, r3, #2
 8009d52:	2803      	cmp	r0, #3
 8009d54:	d867      	bhi.n	8009e26 <_dtoa_r+0x27a>
 8009d56:	f7f6 f9dd 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009d5a:	3a2b      	.short	0x3a2b
 8009d5c:	5b38      	.short	0x5b38
 8009d5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009d62:	18f6      	adds	r6, r6, r3
 8009d64:	4b65      	ldr	r3, [pc, #404]	; (8009efc <_dtoa_r+0x350>)
 8009d66:	18f2      	adds	r2, r6, r3
 8009d68:	2a20      	cmp	r2, #32
 8009d6a:	dd0f      	ble.n	8009d8c <_dtoa_r+0x1e0>
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	409f      	lsls	r7, r3
 8009d72:	4b63      	ldr	r3, [pc, #396]	; (8009f00 <_dtoa_r+0x354>)
 8009d74:	0038      	movs	r0, r7
 8009d76:	18f3      	adds	r3, r6, r3
 8009d78:	40dc      	lsrs	r4, r3
 8009d7a:	4320      	orrs	r0, r4
 8009d7c:	f7f8 faa0 	bl	80022c0 <__aeabi_ui2d>
 8009d80:	2201      	movs	r2, #1
 8009d82:	4b60      	ldr	r3, [pc, #384]	; (8009f04 <_dtoa_r+0x358>)
 8009d84:	1e77      	subs	r7, r6, #1
 8009d86:	18cb      	adds	r3, r1, r3
 8009d88:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d8a:	e776      	b.n	8009c7a <_dtoa_r+0xce>
 8009d8c:	2320      	movs	r3, #32
 8009d8e:	0020      	movs	r0, r4
 8009d90:	1a9b      	subs	r3, r3, r2
 8009d92:	4098      	lsls	r0, r3
 8009d94:	e7f2      	b.n	8009d7c <_dtoa_r+0x1d0>
 8009d96:	9016      	str	r0, [sp, #88]	; 0x58
 8009d98:	e7ba      	b.n	8009d10 <_dtoa_r+0x164>
 8009d9a:	920c      	str	r2, [sp, #48]	; 0x30
 8009d9c:	e7c3      	b.n	8009d26 <_dtoa_r+0x17a>
 8009d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da0:	9a03      	ldr	r2, [sp, #12]
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	930a      	str	r3, [sp, #40]	; 0x28
 8009da6:	4253      	negs	r3, r2
 8009da8:	930d      	str	r3, [sp, #52]	; 0x34
 8009daa:	2300      	movs	r3, #0
 8009dac:	9313      	str	r3, [sp, #76]	; 0x4c
 8009dae:	e7c5      	b.n	8009d3c <_dtoa_r+0x190>
 8009db0:	2300      	movs	r3, #0
 8009db2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dc13      	bgt.n	8009de6 <_dtoa_r+0x23a>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	001a      	movs	r2, r3
 8009dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc4:	9307      	str	r3, [sp, #28]
 8009dc6:	9223      	str	r2, [sp, #140]	; 0x8c
 8009dc8:	e00d      	b.n	8009de6 <_dtoa_r+0x23a>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e7f1      	b.n	8009db2 <_dtoa_r+0x206>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009dd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd4:	4694      	mov	ip, r2
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	4463      	add	r3, ip
 8009dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ddc:	3301      	adds	r3, #1
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc00      	bgt.n	8009de6 <_dtoa_r+0x23a>
 8009de4:	2301      	movs	r3, #1
 8009de6:	2100      	movs	r1, #0
 8009de8:	2204      	movs	r2, #4
 8009dea:	0010      	movs	r0, r2
 8009dec:	3014      	adds	r0, #20
 8009dee:	4298      	cmp	r0, r3
 8009df0:	d91d      	bls.n	8009e2e <_dtoa_r+0x282>
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	0018      	movs	r0, r3
 8009df6:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009df8:	f7fd fe90 	bl	8007b1c <_Balloc>
 8009dfc:	9006      	str	r0, [sp, #24]
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d118      	bne.n	8009e34 <_dtoa_r+0x288>
 8009e02:	21b0      	movs	r1, #176	; 0xb0
 8009e04:	4b40      	ldr	r3, [pc, #256]	; (8009f08 <_dtoa_r+0x35c>)
 8009e06:	4841      	ldr	r0, [pc, #260]	; (8009f0c <_dtoa_r+0x360>)
 8009e08:	9a06      	ldr	r2, [sp, #24]
 8009e0a:	31ff      	adds	r1, #255	; 0xff
 8009e0c:	f7ff fdd2 	bl	80099b4 <__assert_func>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e7dd      	b.n	8009dd0 <_dtoa_r+0x224>
 8009e14:	2300      	movs	r3, #0
 8009e16:	940f      	str	r4, [sp, #60]	; 0x3c
 8009e18:	9322      	str	r3, [sp, #136]	; 0x88
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e1e:	9307      	str	r3, [sp, #28]
 8009e20:	2200      	movs	r2, #0
 8009e22:	3313      	adds	r3, #19
 8009e24:	e7cf      	b.n	8009dc6 <_dtoa_r+0x21a>
 8009e26:	2301      	movs	r3, #1
 8009e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e2a:	3b02      	subs	r3, #2
 8009e2c:	e7f6      	b.n	8009e1c <_dtoa_r+0x270>
 8009e2e:	3101      	adds	r1, #1
 8009e30:	0052      	lsls	r2, r2, #1
 8009e32:	e7da      	b.n	8009dea <_dtoa_r+0x23e>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	9a06      	ldr	r2, [sp, #24]
 8009e38:	639a      	str	r2, [r3, #56]	; 0x38
 8009e3a:	9b07      	ldr	r3, [sp, #28]
 8009e3c:	2b0e      	cmp	r3, #14
 8009e3e:	d900      	bls.n	8009e42 <_dtoa_r+0x296>
 8009e40:	e0e3      	b.n	800a00a <_dtoa_r+0x45e>
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d100      	bne.n	8009e48 <_dtoa_r+0x29c>
 8009e46:	e0e0      	b.n	800a00a <_dtoa_r+0x45e>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	dd62      	ble.n	8009f14 <_dtoa_r+0x368>
 8009e4e:	210f      	movs	r1, #15
 8009e50:	9a03      	ldr	r2, [sp, #12]
 8009e52:	4b29      	ldr	r3, [pc, #164]	; (8009ef8 <_dtoa_r+0x34c>)
 8009e54:	400a      	ands	r2, r1
 8009e56:	00d2      	lsls	r2, r2, #3
 8009e58:	189b      	adds	r3, r3, r2
 8009e5a:	681e      	ldr	r6, [r3, #0]
 8009e5c:	685f      	ldr	r7, [r3, #4]
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	2402      	movs	r4, #2
 8009e62:	111d      	asrs	r5, r3, #4
 8009e64:	05db      	lsls	r3, r3, #23
 8009e66:	d50a      	bpl.n	8009e7e <_dtoa_r+0x2d2>
 8009e68:	4b29      	ldr	r3, [pc, #164]	; (8009f10 <_dtoa_r+0x364>)
 8009e6a:	400d      	ands	r5, r1
 8009e6c:	6a1a      	ldr	r2, [r3, #32]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e74:	f7f6 ff62 	bl	8000d3c <__aeabi_ddiv>
 8009e78:	9008      	str	r0, [sp, #32]
 8009e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8009e7c:	3401      	adds	r4, #1
 8009e7e:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <_dtoa_r+0x364>)
 8009e80:	930e      	str	r3, [sp, #56]	; 0x38
 8009e82:	2d00      	cmp	r5, #0
 8009e84:	d108      	bne.n	8009e98 <_dtoa_r+0x2ec>
 8009e86:	9808      	ldr	r0, [sp, #32]
 8009e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8a:	0032      	movs	r2, r6
 8009e8c:	003b      	movs	r3, r7
 8009e8e:	f7f6 ff55 	bl	8000d3c <__aeabi_ddiv>
 8009e92:	9008      	str	r0, [sp, #32]
 8009e94:	9109      	str	r1, [sp, #36]	; 0x24
 8009e96:	e058      	b.n	8009f4a <_dtoa_r+0x39e>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	421d      	tst	r5, r3
 8009e9c:	d009      	beq.n	8009eb2 <_dtoa_r+0x306>
 8009e9e:	18e4      	adds	r4, r4, r3
 8009ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ea2:	0030      	movs	r0, r6
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	0039      	movs	r1, r7
 8009eaa:	f7f7 fb41 	bl	8001530 <__aeabi_dmul>
 8009eae:	0006      	movs	r6, r0
 8009eb0:	000f      	movs	r7, r1
 8009eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eb4:	106d      	asrs	r5, r5, #1
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	e7e2      	b.n	8009e80 <_dtoa_r+0x2d4>
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	7ff00000 	.word	0x7ff00000
 8009ec0:	0000270f 	.word	0x0000270f
 8009ec4:	0800c2f5 	.word	0x0800c2f5
 8009ec8:	0800c2f8 	.word	0x0800c2f8
 8009ecc:	0800c28e 	.word	0x0800c28e
 8009ed0:	0800c28f 	.word	0x0800c28f
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	fffffc01 	.word	0xfffffc01
 8009edc:	3ff80000 	.word	0x3ff80000
 8009ee0:	636f4361 	.word	0x636f4361
 8009ee4:	3fd287a7 	.word	0x3fd287a7
 8009ee8:	8b60c8b3 	.word	0x8b60c8b3
 8009eec:	3fc68a28 	.word	0x3fc68a28
 8009ef0:	509f79fb 	.word	0x509f79fb
 8009ef4:	3fd34413 	.word	0x3fd34413
 8009ef8:	0800c188 	.word	0x0800c188
 8009efc:	00000432 	.word	0x00000432
 8009f00:	00000412 	.word	0x00000412
 8009f04:	fe100000 	.word	0xfe100000
 8009f08:	0800c0ef 	.word	0x0800c0ef
 8009f0c:	0800c2f9 	.word	0x0800c2f9
 8009f10:	0800c160 	.word	0x0800c160
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	2402      	movs	r4, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d016      	beq.n	8009f4a <_dtoa_r+0x39e>
 8009f1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f20:	220f      	movs	r2, #15
 8009f22:	425d      	negs	r5, r3
 8009f24:	402a      	ands	r2, r5
 8009f26:	4bdd      	ldr	r3, [pc, #884]	; (800a29c <_dtoa_r+0x6f0>)
 8009f28:	00d2      	lsls	r2, r2, #3
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f7f7 fafe 	bl	8001530 <__aeabi_dmul>
 8009f34:	2701      	movs	r7, #1
 8009f36:	2300      	movs	r3, #0
 8009f38:	9008      	str	r0, [sp, #32]
 8009f3a:	9109      	str	r1, [sp, #36]	; 0x24
 8009f3c:	4ed8      	ldr	r6, [pc, #864]	; (800a2a0 <_dtoa_r+0x6f4>)
 8009f3e:	112d      	asrs	r5, r5, #4
 8009f40:	2d00      	cmp	r5, #0
 8009f42:	d000      	beq.n	8009f46 <_dtoa_r+0x39a>
 8009f44:	e091      	b.n	800a06a <_dtoa_r+0x4be>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1a3      	bne.n	8009e92 <_dtoa_r+0x2e6>
 8009f4a:	9e08      	ldr	r6, [sp, #32]
 8009f4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d100      	bne.n	8009f56 <_dtoa_r+0x3aa>
 8009f54:	e094      	b.n	800a080 <_dtoa_r+0x4d4>
 8009f56:	2200      	movs	r2, #0
 8009f58:	0030      	movs	r0, r6
 8009f5a:	0039      	movs	r1, r7
 8009f5c:	4bd1      	ldr	r3, [pc, #836]	; (800a2a4 <_dtoa_r+0x6f8>)
 8009f5e:	f7f6 fa79 	bl	8000454 <__aeabi_dcmplt>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d100      	bne.n	8009f68 <_dtoa_r+0x3bc>
 8009f66:	e08b      	b.n	800a080 <_dtoa_r+0x4d4>
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d100      	bne.n	8009f70 <_dtoa_r+0x3c4>
 8009f6e:	e087      	b.n	800a080 <_dtoa_r+0x4d4>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	dd45      	ble.n	800a002 <_dtoa_r+0x456>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f7e:	0030      	movs	r0, r6
 8009f80:	4bc9      	ldr	r3, [pc, #804]	; (800a2a8 <_dtoa_r+0x6fc>)
 8009f82:	0039      	movs	r1, r7
 8009f84:	f7f7 fad4 	bl	8001530 <__aeabi_dmul>
 8009f88:	9008      	str	r0, [sp, #32]
 8009f8a:	9109      	str	r1, [sp, #36]	; 0x24
 8009f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f8e:	3401      	adds	r4, #1
 8009f90:	0020      	movs	r0, r4
 8009f92:	9e08      	ldr	r6, [sp, #32]
 8009f94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f96:	9312      	str	r3, [sp, #72]	; 0x48
 8009f98:	f7f8 f962 	bl	8002260 <__aeabi_i2d>
 8009f9c:	0032      	movs	r2, r6
 8009f9e:	003b      	movs	r3, r7
 8009fa0:	f7f7 fac6 	bl	8001530 <__aeabi_dmul>
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	4bc1      	ldr	r3, [pc, #772]	; (800a2ac <_dtoa_r+0x700>)
 8009fa8:	f7f6 fb68 	bl	800067c <__aeabi_dadd>
 8009fac:	4ac0      	ldr	r2, [pc, #768]	; (800a2b0 <_dtoa_r+0x704>)
 8009fae:	9014      	str	r0, [sp, #80]	; 0x50
 8009fb0:	9115      	str	r1, [sp, #84]	; 0x54
 8009fb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009fb6:	4694      	mov	ip, r2
 8009fb8:	9308      	str	r3, [sp, #32]
 8009fba:	9409      	str	r4, [sp, #36]	; 0x24
 8009fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fbe:	4463      	add	r3, ip
 8009fc0:	9318      	str	r3, [sp, #96]	; 0x60
 8009fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d15e      	bne.n	800a088 <_dtoa_r+0x4dc>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4bb9      	ldr	r3, [pc, #740]	; (800a2b4 <_dtoa_r+0x708>)
 8009fce:	0030      	movs	r0, r6
 8009fd0:	0039      	movs	r1, r7
 8009fd2:	f7f7 fd6f 	bl	8001ab4 <__aeabi_dsub>
 8009fd6:	9a08      	ldr	r2, [sp, #32]
 8009fd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009fda:	0004      	movs	r4, r0
 8009fdc:	000d      	movs	r5, r1
 8009fde:	f7f6 fa4d 	bl	800047c <__aeabi_dcmpgt>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d000      	beq.n	8009fe8 <_dtoa_r+0x43c>
 8009fe6:	e2b3      	b.n	800a550 <_dtoa_r+0x9a4>
 8009fe8:	48b3      	ldr	r0, [pc, #716]	; (800a2b8 <_dtoa_r+0x70c>)
 8009fea:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009fec:	4684      	mov	ip, r0
 8009fee:	4461      	add	r1, ip
 8009ff0:	000b      	movs	r3, r1
 8009ff2:	0020      	movs	r0, r4
 8009ff4:	0029      	movs	r1, r5
 8009ff6:	9a08      	ldr	r2, [sp, #32]
 8009ff8:	f7f6 fa2c 	bl	8000454 <__aeabi_dcmplt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d000      	beq.n	800a002 <_dtoa_r+0x456>
 800a000:	e2a3      	b.n	800a54a <_dtoa_r+0x99e>
 800a002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a004:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a006:	9308      	str	r3, [sp, #32]
 800a008:	9409      	str	r4, [sp, #36]	; 0x24
 800a00a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da00      	bge.n	800a012 <_dtoa_r+0x466>
 800a010:	e179      	b.n	800a306 <_dtoa_r+0x75a>
 800a012:	9a03      	ldr	r2, [sp, #12]
 800a014:	2a0e      	cmp	r2, #14
 800a016:	dd00      	ble.n	800a01a <_dtoa_r+0x46e>
 800a018:	e175      	b.n	800a306 <_dtoa_r+0x75a>
 800a01a:	4ba0      	ldr	r3, [pc, #640]	; (800a29c <_dtoa_r+0x6f0>)
 800a01c:	00d2      	lsls	r2, r2, #3
 800a01e:	189b      	adds	r3, r3, r2
 800a020:	681e      	ldr	r6, [r3, #0]
 800a022:	685f      	ldr	r7, [r3, #4]
 800a024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a026:	2b00      	cmp	r3, #0
 800a028:	db00      	blt.n	800a02c <_dtoa_r+0x480>
 800a02a:	e0e5      	b.n	800a1f8 <_dtoa_r+0x64c>
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dd00      	ble.n	800a034 <_dtoa_r+0x488>
 800a032:	e0e1      	b.n	800a1f8 <_dtoa_r+0x64c>
 800a034:	d000      	beq.n	800a038 <_dtoa_r+0x48c>
 800a036:	e288      	b.n	800a54a <_dtoa_r+0x99e>
 800a038:	2200      	movs	r2, #0
 800a03a:	0030      	movs	r0, r6
 800a03c:	0039      	movs	r1, r7
 800a03e:	4b9d      	ldr	r3, [pc, #628]	; (800a2b4 <_dtoa_r+0x708>)
 800a040:	f7f7 fa76 	bl	8001530 <__aeabi_dmul>
 800a044:	9a08      	ldr	r2, [sp, #32]
 800a046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a048:	f7f6 fa22 	bl	8000490 <__aeabi_dcmpge>
 800a04c:	9e07      	ldr	r6, [sp, #28]
 800a04e:	0037      	movs	r7, r6
 800a050:	2800      	cmp	r0, #0
 800a052:	d000      	beq.n	800a056 <_dtoa_r+0x4aa>
 800a054:	e25f      	b.n	800a516 <_dtoa_r+0x96a>
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	9a06      	ldr	r2, [sp, #24]
 800a05a:	3301      	adds	r3, #1
 800a05c:	9308      	str	r3, [sp, #32]
 800a05e:	2331      	movs	r3, #49	; 0x31
 800a060:	7013      	strb	r3, [r2, #0]
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	e25a      	b.n	800a520 <_dtoa_r+0x974>
 800a06a:	423d      	tst	r5, r7
 800a06c:	d005      	beq.n	800a07a <_dtoa_r+0x4ce>
 800a06e:	6832      	ldr	r2, [r6, #0]
 800a070:	6873      	ldr	r3, [r6, #4]
 800a072:	f7f7 fa5d 	bl	8001530 <__aeabi_dmul>
 800a076:	003b      	movs	r3, r7
 800a078:	3401      	adds	r4, #1
 800a07a:	106d      	asrs	r5, r5, #1
 800a07c:	3608      	adds	r6, #8
 800a07e:	e75f      	b.n	8009f40 <_dtoa_r+0x394>
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	930e      	str	r3, [sp, #56]	; 0x38
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	e783      	b.n	8009f90 <_dtoa_r+0x3e4>
 800a088:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a08a:	4b84      	ldr	r3, [pc, #528]	; (800a29c <_dtoa_r+0x6f0>)
 800a08c:	3a01      	subs	r2, #1
 800a08e:	00d2      	lsls	r2, r2, #3
 800a090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a092:	189b      	adds	r3, r3, r2
 800a094:	9c08      	ldr	r4, [sp, #32]
 800a096:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d051      	beq.n	800a144 <_dtoa_r+0x598>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4986      	ldr	r1, [pc, #536]	; (800a2bc <_dtoa_r+0x710>)
 800a0a4:	f7f6 fe4a 	bl	8000d3c <__aeabi_ddiv>
 800a0a8:	0022      	movs	r2, r4
 800a0aa:	002b      	movs	r3, r5
 800a0ac:	f7f7 fd02 	bl	8001ab4 <__aeabi_dsub>
 800a0b0:	9a06      	ldr	r2, [sp, #24]
 800a0b2:	0004      	movs	r4, r0
 800a0b4:	4694      	mov	ip, r2
 800a0b6:	000d      	movs	r5, r1
 800a0b8:	9b06      	ldr	r3, [sp, #24]
 800a0ba:	9314      	str	r3, [sp, #80]	; 0x50
 800a0bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0be:	4463      	add	r3, ip
 800a0c0:	9318      	str	r3, [sp, #96]	; 0x60
 800a0c2:	0039      	movs	r1, r7
 800a0c4:	0030      	movs	r0, r6
 800a0c6:	f7f8 f895 	bl	80021f4 <__aeabi_d2iz>
 800a0ca:	9012      	str	r0, [sp, #72]	; 0x48
 800a0cc:	f7f8 f8c8 	bl	8002260 <__aeabi_i2d>
 800a0d0:	0002      	movs	r2, r0
 800a0d2:	000b      	movs	r3, r1
 800a0d4:	0030      	movs	r0, r6
 800a0d6:	0039      	movs	r1, r7
 800a0d8:	f7f7 fcec 	bl	8001ab4 <__aeabi_dsub>
 800a0dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0e6:	0006      	movs	r6, r0
 800a0e8:	3330      	adds	r3, #48	; 0x30
 800a0ea:	7013      	strb	r3, [r2, #0]
 800a0ec:	0022      	movs	r2, r4
 800a0ee:	002b      	movs	r3, r5
 800a0f0:	000f      	movs	r7, r1
 800a0f2:	f7f6 f9af 	bl	8000454 <__aeabi_dcmplt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d174      	bne.n	800a1e4 <_dtoa_r+0x638>
 800a0fa:	0032      	movs	r2, r6
 800a0fc:	003b      	movs	r3, r7
 800a0fe:	2000      	movs	r0, #0
 800a100:	4968      	ldr	r1, [pc, #416]	; (800a2a4 <_dtoa_r+0x6f8>)
 800a102:	f7f7 fcd7 	bl	8001ab4 <__aeabi_dsub>
 800a106:	0022      	movs	r2, r4
 800a108:	002b      	movs	r3, r5
 800a10a:	f7f6 f9a3 	bl	8000454 <__aeabi_dcmplt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d000      	beq.n	800a114 <_dtoa_r+0x568>
 800a112:	e0d7      	b.n	800a2c4 <_dtoa_r+0x718>
 800a114:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a116:	9a08      	ldr	r2, [sp, #32]
 800a118:	4293      	cmp	r3, r2
 800a11a:	d100      	bne.n	800a11e <_dtoa_r+0x572>
 800a11c:	e771      	b.n	800a002 <_dtoa_r+0x456>
 800a11e:	2200      	movs	r2, #0
 800a120:	0020      	movs	r0, r4
 800a122:	0029      	movs	r1, r5
 800a124:	4b60      	ldr	r3, [pc, #384]	; (800a2a8 <_dtoa_r+0x6fc>)
 800a126:	f7f7 fa03 	bl	8001530 <__aeabi_dmul>
 800a12a:	4b5f      	ldr	r3, [pc, #380]	; (800a2a8 <_dtoa_r+0x6fc>)
 800a12c:	0004      	movs	r4, r0
 800a12e:	000d      	movs	r5, r1
 800a130:	0030      	movs	r0, r6
 800a132:	0039      	movs	r1, r7
 800a134:	2200      	movs	r2, #0
 800a136:	f7f7 f9fb 	bl	8001530 <__aeabi_dmul>
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	0006      	movs	r6, r0
 800a13e:	000f      	movs	r7, r1
 800a140:	9314      	str	r3, [sp, #80]	; 0x50
 800a142:	e7be      	b.n	800a0c2 <_dtoa_r+0x516>
 800a144:	0020      	movs	r0, r4
 800a146:	0029      	movs	r1, r5
 800a148:	f7f7 f9f2 	bl	8001530 <__aeabi_dmul>
 800a14c:	9a06      	ldr	r2, [sp, #24]
 800a14e:	9b06      	ldr	r3, [sp, #24]
 800a150:	4694      	mov	ip, r2
 800a152:	9308      	str	r3, [sp, #32]
 800a154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a156:	9014      	str	r0, [sp, #80]	; 0x50
 800a158:	9115      	str	r1, [sp, #84]	; 0x54
 800a15a:	4463      	add	r3, ip
 800a15c:	9319      	str	r3, [sp, #100]	; 0x64
 800a15e:	0030      	movs	r0, r6
 800a160:	0039      	movs	r1, r7
 800a162:	f7f8 f847 	bl	80021f4 <__aeabi_d2iz>
 800a166:	9018      	str	r0, [sp, #96]	; 0x60
 800a168:	f7f8 f87a 	bl	8002260 <__aeabi_i2d>
 800a16c:	0002      	movs	r2, r0
 800a16e:	000b      	movs	r3, r1
 800a170:	0030      	movs	r0, r6
 800a172:	0039      	movs	r1, r7
 800a174:	f7f7 fc9e 	bl	8001ab4 <__aeabi_dsub>
 800a178:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	3630      	adds	r6, #48	; 0x30
 800a17e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a180:	701e      	strb	r6, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	0004      	movs	r4, r0
 800a186:	000d      	movs	r5, r1
 800a188:	9308      	str	r3, [sp, #32]
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d12d      	bne.n	800a1ea <_dtoa_r+0x63e>
 800a18e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a190:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a192:	9a06      	ldr	r2, [sp, #24]
 800a194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a196:	4694      	mov	ip, r2
 800a198:	4463      	add	r3, ip
 800a19a:	2200      	movs	r2, #0
 800a19c:	9308      	str	r3, [sp, #32]
 800a19e:	4b47      	ldr	r3, [pc, #284]	; (800a2bc <_dtoa_r+0x710>)
 800a1a0:	f7f6 fa6c 	bl	800067c <__aeabi_dadd>
 800a1a4:	0002      	movs	r2, r0
 800a1a6:	000b      	movs	r3, r1
 800a1a8:	0020      	movs	r0, r4
 800a1aa:	0029      	movs	r1, r5
 800a1ac:	f7f6 f966 	bl	800047c <__aeabi_dcmpgt>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d000      	beq.n	800a1b6 <_dtoa_r+0x60a>
 800a1b4:	e086      	b.n	800a2c4 <_dtoa_r+0x718>
 800a1b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	493f      	ldr	r1, [pc, #252]	; (800a2bc <_dtoa_r+0x710>)
 800a1be:	f7f7 fc79 	bl	8001ab4 <__aeabi_dsub>
 800a1c2:	0002      	movs	r2, r0
 800a1c4:	000b      	movs	r3, r1
 800a1c6:	0020      	movs	r0, r4
 800a1c8:	0029      	movs	r1, r5
 800a1ca:	f7f6 f943 	bl	8000454 <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d100      	bne.n	800a1d4 <_dtoa_r+0x628>
 800a1d2:	e716      	b.n	800a002 <_dtoa_r+0x456>
 800a1d4:	9b08      	ldr	r3, [sp, #32]
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	3a01      	subs	r2, #1
 800a1da:	9208      	str	r2, [sp, #32]
 800a1dc:	7812      	ldrb	r2, [r2, #0]
 800a1de:	2a30      	cmp	r2, #48	; 0x30
 800a1e0:	d0f8      	beq.n	800a1d4 <_dtoa_r+0x628>
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	e046      	b.n	800a278 <_dtoa_r+0x6cc>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	4b2e      	ldr	r3, [pc, #184]	; (800a2a8 <_dtoa_r+0x6fc>)
 800a1ee:	f7f7 f99f 	bl	8001530 <__aeabi_dmul>
 800a1f2:	0006      	movs	r6, r0
 800a1f4:	000f      	movs	r7, r1
 800a1f6:	e7b2      	b.n	800a15e <_dtoa_r+0x5b2>
 800a1f8:	9b06      	ldr	r3, [sp, #24]
 800a1fa:	9a06      	ldr	r2, [sp, #24]
 800a1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	9c08      	ldr	r4, [sp, #32]
 800a202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a204:	3b01      	subs	r3, #1
 800a206:	189b      	adds	r3, r3, r2
 800a208:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20a:	0032      	movs	r2, r6
 800a20c:	003b      	movs	r3, r7
 800a20e:	0020      	movs	r0, r4
 800a210:	0029      	movs	r1, r5
 800a212:	f7f6 fd93 	bl	8000d3c <__aeabi_ddiv>
 800a216:	f7f7 ffed 	bl	80021f4 <__aeabi_d2iz>
 800a21a:	9007      	str	r0, [sp, #28]
 800a21c:	f7f8 f820 	bl	8002260 <__aeabi_i2d>
 800a220:	0032      	movs	r2, r6
 800a222:	003b      	movs	r3, r7
 800a224:	f7f7 f984 	bl	8001530 <__aeabi_dmul>
 800a228:	0002      	movs	r2, r0
 800a22a:	000b      	movs	r3, r1
 800a22c:	0020      	movs	r0, r4
 800a22e:	0029      	movs	r1, r5
 800a230:	f7f7 fc40 	bl	8001ab4 <__aeabi_dsub>
 800a234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a236:	001a      	movs	r2, r3
 800a238:	3201      	adds	r2, #1
 800a23a:	920a      	str	r2, [sp, #40]	; 0x28
 800a23c:	9208      	str	r2, [sp, #32]
 800a23e:	9a07      	ldr	r2, [sp, #28]
 800a240:	3230      	adds	r2, #48	; 0x30
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a246:	429a      	cmp	r2, r3
 800a248:	d14f      	bne.n	800a2ea <_dtoa_r+0x73e>
 800a24a:	0002      	movs	r2, r0
 800a24c:	000b      	movs	r3, r1
 800a24e:	f7f6 fa15 	bl	800067c <__aeabi_dadd>
 800a252:	0032      	movs	r2, r6
 800a254:	003b      	movs	r3, r7
 800a256:	0004      	movs	r4, r0
 800a258:	000d      	movs	r5, r1
 800a25a:	f7f6 f90f 	bl	800047c <__aeabi_dcmpgt>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d12e      	bne.n	800a2c0 <_dtoa_r+0x714>
 800a262:	0032      	movs	r2, r6
 800a264:	003b      	movs	r3, r7
 800a266:	0020      	movs	r0, r4
 800a268:	0029      	movs	r1, r5
 800a26a:	f7f6 f8ed 	bl	8000448 <__aeabi_dcmpeq>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d002      	beq.n	800a278 <_dtoa_r+0x6cc>
 800a272:	9b07      	ldr	r3, [sp, #28]
 800a274:	07de      	lsls	r6, r3, #31
 800a276:	d423      	bmi.n	800a2c0 <_dtoa_r+0x714>
 800a278:	9905      	ldr	r1, [sp, #20]
 800a27a:	9804      	ldr	r0, [sp, #16]
 800a27c:	f7fd fc76 	bl	8007b6c <_Bfree>
 800a280:	2300      	movs	r3, #0
 800a282:	9a08      	ldr	r2, [sp, #32]
 800a284:	7013      	strb	r3, [r2, #0]
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a28a:	3301      	adds	r3, #1
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a290:	2b00      	cmp	r3, #0
 800a292:	d100      	bne.n	800a296 <_dtoa_r+0x6ea>
 800a294:	e4bd      	b.n	8009c12 <_dtoa_r+0x66>
 800a296:	9a08      	ldr	r2, [sp, #32]
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	e4ba      	b.n	8009c12 <_dtoa_r+0x66>
 800a29c:	0800c188 	.word	0x0800c188
 800a2a0:	0800c160 	.word	0x0800c160
 800a2a4:	3ff00000 	.word	0x3ff00000
 800a2a8:	40240000 	.word	0x40240000
 800a2ac:	401c0000 	.word	0x401c0000
 800a2b0:	fcc00000 	.word	0xfcc00000
 800a2b4:	40140000 	.word	0x40140000
 800a2b8:	7cc00000 	.word	0x7cc00000
 800a2bc:	3fe00000 	.word	0x3fe00000
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	9308      	str	r3, [sp, #32]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	781a      	ldrb	r2, [r3, #0]
 800a2cc:	2a39      	cmp	r2, #57	; 0x39
 800a2ce:	d108      	bne.n	800a2e2 <_dtoa_r+0x736>
 800a2d0:	9a06      	ldr	r2, [sp, #24]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d1f7      	bne.n	800a2c6 <_dtoa_r+0x71a>
 800a2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d8:	9906      	ldr	r1, [sp, #24]
 800a2da:	3201      	adds	r2, #1
 800a2dc:	920e      	str	r2, [sp, #56]	; 0x38
 800a2de:	2230      	movs	r2, #48	; 0x30
 800a2e0:	700a      	strb	r2, [r1, #0]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	e77c      	b.n	800a1e4 <_dtoa_r+0x638>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4ba9      	ldr	r3, [pc, #676]	; (800a594 <_dtoa_r+0x9e8>)
 800a2ee:	f7f7 f91f 	bl	8001530 <__aeabi_dmul>
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	0004      	movs	r4, r0
 800a2f8:	000d      	movs	r5, r1
 800a2fa:	f7f6 f8a5 	bl	8000448 <__aeabi_dcmpeq>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d100      	bne.n	800a304 <_dtoa_r+0x758>
 800a302:	e782      	b.n	800a20a <_dtoa_r+0x65e>
 800a304:	e7b8      	b.n	800a278 <_dtoa_r+0x6cc>
 800a306:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a308:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a30a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d012      	beq.n	800a336 <_dtoa_r+0x78a>
 800a310:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a312:	2a01      	cmp	r2, #1
 800a314:	dc6e      	bgt.n	800a3f4 <_dtoa_r+0x848>
 800a316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d065      	beq.n	800a3e8 <_dtoa_r+0x83c>
 800a31c:	4a9e      	ldr	r2, [pc, #632]	; (800a598 <_dtoa_r+0x9ec>)
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a322:	2101      	movs	r1, #1
 800a324:	18d2      	adds	r2, r2, r3
 800a326:	920a      	str	r2, [sp, #40]	; 0x28
 800a328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a32a:	9804      	ldr	r0, [sp, #16]
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	930c      	str	r3, [sp, #48]	; 0x30
 800a330:	f7fd fcb2 	bl	8007c98 <__i2b>
 800a334:	0007      	movs	r7, r0
 800a336:	2c00      	cmp	r4, #0
 800a338:	d00e      	beq.n	800a358 <_dtoa_r+0x7ac>
 800a33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dd0b      	ble.n	800a358 <_dtoa_r+0x7ac>
 800a340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a342:	0023      	movs	r3, r4
 800a344:	4294      	cmp	r4, r2
 800a346:	dd00      	ble.n	800a34a <_dtoa_r+0x79e>
 800a348:	0013      	movs	r3, r2
 800a34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34c:	1ae4      	subs	r4, r4, r3
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	920a      	str	r2, [sp, #40]	; 0x28
 800a352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	930c      	str	r3, [sp, #48]	; 0x30
 800a358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01e      	beq.n	800a39c <_dtoa_r+0x7f0>
 800a35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05c      	beq.n	800a41e <_dtoa_r+0x872>
 800a364:	2d00      	cmp	r5, #0
 800a366:	dd10      	ble.n	800a38a <_dtoa_r+0x7de>
 800a368:	0039      	movs	r1, r7
 800a36a:	002a      	movs	r2, r5
 800a36c:	9804      	ldr	r0, [sp, #16]
 800a36e:	f7fd fd5b 	bl	8007e28 <__pow5mult>
 800a372:	9a05      	ldr	r2, [sp, #20]
 800a374:	0001      	movs	r1, r0
 800a376:	0007      	movs	r7, r0
 800a378:	9804      	ldr	r0, [sp, #16]
 800a37a:	f7fd fca5 	bl	8007cc8 <__multiply>
 800a37e:	0006      	movs	r6, r0
 800a380:	9905      	ldr	r1, [sp, #20]
 800a382:	9804      	ldr	r0, [sp, #16]
 800a384:	f7fd fbf2 	bl	8007b6c <_Bfree>
 800a388:	9605      	str	r6, [sp, #20]
 800a38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a38c:	1b5a      	subs	r2, r3, r5
 800a38e:	42ab      	cmp	r3, r5
 800a390:	d004      	beq.n	800a39c <_dtoa_r+0x7f0>
 800a392:	9905      	ldr	r1, [sp, #20]
 800a394:	9804      	ldr	r0, [sp, #16]
 800a396:	f7fd fd47 	bl	8007e28 <__pow5mult>
 800a39a:	9005      	str	r0, [sp, #20]
 800a39c:	2101      	movs	r1, #1
 800a39e:	9804      	ldr	r0, [sp, #16]
 800a3a0:	f7fd fc7a 	bl	8007c98 <__i2b>
 800a3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3a6:	0006      	movs	r6, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dd3a      	ble.n	800a422 <_dtoa_r+0x876>
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	0001      	movs	r1, r0
 800a3b0:	9804      	ldr	r0, [sp, #16]
 800a3b2:	f7fd fd39 	bl	8007e28 <__pow5mult>
 800a3b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3b8:	0006      	movs	r6, r0
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	dc38      	bgt.n	800a432 <_dtoa_r+0x886>
 800a3c0:	2500      	movs	r5, #0
 800a3c2:	9b08      	ldr	r3, [sp, #32]
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	d130      	bne.n	800a42a <_dtoa_r+0x87e>
 800a3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ca:	031b      	lsls	r3, r3, #12
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	d12c      	bne.n	800a42a <_dtoa_r+0x87e>
 800a3d0:	4b72      	ldr	r3, [pc, #456]	; (800a59c <_dtoa_r+0x9f0>)
 800a3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d4:	4213      	tst	r3, r2
 800a3d6:	d028      	beq.n	800a42a <_dtoa_r+0x87e>
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3da:	3501      	adds	r5, #1
 800a3dc:	3301      	adds	r3, #1
 800a3de:	930a      	str	r3, [sp, #40]	; 0x28
 800a3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a3e6:	e020      	b.n	800a42a <_dtoa_r+0x87e>
 800a3e8:	2336      	movs	r3, #54	; 0x36
 800a3ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a3ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	e795      	b.n	800a320 <_dtoa_r+0x774>
 800a3f4:	9b07      	ldr	r3, [sp, #28]
 800a3f6:	1e5d      	subs	r5, r3, #1
 800a3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3fa:	42ab      	cmp	r3, r5
 800a3fc:	db07      	blt.n	800a40e <_dtoa_r+0x862>
 800a3fe:	1b5d      	subs	r5, r3, r5
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a404:	2b00      	cmp	r3, #0
 800a406:	da8b      	bge.n	800a320 <_dtoa_r+0x774>
 800a408:	1ae4      	subs	r4, r4, r3
 800a40a:	2300      	movs	r3, #0
 800a40c:	e788      	b.n	800a320 <_dtoa_r+0x774>
 800a40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a412:	1aeb      	subs	r3, r5, r3
 800a414:	18d3      	adds	r3, r2, r3
 800a416:	950d      	str	r5, [sp, #52]	; 0x34
 800a418:	9313      	str	r3, [sp, #76]	; 0x4c
 800a41a:	2500      	movs	r5, #0
 800a41c:	e7f0      	b.n	800a400 <_dtoa_r+0x854>
 800a41e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a420:	e7b7      	b.n	800a392 <_dtoa_r+0x7e6>
 800a422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a424:	2500      	movs	r5, #0
 800a426:	2b01      	cmp	r3, #1
 800a428:	ddca      	ble.n	800a3c0 <_dtoa_r+0x814>
 800a42a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a42c:	2001      	movs	r0, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <_dtoa_r+0x898>
 800a432:	6933      	ldr	r3, [r6, #16]
 800a434:	3303      	adds	r3, #3
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	18f3      	adds	r3, r6, r3
 800a43a:	6858      	ldr	r0, [r3, #4]
 800a43c:	f7fd fbe4 	bl	8007c08 <__hi0bits>
 800a440:	2320      	movs	r3, #32
 800a442:	1a18      	subs	r0, r3, r0
 800a444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a446:	1818      	adds	r0, r3, r0
 800a448:	0002      	movs	r2, r0
 800a44a:	231f      	movs	r3, #31
 800a44c:	401a      	ands	r2, r3
 800a44e:	4218      	tst	r0, r3
 800a450:	d047      	beq.n	800a4e2 <_dtoa_r+0x936>
 800a452:	3301      	adds	r3, #1
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	2b04      	cmp	r3, #4
 800a458:	dd3f      	ble.n	800a4da <_dtoa_r+0x92e>
 800a45a:	231c      	movs	r3, #28
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a460:	18e4      	adds	r4, r4, r3
 800a462:	18d2      	adds	r2, r2, r3
 800a464:	920a      	str	r2, [sp, #40]	; 0x28
 800a466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a468:	18d3      	adds	r3, r2, r3
 800a46a:	930c      	str	r3, [sp, #48]	; 0x30
 800a46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd05      	ble.n	800a47e <_dtoa_r+0x8d2>
 800a472:	001a      	movs	r2, r3
 800a474:	9905      	ldr	r1, [sp, #20]
 800a476:	9804      	ldr	r0, [sp, #16]
 800a478:	f7fd fd18 	bl	8007eac <__lshift>
 800a47c:	9005      	str	r0, [sp, #20]
 800a47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd05      	ble.n	800a490 <_dtoa_r+0x8e4>
 800a484:	0031      	movs	r1, r6
 800a486:	001a      	movs	r2, r3
 800a488:	9804      	ldr	r0, [sp, #16]
 800a48a:	f7fd fd0f 	bl	8007eac <__lshift>
 800a48e:	0006      	movs	r6, r0
 800a490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a492:	2b00      	cmp	r3, #0
 800a494:	d027      	beq.n	800a4e6 <_dtoa_r+0x93a>
 800a496:	0031      	movs	r1, r6
 800a498:	9805      	ldr	r0, [sp, #20]
 800a49a:	f7fd fd75 	bl	8007f88 <__mcmp>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	da21      	bge.n	800a4e6 <_dtoa_r+0x93a>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	9905      	ldr	r1, [sp, #20]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9804      	ldr	r0, [sp, #16]
 800a4b0:	f7fd fb66 	bl	8007b80 <__multadd>
 800a4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b6:	9005      	str	r0, [sp, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d100      	bne.n	800a4be <_dtoa_r+0x912>
 800a4bc:	e15d      	b.n	800a77a <_dtoa_r+0xbce>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	0039      	movs	r1, r7
 800a4c2:	220a      	movs	r2, #10
 800a4c4:	9804      	ldr	r0, [sp, #16]
 800a4c6:	f7fd fb5b 	bl	8007b80 <__multadd>
 800a4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4cc:	0007      	movs	r7, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dc49      	bgt.n	800a566 <_dtoa_r+0x9ba>
 800a4d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	dc0e      	bgt.n	800a4f6 <_dtoa_r+0x94a>
 800a4d8:	e045      	b.n	800a566 <_dtoa_r+0x9ba>
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d0c6      	beq.n	800a46c <_dtoa_r+0x8c0>
 800a4de:	331c      	adds	r3, #28
 800a4e0:	e7bd      	b.n	800a45e <_dtoa_r+0x8b2>
 800a4e2:	0013      	movs	r3, r2
 800a4e4:	e7fb      	b.n	800a4de <_dtoa_r+0x932>
 800a4e6:	9b07      	ldr	r3, [sp, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	dc36      	bgt.n	800a55a <_dtoa_r+0x9ae>
 800a4ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	dd33      	ble.n	800a55a <_dtoa_r+0x9ae>
 800a4f2:	9b07      	ldr	r3, [sp, #28]
 800a4f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10c      	bne.n	800a516 <_dtoa_r+0x96a>
 800a4fc:	0031      	movs	r1, r6
 800a4fe:	2205      	movs	r2, #5
 800a500:	9804      	ldr	r0, [sp, #16]
 800a502:	f7fd fb3d 	bl	8007b80 <__multadd>
 800a506:	0006      	movs	r6, r0
 800a508:	0001      	movs	r1, r0
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	f7fd fd3c 	bl	8007f88 <__mcmp>
 800a510:	2800      	cmp	r0, #0
 800a512:	dd00      	ble.n	800a516 <_dtoa_r+0x96a>
 800a514:	e59f      	b.n	800a056 <_dtoa_r+0x4aa>
 800a516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a518:	43db      	mvns	r3, r3
 800a51a:	9303      	str	r3, [sp, #12]
 800a51c:	9b06      	ldr	r3, [sp, #24]
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	2500      	movs	r5, #0
 800a522:	0031      	movs	r1, r6
 800a524:	9804      	ldr	r0, [sp, #16]
 800a526:	f7fd fb21 	bl	8007b6c <_Bfree>
 800a52a:	2f00      	cmp	r7, #0
 800a52c:	d100      	bne.n	800a530 <_dtoa_r+0x984>
 800a52e:	e6a3      	b.n	800a278 <_dtoa_r+0x6cc>
 800a530:	2d00      	cmp	r5, #0
 800a532:	d005      	beq.n	800a540 <_dtoa_r+0x994>
 800a534:	42bd      	cmp	r5, r7
 800a536:	d003      	beq.n	800a540 <_dtoa_r+0x994>
 800a538:	0029      	movs	r1, r5
 800a53a:	9804      	ldr	r0, [sp, #16]
 800a53c:	f7fd fb16 	bl	8007b6c <_Bfree>
 800a540:	0039      	movs	r1, r7
 800a542:	9804      	ldr	r0, [sp, #16]
 800a544:	f7fd fb12 	bl	8007b6c <_Bfree>
 800a548:	e696      	b.n	800a278 <_dtoa_r+0x6cc>
 800a54a:	2600      	movs	r6, #0
 800a54c:	0037      	movs	r7, r6
 800a54e:	e7e2      	b.n	800a516 <_dtoa_r+0x96a>
 800a550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a552:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a554:	9303      	str	r3, [sp, #12]
 800a556:	0037      	movs	r7, r6
 800a558:	e57d      	b.n	800a056 <_dtoa_r+0x4aa>
 800a55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d100      	bne.n	800a562 <_dtoa_r+0x9b6>
 800a560:	e0c3      	b.n	800a6ea <_dtoa_r+0xb3e>
 800a562:	9b07      	ldr	r3, [sp, #28]
 800a564:	930b      	str	r3, [sp, #44]	; 0x2c
 800a566:	2c00      	cmp	r4, #0
 800a568:	dd05      	ble.n	800a576 <_dtoa_r+0x9ca>
 800a56a:	0039      	movs	r1, r7
 800a56c:	0022      	movs	r2, r4
 800a56e:	9804      	ldr	r0, [sp, #16]
 800a570:	f7fd fc9c 	bl	8007eac <__lshift>
 800a574:	0007      	movs	r7, r0
 800a576:	0038      	movs	r0, r7
 800a578:	2d00      	cmp	r5, #0
 800a57a:	d024      	beq.n	800a5c6 <_dtoa_r+0xa1a>
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	9804      	ldr	r0, [sp, #16]
 800a580:	f7fd facc 	bl	8007b1c <_Balloc>
 800a584:	1e04      	subs	r4, r0, #0
 800a586:	d111      	bne.n	800a5ac <_dtoa_r+0xa00>
 800a588:	0022      	movs	r2, r4
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_dtoa_r+0x9f4>)
 800a58c:	4805      	ldr	r0, [pc, #20]	; (800a5a4 <_dtoa_r+0x9f8>)
 800a58e:	4906      	ldr	r1, [pc, #24]	; (800a5a8 <_dtoa_r+0x9fc>)
 800a590:	e43c      	b.n	8009e0c <_dtoa_r+0x260>
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	40240000 	.word	0x40240000
 800a598:	00000433 	.word	0x00000433
 800a59c:	7ff00000 	.word	0x7ff00000
 800a5a0:	0800c0ef 	.word	0x0800c0ef
 800a5a4:	0800c2f9 	.word	0x0800c2f9
 800a5a8:	000002ef 	.word	0x000002ef
 800a5ac:	0039      	movs	r1, r7
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	310c      	adds	r1, #12
 800a5b2:	3202      	adds	r2, #2
 800a5b4:	0092      	lsls	r2, r2, #2
 800a5b6:	300c      	adds	r0, #12
 800a5b8:	f7fd f97b 	bl	80078b2 <memcpy>
 800a5bc:	2201      	movs	r2, #1
 800a5be:	0021      	movs	r1, r4
 800a5c0:	9804      	ldr	r0, [sp, #16]
 800a5c2:	f7fd fc73 	bl	8007eac <__lshift>
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	189b      	adds	r3, r3, r2
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	003d      	movs	r5, r7
 800a5d4:	0007      	movs	r7, r0
 800a5d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a5de:	0031      	movs	r1, r6
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	f7ff fa53 	bl	8009a8c <quorem>
 800a5e6:	0029      	movs	r1, r5
 800a5e8:	0004      	movs	r4, r0
 800a5ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	f7fd fccb 	bl	8007f88 <__mcmp>
 800a5f2:	003a      	movs	r2, r7
 800a5f4:	900c      	str	r0, [sp, #48]	; 0x30
 800a5f6:	0031      	movs	r1, r6
 800a5f8:	9804      	ldr	r0, [sp, #16]
 800a5fa:	f7fd fce1 	bl	8007fc0 <__mdiff>
 800a5fe:	2201      	movs	r2, #1
 800a600:	68c3      	ldr	r3, [r0, #12]
 800a602:	3430      	adds	r4, #48	; 0x30
 800a604:	9008      	str	r0, [sp, #32]
 800a606:	920a      	str	r2, [sp, #40]	; 0x28
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d104      	bne.n	800a616 <_dtoa_r+0xa6a>
 800a60c:	0001      	movs	r1, r0
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7fd fcba 	bl	8007f88 <__mcmp>
 800a614:	900a      	str	r0, [sp, #40]	; 0x28
 800a616:	9908      	ldr	r1, [sp, #32]
 800a618:	9804      	ldr	r0, [sp, #16]
 800a61a:	f7fd faa7 	bl	8007b6c <_Bfree>
 800a61e:	9b07      	ldr	r3, [sp, #28]
 800a620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a622:	3301      	adds	r3, #1
 800a624:	9308      	str	r3, [sp, #32]
 800a626:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a628:	4313      	orrs	r3, r2
 800a62a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a62c:	4313      	orrs	r3, r2
 800a62e:	d109      	bne.n	800a644 <_dtoa_r+0xa98>
 800a630:	2c39      	cmp	r4, #57	; 0x39
 800a632:	d022      	beq.n	800a67a <_dtoa_r+0xace>
 800a634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a636:	2b00      	cmp	r3, #0
 800a638:	dd01      	ble.n	800a63e <_dtoa_r+0xa92>
 800a63a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a63c:	3431      	adds	r4, #49	; 0x31
 800a63e:	9b07      	ldr	r3, [sp, #28]
 800a640:	701c      	strb	r4, [r3, #0]
 800a642:	e76e      	b.n	800a522 <_dtoa_r+0x976>
 800a644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a646:	2b00      	cmp	r3, #0
 800a648:	db04      	blt.n	800a654 <_dtoa_r+0xaa8>
 800a64a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a64c:	4313      	orrs	r3, r2
 800a64e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a650:	4313      	orrs	r3, r2
 800a652:	d11e      	bne.n	800a692 <_dtoa_r+0xae6>
 800a654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a656:	2b00      	cmp	r3, #0
 800a658:	ddf1      	ble.n	800a63e <_dtoa_r+0xa92>
 800a65a:	9905      	ldr	r1, [sp, #20]
 800a65c:	2201      	movs	r2, #1
 800a65e:	9804      	ldr	r0, [sp, #16]
 800a660:	f7fd fc24 	bl	8007eac <__lshift>
 800a664:	0031      	movs	r1, r6
 800a666:	9005      	str	r0, [sp, #20]
 800a668:	f7fd fc8e 	bl	8007f88 <__mcmp>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	dc02      	bgt.n	800a676 <_dtoa_r+0xaca>
 800a670:	d1e5      	bne.n	800a63e <_dtoa_r+0xa92>
 800a672:	07e3      	lsls	r3, r4, #31
 800a674:	d5e3      	bpl.n	800a63e <_dtoa_r+0xa92>
 800a676:	2c39      	cmp	r4, #57	; 0x39
 800a678:	d1df      	bne.n	800a63a <_dtoa_r+0xa8e>
 800a67a:	2339      	movs	r3, #57	; 0x39
 800a67c:	9a07      	ldr	r2, [sp, #28]
 800a67e:	7013      	strb	r3, [r2, #0]
 800a680:	9b08      	ldr	r3, [sp, #32]
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	3b01      	subs	r3, #1
 800a686:	781a      	ldrb	r2, [r3, #0]
 800a688:	2a39      	cmp	r2, #57	; 0x39
 800a68a:	d063      	beq.n	800a754 <_dtoa_r+0xba8>
 800a68c:	3201      	adds	r2, #1
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e747      	b.n	800a522 <_dtoa_r+0x976>
 800a692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a694:	2b00      	cmp	r3, #0
 800a696:	dd03      	ble.n	800a6a0 <_dtoa_r+0xaf4>
 800a698:	2c39      	cmp	r4, #57	; 0x39
 800a69a:	d0ee      	beq.n	800a67a <_dtoa_r+0xace>
 800a69c:	3401      	adds	r4, #1
 800a69e:	e7ce      	b.n	800a63e <_dtoa_r+0xa92>
 800a6a0:	9b07      	ldr	r3, [sp, #28]
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	701c      	strb	r4, [r3, #0]
 800a6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d03e      	beq.n	800a72a <_dtoa_r+0xb7e>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	220a      	movs	r2, #10
 800a6b0:	9905      	ldr	r1, [sp, #20]
 800a6b2:	9804      	ldr	r0, [sp, #16]
 800a6b4:	f7fd fa64 	bl	8007b80 <__multadd>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9005      	str	r0, [sp, #20]
 800a6bc:	220a      	movs	r2, #10
 800a6be:	0029      	movs	r1, r5
 800a6c0:	9804      	ldr	r0, [sp, #16]
 800a6c2:	42bd      	cmp	r5, r7
 800a6c4:	d106      	bne.n	800a6d4 <_dtoa_r+0xb28>
 800a6c6:	f7fd fa5b 	bl	8007b80 <__multadd>
 800a6ca:	0005      	movs	r5, r0
 800a6cc:	0007      	movs	r7, r0
 800a6ce:	9b08      	ldr	r3, [sp, #32]
 800a6d0:	9307      	str	r3, [sp, #28]
 800a6d2:	e784      	b.n	800a5de <_dtoa_r+0xa32>
 800a6d4:	f7fd fa54 	bl	8007b80 <__multadd>
 800a6d8:	0039      	movs	r1, r7
 800a6da:	0005      	movs	r5, r0
 800a6dc:	2300      	movs	r3, #0
 800a6de:	220a      	movs	r2, #10
 800a6e0:	9804      	ldr	r0, [sp, #16]
 800a6e2:	f7fd fa4d 	bl	8007b80 <__multadd>
 800a6e6:	0007      	movs	r7, r0
 800a6e8:	e7f1      	b.n	800a6ce <_dtoa_r+0xb22>
 800a6ea:	9b07      	ldr	r3, [sp, #28]
 800a6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6ee:	2500      	movs	r5, #0
 800a6f0:	0031      	movs	r1, r6
 800a6f2:	9805      	ldr	r0, [sp, #20]
 800a6f4:	f7ff f9ca 	bl	8009a8c <quorem>
 800a6f8:	9b06      	ldr	r3, [sp, #24]
 800a6fa:	3030      	adds	r0, #48	; 0x30
 800a6fc:	5558      	strb	r0, [r3, r5]
 800a6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a700:	3501      	adds	r5, #1
 800a702:	0004      	movs	r4, r0
 800a704:	42ab      	cmp	r3, r5
 800a706:	dd07      	ble.n	800a718 <_dtoa_r+0xb6c>
 800a708:	2300      	movs	r3, #0
 800a70a:	220a      	movs	r2, #10
 800a70c:	9905      	ldr	r1, [sp, #20]
 800a70e:	9804      	ldr	r0, [sp, #16]
 800a710:	f7fd fa36 	bl	8007b80 <__multadd>
 800a714:	9005      	str	r0, [sp, #20]
 800a716:	e7eb      	b.n	800a6f0 <_dtoa_r+0xb44>
 800a718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71a:	2301      	movs	r3, #1
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	dd00      	ble.n	800a722 <_dtoa_r+0xb76>
 800a720:	0013      	movs	r3, r2
 800a722:	2500      	movs	r5, #0
 800a724:	9a06      	ldr	r2, [sp, #24]
 800a726:	18d3      	adds	r3, r2, r3
 800a728:	9308      	str	r3, [sp, #32]
 800a72a:	9905      	ldr	r1, [sp, #20]
 800a72c:	2201      	movs	r2, #1
 800a72e:	9804      	ldr	r0, [sp, #16]
 800a730:	f7fd fbbc 	bl	8007eac <__lshift>
 800a734:	0031      	movs	r1, r6
 800a736:	9005      	str	r0, [sp, #20]
 800a738:	f7fd fc26 	bl	8007f88 <__mcmp>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	dc9f      	bgt.n	800a680 <_dtoa_r+0xad4>
 800a740:	d101      	bne.n	800a746 <_dtoa_r+0xb9a>
 800a742:	07e4      	lsls	r4, r4, #31
 800a744:	d49c      	bmi.n	800a680 <_dtoa_r+0xad4>
 800a746:	9b08      	ldr	r3, [sp, #32]
 800a748:	9308      	str	r3, [sp, #32]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	781a      	ldrb	r2, [r3, #0]
 800a74e:	2a30      	cmp	r2, #48	; 0x30
 800a750:	d0fa      	beq.n	800a748 <_dtoa_r+0xb9c>
 800a752:	e6e6      	b.n	800a522 <_dtoa_r+0x976>
 800a754:	9a06      	ldr	r2, [sp, #24]
 800a756:	429a      	cmp	r2, r3
 800a758:	d193      	bne.n	800a682 <_dtoa_r+0xad6>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	3301      	adds	r3, #1
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	2331      	movs	r3, #49	; 0x31
 800a762:	7013      	strb	r3, [r2, #0]
 800a764:	e6dd      	b.n	800a522 <_dtoa_r+0x976>
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <_dtoa_r+0xbe0>)
 800a768:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a76a:	9306      	str	r3, [sp, #24]
 800a76c:	4b08      	ldr	r3, [pc, #32]	; (800a790 <_dtoa_r+0xbe4>)
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d001      	beq.n	800a776 <_dtoa_r+0xbca>
 800a772:	f7ff fa4c 	bl	8009c0e <_dtoa_r+0x62>
 800a776:	f7ff fa4c 	bl	8009c12 <_dtoa_r+0x66>
 800a77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dcb6      	bgt.n	800a6ee <_dtoa_r+0xb42>
 800a780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a782:	2b02      	cmp	r3, #2
 800a784:	dd00      	ble.n	800a788 <_dtoa_r+0xbdc>
 800a786:	e6b6      	b.n	800a4f6 <_dtoa_r+0x94a>
 800a788:	e7b1      	b.n	800a6ee <_dtoa_r+0xb42>
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	0800c2ec 	.word	0x0800c2ec
 800a790:	0800c2f4 	.word	0x0800c2f4

0800a794 <_realloc_r>:
 800a794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a796:	b087      	sub	sp, #28
 800a798:	1e0c      	subs	r4, r1, #0
 800a79a:	9001      	str	r0, [sp, #4]
 800a79c:	9205      	str	r2, [sp, #20]
 800a79e:	d106      	bne.n	800a7ae <_realloc_r+0x1a>
 800a7a0:	0011      	movs	r1, r2
 800a7a2:	f7fc fc75 	bl	8007090 <_malloc_r>
 800a7a6:	0007      	movs	r7, r0
 800a7a8:	0038      	movs	r0, r7
 800a7aa:	b007      	add	sp, #28
 800a7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ae:	9801      	ldr	r0, [sp, #4]
 800a7b0:	f7fc fe82 	bl	80074b8 <__malloc_lock>
 800a7b4:	0023      	movs	r3, r4
 800a7b6:	3b08      	subs	r3, #8
 800a7b8:	685f      	ldr	r7, [r3, #4]
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	9b05      	ldr	r3, [sp, #20]
 800a7be:	330b      	adds	r3, #11
 800a7c0:	2b16      	cmp	r3, #22
 800a7c2:	d908      	bls.n	800a7d6 <_realloc_r+0x42>
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	4393      	bics	r3, r2
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	d506      	bpl.n	800a7da <_realloc_r+0x46>
 800a7cc:	230c      	movs	r3, #12
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	2700      	movs	r7, #0
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	e7e8      	b.n	800a7a8 <_realloc_r+0x14>
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	9a05      	ldr	r2, [sp, #20]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d3f4      	bcc.n	800a7cc <_realloc_r+0x38>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	003a      	movs	r2, r7
 800a7e6:	9302      	str	r3, [sp, #8]
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	439a      	bics	r2, r3
 800a7ec:	9b00      	ldr	r3, [sp, #0]
 800a7ee:	9203      	str	r2, [sp, #12]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	dc00      	bgt.n	800a7f6 <_realloc_r+0x62>
 800a7f4:	e169      	b.n	800aaca <_realloc_r+0x336>
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	48b8      	ldr	r0, [pc, #736]	; (800aadc <_realloc_r+0x348>)
 800a7fa:	189b      	adds	r3, r3, r2
 800a7fc:	6882      	ldr	r2, [r0, #8]
 800a7fe:	4694      	mov	ip, r2
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	459c      	cmp	ip, r3
 800a804:	d006      	beq.n	800a814 <_realloc_r+0x80>
 800a806:	2501      	movs	r5, #1
 800a808:	0011      	movs	r1, r2
 800a80a:	43a9      	bics	r1, r5
 800a80c:	1859      	adds	r1, r3, r1
 800a80e:	6849      	ldr	r1, [r1, #4]
 800a810:	4229      	tst	r1, r5
 800a812:	d144      	bne.n	800a89e <_realloc_r+0x10a>
 800a814:	2103      	movs	r1, #3
 800a816:	438a      	bics	r2, r1
 800a818:	9903      	ldr	r1, [sp, #12]
 800a81a:	188e      	adds	r6, r1, r2
 800a81c:	9900      	ldr	r1, [sp, #0]
 800a81e:	459c      	cmp	ip, r3
 800a820:	d117      	bne.n	800a852 <_realloc_r+0xbe>
 800a822:	3110      	adds	r1, #16
 800a824:	42b1      	cmp	r1, r6
 800a826:	dc3c      	bgt.n	800a8a2 <_realloc_r+0x10e>
 800a828:	9a00      	ldr	r2, [sp, #0]
 800a82a:	2101      	movs	r1, #1
 800a82c:	4694      	mov	ip, r2
 800a82e:	1ab6      	subs	r6, r6, r2
 800a830:	0022      	movs	r2, r4
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	430e      	orrs	r6, r1
 800a836:	4463      	add	r3, ip
 800a838:	6083      	str	r3, [r0, #8]
 800a83a:	3a08      	subs	r2, #8
 800a83c:	605e      	str	r6, [r3, #4]
 800a83e:	6853      	ldr	r3, [r2, #4]
 800a840:	9801      	ldr	r0, [sp, #4]
 800a842:	400b      	ands	r3, r1
 800a844:	4661      	mov	r1, ip
 800a846:	430b      	orrs	r3, r1
 800a848:	6053      	str	r3, [r2, #4]
 800a84a:	f7fc fe3d 	bl	80074c8 <__malloc_unlock>
 800a84e:	0027      	movs	r7, r4
 800a850:	e7aa      	b.n	800a7a8 <_realloc_r+0x14>
 800a852:	42b1      	cmp	r1, r6
 800a854:	dc25      	bgt.n	800a8a2 <_realloc_r+0x10e>
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	6093      	str	r3, [r2, #8]
 800a85e:	9b00      	ldr	r3, [sp, #0]
 800a860:	9a02      	ldr	r2, [sp, #8]
 800a862:	1af4      	subs	r4, r6, r3
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	1992      	adds	r2, r2, r6
 800a868:	6858      	ldr	r0, [r3, #4]
 800a86a:	2301      	movs	r3, #1
 800a86c:	4018      	ands	r0, r3
 800a86e:	2c0f      	cmp	r4, #15
 800a870:	d800      	bhi.n	800a874 <_realloc_r+0xe0>
 800a872:	e12c      	b.n	800aace <_realloc_r+0x33a>
 800a874:	9d00      	ldr	r5, [sp, #0]
 800a876:	9902      	ldr	r1, [sp, #8]
 800a878:	4328      	orrs	r0, r5
 800a87a:	1949      	adds	r1, r1, r5
 800a87c:	9d02      	ldr	r5, [sp, #8]
 800a87e:	431c      	orrs	r4, r3
 800a880:	6068      	str	r0, [r5, #4]
 800a882:	604c      	str	r4, [r1, #4]
 800a884:	6850      	ldr	r0, [r2, #4]
 800a886:	3108      	adds	r1, #8
 800a888:	4303      	orrs	r3, r0
 800a88a:	6053      	str	r3, [r2, #4]
 800a88c:	9801      	ldr	r0, [sp, #4]
 800a88e:	f7fd f881 	bl	8007994 <_free_r>
 800a892:	9801      	ldr	r0, [sp, #4]
 800a894:	f7fc fe18 	bl	80074c8 <__malloc_unlock>
 800a898:	9f02      	ldr	r7, [sp, #8]
 800a89a:	3708      	adds	r7, #8
 800a89c:	e784      	b.n	800a7a8 <_realloc_r+0x14>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	0013      	movs	r3, r2
 800a8a2:	07ff      	lsls	r7, r7, #31
 800a8a4:	d500      	bpl.n	800a8a8 <_realloc_r+0x114>
 800a8a6:	e0c6      	b.n	800aa36 <_realloc_r+0x2a2>
 800a8a8:	0021      	movs	r1, r4
 800a8aa:	2003      	movs	r0, #3
 800a8ac:	3908      	subs	r1, #8
 800a8ae:	680d      	ldr	r5, [r1, #0]
 800a8b0:	9904      	ldr	r1, [sp, #16]
 800a8b2:	1b4d      	subs	r5, r1, r5
 800a8b4:	6869      	ldr	r1, [r5, #4]
 800a8b6:	4381      	bics	r1, r0
 800a8b8:	9803      	ldr	r0, [sp, #12]
 800a8ba:	180f      	adds	r7, r1, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d100      	bne.n	800a8c2 <_realloc_r+0x12e>
 800a8c0:	e084      	b.n	800a9cc <_realloc_r+0x238>
 800a8c2:	19d6      	adds	r6, r2, r7
 800a8c4:	459c      	cmp	ip, r3
 800a8c6:	d148      	bne.n	800a95a <_realloc_r+0x1c6>
 800a8c8:	9b00      	ldr	r3, [sp, #0]
 800a8ca:	3310      	adds	r3, #16
 800a8cc:	42b3      	cmp	r3, r6
 800a8ce:	dc7d      	bgt.n	800a9cc <_realloc_r+0x238>
 800a8d0:	68aa      	ldr	r2, [r5, #8]
 800a8d2:	68eb      	ldr	r3, [r5, #12]
 800a8d4:	002f      	movs	r7, r5
 800a8d6:	60d3      	str	r3, [r2, #12]
 800a8d8:	609a      	str	r2, [r3, #8]
 800a8da:	0002      	movs	r2, r0
 800a8dc:	3a04      	subs	r2, #4
 800a8de:	3708      	adds	r7, #8
 800a8e0:	2a24      	cmp	r2, #36	; 0x24
 800a8e2:	d835      	bhi.n	800a950 <_realloc_r+0x1bc>
 800a8e4:	003b      	movs	r3, r7
 800a8e6:	2a13      	cmp	r2, #19
 800a8e8:	d908      	bls.n	800a8fc <_realloc_r+0x168>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	60ab      	str	r3, [r5, #8]
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	60eb      	str	r3, [r5, #12]
 800a8f2:	2a1b      	cmp	r2, #27
 800a8f4:	d81a      	bhi.n	800a92c <_realloc_r+0x198>
 800a8f6:	002b      	movs	r3, r5
 800a8f8:	3408      	adds	r4, #8
 800a8fa:	3310      	adds	r3, #16
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	6862      	ldr	r2, [r4, #4]
 800a902:	605a      	str	r2, [r3, #4]
 800a904:	68a2      	ldr	r2, [r4, #8]
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	9b00      	ldr	r3, [sp, #0]
 800a90a:	4a74      	ldr	r2, [pc, #464]	; (800aadc <_realloc_r+0x348>)
 800a90c:	18eb      	adds	r3, r5, r3
 800a90e:	6093      	str	r3, [r2, #8]
 800a910:	9a00      	ldr	r2, [sp, #0]
 800a912:	1ab6      	subs	r6, r6, r2
 800a914:	2201      	movs	r2, #1
 800a916:	4316      	orrs	r6, r2
 800a918:	605e      	str	r6, [r3, #4]
 800a91a:	686b      	ldr	r3, [r5, #4]
 800a91c:	4013      	ands	r3, r2
 800a91e:	9a00      	ldr	r2, [sp, #0]
 800a920:	4313      	orrs	r3, r2
 800a922:	606b      	str	r3, [r5, #4]
 800a924:	9801      	ldr	r0, [sp, #4]
 800a926:	f7fc fdcf 	bl	80074c8 <__malloc_unlock>
 800a92a:	e73d      	b.n	800a7a8 <_realloc_r+0x14>
 800a92c:	68a3      	ldr	r3, [r4, #8]
 800a92e:	612b      	str	r3, [r5, #16]
 800a930:	68e3      	ldr	r3, [r4, #12]
 800a932:	616b      	str	r3, [r5, #20]
 800a934:	2a24      	cmp	r2, #36	; 0x24
 800a936:	d003      	beq.n	800a940 <_realloc_r+0x1ac>
 800a938:	002b      	movs	r3, r5
 800a93a:	3410      	adds	r4, #16
 800a93c:	3318      	adds	r3, #24
 800a93e:	e7dd      	b.n	800a8fc <_realloc_r+0x168>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	61ab      	str	r3, [r5, #24]
 800a944:	002b      	movs	r3, r5
 800a946:	6962      	ldr	r2, [r4, #20]
 800a948:	3320      	adds	r3, #32
 800a94a:	61ea      	str	r2, [r5, #28]
 800a94c:	3418      	adds	r4, #24
 800a94e:	e7d5      	b.n	800a8fc <_realloc_r+0x168>
 800a950:	0021      	movs	r1, r4
 800a952:	0038      	movs	r0, r7
 800a954:	f001 f8c7 	bl	800bae6 <memmove>
 800a958:	e7d6      	b.n	800a908 <_realloc_r+0x174>
 800a95a:	9a00      	ldr	r2, [sp, #0]
 800a95c:	42b2      	cmp	r2, r6
 800a95e:	dc35      	bgt.n	800a9cc <_realloc_r+0x238>
 800a960:	0028      	movs	r0, r5
 800a962:	68da      	ldr	r2, [r3, #12]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	3008      	adds	r0, #8
 800a968:	60da      	str	r2, [r3, #12]
 800a96a:	6093      	str	r3, [r2, #8]
 800a96c:	68aa      	ldr	r2, [r5, #8]
 800a96e:	68eb      	ldr	r3, [r5, #12]
 800a970:	60d3      	str	r3, [r2, #12]
 800a972:	609a      	str	r2, [r3, #8]
 800a974:	9a03      	ldr	r2, [sp, #12]
 800a976:	3a04      	subs	r2, #4
 800a978:	2a24      	cmp	r2, #36	; 0x24
 800a97a:	d823      	bhi.n	800a9c4 <_realloc_r+0x230>
 800a97c:	2a13      	cmp	r2, #19
 800a97e:	d907      	bls.n	800a990 <_realloc_r+0x1fc>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	60ab      	str	r3, [r5, #8]
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	60eb      	str	r3, [r5, #12]
 800a988:	2a1b      	cmp	r2, #27
 800a98a:	d809      	bhi.n	800a9a0 <_realloc_r+0x20c>
 800a98c:	3408      	adds	r4, #8
 800a98e:	3008      	adds	r0, #8
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	6003      	str	r3, [r0, #0]
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	6043      	str	r3, [r0, #4]
 800a998:	68a3      	ldr	r3, [r4, #8]
 800a99a:	6083      	str	r3, [r0, #8]
 800a99c:	9502      	str	r5, [sp, #8]
 800a99e:	e75e      	b.n	800a85e <_realloc_r+0xca>
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	612b      	str	r3, [r5, #16]
 800a9a4:	68e3      	ldr	r3, [r4, #12]
 800a9a6:	616b      	str	r3, [r5, #20]
 800a9a8:	2a24      	cmp	r2, #36	; 0x24
 800a9aa:	d003      	beq.n	800a9b4 <_realloc_r+0x220>
 800a9ac:	0028      	movs	r0, r5
 800a9ae:	3410      	adds	r4, #16
 800a9b0:	3018      	adds	r0, #24
 800a9b2:	e7ed      	b.n	800a990 <_realloc_r+0x1fc>
 800a9b4:	0028      	movs	r0, r5
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	3020      	adds	r0, #32
 800a9ba:	61ab      	str	r3, [r5, #24]
 800a9bc:	6963      	ldr	r3, [r4, #20]
 800a9be:	3418      	adds	r4, #24
 800a9c0:	61eb      	str	r3, [r5, #28]
 800a9c2:	e7e5      	b.n	800a990 <_realloc_r+0x1fc>
 800a9c4:	0021      	movs	r1, r4
 800a9c6:	f001 f88e 	bl	800bae6 <memmove>
 800a9ca:	e7e7      	b.n	800a99c <_realloc_r+0x208>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	42bb      	cmp	r3, r7
 800a9d0:	dc31      	bgt.n	800aa36 <_realloc_r+0x2a2>
 800a9d2:	0028      	movs	r0, r5
 800a9d4:	68aa      	ldr	r2, [r5, #8]
 800a9d6:	68eb      	ldr	r3, [r5, #12]
 800a9d8:	3008      	adds	r0, #8
 800a9da:	60d3      	str	r3, [r2, #12]
 800a9dc:	609a      	str	r2, [r3, #8]
 800a9de:	9a03      	ldr	r2, [sp, #12]
 800a9e0:	3a04      	subs	r2, #4
 800a9e2:	2a24      	cmp	r2, #36	; 0x24
 800a9e4:	d823      	bhi.n	800aa2e <_realloc_r+0x29a>
 800a9e6:	2a13      	cmp	r2, #19
 800a9e8:	d907      	bls.n	800a9fa <_realloc_r+0x266>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	60ab      	str	r3, [r5, #8]
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	60eb      	str	r3, [r5, #12]
 800a9f2:	2a1b      	cmp	r2, #27
 800a9f4:	d809      	bhi.n	800aa0a <_realloc_r+0x276>
 800a9f6:	3408      	adds	r4, #8
 800a9f8:	3008      	adds	r0, #8
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	6863      	ldr	r3, [r4, #4]
 800aa00:	6043      	str	r3, [r0, #4]
 800aa02:	68a3      	ldr	r3, [r4, #8]
 800aa04:	6083      	str	r3, [r0, #8]
 800aa06:	003e      	movs	r6, r7
 800aa08:	e7c8      	b.n	800a99c <_realloc_r+0x208>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	612b      	str	r3, [r5, #16]
 800aa0e:	68e3      	ldr	r3, [r4, #12]
 800aa10:	616b      	str	r3, [r5, #20]
 800aa12:	2a24      	cmp	r2, #36	; 0x24
 800aa14:	d003      	beq.n	800aa1e <_realloc_r+0x28a>
 800aa16:	0028      	movs	r0, r5
 800aa18:	3410      	adds	r4, #16
 800aa1a:	3018      	adds	r0, #24
 800aa1c:	e7ed      	b.n	800a9fa <_realloc_r+0x266>
 800aa1e:	0028      	movs	r0, r5
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	3020      	adds	r0, #32
 800aa24:	61ab      	str	r3, [r5, #24]
 800aa26:	6963      	ldr	r3, [r4, #20]
 800aa28:	3418      	adds	r4, #24
 800aa2a:	61eb      	str	r3, [r5, #28]
 800aa2c:	e7e5      	b.n	800a9fa <_realloc_r+0x266>
 800aa2e:	0021      	movs	r1, r4
 800aa30:	f001 f859 	bl	800bae6 <memmove>
 800aa34:	e7e7      	b.n	800aa06 <_realloc_r+0x272>
 800aa36:	9905      	ldr	r1, [sp, #20]
 800aa38:	9801      	ldr	r0, [sp, #4]
 800aa3a:	f7fc fb29 	bl	8007090 <_malloc_r>
 800aa3e:	1e07      	subs	r7, r0, #0
 800aa40:	d100      	bne.n	800aa44 <_realloc_r+0x2b0>
 800aa42:	e76f      	b.n	800a924 <_realloc_r+0x190>
 800aa44:	0023      	movs	r3, r4
 800aa46:	2201      	movs	r2, #1
 800aa48:	3b08      	subs	r3, #8
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4393      	bics	r3, r2
 800aa4e:	9a04      	ldr	r2, [sp, #16]
 800aa50:	18d3      	adds	r3, r2, r3
 800aa52:	0002      	movs	r2, r0
 800aa54:	3a08      	subs	r2, #8
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d105      	bne.n	800aa66 <_realloc_r+0x2d2>
 800aa5a:	685e      	ldr	r6, [r3, #4]
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	439e      	bics	r6, r3
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	18f6      	adds	r6, r6, r3
 800aa64:	e6fb      	b.n	800a85e <_realloc_r+0xca>
 800aa66:	9a03      	ldr	r2, [sp, #12]
 800aa68:	3a04      	subs	r2, #4
 800aa6a:	2a24      	cmp	r2, #36	; 0x24
 800aa6c:	d829      	bhi.n	800aac2 <_realloc_r+0x32e>
 800aa6e:	0003      	movs	r3, r0
 800aa70:	0021      	movs	r1, r4
 800aa72:	2a13      	cmp	r2, #19
 800aa74:	d908      	bls.n	800aa88 <_realloc_r+0x2f4>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	6043      	str	r3, [r0, #4]
 800aa7e:	2a1b      	cmp	r2, #27
 800aa80:	d80d      	bhi.n	800aa9e <_realloc_r+0x30a>
 800aa82:	0003      	movs	r3, r0
 800aa84:	3108      	adds	r1, #8
 800aa86:	3308      	adds	r3, #8
 800aa88:	680a      	ldr	r2, [r1, #0]
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	684a      	ldr	r2, [r1, #4]
 800aa8e:	605a      	str	r2, [r3, #4]
 800aa90:	688a      	ldr	r2, [r1, #8]
 800aa92:	609a      	str	r2, [r3, #8]
 800aa94:	0021      	movs	r1, r4
 800aa96:	9801      	ldr	r0, [sp, #4]
 800aa98:	f7fc ff7c 	bl	8007994 <_free_r>
 800aa9c:	e742      	b.n	800a924 <_realloc_r+0x190>
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	6083      	str	r3, [r0, #8]
 800aaa2:	68e3      	ldr	r3, [r4, #12]
 800aaa4:	60c3      	str	r3, [r0, #12]
 800aaa6:	2a24      	cmp	r2, #36	; 0x24
 800aaa8:	d003      	beq.n	800aab2 <_realloc_r+0x31e>
 800aaaa:	0003      	movs	r3, r0
 800aaac:	3110      	adds	r1, #16
 800aaae:	3310      	adds	r3, #16
 800aab0:	e7ea      	b.n	800aa88 <_realloc_r+0x2f4>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	3118      	adds	r1, #24
 800aab6:	6103      	str	r3, [r0, #16]
 800aab8:	0003      	movs	r3, r0
 800aaba:	6962      	ldr	r2, [r4, #20]
 800aabc:	3318      	adds	r3, #24
 800aabe:	6142      	str	r2, [r0, #20]
 800aac0:	e7e2      	b.n	800aa88 <_realloc_r+0x2f4>
 800aac2:	0021      	movs	r1, r4
 800aac4:	f001 f80f 	bl	800bae6 <memmove>
 800aac8:	e7e4      	b.n	800aa94 <_realloc_r+0x300>
 800aaca:	9e03      	ldr	r6, [sp, #12]
 800aacc:	e6c7      	b.n	800a85e <_realloc_r+0xca>
 800aace:	9902      	ldr	r1, [sp, #8]
 800aad0:	4306      	orrs	r6, r0
 800aad2:	604e      	str	r6, [r1, #4]
 800aad4:	6851      	ldr	r1, [r2, #4]
 800aad6:	430b      	orrs	r3, r1
 800aad8:	6053      	str	r3, [r2, #4]
 800aada:	e6da      	b.n	800a892 <_realloc_r+0xfe>
 800aadc:	20000010 	.word	0x20000010

0800aae0 <fiprintf>:
 800aae0:	b40e      	push	{r1, r2, r3}
 800aae2:	b517      	push	{r0, r1, r2, r4, lr}
 800aae4:	4c05      	ldr	r4, [pc, #20]	; (800aafc <fiprintf+0x1c>)
 800aae6:	ab05      	add	r3, sp, #20
 800aae8:	cb04      	ldmia	r3!, {r2}
 800aaea:	0001      	movs	r1, r0
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	f000 f8be 	bl	800ac70 <_vfiprintf_r>
 800aaf4:	bc1e      	pop	{r1, r2, r3, r4}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	b003      	add	sp, #12
 800aafa:	4718      	bx	r3
 800aafc:	200006b8 	.word	0x200006b8

0800ab00 <__ssprint_r>:
 800ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab02:	6813      	ldr	r3, [r2, #0]
 800ab04:	b087      	sub	sp, #28
 800ab06:	0017      	movs	r7, r2
 800ab08:	9303      	str	r3, [sp, #12]
 800ab0a:	6893      	ldr	r3, [r2, #8]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	000c      	movs	r4, r1
 800ab10:	9005      	str	r0, [sp, #20]
 800ab12:	9202      	str	r2, [sp, #8]
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d10d      	bne.n	800ab36 <__ssprint_r+0x36>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	b007      	add	sp, #28
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	3308      	adds	r3, #8
 800ab34:	9303      	str	r3, [sp, #12]
 800ab36:	9a01      	ldr	r2, [sp, #4]
 800ab38:	68a6      	ldr	r6, [r4, #8]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	2a00      	cmp	r2, #0
 800ab3e:	d0f1      	beq.n	800ab24 <__ssprint_r+0x24>
 800ab40:	42b2      	cmp	r2, r6
 800ab42:	d32e      	bcc.n	800aba2 <__ssprint_r+0xa2>
 800ab44:	2190      	movs	r1, #144	; 0x90
 800ab46:	89a2      	ldrh	r2, [r4, #12]
 800ab48:	00c9      	lsls	r1, r1, #3
 800ab4a:	420a      	tst	r2, r1
 800ab4c:	d029      	beq.n	800aba2 <__ssprint_r+0xa2>
 800ab4e:	2003      	movs	r0, #3
 800ab50:	6921      	ldr	r1, [r4, #16]
 800ab52:	1a5b      	subs	r3, r3, r1
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	6963      	ldr	r3, [r4, #20]
 800ab58:	4343      	muls	r3, r0
 800ab5a:	0fdd      	lsrs	r5, r3, #31
 800ab5c:	18ed      	adds	r5, r5, r3
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	9801      	ldr	r0, [sp, #4]
 800ab62:	3301      	adds	r3, #1
 800ab64:	181b      	adds	r3, r3, r0
 800ab66:	106d      	asrs	r5, r5, #1
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	d900      	bls.n	800ab6e <__ssprint_r+0x6e>
 800ab6c:	001d      	movs	r5, r3
 800ab6e:	0552      	lsls	r2, r2, #21
 800ab70:	d532      	bpl.n	800abd8 <__ssprint_r+0xd8>
 800ab72:	0029      	movs	r1, r5
 800ab74:	9805      	ldr	r0, [sp, #20]
 800ab76:	f7fc fa8b 	bl	8007090 <_malloc_r>
 800ab7a:	1e06      	subs	r6, r0, #0
 800ab7c:	d036      	beq.n	800abec <__ssprint_r+0xec>
 800ab7e:	9a04      	ldr	r2, [sp, #16]
 800ab80:	6921      	ldr	r1, [r4, #16]
 800ab82:	f7fc fe96 	bl	80078b2 <memcpy>
 800ab86:	89a2      	ldrh	r2, [r4, #12]
 800ab88:	4b1e      	ldr	r3, [pc, #120]	; (800ac04 <__ssprint_r+0x104>)
 800ab8a:	401a      	ands	r2, r3
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	6126      	str	r6, [r4, #16]
 800ab96:	18f6      	adds	r6, r6, r3
 800ab98:	6026      	str	r6, [r4, #0]
 800ab9a:	6165      	str	r5, [r4, #20]
 800ab9c:	9e01      	ldr	r6, [sp, #4]
 800ab9e:	1aed      	subs	r5, r5, r3
 800aba0:	60a5      	str	r5, [r4, #8]
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	429e      	cmp	r6, r3
 800aba6:	d900      	bls.n	800abaa <__ssprint_r+0xaa>
 800aba8:	001e      	movs	r6, r3
 800abaa:	0032      	movs	r2, r6
 800abac:	9902      	ldr	r1, [sp, #8]
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f000 ff99 	bl	800bae6 <memmove>
 800abb4:	9a01      	ldr	r2, [sp, #4]
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	4694      	mov	ip, r2
 800abba:	1b9b      	subs	r3, r3, r6
 800abbc:	60a3      	str	r3, [r4, #8]
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	199b      	adds	r3, r3, r6
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	9b02      	ldr	r3, [sp, #8]
 800abc6:	4463      	add	r3, ip
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	1a9b      	subs	r3, r3, r2
 800abce:	60bb      	str	r3, [r7, #8]
 800abd0:	d0a3      	beq.n	800ab1a <__ssprint_r+0x1a>
 800abd2:	2300      	movs	r3, #0
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	e7ae      	b.n	800ab36 <__ssprint_r+0x36>
 800abd8:	002a      	movs	r2, r5
 800abda:	9805      	ldr	r0, [sp, #20]
 800abdc:	f7ff fdda 	bl	800a794 <_realloc_r>
 800abe0:	1e06      	subs	r6, r0, #0
 800abe2:	d1d6      	bne.n	800ab92 <__ssprint_r+0x92>
 800abe4:	6921      	ldr	r1, [r4, #16]
 800abe6:	9805      	ldr	r0, [sp, #20]
 800abe8:	f7fc fed4 	bl	8007994 <_free_r>
 800abec:	230c      	movs	r3, #12
 800abee:	9a05      	ldr	r2, [sp, #20]
 800abf0:	2001      	movs	r0, #1
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	89a2      	ldrh	r2, [r4, #12]
 800abf6:	3334      	adds	r3, #52	; 0x34
 800abf8:	4313      	orrs	r3, r2
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	2300      	movs	r3, #0
 800abfe:	4240      	negs	r0, r0
 800ac00:	60bb      	str	r3, [r7, #8]
 800ac02:	e78b      	b.n	800ab1c <__ssprint_r+0x1c>
 800ac04:	fffffb7f 	.word	0xfffffb7f

0800ac08 <__sprint_r>:
 800ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0a:	6893      	ldr	r3, [r2, #8]
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	000d      	movs	r5, r1
 800ac12:	0014      	movs	r4, r2
 800ac14:	1e18      	subs	r0, r3, #0
 800ac16:	d018      	beq.n	800ac4a <__sprint_r+0x42>
 800ac18:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ac1a:	049b      	lsls	r3, r3, #18
 800ac1c:	d524      	bpl.n	800ac68 <__sprint_r+0x60>
 800ac1e:	6817      	ldr	r7, [r2, #0]
 800ac20:	2600      	movs	r6, #0
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	9302      	str	r3, [sp, #8]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	089b      	lsrs	r3, r3, #2
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	dc0e      	bgt.n	800ac52 <__sprint_r+0x4a>
 800ac34:	2203      	movs	r2, #3
 800ac36:	9b00      	ldr	r3, [sp, #0]
 800ac38:	68a0      	ldr	r0, [r4, #8]
 800ac3a:	4393      	bics	r3, r2
 800ac3c:	1ac0      	subs	r0, r0, r3
 800ac3e:	60a0      	str	r0, [r4, #8]
 800ac40:	3708      	adds	r7, #8
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1ec      	bne.n	800ac20 <__sprint_r+0x18>
 800ac46:	2300      	movs	r3, #0
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	6063      	str	r3, [r4, #4]
 800ac4e:	b005      	add	sp, #20
 800ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac52:	9902      	ldr	r1, [sp, #8]
 800ac54:	00b3      	lsls	r3, r6, #2
 800ac56:	58c9      	ldr	r1, [r1, r3]
 800ac58:	002a      	movs	r2, r5
 800ac5a:	9801      	ldr	r0, [sp, #4]
 800ac5c:	f000 ff1a 	bl	800ba94 <_fputwc_r>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d0f0      	beq.n	800ac46 <__sprint_r+0x3e>
 800ac64:	3601      	adds	r6, #1
 800ac66:	e7e2      	b.n	800ac2e <__sprint_r+0x26>
 800ac68:	9801      	ldr	r0, [sp, #4]
 800ac6a:	f000 fd13 	bl	800b694 <__sfvwrite_r>
 800ac6e:	e7ea      	b.n	800ac46 <__sprint_r+0x3e>

0800ac70 <_vfiprintf_r>:
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac72:	b0c1      	sub	sp, #260	; 0x104
 800ac74:	001c      	movs	r4, r3
 800ac76:	001f      	movs	r7, r3
 800ac78:	9006      	str	r0, [sp, #24]
 800ac7a:	9103      	str	r1, [sp, #12]
 800ac7c:	9207      	str	r2, [sp, #28]
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d004      	beq.n	800ac8c <_vfiprintf_r+0x1c>
 800ac82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <_vfiprintf_r+0x1c>
 800ac88:	f7fc fcb6 	bl	80075f8 <__sinit>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac90:	07db      	lsls	r3, r3, #31
 800ac92:	d407      	bmi.n	800aca4 <_vfiprintf_r+0x34>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	899b      	ldrh	r3, [r3, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d403      	bmi.n	800aca4 <_vfiprintf_r+0x34>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800aca0:	f7fc fdfa 	bl	8007898 <__retarget_lock_acquire_recursive>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	220c      	movs	r2, #12
 800aca8:	5e9a      	ldrsh	r2, [r3, r2]
 800acaa:	2380      	movs	r3, #128	; 0x80
 800acac:	019b      	lsls	r3, r3, #6
 800acae:	421a      	tst	r2, r3
 800acb0:	d107      	bne.n	800acc2 <_vfiprintf_r+0x52>
 800acb2:	4313      	orrs	r3, r2
 800acb4:	9a03      	ldr	r2, [sp, #12]
 800acb6:	8193      	strh	r3, [r2, #12]
 800acb8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800acba:	4aa3      	ldr	r2, [pc, #652]	; (800af48 <_vfiprintf_r+0x2d8>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	9a03      	ldr	r2, [sp, #12]
 800acc0:	6653      	str	r3, [r2, #100]	; 0x64
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	899b      	ldrh	r3, [r3, #12]
 800acc6:	071b      	lsls	r3, r3, #28
 800acc8:	d503      	bpl.n	800acd2 <_vfiprintf_r+0x62>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d118      	bne.n	800ad04 <_vfiprintf_r+0x94>
 800acd2:	9903      	ldr	r1, [sp, #12]
 800acd4:	9806      	ldr	r0, [sp, #24]
 800acd6:	f000 fe3b 	bl	800b950 <__swsetup_r>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d012      	beq.n	800ad04 <_vfiprintf_r+0x94>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace2:	07db      	lsls	r3, r3, #31
 800ace4:	d505      	bpl.n	800acf2 <_vfiprintf_r+0x82>
 800ace6:	2301      	movs	r3, #1
 800ace8:	425b      	negs	r3, r3
 800acea:	9308      	str	r3, [sp, #32]
 800acec:	9808      	ldr	r0, [sp, #32]
 800acee:	b041      	add	sp, #260	; 0x104
 800acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	899b      	ldrh	r3, [r3, #12]
 800acf6:	059b      	lsls	r3, r3, #22
 800acf8:	d4f5      	bmi.n	800ace6 <_vfiprintf_r+0x76>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800acfe:	f7fc fdcc 	bl	800789a <__retarget_lock_release_recursive>
 800ad02:	e7f0      	b.n	800ace6 <_vfiprintf_r+0x76>
 800ad04:	221a      	movs	r2, #26
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	899b      	ldrh	r3, [r3, #12]
 800ad0a:	401a      	ands	r2, r3
 800ad0c:	2a0a      	cmp	r2, #10
 800ad0e:	d116      	bne.n	800ad3e <_vfiprintf_r+0xce>
 800ad10:	9a03      	ldr	r2, [sp, #12]
 800ad12:	210e      	movs	r1, #14
 800ad14:	5e52      	ldrsh	r2, [r2, r1]
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	db11      	blt.n	800ad3e <_vfiprintf_r+0xce>
 800ad1a:	9a03      	ldr	r2, [sp, #12]
 800ad1c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ad1e:	07d2      	lsls	r2, r2, #31
 800ad20:	d405      	bmi.n	800ad2e <_vfiprintf_r+0xbe>
 800ad22:	059b      	lsls	r3, r3, #22
 800ad24:	d403      	bmi.n	800ad2e <_vfiprintf_r+0xbe>
 800ad26:	9b03      	ldr	r3, [sp, #12]
 800ad28:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ad2a:	f7fc fdb6 	bl	800789a <__retarget_lock_release_recursive>
 800ad2e:	0023      	movs	r3, r4
 800ad30:	9a07      	ldr	r2, [sp, #28]
 800ad32:	9903      	ldr	r1, [sp, #12]
 800ad34:	9806      	ldr	r0, [sp, #24]
 800ad36:	f000 fc69 	bl	800b60c <__sbprintf>
 800ad3a:	9008      	str	r0, [sp, #32]
 800ad3c:	e7d6      	b.n	800acec <_vfiprintf_r+0x7c>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	ad17      	add	r5, sp, #92	; 0x5c
 800ad42:	9514      	str	r5, [sp, #80]	; 0x50
 800ad44:	9316      	str	r3, [sp, #88]	; 0x58
 800ad46:	9315      	str	r3, [sp, #84]	; 0x54
 800ad48:	930c      	str	r3, [sp, #48]	; 0x30
 800ad4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ad4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad50:	9308      	str	r3, [sp, #32]
 800ad52:	9c07      	ldr	r4, [sp, #28]
 800ad54:	7823      	ldrb	r3, [r4, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <_vfiprintf_r+0xf0>
 800ad5a:	2b25      	cmp	r3, #37	; 0x25
 800ad5c:	d000      	beq.n	800ad60 <_vfiprintf_r+0xf0>
 800ad5e:	e08d      	b.n	800ae7c <_vfiprintf_r+0x20c>
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	1ae6      	subs	r6, r4, r3
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d016      	beq.n	800ad96 <_vfiprintf_r+0x126>
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad6c:	606e      	str	r6, [r5, #4]
 800ad6e:	199b      	adds	r3, r3, r6
 800ad70:	9316      	str	r3, [sp, #88]	; 0x58
 800ad72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad74:	3508      	adds	r5, #8
 800ad76:	3301      	adds	r3, #1
 800ad78:	9315      	str	r3, [sp, #84]	; 0x54
 800ad7a:	2b07      	cmp	r3, #7
 800ad7c:	dd08      	ble.n	800ad90 <_vfiprintf_r+0x120>
 800ad7e:	9903      	ldr	r1, [sp, #12]
 800ad80:	9806      	ldr	r0, [sp, #24]
 800ad82:	aa14      	add	r2, sp, #80	; 0x50
 800ad84:	f7ff ff40 	bl	800ac08 <__sprint_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d000      	beq.n	800ad8e <_vfiprintf_r+0x11e>
 800ad8c:	e3d9      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800ad8e:	ad17      	add	r5, sp, #92	; 0x5c
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	199b      	adds	r3, r3, r6
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	7823      	ldrb	r3, [r4, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <_vfiprintf_r+0x130>
 800ad9c:	f000 fbf6 	bl	800b58c <_vfiprintf_r+0x91c>
 800ada0:	2200      	movs	r2, #0
 800ada2:	a912      	add	r1, sp, #72	; 0x48
 800ada4:	70ca      	strb	r2, [r1, #3]
 800ada6:	2101      	movs	r1, #1
 800ada8:	1c63      	adds	r3, r4, #1
 800adaa:	0014      	movs	r4, r2
 800adac:	4249      	negs	r1, r1
 800adae:	9105      	str	r1, [sp, #20]
 800adb0:	9209      	str	r2, [sp, #36]	; 0x24
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	9207      	str	r2, [sp, #28]
 800adb8:	0018      	movs	r0, r3
 800adba:	3820      	subs	r0, #32
 800adbc:	285a      	cmp	r0, #90	; 0x5a
 800adbe:	d900      	bls.n	800adc2 <_vfiprintf_r+0x152>
 800adc0:	e362      	b.n	800b488 <_vfiprintf_r+0x818>
 800adc2:	f7f5 f9b1 	bl	8000128 <__gnu_thumb1_case_uhi>
 800adc6:	0078      	.short	0x0078
 800adc8:	03610361 	.word	0x03610361
 800adcc:	03610081 	.word	0x03610081
 800add0:	03610361 	.word	0x03610361
 800add4:	0361005d 	.word	0x0361005d
 800add8:	00830361 	.word	0x00830361
 800addc:	0361008b 	.word	0x0361008b
 800ade0:	008f0089 	.word	0x008f0089
 800ade4:	00ad0361 	.word	0x00ad0361
 800ade8:	00af00af 	.word	0x00af00af
 800adec:	00af00af 	.word	0x00af00af
 800adf0:	00af00af 	.word	0x00af00af
 800adf4:	00af00af 	.word	0x00af00af
 800adf8:	036100af 	.word	0x036100af
 800adfc:	03610361 	.word	0x03610361
 800ae00:	03610361 	.word	0x03610361
 800ae04:	03610361 	.word	0x03610361
 800ae08:	03610361 	.word	0x03610361
 800ae0c:	00e600da 	.word	0x00e600da
 800ae10:	03610361 	.word	0x03610361
 800ae14:	03610361 	.word	0x03610361
 800ae18:	03610361 	.word	0x03610361
 800ae1c:	03610361 	.word	0x03610361
 800ae20:	03610361 	.word	0x03610361
 800ae24:	03610143 	.word	0x03610143
 800ae28:	03610361 	.word	0x03610361
 800ae2c:	03610182 	.word	0x03610182
 800ae30:	0361027c 	.word	0x0361027c
 800ae34:	02ae0361 	.word	0x02ae0361
 800ae38:	03610361 	.word	0x03610361
 800ae3c:	03610361 	.word	0x03610361
 800ae40:	03610361 	.word	0x03610361
 800ae44:	03610361 	.word	0x03610361
 800ae48:	03610361 	.word	0x03610361
 800ae4c:	00e800da 	.word	0x00e800da
 800ae50:	03610361 	.word	0x03610361
 800ae54:	00c30361 	.word	0x00c30361
 800ae58:	00d600e8 	.word	0x00d600e8
 800ae5c:	00cf0361 	.word	0x00cf0361
 800ae60:	01260361 	.word	0x01260361
 800ae64:	01740145 	.word	0x01740145
 800ae68:	036100d6 	.word	0x036100d6
 800ae6c:	007f0182 	.word	0x007f0182
 800ae70:	0361027e 	.word	0x0361027e
 800ae74:	02cd0361 	.word	0x02cd0361
 800ae78:	007f0361 	.word	0x007f0361
 800ae7c:	3401      	adds	r4, #1
 800ae7e:	e769      	b.n	800ad54 <_vfiprintf_r+0xe4>
 800ae80:	9806      	ldr	r0, [sp, #24]
 800ae82:	f7fe fd01 	bl	8009888 <_localeconv_r>
 800ae86:	6843      	ldr	r3, [r0, #4]
 800ae88:	0018      	movs	r0, r3
 800ae8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae8c:	f7f5 f93a 	bl	8000104 <strlen>
 800ae90:	900e      	str	r0, [sp, #56]	; 0x38
 800ae92:	9806      	ldr	r0, [sp, #24]
 800ae94:	f7fe fcf8 	bl	8009888 <_localeconv_r>
 800ae98:	6883      	ldr	r3, [r0, #8]
 800ae9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d010      	beq.n	800aec4 <_vfiprintf_r+0x254>
 800aea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00d      	beq.n	800aec4 <_vfiprintf_r+0x254>
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <_vfiprintf_r+0x254>
 800aeae:	2380      	movs	r3, #128	; 0x80
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	431c      	orrs	r4, r3
 800aeb4:	e006      	b.n	800aec4 <_vfiprintf_r+0x254>
 800aeb6:	ab12      	add	r3, sp, #72	; 0x48
 800aeb8:	78da      	ldrb	r2, [r3, #3]
 800aeba:	3303      	adds	r3, #3
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	d101      	bne.n	800aec4 <_vfiprintf_r+0x254>
 800aec0:	3220      	adds	r2, #32
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	9b07      	ldr	r3, [sp, #28]
 800aec6:	e774      	b.n	800adb2 <_vfiprintf_r+0x142>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e7f2      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800aecc:	cf08      	ldmia	r7!, {r3}
 800aece:	9309      	str	r3, [sp, #36]	; 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	daf7      	bge.n	800aec4 <_vfiprintf_r+0x254>
 800aed4:	425b      	negs	r3, r3
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	2304      	movs	r3, #4
 800aeda:	e7ea      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800aedc:	222b      	movs	r2, #43	; 0x2b
 800aede:	ab12      	add	r3, sp, #72	; 0x48
 800aee0:	70da      	strb	r2, [r3, #3]
 800aee2:	e7ef      	b.n	800aec4 <_vfiprintf_r+0x254>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b2a      	cmp	r3, #42	; 0x2a
 800aeec:	d00f      	beq.n	800af0e <_vfiprintf_r+0x29e>
 800aeee:	2100      	movs	r1, #0
 800aef0:	9105      	str	r1, [sp, #20]
 800aef2:	0019      	movs	r1, r3
 800aef4:	3930      	subs	r1, #48	; 0x30
 800aef6:	9207      	str	r2, [sp, #28]
 800aef8:	2909      	cmp	r1, #9
 800aefa:	d900      	bls.n	800aefe <_vfiprintf_r+0x28e>
 800aefc:	e75c      	b.n	800adb8 <_vfiprintf_r+0x148>
 800aefe:	200a      	movs	r0, #10
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	4343      	muls	r3, r0
 800af04:	185b      	adds	r3, r3, r1
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	7813      	ldrb	r3, [r2, #0]
 800af0a:	3201      	adds	r2, #1
 800af0c:	e7f1      	b.n	800aef2 <_vfiprintf_r+0x282>
 800af0e:	cf08      	ldmia	r7!, {r3}
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	da02      	bge.n	800af1c <_vfiprintf_r+0x2ac>
 800af16:	2301      	movs	r3, #1
 800af18:	425b      	negs	r3, r3
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	9207      	str	r2, [sp, #28]
 800af1e:	e7d1      	b.n	800aec4 <_vfiprintf_r+0x254>
 800af20:	2380      	movs	r3, #128	; 0x80
 800af22:	e7c6      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800af24:	2100      	movs	r1, #0
 800af26:	9a07      	ldr	r2, [sp, #28]
 800af28:	9109      	str	r1, [sp, #36]	; 0x24
 800af2a:	200a      	movs	r0, #10
 800af2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af2e:	3b30      	subs	r3, #48	; 0x30
 800af30:	4341      	muls	r1, r0
 800af32:	185b      	adds	r3, r3, r1
 800af34:	9309      	str	r3, [sp, #36]	; 0x24
 800af36:	0013      	movs	r3, r2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	3201      	adds	r2, #1
 800af3c:	0019      	movs	r1, r3
 800af3e:	3930      	subs	r1, #48	; 0x30
 800af40:	9207      	str	r2, [sp, #28]
 800af42:	2909      	cmp	r1, #9
 800af44:	d9f1      	bls.n	800af2a <_vfiprintf_r+0x2ba>
 800af46:	e737      	b.n	800adb8 <_vfiprintf_r+0x148>
 800af48:	ffffdfff 	.word	0xffffdfff
 800af4c:	9b07      	ldr	r3, [sp, #28]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	2b68      	cmp	r3, #104	; 0x68
 800af52:	d105      	bne.n	800af60 <_vfiprintf_r+0x2f0>
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	3301      	adds	r3, #1
 800af58:	9307      	str	r3, [sp, #28]
 800af5a:	2380      	movs	r3, #128	; 0x80
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	e7a8      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800af60:	2340      	movs	r3, #64	; 0x40
 800af62:	e7a6      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b6c      	cmp	r3, #108	; 0x6c
 800af6a:	d104      	bne.n	800af76 <_vfiprintf_r+0x306>
 800af6c:	9b07      	ldr	r3, [sp, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	9307      	str	r3, [sp, #28]
 800af72:	2320      	movs	r3, #32
 800af74:	e79d      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800af76:	2310      	movs	r3, #16
 800af78:	e79b      	b.n	800aeb2 <_vfiprintf_r+0x242>
 800af7a:	003a      	movs	r2, r7
 800af7c:	ca08      	ldmia	r2!, {r3}
 800af7e:	ae27      	add	r6, sp, #156	; 0x9c
 800af80:	7033      	strb	r3, [r6, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	9204      	str	r2, [sp, #16]
 800af86:	aa12      	add	r2, sp, #72	; 0x48
 800af88:	70d3      	strb	r3, [r2, #3]
 800af8a:	2201      	movs	r2, #1
 800af8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8e:	9205      	str	r2, [sp, #20]
 800af90:	e0b0      	b.n	800b0f4 <_vfiprintf_r+0x484>
 800af92:	2310      	movs	r3, #16
 800af94:	431c      	orrs	r4, r3
 800af96:	06a3      	lsls	r3, r4, #26
 800af98:	d52a      	bpl.n	800aff0 <_vfiprintf_r+0x380>
 800af9a:	2307      	movs	r3, #7
 800af9c:	3707      	adds	r7, #7
 800af9e:	439f      	bics	r7, r3
 800afa0:	0039      	movs	r1, r7
 800afa2:	c90c      	ldmia	r1!, {r2, r3}
 800afa4:	9200      	str	r2, [sp, #0]
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	9104      	str	r1, [sp, #16]
 800afaa:	9a01      	ldr	r2, [sp, #4]
 800afac:	2301      	movs	r3, #1
 800afae:	2a00      	cmp	r2, #0
 800afb0:	da09      	bge.n	800afc6 <_vfiprintf_r+0x356>
 800afb2:	9e00      	ldr	r6, [sp, #0]
 800afb4:	9f01      	ldr	r7, [sp, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	4271      	negs	r1, r6
 800afba:	41ba      	sbcs	r2, r7
 800afbc:	9100      	str	r1, [sp, #0]
 800afbe:	9201      	str	r2, [sp, #4]
 800afc0:	212d      	movs	r1, #45	; 0x2d
 800afc2:	aa12      	add	r2, sp, #72	; 0x48
 800afc4:	70d1      	strb	r1, [r2, #3]
 800afc6:	9901      	ldr	r1, [sp, #4]
 800afc8:	9a00      	ldr	r2, [sp, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	9905      	ldr	r1, [sp, #20]
 800afce:	3101      	adds	r1, #1
 800afd0:	d100      	bne.n	800afd4 <_vfiprintf_r+0x364>
 800afd2:	e2e9      	b.n	800b5a8 <_vfiprintf_r+0x938>
 800afd4:	2180      	movs	r1, #128	; 0x80
 800afd6:	0027      	movs	r7, r4
 800afd8:	438f      	bics	r7, r1
 800afda:	2a00      	cmp	r2, #0
 800afdc:	d000      	beq.n	800afe0 <_vfiprintf_r+0x370>
 800afde:	e2e7      	b.n	800b5b0 <_vfiprintf_r+0x940>
 800afe0:	9a05      	ldr	r2, [sp, #20]
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	d100      	bne.n	800afe8 <_vfiprintf_r+0x378>
 800afe6:	e243      	b.n	800b470 <_vfiprintf_r+0x800>
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d000      	beq.n	800afee <_vfiprintf_r+0x37e>
 800afec:	e2e3      	b.n	800b5b6 <_vfiprintf_r+0x946>
 800afee:	e1e7      	b.n	800b3c0 <_vfiprintf_r+0x750>
 800aff0:	003a      	movs	r2, r7
 800aff2:	ca08      	ldmia	r2!, {r3}
 800aff4:	9204      	str	r2, [sp, #16]
 800aff6:	06e2      	lsls	r2, r4, #27
 800aff8:	d503      	bpl.n	800b002 <_vfiprintf_r+0x392>
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	17db      	asrs	r3, r3, #31
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	e7d3      	b.n	800afaa <_vfiprintf_r+0x33a>
 800b002:	0662      	lsls	r2, r4, #25
 800b004:	d501      	bpl.n	800b00a <_vfiprintf_r+0x39a>
 800b006:	b21b      	sxth	r3, r3
 800b008:	e7f7      	b.n	800affa <_vfiprintf_r+0x38a>
 800b00a:	05a2      	lsls	r2, r4, #22
 800b00c:	d5f5      	bpl.n	800affa <_vfiprintf_r+0x38a>
 800b00e:	b25b      	sxtb	r3, r3
 800b010:	e7f3      	b.n	800affa <_vfiprintf_r+0x38a>
 800b012:	1d3b      	adds	r3, r7, #4
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	06a3      	lsls	r3, r4, #26
 800b018:	d506      	bpl.n	800b028 <_vfiprintf_r+0x3b8>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	9a08      	ldr	r2, [sp, #32]
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	17d2      	asrs	r2, r2, #31
 800b022:	605a      	str	r2, [r3, #4]
 800b024:	9f04      	ldr	r7, [sp, #16]
 800b026:	e694      	b.n	800ad52 <_vfiprintf_r+0xe2>
 800b028:	06e3      	lsls	r3, r4, #27
 800b02a:	d503      	bpl.n	800b034 <_vfiprintf_r+0x3c4>
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	9a08      	ldr	r2, [sp, #32]
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	e7f7      	b.n	800b024 <_vfiprintf_r+0x3b4>
 800b034:	0663      	lsls	r3, r4, #25
 800b036:	d503      	bpl.n	800b040 <_vfiprintf_r+0x3d0>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	9a08      	ldr	r2, [sp, #32]
 800b03c:	801a      	strh	r2, [r3, #0]
 800b03e:	e7f1      	b.n	800b024 <_vfiprintf_r+0x3b4>
 800b040:	05a4      	lsls	r4, r4, #22
 800b042:	d5f3      	bpl.n	800b02c <_vfiprintf_r+0x3bc>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	9a08      	ldr	r2, [sp, #32]
 800b048:	701a      	strb	r2, [r3, #0]
 800b04a:	e7eb      	b.n	800b024 <_vfiprintf_r+0x3b4>
 800b04c:	2310      	movs	r3, #16
 800b04e:	431c      	orrs	r4, r3
 800b050:	2320      	movs	r3, #32
 800b052:	0020      	movs	r0, r4
 800b054:	4018      	ands	r0, r3
 800b056:	421c      	tst	r4, r3
 800b058:	d00d      	beq.n	800b076 <_vfiprintf_r+0x406>
 800b05a:	3b19      	subs	r3, #25
 800b05c:	3707      	adds	r7, #7
 800b05e:	439f      	bics	r7, r3
 800b060:	0039      	movs	r1, r7
 800b062:	c90c      	ldmia	r1!, {r2, r3}
 800b064:	9200      	str	r2, [sp, #0]
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	9104      	str	r1, [sp, #16]
 800b06a:	4bcc      	ldr	r3, [pc, #816]	; (800b39c <_vfiprintf_r+0x72c>)
 800b06c:	401c      	ands	r4, r3
 800b06e:	2300      	movs	r3, #0
 800b070:	2100      	movs	r1, #0
 800b072:	aa12      	add	r2, sp, #72	; 0x48
 800b074:	e7a6      	b.n	800afc4 <_vfiprintf_r+0x354>
 800b076:	003a      	movs	r2, r7
 800b078:	ca08      	ldmia	r2!, {r3}
 800b07a:	0021      	movs	r1, r4
 800b07c:	9204      	str	r2, [sp, #16]
 800b07e:	2210      	movs	r2, #16
 800b080:	4011      	ands	r1, r2
 800b082:	4214      	tst	r4, r2
 800b084:	d002      	beq.n	800b08c <_vfiprintf_r+0x41c>
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	9001      	str	r0, [sp, #4]
 800b08a:	e7ee      	b.n	800b06a <_vfiprintf_r+0x3fa>
 800b08c:	2240      	movs	r2, #64	; 0x40
 800b08e:	0020      	movs	r0, r4
 800b090:	4010      	ands	r0, r2
 800b092:	4214      	tst	r4, r2
 800b094:	d003      	beq.n	800b09e <_vfiprintf_r+0x42e>
 800b096:	b29b      	uxth	r3, r3
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	9101      	str	r1, [sp, #4]
 800b09c:	e7e5      	b.n	800b06a <_vfiprintf_r+0x3fa>
 800b09e:	2280      	movs	r2, #128	; 0x80
 800b0a0:	0021      	movs	r1, r4
 800b0a2:	0092      	lsls	r2, r2, #2
 800b0a4:	4011      	ands	r1, r2
 800b0a6:	4214      	tst	r4, r2
 800b0a8:	d0f6      	beq.n	800b098 <_vfiprintf_r+0x428>
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	e7eb      	b.n	800b086 <_vfiprintf_r+0x416>
 800b0ae:	003b      	movs	r3, r7
 800b0b0:	cb04      	ldmia	r3!, {r2}
 800b0b2:	49bb      	ldr	r1, [pc, #748]	; (800b3a0 <_vfiprintf_r+0x730>)
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	9200      	str	r2, [sp, #0]
 800b0ba:	aa13      	add	r2, sp, #76	; 0x4c
 800b0bc:	8011      	strh	r1, [r2, #0]
 800b0be:	4ab9      	ldr	r2, [pc, #740]	; (800b3a4 <_vfiprintf_r+0x734>)
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	431c      	orrs	r4, r3
 800b0c6:	920c      	str	r2, [sp, #48]	; 0x30
 800b0c8:	e7d2      	b.n	800b070 <_vfiprintf_r+0x400>
 800b0ca:	003b      	movs	r3, r7
 800b0cc:	2700      	movs	r7, #0
 800b0ce:	cb40      	ldmia	r3!, {r6}
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	ab12      	add	r3, sp, #72	; 0x48
 800b0d4:	70df      	strb	r7, [r3, #3]
 800b0d6:	9b05      	ldr	r3, [sp, #20]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	d100      	bne.n	800b0de <_vfiprintf_r+0x46e>
 800b0dc:	e0ea      	b.n	800b2b4 <_vfiprintf_r+0x644>
 800b0de:	0039      	movs	r1, r7
 800b0e0:	0030      	movs	r0, r6
 800b0e2:	9a05      	ldr	r2, [sp, #20]
 800b0e4:	f7fe fbe8 	bl	80098b8 <memchr>
 800b0e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0ea:	42b8      	cmp	r0, r7
 800b0ec:	d002      	beq.n	800b0f4 <_vfiprintf_r+0x484>
 800b0ee:	1b83      	subs	r3, r0, r6
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	970b      	str	r7, [sp, #44]	; 0x2c
 800b0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f6:	9a05      	ldr	r2, [sp, #20]
 800b0f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	da00      	bge.n	800b100 <_vfiprintf_r+0x490>
 800b0fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b100:	ab12      	add	r3, sp, #72	; 0x48
 800b102:	3303      	adds	r3, #3
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	1e5a      	subs	r2, r3, #1
 800b108:	4193      	sbcs	r3, r2
 800b10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10c:	18d3      	adds	r3, r2, r3
 800b10e:	930a      	str	r3, [sp, #40]	; 0x28
 800b110:	0022      	movs	r2, r4
 800b112:	2302      	movs	r3, #2
 800b114:	401a      	ands	r2, r3
 800b116:	9210      	str	r2, [sp, #64]	; 0x40
 800b118:	421c      	tst	r4, r3
 800b11a:	d002      	beq.n	800b122 <_vfiprintf_r+0x4b2>
 800b11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11e:	3302      	adds	r3, #2
 800b120:	930a      	str	r3, [sp, #40]	; 0x28
 800b122:	2384      	movs	r3, #132	; 0x84
 800b124:	0022      	movs	r2, r4
 800b126:	401a      	ands	r2, r3
 800b128:	9211      	str	r2, [sp, #68]	; 0x44
 800b12a:	421c      	tst	r4, r3
 800b12c:	d11e      	bne.n	800b16c <_vfiprintf_r+0x4fc>
 800b12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b132:	1a9f      	subs	r7, r3, r2
 800b134:	2f00      	cmp	r7, #0
 800b136:	dd19      	ble.n	800b16c <_vfiprintf_r+0x4fc>
 800b138:	0029      	movs	r1, r5
 800b13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b13c:	489a      	ldr	r0, [pc, #616]	; (800b3a8 <_vfiprintf_r+0x738>)
 800b13e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b140:	3301      	adds	r3, #1
 800b142:	3108      	adds	r1, #8
 800b144:	6028      	str	r0, [r5, #0]
 800b146:	2f10      	cmp	r7, #16
 800b148:	dd00      	ble.n	800b14c <_vfiprintf_r+0x4dc>
 800b14a:	e1a7      	b.n	800b49c <_vfiprintf_r+0x82c>
 800b14c:	606f      	str	r7, [r5, #4]
 800b14e:	18bf      	adds	r7, r7, r2
 800b150:	000d      	movs	r5, r1
 800b152:	9716      	str	r7, [sp, #88]	; 0x58
 800b154:	9315      	str	r3, [sp, #84]	; 0x54
 800b156:	2b07      	cmp	r3, #7
 800b158:	dd08      	ble.n	800b16c <_vfiprintf_r+0x4fc>
 800b15a:	9903      	ldr	r1, [sp, #12]
 800b15c:	9806      	ldr	r0, [sp, #24]
 800b15e:	aa14      	add	r2, sp, #80	; 0x50
 800b160:	f7ff fd52 	bl	800ac08 <__sprint_r>
 800b164:	2800      	cmp	r0, #0
 800b166:	d000      	beq.n	800b16a <_vfiprintf_r+0x4fa>
 800b168:	e1eb      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b16a:	ad17      	add	r5, sp, #92	; 0x5c
 800b16c:	a912      	add	r1, sp, #72	; 0x48
 800b16e:	78c8      	ldrb	r0, [r1, #3]
 800b170:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b174:	3103      	adds	r1, #3
 800b176:	2800      	cmp	r0, #0
 800b178:	d012      	beq.n	800b1a0 <_vfiprintf_r+0x530>
 800b17a:	6029      	str	r1, [r5, #0]
 800b17c:	2101      	movs	r1, #1
 800b17e:	3301      	adds	r3, #1
 800b180:	1852      	adds	r2, r2, r1
 800b182:	6069      	str	r1, [r5, #4]
 800b184:	9216      	str	r2, [sp, #88]	; 0x58
 800b186:	9315      	str	r3, [sp, #84]	; 0x54
 800b188:	3508      	adds	r5, #8
 800b18a:	2b07      	cmp	r3, #7
 800b18c:	dd08      	ble.n	800b1a0 <_vfiprintf_r+0x530>
 800b18e:	9903      	ldr	r1, [sp, #12]
 800b190:	9806      	ldr	r0, [sp, #24]
 800b192:	aa14      	add	r2, sp, #80	; 0x50
 800b194:	f7ff fd38 	bl	800ac08 <__sprint_r>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d000      	beq.n	800b19e <_vfiprintf_r+0x52e>
 800b19c:	e1d1      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b19e:	ad17      	add	r5, sp, #92	; 0x5c
 800b1a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b1a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d013      	beq.n	800b1d2 <_vfiprintf_r+0x562>
 800b1aa:	a913      	add	r1, sp, #76	; 0x4c
 800b1ac:	6029      	str	r1, [r5, #0]
 800b1ae:	2102      	movs	r1, #2
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	1852      	adds	r2, r2, r1
 800b1b4:	6069      	str	r1, [r5, #4]
 800b1b6:	9216      	str	r2, [sp, #88]	; 0x58
 800b1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800b1ba:	3508      	adds	r5, #8
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	dd08      	ble.n	800b1d2 <_vfiprintf_r+0x562>
 800b1c0:	9903      	ldr	r1, [sp, #12]
 800b1c2:	9806      	ldr	r0, [sp, #24]
 800b1c4:	aa14      	add	r2, sp, #80	; 0x50
 800b1c6:	f7ff fd1f 	bl	800ac08 <__sprint_r>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d000      	beq.n	800b1d0 <_vfiprintf_r+0x560>
 800b1ce:	e1b8      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b1d0:	ad17      	add	r5, sp, #92	; 0x5c
 800b1d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d4:	2b80      	cmp	r3, #128	; 0x80
 800b1d6:	d11e      	bne.n	800b216 <_vfiprintf_r+0x5a6>
 800b1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1dc:	1a9f      	subs	r7, r3, r2
 800b1de:	2f00      	cmp	r7, #0
 800b1e0:	dd19      	ble.n	800b216 <_vfiprintf_r+0x5a6>
 800b1e2:	0029      	movs	r1, r5
 800b1e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e6:	4871      	ldr	r0, [pc, #452]	; (800b3ac <_vfiprintf_r+0x73c>)
 800b1e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	3108      	adds	r1, #8
 800b1ee:	6028      	str	r0, [r5, #0]
 800b1f0:	2f10      	cmp	r7, #16
 800b1f2:	dd00      	ble.n	800b1f6 <_vfiprintf_r+0x586>
 800b1f4:	e164      	b.n	800b4c0 <_vfiprintf_r+0x850>
 800b1f6:	606f      	str	r7, [r5, #4]
 800b1f8:	18bf      	adds	r7, r7, r2
 800b1fa:	000d      	movs	r5, r1
 800b1fc:	9716      	str	r7, [sp, #88]	; 0x58
 800b1fe:	9315      	str	r3, [sp, #84]	; 0x54
 800b200:	2b07      	cmp	r3, #7
 800b202:	dd08      	ble.n	800b216 <_vfiprintf_r+0x5a6>
 800b204:	9903      	ldr	r1, [sp, #12]
 800b206:	9806      	ldr	r0, [sp, #24]
 800b208:	aa14      	add	r2, sp, #80	; 0x50
 800b20a:	f7ff fcfd 	bl	800ac08 <__sprint_r>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d000      	beq.n	800b214 <_vfiprintf_r+0x5a4>
 800b212:	e196      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b214:	ad17      	add	r5, sp, #92	; 0x5c
 800b216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b218:	9a05      	ldr	r2, [sp, #20]
 800b21a:	1a9f      	subs	r7, r3, r2
 800b21c:	2f00      	cmp	r7, #0
 800b21e:	dd19      	ble.n	800b254 <_vfiprintf_r+0x5e4>
 800b220:	0029      	movs	r1, r5
 800b222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b224:	4861      	ldr	r0, [pc, #388]	; (800b3ac <_vfiprintf_r+0x73c>)
 800b226:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b228:	3301      	adds	r3, #1
 800b22a:	3108      	adds	r1, #8
 800b22c:	6028      	str	r0, [r5, #0]
 800b22e:	2f10      	cmp	r7, #16
 800b230:	dd00      	ble.n	800b234 <_vfiprintf_r+0x5c4>
 800b232:	e157      	b.n	800b4e4 <_vfiprintf_r+0x874>
 800b234:	606f      	str	r7, [r5, #4]
 800b236:	18bf      	adds	r7, r7, r2
 800b238:	000d      	movs	r5, r1
 800b23a:	9716      	str	r7, [sp, #88]	; 0x58
 800b23c:	9315      	str	r3, [sp, #84]	; 0x54
 800b23e:	2b07      	cmp	r3, #7
 800b240:	dd08      	ble.n	800b254 <_vfiprintf_r+0x5e4>
 800b242:	9903      	ldr	r1, [sp, #12]
 800b244:	9806      	ldr	r0, [sp, #24]
 800b246:	aa14      	add	r2, sp, #80	; 0x50
 800b248:	f7ff fcde 	bl	800ac08 <__sprint_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d000      	beq.n	800b252 <_vfiprintf_r+0x5e2>
 800b250:	e177      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b252:	ad17      	add	r5, sp, #92	; 0x5c
 800b254:	9b05      	ldr	r3, [sp, #20]
 800b256:	9a05      	ldr	r2, [sp, #20]
 800b258:	606b      	str	r3, [r5, #4]
 800b25a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b25c:	602e      	str	r6, [r5, #0]
 800b25e:	189b      	adds	r3, r3, r2
 800b260:	9316      	str	r3, [sp, #88]	; 0x58
 800b262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b264:	3508      	adds	r5, #8
 800b266:	3301      	adds	r3, #1
 800b268:	9315      	str	r3, [sp, #84]	; 0x54
 800b26a:	2b07      	cmp	r3, #7
 800b26c:	dd08      	ble.n	800b280 <_vfiprintf_r+0x610>
 800b26e:	9903      	ldr	r1, [sp, #12]
 800b270:	9806      	ldr	r0, [sp, #24]
 800b272:	aa14      	add	r2, sp, #80	; 0x50
 800b274:	f7ff fcc8 	bl	800ac08 <__sprint_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d000      	beq.n	800b27e <_vfiprintf_r+0x60e>
 800b27c:	e161      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b27e:	ad17      	add	r5, sp, #92	; 0x5c
 800b280:	0764      	lsls	r4, r4, #29
 800b282:	d500      	bpl.n	800b286 <_vfiprintf_r+0x616>
 800b284:	e140      	b.n	800b508 <_vfiprintf_r+0x898>
 800b286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	4293      	cmp	r3, r2
 800b28c:	da00      	bge.n	800b290 <_vfiprintf_r+0x620>
 800b28e:	0013      	movs	r3, r2
 800b290:	9a08      	ldr	r2, [sp, #32]
 800b292:	18d3      	adds	r3, r2, r3
 800b294:	9308      	str	r3, [sp, #32]
 800b296:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <_vfiprintf_r+0x63c>
 800b29c:	9903      	ldr	r1, [sp, #12]
 800b29e:	9806      	ldr	r0, [sp, #24]
 800b2a0:	aa14      	add	r2, sp, #80	; 0x50
 800b2a2:	f7ff fcb1 	bl	800ac08 <__sprint_r>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d000      	beq.n	800b2ac <_vfiprintf_r+0x63c>
 800b2aa:	e14a      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	ad17      	add	r5, sp, #92	; 0x5c
 800b2b0:	9315      	str	r3, [sp, #84]	; 0x54
 800b2b2:	e6b7      	b.n	800b024 <_vfiprintf_r+0x3b4>
 800b2b4:	0030      	movs	r0, r6
 800b2b6:	f7f4 ff25 	bl	8000104 <strlen>
 800b2ba:	9005      	str	r0, [sp, #20]
 800b2bc:	e719      	b.n	800b0f2 <_vfiprintf_r+0x482>
 800b2be:	2310      	movs	r3, #16
 800b2c0:	431c      	orrs	r4, r3
 800b2c2:	2320      	movs	r3, #32
 800b2c4:	0020      	movs	r0, r4
 800b2c6:	4018      	ands	r0, r3
 800b2c8:	421c      	tst	r4, r3
 800b2ca:	d009      	beq.n	800b2e0 <_vfiprintf_r+0x670>
 800b2cc:	3b19      	subs	r3, #25
 800b2ce:	3707      	adds	r7, #7
 800b2d0:	439f      	bics	r7, r3
 800b2d2:	0039      	movs	r1, r7
 800b2d4:	c90c      	ldmia	r1!, {r2, r3}
 800b2d6:	9200      	str	r2, [sp, #0]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	9104      	str	r1, [sp, #16]
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e6c7      	b.n	800b070 <_vfiprintf_r+0x400>
 800b2e0:	003b      	movs	r3, r7
 800b2e2:	cb04      	ldmia	r3!, {r2}
 800b2e4:	0021      	movs	r1, r4
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	4019      	ands	r1, r3
 800b2ec:	421c      	tst	r4, r3
 800b2ee:	d003      	beq.n	800b2f8 <_vfiprintf_r+0x688>
 800b2f0:	9200      	str	r2, [sp, #0]
 800b2f2:	9001      	str	r0, [sp, #4]
 800b2f4:	3b0f      	subs	r3, #15
 800b2f6:	e6bb      	b.n	800b070 <_vfiprintf_r+0x400>
 800b2f8:	2340      	movs	r3, #64	; 0x40
 800b2fa:	0020      	movs	r0, r4
 800b2fc:	4018      	ands	r0, r3
 800b2fe:	421c      	tst	r4, r3
 800b300:	d003      	beq.n	800b30a <_vfiprintf_r+0x69a>
 800b302:	b293      	uxth	r3, r2
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	9101      	str	r1, [sp, #4]
 800b308:	e7e8      	b.n	800b2dc <_vfiprintf_r+0x66c>
 800b30a:	2380      	movs	r3, #128	; 0x80
 800b30c:	0021      	movs	r1, r4
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4019      	ands	r1, r3
 800b312:	421c      	tst	r4, r3
 800b314:	d003      	beq.n	800b31e <_vfiprintf_r+0x6ae>
 800b316:	b2d3      	uxtb	r3, r2
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	9001      	str	r0, [sp, #4]
 800b31c:	e7de      	b.n	800b2dc <_vfiprintf_r+0x66c>
 800b31e:	9200      	str	r2, [sp, #0]
 800b320:	e7f1      	b.n	800b306 <_vfiprintf_r+0x696>
 800b322:	4a23      	ldr	r2, [pc, #140]	; (800b3b0 <_vfiprintf_r+0x740>)
 800b324:	0020      	movs	r0, r4
 800b326:	920c      	str	r2, [sp, #48]	; 0x30
 800b328:	2220      	movs	r2, #32
 800b32a:	4010      	ands	r0, r2
 800b32c:	4214      	tst	r4, r2
 800b32e:	d019      	beq.n	800b364 <_vfiprintf_r+0x6f4>
 800b330:	3a19      	subs	r2, #25
 800b332:	3707      	adds	r7, #7
 800b334:	4397      	bics	r7, r2
 800b336:	0038      	movs	r0, r7
 800b338:	c806      	ldmia	r0!, {r1, r2}
 800b33a:	9100      	str	r1, [sp, #0]
 800b33c:	9201      	str	r2, [sp, #4]
 800b33e:	9004      	str	r0, [sp, #16]
 800b340:	07e2      	lsls	r2, r4, #31
 800b342:	d509      	bpl.n	800b358 <_vfiprintf_r+0x6e8>
 800b344:	9a00      	ldr	r2, [sp, #0]
 800b346:	9901      	ldr	r1, [sp, #4]
 800b348:	430a      	orrs	r2, r1
 800b34a:	d005      	beq.n	800b358 <_vfiprintf_r+0x6e8>
 800b34c:	aa13      	add	r2, sp, #76	; 0x4c
 800b34e:	2130      	movs	r1, #48	; 0x30
 800b350:	7053      	strb	r3, [r2, #1]
 800b352:	2302      	movs	r3, #2
 800b354:	7011      	strb	r1, [r2, #0]
 800b356:	431c      	orrs	r4, r3
 800b358:	4b10      	ldr	r3, [pc, #64]	; (800b39c <_vfiprintf_r+0x72c>)
 800b35a:	401c      	ands	r4, r3
 800b35c:	2302      	movs	r3, #2
 800b35e:	e687      	b.n	800b070 <_vfiprintf_r+0x400>
 800b360:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <_vfiprintf_r+0x734>)
 800b362:	e7df      	b.n	800b324 <_vfiprintf_r+0x6b4>
 800b364:	0039      	movs	r1, r7
 800b366:	c904      	ldmia	r1!, {r2}
 800b368:	0026      	movs	r6, r4
 800b36a:	9104      	str	r1, [sp, #16]
 800b36c:	2110      	movs	r1, #16
 800b36e:	400e      	ands	r6, r1
 800b370:	420c      	tst	r4, r1
 800b372:	d002      	beq.n	800b37a <_vfiprintf_r+0x70a>
 800b374:	9200      	str	r2, [sp, #0]
 800b376:	9001      	str	r0, [sp, #4]
 800b378:	e7e2      	b.n	800b340 <_vfiprintf_r+0x6d0>
 800b37a:	2140      	movs	r1, #64	; 0x40
 800b37c:	0020      	movs	r0, r4
 800b37e:	4008      	ands	r0, r1
 800b380:	420c      	tst	r4, r1
 800b382:	d003      	beq.n	800b38c <_vfiprintf_r+0x71c>
 800b384:	b292      	uxth	r2, r2
 800b386:	9200      	str	r2, [sp, #0]
 800b388:	9601      	str	r6, [sp, #4]
 800b38a:	e7d9      	b.n	800b340 <_vfiprintf_r+0x6d0>
 800b38c:	2180      	movs	r1, #128	; 0x80
 800b38e:	0026      	movs	r6, r4
 800b390:	0089      	lsls	r1, r1, #2
 800b392:	400e      	ands	r6, r1
 800b394:	420c      	tst	r4, r1
 800b396:	d0f6      	beq.n	800b386 <_vfiprintf_r+0x716>
 800b398:	b2d2      	uxtb	r2, r2
 800b39a:	e7eb      	b.n	800b374 <_vfiprintf_r+0x704>
 800b39c:	fffffbff 	.word	0xfffffbff
 800b3a0:	00007830 	.word	0x00007830
 800b3a4:	0800c26c 	.word	0x0800c26c
 800b3a8:	0800c351 	.word	0x0800c351
 800b3ac:	0800c361 	.word	0x0800c361
 800b3b0:	0800c27d 	.word	0x0800c27d
 800b3b4:	9b01      	ldr	r3, [sp, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <_vfiprintf_r+0x75e>
 800b3ba:	9b00      	ldr	r3, [sp, #0]
 800b3bc:	2b09      	cmp	r3, #9
 800b3be:	d806      	bhi.n	800b3ce <_vfiprintf_r+0x75e>
 800b3c0:	26b7      	movs	r6, #183	; 0xb7
 800b3c2:	ab12      	add	r3, sp, #72	; 0x48
 800b3c4:	18f6      	adds	r6, r6, r3
 800b3c6:	9b00      	ldr	r3, [sp, #0]
 800b3c8:	3330      	adds	r3, #48	; 0x30
 800b3ca:	7033      	strb	r3, [r6, #0]
 800b3cc:	e115      	b.n	800b5fa <_vfiprintf_r+0x98a>
 800b3ce:	2380      	movs	r3, #128	; 0x80
 800b3d0:	2400      	movs	r4, #0
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	403b      	ands	r3, r7
 800b3d6:	ae40      	add	r6, sp, #256	; 0x100
 800b3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3da:	220a      	movs	r2, #10
 800b3dc:	9800      	ldr	r0, [sp, #0]
 800b3de:	9901      	ldr	r1, [sp, #4]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f7f5 f85f 	bl	80004a4 <__aeabi_uldivmod>
 800b3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e8:	3e01      	subs	r6, #1
 800b3ea:	3230      	adds	r2, #48	; 0x30
 800b3ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3ee:	9110      	str	r1, [sp, #64]	; 0x40
 800b3f0:	7032      	strb	r2, [r6, #0]
 800b3f2:	3401      	adds	r4, #1
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01a      	beq.n	800b42e <_vfiprintf_r+0x7be>
 800b3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	d116      	bne.n	800b42e <_vfiprintf_r+0x7be>
 800b400:	2cff      	cmp	r4, #255	; 0xff
 800b402:	d014      	beq.n	800b42e <_vfiprintf_r+0x7be>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <_vfiprintf_r+0x7a0>
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	2b09      	cmp	r3, #9
 800b40e:	d90e      	bls.n	800b42e <_vfiprintf_r+0x7be>
 800b410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b414:	1af6      	subs	r6, r6, r3
 800b416:	001a      	movs	r2, r3
 800b418:	0030      	movs	r0, r6
 800b41a:	f7fc f995 	bl	8007748 <strncpy>
 800b41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b420:	2400      	movs	r4, #0
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	1e5a      	subs	r2, r3, #1
 800b426:	4193      	sbcs	r3, r2
 800b428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b42a:	18d3      	adds	r3, r2, r3
 800b42c:	930d      	str	r3, [sp, #52]	; 0x34
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <_vfiprintf_r+0x7cc>
 800b434:	9b00      	ldr	r3, [sp, #0]
 800b436:	2b09      	cmp	r3, #9
 800b438:	d800      	bhi.n	800b43c <_vfiprintf_r+0x7cc>
 800b43a:	e0de      	b.n	800b5fa <_vfiprintf_r+0x98a>
 800b43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	e7c9      	b.n	800b3da <_vfiprintf_r+0x76a>
 800b446:	200f      	movs	r0, #15
 800b448:	9b00      	ldr	r3, [sp, #0]
 800b44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b44c:	4003      	ands	r3, r0
 800b44e:	5cd3      	ldrb	r3, [r2, r3]
 800b450:	3e01      	subs	r6, #1
 800b452:	7033      	strb	r3, [r6, #0]
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	0719      	lsls	r1, r3, #28
 800b458:	9b00      	ldr	r3, [sp, #0]
 800b45a:	091a      	lsrs	r2, r3, #4
 800b45c:	9b01      	ldr	r3, [sp, #4]
 800b45e:	4311      	orrs	r1, r2
 800b460:	091b      	lsrs	r3, r3, #4
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	000b      	movs	r3, r1
 800b466:	9a01      	ldr	r2, [sp, #4]
 800b468:	9100      	str	r1, [sp, #0]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	d1ec      	bne.n	800b448 <_vfiprintf_r+0x7d8>
 800b46e:	e0c4      	b.n	800b5fa <_vfiprintf_r+0x98a>
 800b470:	ae40      	add	r6, sp, #256	; 0x100
 800b472:	2b00      	cmp	r3, #0
 800b474:	d000      	beq.n	800b478 <_vfiprintf_r+0x808>
 800b476:	e0c0      	b.n	800b5fa <_vfiprintf_r+0x98a>
 800b478:	07e4      	lsls	r4, r4, #31
 800b47a:	d400      	bmi.n	800b47e <_vfiprintf_r+0x80e>
 800b47c:	e0bd      	b.n	800b5fa <_vfiprintf_r+0x98a>
 800b47e:	26b7      	movs	r6, #183	; 0xb7
 800b480:	ab12      	add	r3, sp, #72	; 0x48
 800b482:	18f6      	adds	r6, r6, r3
 800b484:	2330      	movs	r3, #48	; 0x30
 800b486:	e7a0      	b.n	800b3ca <_vfiprintf_r+0x75a>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d100      	bne.n	800b48e <_vfiprintf_r+0x81e>
 800b48c:	e07e      	b.n	800b58c <_vfiprintf_r+0x91c>
 800b48e:	ae27      	add	r6, sp, #156	; 0x9c
 800b490:	7033      	strb	r3, [r6, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	aa12      	add	r2, sp, #72	; 0x48
 800b496:	70d3      	strb	r3, [r2, #3]
 800b498:	9704      	str	r7, [sp, #16]
 800b49a:	e576      	b.n	800af8a <_vfiprintf_r+0x31a>
 800b49c:	2010      	movs	r0, #16
 800b49e:	1812      	adds	r2, r2, r0
 800b4a0:	6068      	str	r0, [r5, #4]
 800b4a2:	9216      	str	r2, [sp, #88]	; 0x58
 800b4a4:	9315      	str	r3, [sp, #84]	; 0x54
 800b4a6:	2b07      	cmp	r3, #7
 800b4a8:	dd07      	ble.n	800b4ba <_vfiprintf_r+0x84a>
 800b4aa:	9903      	ldr	r1, [sp, #12]
 800b4ac:	9806      	ldr	r0, [sp, #24]
 800b4ae:	aa14      	add	r2, sp, #80	; 0x50
 800b4b0:	f7ff fbaa 	bl	800ac08 <__sprint_r>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d144      	bne.n	800b542 <_vfiprintf_r+0x8d2>
 800b4b8:	a917      	add	r1, sp, #92	; 0x5c
 800b4ba:	000d      	movs	r5, r1
 800b4bc:	3f10      	subs	r7, #16
 800b4be:	e63b      	b.n	800b138 <_vfiprintf_r+0x4c8>
 800b4c0:	2010      	movs	r0, #16
 800b4c2:	1812      	adds	r2, r2, r0
 800b4c4:	6068      	str	r0, [r5, #4]
 800b4c6:	9216      	str	r2, [sp, #88]	; 0x58
 800b4c8:	9315      	str	r3, [sp, #84]	; 0x54
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	dd07      	ble.n	800b4de <_vfiprintf_r+0x86e>
 800b4ce:	9903      	ldr	r1, [sp, #12]
 800b4d0:	9806      	ldr	r0, [sp, #24]
 800b4d2:	aa14      	add	r2, sp, #80	; 0x50
 800b4d4:	f7ff fb98 	bl	800ac08 <__sprint_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d132      	bne.n	800b542 <_vfiprintf_r+0x8d2>
 800b4dc:	a917      	add	r1, sp, #92	; 0x5c
 800b4de:	000d      	movs	r5, r1
 800b4e0:	3f10      	subs	r7, #16
 800b4e2:	e67e      	b.n	800b1e2 <_vfiprintf_r+0x572>
 800b4e4:	2010      	movs	r0, #16
 800b4e6:	1812      	adds	r2, r2, r0
 800b4e8:	6068      	str	r0, [r5, #4]
 800b4ea:	9216      	str	r2, [sp, #88]	; 0x58
 800b4ec:	9315      	str	r3, [sp, #84]	; 0x54
 800b4ee:	2b07      	cmp	r3, #7
 800b4f0:	dd07      	ble.n	800b502 <_vfiprintf_r+0x892>
 800b4f2:	9903      	ldr	r1, [sp, #12]
 800b4f4:	9806      	ldr	r0, [sp, #24]
 800b4f6:	aa14      	add	r2, sp, #80	; 0x50
 800b4f8:	f7ff fb86 	bl	800ac08 <__sprint_r>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d120      	bne.n	800b542 <_vfiprintf_r+0x8d2>
 800b500:	a917      	add	r1, sp, #92	; 0x5c
 800b502:	000d      	movs	r5, r1
 800b504:	3f10      	subs	r7, #16
 800b506:	e68b      	b.n	800b220 <_vfiprintf_r+0x5b0>
 800b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b50c:	2610      	movs	r6, #16
 800b50e:	1a9c      	subs	r4, r3, r2
 800b510:	2c00      	cmp	r4, #0
 800b512:	dc00      	bgt.n	800b516 <_vfiprintf_r+0x8a6>
 800b514:	e6b7      	b.n	800b286 <_vfiprintf_r+0x616>
 800b516:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b518:	4a3b      	ldr	r2, [pc, #236]	; (800b608 <_vfiprintf_r+0x998>)
 800b51a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b51c:	3101      	adds	r1, #1
 800b51e:	602a      	str	r2, [r5, #0]
 800b520:	2c10      	cmp	r4, #16
 800b522:	dc22      	bgt.n	800b56a <_vfiprintf_r+0x8fa>
 800b524:	606c      	str	r4, [r5, #4]
 800b526:	18e4      	adds	r4, r4, r3
 800b528:	9416      	str	r4, [sp, #88]	; 0x58
 800b52a:	9115      	str	r1, [sp, #84]	; 0x54
 800b52c:	2907      	cmp	r1, #7
 800b52e:	dc00      	bgt.n	800b532 <_vfiprintf_r+0x8c2>
 800b530:	e6a9      	b.n	800b286 <_vfiprintf_r+0x616>
 800b532:	9903      	ldr	r1, [sp, #12]
 800b534:	9806      	ldr	r0, [sp, #24]
 800b536:	aa14      	add	r2, sp, #80	; 0x50
 800b538:	f7ff fb66 	bl	800ac08 <__sprint_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d100      	bne.n	800b542 <_vfiprintf_r+0x8d2>
 800b540:	e6a1      	b.n	800b286 <_vfiprintf_r+0x616>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b546:	07db      	lsls	r3, r3, #31
 800b548:	d407      	bmi.n	800b55a <_vfiprintf_r+0x8ea>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	899b      	ldrh	r3, [r3, #12]
 800b54e:	059b      	lsls	r3, r3, #22
 800b550:	d403      	bmi.n	800b55a <_vfiprintf_r+0x8ea>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b556:	f7fc f9a0 	bl	800789a <__retarget_lock_release_recursive>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	065b      	lsls	r3, r3, #25
 800b560:	d401      	bmi.n	800b566 <_vfiprintf_r+0x8f6>
 800b562:	f7ff fbc3 	bl	800acec <_vfiprintf_r+0x7c>
 800b566:	f7ff fbbe 	bl	800ace6 <_vfiprintf_r+0x76>
 800b56a:	3310      	adds	r3, #16
 800b56c:	606e      	str	r6, [r5, #4]
 800b56e:	9316      	str	r3, [sp, #88]	; 0x58
 800b570:	9115      	str	r1, [sp, #84]	; 0x54
 800b572:	3508      	adds	r5, #8
 800b574:	2907      	cmp	r1, #7
 800b576:	dd07      	ble.n	800b588 <_vfiprintf_r+0x918>
 800b578:	9903      	ldr	r1, [sp, #12]
 800b57a:	9806      	ldr	r0, [sp, #24]
 800b57c:	aa14      	add	r2, sp, #80	; 0x50
 800b57e:	f7ff fb43 	bl	800ac08 <__sprint_r>
 800b582:	2800      	cmp	r0, #0
 800b584:	d1dd      	bne.n	800b542 <_vfiprintf_r+0x8d2>
 800b586:	ad17      	add	r5, sp, #92	; 0x5c
 800b588:	3c10      	subs	r4, #16
 800b58a:	e7c4      	b.n	800b516 <_vfiprintf_r+0x8a6>
 800b58c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <_vfiprintf_r+0x928>
 800b592:	2300      	movs	r3, #0
 800b594:	9315      	str	r3, [sp, #84]	; 0x54
 800b596:	e7d4      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b598:	9903      	ldr	r1, [sp, #12]
 800b59a:	9806      	ldr	r0, [sp, #24]
 800b59c:	aa14      	add	r2, sp, #80	; 0x50
 800b59e:	f7ff fb33 	bl	800ac08 <__sprint_r>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0f5      	beq.n	800b592 <_vfiprintf_r+0x922>
 800b5a6:	e7cc      	b.n	800b542 <_vfiprintf_r+0x8d2>
 800b5a8:	0027      	movs	r7, r4
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	d100      	bne.n	800b5b0 <_vfiprintf_r+0x940>
 800b5ae:	e51b      	b.n	800afe8 <_vfiprintf_r+0x378>
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d100      	bne.n	800b5b6 <_vfiprintf_r+0x946>
 800b5b4:	e6fe      	b.n	800b3b4 <_vfiprintf_r+0x744>
 800b5b6:	ae40      	add	r6, sp, #256	; 0x100
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d100      	bne.n	800b5be <_vfiprintf_r+0x94e>
 800b5bc:	e743      	b.n	800b446 <_vfiprintf_r+0x7d6>
 800b5be:	2307      	movs	r3, #7
 800b5c0:	469c      	mov	ip, r3
 800b5c2:	4663      	mov	r3, ip
 800b5c4:	9900      	ldr	r1, [sp, #0]
 800b5c6:	0032      	movs	r2, r6
 800b5c8:	400b      	ands	r3, r1
 800b5ca:	9901      	ldr	r1, [sp, #4]
 800b5cc:	3e01      	subs	r6, #1
 800b5ce:	074c      	lsls	r4, r1, #29
 800b5d0:	9900      	ldr	r1, [sp, #0]
 800b5d2:	3330      	adds	r3, #48	; 0x30
 800b5d4:	08c8      	lsrs	r0, r1, #3
 800b5d6:	9901      	ldr	r1, [sp, #4]
 800b5d8:	4304      	orrs	r4, r0
 800b5da:	08c9      	lsrs	r1, r1, #3
 800b5dc:	9101      	str	r1, [sp, #4]
 800b5de:	0021      	movs	r1, r4
 800b5e0:	9801      	ldr	r0, [sp, #4]
 800b5e2:	7033      	strb	r3, [r6, #0]
 800b5e4:	9400      	str	r4, [sp, #0]
 800b5e6:	4301      	orrs	r1, r0
 800b5e8:	d1eb      	bne.n	800b5c2 <_vfiprintf_r+0x952>
 800b5ea:	07f9      	lsls	r1, r7, #31
 800b5ec:	d505      	bpl.n	800b5fa <_vfiprintf_r+0x98a>
 800b5ee:	2b30      	cmp	r3, #48	; 0x30
 800b5f0:	d003      	beq.n	800b5fa <_vfiprintf_r+0x98a>
 800b5f2:	2330      	movs	r3, #48	; 0x30
 800b5f4:	3e01      	subs	r6, #1
 800b5f6:	7033      	strb	r3, [r6, #0]
 800b5f8:	1e96      	subs	r6, r2, #2
 800b5fa:	9b05      	ldr	r3, [sp, #20]
 800b5fc:	003c      	movs	r4, r7
 800b5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b600:	ab40      	add	r3, sp, #256	; 0x100
 800b602:	1b9b      	subs	r3, r3, r6
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	e575      	b.n	800b0f4 <_vfiprintf_r+0x484>
 800b608:	0800c351 	.word	0x0800c351

0800b60c <__sbprintf>:
 800b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60e:	0015      	movs	r5, r2
 800b610:	2202      	movs	r2, #2
 800b612:	4c1e      	ldr	r4, [pc, #120]	; (800b68c <__sbprintf+0x80>)
 800b614:	001f      	movs	r7, r3
 800b616:	898b      	ldrh	r3, [r1, #12]
 800b618:	44a5      	add	sp, r4
 800b61a:	4393      	bics	r3, r2
 800b61c:	466a      	mov	r2, sp
 800b61e:	8193      	strh	r3, [r2, #12]
 800b620:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b622:	0006      	movs	r6, r0
 800b624:	9319      	str	r3, [sp, #100]	; 0x64
 800b626:	89cb      	ldrh	r3, [r1, #14]
 800b628:	a816      	add	r0, sp, #88	; 0x58
 800b62a:	81d3      	strh	r3, [r2, #14]
 800b62c:	69cb      	ldr	r3, [r1, #28]
 800b62e:	000c      	movs	r4, r1
 800b630:	9307      	str	r3, [sp, #28]
 800b632:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b634:	9309      	str	r3, [sp, #36]	; 0x24
 800b636:	ab1a      	add	r3, sp, #104	; 0x68
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	2380      	movs	r3, #128	; 0x80
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	9302      	str	r3, [sp, #8]
 800b642:	9305      	str	r3, [sp, #20]
 800b644:	2300      	movs	r3, #0
 800b646:	9306      	str	r3, [sp, #24]
 800b648:	f7fc f924 	bl	8007894 <__retarget_lock_init_recursive>
 800b64c:	002a      	movs	r2, r5
 800b64e:	003b      	movs	r3, r7
 800b650:	4669      	mov	r1, sp
 800b652:	0030      	movs	r0, r6
 800b654:	f7ff fb0c 	bl	800ac70 <_vfiprintf_r>
 800b658:	1e05      	subs	r5, r0, #0
 800b65a:	db07      	blt.n	800b66c <__sbprintf+0x60>
 800b65c:	4669      	mov	r1, sp
 800b65e:	0030      	movs	r0, r6
 800b660:	f7fe f8ec 	bl	800983c <_fflush_r>
 800b664:	2800      	cmp	r0, #0
 800b666:	d001      	beq.n	800b66c <__sbprintf+0x60>
 800b668:	2501      	movs	r5, #1
 800b66a:	426d      	negs	r5, r5
 800b66c:	466b      	mov	r3, sp
 800b66e:	899a      	ldrh	r2, [r3, #12]
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	421a      	tst	r2, r3
 800b674:	d002      	beq.n	800b67c <__sbprintf+0x70>
 800b676:	89a2      	ldrh	r2, [r4, #12]
 800b678:	4313      	orrs	r3, r2
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b67e:	f7fc f90a 	bl	8007896 <__retarget_lock_close_recursive>
 800b682:	0028      	movs	r0, r5
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <__sbprintf+0x84>)
 800b686:	449d      	add	sp, r3
 800b688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68a:	46c0      	nop			; (mov r8, r8)
 800b68c:	fffffb94 	.word	0xfffffb94
 800b690:	0000046c 	.word	0x0000046c

0800b694 <__sfvwrite_r>:
 800b694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b696:	6893      	ldr	r3, [r2, #8]
 800b698:	b087      	sub	sp, #28
 800b69a:	000c      	movs	r4, r1
 800b69c:	9002      	str	r0, [sp, #8]
 800b69e:	9204      	str	r2, [sp, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <__sfvwrite_r+0x16>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	b007      	add	sp, #28
 800b6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6aa:	898b      	ldrh	r3, [r1, #12]
 800b6ac:	071b      	lsls	r3, r3, #28
 800b6ae:	d557      	bpl.n	800b760 <__sfvwrite_r+0xcc>
 800b6b0:	690b      	ldr	r3, [r1, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d054      	beq.n	800b760 <__sfvwrite_r+0xcc>
 800b6b6:	9b04      	ldr	r3, [sp, #16]
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	001f      	movs	r7, r3
 800b6c2:	4017      	ands	r7, r2
 800b6c4:	4213      	tst	r3, r2
 800b6c6:	d171      	bne.n	800b7ac <__sfvwrite_r+0x118>
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	401a      	ands	r2, r3
 800b6ce:	420b      	tst	r3, r1
 800b6d0:	d100      	bne.n	800b6d4 <__sfvwrite_r+0x40>
 800b6d2:	e0a5      	b.n	800b820 <__sfvwrite_r+0x18c>
 800b6d4:	0038      	movs	r0, r7
 800b6d6:	003e      	movs	r6, r7
 800b6d8:	9703      	str	r7, [sp, #12]
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d100      	bne.n	800b6e2 <__sfvwrite_r+0x4e>
 800b6e0:	e10b      	b.n	800b8fa <__sfvwrite_r+0x266>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d10a      	bne.n	800b6fc <__sfvwrite_r+0x68>
 800b6e6:	001a      	movs	r2, r3
 800b6e8:	210a      	movs	r1, #10
 800b6ea:	0030      	movs	r0, r6
 800b6ec:	f7fe f8e4 	bl	80098b8 <memchr>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	1c5f      	adds	r7, r3, #1
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d001      	beq.n	800b6fc <__sfvwrite_r+0x68>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	1b87      	subs	r7, r0, r6
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	9705      	str	r7, [sp, #20]
 800b700:	429f      	cmp	r7, r3
 800b702:	d900      	bls.n	800b706 <__sfvwrite_r+0x72>
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	68a5      	ldr	r5, [r4, #8]
 800b70c:	6963      	ldr	r3, [r4, #20]
 800b70e:	4290      	cmp	r0, r2
 800b710:	d800      	bhi.n	800b714 <__sfvwrite_r+0x80>
 800b712:	e0fb      	b.n	800b90c <__sfvwrite_r+0x278>
 800b714:	9a05      	ldr	r2, [sp, #20]
 800b716:	18ed      	adds	r5, r5, r3
 800b718:	42aa      	cmp	r2, r5
 800b71a:	dc00      	bgt.n	800b71e <__sfvwrite_r+0x8a>
 800b71c:	e0f6      	b.n	800b90c <__sfvwrite_r+0x278>
 800b71e:	0031      	movs	r1, r6
 800b720:	002a      	movs	r2, r5
 800b722:	f000 f9e0 	bl	800bae6 <memmove>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	0021      	movs	r1, r4
 800b72a:	195b      	adds	r3, r3, r5
 800b72c:	9802      	ldr	r0, [sp, #8]
 800b72e:	6023      	str	r3, [r4, #0]
 800b730:	f7fe f884 	bl	800983c <_fflush_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	d16e      	bne.n	800b816 <__sfvwrite_r+0x182>
 800b738:	2001      	movs	r0, #1
 800b73a:	1b7f      	subs	r7, r7, r5
 800b73c:	d105      	bne.n	800b74a <__sfvwrite_r+0xb6>
 800b73e:	0021      	movs	r1, r4
 800b740:	9802      	ldr	r0, [sp, #8]
 800b742:	f7fe f87b 	bl	800983c <_fflush_r>
 800b746:	2800      	cmp	r0, #0
 800b748:	d165      	bne.n	800b816 <__sfvwrite_r+0x182>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	9a04      	ldr	r2, [sp, #16]
 800b74e:	1b5b      	subs	r3, r3, r5
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	1976      	adds	r6, r6, r5
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	1b5b      	subs	r3, r3, r5
 800b75a:	6093      	str	r3, [r2, #8]
 800b75c:	d1bd      	bne.n	800b6da <__sfvwrite_r+0x46>
 800b75e:	e7a1      	b.n	800b6a4 <__sfvwrite_r+0x10>
 800b760:	0021      	movs	r1, r4
 800b762:	9802      	ldr	r0, [sp, #8]
 800b764:	f000 f8f4 	bl	800b950 <__swsetup_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0a4      	beq.n	800b6b6 <__sfvwrite_r+0x22>
 800b76c:	2001      	movs	r0, #1
 800b76e:	4240      	negs	r0, r0
 800b770:	e799      	b.n	800b6a6 <__sfvwrite_r+0x12>
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	681e      	ldr	r6, [r3, #0]
 800b776:	685d      	ldr	r5, [r3, #4]
 800b778:	3308      	adds	r3, #8
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b77e:	69e1      	ldr	r1, [r4, #28]
 800b780:	2d00      	cmp	r5, #0
 800b782:	d0f6      	beq.n	800b772 <__sfvwrite_r+0xde>
 800b784:	4a6e      	ldr	r2, [pc, #440]	; (800b940 <__sfvwrite_r+0x2ac>)
 800b786:	002b      	movs	r3, r5
 800b788:	4295      	cmp	r5, r2
 800b78a:	d900      	bls.n	800b78e <__sfvwrite_r+0xfa>
 800b78c:	0013      	movs	r3, r2
 800b78e:	0032      	movs	r2, r6
 800b790:	9802      	ldr	r0, [sp, #8]
 800b792:	47b8      	blx	r7
 800b794:	2800      	cmp	r0, #0
 800b796:	dd3e      	ble.n	800b816 <__sfvwrite_r+0x182>
 800b798:	9b04      	ldr	r3, [sp, #16]
 800b79a:	9a04      	ldr	r2, [sp, #16]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	1836      	adds	r6, r6, r0
 800b7a0:	1a1b      	subs	r3, r3, r0
 800b7a2:	1a2d      	subs	r5, r5, r0
 800b7a4:	6093      	str	r3, [r2, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e8      	bne.n	800b77c <__sfvwrite_r+0xe8>
 800b7aa:	e77b      	b.n	800b6a4 <__sfvwrite_r+0x10>
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	0035      	movs	r5, r6
 800b7b0:	e7e4      	b.n	800b77c <__sfvwrite_r+0xe8>
 800b7b2:	9b01      	ldr	r3, [sp, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	9303      	str	r3, [sp, #12]
 800b7b8:	9b01      	ldr	r3, [sp, #4]
 800b7ba:	685d      	ldr	r5, [r3, #4]
 800b7bc:	3308      	adds	r3, #8
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	220c      	movs	r2, #12
 800b7c2:	5ea3      	ldrsh	r3, [r4, r2]
 800b7c4:	6820      	ldr	r0, [r4, #0]
 800b7c6:	68a6      	ldr	r6, [r4, #8]
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	d0f2      	beq.n	800b7b2 <__sfvwrite_r+0x11e>
 800b7cc:	2180      	movs	r1, #128	; 0x80
 800b7ce:	0089      	lsls	r1, r1, #2
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	420b      	tst	r3, r1
 800b7d4:	d062      	beq.n	800b89c <__sfvwrite_r+0x208>
 800b7d6:	42ae      	cmp	r6, r5
 800b7d8:	d837      	bhi.n	800b84a <__sfvwrite_r+0x1b6>
 800b7da:	2390      	movs	r3, #144	; 0x90
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	421a      	tst	r2, r3
 800b7e0:	d033      	beq.n	800b84a <__sfvwrite_r+0x1b6>
 800b7e2:	6921      	ldr	r1, [r4, #16]
 800b7e4:	1a43      	subs	r3, r0, r1
 800b7e6:	2003      	movs	r0, #3
 800b7e8:	9305      	str	r3, [sp, #20]
 800b7ea:	6963      	ldr	r3, [r4, #20]
 800b7ec:	4343      	muls	r3, r0
 800b7ee:	0fdf      	lsrs	r7, r3, #31
 800b7f0:	18ff      	adds	r7, r7, r3
 800b7f2:	9b05      	ldr	r3, [sp, #20]
 800b7f4:	107f      	asrs	r7, r7, #1
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	195b      	adds	r3, r3, r5
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	d900      	bls.n	800b800 <__sfvwrite_r+0x16c>
 800b7fe:	001f      	movs	r7, r3
 800b800:	0552      	lsls	r2, r2, #21
 800b802:	d53c      	bpl.n	800b87e <__sfvwrite_r+0x1ea>
 800b804:	0039      	movs	r1, r7
 800b806:	9802      	ldr	r0, [sp, #8]
 800b808:	f7fb fc42 	bl	8007090 <_malloc_r>
 800b80c:	1e06      	subs	r6, r0, #0
 800b80e:	d10a      	bne.n	800b826 <__sfvwrite_r+0x192>
 800b810:	230c      	movs	r3, #12
 800b812:	9a02      	ldr	r2, [sp, #8]
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	2340      	movs	r3, #64	; 0x40
 800b818:	89a2      	ldrh	r2, [r4, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	81a3      	strh	r3, [r4, #12]
 800b81e:	e7a5      	b.n	800b76c <__sfvwrite_r+0xd8>
 800b820:	0015      	movs	r5, r2
 800b822:	9203      	str	r2, [sp, #12]
 800b824:	e7cc      	b.n	800b7c0 <__sfvwrite_r+0x12c>
 800b826:	9a05      	ldr	r2, [sp, #20]
 800b828:	6921      	ldr	r1, [r4, #16]
 800b82a:	f7fc f842 	bl	80078b2 <memcpy>
 800b82e:	89a2      	ldrh	r2, [r4, #12]
 800b830:	4b44      	ldr	r3, [pc, #272]	; (800b944 <__sfvwrite_r+0x2b0>)
 800b832:	401a      	ands	r2, r3
 800b834:	2380      	movs	r3, #128	; 0x80
 800b836:	4313      	orrs	r3, r2
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	6126      	str	r6, [r4, #16]
 800b83e:	18f6      	adds	r6, r6, r3
 800b840:	6026      	str	r6, [r4, #0]
 800b842:	002e      	movs	r6, r5
 800b844:	6167      	str	r7, [r4, #20]
 800b846:	1aff      	subs	r7, r7, r3
 800b848:	60a7      	str	r7, [r4, #8]
 800b84a:	002f      	movs	r7, r5
 800b84c:	42ae      	cmp	r6, r5
 800b84e:	d900      	bls.n	800b852 <__sfvwrite_r+0x1be>
 800b850:	002e      	movs	r6, r5
 800b852:	0032      	movs	r2, r6
 800b854:	9903      	ldr	r1, [sp, #12]
 800b856:	6820      	ldr	r0, [r4, #0]
 800b858:	f000 f945 	bl	800bae6 <memmove>
 800b85c:	68a3      	ldr	r3, [r4, #8]
 800b85e:	1b9b      	subs	r3, r3, r6
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	199b      	adds	r3, r3, r6
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	9a04      	ldr	r2, [sp, #16]
 800b86c:	19db      	adds	r3, r3, r7
 800b86e:	9303      	str	r3, [sp, #12]
 800b870:	9b04      	ldr	r3, [sp, #16]
 800b872:	1bed      	subs	r5, r5, r7
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	1bdb      	subs	r3, r3, r7
 800b878:	6093      	str	r3, [r2, #8]
 800b87a:	d1a1      	bne.n	800b7c0 <__sfvwrite_r+0x12c>
 800b87c:	e712      	b.n	800b6a4 <__sfvwrite_r+0x10>
 800b87e:	003a      	movs	r2, r7
 800b880:	9802      	ldr	r0, [sp, #8]
 800b882:	f7fe ff87 	bl	800a794 <_realloc_r>
 800b886:	1e06      	subs	r6, r0, #0
 800b888:	d1d7      	bne.n	800b83a <__sfvwrite_r+0x1a6>
 800b88a:	6921      	ldr	r1, [r4, #16]
 800b88c:	9802      	ldr	r0, [sp, #8]
 800b88e:	f7fc f881 	bl	8007994 <_free_r>
 800b892:	2280      	movs	r2, #128	; 0x80
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	4393      	bics	r3, r2
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	e7b9      	b.n	800b810 <__sfvwrite_r+0x17c>
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	4283      	cmp	r3, r0
 800b8a0:	d302      	bcc.n	800b8a8 <__sfvwrite_r+0x214>
 800b8a2:	6967      	ldr	r7, [r4, #20]
 800b8a4:	42af      	cmp	r7, r5
 800b8a6:	d916      	bls.n	800b8d6 <__sfvwrite_r+0x242>
 800b8a8:	42ae      	cmp	r6, r5
 800b8aa:	d900      	bls.n	800b8ae <__sfvwrite_r+0x21a>
 800b8ac:	002e      	movs	r6, r5
 800b8ae:	0032      	movs	r2, r6
 800b8b0:	9903      	ldr	r1, [sp, #12]
 800b8b2:	f000 f918 	bl	800bae6 <memmove>
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	1b9b      	subs	r3, r3, r6
 800b8bc:	1992      	adds	r2, r2, r6
 800b8be:	0037      	movs	r7, r6
 800b8c0:	60a3      	str	r3, [r4, #8]
 800b8c2:	6022      	str	r2, [r4, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1cf      	bne.n	800b868 <__sfvwrite_r+0x1d4>
 800b8c8:	0021      	movs	r1, r4
 800b8ca:	9802      	ldr	r0, [sp, #8]
 800b8cc:	f7fd ffb6 	bl	800983c <_fflush_r>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d0c9      	beq.n	800b868 <__sfvwrite_r+0x1d4>
 800b8d4:	e79f      	b.n	800b816 <__sfvwrite_r+0x182>
 800b8d6:	4b1c      	ldr	r3, [pc, #112]	; (800b948 <__sfvwrite_r+0x2b4>)
 800b8d8:	0028      	movs	r0, r5
 800b8da:	429d      	cmp	r5, r3
 800b8dc:	d900      	bls.n	800b8e0 <__sfvwrite_r+0x24c>
 800b8de:	481b      	ldr	r0, [pc, #108]	; (800b94c <__sfvwrite_r+0x2b8>)
 800b8e0:	0039      	movs	r1, r7
 800b8e2:	f7f4 fcb5 	bl	8000250 <__divsi3>
 800b8e6:	003b      	movs	r3, r7
 800b8e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8ea:	4343      	muls	r3, r0
 800b8ec:	9a03      	ldr	r2, [sp, #12]
 800b8ee:	69e1      	ldr	r1, [r4, #28]
 800b8f0:	9802      	ldr	r0, [sp, #8]
 800b8f2:	47b0      	blx	r6
 800b8f4:	1e07      	subs	r7, r0, #0
 800b8f6:	dcb7      	bgt.n	800b868 <__sfvwrite_r+0x1d4>
 800b8f8:	e78d      	b.n	800b816 <__sfvwrite_r+0x182>
 800b8fa:	9b01      	ldr	r3, [sp, #4]
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	681e      	ldr	r6, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	9303      	str	r3, [sp, #12]
 800b904:	9b01      	ldr	r3, [sp, #4]
 800b906:	3308      	adds	r3, #8
 800b908:	9301      	str	r3, [sp, #4]
 800b90a:	e6e6      	b.n	800b6da <__sfvwrite_r+0x46>
 800b90c:	9a05      	ldr	r2, [sp, #20]
 800b90e:	4293      	cmp	r3, r2
 800b910:	dc08      	bgt.n	800b924 <__sfvwrite_r+0x290>
 800b912:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b914:	0032      	movs	r2, r6
 800b916:	69e1      	ldr	r1, [r4, #28]
 800b918:	9802      	ldr	r0, [sp, #8]
 800b91a:	47a8      	blx	r5
 800b91c:	1e05      	subs	r5, r0, #0
 800b91e:	dd00      	ble.n	800b922 <__sfvwrite_r+0x28e>
 800b920:	e70a      	b.n	800b738 <__sfvwrite_r+0xa4>
 800b922:	e778      	b.n	800b816 <__sfvwrite_r+0x182>
 800b924:	9a05      	ldr	r2, [sp, #20]
 800b926:	0031      	movs	r1, r6
 800b928:	f000 f8dd 	bl	800bae6 <memmove>
 800b92c:	9a05      	ldr	r2, [sp, #20]
 800b92e:	68a3      	ldr	r3, [r4, #8]
 800b930:	0015      	movs	r5, r2
 800b932:	1a9b      	subs	r3, r3, r2
 800b934:	60a3      	str	r3, [r4, #8]
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	189b      	adds	r3, r3, r2
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	e6fc      	b.n	800b738 <__sfvwrite_r+0xa4>
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	7ffffc00 	.word	0x7ffffc00
 800b944:	fffffb7f 	.word	0xfffffb7f
 800b948:	7ffffffe 	.word	0x7ffffffe
 800b94c:	7fffffff 	.word	0x7fffffff

0800b950 <__swsetup_r>:
 800b950:	4b30      	ldr	r3, [pc, #192]	; (800ba14 <__swsetup_r+0xc4>)
 800b952:	b570      	push	{r4, r5, r6, lr}
 800b954:	0005      	movs	r5, r0
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	000c      	movs	r4, r1
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d004      	beq.n	800b968 <__swsetup_r+0x18>
 800b95e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <__swsetup_r+0x18>
 800b964:	f7fb fe48 	bl	80075f8 <__sinit>
 800b968:	230c      	movs	r3, #12
 800b96a:	5ee2      	ldrsh	r2, [r4, r3]
 800b96c:	b293      	uxth	r3, r2
 800b96e:	0711      	lsls	r1, r2, #28
 800b970:	d423      	bmi.n	800b9ba <__swsetup_r+0x6a>
 800b972:	06d9      	lsls	r1, r3, #27
 800b974:	d407      	bmi.n	800b986 <__swsetup_r+0x36>
 800b976:	2309      	movs	r3, #9
 800b978:	2001      	movs	r0, #1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	3337      	adds	r3, #55	; 0x37
 800b97e:	4313      	orrs	r3, r2
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	4240      	negs	r0, r0
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	075b      	lsls	r3, r3, #29
 800b988:	d513      	bpl.n	800b9b2 <__swsetup_r+0x62>
 800b98a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b98c:	2900      	cmp	r1, #0
 800b98e:	d008      	beq.n	800b9a2 <__swsetup_r+0x52>
 800b990:	0023      	movs	r3, r4
 800b992:	3340      	adds	r3, #64	; 0x40
 800b994:	4299      	cmp	r1, r3
 800b996:	d002      	beq.n	800b99e <__swsetup_r+0x4e>
 800b998:	0028      	movs	r0, r5
 800b99a:	f7fb fffb 	bl	8007994 <_free_r>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	6323      	str	r3, [r4, #48]	; 0x30
 800b9a2:	2224      	movs	r2, #36	; 0x24
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	4393      	bics	r3, r2
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	6063      	str	r3, [r4, #4]
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2308      	movs	r3, #8
 800b9b4:	89a2      	ldrh	r2, [r4, #12]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10b      	bne.n	800b9d8 <__swsetup_r+0x88>
 800b9c0:	21a0      	movs	r1, #160	; 0xa0
 800b9c2:	2280      	movs	r2, #128	; 0x80
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	0089      	lsls	r1, r1, #2
 800b9c8:	0092      	lsls	r2, r2, #2
 800b9ca:	400b      	ands	r3, r1
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <__swsetup_r+0x88>
 800b9d0:	0021      	movs	r1, r4
 800b9d2:	0028      	movs	r0, r5
 800b9d4:	f000 f8e8 	bl	800bba8 <__smakebuf_r>
 800b9d8:	220c      	movs	r2, #12
 800b9da:	5ea3      	ldrsh	r3, [r4, r2]
 800b9dc:	2001      	movs	r0, #1
 800b9de:	001a      	movs	r2, r3
 800b9e0:	b299      	uxth	r1, r3
 800b9e2:	4002      	ands	r2, r0
 800b9e4:	4203      	tst	r3, r0
 800b9e6:	d00f      	beq.n	800ba08 <__swsetup_r+0xb8>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	60a2      	str	r2, [r4, #8]
 800b9ec:	6962      	ldr	r2, [r4, #20]
 800b9ee:	4252      	negs	r2, r2
 800b9f0:	61a2      	str	r2, [r4, #24]
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	4282      	cmp	r2, r0
 800b9f8:	d1c4      	bne.n	800b984 <__swsetup_r+0x34>
 800b9fa:	0609      	lsls	r1, r1, #24
 800b9fc:	d5c2      	bpl.n	800b984 <__swsetup_r+0x34>
 800b9fe:	2240      	movs	r2, #64	; 0x40
 800ba00:	4313      	orrs	r3, r2
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	3801      	subs	r0, #1
 800ba06:	e7bd      	b.n	800b984 <__swsetup_r+0x34>
 800ba08:	0788      	lsls	r0, r1, #30
 800ba0a:	d400      	bmi.n	800ba0e <__swsetup_r+0xbe>
 800ba0c:	6962      	ldr	r2, [r4, #20]
 800ba0e:	60a2      	str	r2, [r4, #8]
 800ba10:	e7ef      	b.n	800b9f2 <__swsetup_r+0xa2>
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	200006b8 	.word	0x200006b8

0800ba18 <__fputwc>:
 800ba18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	000e      	movs	r6, r1
 800ba1e:	0015      	movs	r5, r2
 800ba20:	9001      	str	r0, [sp, #4]
 800ba22:	f7fb fea5 	bl	8007770 <__locale_mb_cur_max>
 800ba26:	0004      	movs	r4, r0
 800ba28:	2801      	cmp	r0, #1
 800ba2a:	d119      	bne.n	800ba60 <__fputwc+0x48>
 800ba2c:	1e73      	subs	r3, r6, #1
 800ba2e:	2bfe      	cmp	r3, #254	; 0xfe
 800ba30:	d816      	bhi.n	800ba60 <__fputwc+0x48>
 800ba32:	ab02      	add	r3, sp, #8
 800ba34:	711e      	strb	r6, [r3, #4]
 800ba36:	2700      	movs	r7, #0
 800ba38:	42a7      	cmp	r7, r4
 800ba3a:	d020      	beq.n	800ba7e <__fputwc+0x66>
 800ba3c:	ab03      	add	r3, sp, #12
 800ba3e:	5dd9      	ldrb	r1, [r3, r7]
 800ba40:	68ab      	ldr	r3, [r5, #8]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	60ab      	str	r3, [r5, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	da04      	bge.n	800ba54 <__fputwc+0x3c>
 800ba4a:	69aa      	ldr	r2, [r5, #24]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	db19      	blt.n	800ba84 <__fputwc+0x6c>
 800ba50:	290a      	cmp	r1, #10
 800ba52:	d017      	beq.n	800ba84 <__fputwc+0x6c>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	7019      	strb	r1, [r3, #0]
 800ba5c:	3701      	adds	r7, #1
 800ba5e:	e7eb      	b.n	800ba38 <__fputwc+0x20>
 800ba60:	002b      	movs	r3, r5
 800ba62:	0032      	movs	r2, r6
 800ba64:	9801      	ldr	r0, [sp, #4]
 800ba66:	335c      	adds	r3, #92	; 0x5c
 800ba68:	a903      	add	r1, sp, #12
 800ba6a:	f000 f857 	bl	800bb1c <_wcrtomb_r>
 800ba6e:	0004      	movs	r4, r0
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d1e0      	bne.n	800ba36 <__fputwc+0x1e>
 800ba74:	2340      	movs	r3, #64	; 0x40
 800ba76:	0006      	movs	r6, r0
 800ba78:	89aa      	ldrh	r2, [r5, #12]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	81ab      	strh	r3, [r5, #12]
 800ba7e:	0030      	movs	r0, r6
 800ba80:	b005      	add	sp, #20
 800ba82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba84:	002a      	movs	r2, r5
 800ba86:	9801      	ldr	r0, [sp, #4]
 800ba88:	f000 f8cc 	bl	800bc24 <__swbuf_r>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d1e5      	bne.n	800ba5c <__fputwc+0x44>
 800ba90:	0006      	movs	r6, r0
 800ba92:	e7f4      	b.n	800ba7e <__fputwc+0x66>

0800ba94 <_fputwc_r>:
 800ba94:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ba96:	b570      	push	{r4, r5, r6, lr}
 800ba98:	0005      	movs	r5, r0
 800ba9a:	000e      	movs	r6, r1
 800ba9c:	0014      	movs	r4, r2
 800ba9e:	07db      	lsls	r3, r3, #31
 800baa0:	d405      	bmi.n	800baae <_fputwc_r+0x1a>
 800baa2:	8993      	ldrh	r3, [r2, #12]
 800baa4:	059b      	lsls	r3, r3, #22
 800baa6:	d402      	bmi.n	800baae <_fputwc_r+0x1a>
 800baa8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800baaa:	f7fb fef5 	bl	8007898 <__retarget_lock_acquire_recursive>
 800baae:	230c      	movs	r3, #12
 800bab0:	5ee2      	ldrsh	r2, [r4, r3]
 800bab2:	2380      	movs	r3, #128	; 0x80
 800bab4:	019b      	lsls	r3, r3, #6
 800bab6:	421a      	tst	r2, r3
 800bab8:	d104      	bne.n	800bac4 <_fputwc_r+0x30>
 800baba:	431a      	orrs	r2, r3
 800babc:	81a2      	strh	r2, [r4, #12]
 800babe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bac0:	4313      	orrs	r3, r2
 800bac2:	6663      	str	r3, [r4, #100]	; 0x64
 800bac4:	0028      	movs	r0, r5
 800bac6:	0022      	movs	r2, r4
 800bac8:	0031      	movs	r1, r6
 800baca:	f7ff ffa5 	bl	800ba18 <__fputwc>
 800bace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad0:	0005      	movs	r5, r0
 800bad2:	07db      	lsls	r3, r3, #31
 800bad4:	d405      	bmi.n	800bae2 <_fputwc_r+0x4e>
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	059b      	lsls	r3, r3, #22
 800bada:	d402      	bmi.n	800bae2 <_fputwc_r+0x4e>
 800badc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bade:	f7fb fedc 	bl	800789a <__retarget_lock_release_recursive>
 800bae2:	0028      	movs	r0, r5
 800bae4:	bd70      	pop	{r4, r5, r6, pc}

0800bae6 <memmove>:
 800bae6:	b510      	push	{r4, lr}
 800bae8:	4288      	cmp	r0, r1
 800baea:	d902      	bls.n	800baf2 <memmove+0xc>
 800baec:	188b      	adds	r3, r1, r2
 800baee:	4298      	cmp	r0, r3
 800baf0:	d303      	bcc.n	800bafa <memmove+0x14>
 800baf2:	2300      	movs	r3, #0
 800baf4:	e007      	b.n	800bb06 <memmove+0x20>
 800baf6:	5c8b      	ldrb	r3, [r1, r2]
 800baf8:	5483      	strb	r3, [r0, r2]
 800bafa:	3a01      	subs	r2, #1
 800bafc:	d2fb      	bcs.n	800baf6 <memmove+0x10>
 800bafe:	bd10      	pop	{r4, pc}
 800bb00:	5ccc      	ldrb	r4, [r1, r3]
 800bb02:	54c4      	strb	r4, [r0, r3]
 800bb04:	3301      	adds	r3, #1
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d1fa      	bne.n	800bb00 <memmove+0x1a>
 800bb0a:	e7f8      	b.n	800bafe <memmove+0x18>

0800bb0c <abort>:
 800bb0c:	2006      	movs	r0, #6
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	f000 f906 	bl	800bd20 <raise>
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f7 fbf7 	bl	8003308 <_exit>
	...

0800bb1c <_wcrtomb_r>:
 800bb1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb1e:	001d      	movs	r5, r3
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <_wcrtomb_r+0x2c>)
 800bb22:	0004      	movs	r4, r0
 800bb24:	33e0      	adds	r3, #224	; 0xe0
 800bb26:	681e      	ldr	r6, [r3, #0]
 800bb28:	002b      	movs	r3, r5
 800bb2a:	2900      	cmp	r1, #0
 800bb2c:	d101      	bne.n	800bb32 <_wcrtomb_r+0x16>
 800bb2e:	000a      	movs	r2, r1
 800bb30:	a901      	add	r1, sp, #4
 800bb32:	0020      	movs	r0, r4
 800bb34:	47b0      	blx	r6
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d103      	bne.n	800bb42 <_wcrtomb_r+0x26>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	338a      	adds	r3, #138	; 0x8a
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	b004      	add	sp, #16
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	2000042c 	.word	0x2000042c

0800bb4c <__swhatbuf_r>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	000e      	movs	r6, r1
 800bb50:	001d      	movs	r5, r3
 800bb52:	230e      	movs	r3, #14
 800bb54:	5ec9      	ldrsh	r1, [r1, r3]
 800bb56:	0014      	movs	r4, r2
 800bb58:	b096      	sub	sp, #88	; 0x58
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	da09      	bge.n	800bb72 <__swhatbuf_r+0x26>
 800bb5e:	89b2      	ldrh	r2, [r6, #12]
 800bb60:	2380      	movs	r3, #128	; 0x80
 800bb62:	0011      	movs	r1, r2
 800bb64:	4019      	ands	r1, r3
 800bb66:	421a      	tst	r2, r3
 800bb68:	d018      	beq.n	800bb9c <__swhatbuf_r+0x50>
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	3b40      	subs	r3, #64	; 0x40
 800bb6e:	0008      	movs	r0, r1
 800bb70:	e010      	b.n	800bb94 <__swhatbuf_r+0x48>
 800bb72:	466a      	mov	r2, sp
 800bb74:	f000 f8de 	bl	800bd34 <_fstat_r>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	dbf0      	blt.n	800bb5e <__swhatbuf_r+0x12>
 800bb7c:	23f0      	movs	r3, #240	; 0xf0
 800bb7e:	9901      	ldr	r1, [sp, #4]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	4019      	ands	r1, r3
 800bb84:	4b07      	ldr	r3, [pc, #28]	; (800bba4 <__swhatbuf_r+0x58>)
 800bb86:	2080      	movs	r0, #128	; 0x80
 800bb88:	18c9      	adds	r1, r1, r3
 800bb8a:	424b      	negs	r3, r1
 800bb8c:	4159      	adcs	r1, r3
 800bb8e:	2380      	movs	r3, #128	; 0x80
 800bb90:	0100      	lsls	r0, r0, #4
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	6029      	str	r1, [r5, #0]
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	b016      	add	sp, #88	; 0x58
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	2380      	movs	r3, #128	; 0x80
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	e7e5      	b.n	800bb6e <__swhatbuf_r+0x22>
 800bba2:	46c0      	nop			; (mov r8, r8)
 800bba4:	ffffe000 	.word	0xffffe000

0800bba8 <__smakebuf_r>:
 800bba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbaa:	2602      	movs	r6, #2
 800bbac:	898b      	ldrh	r3, [r1, #12]
 800bbae:	0005      	movs	r5, r0
 800bbb0:	000c      	movs	r4, r1
 800bbb2:	4233      	tst	r3, r6
 800bbb4:	d006      	beq.n	800bbc4 <__smakebuf_r+0x1c>
 800bbb6:	0023      	movs	r3, r4
 800bbb8:	3343      	adds	r3, #67	; 0x43
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	6163      	str	r3, [r4, #20]
 800bbc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bbc4:	466a      	mov	r2, sp
 800bbc6:	ab01      	add	r3, sp, #4
 800bbc8:	f7ff ffc0 	bl	800bb4c <__swhatbuf_r>
 800bbcc:	9900      	ldr	r1, [sp, #0]
 800bbce:	0007      	movs	r7, r0
 800bbd0:	0028      	movs	r0, r5
 800bbd2:	f7fb fa5d 	bl	8007090 <_malloc_r>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d108      	bne.n	800bbec <__smakebuf_r+0x44>
 800bbda:	220c      	movs	r2, #12
 800bbdc:	5ea3      	ldrsh	r3, [r4, r2]
 800bbde:	059a      	lsls	r2, r3, #22
 800bbe0:	d4ef      	bmi.n	800bbc2 <__smakebuf_r+0x1a>
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	4393      	bics	r3, r2
 800bbe6:	431e      	orrs	r6, r3
 800bbe8:	81a6      	strh	r6, [r4, #12]
 800bbea:	e7e4      	b.n	800bbb6 <__smakebuf_r+0xe>
 800bbec:	2380      	movs	r3, #128	; 0x80
 800bbee:	89a2      	ldrh	r2, [r4, #12]
 800bbf0:	6020      	str	r0, [r4, #0]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	9b00      	ldr	r3, [sp, #0]
 800bbf8:	6120      	str	r0, [r4, #16]
 800bbfa:	6163      	str	r3, [r4, #20]
 800bbfc:	9b01      	ldr	r3, [sp, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00c      	beq.n	800bc1c <__smakebuf_r+0x74>
 800bc02:	0028      	movs	r0, r5
 800bc04:	230e      	movs	r3, #14
 800bc06:	5ee1      	ldrsh	r1, [r4, r3]
 800bc08:	f000 f8a6 	bl	800bd58 <_isatty_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d005      	beq.n	800bc1c <__smakebuf_r+0x74>
 800bc10:	2303      	movs	r3, #3
 800bc12:	89a2      	ldrh	r2, [r4, #12]
 800bc14:	439a      	bics	r2, r3
 800bc16:	3b02      	subs	r3, #2
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	433b      	orrs	r3, r7
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	e7ce      	b.n	800bbc2 <__smakebuf_r+0x1a>

0800bc24 <__swbuf_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	0006      	movs	r6, r0
 800bc28:	000d      	movs	r5, r1
 800bc2a:	0014      	movs	r4, r2
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d004      	beq.n	800bc3a <__swbuf_r+0x16>
 800bc30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <__swbuf_r+0x16>
 800bc36:	f7fb fcdf 	bl	80075f8 <__sinit>
 800bc3a:	69a3      	ldr	r3, [r4, #24]
 800bc3c:	60a3      	str	r3, [r4, #8]
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	071b      	lsls	r3, r3, #28
 800bc42:	d52e      	bpl.n	800bca2 <__swbuf_r+0x7e>
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d02b      	beq.n	800bca2 <__swbuf_r+0x7e>
 800bc4a:	230c      	movs	r3, #12
 800bc4c:	5ee2      	ldrsh	r2, [r4, r3]
 800bc4e:	2380      	movs	r3, #128	; 0x80
 800bc50:	019b      	lsls	r3, r3, #6
 800bc52:	b2ef      	uxtb	r7, r5
 800bc54:	b2ed      	uxtb	r5, r5
 800bc56:	421a      	tst	r2, r3
 800bc58:	d02c      	beq.n	800bcb4 <__swbuf_r+0x90>
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	1ac0      	subs	r0, r0, r3
 800bc60:	6963      	ldr	r3, [r4, #20]
 800bc62:	4283      	cmp	r3, r0
 800bc64:	dc05      	bgt.n	800bc72 <__swbuf_r+0x4e>
 800bc66:	0021      	movs	r1, r4
 800bc68:	0030      	movs	r0, r6
 800bc6a:	f7fd fde7 	bl	800983c <_fflush_r>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d11d      	bne.n	800bcae <__swbuf_r+0x8a>
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	3001      	adds	r0, #1
 800bc76:	3b01      	subs	r3, #1
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	6022      	str	r2, [r4, #0]
 800bc80:	701f      	strb	r7, [r3, #0]
 800bc82:	6963      	ldr	r3, [r4, #20]
 800bc84:	4283      	cmp	r3, r0
 800bc86:	d004      	beq.n	800bc92 <__swbuf_r+0x6e>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	07db      	lsls	r3, r3, #31
 800bc8c:	d507      	bpl.n	800bc9e <__swbuf_r+0x7a>
 800bc8e:	2d0a      	cmp	r5, #10
 800bc90:	d105      	bne.n	800bc9e <__swbuf_r+0x7a>
 800bc92:	0021      	movs	r1, r4
 800bc94:	0030      	movs	r0, r6
 800bc96:	f7fd fdd1 	bl	800983c <_fflush_r>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d107      	bne.n	800bcae <__swbuf_r+0x8a>
 800bc9e:	0028      	movs	r0, r5
 800bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca2:	0021      	movs	r1, r4
 800bca4:	0030      	movs	r0, r6
 800bca6:	f7ff fe53 	bl	800b950 <__swsetup_r>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0cd      	beq.n	800bc4a <__swbuf_r+0x26>
 800bcae:	2501      	movs	r5, #1
 800bcb0:	426d      	negs	r5, r5
 800bcb2:	e7f4      	b.n	800bc9e <__swbuf_r+0x7a>
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	4a02      	ldr	r2, [pc, #8]	; (800bcc4 <__swbuf_r+0xa0>)
 800bcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	6663      	str	r3, [r4, #100]	; 0x64
 800bcc0:	e7cb      	b.n	800bc5a <__swbuf_r+0x36>
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	ffffdfff 	.word	0xffffdfff

0800bcc8 <_raise_r>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	0004      	movs	r4, r0
 800bccc:	000d      	movs	r5, r1
 800bcce:	291f      	cmp	r1, #31
 800bcd0:	d904      	bls.n	800bcdc <_raise_r+0x14>
 800bcd2:	2316      	movs	r3, #22
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	4240      	negs	r0, r0
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	0003      	movs	r3, r0
 800bcde:	33fc      	adds	r3, #252	; 0xfc
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d004      	beq.n	800bcf0 <_raise_r+0x28>
 800bce6:	008a      	lsls	r2, r1, #2
 800bce8:	189b      	adds	r3, r3, r2
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	2a00      	cmp	r2, #0
 800bcee:	d108      	bne.n	800bd02 <_raise_r+0x3a>
 800bcf0:	0020      	movs	r0, r4
 800bcf2:	f000 f855 	bl	800bda0 <_getpid_r>
 800bcf6:	002a      	movs	r2, r5
 800bcf8:	0001      	movs	r1, r0
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	f000 f83e 	bl	800bd7c <_kill_r>
 800bd00:	e7eb      	b.n	800bcda <_raise_r+0x12>
 800bd02:	2000      	movs	r0, #0
 800bd04:	2a01      	cmp	r2, #1
 800bd06:	d0e8      	beq.n	800bcda <_raise_r+0x12>
 800bd08:	1c51      	adds	r1, r2, #1
 800bd0a:	d103      	bne.n	800bd14 <_raise_r+0x4c>
 800bd0c:	2316      	movs	r3, #22
 800bd0e:	3001      	adds	r0, #1
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	e7e2      	b.n	800bcda <_raise_r+0x12>
 800bd14:	2400      	movs	r4, #0
 800bd16:	0028      	movs	r0, r5
 800bd18:	601c      	str	r4, [r3, #0]
 800bd1a:	4790      	blx	r2
 800bd1c:	0020      	movs	r0, r4
 800bd1e:	e7dc      	b.n	800bcda <_raise_r+0x12>

0800bd20 <raise>:
 800bd20:	b510      	push	{r4, lr}
 800bd22:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <raise+0x10>)
 800bd24:	0001      	movs	r1, r0
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	f7ff ffce 	bl	800bcc8 <_raise_r>
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	46c0      	nop			; (mov r8, r8)
 800bd30:	200006b8 	.word	0x200006b8

0800bd34 <_fstat_r>:
 800bd34:	2300      	movs	r3, #0
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	4d06      	ldr	r5, [pc, #24]	; (800bd54 <_fstat_r+0x20>)
 800bd3a:	0004      	movs	r4, r0
 800bd3c:	0008      	movs	r0, r1
 800bd3e:	0011      	movs	r1, r2
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f7f7 fb30 	bl	80033a6 <_fstat>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d103      	bne.n	800bd52 <_fstat_r+0x1e>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d000      	beq.n	800bd52 <_fstat_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	20000bac 	.word	0x20000bac

0800bd58 <_isatty_r>:
 800bd58:	2300      	movs	r3, #0
 800bd5a:	b570      	push	{r4, r5, r6, lr}
 800bd5c:	4d06      	ldr	r5, [pc, #24]	; (800bd78 <_isatty_r+0x20>)
 800bd5e:	0004      	movs	r4, r0
 800bd60:	0008      	movs	r0, r1
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	f7f7 fb2d 	bl	80033c2 <_isatty>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d103      	bne.n	800bd74 <_isatty_r+0x1c>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d000      	beq.n	800bd74 <_isatty_r+0x1c>
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	bd70      	pop	{r4, r5, r6, pc}
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	20000bac 	.word	0x20000bac

0800bd7c <_kill_r>:
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	4d06      	ldr	r5, [pc, #24]	; (800bd9c <_kill_r+0x20>)
 800bd82:	0004      	movs	r4, r0
 800bd84:	0008      	movs	r0, r1
 800bd86:	0011      	movs	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f7 faad 	bl	80032e8 <_kill>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d103      	bne.n	800bd9a <_kill_r+0x1e>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d000      	beq.n	800bd9a <_kill_r+0x1e>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	20000bac 	.word	0x20000bac

0800bda0 <_getpid_r>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	f7f7 fa9b 	bl	80032dc <_getpid>
 800bda6:	bd10      	pop	{r4, pc}

0800bda8 <_init>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr

0800bdb4 <_fini>:
 800bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdba:	bc08      	pop	{r3}
 800bdbc:	469e      	mov	lr, r3
 800bdbe:	4770      	bx	lr
